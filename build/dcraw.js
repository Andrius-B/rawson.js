
(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE; // TODO: support asm
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+(((low)>>>(0))))+((+(((high)>>>(0))))*(+(4294967296)))) : ((+(((low)>>>(0))))+((+(((high)|(0))))*(+(4294967296))))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=((HEAP32[((tempDoublePtr)>>2)])|0),HEAP32[(((ptr)+(4))>>2)]=((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Compile with -s TOTAL_MEMORY=X with X higher than the current value.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max
var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
// === Body ===
assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);
STATICTOP += 345308;
assert(STATICTOP < TOTAL_MEMORY);
var _stdout;
var _stdin;
var _stderr;
allocate(4, "i8", ALLOC_NONE, 5242880);
allocate(4, "i8", ALLOC_NONE, 5242884);
allocate([13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63], "i8", ALLOC_NONE, 5242888);
allocate(4, "i8", ALLOC_NONE, 5242960);
allocate(4, "i8", ALLOC_NONE, 5242964);
allocate(4, "i8", ALLOC_NONE, 5242968);
allocate(128, "i8", ALLOC_NONE, 5242972);
allocate([232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59], "i8", ALLOC_NONE, 5243100);
allocate([254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16] /* \FE\FE\00\FF\00\01\F */, "i8", ALLOC_NONE, 5243132);
allocate(4, "i8", ALLOC_NONE, 5243516);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255] /* \FF\FF\FF\00\FF\01\0 */, "i8", ALLOC_NONE, 5243520);
allocate(4, "i8", ALLOC_NONE, 5243536);
allocate(16, "i8", ALLOC_NONE, 5243540);
allocate(4, "i8", ALLOC_NONE, 5243556);
allocate([255,255,255,255], "i8", ALLOC_NONE, 5243560);
allocate(4, "i8", ALLOC_NONE, 5243564);
allocate(4, "i8", ALLOC_NONE, 5243568);
allocate(4, "i8", ALLOC_NONE, 5243572);
allocate(4, "i8", ALLOC_NONE, 5243576);
allocate(4, "i8", ALLOC_NONE, 5243580);
allocate(4, "i8", ALLOC_NONE, 5243584);
allocate(4, "i8", ALLOC_NONE, 5243588);
allocate(4, "i8", ALLOC_NONE, 5243592);
allocate(440, "i8", ALLOC_NONE, 5243596);
allocate(4, "i8", ALLOC_NONE, 5244036);
allocate(4, "i8", ALLOC_NONE, 5244040);
allocate(4, "i8", ALLOC_NONE, 5244044);
allocate(4, "i8", ALLOC_NONE, 5244048);
allocate(4, "i8", ALLOC_NONE, 5244052);
allocate(4, "i8", ALLOC_NONE, 5244056);
allocate(4, "i8", ALLOC_NONE, 5244060);
allocate(4, "i8", ALLOC_NONE, 5244064);
allocate(4, "i8", ALLOC_NONE, 5244068);
allocate(4, "i8", ALLOC_NONE, 5244072);
allocate(4, "i8", ALLOC_NONE, 5244076);
allocate([10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,0] /* \0Aby Dave Coffin, d */, "i8", ALLOC_NONE, 5244080);
var _stdout = _stdout=allocate(4, "i8", ALLOC_STATIC);
var _stdin = _stdin=allocate(4, "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate(4, "i8", ALLOC_STATIC);
allocate(8, "i8", ALLOC_NONE, 5244124);
allocate(512, "i8", ALLOC_NONE, 5244132);
allocate(4, "i8", ALLOC_NONE, 5244644);
allocate([17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2], "i8", ALLOC_NONE, 5244648);
allocate([7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15,0,0,0,0,0], "i8", ALLOC_NONE, 5244684);
allocate([15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191], "i8", ALLOC_NONE, 5244724);
allocate(4, "i8", ALLOC_NONE, 5244916);
allocate(4, "i8", ALLOC_NONE, 5244920);
allocate(4, "i8", ALLOC_NONE, 5244924);
allocate(4, "i8", ALLOC_NONE, 5244928);
allocate(48, "i8", ALLOC_NONE, 5244932);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255], "i8", ALLOC_NONE, 5244980);
allocate(4, "i8", ALLOC_NONE, 5244996);
allocate(4, "i8", ALLOC_NONE, 5245000);
allocate(4, "i8", ALLOC_NONE, 5245004);
allocate(4, "i8", ALLOC_NONE, 5245008);
allocate([253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0], "i8", ALLOC_NONE, 5245012);
allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0], "i8", ALLOC_NONE, 5245060);
allocate([0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3], "i8", ALLOC_NONE, 5245092);
allocate(4, "i8", ALLOC_NONE, 5245604);
allocate(4, "i8", ALLOC_NONE, 5245608);
allocate(16, "i8", ALLOC_NONE, 5245612);
allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117], "i8", ALLOC_NONE, 5245628);
allocate(8, "i8", ALLOC_NONE, 5245700);
allocate([8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0], "i8", ALLOC_NONE, 5245708);
allocate([255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2], "i8", ALLOC_NONE, 5245748);
allocate(4, "i8", ALLOC_NONE, 5245772);
allocate(8, "i8", ALLOC_NONE, 5245776);
allocate(28, "i8", ALLOC_NONE, 5245784);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5245812);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,15,0,0], "i8", ALLOC_NONE, 5245836);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5245860);
allocate([74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0], "i8", ALLOC_NONE, 5245892);
allocate(156, "i8", ALLOC_NONE, 5245940);
allocate([193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47], "i8", ALLOC_NONE, 5246096);
allocate([37,250,0,0,40,250,0,0,39,250,0,0,41,250,0,0,255,255,255,255,255,255,255,255,42,250,0,0], "i8", ALLOC_NONE, 5246608);
allocate(4, "i8", ALLOC_NONE, 5246636);
allocate(16384, "i8", ALLOC_NONE, 5246640);
allocate(4, "i8", ALLOC_NONE, 5263024);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5263028);
allocate([8,0,0,0], "i8", ALLOC_NONE, 5263032);
allocate(4, "i8", ALLOC_NONE, 5263036);
allocate(4, "i8", ALLOC_NONE, 5263040);
allocate(4, "i8", ALLOC_NONE, 5263044);
allocate(4, "i8", ALLOC_NONE, 5263048);
allocate([0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0], "i8", ALLOC_NONE, 5263052);
allocate([0,85,170,255] /* \00U\AA\FF */, "i8", ALLOC_NONE, 5263244);
allocate([0,0,0,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5263248);
allocate(4, "i8", ALLOC_NONE, 5263376);
allocate(24, "i8", ALLOC_NONE, 5263380);
allocate(64, "i8", ALLOC_NONE, 5263404);
allocate(64, "i8", ALLOC_NONE, 5263468);
allocate(4, "i8", ALLOC_NONE, 5263532);
allocate(4, "i8", ALLOC_NONE, 5263536);
allocate(4, "i8", ALLOC_NONE, 5263540);
allocate(4, "i8", ALLOC_NONE, 5263544);
allocate([1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2] /* \01\02\04\05\07\08\0 */, "i8", ALLOC_NONE, 5263548);
allocate(4, "i8", ALLOC_NONE, 5263588);
allocate(4, "i8", ALLOC_NONE, 5263592);
allocate(128, "i8", ALLOC_NONE, 5263596);
allocate(64, "i8", ALLOC_NONE, 5263724);
allocate(4, "i8", ALLOC_NONE, 5263788);
allocate(4, "i8", ALLOC_NONE, 5263792);
allocate(4, "i8", ALLOC_NONE, 5263796);
allocate([48,49,50,0,49,48,50,0], "i8", ALLOC_NONE, 5263800);
allocate([1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37] /* \01\01\02\03\03\04\0 */, "i8", ALLOC_NONE, 5263808);
allocate([0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63], "i8", ALLOC_NONE, 5264068);
allocate([16,0,16,0,16,0], "i8", ALLOC_NONE, 5264092);
allocate([162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0], "i8", ALLOC_NONE, 5264100);
allocate([0,0,0,0,124,2,0,0,168,1,0,0,212,0,0,0], "i8", ALLOC_NONE, 5264116);
allocate(4, "i8", ALLOC_NONE, 5264132);
allocate([0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9], "i8", ALLOC_NONE, 5264136);
allocate(4, "i8", ALLOC_NONE, 5264188);
allocate(4, "i8", ALLOC_NONE, 5264192);
allocate(4, "i8", ALLOC_NONE, 5264196);
allocate(4, "i8", ALLOC_NONE, 5264200);
allocate(4, "i8", ALLOC_NONE, 5264204);
allocate(4, "i8", ALLOC_NONE, 5264208);
allocate(4, "i8", ALLOC_NONE, 5264212);
allocate(4, "i8", ALLOC_NONE, 5264216);
allocate([0,244,0,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,83,84,32,77,105,99,114,111,0,0,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,4,12,0,67,114,101,97,116,105,118,101,0,0,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,96,17,0,77,105,110,111,108,116,97,0,0,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,70,111,99,117,108,117,115,0,0,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,71,101,110,101,114,105,99,0,0,0,0,0,54,52,48,120,52,56,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,137,246,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,21,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,43,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,128,71,59,0,77,105,99,114,111,110,0,0,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,101,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,202,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,82,111,118,101,114,83,104,111,116,0,0,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,255,99,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,96,133,101,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,64,76,100,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,16,174,140,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,104,10,141,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,224,204,157,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,16,111,158,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,88,135,197,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,16,151,238,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,80,215,80,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,240,168,117,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,240,4,236,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,240,9,237,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,64,162,28,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,240,234,35,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,224,183,78,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,160,90,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,24,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,160,37,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,44,0,78,73,75,79,78,0,0,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,208,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,144,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,113,0,78,73,75,79,78,0,0,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,80,137,0,78,73,75,79,78,0,0,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,1,32,40,30,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,1,96,25,49,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,1,128,226,94,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,98,92,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,233,114,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,160,63,117,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,212,44,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,130,75,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,23,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,99,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,78,118,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,70,119,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,118,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,81,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,214,187,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,149,190,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,236,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,1,0,96,29,1,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,96,82,113,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,1,0,29,142,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,135,167,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,64,128,48,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,0,226,73,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,192,75,93,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,1,0,80,163,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,1,0,216,243,0,65,71,70,65,80,72,79,84,79,0,0,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,1,0,163,245,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,110,247,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,156,56,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,54,110,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,0,192,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,2,252,1,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,88,165,2,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5264220);
allocate([58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255], "i8", ALLOC_NONE, 5267388);
allocate(68, "i8", ALLOC_NONE, 5267664);
allocate(131072, "i8", ALLOC_NONE, 5267732);
allocate(4, "i8", ALLOC_NONE, 5398804);
allocate(4, "i8", ALLOC_NONE, 5398808);
allocate(4, "i8", ALLOC_NONE, 5398812);
allocate([0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, 5398816);
allocate(128, "i8", ALLOC_NONE, 5398832);
allocate(4, "i8", ALLOC_NONE, 5398960);
allocate(4, "i8", ALLOC_NONE, 5398964);
allocate(4, "i8", ALLOC_NONE, 5398968);
allocate([205,204,204,204,204,204,220,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5398972);
allocate(4, "i8", ALLOC_NONE, 5399020);
allocate(4, "i8", ALLOC_NONE, 5399024);
allocate(4, "i8", ALLOC_NONE, 5399028);
allocate([255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0], "i8", ALLOC_NONE, 5399032);
allocate(4096, "i8", ALLOC_NONE, 5399064);
allocate(4, "i8", ALLOC_NONE, 5403160);
allocate(4, "i8", ALLOC_NONE, 5403164);
allocate(4, "i8", ALLOC_NONE, 5403168);
allocate(4, "i8", ALLOC_NONE, 5403172);
allocate(24576, "i8", ALLOC_NONE, 5403176);
allocate(4, "i8", ALLOC_NONE, 5427752);
allocate([1,1,0,1,1,2,1,1,2,1,1,0,2,0,1,0,2,1,1,1,2,1,1,0,1,1,0,1,1,2,0,2,1,2,0,1], "i8", ALLOC_NONE, 5427756);
allocate([2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3], "i8", ALLOC_NONE, 5427792);
allocate(40, "i8", ALLOC_NONE, 5428048);
allocate(4, "i8", ALLOC_NONE, 5428088);
allocate(4, "i8", ALLOC_NONE, 5428092);
allocate(4, "i8", ALLOC_NONE, 5428096);
allocate(512, "i8", ALLOC_NONE, 5428100);
allocate(4, "i8", ALLOC_NONE, 5428612);
allocate(4, "i8", ALLOC_NONE, 5428616);
allocate(131072, "i8", ALLOC_NONE, 5428620);
allocate([0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255], "i8", ALLOC_NONE, 5559692);
allocate([0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255], "i8", ALLOC_NONE, 5560232);
allocate(6, "i8", ALLOC_NONE, 5560320);
allocate([64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63], "i8", ALLOC_NONE, 5560328);
allocate([27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63], "i8", ALLOC_NONE, 5560400);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5560472);
allocate([81,243,0,0,0,0,1,0,204,22,1,0], "i8", ALLOC_NONE, 5560544);
allocate([74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63], "i8", ALLOC_NONE, 5560556);
allocate([0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0], "i8", ALLOC_NONE, 5560628);
allocate([118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1], "i8", ALLOC_NONE, 5560708);
allocate([10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0], "i8", ALLOC_NONE, 5560724);
allocate(20, "i8", ALLOC_NONE, 5560848);
allocate(20, "i8", ALLOC_NONE, 5560868);
allocate([217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63], "i8", ALLOC_NONE, 5560888);
allocate(4, "i8", ALLOC_NONE, 5560960);
allocate(48, "i8", ALLOC_NONE, 5560964);
allocate([16,4,243,69], "i8", ALLOC_NONE, 5561012);
allocate(5, "i8", ALLOC_NONE, 5561016);
allocate(16, "i8", ALLOC_NONE, 5561024);
allocate(4, "i8", ALLOC_NONE, 5561040);
allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2], "i8", ALLOC_NONE, 5561044);
allocate([117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4], "i8", ALLOC_NONE, 5561084);
allocate([66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249], "i8", ALLOC_NONE, 5561100);
allocate(16, "i8", ALLOC_NONE, 5561244);
allocate([0,0,128,63], "i8", ALLOC_NONE, 5561260);
allocate([0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,215,179,221,63,215,179,221,191,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561264);
allocate([0,0,128,63,215,179,93,63,0,0,0,191,0,0,0,0,0,0,128,63,215,179,93,191,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561392);
allocate(4, "i8", ALLOC_NONE, 5561520);
allocate(64, "i8", ALLOC_NONE, 5561524);
allocate(4, "i8", ALLOC_NONE, 5561588);
allocate([0,0,0,0,0,0,0,0,174,44,78,241,165,251,151,246,186,38,193,9,53,251,247,8,180,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,235,233,231,242,102,9,74,31,97,254,254,27,147,5,30,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,38,127,245,224,250,85,233,8,51,252,11,122,246,3,12,71,34,0,0,0,0,0,0,0,0,0,0,0,0,160,15,44,24,195,250,134,252,0,228,153,56,121,11,176,245,156,12,35,33,0,0,0,0,0,0,0,0,0,0,0,0,128,60,66,26,133,253,61,252,65,239,172,48,236,7,116,252,114,8,36,22,0,0,0,0,0,0,0,0,0,0,0,0,240,60,108,18,91,2,194,252,138,225,114,60,176,9,40,250,145,7,251,25,0,0,0,0,0,0,0,0,0,0,0,0,108,14,203,24,33,254,52,252,151,223,82,62,176,9,80,248,83,8,225,29,0,0,0,0,0,0,0,0,0,0,0,0,130,60,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,0,0,0,0,0,0,16,53,188,26,28,252,168,252,220,240,241,45,92,9,175,253,236,6,54,24,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,55,55,236,154,250,106,230,41,57,247,7,169,249,32,7,161,25,0,0,0,0,0,0,0,0,0,0,0,0,255,15,199,25,231,253,133,252,121,224,167,61,120,9,65,248,186,8,38,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,24,209,254,24,252,56,225,5,61,92,9,78,249,112,7,134,27,0,0,0,0,0,0,0,0,0,0,0,0,96,63,183,23,21,253,168,252,27,226,5,60,137,9,23,248,249,9,147,28,0,0,0,0,0,0,0,0,0,0,0,0,147,61,56,19,104,2,175,253,163,230,140,54,224,10,18,249,106,12,93,27,0,0,0,0,0,0,0,0,0,0,0,0,247,47,63,26,30,252,99,252,200,238,138,48,163,8,137,252,81,8,163,23,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,130,23,151,253,59,252,59,222,9,62,159,11,6,250,183,6,218,29,0,0,0,0,0,0,0,0,0,0,0,0,142,14,142,27,35,250,34,252,36,224,184,60,252,10,2,251,134,5,116,30,0,0,0,0,0,0,0,0,0,0,0,0,13,57,152,22,250,254,203,252,141,226,216,58,112,10,66,248,121,10,3,29,0,0,0,0,0,0,0,0,0,0,0,0,121,52,155,18,200,2,122,253,91,229,63,56,80,10,127,248,204,12,161,25,0,0,0,0,0,0,0,0,0,0,0,0,215,61,29,27,116,251,167,252,15,241,77,45,230,9,96,254,4,6,151,23,0,0,0,0,0,0,0,0,0,0,0,0,16,53,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,0,0,0,0,0,0,77,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,67,14,115,26,141,251,47,252,118,225,19,59,112,11,36,251,157,5,109,29,0,0,0,0,0,0,0,0,0,0,0,0,16,53,44,25,120,252,131,252,45,238,20,48,231,9,121,252,224,7,72,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,176,59,227,22,45,255,94,252,193,223,145,62,49,9,60,249,95,7,24,29,0,0,0,0,0,0,0,0,0,0,0,0,128,14,117,25,166,253,157,252,12,224,54,62,74,9,174,249,235,6,209,29,0,0,0,0,0,0,0,0,0,0,0,0,176,59,126,23,36,255,229,252,243,239,238,46,57,9,207,253,32,7,155,22,0,0,0,0,0,0,0,0,0,0,0,0,176,59,147,24,228,253,48,252,98,223,17,63,7,9,78,249,66,7,158,28,0,0,0,0,0,0,0,0,0,0,0,0,128,14,96,24,46,254,202,252,12,224,209,61,196,9,247,248,146,7,106,31,0,0,0,0,0,0,0,0,0,0,0,0,128,14,120,24,186,253,44,253,136,223,76,62,200,9,48,249,127,7,216,33,0,0,0,0,0,0,0,0,0,0,0,0,32,14,22,17,47,14,49,249,160,226,108,59,168,9,180,244,48,14,225,31,0,0,0,0,0,0,0,0,0,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,0,0,0,0,0,0,32,14,150,26,77,255,4,252,95,224,31,64,151,6,61,243,140,16,10,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,235,118,38,240,6,108,13,172,2,99,15,92,234,151,38,56,24,132,250,167,43,217,0,0,0,0,0,0,0,0,0,63,237,3,37,160,7,110,11,75,6,254,15,117,235,180,39,59,23,238,249,131,42,35,2,0,0,0,0,0,0,0,0,85,43,190,240,252,251,73,236,204,48,63,11,21,252,214,6,185,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,47,47,237,211,251,180,249,136,38,1,8,158,255,82,3,119,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,51,131,234,32,251,28,250,130,38,143,7,242,254,59,4,14,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,29,3,247,201,253,40,240,192,44,159,11,34,255,204,2,85,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,28,25,251,237,251,8,240,219,47,0,8,148,252,154,7,173,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,237,251,36,124,8,135,18,139,251,248,16,230,235,180,38,189,23,226,249,43,43,45,2,0,0,0,0,0,0,0,0,127,35,123,245,231,251,197,229,46,56,233,9,13,247,3,11,110,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,35,35,245,207,251,83,230,109,55,45,10,4,247,28,11,240,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,38,200,244,91,252,172,232,37,54,253,8,170,249,24,9,44,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,38,65,241,153,252,67,226,215,57,0,12,88,250,25,5,61,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,28,163,247,170,253,11,234,198,51,65,10,118,250,160,6,111,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,39,62,242,25,252,37,226,13,59,170,10,3,253,49,3,155,28,0,0,0,0,0,0,0,0,0,0,34,0,0,0,197,239,90,38,249,5,99,15,231,255,170,17,111,234,142,38,210,25,66,247,121,42,62,5,0,0,0,0,0,0,0,0,157,236,168,38,187,8,34,18,37,252,198,16,214,235,27,39,227,22,22,249,222,43,65,2,0,0,0,0,0,0,0,0,70,41,188,241,151,251,104,230,70,57,214,7,107,247,21,10,246,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,33,73,246,84,252,43,229,151,55,84,11,242,246,13,11,53,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,31,227,246,69,252,230,229,94,55,191,10,227,247,37,10,105,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,34,245,245,161,252,52,231,154,55,240,8,20,250,124,8,169,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,34,78,246,227,252,132,225,43,60,13,10,114,250,204,7,170,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,38,30,241,192,252,53,228,127,56,90,11,123,252,221,3,209,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,48,104,236,231,251,115,249,174,38,30,8,173,255,84,3,75,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,52,248,232,1,251,44,251,126,37,139,7,76,255,233,3,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,31,251,245,132,253,199,244,201,41,209,9,180,0,155,2,115,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,31,173,245,114,253,57,241,222,43,114,11,50,255,178,2,98,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,25,253,254,10,254,170,232,230,50,237,12,204,254,34,4,106,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,48,111,237,33,251,194,247,195,41,93,6,100,254,87,6,62,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,48,201,238,38,251,136,245,36,40,101,9,146,252,167,8,126,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,60,254,230,200,249,11,235,142,51,120,8,236,250,32,7,211,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,59,207,231,234,249,227,239,84,47,218,7,136,252,103,6,100,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,55,68,235,35,249,57,232,136,56,81,6,113,247,33,12,228,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,51,47,235,146,250,238,241,138,45,152,7,180,249,47,11,21,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,36,244,65,252,235,245,175,41,119,7,241,251,190,7,78,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,56,150,234,246,249,14,251,71,38,188,5,240,251,120,7,226,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,54,177,235,90,250,152,237,182,48,195,8,250,250,236,7,228,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,234,9,250,57,248,223,41,249,4,122,251,137,7,253,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,54,44,236,89,250,131,250,125,39,17,5,12,255,68,7,103,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,45,172,240,152,251,152,236,154,50,223,7,204,249,88,10,38,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,42,223,240,181,251,217,236,162,53,151,4,37,249,167,14,24,18,0,0,0,0,0,0,0,0,0,0,128,0,255,15,62,38,246,242,165,253,239,246,238,39,51,8,168,254,249,4,191,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,78,57,239,89,254,156,240,226,59,145,15,232,254,6,19,72,38,0,0,0,0,0,0,0,0,0,0,0,0,30,15,97,30,5,5,227,251,192,219,159,64,100,11,163,241,47,22,148,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,26,170,248,36,253,19,223,140,62,4,10,64,253,80,2,233,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,43,208,240,160,251,176,227,64,59,160,8,5,250,229,8,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,35,34,246,202,251,219,226,223,58,14,10,26,248,136,9,191,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,233,15,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,45,253,238,215,251,132,230,199,53,242,11,70,250,192,7,157,23,0,0,0,0,0,0,0,0,0,0,0,2,255,63,137,44,110,238,224,250,32,236,207,49,53,10,186,252,32,6,53,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,128,0,0,0,204,48,174,237,134,250,135,228,63,60,111,6,29,250,63,8,17,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,46,252,237,242,250,33,221,72,66,196,7,184,247,181,10,70,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,34,84,245,5,252,220,227,221,58,228,8,90,249,30,9,70,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,49,233,236,135,250,51,229,148,58,170,7,106,247,222,10,179,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,39,78,242,224,250,15,228,203,58,190,8,45,248,95,9,81,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,83,201,213,95,250,228,246,103,41,207,7,33,1,107,3,23,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,104,15,152,48,142,240,97,251,157,251,202,37,172,6,173,255,78,6,246,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,47,151,238,211,251,86,236,74,50,96,9,229,252,188,6,248,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,27,121,250,64,253,188,235,197,53,144,5,32,251,182,10,150,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,54,89,232,221,252,47,254,191,38,130,2,73,8,82,0,11,5,0,0,0,0,0,0,0,0,0,0,8,0,0,0,115,68,37,237,50,246,244,2,98,33,119,255,225,23,113,6,202,8,0,0,0,0,0,0,0,0,0,0,8,0,0,0,140,80,108,226,15,245,153,255,89,39,116,254,223,13,23,255,172,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,42,196,248,124,253,255,249,75,43,228,1,39,9,116,2,168,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,38,116,245,84,252,82,246,187,47,206,0,193,7,122,2,7,4,0,0,0,0,0,0,0,0,0,0,178,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,65,92,65,216,179,243,250,247,229,45,240,254,26,10,23,254,125,13,0,0,0,0,0,0,0,0,0,0,176,0,0,0,39,51,169,231,154,0,189,47,235,255,167,247,127,3,250,17,210,8,0,0,0,0,0,0,0,0,0,0,173,0,0,0,68,71,49,231,77,245,233,252,185,43,247,253,127,14,127,255,242,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,45,4,233,182,3,84,37,54,7,250,250,5,252,77,24,168,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,64,91,231,125,250,8,239,99,54,67,1,237,8,18,1,110,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,30,56,12,248,252,116,222,74,64,247,7,105,246,166,15,54,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,64,84,232,66,250,29,242,237,50,217,1,241,9,122,0,84,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,82,132,223,154,244,109,252,11,43,91,255,149,13,76,255,114,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,37,14,243,201,252,213,235,151,49,208,10,194,250,51,7,156,23,0,0,0,0,0,0,0,0,0,0,0,0,124,15,15,41,4,241,178,251,222,228,251,56,254,9,55,250,0,7,102,24,0,0,0,0,0,0,0,0,0,0,0,0,255,15,5,50,202,237,160,250,200,226,163,59,56,9,166,249,146,8,224,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,44,25,242,179,251,203,240,115,46,209,8,66,251,94,9,44,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,49,147,237,92,251,169,250,227,35,22,10,18,1,92,3,59,17,0,0,0,0,0,0,0,0,0,0,0,0,237,15,229,45,48,240,227,250,181,248,76,41,209,5,118,255,169,5,170,17,0,0,0,0,0,0,0,0,0,0,0,0,241,14,1,44,66,239,32,252,170,237,55,48,87,10,190,251,243,5,71,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,29,19,10,173,250,15,222,77,65,223,7,128,241,53,23,73,23,0,0,0,0,0,0,0,0,0,0,110,0,0,0,55,65,79,241,153,247,155,0,210,37,163,0,105,13,183,3,40,19,0,0,0,0,0,0,0,0,0,0,0,0,125,15,23,35,130,244,61,252,100,230,140,56,189,8,134,246,71,11,78,31,0,0,0,0,0,0,0,0,0,0,0,0,125,15,104,44,202,240,38,251,135,230,22,56,35,9,85,246,240,11,117,28,0,0,0,0,0,0,0,0,0,0,0,0,125,15,184,35,39,245,26,252,236,229,220,56,233,8,90,246,203,11,64,30,0,0,0,0,0,0,0,0,0,0,0,0,139,15,58,36,13,246,113,251,228,223,195,63,151,7,31,247,160,10,148,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,73,246,38,252,80,224,175,60,211,10,71,251,44,5,63,30,0,0,0,0,0,0,0,0,0,0,0,0,143,15,137,35,90,245,227,251,119,224,146,60,202,10,58,252,213,3,83,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,251,15,44,40,45,243,194,251,235,224,146,61,12,9,195,252,114,3,244,25,0,0,0,0,0,0,0,0,0,0,0,0,251,15,255,39,224,243,181,251,155,224,111,61,147,9,97,252,157,3,215,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,34,35,252,247,251,36,243,99,45,138,6,107,253,106,12,96,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,23,91,252,242,252,233,220,79,65,50,9,134,250,175,5,64,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,29,138,247,98,252,226,226,232,60,142,7,183,246,248,10,158,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,30,59,247,49,252,102,220,90,67,83,7,137,245,239,11,73,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,65,138,237,163,247,69,226,97,61,180,7,226,244,166,13,49,37,0,0,0,0,0,0,0,0,0,0,0,0,188,15,175,32,56,247,5,253,202,221,63,64,118,9,9,250,14,6,117,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,22,123,252,153,253,110,222,233,64,232,7,97,244,24,16,174,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,39,47,245,25,251,147,223,28,62,248,9,227,252,168,2,236,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,30,137,247,211,252,49,235,94,51,104,9,248,250,179,9,32,31,0,0,0,0,0,0,0,0,0,0,0,0,185,15,101,27,128,250,133,253,108,235,102,50,80,10,66,250,241,10,211,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,35,56,248,53,253,239,222,174,63,207,8,127,245,145,12,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,28,62,248,120,253,107,224,195,60,158,10,134,247,208,9,33,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,34,154,246,74,253,246,236,59,49,237,9,108,253,229,5,163,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,34,17,246,113,252,191,220,32,66,103,8,207,250,189,4,1,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,27,124,249,218,252,54,224,132,61,239,9,150,252,82,3,217,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,127,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,230,61,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,7,62,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,30,196,247,213,253,251,236,195,48,121,10,104,251,21,8,77,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,33,150,246,141,252,161,220,44,66,123,8,46,250,83,5,72,33,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,126,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,86,51,200,239,196,249,209,237,86,48,234,8,23,249,136,10,55,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,118,38,219,247,5,252,50,243,101,43,122,8,250,252,86,8,113,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,133,36,85,244,23,252,17,225,150,61,218,8,206,247,120,10,183,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,235,214,44,64,9,161,21,143,255,76,12,151,236,37,39,150,22,10,3,68,35,211,0,0,0,0,0,0,0,0,0,162,30,240,246,32,252,38,224,102,61,39,10,182,251,62,5,136,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,33,233,245,244,251,141,224,223,60,83,10,229,250,127,5,186,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,31,246,246,111,252,253,222,146,61,78,11,94,250,240,5,186,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,37,217,242,110,252,158,237,40,49,64,9,187,252,200,3,169,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,44,161,241,169,251,159,243,231,43,154,8,233,252,100,5,103,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,43,83,239,0,252,72,248,198,39,40,8,242,253,239,4,117,17,0,0,0,0,0,0,0,0,0,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,35,149,245,159,252,14,238,36,48,248,9,69,253,250,6,116,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,41,204,243,7,251,65,232,214,55,109,7,139,249,2,9,93,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,0,0,0,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,0,0,0,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,0,0,0,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,0,0,0,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,0,0,0,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,0,0,0,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,0,0,0,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,0,0,0,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,0,0,0,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,0,0,0,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,0,0,0,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,0,0,0,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,0,0,0,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,0,0,0,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,0,0,0,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,0,0,0,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,0,0,0,0,143,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,0,0,0,0,143,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,0,0,0,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,143,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,0,0,0,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,0,0,0,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,0,0,0,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,0,0,0,0,144,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,0,0,0,0,143,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0].concat([0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,0,0,0,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,0,0,0,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,255,255,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,0,0,0,0,0,2,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,0,0,0,0,200,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,0,0,0,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,126,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,0,0,0,0,128,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,0,0,0,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0])
, "i8", ALLOC_NONE, 5561592);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5573368);
allocate([65,79,67,0] /* AOC\00 */, "i8", ALLOC_NONE, 5573400);
allocate([69,80,83,79,78,0] /* EPSON\00 */, "i8", ALLOC_NONE, 5573404);
allocate([82,105,99,111,104,0] /* Ricoh\00 */, "i8", ALLOC_NONE, 5573412);
allocate([76,69,73,67,65,0] /* LEICA\00 */, "i8", ALLOC_NONE, 5573420);
allocate([79,76,89,77,80,0] /* OLYMP\00 */, "i8", ALLOC_NONE, 5573428);
allocate([70,85,74,73,70,73,76,77,0] /* FUJIFILM\00 */, "i8", ALLOC_NONE, 5573436);
allocate([80,97,110,97,115,111,110,105,99,0] /* Panasonic\00 */, "i8", ALLOC_NONE, 5573448);
allocate([83,79,78,89,0] /* SONY\00 */, "i8", ALLOC_NONE, 5573460);
allocate([79,76,89,77,80,85,83,0] /* OLYMPUS\00 */, "i8", ALLOC_NONE, 5573468);
allocate([87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0] /* Writing data to %s . */, "i8", ALLOC_NONE, 5573476);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5573500);
allocate([46,116,104,117,109,98,0] /* .thumb\00 */, "i8", ALLOC_NONE, 5573504);
allocate([95,37,48,42,100,0] /* _%0_d\00 */, "i8", ALLOC_NONE, 5573512);
allocate([115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* standard output\00 */, "i8", ALLOC_NONE, 5573520);
allocate([46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0] /* .pgm\00.ppm\00.ppm\0 */, "i8", ALLOC_NONE, 5573536);
allocate([46,116,105,102,102,0] /* .tiff\00 */, "i8", ALLOC_NONE, 5573556);
allocate([37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0] /* %s: \22-s %d\22 requ */, "i8", ALLOC_NONE, 5573564);
allocate([78,105,107,111,110,0] /* Nikon\00 */, "i8", ALLOC_NONE, 5573608);
allocate([80,54,10,37,100,32,37,100,10,50,53,53,10,0] /* P6\0A%d %d\0A255\0A\ */, "i8", ALLOC_NONE, 5573616);
allocate([76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Loading %s %s image  */, "i8", ALLOC_NONE, 5573632);
allocate([109,97,105,110,40,41,0] /* main()\00 */, "i8", ALLOC_NONE, 5573668);
allocate([37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0] /* %s is a %s %s image. */, "i8", ALLOC_NONE, 5573676);
allocate([10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ACamera multiplier */, "i8", ALLOC_NONE, 5573700);
allocate([10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ADaylight multipli */, "i8", ALLOC_NONE, 5573724);
allocate([10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0] /* \0AFilter pattern: \ */, "i8", ALLOC_NONE, 5573748);
allocate([82,97,119,32,99,111,108,111,114,115,58,32,37,100,0] /* Raw colors: %d\00 */, "i8", ALLOC_NONE, 5573768);
allocate([79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0] /* Output size: %4d x % */, "i8", ALLOC_NONE, 5573784);
allocate([73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Image size:  %4d x % */, "i8", ALLOC_NONE, 5573808);
allocate([67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0] /* Cannot decode file % */, "i8", ALLOC_NONE, 5573832);
allocate([77,76,89,0] /* MLY\00 */, "i8", ALLOC_NONE, 5573856);
allocate([70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0] /* Full size:   %4d x % */, "i8", ALLOC_NONE, 5573860);
allocate([84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Thumb size:  %4d x % */, "i8", ALLOC_NONE, 5573884);
allocate([80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0] /* Pixel Aspect Ratio:  */, "i8", ALLOC_NONE, 5573908);
allocate([78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0] /* Number of raw images */, "i8", ALLOC_NONE, 5573936);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5573964);
allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NONE, 5573968);
allocate([69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0] /* Embedded ICC profile */, "i8", ALLOC_NONE, 5573972);
allocate([70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0] /* Focal length: %0.1f  */, "i8", ALLOC_NONE, 5574000);
allocate([65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0] /* Aperture: f/%0.1f\0A */, "i8", ALLOC_NONE, 5574024);
allocate([37,48,46,49,102,32,115,101,99,10,0] /* %0.1f sec\0A\00 */, "i8", ALLOC_NONE, 5574044);
allocate([75,67,0] /* KC\00 */, "i8", ALLOC_NONE, 5574056);
allocate([49,47,0] /* 1/\00 */, "i8", ALLOC_NONE, 5574060);
allocate([83,104,117,116,116,101,114,58,32,0] /* Shutter: \00 */, "i8", ALLOC_NONE, 5574064);
allocate([73,83,79,32,115,112,101,101,100,58,32,37,100,10,0] /* ISO speed: %d\0A\00 */, "i8", ALLOC_NONE, 5574076);
allocate([37,100,37,99,0] /* %d%c\00 */, "i8", ALLOC_NONE, 5574092);
allocate([68,78,71,32,86,101,114,115,105,111,110,58,32,0] /* DNG Version: \00 */, "i8", ALLOC_NONE, 5574100);
allocate([79,119,110,101,114,58,32,37,115,10,0] /* Owner: %s\0A\00 */, "i8", ALLOC_NONE, 5574116);
allocate([67,97,109,101,114,97,58,32,37,115,32,37,115,10,0] /* Camera: %s %s\0A\00 */, "i8", ALLOC_NONE, 5574128);
allocate([84,105,109,101,115,116,97,109,112,58,32,37,115,0] /* Timestamp: %s\00 */, "i8", ALLOC_NONE, 5574144);
allocate([10,70,105,108,101,110,97,109,101,58,32,37,115,10,0] /* \0AFilename: %s\0A\0 */, "i8", ALLOC_NONE, 5574160);
allocate([37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0] /* %s has no thumbnail. */, "i8", ALLOC_NONE, 5574176);
allocate([77,77,77,77,0] /* MMMM\00 */, "i8", ALLOC_NONE, 5574200);
allocate([37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0] /* %s time set to %d.\0 */, "i8", ALLOC_NONE, 5574208);
allocate([37,49,48,108,100,37,49,48,100,32,37,115,10,0] /* %10ld%10d %s\0A\00 */, "i8", ALLOC_NONE, 5574228);
allocate([37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0] /* %s has no timestamp. */, "i8", ALLOC_NONE, 5574244);
allocate([87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0] /* Will not write an im */, "i8", ALLOC_NONE, 5574268);
allocate([78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0] /* No files to process. */, "i8", ALLOC_NONE, 5574312);
allocate([85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0] /* Unknown option \22-% */, "i8", ALLOC_NONE, 5574336);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5574360);
allocate([78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0] /* Non-numeric argument */, "i8", ALLOC_NONE, 5574364);
allocate([49,49,52,49,49,49,49,49,49,52,50,50,0] /* 114111111422\00 */, "i8", ALLOC_NONE, 5574396);
allocate([110,98,114,107,83,116,113,109,72,65,67,103,0] /* nbrkStqmHACg\00 */, "i8", ALLOC_NONE, 5574412);
allocate([73,73,73,73,0] /* IIII\00 */, "i8", ALLOC_NONE, 5574428);
allocate([45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0] /* -T        Write TIFF */, "i8", ALLOC_NONE, 5574436);
allocate([45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0] /* -4        Linear 16- */, "i8", ALLOC_NONE, 5574472);
allocate([45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0] /* -6        Write 16-b */, "i8", ALLOC_NONE, 5574520);
allocate([45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0] /* -s [0..N-1] Select o */, "i8", ALLOC_NONE, 5574560);
allocate([45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0] /* -m _num_  Apply a 3x */, "i8", ALLOC_NONE, 5574620);
allocate([45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0] /* -f        Interpolat */, "i8", ALLOC_NONE, 5574672);
allocate([45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0] /* -h        Half-size  */, "i8", ALLOC_NONE, 5574716);
allocate([45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0] /* -q [0-3]  Set the in */, "i8", ALLOC_NONE, 5574776);
allocate([45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0] /* -g _p ts_ Set custom */, "i8", ALLOC_NONE, 5574816);
allocate([45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0] /* -b _num_  Adjust bri */, "i8", ALLOC_NONE, 5574872);
allocate([86,69,82,0] /* VER\00 */, "i8", ALLOC_NONE, 5574916);
allocate([45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0] /* -W        Don't auto */, "i8", ALLOC_NONE, 5574920);
allocate([45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0] /* -j        Don't stre */, "i8", ALLOC_NONE, 5574972);
allocate([45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0] /* -D        Document m */, "i8", ALLOC_NONE, 5575020);
allocate([45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0] /* -d        Document m */, "i8", ALLOC_NONE, 5575076);
allocate([45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0] /* -o [0-5]  Output col */, "i8", ALLOC_NONE, 5575132);
allocate([45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0] /* -t [0-7]  Flip image */, "i8", ALLOC_NONE, 5575196);
allocate([45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0] /* -H [0-9]  Highlight  */, "i8", ALLOC_NONE, 5575252);
allocate([45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0] /* -n _num_  Set thresh */, "i8", ALLOC_NONE, 5575320);
allocate([45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0] /* -S _num_  Set the sa */, "i8", ALLOC_NONE, 5575368);
allocate([45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0] /* -k _num_  Set the da */, "i8", ALLOC_NONE, 5575404);
allocate([75,68,75,0] /* KDK\00 */, "i8", ALLOC_NONE, 5575440);
allocate([45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0] /* -K _file_ Subtract d */, "i8", ALLOC_NONE, 5575444);
allocate([45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0] /* -P _file_ Fix the de */, "i8", ALLOC_NONE, 5575492);
allocate([45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0] /* -C _r b_  Correct ch */, "i8", ALLOC_NONE, 5575544);
allocate([43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0] /* +M/-M     Use/don't  */, "i8", ALLOC_NONE, 5575584);
allocate([45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -r _r g b g_ Set cus */, "i8", ALLOC_NONE, 5575636);
allocate([45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -A _x y w h_ Average */, "i8", ALLOC_NONE, 5575676);
allocate([45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -a        Average th */, "i8", ALLOC_NONE, 5575728);
allocate([45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0] /* -w        Use camera */, "i8", ALLOC_NONE, 5575780);
allocate([45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0] /* -z        Change fil */, "i8", ALLOC_NONE, 5575828);
allocate([45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0] /* -i -v     Identify f */, "i8", ALLOC_NONE, 5575876);
allocate([78,111,107,105,97,0] /* Nokia\00 */, "i8", ALLOC_NONE, 5575920);
allocate([45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0] /* -i        Identify f */, "i8", ALLOC_NONE, 5575928);
allocate([45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0] /* -e        Extract em */, "i8", ALLOC_NONE, 5575976);
allocate([45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* -c        Write imag */, "i8", ALLOC_NONE, 5576020);
allocate([45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0] /* -v        Print verb */, "i8", ALLOC_NONE, 5576068);
allocate([10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0] /* \0AUsage:  %s [OPTIO */, "i8", ALLOC_NONE, 5576104);
allocate([57,46,49,55,0] /* 9.17\00 */, "i8", ALLOC_NONE, 5576140);
allocate([10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0] /* \0ARaw photo decoder */, "i8", ALLOC_NONE, 5576148);
allocate([84,90,61,85,84,67,0] /* TZ=UTC\00 */, "i8", ALLOC_NONE, 5576180);
allocate([80,37,100,10,37,100,32,37,100,10,37,100,10,0] /* P%d\0A%d %d\0A%d\0A\ */, "i8", ALLOC_NONE, 5576188);
allocate([49,49,49,50,52,56,49,49,50,52,56,52,56,56,0] /* 11124811248488\00 */, "i8", ALLOC_NONE, 5576204);
allocate([80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0] /* P7\0AWIDTH %d\0AHEIG */, "i8", ALLOC_NONE, 5576220);
allocate([119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0] /* write_ppm_tiff()\00 */, "i8", ALLOC_NONE, 5576284);
allocate([255,225,32,32,69,120,105,102,0,0,0] /* \FF\E1  Exif\00\00\0 */, "i8", ALLOC_NONE, 5576304);
allocate([106,112,101,103,95,116,104,117,109,98,40,41,0] /* jpeg_thumb()\00 */, "i8", ALLOC_NONE, 5576316);
allocate([37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0] /* %04d:%02d:%02d %02d: */, "i8", ALLOC_NONE, 5576332);
allocate([100,99,114,97,119,32,118,57,46,49,55,0] /* dcraw v9.17\00 */, "i8", ALLOC_NONE, 5576364);
allocate([49,50,52,51,53,56,54,55,0] /* 12435867\00 */, "i8", ALLOC_NONE, 5576376);
allocate([115,116,114,101,116,99,104,40,41,0] /* stretch()\00 */, "i8", ALLOC_NONE, 5576388);
allocate([83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0] /* Stretching the image */, "i8", ALLOC_NONE, 5576400);
allocate([102,117,106,105,95,114,111,116,97,116,101,40,41,0] /* fuji_rotate()\00 */, "i8", ALLOC_NONE, 5576428);
allocate([114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0] /* recover_highlights() */, "i8", ALLOC_NONE, 5576444);
allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0] /* Rotating image 45 de */, "i8", ALLOC_NONE, 5576468);
allocate([67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10,0] /* Converting to %s col */, "i8", ALLOC_NONE, 5576500);
allocate([66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0] /* Building histograms. */, "i8", ALLOC_NONE, 5576532);
allocate([97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0] /* auto-generated by dc */, "i8", ALLOC_NONE, 5576556);
allocate([99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0] /* convert_to_rgb()\00 */, "i8", ALLOC_NONE, 5576580);
allocate([88,89,90,0] /* XYZ\00 */, "i8", ALLOC_NONE, 5576600);
allocate([80,114,111,80,104,111,116,111,32,68,54,53,0] /* ProPhoto D65\00 */, "i8", ALLOC_NONE, 5576604);
allocate([87,105,100,101,71,97,109,117,116,32,68,54,53,0] /* WideGamut D65\00 */, "i8", ALLOC_NONE, 5576620);
allocate([65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0] /* Adobe RGB (1998)\00 */, "i8", ALLOC_NONE, 5576636);
allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_NONE, 5576656);
allocate([82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Rebuilding highlight */, "i8", ALLOC_NONE, 5576664);
allocate([112,112,109,95,116,104,117,109,98,40,41,0] /* ppm_thumb()\00 */, "i8", ALLOC_NONE, 5576692);
allocate([71,77,67,89,0] /* GMCY\00 */, "i8", ALLOC_NONE, 5576704);
allocate([82,71,66,71,0] /* RGBG\00 */, "i8", ALLOC_NONE, 5576712);
allocate([108,105,98,106,112,101,103,0] /* libjpeg\00 */, "i8", ALLOC_NONE, 5576720);
allocate([108,105,98,106,97,115,112,101,114,0] /* libjasper\00 */, "i8", ALLOC_NONE, 5576728);
allocate([37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0] /* %s: You must link dc */, "i8", ALLOC_NONE, 5576740);
allocate([81,117,105,99,107,116,97,107,101,0] /* Quicktake\00 */, "i8", ALLOC_NONE, 5576776);
allocate([37,100,120,37,100,0] /* %dx%d\00 */, "i8", ALLOC_NONE, 5576788);
allocate([69,88,45,80,55,48,48,0] /* EX-P700\00 */, "i8", ALLOC_NONE, 5576796);
allocate([69,88,45,80,53,48,53,0] /* EX-P505\00 */, "i8", ALLOC_NONE, 5576804);
allocate([69,88,45,90,82,49,48,48,0] /* EX-ZR100\00 */, "i8", ALLOC_NONE, 5576812);
allocate([66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Blending highlights. */, "i8", ALLOC_NONE, 5576824);
allocate([69,88,45,90,56,0] /* EX-Z8\00 */, "i8", ALLOC_NONE, 5576848);
allocate([69,88,45,90,56,53,48,0] /* EX-Z850\00 */, "i8", ALLOC_NONE, 5576856);
allocate([69,88,45,90,55,53,48,0] /* EX-Z750\00 */, "i8", ALLOC_NONE, 5576864);
allocate([69,88,45,90,55,53,0] /* EX-Z75\00 */, "i8", ALLOC_NONE, 5576872);
allocate([69,88,45,90,54,48,0] /* EX-Z60\00 */, "i8", ALLOC_NONE, 5576880);
allocate([69,88,45,90,53,53,0] /* EX-Z55\00 */, "i8", ALLOC_NONE, 5576888);
allocate([69,88,45,90,53,48,48,0] /* EX-Z500\00 */, "i8", ALLOC_NONE, 5576896);
allocate([69,88,45,90,53,48,0] /* EX-Z50\00 */, "i8", ALLOC_NONE, 5576904);
allocate([69,88,45,83,49,48,48,0] /* EX-S100\00 */, "i8", ALLOC_NONE, 5576912);
allocate([69,88,45,83,50,48,0] /* EX-S20\00 */, "i8", ALLOC_NONE, 5576920);
allocate([77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0] /* Median filter pass % */, "i8", ALLOC_NONE, 5576928);
allocate([81,86,45,82,53,49,0] /* QV-R51\00 */, "i8", ALLOC_NONE, 5576956);
allocate([81,86,45,82,52,49,0] /* QV-R41\00 */, "i8", ALLOC_NONE, 5576964);
allocate([81,86,45,53,55,48,48,0] /* QV-5700\00 */, "i8", ALLOC_NONE, 5576972);
allocate([81,86,45,52,48,48,48,0] /* QV-4000\00 */, "i8", ALLOC_NONE, 5576980);
allocate([81,86,45,50,48,48,48,85,88,0] /* QV-2000UX\00 */, "i8", ALLOC_NONE, 5576988);
allocate([80,67,45,67,65,77,32,54,48,48,0] /* PC-CAM 600\00 */, "i8", ALLOC_NONE, 5577000);
allocate([81,117,105,99,107,84,97,107,101,0] /* QuickTake\00 */, "i8", ALLOC_NONE, 5577012);
allocate([68,67,83,50,48,48,0] /* DCS200\00 */, "i8", ALLOC_NONE, 5577024);
allocate([68,67,49,50,48,0] /* DC120\00 */, "i8", ALLOC_NONE, 5577032);
allocate([97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* ahd_interpolate()\00 */, "i8", ALLOC_NONE, 5577040);
allocate([68,67,53,48,0] /* DC50\00 */, "i8", ALLOC_NONE, 5577060);
allocate([68,67,52,48,0] /* DC40\00 */, "i8", ALLOC_NONE, 5577068);
allocate([52,48,0] /* 40\00 */, "i8", ALLOC_NONE, 5577076);
allocate([68,67,50,53,0] /* DC25\00 */, "i8", ALLOC_NONE, 5577080);
allocate([77,89,67,89,0] /* MYCY\00 */, "i8", ALLOC_NONE, 5577088);
allocate([50,48,88,0] /* 20X\00 */, "i8", ALLOC_NONE, 5577096);
allocate([68,67,83,55,54,48,77,0] /* DCS760M\00 */, "i8", ALLOC_NONE, 5577100);
allocate([68,67,83,54,54,48,77,0] /* DCS660M\00 */, "i8", ALLOC_NONE, 5577108);
allocate([68,67,83,52,54,48,65,0] /* DCS460A\00 */, "i8", ALLOC_NONE, 5577116);
allocate([68,67,83,52,54,48,32,0] /* DCS460 \00 */, "i8", ALLOC_NONE, 5577124);
allocate([65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* AHD interpolation... */, "i8", ALLOC_NONE, 5577132);
allocate([68,67,83,52,50,48,0] /* DCS420\00 */, "i8", ALLOC_NONE, 5577156);
allocate([69,79,83,68,67,83,49,0] /* EOSDCS1\00 */, "i8", ALLOC_NONE, 5577164);
allocate([69,79,83,68,67,83,51,66,0] /* EOSDCS3B\00 */, "i8", ALLOC_NONE, 5577172);
allocate([78,67,50,48,48,48,0] /* NC2000\00 */, "i8", ALLOC_NONE, 5577184);
allocate([69,97,115,121,83,104,97,114,101,0] /* EasyShare\00 */, "i8", ALLOC_NONE, 5577192);
allocate([67,51,51,48,0] /* C330\00 */, "i8", ALLOC_NONE, 5577204);
allocate([67,54,48,51,0] /* C603\00 */, "i8", ALLOC_NONE, 5577212);
allocate([67,54,48,51,121,0] /* C603y\00 */, "i8", ALLOC_NONE, 5577220);
allocate([75,65,73,45,48,51,52,48,0] /* KAI-0340\00 */, "i8", ALLOC_NONE, 5577228);
allocate([67,54,48,51,118,0] /* C603v\00 */, "i8", ALLOC_NONE, 5577240);
allocate([80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* PPG interpolation... */, "i8", ALLOC_NONE, 5577248);
allocate([80,73,88,76,0] /* PIXL\00 */, "i8", ALLOC_NONE, 5577272);
allocate([68,83,76,82,45,65,51,53,48,0] /* DSLR-A350\00 */, "i8", ALLOC_NONE, 5577280);
allocate([68,83,67,45,82,49,0] /* DSC-R1\00 */, "i8", ALLOC_NONE, 5577292);
allocate([68,83,67,45,86,51,0] /* DSC-V3\00 */, "i8", ALLOC_NONE, 5577300);
allocate([82,71,66,69,0] /* RGBE\00 */, "i8", ALLOC_NONE, 5577308);
allocate([68,83,67,45,70,56,50,56,0] /* DSC-F828\00 */, "i8", ALLOC_NONE, 5577316);
allocate([88,90,45,50,0] /* XZ-2\00 */, "i8", ALLOC_NONE, 5577328);
allocate([83,80,53,53,48,85,90,0] /* SP550UZ\00 */, "i8", ALLOC_NONE, 5577336);
allocate([69,45,51,51,48,0] /* E-330\00 */, "i8", ALLOC_NONE, 5577344);
allocate([69,45,53,48,48,0] /* E-500\00 */, "i8", ALLOC_NONE, 5577352);
allocate([118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* vng_interpolate()\00 */, "i8", ALLOC_NONE, 5577360);
allocate([69,45,51,48,48,0] /* E-300\00 */, "i8", ALLOC_NONE, 5577380);
allocate([67,55,55,48,85,90,0] /* C770UZ\00 */, "i8", ALLOC_NONE, 5577388);
allocate([148,97,73,22,0] /* \94aI\16\00 */, "i8", ALLOC_NONE, 5577396);
allocate([67,97,116,99,104,76,105,103,104,116,0] /* CatchLight\00 */, "i8", ALLOC_NONE, 5577404);
allocate([82,66,84,71,0] /* RBTG\00 */, "i8", ALLOC_NONE, 5577416);
allocate([56,66,80,83,0] /* 8BPS\00 */, "i8", ALLOC_NONE, 5577424);
allocate([86,57,54,67,0] /* V96C\00 */, "i8", ALLOC_NONE, 5577432);
allocate([51,51,50,48,65,70,0] /* 3320AF\00 */, "i8", ALLOC_NONE, 5577440);
allocate([65,55,56,50,0] /* A782\00 */, "i8", ALLOC_NONE, 5577448);
allocate([86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* VNG interpolation... */, "i8", ALLOC_NONE, 5577456);
allocate([50,48,49,48,0] /* 2010\00 */, "i8", ALLOC_NONE, 5577480);
allocate([88,67,68,45,83,88,57,49,48,67,82,0] /* XCD-SX910CR\00 */, "i8", ALLOC_NONE, 5577488);
allocate([70,45,56,49,48,67,0] /* F-810C\00 */, "i8", ALLOC_NONE, 5577500);
allocate([70,45,53,49,48,67,0] /* F-510C\00 */, "i8", ALLOC_NONE, 5577508);
allocate([70,45,50,48,49,67,0] /* F-201C\00 */, "i8", ALLOC_NONE, 5577516);
allocate([70,45,49,52,53,67,0] /* F-145C\00 */, "i8", ALLOC_NONE, 5577524);
allocate([70,45,48,56,48,67,0] /* F-080C\00 */, "i8", ALLOC_NONE, 5577532);
allocate([54,52,48,120,52,56,48,0] /* 640x480\00 */, "i8", ALLOC_NONE, 5577540);
allocate([53,51,49,67,0] /* 531C\00 */, "i8", ALLOC_NONE, 5577548);
allocate([78,57,53,0] /* N95\00 */, "i8", ALLOC_NONE, 5577556);
allocate([66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Bilinear interpolati */, "i8", ALLOC_NONE, 5577560);
allocate([83,84,86,54,56,48,32,86,71,65,0] /* STV680 VGA\00 */, "i8", ALLOC_NONE, 5577588);
allocate([69,88,50,70,0] /* EX2F\00 */, "i8", ALLOC_NONE, 5577600);
allocate([87,66,53,53,48,0] /* WB550\00 */, "i8", ALLOC_NONE, 5577608);
allocate([87,66,50,48,48,48,0] /* WB2000\00 */, "i8", ALLOC_NONE, 5577616);
allocate([69,88,49,0] /* EX1\00 */, "i8", ALLOC_NONE, 5577624);
allocate([83,56,53,0] /* S85\00 */, "i8", ALLOC_NONE, 5577628);
allocate([68,67,45,56,51,51,109,0] /* DC-833m\00 */, "i8", ALLOC_NONE, 5577632);
allocate([79,112,116,105,111,32,55,53,48,90,0] /* Optio 750Z\00 */, "i8", ALLOC_NONE, 5577640);
allocate([79,112,116,105,111,32,83,0] /* Optio S\00 */, "i8", ALLOC_NONE, 5577652);
allocate([42,105,115,116,32,68,83,0] /* _ist DS\00 */, "i8", ALLOC_NONE, 5577660);
allocate([112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* pre_interpolate()\00 */, "i8", ALLOC_NONE, 5577668);
allocate([42,105,115,116,32,68,0] /* _ist D\00 */, "i8", ALLOC_NONE, 5577688);
allocate([68,105,77,65,71,69,32,71,0] /* DiMAGE G\00 */, "i8", ALLOC_NONE, 5577696);
allocate([68,89,78,65,88,32,37,45,49,48,115,0] /* DYNAX %-10s\00 */, "i8", ALLOC_NONE, 5577708);
allocate([77,65,88,88,85,77,0] /* MAXXUM\00 */, "i8", ALLOC_NONE, 5577720);
allocate([68,89,78,65,88,0] /* DYNAX\00 */, "i8", ALLOC_NONE, 5577728);
allocate([65,76,80,72,65,0] /* ALPHA\00 */, "i8", ALLOC_NONE, 5577736);
allocate([68,105,77,65,71,69,32,65,0] /* DiMAGE A\00 */, "i8", ALLOC_NONE, 5577744);
allocate([75,68,45,53,49,48,90,0] /* KD-510Z\00 */, "i8", ALLOC_NONE, 5577756);
allocate([75,68,45,52,48,48,90,0] /* KD-400Z\00 */, "i8", ALLOC_NONE, 5577764);
allocate([82,68,49,55,53,0] /* RD175\00 */, "i8", ALLOC_NONE, 5577772);
allocate([115,99,97,108,101,95,99,111,108,111,114,115,40,41,0] /* scale_colors()\00 */, "i8", ALLOC_NONE, 5577780);
allocate([112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0] /* packed_dng_load_raw( */, "i8", ALLOC_NONE, 5577796);
allocate([83,50,80,114,111,0] /* S2Pro\00 */, "i8", ALLOC_NONE, 5577820);
allocate([69,52,53,48,48,0] /* E4500\00 */, "i8", ALLOC_NONE, 5577828);
allocate([68,105,77,65,71,69,32,90,50,0] /* DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5577836);
allocate([79,112,116,105,111,32,51,51,87,82,0] /* Optio 33WR\00 */, "i8", ALLOC_NONE, 5577848);
allocate([69,50,53,48,48,0] /* E2500\00 */, "i8", ALLOC_NONE, 5577860);
allocate([69,50,49,48,48,0] /* E2100\00 */, "i8", ALLOC_NONE, 5577868);
allocate([69,57,57,53,0] /* E995\00 */, "i8", ALLOC_NONE, 5577876);
allocate([69,57,53,48,0] /* E950\00 */, "i8", ALLOC_NONE, 5577884);
allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_NONE, 5577892);
allocate([67,79,79,76,80,73,88,32,80,0] /* COOLPIX P\00 */, "i8", ALLOC_NONE, 5577896);
allocate([67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0] /* Correcting chromatic */, "i8", ALLOC_NONE, 5577908);
allocate([67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* COOLPIX P7700\00 */, "i8", ALLOC_NONE, 5577944);
allocate([68,51,48,48,0] /* D300\00 */, "i8", ALLOC_NONE, 5577960);
allocate([68,50,88,0] /* D2X\00 */, "i8", ALLOC_NONE, 5577968);
allocate([68,50,72,0] /* D2H\00 */, "i8", ALLOC_NONE, 5577972);
allocate([68,50,48,48,0] /* D200\00 */, "i8", ALLOC_NONE, 5577976);
allocate([68,49,48,48,0] /* D100\00 */, "i8", ALLOC_NONE, 5577984);
allocate([68,55,48,0] /* D70\00 */, "i8", ALLOC_NONE, 5577992);
allocate([68,53,48,0] /* D50\00 */, "i8", ALLOC_NONE, 5577996);
allocate([68,52,48,0] /* D40\00 */, "i8", ALLOC_NONE, 5578000);
allocate([68,52,0] /* D4\00 */, "i8", ALLOC_NONE, 5578004);
allocate([32,37,102,0] /*  %f\00 */, "i8", ALLOC_NONE, 5578008);
allocate([68,56,48,48,0] /* D800\00 */, "i8", ALLOC_NONE, 5578012);
allocate([68,54,48,48,0] /* D600\00 */, "i8", ALLOC_NONE, 5578020);
allocate([68,51,50,48,48,0] /* D3200\00 */, "i8", ALLOC_NONE, 5578028);
allocate([68,55,48,48,48,0] /* D7000\00 */, "i8", ALLOC_NONE, 5578036);
allocate([68,53,49,48,48,0] /* D5100\00 */, "i8", ALLOC_NONE, 5578044);
allocate([68,57,48,0] /* D90\00 */, "i8", ALLOC_NONE, 5578052);
allocate([68,53,48,48,48,0] /* D5000\00 */, "i8", ALLOC_NONE, 5578056);
allocate([68,51,49,48,48,0] /* D3100\00 */, "i8", ALLOC_NONE, 5578064);
allocate([68,55,48,48,0] /* D700\00 */, "i8", ALLOC_NONE, 5578072);
allocate([68,51,83,0] /* D3S\00 */, "i8", ALLOC_NONE, 5578080);
allocate([83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0] /* Scaling with darknes */, "i8", ALLOC_NONE, 5578084);
allocate([68,51,0] /* D3\00 */, "i8", ALLOC_NONE, 5578144);
allocate([68,51,48,48,48,0] /* D3000\00 */, "i8", ALLOC_NONE, 5578148);
allocate([68,56,48,0] /* D80\00 */, "i8", ALLOC_NONE, 5578156);
allocate([68,54,48,0] /* D60\00 */, "i8", ALLOC_NONE, 5578160);
allocate([68,52,48,88,0] /* D40X\00 */, "i8", ALLOC_NONE, 5578164);
allocate([68,49,88,0] /* D1X\00 */, "i8", ALLOC_NONE, 5578172);
allocate([68,49,0] /* D1\00 */, "i8", ALLOC_NONE, 5578176);
allocate([69,79,83,32,54,48,48,68,0] /* EOS 600D\00 */, "i8", ALLOC_NONE, 5578180);
allocate([69,79,83,32,53,53,48,68,0] /* EOS 550D\00 */, "i8", ALLOC_NONE, 5578192);
allocate([69,79,83,45,49,68,32,88,0] /* EOS-1D X\00 */, "i8", ALLOC_NONE, 5578204);
allocate([37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0] /* %s: Cannot use camer */, "i8", ALLOC_NONE, 5578216);
allocate([69,79,83,32,54,53,48,68,0] /* EOS 650D\00 */, "i8", ALLOC_NONE, 5578256);
allocate([69,79,83,32,53,48,48,68,0] /* EOS 500D\00 */, "i8", ALLOC_NONE, 5578268);
allocate([69,79,83,32,49,49,48,48,68,0] /* EOS 1100D\00 */, "i8", ALLOC_NONE, 5578280);
allocate([69,79,83,32,52,53,48,68,0] /* EOS 450D\00 */, "i8", ALLOC_NONE, 5578292);
allocate([69,79,83,32,49,48,48,48,68,0] /* EOS 1000D\00 */, "i8", ALLOC_NONE, 5578304);
allocate([69,79,83,32,52,48,48,68,0] /* EOS 400D\00 */, "i8", ALLOC_NONE, 5578316);
allocate([69,79,83,32,51,53,48,68,0] /* EOS 350D\00 */, "i8", ALLOC_NONE, 5578328);
allocate([69,79,83,32,68,50,48,48,48,67,0] /* EOS D2000C\00 */, "i8", ALLOC_NONE, 5578340);
allocate([69,79,83,32,51,48,48,68,0] /* EOS 300D\00 */, "i8", ALLOC_NONE, 5578352);
allocate([80,111,119,101,114,83,104,111,116,32,71,49,0] /* PowerShot G1\00 */, "i8", ALLOC_NONE, 5578364);
allocate([119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0] /* wavelet_denoise()\00 */, "i8", ALLOC_NONE, 5578380);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0] /* PowerShot Pro90 IS\0 */, "i8", ALLOC_NONE, 5578400);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0] /* PowerShot SX30 IS\00 */, "i8", ALLOC_NONE, 5578420);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0] /* PowerShot SX220 HS\0 */, "i8", ALLOC_NONE, 5578440);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0] /* PowerShot SX20 IS\00 */, "i8", ALLOC_NONE, 5578460);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0] /* PowerShot SX120 IS\0 */, "i8", ALLOC_NONE, 5578480);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* PowerShot SX110 IS\0 */, "i8", ALLOC_NONE, 5578500);
allocate([80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* PowerShot S3 IS\00 */, "i8", ALLOC_NONE, 5578520);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* PowerShot A650\00 */, "i8", ALLOC_NONE, 5578536);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* PowerShot A640\00 */, "i8", ALLOC_NONE, 5578552);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* PowerShot A630\00 */, "i8", ALLOC_NONE, 5578568);
allocate([87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0] /* Wavelet denoising... */, "i8", ALLOC_NONE, 5578584);
allocate([80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0] /* PowerShot A720 IS\00 */, "i8", ALLOC_NONE, 5578608);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* PowerShot A470\00 */, "i8", ALLOC_NONE, 5578628);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* PowerShot A620\00 */, "i8", ALLOC_NONE, 5578644);
allocate([83,50,32,73,83,0] /* S2 IS\00 */, "i8", ALLOC_NONE, 5578660);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* PowerShot A610\00 */, "i8", ALLOC_NONE, 5578668);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* PowerShot A530\00 */, "i8", ALLOC_NONE, 5578684);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,54,48,0] /* PowerShot A460\00 */, "i8", ALLOC_NONE, 5578700);
allocate([80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0] /* PowerShot SD300\00 */, "i8", ALLOC_NONE, 5578716);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* PowerShot Pro70\00 */, "i8", ALLOC_NONE, 5578732);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* PowerShot A50\00 */, "i8", ALLOC_NONE, 5578748);
allocate([115,117,98,116,114,97,99,116,40,41,0] /* subtract()\00 */, "i8", ALLOC_NONE, 5578764);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0] /* PowerShot A5 Zoom\00 */, "i8", ALLOC_NONE, 5578776);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,0] /* PowerShot A5\00 */, "i8", ALLOC_NONE, 5578796);
allocate([80,111,119,101,114,83,104,111,116,32,54,48,48,0] /* PowerShot 600\00 */, "i8", ALLOC_NONE, 5578812);
allocate([54,52,53,68,0] /* 645D\00 */, "i8", ALLOC_NONE, 5578828);
allocate([75,45,55,0] /* K-7\00 */, "i8", ALLOC_NONE, 5578836);
allocate([75,45,53,0] /* K-5\00 */, "i8", ALLOC_NONE, 5578840);
allocate([75,45,120,0] /* K-x\00 */, "i8", ALLOC_NONE, 5578844);
allocate([75,45,114,0] /* K-r\00 */, "i8", ALLOC_NONE, 5578848);
allocate([68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0] /* Digital Camera \00 */, "i8", ALLOC_NONE, 5578852);
allocate([70,105,110,101,80,105,120,32,0] /* FinePix \00 */, "i8", ALLOC_NONE, 5578868);
allocate([37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0] /* %s has the wrong dim */, "i8", ALLOC_NONE, 5578880);
allocate([70,73,76,69,32,86,69,82,83,73,79,78,0] /* FILE VERSION\00 */, "i8", ALLOC_NONE, 5578912);
allocate([32,68,105,103,105,116,97,108,32,67,97,109,101,114,97,0] /*  Digital Camera\00 */, "i8", ALLOC_NONE, 5578928);
allocate([32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0] /*  DIGITAL CAMERA\00 */, "i8", ALLOC_NONE, 5578944);
allocate([67,73,0] /* CI\00 */, "i8", ALLOC_NONE, 5578960);
allocate([70,79,86,98,0] /* FOVb\00 */, "i8", ALLOC_NONE, 5578964);
allocate([0,77,82,77,0] /* \00MRM\00 */, "i8", ALLOC_NONE, 5578972);
allocate([80,87,65,68,0] /* PWAD\00 */, "i8", ALLOC_NONE, 5578980);
allocate([68,83,67,45,73,109,97,103,101,0] /* DSC-Image\00 */, "i8", ALLOC_NONE, 5578988);
allocate([37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0] /* %s is not a valid PG */, "i8", ALLOC_NONE, 5579000);
allocate([82,69,68,49,0] /* RED1\00 */, "i8", ALLOC_NONE, 5579032);
allocate([65,82,82,73,0] /* ARRI\00 */, "i8", ALLOC_NONE, 5579040);
allocate([88,50,0] /* X2\00 */, "i8", ALLOC_NONE, 5579048);
allocate([78,79,75,73,65,0] /* NOKIA\00 */, "i8", ALLOC_NONE, 5579052);
allocate([78,79,75,73,65,82,65,87,0] /* NOKIARAW\00 */, "i8", ALLOC_NONE, 5579060);
allocate([0,1,0,1,0,64,0] /* \00\01\00\01\00@\00 */, "i8", ALLOC_NONE, 5579072);
allocate([81,117,105,99,107,84,97,107,101,32,49,53,48,0] /* QuickTake 150\00 */, "i8", ALLOC_NONE, 5579080);
allocate([113,107,116,110,0] /* qktn\00 */, "i8", ALLOC_NONE, 5579096);
allocate([81,117,105,99,107,84,97,107,101,32,49,48,48,0] /* QuickTake 100\00 */, "i8", ALLOC_NONE, 5579104);
allocate([65,112,112,108,101,0] /* Apple\00 */, "i8", ALLOC_NONE, 5579120);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5579128);
allocate([37,100,46,37,100,46,37,100,0] /* %d.%d.%d\00 */, "i8", ALLOC_NONE, 5579132);
allocate([113,107,116,107,0] /* qktk\00 */, "i8", ALLOC_NONE, 5579144);
allocate([70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0] /* Fotoman Pixtura\00 */, "i8", ALLOC_NONE, 5579152);
allocate([76,111,103,105,116,101,99,104,0] /* Logitech\00 */, "i8", ALLOC_NONE, 5579168);
allocate([80,88,78,0] /* PXN\00 */, "i8", ALLOC_NONE, 5579180);
allocate([78,32,68,105,103,105,116,97,108,0] /* N Digital\00 */, "i8", ALLOC_NONE, 5579184);
allocate([67,111,110,116,97,120,0] /* Contax\00 */, "i8", ALLOC_NONE, 5579196);
allocate([65,82,69,67,79,89,75,0] /* ARECOYK\00 */, "i8", ALLOC_NONE, 5579204);
allocate([69,120,105,102,0] /* Exif\00 */, "i8", ALLOC_NONE, 5579212);
allocate([255,216,255,225,0] /* \FF\D8\FF\E1\00 */, "i8", ALLOC_NONE, 5579220);
allocate([72,69,65,80,67,67,68,82,0] /* HEAPCCDR\00 */, "i8", ALLOC_NONE, 5579228);
allocate([32,37,100,44,37,100,0] /*  %d,%d\00 */, "i8", ALLOC_NONE, 5579240);
allocate([77,79,84,79,82,79,76,65,0] /* MOTOROLA\00 */, "i8", ALLOC_NONE, 5579248);
allocate([77,97,109,105,121,97,0] /* Mamiya\00 */, "i8", ALLOC_NONE, 5579260);
allocate([67,65,83,73,79,0] /* CASIO\00 */, "i8", ALLOC_NONE, 5579268);
allocate([75,111,110,105,99,97,0] /* Konica\00 */, "i8", ALLOC_NONE, 5579276);
allocate([77,105,110,111,108,116,97,0] /* Minolta\00 */, "i8", ALLOC_NONE, 5579284);
allocate([77,73,78,79,76,84,65,0] /* MINOLTA\00 */, "i8", ALLOC_NONE, 5579292);
allocate([37,115,32,37,115,0] /* %s %s\00 */, "i8", ALLOC_NONE, 5579300);
allocate([83,79,78,89,32,83,76,84,45,65,57,57,0] /* SONY SLT-A99\00 */, "i8", ALLOC_NONE, 5579308);
allocate([83,79,78,89,32,83,76,84,45,65,55,55,0] /* SONY SLT-A77\00 */, "i8", ALLOC_NONE, 5579324);
allocate([83,79,78,89,32,83,76,84,45,65,54,53,0] /* SONY SLT-A65\00 */, "i8", ALLOC_NONE, 5579340);
allocate([70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0] /* Fixed dead pixels at */, "i8", ALLOC_NONE, 5579356);
allocate([83,79,78,89,32,83,76,84,45,65,53,55,0] /* SONY SLT-A57\00 */, "i8", ALLOC_NONE, 5579380);
allocate([83,79,78,89,32,83,76,84,45,65,53,53,0] /* SONY SLT-A55\00 */, "i8", ALLOC_NONE, 5579396);
allocate([83,79,78,89,32,83,76,84,45,65,51,55,0] /* SONY SLT-A37\00 */, "i8", ALLOC_NONE, 5579412);
allocate([83,79,78,89,32,83,76,84,45,65,51,53,0] /* SONY SLT-A35\00 */, "i8", ALLOC_NONE, 5579428);
allocate([83,79,78,89,32,83,76,84,45,65,51,51,0] /* SONY SLT-A33\00 */, "i8", ALLOC_NONE, 5579444);
allocate([83,79,78,89,32,78,69,88,0] /* SONY NEX\00 */, "i8", ALLOC_NONE, 5579460);
allocate([83,79,78,89,32,78,69,88,45,55,0] /* SONY NEX-7\00 */, "i8", ALLOC_NONE, 5579472);
allocate([83,79,78,89,32,78,69,88,45,54,0] /* SONY NEX-6\00 */, "i8", ALLOC_NONE, 5579484);
allocate([83,79,78,89,32,78,69,88,45,53,0] /* SONY NEX-5\00 */, "i8", ALLOC_NONE, 5579496);
allocate([83,79,78,89,32,78,69,88,45,51,0] /* SONY NEX-3\00 */, "i8", ALLOC_NONE, 5579508);
allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_NONE, 5579520);
allocate([83,79,78,89,32,78,69,88,45,53,82,0] /* SONY NEX-5R\00 */, "i8", ALLOC_NONE, 5579532);
allocate([83,79,78,89,32,78,69,88,45,53,78,0] /* SONY NEX-5N\00 */, "i8", ALLOC_NONE, 5579544);
allocate([83,79,78,89,32,68,83,76,82,45,65,57,48,48,0] /* SONY DSLR-A900\00 */, "i8", ALLOC_NONE, 5579556);
allocate([83,79,78,89,32,68,83,76,82,45,65,56,53,48,0] /* SONY DSLR-A850\00 */, "i8", ALLOC_NONE, 5579572);
allocate([83,79,78,89,32,68,83,76,82,45,65,55,48,48,0] /* SONY DSLR-A700\00 */, "i8", ALLOC_NONE, 5579588);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,0] /* SONY DSLR-A5\00 */, "i8", ALLOC_NONE, 5579604);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,56,48,0] /* SONY DSLR-A580\00 */, "i8", ALLOC_NONE, 5579620);
allocate([83,79,78,89,32,68,83,76,82,45,65,52,53,48,0] /* SONY DSLR-A450\00 */, "i8", ALLOC_NONE, 5579636);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,57,48,0] /* SONY DSLR-A390\00 */, "i8", ALLOC_NONE, 5579652);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,56,48,0] /* SONY DSLR-A380\00 */, "i8", ALLOC_NONE, 5579668);
allocate([47,46,98,97,100,112,105,120,101,108,115,0] /* /.badpixels\00 */, "i8", ALLOC_NONE, 5579684);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,53,48,0] /* SONY DSLR-A350\00 */, "i8", ALLOC_NONE, 5579696);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,51,48,0] /* SONY DSLR-A330\00 */, "i8", ALLOC_NONE, 5579712);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,48,48,0] /* SONY DSLR-A300\00 */, "i8", ALLOC_NONE, 5579728);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,0] /* SONY DSLR-A2\00 */, "i8", ALLOC_NONE, 5579744);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,57,48,0] /* SONY DSLR-A290\00 */, "i8", ALLOC_NONE, 5579760);
allocate([83,79,78,89,32,68,83,76,82,45,65,49,48,48,0] /* SONY DSLR-A100\00 */, "i8", ALLOC_NONE, 5579776);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,0] /* SONY DSC-RX1\00 */, "i8", ALLOC_NONE, 5579792);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,48,48,0] /* SONY DSC-RX100\00 */, "i8", ALLOC_NONE, 5579808);
allocate([83,79,78,89,32,68,83,67,45,86,51,0] /* SONY DSC-V3\00 */, "i8", ALLOC_NONE, 5579824);
allocate([83,79,78,89,32,68,83,67,45,82,49,0] /* SONY DSC-R1\00 */, "i8", ALLOC_NONE, 5579836);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5579848);
allocate([83,79,78,89,32,68,83,67,45,70,56,50,56,0] /* SONY DSC-F828\00 */, "i8", ALLOC_NONE, 5579852);
allocate([83,105,110,97,114,0] /* Sinar\00 */, "i8", ALLOC_NONE, 5579868);
allocate([83,65,77,83,85,78,71,32,83,56,53,0] /* SAMSUNG S85\00 */, "i8", ALLOC_NONE, 5579876);
allocate([83,65,77,83,85,78,71,32,71,88,45,49,0] /* SAMSUNG GX-1\00 */, "i8", ALLOC_NONE, 5579888);
allocate([83,65,77,83,85,78,71,32,87,66,50,48,48,48,0] /* SAMSUNG WB2000\00 */, "i8", ALLOC_NONE, 5579904);
allocate([83,65,77,83,85,78,71,32,78,88,0] /* SAMSUNG NX\00 */, "i8", ALLOC_NONE, 5579920);
allocate([83,65,77,83,85,78,71,32,78,88,49,48,48,48,0] /* SAMSUNG NX1000\00 */, "i8", ALLOC_NONE, 5579932);
allocate([83,65,77,83,85,78,71,32,78,88,50,0] /* SAMSUNG NX2\00 */, "i8", ALLOC_NONE, 5579948);
allocate([83,65,77,83,85,78,71,32,69,88,50,70,0] /* SAMSUNG EX2F\00 */, "i8", ALLOC_NONE, 5579960);
allocate([83,65,77,83,85,78,71,32,69,88,49,0] /* SAMSUNG EX1\00 */, "i8", ALLOC_NONE, 5579976);
allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_NONE, 5579988);
allocate([82,69,68,32,79,78,69,0] /* RED ONE\00 */, "i8", ALLOC_NONE, 5579992);
allocate([80,104,97,115,101,32,79,110,101,32,80,54,53,0] /* Phase One P65\00 */, "i8", ALLOC_NONE, 5580000);
allocate([80,104,97,115,101,32,79,110,101,32,80,52,48,0] /* Phase One P40\00 */, "i8", ALLOC_NONE, 5580016);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,52,53,0] /* Phase One P 45\00 */, "i8", ALLOC_NONE, 5580032);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,51,48,0] /* Phase One P 30\00 */, "i8", ALLOC_NONE, 5580048);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,50,0] /* Phase One P 2\00 */, "i8", ALLOC_NONE, 5580064);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,53,0] /* Phase One H 25\00 */, "i8", ALLOC_NONE, 5580080);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,48,0] /* Phase One H 20\00 */, "i8", ALLOC_NONE, 5580096);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0] /* Panasonic DMC-GX1\00 */, "i8", ALLOC_NONE, 5580112);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0] /* Panasonic DMC-GH3\00 */, "i8", ALLOC_NONE, 5580132);
allocate([102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* foveon_interpolate() */, "i8", ALLOC_NONE, 5580152);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0] /* Panasonic DMC-GH2\00 */, "i8", ALLOC_NONE, 5580176);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0] /* Panasonic DMC-GH1\00 */, "i8", ALLOC_NONE, 5580196);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0] /* Panasonic DMC-GF5\00 */, "i8", ALLOC_NONE, 5580216);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0] /* Panasonic DMC-GF3\00 */, "i8", ALLOC_NONE, 5580236);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0] /* Panasonic DMC-GF2\00 */, "i8", ALLOC_NONE, 5580256);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0] /* Panasonic DMC-GF1\00 */, "i8", ALLOC_NONE, 5580276);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0] /* Panasonic DMC-G5\00 */, "i8", ALLOC_NONE, 5580296);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0] /* Panasonic DMC-G3\00 */, "i8", ALLOC_NONE, 5580316);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0] /* Panasonic DMC-G2\00 */, "i8", ALLOC_NONE, 5580336);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0] /* Panasonic DMC-G1\00 */, "i8", ALLOC_NONE, 5580356);
allocate([66,97,100,80,105,120,101,108,115,0] /* BadPixels\00 */, "i8", ALLOC_NONE, 5580376);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0] /* Panasonic DMC-G10\00 */, "i8", ALLOC_NONE, 5580388);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0] /* Panasonic DMC-FX150\ */, "i8", ALLOC_NONE, 5580408);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,52,0] /* LEICA V-LUX 4\00 */, "i8", ALLOC_NONE, 5580428);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0] /* Panasonic DMC-FZ200\ */, "i8", ALLOC_NONE, 5580444);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,51,0] /* LEICA V-LUX 3\00 */, "i8", ALLOC_NONE, 5580464);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0] /* Panasonic DMC-FZ150\ */, "i8", ALLOC_NONE, 5580480);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,50,0] /* LEICA V-LUX 2\00 */, "i8", ALLOC_NONE, 5580500);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0] /* Panasonic DMC-FZ100\ */, "i8", ALLOC_NONE, 5580516);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,54,0] /* LEICA D-LUX 6\00 */, "i8", ALLOC_NONE, 5580536);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0] /* Panasonic DMC-LX7\00 */, "i8", ALLOC_NONE, 5580552);
allocate([83,112,97,116,105,97,108,71,97,105,110,0] /* SpatialGain\00 */, "i8", ALLOC_NONE, 5580572);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,53,0] /* LEICA D-LUX 5\00 */, "i8", ALLOC_NONE, 5580584);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0] /* Panasonic DMC-LX5\00 */, "i8", ALLOC_NONE, 5580600);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,52,0] /* LEICA D-LUX 4\00 */, "i8", ALLOC_NONE, 5580620);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0] /* Panasonic DMC-LX3\00 */, "i8", ALLOC_NONE, 5580636);
allocate([76,69,73,67,65,32,68,45,76,85,88,51,0] /* LEICA D-LUX3\00 */, "i8", ALLOC_NONE, 5580656);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0] /* Panasonic DMC-LX2\00 */, "i8", ALLOC_NONE, 5580672);
allocate([76,69,73,67,65,32,68,45,76,85,88,50,0] /* LEICA D-LUX2\00 */, "i8", ALLOC_NONE, 5580692);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0] /* Panasonic DMC-LX1\00 */, "i8", ALLOC_NONE, 5580708);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,50,0] /* LEICA DIGILUX 2\00 */, "i8", ALLOC_NONE, 5580728);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0] /* Panasonic DMC-LC1\00 */, "i8", ALLOC_NONE, 5580744);
allocate([37,115,82,71,66,78,101,117,116,114,97,108,0] /* %sRGBNeutral\00 */, "i8", ALLOC_NONE, 5580764);
allocate([108,106,112,101,103,95,115,116,97,114,116,40,41,0] /* ljpeg_start()\00 */, "i8", ALLOC_NONE, 5580780);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,51,0] /* LEICA DIGILUX 3\00 */, "i8", ALLOC_NONE, 5580796);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0] /* Panasonic DMC-L1\00 */, "i8", ALLOC_NONE, 5580812);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0] /* Panasonic DMC-L10\00 */, "i8", ALLOC_NONE, 5580832);
allocate([76,69,73,67,65,32,86,45,76,85,88,49,0] /* LEICA V-LUX1\00 */, "i8", ALLOC_NONE, 5580852);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0] /* Panasonic DMC-FZ50\0 */, "i8", ALLOC_NONE, 5580868);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0] /* Panasonic DMC-FZ4\00 */, "i8", ALLOC_NONE, 5580888);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0] /* Panasonic DMC-FZ3\00 */, "i8", ALLOC_NONE, 5580908);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0] /* Panasonic DMC-FZ30\0 */, "i8", ALLOC_NONE, 5580928);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0] /* Panasonic DMC-FZ28\0 */, "i8", ALLOC_NONE, 5580948);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0] /* Panasonic DMC-FZ18\0 */, "i8", ALLOC_NONE, 5580968);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0] /* WhiteBalanceCorrecti */, "i8", ALLOC_NONE, 5580988);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0] /* Panasonic DMC-FZ8\00 */, "i8", ALLOC_NONE, 5581012);
allocate([80,69,78,84,65,88,32,54,52,53,68,0] /* PENTAX 645D\00 */, "i8", ALLOC_NONE, 5581032);
allocate([80,69,78,84,65,88,32,75,45,55,0] /* PENTAX K-7\00 */, "i8", ALLOC_NONE, 5581044);
allocate([80,69,78,84,65,88,32,75,45,53,0] /* PENTAX K-5\00 */, "i8", ALLOC_NONE, 5581056);
allocate([80,69,78,84,65,88,32,75,45,53,32,73,73,0] /* PENTAX K-5 II\00 */, "i8", ALLOC_NONE, 5581068);
allocate([80,69,78,84,65,88,32,75,45,114,0] /* PENTAX K-r\00 */, "i8", ALLOC_NONE, 5581084);
allocate([80,69,78,84,65,88,32,75,45,120,0] /* PENTAX K-x\00 */, "i8", ALLOC_NONE, 5581096);
allocate([80,69,78,84,65,88,32,75,45,109,0] /* PENTAX K-m\00 */, "i8", ALLOC_NONE, 5581108);
allocate([80,69,78,84,65,88,32,75,50,48,48,48,0] /* PENTAX K2000\00 */, "i8", ALLOC_NONE, 5581120);
allocate([80,69,78,84,65,88,32,75,50,48,48,68,0] /* PENTAX K200D\00 */, "i8", ALLOC_NONE, 5581136);
allocate([37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0] /* %s: Invalid white ba */, "i8", ALLOC_NONE, 5581152);
allocate([80,69,78,84,65,88,32,75,50,48,68,0] /* PENTAX K20D\00 */, "i8", ALLOC_NONE, 5581184);
allocate([80,69,78,84,65,88,32,75,49,0] /* PENTAX K1\00 */, "i8", ALLOC_NONE, 5581196);
allocate([80,69,78,84,65,88,32,75,49,48,68,0] /* PENTAX K10D\00 */, "i8", ALLOC_NONE, 5581208);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,0] /* PENTAX _ist D\00 */, "i8", ALLOC_NONE, 5581220);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,0] /* PENTAX _ist DS\00 */, "i8", ALLOC_NONE, 5581236);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,50,0] /* PENTAX _ist DS2\00 */, "i8", ALLOC_NONE, 5581252);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,0] /* PENTAX _ist DL\00 */, "i8", ALLOC_NONE, 5581268);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,50,0] /* PENTAX _ist DL2\00 */, "i8", ALLOC_NONE, 5581284);
allocate([79,76,89,77,80,85,83,32,88,90,45,50,0] /* OLYMPUS XZ-2\00 */, "i8", ALLOC_NONE, 5581300);
allocate([79,76,89,77,80,85,83,32,88,90,45,49,0] /* OLYMPUS XZ-1\00 */, "i8", ALLOC_NONE, 5581316);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0] /* WhiteBalanceIllumina */, "i8", ALLOC_NONE, 5581332);
allocate([79,76,89,77,80,85,83,32,83,80,53,55,48,85,90,0] /* OLYMPUS SP570UZ\00 */, "i8", ALLOC_NONE, 5581356);
allocate([79,76,89,77,80,85,83,32,83,80,53,54,48,85,90,0] /* OLYMPUS SP560UZ\00 */, "i8", ALLOC_NONE, 5581372);
allocate([79,76,89,77,80,85,83,32,83,80,53,53,48,85,90,0] /* OLYMPUS SP550UZ\00 */, "i8", ALLOC_NONE, 5581388);
allocate([79,76,89,77,80,85,83,32,83,80,53,49,48,85,90,0] /* OLYMPUS SP510UZ\00 */, "i8", ALLOC_NONE, 5581404);
allocate([79,76,89,77,80,85,83,32,83,80,53,48,48,85,90,0] /* OLYMPUS SP500UZ\00 */, "i8", ALLOC_NONE, 5581420);
allocate([79,76,89,77,80,85,83,32,83,80,51,0] /* OLYMPUS SP3\00 */, "i8", ALLOC_NONE, 5581436);
allocate([79,76,89,77,80,85,83,32,83,80,51,53,48,0] /* OLYMPUS SP350\00 */, "i8", ALLOC_NONE, 5581448);
allocate([79,76,89,77,80,85,83,32,69,45,77,53,0] /* OLYMPUS E-M5\00 */, "i8", ALLOC_NONE, 5581464);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,50,0] /* OLYMPUS E-PM2\00 */, "i8", ALLOC_NONE, 5581480);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,49,0] /* OLYMPUS E-PM1\00 */, "i8", ALLOC_NONE, 5581496);
allocate([68,97,114,107,83,104,105,101,108,100,84,111,112,0] /* DarkShieldTop\00 */, "i8", ALLOC_NONE, 5581512);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,53,0] /* OLYMPUS E-PL5\00 */, "i8", ALLOC_NONE, 5581528);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,51,0] /* OLYMPUS E-PL3\00 */, "i8", ALLOC_NONE, 5581544);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,50,0] /* OLYMPUS E-PL2\00 */, "i8", ALLOC_NONE, 5581560);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,0] /* OLYMPUS E-PL1\00 */, "i8", ALLOC_NONE, 5581576);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,115,0] /* OLYMPUS E-PL1s\00 */, "i8", ALLOC_NONE, 5581592);
allocate([79,76,89,77,80,85,83,32,69,45,80,51,0] /* OLYMPUS E-P3\00 */, "i8", ALLOC_NONE, 5581608);
allocate([79,76,89,77,80,85,83,32,69,45,80,50,0] /* OLYMPUS E-P2\00 */, "i8", ALLOC_NONE, 5581624);
allocate([79,76,89,77,80,85,83,32,69,45,80,49,0] /* OLYMPUS E-P1\00 */, "i8", ALLOC_NONE, 5581640);
allocate([79,76,89,77,80,85,83,32,69,45,54,50,48,0] /* OLYMPUS E-620\00 */, "i8", ALLOC_NONE, 5581656);
allocate([79,76,89,77,80,85,83,32,69,45,54,48,48,0] /* OLYMPUS E-600\00 */, "i8", ALLOC_NONE, 5581672);
allocate([68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0] /* DarkShieldBottom\00 */, "i8", ALLOC_NONE, 5581688);
allocate([79,76,89,77,80,85,83,32,69,45,53,0] /* OLYMPUS E-5\00 */, "i8", ALLOC_NONE, 5581708);
allocate([79,76,89,77,80,85,83,32,69,45,53,50,48,0] /* OLYMPUS E-520\00 */, "i8", ALLOC_NONE, 5581720);
allocate([79,76,89,77,80,85,83,32,69,45,53,49,48,0] /* OLYMPUS E-510\00 */, "i8", ALLOC_NONE, 5581736);
allocate([79,76,89,77,80,85,83,32,69,45,53,48,48,0] /* OLYMPUS E-500\00 */, "i8", ALLOC_NONE, 5581752);
allocate([79,76,89,77,80,85,83,32,69,45,52,53,48,0] /* OLYMPUS E-450\00 */, "i8", ALLOC_NONE, 5581768);
allocate([79,76,89,77,80,85,83,32,69,45,52,50,48,0] /* OLYMPUS E-420\00 */, "i8", ALLOC_NONE, 5581784);
allocate([79,76,89,77,80,85,83,32,69,45,52,49,48,0] /* OLYMPUS E-410\00 */, "i8", ALLOC_NONE, 5581800);
allocate([79,76,89,77,80,85,83,32,69,45,52,48,48,0] /* OLYMPUS E-400\00 */, "i8", ALLOC_NONE, 5581816);
allocate([79,76,89,77,80,85,83,32,69,45,51,0] /* OLYMPUS E-3\00 */, "i8", ALLOC_NONE, 5581832);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,0] /* OLYMPUS E-30\00 */, "i8", ALLOC_NONE, 5581844);
allocate([68,97,114,107,68,114,105,102,116,0] /* DarkDrift\00 */, "i8", ALLOC_NONE, 5581860);
allocate([79,76,89,77,80,85,83,32,69,45,51,51,48,0] /* OLYMPUS E-330\00 */, "i8", ALLOC_NONE, 5581872);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,48,0] /* OLYMPUS E-300\00 */, "i8", ALLOC_NONE, 5581888);
allocate([79,76,89,77,80,85,83,32,69,45,50,48,0] /* OLYMPUS E-20\00 */, "i8", ALLOC_NONE, 5581904);
allocate([79,76,89,77,80,85,83,32,69,45,49,0] /* OLYMPUS E-1\00 */, "i8", ALLOC_NONE, 5581920);
allocate([79,76,89,77,80,85,83,32,69,45,49,48,0] /* OLYMPUS E-10\00 */, "i8", ALLOC_NONE, 5581932);
allocate([79,76,89,77,80,85,83,32,67,56,48,0] /* OLYMPUS C80\00 */, "i8", ALLOC_NONE, 5581948);
allocate([79,76,89,77,80,85,83,32,67,55,48,0] /* OLYMPUS C70\00 */, "i8", ALLOC_NONE, 5581960);
allocate([79,76,89,77,80,85,83,32,67,55,48,55,48,0] /* OLYMPUS C7070\00 */, "i8", ALLOC_NONE, 5581972);
allocate([79,76,89,77,80,85,83,32,67,53,48,54,48,0] /* OLYMPUS C5060\00 */, "i8", ALLOC_NONE, 5581988);
allocate([79,76,89,77,80,85,83,32,67,53,48,53,48,0] /* OLYMPUS C5050\00 */, "i8", ALLOC_NONE, 5582004);
allocate([67,111,108,117,109,110,70,105,108,116,101,114,0] /* ColumnFilter\00 */, "i8", ALLOC_NONE, 5582020);
allocate([78,73,75,79,78,32,49,32,0] /* NIKON 1 \00 */, "i8", ALLOC_NONE, 5582036);
allocate([78,73,75,79,78,32,49,32,86,50,0] /* NIKON 1 V2\00 */, "i8", ALLOC_NONE, 5582048);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* NIKON COOLPIX P7700\ */, "i8", ALLOC_NONE, 5582060);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0] /* NIKON COOLPIX P7100\ */, "i8", ALLOC_NONE, 5582080);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0] /* NIKON COOLPIX P7000\ */, "i8", ALLOC_NONE, 5582100);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0] /* NIKON COOLPIX P6000\ */, "i8", ALLOC_NONE, 5582120);
allocate([78,73,75,79,78,32,69,56,56,48,48,0] /* NIKON E8800\00 */, "i8", ALLOC_NONE, 5582140);
allocate([78,73,75,79,78,32,69,56,55,48,48,0] /* NIKON E8700\00 */, "i8", ALLOC_NONE, 5582152);
allocate([78,73,75,79,78,32,69,56,52,48,48,0] /* NIKON E8400\00 */, "i8", ALLOC_NONE, 5582164);
allocate([78,73,75,79,78,32,69,53,55,48,48,0] /* NIKON E5700\00 */, "i8", ALLOC_NONE, 5582176);
allocate([67,111,108,111,114,68,81,67,97,109,82,71,66,0] /* ColorDQCamRGB\00 */, "i8", ALLOC_NONE, 5582188);
allocate([78,73,75,79,78,32,69,53,52,48,48,0] /* NIKON E5400\00 */, "i8", ALLOC_NONE, 5582204);
allocate([78,73,75,79,78,32,69,53,48,48,48,0] /* NIKON E5000\00 */, "i8", ALLOC_NONE, 5582216);
allocate([78,73,75,79,78,32,69,52,53,48,48,0] /* NIKON E4500\00 */, "i8", ALLOC_NONE, 5582228);
allocate([78,73,75,79,78,32,69,52,51,48,48,0] /* NIKON E4300\00 */, "i8", ALLOC_NONE, 5582240);
allocate([78,73,75,79,78,32,69,51,50,48,48,0] /* NIKON E3200\00 */, "i8", ALLOC_NONE, 5582252);
allocate([78,73,75,79,78,32,69,50,53,48,48,0] /* NIKON E2500\00 */, "i8", ALLOC_NONE, 5582264);
allocate([78,73,75,79,78,32,69,50,49,48,48,0] /* NIKON E2100\00 */, "i8", ALLOC_NONE, 5582276);
allocate([78,73,75,79,78,32,69,57,57,53,0] /* NIKON E995\00 */, "i8", ALLOC_NONE, 5582288);
allocate([78,73,75,79,78,32,69,57,53,48,0] /* NIKON E950\00 */, "i8", ALLOC_NONE, 5582300);
allocate([78,73,75,79,78,32,68,57,48,0] /* NIKON D90\00 */, "i8", ALLOC_NONE, 5582312);
allocate([67,111,108,111,114,68,81,0] /* ColorDQ\00 */, "i8", ALLOC_NONE, 5582324);
allocate([78,73,75,79,78,32,68,56,48,0] /* NIKON D80\00 */, "i8", ALLOC_NONE, 5582332);
allocate([78,73,75,79,78,32,68,56,48,48,0] /* NIKON D800\00 */, "i8", ALLOC_NONE, 5582344);
allocate([78,73,75,79,78,32,68,55,48,0] /* NIKON D70\00 */, "i8", ALLOC_NONE, 5582356);
allocate([78,73,75,79,78,32,68,55,48,48,0] /* NIKON D700\00 */, "i8", ALLOC_NONE, 5582368);
allocate([78,73,75,79,78,32,68,55,48,48,48,0] /* NIKON D7000\00 */, "i8", ALLOC_NONE, 5582380);
allocate([78,73,75,79,78,32,68,54,48,0] /* NIKON D60\00 */, "i8", ALLOC_NONE, 5582392);
allocate([78,73,75,79,78,32,68,54,48,48,0] /* NIKON D600\00 */, "i8", ALLOC_NONE, 5582404);
allocate([78,73,75,79,78,32,68,53,48,0] /* NIKON D50\00 */, "i8", ALLOC_NONE, 5582416);
allocate([78,73,75,79,78,32,68,53,49,48,48,0] /* NIKON D5100\00 */, "i8", ALLOC_NONE, 5582428);
allocate([78,73,75,79,78,32,68,53,48,48,48,0] /* NIKON D5000\00 */, "i8", ALLOC_NONE, 5582440);
allocate([73,110,99,108,117,100,101,66,108,111,99,107,115,0] /* IncludeBlocks\00 */, "i8", ALLOC_NONE, 5582452);
allocate([109,97,107,101,95,100,101,99,111,100,101,114,40,41,0] /* make_decoder()\00 */, "i8", ALLOC_NONE, 5582468);
allocate([78,73,75,79,78,32,68,52,0] /* NIKON D4\00 */, "i8", ALLOC_NONE, 5582484);
allocate([78,73,75,79,78,32,68,52,48,0] /* NIKON D40\00 */, "i8", ALLOC_NONE, 5582496);
allocate([78,73,75,79,78,32,68,52,48,88,0] /* NIKON D40X\00 */, "i8", ALLOC_NONE, 5582508);
allocate([78,73,75,79,78,32,68,51,0] /* NIKON D3\00 */, "i8", ALLOC_NONE, 5582520);
allocate([78,73,75,79,78,32,68,51,83,0] /* NIKON D3S\00 */, "i8", ALLOC_NONE, 5582532);
allocate([78,73,75,79,78,32,68,51,88,0] /* NIKON D3X\00 */, "i8", ALLOC_NONE, 5582544);
allocate([78,73,75,79,78,32,68,51,48,48,0] /* NIKON D300\00 */, "i8", ALLOC_NONE, 5582556);
allocate([78,73,75,79,78,32,68,51,50,48,48,0] /* NIKON D3200\00 */, "i8", ALLOC_NONE, 5582568);
allocate([78,73,75,79,78,32,68,51,49,48,48,0] /* NIKON D3100\00 */, "i8", ALLOC_NONE, 5582580);
allocate([78,73,75,79,78,32,68,51,48,48,48,0] /* NIKON D3000\00 */, "i8", ALLOC_NONE, 5582592);
allocate([67,104,114,111,109,97,68,81,0] /* ChromaDQ\00 */, "i8", ALLOC_NONE, 5582604);
allocate([78,73,75,79,78,32,68,50,88,0] /* NIKON D2X\00 */, "i8", ALLOC_NONE, 5582616);
allocate([78,73,75,79,78,32,68,50,72,0] /* NIKON D2H\00 */, "i8", ALLOC_NONE, 5582628);
allocate([78,73,75,79,78,32,68,50,48,48,0] /* NIKON D200\00 */, "i8", ALLOC_NONE, 5582640);
allocate([78,73,75,79,78,32,68,49,0] /* NIKON D1\00 */, "i8", ALLOC_NONE, 5582652);
allocate([78,73,75,79,78,32,68,49,88,0] /* NIKON D1X\00 */, "i8", ALLOC_NONE, 5582664);
allocate([78,73,75,79,78,32,68,49,72,0] /* NIKON D1H\00 */, "i8", ALLOC_NONE, 5582676);
allocate([78,73,75,79,78,32,68,49,48,48,0] /* NIKON D100\00 */, "i8", ALLOC_NONE, 5582688);
allocate([77,79,84,79,82,79,76,65,32,80,73,88,76,0] /* MOTOROLA PIXL\00 */, "i8", ALLOC_NONE, 5582700);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,55,0] /* MINOLTA DYNAX 7\00 */, "i8", ALLOC_NONE, 5582716);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,53,0] /* MINOLTA DYNAX 5\00 */, "i8", ALLOC_NONE, 5582732);
allocate([65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0] /* ActiveImageArea\00 */, "i8", ALLOC_NONE, 5582748);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0] /* Minolta DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5582764);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0] /* Minolta DiMAGE A2\00 */, "i8", ALLOC_NONE, 5582784);
allocate([77,73,78,79,76,84,65,32,68,105,77,65,71,69,32,65,50,48,48,0] /* MINOLTA DiMAGE A200\ */, "i8", ALLOC_NONE, 5582804);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0] /* Minolta DiMAGE A1\00 */, "i8", ALLOC_NONE, 5582824);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0] /* Minolta DiMAGE 7\00 */, "i8", ALLOC_NONE, 5582844);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0] /* Minolta DiMAGE 7Hi\0 */, "i8", ALLOC_NONE, 5582864);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0] /* Minolta DiMAGE 5\00 */, "i8", ALLOC_NONE, 5582884);
allocate([77,105,99,114,111,110,32,50,48,49,48,0] /* Micron 2010\00 */, "i8", ALLOC_NONE, 5582904);
allocate([77,97,109,105,121,97,32,90,68,0] /* Mamiya ZD\00 */, "i8", ALLOC_NONE, 5582916);
allocate([76,101,97,102,32,65,112,116,117,115,32,55,53,0] /* Leaf Aptus 75\00 */, "i8", ALLOC_NONE, 5582928);
allocate([75,101,101,112,73,109,97,103,101,65,114,101,97,0] /* KeepImageArea\00 */, "i8", ALLOC_NONE, 5582944);
allocate([76,101,97,102,32,65,112,116,117,115,32,54,53,0] /* Leaf Aptus 65\00 */, "i8", ALLOC_NONE, 5582960);
allocate([76,101,97,102,32,65,112,116,117,115,32,53,52,83,0] /* Leaf Aptus 54S\00 */, "i8", ALLOC_NONE, 5582976);
allocate([76,101,97,102,32,86,97,108,101,111,32,54,0] /* Leaf Valeo 6\00 */, "i8", ALLOC_NONE, 5582992);
allocate([76,101,97,102,32,67,77,111,115,116,0] /* Leaf CMost\00 */, "i8", ALLOC_NONE, 5583008);
allocate([75,79,68,65,75,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0] /* KODAK EASYSHARE Z101 */, "i8", ALLOC_NONE, 5583020);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0] /* KODAK EasyShare Z990 */, "i8", ALLOC_NONE, 5583044);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0] /* KODAK EasyShare Z981 */, "i8", ALLOC_NONE, 5583068);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0] /* KODAK EasyShare Z980 */, "i8", ALLOC_NONE, 5583092);
allocate([75,79,68,65,75,32,80,56,56,48,0] /* KODAK P880\00 */, "i8", ALLOC_NONE, 5583116);
allocate([75,79,68,65,75,32,80,56,53,48,0] /* KODAK P850\00 */, "i8", ALLOC_NONE, 5583128);
allocate([83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0] /* SaturationLevel\00 */, "i8", ALLOC_NONE, 5583140);
allocate([75,79,68,65,75,32,80,55,49,50,0] /* KODAK P712\00 */, "i8", ALLOC_NONE, 5583156);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,0] /* Kodak ProBack\00 */, "i8", ALLOC_NONE, 5583168);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0] /* Kodak ProBack645\00 */, "i8", ALLOC_NONE, 5583184);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0] /* Kodak DCS Pro 14\00 */, "i8", ALLOC_NONE, 5583204);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0] /* Kodak DCS Pro 14nx\0 */, "i8", ALLOC_NONE, 5583224);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0] /* Kodak DCS Pro SLR\00 */, "i8", ALLOC_NONE, 5583244);
allocate([75,111,100,97,107,32,68,67,83,55,54,48,67,0] /* Kodak DCS760C\00 */, "i8", ALLOC_NONE, 5583264);
allocate([75,111,100,97,107,32,68,67,83,55,50,48,88,0] /* Kodak DCS720X\00 */, "i8", ALLOC_NONE, 5583280);
allocate([75,111,100,97,107,32,68,67,83,54,54,48,67,0] /* Kodak DCS660C\00 */, "i8", ALLOC_NONE, 5583296);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,88,0] /* Kodak DCS620X\00 */, "i8", ALLOC_NONE, 5583312);
allocate([80,111,115,116,80,111,108,121,77,97,116,114,105,120,0] /* PostPolyMatrix\00 */, "i8", ALLOC_NONE, 5583328);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,67,0] /* Kodak DCS620C\00 */, "i8", ALLOC_NONE, 5583344);
allocate([75,111,100,97,107,32,68,67,83,53,54,48,67,0] /* Kodak DCS560C\00 */, "i8", ALLOC_NONE, 5583360);
allocate([75,111,100,97,107,32,68,67,83,53,50,48,67,0] /* Kodak DCS520C\00 */, "i8", ALLOC_NONE, 5583376);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,51,66,0] /* KODAK EOSDCS3B\00 */, "i8", ALLOC_NONE, 5583392);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,49,0] /* KODAK EOSDCS1\00 */, "i8", ALLOC_NONE, 5583408);
allocate([75,79,68,65,75,32,68,67,83,52,54,48,0] /* KODAK DCS460\00 */, "i8", ALLOC_NONE, 5583424);
allocate([75,79,68,65,75,32,68,67,83,52,50,48,0] /* KODAK DCS420\00 */, "i8", ALLOC_NONE, 5583440);
allocate([75,111,100,97,107,32,68,67,83,51,51,48,67,0] /* Kodak DCS330C\00 */, "i8", ALLOC_NONE, 5583456);
allocate([75,111,100,97,107,32,68,67,83,51,49,53,67,0] /* Kodak DCS315C\00 */, "i8", ALLOC_NONE, 5583472);
allocate([75,79,68,65,75,32,78,67,50,48,48,48,0] /* KODAK NC2000\00 */, "i8", ALLOC_NONE, 5583488);
allocate([68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0] /* DarkShieldColRange\0 */, "i8", ALLOC_NONE, 5583504);
allocate([73,109,97,99,111,110,32,73,120,112,114,101,115,115,0] /* Imacon Ixpress\00 */, "i8", ALLOC_NONE, 5583524);
allocate([70,85,74,73,70,73,76,77,32,88,45,83,49,0] /* FUJIFILM X-S1\00 */, "i8", ALLOC_NONE, 5583540);
allocate([70,85,74,73,70,73,76,77,32,88,70,49,0] /* FUJIFILM XF1\00 */, "i8", ALLOC_NONE, 5583556);
allocate([70,85,74,73,70,73,76,77,32,88,45,69,49,0] /* FUJIFILM X-E1\00 */, "i8", ALLOC_NONE, 5583572);
allocate([70,85,74,73,70,73,76,77,32,88,45,80,114,111,49,0] /* FUJIFILM X-Pro1\00 */, "i8", ALLOC_NONE, 5583588);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,0] /* FUJIFILM X10\00 */, "i8", ALLOC_NONE, 5583604);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,48,0] /* FUJIFILM X100\00 */, "i8", ALLOC_NONE, 5583620);
allocate([70,85,74,73,70,73,76,77,32,72,83,51,0] /* FUJIFILM HS3\00 */, "i8", ALLOC_NONE, 5583636);
allocate([70,85,74,73,70,73,76,77,32,72,83,50,48,69,88,82,0] /* FUJIFILM HS20EXR\00 */, "i8", ALLOC_NONE, 5583652);
allocate([70,85,74,73,70,73,76,77,32,72,83,49,48,32,72,83,49,49,0] /* FUJIFILM HS10 HS11\0 */, "i8", ALLOC_NONE, 5583672);
allocate([70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Foveon interpolation */, "i8", ALLOC_NONE, 5583692);
allocate([70,85,74,73,70,73,76,77,32,73,83,32,80,114,111,0] /* FUJIFILM IS Pro\00 */, "i8", ALLOC_NONE, 5583720);
allocate([70,85,74,73,70,73,76,77,32,73,83,45,49,0] /* FUJIFILM IS-1\00 */, "i8", ALLOC_NONE, 5583736);
allocate([70,85,74,73,70,73,76,77,32,83,57,54,48,48,0] /* FUJIFILM S9600\00 */, "i8", ALLOC_NONE, 5583752);
allocate([70,85,74,73,70,73,76,77,32,83,57,49,48,48,0] /* FUJIFILM S9100\00 */, "i8", ALLOC_NONE, 5583768);
allocate([70,85,74,73,70,73,76,77,32,83,57,53,48,48,0] /* FUJIFILM S9500\00 */, "i8", ALLOC_NONE, 5583784);
allocate([70,85,74,73,70,73,76,77,32,83,57,48,48,48,0] /* FUJIFILM S9000\00 */, "i8", ALLOC_NONE, 5583800);
allocate([70,85,74,73,70,73,76,77,32,83,55,48,48,48,0] /* FUJIFILM S7000\00 */, "i8", ALLOC_NONE, 5583816);
allocate([70,85,74,73,70,73,76,77,32,83,54,0] /* FUJIFILM S6\00 */, "i8", ALLOC_NONE, 5583832);
allocate([70,85,74,73,70,73,76,77,32,83,53,54,48,48,0] /* FUJIFILM S5600\00 */, "i8", ALLOC_NONE, 5583844);
allocate([70,85,74,73,70,73,76,77,32,83,53,50,48,48,0] /* FUJIFILM S5200\00 */, "i8", ALLOC_NONE, 5583860);
allocate([102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0] /* foveon_make_curve()\ */, "i8", ALLOC_NONE, 5583876);
allocate([70,85,74,73,70,73,76,77,32,83,53,53,48,48,0] /* FUJIFILM S5500\00 */, "i8", ALLOC_NONE, 5583896);
allocate([70,85,74,73,70,73,76,77,32,83,53,49,48,48,0] /* FUJIFILM S5100\00 */, "i8", ALLOC_NONE, 5583912);
allocate([70,85,74,73,70,73,76,77,32,83,53,48,48,48,0] /* FUJIFILM S5000\00 */, "i8", ALLOC_NONE, 5583928);
allocate([70,85,74,73,70,73,76,77,32,83,53,80,114,111,0] /* FUJIFILM S5Pro\00 */, "i8", ALLOC_NONE, 5583944);
allocate([70,85,74,73,70,73,76,77,32,83,51,80,114,111,0] /* FUJIFILM S3Pro\00 */, "i8", ALLOC_NONE, 5583960);
allocate([70,85,74,73,70,73,76,77,32,83,50,80,114,111,0] /* FUJIFILM S2Pro\00 */, "i8", ALLOC_NONE, 5583976);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,80,114,111,0] /* FUJIFILM S20Pro\00 */, "i8", ALLOC_NONE, 5583992);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,48,69,88,82,0] /* FUJIFILM S200EXR\00 */, "i8", ALLOC_NONE, 5584008);
allocate([70,85,74,73,70,73,76,77,32,83,49,48,48,70,83,0] /* FUJIFILM S100FS\00 */, "i8", ALLOC_NONE, 5584028);
allocate([70,85,74,73,70,73,76,77,32,70,56,0] /* FUJIFILM F8\00 */, "i8", ALLOC_NONE, 5584044);
allocate([37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0] /* %s: \22%s\22 matrix  */, "i8", ALLOC_NONE, 5584056);
allocate([70,85,74,73,70,73,76,77,32,70,55,0] /* FUJIFILM F7\00 */, "i8", ALLOC_NONE, 5584084);
allocate([70,85,74,73,70,73,76,77,32,70,55,55,0] /* FUJIFILM F77\00 */, "i8", ALLOC_NONE, 5584096);
allocate([70,85,74,73,70,73,76,77,32,70,54,0] /* FUJIFILM F6\00 */, "i8", ALLOC_NONE, 5584112);
allocate([70,85,74,73,70,73,76,77,32,70,53,0] /* FUJIFILM F5\00 */, "i8", ALLOC_NONE, 5584124);
allocate([70,85,74,73,70,73,76,77,32,69,57,48,48,0] /* FUJIFILM E900\00 */, "i8", ALLOC_NONE, 5584136);
allocate([70,85,74,73,70,73,76,77,32,69,53,53,48,0] /* FUJIFILM E550\00 */, "i8", ALLOC_NONE, 5584152);
allocate([69,80,83,79,78,32,82,45,68,49,0] /* EPSON R-D1\00 */, "i8", ALLOC_NONE, 5584168);
allocate([67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0] /* Contax N Digital\00 */, "i8", ALLOC_NONE, 5584180);
allocate([67,73,78,69,32,54,54,48,0] /* CINE 660\00 */, "i8", ALLOC_NONE, 5584200);
allocate([67,73,78,69,32,54,53,48,0] /* CINE 650\00 */, "i8", ALLOC_NONE, 5584212);
allocate([102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0] /* foveon_camf_matrix() */, "i8", ALLOC_NONE, 5584224);
allocate([67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0] /* Corrupt data near 0x */, "i8", ALLOC_NONE, 5584248);
allocate([67,65,83,73,79,32,69,88,45,90,49,48,0] /* CASIO EX-Z10\00 */, "i8", ALLOC_NONE, 5584276);
allocate([67,65,83,73,79,32,69,88,45,90,55,53,48,0] /* CASIO EX-Z750\00 */, "i8", ALLOC_NONE, 5584292);
allocate([67,65,83,73,79,32,69,88,45,83,50,48,0] /* CASIO EX-S20\00 */, "i8", ALLOC_NONE, 5584308);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0] /* Canon PowerShot SX22 */, "i8", ALLOC_NONE, 5584324);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* Canon PowerShot SX11 */, "i8", ALLOC_NONE, 5584348);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* Canon PowerShot S3 I */, "i8", ALLOC_NONE, 5584376);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0] /* Canon PowerShot A720 */, "i8", ALLOC_NONE, 5584400);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* Canon PowerShot A650 */, "i8", ALLOC_NONE, 5584424);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* Canon PowerShot A640 */, "i8", ALLOC_NONE, 5584448);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* Canon PowerShot A630 */, "i8", ALLOC_NONE, 5584472);
allocate([67,77,98,0] /* CMb\00 */, "i8", ALLOC_NONE, 5584496);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* Canon PowerShot A620 */, "i8", ALLOC_NONE, 5584500);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* Canon PowerShot A610 */, "i8", ALLOC_NONE, 5584524);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* Canon PowerShot A470 */, "i8", ALLOC_NONE, 5584548);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0] /* Canon PowerShot SX50 */, "i8", ALLOC_NONE, 5584572);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0] /* Canon PowerShot SX1  */, "i8", ALLOC_NONE, 5584596);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0] /* Canon PowerShot S110 */, "i8", ALLOC_NONE, 5584620);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0] /* Canon PowerShot S100 */, "i8", ALLOC_NONE, 5584644);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0] /* Canon PowerShot S95\ */, "i8", ALLOC_NONE, 5584668);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0] /* Canon PowerShot S90\ */, "i8", ALLOC_NONE, 5584688);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0] /* Canon PowerShot S70\ */, "i8", ALLOC_NONE, 5584708);
allocate([37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0] /* %s has unknown CAMF  */, "i8", ALLOC_NONE, 5584728);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0] /* Canon PowerShot S60\ */, "i8", ALLOC_NONE, 5584760);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0] /* Canon PowerShot S50\ */, "i8", ALLOC_NONE, 5584780);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0] /* Canon PowerShot S45\ */, "i8", ALLOC_NONE, 5584800);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0] /* Canon PowerShot S40\ */, "i8", ALLOC_NONE, 5584820);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0] /* Canon PowerShot S30\ */, "i8", ALLOC_NONE, 5584840);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0] /* Canon PowerShot Pro9 */, "i8", ALLOC_NONE, 5584860);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* Canon PowerShot Pro7 */, "i8", ALLOC_NONE, 5584884);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0] /* Canon PowerShot Pro1 */, "i8", ALLOC_NONE, 5584908);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0] /* Canon PowerShot G9\0 */, "i8", ALLOC_NONE, 5584932);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0] /* Canon PowerShot G6\0 */, "i8", ALLOC_NONE, 5584952);
allocate([102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0] /* foveon_load_camf()\0 */, "i8", ALLOC_NONE, 5584972);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0] /* Canon PowerShot G5\0 */, "i8", ALLOC_NONE, 5584992);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0] /* Canon PowerShot G3\0 */, "i8", ALLOC_NONE, 5585012);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0] /* Canon PowerShot G2\0 */, "i8", ALLOC_NONE, 5585032);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0] /* Canon PowerShot G1\0 */, "i8", ALLOC_NONE, 5585052);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0] /* Canon PowerShot G1 X */, "i8", ALLOC_NONE, 5585072);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0] /* Canon PowerShot G15\ */, "i8", ALLOC_NONE, 5585096);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0] /* Canon PowerShot G12\ */, "i8", ALLOC_NONE, 5585116);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0] /* Canon PowerShot G11\ */, "i8", ALLOC_NONE, 5585136);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0] /* Canon PowerShot G10\ */, "i8", ALLOC_NONE, 5585156);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0] /* Canon PowerShot A5\0 */, "i8", ALLOC_NONE, 5585176);
allocate([102,111,118,101,111,110,95,116,104,117,109,98,40,41,0] /* foveon_thumb()\00 */, "i8", ALLOC_NONE, 5585196);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* Canon PowerShot A50\ */, "i8", ALLOC_NONE, 5585212);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* Canon PowerShot A530 */, "i8", ALLOC_NONE, 5585232);
allocate([67,97,110,111,110,32,69,79,83,0] /* Canon EOS\00 */, "i8", ALLOC_NONE, 5585256);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,0] /* Canon EOS-1D\00 */, "i8", ALLOC_NONE, 5585268);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,88,0] /* Canon EOS-1D X\00 */, "i8", ALLOC_NONE, 5585284);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,83,0] /* Canon EOS-1DS\00 */, "i8", ALLOC_NONE, 5585300);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585316);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585340);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585364);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0] /* Canon EOS-1D Mark IV */, "i8", ALLOC_NONE, 5585388);
allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0] /* %s: decoder table ov */, "i8", ALLOC_NONE, 5585412);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 5585440);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585448);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585472);
allocate([67,97,110,111,110,32,69,79,83,32,77,0] /* Canon EOS M\00 */, "i8", ALLOC_NONE, 5585496);
allocate([67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0] /* Canon EOS 1100D\00 */, "i8", ALLOC_NONE, 5585508);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0] /* Canon EOS 1000D\00 */, "i8", ALLOC_NONE, 5585524);
allocate([67,97,110,111,110,32,69,79,83,32,54,53,48,68,0] /* Canon EOS 650D\00 */, "i8", ALLOC_NONE, 5585540);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,48,68,0] /* Canon EOS 600D\00 */, "i8", ALLOC_NONE, 5585556);
allocate([67,97,110,111,110,32,69,79,83,32,53,53,48,68,0] /* Canon EOS 550D\00 */, "i8", ALLOC_NONE, 5585572);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,48,68,0] /* Canon EOS 500D\00 */, "i8", ALLOC_NONE, 5585588);
allocate([67,97,110,111,110,32,69,79,83,32,52,53,48,68,0] /* Canon EOS 450D\00 */, "i8", ALLOC_NONE, 5585604);
allocate([115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0] /* sony_arw2_load_raw() */, "i8", ALLOC_NONE, 5585620);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,48,68,0] /* Canon EOS 400D\00 */, "i8", ALLOC_NONE, 5585644);
allocate([67,97,110,111,110,32,69,79,83,32,51,53,48,68,0] /* Canon EOS 350D\00 */, "i8", ALLOC_NONE, 5585660);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,48,68,0] /* Canon EOS 300D\00 */, "i8", ALLOC_NONE, 5585676);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,68,0] /* Canon EOS 60D\00 */, "i8", ALLOC_NONE, 5585692);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,68,0] /* Canon EOS 50D\00 */, "i8", ALLOC_NONE, 5585708);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,68,0] /* Canon EOS 40D\00 */, "i8", ALLOC_NONE, 5585724);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,68,0] /* Canon EOS 30D\00 */, "i8", ALLOC_NONE, 5585740);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,0] /* Canon EOS 20D\00 */, "i8", ALLOC_NONE, 5585756);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,97,0] /* Canon EOS 20Da\00 */, "i8", ALLOC_NONE, 5585772);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,68,0] /* Canon EOS 10D\00 */, "i8", ALLOC_NONE, 5585788);
allocate([107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_262_load_raw() */, "i8", ALLOC_NONE, 5585804);
allocate([67,97,110,111,110,32,69,79,83,32,55,68,0] /* Canon EOS 7D\00 */, "i8", ALLOC_NONE, 5585828);
allocate([67,97,110,111,110,32,69,79,83,32,54,68,0] /* Canon EOS 6D\00 */, "i8", ALLOC_NONE, 5585844);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,0] /* Canon EOS 5D\00 */, "i8", ALLOC_NONE, 5585860);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585876);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585900);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,0] /* Canon EOS D60\00 */, "i8", ALLOC_NONE, 5585924);
allocate([67,97,110,111,110,32,69,79,83,32,68,51,48,0] /* Canon EOS D30\00 */, "i8", ALLOC_NONE, 5585940);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0] /* Canon EOS D6000\00 */, "i8", ALLOC_NONE, 5585956);
allocate([67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0] /* Canon EOS D2000\00 */, "i8", ALLOC_NONE, 5585972);
allocate([65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0] /* Apple QuickTake\00 */, "i8", ALLOC_NONE, 5585988);
allocate([107,111,100,97,107,95,121,114,103,98,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_yrgb_load_raw( */, "i8", ALLOC_NONE, 5586004);
allocate([65,71,70,65,80,72,79,84,79,32,68,67,45,56,51,51,109,0] /* AGFAPHOTO DC-833m\00 */, "i8", ALLOC_NONE, 5586028);
allocate([70,76,69,78,71,84,72,0] /* FLENGTH\00 */, "i8", ALLOC_NONE, 5586048);
allocate([65,80,69,82,84,85,82,69,0] /* APERTURE\00 */, "i8", ALLOC_NONE, 5586056);
allocate([69,88,80,84,73,77,69,0] /* EXPTIME\00 */, "i8", ALLOC_NONE, 5586068);
allocate([84,73,77,69,0] /* TIME\00 */, "i8", ALLOC_NONE, 5586076);
allocate([87,66,95,68,69,83,67,0] /* WB_DESC\00 */, "i8", ALLOC_NONE, 5586084);
allocate([67,65,77,77,79,68,69,76,0] /* CAMMODEL\00 */, "i8", ALLOC_NONE, 5586092);
allocate([67,65,77,77,65,78,85,70,0] /* CAMMANUF\00 */, "i8", ALLOC_NONE, 5586104);
allocate([73,83,79,0] /* ISO\00 */, "i8", ALLOC_NONE, 5586116);
allocate([37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0] /* %s: Tail is missing, */, "i8", ALLOC_NONE, 5586120);
allocate([101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0] /* eight_bit_load_raw() */, "i8", ALLOC_NONE, 5586164);
allocate([67,73,78,69,0] /* CINE\00 */, "i8", ALLOC_NONE, 5586188);
allocate([118,37,100,32,37,100,120,37,100,0] /* v%d %dx%d\00 */, "i8", ALLOC_NONE, 5586196);
allocate([83,77,97,76,0] /* SMaL\00 */, "i8", ALLOC_NONE, 5586208);
allocate([37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0] /* %_s %s %d %d:%d:%d % */, "i8", ALLOC_NONE, 5586216);
allocate([73,68,73,84,0] /* IDIT\00 */, "i8", ALLOC_NONE, 5586240);
allocate([110,99,116,103,0] /* nctg\00 */, "i8", ALLOC_NONE, 5586248);
allocate([76,73,83,84,0] /* LIST\00 */, "i8", ALLOC_NONE, 5586256);
allocate([82,73,70,70,0] /* RIFF\00 */, "i8", ALLOC_NONE, 5586264);
allocate([72,32,50,53,0] /* H 25\00 */, "i8", ALLOC_NONE, 5586272);
allocate([72,32,50,48,0] /* H 20\00 */, "i8", ALLOC_NONE, 5586280);
allocate([110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0] /* nokia_load_raw()\00 */, "i8", ALLOC_NONE, 5586288);
allocate([85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0] /* Unexpected end of fi */, "i8", ALLOC_NONE, 5586308);
allocate([72,32,49,48,0] /* H 10\00 */, "i8", ALLOC_NONE, 5586332);
allocate([76,105,103,104,116,80,104,97,115,101,0] /* LightPhase\00 */, "i8", ALLOC_NONE, 5586340);
allocate([80,104,97,115,101,32,79,110,101,0] /* Phase One\00 */, "i8", ALLOC_NONE, 5586352);
allocate([32,99,97,109,101,114,97,0] /*  camera\00 */, "i8", ALLOC_NONE, 5586364);
allocate([48,54,53,51,0] /* 0653\00 */, "i8", ALLOC_NONE, 5586372);
allocate([82,65,87,48,0] /* RAW0\00 */, "i8", ALLOC_NONE, 5586380);
allocate([84,72,85,77,66,0] /* THUMB\00 */, "i8", ALLOC_NONE, 5586388);
allocate([77,69,84,65,0] /* META\00 */, "i8", ALLOC_NONE, 5586396);
allocate([100,53,51,48,102,108,101,120,0] /* d530flex\00 */, "i8", ALLOC_NONE, 5586404);
allocate([82,111,108,108,101,105,0] /* Rollei\00 */, "i8", ALLOC_NONE, 5586416);
allocate([115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0] /* sinar_4shot_load_raw */, "i8", ALLOC_NONE, 5586424);
allocate([69,79,72,68,0] /* EOHD\00 */, "i8", ALLOC_NONE, 5586448);
allocate([84,89,32,0] /* TY \00 */, "i8", ALLOC_NONE, 5586456);
allocate([84,88,32,0] /* TX \00 */, "i8", ALLOC_NONE, 5586460);
allocate([89,32,32,0] /* Y  \00 */, "i8", ALLOC_NONE, 5586464);
allocate([88,32,32,0] /* X  \00 */, "i8", ALLOC_NONE, 5586468);
allocate([72,68,82,0] /* HDR\00 */, "i8", ALLOC_NONE, 5586472);
allocate([37,100,58,37,100,58,37,100,0] /* %d:%d:%d\00 */, "i8", ALLOC_NONE, 5586476);
allocate([84,73,77,0] /* TIM\00 */, "i8", ALLOC_NONE, 5586488);
allocate([68,65,84,0] /* DAT\00 */, "i8", ALLOC_NONE, 5586492);
allocate([48,49,51,52,53,54,55,48,50,56,0] /* 0134567028\00 */, "i8", ALLOC_NONE, 5586496);
allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0] /* leaf_hdr_load_raw()\ */, "i8", ALLOC_NONE, 5586508);
allocate([48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0] /* 023457000000006000\0 */, "i8", ALLOC_NONE, 5586528);
allocate([48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0] /* 01345:000000006008\0 */, "i8", ALLOC_NONE, 5586548);
allocate([48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0] /* 012346000000000000\0 */, "i8", ALLOC_NONE, 5586568);
allocate([80,114,111,49,0] /* Pro1\00 */, "i8", ALLOC_NONE, 5586588);
allocate([70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0] /* Failed to read metad */, "i8", ALLOC_NONE, 5586596);
allocate([82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Reading metadata fro */, "i8", ALLOC_NONE, 5586632);
allocate([46,74,80,71,0] /* .JPG\00 */, "i8", ALLOC_NONE, 5586664);
allocate([46,106,112,103,0] /* .jpg\00 */, "i8", ALLOC_NONE, 5586672);
allocate([112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0] /* parse_external_jpeg( */, "i8", ALLOC_NONE, 5586680);
allocate([68,105,77,65,71,69,32,65,50,48,48,0] /* DiMAGE A200\00 */, "i8", ALLOC_NONE, 5586704);
allocate([112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0] /* phase_one_load_raw_c */, "i8", ALLOC_NONE, 5586716);
allocate(1, "i8", ALLOC_NONE, 5586740);
allocate([68,69,66,85,71,32,82,65,87,0] /* DEBUG RAW\00 */, "i8", ALLOC_NONE, 5586744);
allocate([75,111,100,97,107,0] /* Kodak\00 */, "i8", ALLOC_NONE, 5586756);
allocate([75,79,68,65,75,0] /* KODAK\00 */, "i8", ALLOC_NONE, 5586764);
allocate([72,97,115,115,101,108,98,108,97,100,0] /* Hasselblad\00 */, "i8", ALLOC_NONE, 5586772);
allocate([37,102,32,37,102,32,37,102,0] /* %f %f %f\00 */, "i8", ALLOC_NONE, 5586784);
allocate([78,101,117,116,114,97,108,32,0] /* Neutral \00 */, "i8", ALLOC_NONE, 5586796);
allocate([73,120,112,114,101,115,115,32,37,100,45,77,112,0] /* Ixpress %d-Mp\00 */, "i8", ALLOC_NONE, 5586808);
allocate([73,109,97,99,111,110,0] /* Imacon\00 */, "i8", ALLOC_NONE, 5586824);
allocate([76,101,97,102,0] /* Leaf\00 */, "i8", ALLOC_NONE, 5586832);
allocate([112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0] /* phase_one_correct()\ */, "i8", ALLOC_NONE, 5586840);
allocate([77,65,84,82,73,88,0] /* MATRIX\00 */, "i8", ALLOC_NONE, 5586860);
allocate([3,4,5,0] /* \03\04\05\00 */, "i8", ALLOC_NONE, 5586868);
allocate([68,83,76,82,45,65,49,48,48,0] /* DSLR-A100\00 */, "i8", ALLOC_NONE, 5586872);
allocate([68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0] /* Digital Photo Profes */, "i8", ALLOC_NONE, 5586884);
allocate([78,105,107,111,110,32,83,99,97,110,0] /* Nikon Scan\00 */, "i8", ALLOC_NONE, 5586912);
allocate([66,105,98,98,108,101,0] /* Bibble\00 */, "i8", ALLOC_NONE, 5586924);
allocate([85,70,82,97,119,0] /* UFRaw\00 */, "i8", ALLOC_NONE, 5586932);
allocate([100,99,114,97,119,0] /* dcraw\00 */, "i8", ALLOC_NONE, 5586940);
allocate([80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0] /* Phase One correction */, "i8", ALLOC_NONE, 5586948);
allocate([65,100,111,98,101,0] /* Adobe\00 */, "i8", ALLOC_NONE, 5586976);
allocate([53,48,49,51,50,52,54,55,0] /* 50132467\00 */, "i8", ALLOC_NONE, 5586984);
allocate([148,97,22,73,0] /* \94a\16I\00 */, "i8", ALLOC_NONE, 5586996);
allocate([82,111,119,115,95,100,97,116,97,0] /* Rows_data\00 */, "i8", ALLOC_NONE, 5587004);
allocate([78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0] /* NeutObj_neutrals\00 */, "i8", ALLOC_NONE, 5587016);
allocate([73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0] /* ImgProf_rotation_ang */, "i8", ALLOC_NONE, 5587036);
allocate([67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0] /* CaptProf_mosaic_patt */, "i8", ALLOC_NONE, 5587060);
allocate([67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0] /* CaptProf_raw_data_ro */, "i8", ALLOC_NONE, 5587084);
allocate([67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0] /* CaptProf_number_of_p */, "i8", ALLOC_NONE, 5587112);
allocate([37,102,0] /* %f\00 */, "i8", ALLOC_NONE, 5587140);
allocate([112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0] /* phase_one_flat_field */, "i8", ALLOC_NONE, 5587144);
allocate([67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0] /* CaptProf_color_matri */, "i8", ALLOC_NONE, 5587168);
allocate([105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0] /* icc_camera_to_tone_m */, "i8", ALLOC_NONE, 5587192);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5587220);
allocate([83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0] /* ShootObj_back_type\0 */, "i8", ALLOC_NONE, 5587224);
allocate([105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0] /* icc_camera_profile\0 */, "i8", ALLOC_NONE, 5587244);
allocate([74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0] /* JPEG_preview_data\00 */, "i8", ALLOC_NONE, 5587264);
allocate([65,70,105,45,73,73,32,49,50,0] /* AFi-II 12\00 */, "i8", ALLOC_NONE, 5587284);
allocate([65,70,105,32,55,0] /* AFi 7\00 */, "i8", ALLOC_NONE, 5587296);
allocate([65,70,105,32,54,0] /* AFi 6\00 */, "i8", ALLOC_NONE, 5587304);
allocate([65,70,105,32,53,0] /* AFi 5\00 */, "i8", ALLOC_NONE, 5587312);
allocate([114,111,108,108,101,105,95,116,104,117,109,98,40,41,0] /* rollei_thumb()\00 */, "i8", ALLOC_NONE, 5587320);
allocate([65,112,116,117,115,32,55,53,83,0] /* Aptus 75S\00 */, "i8", ALLOC_NONE, 5587336);
allocate([65,112,116,117,115,32,54,53,83,0] /* Aptus 65S\00 */, "i8", ALLOC_NONE, 5587348);
allocate([65,112,116,117,115,32,53,52,83,0] /* Aptus 54S\00 */, "i8", ALLOC_NONE, 5587360);
allocate([65,112,116,117,115,32,54,53,0] /* Aptus 65\00 */, "i8", ALLOC_NONE, 5587372);
allocate([65,112,116,117,115,32,55,53,0] /* Aptus 75\00 */, "i8", ALLOC_NONE, 5587384);
allocate([65,112,116,117,115,32,50,50,0] /* Aptus 22\00 */, "i8", ALLOC_NONE, 5587396);
allocate([65,112,116,117,115,32,49,55,0] /* Aptus 17\00 */, "i8", ALLOC_NONE, 5587408);
allocate([86,97,108,101,111,32,49,55,0] /* Valeo 17\00 */, "i8", ALLOC_NONE, 5587420);
allocate([86,97,108,101,111,32,49,49,112,0] /* Valeo 11p\00 */, "i8", ALLOC_NONE, 5587432);
allocate([86,97,108,101,111,32,50,50,0] /* Valeo 22\00 */, "i8", ALLOC_NONE, 5587444);
allocate([80,37,100,10,37,100,32,37,100,10,50,53,53,10,0] /* P%d\0A%d %d\0A255\0A */, "i8", ALLOC_NONE, 5587456);
allocate([86,97,108,101,111,32,49,49,0] /* Valeo 11\00 */, "i8", ALLOC_NONE, 5587472);
allocate([86,97,108,101,111,32,54,0] /* Valeo 6\00 */, "i8", ALLOC_NONE, 5587484);
allocate([67,77,111,115,116,0] /* CMost\00 */, "i8", ALLOC_NONE, 5587492);
allocate([67,97,110,116,97,114,101,0] /* Cantare\00 */, "i8", ALLOC_NONE, 5587500);
allocate([86,111,108,97,114,101,0] /* Volare\00 */, "i8", ALLOC_NONE, 5587508);
allocate([68,67,66,50,0] /* DCB2\00 */, "i8", ALLOC_NONE, 5587516);
allocate([69,65,83,84,77,65,78,0] /* EASTMAN\00 */, "i8", ALLOC_NONE, 5587524);
allocate([37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0] /* %d:%d:%d %d:%d:%d\00 */, "i8", ALLOC_NONE, 5587532);
allocate([54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0] /* 66666_666;6A;:;55\00 */, "i8", ALLOC_NONE, 5587552);
allocate([108,97,121,101,114,95,116,104,117,109,98,40,41,0] /* layer_thumb()\00 */, "i8", ALLOC_NONE, 5587572);
allocate([48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0] /* 012347800000005896\0 */, "i8", ALLOC_NONE, 5587588);
allocate([80,69,78,84,65,88,0] /* PENTAX\00 */, "i8", ALLOC_NONE, 5587608);
allocate([48,49,48,48,0] /* 0100\00 */, "i8", ALLOC_NONE, 5587616);
allocate([78,82,87,32,0] /* NRW \00 */, "i8", ALLOC_NONE, 5587624);
allocate([48,54,53,0] /* 065\00 */, "i8", ALLOC_NONE, 5587632);
allocate([67,97,110,111,110,0] /* Canon\00 */, "i8", ALLOC_NONE, 5587636);
allocate([75,79,78,73,67,65,0] /* KONICA\00 */, "i8", ALLOC_NONE, 5587644);
allocate([78,73,75,79,78,0] /* NIKON\00 */, "i8", ALLOC_NONE, 5587652);
allocate([83,65,77,83,85,78,71,0] /* SAMSUNG\00 */, "i8", ALLOC_NONE, 5587660);
allocate([81,86,67,0] /* QVC\00 */, "i8", ALLOC_NONE, 5587668);
allocate([112,112,109,49,54,95,116,104,117,109,98,40,41,0] /* ppm16_thumb()\00 */, "i8", ALLOC_NONE, 5587672);
allocate([37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0] /* %s: Out of memory in */, "i8", ALLOC_NONE, 5587688);
allocate(472, "i8", ALLOC_NONE, 5587716);
HEAP32[((5245940)>>2)]=((5586740)|0);
HEAP32[((5245944)>>2)]=((5587516)|0);
HEAP32[((5245948)>>2)]=((5587508)|0);
HEAP32[((5245952)>>2)]=((5587500)|0);
HEAP32[((5245956)>>2)]=((5587492)|0);
HEAP32[((5245960)>>2)]=((5587484)|0);
HEAP32[((5245964)>>2)]=((5587472)|0);
HEAP32[((5245968)>>2)]=((5587444)|0);
HEAP32[((5245972)>>2)]=((5587432)|0);
HEAP32[((5245976)>>2)]=((5587420)|0);
HEAP32[((5245980)>>2)]=((5586740)|0);
HEAP32[((5245984)>>2)]=((5587408)|0);
HEAP32[((5245988)>>2)]=((5587396)|0);
HEAP32[((5245992)>>2)]=((5587384)|0);
HEAP32[((5245996)>>2)]=((5587372)|0);
HEAP32[((5246000)>>2)]=((5587360)|0);
HEAP32[((5246004)>>2)]=((5587348)|0);
HEAP32[((5246008)>>2)]=((5587336)|0);
HEAP32[((5246012)>>2)]=((5587312)|0);
HEAP32[((5246016)>>2)]=((5587304)|0);
HEAP32[((5246020)>>2)]=((5587296)|0);
HEAP32[((5246024)>>2)]=((5586740)|0);
HEAP32[((5246028)>>2)]=((5586740)|0);
HEAP32[((5246032)>>2)]=((5586740)|0);
HEAP32[((5246036)>>2)]=((5586740)|0);
HEAP32[((5246040)>>2)]=((5586740)|0);
HEAP32[((5246044)>>2)]=((5586740)|0);
HEAP32[((5246048)>>2)]=((5586740)|0);
HEAP32[((5246052)>>2)]=((5586740)|0);
HEAP32[((5246056)>>2)]=((5586740)|0);
HEAP32[((5246060)>>2)]=((5586740)|0);
HEAP32[((5246064)>>2)]=((5586740)|0);
HEAP32[((5246068)>>2)]=((5586740)|0);
HEAP32[((5246072)>>2)]=((5586740)|0);
HEAP32[((5246076)>>2)]=((5586740)|0);
HEAP32[((5246080)>>2)]=((5586740)|0);
HEAP32[((5246084)>>2)]=((5586740)|0);
HEAP32[((5246088)>>2)]=((5586740)|0);
HEAP32[((5246092)>>2)]=((5587284)|0);
HEAP32[((5267664)>>2)]=((5587636)|0);
HEAP32[((5267668)>>2)]=((5587652)|0);
HEAP32[((5267672)>>2)]=((5573404)|0);
HEAP32[((5267676)>>2)]=((5586764)|0);
HEAP32[((5267680)>>2)]=((5586756)|0);
HEAP32[((5267684)>>2)]=((5573468)|0);
HEAP32[((5267688)>>2)]=((5587608)|0);
HEAP32[((5267692)>>2)]=((5579292)|0);
HEAP32[((5267696)>>2)]=((5579284)|0);
HEAP32[((5267700)>>2)]=((5579276)|0);
HEAP32[((5267704)>>2)]=((5579268)|0);
HEAP32[((5267708)>>2)]=((5579868)|0);
HEAP32[((5267712)>>2)]=((5586352)|0);
HEAP32[((5267716)>>2)]=((5587660)|0);
HEAP32[((5267720)>>2)]=((5579260)|0);
HEAP32[((5267724)>>2)]=((5579248)|0);
HEAP32[((5267728)>>2)]=((5573420)|0);
HEAP32[((5560848)>>2)]=((5560472)|0);
HEAP32[((5560852)>>2)]=((5560888)|0);
HEAP32[((5560856)>>2)]=((5560400)|0);
HEAP32[((5560860)>>2)]=((5560556)|0);
HEAP32[((5560864)>>2)]=((5242888)|0);
HEAP32[((5560868)>>2)]=((5576656)|0);
HEAP32[((5560872)>>2)]=((5576636)|0);
HEAP32[((5560876)>>2)]=((5576620)|0);
HEAP32[((5560880)>>2)]=((5576604)|0);
HEAP32[((5560884)>>2)]=((5576600)|0);
HEAP32[((5561592)>>2)]=((5586028)|0);
HEAP32[((5561624)>>2)]=((5585988)|0);
HEAP32[((5561656)>>2)]=((5585972)|0);
HEAP32[((5561688)>>2)]=((5585956)|0);
HEAP32[((5561720)>>2)]=((5585940)|0);
HEAP32[((5561752)>>2)]=((5585924)|0);
HEAP32[((5561784)>>2)]=((5585900)|0);
HEAP32[((5561816)>>2)]=((5585876)|0);
HEAP32[((5561848)>>2)]=((5585860)|0);
HEAP32[((5561880)>>2)]=((5585844)|0);
HEAP32[((5561912)>>2)]=((5585828)|0);
HEAP32[((5561944)>>2)]=((5585788)|0);
HEAP32[((5561976)>>2)]=((5585772)|0);
HEAP32[((5562008)>>2)]=((5585756)|0);
HEAP32[((5562040)>>2)]=((5585740)|0);
HEAP32[((5562072)>>2)]=((5585724)|0);
HEAP32[((5562104)>>2)]=((5585708)|0);
HEAP32[((5562136)>>2)]=((5585692)|0);
HEAP32[((5562168)>>2)]=((5585676)|0);
HEAP32[((5562200)>>2)]=((5585660)|0);
HEAP32[((5562232)>>2)]=((5585644)|0);
HEAP32[((5562264)>>2)]=((5585604)|0);
HEAP32[((5562296)>>2)]=((5585588)|0);
HEAP32[((5562328)>>2)]=((5585572)|0);
HEAP32[((5562360)>>2)]=((5585556)|0);
HEAP32[((5562392)>>2)]=((5585540)|0);
HEAP32[((5562424)>>2)]=((5585524)|0);
HEAP32[((5562456)>>2)]=((5585508)|0);
HEAP32[((5562488)>>2)]=((5585496)|0);
HEAP32[((5562520)>>2)]=((5585472)|0);
HEAP32[((5562552)>>2)]=((5585448)|0);
HEAP32[((5562584)>>2)]=((5585388)|0);
HEAP32[((5562616)>>2)]=((5585364)|0);
HEAP32[((5562648)>>2)]=((5585340)|0);
HEAP32[((5562680)>>2)]=((5585316)|0);
HEAP32[((5562712)>>2)]=((5585300)|0);
HEAP32[((5562744)>>2)]=((5585284)|0);
HEAP32[((5562776)>>2)]=((5585268)|0);
HEAP32[((5562808)>>2)]=((5585256)|0);
HEAP32[((5562840)>>2)]=((5585232)|0);
HEAP32[((5562872)>>2)]=((5585212)|0);
HEAP32[((5562904)>>2)]=((5585176)|0);
HEAP32[((5562936)>>2)]=((5585156)|0);
HEAP32[((5562968)>>2)]=((5585136)|0);
HEAP32[((5563000)>>2)]=((5585116)|0);
HEAP32[((5563032)>>2)]=((5585096)|0);
HEAP32[((5563064)>>2)]=((5585072)|0);
HEAP32[((5563096)>>2)]=((5585052)|0);
HEAP32[((5563128)>>2)]=((5585032)|0);
HEAP32[((5563160)>>2)]=((5585012)|0);
HEAP32[((5563192)>>2)]=((5584992)|0);
HEAP32[((5563224)>>2)]=((5584952)|0);
HEAP32[((5563256)>>2)]=((5584932)|0);
HEAP32[((5563288)>>2)]=((5584908)|0);
HEAP32[((5563320)>>2)]=((5584884)|0);
HEAP32[((5563352)>>2)]=((5584860)|0);
HEAP32[((5563384)>>2)]=((5584840)|0);
HEAP32[((5563416)>>2)]=((5584820)|0);
HEAP32[((5563448)>>2)]=((5584800)|0);
HEAP32[((5563480)>>2)]=((5584780)|0);
HEAP32[((5563512)>>2)]=((5584760)|0);
HEAP32[((5563544)>>2)]=((5584708)|0);
HEAP32[((5563576)>>2)]=((5584688)|0);
HEAP32[((5563608)>>2)]=((5584668)|0);
HEAP32[((5563640)>>2)]=((5584644)|0);
HEAP32[((5563672)>>2)]=((5584620)|0);
HEAP32[((5563704)>>2)]=((5584596)|0);
HEAP32[((5563736)>>2)]=((5584572)|0);
HEAP32[((5563768)>>2)]=((5584548)|0);
HEAP32[((5563800)>>2)]=((5584524)|0);
HEAP32[((5563832)>>2)]=((5584500)|0);
HEAP32[((5563864)>>2)]=((5584472)|0);
HEAP32[((5563896)>>2)]=((5584448)|0);
HEAP32[((5563928)>>2)]=((5584424)|0);
HEAP32[((5563960)>>2)]=((5584400)|0);
HEAP32[((5563992)>>2)]=((5584376)|0);
HEAP32[((5564024)>>2)]=((5584348)|0);
HEAP32[((5564056)>>2)]=((5584324)|0);
HEAP32[((5564088)>>2)]=((5584308)|0);
HEAP32[((5564120)>>2)]=((5584292)|0);
HEAP32[((5564152)>>2)]=((5584276)|0);
HEAP32[((5564184)>>2)]=((5584212)|0);
HEAP32[((5564216)>>2)]=((5584200)|0);
HEAP32[((5564248)>>2)]=((5586188)|0);
HEAP32[((5564280)>>2)]=((5584180)|0);
HEAP32[((5564312)>>2)]=((5584168)|0);
HEAP32[((5564344)>>2)]=((5584152)|0);
HEAP32[((5564376)>>2)]=((5584136)|0);
HEAP32[((5564408)>>2)]=((5584124)|0);
HEAP32[((5564440)>>2)]=((5584112)|0);
HEAP32[((5564472)>>2)]=((5584096)|0);
HEAP32[((5564504)>>2)]=((5584084)|0);
HEAP32[((5564536)>>2)]=((5584044)|0);
HEAP32[((5564568)>>2)]=((5584028)|0);
HEAP32[((5564600)>>2)]=((5584008)|0);
HEAP32[((5564632)>>2)]=((5583992)|0);
HEAP32[((5564664)>>2)]=((5583976)|0);
HEAP32[((5564696)>>2)]=((5583960)|0);
HEAP32[((5564728)>>2)]=((5583944)|0);
HEAP32[((5564760)>>2)]=((5583928)|0);
HEAP32[((5564792)>>2)]=((5583912)|0);
HEAP32[((5564824)>>2)]=((5583896)|0);
HEAP32[((5564856)>>2)]=((5583860)|0);
HEAP32[((5564888)>>2)]=((5583844)|0);
HEAP32[((5564920)>>2)]=((5583832)|0);
HEAP32[((5564952)>>2)]=((5583816)|0);
HEAP32[((5564984)>>2)]=((5583800)|0);
HEAP32[((5565016)>>2)]=((5583784)|0);
HEAP32[((5565048)>>2)]=((5583768)|0);
HEAP32[((5565080)>>2)]=((5583752)|0);
HEAP32[((5565112)>>2)]=((5583736)|0);
HEAP32[((5565144)>>2)]=((5583720)|0);
HEAP32[((5565176)>>2)]=((5583672)|0);
HEAP32[((5565208)>>2)]=((5583652)|0);
HEAP32[((5565240)>>2)]=((5583636)|0);
HEAP32[((5565272)>>2)]=((5583620)|0);
HEAP32[((5565304)>>2)]=((5583604)|0);
HEAP32[((5565336)>>2)]=((5583588)|0);
HEAP32[((5565368)>>2)]=((5583572)|0);
HEAP32[((5565400)>>2)]=((5583556)|0);
HEAP32[((5565432)>>2)]=((5583540)|0);
HEAP32[((5565464)>>2)]=((5583524)|0);
HEAP32[((5565496)>>2)]=((5583488)|0);
HEAP32[((5565528)>>2)]=((5583472)|0);
HEAP32[((5565560)>>2)]=((5583456)|0);
HEAP32[((5565592)>>2)]=((5583440)|0);
HEAP32[((5565624)>>2)]=((5583424)|0);
HEAP32[((5565656)>>2)]=((5583408)|0);
HEAP32[((5565688)>>2)]=((5583392)|0);
HEAP32[((5565720)>>2)]=((5583376)|0);
HEAP32[((5565752)>>2)]=((5583360)|0);
HEAP32[((5565784)>>2)]=((5583344)|0);
HEAP32[((5565816)>>2)]=((5583312)|0);
HEAP32[((5565848)>>2)]=((5583296)|0);
HEAP32[((5565880)>>2)]=((5583280)|0);
HEAP32[((5565912)>>2)]=((5583264)|0);
HEAP32[((5565944)>>2)]=((5583244)|0);
HEAP32[((5565976)>>2)]=((5583224)|0);
HEAP32[((5566008)>>2)]=((5583204)|0);
HEAP32[((5566040)>>2)]=((5583184)|0);
HEAP32[((5566072)>>2)]=((5583168)|0);
HEAP32[((5566104)>>2)]=((5583156)|0);
HEAP32[((5566136)>>2)]=((5583128)|0);
HEAP32[((5566168)>>2)]=((5583116)|0);
HEAP32[((5566200)>>2)]=((5583092)|0);
HEAP32[((5566232)>>2)]=((5583068)|0);
HEAP32[((5566264)>>2)]=((5583044)|0);
HEAP32[((5566296)>>2)]=((5583020)|0);
HEAP32[((5566328)>>2)]=((5583008)|0);
HEAP32[((5566360)>>2)]=((5582992)|0);
HEAP32[((5566392)>>2)]=((5582976)|0);
HEAP32[((5566424)>>2)]=((5582960)|0);
HEAP32[((5566456)>>2)]=((5582928)|0);
HEAP32[((5566488)>>2)]=((5586832)|0);
HEAP32[((5566520)>>2)]=((5582916)|0);
HEAP32[((5566552)>>2)]=((5582904)|0);
HEAP32[((5566584)>>2)]=((5582884)|0);
HEAP32[((5566616)>>2)]=((5582864)|0);
HEAP32[((5566648)>>2)]=((5582844)|0);
HEAP32[((5566680)>>2)]=((5582824)|0);
HEAP32[((5566712)>>2)]=((5582804)|0);
HEAP32[((5566744)>>2)]=((5582784)|0);
HEAP32[((5566776)>>2)]=((5582764)|0);
HEAP32[((5566808)>>2)]=((5582732)|0);
HEAP32[((5566840)>>2)]=((5582716)|0);
HEAP32[((5566872)>>2)]=((5582700)|0);
HEAP32[((5566904)>>2)]=((5582688)|0);
HEAP32[((5566936)>>2)]=((5582676)|0);
HEAP32[((5566968)>>2)]=((5582664)|0);
HEAP32[((5567000)>>2)]=((5582652)|0);
HEAP32[((5567032)>>2)]=((5582640)|0);
HEAP32[((5567064)>>2)]=((5582628)|0);
HEAP32[((5567096)>>2)]=((5582616)|0);
HEAP32[((5567128)>>2)]=((5582592)|0);
HEAP32[((5567160)>>2)]=((5582580)|0);
HEAP32[((5567192)>>2)]=((5582568)|0);
HEAP32[((5567224)>>2)]=((5582556)|0);
HEAP32[((5567256)>>2)]=((5582544)|0);
HEAP32[((5567288)>>2)]=((5582532)|0);
HEAP32[((5567320)>>2)]=((5582520)|0);
HEAP32[((5567352)>>2)]=((5582508)|0);
HEAP32[((5567384)>>2)]=((5582496)|0);
HEAP32[((5567416)>>2)]=((5582484)|0);
HEAP32[((5567448)>>2)]=((5582440)|0);
HEAP32[((5567480)>>2)]=((5582428)|0);
HEAP32[((5567512)>>2)]=((5582416)|0);
HEAP32[((5567544)>>2)]=((5582404)|0);
HEAP32[((5567576)>>2)]=((5582392)|0);
HEAP32[((5567608)>>2)]=((5582380)|0);
HEAP32[((5567640)>>2)]=((5582368)|0);
HEAP32[((5567672)>>2)]=((5582356)|0);
HEAP32[((5567704)>>2)]=((5582344)|0);
HEAP32[((5567736)>>2)]=((5582332)|0);
HEAP32[((5567768)>>2)]=((5582312)|0);
HEAP32[((5567800)>>2)]=((5582300)|0);
HEAP32[((5567832)>>2)]=((5582288)|0);
HEAP32[((5567864)>>2)]=((5582276)|0);
HEAP32[((5567896)>>2)]=((5582264)|0);
HEAP32[((5567928)>>2)]=((5582252)|0);
HEAP32[((5567960)>>2)]=((5582240)|0);
HEAP32[((5567992)>>2)]=((5582228)|0);
HEAP32[((5568024)>>2)]=((5582216)|0);
HEAP32[((5568056)>>2)]=((5582204)|0);
HEAP32[((5568088)>>2)]=((5582176)|0);
HEAP32[((5568120)>>2)]=((5582164)|0);
HEAP32[((5568152)>>2)]=((5582152)|0);
HEAP32[((5568184)>>2)]=((5582140)|0);
HEAP32[((5568216)>>2)]=((5582120)|0);
HEAP32[((5568248)>>2)]=((5582100)|0);
HEAP32[((5568280)>>2)]=((5582080)|0);
HEAP32[((5568312)>>2)]=((5582060)|0);
HEAP32[((5568344)>>2)]=((5582048)|0);
HEAP32[((5568376)>>2)]=((5582036)|0);
HEAP32[((5568408)>>2)]=((5582004)|0);
HEAP32[((5568440)>>2)]=((5581988)|0);
HEAP32[((5568472)>>2)]=((5581972)|0);
HEAP32[((5568504)>>2)]=((5581960)|0);
HEAP32[((5568536)>>2)]=((5581948)|0);
HEAP32[((5568568)>>2)]=((5581932)|0);
HEAP32[((5568600)>>2)]=((5581920)|0);
HEAP32[((5568632)>>2)]=((5581904)|0);
HEAP32[((5568664)>>2)]=((5581888)|0);
HEAP32[((5568696)>>2)]=((5581872)|0);
HEAP32[((5568728)>>2)]=((5581844)|0);
HEAP32[((5568760)>>2)]=((5581832)|0);
HEAP32[((5568792)>>2)]=((5581816)|0);
HEAP32[((5568824)>>2)]=((5581800)|0);
HEAP32[((5568856)>>2)]=((5581784)|0);
HEAP32[((5568888)>>2)]=((5581768)|0);
HEAP32[((5568920)>>2)]=((5581752)|0);
HEAP32[((5568952)>>2)]=((5581736)|0);
HEAP32[((5568984)>>2)]=((5581720)|0);
HEAP32[((5569016)>>2)]=((5581708)|0);
HEAP32[((5569048)>>2)]=((5581672)|0);
HEAP32[((5569080)>>2)]=((5581656)|0);
HEAP32[((5569112)>>2)]=((5581640)|0);
HEAP32[((5569144)>>2)]=((5581624)|0);
HEAP32[((5569176)>>2)]=((5581608)|0);
HEAP32[((5569208)>>2)]=((5581592)|0);
HEAP32[((5569240)>>2)]=((5581576)|0);
HEAP32[((5569272)>>2)]=((5581560)|0);
HEAP32[((5569304)>>2)]=((5581544)|0);
HEAP32[((5569336)>>2)]=((5581528)|0);
HEAP32[((5569368)>>2)]=((5581496)|0);
HEAP32[((5569400)>>2)]=((5581480)|0);
HEAP32[((5569432)>>2)]=((5581464)|0);
HEAP32[((5569464)>>2)]=((5581448)|0);
HEAP32[((5569496)>>2)]=((5581436)|0);
HEAP32[((5569528)>>2)]=((5581420)|0);
HEAP32[((5569560)>>2)]=((5581404)|0);
HEAP32[((5569592)>>2)]=((5581388)|0);
HEAP32[((5569624)>>2)]=((5581372)|0);
HEAP32[((5569656)>>2)]=((5581356)|0);
HEAP32[((5569688)>>2)]=((5581316)|0);
HEAP32[((5569720)>>2)]=((5581300)|0);
HEAP32[((5569752)>>2)]=((5581284)|0);
HEAP32[((5569784)>>2)]=((5581268)|0);
HEAP32[((5569816)>>2)]=((5581252)|0);
HEAP32[((5569848)>>2)]=((5581236)|0);
HEAP32[((5569880)>>2)]=((5581220)|0);
HEAP32[((5569912)>>2)]=((5581208)|0);
HEAP32[((5569944)>>2)]=((5581196)|0);
HEAP32[((5569976)>>2)]=((5581184)|0);
HEAP32[((5570008)>>2)]=((5581136)|0);
HEAP32[((5570040)>>2)]=((5581120)|0);
HEAP32[((5570072)>>2)]=((5581108)|0);
HEAP32[((5570104)>>2)]=((5581096)|0);
HEAP32[((5570136)>>2)]=((5581084)|0);
HEAP32[((5570168)>>2)]=((5581068)|0);
HEAP32[((5570200)>>2)]=((5581056)|0);
HEAP32[((5570232)>>2)]=((5581044)|0);
HEAP32[((5570264)>>2)]=((5581032)|0);
HEAP32[((5570296)>>2)]=((5581012)|0);
HEAP32[((5570328)>>2)]=((5580968)|0);
HEAP32[((5570360)>>2)]=((5580948)|0);
HEAP32[((5570392)>>2)]=((5580928)|0);
HEAP32[((5570424)>>2)]=((5580908)|0);
HEAP32[((5570456)>>2)]=((5580888)|0);
HEAP32[((5570488)>>2)]=((5580868)|0);
HEAP32[((5570520)>>2)]=((5580852)|0);
HEAP32[((5570552)>>2)]=((5580832)|0);
HEAP32[((5570584)>>2)]=((5580812)|0);
HEAP32[((5570616)>>2)]=((5580796)|0);
HEAP32[((5570648)>>2)]=((5580744)|0);
HEAP32[((5570680)>>2)]=((5580728)|0);
HEAP32[((5570712)>>2)]=((5580708)|0);
HEAP32[((5570744)>>2)]=((5580692)|0);
HEAP32[((5570776)>>2)]=((5580672)|0);
HEAP32[((5570808)>>2)]=((5580656)|0);
HEAP32[((5570840)>>2)]=((5580636)|0);
HEAP32[((5570872)>>2)]=((5580620)|0);
HEAP32[((5570904)>>2)]=((5580600)|0);
HEAP32[((5570936)>>2)]=((5580584)|0);
HEAP32[((5570968)>>2)]=((5580552)|0);
HEAP32[((5571000)>>2)]=((5580536)|0);
HEAP32[((5571032)>>2)]=((5580516)|0);
HEAP32[((5571064)>>2)]=((5580500)|0);
HEAP32[((5571096)>>2)]=((5580480)|0);
HEAP32[((5571128)>>2)]=((5580464)|0);
HEAP32[((5571160)>>2)]=((5580444)|0);
HEAP32[((5571192)>>2)]=((5580428)|0);
HEAP32[((5571224)>>2)]=((5580408)|0);
HEAP32[((5571256)>>2)]=((5580388)|0);
HEAP32[((5571288)>>2)]=((5580356)|0);
HEAP32[((5571320)>>2)]=((5580336)|0);
HEAP32[((5571352)>>2)]=((5580316)|0);
HEAP32[((5571384)>>2)]=((5580296)|0);
HEAP32[((5571416)>>2)]=((5580276)|0);
HEAP32[((5571448)>>2)]=((5580256)|0);
HEAP32[((5571480)>>2)]=((5580236)|0);
HEAP32[((5571512)>>2)]=((5580216)|0);
HEAP32[((5571544)>>2)]=((5580196)|0);
HEAP32[((5571576)>>2)]=((5580176)|0);
HEAP32[((5571608)>>2)]=((5580132)|0);
HEAP32[((5571640)>>2)]=((5580112)|0);
HEAP32[((5571672)>>2)]=((5580096)|0);
HEAP32[((5571704)>>2)]=((5580080)|0);
HEAP32[((5571736)>>2)]=((5580064)|0);
HEAP32[((5571768)>>2)]=((5580048)|0);
HEAP32[((5571800)>>2)]=((5580032)|0);
HEAP32[((5571832)>>2)]=((5580016)|0);
HEAP32[((5571864)>>2)]=((5580000)|0);
HEAP32[((5571896)>>2)]=((5579992)|0);
HEAP32[((5571928)>>2)]=((5579976)|0);
HEAP32[((5571960)>>2)]=((5579960)|0);
HEAP32[((5571992)>>2)]=((5579948)|0);
HEAP32[((5572024)>>2)]=((5579932)|0);
HEAP32[((5572056)>>2)]=((5579920)|0);
HEAP32[((5572088)>>2)]=((5579904)|0);
HEAP32[((5572120)>>2)]=((5579888)|0);
HEAP32[((5572152)>>2)]=((5579876)|0);
HEAP32[((5572184)>>2)]=((5579868)|0);
HEAP32[((5572216)>>2)]=((5579852)|0);
HEAP32[((5572248)>>2)]=((5579836)|0);
HEAP32[((5572280)>>2)]=((5579824)|0);
HEAP32[((5572312)>>2)]=((5579808)|0);
HEAP32[((5572344)>>2)]=((5579792)|0);
HEAP32[((5572376)>>2)]=((5579776)|0);
HEAP32[((5572408)>>2)]=((5579760)|0);
HEAP32[((5572440)>>2)]=((5579744)|0);
HEAP32[((5572472)>>2)]=((5579728)|0);
HEAP32[((5572504)>>2)]=((5579712)|0);
HEAP32[((5572536)>>2)]=((5579696)|0);
HEAP32[((5572568)>>2)]=((5579668)|0);
HEAP32[((5572600)>>2)]=((5579652)|0);
HEAP32[((5572632)>>2)]=((5579636)|0);
HEAP32[((5572664)>>2)]=((5579620)|0);
HEAP32[((5572696)>>2)]=((5579604)|0);
HEAP32[((5572728)>>2)]=((5579588)|0);
HEAP32[((5572760)>>2)]=((5579572)|0);
HEAP32[((5572792)>>2)]=((5579556)|0);
HEAP32[((5572824)>>2)]=((5579544)|0);
HEAP32[((5572856)>>2)]=((5579532)|0);
HEAP32[((5572888)>>2)]=((5579508)|0);
HEAP32[((5572920)>>2)]=((5579496)|0);
HEAP32[((5572952)>>2)]=((5579508)|0);
HEAP32[((5572984)>>2)]=((5579496)|0);
HEAP32[((5573016)>>2)]=((5579484)|0);
HEAP32[((5573048)>>2)]=((5579472)|0);
HEAP32[((5573080)>>2)]=((5579460)|0);
HEAP32[((5573112)>>2)]=((5579444)|0);
HEAP32[((5573144)>>2)]=((5579428)|0);
HEAP32[((5573176)>>2)]=((5579412)|0);
HEAP32[((5573208)>>2)]=((5579396)|0);
HEAP32[((5573240)>>2)]=((5579380)|0);
HEAP32[((5573272)>>2)]=((5579340)|0);
HEAP32[((5573304)>>2)]=((5579324)|0);
HEAP32[((5573336)>>2)]=((5579308)|0);
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
   function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[((arg++)|0)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }var _ftello=_ftell;
   var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }var _ntohs=_htons;
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc_unlocked=_fgetc;
  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[(((src)+(i))|0)];
        var second = HEAP8[(((src)+(i + 1))|0)];
        HEAP8[(((dest)+(i))|0)]=second
        HEAP8[(((dest)+(i + 1))|0)]=first
      }
    }
   var _llvm_memset_p0i8_i32=_memset;
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }
  var _getc=_fgetc;
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        // TODO: Support strings like "%5c" etc.
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'c') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          fields++;
          next = get();
          HEAP8[(argPtr)]=next
          formatIndex += 2;
          continue;
        }
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=((HEAP32[((tempDoublePtr)>>2)])|0),HEAP32[(((argPtr)+(4))>>2)]=((HEAP32[(((tempDoublePtr)+(4))>>2)])|0))
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest;
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[((str+1)|0)] == 'x'.charCodeAt(0) ||
              HEAP8[((str+1)|0)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return (asm.setTempRet0(Math.min(Math.floor((ret)/(+(4294967296))), (+(4294967295)))>>>0),ret>>>0);
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  var _cos=Math.cos;
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
   var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  var _exp=Math.exp;
  var _floor=Math.floor;
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else if (size < FS.currentPath.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < FS.currentPath.length; i++) {
          HEAP8[(((buf)+(i))|0)]=FS.currentPath.charCodeAt(i)
        }
        HEAP8[(((buf)+(i))|0)]=0
        return buf;
      }
    }
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;
  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(':'.charCodeAt(0), stdout);
        _fputc(' '.charCodeAt(0), stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }
  var _llvm_pow_f64=Math.pow;
  var _log=Math.log;
  var _sqrt=Math.sqrt;
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (FS.streams[stream]) {
        var stack = [];
        var get = function() { var ret = _fgetc(stream); stack.push(ret); return ret };
        var unget = function(c) { return _ungetc(stack.pop(), stream) };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[(((s)+(i))|0)]=result.charCodeAt(i);
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAPU8[(((px)+(i))|0)]);
        var y = _tolower(HEAPU8[(((py)+(i))|0)]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }
  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }
  var _fseeko=_fseek;
  var _ntohl=_htonl;
  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding || HEAP8[(((psrc)+(i))|0)] == 0;
      }
      return pdest;
    }
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  var ___tm_timezones={};function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if (FS.streams[fildes].isTerminal) return 1;
      ___setErrNo(ERRNO_CODES.ENOTTY);
      return 0;
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  var ___utimbuf_struct_layout={__size__:8,actime:0,modtime:4};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[(((times)+(offset))>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }
  var ___tm_formatted=allocate(4*26, "i8", ALLOC_STACK);
  function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[(((buf)+(index))|0)]=chr.charCodeAt(0)
      });
      HEAP8[(((buf)+(25))|0)]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }
  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[((pdest+len+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest;
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }
  var _sqrtf=Math.sqrt;
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }
  var _floorf=Math.floor;
  var _llvm_memset_p0i8_i64=_memset;
  function _exp2(x) {
      return Math.pow(2, x);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        this.lockPointer = lockPointer;
        this.resizeCanvas = resizeCanvas;
        if (typeof this.lockPointer === 'undefined') this.lockPointer = true;
        if (typeof this.resizeCanvas === 'undefined') this.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.exitPointerLock = document['exitPointerLock'] ||
                                     document['mozExitPointerLock'] ||
                                     document['webkitExitPointerLock'];
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        if (!this.fullScreenHandlersInstalled) {
          this.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
var Runtime_bitshift64 = Runtime.bitshift64;
var Math_min = Math.min;
var i64Math_add = function(a, b, c, d) { i64Math.add(a, b, c, d) };
var i64Math_subtract = function(a, b, c, d) { i64Math.subtract(a, b, c, d) };
var i64Math_multiply = function(a, b, c, d) { i64Math.multiply(a, b, c, d) };
var i64Math_divide = function(a, b, c, d, e) { i64Math.divide(a, b, c, d, e) };
var i64Math_modulo = function(a, b, c, d, e) { i64Math.modulo(a, b, c, d, e) };
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var _stdin=env._stdin|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __THREW__ = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var copyTempDouble=env.copyTempDouble;
  var copyTempFloat=env.copyTempFloat;
  var Runtime_bitshift64=env.Runtime_bitshift64;
  var Math_min=env.min;
  var i64Math_add=env.i64Math_add;
  var i64Math_subtract=env.i64Math_subtract;
  var i64Math_multiply=env.i64Math_multiply;
  var i64Math_divide=env.i64Math_divide;
  var i64Math_modulo=env.i64Math_modulo;
  var _strncasecmp=env._strncasecmp;
  var _lseek=env._lseek;
  var __scanString=env.__scanString;
  var _fclose=env._fclose;
  var __isFloat=env.__isFloat;
  var _strtol=env._strtol;
  var _fputc=env._fputc;
  var _swab=env._swab;
  var _fwrite=env._fwrite;
  var _mktime=env._mktime;
  var _tmpnam=env._tmpnam;
  var _isspace=env._isspace;
  var _localtime=env._localtime;
  var _read=env._read;
  var _perror=env._perror;
  var _utime=env._utime;
  var _fileno=env._fileno;
  var _strstr=env._strstr;
  var _ctime=env._ctime;
  var _fsync=env._fsync;
  var _fscanf=env._fscanf;
  var _strcmp=env._strcmp;
  var _memchr=env._memchr;
  var _strncmp=env._strncmp;
  var _tmpfile=env._tmpfile;
  var _snprintf=env._snprintf;
  var _fgetc=env._fgetc;
  var _strcat=env._strcat;
  var _cosh=env._cosh;
  var _fgets=env._fgets;
  var _close=env._close;
  var _strchr=env._strchr;
  var ___setErrNo=env.___setErrNo;
  var _ftell=env._ftell;
  var _sprintf=env._sprintf;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _asctime=env._asctime;
  var _strrchr=env._strrchr;
  var _getcwd=env._getcwd;
  var _localtime_r=env._localtime_r;
  var _asctime_r=env._asctime_r;
  var _cos=env._cos;
  var _putchar=env._putchar;
  var _puts=env._puts;
  var _strcpy=env._strcpy;
  var _isupper=env._isupper;
  var _tzset=env._tzset;
  var _sinh=env._sinh;
  var _floorf=env._floorf;
  var _ldexp=env._ldexp;
  var _printf=env._printf;
  var _pread=env._pread;
  var _fopen=env._fopen;
  var _open=env._open;
  var _sqrtf=env._sqrtf;
  var _strncpy=env._strncpy;
  var _log=env._log;
  var _putenv=env._putenv;
  var _fputs=env._fputs;
  var _exp2=env._exp2;
  var _htonl=env._htonl;
  var _isatty=env._isatty;
  var __formatString=env.__formatString;
  var _atoi=env._atoi;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _sbrk=env._sbrk;
  var _tanh=env._tanh;
  var ___errno_location=env.___errno_location;
  var _strerror=env._strerror;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _llvm_bswap_i32=env._llvm_bswap_i32;
  var __parseInt=env.__parseInt;
  var _ungetc=env._ungetc;
  var _sscanf=env._sscanf;
  var _sysconf=env._sysconf;
  var _fread=env._fread;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var ___buildEnvironment=env.___buildEnvironment;
  var _feof=env._feof;
  var _htons=env._htons;
  var _floor=env._floor;
  var _fseek=env._fseek;
  var _sqrt=env._sqrt;
  var _write=env._write;
  var _longjmp=env._longjmp;
  var _tolower=env._tolower;
  var _strcasecmp=env._strcasecmp;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _exp=env._exp;
  var _time=env._time;
// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size | 0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 3 >> 2 << 2;
  return ret | 0;
}
function stackSave() {
  return STACKTOP | 0;
}
function stackRestore(top) {
  top = top | 0;
  STACKTOP = top;
}
function setThrew(threw) {
  threw = threw | 0;
  __THREW__ = threw;
}
function setTempRet0(value) {
  value = value | 0;
  tempRet0 = value;
}
function setTempRet1(value) {
  value = value | 0;
  tempRet1 = value;
}
function setTempRet2(value) {
  value = value | 0;
  tempRet2 = value;
}
function setTempRet3(value) {
  value = value | 0;
  tempRet3 = value;
}
function setTempRet4(value) {
  value = value | 0;
  tempRet4 = value;
}
function setTempRet5(value) {
  value = value | 0;
  tempRet5 = value;
}
function setTempRet6(value) {
  value = value | 0;
  tempRet6 = value;
}
function setTempRet7(value) {
  value = value | 0;
  tempRet7 = value;
}
function setTempRet8(value) {
  value = value | 0;
  tempRet8 = value;
}
function setTempRet9(value) {
  value = value | 0;
  tempRet9 = value;
}
function _canon_600_fixed_wb($temp) {
  $temp = $temp | 0;
  var $lo_0 = 0, $dec = 0, $dec_lcssa = 0, $hi_0 = 0, $conv19 = 0, $frac_0 = 0.0, $sub38 = 0.0;
  $lo_0 = 4;
  while (1) {
    $dec = $lo_0 - 1 | 0;
    if (($dec | 0) == 0) {
      $dec_lcssa = 0;
      break;
    }
    if ((HEAP16[5561044 + ($dec * 10 & -1) >> 1] << 16 >> 16 | 0) > ($temp | 0)) {
      $lo_0 = $dec;
    } else {
      $dec_lcssa = $dec;
      break;
    }
  }
  $hi_0 = 0;
  while (1) {
    if (($hi_0 | 0) >= 3) {
      break;
    }
    if ((HEAP16[5561044 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16 | 0) < ($temp | 0)) {
      $hi_0 = $hi_0 + 1 | 0;
    } else {
      break;
    }
  }
  if (($dec_lcssa | 0) == ($hi_0 | 0)) {
    $frac_0 = 0.0;
  } else {
    $conv19 = HEAP16[5561044 + ($dec_lcssa * 10 & -1) >> 1] << 16 >> 16;
    $frac_0 = +($temp - $conv19 | 0) / +((HEAP16[5561044 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16) - $conv19 | 0);
  }
  $sub38 = 1.0 - $frac_0;
  HEAPF32[1311403] = 1.0 / ($frac_0 * +(HEAP16[5561046 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16 | 0) + $sub38 * +(HEAP16[5561046 + ($dec_lcssa * 10 & -1) >> 1] << 16 >> 16 | 0));
  HEAPF32[1311404] = 1.0 / ($frac_0 * +(HEAP16[5561048 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16 | 0) + $sub38 * +(HEAP16[5561048 + ($dec_lcssa * 10 & -1) >> 1] << 16 >> 16 | 0));
  HEAPF32[1311405] = 1.0 / ($frac_0 * +(HEAP16[5561050 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16 | 0) + $sub38 * +(HEAP16[5561050 + ($dec_lcssa * 10 & -1) >> 1] << 16 >> 16 | 0));
  HEAPF32[1311406] = 1.0 / ($frac_0 * +(HEAP16[5561052 + ($hi_0 * 10 & -1) >> 1] << 16 >> 16 | 0) + $sub38 * +(HEAP16[5561052 + ($dec_lcssa * 10 & -1) >> 1] << 16 >> 16 | 0));
  return;
}
function _canon_600_color($ratio, $mar) {
  $ratio = $ratio | 0;
  $mar = $mar | 0;
  var $arrayidx = 0, $1 = 0, $3 = 0, $clipped_2 = 0, $cond = 0, $5 = 0, $sub44 = 0, $_sub44 = 0, $retval_0 = 0;
  $arrayidx = $ratio + 4 | 0;
  $1 = HEAP32[$arrayidx >> 2] | 0;
  do {
    if (+HEAPF32[1350793] != 0.0) {
      if (($1 | 0) < -104) {
        HEAP32[$arrayidx >> 2] = -104;
        $clipped_2 = 1;
        $3 = -104;
        break;
      }
      if (($1 | 0) <= 12) {
        $clipped_2 = 0;
        $3 = $1;
        break;
      }
      HEAP32[$arrayidx >> 2] = 12;
      $clipped_2 = 1;
      $3 = 12;
    } else {
      if (($1 + 264 | 0) >>> 0 > 725) {
        $retval_0 = 2;
        return $retval_0 | 0;
      }
      if (($1 | 0) < -50) {
        HEAP32[$arrayidx >> 2] = -50;
        $clipped_2 = 1;
        $3 = -50;
        break;
      }
      if (($1 | 0) <= 307) {
        $clipped_2 = 0;
        $3 = $1;
        break;
      }
      HEAP32[$arrayidx >> 2] = 307;
      $clipped_2 = 1;
      $3 = 307;
    }
  } while (0);
  if (+HEAPF32[1350793] != 0.0 | ($3 | 0) < 197) {
    $cond = -38 - (($3 * 398 & -1) >> 10) | 0;
  } else {
    $cond = (($3 * 48 & -1) >> 10) - 123 | 0;
  }
  $5 = HEAP32[$ratio >> 2] | 0;
  if (($cond + 20 | 0) >= ($5 | 0) & ($cond - $mar | 0) <= ($5 | 0) & ($clipped_2 | 0) == 0) {
    $retval_0 = 0;
    return $retval_0 | 0;
  }
  $sub44 = $cond - $5 | 0;
  if (((($sub44 | 0) > -1 ? $sub44 : -$sub44 | 0) | 0) >= ($mar << 2 | 0)) {
    $retval_0 = 2;
    return $retval_0 | 0;
  }
  $_sub44 = ($sub44 | 0) < -20 ? -20 : $sub44;
  HEAP32[$ratio >> 2] = $cond - (($_sub44 | 0) > ($mar | 0) ? $mar : $_sub44) | 0;
  $retval_0 = 1;
  return $retval_0 | 0;
}
function _canon_600_coeff() {
  var $1 = 0.0, $div = 0.0, $div1 = 0.0, $conv = 0.0, $t_0 = 0, $t_1 = 0, $t_2 = 0, $4 = 0, $c_013_us = 0, $inc_us = 0, $c_013_us_1 = 0, $inc_us_1 = 0, $c_013_us_2 = 0, $inc_us_2 = 0;
  $1 = +HEAPF32[1311405];
  $div = +HEAPF32[1311404] / $1;
  $div1 = +HEAPF32[1311406] / $1;
  $conv = $div;
  do {
    if ($div <= 1.0 | $conv > 1.28) {
      $t_0 = 0;
    } else {
      if ($div1 >= .8789) {
        $t_0 = 0;
        break;
      }
      $t_0 = 1;
    }
  } while (0);
  do {
    if ($conv > 1.28 & $div <= 2.0) {
      if ($div1 < .8789) {
        $t_1 = 3;
        break;
      }
      if ($div1 > 2.0) {
        $t_1 = $t_0;
        break;
      }
      $t_1 = 4;
    } else {
      $t_1 = $t_0;
    }
  } while (0);
  $t_2 = +HEAPF32[1350793] != 0.0 ? 5 : $t_1;
  HEAP32[1311252] = 0;
  $4 = HEAP32[1390240] | 0;
  if (($4 | 0) > 0) {
    $c_013_us = 0;
  } else {
    return;
  }
  while (1) {
    HEAPF32[5244932 + ($c_013_us << 2) >> 2] = +(HEAP16[5561100 + ($t_2 * 24 & -1) + ($c_013_us << 1) >> 1] << 16 >> 16 | 0) * .0009765625;
    $inc_us = $c_013_us + 1 | 0;
    if (($inc_us | 0) == ($4 | 0)) {
      $c_013_us_1 = 0;
      break;
    } else {
      $c_013_us = $inc_us;
    }
  }
  while (1) {
    HEAPF32[5244948 + ($c_013_us_1 << 2) >> 2] = +(HEAP16[5561100 + ($t_2 * 24 & -1) + ($c_013_us_1 + 4 << 1) >> 1] << 16 >> 16 | 0) * .0009765625;
    $inc_us_1 = $c_013_us_1 + 1 | 0;
    if (($inc_us_1 | 0) == ($4 | 0)) {
      $c_013_us_2 = 0;
      break;
    } else {
      $c_013_us_1 = $inc_us_1;
    }
  }
  while (1) {
    HEAPF32[5244964 + ($c_013_us_2 << 2) >> 2] = +(HEAP16[5561100 + ($t_2 * 24 & -1) + ($c_013_us_2 + 8 << 1) >> 1] << 16 >> 16 | 0) * .0009765625;
    $inc_us_2 = $c_013_us_2 + 1 | 0;
    if (($inc_us_2 | 0) == ($4 | 0)) {
      break;
    } else {
      $c_013_us_2 = $inc_us_2;
    }
  }
  return;
}
function _derror() {
  var $1 = 0, $2 = 0, $tobool2 = 0, $4 = 0, $call5 = 0, $conv$0 = 0, $conv$1 = 0, $$etemp$0 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  do {
    if ((HEAP32[1357154] | 0) == 0) {
      $1 = HEAP32[_stderr >> 2] | 0;
      $2 = HEAP32[1316054] | 0;
      _fprintf($1 | 0, 5585440, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt) | 0);
      $tobool2 = (_feof(HEAP32[1316053] | 0) | 0) == 0;
      $4 = HEAP32[_stderr >> 2] | 0;
      if ($tobool2) {
        $call5 = _ftell(HEAP32[1316053] | 0) | 0;
        $conv$0 = $call5;
        $conv$1 = ($call5 | 0) < 0 ? -1 : 0;
        $$etemp$0 = 5584248;
        _fprintf($4 | 0, $$etemp$0 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv$0, HEAP32[tempInt + 4 >> 2] = $conv$1, tempInt) | 0);
        break;
      } else {
        _fwrite(5586308, 23, 1, $4 | 0);
        break;
      }
    }
  } while (0);
  HEAP32[1357154] = (HEAP32[1357154] | 0) + 1 | 0;
  STACKTOP = __stackBase__;
  return;
}
function _getreal($type) {
  $type = $type | 0;
  var $str_i132 = 0, $str_i111 = 0, $str_i90 = 0, $str_i69 = 0, $str_i54 = 0, $str_i33 = 0, $str_i12 = 0, $str_i3 = 0, $str_i = 0, $u = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $10 = 0, $retval_0_i_i11 = 0, $14 = 0, $retval_0_i_i31 = 0, $conv6 = 0.0, $d = 0, $18 = 0, $retval_0_i_i52 = 0, $22 = 0, $conv2_i_i58 = 0, $24 = 0, $retval_0_in_i_i66 = 0, $26 = 0, $27 = 0, $29 = 0, $retval_0_i_i88 = 0, $33 = 0, $retval_0_i_i109 = 0, $conv18 = 0.0, $d19 = 0, $37 = 0, $retval_0_i_i130 = 0, $41 = 0, $retval_0_i_i151 = 0, $cmp = 0, $mul = 0, $c = 0, $d40 = 0, $retval_0 = 0.0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  $str_i132 = __stackBase__ | 0;
  $str_i111 = __stackBase__ + 4 | 0;
  $str_i90 = __stackBase__ + 8 | 0;
  $str_i69 = __stackBase__ + 12 | 0;
  $str_i54 = __stackBase__ + 16 | 0;
  $str_i33 = __stackBase__ + 20 | 0;
  $str_i12 = __stackBase__ + 24 | 0;
  $str_i3 = __stackBase__ + 28 | 0;
  $str_i = __stackBase__ + 32 | 0;
  $u = __stackBase__ + 36 | 0;
  if (($type | 0) == 9) {
    $26 = $str_i69;
    HEAP32[$str_i69 >> 2] = -1;
    $27 = HEAP32[1316053] | 0;
    _fread($26 | 0, 1, 4, $27 | 0);
    $29 = HEAP32[$str_i69 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i88 = $29;
    } else {
      $retval_0_i_i88 = _llvm_bswap_i32($29 | 0) | 0;
    }
    $retval_0 = +($retval_0_i_i88 | 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 10) {
    HEAP32[$str_i90 >> 2] = -1;
    _fread($str_i90 | 0, 1, 4, HEAP32[1316053] | 0);
    $33 = HEAP32[$str_i90 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i109 = $33;
    } else {
      $retval_0_i_i109 = _llvm_bswap_i32($33 | 0) | 0;
    }
    $conv18 = +($retval_0_i_i109 | 0);
    $d19 = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv18, HEAP32[$d19 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$d19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAP32[$str_i111 >> 2] = -1;
    _fread($str_i111 | 0, 1, 4, HEAP32[1316053] | 0);
    $37 = HEAP32[$str_i111 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i130 = $37;
    } else {
      $retval_0_i_i130 = _llvm_bswap_i32($37 | 0) | 0;
    }
    $retval_0 = $conv18 / +($retval_0_i_i130 | 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 5) {
    HEAP32[$str_i12 >> 2] = -1;
    _fread($str_i12 | 0, 1, 4, HEAP32[1316053] | 0);
    $14 = HEAP32[$str_i12 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i31 = $14;
    } else {
      $retval_0_i_i31 = _llvm_bswap_i32($14 | 0) | 0;
    }
    $conv6 = +($retval_0_i_i31 >>> 0 >>> 0);
    $d = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv6, HEAP32[$d >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$d + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAP32[$str_i33 >> 2] = -1;
    _fread($str_i33 | 0, 1, 4, HEAP32[1316053] | 0);
    $18 = HEAP32[$str_i33 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i52 = $18;
    } else {
      $retval_0_i_i52 = _llvm_bswap_i32($18 | 0) | 0;
    }
    $retval_0 = $conv6 / +($retval_0_i_i52 >>> 0 >>> 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 3) {
    HEAP16[$str_i >> 1] = -1;
    _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
    $3 = HEAP16[$str_i >> 1] | 0;
    $conv2_i_i = $3 & 255;
    $5 = ($3 & 65535) >>> 8;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
    } else {
      $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
    }
    $retval_0 = +(($retval_0_in_i_i & 65535) >>> 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 4) {
    HEAP32[$str_i3 >> 2] = -1;
    _fread($str_i3 | 0, 1, 4, HEAP32[1316053] | 0);
    $10 = HEAP32[$str_i3 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i11 = $10;
    } else {
      $retval_0_i_i11 = _llvm_bswap_i32($10 | 0) | 0;
    }
    $retval_0 = +($retval_0_i_i11 >>> 0 >>> 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 8) {
    HEAP16[$str_i54 >> 1] = -1;
    _fread($str_i54 | 0, 1, 2, HEAP32[1316053] | 0);
    $22 = HEAP16[$str_i54 >> 1] | 0;
    $conv2_i_i58 = $22 & 255;
    $24 = ($22 & 65535) >>> 8;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_in_i_i66 = ($24 & 65535) << 8 | $conv2_i_i58;
    } else {
      $retval_0_in_i_i66 = $conv2_i_i58 << 8 | $24 & 65535;
    }
    $retval_0 = +(($retval_0_in_i_i66 & 65535) << 16 >> 16 | 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 11) {
    HEAP32[$str_i132 >> 2] = -1;
    _fread($str_i132 | 0, 1, 4, HEAP32[1316053] | 0);
    $41 = HEAP32[$str_i132 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i151 = $41;
    } else {
      $retval_0_i_i151 = _llvm_bswap_i32($41 | 0) | 0;
    }
    $retval_0 = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151, +HEAPF32[tempDoublePtr >> 2]);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else if (($type | 0) == 12) {
    $cmp = HEAP16[2631518] << 16 >> 16 == 18761;
    $mul = -(($cmp ^ (_htons(4660) | 0) == 4660) & 1 ^ 1) & 7;
    $c = $u;
    HEAP8[$c + $mul | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 1) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 2) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 3) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 4) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 5) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 6) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    HEAP8[$c + ($mul ^ 7) | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
    $d40 = $u | 0;
    $retval_0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$d40 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$d40 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    STACKTOP = __stackBase__;
    return +$retval_0;
  } else {
    $retval_0 = +(_fgetc(HEAP32[1316053] | 0) | 0);
    STACKTOP = __stackBase__;
    return +$retval_0;
  }
  return 0.0;
}
function _canon_600_auto_wb() {
  var $count = 0, $test = 0, $total = 0, $ratio = 0, $0 = 0, $conv1 = 0, $mar_0 = 0, $mar_1 = 0, $5 = 0, $6 = 0, $7 = 0, $row_080 = 0, $col_076 = 0, $8 = 0, $conv33 = 0, $conv35 = 0, $11 = 0, $i_066 = 0, $add23 = 0, $and24 = 0, $and30 = 0, $inc = 0, $i_1 = 0, $i_2 = 0, $sub80 = 0, $arrayidx99 = 0, $17 = 0, $18 = 0, $arrayidx110 = 0, $arrayidx99_1 = 0, $19 = 0, $20 = 0, $arrayidx110_1 = 0, $call115 = 0, $arrayidx99_184 = 0, $21 = 0, $22 = 0, $arrayidx110_189 = 0, $arrayidx99_1_1 = 0, $23 = 0, $24 = 0, $arrayidx110_1_1 = 0, $call115_1 = 0, $or = 0, $shr145 = 0, $shr145_1 = 0, $27 = 0, $28 = 0, $add172 = 0, $29 = 0, $30 = 0, $31 = 0, $add175 = 0, $32 = 0, $33 = 0, $conv186 = 0, $shr145_196 = 0, $shr145_1_1 = 0, $44 = 0, $45 = 0, $arrayidx164 = 0, $arrayidx164_1 = 0, $arrayidx164_2 = 0, $arrayidx164_3 = 0, $arrayidx164_4 = 0, $arrayidx164_5 = 0, $arrayidx164_6 = 0, $arrayidx164_7 = 0, $arrayidx169 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  $count = __stackBase__ | 0;
  $test = __stackBase__ + 8 | 0;
  $total = __stackBase__ + 40 | 0;
  $ratio = __stackBase__ + 104 | 0;
  $0 = $count;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  _memset($total | 0, 0, 64);
  $conv1 = ~~(+HEAPF32[1390260] + .5);
  do {
    if (($conv1 | 0) < 10) {
      $mar_0 = 150;
    } else {
      if (($conv1 | 0) > 12) {
        $mar_0 = 20;
        break;
      }
      $mar_0 = ($conv1 * -20 & -1) + 280 | 0;
    }
  } while (0);
  $mar_1 = +HEAPF32[1350793] != 0.0 ? 80 : $mar_0;
  $5 = HEAP16[2699404] | 0;
  if ((($5 & 65535) - 14 | 0) > 14) {
    $row_080 = 14;
    $7 = HEAP16[2621484] | 0;
    $6 = $5;
    while (1) {
      if (($7 & 65535) > 10) {
        $col_076 = 10;
        while (1) {
          $8 = HEAP32[1356938] | 0;
          $conv33 = HEAPU16[2622460] | 0;
          $conv35 = HEAPU16[2632094] | 0;
          $11 = HEAP32[1316051] | 0;
          $i_066 = 0;
          while (1) {
            $add23 = ($i_066 >> 1) + $row_080 | 0;
            $and24 = $i_066 & 1;
            $and30 = $8 >>> (($add23 << 1 & 14 | $and24) << 1 >>> 0) & 3;
            HEAP32[$test + (($and30 | $i_066 & 4) << 2) >> 2] = HEAPU16[$11 + (Math_imul($add23 >> $conv33, $conv35) + (($and24 | $col_076) >> $conv33) << 3) + ($and30 << 1) >> 1] | 0;
            $inc = $i_066 + 1 | 0;
            if (($inc | 0) == 8) {
              $i_1 = 0;
              break;
            } else {
              $i_066 = $inc;
            }
          }
          while (1) {
            if (($i_1 | 0) >= 8) {
              $i_2 = 0;
              label = 100;
              break;
            }
            if (((HEAP32[$test + ($i_1 << 2) >> 2] | 0) - 150 | 0) >>> 0 > 1350) {
              break;
            } else {
              $i_1 = $i_1 + 1 | 0;
            }
          }
          L131 : do {
            if ((label | 0) == 100) {
              while (1) {
                label = 0;
                if (($i_2 | 0) >= 4) {
                  break;
                }
                $sub80 = (HEAP32[$test + ($i_2 << 2) >> 2] | 0) - (HEAP32[$test + ($i_2 + 4 << 2) >> 2] | 0) | 0;
                if (((($sub80 | 0) > -1 ? $sub80 : -$sub80 | 0) | 0) > 50) {
                  break L131;
                } else {
                  $i_2 = $i_2 + 1 | 0;
                  label = 100;
                }
              }
              $arrayidx99 = $test + 4 | 0;
              $17 = HEAP32[$arrayidx99 >> 2] | 0;
              $18 = HEAP32[$test >> 2] | 0;
              $arrayidx110 = $ratio | 0;
              HEAP32[$arrayidx110 >> 2] = ($17 - $18 << 10 | 0) / ($18 | 0) & -1;
              $arrayidx99_1 = $test + 12 | 0;
              $19 = HEAP32[$arrayidx99_1 >> 2] | 0;
              $20 = HEAP32[$test + 8 >> 2] | 0;
              $arrayidx110_1 = $ratio + 4 | 0;
              HEAP32[$arrayidx110_1 >> 2] = ($19 - $20 << 10 | 0) / ($20 | 0) & -1;
              $call115 = _canon_600_color($arrayidx110, $mar_1) | 0;
              $arrayidx99_184 = $test + 20 | 0;
              $21 = HEAP32[$arrayidx99_184 >> 2] | 0;
              $22 = HEAP32[$test + 16 >> 2] | 0;
              $arrayidx110_189 = $ratio + 8 | 0;
              HEAP32[$arrayidx110_189 >> 2] = ($21 - $22 << 10 | 0) / ($22 | 0) & -1;
              $arrayidx99_1_1 = $test + 28 | 0;
              $23 = HEAP32[$arrayidx99_1_1 >> 2] | 0;
              $24 = HEAP32[$test + 24 >> 2] | 0;
              $arrayidx110_1_1 = $ratio + 12 | 0;
              HEAP32[$arrayidx110_1_1 >> 2] = ($23 - $24 << 10 | 0) / ($24 | 0) & -1;
              $call115_1 = _canon_600_color($arrayidx110_189, $mar_1) | 0;
              $or = $call115_1 | $call115;
              if (($or | 0) > 1) {
                break;
              }
              if (($call115 | 0) == 0) {
                $28 = $17;
                $27 = $19;
              } else {
                $shr145 = Math_imul((HEAP32[$arrayidx110 >> 2] | 0) + 1024 | 0, $18) >> 10;
                HEAP32[$arrayidx99 >> 2] = $shr145;
                $shr145_1 = Math_imul((HEAP32[$arrayidx110_1 >> 2] | 0) + 1024 | 0, $20) >> 10;
                HEAP32[$arrayidx99_1 >> 2] = $shr145_1;
                $28 = $shr145;
                $27 = $shr145_1;
              }
              if (($call115_1 | 0) == 0) {
                $45 = $21;
                $44 = $23;
              } else {
                $shr145_196 = Math_imul((HEAP32[$arrayidx110_189 >> 2] | 0) + 1024 | 0, $22) >> 10;
                HEAP32[$arrayidx99_184 >> 2] = $shr145_196;
                $shr145_1_1 = Math_imul((HEAP32[$arrayidx110_1_1 >> 2] | 0) + 1024 | 0, $24) >> 10;
                HEAP32[$arrayidx99_1_1 >> 2] = $shr145_1_1;
                $45 = $shr145_196;
                $44 = $shr145_1_1;
              }
              $arrayidx164 = $total + ($or << 5) | 0;
              HEAP32[$arrayidx164 >> 2] = (HEAP32[$arrayidx164 >> 2] | 0) + $18 | 0;
              $arrayidx164_1 = $total + ($or << 5) + 4 | 0;
              HEAP32[$arrayidx164_1 >> 2] = (HEAP32[$arrayidx164_1 >> 2] | 0) + $28 | 0;
              $arrayidx164_2 = $total + ($or << 5) + 8 | 0;
              HEAP32[$arrayidx164_2 >> 2] = (HEAP32[$arrayidx164_2 >> 2] | 0) + $20 | 0;
              $arrayidx164_3 = $total + ($or << 5) + 12 | 0;
              HEAP32[$arrayidx164_3 >> 2] = (HEAP32[$arrayidx164_3 >> 2] | 0) + $27 | 0;
              $arrayidx164_4 = $total + ($or << 5) + 16 | 0;
              HEAP32[$arrayidx164_4 >> 2] = (HEAP32[$arrayidx164_4 >> 2] | 0) + $22 | 0;
              $arrayidx164_5 = $total + ($or << 5) + 20 | 0;
              HEAP32[$arrayidx164_5 >> 2] = (HEAP32[$arrayidx164_5 >> 2] | 0) + $45 | 0;
              $arrayidx164_6 = $total + ($or << 5) + 24 | 0;
              HEAP32[$arrayidx164_6 >> 2] = (HEAP32[$arrayidx164_6 >> 2] | 0) + $24 | 0;
              $arrayidx164_7 = $total + ($or << 5) + 28 | 0;
              HEAP32[$arrayidx164_7 >> 2] = (HEAP32[$arrayidx164_7 >> 2] | 0) + $44 | 0;
              $arrayidx169 = $count + ($or << 2) | 0;
              HEAP32[$arrayidx169 >> 2] = (HEAP32[$arrayidx169 >> 2] | 0) + 1 | 0;
            }
          } while (0);
          $add172 = $col_076 + 2 | 0;
          $29 = HEAP16[2621484] | 0;
          if (($add172 | 0) < ($29 & 65535 | 0)) {
            $col_076 = $add172;
          } else {
            break;
          }
        }
        $31 = $29;
        $30 = HEAP16[2699404] | 0;
      } else {
        $31 = $7;
        $30 = $6;
      }
      $add175 = $row_080 + 4 | 0;
      if (($add175 | 0) < (($30 & 65535) - 14 | 0)) {
        $row_080 = $add175;
        $7 = $31;
        $6 = $30;
      } else {
        break;
      }
    }
    $33 = HEAP32[$count >> 2] | 0;
    $32 = HEAP32[$count + 4 >> 2] | 0;
  } else {
    $33 = 0;
    $32 = 0;
  }
  if (($32 | $33 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $conv186 = ($33 * 200 & -1 | 0) < ($32 | 0) & 1;
  HEAPF32[1311403] = 1.0 / +((HEAP32[$total + ($conv186 << 5) + 16 >> 2] | 0) + (HEAP32[$total + ($conv186 << 5) >> 2] | 0) | 0);
  HEAPF32[1311404] = 1.0 / +((HEAP32[$total + ($conv186 << 5) + 20 >> 2] | 0) + (HEAP32[$total + ($conv186 << 5) + 4 >> 2] | 0) | 0);
  HEAPF32[1311405] = 1.0 / +((HEAP32[$total + ($conv186 << 5) + 24 >> 2] | 0) + (HEAP32[$total + ($conv186 << 5) + 8 >> 2] | 0) | 0);
  HEAPF32[1311406] = 1.0 / +((HEAP32[$total + ($conv186 << 5) + 28 >> 2] | 0) + (HEAP32[$total + ($conv186 << 5) + 12 >> 2] | 0) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _canon_600_load_raw() {
  var $data = 0, $arraydecay = 0, $add_ptr8 = 0, $row_041_us = 0, $irow_040_us = 0, $add85_us = 0, $conv86_us = 0, $inc_us = 0, $pix_036_us = 0, $dp_035_us = 0, $arrayidx13_us = 0, $arrayidx48_us = 0, $add_ptr83_us = 0, $mul_us = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1120 | 0;
  $data = __stackBase__ | 0;
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = $data | 0;
  $add_ptr8 = $data + 1120 | 0;
  $irow_040_us = 0;
  $row_041_us = 0;
  while (1) {
    if ((_fread($arraydecay | 0, 1, 1120, HEAP32[1316053] | 0) | 0) >>> 0 < 1120) {
      _derror();
    }
    $mul_us = Math_imul(HEAPU16[2622498] | 0, $row_041_us);
    $dp_035_us = $arraydecay;
    $pix_036_us = (HEAP32[1311250] | 0) + ($mul_us << 1) | 0;
    while (1) {
      $arrayidx13_us = $dp_035_us + 1 | 0;
      HEAP16[$pix_036_us >> 1] = (HEAP8[$arrayidx13_us] & 255) >>> 6 | (HEAPU8[$dp_035_us] | 0) << 2;
      HEAP16[$pix_036_us + 2 >> 1] = (HEAP8[$arrayidx13_us] & 255) >>> 4 & 3 | (HEAPU8[$dp_035_us + 2 | 0] | 0) << 2;
      HEAP16[$pix_036_us + 4 >> 1] = (HEAP8[$arrayidx13_us] & 255) >>> 2 & 3 | (HEAPU8[$dp_035_us + 3 | 0] | 0) << 2;
      HEAP16[$pix_036_us + 6 >> 1] = HEAP8[$arrayidx13_us] & 3 | (HEAPU8[$dp_035_us + 4 | 0] | 0) << 2;
      $arrayidx48_us = $dp_035_us + 9 | 0;
      HEAP16[$pix_036_us + 8 >> 1] = HEAP8[$arrayidx48_us] & 3 | (HEAPU8[$dp_035_us + 5 | 0] | 0) << 2;
      HEAP16[$pix_036_us + 10 >> 1] = (HEAP8[$arrayidx48_us] & 255) >>> 2 & 3 | (HEAPU8[$dp_035_us + 6 | 0] | 0) << 2;
      HEAP16[$pix_036_us + 12 >> 1] = (HEAP8[$arrayidx48_us] & 255) >>> 4 & 3 | (HEAPU8[$dp_035_us + 7 | 0] | 0) << 2;
      HEAP16[$pix_036_us + 14 >> 1] = (HEAP8[$arrayidx48_us] & 255) >>> 6 | (HEAPU8[$dp_035_us + 8 | 0] | 0) << 2;
      $add_ptr83_us = $dp_035_us + 10 | 0;
      if ($add_ptr83_us >>> 0 < $add_ptr8 >>> 0) {
        $dp_035_us = $add_ptr83_us;
        $pix_036_us = $pix_036_us + 16 | 0;
      } else {
        break;
      }
    }
    $add85_us = $row_041_us + 2 | 0;
    $conv86_us = HEAPU16[2699404] | 0;
    $inc_us = $irow_040_us + 1 | 0;
    if (($inc_us | 0) < ($conv86_us | 0)) {
      $irow_040_us = $inc_us;
      $row_041_us = ($add85_us | 0) > ($conv86_us | 0) ? 1 : $add85_us;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _canon_600_correct() {
  var $0 = 0, $1 = 0, $2 = 0, $row_020 = 0, $and = 0, $and21 = 0, $col_017 = 0, $and7 = 0, $and9 = 0, $conv10 = 0, $add15 = 0, $arrayidx16 = 0, $sub = 0, $inc = 0, $10 = 0, $11 = 0, $12 = 0, $inc45 = 0, $13 = 0, $sub47 = 0, $mul48 = 0, $shr49 = 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    _canon_600_fixed_wb(1311);
    _canon_600_auto_wb();
    _canon_600_coeff();
    $13 = HEAP32[1390380] | 0;
    $sub47 = 1023 - $13 | 0;
    $mul48 = $sub47 * 1109 & -1;
    $shr49 = $mul48 >>> 9;
    HEAP32[1315898] = $shr49;
    HEAP32[1390380] = 0;
    return;
  }
  $row_020 = 0;
  $2 = HEAP16[2621484] | 0;
  $1 = $0;
  while (1) {
    if ($2 << 16 >> 16 == 0) {
      $12 = 0;
      $11 = $1;
    } else {
      $and = $row_020 << 1 & 14;
      $and21 = $row_020 & 3;
      $col_017 = 0;
      while (1) {
        $and7 = $col_017 & 1;
        $and9 = (HEAP32[1356938] | 0) >>> (($and7 | $and) << 1 >>> 0) & 3;
        $conv10 = HEAPU16[2622460] | 0;
        $add15 = Math_imul($row_020 >> $conv10, HEAPU16[2632094] | 0) + ($col_017 >> $conv10) | 0;
        $arrayidx16 = (HEAP32[1316051] | 0) + ($add15 << 3) + ($and9 << 1) | 0;
        $sub = (HEAPU16[$arrayidx16 >> 1] | 0) - (HEAP32[1390380] | 0) | 0;
        HEAP16[$arrayidx16 >> 1] = Math_imul(($sub | 0) < 0 ? 0 : $sub, HEAP16[5561084 + ($and21 << 2) + ($and7 << 1) >> 1] << 16 >> 16) >>> 9 & 65535;
        $inc = $col_017 + 1 | 0;
        $10 = HEAP16[2621484] | 0;
        if (($inc | 0) < ($10 & 65535 | 0)) {
          $col_017 = $inc;
        } else {
          break;
        }
      }
      $12 = $10;
      $11 = HEAP16[2699404] | 0;
    }
    $inc45 = $row_020 + 1 | 0;
    if (($inc45 | 0) < ($11 & 65535 | 0)) {
      $row_020 = $inc45;
      $2 = $12;
      $1 = $11;
    } else {
      break;
    }
  }
  _canon_600_fixed_wb(1311);
  _canon_600_auto_wb();
  _canon_600_coeff();
  $13 = HEAP32[1390380] | 0;
  $sub47 = 1023 - $13 | 0;
  $mul48 = $sub47 * 1109 & -1;
  $shr49 = $mul48 >>> 9;
  HEAP32[1315898] = $shr49;
  HEAP32[1390380] = 0;
  return;
}
function _getbithuff($nbits, $huff) {
  $nbits = $nbits | 0;
  $huff = $huff | 0;
  var $0 = 0, $call = 0, $tobool13 = 0, $land_ext = 0, $7 = 0, $8 = 0, $9 = 0, $add17 = 0, $11 = 0, $12 = 0, $shr = 0, $arrayidx = 0, $sub24 = 0, $sub28 = 0, $15 = 0, $c_2 = 0, $retval_0 = 0, label = 0;
  if (($nbits | 0) == -1) {
    HEAP32[1349741] = 0;
    HEAP32[1349740] = 0;
    HEAP32[1349742] = 0;
    $retval_0 = 0;
    return $retval_0 | 0;
  }
  $0 = HEAP32[1349740] | 0;
  if (($nbits | 0) == 0 | ($0 | 0) < 0) {
    $retval_0 = 0;
    return $retval_0 | 0;
  }
  L186 : do {
    if ((HEAP32[1349741] | 0) == 0 & ($0 | 0) < ($nbits | 0)) {
      while (1) {
        $call = _fgetc(HEAP32[1316053] | 0) | 0;
        if (($call | 0) == -1) {
          label = 144;
          break L186;
        }
        if ((HEAP32[1310721] | 0) != 0 & ($call | 0) == 255) {
          $tobool13 = (_fgetc(HEAP32[1316053] | 0) | 0) != 0;
          $land_ext = $tobool13 & 1;
          HEAP32[1349741] = $land_ext;
          $7 = HEAP32[1349742] | 0;
          if ($tobool13) {
            $11 = $7;
            break L186;
          } else {
            $9 = $7;
            $8 = $land_ext;
          }
        } else {
          HEAP32[1349741] = 0;
          $9 = HEAP32[1349742] | 0;
          $8 = 0;
        }
        HEAP32[1349742] = $9 << 8 | $call & 255;
        $add17 = (HEAP32[1349740] | 0) + 8 | 0;
        HEAP32[1349740] = $add17;
        if (!(($8 | 0) == 0 & ($add17 | 0) < ($nbits | 0))) {
          label = 144;
          break L186;
        }
      }
    } else {
      label = 144;
    }
  } while (0);
  if ((label | 0) == 144) {
    $11 = HEAP32[1349742] | 0;
  }
  $12 = HEAP32[1349740] | 0;
  $shr = $11 << 32 - $12 >>> ((32 - $nbits | 0) >>> 0);
  if (($huff | 0) == 0) {
    $sub28 = $12 - $nbits | 0;
    HEAP32[1349740] = $sub28;
    $c_2 = $shr;
    $15 = $sub28;
  } else {
    $arrayidx = $huff + ($shr << 1) | 0;
    $sub24 = $12 - ((HEAPU16[$arrayidx >> 1] | 0) >>> 8) | 0;
    HEAP32[1349740] = $sub24;
    $c_2 = HEAP16[$arrayidx >> 1] & 255;
    $15 = $sub24;
  }
  if (($15 | 0) >= 0) {
    $retval_0 = $c_2;
    return $retval_0 | 0;
  }
  _derror();
  $retval_0 = $c_2;
  return $retval_0 | 0;
}
function _canon_load_raw() {
  var $test_i = 0, $source_addr_i4_i = 0, $source_addr_i_i = 0, $huff = 0, $diffbuf = 0, $base = 0, $0 = 0, $arraydecay = 0, $_table_i = 0, $call_i_i = 0, $call_i5_i = 0, $arrayidx5_i = 0, $i_05_i = 0, $ret_04_i = 0, $add_i = 0, $ret_1_i = 0, $tobool50 = 0, $retval_0_i49 = 0, $8 = 0, $mul = 0, $11 = 0, $12 = 0, $arrayidx62 = 0, $arrayidx74 = 0, $arrayidx75 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $conv573 = 0, $pnum_072 = 0, $carry_071 = 0, $row_070 = 0, $17 = 0, $conv7 = 0, $mul8 = 0, $add_ptr = 0, $sub = 0, $shr = 0, $19 = 0, $pnum_158 = 0, $carry_157 = 0, $block_056 = 0, $i_052 = 0, $20 = 0, $call31 = 0, $add42 = 0, $and = 0, $call47 = 0, $diff_0 = 0, $i_1 = 0, $inc = 0, $add63 = 0, $add83 = 0, $pnum_254 = 0, $i_253 = 0, $arrayidx79 = 0, $add80 = 0, $inc91 = 0, $inc94 = 0, $pnum_1_lcssa = 0, $carry_1_lcssa = 0, $call98 = 0, $29 = 0, $add102 = 0, $32 = 0, $33 = 0, $prow_066 = 0, $i_365 = 0, $call110 = 0, $add119 = 0, $incdec_ptr = 0, $add119_1 = 0, $incdec_ptr_1 = 0, $add119_2 = 0, $incdec_ptr_2 = 0, $add119_3 = 0, $inc134 = 0, $43 = 0, $_lcssa = 0, $add139 = 0, $conv5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16664 | 0;
  $test_i = __stackBase__ | 0;
  $source_addr_i4_i = __stackBase__ + 16384 | 0;
  $source_addr_i_i = __stackBase__ + 16388 | 0;
  $huff = __stackBase__ + 16392 | 0;
  $diffbuf = __stackBase__ + 16400 | 0;
  $base = __stackBase__ + 16656 | 0;
  $0 = HEAP32[1311010] | 0;
  $arraydecay = $huff | 0;
  $_table_i = $0 >>> 0 > 2 ? 2 : $0;
  HEAP32[$source_addr_i_i >> 2] = 5560232 + ($_table_i * 29 & -1) | 0;
  $call_i_i = _make_decoder_ref($source_addr_i_i) | 0;
  HEAP32[$arraydecay >> 2] = $call_i_i;
  HEAP32[$source_addr_i4_i >> 2] = 5559692 + ($_table_i * 180 & -1) | 0;
  $call_i5_i = _make_decoder_ref($source_addr_i4_i) | 0;
  $arrayidx5_i = $huff + 4 | 0;
  HEAP32[$arrayidx5_i >> 2] = $call_i5_i;
  _fseek(HEAP32[1316053] | 0, 0, 0);
  _fread($test_i | 0, 1, 16384, HEAP32[1316053] | 0);
  $ret_04_i = 1;
  $i_05_i = 540;
  while (1) {
    $add_i = $i_05_i + 1 | 0;
    if (HEAP8[$test_i + $i_05_i | 0] << 24 >> 24 == -1) {
      if (HEAP8[$test_i + $add_i | 0] << 24 >> 24 == 0) {
        $ret_1_i = 0;
      } else {
        $retval_0_i49 = 1;
        $tobool50 = 1;
        break;
      }
    } else {
      $ret_1_i = $ret_04_i;
    }
    if ($add_i >>> 0 < 16383) {
      $ret_04_i = $ret_1_i;
      $i_05_i = $add_i;
    } else {
      label = 161;
      break;
    }
  }
  do {
    if ((label | 0) == 161) {
      if (($ret_1_i | 0) != 0) {
        $retval_0_i49 = $ret_1_i;
        $tobool50 = 1;
        break;
      }
      HEAP32[1315898] = 1023;
      $retval_0_i49 = 0;
      $tobool50 = 0;
    }
  } while (0);
  $8 = HEAP32[1316053] | 0;
  $mul = Math_imul(HEAPU16[2622502] | 0, $retval_0_i49);
  _fseek($8 | 0, ((Math_imul($mul, HEAPU16[2622498] | 0) | 0) / 4 & -1) + 540 | 0, 0);
  HEAP32[1310721] = 1;
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $11 = HEAP16[2622502] | 0;
  if ($11 << 16 >> 16 == 0) {
    $14 = $call_i_i;
    $13 = $call_i5_i;
    $15 = $14;
    _free($15);
    $16 = $13;
    _free($16);
    STACKTOP = __stackBase__;
    return;
  }
  $12 = $diffbuf;
  $arrayidx62 = $diffbuf | 0;
  $arrayidx74 = $base + 4 | 0;
  $arrayidx75 = $base | 0;
  $row_070 = 0;
  $carry_071 = 0;
  $pnum_072 = 0;
  $conv573 = $11 & 65535;
  while (1) {
    $17 = HEAP32[1311250] | 0;
    $conv7 = HEAPU16[2622498] | 0;
    $mul8 = Math_imul($conv7, $row_070);
    $add_ptr = $17 + ($mul8 << 1) | 0;
    $sub = $conv573 - $row_070 | 0;
    $shr = Math_imul($conv7, ($sub | 0) > 8 ? 8 : $sub) >> 6;
    if (($shr | 0) > 0) {
      $19 = $shr << 6;
      $block_056 = 0;
      $carry_157 = $carry_071;
      $pnum_158 = $pnum_072;
      while (1) {
        _memset($12 | 0, 0, 256);
        $i_052 = 0;
        while (1) {
          $20 = HEAP32[$huff + ((($i_052 | 0) > 0 & 1) << 2) >> 2] | 0;
          $call31 = _getbithuff(HEAPU16[$20 >> 1] | 0, $20 + 2 | 0) | 0;
          if (!(($call31 | 0) != 0 | ($i_052 | 0) == 0)) {
            break;
          }
          do {
            if (($call31 | 0) == 255) {
              $i_1 = $i_052;
            } else {
              $add42 = ($call31 >> 4) + $i_052 | 0;
              $and = $call31 & 15;
              if (($and | 0) == 0) {
                $i_1 = $add42;
                break;
              }
              $call47 = _getbithuff($and, 0) | 0;
              if (($call47 & 1 << $and - 1 | 0) == 0) {
                $diff_0 = ((-1 << $and) + 1 | 0) + $call47 | 0;
              } else {
                $diff_0 = $call47;
              }
              if (($add42 | 0) >= 64) {
                $i_1 = $add42;
                break;
              }
              HEAP32[$diffbuf + ($add42 << 2) >> 2] = $diff_0;
              $i_1 = $add42;
            }
          } while (0);
          $inc = $i_1 + 1 | 0;
          if (($inc | 0) < 64) {
            $i_052 = $inc;
          } else {
            break;
          }
        }
        $add63 = (HEAP32[$arrayidx62 >> 2] | 0) + $carry_157 | 0;
        HEAP32[$arrayidx62 >> 2] = $add63;
        $add83 = ($block_056 << 6) + $mul8 | 0;
        $i_253 = 0;
        $pnum_254 = $pnum_158;
        while (1) {
          if ((($pnum_254 | 0) % (HEAPU16[2622498] | 0 | 0) | 0) == 0) {
            HEAP32[$arrayidx74 >> 2] = 512;
            HEAP32[$arrayidx75 >> 2] = 512;
          }
          $arrayidx79 = $base + (($i_253 & 1) << 2) | 0;
          $add80 = (HEAP32[$arrayidx79 >> 2] | 0) + (HEAP32[$diffbuf + ($i_253 << 2) >> 2] | 0) | 0;
          HEAP32[$arrayidx79 >> 2] = $add80;
          HEAP16[$17 + ($add83 + $i_253 << 1) >> 1] = $add80 & 65535;
          if (($add80 & 64512 | 0) != 0) {
            _derror();
          }
          $inc91 = $i_253 + 1 | 0;
          if (($inc91 | 0) == 64) {
            break;
          } else {
            $i_253 = $inc91;
            $pnum_254 = $pnum_254 + 1 | 0;
          }
        }
        $inc94 = $block_056 + 1 | 0;
        if (($inc94 | 0) == ($shr | 0)) {
          break;
        } else {
          $block_056 = $inc94;
          $carry_157 = $add63;
          $pnum_158 = $pnum_158 + 64 | 0;
        }
      }
      $carry_1_lcssa = $add63;
      $pnum_1_lcssa = $pnum_072 + $19 | 0;
    } else {
      $carry_1_lcssa = $carry_071;
      $pnum_1_lcssa = $pnum_072;
    }
    if ($tobool50) {
      $call98 = _ftell(HEAP32[1316053] | 0) | 0;
      $29 = HEAP32[1316053] | 0;
      $add102 = ((Math_imul(HEAPU16[2622498] | 0, $row_070) | 0) / 4 & -1) + 26 | 0;
      _fseek($29 | 0, $add102 | 0, 0);
      $32 = HEAP32[1316053] | 0;
      L249 : do {
        if (HEAP16[2622498] << 16 >> 16 == 0) {
          $_lcssa = $32;
        } else {
          $i_365 = 0;
          $prow_066 = $add_ptr;
          $33 = $32;
          while (1) {
            $call110 = _fgetc($33 | 0) | 0;
            $add119 = (HEAPU16[$prow_066 >> 1] | 0) << 2 | $call110 & 3;
            HEAP16[$prow_066 >> 1] = (HEAP16[2622498] << 16 >> 16 == 2672 & $add119 >>> 0 < 512 ? $add119 + 2 | 0 : $add119) & 65535;
            $incdec_ptr = $prow_066 + 2 | 0;
            $add119_1 = (HEAPU16[$incdec_ptr >> 1] | 0) << 2 | $call110 >>> 2 & 3;
            HEAP16[$incdec_ptr >> 1] = (HEAP16[2622498] << 16 >> 16 == 2672 & $add119_1 >>> 0 < 512 ? $add119_1 + 2 | 0 : $add119_1) & 65535;
            $incdec_ptr_1 = $prow_066 + 4 | 0;
            $add119_2 = (HEAPU16[$incdec_ptr_1 >> 1] | 0) << 2 | $call110 >>> 4 & 3;
            HEAP16[$incdec_ptr_1 >> 1] = (HEAP16[2622498] << 16 >> 16 == 2672 & $add119_2 >>> 0 < 512 ? $add119_2 + 2 | 0 : $add119_2) & 65535;
            $incdec_ptr_2 = $prow_066 + 6 | 0;
            $add119_3 = (HEAPU16[$incdec_ptr_2 >> 1] | 0) << 2 | $call110 >>> 6 & 3;
            HEAP16[$incdec_ptr_2 >> 1] = (HEAP16[2622498] << 16 >> 16 == 2672 & $add119_3 >>> 0 < 512 ? $add119_3 + 2 | 0 : $add119_3) & 65535;
            $inc134 = $i_365 + 1 | 0;
            $43 = HEAP32[1316053] | 0;
            if (($inc134 | 0) < ((HEAPU16[2622498] | 0) << 1 | 0)) {
              $i_365 = $inc134;
              $prow_066 = $prow_066 + 8 | 0;
              $33 = $43;
            } else {
              $_lcssa = $43;
              break L249;
            }
          }
        }
      } while (0);
      _fseek($_lcssa | 0, $call98 | 0, 0);
    }
    $add139 = $row_070 + 8 | 0;
    $conv5 = HEAPU16[2622502] | 0;
    if (($add139 | 0) < ($conv5 | 0)) {
      $row_070 = $add139;
      $carry_071 = $carry_1_lcssa;
      $pnum_072 = $pnum_1_lcssa;
      $conv573 = $conv5;
    } else {
      break;
    }
  }
  $14 = HEAP32[$arraydecay >> 2] | 0;
  $13 = HEAP32[$arrayidx5_i >> 2] | 0;
  $15 = $14;
  _free($15);
  $16 = $13;
  _free($16);
  STACKTOP = __stackBase__;
  return;
}
function _make_decoder_ref($source) {
  $source = $source | 0;
  var $0 = 0, $max_0 = 0, $add_ptr1_sum21 = 0, $max_0_lcssa = 0, $shl = 0, $add = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $len_034 = 0, $h_033 = 0, $arrayidx8 = 0, $shl14 = 0, $shl21 = 0, $inc29_us = 0, $j_026_us = 0, $h_225_us = 0, $h_3_us = 0, $inc26_us = 0, $i_030_us = 0, $h_129_us = 0, $i_030 = 0, $inc29 = 0, $h_1_lcssa = 0, $inc32 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = HEAP32[$source >> 2] | 0;
  HEAP32[$source >> 2] = $0 + 16 | 0;
  $max_0 = 16;
  while (1) {
    if (($max_0 | 0) == 0) {
      $max_0_lcssa = 0;
      break;
    }
    $add_ptr1_sum21 = $max_0 - 1 | 0;
    if (HEAP8[$0 + $add_ptr1_sum21 | 0] << 24 >> 24 == 0) {
      $max_0 = $add_ptr1_sum21;
    } else {
      $max_0_lcssa = $max_0;
      break;
    }
  }
  $shl = 1 << $max_0_lcssa;
  $add = $shl + 1 | 0;
  $mul_i = $add << 1;
  if ($add >>> 0 > 65535) {
    $req_0_i = (($mul_i >>> 0) / ($add >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
  } else {
    $req_0_i = $mul_i;
  }
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5582468, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $6 = $call_i;
  HEAP16[$6 >> 1] = $max_0_lcssa & 65535;
  if (($max_0_lcssa | 0) < 1) {
    STACKTOP = __stackBase__;
    return $6 | 0;
  } else {
    $h_033 = 1;
    $len_034 = 1;
  }
  while (1) {
    $arrayidx8 = $0 + ($len_034 - 1 | 0) | 0;
    L274 : do {
      if (HEAP8[$arrayidx8] << 24 >> 24 == 0) {
        $h_1_lcssa = $h_033;
      } else {
        $shl14 = 1 << $max_0_lcssa - $len_034;
        $shl21 = $len_034 << 8;
        if (($shl14 | 0) > 0) {
          $h_129_us = $h_033;
          $i_030_us = 0;
        } else {
          $i_030 = 0;
          while (1) {
            $inc29 = $i_030 + 1 | 0;
            HEAP32[$source >> 2] = (HEAP32[$source >> 2] | 0) + 1 | 0;
            if (($inc29 | 0) < (HEAPU8[$arrayidx8] | 0 | 0)) {
              $i_030 = $inc29;
            } else {
              $h_1_lcssa = $h_033;
              break L274;
            }
          }
        }
        while (1) {
          $h_225_us = $h_129_us;
          $j_026_us = 0;
          while (1) {
            if (($h_225_us | 0) > ($shl | 0)) {
              $h_3_us = $h_225_us;
            } else {
              HEAP16[$6 + ($h_225_us << 1) >> 1] = (HEAPU8[HEAP32[$source >> 2] | 0] | 0 | $shl21) & 65535;
              $h_3_us = $h_225_us + 1 | 0;
            }
            $inc26_us = $j_026_us + 1 | 0;
            if (($inc26_us | 0) == ($shl14 | 0)) {
              break;
            } else {
              $h_225_us = $h_3_us;
              $j_026_us = $inc26_us;
            }
          }
          $inc29_us = $i_030_us + 1 | 0;
          HEAP32[$source >> 2] = (HEAP32[$source >> 2] | 0) + 1 | 0;
          if (($inc29_us | 0) < (HEAPU8[$arrayidx8] | 0 | 0)) {
            $h_129_us = $h_3_us;
            $i_030_us = $inc29_us;
          } else {
            $h_1_lcssa = $h_3_us;
            break L274;
          }
        }
      }
    } while (0);
    $inc32 = $len_034 + 1 | 0;
    if (($inc32 | 0) > ($max_0_lcssa | 0)) {
      break;
    } else {
      $h_033 = $h_1_lcssa;
      $len_034 = $inc32;
    }
  }
  STACKTOP = __stackBase__;
  return $6 | 0;
}
function _ljpeg_row($jrow, $jh) {
  $jrow = $jrow | 0;
  $jh = $jh | 0;
  var $row = 0, $wide = 0, $0 = 0, $mul = 0, $shl = 0, $3 = 0, $mark_0 = 0, $call4 = 0, $add = 0, $5 = 0, $6 = 0, $clrs = 0, $7 = 0, $mul19 = 0, $add_ptr = 0, $arrayidx22 = 0, $add_ptr_1 = 0, $arrayidx22_1 = 0, $add_ptr_2 = 0, $arrayidx22_2 = 0, $sraw = 0, $bits118 = 0, $tobool59 = 0, $psv = 0, $11 = 0, $arrayidx109_promoted = 0, $arrayidx49_promoted = 0, $12 = 0, $spred_062 = 0, $col_060 = 0, $tobool45 = 0, $or_cond50 = 0, $13 = 0, $14 = 0, $spred_158 = 0, $c_255 = 0, $15 = 0, $call_i = 0, $17 = 0, $call4_i = 0, $retval_0_i = 0, $18 = 0, $arrayidx54 = 0, $21 = 0, $pred_0 = 0, $22 = 0, $pred_1 = 0, $add115 = 0, $spred_2 = 0, $incdec_ptr = 0, $incdec_ptr132 = 0, $inc134 = 0, $39 = 0, $40 = 0, $arrayidx109_promoted68 = 0, $arrayidx49_promoted66 = 0, $41 = 0, $spred_1_lcssa = 0, $inc137 = 0, $42 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $row = __stackBase__ | 0;
  $wide = $jh + 8 | 0;
  $0 = HEAP32[$wide >> 2] | 0;
  $mul = Math_imul($0, $jrow);
  if ((($mul | 0) % (HEAP32[$jh + 24 >> 2] | 0) | 0) == 0) {
    $shl = 1 << (HEAP32[$jh >> 2] | 0) - 1;
    HEAP32[$jh + 28 >> 2] = $shl;
    HEAP32[$jh + 32 >> 2] = $shl;
    HEAP32[$jh + 36 >> 2] = $shl;
    HEAP32[$jh + 40 >> 2] = $shl;
    HEAP32[$jh + 44 >> 2] = $shl;
    HEAP32[$jh + 48 >> 2] = $shl;
    L292 : do {
      if (($jrow | 0) != 0) {
        $3 = HEAP32[1316053] | 0;
        _fseek($3 | 0, -2 | 0, 1);
        $mark_0 = 0;
        while (1) {
          $call4 = _fgetc(HEAP32[1316053] | 0) | 0;
          $add = ($mark_0 << 8 & 16776960) + $call4 | 0;
          if (($call4 | 0) == -1) {
            break L292;
          }
          if (($add & 65520 | 0) == 65488) {
            break L292;
          } else {
            $mark_0 = $add;
          }
        }
      }
    } while (0);
    HEAP32[1349741] = 0;
    HEAP32[1349740] = 0;
    HEAP32[1349742] = 0;
    $5 = HEAP32[$wide >> 2] | 0;
  } else {
    $5 = $0;
  }
  $6 = HEAP32[$jh + 92 >> 2] | 0;
  $clrs = $jh + 12 | 0;
  $7 = HEAP32[$clrs >> 2] | 0;
  $mul19 = Math_imul($7, $5);
  $add_ptr = $6 + (($mul19 & -($jrow & 1)) << 1) | 0;
  $arrayidx22 = $row | 0;
  HEAP32[$arrayidx22 >> 2] = $add_ptr;
  $add_ptr_1 = $6 + (($mul19 & -($jrow & 1 ^ 1)) << 1) | 0;
  $arrayidx22_1 = $row + 4 | 0;
  HEAP32[$arrayidx22_1 >> 2] = $add_ptr_1;
  $add_ptr_2 = $6 + (($mul19 & -($jrow & 1)) << 1) | 0;
  $arrayidx22_2 = $row + 8 | 0;
  HEAP32[$arrayidx22_2 >> 2] = $add_ptr_2;
  if (($5 | 0) <= 0) {
    $42 = $add_ptr_2;
    STACKTOP = __stackBase__;
    return $42 | 0;
  }
  $sraw = $jh + 16 | 0;
  $bits118 = $jh | 0;
  $tobool59 = ($jrow | 0) == 0;
  $psv = $jh + 20 | 0;
  $col_060 = 0;
  $spred_062 = 0;
  $12 = $7;
  $arrayidx49_promoted = $add_ptr;
  $arrayidx109_promoted = $add_ptr_1;
  $11 = $5;
  while (1) {
    if (($12 | 0) > 0) {
      $tobool45 = ($col_060 | 0) == 0;
      $or_cond50 = $tobool59 | $tobool45;
      $c_255 = 0;
      $spred_158 = $spred_062;
      $14 = $arrayidx49_promoted;
      $13 = $arrayidx109_promoted;
      while (1) {
        $15 = HEAP32[$jh + 52 + ($c_255 << 2) >> 2] | 0;
        $call_i = _getbithuff(HEAPU16[$15 >> 1] | 0, $15 + 2 | 0) | 0;
        do {
          if (($call_i | 0) == 16) {
            $17 = HEAP32[1357024] | 0;
            if (($17 | 0) == 0 | $17 >>> 0 > 16842751) {
              $retval_0_i = -32768;
              break;
            } else {
              label = 227;
              break;
            }
          } else {
            label = 227;
          }
        } while (0);
        do {
          if ((label | 0) == 227) {
            label = 0;
            $call4_i = _getbithuff($call_i, 0) | 0;
            if (($call4_i & 1 << $call_i - 1 | 0) != 0) {
              $retval_0_i = $call4_i;
              break;
            }
            $retval_0_i = ((-1 << $call_i) + 1 | 0) + $call4_i | 0;
          }
        } while (0);
        $18 = HEAP32[$sraw >> 2] | 0;
        do {
          if (($18 | 0) == 0 | ($c_255 | 0) > ($18 | 0)) {
            label = 231;
          } else {
            if (($c_255 | $col_060 | 0) == 0) {
              label = 231;
              break;
            } else {
              $pred_0 = $spred_158;
              label = 234;
              break;
            }
          }
        } while (0);
        do {
          if ((label | 0) == 231) {
            label = 0;
            if ($tobool45) {
              $arrayidx54 = $jh + 28 + ($c_255 << 2) | 0;
              $21 = HEAP32[$arrayidx54 >> 2] | 0;
              HEAP32[$arrayidx54 >> 2] = $21 + $retval_0_i | 0;
              $pred_1 = $21;
              break;
            } else {
              $pred_0 = HEAPU16[$14 + (-(HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0;
              label = 234;
              break;
            }
          }
        } while (0);
        do {
          if ((label | 0) == 234) {
            label = 0;
            if ($or_cond50) {
              $pred_1 = $pred_0;
              break;
            }
            $22 = HEAP32[$psv >> 2] | 0;
            if (($22 | 0) == 1) {
              $pred_1 = $pred_0;
              break;
            } else if (($22 | 0) == 3) {
              $pred_1 = HEAPU16[$13 + (-(HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0;
              break;
            } else if (($22 | 0) == 4) {
              $pred_1 = ((HEAPU16[$13 >> 1] | 0) + $pred_0 | 0) - (HEAPU16[$13 + (-(HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0) | 0;
              break;
            } else if (($22 | 0) == 2) {
              $pred_1 = HEAPU16[$13 >> 1] | 0;
              break;
            } else if (($22 | 0) == 5) {
              $pred_1 = ((HEAPU16[$13 >> 1] | 0) - (HEAPU16[$13 + (-(HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0) >> 1) + $pred_0 | 0;
              break;
            } else if (($22 | 0) == 6) {
              $pred_1 = ($pred_0 - (HEAPU16[$13 + (-(HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0) >> 1) + (HEAPU16[$13 >> 1] | 0) | 0;
              break;
            } else if (($22 | 0) == 7) {
              $pred_1 = (HEAPU16[$13 >> 1] | 0) + $pred_0 >> 1;
              break;
            } else {
              $pred_1 = 0;
              break;
            }
          }
        } while (0);
        $add115 = $pred_1 + $retval_0_i | 0;
        HEAP16[$14 >> 1] = $add115 & 65535;
        if ((($add115 & 65535) >>> ((HEAP32[$bits118 >> 2] | 0) >>> 0) | 0) != 0) {
          _derror();
        }
        if (($c_255 | 0) > (HEAP32[$sraw >> 2] | 0)) {
          $spred_2 = $spred_158;
        } else {
          $spred_2 = HEAPU16[$14 >> 1] | 0;
        }
        $incdec_ptr = $14 + 2 | 0;
        $incdec_ptr132 = $13 + 2 | 0;
        $inc134 = $c_255 + 1 | 0;
        $39 = HEAP32[$clrs >> 2] | 0;
        if (($inc134 | 0) < ($39 | 0)) {
          $c_255 = $inc134;
          $spred_158 = $spred_2;
          $14 = $incdec_ptr;
          $13 = $incdec_ptr132;
        } else {
          break;
        }
      }
      HEAP32[$arrayidx22 >> 2] = $incdec_ptr;
      HEAP32[$arrayidx22_1 >> 2] = $incdec_ptr132;
      $spred_1_lcssa = $spred_2;
      $41 = $39;
      $arrayidx49_promoted66 = $incdec_ptr;
      $arrayidx109_promoted68 = $incdec_ptr132;
      $40 = HEAP32[$wide >> 2] | 0;
    } else {
      $spred_1_lcssa = $spred_062;
      $41 = $12;
      $arrayidx49_promoted66 = $arrayidx49_promoted;
      $arrayidx109_promoted68 = $arrayidx109_promoted;
      $40 = $11;
    }
    $inc137 = $col_060 + 1 | 0;
    if (($inc137 | 0) < ($40 | 0)) {
      $col_060 = $inc137;
      $spred_062 = $spred_1_lcssa;
      $12 = $41;
      $arrayidx49_promoted = $arrayidx49_promoted66;
      $arrayidx109_promoted = $arrayidx109_promoted68;
      $11 = $40;
    } else {
      break;
    }
  }
  $42 = HEAP32[$arrayidx22_2 >> 2] | 0;
  STACKTOP = __stackBase__;
  return $42 | 0;
}
function _lossless_jpeg_load_raw() {
  var $jh = 0, $mul = 0, $high = 0, $cmp1022 = 0, $col_031 = 0, $row_030 = 0, $jrow_029 = 0, $call1 = 0, $row_2_ph = 0, $mul16 = 0, $rp_026 = 0, $col_125 = 0, $row_224 = 0, $jcol_023 = 0, $incdec_ptr = 0, $6 = 0, $7 = 0, $add = 0, $conv17 = 0, $mul19 = 0, $div20 = 0, $conv21 = 0, $cmp22 = 0, $conv21_div20 = 0, $sub31 = 0, $conv34 = 0, $row_3 = 0, $col_2 = 0, $11 = 0, $conv43 = 0, $sub46 = 0, $row_4 = 0, $col_3 = 0, $add59 = 0, $13 = 0, $inc = 0, $cmp63 = 0, $row_4_inc66 = 0, $inc_ = 0, $inc68 = 0, $col_1_lcssa = 0, $row_2_lcssa = 0, $inc70 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $jh = __stackBase__ | 0;
  if ((_ljpeg_start($jh, 0) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $mul = Math_imul(HEAP32[$jh + 12 >> 2] | 0, HEAP32[$jh + 8 >> 2] | 0);
  $high = $jh + 4 | 0;
  L347 : do {
    if ((HEAP32[$high >> 2] | 0) > 0) {
      $cmp1022 = ($mul | 0) > 0;
      $jrow_029 = 0;
      $row_030 = 0;
      $col_031 = 0;
      while (1) {
        $call1 = _ljpeg_row($jrow_029, $jh) | 0;
        do {
          if ((HEAP32[1315948] & 1 | 0) == 0) {
            $row_2_ph = $row_030;
          } else {
            if (($jrow_029 & 1 | 0) == 0) {
              $row_2_ph = ($jrow_029 | 0) / 2 & -1;
              break;
            } else {
              $row_2_ph = ((HEAPU16[2699404] | 0) - 1 | 0) + (($jrow_029 | 0) / -2 & -1) | 0;
              break;
            }
          }
        } while (0);
        L357 : do {
          if ($cmp1022) {
            $mul16 = Math_imul($jrow_029, $mul);
            $jcol_023 = 0;
            $row_224 = $row_2_ph;
            $col_125 = $col_031;
            $rp_026 = $call1;
            while (1) {
              $incdec_ptr = $rp_026 + 2 | 0;
              $6 = HEAP16[5428620 + ((HEAPU16[$rp_026 >> 1] | 0) << 1) >> 1] | 0;
              $7 = HEAP16[2780160] | 0;
              if ($7 << 16 >> 16 == 0) {
                $col_2 = $col_125;
                $row_3 = $row_224;
              } else {
                $add = $jcol_023 + $mul16 | 0;
                $conv17 = HEAPU16[2780161] | 0;
                $mul19 = Math_imul($conv17, HEAP32[$high >> 2] | 0);
                $div20 = ($add | 0) / ($mul19 | 0) & -1;
                $conv21 = $7 & 65535;
                $cmp22 = ($div20 | 0) >= ($conv21 | 0);
                $conv21_div20 = $cmp22 ? $conv21 : $div20;
                $sub31 = $add - Math_imul($conv21_div20, $mul19) | 0;
                $conv34 = HEAPU16[5560320 + (($cmp22 ? 2 : 1) << 1) >> 1] | 0;
                $col_2 = ($sub31 | 0) % ($conv34 | 0) + Math_imul($conv21_div20, $conv17) | 0;
                $row_3 = ($sub31 | 0) / ($conv34 | 0) & -1;
              }
              $11 = HEAP16[2622498] | 0;
              $conv43 = $11 & 65535;
              do {
                if ($11 << 16 >> 16 == 3984) {
                  $sub46 = $col_2 - 2 | 0;
                  if (($sub46 | 0) >= 0) {
                    $col_3 = $sub46;
                    $row_4 = $row_3;
                    break;
                  }
                  $col_3 = $conv43 + $sub46 | 0;
                  $row_4 = $row_3 - 1 | 0;
                } else {
                  $col_3 = $col_2;
                  $row_4 = $row_3;
                }
              } while (0);
              if (($row_4 | 0) > -1) {
                $add59 = Math_imul($conv43, $row_4) + $col_3 | 0;
                HEAP16[(HEAP32[1311250] | 0) + ($add59 << 1) >> 1] = $6;
                $13 = HEAP16[2622498] | 0;
              } else {
                $13 = $11;
              }
              $inc = $col_3 + 1 | 0;
              $cmp63 = ($inc | 0) < ($13 & 65535 | 0);
              $row_4_inc66 = ($cmp63 & 1 ^ 1) + $row_4 | 0;
              $inc_ = $cmp63 ? $inc : 0;
              $inc68 = $jcol_023 + 1 | 0;
              if (($inc68 | 0) == ($mul | 0)) {
                $row_2_lcssa = $row_4_inc66;
                $col_1_lcssa = $inc_;
                break L357;
              } else {
                $jcol_023 = $inc68;
                $row_224 = $row_4_inc66;
                $col_125 = $inc_;
                $rp_026 = $incdec_ptr;
              }
            }
          } else {
            $row_2_lcssa = $row_2_ph;
            $col_1_lcssa = $col_031;
          }
        } while (0);
        $inc70 = $jrow_029 + 1 | 0;
        if (($inc70 | 0) < (HEAP32[$high >> 2] | 0)) {
          $jrow_029 = $inc70;
          $row_030 = $row_2_lcssa;
          $col_031 = $col_1_lcssa;
        } else {
          break L347;
        }
      }
    }
  } while (0);
  $16 = HEAP32[$jh + 76 >> 2] | 0;
  if (($16 | 0) != 0) {
    _free($16);
  }
  $18 = HEAP32[$jh + 80 >> 2] | 0;
  if (($18 | 0) != 0) {
    _free($18);
  }
  $20 = HEAP32[$jh + 84 >> 2] | 0;
  if (($20 | 0) != 0) {
    _free($20);
  }
  $22 = HEAP32[$jh + 88 >> 2] | 0;
  if (($22 | 0) != 0) {
    _free($22);
  }
  _free(HEAP32[$jh + 92 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _ljpeg_start($jh, $info_only) {
  $jh = $jh | 0;
  $info_only = $info_only | 0;
  var $data = 0, $dp = 0, $restart = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx8 = 0, $arrayidx11 = 0, $arrayidx20 = 0, $sraw = 0, $bits = 0, $high = 0, $arrayidx38 = 0, $wide = 0, $arrayidx41 = 0, $clrs = 0, $tobool50 = 0, $or = 0, $sub = 0, $conv21 = 0, $and25 = 0, $10 = 0, $add_ptr = 0, $19 = 0, $20 = 0, $conv57 = 0, $call60 = 0, $21 = 0, $mul66 = 0, $arrayidx98 = 0, $28 = 0, $29 = 0, $arrayidx98_1 = 0, $30 = 0, $31 = 0, $arrayidx129 = 0, $c_253 = 0, $mul139 = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $38 = 0, $39 = 0, $retval_0 = 0, $41 = 0, $arrayidx98_2 = 0, $42 = 0, $43 = 0, $arrayidx98_3 = 0, $44 = 0, $45 = 0, $arrayidx98_4 = 0, $47 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65540 | 0;
  $data = __stackBase__ | 0;
  $dp = __stackBase__ + 65536 | 0;
  _memset($jh | 0, 0, 96);
  $restart = $jh + 24 | 0;
  HEAP32[$restart >> 2] = 2147483647;
  $arraydecay = $data | 0;
  _fread($arraydecay | 0, 2, 1, HEAP32[1316053] | 0);
  $arrayidx = $data + 1 | 0;
  if (HEAP8[$arrayidx] << 24 >> 24 != -40) {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  $arrayidx8 = $data + 2 | 0;
  $arrayidx11 = $data + 3 | 0;
  $arrayidx20 = $data + 7 | 0;
  $sraw = $jh + 16 | 0;
  $bits = $jh | 0;
  $high = $jh + 4 | 0;
  $arrayidx38 = $data + 4 | 0;
  $wide = $jh + 8 | 0;
  $arrayidx41 = $data + 5 | 0;
  $clrs = $jh + 12 | 0;
  $tobool50 = ($info_only | 0) == 0;
  L390 : while (1) {
    _fread($arraydecay | 0, 2, 2, HEAP32[1316053] | 0);
    $or = (HEAPU8[$arraydecay] | 0) << 8 | (HEAPU8[$arrayidx] | 0);
    $sub = ((HEAPU8[$arrayidx8] | 0) << 8 | (HEAPU8[$arrayidx11] | 0)) - 2 | 0;
    if ($or >>> 0 < 65281) {
      $retval_0 = 0;
      label = 326;
      break;
    }
    _fread($arraydecay | 0, 1, $sub | 0, HEAP32[1316053] | 0);
    L393 : do {
      if (($or | 0) == 65472) {
        $10 = HEAP32[$sraw >> 2] | 0;
        label = 290;
        break;
      } else if (($or | 0) == 65475) {
        $conv21 = HEAPU8[$arrayidx20] | 0;
        $and25 = Math_imul($conv21 >>> 4, $conv21 & 15) + 3 & 3;
        HEAP32[$sraw >> 2] = $and25;
        $10 = $and25;
        label = 290;
        break;
      } else if (($or | 0) == 65476) {
        if (!$tobool50) {
          continue L390;
        }
        HEAP32[$dp >> 2] = $arraydecay;
        $add_ptr = $data + $sub | 0;
        if (($sub | 0) > 0) {
          $19 = $arraydecay;
        } else {
          break;
        }
        while (1) {
          HEAP32[$dp >> 2] = $19 + 1 | 0;
          $20 = HEAP8[$19] | 0;
          $conv57 = $20 & 255;
          if (($20 & 255) >= 4) {
            break L393;
          }
          $call60 = _make_decoder_ref($dp) | 0;
          HEAP32[$jh + 52 + ($conv57 << 2) >> 2] = $call60;
          HEAP32[$jh + 76 + ($conv57 << 2) >> 2] = $call60;
          $21 = HEAP32[$dp >> 2] | 0;
          if ($21 >>> 0 < $add_ptr >>> 0) {
            $19 = $21;
          } else {
            break L393;
          }
        }
      } else if (($or | 0) == 65498) {
        label = 296;
        break L390;
      } else if (($or | 0) == 65501) {
        HEAP32[$restart >> 2] = (HEAPU8[$arraydecay] | 0) << 8 | (HEAPU8[$arrayidx] | 0);
        continue L390;
      } else {
        continue L390;
      }
    } while (0);
    do {
      if ((label | 0) == 290) {
        label = 0;
        HEAP32[$bits >> 2] = HEAPU8[$arraydecay] | 0;
        HEAP32[$high >> 2] = (HEAPU8[$arrayidx] | 0) << 8 | (HEAPU8[$arrayidx8] | 0);
        HEAP32[$wide >> 2] = (HEAPU8[$arrayidx11] | 0) << 8 | (HEAPU8[$arrayidx38] | 0);
        HEAP32[$clrs >> 2] = (HEAPU8[$arrayidx41] | 0) + $10 | 0;
        if (($sub | 0) != 9 | (HEAP32[1357024] | 0) != 0) {
          break;
        }
        _fgetc(HEAP32[1316053] | 0);
      }
    } while (0);
    if (($or | 0) == 65498) {
      break;
    }
  }
  if ((label | 0) == 296) {
    $mul66 = (HEAPU8[$arraydecay] | 0) << 1;
    HEAP32[$jh + 20 >> 2] = HEAPU8[$data + ($mul66 | 1) | 0] | 0;
    HEAP32[$bits >> 2] = (HEAP32[$bits >> 2] | 0) - (HEAP8[$data + ($mul66 + 3 | 0) | 0] & 15) | 0;
  } else if ((label | 0) == 326) {
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  if (!$tobool50) {
    $retval_0 = 1;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  $arrayidx98 = $jh + 56 | 0;
  $28 = HEAP32[$arrayidx98 >> 2] | 0;
  if (($28 | 0) == 0) {
    $31 = HEAP32[$jh + 52 >> 2] | 0;
    HEAP32[$arrayidx98 >> 2] = $31;
    $29 = $31;
  } else {
    $29 = $28;
  }
  $arrayidx98_1 = $jh + 60 | 0;
  $30 = HEAP32[$arrayidx98_1 >> 2] | 0;
  if (($30 | 0) == 0) {
    HEAP32[$arrayidx98_1 >> 2] = $29;
    $41 = $29;
  } else {
    $41 = $30;
  }
  $arrayidx98_2 = $jh + 64 | 0;
  $42 = HEAP32[$arrayidx98_2 >> 2] | 0;
  if (($42 | 0) == 0) {
    HEAP32[$arrayidx98_2 >> 2] = $41;
    $43 = $41;
  } else {
    $43 = $42;
  }
  $arrayidx98_3 = $jh + 68 | 0;
  $44 = HEAP32[$arrayidx98_3 >> 2] | 0;
  if (($44 | 0) == 0) {
    HEAP32[$arrayidx98_3 >> 2] = $43;
    $45 = $43;
  } else {
    $45 = $44;
  }
  $arrayidx98_4 = $jh + 72 | 0;
  if ((HEAP32[$arrayidx98_4 >> 2] | 0) == 0) {
    HEAP32[$arrayidx98_4 >> 2] = $45;
  }
  $47 = HEAP32[$sraw >> 2] | 0;
  L428 : do {
    if (($47 | 0) != 0) {
      HEAP32[$arrayidx98_1 >> 2] = $29;
      HEAP32[$arrayidx98_2 >> 2] = $29;
      HEAP32[$arrayidx98_3 >> 2] = $29;
      HEAP32[$arrayidx98_4 >> 2] = $29;
      if (($47 | 0) <= 0) {
        break;
      }
      $arrayidx129 = $jh + 52 | 0;
      $c_253 = 1;
      while (1) {
        HEAP32[$jh + 52 + ($c_253 << 2) >> 2] = HEAP32[$arrayidx129 >> 2] | 0;
        if (($c_253 | 0) >= (HEAP32[$sraw >> 2] | 0)) {
          break L428;
        }
        $c_253 = $c_253 + 1 | 0;
      }
    }
  } while (0);
  $mul139 = Math_imul(HEAP32[$clrs >> 2] | 0, HEAP32[$wide >> 2] | 0);
  do {
    if (($mul139 | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul139 << 2;
      if ($mul139 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul139 >>> 0) >>> 0 | 0) == 4 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    HEAP32[$jh + 92 >> 2] = 0;
    $38 = HEAP32[_stderr >> 2] | 0;
    $39 = HEAP32[1316054] | 0;
    _fprintf($38 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $39, HEAP32[tempInt + 4 >> 2] = 5580780, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  HEAP32[$jh + 92 >> 2] = $call_i;
  HEAP32[1310721] = 1;
  $retval_0 = 1;
  STACKTOP = __stackBase__;
  return $retval_0 | 0;
}
function _adobe_copy_pixel($row, $col, $rp) {
  $row = $row | 0;
  $col = $col | 0;
  $rp = $rp | 0;
  var $3 = 0, $conv6 = 0, $8 = 0, $12 = 0, $14 = 0, $c_016 = 0, $17 = 0, $add28 = 0, $inc = 0, $storemerge = 0;
  if ((HEAP32[1316049] | 0) == 2 & (HEAP32[1311231] | 0) != 0) {
    HEAP32[$rp >> 2] = (HEAP32[$rp >> 2] | 0) + 2 | 0;
  }
  $3 = HEAP32[1311250] | 0;
  if (($3 | 0) == 0) {
    L457 : do {
      if ((HEAPU16[2699404] | 0) >>> 0 > $row >>> 0) {
        $12 = HEAP16[2621484] | 0;
        if (($12 & 65535) >>> 0 <= $col >>> 0 | (HEAP32[1310897] | 0) == 0) {
          break;
        } else {
          $c_016 = 0;
          $14 = $12;
        }
        while (1) {
          $17 = HEAP16[5428620 + ((HEAPU16[(HEAP32[$rp >> 2] | 0) + ($c_016 << 1) >> 1] | 0) << 1) >> 1] | 0;
          $add28 = Math_imul($14 & 65535, $row) + $col | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add28 << 3) + ($c_016 << 1) >> 1] = $17;
          $inc = $c_016 + 1 | 0;
          if ($inc >>> 0 >= (HEAP32[1310897] | 0) >>> 0) {
            break L457;
          }
          $c_016 = $inc;
          $14 = HEAP16[2621484] | 0;
        }
      }
    } while (0);
    $storemerge = (HEAP32[$rp >> 2] | 0) + (HEAP32[1310897] << 1) | 0;
  } else {
    do {
      if ((HEAPU16[2622502] | 0) >>> 0 > $row >>> 0) {
        $conv6 = HEAPU16[2622498] | 0;
        if ($conv6 >>> 0 <= $col >>> 0) {
          break;
        }
        $8 = HEAP16[5428620 + ((HEAPU16[HEAP32[$rp >> 2] >> 1] | 0) << 1) >> 1] | 0;
        HEAP16[$3 + (Math_imul($conv6, $row) + $col << 1) >> 1] = $8;
      }
    } while (0);
    $storemerge = (HEAP32[$rp >> 2] | 0) + (HEAP32[1316049] << 1) | 0;
  }
  HEAP32[$rp >> 2] = $storemerge;
  if (!((HEAP32[1316049] | 0) == 2 & (HEAP32[1311231] | 0) != 0)) {
    return;
  }
  HEAP32[$rp >> 2] = $storemerge - 2 | 0;
  return;
}
function _canon_sraw_load_raw() {
  var $jh = 0, $pix = 0, $v = 0, $0 = 0, $wide = 0, $shr = 0, $clrs = 0, $2 = 0, $mul = 0, $4 = 0, $5 = 0, $rp_0159 = 0, $jcol_0158 = 0, $jrow_0157 = 0, $ecol_0156 = 0, $slice_0155 = 0, $add = 0, $_pre169 = 0, $ecol_1 = 0, $7 = 0, $cmp20136 = 0, $8 = 0, $9 = 0, $rp_1150 = 0, $jcol_1149 = 0, $jrow_1148 = 0, $row_0147 = 0, $10 = 0, $mul18 = 0, $rp_2141 = 0, $jcol_2140 = 0, $jrow_2139 = 0, $col_0137 = 0, $rem = 0, $jrow_3 = 0, $rp_3 = 0, $12 = 0, $13 = 0, $add43 = 0, $14 = 0, $c_0134 = 0, $15 = 0, $inc48 = 0, $16 = 0, $_lcssa = 0, $add68 = 0, $20 = 0, $add70 = 0, $21 = 0, $22 = 0, $rp_2_lcssa = 0, $jcol_2_lcssa = 0, $jrow_2_lcssa = 0, $add76 = 0, $23 = 0, $24 = 0, $rp_1_lcssa = 0, $jcol_1_lcssa = 0, $jrow_1_lcssa = 0, $cp_0 = 0, $25 = 0, $arraydecay = 0, $add_ptr91 = 0, $add_ptr93 = 0, $sraw = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $hue_0 = 0, $33 = 0, $arraydecay115 = 0, $34 = 0, $ip_0_lcssa = 0, $arraydecay218 = 0, $arrayidx299 = 0, $arrayidx305 = 0, $arrayidx317 = 0, $35 = 0, $36 = 0, $row_1130 = 0, $ip_0126 = 0, $_pre166 = 0, $37 = 0, $38 = 0, $col_1119 = 0, $conv140 = 0, $39 = 0, $conv140_1 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $col_2123 = 0, $sub184 = 0, $add194 = 0, $47 = 0, $50 = 0, $conv171_lcssa = 0, $inc212 = 0, $add_ptr214 = 0, $51 = 0, $rp_4114 = 0, $52 = 0, $arrayidx237 = 0, $add240 = 0, $arrayidx243 = 0, $add246 = 0, $add259 = 0, $64 = 0, $sub291 = 0, $65 = 0, $arrayidx296 = 0, $add298 = 0, $arrayidx302 = 0, $72 = 0, $shr327 = 0, $cond356 = 0, $shr327_1 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $cond356_1 = 0, $shr327_2 = 0, $cond356_2 = 0, $add_ptr363 = 0, $add167 = 0, $89 = 0, $add209 = 0, $91 = 0, $conv171 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  $jh = __stackBase__ | 0;
  $pix = __stackBase__ + 96 | 0;
  $v = __stackBase__ + 108 | 0;
  $0 = $v;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  if ((_ljpeg_start($jh, 0) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $wide = $jh + 8 | 0;
  $shr = HEAP32[$wide >> 2] >> 1;
  HEAP32[$wide >> 2] = $shr;
  $clrs = $jh + 12 | 0;
  $2 = HEAP32[$clrs >> 2] | 0;
  $mul = Math_imul($shr, $2);
  $slice_0155 = 1;
  $ecol_0156 = 0;
  $jrow_0157 = 0;
  $jcol_0158 = 0;
  $rp_0159 = 0;
  $5 = HEAP16[2780160] | 0;
  $4 = $2;
  while (1) {
    $add = (((HEAPU16[2780161] | 0) << 1 | 0) / ($4 | 0) & -1) + $ecol_0156 | 0;
    $_pre169 = HEAP16[2622498] | 0;
    do {
      if ($5 << 16 >> 16 == 0) {
        label = 349;
      } else {
        if (($add | 0) > (($_pre169 & 65535) - 1 | 0)) {
          label = 349;
          break;
        } else {
          $ecol_1 = $add;
          break;
        }
      }
    } while (0);
    if ((label | 0) == 349) {
      label = 0;
      $ecol_1 = $_pre169 & 65534;
    }
    $7 = HEAP16[2699404] | 0;
    if ($7 << 16 >> 16 == 0) {
      $jrow_1_lcssa = $jrow_0157;
      $jcol_1_lcssa = $jcol_0158;
      $rp_1_lcssa = $rp_0159;
      $24 = $4;
      $23 = $5;
    } else {
      $cmp20136 = ($ecol_0156 | 0) < ($ecol_1 | 0);
      $row_0147 = 0;
      $jrow_1148 = $jrow_0157;
      $jcol_1149 = $jcol_0158;
      $rp_1150 = $rp_0159;
      $9 = $4;
      $8 = $7;
      while (1) {
        $10 = HEAP32[1316051] | 0;
        $mul18 = Math_imul(HEAPU16[2621484] | 0, $row_0147);
        if ($cmp20136) {
          $col_0137 = $ecol_0156;
          $jrow_2139 = $jrow_1148;
          $jcol_2140 = $jcol_1149;
          $rp_2141 = $rp_1150;
          while (1) {
            $rem = ($jcol_2140 | 0) % ($mul | 0);
            if (($rem | 0) == 0) {
              $rp_3 = _ljpeg_row($jrow_2139, $jh) | 0;
              $jrow_3 = $jrow_2139 + 1 | 0;
            } else {
              $rp_3 = $rp_2141;
              $jrow_3 = $jrow_2139;
            }
            $12 = HEAP16[2621484] | 0;
            if (($col_0137 | 0) < ($12 & 65535 | 0)) {
              $13 = HEAP32[$clrs >> 2] | 0;
              $add43 = $col_0137 + $mul18 | 0;
              L491 : do {
                if (($13 - 2 | 0) > 0) {
                  $c_0134 = 0;
                  $14 = $12;
                  while (1) {
                    $15 = HEAP16[$rp_3 + ($c_0134 + $rem << 1) >> 1] | 0;
                    HEAP16[$10 + (($add43 + ($c_0134 & 1) | 0) + Math_imul($14 & 65535, $c_0134 >> 1) << 3) >> 1] = $15;
                    $inc48 = $c_0134 + 1 | 0;
                    $16 = HEAP32[$clrs >> 2] | 0;
                    if (($inc48 | 0) >= ($16 - 2 | 0)) {
                      $_lcssa = $16;
                      break L491;
                    }
                    $c_0134 = $inc48;
                    $14 = HEAP16[2621484] | 0;
                  }
                } else {
                  $_lcssa = $13;
                }
              } while (0);
              HEAP16[$10 + ($add43 << 3) + 2 >> 1] = (HEAP16[$rp_3 + (($rem - 2 | 0) + $_lcssa << 1) >> 1] | 0) - 16384 & 65535;
              HEAP16[$10 + ($add43 << 3) + 4 >> 1] = (HEAP16[$rp_3 + (($rem - 1 | 0) + (HEAP32[$clrs >> 2] | 0) << 1) >> 1] | 0) - 16384 & 65535;
            }
            $add68 = $col_0137 + 2 | 0;
            $20 = HEAP32[$clrs >> 2] | 0;
            $add70 = $20 + $rem | 0;
            if (($add68 | 0) < ($ecol_1 | 0)) {
              $col_0137 = $add68;
              $jrow_2139 = $jrow_3;
              $jcol_2140 = $add70;
              $rp_2141 = $rp_3;
            } else {
              break;
            }
          }
          $jrow_2_lcssa = $jrow_3;
          $jcol_2_lcssa = $add70;
          $rp_2_lcssa = $rp_3;
          $22 = $20;
          $21 = HEAP16[2699404] | 0;
        } else {
          $jrow_2_lcssa = $jrow_1148;
          $jcol_2_lcssa = $jcol_1149;
          $rp_2_lcssa = $rp_1150;
          $22 = $9;
          $21 = $8;
        }
        $add76 = ($row_0147 - 1 | 0) + ($22 >> 1) | 0;
        if (($add76 | 0) < ($21 & 65535 | 0)) {
          $row_0147 = $add76;
          $jrow_1148 = $jrow_2_lcssa;
          $jcol_1149 = $jcol_2_lcssa;
          $rp_1150 = $rp_2_lcssa;
          $9 = $22;
          $8 = $21;
        } else {
          break;
        }
      }
      $jrow_1_lcssa = $jrow_2_lcssa;
      $jcol_1_lcssa = $jcol_2_lcssa;
      $rp_1_lcssa = $rp_2_lcssa;
      $24 = $22;
      $23 = HEAP16[2780160] | 0;
    }
    if (($slice_0155 | 0) > ($23 & 65535 | 0)) {
      $cp_0 = 5263404;
      break;
    }
    $slice_0155 = $slice_0155 + 1 | 0;
    $ecol_0156 = $ecol_1;
    $jrow_0157 = $jrow_1_lcssa;
    $jcol_0158 = $jcol_1_lcssa;
    $rp_0159 = $rp_1_lcssa;
    $5 = $23;
    $4 = $24;
  }
  while (1) {
    $25 = HEAP8[$cp_0] | 0;
    if ($25 << 24 >> 24 == 0) {
      break;
    }
    if ((($25 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      break;
    } else {
      $cp_0 = $cp_0 + 1 | 0;
    }
  }
  $arraydecay = $v | 0;
  $add_ptr91 = $v + 4 | 0;
  $add_ptr93 = $v + 8 | 0;
  _sscanf($cp_0 | 0, 5579132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $arraydecay, HEAP32[tempInt + 4 >> 2] = $add_ptr91, HEAP32[tempInt + 8 >> 2] = $add_ptr93, tempInt) | 0);
  $sraw = $jh + 16 | 0;
  $26 = HEAP32[1310892] | 0;
  do {
    if ($26 >>> 0 > 2147484288) {
      $31 = HEAP32[$sraw >> 2] | 0;
      label = 371;
      break;
    } else {
      $29 = HEAP32[$sraw >> 2] | 0;
      if (($26 | 0) == -2147483112 & (((((HEAP32[$arraydecay >> 2] | 0) * 1e3 & -1) + (HEAP32[$add_ptr91 >> 2] | 0) | 0) * 1e3 & -1) + (HEAP32[$add_ptr93 >> 2] | 0) | 0) > 1000006) {
        $31 = $29;
        label = 371;
        break;
      } else {
        $hue_0 = ($29 << 2) + 4 | 0;
        $32 = $29;
        break;
      }
    }
  } while (0);
  if ((label | 0) == 371) {
    $hue_0 = $31 << 1;
    $32 = $31;
  }
  $33 = HEAP32[1316051] | 0;
  $arraydecay115 = $33 | 0;
  $34 = HEAP16[2699404] | 0;
  L512 : do {
    if ($34 << 16 >> 16 == 0) {
      $ip_0_lcssa = $33;
    } else {
      $ip_0126 = $33;
      $row_1130 = 0;
      $36 = $32;
      $35 = $34;
      while (1) {
        $_pre166 = HEAP16[2621484] | 0;
        L515 : do {
          if (($36 >> 1 & $row_1130 | 0) == 0) {
            $44 = $_pre166;
            label = 381;
          } else {
            if ($_pre166 << 16 >> 16 == 0) {
              $45 = 0;
              label = 382;
              break;
            } else {
              $col_1119 = 0;
              $38 = $_pre166;
              $37 = $35;
            }
            while (1) {
              $conv140 = $38 & 65535;
              $39 = HEAP16[$ip_0126 + ($col_1119 - $conv140 << 3) + 2 >> 1] | 0;
              if (($row_1130 | 0) == (($37 & 65535) - 1 | 0)) {
                HEAP16[$ip_0126 + ($col_1119 << 3) + 2 >> 1] = $39;
              } else {
                HEAP16[$ip_0126 + ($col_1119 << 3) + 2 >> 1] = ((($39 << 16 >> 16) + 1 | 0) + (HEAP16[$ip_0126 + ($conv140 + $col_1119 << 3) + 2 >> 1] << 16 >> 16) | 0) >>> 1 & 65535;
              }
              $conv140_1 = HEAPU16[2621484] | 0;
              $43 = HEAP16[$ip_0126 + ($col_1119 - $conv140_1 << 3) + 4 >> 1] | 0;
              if (($row_1130 | 0) == ((HEAPU16[2699404] | 0) - 1 | 0)) {
                HEAP16[$ip_0126 + ($col_1119 << 3) + 4 >> 1] = $43;
              } else {
                HEAP16[$ip_0126 + ($col_1119 << 3) + 4 >> 1] = ((($43 << 16 >> 16) + 1 | 0) + (HEAP16[$ip_0126 + ($conv140_1 + $col_1119 << 3) + 4 >> 1] << 16 >> 16) | 0) >>> 1 & 65535;
              }
              $add167 = $col_1119 + 2 | 0;
              $89 = HEAP16[2621484] | 0;
              if (($add167 | 0) >= ($89 & 65535 | 0)) {
                $44 = $89;
                label = 381;
                break L515;
              }
              $col_1119 = $add167;
              $38 = $89;
              $37 = HEAP16[2699404] | 0;
            }
          }
        } while (0);
        L528 : do {
          if ((label | 0) == 381) {
            label = 0;
            if (($44 & 65535) > 1) {
              $col_2123 = 1;
              $46 = $44;
            } else {
              $45 = $44;
              label = 382;
              break;
            }
            while (1) {
              $sub184 = $col_2123 - 1 | 0;
              $add194 = $col_2123 + 1 | 0;
              $47 = HEAP16[$ip_0126 + ($sub184 << 3) + 2 >> 1] | 0;
              if (($col_2123 | 0) == (($46 & 65535) - 1 | 0)) {
                HEAP16[$ip_0126 + ($col_2123 << 3) + 2 >> 1] = $47;
              } else {
                HEAP16[$ip_0126 + ($col_2123 << 3) + 2 >> 1] = ((($47 << 16 >> 16) + 1 | 0) + (HEAP16[$ip_0126 + ($add194 << 3) + 2 >> 1] << 16 >> 16) | 0) >>> 1 & 65535;
              }
              $50 = HEAP16[$ip_0126 + ($sub184 << 3) + 4 >> 1] | 0;
              if (($col_2123 | 0) == ((HEAPU16[2621484] | 0) - 1 | 0)) {
                HEAP16[$ip_0126 + ($col_2123 << 3) + 4 >> 1] = $50;
              } else {
                HEAP16[$ip_0126 + ($col_2123 << 3) + 4 >> 1] = ((($50 << 16 >> 16) + 1 | 0) + (HEAP16[$ip_0126 + ($add194 << 3) + 4 >> 1] << 16 >> 16) | 0) >>> 1 & 65535;
              }
              $add209 = $col_2123 + 2 | 0;
              $91 = HEAP16[2621484] | 0;
              $conv171 = $91 & 65535;
              if (($add209 | 0) < ($conv171 | 0)) {
                $col_2123 = $add209;
                $46 = $91;
              } else {
                $conv171_lcssa = $conv171;
                break L528;
              }
            }
          }
        } while (0);
        if ((label | 0) == 382) {
          label = 0;
          $conv171_lcssa = $45 & 65535;
        }
        $inc212 = $row_1130 + 1 | 0;
        $add_ptr214 = $ip_0126 + ($conv171_lcssa << 3) | 0;
        $51 = HEAP16[2699404] | 0;
        if (($inc212 | 0) >= ($51 & 65535 | 0)) {
          $ip_0_lcssa = $add_ptr214;
          break L512;
        }
        $ip_0126 = $add_ptr214;
        $row_1130 = $inc212;
        $36 = HEAP32[$sraw >> 2] | 0;
        $35 = $51;
      }
    }
  } while (0);
  $arraydecay218 = $ip_0_lcssa | 0;
  L545 : do {
    if (($33 | 0) < ($ip_0_lcssa | 0)) {
      $arrayidx299 = $pix | 0;
      $arrayidx305 = $pix + 8 | 0;
      $arrayidx317 = $pix + 4 | 0;
      $rp_4114 = $arraydecay115;
      while (1) {
        $52 = HEAP32[1310892] | 0;
        if (($52 | 0) == (-2147483001 | 0) | ($52 | 0) == (-2147483007 | 0) | ($52 | 0) == (-2147483039 | 0) | ($52 | 0) == (-2147483056 | 0) | ($52 | 0) == (-2147483112 | 0)) {
          $arrayidx237 = $rp_4114 + 2 | 0;
          $add240 = (HEAP16[$arrayidx237 >> 1] << 16 >> 16 << 2) + $hue_0 | 0;
          HEAP16[$arrayidx237 >> 1] = $add240 & 65535;
          $arrayidx243 = $rp_4114 + 4 | 0;
          $add246 = (HEAP16[$arrayidx243 >> 1] << 16 >> 16 << 2) + $hue_0 | 0;
          HEAP16[$arrayidx243 >> 1] = $add246 & 65535;
          $add259 = ((($add246 << 16 >> 16) * 22929 & -1) + (($add240 << 16 >> 16) * 50 & -1) >> 14) + (HEAP16[$rp_4114 >> 1] << 16 >> 16) | 0;
          HEAP32[$arrayidx299 >> 2] = $add259;
          HEAP32[$arrayidx317 >> 2] = (((HEAP16[$arrayidx243 >> 1] << 16 >> 16) * -11751 & -1) + ((HEAP16[$arrayidx237 >> 1] << 16 >> 16) * -5640 & -1) >> 14) + (HEAP16[$rp_4114 >> 1] << 16 >> 16) | 0;
          HEAP32[$arrayidx305 >> 2] = (((HEAP16[$arrayidx243 >> 1] << 16 >> 16) * -101 & -1) + ((HEAP16[$arrayidx237 >> 1] << 16 >> 16) * 29040 & -1) >> 14) + (HEAP16[$rp_4114 >> 1] << 16 >> 16) | 0;
          $72 = $add259;
        } else {
          $64 = HEAP16[$rp_4114 >> 1] | 0;
          if ($52 >>> 0 < 2147484184) {
            $sub291 = $64 - 512 & 65535;
            HEAP16[$rp_4114 >> 1] = $sub291;
            $65 = $sub291;
          } else {
            $65 = $64;
          }
          $arrayidx296 = $rp_4114 + 4 | 0;
          $add298 = (HEAP16[$arrayidx296 >> 1] << 16 >> 16) + ($65 << 16 >> 16) | 0;
          HEAP32[$arrayidx299 >> 2] = $add298;
          $arrayidx302 = $rp_4114 + 2 | 0;
          HEAP32[$arrayidx305 >> 2] = (HEAP16[$arrayidx302 >> 1] << 16 >> 16) + (HEAP16[$rp_4114 >> 1] << 16 >> 16) | 0;
          HEAP32[$arrayidx317 >> 2] = (((HEAP16[$arrayidx302 >> 1] << 16 >> 16) * -778 & -1) - (HEAP16[$arrayidx296 >> 1] << 16 >> 16 << 11) >> 12) + (HEAP16[$rp_4114 >> 1] << 16 >> 16) | 0;
          $72 = $add298;
        }
        $shr327 = Math_imul(HEAPU16[2622062] | 0, $72) >> 10;
        if (($shr327 | 0) < 0) {
          $cond356 = 0;
        } else {
          $cond356 = ($shr327 | 0) < 65535 ? $shr327 & 65535 : -1;
        }
        HEAP16[$rp_4114 >> 1] = $cond356;
        $shr327_1 = Math_imul(HEAPU16[2622063] | 0, HEAP32[$arrayidx317 >> 2] | 0) >> 10;
        if (($shr327_1 | 0) < 0) {
          $cond356_1 = 0;
        } else {
          $cond356_1 = ($shr327_1 | 0) < 65535 ? $shr327_1 & 65535 : -1;
        }
        HEAP16[$rp_4114 + 2 >> 1] = $cond356_1;
        $shr327_2 = Math_imul(HEAPU16[2622064] | 0, HEAP32[$arrayidx305 >> 2] | 0) >> 10;
        if (($shr327_2 | 0) < 0) {
          $cond356_2 = 0;
        } else {
          $cond356_2 = ($shr327_2 | 0) < 65535 ? $shr327_2 & 65535 : -1;
        }
        HEAP16[$rp_4114 + 4 >> 1] = $cond356_2;
        $add_ptr363 = $rp_4114 + 8 | 0;
        if ($add_ptr363 >>> 0 < $arraydecay218 >>> 0) {
          $rp_4114 = $add_ptr363;
        } else {
          break L545;
        }
      }
    }
  } while (0);
  $76 = HEAP32[$jh + 76 >> 2] | 0;
  if (($76 | 0) != 0) {
    _free($76);
  }
  $78 = HEAP32[$jh + 80 >> 2] | 0;
  if (($78 | 0) != 0) {
    _free($78);
  }
  $80 = HEAP32[$jh + 84 >> 2] | 0;
  if (($80 | 0) != 0) {
    _free($80);
  }
  $82 = HEAP32[$jh + 88 >> 2] | 0;
  if (($82 | 0) != 0) {
    _free($82);
  }
  _free(HEAP32[$jh + 92 >> 2] | 0);
  HEAP32[1315898] = 16383;
  STACKTOP = __stackBase__;
  return;
}
function _lossless_dng_load_raw() {
  var $str_i = 0, $jh = 0, $rp = 0, $1 = 0, $wide = 0, $high = 0, $arrayidx_i = 0, $arrayidx_1_i = 0, $arrayidx_2_i = 0, $arrayidx_3_i = 0, $row_i = 0, $clrs = 0, $tcol_024 = 0, $trow_023 = 0, $call = 0, $4 = 0, $6 = 0, $retval_0_i_i = 0, $7 = 0, $jwide_0 = 0, $div = 0, $cmp1612 = 0, $col_020 = 0, $row_019 = 0, $jrow_018 = 0, $col_115 = 0, $row_114 = 0, $jcol_013 = 0, $inc = 0, $row_2 = 0, $col_2 = 0, $inc28 = 0, $col_1_lcssa = 0, $row_1_lcssa = 0, $inc30 = 0, $add34 = 0, $trow_1 = 0, $tcol_1 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  $str_i = __stackBase__ | 0;
  $jh = __stackBase__ + 4 | 0;
  $rp = __stackBase__ + 100 | 0;
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $1 = $str_i;
  $wide = $jh + 8 | 0;
  $high = $jh + 4 | 0;
  $arrayidx_i = $jh + 76 | 0;
  $arrayidx_1_i = $jh + 80 | 0;
  $arrayidx_2_i = $jh + 84 | 0;
  $arrayidx_3_i = $jh + 88 | 0;
  $row_i = $jh + 92 | 0;
  $clrs = $jh + 12 | 0;
  $trow_023 = 0;
  $tcol_024 = 0;
  while (1) {
    $call = _ftell(HEAP32[1316053] | 0) | 0;
    if ((HEAP32[1310896] | 0) >>> 0 < 2147483647) {
      $4 = HEAP32[1316053] | 0;
      HEAP32[$str_i >> 2] = -1;
      _fread($1 | 0, 1, 4, $4 | 0);
      $6 = HEAP32[$str_i >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i = $6;
      } else {
        $retval_0_i_i = _llvm_bswap_i32($6 | 0) | 0;
      }
      _fseek($4 | 0, $retval_0_i_i | 0, 0);
    }
    if ((_ljpeg_start($jh, 0) | 0) == 0) {
      label = 450;
      break;
    }
    $7 = HEAP32[$wide >> 2] | 0;
    if ((HEAP32[1356938] | 0) == 0) {
      $jwide_0 = $7;
    } else {
      $jwide_0 = Math_imul(HEAP32[$clrs >> 2] | 0, $7);
    }
    $div = ($jwide_0 >>> 0) / ((HEAP32[1316049] | 0) >>> 0) >>> 0;
    L595 : do {
      if ((HEAP32[$high >> 2] | 0) != 0) {
        $cmp1612 = ($div | 0) == 0;
        $jrow_018 = 0;
        $row_019 = 0;
        $col_020 = 0;
        while (1) {
          HEAP32[$rp >> 2] = _ljpeg_row($jrow_018, $jh) | 0;
          L599 : do {
            if ($cmp1612) {
              $row_1_lcssa = $row_019;
              $col_1_lcssa = $col_020;
            } else {
              $jcol_013 = 0;
              $row_114 = $row_019;
              $col_115 = $col_020;
              while (1) {
                _adobe_copy_pixel($row_114 + $trow_023 | 0, $col_115 + $tcol_024 | 0, $rp);
                $inc = $col_115 + 1 | 0;
                do {
                  if ($inc >>> 0 < (HEAP32[1310895] | 0) >>> 0) {
                    if ($inc >>> 0 < (HEAPU16[2622498] | 0) >>> 0) {
                      $col_2 = $inc;
                      $row_2 = $row_114;
                      break;
                    } else {
                      label = 434;
                      break;
                    }
                  } else {
                    label = 434;
                  }
                } while (0);
                if ((label | 0) == 434) {
                  label = 0;
                  $col_2 = 0;
                  $row_2 = $row_114 + 1 | 0;
                }
                $inc28 = $jcol_013 + 1 | 0;
                if ($inc28 >>> 0 < $div >>> 0) {
                  $jcol_013 = $inc28;
                  $row_114 = $row_2;
                  $col_115 = $col_2;
                } else {
                  $row_1_lcssa = $row_2;
                  $col_1_lcssa = $col_2;
                  break L599;
                }
              }
            }
          } while (0);
          $inc30 = $jrow_018 + 1 | 0;
          if ($inc30 >>> 0 < (HEAP32[$high >> 2] | 0) >>> 0) {
            $jrow_018 = $inc30;
            $row_019 = $row_1_lcssa;
            $col_020 = $col_1_lcssa;
          } else {
            break L595;
          }
        }
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, $call + 4 | 0, 0);
    $add34 = (HEAP32[1310895] | 0) + $tcol_024 | 0;
    if ($add34 >>> 0 < (HEAPU16[2622498] | 0) >>> 0) {
      $tcol_1 = $add34;
      $trow_1 = $trow_023;
    } else {
      $tcol_1 = 0;
      $trow_1 = (HEAP32[1310896] | 0) + $trow_023 | 0;
    }
    $19 = HEAP32[$arrayidx_i >> 2] | 0;
    if (($19 | 0) != 0) {
      _free($19);
    }
    $21 = HEAP32[$arrayidx_1_i >> 2] | 0;
    if (($21 | 0) != 0) {
      _free($21);
    }
    $23 = HEAP32[$arrayidx_2_i >> 2] | 0;
    if (($23 | 0) != 0) {
      _free($23);
    }
    $25 = HEAP32[$arrayidx_3_i >> 2] | 0;
    if (($25 | 0) != 0) {
      _free($25);
    }
    _free(HEAP32[$row_i >> 2] | 0);
    if ($trow_1 >>> 0 < (HEAPU16[2622502] | 0) >>> 0) {
      $trow_023 = $trow_1;
      $tcol_024 = $tcol_1;
    } else {
      label = 449;
      break;
    }
  }
  if ((label | 0) == 449) {
    STACKTOP = __stackBase__;
    return;
  } else if ((label | 0) == 450) {
    STACKTOP = __stackBase__;
    return;
  }
}
function _pentax_load_raw() {
  var $str_i25 = 0, $str_i = 0, $bit = 0, $huff = 0, $vpred = 0, $tmpcast = 0, $hpred = 0, $5 = 0, $conv2_i_i = 0, $7 = 0, $retval_0_in_i_i = 0, $and = 0, $cmp62 = 0, $10 = 0, $c_063 = 0, $13 = 0, $conv2_i_i29 = 0, $15 = 0, $retval_0_in_i_i37 = 0, $inc = 0, $c_161 = 0, $inc15 = 0, $c_258 = 0, $conv23 = 0, $conv3049 = 0, $and3253 = 0, $i_055 = 0, $inc40 = 0, $inc44 = 0, $arrayidx46 = 0, $22 = 0, $add_ptr_i = 0, $23 = 0, $24 = 0, $row_046 = 0, $and62 = 0, $col_043 = 0, $call_i40 = 0, $26 = 0, $call4_i = 0, $retval_0_i = 0, $arrayidx64 = 0, $conv67 = 0, $arrayidx70 = 0, $arrayidx75_pre_phi = 0, $29 = 0, $add77 = 0, $inc86 = 0, $33 = 0, $34 = 0, $35 = 0, $inc89 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8272 | 0;
  $str_i25 = __stackBase__ | 0;
  $str_i = __stackBase__ + 4 | 0;
  $bit = __stackBase__ + 8 | 0;
  $huff = __stackBase__ + 68 | 0;
  $vpred = __stackBase__ + 8264 | 0;
  $tmpcast = $vpred;
  $hpred = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[$vpred >> 2] = 0;
  HEAP32[$vpred + 4 >> 2] = 0;
  _fseek(HEAP32[1316053] | 0, HEAP32[1315884] | 0, 0);
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $5 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $5 & 255;
  $7 = ($5 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($7 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $7 & 65535;
  }
  $and = $retval_0_in_i_i + 12 & 15;
  _fseek(HEAP32[1316053] | 0, 12, 1);
  $cmp62 = ($and | 0) == 0;
  L632 : do {
    if (!$cmp62) {
      $10 = $str_i25;
      $c_063 = 0;
      while (1) {
        HEAP16[$str_i25 >> 1] = -1;
        _fread($10 | 0, 1, 2, HEAP32[1316053] | 0);
        $13 = HEAP16[$str_i25 >> 1] | 0;
        $conv2_i_i29 = $13 & 255;
        $15 = ($13 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i37 = ($15 & 65535) << 8 | $conv2_i_i29;
        } else {
          $retval_0_in_i_i37 = $conv2_i_i29 << 8 | $15 & 65535;
        }
        HEAP16[$bit + ($c_063 << 1) >> 1] = $retval_0_in_i_i37 & 65535;
        $inc = $c_063 + 1 | 0;
        if (($inc | 0) < ($and | 0)) {
          $c_063 = $inc;
        } else {
          break;
        }
      }
      if ($cmp62) {
        break;
      } else {
        $c_161 = 0;
      }
      while (1) {
        HEAP16[$bit + 30 + ($c_161 << 1) >> 1] = _fgetc(HEAP32[1316053] | 0) & 65535;
        $inc15 = $c_161 + 1 | 0;
        if (($inc15 | 0) < ($and | 0)) {
          $c_161 = $inc15;
        } else {
          break;
        }
      }
      if ($cmp62) {
        break;
      } else {
        $c_258 = 0;
      }
      while (1) {
        $conv23 = HEAPU16[$bit + ($c_258 << 1) >> 1] | 0;
        $conv3049 = HEAPU16[$bit + 30 + ($c_258 << 1) >> 1] | 0;
        $and3253 = ($conv23 + 4095 | 0) + (4096 >>> ($conv3049 >>> 0)) & 4095;
        L646 : do {
          if ($conv23 >>> 0 <= $and3253 >>> 0) {
            $i_055 = $conv23;
            while (1) {
              $inc40 = $i_055 + 1 | 0;
              HEAP16[$huff + ($inc40 << 1) >> 1] = ($conv3049 << 8 | $c_258) & 65535;
              if (($inc40 | 0) > ($and3253 | 0)) {
                break L646;
              } else {
                $i_055 = $inc40;
              }
            }
          }
        } while (0);
        $inc44 = $c_258 + 1 | 0;
        if (($inc44 | 0) < ($and | 0)) {
          $c_258 = $inc44;
        } else {
          break L632;
        }
      }
    }
  } while (0);
  $arrayidx46 = $huff | 0;
  HEAP16[$arrayidx46 >> 1] = 12;
  _fseek(HEAP32[1316053] | 0, HEAP32[1357153] | 0, 0);
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $22 = HEAP16[2622502] | 0;
  if ($22 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $add_ptr_i = $huff + 2 | 0;
  $row_046 = 0;
  $24 = HEAP16[2622498] | 0;
  $23 = $22;
  while (1) {
    if ($24 << 16 >> 16 == 0) {
      $35 = 0;
      $34 = $23;
    } else {
      $and62 = $row_046 & 1;
      $col_043 = 0;
      while (1) {
        $call_i40 = _getbithuff(HEAPU16[$arrayidx46 >> 1] | 0, $add_ptr_i) | 0;
        do {
          if (($call_i40 | 0) == 16) {
            $26 = HEAP32[1357024] | 0;
            if (($26 | 0) == 0 | $26 >>> 0 > 16842751) {
              $retval_0_i = -32768;
              break;
            } else {
              label = 473;
              break;
            }
          } else {
            label = 473;
          }
        } while (0);
        do {
          if ((label | 0) == 473) {
            label = 0;
            $call4_i = _getbithuff($call_i40, 0) | 0;
            if (($call4_i & 1 << $call_i40 - 1 | 0) != 0) {
              $retval_0_i = $call4_i;
              break;
            }
            $retval_0_i = ((-1 << $call_i40) + 1 | 0) + $call4_i | 0;
          }
        } while (0);
        if (($col_043 | 0) < 2) {
          $arrayidx64 = $tmpcast + ($and62 << 2) + ($col_043 << 1) | 0;
          $conv67 = (HEAPU16[$arrayidx64 >> 1] | 0) + $retval_0_i & 65535;
          HEAP16[$arrayidx64 >> 1] = $conv67;
          HEAP16[$hpred + ($col_043 << 1) >> 1] = $conv67;
          $arrayidx75_pre_phi = $hpred + (($col_043 & 1) << 1) | 0;
        } else {
          $arrayidx70 = $hpred + (($col_043 & 1) << 1) | 0;
          HEAP16[$arrayidx70 >> 1] = (HEAPU16[$arrayidx70 >> 1] | 0) + $retval_0_i & 65535;
          $arrayidx75_pre_phi = $arrayidx70;
        }
        $29 = HEAP16[$arrayidx75_pre_phi >> 1] | 0;
        $add77 = Math_imul(HEAPU16[2622498] | 0, $row_046) + $col_043 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add77 << 1) >> 1] = $29;
        if ((($29 & 65535) >>> ((HEAP32[1311011] | 0) >>> 0) | 0) != 0) {
          _derror();
        }
        $inc86 = $col_043 + 1 | 0;
        $33 = HEAP16[2622498] | 0;
        if (($inc86 | 0) < ($33 & 65535 | 0)) {
          $col_043 = $inc86;
        } else {
          break;
        }
      }
      $35 = $33;
      $34 = HEAP16[2622502] | 0;
    }
    $inc89 = $row_046 + 1 | 0;
    if (($inc89 | 0) < ($34 & 65535 | 0)) {
      $row_046 = $inc89;
      $24 = $35;
      $23 = $34;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _nikon_load_raw() {
  var $source_addr_i108 = 0, $source_addr_i = 0, $str_i81 = 0, $str_i66 = 0, $str_i = 0, $vpred = 0, $hpred = 0, $call1 = 0, $call2 = 0, $conv4 = 0, $4 = 0, $_ = 0, $tree_1 = 0, $6 = 0, $cmp1_i = 0, $and = 0, $13 = 0, $conv2_i_i = 0, $15 = 0, $retval_0_in_i_i = 0, $retval_0_i_i = 0, $conv21 = 0, $step_0 = 0, $17 = 0, $i_0123 = 0, $20 = 0, $conv2_i_i70 = 0, $22 = 0, $retval_0_in_i_i78 = 0, $inc = 0, $i_1121 = 0, $rem = 0, $sub46 = 0, $mul51 = 0, $inc64 = 0, $31 = 0, $conv2_i_i85 = 0, $33 = 0, $retval_0_in_i_i93 = 0, $cmp1_i99 = 0, $max_0_ph = 0, $split_0_ph = 0, $max_0 = 0, $sub84 = 0, $call_i106 = 0, $tobool = 0, $arraydecay105 = 0, $huff_0119 = 0, $row_0117 = 0, $max_1116 = 0, $min_0115 = 0, $min_1 = 0, $max_2 = 0, $huff_1 = 0, $add_ptr = 0, $and137 = 0, $col_0112 = 0, $call115 = 0, $and116 = 0, $shr = 0, $shr122 = 0, $diff_0 = 0, $arrayidx139 = 0, $conv142 = 0, $arrayidx146 = 0, $arrayidx152_pre_phi = 0, $49 = 0, $cond186 = 0, $50 = 0, $add190 = 0, $inc193 = 0, $inc196 = 0, $huff_0_lcssa = 0, $55 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $source_addr_i108 = __stackBase__ | 0;
  $source_addr_i = __stackBase__ + 4 | 0;
  $str_i81 = __stackBase__ + 8 | 0;
  $str_i66 = __stackBase__ + 12 | 0;
  $str_i = __stackBase__ + 16 | 0;
  $vpred = __stackBase__ + 20 | 0;
  $hpred = __stackBase__ + 28 | 0;
  _fseek(HEAP32[1316053] | 0, HEAP32[1315884] | 0, 0);
  $call1 = _fgetc(HEAP32[1316053] | 0) | 0;
  $call2 = _fgetc(HEAP32[1316053] | 0) | 0;
  $conv4 = $call1 & 65535;
  do {
    if (($conv4 | 0) == 73) {
      label = 488;
    } else {
      if (($call2 & 65535 | 0) == 88) {
        label = 488;
        break;
      } else {
        break;
      }
    }
  } while (0);
  if ((label | 0) == 488) {
    $4 = HEAP32[1316053] | 0;
    _fseek($4 | 0, 2110, 1);
  }
  $_ = ($conv4 | 0) == 70 ? 2 : 0;
  $tree_1 = (HEAP32[1311011] | 0) == 14 ? $_ + 3 | 0 : $_;
  $6 = $vpred;
  if ((_fread($6 | 0, 2, 4, HEAP32[1316053] | 0) | 0) >>> 0 < 4) {
    _derror();
  }
  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
    _swab($6 | 0, $6 | 0, 8);
  }
  $and = 1 << HEAP32[1311011] & 32767;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $13 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $13 & 255;
  $15 = ($13 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($15 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $15 & 65535;
  }
  $retval_0_i_i = $retval_0_in_i_i & 65535;
  $conv21 = $retval_0_in_i_i & 65535;
  if (($retval_0_i_i & 65535) > 1) {
    $step_0 = ($and | 0) / ($conv21 - 1 | 0) & -1;
  } else {
    $step_0 = 0;
  }
  do {
    if (($conv4 | 0) == 68) {
      if (!(($call2 & 65535 | 0) == 32 & ($step_0 | 0) > 0)) {
        if (($retval_0_i_i & 65535) < 16386) {
          label = 514;
          break;
        } else {
          $split_0_ph = 0;
          $max_0_ph = $and;
          break;
        }
      }
      L700 : do {
        if (($conv21 | 0) != 0) {
          $17 = $str_i66;
          $i_0123 = 0;
          while (1) {
            HEAP16[$str_i66 >> 1] = -1;
            _fread($17 | 0, 1, 2, HEAP32[1316053] | 0);
            $20 = HEAP16[$str_i66 >> 1] | 0;
            $conv2_i_i70 = $20 & 255;
            $22 = ($20 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i78 = ($22 & 65535) << 8 | $conv2_i_i70;
            } else {
              $retval_0_in_i_i78 = $conv2_i_i70 << 8 | $22 & 65535;
            }
            HEAP16[5428620 + (Math_imul($i_0123, $step_0) << 1) >> 1] = $retval_0_in_i_i78 & 65535;
            $inc = $i_0123 + 1 | 0;
            if (($inc | 0) < ($conv21 | 0)) {
              $i_0123 = $inc;
            } else {
              break L700;
            }
          }
        }
      } while (0);
      L709 : do {
        if (($and | 0) != 0) {
          $i_1121 = 0;
          while (1) {
            $rem = ($i_1121 | 0) % ($step_0 | 0);
            $sub46 = $i_1121 - $rem | 0;
            $mul51 = Math_imul(HEAPU16[5428620 + ($sub46 << 1) >> 1] | 0, $step_0 - $rem | 0);
            HEAP16[5428620 + ($i_1121 << 1) >> 1] = (Math_imul(HEAPU16[5428620 + ($sub46 + $step_0 << 1) >> 1] | 0, $rem) + $mul51 | 0) / ($step_0 | 0) & -1 & 65535;
            $inc64 = $i_1121 + 1 | 0;
            if (($inc64 | 0) < ($and | 0)) {
              $i_1121 = $inc64;
            } else {
              break L709;
            }
          }
        }
      } while (0);
      _fseek(HEAP32[1316053] | 0, (HEAP32[1315884] | 0) + 562 | 0, 0);
      HEAP16[$str_i81 >> 1] = -1;
      _fread($str_i81 | 0, 1, 2, HEAP32[1316053] | 0);
      $31 = HEAP16[$str_i81 >> 1] | 0;
      $conv2_i_i85 = $31 & 255;
      $33 = ($31 & 65535) >>> 8;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_in_i_i93 = ($33 & 65535) << 8 | $conv2_i_i85;
      } else {
        $retval_0_in_i_i93 = $conv2_i_i85 << 8 | $33 & 65535;
      }
      $split_0_ph = $retval_0_in_i_i93 & 65535;
      $max_0_ph = $and;
      break;
    } else if (($conv4 | 0) == 70) {
      $split_0_ph = 0;
      $max_0_ph = $and;
    } else {
      if (($retval_0_i_i & 65535) < 16386) {
        label = 514;
        break;
      } else {
        $split_0_ph = 0;
        $max_0_ph = $and;
        break;
      }
    }
  } while (0);
  do {
    if ((label | 0) == 514) {
      if ((_fread(5428620, 2, $conv21 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $conv21 >>> 0) {
        _derror();
      }
      $cmp1_i99 = HEAP16[2631518] << 16 >> 16 == 18761;
      if ($cmp1_i99 ^ (_htons(4660) | 0) == 4660) {
        $split_0_ph = 0;
        $max_0_ph = $conv21;
        break;
      }
      _swab(5428620, 5428620, $conv21 << 1 | 0);
      $split_0_ph = 0;
      $max_0_ph = $conv21;
    }
  } while (0);
  $max_0 = $max_0_ph;
  while (1) {
    $sub84 = $max_0 - 1 | 0;
    if (HEAP16[5428620 + ($max_0 - 2 << 1) >> 1] << 16 >> 16 == HEAP16[5428620 + ($sub84 << 1) >> 1] << 16 >> 16) {
      $max_0 = $sub84;
    } else {
      break;
    }
  }
  HEAP32[$source_addr_i >> 2] = 5263052 + ($tree_1 << 5) | 0;
  $call_i106 = _make_decoder_ref($source_addr_i) | 0;
  _fseek(HEAP32[1316053] | 0, HEAP32[1357153] | 0, 0);
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    $huff_0_lcssa = $call_i106;
    $55 = $huff_0_lcssa;
    _free($55);
    STACKTOP = __stackBase__;
    return;
  }
  $tobool = ($split_0_ph | 0) != 0;
  $arraydecay105 = 5263052 + ($tree_1 + 1 << 5) | 0;
  $min_0115 = 0;
  $max_1116 = $max_0;
  $row_0117 = 0;
  $huff_0119 = $call_i106;
  while (1) {
    if ($tobool & ($row_0117 | 0) == ($split_0_ph | 0)) {
      _free($huff_0119);
      HEAP32[$source_addr_i108 >> 2] = $arraydecay105;
      $huff_1 = _make_decoder_ref($source_addr_i108) | 0;
      $max_2 = $max_1116 + 32 | 0;
      $min_1 = 16;
    } else {
      $huff_1 = $huff_0119;
      $max_2 = $max_1116;
      $min_1 = $min_0115;
    }
    L736 : do {
      if (HEAP16[2622498] << 16 >> 16 != 0) {
        $add_ptr = $huff_1 + 2 | 0;
        $and137 = $row_0117 & 1;
        $col_0112 = 0;
        while (1) {
          $call115 = _getbithuff(HEAPU16[$huff_1 >> 1] | 0, $add_ptr) | 0;
          $and116 = $call115 & 15;
          $shr = $call115 >> 4;
          $shr122 = (_getbithuff($and116 - $shr | 0, 0) << 1 | 1) << $shr >>> 1;
          if (($shr122 & 1 << $and116 - 1 | 0) == 0) {
            $diff_0 = ((($shr | 0) == 0 & 1) + (-1 << $and116) | 0) + $shr122 | 0;
          } else {
            $diff_0 = $shr122;
          }
          if (($col_0112 | 0) < 2) {
            $arrayidx139 = $vpred + ($and137 << 2) + ($col_0112 << 1) | 0;
            $conv142 = (HEAPU16[$arrayidx139 >> 1] | 0) + $diff_0 & 65535;
            HEAP16[$arrayidx139 >> 1] = $conv142;
            HEAP16[$hpred + ($col_0112 << 1) >> 1] = $conv142;
            $arrayidx152_pre_phi = $hpred + (($col_0112 & 1) << 1) | 0;
          } else {
            $arrayidx146 = $hpred + (($col_0112 & 1) << 1) | 0;
            HEAP16[$arrayidx146 >> 1] = (HEAPU16[$arrayidx146 >> 1] | 0) + $diff_0 & 65535;
            $arrayidx152_pre_phi = $arrayidx146;
          }
          $49 = HEAP16[$arrayidx152_pre_phi >> 1] | 0;
          if ((($49 & 65535) + $min_1 & 65535 | 0) >= ($max_2 | 0)) {
            _derror();
          }
          if ($49 << 16 >> 16 < 0) {
            $cond186 = 0;
          } else {
            $cond186 = $49 << 16 >> 16 < 16383 ? $49 << 16 >> 16 : 16383;
          }
          $50 = HEAP16[5428620 + ($cond186 << 1) >> 1] | 0;
          $add190 = Math_imul(HEAPU16[2622498] | 0, $row_0117) + $col_0112 | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add190 << 1) >> 1] = $50;
          $inc193 = $col_0112 + 1 | 0;
          if (($inc193 | 0) < (HEAPU16[2622498] | 0 | 0)) {
            $col_0112 = $inc193;
          } else {
            break L736;
          }
        }
      }
    } while (0);
    $inc196 = $row_0117 + 1 | 0;
    if (($inc196 | 0) < (HEAPU16[2699404] | 0 | 0)) {
      $min_0115 = $min_1;
      $max_1116 = $max_2;
      $row_0117 = $inc196;
      $huff_0119 = $huff_1;
    } else {
      $huff_0_lcssa = $huff_1;
      break;
    }
  }
  $55 = $huff_0_lcssa;
  _free($55);
  STACKTOP = __stackBase__;
  return;
}
function _nikon_3700() {
  var $dp = 0, $or = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $dp = __stackBase__ | 0;
  _fseek(HEAP32[1316053] | 0, 3072, 0);
  _fread($dp | 0, 1, 24, HEAP32[1316053] | 0);
  $or = (HEAPU8[$dp + 8 | 0] | 0) << 4 & 48 | HEAP8[$dp + 20 | 0] & 3;
  if (($or | 0) == 0) {
    _strcpy(5263724, 5263252);
    _strcpy(5263468, 5263264);
    STACKTOP = __stackBase__;
    return;
  } else if (($or | 0) == 50) {
    _strcpy(5263724, 5263316);
    _strcpy(5263468, 5263328);
    STACKTOP = __stackBase__;
    return;
  } else if (($or | 0) == 3) {
    _strcpy(5263724, 5263284);
    _strcpy(5263468, 5263296);
    STACKTOP = __stackBase__;
    return;
  } else if (($or | 0) == 51) {
    _strcpy(5263724, 5263348);
    _strcpy(5263468, 5263360);
    STACKTOP = __stackBase__;
    return;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}
function _packed_dng_load_raw() {
  var $rp = 0, $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $row_032 = 0, $8 = 0, $mul6 = 0, $cmp1_i17 = 0, $13 = 0, $15 = 0, $col_026 = 0, $inc = 0, $16 = 0, $18 = 0, $col_129 = 0, $inc22 = 0, $inc25 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $rp = __stackBase__ | 0;
  $mul = Math_imul(HEAPU16[2622498] | 0, HEAP32[1310897] | 0);
  do {
    if (($mul | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul << 1;
      if ($mul >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5577796, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $6 = $call_i;
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    _free($call_i);
    STACKTOP = __stackBase__;
    return;
  } else {
    $row_032 = 0;
  }
  while (1) {
    $8 = HEAP32[1311011] | 0;
    L781 : do {
      if (($8 | 0) == 16) {
        $mul6 = Math_imul(HEAPU16[2622498] | 0, HEAP32[1310897] | 0);
        if ((_fread($call_i | 0, 2, $mul6 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $mul6 >>> 0) {
          _derror();
        }
        $cmp1_i17 = HEAP16[2631518] << 16 >> 16 == 18761;
        if (!($cmp1_i17 ^ (_htons(4660) | 0) == 4660)) {
          _swab($call_i | 0, $call_i | 0, $mul6 << 1 | 0);
        }
        $18 = HEAP16[2622498] | 0;
      } else {
        HEAP32[1349741] = 0;
        HEAP32[1349740] = 0;
        HEAP32[1349742] = 0;
        $13 = HEAP16[2622498] | 0;
        if ((Math_imul($13 & 65535, HEAP32[1310897] | 0) | 0) == 0) {
          $18 = $13;
          break;
        } else {
          $col_026 = 0;
          $15 = $8;
        }
        while (1) {
          HEAP16[$6 + ($col_026 << 1) >> 1] = _getbithuff($15, 0) & 65535;
          $inc = $col_026 + 1 | 0;
          $16 = HEAP16[2622498] | 0;
          if ($inc >>> 0 >= Math_imul($16 & 65535, HEAP32[1310897] | 0) >>> 0) {
            $18 = $16;
            break L781;
          }
          $col_026 = $inc;
          $15 = HEAP32[1311011] | 0;
        }
      }
    } while (0);
    HEAP32[$rp >> 2] = $6;
    L794 : do {
      if ($18 << 16 >> 16 != 0) {
        $col_129 = 0;
        while (1) {
          _adobe_copy_pixel($row_032, $col_129, $rp);
          $inc22 = $col_129 + 1 | 0;
          if (($inc22 | 0) < (HEAPU16[2622498] | 0 | 0)) {
            $col_129 = $inc22;
          } else {
            break L794;
          }
        }
      }
    } while (0);
    $inc25 = $row_032 + 1 | 0;
    if (($inc25 | 0) < (HEAPU16[2622502] | 0 | 0)) {
      $row_032 = $inc25;
    } else {
      break;
    }
  }
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _ppm_thumb() {
  var $mul2 = 0, $call = 0, $2 = 0, $3 = 0, $4 = 0, $conv3 = 0, $conv4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $mul2 = Math_imul((HEAPU16[2622024] | 0) * 3 & -1, HEAPU16[2622034] | 0);
  HEAP32[1311016] = $mul2;
  $call = _malloc($mul2) | 0;
  if (($call | 0) == 0) {
    $2 = HEAP32[_stderr >> 2] | 0;
    $3 = HEAP32[1316054] | 0;
    _fprintf($2 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = 5576692, tempInt) | 0);
    _longjmp(5428048, 1);
  } else {
    $4 = HEAP32[1315761] | 0;
    $conv3 = HEAPU16[2622024] | 0;
    $conv4 = HEAPU16[2622034] | 0;
    _fprintf($4 | 0, 5573616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv3, HEAP32[tempInt + 4 >> 2] = $conv4, tempInt) | 0);
    $7 = HEAP32[1311016] | 0;
    $8 = HEAP32[1316053] | 0;
    _fread($call | 0, 1, $7 | 0, $8 | 0);
    $9 = HEAP32[1311016] | 0;
    $10 = HEAP32[1315761] | 0;
    _fwrite($call | 0, 1, $9 | 0, $10 | 0);
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _rollei_load_raw() {
  var $pixel = 0, $todo = 0, $0 = 0, $1 = 0, $arraydecay = 0, $arrayidx35 = 0, $buffer_032 = 0, $isix_031 = 0, $3 = 0, $conv7 = 0, $or = 0, $arrayidx_1 = 0, $conv7_1 = 0, $arrayidx11_1 = 0, $or15_1 = 0, $arrayidx_2 = 0, $conv7_2 = 0, $arrayidx11_2 = 0, $arrayidx_3 = 0, $conv7_3 = 0, $arrayidx11_3 = 0, $or15_3 = 0, $arrayidx_4 = 0, $conv7_4 = 0, $arrayidx11_4 = 0, $or15_4 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx22_1 = 0, $arrayidx26_1 = 0, $arrayidx22_2 = 0, $arrayidx26_2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  $pixel = __stackBase__ | 0;
  $todo = __stackBase__ + 12 | 0;
  $0 = HEAP16[2622498] | 0;
  $1 = HEAP16[2622502] | 0;
  $arraydecay = $pixel | 0;
  if ((_fread($arraydecay | 0, 1, 10, HEAP32[1316053] | 0) | 0) != 10) {
    HEAP32[1315898] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx35 = $todo + 4 | 0;
  $3 = 0;
  $isix_031 = Math_imul(($0 & 65535) * 5 & -1, $1 & 65535) >>> 3;
  $buffer_032 = 0;
  while (1) {
    HEAP32[$todo >> 2] = $3;
    $conv7 = HEAPU8[$arraydecay] | 0;
    $or = $conv7 << 8 | (HEAPU8[$pixel + 1 | 0] | 0);
    HEAP32[$arrayidx35 >> 2] = $or;
    $arrayidx_1 = $todo + 8 | 0;
    HEAP32[$arrayidx_1 >> 2] = $3 + 1 | 0;
    $conv7_1 = HEAPU8[$pixel + 2 | 0] | 0;
    $arrayidx11_1 = $todo + 12 | 0;
    HEAP32[$arrayidx11_1 >> 2] = $conv7_1 << 8 | (HEAPU8[$pixel + 3 | 0] | 0);
    $or15_1 = $conv7_1 >>> 2 | ($conv7 >>> 2 | $buffer_032 << 6) << 6;
    $arrayidx_2 = $todo + 16 | 0;
    HEAP32[$arrayidx_2 >> 2] = $3 + 2 | 0;
    $conv7_2 = HEAPU8[$pixel + 4 | 0] | 0;
    $arrayidx11_2 = $todo + 20 | 0;
    HEAP32[$arrayidx11_2 >> 2] = $conv7_2 << 8 | (HEAPU8[$pixel + 5 | 0] | 0);
    $arrayidx_3 = $todo + 24 | 0;
    HEAP32[$arrayidx_3 >> 2] = $3 + 3 | 0;
    $conv7_3 = HEAPU8[$pixel + 6 | 0] | 0;
    $arrayidx11_3 = $todo + 28 | 0;
    HEAP32[$arrayidx11_3 >> 2] = $conv7_3 << 8 | (HEAPU8[$pixel + 7 | 0] | 0);
    $or15_3 = $conv7_3 >>> 2 | ($conv7_2 >>> 2 | $or15_1 << 6) << 6;
    $arrayidx_4 = $todo + 32 | 0;
    HEAP32[$arrayidx_4 >> 2] = $3 + 4 | 0;
    $conv7_4 = HEAPU8[$pixel + 8 | 0] | 0;
    $arrayidx11_4 = $todo + 36 | 0;
    HEAP32[$arrayidx11_4 >> 2] = $conv7_4 << 8 | (HEAPU8[$pixel + 9 | 0] | 0);
    $or15_4 = $conv7_4 >>> 2 | $or15_3 << 6;
    $arrayidx22 = $todo + 40 | 0;
    HEAP32[$arrayidx22 >> 2] = $isix_031;
    $arrayidx26 = $todo + 44 | 0;
    HEAP32[$arrayidx26 >> 2] = $or15_1 >>> 2 & 4095;
    $arrayidx22_1 = $todo + 48 | 0;
    HEAP32[$arrayidx22_1 >> 2] = $isix_031 + 1 | 0;
    $arrayidx26_1 = $todo + 52 | 0;
    HEAP32[$arrayidx26_1 >> 2] = $or15_3 >>> 4 & 4194303;
    $arrayidx22_2 = $todo + 56 | 0;
    HEAP32[$arrayidx22_2 >> 2] = $isix_031 + 2 | 0;
    $arrayidx26_2 = $todo + 60 | 0;
    HEAP32[$arrayidx26_2 >> 2] = $or15_4;
    HEAP16[(HEAP32[1311250] | 0) + ($3 << 1) >> 1] = $or & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx_1 >> 2] << 1) >> 1] = HEAP32[$arrayidx11_1 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx_2 >> 2] << 1) >> 1] = HEAP32[$arrayidx11_2 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx_3 >> 2] << 1) >> 1] = HEAP32[$arrayidx11_3 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx_4 >> 2] << 1) >> 1] = HEAP32[$arrayidx11_4 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx22 >> 2] << 1) >> 1] = HEAP32[$arrayidx26 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx22_1 >> 2] << 1) >> 1] = HEAP32[$arrayidx26_1 >> 2] & 1023;
    HEAP16[(HEAP32[1311250] | 0) + (HEAP32[$arrayidx22_2 >> 2] << 1) >> 1] = HEAP32[$arrayidx26_2 >> 2] & 1023;
    if ((_fread($arraydecay | 0, 1, 10, HEAP32[1316053] | 0) | 0) == 10) {
      $3 = $3 + 5 | 0;
      $isix_031 = $isix_031 + 3 | 0;
      $buffer_032 = $or15_4;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 1023;
  STACKTOP = __stackBase__;
  return;
}
function _ppm16_thumb() {
  var $mul = 0, $mul2 = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp1_i16 = 0, $i_022 = 0, $inc = 0, $conv8 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $mul = Math_imul(HEAPU16[2622034] | 0, HEAPU16[2622024] | 0);
  $mul2 = $mul * 3 & -1;
  HEAP32[1311016] = $mul2;
  do {
    if (($mul2 | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul * 6 & -1;
      if ($mul2 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul2 >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5587672, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $6 = $call_i;
  $7 = HEAP32[1311016] | 0;
  if ((_fread($call_i | 0, 2, $7 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $7 >>> 0) {
    _derror();
  }
  $cmp1_i16 = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i16 ^ (_htons(4660) | 0) == 4660)) {
    _swab($call_i | 0, $call_i | 0, $7 << 1 | 0);
  }
  L827 : do {
    if ((HEAP32[1311016] | 0) != 0) {
      $i_022 = 0;
      while (1) {
        HEAP8[$call_i + $i_022 | 0] = (HEAPU16[$6 + ($i_022 << 1) >> 1] | 0) >>> 8 & 255;
        $inc = $i_022 + 1 | 0;
        if ($inc >>> 0 < (HEAP32[1311016] | 0) >>> 0) {
          $i_022 = $inc;
        } else {
          break L827;
        }
      }
    }
  } while (0);
  $conv8 = HEAPU16[2622034] | 0;
  _fprintf(HEAP32[1315761] | 0, 5573616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAPU16[2622024] | 0, HEAP32[tempInt + 4 >> 2] = $conv8, tempInt) | 0);
  _fwrite($call_i | 0, 1, HEAP32[1311016] | 0, HEAP32[1315761] | 0);
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _layer_thumb() {
  var $and = 0, $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $5 = 0, $6 = 0, $conv3 = 0, $conv4 = 0, $14 = 0, $15 = 0, $16 = 0, $i_013 = 0, $17 = 0, $c_011 = 0, $conv18 = 0, $inc = 0, $22 = 0, $_pre16 = 0, $23 = 0, $24 = 0, $inc21 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $and = (HEAP32[1311014] | 0) >>> 5 & 7;
  HEAP32[1390240] = $and;
  $mul = Math_imul(HEAPU16[2622034] | 0, HEAPU16[2622024] | 0);
  HEAP32[1311016] = $mul;
  do {
    if (($and | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = Math_imul($mul, $and);
      if ($mul >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($and >>> 0) >>> 0 | 0) == ($mul | 0) ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $5 = HEAP32[_stderr >> 2] | 0;
    $6 = HEAP32[1316054] | 0;
    _fprintf($5 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $6, HEAP32[tempInt + 4 >> 2] = 5587572, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $conv3 = HEAPU16[2622024] | 0;
  $conv4 = HEAPU16[2622034] | 0;
  _fprintf(HEAP32[1315761] | 0, 5587456, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = (HEAP32[1390240] >> 1) + 5 | 0, HEAP32[tempInt + 4 >> 2] = $conv3, HEAP32[tempInt + 8 >> 2] = $conv4, tempInt) | 0);
  _fread($call_i | 0, HEAP32[1311016] | 0, HEAP32[1390240] | 0, HEAP32[1316053] | 0);
  $14 = HEAP32[1311016] | 0;
  if (($14 | 0) == 0) {
    _free($call_i);
    STACKTOP = __stackBase__;
    return;
  }
  $i_013 = 0;
  $16 = HEAP32[1390240] | 0;
  $15 = $14;
  while (1) {
    L847 : do {
      if (($16 | 0) > 0) {
        $c_011 = 0;
        $17 = $15;
        while (1) {
          $conv18 = HEAP8[$call_i + (Math_imul((HEAP8[5263800 + ((HEAP32[1311014] | 0) >>> 8 << 2) + $c_011 | 0] << 24 >> 24) - 48 | 0, $17) + $i_013 | 0) | 0] << 24 >> 24;
          _fputc($conv18 | 0, HEAP32[1315761] | 0);
          $inc = $c_011 + 1 | 0;
          $22 = HEAP32[1390240] | 0;
          $_pre16 = HEAP32[1311016] | 0;
          if (($inc | 0) < ($22 | 0)) {
            $c_011 = $inc;
            $17 = $_pre16;
          } else {
            $24 = $22;
            $23 = $_pre16;
            break L847;
          }
        }
      } else {
        $24 = $16;
        $23 = $15;
      }
    } while (0);
    $inc21 = $i_013 + 1 | 0;
    if ($inc21 >>> 0 < $23 >>> 0) {
      $i_013 = $inc21;
      $16 = $24;
      $15 = $23;
    } else {
      break;
    }
  }
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _rollei_thumb() {
  var $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $conv3 = 0, $10 = 0, $cmp1_i18 = 0, $i_024 = 0, $arrayidx = 0, $inc = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $mul = Math_imul(HEAPU16[2622034] | 0, HEAPU16[2622024] | 0);
  HEAP32[1311016] = $mul;
  do {
    if (($mul | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul << 1;
      if ($mul >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5587320, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $6 = $call_i;
  $conv3 = HEAPU16[2622034] | 0;
  _fprintf(HEAP32[1315761] | 0, 5573616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAPU16[2622024] | 0, HEAP32[tempInt + 4 >> 2] = $conv3, tempInt) | 0);
  $10 = HEAP32[1311016] | 0;
  if ((_fread($call_i | 0, 2, $10 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $10 >>> 0) {
    _derror();
  }
  $cmp1_i18 = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i18 ^ (_htons(4660) | 0) == 4660)) {
    _swab($call_i | 0, $call_i | 0, $10 << 1 | 0);
  }
  if ((HEAP32[1311016] | 0) == 0) {
    _free($call_i);
    STACKTOP = __stackBase__;
    return;
  } else {
    $i_024 = 0;
  }
  while (1) {
    $arrayidx = $6 + ($i_024 << 1) | 0;
    _fputc((HEAPU16[$arrayidx >> 1] | 0) << 3 | 0, HEAP32[1315761] | 0);
    _fputc((HEAPU16[$arrayidx >> 1] | 0) >>> 5 << 2 | 0, HEAP32[1315761] | 0);
    _fputc((HEAPU16[$arrayidx >> 1] | 0) >>> 11 << 3 | 0, HEAP32[1315761] | 0);
    $inc = $i_024 + 1 | 0;
    if ($inc >>> 0 < (HEAP32[1311016] | 0) >>> 0) {
      $i_024 = $inc;
    } else {
      break;
    }
  }
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _phase_one_flat_field($is_float, $nc) {
  $is_float = $is_float | 0;
  $nc = $nc | 0;
  var $str_i = 0, $str_i132_i = 0, $head = 0, $mult = 0, $arraydecay = 0, $0 = 0, $cmp1_i = 0, $arrayidx1 = 0, $div74 = 0, $div = 0, $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i84 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx3 = 0, $arrayidx5 = 0, $cmp10106 = 0, $cmp14104 = 0, $tobool = 0, $12 = 0, $13 = 0, $arrayidx45 = 0, $cmp62118 = 0, $cmp106 = 0, $y_0134 = 0, $cmp23 = 0, $x_0107 = 0, $c_0105 = 0, $16 = 0, $retval_0_i_i151_i = 0, $18 = 0, $20 = 0, $conv2_i_i = 0, $22 = 0, $retval_0_in_i_i = 0, $cond = 0.0, $conv22 = 0.0, $arrayidx26 = 0, $div33 = 0.0, $add38 = 0, $inc = 0, $conv46 = 0, $conv48 = 0, $add50 = 0, $sub53 = 0, $row_0128 = 0, $x_1119 = 0, $_pre = 0, $conv81 = 0.0, $c_1109 = 0, $add70 = 0, $29 = 0.0, $add86 = 0, $conv89 = 0, $conv91 = 0, $add93 = 0, $sub96 = 0, $32 = 0, $33 = 0, $col_0116 = 0, $shr = 0, $cond119103 = 0, $add125 = 0, $arrayidx126 = 0, $conv131 = 0, $c_2111 = 0, $arrayidx162 = 0, $add165 = 0, $inc168 = 0, $43 = 0, $inc171 = 0, $inc193_us = 0, $c_3121_us = 0, $44 = 0.0, $arrayidx187_us = 0, $add190_us = 0, $x_2123_us = 0, $inc196 = 0, $inc199 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  $str_i = __stackBase__ | 0;
  $str_i132_i = __stackBase__ + 4 | 0;
  $head = __stackBase__ + 8 | 0;
  $mult = __stackBase__ + 24 | 0;
  $arraydecay = $head | 0;
  $0 = $head;
  if ((_fread($0 | 0, 2, 8, HEAP32[1316053] | 0) | 0) >>> 0 < 8) {
    _derror();
  }
  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
    _swab($0 | 0, $0 | 0, 16);
  }
  $arrayidx1 = $head + 8 | 0;
  $div74 = (HEAPU16[$head + 4 >> 1] | 0) / (HEAPU16[$arrayidx1 >> 1] | 0) >>> 0;
  $div = $div74 & 65535;
  $mul = Math_imul($div, $nc);
  do {
    if (($mul | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul << 2;
      if ($mul >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 4 ? $mul_i : -1;
    }
  } while (0);
  $call_i84 = _malloc($req_0_i) | 0;
  if (($call_i84 | 0) == 0) {
    $7 = HEAP32[_stderr >> 2] | 0;
    $8 = HEAP32[1316054] | 0;
    _fprintf($7 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = 5587144, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i84 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i84 | 0, 0, $req_0_i | 0);
  }
  $9 = $call_i84;
  $arrayidx3 = $head + 6 | 0;
  $arrayidx5 = $head + 10 | 0;
  if ((HEAPU16[$arrayidx3 >> 1] | 0) / (HEAPU16[$arrayidx5 >> 1] | 0) >>> 0 << 16 >> 16 == 0) {
    _free($call_i84);
    STACKTOP = __stackBase__;
    return;
  }
  $cmp10106 = $div74 << 16 >> 16 == 0;
  $cmp14104 = ($nc | 0) == 0;
  $tobool = ($is_float | 0) == 0;
  $12 = $str_i;
  $13 = $str_i132_i;
  $arrayidx45 = $head + 2 | 0;
  $cmp62118 = ($div74 & 65535) > 1;
  $cmp106 = ($nc | 0) > 2;
  $y_0134 = 0;
  while (1) {
    L896 : do {
      if (!$cmp10106) {
        $cmp23 = ($y_0134 | 0) == 0;
        $x_0107 = 0;
        while (1) {
          L900 : do {
            if (!$cmp14104) {
              $c_0105 = 0;
              while (1) {
                if ($tobool) {
                  HEAP16[$str_i >> 1] = -1;
                  $18 = HEAP32[1316053] | 0;
                  _fread($12 | 0, 1, 2, $18 | 0);
                  $20 = HEAP16[$str_i >> 1] | 0;
                  $conv2_i_i = $20 & 255;
                  $22 = ($20 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i = ($22 & 65535) << 8 | $conv2_i_i;
                  } else {
                    $retval_0_in_i_i = $conv2_i_i << 8 | $22 & 65535;
                  }
                  $cond = +($retval_0_in_i_i & 65535 | 0) * 30517578125.0e-15;
                } else {
                  HEAP32[$str_i132_i >> 2] = -1;
                  _fread($13 | 0, 1, 4, HEAP32[1316053] | 0);
                  $16 = HEAP32[$str_i132_i >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i151_i = $16;
                  } else {
                    $retval_0_i_i151_i = _llvm_bswap_i32($16 | 0) | 0;
                  }
                  $cond = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i, +HEAPF32[tempDoublePtr >> 2]);
                }
                $conv22 = $cond;
                $arrayidx26 = $9 + (Math_imul($c_0105, $div) + $x_0107 << 2) | 0;
                if ($cmp23) {
                  HEAPF32[$arrayidx26 >> 2] = $conv22;
                } else {
                  $div33 = ($conv22 - +HEAPF32[$arrayidx26 >> 2]) / +(HEAPU16[$arrayidx5 >> 1] | 0 | 0);
                  HEAPF32[$9 + (Math_imul($c_0105 | 1, $div) + $x_0107 << 2) >> 2] = $div33;
                }
                $add38 = $c_0105 + 2 | 0;
                if ($add38 >>> 0 < $nc >>> 0) {
                  $c_0105 = $add38;
                } else {
                  break L900;
                }
              }
            }
          } while (0);
          $inc = $x_0107 + 1 | 0;
          if (($inc | 0) == ($div | 0)) {
            break L896;
          } else {
            $x_0107 = $inc;
          }
        }
      }
    } while (0);
    L920 : do {
      if (($y_0134 | 0) != 0) {
        $conv46 = HEAPU16[$arrayidx45 >> 1] | 0;
        $conv48 = HEAPU16[$arrayidx5 >> 1] | 0;
        $add50 = Math_imul($conv48, $y_0134) + $conv46 | 0;
        $sub53 = $add50 - $conv48 | 0;
        if ($sub53 >>> 0 < (HEAPU16[2622502] | 0) >>> 0 & $sub53 >>> 0 < $add50 >>> 0) {
          $row_0128 = $sub53;
        } else {
          break;
        }
        while (1) {
          L924 : do {
            if ($cmp62118) {
              $x_1119 = 1;
              while (1) {
                $_pre = HEAP16[$arrayidx1 >> 1] | 0;
                L927 : do {
                  if (!$cmp14104) {
                    $conv81 = +($_pre & 65535 | 0);
                    $c_1109 = 0;
                    while (1) {
                      $add70 = Math_imul($c_1109, $div) + $x_1119 | 0;
                      $29 = +HEAPF32[$9 + ($add70 - 1 << 2) >> 2];
                      HEAPF32[$mult + ($c_1109 << 2) >> 2] = $29;
                      HEAPF32[$mult + (($c_1109 | 1) << 2) >> 2] = (+HEAPF32[$9 + ($add70 << 2) >> 2] - $29) / $conv81;
                      $add86 = $c_1109 + 2 | 0;
                      if ($add86 >>> 0 < $nc >>> 0) {
                        $c_1109 = $add86;
                      } else {
                        break L927;
                      }
                    }
                  }
                } while (0);
                $conv89 = HEAPU16[$arraydecay >> 1] | 0;
                $conv91 = $_pre & 65535;
                $add93 = Math_imul($conv91, $x_1119) + $conv89 | 0;
                $sub96 = $add93 - $conv91 | 0;
                $32 = HEAP16[2622498] | 0;
                L932 : do {
                  if ($sub96 >>> 0 < ($32 & 65535) >>> 0 & $sub96 >>> 0 < $add93 >>> 0) {
                    $col_0116 = $sub96;
                    $33 = $32;
                    while (1) {
                      do {
                        if ($cmp106) {
                          $shr = (HEAP32[1356938] | 0) >>> (($row_0128 - (HEAPU16[2621786] | 0) << 1 & 14 | $col_0116 - (HEAPU16[2631898] | 0) & 1) << 1 >>> 0);
                          if (($shr & 1 | 0) == 0) {
                            $cond119103 = $shr & 3;
                            label = 666;
                            break;
                          } else {
                            break;
                          }
                        } else {
                          $cond119103 = 0;
                          label = 666;
                        }
                      } while (0);
                      if ((label | 0) == 666) {
                        label = 0;
                        $add125 = Math_imul($33 & 65535, $row_0128) + $col_0116 | 0;
                        $arrayidx126 = (HEAP32[1311250] | 0) + ($add125 << 1) | 0;
                        $conv131 = ~~(+HEAPF32[$mult + ($cond119103 << 2) >> 2] * +(HEAPU16[$arrayidx126 >> 1] | 0 | 0));
                        HEAP16[$arrayidx126 >> 1] = $conv131 >>> 0 < 65535 ? $conv131 & 65535 : -1;
                      }
                      L940 : do {
                        if (!$cmp14104) {
                          $c_2111 = 0;
                          while (1) {
                            $arrayidx162 = $mult + ($c_2111 << 2) | 0;
                            HEAPF32[$arrayidx162 >> 2] = +HEAPF32[$mult + (($c_2111 | 1) << 2) >> 2] + +HEAPF32[$arrayidx162 >> 2];
                            $add165 = $c_2111 + 2 | 0;
                            if ($add165 >>> 0 < $nc >>> 0) {
                              $c_2111 = $add165;
                            } else {
                              break L940;
                            }
                          }
                        }
                      } while (0);
                      $inc168 = $col_0116 + 1 | 0;
                      $43 = HEAP16[2622498] | 0;
                      if ($inc168 >>> 0 < ($43 & 65535) >>> 0 & $inc168 >>> 0 < $add93 >>> 0) {
                        $col_0116 = $inc168;
                        $33 = $43;
                      } else {
                        break L932;
                      }
                    }
                  }
                } while (0);
                $inc171 = $x_1119 + 1 | 0;
                if (($inc171 | 0) == ($div | 0)) {
                  break L924;
                } else {
                  $x_1119 = $inc171;
                }
              }
            }
          } while (0);
          L946 : do {
            if (!($cmp10106 | $cmp14104)) {
              $x_2123_us = 0;
              while (1) {
                $c_3121_us = 0;
                while (1) {
                  $44 = +HEAPF32[$9 + (Math_imul($c_3121_us | 1, $div) + $x_2123_us << 2) >> 2];
                  $arrayidx187_us = $9 + (Math_imul($c_3121_us, $div) + $x_2123_us << 2) | 0;
                  HEAPF32[$arrayidx187_us >> 2] = $44 + +HEAPF32[$arrayidx187_us >> 2];
                  $add190_us = $c_3121_us + 2 | 0;
                  if ($add190_us >>> 0 < $nc >>> 0) {
                    $c_3121_us = $add190_us;
                  } else {
                    break;
                  }
                }
                $inc193_us = $x_2123_us + 1 | 0;
                if (($inc193_us | 0) == ($div | 0)) {
                  break L946;
                } else {
                  $x_2123_us = $inc193_us;
                }
              }
            }
          } while (0);
          $inc196 = $row_0128 + 1 | 0;
          if ($inc196 >>> 0 < (HEAPU16[2622502] | 0) >>> 0 & $inc196 >>> 0 < $add50 >>> 0) {
            $row_0128 = $inc196;
          } else {
            break L920;
          }
        }
      }
    } while (0);
    $inc199 = $y_0134 + 1 | 0;
    if ($inc199 >>> 0 < ((HEAPU16[$arrayidx3 >> 1] | 0) / (HEAPU16[$arrayidx5 >> 1] | 0) >>> 0 & 65535) >>> 0) {
      $y_0134 = $inc199;
    } else {
      break;
    }
  }
  _free($call_i84);
  STACKTOP = __stackBase__;
  return;
}
function _phase_one_correct() {
  var $str_i478 = 0, $str_i463 = 0, $str_i435 = 0, $str_i132_i406 = 0, $str_i379 = 0, $str_i352 = 0, $str_i337 = 0, $str_i322 = 0, $str_i307 = 0, $str_i132_i290 = 0, $str_i132_i = 0, $str_i269 = 0, $str_i248 = 0, $str_i227 = 0, $str_i206 = 0, $str_i185 = 0, $str_i164 = 0, $str_i155 = 0, $str_i = 0, $val = 0, $dev = 0, $head = 0, $poly = 0, $mult = 0, $3 = 0, $10 = 0, $conv2_i_i = 0, $12 = 0, $retval_0_in_i_i = 0, $15 = 0, $16 = 0, $19 = 0, $retval_0_i_i163 = 0, $23 = 0, $retval_0_i_i183 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx26 = 0, $arrayidx32 = 0, $arrayidx39 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $dec591_in = 0, $off_412_0590 = 0, $mindiff_0589 = 0, $dec591 = 0, $39 = 0, $retval_0_i_i225 = 0, $42 = 0, $retval_0_i_i246 = 0, $45 = 0, $retval_0_i_i267 = 0, $call16 = 0, $51 = 0, $sub148568 = 0, $i_0575 = 0, $55 = 0, $retval_0_i_i151_i = 0, $inc = 0, $add27 = 0.0, $61 = 0.0, $62 = 0.0, $i_1577 = 0, $conv33 = 0.0, $add40 = 0.0, $cond = 0.0, $cond54 = 0, $inc58 = 0, $retval_0_i_i151_i304 = 0, $63 = 0.0, $66 = 0, $i_3574 = 0, $conv81 = 0.0, $add87 = 0.0, $phitmp152 = 0, $cond111 = 0, $inc115 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $row_0585 = 0, $mul122 = 0, $conv124578 = 0, $conv124581 = 0, $col_0580 = 0, $add130 = 0, $arrayidx131 = 0, $inc138 = 0, $75 = 0, $conv124 = 0, $76 = 0, $77 = 0, $inc141 = 0, $sub148570 = 0, $80 = 0, $conv2_i_i311 = 0, $82 = 0, $retval_0_in_i_i319 = 0, $conv153 = 0, $86 = 0, $conv2_i_i326 = 0, $88 = 0, $retval_0_in_i_i334 = 0, $retval_0_i_i335 = 0, $conv155 = 0, $92 = 0, $conv2_i_i341 = 0, $94 = 0, $retval_0_in_i_i349 = 0, $97 = 0, $retval_0_i_i350 = 0, $98 = 0, $sub250 = 0, $add252 = 0, $99 = 0, $row_1566 = 0, $conv_i = 0, $conv2_i = 0, $104 = 0, $add191 = 0, $add195 = 0, $add237 = 0, $cond_i404_ph = 0, $cond_i404617 = 0, $cond_i433 = 0, $inc265_pre_phi = 0, $109 = 0, $110 = 0, $mul289 = 0, $add291150 = 0, $conv_i450 = 0, $conv2_i452 = 0, $114 = 0, $sum_2556 = 0, $i_7555 = 0, $add298 = 0, $add302 = 0, $cond_i460 = 0, $add304 = 0, $inc306 = 0, $sub148 = 0, $121 = 0, $conv2_i_i467 = 0, $123 = 0, $retval_0_in_i_i475 = 0, $sub339 = 0, $call340 = 0, $mindiff_1 = 0, $off_412_1 = 0, $129 = 0, $i_8553 = 0, $132 = 0, $retval_0_i_i497 = 0, $inc367 = 0, $133 = 0, $134 = 0, $mul371 = 0, $mul374 = 0, $add375 = 0, $mul_i500 = 0, $req_0_i = 0, $call_i503 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $145 = 0, $cmp407549 = 0, $cmp407549_1 = 0, $j_1550 = 0, $148 = 0, $retval_0_i_i151_i420 = 0, $inc415 = 0, $conv454 = 0.0, $arrayidx533 = 0, $arrayidx536 = 0, $_pre = 0, $j_2546 = 0, $152 = 0, $conv2_i_i383 = 0, $154 = 0, $retval_0_in_i_i391 = 0, $inc437 = 0, $156 = 0, $157 = 0, $158 = 0, $row_2542 = 0, $conv539 = 0.0, $159 = 0, $conv448539 = 0, $col_1538 = 0, $div458 = 0.0, $conv459 = 0, $conv460 = 0.0, $add464 = 0, $160 = 0, $conv469 = 0.0, $add471 = 0, $i_11535 = 0, $mul481 = 0, $j_3 = 0, $k_0 = 0, $add482 = 0, $k_1 = 0, $conv504 = 0, $cond518 = 0.0, $inc531 = 0, $sub461 = 0.0, $conv543 = 0, $cond549 = 0, $inc568 = 0, $169 = 0, $conv448 = 0, $170 = 0, $171 = 0, $172 = 0, $inc571 = 0, $j_2546_1 = 0, $175 = 0, $conv2_i_i383_1 = 0, $177 = 0, $retval_0_in_i_i391_1 = 0, $inc437_1 = 0, $179 = 0, $j_1550_1 = 0, $182 = 0, $retval_0_i_i151_i420_1 = 0, $inc415_1 = 0, $184 = 0, $cond_i377_ph = 0, $cond_i377614 = 0, $cond_i377_1 = 0, $add243_1 = 0, $add237_2 = 0, $add243_2623 = 0, $add243_2622 = 0, $cond_i377_3 = 0, $add249 = 0.0, $_ph = 0, $add195_1608 = 0, $add195_1610 = 0, $189 = 0, $190 = 0, $add198_1 = 0, $add191_2 = 0, $cmp_i_2 = 0, $conv6_i_2 = 0, $add198_2 = 0, $add198_2635 = 0, $192 = 0, $add198_2634 = 0, $194 = 0, $cond_i_3 = 0, $add198_3 = 0, $sub208 = 0, $call209 = 0, $sub208_1 = 0, $call209_1 = 0, $i_5_max_0_1 = 0, $sub208_2 = 0, $call209_2 = 0, $i_5_max_0_2 = 0, $sub208_3 = 0, $call209_3 = 0, $conv224 = 0, $retval_0_i_i151_i304_1 = 0, $198 = 0.0, $201 = 0, $retval_0_i_i151_i304_2 = 0, $202 = 0.0, $205 = 0, $retval_0_i_i151_i304_3 = 0, $206 = 0.0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 184 | 0;
  $str_i478 = __stackBase__ | 0;
  $str_i463 = __stackBase__ + 4 | 0;
  $str_i435 = __stackBase__ + 8 | 0;
  $str_i132_i406 = __stackBase__ + 12 | 0;
  $str_i379 = __stackBase__ + 16 | 0;
  $str_i352 = __stackBase__ + 20 | 0;
  $str_i337 = __stackBase__ + 24 | 0;
  $str_i322 = __stackBase__ + 28 | 0;
  $str_i307 = __stackBase__ + 32 | 0;
  $str_i132_i290 = __stackBase__ + 36 | 0;
  $str_i132_i = __stackBase__ + 40 | 0;
  $str_i269 = __stackBase__ + 44 | 0;
  $str_i248 = __stackBase__ + 48 | 0;
  $str_i227 = __stackBase__ + 52 | 0;
  $str_i206 = __stackBase__ + 56 | 0;
  $str_i185 = __stackBase__ + 60 | 0;
  $str_i164 = __stackBase__ + 64 | 0;
  $str_i155 = __stackBase__ + 68 | 0;
  $str_i = __stackBase__ + 72 | 0;
  $val = __stackBase__ + 76 | 0;
  $dev = __stackBase__ + 92 | 0;
  $head = __stackBase__ + 108 | 0;
  $poly = __stackBase__ + 144 | 0;
  $mult = __stackBase__ + 176 | 0;
  if (!((HEAP32[1349703] | 0) == 0 & (HEAP32[1315885] | 0) != 0)) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[1310884] | 0) != 0) {
    $3 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5586948, 24, 1, $3 | 0);
  }
  _fseek(HEAP32[1316053] | 0, HEAP32[1315884] | 0, 0);
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $10 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $10 & 255;
  $12 = ($10 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($12 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $12 & 65535;
  }
  HEAP16[2631518] = $retval_0_in_i_i & 65535;
  _fseek(HEAP32[1316053] | 0, 6, 1);
  $15 = HEAP32[1316053] | 0;
  $16 = HEAP32[1315884] | 0;
  HEAP32[$str_i155 >> 2] = -1;
  _fread($str_i155 | 0, 1, 4, $15 | 0);
  $19 = HEAP32[$str_i155 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i163 = $19;
  } else {
    $retval_0_i_i163 = _llvm_bswap_i32($19 | 0) | 0;
  }
  _fseek($15 | 0, $retval_0_i_i163 + $16 | 0, 0);
  HEAP32[$str_i164 >> 2] = -1;
  _fread($str_i164 | 0, 1, 4, HEAP32[1316053] | 0);
  $23 = HEAP32[$str_i164 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i183 = $23;
  } else {
    $retval_0_i_i183 = _llvm_bswap_i32($23 | 0) | 0;
  }
  HEAP32[$str_i185 >> 2] = -1;
  _fread($str_i185 | 0, 1, 4, HEAP32[1316053] | 0);
  if (($retval_0_i_i183 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $26 = $str_i206;
  $27 = $str_i227;
  $28 = $str_i248;
  $29 = $str_i269;
  $30 = $str_i132_i;
  $arrayidx23 = $poly + 28 | 0;
  $arrayidx24 = $poly + 24 | 0;
  $arrayidx26 = $poly + 12 | 0;
  $arrayidx32 = $poly + 20 | 0;
  $arrayidx39 = $poly + 4 | 0;
  $31 = $str_i463;
  $32 = $str_i307;
  $33 = $str_i322;
  $34 = $str_i337;
  $35 = $str_i352;
  $36 = $str_i132_i290;
  $mindiff_0589 = 2147483647;
  $off_412_0590 = 0;
  $dec591_in = $retval_0_i_i183;
  while (1) {
    $dec591 = $dec591_in - 1 | 0;
    HEAP32[$str_i206 >> 2] = -1;
    _fread($26 | 0, 1, 4, HEAP32[1316053] | 0);
    $39 = HEAP32[$str_i206 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i225 = $39;
    } else {
      $retval_0_i_i225 = _llvm_bswap_i32($39 | 0) | 0;
    }
    HEAP32[$str_i227 >> 2] = -1;
    _fread($27 | 0, 1, 4, HEAP32[1316053] | 0);
    $42 = HEAP32[$str_i227 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i246 = $42;
    } else {
      $retval_0_i_i246 = _llvm_bswap_i32($42 | 0) | 0;
    }
    HEAP32[$str_i248 >> 2] = -1;
    _fread($28 | 0, 1, 4, HEAP32[1316053] | 0);
    $45 = HEAP32[$str_i248 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i267 = $45;
    } else {
      $retval_0_i_i267 = _llvm_bswap_i32($45 | 0) | 0;
    }
    $call16 = _ftell(HEAP32[1316053] | 0) | 0;
    _fseek(HEAP32[1316053] | 0, (HEAP32[1315884] | 0) + $retval_0_i_i267 | 0, 0);
    L986 : do {
      if (($retval_0_i_i225 | 0) == 1024) {
        $sub148568 = $retval_0_i_i246 - 8 | 0;
        if (($sub148568 | 0) > -1) {
          $sub148570 = $sub148568;
        } else {
          $off_412_1 = $off_412_0590;
          $mindiff_1 = $mindiff_0589;
          break;
        }
        while (1) {
          HEAP16[$str_i307 >> 1] = -1;
          _fread($32 | 0, 1, 2, HEAP32[1316053] | 0);
          $80 = HEAP16[$str_i307 >> 1] | 0;
          $conv2_i_i311 = $80 & 255;
          $82 = ($80 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i319 = ($82 & 65535) << 8 | $conv2_i_i311;
          } else {
            $retval_0_in_i_i319 = $conv2_i_i311 << 8 | $82 & 65535;
          }
          $conv153 = $retval_0_in_i_i319 & 65535;
          HEAP16[$str_i322 >> 1] = -1;
          _fread($33 | 0, 1, 2, HEAP32[1316053] | 0);
          $86 = HEAP16[$str_i322 >> 1] | 0;
          $conv2_i_i326 = $86 & 255;
          $88 = ($86 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i334 = ($88 & 65535) << 8 | $conv2_i_i326;
          } else {
            $retval_0_in_i_i334 = $conv2_i_i326 << 8 | $88 & 65535;
          }
          $retval_0_i_i335 = $retval_0_in_i_i334 & 65535;
          $conv155 = $retval_0_in_i_i334 & 65535;
          HEAP16[$str_i337 >> 1] = -1;
          _fread($34 | 0, 1, 2, HEAP32[1316053] | 0);
          $92 = HEAP16[$str_i337 >> 1] | 0;
          $conv2_i_i341 = $92 & 255;
          $94 = ($92 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i349 = ($94 & 65535) << 8 | $conv2_i_i341;
          } else {
            $retval_0_in_i_i349 = $conv2_i_i341 << 8 | $94 & 65535;
          }
          HEAP16[$str_i352 >> 1] = -1;
          _fread($35 | 0, 1, 2, HEAP32[1316053] | 0);
          $97 = HEAP16[2622498] | 0;
          L1002 : do {
            if (($retval_0_in_i_i319 & 65535) < ($97 & 65535)) {
              $retval_0_i_i350 = $retval_0_in_i_i349 & 65535;
              if (($retval_0_i_i350 << 16 >> 16 | 0) == 129) {
                $110 = HEAP16[2622502] | 0;
                if (($retval_0_i_i335 & 65535) >= ($110 & 65535)) {
                  break;
                }
                $mul289 = (((HEAP32[1356938] | 0) >>> (($conv155 - (HEAPU16[2621786] | 0) << 1 & 14 | $retval_0_in_i_i319 - (HEAPU16[2631898] | 0) & 1) << 1 >>> 0) & 3 | 0) != 1 & 1) << 2;
                $add291150 = $mul289 | 8;
                $conv_i450 = $110 & 65535;
                $conv2_i452 = $97 & 65535;
                $114 = HEAP32[1311250] | 0;
                $i_7555 = $mul289;
                $sum_2556 = 0;
                while (1) {
                  $add298 = (HEAP8[5245748 + ($i_7555 << 1) | 0] << 24 >> 24) + $conv155 | 0;
                  $add302 = (HEAP8[5245749 + ($i_7555 << 1) | 0] << 24 >> 24) + $conv153 | 0;
                  if ($conv_i450 >>> 0 > $add298 >>> 0 & $conv2_i452 >>> 0 > $add302 >>> 0) {
                    $cond_i460 = HEAPU16[$114 + (Math_imul($conv2_i452, $add298) + $add302 << 1) >> 1] | 0;
                  } else {
                    $cond_i460 = 0;
                  }
                  $add304 = $cond_i460 + $sum_2556 | 0;
                  $inc306 = $i_7555 + 1 | 0;
                  if (($inc306 | 0) < ($add291150 | 0)) {
                    $i_7555 = $inc306;
                    $sum_2556 = $add304;
                  } else {
                    break;
                  }
                }
                HEAP16[$114 + (Math_imul($conv2_i452, $conv155) + $conv153 << 1) >> 1] = ($add304 + 4 | 0) >>> 3 & 65535;
                break;
              } else if (($retval_0_i_i350 << 16 >> 16 | 0) != 131) {
                break;
              }
              $98 = HEAP16[2622502] | 0;
              if ($98 << 16 >> 16 == 0) {
                break;
              }
              $sub250 = $conv153 - 2 | 0;
              $add252 = $conv153 + 2 | 0;
              $row_1566 = 0;
              $99 = $98;
              while (1) {
                $conv_i = $99 & 65535;
                $conv2_i = HEAPU16[2622498] | 0;
                $104 = HEAP32[1311250] | 0;
                if (((HEAP32[1356938] | 0) >>> (($row_1566 - (HEAPU16[2621786] | 0) << 1 & 14 | $retval_0_in_i_i319 - (HEAPU16[2631898] | 0) & 1) << 1 >>> 0) & 3 | 0) == 1) {
                  $add191 = $row_1566 - 1 | 0;
                  $add195 = $conv153 - 1 | 0;
                  do {
                    if ($conv_i >>> 0 > $add191 >>> 0) {
                      if ($conv2_i >>> 0 > $add195 >>> 0) {
                        $_ph = HEAPU16[$104 + (Math_imul($conv2_i, $add191) + $add195 << 1) >> 1] | 0;
                      } else {
                        $_ph = 0;
                      }
                      HEAP32[$val >> 2] = $_ph;
                      $add195_1608 = $conv153 + 1 | 0;
                      if ($conv2_i >>> 0 <= $add195_1608 >>> 0) {
                        $190 = 0;
                        $189 = $_ph;
                        $add195_1610 = $add195_1608;
                        break;
                      }
                      $190 = HEAPU16[$104 + (Math_imul($conv2_i, $add191) + $add195_1608 << 1) >> 1] | 0;
                      $189 = $_ph;
                      $add195_1610 = $add195_1608;
                    } else {
                      HEAP32[$val >> 2] = 0;
                      $190 = 0;
                      $189 = 0;
                      $add195_1610 = $conv153 + 1 | 0;
                    }
                  } while (0);
                  HEAP32[$val + 4 >> 2] = $190;
                  $add198_1 = $190 + $189 | 0;
                  $add191_2 = $row_1566 + 1 | 0;
                  $cmp_i_2 = $conv_i >>> 0 > $add191_2 >>> 0;
                  do {
                    if ($cmp_i_2) {
                      if ($conv2_i >>> 0 > $add195 >>> 0) {
                        $conv6_i_2 = HEAPU16[$104 + (Math_imul($conv2_i, $add191_2) + $add195 << 1) >> 1] | 0;
                        HEAP32[$val + 8 >> 2] = $conv6_i_2;
                        $add198_2 = $conv6_i_2 + $add198_1 | 0;
                        if ($cmp_i_2) {
                          $192 = $conv6_i_2;
                          $add198_2635 = $add198_2;
                        } else {
                          $cond_i_3 = 0;
                          $194 = $conv6_i_2;
                          $add198_2634 = $add198_2;
                          break;
                        }
                      } else {
                        HEAP32[$val + 8 >> 2] = 0;
                        $192 = 0;
                        $add198_2635 = $add198_1;
                      }
                      if ($conv2_i >>> 0 <= $add195_1610 >>> 0) {
                        $cond_i_3 = 0;
                        $194 = $192;
                        $add198_2634 = $add198_2635;
                        break;
                      }
                      $cond_i_3 = HEAPU16[$104 + (Math_imul($conv2_i, $add191_2) + $add195_1610 << 1) >> 1] | 0;
                      $194 = $192;
                      $add198_2634 = $add198_2635;
                    } else {
                      HEAP32[$val + 8 >> 2] = 0;
                      $cond_i_3 = 0;
                      $194 = 0;
                      $add198_2634 = $add198_1;
                    }
                  } while (0);
                  HEAP32[$val + 12 >> 2] = $cond_i_3;
                  $add198_3 = $cond_i_3 + $add198_2634 | 0;
                  $sub208 = ($189 << 2) - $add198_3 | 0;
                  $call209 = ($sub208 | 0) > -1 ? $sub208 : -$sub208 | 0;
                  HEAP32[$dev >> 2] = $call209;
                  $sub208_1 = ($190 << 2) - $add198_3 | 0;
                  $call209_1 = ($sub208_1 | 0) > -1 ? $sub208_1 : -$sub208_1 | 0;
                  HEAP32[$dev + 4 >> 2] = $call209_1;
                  $i_5_max_0_1 = ($call209 | 0) < ($call209_1 | 0) & 1;
                  $sub208_2 = ($194 << 2) - $add198_3 | 0;
                  $call209_2 = ($sub208_2 | 0) > -1 ? $sub208_2 : -$sub208_2 | 0;
                  HEAP32[$dev + 8 >> 2] = $call209_2;
                  $i_5_max_0_2 = (HEAP32[$dev + ($i_5_max_0_1 << 2) >> 2] | 0) < ($call209_2 | 0) ? 2 : $i_5_max_0_1;
                  $sub208_3 = ($cond_i_3 << 2) - $add198_3 | 0;
                  $call209_3 = ($sub208_3 | 0) > -1 ? $sub208_3 : -$sub208_3 | 0;
                  HEAP32[$dev + 12 >> 2] = $call209_3;
                  $conv224 = ~~(+($add198_3 - (HEAP32[$val + (((HEAP32[$dev + ($i_5_max_0_2 << 2) >> 2] | 0) < ($call209_3 | 0) ? 3 : $i_5_max_0_2) << 2) >> 2] | 0) | 0) / 3.0 + .5);
                  HEAP16[$104 + (Math_imul($conv2_i, $row_1566) + $conv153 << 1) >> 1] = $conv224;
                  $inc265_pre_phi = $add191_2;
                } else {
                  $add237 = $row_1566 - 2 | 0;
                  do {
                    if ($conv_i >>> 0 > $add237 >>> 0) {
                      if ($conv2_i >>> 0 > $sub250 >>> 0) {
                        $cond_i377_ph = HEAPU16[$104 + (Math_imul($conv2_i, $add237) + $sub250 << 1) >> 1] | 0;
                      } else {
                        $cond_i377_ph = 0;
                      }
                      if ($conv2_i >>> 0 <= $add252 >>> 0) {
                        $cond_i377_1 = 0;
                        $cond_i377614 = $cond_i377_ph;
                        break;
                      }
                      $cond_i377_1 = HEAPU16[$104 + (Math_imul($conv2_i, $add237) + $add252 << 1) >> 1] | 0;
                      $cond_i377614 = $cond_i377_ph;
                    } else {
                      $cond_i377_1 = 0;
                      $cond_i377614 = 0;
                    }
                  } while (0);
                  $add243_1 = $cond_i377_1 + $cond_i377614 | 0;
                  $add237_2 = $row_1566 + 2 | 0;
                  do {
                    if ($conv_i >>> 0 > $add237_2 >>> 0) {
                      if ($conv2_i >>> 0 > $sub250 >>> 0) {
                        $add243_2623 = (HEAPU16[$104 + (Math_imul($conv2_i, $add237_2) + $sub250 << 1) >> 1] | 0) + $add243_1 | 0;
                      } else {
                        $add243_2623 = $add243_1;
                      }
                      if ($conv2_i >>> 0 <= $add252 >>> 0) {
                        $cond_i377_3 = 0;
                        $add243_2622 = $add243_2623;
                        break;
                      }
                      $cond_i377_3 = HEAPU16[$104 + (Math_imul($conv2_i, $add237_2) + $add252 << 1) >> 1] | 0;
                      $add243_2622 = $add243_2623;
                    } else {
                      $cond_i377_3 = 0;
                      $add243_2622 = $add243_1;
                    }
                  } while (0);
                  $add249 = +($cond_i377_3 + $add243_2622 | 0) * .0732233 + .5;
                  do {
                    if ($conv_i >>> 0 > $row_1566 >>> 0) {
                      if ($conv2_i >>> 0 > $sub250 >>> 0) {
                        $cond_i404_ph = HEAPU16[$104 + (Math_imul($conv2_i, $row_1566) + $sub250 << 1) >> 1] | 0;
                      } else {
                        $cond_i404_ph = 0;
                      }
                      if ($conv2_i >>> 0 <= $add252 >>> 0) {
                        $cond_i433 = 0;
                        $cond_i404617 = $cond_i404_ph;
                        break;
                      }
                      $cond_i433 = HEAPU16[$104 + (Math_imul($conv2_i, $row_1566) + $add252 << 1) >> 1] | 0;
                      $cond_i404617 = $cond_i404_ph;
                    } else {
                      $cond_i433 = 0;
                      $cond_i404617 = 0;
                    }
                  } while (0);
                  HEAP16[$104 + (Math_imul($conv2_i, $row_1566) + $conv153 << 1) >> 1] = ~~($add249 + +($cond_i433 + $cond_i404617 | 0) * .3535534);
                  $inc265_pre_phi = $row_1566 + 1 | 0;
                }
                $109 = HEAP16[2622502] | 0;
                if ($inc265_pre_phi >>> 0 < ($109 & 65535) >>> 0) {
                  $row_1566 = $inc265_pre_phi;
                  $99 = $109;
                } else {
                  break L1002;
                }
              }
            }
          } while (0);
          $sub148 = $sub148570 - 8 | 0;
          if (($sub148 | 0) > -1) {
            $sub148570 = $sub148;
          } else {
            $off_412_1 = $off_412_0590;
            $mindiff_1 = $mindiff_0589;
            break L986;
          }
        }
      } else if (($retval_0_i_i225 | 0) == 1050) {
        HEAP32[$str_i132_i290 >> 2] = -1;
        _fread($36 | 0, 1, 4, HEAP32[1316053] | 0);
        $51 = HEAP32[$str_i132_i290 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i304 = $51;
        } else {
          $retval_0_i_i151_i304 = _llvm_bswap_i32($51 | 0) | 0;
        }
        $63 = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i304, +HEAPF32[tempDoublePtr >> 2]);
        HEAPF32[$poly >> 2] = $63;
        HEAP32[$str_i132_i290 >> 2] = -1;
        _fread($36 | 0, 1, 4, HEAP32[1316053] | 0);
        $66 = HEAP32[$str_i132_i290 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i304_1 = $66;
        } else {
          $retval_0_i_i151_i304_1 = _llvm_bswap_i32($66 | 0) | 0;
        }
        $198 = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i304_1, +HEAPF32[tempDoublePtr >> 2]);
        HEAPF32[$arrayidx39 >> 2] = $198;
        HEAP32[$str_i132_i290 >> 2] = -1;
        _fread($36 | 0, 1, 4, HEAP32[1316053] | 0);
        $201 = HEAP32[$str_i132_i290 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i304_2 = $201;
        } else {
          $retval_0_i_i151_i304_2 = _llvm_bswap_i32($201 | 0) | 0;
        }
        $202 = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i304_2, +HEAPF32[tempDoublePtr >> 2]);
        HEAPF32[$poly + 8 >> 2] = $202;
        HEAP32[$str_i132_i290 >> 2] = -1;
        _fread($36 | 0, 1, 4, HEAP32[1316053] | 0);
        $205 = HEAP32[$str_i132_i290 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i304_3 = $205;
        } else {
          $retval_0_i_i151_i304_3 = _llvm_bswap_i32($205 | 0) | 0;
        }
        $206 = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i304_3, +HEAPF32[tempDoublePtr >> 2]);
        HEAPF32[$arrayidx26 >> 2] = $206;
        $i_3574 = 0;
        while (1) {
          $conv81 = +($i_3574 | 0);
          $add87 = $conv81 + ($conv81 * ($conv81 * ($conv81 * ($conv81 * 0.0 + $206) + $202) + $198) + $63);
          do {
            if ($add87 < 65535.0) {
              $phitmp152 = $add87 < 0.0;
              if ($phitmp152) {
                $cond111 = ($phitmp152 ^ 1) << 31 >> 31;
                break;
              }
              $cond111 = ~~$add87;
            } else {
              $cond111 = -1;
            }
          } while (0);
          HEAP16[5428620 + ($i_3574 << 1) >> 1] = $cond111;
          $inc115 = $i_3574 + 1 | 0;
          if (($inc115 | 0) == 65536) {
            label = 715;
            break L986;
          } else {
            $i_3574 = $inc115;
          }
        }
      } else if (($retval_0_i_i225 | 0) == 1049) {
        HEAP32[$str_i269 >> 2] = -1;
        _fread($29 | 0, 1, 4, HEAP32[1316053] | 0);
        $i_0575 = 0;
        while (1) {
          HEAP32[$str_i132_i >> 2] = -1;
          _fread($30 | 0, 1, 4, HEAP32[1316053] | 0);
          $55 = HEAP32[$str_i132_i >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i151_i = $55;
          } else {
            $retval_0_i_i151_i = _llvm_bswap_i32($55 | 0) | 0;
          }
          HEAPF32[$poly + ($i_0575 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i, +HEAPF32[tempDoublePtr >> 2]);
          $inc = $i_0575 + 1 | 0;
          if (($inc | 0) == 8) {
            break;
          } else {
            $i_0575 = $inc;
          }
        }
        $add27 = +HEAPF32[$arrayidx26 >> 2] + ((+HEAPF32[1311452] - +HEAPF32[$arrayidx23 >> 2]) * +HEAPF32[$arrayidx24 >> 2] + 1.0);
        HEAPF32[$arrayidx26 >> 2] = $add27;
        $61 = +HEAPF32[$arrayidx32 >> 2];
        $62 = +HEAPF32[$arrayidx39 >> 2];
        $i_1577 = 0;
        while (1) {
          $conv33 = +($i_1577 | 0);
          $add40 = $62 + $conv33 * ($conv33 * $61 + $add27);
          $cond = $add40 < 65535.0 ? $add40 : 65535.0;
          if ($cond < 0.0) {
            $cond54 = 0;
          } else {
            $cond54 = ~~$cond;
          }
          HEAP16[5428620 + ($i_1577 << 1) >> 1] = $cond54;
          $inc58 = $i_1577 + 1 | 0;
          if (($inc58 | 0) == 65536) {
            label = 715;
            break L986;
          } else {
            $i_1577 = $inc58;
          }
        }
      } else if (($retval_0_i_i225 | 0) == 1046 | ($retval_0_i_i225 | 0) == 1040) {
        _phase_one_flat_field(0, 2);
        $off_412_1 = $off_412_0590;
        $mindiff_1 = $mindiff_0589;
        break;
      } else if (($retval_0_i_i225 | 0) == 1035) {
        _phase_one_flat_field(0, 4);
        $off_412_1 = $off_412_0590;
        $mindiff_1 = $mindiff_0589;
        break;
      } else if (($retval_0_i_i225 | 0) == 1042) {
        _fseek(HEAP32[1316053] | 0, 36, 1);
        HEAP16[$str_i463 >> 1] = -1;
        _fread($31 | 0, 1, 2, HEAP32[1316053] | 0);
        $121 = HEAP16[$str_i463 >> 1] | 0;
        $conv2_i_i467 = $121 & 255;
        $123 = ($121 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i475 = ($123 & 65535) << 8 | $conv2_i_i467;
        } else {
          $retval_0_in_i_i475 = $conv2_i_i467 << 8 | $123 & 65535;
        }
        $sub339 = ($retval_0_in_i_i475 & 65535) - (HEAP32[1311451] | 0) | 0;
        $call340 = ($sub339 | 0) > -1 ? $sub339 : -$sub339 | 0;
        if (($mindiff_0589 | 0) <= ($call340 | 0)) {
          $off_412_1 = $off_412_0590;
          $mindiff_1 = $mindiff_0589;
          break;
        }
        $off_412_1 = (_ftell(HEAP32[1316053] | 0) | 0) - 38 | 0;
        $mindiff_1 = $call340;
        break;
      } else if (($retval_0_i_i225 | 0) == 1025) {
        _phase_one_flat_field(1, 2);
        $off_412_1 = $off_412_0590;
        $mindiff_1 = $mindiff_0589;
        break;
      } else {
        $off_412_1 = $off_412_0590;
        $mindiff_1 = $mindiff_0589;
      }
    } while (0);
    L1100 : do {
      if ((label | 0) == 715) {
        label = 0;
        $67 = HEAP16[2622502] | 0;
        if ($67 << 16 >> 16 == 0) {
          $off_412_1 = $off_412_0590;
          $mindiff_1 = $mindiff_0589;
          break;
        }
        $68 = -($retval_0_i_i225 & 1) | 0;
        $row_0585 = 0;
        $70 = HEAP16[2622498] | 0;
        $69 = $67;
        while (1) {
          $mul122 = HEAP32[1311450] & $68;
          $conv124578 = $70 & 65535;
          if ($mul122 >>> 0 < $conv124578 >>> 0) {
            $col_0580 = $mul122;
            $conv124581 = $conv124578;
            while (1) {
              $add130 = Math_imul($conv124581, $row_0585) + $col_0580 | 0;
              $arrayidx131 = (HEAP32[1311250] | 0) + ($add130 << 1) | 0;
              HEAP16[$arrayidx131 >> 1] = HEAP16[5428620 + ((HEAPU16[$arrayidx131 >> 1] | 0) << 1) >> 1] | 0;
              $inc138 = $col_0580 + 1 | 0;
              $75 = HEAP16[2622498] | 0;
              $conv124 = $75 & 65535;
              if ($inc138 >>> 0 < $conv124 >>> 0) {
                $col_0580 = $inc138;
                $conv124581 = $conv124;
              } else {
                break;
              }
            }
            $77 = $75;
            $76 = HEAP16[2622502] | 0;
          } else {
            $77 = $70;
            $76 = $69;
          }
          $inc141 = $row_0585 + 1 | 0;
          if ($inc141 >>> 0 < ($76 & 65535) >>> 0) {
            $row_0585 = $inc141;
            $70 = $77;
            $69 = $76;
          } else {
            $off_412_1 = $off_412_0590;
            $mindiff_1 = $mindiff_0589;
            break L1100;
          }
        }
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, $call16 | 0, 0);
    if (($dec591 | 0) == 0) {
      break;
    } else {
      $mindiff_0589 = $mindiff_1;
      $off_412_0590 = $off_412_1;
      $dec591_in = $dec591;
    }
  }
  if (($off_412_1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  _fseek(HEAP32[1316053] | 0, $off_412_1 | 0, 0);
  $129 = $str_i478;
  $i_8553 = 0;
  while (1) {
    HEAP32[$str_i478 >> 2] = -1;
    _fread($129 | 0, 1, 4, HEAP32[1316053] | 0);
    $132 = HEAP32[$str_i478 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i497 = $132;
    } else {
      $retval_0_i_i497 = _llvm_bswap_i32($132 | 0) | 0;
    }
    HEAP32[$head + ($i_8553 << 2) >> 2] = $retval_0_i_i497 & 32767;
    $inc367 = $i_8553 + 1 | 0;
    if (($inc367 | 0) == 9) {
      break;
    } else {
      $i_8553 = $inc367;
    }
  }
  $133 = HEAP32[$head + 4 >> 2] | 0;
  $134 = HEAP32[$head + 12 >> 2] | 0;
  $mul371 = Math_imul($134, $133);
  $mul374 = Math_imul(HEAP32[$head + 16 >> 2] | 0, HEAP32[$head + 8 >> 2] | 0);
  $add375 = $mul374 + $mul371 | 0;
  do {
    if (($add375 | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i500 = $add375 * 6 & -1;
      if ($add375 >>> 0 <= 65535) {
        $req_0_i = $mul_i500;
        break;
      }
      $req_0_i = (($mul_i500 >>> 0) / ($add375 >>> 0) >>> 0 | 0) == 6 ? $mul_i500 : -1;
    }
  } while (0);
  $call_i503 = _malloc($req_0_i) | 0;
  if (($call_i503 | 0) == 0) {
    $139 = HEAP32[_stderr >> 2] | 0;
    $140 = HEAP32[1316054] | 0;
    _fprintf($139 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $140, HEAP32[tempInt + 4 >> 2] = 5586840, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i503 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i503 | 0, 0, $req_0_i | 0);
  }
  $141 = $call_i503;
  $142 = $141 + ($add375 << 2) | 0;
  HEAP16[$str_i435 >> 1] = -1;
  _fread($str_i435 | 0, 1, 2, HEAP32[1316053] | 0);
  $145 = $str_i132_i406;
  $cmp407549 = ($mul371 | 0) > 0;
  L1131 : do {
    if ($cmp407549) {
      $j_1550 = 0;
      while (1) {
        HEAP32[$str_i132_i406 >> 2] = -1;
        _fread($145 | 0, 1, 4, HEAP32[1316053] | 0);
        $148 = HEAP32[$str_i132_i406 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i420 = $148;
        } else {
          $retval_0_i_i151_i420 = _llvm_bswap_i32($148 | 0) | 0;
        }
        HEAPF32[$141 + ($j_1550 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i420, +HEAPF32[tempDoublePtr >> 2]);
        $inc415 = $j_1550 + 1 | 0;
        if (($inc415 | 0) < ($mul371 | 0)) {
          $j_1550 = $inc415;
        } else {
          break L1131;
        }
      }
    }
  } while (0);
  $cmp407549_1 = ($mul374 | 0) > 0;
  L1138 : do {
    if ($cmp407549_1) {
      $j_1550_1 = 0;
      while (1) {
        HEAP32[$str_i132_i406 >> 2] = -1;
        _fread($145 | 0, 1, 4, HEAP32[1316053] | 0);
        $182 = HEAP32[$str_i132_i406 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i151_i420_1 = $182;
        } else {
          $retval_0_i_i151_i420_1 = _llvm_bswap_i32($182 | 0) | 0;
        }
        HEAPF32[$141 + ($mul371 + $j_1550_1 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i420_1, +HEAPF32[tempDoublePtr >> 2]);
        $inc415_1 = $j_1550_1 + 1 | 0;
        if (($inc415_1 | 0) < ($mul374 | 0)) {
          $j_1550_1 = $inc415_1;
        } else {
          break L1138;
        }
      }
    }
  } while (0);
  $184 = $str_i379;
  L1145 : do {
    if ($cmp407549) {
      $j_2546 = 0;
      while (1) {
        HEAP16[$str_i379 >> 1] = -1;
        _fread($184 | 0, 1, 2, HEAP32[1316053] | 0);
        $152 = HEAP16[$str_i379 >> 1] | 0;
        $conv2_i_i383 = $152 & 255;
        $154 = ($152 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i391 = ($154 & 65535) << 8 | $conv2_i_i383;
        } else {
          $retval_0_in_i_i391 = $conv2_i_i383 << 8 | $154 & 65535;
        }
        HEAP16[$142 + ($j_2546 << 1) >> 1] = $retval_0_in_i_i391 & 65535;
        $inc437 = $j_2546 + 1 | 0;
        if (($inc437 | 0) < ($mul371 | 0)) {
          $j_2546 = $inc437;
        } else {
          break L1145;
        }
      }
    }
  } while (0);
  L1153 : do {
    if ($cmp407549_1) {
      $j_2546_1 = 0;
      while (1) {
        HEAP16[$str_i379 >> 1] = -1;
        _fread($184 | 0, 1, 2, HEAP32[1316053] | 0);
        $175 = HEAP16[$str_i379 >> 1] | 0;
        $conv2_i_i383_1 = $175 & 255;
        $177 = ($175 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i391_1 = ($177 & 65535) << 8 | $conv2_i_i383_1;
        } else {
          $retval_0_in_i_i391_1 = $conv2_i_i383_1 << 8 | $177 & 65535;
        }
        HEAP16[$142 + ($mul371 + $j_2546_1 << 1) >> 1] = $retval_0_in_i_i391_1 & 65535;
        $inc437_1 = $j_2546_1 + 1 | 0;
        if (($inc437_1 | 0) < ($mul374 | 0)) {
          $j_2546_1 = $inc437_1;
        } else {
          break L1153;
        }
      }
    }
  } while (0);
  $179 = HEAP16[2622502] | 0;
  L1161 : do {
    if ($179 << 16 >> 16 != 0) {
      $conv454 = +($134 | 0);
      $arrayidx533 = $mult | 0;
      $arrayidx536 = $mult + 4 | 0;
      $_pre = HEAP16[2622498] | 0;
      $row_2542 = 0;
      $158 = $_pre;
      $157 = $179;
      $156 = $_pre;
      while (1) {
        if ($158 << 16 >> 16 == 0) {
          $172 = 0;
          $171 = $157;
          $170 = $156;
        } else {
          $conv539 = +($row_2542 >>> 0 >>> 0);
          $col_1538 = 0;
          $conv448539 = $158 & 65535;
          $159 = $156;
          while (1) {
            $div458 = +($col_1538 >>> 0 >>> 0) * $conv454 / +($conv448539 | 0);
            $conv459 = ~~$div458;
            $conv460 = +($conv459 | 0);
            $add464 = Math_imul($conv448539, $row_2542) + $col_1538 | 0;
            $160 = HEAP32[1311250] | 0;
            $conv469 = +(HEAPU16[$160 + ($add464 << 1) >> 1] | 0 | 0) * .5;
            $add471 = $conv459 + 2 | 0;
            $i_11535 = $conv459;
            while (1) {
              $mul481 = Math_imul($133, $i_11535);
              $k_0 = 0;
              $j_3 = 0;
              while (1) {
                if (($j_3 | 0) >= ($133 | 0)) {
                  $k_1 = $k_0;
                  break;
                }
                $add482 = $mul481 + $j_3 | 0;
                if ($conv469 < +(HEAPU16[$142 + ($add482 << 1) >> 1] | 0 | 0)) {
                  $k_1 = $add482;
                  break;
                } else {
                  $k_0 = $add482;
                  $j_3 = $j_3 + 1 | 0;
                }
              }
              if (($j_3 | 0) == 0 | ($j_3 | 0) == ($133 | 0)) {
                $cond518 = 0.0;
              } else {
                $conv504 = HEAPU16[$142 + ($k_1 << 1) >> 1] | 0;
                $cond518 = (+($conv504 | 0) - $conv469) / +($conv504 - (HEAPU16[$142 + ($k_1 - 1 << 1) >> 1] | 0) | 0);
              }
              HEAPF32[$mult + ($i_11535 - $conv459 << 2) >> 2] = $cond518 * +HEAPF32[$141 + ($k_1 - 1 << 2) >> 2] + (1.0 - $cond518) * +HEAPF32[$141 + ($k_1 << 2) >> 2];
              $inc531 = $i_11535 + 1 | 0;
              if (($inc531 | 0) < ($add471 | 0)) {
                $i_11535 = $inc531;
              } else {
                break;
              }
            }
            $sub461 = $div458 - $conv460;
            $conv543 = ~~(($conv469 + $conv539 * ((1.0 - $sub461) * +HEAPF32[$arrayidx533 >> 2] + $sub461 * +HEAPF32[$arrayidx536 >> 2])) * 2.0);
            $cond549 = ($conv543 | 0) < 65535 ? $conv543 : 65535;
            HEAP16[$160 + (Math_imul($159 & 65535, $row_2542) + $col_1538 << 1) >> 1] = ($cond549 | 0) < 0 ? 0 : $cond549 & 65535;
            $inc568 = $col_1538 + 1 | 0;
            $169 = HEAP16[2622498] | 0;
            $conv448 = $169 & 65535;
            if ($inc568 >>> 0 < $conv448 >>> 0) {
              $col_1538 = $inc568;
              $conv448539 = $conv448;
              $159 = $169;
            } else {
              break;
            }
          }
          $172 = $169;
          $171 = HEAP16[2622502] | 0;
          $170 = $169;
        }
        $inc571 = $row_2542 + 1 | 0;
        if ($inc571 >>> 0 < ($171 & 65535) >>> 0) {
          $row_2542 = $inc571;
          $158 = $172;
          $157 = $171;
          $156 = $170;
        } else {
          break L1161;
        }
      }
    }
  } while (0);
  _free($call_i503);
  STACKTOP = __stackBase__;
  return;
}
function _phase_one_load_raw() {
  var $str_i14 = 0, $str_i = 0, $5 = 0, $conv2_i_i = 0, $7 = 0, $retval_0_in_i_i = 0, $retval_0_i_i = 0, $12 = 0, $conv2_i_i18 = 0, $14 = 0, $retval_0_in_i_i26 = 0, $retval_0_i_i27 = 0, $cmp = 0, $19 = 0, $mul = 0, $22 = 0, $cmp1_i = 0, $conv18 = 0, $neg = 0, $i_034 = 0, $28 = 0, $arrayidx = 0, $xor = 0, $add1312 = 0, $xor17 = 0, $add33 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $str_i14 = __stackBase__ | 0;
  $str_i = __stackBase__ + 4 | 0;
  _fseek(HEAP32[1316053] | 0, HEAP32[1311447] | 0, 0);
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $5 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $5 & 255;
  $7 = ($5 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($7 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $7 & 65535;
  }
  $retval_0_i_i = $retval_0_in_i_i & 65535;
  HEAP16[$str_i14 >> 1] = -1;
  _fread($str_i14 | 0, 1, 2, HEAP32[1316053] | 0);
  $12 = HEAP16[$str_i14 >> 1] | 0;
  $conv2_i_i18 = $12 & 255;
  $14 = ($12 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i26 = ($14 & 65535) << 8 | $conv2_i_i18;
  } else {
    $retval_0_in_i_i26 = $conv2_i_i18 << 8 | $14 & 65535;
  }
  $retval_0_i_i27 = $retval_0_in_i_i26 & 65535;
  $cmp = (HEAP32[1311446] | 0) == 1;
  _fseek(HEAP32[1316053] | 0, HEAP32[1357153] | 0, 0);
  $19 = HEAP32[1311250] | 0;
  $mul = Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0);
  $22 = $19;
  if ((_fread($22 | 0, 2, $mul | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $mul >>> 0) {
    _derror();
  }
  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
    _swab($22 | 0, $22 | 0, $mul << 1 | 0);
  }
  if ((HEAP32[1311446] | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $conv18 = $cmp ? 21845 : 4948;
  $neg = $conv18 ^ -1;
  $i_034 = 0;
  while (1) {
    $28 = HEAP32[1311250] | 0;
    $arrayidx = $28 + ($i_034 << 1) | 0;
    $xor = (HEAP16[$arrayidx >> 1] ^ $retval_0_i_i) & 65535;
    $add1312 = $i_034 | 1;
    $xor17 = (HEAP16[$28 + ($add1312 << 1) >> 1] ^ $retval_0_i_i27) & 65535;
    HEAP16[$arrayidx >> 1] = ($xor17 & $neg | $xor & $conv18) & 65535;
    HEAP16[(HEAP32[1311250] | 0) + ($add1312 << 1) >> 1] = ($xor17 & $conv18 | $xor & $neg) & 65535;
    $add33 = $i_034 + 2 | 0;
    if (($add33 | 0) < (Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0) | 0)) {
      $i_034 = $add33;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _phase_one_load_raw_c() {
  var $str_i_i108 = 0, $str_i_i87 = 0, $str_i_i66 = 0, $str_i_i = 0, $str_i = 0, $len = 0, $pred = 0, $add = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $add_ptr = 0, $8 = 0, $11 = 0, $12 = 0, $row_0151 = 0, $15 = 0, $retval_0_i_i = 0, $inc = 0, $conv4 = 0, $conv4_lcssa = 0, $17 = 0, $conv11 = 0, $mul12 = 0, $22 = 0, $cmp1_i57 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $arrayidx45 = 0, $arrayidx46 = 0, $i_0148 = 0, $inc23 = 0, $row_1146 = 0, $33 = 0, $conv37139 = 0, $col_0137 = 0, $i_1134 = 0, $j_0 = 0, $34 = 0, $35$0 = 0, $35$1 = 0, $shl_i$0 = 0, $shl_i$1 = 0, $36 = 0, $38 = 0, $retval_0_i_i_i = 0, $or_i65$0 = 0, $or_i65$1 = 0, $add_i = 0, $40$0 = 0, $40$1 = 0, $41 = 0, $sub19_i = 0, $43$0 = 0, $43$1 = 0, $44 = 0, $mul66 = 0, $shl_i69$0 = 0, $shl_i69$1 = 0, $45 = 0, $47 = 0, $retval_0_i_i_i75 = 0, $or_i77$0 = 0, $or_i77$1 = 0, $add_i78 = 0, $49$0 = 0, $49$1 = 0, $50 = 0, $inc73 = 0, $and77 = 0, $52 = 0, $53 = 0, $54$0 = 0, $54$1 = 0, $shl_i90$0 = 0, $shl_i90$1 = 0, $55 = 0, $57 = 0, $retval_0_i_i_i96 = 0, $or_i98$0 = 0, $or_i98$1 = 0, $add_i99 = 0, $59$0 = 0, $59$1 = 0, $60 = 0, $shr_i104$0 = 0, $conv10_i105 = 0, $61 = 0, $62$0 = 0, $62$1 = 0, $shl_i112$0 = 0, $shl_i112$1 = 0, $63 = 0, $65 = 0, $retval_0_i_i_i118 = 0, $or_i120$0 = 0, $or_i120$1 = 0, $add_i121 = 0, $67$0 = 0, $67$1 = 0, $68 = 0, $retval_0_i = 0, $arrayidx92 = 0, $add93 = 0, $70 = 0, $arrayidx104 = 0, $72 = 0, $inc114 = 0, $74 = 0, $conv37 = 0, $add_ptr8_sum = 0, $75 = 0, $conv117143 = 0, $col_1142 = 0, $add130 = 0, $add137 = 0, $81 = 0, $inc141 = 0, $conv117 = 0, $inc144 = 0, $83 = 0, $sub146 = 0, label = 0, __stackBase__ = 0, $42$0 = 0, $42$1 = 0, $shl7_i82$0 = 0, $shl7_i82$1 = 0, $shl7_i103$0 = 0, $shl7_i103$1 = 0, $shl7_i125$0 = 0, $shl7_i125$1 = 0, $shr_i126$0 = 0, $shr_i126$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $str_i_i108 = __stackBase__ | 0;
  $str_i_i87 = __stackBase__ + 4 | 0;
  $str_i_i66 = __stackBase__ + 8 | 0;
  $str_i_i = __stackBase__ + 12 | 0;
  $str_i = __stackBase__ + 16 | 0;
  $len = __stackBase__ + 20 | 0;
  $pred = __stackBase__ + 28 | 0;
  $add = ((HEAPU16[2622502] | 0) << 2) + (HEAPU16[2622498] | 0) | 0;
  do {
    if (($add | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $add << 1;
      if ($add >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($add >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5586716, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $6 = $call_i;
  $add_ptr = $6 + ((HEAPU16[2622498] | 0) << 1) | 0;
  $8 = $add_ptr;
  _fseek(HEAP32[1316053] | 0, HEAP32[1311019] | 0, 0);
  $11 = HEAP16[2622502] | 0;
  L1218 : do {
    if ($11 << 16 >> 16 == 0) {
      $conv4_lcssa = $11 & 65535;
    } else {
      $12 = $str_i;
      $row_0151 = 0;
      while (1) {
        HEAP32[$str_i >> 2] = -1;
        _fread($12 | 0, 1, 4, HEAP32[1316053] | 0);
        $15 = HEAP32[$str_i >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i = $15;
        } else {
          $retval_0_i_i = _llvm_bswap_i32($15 | 0) | 0;
        }
        HEAP32[$8 + ($row_0151 << 2) >> 2] = $retval_0_i_i;
        $inc = $row_0151 + 1 | 0;
        $conv4 = HEAPU16[2622502] | 0;
        if (($inc | 0) < ($conv4 | 0)) {
          $row_0151 = $inc;
        } else {
          $conv4_lcssa = $conv4;
          break L1218;
        }
      }
    }
  } while (0);
  $17 = $add_ptr;
  _fseek(HEAP32[1316053] | 0, HEAP32[1311449] | 0, 0);
  do {
    if ((HEAP32[1311449] | 0) == 0) {
      $i_0148 = 0;
    } else {
      $conv11 = HEAPU16[2622502] | 0;
      $mul12 = $conv11 << 1;
      $22 = $17 + ($conv4_lcssa << 2) | 0;
      if ((_fread($22 | 0, 2, $mul12 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $mul12 >>> 0) {
        _derror();
      }
      $cmp1_i57 = HEAP16[2631518] << 16 >> 16 == 18761;
      if ($cmp1_i57 ^ (_htons(4660) | 0) == 4660) {
        $i_0148 = 0;
        break;
      }
      _swab($22 | 0, $22 | 0, $conv11 << 2 | 0);
      $i_0148 = 0;
      break;
    }
  } while (0);
  while (1) {
    HEAP16[5428620 + ($i_0148 << 1) >> 1] = ~~(+(Math_imul($i_0148, $i_0148) | 0) / 3.969 + .5);
    $inc23 = $i_0148 + 1 | 0;
    if (($inc23 | 0) == 256) {
      break;
    } else {
      $i_0148 = $inc23;
    }
  }
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    _free($call_i);
    $83 = HEAP32[1311448] | 0;
    $sub146 = 65532 - $83 | 0;
    HEAP32[1315898] = $sub146;
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx34 = $pred + 4 | 0;
  $arrayidx35 = $pred | 0;
  $26 = $str_i_i;
  $27 = $str_i_i66;
  $28 = $str_i_i108;
  $29 = $str_i_i87;
  $arrayidx45 = $len + 4 | 0;
  $arrayidx46 = $len | 0;
  $row_1146 = 0;
  while (1) {
    _fseek(HEAP32[1316053] | 0, (HEAP32[$8 + ($row_1146 << 2) >> 2] | 0) + (HEAP32[1357153] | 0) | 0, 0);
    HEAP32[1311443] = 0;
    HEAP32[1311444] = 0;
    HEAP32[1311445] = 0;
    HEAP32[$arrayidx34 >> 2] = 0;
    HEAP32[$arrayidx35 >> 2] = 0;
    $33 = HEAP16[2622498] | 0;
    L1240 : do {
      if ($33 << 16 >> 16 != 0) {
        $col_0137 = 0;
        $conv37139 = $33 & 65535;
        while (1) {
          L1244 : do {
            if (($col_0137 | 0) < ($conv37139 & 65528 | 0)) {
              if (($col_0137 & 7 | 0) == 0) {
                $i_1134 = 0;
              } else {
                break;
              }
              while (1) {
                $j_0 = 0;
                while (1) {
                  $34 = HEAP32[1311443] | 0;
                  if (($j_0 | 0) >= 5) {
                    label = 889;
                    break;
                  }
                  $35$0 = HEAP32[1311444] | 0;
                  $35$1 = HEAP32[1311445] | 0;
                  if (($34 | 0) < 1) {
                    $shl_i$0 = 0;
                    $shl_i$1 = $35$0;
                    HEAP32[$str_i_i >> 2] = -1;
                    $36 = HEAP32[1316053] | 0;
                    _fread($26 | 0, 1, 4, $36 | 0);
                    $38 = HEAP32[$str_i_i >> 2] | 0;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_i_i_i = $38;
                    } else {
                      $retval_0_i_i_i = _llvm_bswap_i32($38 | 0) | 0;
                    }
                    $or_i65$0 = $retval_0_i_i_i | $shl_i$0;
                    $or_i65$1 = 0 | $shl_i$1;
                    HEAP32[1311444] = $or_i65$0;
                    HEAP32[1311445] = $or_i65$1;
                    $add_i = (HEAP32[1311443] | 0) + 32 | 0;
                    HEAP32[1311443] = $add_i;
                    $41 = $add_i;
                    $40$1 = $or_i65$1;
                    $40$0 = $or_i65$0;
                  } else {
                    $41 = $34;
                    $40$1 = $35$1;
                    $40$0 = $35$0;
                  }
                  $sub19_i = $41 - 1 | 0;
                  HEAP32[1311443] = $sub19_i;
                  Runtime_bitshift64(0, -2147483648 | 0, 2, 64 - $41 | 0);
                  $42$0 = HEAP32[tempDoublePtr >> 2] | 0, $42$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                  if (($42$0 & $40$0 | 0) == 0 & ($42$1 & $40$1 | 0) == 0) {
                    $j_0 = $j_0 + 1 | 0;
                  } else {
                    label = 888;
                    break;
                  }
                }
                do {
                  if ((label | 0) == 889) {
                    label = 0;
                    $44 = $34;
                    $43$1 = HEAP32[1311445] | 0;
                    $43$0 = HEAP32[1311444] | 0;
                    label = 890;
                    break;
                  } else if ((label | 0) == 888) {
                    label = 0;
                    if (($j_0 | 0) == 0) {
                      break;
                    } else {
                      $44 = $sub19_i;
                      $43$1 = $40$1;
                      $43$0 = $40$0;
                      label = 890;
                      break;
                    }
                  }
                } while (0);
                if ((label | 0) == 890) {
                  label = 0;
                  $mul66 = ($j_0 << 1) - 2 | 0;
                  if (($44 | 0) < 1) {
                    $shl_i69$0 = 0;
                    $shl_i69$1 = $43$0;
                    HEAP32[$str_i_i66 >> 2] = -1;
                    $45 = HEAP32[1316053] | 0;
                    _fread($27 | 0, 1, 4, $45 | 0);
                    $47 = HEAP32[$str_i_i66 >> 2] | 0;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_i_i_i75 = $47;
                    } else {
                      $retval_0_i_i_i75 = _llvm_bswap_i32($47 | 0) | 0;
                    }
                    $or_i77$0 = $retval_0_i_i_i75 | $shl_i69$0;
                    $or_i77$1 = 0 | $shl_i69$1;
                    HEAP32[1311444] = $or_i77$0;
                    HEAP32[1311445] = $or_i77$1;
                    $add_i78 = (HEAP32[1311443] | 0) + 32 | 0;
                    HEAP32[1311443] = $add_i78;
                    $50 = $add_i78;
                    $49$1 = $or_i77$1;
                    $49$0 = $or_i77$0;
                  } else {
                    $50 = $44;
                    $49$1 = $43$1;
                    $49$0 = $43$0;
                  }
                  Runtime_bitshift64($49$0 | 0, $49$1 | 0, 0, 64 - $50 | 0);
                  $shl7_i82$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i82$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                  HEAP32[1311443] = $50 - 1 | 0;
                  HEAP32[$len + ($i_1134 << 2) >> 2] = HEAP32[5245708 + (($shl7_i82$1 >>> 31 | 0 << 1 | $mul66) << 2) >> 2] | 0;
                }
                $inc73 = $i_1134 + 1 | 0;
                if (($inc73 | 0) == 2) {
                  break L1244;
                } else {
                  $i_1134 = $inc73;
                }
              }
            } else {
              HEAP32[$arrayidx45 >> 2] = 14;
              HEAP32[$arrayidx46 >> 2] = 14;
            }
          } while (0);
          $and77 = $col_0137 & 1;
          $52 = HEAP32[$len + ($and77 << 2) >> 2] | 0;
          do {
            if (($52 | 0) == (-1 | 0)) {
              HEAP32[1311443] = 0;
              HEAP32[1311444] = 0;
              HEAP32[1311445] = 0;
              $retval_0_i = 1;
              label = 908;
              break;
            } else if (($52 | 0) == 0) {
              $retval_0_i = 1;
              label = 908;
            } else if (($52 | 0) == 14) {
              $53 = HEAP32[1311443] | 0;
              $54$0 = HEAP32[1311444] | 0;
              $54$1 = HEAP32[1311445] | 0;
              if (($53 | 0) < 16) {
                $shl_i90$0 = 0;
                $shl_i90$1 = $54$0;
                HEAP32[$str_i_i87 >> 2] = -1;
                $55 = HEAP32[1316053] | 0;
                _fread($29 | 0, 1, 4, $55 | 0);
                $57 = HEAP32[$str_i_i87 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i_i96 = $57;
                } else {
                  $retval_0_i_i_i96 = _llvm_bswap_i32($57 | 0) | 0;
                }
                $or_i98$0 = $retval_0_i_i_i96 | $shl_i90$0;
                $or_i98$1 = 0 | $shl_i90$1;
                HEAP32[1311444] = $or_i98$0;
                HEAP32[1311445] = $or_i98$1;
                $add_i99 = (HEAP32[1311443] | 0) + 32 | 0;
                HEAP32[1311443] = $add_i99;
                $60 = $add_i99;
                $59$1 = $or_i98$1;
                $59$0 = $or_i98$0;
              } else {
                $60 = $53;
                $59$1 = $54$1;
                $59$0 = $54$0;
              }
              Runtime_bitshift64($59$0 | 0, $59$1 | 0, 0, 64 - $60 | 0);
              $shl7_i103$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i103$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $shr_i104$0 = $shl7_i103$1 >>> 16 | 0 << 16;
              $conv10_i105 = $shr_i104$0;
              HEAP32[1311443] = $60 - 16 | 0;
              HEAP32[$pred + ($and77 << 2) >> 2] = $conv10_i105;
              HEAP16[$6 + ($col_0137 << 1) >> 1] = $shr_i104$0 & 65535;
              $70 = $conv10_i105;
              break;
            } else {
              $61 = HEAP32[1311443] | 0;
              $62$0 = HEAP32[1311444] | 0;
              $62$1 = HEAP32[1311445] | 0;
              if (($61 | 0) < ($52 | 0)) {
                $shl_i112$0 = 0;
                $shl_i112$1 = $62$0;
                HEAP32[$str_i_i108 >> 2] = -1;
                $63 = HEAP32[1316053] | 0;
                _fread($28 | 0, 1, 4, $63 | 0);
                $65 = HEAP32[$str_i_i108 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i_i118 = $65;
                } else {
                  $retval_0_i_i_i118 = _llvm_bswap_i32($65 | 0) | 0;
                }
                $or_i120$0 = $retval_0_i_i_i118 | $shl_i112$0;
                $or_i120$1 = 0 | $shl_i112$1;
                HEAP32[1311444] = $or_i120$0;
                HEAP32[1311445] = $or_i120$1;
                $add_i121 = (HEAP32[1311443] | 0) + 32 | 0;
                HEAP32[1311443] = $add_i121;
                $68 = $add_i121;
                $67$1 = $or_i120$1;
                $67$0 = $or_i120$0;
              } else {
                $68 = $61;
                $67$1 = $62$1;
                $67$0 = $62$0;
              }
              Runtime_bitshift64($67$0 | 0, $67$1 | 0, 0, 64 - $68 | 0);
              $shl7_i125$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i125$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              Runtime_bitshift64($shl7_i125$0 | 0, $shl7_i125$1 | 0, 2, 64 - $52 | 0);
              $shr_i126$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_i126$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              HEAP32[1311443] = $68 - $52 | 0;
              $retval_0_i = $shr_i126$0 + 1 | 0;
              label = 908;
              break;
            }
          } while (0);
          if ((label | 0) == 908) {
            label = 0;
            $arrayidx92 = $pred + ($and77 << 2) | 0;
            $add93 = (HEAP32[$arrayidx92 >> 2] | 0) + ($retval_0_i - (1 << $52 - 1) | 0) | 0;
            HEAP32[$arrayidx92 >> 2] = $add93;
            HEAP16[$6 + ($col_0137 << 1) >> 1] = $add93 & 65535;
            $70 = $add93;
          }
          if ($70 >>> 0 > 65535) {
            _derror();
          }
          do {
            if ((HEAP32[1311446] | 0) == 5) {
              $arrayidx104 = $6 + ($col_0137 << 1) | 0;
              $72 = HEAP16[$arrayidx104 >> 1] | 0;
              if (($72 & 65535) >= 256) {
                break;
              }
              HEAP16[$arrayidx104 >> 1] = HEAP16[5428620 + (($72 & 65535) << 1) >> 1] | 0;
            }
          } while (0);
          $inc114 = $col_0137 + 1 | 0;
          $74 = HEAP16[2622498] | 0;
          $conv37 = $74 & 65535;
          if (($inc114 | 0) < ($conv37 | 0)) {
            $col_0137 = $inc114;
            $conv37139 = $conv37;
          } else {
            break;
          }
        }
        if ($74 << 16 >> 16 == 0) {
          break;
        }
        $add_ptr8_sum = $row_1146 + $conv4_lcssa | 0;
        $col_1142 = 0;
        $conv117143 = $74 & 65535;
        $75 = $74;
        while (1) {
          $add130 = (HEAP16[$17 + ($add_ptr8_sum << 2) + ((($col_1142 | 0) >= (HEAP32[1311450] | 0) & 1) << 1) >> 1] << 16 >> 16) + (((HEAPU16[$6 + ($col_1142 << 1) >> 1] | 0) << 2) - (HEAP32[1311448] | 0) | 0) | 0;
          if (($add130 | 0) > 0) {
            $add137 = Math_imul($conv117143, $row_1146) + $col_1142 | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add137 << 1) >> 1] = $add130 & 65535;
            $81 = HEAP16[2622498] | 0;
          } else {
            $81 = $75;
          }
          $inc141 = $col_1142 + 1 | 0;
          $conv117 = $81 & 65535;
          if (($inc141 | 0) < ($conv117 | 0)) {
            $col_1142 = $inc141;
            $conv117143 = $conv117;
            $75 = $81;
          } else {
            break L1240;
          }
        }
      }
    } while (0);
    $inc144 = $row_1146 + 1 | 0;
    if (($inc144 | 0) < (HEAPU16[2622502] | 0 | 0)) {
      $row_1146 = $inc144;
    } else {
      break;
    }
  }
  _free($call_i);
  $83 = HEAP32[1311448] | 0;
  $sub146 = 65532 - $83 | 0;
  HEAP32[1315898] = $sub146;
  STACKTOP = __stackBase__;
  return;
}
function _hasselblad_load_raw() {
  var $str_i_i20 = 0, $str_i_i = 0, $jh = 0, $0 = 0, $arrayidx13 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $row_054 = 0, $add = 0, $6 = 0, $7 = 0, $col_051 = 0, $8 = 0, $9 = 0, $conv14 = 0, $add_ptr = 0, $10 = 0, $11$0 = 0, $11$1 = 0, $shl_i$0 = 0, $shl_i$1 = 0, $12 = 0, $14 = 0, $retval_0_i_i_i = 0, $or_i$0 = 0, $or_i$1 = 0, $add_i = 0, $16$0 = 0, $16$1 = 0, $17 = 0, $conv10_i = 0, $arrayidx_i19 = 0, $20 = 0, $21 = 0, $22 = 0, $conv14_1 = 0, $add_ptr_1 = 0, $23 = 0, $24$0 = 0, $24$1 = 0, $shl_i24$0 = 0, $shl_i24$1 = 0, $25 = 0, $27 = 0, $retval_0_i_i_i30 = 0, $or_i32$0 = 0, $or_i32$1 = 0, $add_i33 = 0, $29$0 = 0, $29$1 = 0, $30 = 0, $retval_0_i45 = 0, $diff_0 = 0, $add39 = 0, $add43 = 0, $33 = 0, $34 = 0, $inc52 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $45 = 0, $46$0 = 0, $46$1 = 0, $shl_i_1$0 = 0, $shl_i_1$1 = 0, $47 = 0, $49 = 0, $retval_0_i_i_i_1 = 0, $or_i_1$0 = 0, $or_i_1$1 = 0, $add_i_1 = 0, $51$0 = 0, $51$1 = 0, $52 = 0, $conv10_i_1 = 0, $arrayidx_i19_1 = 0, $55 = 0, $56 = 0, $57$0 = 0, $57$1 = 0, $shl_i24_1$0 = 0, $shl_i24_1$1 = 0, $58 = 0, $60 = 0, $retval_0_i_i_i30_1 = 0, $or_i32_1$0 = 0, $or_i32_1$1 = 0, $add_i33_1 = 0, $62$0 = 0, $62$1 = 0, $63 = 0, $retval_0_i45_1 = 0, $diff_0_1 = 0, $add39_1 = 0, $add43_1 = 0, $add49 = 0, $66 = 0, __stackBase__ = 0, $shl7_i$0 = 0, $shl7_i$1 = 0, $shr_i$0 = 0, $shr_i$1 = 0, $shl7_i_1$0 = 0, $shl7_i_1$1 = 0, $shr_i_1$0 = 0, $shr_i_1$1 = 0, $shl7_i37$0 = 0, $shl7_i37$1 = 0, $shr_i40$0 = 0, $shr_i40$1 = 0, $shl7_i37_1$0 = 0, $shl7_i37_1$1 = 0, $shr_i40_1$0 = 0, $shr_i40_1$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  $str_i_i20 = __stackBase__ | 0;
  $str_i_i = __stackBase__ + 4 | 0;
  $jh = __stackBase__ + 8 | 0;
  if ((_ljpeg_start($jh, 0) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP16[2631518] = 18761;
  HEAP32[1311443] = 0;
  HEAP32[1311444] = 0;
  HEAP32[1311445] = 0;
  $0 = HEAP16[2622502] | 0;
  L1310 : do {
    if ($0 << 16 >> 16 != 0) {
      $arrayidx13 = $jh + 52 | 0;
      $1 = $str_i_i;
      $2 = $str_i_i20;
      $row_054 = 0;
      $4 = HEAP16[2622498] | 0;
      $3 = $0;
      while (1) {
        $add = (HEAP32[1315948] | 0) + 32768 | 0;
        if ($4 << 16 >> 16 == 0) {
          $34 = 0;
          $33 = $3;
        } else {
          $col_051 = 0;
          $7 = $add;
          $6 = $add;
          while (1) {
            $8 = HEAP32[$arrayidx13 >> 2] | 0;
            $9 = HEAP16[$8 >> 1] | 0;
            $conv14 = $9 & 65535;
            $add_ptr = $8 + 2 | 0;
            do {
              if ($9 << 16 >> 16 == 0) {
                $20 = 0;
              } else {
                $10 = HEAP32[1311443] | 0;
                $11$0 = HEAP32[1311444] | 0;
                $11$1 = HEAP32[1311445] | 0;
                if (($10 | 0) < ($conv14 | 0)) {
                  $shl_i$0 = 0;
                  $shl_i$1 = $11$0;
                  HEAP32[$str_i_i >> 2] = -1;
                  $12 = HEAP32[1316053] | 0;
                  _fread($1 | 0, 1, 4, $12 | 0);
                  $14 = HEAP32[$str_i_i >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i_i = $14;
                  } else {
                    $retval_0_i_i_i = _llvm_bswap_i32($14 | 0) | 0;
                  }
                  $or_i$0 = $retval_0_i_i_i | $shl_i$0;
                  $or_i$1 = 0 | $shl_i$1;
                  HEAP32[1311444] = $or_i$0;
                  HEAP32[1311445] = $or_i$1;
                  $add_i = (HEAP32[1311443] | 0) + 32 | 0;
                  HEAP32[1311443] = $add_i;
                  $17 = $add_i;
                  $16$1 = $or_i$1;
                  $16$0 = $or_i$0;
                } else {
                  $17 = $10;
                  $16$1 = $11$1;
                  $16$0 = $11$0;
                }
                Runtime_bitshift64($16$0 | 0, $16$1 | 0, 0, 64 - $17 | 0);
                $shl7_i$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                Runtime_bitshift64($shl7_i$0 | 0, $shl7_i$1 | 0, 2, 64 - $conv14 | 0);
                $shr_i$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_i$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                $conv10_i = $shr_i$0;
                if (($add_ptr | 0) == 0) {
                  HEAP32[1311443] = $17 - $conv14 | 0;
                  $20 = $conv10_i;
                  break;
                } else {
                  $arrayidx_i19 = $8 + ($conv10_i + 1 << 1) | 0;
                  HEAP32[1311443] = $17 - ((HEAPU16[$arrayidx_i19 >> 1] | 0) >>> 8) | 0;
                  $20 = HEAP16[$arrayidx_i19 >> 1] & 255;
                  break;
                }
              }
            } while (0);
            $21 = HEAP32[$arrayidx13 >> 2] | 0;
            $22 = HEAP16[$21 >> 1] | 0;
            $conv14_1 = $22 & 65535;
            $add_ptr_1 = $21 + 2 | 0;
            do {
              if ($22 << 16 >> 16 == 0) {
                $55 = 0;
              } else {
                $45 = HEAP32[1311443] | 0;
                $46$0 = HEAP32[1311444] | 0;
                $46$1 = HEAP32[1311445] | 0;
                if (($45 | 0) < ($conv14_1 | 0)) {
                  $shl_i_1$0 = 0;
                  $shl_i_1$1 = $46$0;
                  HEAP32[$str_i_i >> 2] = -1;
                  $47 = HEAP32[1316053] | 0;
                  _fread($1 | 0, 1, 4, $47 | 0);
                  $49 = HEAP32[$str_i_i >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i_i_1 = $49;
                  } else {
                    $retval_0_i_i_i_1 = _llvm_bswap_i32($49 | 0) | 0;
                  }
                  $or_i_1$0 = $retval_0_i_i_i_1 | $shl_i_1$0;
                  $or_i_1$1 = 0 | $shl_i_1$1;
                  HEAP32[1311444] = $or_i_1$0;
                  HEAP32[1311445] = $or_i_1$1;
                  $add_i_1 = (HEAP32[1311443] | 0) + 32 | 0;
                  HEAP32[1311443] = $add_i_1;
                  $52 = $add_i_1;
                  $51$1 = $or_i_1$1;
                  $51$0 = $or_i_1$0;
                } else {
                  $52 = $45;
                  $51$1 = $46$1;
                  $51$0 = $46$0;
                }
                Runtime_bitshift64($51$0 | 0, $51$1 | 0, 0, 64 - $52 | 0);
                $shl7_i_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                Runtime_bitshift64($shl7_i_1$0 | 0, $shl7_i_1$1 | 0, 2, 64 - $conv14_1 | 0);
                $shr_i_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_i_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                $conv10_i_1 = $shr_i_1$0;
                if (($add_ptr_1 | 0) == 0) {
                  HEAP32[1311443] = $52 - $conv14_1 | 0;
                  $55 = $conv10_i_1;
                  break;
                } else {
                  $arrayidx_i19_1 = $21 + ($conv10_i_1 + 1 << 1) | 0;
                  HEAP32[1311443] = $52 - ((HEAPU16[$arrayidx_i19_1 >> 1] | 0) >>> 8) | 0;
                  $55 = HEAP16[$arrayidx_i19_1 >> 1] & 255;
                  break;
                }
              }
            } while (0);
            if (($20 | 0) == (-1 | 0)) {
              HEAP32[1311443] = 0;
              HEAP32[1311444] = 0;
              HEAP32[1311445] = 0;
              $retval_0_i45 = 0;
            } else if (($20 | 0) == 0) {
              $retval_0_i45 = 0;
            } else {
              $23 = HEAP32[1311443] | 0;
              $24$0 = HEAP32[1311444] | 0;
              $24$1 = HEAP32[1311445] | 0;
              if (($23 | 0) < ($20 | 0)) {
                $shl_i24$0 = 0;
                $shl_i24$1 = $24$0;
                HEAP32[$str_i_i20 >> 2] = -1;
                $25 = HEAP32[1316053] | 0;
                _fread($2 | 0, 1, 4, $25 | 0);
                $27 = HEAP32[$str_i_i20 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i_i30 = $27;
                } else {
                  $retval_0_i_i_i30 = _llvm_bswap_i32($27 | 0) | 0;
                }
                $or_i32$0 = $retval_0_i_i_i30 | $shl_i24$0;
                $or_i32$1 = 0 | $shl_i24$1;
                HEAP32[1311444] = $or_i32$0;
                HEAP32[1311445] = $or_i32$1;
                $add_i33 = (HEAP32[1311443] | 0) + 32 | 0;
                HEAP32[1311443] = $add_i33;
                $30 = $add_i33;
                $29$1 = $or_i32$1;
                $29$0 = $or_i32$0;
              } else {
                $30 = $23;
                $29$1 = $24$1;
                $29$0 = $24$0;
              }
              Runtime_bitshift64($29$0 | 0, $29$1 | 0, 0, 64 - $30 | 0);
              $shl7_i37$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i37$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              Runtime_bitshift64($shl7_i37$0 | 0, $shl7_i37$1 | 0, 2, 64 - $20 | 0);
              $shr_i40$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_i40$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              HEAP32[1311443] = $30 - $20 | 0;
              $retval_0_i45 = $shr_i40$0;
            }
            if ((1 << $20 - 1 & $retval_0_i45 | 0) == 0) {
              $diff_0 = ($retval_0_i45 + 1 | 0) + (-1 << $20) | 0;
            } else {
              $diff_0 = $retval_0_i45;
            }
            $add39 = (($diff_0 | 0) == 65535 ? -32768 : $diff_0) + $7 | 0;
            $add43 = $col_051 + Math_imul(HEAPU16[2622498] | 0, $row_054) | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add43 << 1) >> 1] = $add39 & 65535;
            if (($55 | 0) == (-1 | 0)) {
              HEAP32[1311443] = 0;
              HEAP32[1311444] = 0;
              HEAP32[1311445] = 0;
              $retval_0_i45_1 = 0;
            } else if (($55 | 0) == 0) {
              $retval_0_i45_1 = 0;
            } else {
              $56 = HEAP32[1311443] | 0;
              $57$0 = HEAP32[1311444] | 0;
              $57$1 = HEAP32[1311445] | 0;
              if (($56 | 0) < ($55 | 0)) {
                $shl_i24_1$0 = 0;
                $shl_i24_1$1 = $57$0;
                HEAP32[$str_i_i20 >> 2] = -1;
                $58 = HEAP32[1316053] | 0;
                _fread($2 | 0, 1, 4, $58 | 0);
                $60 = HEAP32[$str_i_i20 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i_i30_1 = $60;
                } else {
                  $retval_0_i_i_i30_1 = _llvm_bswap_i32($60 | 0) | 0;
                }
                $or_i32_1$0 = $retval_0_i_i_i30_1 | $shl_i24_1$0;
                $or_i32_1$1 = 0 | $shl_i24_1$1;
                HEAP32[1311444] = $or_i32_1$0;
                HEAP32[1311445] = $or_i32_1$1;
                $add_i33_1 = (HEAP32[1311443] | 0) + 32 | 0;
                HEAP32[1311443] = $add_i33_1;
                $63 = $add_i33_1;
                $62$1 = $or_i32_1$1;
                $62$0 = $or_i32_1$0;
              } else {
                $63 = $56;
                $62$1 = $57$1;
                $62$0 = $57$0;
              }
              Runtime_bitshift64($62$0 | 0, $62$1 | 0, 0, 64 - $63 | 0);
              $shl7_i37_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl7_i37_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              Runtime_bitshift64($shl7_i37_1$0 | 0, $shl7_i37_1$1 | 0, 2, 64 - $55 | 0);
              $shr_i40_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_i40_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              HEAP32[1311443] = $63 - $55 | 0;
              $retval_0_i45_1 = $shr_i40_1$0;
            }
            if ((1 << $55 - 1 & $retval_0_i45_1 | 0) == 0) {
              $diff_0_1 = ($retval_0_i45_1 + 1 | 0) + (-1 << $55) | 0;
            } else {
              $diff_0_1 = $retval_0_i45_1;
            }
            $add39_1 = (($diff_0_1 | 0) == 65535 ? -32768 : $diff_0_1) + $6 | 0;
            $add43_1 = ($col_051 | 1) + Math_imul(HEAPU16[2622498] | 0, $row_054) | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add43_1 << 1) >> 1] = $add39_1 & 65535;
            $add49 = $col_051 + 2 | 0;
            $66 = HEAP16[2622498] | 0;
            if (($add49 | 0) < ($66 & 65535 | 0)) {
              $col_051 = $add49;
              $7 = $add39;
              $6 = $add39_1;
            } else {
              break;
            }
          }
          $34 = $66;
          $33 = HEAP16[2622502] | 0;
        }
        $inc52 = $row_054 + 1 | 0;
        if (($inc52 | 0) < ($33 & 65535 | 0)) {
          $row_054 = $inc52;
          $4 = $34;
          $3 = $33;
        } else {
          break L1310;
        }
      }
    }
  } while (0);
  $35 = HEAP32[$jh + 76 >> 2] | 0;
  if (($35 | 0) != 0) {
    _free($35);
  }
  $37 = HEAP32[$jh + 80 >> 2] | 0;
  if (($37 | 0) != 0) {
    _free($37);
  }
  $39 = HEAP32[$jh + 84 >> 2] | 0;
  if (($39 | 0) != 0) {
    _free($39);
  }
  $41 = HEAP32[$jh + 88 >> 2] | 0;
  if (($41 | 0) != 0) {
    _free($41);
  }
  _free(HEAP32[$jh + 92 >> 2] | 0);
  HEAP32[1315898] = 65535;
  STACKTOP = __stackBase__;
  return;
}
function _unpacked_load_raw() {
  var $0 = 0, $bits_0 = 0, $inc = 0, $1 = 0, $mul = 0, $4 = 0, $cmp1_i = 0, $7 = 0, $8 = 0, $9 = 0, $row_014 = 0, $conv611 = 0, $col_010 = 0, $10 = 0, $add = 0, $arrayidx = 0, $shr = 0, $inc26 = 0, $17 = 0, $conv6 = 0, $18 = 0, $19 = 0, $inc28 = 0;
  $0 = HEAP32[1315898] | 0;
  $bits_0 = 0;
  while (1) {
    $inc = $bits_0 + 1 | 0;
    if (1 << $inc >>> 0 < $0 >>> 0) {
      $bits_0 = $inc;
    } else {
      break;
    }
  }
  $1 = HEAP32[1311250] | 0;
  $mul = Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0);
  $4 = $1;
  if ((_fread($4 | 0, 2, $mul | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $mul >>> 0) {
    _derror();
  }
  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
    _swab($4 | 0, $4 | 0, $mul << 1 | 0);
  }
  $7 = HEAP16[2622502] | 0;
  if ($7 << 16 >> 16 == 0) {
    return;
  }
  $row_014 = 0;
  $9 = HEAP16[2622498] | 0;
  $8 = $7;
  while (1) {
    if ($9 << 16 >> 16 == 0) {
      $19 = 0;
      $18 = $8;
    } else {
      $col_010 = 0;
      $conv611 = $9 & 65535;
      while (1) {
        $10 = HEAP32[1315948] | 0;
        $add = Math_imul($conv611, $row_014) + $col_010 | 0;
        $arrayidx = (HEAP32[1311250] | 0) + ($add << 1) | 0;
        $shr = (HEAPU16[$arrayidx >> 1] | 0) >>> ($10 >>> 0);
        HEAP16[$arrayidx >> 1] = $shr & 65535;
        do {
          if ((($shr & 65535) >>> ($inc >>> 0) | 0) != 0) {
            if (($row_014 - (HEAPU16[2621786] | 0) | 0) >>> 0 >= (HEAPU16[2699404] | 0) >>> 0) {
              break;
            }
            if (($col_010 - (HEAPU16[2631898] | 0) | 0) >>> 0 >= (HEAPU16[2621484] | 0) >>> 0) {
              break;
            }
            _derror();
          }
        } while (0);
        $inc26 = $col_010 + 1 | 0;
        $17 = HEAP16[2622498] | 0;
        $conv6 = $17 & 65535;
        if (($inc26 | 0) < ($conv6 | 0)) {
          $col_010 = $inc26;
          $conv611 = $conv6;
        } else {
          break;
        }
      }
      $19 = $17;
      $18 = HEAP16[2622502] | 0;
    }
    $inc28 = $row_014 + 1 | 0;
    if (($inc28 | 0) < ($18 & 65535 | 0)) {
      $row_014 = $inc28;
      $9 = $19;
      $8 = $18;
    } else {
      break;
    }
  }
  return;
}
function _leaf_hdr_load_raw() {
  var $str_i = 0, $1 = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $pixel_1_ph = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $pixel_141 = 0, $c_039 = 0, $tile_038 = 0, $pixel_235 = 0, $r_033 = 0, $tile_132 = 0, $12 = 0, $inc = 0, $add = 0, $14 = 0, $16 = 0, $retval_0_i_i = 0, $tile_2 = 0, $tobool14 = 0, $19 = 0, $pixel_3 = 0, $conv24 = 0, $22 = 0, $cmp1_i21 = 0, $sub = 0, $28 = 0, $conv3329 = 0, $col_028 = 0, $30 = 0, $add41 = 0, $inc44 = 0, $conv33 = 0, $pixel_4 = 0, $inc47 = 0, $33 = 0, $34 = 0, $35 = 0, $pixel_2_lcssa = 0, $tile_1_lcssa = 0, $inc50 = 0, $pixel_1_lcssa = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $str_i = __stackBase__ | 0;
  if ((HEAP32[1356938] | 0) == 0) {
    $1 = HEAP16[2622498] | 0;
    if ($1 << 16 >> 16 == 0) {
      $req_0_i = 0;
    } else {
      $req_0_i = ($1 & 65535) << 1;
    }
    $call_i = _malloc($req_0_i) | 0;
    if (($call_i | 0) == 0) {
      $4 = HEAP32[_stderr >> 2] | 0;
      $5 = HEAP32[1316054] | 0;
      _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5586508, tempInt) | 0);
      _longjmp(5428048, 1);
    }
    if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
      _memset($call_i | 0, 0, $req_0_i | 0);
    }
    $pixel_1_ph = $call_i;
  } else {
    $pixel_1_ph = 0;
  }
  $7 = HEAP32[1310897] | 0;
  L1423 : do {
    if (($7 | 0) == 0) {
      $pixel_1_lcssa = $pixel_1_ph;
    } else {
      $8 = $str_i;
      $tile_038 = 0;
      $c_039 = 0;
      $pixel_141 = $pixel_1_ph;
      $10 = HEAP16[2622502] | 0;
      $9 = $7;
      while (1) {
        if ($10 << 16 >> 16 == 0) {
          $tile_1_lcssa = $tile_038;
          $pixel_2_lcssa = $pixel_141;
          $35 = 0;
          $34 = $9;
        } else {
          $tile_132 = $tile_038;
          $r_033 = 0;
          $pixel_235 = $pixel_141;
          while (1) {
            if ((($r_033 >>> 0) % ((HEAP32[1310896] | 0) >>> 0) | 0) == 0) {
              $12 = HEAP32[1316053] | 0;
              $inc = $tile_132 + 1 | 0;
              $add = (HEAP32[1357153] | 0) + ($tile_132 << 2) | 0;
              _fseek($12 | 0, $add | 0, 0);
              $14 = HEAP32[1316053] | 0;
              HEAP32[$str_i >> 2] = -1;
              _fread($8 | 0, 1, 4, $14 | 0);
              $16 = HEAP32[$str_i >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i = $16;
              } else {
                $retval_0_i_i = _llvm_bswap_i32($16 | 0) | 0;
              }
              _fseek($14 | 0, $retval_0_i_i | 0, 0);
              $tile_2 = $inc;
            } else {
              $tile_2 = $tile_132;
            }
            $tobool14 = (HEAP32[1356938] | 0) == 0;
            L1436 : do {
              if ($tobool14 | ($c_039 | 0) == (HEAP32[1311231] | 0)) {
                if ($tobool14) {
                  $pixel_3 = $pixel_235;
                } else {
                  $19 = HEAP32[1311250] | 0;
                  $pixel_3 = $19 + (Math_imul(HEAPU16[2622498] | 0, $r_033) << 1) | 0;
                }
                $conv24 = HEAPU16[2622498] | 0;
                $22 = $pixel_3;
                if ((_fread($22 | 0, 2, $conv24 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $conv24 >>> 0) {
                  _derror();
                }
                $cmp1_i21 = HEAP16[2631518] << 16 >> 16 == 18761;
                if (!($cmp1_i21 ^ (_htons(4660) | 0) == 4660)) {
                  _swab($22 | 0, $22 | 0, $conv24 << 1 | 0);
                }
                if ((HEAP32[1356938] | 0) != 0) {
                  $pixel_4 = $pixel_3;
                  break;
                }
                $sub = $r_033 - (HEAPU16[2621786] | 0) | 0;
                if ($sub >>> 0 >= (HEAPU16[2699404] | 0) >>> 0) {
                  $pixel_4 = $pixel_3;
                  break;
                }
                $28 = HEAP16[2621484] | 0;
                if ($28 << 16 >> 16 == 0) {
                  $pixel_4 = $pixel_3;
                  break;
                }
                $col_028 = 0;
                $conv3329 = $28 & 65535;
                while (1) {
                  $30 = HEAP16[$pixel_3 + ((HEAPU16[2631898] | 0) + $col_028 << 1) >> 1] | 0;
                  $add41 = Math_imul($conv3329, $sub) + $col_028 | 0;
                  HEAP16[(HEAP32[1316051] | 0) + ($add41 << 3) + ($c_039 << 1) >> 1] = $30;
                  $inc44 = $col_028 + 1 | 0;
                  $conv33 = HEAPU16[2621484] | 0;
                  if ($inc44 >>> 0 < $conv33 >>> 0) {
                    $col_028 = $inc44;
                    $conv3329 = $conv33;
                  } else {
                    $pixel_4 = $pixel_3;
                    break L1436;
                  }
                }
              } else {
                $pixel_4 = $pixel_235;
              }
            } while (0);
            $inc47 = $r_033 + 1 | 0;
            $33 = HEAP16[2622502] | 0;
            if ($inc47 >>> 0 < ($33 & 65535) >>> 0) {
              $tile_132 = $tile_2;
              $r_033 = $inc47;
              $pixel_235 = $pixel_4;
            } else {
              break;
            }
          }
          $tile_1_lcssa = $tile_2;
          $pixel_2_lcssa = $pixel_4;
          $35 = $33;
          $34 = HEAP32[1310897] | 0;
        }
        $inc50 = $c_039 + 1 | 0;
        if ($inc50 >>> 0 < $34 >>> 0) {
          $tile_038 = $tile_1_lcssa;
          $c_039 = $inc50;
          $pixel_141 = $pixel_2_lcssa;
          $10 = $35;
          $9 = $34;
        } else {
          $pixel_1_lcssa = $pixel_2_lcssa;
          break L1423;
        }
      }
    }
  } while (0);
  if ((HEAP32[1356938] | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1315898] = 65535;
  HEAP32[1311252] = 1;
  _free($pixel_1_lcssa);
  STACKTOP = __stackBase__;
  return;
}
function _imacon_full_load_raw() {
  var $0 = 0, $1 = 0, $2 = 0, $row_010 = 0, $conv37 = 0, $col_06 = 0, $add = 0, $4 = 0, $cmp1_i = 0, $inc = 0, $7 = 0, $conv3 = 0, $8 = 0, $9 = 0, $inc9 = 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    return;
  }
  $row_010 = 0;
  $2 = HEAP16[2621484] | 0;
  $1 = $0;
  while (1) {
    if ($2 << 16 >> 16 == 0) {
      $9 = 0;
      $8 = $1;
    } else {
      $col_06 = 0;
      $conv37 = $2 & 65535;
      while (1) {
        $add = Math_imul($conv37, $row_010) + $col_06 | 0;
        $4 = (HEAP32[1316051] | 0) + ($add << 3) | 0;
        if ((_fread($4 | 0, 2, 3, HEAP32[1316053] | 0) | 0) >>> 0 < 3) {
          _derror();
        }
        $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
        if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
          _swab($4 | 0, $4 | 0, 6);
        }
        $inc = $col_06 + 1 | 0;
        $7 = HEAP16[2621484] | 0;
        $conv3 = $7 & 65535;
        if (($inc | 0) < ($conv3 | 0)) {
          $col_06 = $inc;
          $conv37 = $conv3;
        } else {
          break;
        }
      }
      $9 = $7;
      $8 = HEAP16[2699404] | 0;
    }
    $inc9 = $row_010 + 1 | 0;
    if (($inc9 | 0) < ($8 & 65535 | 0)) {
      $row_010 = $inc9;
      $2 = $9;
      $1 = $8;
    } else {
      break;
    }
  }
  return;
}
function _packed_load_raw() {
  var $conv = 0, $mul = 0, $2 = 0, $pwide_0 = 0, $bwide_0 = 0, $mul10 = 0, $3 = 0, $bwide_1 = 0, $add = 0, $4 = 0, $shr24 = 0, $cmp4634 = 0, $sub25 = 0, $sh_prom$0 = 0, $and36 = 0, $5 = 0, $bitbuf_044$0 = 0, $bitbuf_044$1 = 0, $vbits_043 = 0, $irow_042 = 0, $add25 = 0, $7 = 0, $sub37 = 0, $9 = 0, $shl = 0, $row_0 = 0, $vbits_1 = 0, $bitbuf_137$0 = 0, $bitbuf_137$1 = 0, $vbits_236 = 0, $col_035 = 0, $10 = 0, $sub49 = 0, $bitbuf_231$0 = 0, $bitbuf_231$1 = 0, $vbits_330 = 0, $bitbuf_328$0 = 0, $bitbuf_328$1 = 0, $i_027 = 0, $or$0 = 0, $or$1 = 0, $add62 = 0, $add64 = 0, $12 = 0, $bitbuf_2_lcssa$0 = 0, $bitbuf_2_lcssa$1 = 0, $vbits_3_lcssa = 0, $sub66 = 0, $conv74 = 0, $mul76 = 0, $inc = 0, $bitbuf_1_lcssa$0 = 0, $bitbuf_1_lcssa$1 = 0, $vbits_2_lcssa = 0, $inc100 = 0, $shl54$0 = 0, $shl54$1 = 0, $shl69$0 = 0, $shl69$1 = 0, $shr72$0 = 0, $shr72$1 = 0;
  $conv = HEAPU16[2622498] | 0;
  $mul = $conv << 3;
  $2 = HEAP32[1311011] | 0;
  if ($mul >>> 0 < Math_imul(HEAPU16[2621484] | 0, $2) >>> 0) {
    $bwide_0 = Math_imul($2, $conv) >>> 3;
    $pwide_0 = $conv;
  } else {
    $bwide_0 = $conv;
    $pwide_0 = ($mul >>> 0) / ($2 >>> 0) >>> 0;
  }
  $mul10 = Math_imul($2, $pwide_0);
  $3 = HEAP32[1315948] | 0;
  if (($3 & 1 | 0) == 0) {
    $bwide_1 = $bwide_0;
  } else {
    $bwide_1 = ($bwide_0 << 4 | 0) / 15 & -1;
  }
  $add = ($3 & 24) + 8 | 0;
  $4 = HEAP16[2622502] | 0;
  $shr24 = (($4 & 65535) + 1 | 0) >>> 1;
  if ($4 << 16 >> 16 == 0) {
    return;
  }
  $cmp4634 = ($pwide_0 | 0) > 0;
  $sub25 = $mul10 - ($bwide_0 << 3) | 0;
  $sh_prom$0 = $add;
  $and36 = Math_imul($shr24, -$bwide_1 | 0) & -2048;
  $irow_042 = 0;
  $vbits_043 = 0;
  $bitbuf_044$1 = 0;
  $bitbuf_044$0 = 0;
  $5 = $3;
  while (1) {
    do {
      if (($5 & 2 | 0) == 0) {
        $vbits_1 = $vbits_043;
        $row_0 = $irow_042;
      } else {
        $add25 = (($irow_042 | 0) % ($shr24 | 0) << 1) + (($irow_042 | 0) / ($shr24 | 0) & -1) | 0;
        if (($add25 | 0) != 1) {
          $vbits_1 = $vbits_043;
          $row_0 = $add25;
          break;
        }
        if (($5 & 4 | 0) == 0) {
          $vbits_1 = $vbits_043;
          $row_0 = 1;
          break;
        }
        $7 = HEAP32[1316053] | 0;
        if ((HEAP32[1311010] | 0) == 0) {
          _fseek($7 | 0, 0, 2);
          $9 = HEAP32[1316053] | 0;
          $shl = _ftell($9 | 0) >> 3 << 2;
          _fseek($9 | 0, $shl | 0, 0);
          $vbits_1 = 0;
          $row_0 = 1;
          break;
        } else {
          $sub37 = (HEAP32[1357153] | 0) - $and36 | 0;
          _fseek($7 | 0, $sub37 | 0, 0);
          $vbits_1 = 0;
          $row_0 = 1;
          break;
        }
      }
    } while (0);
    L1500 : do {
      if ($cmp4634) {
        $col_035 = 0;
        $vbits_236 = $vbits_1;
        $bitbuf_137$1 = $bitbuf_044$1;
        $bitbuf_137$0 = $bitbuf_044$0;
        while (1) {
          $10 = HEAP32[1311011] | 0;
          $sub49 = $vbits_236 - $10 | 0;
          if (($sub49 | 0) < 0) {
            $vbits_330 = $sub49;
            $bitbuf_231$1 = $bitbuf_137$1;
            $bitbuf_231$0 = $bitbuf_137$0;
            while (1) {
              Runtime_bitshift64($bitbuf_231$0 | 0, $bitbuf_231$1 | 0, 0, $sh_prom$0 | 0);
              $shl54$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl54$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $i_027 = 0;
              $bitbuf_328$1 = $shl54$1;
              $bitbuf_328$0 = $shl54$0;
              while (1) {
                $or$0 = _fgetc(HEAP32[1316053] | 0) << $i_027 | $bitbuf_328$0;
                $or$1 = 0 | $bitbuf_328$1;
                $add62 = $i_027 + 8 | 0;
                if (($add62 | 0) < ($add | 0)) {
                  $i_027 = $add62;
                  $bitbuf_328$1 = $or$1;
                  $bitbuf_328$0 = $or$0;
                } else {
                  break;
                }
              }
              $add64 = $vbits_330 + $add | 0;
              if (($add64 | 0) < 0) {
                $vbits_330 = $add64;
                $bitbuf_231$1 = $or$1;
                $bitbuf_231$0 = $or$0;
              } else {
                break;
              }
            }
            $vbits_3_lcssa = $add64;
            $bitbuf_2_lcssa$1 = $or$1;
            $bitbuf_2_lcssa$0 = $or$0;
            $12 = HEAP32[1311011] | 0;
          } else {
            $vbits_3_lcssa = $sub49;
            $bitbuf_2_lcssa$1 = $bitbuf_137$1;
            $bitbuf_2_lcssa$0 = $bitbuf_137$0;
            $12 = $10;
          }
          $sub66 = 64 - $12 | 0;
          Runtime_bitshift64($bitbuf_2_lcssa$0 | 0, $bitbuf_2_lcssa$1 | 0, 0, $sub66 - $vbits_3_lcssa | 0);
          $shl69$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl69$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          Runtime_bitshift64($shl69$0 | 0, $shl69$1 | 0, 2, $sub66 | 0);
          $shr72$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr72$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $conv74 = $shr72$0 & 65535;
          $mul76 = Math_imul(HEAPU16[2622498] | 0, $row_0);
          HEAP16[(HEAP32[1311250] | 0) + (((HEAP32[1315948] | 0) >>> 6 ^ $col_035) + $mul76 << 1) >> 1] = $conv74;
          do {
            if ((HEAP32[1315948] & 1 | 0) != 0) {
              if ((($col_035 | 0) % 10 | 0) != 9) {
                break;
              }
              if ((_fgetc(HEAP32[1316053] | 0) | 0) == 0) {
                break;
              }
              if (($col_035 | 0) >= ((HEAPU16[2631898] | 0) + (HEAPU16[2621484] | 0) | 0)) {
                break;
              }
              _derror();
            }
          } while (0);
          $inc = $col_035 + 1 | 0;
          if (($inc | 0) == ($pwide_0 | 0)) {
            $vbits_2_lcssa = $vbits_3_lcssa;
            $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
            $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
            break L1500;
          } else {
            $col_035 = $inc;
            $vbits_236 = $vbits_3_lcssa;
            $bitbuf_137$1 = $bitbuf_2_lcssa$1;
            $bitbuf_137$0 = $bitbuf_2_lcssa$0;
          }
        }
      } else {
        $vbits_2_lcssa = $vbits_1;
        $bitbuf_1_lcssa$1 = $bitbuf_044$1;
        $bitbuf_1_lcssa$0 = $bitbuf_044$0;
      }
    } while (0);
    $inc100 = $irow_042 + 1 | 0;
    if (($inc100 | 0) >= (HEAPU16[2622502] | 0 | 0)) {
      break;
    }
    $irow_042 = $inc100;
    $vbits_043 = $sub25 + $vbits_2_lcssa | 0;
    $bitbuf_044$1 = $bitbuf_1_lcssa$1;
    $bitbuf_044$0 = $bitbuf_1_lcssa$0;
    $5 = HEAP32[1315948] | 0;
  }
  return;
}
function _panasonic_load_raw() {
  var $pred = 0, $nonz = 0, $0 = 0, $arrayidx = 0, $arrayidx9 = 0, $arrayidx10 = 0, $arrayidx11 = 0, $1 = 0, $2 = 0, $sh_074 = 0, $row_072 = 0, $sh_169 = 0, $col_068 = 0, $rem = 0, $3 = 0, $4 = 0, $add_ptr_i = 0, $sub_i = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $sub5_i = 0, $and_i = 0, $xor_i = 0, $sh_2 = 0, $and = 0, $arrayidx18 = 0, $tobool = 0, $13 = 0, $14 = 0, $add_ptr_i21 = 0, $sub_i22 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $sub5_i27 = 0, $and_i28 = 0, $xor_i30 = 0, $and11_i40 = 0, $arrayidx24 = 0, $sub25 = 0, $storemerge = 0, $22 = 0, $add_ptr_i43 = 0, $sub_i44 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $sub5_i49 = 0, $and_i50 = 0, $xor_i52 = 0, $29 = 0, $add60 = 0, $inc = 0, $33 = 0, $34 = 0, $35 = 0, $sh_1_lcssa = 0, $inc71 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $pred = __stackBase__ | 0;
  $nonz = __stackBase__ + 8 | 0;
  HEAP32[1311659] = 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx = $nonz + 4 | 0;
  $arrayidx9 = $nonz | 0;
  $arrayidx10 = $pred + 4 | 0;
  $arrayidx11 = $pred | 0;
  $row_072 = 0;
  $sh_074 = 0;
  $2 = HEAP16[2622498] | 0;
  $1 = $0;
  while (1) {
    if ($2 << 16 >> 16 == 0) {
      $sh_1_lcssa = $sh_074;
      $35 = 0;
      $34 = $1;
    } else {
      $col_068 = 0;
      $sh_169 = $sh_074;
      while (1) {
        $rem = ($col_068 | 0) % 14;
        do {
          if (($rem | 0) == 0) {
            HEAP32[$arrayidx >> 2] = 0;
            HEAP32[$arrayidx9 >> 2] = 0;
            HEAP32[$arrayidx10 >> 2] = 0;
            HEAP32[$arrayidx11 >> 2] = 0;
            $sh_2 = $sh_169;
          } else {
            if ((($rem | 0) % 3 | 0) != 2) {
              $sh_2 = $sh_169;
              break;
            }
            $3 = HEAP32[1311659] | 0;
            if (($3 | 0) == 0) {
              $4 = HEAP32[1315948] | 0;
              $add_ptr_i = $4 + 5246640 | 0;
              $sub_i = 16384 - $4 | 0;
              $5 = HEAP32[1316053] | 0;
              _fread($add_ptr_i | 0, 1, $sub_i | 0, $5 | 0);
              $6 = HEAP32[1315948] | 0;
              $7 = HEAP32[1316053] | 0;
              _fread(5246640, 1, $6 | 0, $7 | 0);
              $8 = HEAP32[1311659] | 0;
            } else {
              $8 = $3;
            }
            $sub5_i = $8 - 2 | 0;
            $and_i = $sub5_i & 131071;
            HEAP32[1311659] = $and_i;
            $xor_i = $and_i >>> 3 ^ 16368;
            $sh_2 = 4 >>> ((((HEAPU8[5246640 + ($xor_i + 1 | 0) | 0] | 0) << 8 | (HEAPU8[$xor_i + 5246640 | 0] | 0)) >>> (($sub5_i & 7) >>> 0) & 3 ^ 3) >>> 0);
          }
        } while (0);
        $and = $rem & 1;
        $arrayidx18 = $nonz + ($and << 2) | 0;
        $tobool = (HEAP32[$arrayidx18 >> 2] | 0) == 0;
        $13 = HEAP32[1311659] | 0;
        if (($13 | 0) == 0) {
          $14 = HEAP32[1315948] | 0;
          $add_ptr_i21 = $14 + 5246640 | 0;
          $sub_i22 = 16384 - $14 | 0;
          $15 = HEAP32[1316053] | 0;
          _fread($add_ptr_i21 | 0, 1, $sub_i22 | 0, $15 | 0);
          $16 = HEAP32[1315948] | 0;
          $17 = HEAP32[1316053] | 0;
          _fread(5246640, 1, $16 | 0, $17 | 0);
          $18 = HEAP32[1311659] | 0;
        } else {
          $18 = $13;
        }
        $sub5_i27 = $18 - 8 | 0;
        $and_i28 = $sub5_i27 & 131071;
        HEAP32[1311659] = $and_i28;
        $xor_i30 = $and_i28 >>> 3 ^ 16368;
        $and11_i40 = ((HEAPU8[5246640 + ($xor_i30 + 1 | 0) | 0] | 0) << 8 | (HEAPU8[$xor_i30 + 5246640 | 0] | 0)) >>> (($sub5_i27 & 7) >>> 0) & 255;
        do {
          if ($tobool) {
            HEAP32[$arrayidx18 >> 2] = $and11_i40;
            if (!(($and11_i40 | 0) != 0 | ($rem | 0) > 11)) {
              break;
            }
            if (($and_i28 | 0) == 0) {
              $22 = HEAP32[1315948] | 0;
              $add_ptr_i43 = $22 + 5246640 | 0;
              $sub_i44 = 16384 - $22 | 0;
              $23 = HEAP32[1316053] | 0;
              _fread($add_ptr_i43 | 0, 1, $sub_i44 | 0, $23 | 0);
              $24 = HEAP32[1315948] | 0;
              $25 = HEAP32[1316053] | 0;
              _fread(5246640, 1, $24 | 0, $25 | 0);
              $26 = HEAP32[1311659] | 0;
            } else {
              $26 = $and_i28;
            }
            $sub5_i49 = $26 - 4 | 0;
            $and_i50 = $sub5_i49 & 131071;
            HEAP32[1311659] = $and_i50;
            $xor_i52 = $and_i50 >>> 3 ^ 16368;
            HEAP32[$pred + ($and << 2) >> 2] = ((HEAPU8[5246640 + ($xor_i52 + 1 | 0) | 0] | 0) << 8 | (HEAPU8[$xor_i52 + 5246640 | 0] | 0)) >>> (($sub5_i49 & 7) >>> 0) & 15 | $and11_i40 << 4;
          } else {
            if (($and11_i40 | 0) == 0) {
              break;
            }
            $arrayidx24 = $pred + ($and << 2) | 0;
            $sub25 = (HEAP32[$arrayidx24 >> 2] | 0) - (128 << $sh_2) | 0;
            if (($sub25 | 0) < 0 | ($sh_2 | 0) == 4) {
              $storemerge = $sub25 & (-1 << $sh_2 ^ -1);
            } else {
              $storemerge = $sub25;
            }
            HEAP32[$arrayidx24 >> 2] = $storemerge + ($and11_i40 << $sh_2) | 0;
          }
        } while (0);
        $29 = HEAP32[$pred + (($col_068 & 1) << 2) >> 2] | 0;
        $add60 = Math_imul(HEAPU16[2622498] | 0, $row_072) + $col_068 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add60 << 1) >> 1] = $29 & 65535;
        do {
          if (($29 & 65535) >>> 0 > 4098) {
            if (($col_068 | 0) >= (HEAPU16[2621484] | 0 | 0)) {
              break;
            }
            _derror();
          }
        } while (0);
        $inc = $col_068 + 1 | 0;
        $33 = HEAP16[2622498] | 0;
        if (($inc | 0) < ($33 & 65535 | 0)) {
          $col_068 = $inc;
          $sh_169 = $sh_2;
        } else {
          break;
        }
      }
      $sh_1_lcssa = $sh_2;
      $35 = $33;
      $34 = HEAP16[2699404] | 0;
    }
    $inc71 = $row_072 + 1 | 0;
    if (($inc71 | 0) < ($34 & 65535 | 0)) {
      $row_072 = $inc71;
      $sh_074 = $sh_1_lcssa;
      $2 = $35;
      $1 = $34;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _sinar_4shot_load_raw() {
  var $str_i47 = 0, $str_i = 0, $0 = 0, $_dec = 0, $4 = 0, $add = 0, $6 = 0, $7 = 0, $9 = 0, $retval_0_i_i = 0, $14 = 0, $15 = 0, $mul10 = 0, $mul_i = 0, $req_0_i = 0, $call_i19 = 0, $18 = 0, $19 = 0, $21 = 0, $req_0_i32 = 0, $call_i33 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $shot_282 = 0, $30 = 0, $32 = 0, $retval_0_i_i66 = 0, $and = 0, $and41 = 0, $row_081 = 0, $conv26 = 0, $cmp1_i71 = 0, $sub28 = 0, $39 = 0, $and48 = 0, $40 = 0, $col_078 = 0, $sub42 = 0, $conv43 = 0, $43 = 0, $and53 = 0, $add56 = 0, $46 = 0, $inc = 0, $inc60 = 0, $inc63 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $str_i47 = __stackBase__ | 0;
  $str_i = __stackBase__ + 4 | 0;
  $0 = HEAP32[1311231] | 0;
  if ((HEAP32[1349703] | $0 | 0) != 0) {
    $_dec = ($0 | 0) == 0 ? 0 : $0 - 1 | 0;
    $4 = HEAP32[1316053] | 0;
    $add = (HEAP32[1357153] | 0) + ($_dec >>> 0 > 3 ? 12 : $_dec << 2) | 0;
    _fseek($4 | 0, $add | 0, 0);
    $6 = HEAP32[1316053] | 0;
    $7 = $str_i;
    HEAP32[$str_i >> 2] = -1;
    _fread($7 | 0, 1, 4, $6 | 0);
    $9 = HEAP32[$str_i >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i = $9;
    } else {
      $retval_0_i_i = _llvm_bswap_i32($9 | 0) | 0;
    }
    _fseek($6 | 0, $retval_0_i_i | 0, 0);
    _unpacked_load_raw();
    STACKTOP = __stackBase__;
    return;
  }
  _free(HEAP32[1311250] | 0);
  HEAP32[1311250] = 0;
  _free(HEAP32[1316051] | 0);
  $14 = HEAP16[2699404] | 0;
  HEAP16[2632104] = $14;
  $15 = HEAP16[2621484] | 0;
  HEAP16[2632094] = $15;
  $mul10 = Math_imul($15 & 65535, $14 & 65535);
  do {
    if (($mul10 | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul10 << 3;
      if ($mul10 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul10 >>> 0) >>> 0 | 0) == 8 ? $mul_i : -1;
    }
  } while (0);
  $call_i19 = _malloc($req_0_i) | 0;
  if (($call_i19 | 0) == 0) {
    HEAP32[1316051] = 0;
    $18 = HEAP32[_stderr >> 2] | 0;
    $19 = HEAP32[1316054] | 0;
    _fprintf($18 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $19, HEAP32[tempInt + 4 >> 2] = 5586424, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i19 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i19 | 0, 0, $req_0_i | 0);
  }
  HEAP32[1316051] = $call_i19;
  $21 = HEAP16[2622498] | 0;
  if ($21 << 16 >> 16 == 0) {
    $req_0_i32 = 0;
  } else {
    $req_0_i32 = ($21 & 65535) << 1;
  }
  $call_i33 = _malloc($req_0_i32) | 0;
  if (($call_i33 | 0) == 0) {
    $24 = HEAP32[_stderr >> 2] | 0;
    $25 = HEAP32[1316054] | 0;
    _fprintf($24 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $25, HEAP32[tempInt + 4 >> 2] = 5586424, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i33 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i33 | 0, 0, $req_0_i32 | 0);
  }
  $26 = $call_i33;
  $27 = $str_i47;
  $shot_282 = 0;
  while (1) {
    _fseek(HEAP32[1316053] | 0, (HEAP32[1357153] | 0) + ($shot_282 << 2) | 0, 0);
    $30 = HEAP32[1316053] | 0;
    HEAP32[$str_i47 >> 2] = -1;
    _fread($27 | 0, 1, 4, $30 | 0);
    $32 = HEAP32[$str_i47 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i66 = $32;
    } else {
      $retval_0_i_i66 = _llvm_bswap_i32($32 | 0) | 0;
    }
    _fseek($30 | 0, $retval_0_i_i66 | 0, 0);
    L1591 : do {
      if (HEAP16[2622502] << 16 >> 16 != 0) {
        $and = $shot_282 >>> 1 & 1;
        $and41 = $shot_282 & 1;
        $row_081 = 0;
        while (1) {
          $conv26 = HEAPU16[2622498] | 0;
          if ((_fread($call_i33 | 0, 2, $conv26 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $conv26 >>> 0) {
            _derror();
          }
          $cmp1_i71 = HEAP16[2631518] << 16 >> 16 == 18761;
          if (!($cmp1_i71 ^ (_htons(4660) | 0) == 4660)) {
            _swab($call_i33 | 0, $call_i33 | 0, $conv26 << 1 | 0);
          }
          $sub28 = ($row_081 - (HEAPU16[2621786] | 0) | 0) - $and | 0;
          L1601 : do {
            if ($sub28 >>> 0 < (HEAPU16[2699404] | 0) >>> 0) {
              $39 = HEAP16[2622498] | 0;
              if ($39 << 16 >> 16 == 0) {
                break;
              }
              $and48 = $row_081 << 1 & 14;
              $col_078 = 0;
              $40 = $39;
              while (1) {
                $sub42 = ($col_078 - (HEAPU16[2631898] | 0) | 0) - $and41 | 0;
                $conv43 = HEAPU16[2621484] | 0;
                if ($sub42 >>> 0 < $conv43 >>> 0) {
                  $43 = HEAP16[$26 + ($col_078 << 1) >> 1] | 0;
                  $and53 = (HEAP32[1356938] | 0) >>> (($col_078 & 1 | $and48) << 1 >>> 0) & 3;
                  $add56 = Math_imul($conv43, $sub28) + $sub42 | 0;
                  HEAP16[(HEAP32[1316051] | 0) + ($add56 << 3) + ($and53 << 1) >> 1] = $43;
                  $46 = HEAP16[2622498] | 0;
                } else {
                  $46 = $40;
                }
                $inc = $col_078 + 1 | 0;
                if ($inc >>> 0 < ($46 & 65535) >>> 0) {
                  $col_078 = $inc;
                  $40 = $46;
                } else {
                  break L1601;
                }
              }
            }
          } while (0);
          $inc60 = $row_081 + 1 | 0;
          if ($inc60 >>> 0 < (HEAPU16[2622502] | 0) >>> 0) {
            $row_081 = $inc60;
          } else {
            break L1591;
          }
        }
      }
    } while (0);
    $inc63 = $shot_282 + 1 | 0;
    if (($inc63 | 0) == 4) {
      break;
    } else {
      $shot_282 = $inc63;
    }
  }
  _free($call_i33);
  HEAP32[1356938] = 0;
  HEAP16[2622460] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _nokia_load_raw() {
  var $mul = 0, $div = 0, $call = 0, $add_ptr = 0, $cmp1224 = 0, $4 = 0, $5 = 0, $row_033 = 0, $c_025 = 0, $inc = 0, $8 = 0, $9 = 0, $col_030 = 0, $dp_029 = 0, $arrayidx27 = 0, $or = 0, $add34 = 0, $or_1 = 0, $add34_1 = 0, $or_2 = 0, $add34_2 = 0, $or_3 = 0, $add34_3 = 0, $add41 = 0, $25 = 0, $inc44 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $mul = -(HEAP16[2631518] << 16 >> 16 == 18761 & 1) & 3;
  $div = ((HEAPU16[2622498] | 0) * 5 & -1) >>> 2;
  $call = _malloc($div << 1) | 0;
  if (($call | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5586288, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    _free($call);
    HEAP32[1315898] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
  $add_ptr = $call + $div | 0;
  $cmp1224 = ($div | 0) == 0;
  $row_033 = 0;
  while (1) {
    if ((_fread($add_ptr | 0, 1, $div | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $div >>> 0) {
      _derror();
    }
    L1625 : do {
      if (!$cmp1224) {
        $c_025 = 0;
        while (1) {
          HEAP8[$call + $c_025 | 0] = HEAP8[$call + (($c_025 ^ $mul) + $div | 0) | 0] | 0;
          $inc = $c_025 + 1 | 0;
          if (($inc | 0) < ($div | 0)) {
            $c_025 = $inc;
          } else {
            break L1625;
          }
        }
      }
    } while (0);
    $8 = HEAP16[2622498] | 0;
    L1629 : do {
      if ($8 << 16 >> 16 != 0) {
        $dp_029 = $call;
        $col_030 = 0;
        $9 = $8;
        while (1) {
          $arrayidx27 = $dp_029 + 4 | 0;
          $or = HEAP8[$arrayidx27] & 3 | (HEAPU8[$dp_029] | 0) << 2;
          $add34 = $col_030 + Math_imul($9 & 65535, $row_033) | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add34 << 1) >> 1] = $or;
          $or_1 = (HEAP8[$arrayidx27] & 255) >>> 2 & 3 | (HEAPU8[$dp_029 + 1 | 0] | 0) << 2;
          $add34_1 = ($col_030 | 1) + Math_imul(HEAPU16[2622498] | 0, $row_033) | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add34_1 << 1) >> 1] = $or_1;
          $or_2 = (HEAP8[$arrayidx27] & 255) >>> 4 & 3 | (HEAPU8[$dp_029 + 2 | 0] | 0) << 2;
          $add34_2 = ($col_030 | 2) + Math_imul(HEAPU16[2622498] | 0, $row_033) | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add34_2 << 1) >> 1] = $or_2;
          $or_3 = (HEAP8[$arrayidx27] & 255) >>> 6 | (HEAPU8[$dp_029 + 3 | 0] | 0) << 2;
          $add34_3 = ($col_030 | 3) + Math_imul(HEAPU16[2622498] | 0, $row_033) | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add34_3 << 1) >> 1] = $or_3;
          $add41 = $col_030 + 4 | 0;
          $25 = HEAP16[2622498] | 0;
          if (($add41 | 0) < ($25 & 65535 | 0)) {
            $dp_029 = $dp_029 + 5 | 0;
            $col_030 = $add41;
            $9 = $25;
          } else {
            break L1629;
          }
        }
      }
    } while (0);
    $inc44 = $row_033 + 1 | 0;
    if (($inc44 | 0) < (HEAPU16[2622502] | 0 | 0)) {
      $row_033 = $inc44;
    } else {
      break;
    }
  }
  _free($call);
  HEAP32[1315898] = 1023;
  STACKTOP = __stackBase__;
  return;
}
function _olympus_load_raw() {
  var $huff = 0, $acarry = 0, $arrayidx = 0, $n_1_lcssa = 0, $dec94 = 0, $n_093 = 0, $i_092 = 0, $shr = 0, $conv = 0, $n_191 = 0, $c_090 = 0, $inc = 0, $inc4 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $row_087 = 0, $cmp66 = 0, $sub84 = 0, $col_083 = 0, $and = 0, $arraydecay = 0, $arrayidx18 = 0, $6 = 0, $mul = 0, $conv25 = 0, $nbits_0 = 0, $call33 = 0, $and34 = 0, $call38 = 0, $high_0 = 0, $or45 = 0, $arrayidx48 = 0, $8 = 0, $add49 = 0, $cmp68 = 0, $_pre96 = 0, $conv74 = 0, $add77 = 0, $10 = 0, $add87 = 0, $12 = 0, $sub93 = 0, $add94 = 0, $14 = 0, $15 = 0, $conv96 = 0, $mul99 = 0, $16 = 0, $conv102 = 0, $17 = 0, $conv109 = 0, $sub121 = 0, $shr123 = 0, $sub131 = 0, $shr133 = 0, $sub148 = 0, $shr150 = 0, $sub155 = 0, $shr157 = 0, $18 = 0, $pred_0 = 0, $add174 = 0, $inc186 = 0, $19 = 0, $20 = 0, $21 = 0, $inc189 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8216 | 0;
  $huff = __stackBase__ | 0;
  $acarry = __stackBase__ + 8192 | 0;
  $arrayidx = $huff | 0;
  HEAP16[$arrayidx >> 1] = 3084;
  $i_092 = 12;
  $n_093 = 0;
  $dec94 = 11;
  while (1) {
    $shr = 2048 >>> ($dec94 >>> 0);
    if (($shr | 0) > 0) {
      $conv = ($i_092 << 8 | $dec94) & 65535;
      $c_090 = 0;
      $n_191 = $n_093;
      while (1) {
        $inc = $n_191 + 1 | 0;
        HEAP16[$huff + ($inc << 1) >> 1] = $conv;
        $inc4 = $c_090 + 1 | 0;
        if (($inc4 | 0) == ($shr | 0)) {
          break;
        } else {
          $c_090 = $inc4;
          $n_191 = $inc;
        }
      }
      $n_1_lcssa = $n_093 + $shr | 0;
    } else {
      $n_1_lcssa = $n_093;
    }
    if (($dec94 | 0) == 0) {
      break;
    } else {
      $i_092 = $dec94;
      $n_093 = $n_1_lcssa;
      $dec94 = $dec94 - 1 | 0;
    }
  }
  _fseek(HEAP32[1316053] | 0, 7, 1);
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $2 = HEAP16[2699404] | 0;
  if ($2 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $3 = $acarry;
  $row_087 = 0;
  $5 = HEAP16[2622498] | 0;
  $4 = $2;
  while (1) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    if ($5 << 16 >> 16 == 0) {
      $21 = 0;
      $20 = $4;
    } else {
      $cmp66 = ($row_087 | 0) < 2;
      $sub84 = $row_087 - 2 | 0;
      $col_083 = 0;
      while (1) {
        $and = $col_083 & 1;
        $arraydecay = $acarry + ($and * 12 & -1) | 0;
        $arrayidx18 = $acarry + ($and * 12 & -1) + 8 | 0;
        $6 = HEAP32[$arrayidx18 >> 2] | 0;
        $mul = (($6 | 0) < 3 & 1) << 1;
        $conv25 = HEAP32[$arraydecay >> 2] & 65535;
        $nbits_0 = $mul + 2 | 0;
        while (1) {
          if (($conv25 >>> (($nbits_0 + $mul | 0) >>> 0) | 0) == 0) {
            break;
          } else {
            $nbits_0 = $nbits_0 + 1 | 0;
          }
        }
        $call33 = _getbithuff(3, 0) | 0;
        $and34 = $call33 & 3;
        $call38 = _getbithuff(12, $arrayidx) | 0;
        if (($call38 | 0) == 12) {
          $high_0 = (_getbithuff(16 - $nbits_0 | 0, 0) | 0) >>> 1;
        } else {
          $high_0 = $call38;
        }
        $or45 = $high_0 << $nbits_0 | _getbithuff($nbits_0, 0);
        HEAP32[$arraydecay >> 2] = $or45;
        $arrayidx48 = $acarry + ($and * 12 & -1) + 4 | 0;
        $8 = HEAP32[$arrayidx48 >> 2] | 0;
        $add49 = ($or45 ^ $call33 << 29 >> 31) + $8 | 0;
        HEAP32[$arrayidx48 >> 2] = ($add49 * 3 & -1) + $8 >> 5;
        HEAP32[$arrayidx18 >> 2] = ($or45 | 0) > 16 ? 0 : $6 + 1 | 0;
        do {
          if (($col_083 | 0) < (HEAPU16[2621484] | 0 | 0)) {
            $cmp68 = ($col_083 | 0) < 2;
            $_pre96 = HEAP16[2622498] | 0;
            L1661 : do {
              if ($cmp66 & $cmp68) {
                $pred_0 = 0;
                $18 = HEAP32[1311250] | 0;
              } else {
                $conv74 = $_pre96 & 65535;
                if ($cmp66) {
                  $add77 = ($col_083 - 2 | 0) + Math_imul($conv74, $row_087) | 0;
                  $10 = HEAP32[1311250] | 0;
                  $pred_0 = HEAPU16[$10 + ($add77 << 1) >> 1] | 0;
                  $18 = $10;
                  break;
                }
                if ($cmp68) {
                  $add87 = Math_imul($conv74, $sub84) + $col_083 | 0;
                  $12 = HEAP32[1311250] | 0;
                  $pred_0 = HEAPU16[$12 + ($add87 << 1) >> 1] | 0;
                  $18 = $12;
                  break;
                }
                $sub93 = $col_083 - 2 | 0;
                $add94 = Math_imul($conv74, $row_087) + $sub93 | 0;
                $14 = HEAP32[1311250] | 0;
                $15 = HEAP16[$14 + ($add94 << 1) >> 1] | 0;
                $conv96 = $15 & 65535;
                $mul99 = Math_imul($conv74, $sub84);
                $16 = HEAP16[$14 + ($mul99 + $col_083 << 1) >> 1] | 0;
                $conv102 = $16 & 65535;
                $17 = HEAP16[$14 + ($mul99 + $sub93 << 1) >> 1] | 0;
                $conv109 = $17 & 65535;
                do {
                  if (!(($15 & 65535) < ($17 & 65535) & ($17 & 65535) < ($16 & 65535))) {
                    if (($16 & 65535) < ($17 & 65535) & ($17 & 65535) < ($15 & 65535)) {
                      break;
                    }
                    $sub148 = $conv96 - $conv109 | 0;
                    $shr150 = $sub148 >> 31;
                    $sub155 = $conv102 - $conv109 | 0;
                    $shr157 = $sub155 >> 31;
                    $pred_0 = (($shr150 ^ $sub148) - $shr150 | 0) > (($shr157 ^ $sub155) - $shr157 | 0) ? $conv96 : $conv102;
                    $18 = $14;
                    break L1661;
                  }
                } while (0);
                $sub121 = $conv96 - $conv109 | 0;
                $shr123 = $sub121 >> 31;
                do {
                  if ((($shr123 ^ $sub121) - $shr123 | 0) <= 32) {
                    $sub131 = $conv102 - $conv109 | 0;
                    $shr133 = $sub131 >> 31;
                    if ((($shr133 ^ $sub131) - $shr133 | 0) > 32) {
                      break;
                    }
                    $pred_0 = ($conv102 + $conv96 | 0) >>> 1;
                    $18 = $14;
                    break L1661;
                  }
                } while (0);
                $pred_0 = ($conv102 + $conv96 | 0) - $conv109 | 0;
                $18 = $14;
              }
            } while (0);
            $add174 = $pred_0 + ($add49 << 2 | $and34) | 0;
            HEAP16[$18 + (Math_imul($_pre96 & 65535, $row_087) + $col_083 << 1) >> 1] = $add174 & 65535;
            if (($add174 & 61440 | 0) == 0) {
              break;
            }
            _derror();
          }
        } while (0);
        $inc186 = $col_083 + 1 | 0;
        $19 = HEAP16[2622498] | 0;
        if (($inc186 | 0) < ($19 & 65535 | 0)) {
          $col_083 = $inc186;
        } else {
          break;
        }
      }
      $21 = $19;
      $20 = HEAP16[2699404] | 0;
    }
    $inc189 = $row_087 + 1 | 0;
    if (($inc189 | 0) < ($20 & 65535 | 0)) {
      $row_087 = $inc189;
      $5 = $21;
      $4 = $20;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _minolta_rd175_load_raw() {
  var $pixel = 0, $arraydecay = 0, $arrayidx37 = 0, $arrayidx45 = 0, $irow_027 = 0, $div = 0, $cond = 0, $add = 0, $box_0 = 0, $row_0 = 0, $col_025 = 0, $row_123 = 0, $inc_pre = 0, $div18 = 0, $cond30 = 0, $add34 = 0, $xor = 0, $shl39 = 0, $add43 = 0, $shl47 = 0, $add51 = 0, $col_126 = 0, $shl61 = 0, $add65 = 0, $add68 = 0, $inc72 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 768 | 0;
  $pixel = __stackBase__ | 0;
  $arraydecay = $pixel | 0;
  $arrayidx37 = $pixel + 1 | 0;
  $arrayidx45 = $pixel + 765 | 0;
  $irow_027 = 0;
  while (1) {
    if ((_fread($arraydecay | 0, 1, 768, HEAP32[1316053] | 0) | 0) >>> 0 < 768) {
      _derror();
    }
    $div = ($irow_027 >>> 0) / 82 >>> 0;
    if ($irow_027 >>> 0 < 984) {
      $cond = $div | 1;
    } else {
      $cond = ($div << 1) - 24 | 0;
    }
    $add = $cond + (($irow_027 >>> 0) % 82 * 12 & -1) | 0;
    do {
      if (($irow_027 | 0) == 1480) {
        $row_0 = 985;
        $box_0 = $div;
        label = 1203;
        break;
      } else if (($irow_027 | 0) == 1476) {
        $row_0 = 984;
        $box_0 = $div;
        label = 1203;
        break;
      } else if (($irow_027 | 0) == 1478) {
        $row_0 = 985;
        $box_0 = 1;
        label = 1203;
        break;
      } else if (!(($irow_027 | 0) == 1477 | ($irow_027 | 0) == 1479)) {
        $row_0 = $add;
        $box_0 = $div;
        label = 1203;
      }
    } while (0);
    L1698 : do {
      if ((label | 0) == 1203) {
        label = 0;
        if ($box_0 >>> 0 > 11 | ($box_0 & 1 | 0) == 0) {
          $col_126 = $row_0 & 1;
          while (1) {
            $shl61 = (HEAPU8[$pixel + ($col_126 >>> 1) | 0] | 0) << 1;
            $add65 = Math_imul(HEAPU16[2622498] | 0, $row_0) + $col_126 | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add65 << 1) >> 1] = $shl61;
            $add68 = $col_126 + 2 | 0;
            if ($add68 >>> 0 < 1534) {
              $col_126 = $add68;
            } else {
              break L1698;
            }
          }
        } else {
          $row_123 = $row_0;
          $col_025 = 0;
        }
        while (1) {
          $inc_pre = $col_025 + 1 | 0;
          if (($col_025 | 0) != 1) {
            $div18 = $col_025 >>> 1;
            if (($inc_pre & 2 | 0) == 0) {
              $cond30 = (HEAPU8[$pixel + $div18 | 0] | 0) << 1;
            } else {
              $cond30 = (HEAPU8[$pixel + ($div18 + 1 | 0) | 0] | 0) + (HEAPU8[$pixel + ($div18 - 1 | 0) | 0] | 0) & 65535;
            }
            $add34 = Math_imul(HEAPU16[2622498] | 0, $row_123) + $col_025 | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add34 << 1) >> 1] = $cond30;
          }
          $xor = $row_123 ^ 1;
          if (($inc_pre | 0) == 1533) {
            break;
          } else {
            $row_123 = $xor;
            $col_025 = $inc_pre;
          }
        }
        $shl39 = (HEAPU8[$arrayidx37] | 0) << 1;
        $add43 = Math_imul(HEAPU16[2622498] | 0, $xor) + 1 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add43 << 1) >> 1] = $shl39;
        $shl47 = (HEAPU8[$arrayidx45] | 0) << 1;
        $add51 = Math_imul(HEAPU16[2622498] | 0, $xor) + 1533 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add51 << 1) >> 1] = $shl47;
      }
    } while (0);
    $inc72 = $irow_027 + 1 | 0;
    if (($inc72 | 0) == 1481) {
      break;
    } else {
      $irow_027 = $inc72;
    }
  }
  HEAP32[1315898] = 510;
  STACKTOP = __stackBase__;
  return;
}
function _quicktake_100_load_raw() {
  var $pixel = 0, $1 = 0, $2 = 0, $3 = 0, $val_0161 = 0, $row_0159 = 0, $and = 0, $add2123 = 0, $sub9 = 0, $add48 = 0, $arrayidx50 = 0, $cmp54 = 0, $col_0154 = 0, $arrayidx15 = 0, $arrayidx20 = 0, $shr = 0, $add26 = 0, $cond = 0, $_cond = 0, $conv41 = 0, $add67 = 0, $8 = 0, $inc_pre_phi = 0, $9 = 0, $10 = 0, $val_1_lcssa = 0, $col_0_lcssa = 0, $11 = 0, $rb_0150 = 0, $row_1144 = 0, $add290136 = 0, $add298132 = 0, $13 = 0, $14 = 0, $row_1 = 0, $15 = 0, $16 = 0, $row_1149 = 0, $row_1_in148 = 0, $17 = 0, $cmp92 = 0, $add275 = 0, $col_1143 = 0, $cmp94 = 0, $_pre167 = 0, $sub229_pre = 0, $conv100 = 0, $sub101 = 0, $arrayidx103 = 0, $conv104 = 0, $sub105 = 0, $conv135 = 0, $sub136 = 0, $sub171 = 0, $shr182 = 0, $add196 = 0, $arrayidx231_pre_phi = 0, $sub229_pre_phi = 0, $sharp_0 = 0, $shr234 = 0, $add239 = 0, $cond245 = 0, $cond257 = 0, $add280 = 0, $22 = 0, $23 = 0, $inc286 = 0, $row_2138 = 0, $24 = 0, $col_2134 = 0, $arrayidx307 = 0, $sub316 = 0, $cond322 = 0, $add339 = 0, $inc342 = 0, $28 = 0, $29 = 0, $row_3129 = 0, $add355 = 0, $col_3126 = 0, $31 = 0, $add361 = 0, $inc364 = 0, $34 = 0, $35 = 0, $36 = 0, $inc367 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 311696 | 0;
  $pixel = __stackBase__ | 0;
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  _memset($pixel | 0, -128 | 0, 311696);
  $1 = HEAP16[2699404] | 0;
  L1717 : do {
    if ((($1 & 65535) + 2 | 0) >>> 0 > 2) {
      $row_0159 = 2;
      $val_0161 = 0;
      $3 = HEAP16[2621484] | 0;
      $2 = $1;
      while (1) {
        $and = $row_0159 & 1;
        $add2123 = $and | 2;
        if ($add2123 >>> 0 < (($3 & 65535) + 2 | 0) >>> 0) {
          $sub9 = $row_0159 - 1 | 0;
          $add48 = $row_0159 + 1 | 0;
          $arrayidx50 = ($and ^ 1) + ($pixel + ($add48 * 644 & -1)) | 0;
          $cmp54 = ($row_0159 | 0) == 2;
          $col_0154 = $add2123;
          while (1) {
            $arrayidx15 = ($col_0154 + 1 | 0) + ($pixel + ($sub9 * 644 & -1)) | 0;
            $arrayidx20 = ($col_0154 - 2 | 0) + ($pixel + ($row_0159 * 644 & -1)) | 0;
            $shr = ((((HEAPU8[$arrayidx15] | 0) << 1) + (HEAPU8[($col_0154 - 1 | 0) + ($pixel + ($sub9 * 644 & -1)) | 0] | 0) | 0) + (HEAPU8[$arrayidx20] | 0) | 0) >>> 2;
            $add26 = $shr + (HEAP16[5245060 + (_getbithuff(4, 0) << 1) >> 1] << 16 >> 16) | 0;
            $cond = ($add26 | 0) < 255 ? $add26 : 255;
            $_cond = ($cond | 0) < 0 ? 0 : $cond;
            $conv41 = $_cond & 255;
            HEAP8[$pixel + ($row_0159 * 644 & -1) + $col_0154 | 0] = $conv41;
            if (($col_0154 | 0) < 4) {
              HEAP8[$arrayidx50] = $conv41;
              HEAP8[$arrayidx20] = $conv41;
            }
            if ($cmp54) {
              HEAP8[($col_0154 + 3 | 0) + ($pixel + ($sub9 * 644 & -1)) | 0] = $conv41;
              HEAP8[$arrayidx15] = $conv41;
            }
            $add67 = $col_0154 + 2 | 0;
            $8 = HEAP16[2621484] | 0;
            if (($add67 | 0) < (($8 & 65535) + 2 | 0)) {
              $col_0154 = $add67;
            } else {
              break;
            }
          }
          $col_0_lcssa = $add67;
          $val_1_lcssa = $_cond;
          $10 = $8;
          $9 = HEAP16[2699404] | 0;
          $inc_pre_phi = $add48;
        } else {
          $col_0_lcssa = $add2123;
          $val_1_lcssa = $val_0161;
          $10 = $3;
          $9 = $2;
          $inc_pre_phi = $row_0159 + 1 | 0;
        }
        HEAP8[$pixel + ($row_0159 * 644 & -1) + $col_0_lcssa | 0] = $val_1_lcssa & 255;
        if (($inc_pre_phi | 0) < (($9 & 65535) + 2 | 0)) {
          $row_0159 = $inc_pre_phi;
          $val_0161 = $val_1_lcssa;
          $3 = $10;
          $2 = $9;
        } else {
          $rb_0150 = 0;
          $11 = $9;
          break L1717;
        }
      }
    } else {
      $rb_0150 = 0;
      $11 = $1;
    }
  } while (0);
  while (1) {
    $row_1144 = $rb_0150 + 2 | 0;
    L1736 : do {
      if (($row_1144 | 0) < (($11 & 65535) + 2 | 0)) {
        $row_1_in148 = $rb_0150;
        $row_1149 = $row_1144;
        $16 = HEAP16[2621484] | 0;
        $15 = $11;
        while (1) {
          $17 = $row_1149 & 1 ^ 3;
          if ($17 >>> 0 < (($16 & 65535) + 2 | 0) >>> 0) {
            $cmp92 = ($row_1149 | 0) < 4;
            $add275 = $row_1_in148 + 4 | 0;
            $col_1143 = $17;
            while (1) {
              $cmp94 = ($col_1143 | 0) < 4;
              $_pre167 = HEAP8[$pixel + ($row_1_in148 * 644 & -1) + $col_1143 | 0] | 0;
              do {
                if ($cmp92 | $cmp94) {
                  $sub229_pre = $col_1143 - 2 | 0;
                  $sharp_0 = 2;
                  $sub229_pre_phi = $sub229_pre;
                  $arrayidx231_pre_phi = $pixel + ($row_1149 * 644 & -1) + $sub229_pre | 0;
                } else {
                  $conv100 = $_pre167 & 255;
                  $sub101 = $col_1143 - 2 | 0;
                  $arrayidx103 = $pixel + ($row_1149 * 644 & -1) + $sub101 | 0;
                  $conv104 = HEAPU8[$arrayidx103] | 0;
                  $sub105 = $conv100 - $conv104 | 0;
                  $conv135 = HEAPU8[$pixel + ($row_1_in148 * 644 & -1) + $sub101 | 0] | 0;
                  $sub136 = $conv100 - $conv135 | 0;
                  $sub171 = $conv104 - $conv135 | 0;
                  $shr182 = $sub171 >> 31;
                  $add196 = (((($sub105 >> 31 ^ $sub105) + ($sub105 >>> 31) | 0) + ($sub136 >>> 31) | 0) + ($sub136 >> 31 ^ $sub136) | 0) + (($shr182 ^ $sub171) - $shr182 | 0) | 0;
                  if (($add196 | 0) < 4) {
                    $sharp_0 = 0;
                    $sub229_pre_phi = $sub101;
                    $arrayidx231_pre_phi = $arrayidx103;
                    break;
                  }
                  if (($add196 | 0) < 8) {
                    $sharp_0 = 1;
                    $sub229_pre_phi = $sub101;
                    $arrayidx231_pre_phi = $arrayidx103;
                    break;
                  }
                  if (($add196 | 0) < 16) {
                    $sharp_0 = 2;
                    $sub229_pre_phi = $sub101;
                    $arrayidx231_pre_phi = $arrayidx103;
                    break;
                  }
                  if (($add196 | 0) < 32) {
                    $sharp_0 = 3;
                    $sub229_pre_phi = $sub101;
                    $arrayidx231_pre_phi = $arrayidx103;
                    break;
                  }
                  $sharp_0 = ($add196 | 0) < 48 ? 4 : 5;
                  $sub229_pre_phi = $sub101;
                  $arrayidx231_pre_phi = $arrayidx103;
                }
              } while (0);
              $shr234 = ((HEAPU8[$arrayidx231_pre_phi] | 0) + ($_pre167 & 255) | 0) >>> 1;
              $add239 = $shr234 + (HEAP16[5245012 + ($sharp_0 << 3) + (_getbithuff(2, 0) << 1) >> 1] << 16 >> 16) | 0;
              $cond245 = ($add239 | 0) < 255 ? $add239 : 255;
              $cond257 = ($cond245 | 0) < 0 ? 0 : $cond245 & 255;
              HEAP8[$pixel + ($row_1149 * 644 & -1) + $col_1143 | 0] = $cond257;
              if ($cmp92) {
                HEAP8[($col_1143 + 2 | 0) + ($pixel + ($row_1_in148 * 644 & -1)) | 0] = $cond257;
              }
              if ($cmp94) {
                HEAP8[$pixel + ($add275 * 644 & -1) + $sub229_pre_phi | 0] = $cond257;
              }
              $add280 = $col_1143 + 2 | 0;
              $22 = HEAP16[2621484] | 0;
              if (($add280 | 0) < (($22 & 65535) + 2 | 0)) {
                $col_1143 = $add280;
              } else {
                break;
              }
            }
            $14 = $22;
            $13 = HEAP16[2699404] | 0;
          } else {
            $14 = $16;
            $13 = $15;
          }
          $row_1 = $row_1149 + 2 | 0;
          if (($row_1 | 0) < (($13 & 65535) + 2 | 0)) {
            $row_1_in148 = $row_1149;
            $row_1149 = $row_1;
            $16 = $14;
            $15 = $13;
          } else {
            $23 = $13;
            break L1736;
          }
        }
      } else {
        $23 = $11;
      }
    } while (0);
    $inc286 = $rb_0150 + 1 | 0;
    if (($inc286 | 0) == 2) {
      break;
    } else {
      $rb_0150 = $inc286;
      $11 = $23;
    }
  }
  $add290136 = ($23 & 65535) + 2 | 0;
  L1762 : do {
    if ($add290136 >>> 0 > 2) {
      $add298132 = (HEAPU16[2621484] | 0) + 2 | 0;
      $row_2138 = 2;
      while (1) {
        $24 = $row_2138 & 1 ^ 3;
        L1766 : do {
          if ($24 >>> 0 < $add298132 >>> 0) {
            $col_2134 = $24;
            while (1) {
              $arrayidx307 = $pixel + ($row_2138 * 644 & -1) + $col_2134 | 0;
              $sub316 = (((((HEAPU8[$arrayidx307] | 0) << 2) + (HEAPU8[($col_2134 - 1 | 0) + ($pixel + ($row_2138 * 644 & -1)) | 0] | 0) | 0) + (HEAPU8[($col_2134 + 1 | 0) + ($pixel + ($row_2138 * 644 & -1)) | 0] | 0) | 0) >>> 1) - 256 | 0;
              $cond322 = ($sub316 | 0) < 255 ? $sub316 : 255;
              HEAP8[$arrayidx307] = ($cond322 | 0) < 0 ? 0 : $cond322 & 255;
              $add339 = $col_2134 + 2 | 0;
              if (($add339 | 0) < ($add298132 | 0)) {
                $col_2134 = $add339;
              } else {
                break L1766;
              }
            }
          }
        } while (0);
        $inc342 = $row_2138 + 1 | 0;
        if (($inc342 | 0) < ($add290136 | 0)) {
          $row_2138 = $inc342;
        } else {
          break L1762;
        }
      }
    }
  } while (0);
  if ($23 << 16 >> 16 == 0) {
    HEAP32[1315898] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
  $row_3129 = 0;
  $29 = HEAP16[2621484] | 0;
  $28 = $23;
  while (1) {
    if ($29 << 16 >> 16 == 0) {
      $36 = 0;
      $35 = $28;
    } else {
      $add355 = $row_3129 + 2 | 0;
      $col_3126 = 0;
      while (1) {
        $31 = HEAP16[5245092 + ((HEAPU8[($col_3126 + 2 | 0) + ($pixel + ($add355 * 644 & -1)) | 0] | 0) << 1) >> 1] | 0;
        $add361 = Math_imul(HEAPU16[2622498] | 0, $row_3129) + $col_3126 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add361 << 1) >> 1] = $31;
        $inc364 = $col_3126 + 1 | 0;
        $34 = HEAP16[2621484] | 0;
        if (($inc364 | 0) < ($34 & 65535 | 0)) {
          $col_3126 = $inc364;
        } else {
          break;
        }
      }
      $36 = $34;
      $35 = HEAP16[2699404] | 0;
    }
    $inc367 = $row_3129 + 1 | 0;
    if (($inc367 | 0) < ($35 & 65535 | 0)) {
      $row_3129 = $inc367;
      $29 = $36;
      $28 = $35;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 1023;
  STACKTOP = __stackBase__;
  return;
}
function _kodak_jpeg_load_raw() {
  return;
}
function _lossy_dng_load_raw() {
  return;
}
function _kodak_radc_load_raw() {
  var $huff = 0, $last = 0, $0 = 0, $mul = 0, $buf = 0, $1 = 0, $i_0254 = 0, $2 = 0, $conv3250 = 0, $conv9 = 0, $conv23 = 0, $conv25 = 0.0, $conv30 = 0.0, $c_0252 = 0, $inc = 0, $add37 = 0, $s_0249 = 0, $i_1248 = 0, $conv45241 = 0, $shr242 = 0, $conv53 = 0, $smax = 0, $s_1245 = 0, $c_1244 = 0, $inc59 = 0, $s_1_lcssa = 0, $add62 = 0, $cond = 0, $or74 = 0, $c_2240 = 0, $inc82 = 0, $arraydecay191 = 0, $arraydecay273 = 0, $arraydecay349 = 0, $i_2239 = 0, $inc92 = 0, $12 = 0, $row_0238 = 0, $conv104 = 0, $add410 = 0, $13 = 0, $14 = 0, $15 = 0, $c_4229 = 0, $arrayidx113 = 0, $conv119 = 0, $mul120 = 0, $cond123 = 0, $neg = 0, $shl127 = 0, $i_3195 = 0, $arrayidx134 = 0, $inc144 = 0, $tobool = 0, $lnot_ext = 0, $shl154 = 0, $add411 = 0, $add416 = 0, $19 = 0, $20 = 0, $sub450 = 0, $21 = 0, $r_0228 = 0, $div157 = 0, $col_0_be = 0, $col_0220 = 0, $tree_0219 = 0, $conv175 = 0, $sub177 = 0, $x_0200 = 0, $arraydecay218 = 0, $x_0201 = 0, $x_0 = 0, $x_1198 = 0, $x_1_in197 = 0, $mul222 = 0, $cond256 = 0, $x_1 = 0, $col_1 = 0, $cond280 = 0, $27 = 0, $30 = 0, $umax = 0, $umax259 = 0, $33 = 0, $34 = 0, $rep_0216 = 0, $col_2215 = 0, $sub289 = 0, $x_2204 = 0, $x_2206 = 0, $x_2_in205 = 0, $cond335 = 0, $x_2 = 0, $shl353 = 0, $x_3209 = 0, $arrayidx365 = 0, $x_3 = 0, $inc377 = 0, $col_2_lcssa = 0, $42 = 0, $add423 = 0, $x_4225 = 0, $div401 = 0, $conv408 = 0, $conv413 = 0, $add418 = 0, $add429 = 0, $inc433 = 0, $48 = 0, $inc455 = 0, $add458 = 0, $49 = 0, $50 = 0, $y_5234 = 0, $51 = 0, $conv463233 = 0, $x_5232 = 0, $sub473 = 0, $add475 = 0, $mul489 = 0, $53 = 0, $arrayidx491 = 0, $add507 = 0, $inc519_pre_phi = 0, $58 = 0, $conv463 = 0, $59 = 0, $60 = 0, $inc522 = 0, $i_4193 = 0, $arrayidx534 = 0, $inc538 = 0, $x_1198_1 = 0, $x_1_in197_1 = 0, $mul222_1 = 0, $cond256_1 = 0, $x_1_1 = 0, $x_0201_1 = 0, $x_0_1 = 0, $x_2206_1 = 0, $x_2_in205_1 = 0, $cond335_1 = 0, $x_2_1 = 0, $x_3209_1 = 0, $arrayidx365_1 = 0, $x_3_1 = 0, $sub412_1 = 0, $add424_1269 = 0, $x_4225_1 = 0, $div401_1 = 0, $conv408_1 = 0, $conv413_1 = 0, $add429_1 = 0, $add418_1 = 0, $inc433_1 = 0, $82 = 0, $83 = 0, $inc452 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 9736 | 0;
  $huff = __stackBase__ | 0;
  $last = __stackBase__ + 9728 | 0;
  $0 = $last;
  $mul = STACKTOP;
  STACKTOP = STACKTOP + 6 | 0;
  STACKTOP = STACKTOP + 3 >> 2 << 2;
  $buf = STACKTOP;
  STACKTOP = STACKTOP + 6948 | 0;
  HEAP16[$0 >> 1] = HEAP16[2632046] | 0;
  HEAP16[$0 + 2 >> 1] = HEAP16[2632047] | 0;
  HEAP16[$0 + 4 >> 1] = HEAP16[2632048] | 0;
  $i_0254 = 2;
  $1 = 0;
  while (1) {
    $2 = HEAP16[5264068 + ($i_0254 << 1) >> 1] | 0;
    L1788 : do {
      if (($1 & 65535) <= ($2 & 65535)) {
        $conv3250 = $2 & 65535;
        $conv9 = HEAPU16[5264068 + ($i_0254 - 2 << 1) >> 1] | 0;
        $conv23 = HEAPU16[5264068 + ($i_0254 - 1 << 1) >> 1] | 0;
        $conv25 = +((HEAPU16[5264068 + (($i_0254 | 1) << 1) >> 1] | 0) - $conv23 | 0);
        $conv30 = +($conv23 | 0);
        $c_0252 = $1 & 65535;
        while (1) {
          HEAP16[5428620 + ($c_0252 << 1) >> 1] = ~~($conv30 + +($c_0252 - $conv9 | 0) / +($conv3250 - $conv9 | 0) * $conv25 + .5);
          $inc = $c_0252 + 1 | 0;
          if (($inc | 0) > ($conv3250 | 0)) {
            break L1788;
          } else {
            $c_0252 = $inc;
          }
        }
      }
    } while (0);
    $add37 = $i_0254 + 2 | 0;
    if (($add37 | 0) < 12) {
      $i_0254 = $add37;
      $1 = $2;
    } else {
      $i_1248 = 0;
      $s_0249 = 0;
      break;
    }
  }
  while (1) {
    $conv45241 = HEAP8[$i_1248 + 5263808 | 0] << 24 >> 24;
    $shr242 = 256 >>> ($conv45241 >>> 0);
    if (($shr242 | 0) > 0) {
      $conv53 = HEAPU8[5263808 + ($i_1248 | 1) | 0] | 0;
      $smax = ($shr242 | 0) > 1 ? $shr242 : 1;
      $c_1244 = 0;
      $s_1245 = $s_0249;
      while (1) {
        HEAP16[$huff + ($s_1245 << 1) >> 1] = ($conv53 | $conv45241 << 8) & 65535;
        $inc59 = $c_1244 + 1 | 0;
        if (($inc59 | 0) < ($shr242 | 0)) {
          $c_1244 = $inc59;
          $s_1245 = $s_1245 + 1 | 0;
        } else {
          break;
        }
      }
      $s_1_lcssa = $s_0249 + $smax | 0;
    } else {
      $s_1_lcssa = $s_0249;
    }
    $add62 = $i_1248 + 2 | 0;
    if ($add62 >>> 0 < 260) {
      $i_1248 = $add62;
      $s_0249 = $s_1_lcssa;
    } else {
      break;
    }
  }
  $cond = (HEAP32[1316033] | 0) == 243 ? 2 : 3;
  $or74 = 1 << $cond - 1 | 8 - $cond << 8;
  $c_2240 = 0;
  while (1) {
    HEAP16[$huff + 9216 + ($c_2240 << 1) >> 1] = ($or74 | $c_2240 >> $cond << $cond) & 65535;
    $inc82 = $c_2240 + 1 | 0;
    if (($inc82 | 0) == 256) {
      break;
    } else {
      $c_2240 = $inc82;
    }
  }
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $i_2239 = 0;
  while (1) {
    HEAP16[$buf + ($i_2239 << 1) >> 1] = 2048;
    $inc92 = $i_2239 + 1 | 0;
    if (($inc92 | 0) == 3474) {
      break;
    } else {
      $i_2239 = $inc92;
    }
  }
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    $14 = 0;
    $13 = HEAP16[2621484] | 0;
  } else {
    $arraydecay191 = $huff + 9216 | 0;
    $arraydecay273 = $huff + 4608 | 0;
    $arraydecay349 = $huff + 5120 | 0;
    $row_0238 = 0;
    while (1) {
      $conv104 = _getbithuff(6, 0) & 65535;
      HEAP16[$mul >> 1] = $conv104;
      HEAP16[$mul + 2 >> 1] = _getbithuff(6, 0) & 65535;
      HEAP16[$mul + 4 >> 1] = _getbithuff(6, 0) & 65535;
      $add410 = $row_0238 - 1 | 0;
      $c_4229 = 0;
      $15 = $conv104;
      while (1) {
        $arrayidx113 = $last + ($c_4229 << 1) | 0;
        $conv119 = $15 << 16 >> 16;
        $mul120 = Math_imul((16777216 / (HEAP16[$arrayidx113 >> 1] << 16 >> 16 | 0) & -1) + 2047 >> 12, $conv119);
        $cond123 = ($mul120 | 0) > 65564 ? 10 : 12;
        $neg = -1 << $cond123 - 1 ^ -1;
        $shl127 = $mul120 << 12 - $cond123;
        $i_3195 = 0;
        while (1) {
          $arrayidx134 = $buf + ($c_4229 * 2316 & -1) + ($i_3195 << 1) | 0;
          HEAP16[$arrayidx134 >> 1] = Math_imul(HEAP16[$arrayidx134 >> 1] << 16 >> 16, $shl127) + $neg >> $cond123 & 65535;
          $inc144 = $i_3195 + 1 | 0;
          if (($inc144 | 0) == 1158) {
            break;
          } else {
            $i_3195 = $inc144;
          }
        }
        HEAP16[$arrayidx113 >> 1] = $15;
        $tobool = ($c_4229 | 0) != 0;
        $lnot_ext = $tobool & 1 ^ 1;
        $shl154 = $15 << 7;
        $add411 = $add410 + $c_4229 | 0;
        $add416 = 2 - $c_4229 | 0;
        $19 = $buf + ($c_4229 * 2316 & -1) + ($lnot_ext << 1) | 0;
        $20 = $buf + ($c_4229 * 2316 & -1) + 1544 | 0;
        $sub450 = 772 - ($lnot_ext << 1) | 0;
        $r_0228 = 0;
        $21 = HEAP16[2621484] | 0;
        while (1) {
          $div157 = ($21 & 65535) >>> 1;
          HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($div157 << 1) >> 1] = $shl154;
          HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($div157 << 1) >> 1] = $shl154;
          if (($div157 | 0) == 0) {
            $42 = $21;
          } else {
            $tree_0219 = 1;
            $col_0220 = $div157;
            while (1) {
              $conv175 = _getbithuff(8, $huff + ($tree_0219 << 9) | 0) << 24 >> 24;
              L1822 : do {
                if (($conv175 | 0) == 0) {
                  $col_1 = $col_0220;
                  while (1) {
                    if (($col_1 | 0) > 2) {
                      $cond280 = (_getbithuff(8, $arraydecay273) << 24 >> 24) + 1 | 0;
                    } else {
                      $cond280 = 1;
                    }
                    if (($cond280 | 0) > 0 & ($col_1 | 0) > 0) {
                      $27 = -$cond280 | 0;
                      $30 = ($col_1 - 1 | 0) >>> 1 ^ -1;
                      $umax = $27 >>> 0 > $30 >>> 0 ? $27 : $30;
                      $umax259 = $umax >>> 0 > 4294967288 ? $umax : -8;
                      $33 = $umax259 << 1;
                      $34 = -$umax259 | 0;
                      $col_2215 = $col_1;
                      $rep_0216 = 0;
                      while (1) {
                        $sub289 = $col_2215 - 2 | 0;
                        $x_2204 = $col_2215 - 1 | 0;
                        $x_2_in205 = $col_2215;
                        $x_2206 = $x_2204;
                        while (1) {
                          if ($tobool) {
                            $cond335 = ((HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_2_in205 << 1) >> 1] << 16 >> 16) + (HEAP16[$buf + ($c_4229 * 2316 & -1) + ($x_2206 << 1) >> 1] << 16 >> 16) | 0) / 2 & -1;
                          } else {
                            $cond335 = (((HEAP16[$buf + ($x_2206 << 1) >> 1] << 16 >> 16 << 1) + (HEAP16[$buf + ($x_2_in205 << 1) >> 1] << 16 >> 16) | 0) + (HEAP16[$buf + 772 + ($x_2_in205 << 1) >> 1] << 16 >> 16) | 0) / 4 & -1;
                          }
                          HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_2206 << 1) >> 1] = $cond335 & 65535;
                          $x_2 = $x_2206 - 1 | 0;
                          if (($x_2 | 0) < ($sub289 | 0)) {
                            $x_2_in205_1 = $col_2215;
                            $x_2206_1 = $x_2204;
                            break;
                          } else {
                            $x_2_in205 = $x_2206;
                            $x_2206 = $x_2;
                          }
                        }
                        while (1) {
                          if ($tobool) {
                            $cond335_1 = ((HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_2_in205_1 << 1) >> 1] << 16 >> 16) + (HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_2206_1 << 1) >> 1] << 16 >> 16) | 0) / 2 & -1;
                          } else {
                            $cond335_1 = (((HEAP16[$buf + 772 + ($x_2206_1 << 1) >> 1] << 16 >> 16 << 1) + (HEAP16[$buf + 772 + ($x_2_in205_1 << 1) >> 1] << 16 >> 16) | 0) + (HEAP16[$buf + 1544 + ($x_2_in205_1 << 1) >> 1] << 16 >> 16) | 0) / 4 & -1;
                          }
                          HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_2206_1 << 1) >> 1] = $cond335_1 & 65535;
                          $x_2_1 = $x_2206_1 - 1 | 0;
                          if (($x_2_1 | 0) < ($sub289 | 0)) {
                            break;
                          } else {
                            $x_2_in205_1 = $x_2206_1;
                            $x_2206_1 = $x_2_1;
                          }
                        }
                        L1845 : do {
                          if (($rep_0216 & 1 | 0) != 0) {
                            $shl353 = _getbithuff(8, $arraydecay349) << 24 >> 20;
                            $x_3209 = $x_2204;
                            while (1) {
                              $arrayidx365 = $buf + ($c_4229 * 2316 & -1) + 772 + ($x_3209 << 1) | 0;
                              HEAP16[$arrayidx365 >> 1] = (HEAPU16[$arrayidx365 >> 1] | 0) + $shl353 & 65535;
                              $x_3 = $x_3209 - 1 | 0;
                              if (($x_3 | 0) < ($sub289 | 0)) {
                                $x_3209_1 = $x_2204;
                                break;
                              } else {
                                $x_3209 = $x_3;
                              }
                            }
                            while (1) {
                              $arrayidx365_1 = $buf + ($c_4229 * 2316 & -1) + 1544 + ($x_3209_1 << 1) | 0;
                              HEAP16[$arrayidx365_1 >> 1] = (HEAPU16[$arrayidx365_1 >> 1] | 0) + $shl353 & 65535;
                              $x_3_1 = $x_3209_1 - 1 | 0;
                              if (($x_3_1 | 0) < ($sub289 | 0)) {
                                break L1845;
                              } else {
                                $x_3209_1 = $x_3_1;
                              }
                            }
                          }
                        } while (0);
                        $inc377 = $rep_0216 + 1 | 0;
                        if (($inc377 | 0) == ($34 | 0)) {
                          break;
                        } else {
                          $col_2215 = $sub289;
                          $rep_0216 = $inc377;
                        }
                      }
                      $col_2_lcssa = $col_1 + $33 | 0;
                    } else {
                      $col_2_lcssa = $col_1;
                    }
                    if (($cond280 | 0) == 9) {
                      $col_1 = $col_2_lcssa;
                    } else {
                      $col_0_be = $col_2_lcssa;
                      break L1822;
                    }
                  }
                } else {
                  $sub177 = $col_0220 - 2 | 0;
                  $x_0200 = $col_0220 - 1 | 0;
                  if (($conv175 | 0) == 8) {
                    $x_0201 = $x_0200;
                    while (1) {
                      HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_0201 << 1) >> 1] = Math_imul($conv119, _getbithuff(8, $arraydecay191) & 255) & 65535;
                      $x_0 = $x_0201 - 1 | 0;
                      if (($x_0 | 0) < ($sub177 | 0)) {
                        $x_0201_1 = $x_0200;
                        break;
                      } else {
                        $x_0201 = $x_0;
                      }
                    }
                    while (1) {
                      HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_0201_1 << 1) >> 1] = Math_imul($conv119, _getbithuff(8, $arraydecay191) & 255) & 65535;
                      $x_0_1 = $x_0201_1 - 1 | 0;
                      if (($x_0_1 | 0) < ($sub177 | 0)) {
                        $col_0_be = $sub177;
                        break L1822;
                      } else {
                        $x_0201_1 = $x_0_1;
                      }
                    }
                  }
                  $arraydecay218 = $huff + ($conv175 + 10 << 9) | 0;
                  $x_1_in197 = $col_0220;
                  $x_1198 = $x_0200;
                  while (1) {
                    $mul222 = _getbithuff(8, $arraydecay218) << 24 >> 20;
                    if ($tobool) {
                      $cond256 = ((HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_1_in197 << 1) >> 1] << 16 >> 16) + (HEAP16[$buf + ($c_4229 * 2316 & -1) + ($x_1198 << 1) >> 1] << 16 >> 16) | 0) / 2 & -1;
                    } else {
                      $cond256 = (((HEAP16[$buf + ($x_1198 << 1) >> 1] << 16 >> 16 << 1) + (HEAP16[$buf + ($x_1_in197 << 1) >> 1] << 16 >> 16) | 0) + (HEAP16[$buf + 772 + ($x_1_in197 << 1) >> 1] << 16 >> 16) | 0) / 4 & -1;
                    }
                    HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_1198 << 1) >> 1] = $cond256 + $mul222 & 65535;
                    $x_1 = $x_1198 - 1 | 0;
                    if (($x_1 | 0) < ($sub177 | 0)) {
                      $x_1_in197_1 = $col_0220;
                      $x_1198_1 = $x_0200;
                      break;
                    } else {
                      $x_1_in197 = $x_1198;
                      $x_1198 = $x_1;
                    }
                  }
                  while (1) {
                    $mul222_1 = _getbithuff(8, $arraydecay218) << 24 >> 20;
                    if ($tobool) {
                      $cond256_1 = ((HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_1_in197_1 << 1) >> 1] << 16 >> 16) + (HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_1198_1 << 1) >> 1] << 16 >> 16) | 0) / 2 & -1;
                    } else {
                      $cond256_1 = (((HEAP16[$buf + 772 + ($x_1198_1 << 1) >> 1] << 16 >> 16 << 1) + (HEAP16[$buf + 772 + ($x_1_in197_1 << 1) >> 1] << 16 >> 16) | 0) + (HEAP16[$buf + 1544 + ($x_1_in197_1 << 1) >> 1] << 16 >> 16) | 0) / 4 & -1;
                    }
                    HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_1198_1 << 1) >> 1] = $cond256_1 + $mul222_1 & 65535;
                    $x_1_1 = $x_1198_1 - 1 | 0;
                    if (($x_1_1 | 0) < ($sub177 | 0)) {
                      $col_0_be = $sub177;
                      break L1822;
                    } else {
                      $x_1_in197_1 = $x_1198_1;
                      $x_1198_1 = $x_1_1;
                    }
                  }
                }
              } while (0);
              if (($col_0_be | 0) > 0) {
                $tree_0219 = $conv175;
                $col_0220 = $col_0_be;
              } else {
                break;
              }
            }
            $42 = HEAP16[2621484] | 0;
          }
          $add423 = ($r_0228 << 1) + $row_0238 | 0;
          L1876 : do {
            if (($42 & 65535) > 1) {
              $x_4225 = 0;
              while (1) {
                $div401 = (HEAP16[$buf + ($c_4229 * 2316 & -1) + 772 + ($x_4225 << 1) >> 1] << 16 >> 16 << 4 | 0) / ($conv119 | 0) & -1;
                $conv408 = ($div401 | 0) < 0 ? 0 : $div401 & 65535;
                $conv413 = HEAPU16[2622498] | 0;
                if ($tobool) {
                  $add418 = ($add416 + ($x_4225 << 1) | 0) + Math_imul($conv413, $add411) | 0;
                  HEAP16[(HEAP32[1311250] | 0) + ($add418 << 1) >> 1] = $conv408;
                } else {
                  $add429 = ($x_4225 << 1) + Math_imul($conv413, $add423) | 0;
                  HEAP16[(HEAP32[1311250] | 0) + ($add429 << 1) >> 1] = $conv408;
                }
                $inc433 = $x_4225 + 1 | 0;
                $48 = HEAP16[2621484] | 0;
                if (($inc433 | 0) < (($48 & 65535) >>> 1 | 0)) {
                  $x_4225 = $inc433;
                } else {
                  break;
                }
              }
              if (($48 & 65535) <= 1) {
                $83 = $48;
                break;
              }
              $sub412_1 = $add411 + 2 | 0;
              $add424_1269 = $add423 | 1;
              $x_4225_1 = 0;
              while (1) {
                $div401_1 = (HEAP16[$buf + ($c_4229 * 2316 & -1) + 1544 + ($x_4225_1 << 1) >> 1] << 16 >> 16 << 4 | 0) / ($conv119 | 0) & -1;
                $conv408_1 = ($div401_1 | 0) < 0 ? 0 : $div401_1 & 65535;
                $conv413_1 = HEAPU16[2622498] | 0;
                if ($tobool) {
                  $add418_1 = ($add416 + ($x_4225_1 << 1) | 0) + Math_imul($conv413_1, $sub412_1) | 0;
                  HEAP16[(HEAP32[1311250] | 0) + ($add418_1 << 1) >> 1] = $conv408_1;
                } else {
                  $add429_1 = ($x_4225_1 << 1 | 1) + Math_imul($conv413_1, $add424_1269) | 0;
                  HEAP16[(HEAP32[1311250] | 0) + ($add429_1 << 1) >> 1] = $conv408_1;
                }
                $inc433_1 = $x_4225_1 + 1 | 0;
                $82 = HEAP16[2621484] | 0;
                if (($inc433_1 | 0) < (($82 & 65535) >>> 1 | 0)) {
                  $x_4225_1 = $inc433_1;
                } else {
                  $83 = $82;
                  break L1876;
                }
              }
            } else {
              $83 = $42;
            }
          } while (0);
          _memcpy($19, $20, $sub450);
          $inc452 = $r_0228 + 1 | 0;
          if (($inc452 | 0) > ($lnot_ext | 0)) {
            break;
          } else {
            $r_0228 = $inc452;
            $21 = $83;
          }
        }
        $inc455 = $c_4229 + 1 | 0;
        if (($inc455 | 0) == 3) {
          break;
        }
        $c_4229 = $inc455;
        $15 = HEAP16[$mul + ($inc455 << 1) >> 1] | 0;
      }
      $add458 = $row_0238 + 4 | 0;
      $y_5234 = $row_0238;
      $50 = $83;
      $49 = $83;
      while (1) {
        L1897 : do {
          if ($50 << 16 >> 16 == 0) {
            $60 = 0;
            $59 = $49;
          } else {
            $x_5232 = 0;
            $conv463233 = $50 & 65535;
            $51 = $49;
            while (1) {
              if (($x_5232 + $y_5234 & 1 | 0) == 0) {
                $58 = $51;
                $inc519_pre_phi = $x_5232 + 1 | 0;
              } else {
                $sub473 = $x_5232 - 1 | 0;
                $add475 = $x_5232 + 1 | 0;
                $mul489 = Math_imul(HEAPU16[2622498] | 0, $y_5234);
                $53 = HEAP32[1311250] | 0;
                $arrayidx491 = $53 + ($mul489 + $x_5232 << 1) | 0;
                $add507 = (((HEAPU16[$arrayidx491 >> 1] | 0) << 1) - 4096 | 0) + (((HEAPU16[$53 + ($mul489 + (($add475 | 0) < ($conv463233 | 0) ? $add475 : $sub473) << 1) >> 1] | 0) + (HEAPU16[$53 + ($mul489 + (($x_5232 | 0) != 0 ? $sub473 : $add475) << 1) >> 1] | 0) | 0) >>> 1) | 0;
                HEAP16[$arrayidx491 >> 1] = ($add507 | 0) < 0 ? 0 : $add507 & 65535;
                $58 = HEAP16[2621484] | 0;
                $inc519_pre_phi = $add475;
              }
              $conv463 = $58 & 65535;
              if (($inc519_pre_phi | 0) < ($conv463 | 0)) {
                $x_5232 = $inc519_pre_phi;
                $conv463233 = $conv463;
                $51 = $58;
              } else {
                $60 = $58;
                $59 = $58;
                break L1897;
              }
            }
          }
        } while (0);
        $inc522 = $y_5234 + 1 | 0;
        if (($inc522 | 0) < ($add458 | 0)) {
          $y_5234 = $inc522;
          $50 = $60;
          $49 = $59;
        } else {
          break;
        }
      }
      $12 = HEAP16[2699404] | 0;
      if (($add458 | 0) < ($12 & 65535 | 0)) {
        $row_0238 = $add458;
      } else {
        break;
      }
    }
    $14 = $12 & 65535;
    $13 = $59;
  }
  if ((Math_imul($13 & 65535, $14) | 0) == 0) {
    HEAP32[1315898] = 16383;
    STACKTOP = __stackBase__;
    return;
  } else {
    $i_4193 = 0;
  }
  while (1) {
    $arrayidx534 = (HEAP32[1311250] | 0) + ($i_4193 << 1) | 0;
    HEAP16[$arrayidx534 >> 1] = HEAP16[5428620 + ((HEAPU16[$arrayidx534 >> 1] | 0) << 1) >> 1] | 0;
    $inc538 = $i_4193 + 1 | 0;
    if (($inc538 | 0) < (Math_imul(HEAPU16[2621484] | 0, HEAPU16[2699404] | 0) | 0)) {
      $i_4193 = $inc538;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 16383;
  STACKTOP = __stackBase__;
  return;
}
function _kodak_dc120_load_raw() {
  var $pixel = 0, $arraydecay = 0, $row_014 = 0, $and = 0, $mul = 0, $add = 0, $col_011 = 0, $conv13 = 0, $add16 = 0, $inc = 0, $inc19 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 848 | 0;
  $pixel = __stackBase__ | 0;
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    HEAP32[1315898] = 255;
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = $pixel | 0;
  $row_014 = 0;
  while (1) {
    if ((_fread($arraydecay | 0, 1, 848, HEAP32[1316053] | 0) | 0) >>> 0 < 848) {
      _derror();
    }
    $and = $row_014 & 3;
    $mul = Math_imul(HEAP32[5264100 + ($and << 2) >> 2] | 0, $row_014);
    $add = $mul + (HEAP32[5264116 + ($and << 2) >> 2] | 0) | 0;
    L1924 : do {
      if (HEAP16[2621484] << 16 >> 16 != 0) {
        $col_011 = 0;
        while (1) {
          $conv13 = HEAPU8[$pixel + ($add + $col_011 | 0) % 848 | 0] | 0;
          $add16 = Math_imul(HEAPU16[2622498] | 0, $row_014) + $col_011 | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add16 << 1) >> 1] = $conv13;
          $inc = $col_011 + 1 | 0;
          if (($inc | 0) < (HEAPU16[2621484] | 0 | 0)) {
            $col_011 = $inc;
          } else {
            break L1924;
          }
        }
      }
    } while (0);
    $inc19 = $row_014 + 1 | 0;
    if (($inc19 | 0) < (HEAPU16[2699404] | 0 | 0)) {
      $row_014 = $inc19;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 255;
  STACKTOP = __stackBase__;
  return;
}
function _eight_bit_load_raw() {
  var $conv = 0, $call_i = 0, $4 = 0, $5 = 0, $6 = 0, $row_017 = 0, $call4 = 0, $8 = 0, $9 = 0, $conv914 = 0, $col_013 = 0, $11 = 0, $add = 0, $inc = 0, $13 = 0, $conv9 = 0, $14 = 0, $inc17 = 0, $16 = 0, $conv19 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $conv = HEAPU16[2622498] | 0;
  $call_i = _malloc($conv) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5586164, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $conv | 0);
  }
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    _free($call_i);
    $16 = HEAP16[2714565] | 0;
    $conv19 = $16 & 65535;
    HEAP32[1315898] = $conv19;
    STACKTOP = __stackBase__;
    return;
  }
  $row_017 = 0;
  $6 = HEAP16[2622498] | 0;
  while (1) {
    $call4 = _fread($call_i | 0, 1, $6 & 65535 | 0, HEAP32[1316053] | 0) | 0;
    $8 = HEAP16[2622498] | 0;
    if ($call4 >>> 0 < ($8 & 65535) >>> 0) {
      _derror();
      $9 = HEAP16[2622498] | 0;
    } else {
      $9 = $8;
    }
    L1944 : do {
      if ($9 << 16 >> 16 == 0) {
        $14 = 0;
      } else {
        $col_013 = 0;
        $conv914 = $9 & 65535;
        while (1) {
          $11 = HEAP16[5428620 + ((HEAPU8[$call_i + $col_013 | 0] | 0) << 1) >> 1] | 0;
          $add = Math_imul($conv914, $row_017) + $col_013 | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add << 1) >> 1] = $11;
          $inc = $col_013 + 1 | 0;
          $13 = HEAP16[2622498] | 0;
          $conv9 = $13 & 65535;
          if ($inc >>> 0 < $conv9 >>> 0) {
            $col_013 = $inc;
            $conv914 = $conv9;
          } else {
            $14 = $13;
            break L1944;
          }
        }
      }
    } while (0);
    $inc17 = $row_017 + 1 | 0;
    if ($inc17 >>> 0 < (HEAPU16[2622502] | 0) >>> 0) {
      $row_017 = $inc17;
      $6 = $14;
    } else {
      break;
    }
  }
  _free($call_i);
  $16 = HEAP16[2714565] | 0;
  $conv19 = $16 & 65535;
  HEAP32[1315898] = $conv19;
  STACKTOP = __stackBase__;
  return;
}
function _kodak_65000_decode($out, $bsize) {
  $out = $out | 0;
  $bsize = $bsize | 0;
  var $blen = 0, $raw = 0, $call = 0, $add = 0, $and = 0, $i_0 = 0, $call1 = 0, $conv4 = 0, $conv9 = 0, $2 = 0, $arraydecay = 0, $3 = 0, $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx33 = 0, $arrayidx37 = 0, $arrayidx42 = 0, $i_153 = 0, $cmp1_i = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $add5750 = 0, $add61 = 0, $shl71 = 0, $call73 = 0, $add75$0 = 0, $bitbuf_1_ph$0 = 0, $bitbuf_1_ph$1 = 0, $bits_1_ph = 0, $i_260 = 0, $bits_159 = 0, $bitbuf_158$0 = 0, $bitbuf_158$1 = 0, $14 = 0, $conv82 = 0, $call90 = 0, $add94$0 = 0, $add94$1 = 0, $call90_1 = 0, $add94_1$0 = 0, $add94_1$1 = 0, $call90_2 = 0, $add94_2$0 = 0, $add94_2$1 = 0, $call90_3 = 0, $add94_3$0 = 0, $bitbuf_3$0 = 0, $bitbuf_3$1 = 0, $bits_2 = 0, $conv103 = 0, $diff_0 = 0, $inc120 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0, $shl93$0 = 0, $shl93$1 = 0, $shl93_1$0 = 0, $shl93_1$1 = 0, $shl93_2$0 = 0, $shl93_2$1 = 0, $shl93_3$0 = 0, $shl93_3$1 = 0, $shr105$0 = 0, $shr105$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 780 | 0;
  $blen = __stackBase__ | 0;
  $raw = __stackBase__ + 768 | 0;
  $call = _ftell(HEAP32[1316053] | 0) | 0;
  $add = $bsize + 3 | 0;
  $and = $add & -4;
  $i_0 = 0;
  while (1) {
    if (($i_0 | 0) >= ($and | 0)) {
      break;
    }
    $call1 = _fgetc(HEAP32[1316053] | 0) | 0;
    $conv4 = $call1 & 15;
    HEAP8[$blen + $i_0 | 0] = $conv4;
    if (($conv4 & 255) > 12) {
      label = 1378;
      break;
    }
    $conv9 = $call1 >>> 4 & 15;
    HEAP8[$blen + ($i_0 | 1) | 0] = $conv9;
    if (($conv9 & 255) > 12) {
      label = 1378;
      break;
    } else {
      $i_0 = $i_0 + 2 | 0;
    }
  }
  if ((label | 0) == 1378) {
    $2 = HEAP32[1316053] | 0;
    _fseek($2 | 0, $call | 0, 0);
    if (($and | 0) <= 0) {
      $retval_0 = 1;
      STACKTOP = __stackBase__;
      return $retval_0 | 0;
    }
    $arraydecay = $raw | 0;
    $3 = $raw;
    $arrayidx23 = $raw + 4 | 0;
    $arrayidx27 = $raw + 8 | 0;
    $arrayidx33 = $raw + 2 | 0;
    $arrayidx37 = $raw + 6 | 0;
    $arrayidx42 = $raw + 10 | 0;
    $i_153 = 0;
    while (1) {
      if ((_fread($3 | 0, 2, 6, HEAP32[1316053] | 0) | 0) >>> 0 < 6) {
        _derror();
      }
      $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
      if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
        _swab($3 | 0, $3 | 0, 12);
      }
      $6 = HEAP16[$arraydecay >> 1] | 0;
      $7 = HEAP16[$arrayidx23 >> 1] | 0;
      $8 = HEAP16[$arrayidx27 >> 1] | 0;
      HEAP16[$out + ($i_153 << 1) >> 1] = ($7 & 65535) >>> 12 << 4 | ($6 & 65535) >>> 12 << 8 | ($8 & 65535) >>> 12;
      $9 = HEAP16[$arrayidx33 >> 1] | 0;
      $10 = HEAP16[$arrayidx37 >> 1] | 0;
      $11 = HEAP16[$arrayidx42 >> 1] | 0;
      HEAP16[$out + (($i_153 | 1) << 1) >> 1] = ($10 & 65535) >>> 12 << 4 | ($9 & 65535) >>> 12 << 8 | ($11 & 65535) >>> 12;
      $add5750 = $i_153 | 2;
      HEAP16[$out + ($add5750 << 1) >> 1] = $6 & 4095;
      HEAP16[$out + (($i_153 | 3) << 1) >> 1] = $9 & 4095;
      HEAP16[$out + ($add5750 + 2 << 1) >> 1] = $7 & 4095;
      HEAP16[$out + ($add5750 + 3 << 1) >> 1] = $10 & 4095;
      HEAP16[$out + (($i_153 | 6) << 1) >> 1] = $8 & 4095;
      HEAP16[$out + (($i_153 | 7) << 1) >> 1] = $11 & 4095;
      $add61 = $i_153 + 8 | 0;
      if (($add61 | 0) < ($and | 0)) {
        $i_153 = $add61;
      } else {
        $retval_0 = 1;
        break;
      }
    }
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  if (($add & 4 | 0) == 0) {
    $bits_1_ph = 0;
    $bitbuf_1_ph$1 = 0;
    $bitbuf_1_ph$0 = 0;
  } else {
    $shl71 = _fgetc(HEAP32[1316053] | 0) << 8;
    $call73 = _fgetc(HEAP32[1316053] | 0) | 0;
    $add75$0 = (i64Math_add($call73 | 0, (($call73 | 0) < 0 ? -1 : 0) | 0, $shl71 | 0, (($shl71 | 0) < 0 ? -1 : 0) | 0), HEAP32[tempDoublePtr >> 2] | 0);
    $bits_1_ph = 16;
    $bitbuf_1_ph$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $bitbuf_1_ph$0 = $add75$0;
  }
  if (($and | 0) > 0) {
    $bitbuf_158$1 = $bitbuf_1_ph$1;
    $bitbuf_158$0 = $bitbuf_1_ph$0;
    $bits_159 = $bits_1_ph;
    $i_260 = 0;
  } else {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  while (1) {
    $14 = HEAP8[$blen + $i_260 | 0] | 0;
    $conv82 = $14 & 255;
    if (($bits_159 | 0) < ($conv82 | 0)) {
      $call90 = _fgetc(HEAP32[1316053] | 0) | 0;
      Runtime_bitshift64($call90 | 0, (($call90 | 0) < 0 ? -1 : 0) | 0, 0, $bits_159 + 8 | 0);
      $shl93$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl93$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $add94$0 = (i64Math_add($shl93$0 | 0, $shl93$1 | 0, $bitbuf_158$0 | 0, $bitbuf_158$1 | 0), HEAP32[tempDoublePtr >> 2] | 0);
      $add94$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $call90_1 = _fgetc(HEAP32[1316053] | 0) | 0;
      Runtime_bitshift64($call90_1 | 0, (($call90_1 | 0) < 0 ? -1 : 0) | 0, 0, $bits_159 | 0);
      $shl93_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl93_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $add94_1$0 = (i64Math_add($shl93_1$0 | 0, $shl93_1$1 | 0, $add94$0 | 0, $add94$1 | 0), HEAP32[tempDoublePtr >> 2] | 0);
      $add94_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $call90_2 = _fgetc(HEAP32[1316053] | 0) | 0;
      Runtime_bitshift64($call90_2 | 0, (($call90_2 | 0) < 0 ? -1 : 0) | 0, 0, $bits_159 + 24 | 0);
      $shl93_2$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl93_2$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $add94_2$0 = (i64Math_add($shl93_2$0 | 0, $shl93_2$1 | 0, $add94_1$0 | 0, $add94_1$1 | 0), HEAP32[tempDoublePtr >> 2] | 0);
      $add94_2$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $call90_3 = _fgetc(HEAP32[1316053] | 0) | 0;
      Runtime_bitshift64($call90_3 | 0, (($call90_3 | 0) < 0 ? -1 : 0) | 0, 0, $bits_159 + 16 | 0);
      $shl93_3$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl93_3$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $add94_3$0 = (i64Math_add($shl93_3$0 | 0, $shl93_3$1 | 0, $add94_2$0 | 0, $add94_2$1 | 0), HEAP32[tempDoublePtr >> 2] | 0);
      $bits_2 = $bits_159 + 32 | 0;
      $bitbuf_3$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $bitbuf_3$0 = $add94_3$0;
    } else {
      $bits_2 = $bits_159;
      $bitbuf_3$1 = $bitbuf_158$1;
      $bitbuf_3$0 = $bitbuf_158$0;
    }
    $conv103 = $bitbuf_3$0 & 65535 >>> ((16 - $conv82 | 0) >>> 0);
    Runtime_bitshift64($bitbuf_3$0 | 0, $bitbuf_3$1 | 0, 1, $14 & 255 | 0);
    $shr105$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr105$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    if (($conv103 & 1 << $conv82 - 1 | 0) == 0) {
      $diff_0 = ((-1 << $conv82) + 1 | 0) + $conv103 | 0;
    } else {
      $diff_0 = $conv103;
    }
    HEAP16[$out + ($i_260 << 1) >> 1] = $diff_0 & 65535;
    $inc120 = $i_260 + 1 | 0;
    if (($inc120 | 0) == ($and | 0)) {
      $retval_0 = 0;
      break;
    } else {
      $bitbuf_158$1 = $shr105$1;
      $bitbuf_158$0 = $shr105$0;
      $bits_159 = $bits_2 - $conv82 | 0;
      $i_260 = $inc120;
    }
  }
  STACKTOP = __stackBase__;
  return $retval_0 | 0;
}
function _kodak_65000_load_raw() {
  var $buf = 0, $pred = 0, $0 = 0, $arrayidx = 0, $arrayidx7 = 0, $arraydecay = 0, $_pre = 0, $1 = 0, $2 = 0, $3 = 0, $row_022 = 0, $4 = 0, $indvars_iv = 0, $col_017 = 0, $conv8 = 0, $sub = 0, $_sub = 0, $call = 0, $tobool = 0, $5 = 0, $7 = 0, $i_014 = 0, $conv19 = 0, $arrayidx23 = 0, $add = 0, $cond25 = 0, $10 = 0, $add29 = 0, $inc = 0, $add34 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $inc37 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 520 | 0;
  $buf = __stackBase__ | 0;
  $pred = __stackBase__ + 512 | 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx = $pred + 4 | 0;
  $arrayidx7 = $pred | 0;
  $arraydecay = $buf | 0;
  $_pre = HEAP16[2621484] | 0;
  $row_022 = 0;
  $3 = $_pre;
  $2 = $0;
  $1 = $_pre;
  while (1) {
    if ($3 << 16 >> 16 == 0) {
      $16 = 0;
      $15 = $2;
      $14 = $1;
    } else {
      $col_017 = 0;
      $indvars_iv = -1;
      $4 = $1;
      while (1) {
        HEAP32[$arrayidx >> 2] = 0;
        HEAP32[$arrayidx7 >> 2] = 0;
        $conv8 = $4 & 65535;
        $sub = $conv8 - $col_017 | 0;
        $_sub = ($sub | 0) > 256 ? 256 : $sub;
        $call = _kodak_65000_decode($arraydecay, $_sub) | 0;
        L1993 : do {
          if (($_sub | 0) > 0) {
            $tobool = ($call | 0) == 0;
            $5 = $indvars_iv - $conv8 | 0;
            $7 = ($5 | 0) > -257 ? $5 ^ -1 : 256;
            $i_014 = 0;
            while (1) {
              $conv19 = HEAP16[$buf + ($i_014 << 1) >> 1] << 16 >> 16;
              if ($tobool) {
                $arrayidx23 = $pred + (($i_014 & 1) << 2) | 0;
                $add = (HEAP32[$arrayidx23 >> 2] | 0) + $conv19 | 0;
                HEAP32[$arrayidx23 >> 2] = $add;
                $cond25 = $add;
              } else {
                $cond25 = $conv19;
              }
              $10 = HEAP16[5428620 + ($cond25 << 1) >> 1] | 0;
              $add29 = ($i_014 + $col_017 | 0) + Math_imul(HEAPU16[2622498] | 0, $row_022) | 0;
              HEAP16[(HEAP32[1311250] | 0) + ($add29 << 1) >> 1] = $10;
              if (($10 & 65535) > 4095) {
                _derror();
              }
              $inc = $i_014 + 1 | 0;
              if (($inc | 0) == ($7 | 0)) {
                break L1993;
              } else {
                $i_014 = $inc;
              }
            }
          }
        } while (0);
        $add34 = $col_017 + 256 | 0;
        $13 = HEAP16[2621484] | 0;
        if (($add34 | 0) < ($13 & 65535 | 0)) {
          $col_017 = $add34;
          $indvars_iv = $indvars_iv + 256 | 0;
          $4 = $13;
        } else {
          break;
        }
      }
      $16 = $13;
      $15 = HEAP16[2699404] | 0;
      $14 = $13;
    }
    $inc37 = $row_022 + 1 | 0;
    if (($inc37 | 0) < ($15 & 65535 | 0)) {
      $row_022 = $inc37;
      $3 = $16;
      $2 = $15;
      $1 = $14;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _kodak_ycbcr_load_raw() {
  var $y = 0, $0 = 0, $arraydecay = 0, $arrayidx12 = 0, $arrayidx14 = 0, $1 = 0, $2 = 0, $row_054 = 0, $conv351 = 0, $col_050 = 0, $sub = 0, $_sub = 0, $bp_047 = 0, $cr_046 = 0, $cb_045 = 0, $i_044 = 0, $add = 0, $add24 = 0, $shr = 0, $add30 = 0, $add33 = 0, $add53 = 0, $bp_142 = 0, $j_041 = 0, $add50 = 0, $arrayidx44 = 0, $add46 = 0, $add55 = 0, $8 = 0, $add65 = 0, $cond95 = 0, $add65_1 = 0, $add105 = 0, $add108 = 0, $10 = 0, $conv3 = 0, $11 = 0, $12 = 0, $add111 = 0, $cond95_1 = 0, $add65_2 = 0, $cond95_2 = 0, $add46_1 = 0, $add55_1 = 0, $17 = 0, $add65_159 = 0, $cond95_164 = 0, $add65_1_1 = 0, $cond95_1_1 = 0, $add65_2_1 = 0, $cond95_2_1 = 0, $inc102 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  $y = __stackBase__ + 768 | 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = __stackBase__ | 0;
  $arrayidx12 = $y + 12 | 0;
  $arrayidx14 = $y + 4 | 0;
  $row_054 = 0;
  $2 = HEAP16[2621484] | 0;
  $1 = $0;
  while (1) {
    if ($2 << 16 >> 16 == 0) {
      $12 = 0;
      $11 = $1;
    } else {
      $col_050 = 0;
      $conv351 = $2 & 65535;
      while (1) {
        $sub = $conv351 - $col_050 | 0;
        $_sub = ($sub | 0) > 128 ? 128 : $sub;
        _kodak_65000_decode($arraydecay, $_sub * 3 & -1);
        HEAP32[$arrayidx12 >> 2] = 0;
        HEAP32[$arrayidx14 >> 2] = 0;
        L2017 : do {
          if (($_sub | 0) > 0) {
            $i_044 = 0;
            $cb_045 = 0;
            $cr_046 = 0;
            $bp_047 = $arraydecay;
            while (1) {
              $add = (HEAP16[$bp_047 + 8 >> 1] << 16 >> 16) + $cb_045 | 0;
              $add24 = (HEAP16[$bp_047 + 10 >> 1] << 16 >> 16) + $cr_046 | 0;
              $shr = ($add + 2 | 0) + $add24 >> 2;
              $add30 = $add - $shr | 0;
              $add33 = $add24 - $shr | 0;
              $add53 = $i_044 + $col_050 | 0;
              $j_041 = 0;
              $bp_142 = $bp_047;
              while (1) {
                $add50 = $j_041 + $row_054 | 0;
                $arrayidx44 = $y + ($j_041 << 3) + 4 | 0;
                $add46 = (HEAP16[$bp_142 >> 1] << 16 >> 16) + (HEAP32[$arrayidx44 >> 2] | 0) | 0;
                HEAP32[$y + ($j_041 << 3) >> 2] = $add46;
                if ($add46 >>> 0 > 1023) {
                  _derror();
                }
                $add55 = $add53 + Math_imul(HEAPU16[2621484] | 0, $add50) | 0;
                $8 = HEAP32[1316051] | 0;
                $add65 = $add33 + $add46 | 0;
                if (($add65 | 0) < 0) {
                  $cond95 = 0;
                } else {
                  $cond95 = ($add65 | 0) < 4095 ? $add65 : 4095;
                }
                HEAP16[$8 + ($add55 << 3) >> 1] = HEAP16[5428620 + ($cond95 << 1) >> 1] | 0;
                $add65_1 = $add46 - $shr | 0;
                if (($add65_1 | 0) < 0) {
                  $cond95_1 = 0;
                } else {
                  $cond95_1 = ($add65_1 | 0) < 4095 ? $add65_1 : 4095;
                }
                HEAP16[$8 + ($add55 << 3) + 2 >> 1] = HEAP16[5428620 + ($cond95_1 << 1) >> 1] | 0;
                $add65_2 = $add30 + $add46 | 0;
                if (($add65_2 | 0) < 0) {
                  $cond95_2 = 0;
                } else {
                  $cond95_2 = ($add65_2 | 0) < 4095 ? $add65_2 : 4095;
                }
                HEAP16[$8 + ($add55 << 3) + 4 >> 1] = HEAP16[5428620 + ($cond95_2 << 1) >> 1] | 0;
                $add46_1 = (HEAP16[$bp_142 + 2 >> 1] << 16 >> 16) + $add46 | 0;
                HEAP32[$arrayidx44 >> 2] = $add46_1;
                if ($add46_1 >>> 0 > 1023) {
                  _derror();
                }
                $add55_1 = ($add53 | 1) + Math_imul(HEAPU16[2621484] | 0, $add50) | 0;
                $17 = HEAP32[1316051] | 0;
                $add65_159 = $add33 + $add46_1 | 0;
                if (($add65_159 | 0) < 0) {
                  $cond95_164 = 0;
                } else {
                  $cond95_164 = ($add65_159 | 0) < 4095 ? $add65_159 : 4095;
                }
                HEAP16[$17 + ($add55_1 << 3) >> 1] = HEAP16[5428620 + ($cond95_164 << 1) >> 1] | 0;
                $add65_1_1 = $add46_1 - $shr | 0;
                if (($add65_1_1 | 0) < 0) {
                  $cond95_1_1 = 0;
                } else {
                  $cond95_1_1 = ($add65_1_1 | 0) < 4095 ? $add65_1_1 : 4095;
                }
                HEAP16[$17 + ($add55_1 << 3) + 2 >> 1] = HEAP16[5428620 + ($cond95_1_1 << 1) >> 1] | 0;
                $add65_2_1 = $add30 + $add46_1 | 0;
                if (($add65_2_1 | 0) < 0) {
                  $cond95_2_1 = 0;
                } else {
                  $cond95_2_1 = ($add65_2_1 | 0) < 4095 ? $add65_2_1 : 4095;
                }
                HEAP16[$17 + ($add55_1 << 3) + 4 >> 1] = HEAP16[5428620 + ($cond95_2_1 << 1) >> 1] | 0;
                $inc102 = $j_041 + 1 | 0;
                if (($inc102 | 0) == 2) {
                  break;
                }
                $j_041 = $inc102;
                $bp_142 = $bp_142 + 4 | 0;
              }
              $add105 = $i_044 + 2 | 0;
              if (($add105 | 0) < ($_sub | 0)) {
                $i_044 = $add105;
                $cb_045 = $add;
                $cr_046 = $add24;
                $bp_047 = $bp_047 + 12 | 0;
              } else {
                break L2017;
              }
            }
          }
        } while (0);
        $add108 = $col_050 + 128 | 0;
        $10 = HEAP16[2621484] | 0;
        $conv3 = $10 & 65535;
        if (($add108 | 0) < ($conv3 | 0)) {
          $col_050 = $add108;
          $conv351 = $conv3;
        } else {
          break;
        }
      }
      $12 = $10;
      $11 = HEAP16[2699404] | 0;
    }
    $add111 = $row_054 + 2 | 0;
    if (($add111 | 0) < ($11 & 65535 | 0)) {
      $row_054 = $add111;
      $2 = $12;
      $1 = $11;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _kodak_yrgb_load_raw() {
  var $0 = 0, $req_0_i = 0, $call_i = 0, $4 = 0, $5 = 0, $row_032 = 0, $neg = 0, $9 = 0, $col_029 = 0, $conv14 = 0, $add20 = 0, $conv22 = 0, $sub29 = 0, $sub32 = 0, $add35 = 0, $add38 = 0, $cond61 = 0, $14 = 0, $add65 = 0, $inc72 = 0, $17 = 0, $conv74 = 0, $cond61_1 = 0, $18 = 0, $add65_1 = 0, $cond61_2 = 0, $21 = 0, $add65_2 = 0, $inc69 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = HEAP16[2622498] | 0;
  if ($0 << 16 >> 16 == 0) {
    $req_0_i = 0;
  } else {
    $req_0_i = ($0 & 65535) * 3 & -1;
  }
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = HEAP32[1316054] | 0;
    _fprintf($4 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 5586004, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    _free($call_i);
    $17 = HEAP16[2714565] | 0;
    $conv74 = $17 & 65535;
    HEAP32[1315898] = $conv74;
    STACKTOP = __stackBase__;
    return;
  } else {
    $row_032 = 0;
  }
  while (1) {
    $neg = $row_032 & 1;
    do {
      if (($neg | 0) == 0) {
        if ((_fread($call_i | 0, HEAPU16[2622498] | 0 | 0, 3, HEAP32[1316053] | 0) | 0) >>> 0 >= 3) {
          break;
        }
        _derror();
      }
    } while (0);
    L2070 : do {
      if (HEAP16[2622498] << 16 >> 16 != 0) {
        $9 = -$neg | 0;
        $col_029 = 0;
        while (1) {
          $conv14 = HEAPU16[2621484] | 0;
          $add20 = $conv14 + ($col_029 & -2) | 0;
          $conv22 = HEAPU8[$call_i + $add20 | 0] | 0;
          $sub29 = (HEAPU8[$call_i + ($add20 + 1 | 0) | 0] | 0) - 128 | 0;
          $sub32 = (HEAPU8[$call_i + (($conv14 << 1 & $9) + $col_029 | 0) | 0] | 0) - (($conv22 - 126 | 0) + $sub29 >> 2) | 0;
          $add35 = $sub32 + ($conv22 - 128 | 0) | 0;
          $add38 = $sub29 + $sub32 | 0;
          if (($add38 | 0) < 0) {
            $cond61 = 0;
          } else {
            $cond61 = ($add38 | 0) < 255 ? $add38 : 255;
          }
          $14 = HEAP16[5428620 + ($cond61 << 1) >> 1] | 0;
          $add65 = Math_imul($conv14, $row_032) + $col_029 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add65 << 3) >> 1] = $14;
          if (($sub32 | 0) < 0) {
            $cond61_1 = 0;
          } else {
            $cond61_1 = ($sub32 | 0) < 255 ? $sub32 : 255;
          }
          $18 = HEAP16[5428620 + ($cond61_1 << 1) >> 1] | 0;
          $add65_1 = Math_imul(HEAPU16[2621484] | 0, $row_032) + $col_029 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add65_1 << 3) + 2 >> 1] = $18;
          if (($add35 | 0) < 0) {
            $cond61_2 = 0;
          } else {
            $cond61_2 = ($add35 | 0) < 255 ? $add35 : 255;
          }
          $21 = HEAP16[5428620 + ($cond61_2 << 1) >> 1] | 0;
          $add65_2 = Math_imul(HEAPU16[2621484] | 0, $row_032) + $col_029 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add65_2 << 3) + 4 >> 1] = $21;
          $inc69 = $col_029 + 1 | 0;
          if (($inc69 | 0) < (HEAPU16[2622498] | 0 | 0)) {
            $col_029 = $inc69;
          } else {
            break L2070;
          }
        }
      }
    } while (0);
    $inc72 = $row_032 + 1 | 0;
    if (($inc72 | 0) < (HEAPU16[2699404] | 0 | 0)) {
      $row_032 = $inc72;
    } else {
      break;
    }
  }
  _free($call_i);
  $17 = HEAP16[2714565] | 0;
  $conv74 = $17 & 65535;
  HEAP32[1315898] = $conv74;
  STACKTOP = __stackBase__;
  return;
}
function _kodak_262_load_raw() {
  var $str_i = 0, $source_addr_i = 0, $huff = 0, $call_i = 0, $call_i_1 = 0, $shr41 = 0, $call5 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $c_164 = 0, $11 = 0, $retval_0_i_i = 0, $inc15 = 0, $pi_062 = 0, $row_060 = 0, $12 = 0, $13 = 0, $pi_2_ph = 0, $14 = 0, $15 = 0, $conv2957 = 0, $pi_256 = 0, $col_055 = 0, $and34 = 0, $sub = 0, $sub66_pre_phi = 0, $cond49 = 0, $cond48 = 0, $cond_ = 0, $pi1_1 = 0, $or_cond = 0, $pi1_2 = 0, $cond79 = 0, $18 = 0, $call_i44 = 0, $20 = 0, $call4_i = 0, $retval_0_i = 0, $add82 = 0, $conv83 = 0, $arrayidx84 = 0, $21 = 0, $inc89 = 0, $22 = 0, $add96 = 0, $inc99 = 0, $25 = 0, $conv29 = 0, $pi_2_lcssa = 0, $inc102 = 0, $27 = 0, $28 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $str_i = __stackBase__ | 0;
  $source_addr_i = __stackBase__ + 4 | 0;
  $huff = __stackBase__ + 8 | 0;
  HEAP32[$source_addr_i >> 2] = 5264136;
  $call_i = _make_decoder_ref($source_addr_i) | 0;
  HEAP32[$huff >> 2] = $call_i;
  HEAP32[$source_addr_i >> 2] = 5264162;
  $call_i_1 = _make_decoder_ref($source_addr_i) | 0;
  HEAP32[$huff + 4 >> 2] = $call_i_1;
  $shr41 = ((HEAPU16[2622502] | 0) + 63 | 0) >>> 5;
  $call5 = _malloc(($shr41 << 2) + ((HEAPU16[2622498] | 0) << 5) | 0) | 0;
  if (($call5 | 0) == 0) {
    $3 = HEAP32[_stderr >> 2] | 0;
    $4 = HEAP32[1316054] | 0;
    _fprintf($3 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $4, HEAP32[tempInt + 4 >> 2] = 5585804, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  $6 = $call5 + ((HEAPU16[2622498] | 0) << 5) | 0;
  HEAP16[2631518] = 19789;
  L2089 : do {
    if (($shr41 | 0) != 0) {
      $7 = $str_i;
      $c_164 = 0;
      while (1) {
        HEAP32[$str_i >> 2] = -1;
        _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
        $11 = HEAP32[$str_i >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i = $11;
        } else {
          $retval_0_i_i = _llvm_bswap_i32($11 | 0) | 0;
        }
        HEAP32[$6 + ($c_164 << 2) >> 2] = $retval_0_i_i;
        $inc15 = $c_164 + 1 | 0;
        if (($inc15 | 0) < ($shr41 | 0)) {
          $c_164 = $inc15;
        } else {
          break L2089;
        }
      }
    }
  } while (0);
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    _free($call5);
    $27 = $call_i;
    _free($27);
    $28 = $call_i_1;
    _free($28);
    STACKTOP = __stackBase__;
    return;
  } else {
    $row_060 = 0;
    $pi_062 = 0;
  }
  while (1) {
    if (($row_060 & 31 | 0) == 0) {
      $12 = HEAP32[1316053] | 0;
      $13 = HEAP32[$6 + ($row_060 >> 5 << 2) >> 2] | 0;
      _fseek($12 | 0, $13 | 0, 0);
      HEAP32[1349741] = 0;
      HEAP32[1349740] = 0;
      HEAP32[1349742] = 0;
      $pi_2_ph = 0;
    } else {
      $pi_2_ph = $pi_062;
    }
    $14 = HEAP16[2622498] | 0;
    L2104 : do {
      if ($14 << 16 >> 16 == 0) {
        $pi_2_lcssa = $pi_2_ph;
      } else {
        $col_055 = 0;
        $pi_256 = $pi_2_ph;
        $conv2957 = $14 & 65535;
        $15 = $14;
        while (1) {
          $and34 = $col_055 + $row_060 & 1;
          if (($and34 | 0) == 0) {
            $cond48 = ($pi_256 + 1 | 0) - ($15 & 65535) | 0;
            $cond49 = ($pi_256 - 1 | 0) - $conv2957 | 0;
            $sub66_pre_phi = $pi_256 - 2 | 0;
          } else {
            $sub = $pi_256 - 2 | 0;
            $cond48 = $pi_256 - (($15 & 65535) << 1) | 0;
            $cond49 = $sub;
            $sub66_pre_phi = $sub;
          }
          $cond_ = ($col_055 | 0) > ($and34 | 0) ? $cond49 : -1;
          $pi1_1 = ($cond_ | 0) < 0 ? $cond48 : $cond_;
          $or_cond = ($pi1_1 | 0) < 0 & ($col_055 | 0) > 1;
          $pi1_2 = $or_cond ? $sub66_pre_phi : $pi1_1;
          if (($pi1_2 | 0) < 0) {
            $cond79 = 0;
          } else {
            $cond79 = ((HEAPU8[$call5 + ($or_cond ? $sub66_pre_phi : ($cond48 | 0) < 0 ? $pi1_1 : $cond48) | 0] | 0) + (HEAPU8[$call5 + $pi1_2 | 0] | 0) | 0) >>> 1;
          }
          $18 = HEAP32[$huff + ($and34 << 2) >> 2] | 0;
          $call_i44 = _getbithuff(HEAPU16[$18 >> 1] | 0, $18 + 2 | 0) | 0;
          do {
            if (($call_i44 | 0) == 16) {
              $20 = HEAP32[1357024] | 0;
              if (($20 | 0) == 0 | $20 >>> 0 > 16842751) {
                $retval_0_i = -32768;
                break;
              } else {
                label = 1487;
                break;
              }
            } else {
              label = 1487;
            }
          } while (0);
          do {
            if ((label | 0) == 1487) {
              label = 0;
              $call4_i = _getbithuff($call_i44, 0) | 0;
              if (($call4_i & 1 << $call_i44 - 1 | 0) != 0) {
                $retval_0_i = $call4_i;
                break;
              }
              $retval_0_i = ((-1 << $call_i44) + 1 | 0) + $call4_i | 0;
            }
          } while (0);
          $add82 = $retval_0_i + $cond79 | 0;
          $conv83 = $add82 & 255;
          $arrayidx84 = $call5 + $pi_256 | 0;
          HEAP8[$arrayidx84] = $conv83;
          if ($add82 >>> 0 > 255) {
            _derror();
            $21 = HEAP8[$arrayidx84] | 0;
          } else {
            $21 = $conv83;
          }
          $inc89 = $pi_256 + 1 | 0;
          $22 = HEAP16[5428620 + (($21 & 255) << 1) >> 1] | 0;
          $add96 = Math_imul(HEAPU16[2622498] | 0, $row_060) + $col_055 | 0;
          HEAP16[(HEAP32[1311250] | 0) + ($add96 << 1) >> 1] = $22;
          $inc99 = $col_055 + 1 | 0;
          $25 = HEAP16[2622498] | 0;
          $conv29 = $25 & 65535;
          if (($inc99 | 0) < ($conv29 | 0)) {
            $col_055 = $inc99;
            $pi_256 = $inc89;
            $conv2957 = $conv29;
            $15 = $25;
          } else {
            $pi_2_lcssa = $inc89;
            break L2104;
          }
        }
      }
    } while (0);
    $inc102 = $row_060 + 1 | 0;
    if (($inc102 | 0) < (HEAPU16[2622502] | 0 | 0)) {
      $row_060 = $inc102;
      $pi_062 = $pi_2_lcssa;
    } else {
      break;
    }
  }
  _free($call5);
  $27 = $call_i;
  _free($27);
  $28 = $call_i_1;
  _free($28);
  STACKTOP = __stackBase__;
  return;
}
function _kodak_rgb_load_raw() {
  var $rgb = 0, $arraydecay = 0, $1 = 0, $3 = 0, $arraydecay12 = 0, $4 = 0, $5 = 0, $6 = 0, $ip_028 = 0, $row_027 = 0, $indvars_iv = 0, $conv322 = 0, $ip_121 = 0, $col_020 = 0, $sub = 0, $_sub = 0, $7 = 0, $smax = 0, $9 = 0, $10 = 0, $11 = 0, $ip_217 = 0, $i_016 = 0, $bp_015 = 0, $arrayidx23 = 0, $add = 0, $arrayidx23_1 = 0, $add_1 = 0, $ip_2_lcssa = 0, $add34 = 0, $15 = 0, $conv3 = 0, $16 = 0, $17 = 0, $ip_1_lcssa = 0, $inc37 = 0, $arrayidx23_2 = 0, $add_2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1548 | 0;
  $rgb = __stackBase__ + 1536 | 0;
  $arraydecay = HEAP32[1316051] | 0;
  $1 = HEAP32[1311250] | 0;
  if (($1 | 0) != 0) {
    _free($1);
  }
  HEAP32[1311250] = 0;
  $3 = HEAP16[2699404] | 0;
  if ($3 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay12 = __stackBase__ | 0;
  $4 = $rgb;
  $row_027 = 0;
  $ip_028 = $arraydecay;
  $6 = HEAP16[2621484] | 0;
  $5 = $3;
  while (1) {
    if ($6 << 16 >> 16 == 0) {
      $ip_1_lcssa = $ip_028;
      $17 = 0;
      $16 = $5;
    } else {
      $col_020 = 0;
      $ip_121 = $ip_028;
      $conv322 = $6 & 65535;
      $indvars_iv = -1;
      while (1) {
        $sub = $conv322 - $col_020 | 0;
        $_sub = ($sub | 0) > 256 ? 256 : $sub;
        _kodak_65000_decode($arraydecay12, $_sub * 3 & -1);
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = 0;
        HEAP32[$4 + 8 >> 2] = 0;
        if (($_sub | 0) > 0) {
          $7 = $indvars_iv - $conv322 | 0;
          $smax = ($7 | 0) > -257 ? $7 : -257;
          $9 = $smax * -4 & -1;
          $10 = $smax ^ -1;
          $bp_015 = $arraydecay12;
          $i_016 = 1;
          $ip_217 = $ip_121;
          $11 = 0;
          while (1) {
            $arrayidx23 = $rgb | 0;
            $add = $11 + (HEAP16[$bp_015 >> 1] << 16 >> 16) | 0;
            HEAP32[$arrayidx23 >> 2] = $add;
            HEAP16[$ip_217 >> 1] = $add & 65535;
            if (($add & 61440 | 0) != 0) {
              _derror();
            }
            $arrayidx23_1 = $rgb + 4 | 0;
            $add_1 = (HEAP32[$arrayidx23_1 >> 2] | 0) + (HEAP16[$bp_015 + 2 >> 1] << 16 >> 16) | 0;
            HEAP32[$arrayidx23_1 >> 2] = $add_1;
            HEAP16[$ip_217 + 2 >> 1] = $add_1 & 65535;
            if (($add_1 & 61440 | 0) != 0) {
              _derror();
            }
            $arrayidx23_2 = $rgb + 8 | 0;
            $add_2 = (HEAP32[$arrayidx23_2 >> 2] | 0) + (HEAP16[$bp_015 + 4 >> 1] << 16 >> 16) | 0;
            HEAP32[$arrayidx23_2 >> 2] = $add_2;
            HEAP16[$ip_217 + 4 >> 1] = $add_2 & 65535;
            if (($add_2 & 61440 | 0) != 0) {
              _derror();
            }
            if (($i_016 | 0) == ($10 | 0)) {
              break;
            }
            $bp_015 = $bp_015 + 6 | 0;
            $i_016 = $i_016 + 1 | 0;
            $ip_217 = $ip_217 + 8 | 0;
            $11 = HEAP32[$arrayidx23 >> 2] | 0;
          }
          $ip_2_lcssa = $ip_121 + ($9 - 4 << 1) | 0;
        } else {
          $ip_2_lcssa = $ip_121;
        }
        $add34 = $col_020 + 256 | 0;
        $15 = HEAP16[2621484] | 0;
        $conv3 = $15 & 65535;
        if (($add34 | 0) < ($conv3 | 0)) {
          $col_020 = $add34;
          $ip_121 = $ip_2_lcssa;
          $conv322 = $conv3;
          $indvars_iv = $indvars_iv + 256 | 0;
        } else {
          break;
        }
      }
      $ip_1_lcssa = $ip_2_lcssa;
      $17 = $15;
      $16 = HEAP16[2699404] | 0;
    }
    $inc37 = $row_027 + 1 | 0;
    if (($inc37 | 0) < ($16 & 65535 | 0)) {
      $row_027 = $inc37;
      $ip_028 = $ip_1_lcssa;
      $6 = $17;
      $5 = $16;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _kodak_thumb_load_raw() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $row_010 = 0, $conv37 = 0, $col_06 = 0, $add = 0, $5 = 0, $6 = 0, $cmp1_i = 0, $inc = 0, $9 = 0, $conv3 = 0, $10 = 0, $11 = 0, $inc9 = 0, $12 = 0, $and = 0, $shl = 0, $sub = 0;
  $0 = HEAP32[1311014] | 0;
  HEAP32[1390240] = $0 >>> 5;
  $1 = HEAP16[2699404] | 0;
  if ($1 << 16 >> 16 == 0) {
    $12 = $0;
    $and = $12 & 31;
    $shl = 1 << $and;
    $sub = $shl - 1 | 0;
    HEAP32[1315898] = $sub;
    return;
  }
  $row_010 = 0;
  $3 = HEAP16[2621484] | 0;
  $2 = $1;
  while (1) {
    if ($3 << 16 >> 16 == 0) {
      $11 = 0;
      $10 = $2;
    } else {
      $col_06 = 0;
      $conv37 = $3 & 65535;
      while (1) {
        $add = Math_imul($conv37, $row_010) + $col_06 | 0;
        $5 = HEAP32[1390240] | 0;
        $6 = (HEAP32[1316051] | 0) + ($add << 3) | 0;
        if ((_fread($6 | 0, 2, $5 | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $5 >>> 0) {
          _derror();
        }
        $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
        if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
          _swab($6 | 0, $6 | 0, $5 << 1 | 0);
        }
        $inc = $col_06 + 1 | 0;
        $9 = HEAP16[2621484] | 0;
        $conv3 = $9 & 65535;
        if (($inc | 0) < ($conv3 | 0)) {
          $col_06 = $inc;
          $conv37 = $conv3;
        } else {
          break;
        }
      }
      $11 = $9;
      $10 = HEAP16[2699404] | 0;
    }
    $inc9 = $row_010 + 1 | 0;
    if (($inc9 | 0) < ($10 & 65535 | 0)) {
      $row_010 = $inc9;
      $3 = $11;
      $2 = $10;
    } else {
      break;
    }
  }
  $12 = HEAP32[1311014] | 0;
  $and = $12 & 31;
  $shl = 1 << $and;
  $sub = $shl - 1 | 0;
  HEAP32[1315898] = $sub;
  return;
}
function _sony_decrypt($data, $len, $start, $key) {
  $data = $data | 0;
  $len = $len | 0;
  $start = $start | 0;
  $key = $key | 0;
  var $add = 0, $add_1 = 0, $add_2 = 0, $or = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $inc188 = 0, $or15 = 0, $inc18 = 0, $_pre = 0, $storemerge26 = 0, $call = 0, $5 = 0, $inc26 = 0, $data_addr_05 = 0, $len_addr_04 = 0, $dec = 0, $6 = 0, $add29 = 0, $xor34 = 0;
  L2179 : do {
    if (($start | 0) != 0) {
      $add = Math_imul($key, 48828125) + 1 | 0;
      HEAP32[1311033] = $add;
      $add_1 = Math_imul($add, 48828125) + 1 | 0;
      HEAP32[1311034] = $add_1;
      $add_2 = Math_imul($add_1, 48828125) + 1 | 0;
      HEAP32[1311035] = $add_2;
      $or = ($add_2 ^ $add) >>> 31 | Math_imul($add_2, 97656250) + 2;
      HEAP32[1311036] = $or;
      HEAP32[1311161] = 4;
      $inc188 = 4;
      $3 = $add;
      $2 = $add_2;
      $1 = $or;
      $0 = $add_1;
      while (1) {
        $or15 = ($1 ^ $0) >>> 31 | ($2 ^ $3) << 1;
        HEAP32[5244132 + ($inc188 << 2) >> 2] = $or15;
        $inc18 = $inc188 + 1 | 0;
        if (($inc18 | 0) == 127) {
          break;
        }
        $_pre = HEAP32[5244132 + ($inc188 - 2 << 2) >> 2] | 0;
        $inc188 = $inc18;
        $3 = $0;
        $2 = $1;
        $1 = $or15;
        $0 = $_pre;
      }
      HEAP32[1311161] = 0;
      $storemerge26 = 0;
      while (1) {
        $call = _htonl(HEAP32[5244132 + ($storemerge26 << 2) >> 2] | 0) | 0;
        $5 = HEAP32[1311161] | 0;
        HEAP32[5244132 + ($5 << 2) >> 2] = $call;
        $inc26 = $5 + 1 | 0;
        HEAP32[1311161] = $inc26;
        if ($inc26 >>> 0 < 127) {
          $storemerge26 = $inc26;
        } else {
          break L2179;
        }
      }
    }
  } while (0);
  if (($len | 0) == 0) {
    return;
  } else {
    $len_addr_04 = $len;
    $data_addr_05 = $data;
  }
  while (1) {
    $dec = $len_addr_04 - 1 | 0;
    $6 = HEAP32[1311161] | 0;
    $add29 = $6 + 1 | 0;
    $xor34 = HEAP32[5244132 + (($6 + 65 & 127) << 2) >> 2] ^ HEAP32[5244132 + (($add29 & 127) << 2) >> 2];
    HEAP32[1311161] = $add29;
    HEAP32[5244132 + (($6 & 127) << 2) >> 2] = $xor34;
    HEAP32[$data_addr_05 >> 2] = HEAP32[$data_addr_05 >> 2] ^ $xor34;
    if (($dec | 0) == 0) {
      break;
    }
    $len_addr_04 = $dec;
    $data_addr_05 = $data_addr_05 + 4 | 0;
  }
  return;
}
function _sony_load_raw() {
  var $str_i = 0, $head13 = 0, $tmpcast = 0, $1 = 0, $5 = 0, $retval_0_i_i = 0, $or_3 = 0, $16 = 0, $row_020 = 0, $17 = 0, $conv13 = 0, $mul14 = 0, $add_ptr = 0, $call16 = 0, $20 = 0, $21 = 0, $col_017 = 0, $arrayidx26 = 0, $call28 = 0, $inc = 0, $25 = 0, $26 = 0, $inc37 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  $str_i = __stackBase__ | 0;
  $head13 = __stackBase__ + 4 | 0;
  $tmpcast = $head13;
  _fseek(HEAP32[1316053] | 0, 200896, 0);
  $1 = HEAP32[1316053] | 0;
  _fseek($1 | 0, (_fgetc($1 | 0) << 2) - 1 | 0, 1);
  HEAP16[2631518] = 19789;
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $5 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $5;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($5 | 0) | 0;
  }
  _fseek(HEAP32[1316053] | 0, 164600, 0);
  _fread($head13 | 0, 1, 40, HEAP32[1316053] | 0);
  _sony_decrypt($head13 | 0, 10, 1, $retval_0_i_i);
  $or_3 = HEAPU8[$tmpcast + 22 | 0] | 0 | (HEAPU8[$tmpcast + 23 | 0] | 0 | (HEAPU8[$head13 + 24 | 0] | 0 | (HEAPU8[$tmpcast + 25 | 0] | 0 | $retval_0_i_i << 8) << 8) << 8) << 8;
  _fseek(HEAP32[1316053] | 0, HEAP32[1357153] | 0, 0);
  if (HEAP16[2622502] << 16 >> 16 == 0) {
    HEAP32[1315898] = 16368;
    STACKTOP = __stackBase__;
    return;
  }
  $row_020 = 0;
  $16 = HEAP16[2622498] | 0;
  while (1) {
    $17 = HEAP32[1311250] | 0;
    $conv13 = $16 & 65535;
    $mul14 = Math_imul($conv13, $row_020);
    $add_ptr = $17 + ($mul14 << 1) | 0;
    $call16 = _fread($add_ptr | 0, 2, $conv13 | 0, HEAP32[1316053] | 0) | 0;
    $20 = HEAP16[2622498] | 0;
    if ($call16 >>> 0 < ($20 & 65535) >>> 0) {
      _derror();
      $21 = HEAP16[2622498] | 0;
    } else {
      $21 = $20;
    }
    _sony_decrypt($add_ptr, ($21 & 65535) >>> 1, ($row_020 | 0) == 0 & 1, $or_3);
    L2206 : do {
      if (HEAP16[2622498] << 16 >> 16 == 0) {
        $26 = 0;
      } else {
        $col_017 = 0;
        while (1) {
          $arrayidx26 = $17 + ($col_017 + $mul14 << 1) | 0;
          $call28 = _htons(HEAPU16[$arrayidx26 >> 1] | 0 | 0) | 0;
          HEAP16[$arrayidx26 >> 1] = $call28 & 65535;
          if (($call28 & 49152 | 0) != 0) {
            _derror();
          }
          $inc = $col_017 + 1 | 0;
          $25 = HEAP16[2622498] | 0;
          if ($inc >>> 0 < ($25 & 65535) >>> 0) {
            $col_017 = $inc;
          } else {
            $26 = $25;
            break L2206;
          }
        }
      }
    } while (0);
    $inc37 = $row_020 + 1 | 0;
    if ($inc37 >>> 0 < (HEAPU16[2622502] | 0) >>> 0) {
      $row_020 = $inc37;
      $16 = $26;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 16368;
  STACKTOP = __stackBase__;
  return;
}
function _sony_arw_load_raw() {
  var $huff = 0, $i_031 = 0, $n_030 = 0, $0 = 0, $shr226 = 0, $smax = 0, $n_129 = 0, $c_028 = 0, $inc8 = 0, $n_1_lcssa = 0, $inc10 = 0, $3 = 0, $arraydecay = 0, $4 = 0, $dec23_in = 0, $sum_022 = 0, $dec23 = 0, $conv1619 = 0, $sum_118 = 0, $row_017 = 0, $_row_0 = 0, $call23 = 0, $call24 = 0, $diff_0 = 0, $add32 = 0, $add43 = 0, $add47 = 0, $8 = 0, $conv16 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65536 | 0;
  $huff = __stackBase__ | 0;
  $n_030 = 0;
  $i_031 = 0;
  while (1) {
    $0 = HEAP16[5244648 + ($i_031 << 1) >> 1] | 0;
    $shr226 = 32768 >>> (($0 & 65535) >>> 8 >>> 0);
    if (($shr226 | 0) > 0) {
      $smax = ($shr226 | 0) > 1 ? $shr226 : 1;
      $c_028 = 0;
      $n_129 = $n_030;
      while (1) {
        HEAP16[$huff + ($n_129 << 1) >> 1] = $0;
        $inc8 = $c_028 + 1 | 0;
        if (($inc8 | 0) < ($shr226 | 0)) {
          $c_028 = $inc8;
          $n_129 = $n_129 + 1 | 0;
        } else {
          break;
        }
      }
      $n_1_lcssa = $n_030 + $smax | 0;
    } else {
      $n_1_lcssa = $n_030;
    }
    $inc10 = $i_031 + 1 | 0;
    if (($inc10 | 0) == 18) {
      break;
    } else {
      $n_030 = $n_1_lcssa;
      $i_031 = $inc10;
    }
  }
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $3 = HEAP16[2622498] | 0;
  if ($3 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = $huff | 0;
  $sum_022 = 0;
  $dec23_in = $3 & 65535;
  $4 = HEAP16[2622502] | 0;
  while (1) {
    $dec23 = $dec23_in - 1 | 0;
    $row_017 = 0;
    $sum_118 = $sum_022;
    $conv1619 = $4 & 65535;
    while (1) {
      $_row_0 = ($row_017 | 0) == ($conv1619 | 0) ? 1 : $row_017;
      $call23 = _getbithuff(15, $arraydecay) | 0;
      $call24 = _getbithuff($call23, 0) | 0;
      if ((1 << $call23 - 1 & $call24 | 0) == 0) {
        $diff_0 = ((-1 << $call23) + 1 | 0) + $call24 | 0;
      } else {
        $diff_0 = $call24;
      }
      $add32 = $diff_0 + $sum_118 | 0;
      if ($add32 >>> 0 > 4095) {
        _derror();
      }
      if (($_row_0 | 0) < (HEAPU16[2699404] | 0 | 0)) {
        $add43 = Math_imul(HEAPU16[2622498] | 0, $_row_0) + $dec23 | 0;
        HEAP16[(HEAP32[1311250] | 0) + ($add43 << 1) >> 1] = $add32 & 65535;
      }
      $add47 = $_row_0 + 2 | 0;
      $8 = HEAP16[2622502] | 0;
      $conv16 = $8 & 65535;
      if (($add47 | 0) < ($conv16 + 1 | 0)) {
        $row_017 = $add47;
        $sum_118 = $add32;
        $conv1619 = $conv16;
      } else {
        break;
      }
    }
    if (($dec23 | 0) == 0) {
      break;
    } else {
      $sum_022 = $add32;
      $dec23_in = $dec23;
      $4 = $8;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _sony_arw2_load_raw() {
  var $pix = 0, $call = 0, $2 = 0, $3 = 0, $4 = 0, $row_060 = 0, $6 = 0, $7 = 0, $dp_057 = 0, $col_056 = 0, $cmp_i = 0, $conv2_i = 0, $retval_0_i = 0, $and = 0, $and11 = 0, $and13 = 0, $and15 = 0, $sub19 = 0, $sh_0 = 0, $conv29 = 0, $conv33 = 0, $i_049 = 0, $bit_048 = 0, $shr36 = 0, $conv2_i37 = 0, $retval_0_in_i = 0, $add = 0, $bit_1 = 0, $inc55 = 0, $19 = 0, $i_152 = 0, $col_151 = 0, $shr6635 = 0, $add69 = 0, $inc72 = 0, $23 = 0, $sub76 = 0, $24 = 0, $25 = 0, $inc81 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $pix = __stackBase__ | 0;
  $call = _malloc(HEAPU16[2622498] | 0) | 0;
  if (($call | 0) == 0) {
    $2 = HEAP32[_stderr >> 2] | 0;
    $3 = HEAP32[1316054] | 0;
    _fprintf($2 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = 5585620, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
  $row_060 = 0;
  $4 = HEAP16[2622498] | 0;
  while (1) {
    _fread($call | 0, 1, $4 & 65535 | 0, HEAP32[1316053] | 0);
    $6 = HEAP16[2622498] | 0;
    L2251 : do {
      if ((($6 & 65535) - 30 | 0) > 0) {
        $col_056 = 0;
        $dp_057 = $call;
        $7 = $6;
        while (1) {
          $cmp_i = HEAP16[2631518] << 16 >> 16 == 18761;
          $conv2_i = HEAPU8[$dp_057] | 0;
          if ($cmp_i) {
            $retval_0_i = (HEAPU8[$dp_057 + 1 | 0] | 0) << 8 | $conv2_i | (HEAPU8[$dp_057 + 2 | 0] | 0) << 16 | (HEAPU8[$dp_057 + 3 | 0] | 0) << 24;
          } else {
            $retval_0_i = (HEAPU8[$dp_057 + 1 | 0] | 0) << 16 | $conv2_i << 24 | (HEAPU8[$dp_057 + 2 | 0] | 0) << 8 | (HEAPU8[$dp_057 + 3 | 0] | 0);
          }
          $and = $retval_0_i & 2047;
          $and11 = $retval_0_i >>> 11 & 2047;
          $and13 = $retval_0_i >>> 22 & 15;
          $and15 = $retval_0_i >>> 26 & 15;
          $sub19 = $and - $and11 | 0;
          $sh_0 = 0;
          while (1) {
            if (($sh_0 | 0) >= 4) {
              break;
            }
            if ((128 << $sh_0 | 0) > ($sub19 | 0)) {
              break;
            } else {
              $sh_0 = $sh_0 + 1 | 0;
            }
          }
          $conv29 = $and & 65535;
          $conv33 = $and11 & 65535;
          $bit_048 = 30;
          $i_049 = 0;
          while (1) {
            do {
              if (($i_049 | 0) == ($and13 | 0)) {
                HEAP16[$pix + ($and13 << 1) >> 1] = $conv29;
                $bit_1 = $bit_048;
              } else {
                if (($i_049 | 0) == ($and15 | 0)) {
                  HEAP16[$pix + ($and15 << 1) >> 1] = $conv33;
                  $bit_1 = $bit_048;
                  break;
                }
                $shr36 = $bit_048 >> 3;
                $conv2_i37 = HEAPU8[$dp_057 + $shr36 | 0] | 0;
                if ($cmp_i) {
                  $retval_0_in_i = (HEAPU8[$dp_057 + ($shr36 + 1 | 0) | 0] | 0) << 8 | $conv2_i37;
                } else {
                  $retval_0_in_i = HEAPU8[$dp_057 + ($shr36 + 1 | 0) | 0] | 0 | $conv2_i37 << 8;
                }
                $add = ((($retval_0_in_i & 65535) >>> (($bit_048 & 7) >>> 0) & 127) << $sh_0) + $and11 | 0;
                HEAP16[$pix + ($i_049 << 1) >> 1] = ($add & 63488) >>> 0 > 2047 ? 2047 : $add & 65535;
                $bit_1 = $bit_048 + 7 | 0;
              }
            } while (0);
            $inc55 = $i_049 + 1 | 0;
            if (($inc55 | 0) == 16) {
              $col_151 = $col_056;
              $i_152 = 0;
              $19 = $7;
              break;
            } else {
              $bit_048 = $bit_1;
              $i_049 = $inc55;
            }
          }
          while (1) {
            $shr6635 = (HEAPU16[5428620 + ((HEAPU16[$pix + ($i_152 << 1) >> 1] | 0) << 1 << 1) >> 1] | 0) >>> 2;
            $add69 = Math_imul($19 & 65535, $row_060) + $col_151 | 0;
            HEAP16[(HEAP32[1311250] | 0) + ($add69 << 1) >> 1] = $shr6635;
            $inc72 = $i_152 + 1 | 0;
            if (($inc72 | 0) == 16) {
              break;
            }
            $col_151 = $col_151 + 2 | 0;
            $i_152 = $inc72;
            $19 = HEAP16[2622498] | 0;
          }
          $23 = $col_056 + 32 | 0;
          $sub76 = $23 - (($23 & 1 | 0) != 0 ? 1 : 31) | 0;
          $24 = HEAP16[2622498] | 0;
          if (($sub76 | 0) < (($24 & 65535) - 30 | 0)) {
            $col_056 = $sub76;
            $dp_057 = $dp_057 + 16 | 0;
            $7 = $24;
          } else {
            $25 = $24;
            break L2251;
          }
        }
      } else {
        $25 = $6;
      }
    } while (0);
    $inc81 = $row_060 + 1 | 0;
    if (($inc81 | 0) < (HEAPU16[2699404] | 0 | 0)) {
      $row_060 = $inc81;
      $4 = $25;
    } else {
      break;
    }
  }
  _free($call);
  STACKTOP = __stackBase__;
  return;
}
function _redcine_load_raw() {
  return;
}
function _fill_holes($holes) {
  $holes = $holes | 0;
  var $0 = 0, $1 = 0, $row_082 = 0, $4 = 0, $sub11 = 0, $add24 = 0, $col_072 = 0, $conv12 = 0, $mul = 0, $sub13 = 0, $6 = 0, $conv14 = 0, $add19 = 0, $conv22 = 0, $mul26 = 0, $conv30 = 0, $conv38 = 0, $_min_0_i = 0, $max_1_i = 0, $_min_0_1_i = 0, $max_1_1_i = 0, $add45 = 0, $11 = 0, $12 = 0, $sub52 = 0, $add59 = 0, $col_176 = 0, $conv53 = 0, $mul68 = 0, $17 = 0, $conv86 = 0, $mul87 = 0, $21 = 0, $conv91 = 0, $conv98 = 0, $conv105 = 0, $conv112 = 0, $_min_0_i45 = 0, $max_1_i47 = 0, $_min_0_1_i51 = 0, $max_1_1_i53 = 0, $add123 = 0, $27 = 0, $inc = 0, label = 0;
  $0 = HEAP16[2699404] | 0;
  if ((($0 & 65535) - 2 | 0) > 2) {
    $row_082 = 2;
    $1 = $0;
  } else {
    return;
  }
  while (1) {
    if ((1 << ($row_082 - (HEAPU16[2622502] | 0) & 7) & $holes | 0) == 0) {
      $27 = $1;
    } else {
      $4 = HEAP16[2621484] | 0;
      L2289 : do {
        if ((($4 & 65535) - 1 | 0) > 1) {
          $sub11 = $row_082 - 1 | 0;
          $add24 = $row_082 + 1 | 0;
          $col_072 = 1;
          while (1) {
            $conv12 = HEAPU16[2622498] | 0;
            $mul = Math_imul($conv12, $sub11);
            $sub13 = $col_072 - 1 | 0;
            $6 = HEAP32[1311250] | 0;
            $conv14 = HEAPU16[$6 + ($mul + $sub13 << 1) >> 1] | 0;
            $add19 = $col_072 + 1 | 0;
            $conv22 = HEAPU16[$6 + ($mul + $add19 << 1) >> 1] | 0;
            $mul26 = Math_imul($conv12, $add24);
            $conv30 = HEAPU16[$6 + ($mul26 + $sub13 << 1) >> 1] | 0;
            $conv38 = HEAPU16[$6 + ($mul26 + $add19 << 1) >> 1] | 0;
            $_min_0_i = $conv14 >>> 0 > $conv22 >>> 0 ? $conv22 : $conv14;
            $max_1_i = $conv14 >>> 0 < $conv22 >>> 0 ? $conv22 : $conv14;
            $_min_0_1_i = $_min_0_i >>> 0 > $conv30 >>> 0 ? $conv30 : $_min_0_i;
            $max_1_1_i = $max_1_i >>> 0 < $conv30 >>> 0 ? $conv30 : $max_1_i;
            HEAP16[$6 + (Math_imul($conv12, $row_082) + $col_072 << 1) >> 1] = ((((($conv22 + $conv14 | 0) + $conv30 | 0) + $conv38 | 0) - ($_min_0_1_i >>> 0 > $conv38 >>> 0 ? $conv38 : $_min_0_1_i) | 0) - ($max_1_1_i >>> 0 < $conv38 >>> 0 ? $conv38 : $max_1_1_i) | 0) >>> 1 & 65535;
            $add45 = $col_072 + 4 | 0;
            $11 = HEAP16[2621484] | 0;
            if (($add45 | 0) < (($11 & 65535) - 1 | 0)) {
              $col_072 = $add45;
            } else {
              $12 = $11;
              break L2289;
            }
          }
        } else {
          $12 = $4;
        }
      } while (0);
      L2294 : do {
        if ((($12 & 65535) - 2 | 0) > 2) {
          $sub52 = $row_082 - 2 | 0;
          $add59 = $row_082 + 2 | 0;
          $col_176 = 2;
          while (1) {
            $conv53 = HEAPU16[2622502] | 0;
            do {
              if ((1 << ($sub52 - $conv53 & 7) & $holes | 0) == 0) {
                if ((1 << ($add59 - $conv53 & 7) & $holes | 0) != 0) {
                  label = 1618;
                  break;
                }
                $conv86 = HEAPU16[2622498] | 0;
                $mul87 = Math_imul($conv86, $row_082);
                $21 = HEAP32[1311250] | 0;
                $conv91 = HEAPU16[$21 + (($col_176 - 2 | 0) + $mul87 << 1) >> 1] | 0;
                $conv98 = HEAPU16[$21 + (($col_176 + 2 | 0) + $mul87 << 1) >> 1] | 0;
                $conv105 = HEAPU16[$21 + (Math_imul($conv86, $sub52) + $col_176 << 1) >> 1] | 0;
                $conv112 = HEAPU16[$21 + (Math_imul($conv86, $add59) + $col_176 << 1) >> 1] | 0;
                $_min_0_i45 = $conv91 >>> 0 > $conv98 >>> 0 ? $conv98 : $conv91;
                $max_1_i47 = $conv91 >>> 0 < $conv98 >>> 0 ? $conv98 : $conv91;
                $_min_0_1_i51 = $_min_0_i45 >>> 0 > $conv105 >>> 0 ? $conv105 : $_min_0_i45;
                $max_1_1_i53 = $max_1_i47 >>> 0 < $conv105 >>> 0 ? $conv105 : $max_1_i47;
                HEAP16[$21 + ($mul87 + $col_176 << 1) >> 1] = ((((($conv98 + $conv91 | 0) + $conv105 | 0) + $conv112 | 0) - ($_min_0_1_i51 >>> 0 > $conv112 >>> 0 ? $conv112 : $_min_0_1_i51) | 0) - ($max_1_1_i53 >>> 0 < $conv112 >>> 0 ? $conv112 : $max_1_1_i53) | 0) >>> 1 & 65535;
                break;
              } else {
                label = 1618;
              }
            } while (0);
            if ((label | 0) == 1618) {
              label = 0;
              $mul68 = Math_imul(HEAPU16[2622498] | 0, $row_082);
              $17 = HEAP32[1311250] | 0;
              HEAP16[$17 + ($mul68 + $col_176 << 1) >> 1] = ((HEAPU16[$17 + (($col_176 + 2 | 0) + $mul68 << 1) >> 1] | 0) + (HEAPU16[$17 + (($col_176 - 2 | 0) + $mul68 << 1) >> 1] | 0) | 0) >>> 1 & 65535;
            }
            $add123 = $col_176 + 4 | 0;
            if (($add123 | 0) < ((HEAPU16[2621484] | 0) - 2 | 0)) {
              $col_176 = $add123;
            } else {
              break L2294;
            }
          }
        }
      } while (0);
      $27 = HEAP16[2699404] | 0;
    }
    $inc = $row_082 + 1 | 0;
    if (($inc | 0) < (($27 & 65535) - 2 | 0)) {
      $row_082 = $inc;
      $1 = $27;
    } else {
      break;
    }
  }
  return;
}
function _smal_decode_segment($seg, $holes) {
  $seg = $seg | 0;
  $holes = $holes | 0;
  var $hist = 0, $sym = 0, $pred = 0, $tmpcast = 0, $3 = 0, $arrayidx6 = 0, $arrayidx199 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx225 = 0, $range_0106 = 0, $data_0105 = 0, $high_0104 = 0, $pix_0103 = 0, $nbits_0102 = 0, $carry_0101 = 0, $range_199 = 0, $data_198 = 0, $high_197 = 0, $s_093 = 0, $nbits_192 = 0, $carry_191 = 0, $or = 0, $add15 = 0, $carry_2_ph = 0, $nbits_2_ph = 0, $conv20 = 0, $nbits_2 = 0, $dec = 0, $cmp18_lcssa = 0, $shl30 = 0, $data_2_in = 0, $carry_3 = 0, $data_3_in = 0, $conv56 = 0, $shr62 = 0, $div = 0, $bin_0 = 0, $conv67 = 0, $shr76 = 0, $high_2 = 0, $sub86 = 0, $nbits_3 = 0, $shl88 = 0, $shl97 = 0, $arrayidx101 = 0, $conv102 = 0, $arrayidx104 = 0, $inc105 = 0, $arrayidx108 = 0, $and117 = 0, $next_0 = 0, $i_090 = 0, $arrayidx167 = 0, $inc170 = 0, $i_186 = 0, $arrayidx184 = 0, $inc187 = 0, $inc197 = 0, $20 = 0, $or206 = 0, $conv212 = 0, $diff_0 = 0, $add223 = 0, $and231 = 0, $arrayidx232 = 0, $add234 = 0, $pix_1 = 0, $inc252 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  $hist = __stackBase__ | 0;
  $sym = __stackBase__ + 40 | 0;
  $pred = __stackBase__ + 52 | 0;
  $tmpcast = $pred;
  _memcpy($hist | 0, 5244684, 39);
  HEAP16[$pred >> 1] = 0;
  _fseek(HEAP32[1316053] | 0, (HEAP32[$seg + 4 >> 2] | 0) + 1 | 0, 0);
  HEAP32[1349741] = 0;
  HEAP32[1349740] = 0;
  HEAP32[1349742] = 0;
  $3 = HEAP32[$seg >> 2] | 0;
  $arrayidx6 = $seg + 8 | 0;
  if ($3 >>> 0 >= (HEAP32[$arrayidx6 >> 2] | 0) >>> 0) {
    HEAP32[1315898] = 255;
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx199 = $sym + 8 | 0;
  $arrayidx201 = $sym + 4 | 0;
  $arrayidx204 = $sym | 0;
  $arrayidx225 = $seg + 12 | 0;
  $carry_0101 = 0;
  $nbits_0102 = 8;
  $pix_0103 = $3;
  $high_0104 = 255;
  $data_0105 = 0;
  $range_0106 = 0;
  while (1) {
    $carry_191 = $carry_0101;
    $nbits_192 = $nbits_0102;
    $s_093 = 0;
    $high_197 = $high_0104;
    $data_198 = $data_0105;
    $range_199 = $range_0106;
    while (1) {
      $or = _getbithuff($nbits_192, 0) | ($data_198 & 65535) << $nbits_192;
      if (($carry_191 | 0) < 0) {
        $add15 = ($carry_191 + 1 | 0) + $nbits_192 | 0;
        $nbits_2_ph = $add15;
        $carry_2_ph = ($add15 | 0) < 1 ? $nbits_192 + $carry_191 | 0 : 0;
      } else {
        $nbits_2_ph = $nbits_192;
        $carry_2_ph = $carry_191;
      }
      $conv20 = $or & 65535;
      $nbits_2 = $nbits_2_ph;
      while (1) {
        $dec = $nbits_2 - 1 | 0;
        if (($nbits_2 | 0) <= 0) {
          $cmp18_lcssa = 0;
          break;
        }
        if (($conv20 >>> ($dec >>> 0) & 255 | 0) == 255) {
          $cmp18_lcssa = 1;
          break;
        } else {
          $nbits_2 = $dec;
        }
      }
      if (($dec | 0) > 0) {
        $shl30 = 1 << $nbits_2 - 2;
        $data_2_in = (($shl30 & $conv20) << 1) + $or & -1 << $dec | ($shl30 + 65535 & $conv20) << 1;
      } else {
        $data_2_in = $or;
      }
      if ($cmp18_lcssa) {
        $data_3_in = (_getbithuff(1, 0) | 0) + $data_2_in | 0;
        $carry_3 = $nbits_2 - 9 | 0;
      } else {
        $data_3_in = $data_2_in;
        $carry_3 = $carry_2_ph;
      }
      $conv56 = $range_199 & 65535;
      $shr62 = $high_197 >> 4;
      $div = (((($data_3_in & 65535) - $conv56 << 2) + 4 & 262140) - 1 | 0) / ($shr62 | 0) & -1;
      $bin_0 = 0;
      while (1) {
        $conv67 = HEAPU8[($bin_0 + 5 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0;
        if (($conv67 | 0) > ($div | 0)) {
          $bin_0 = $bin_0 + 1 | 0;
        } else {
          break;
        }
      }
      $shr76 = Math_imul($conv67, $shr62) >> 2;
      if (($bin_0 | 0) == 0) {
        $high_2 = $high_197;
      } else {
        $high_2 = Math_imul(HEAPU8[($bin_0 + 4 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0, $shr62) >> 2;
      }
      $sub86 = $high_2 - $shr76 | 0;
      $nbits_3 = 0;
      while (1) {
        $shl88 = $sub86 << $nbits_3;
        if (($shl88 | 0) < 128) {
          $nbits_3 = $nbits_3 + 1 | 0;
        } else {
          break;
        }
      }
      $shl97 = $shr76 + $conv56 << $nbits_3;
      $arrayidx101 = $hist + ($s_093 * 13 & -1) + 1 | 0;
      $conv102 = HEAPU8[$arrayidx101] | 0;
      $arrayidx104 = $hist + ($s_093 * 13 & -1) + 2 | 0;
      $inc105 = (HEAP8[$arrayidx104] | 0) + 1 & 255;
      HEAP8[$arrayidx104] = $inc105;
      $arrayidx108 = $hist + ($s_093 * 13 & -1) + 3 | 0;
      if (($inc105 & 255) > (HEAPU8[$arrayidx108] | 0)) {
        $and117 = (HEAPU8[$hist + ($s_093 * 13 & -1) | 0] | 0) & $conv102 + 1;
        HEAP8[$arrayidx108] = ((HEAPU8[($and117 + 4 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0) - (HEAPU8[($and117 + 5 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0) | 0) >>> 2 & 255;
        HEAP8[$arrayidx104] = 1;
        $next_0 = $and117;
      } else {
        $next_0 = $conv102;
      }
      L2340 : do {
        if (((HEAPU8[($conv102 + 4 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0) - (HEAPU8[($conv102 + 5 | 0) + ($hist + ($s_093 * 13 & -1)) | 0] | 0) | 0) > 1) {
          if (($bin_0 | 0) < ($conv102 | 0)) {
            $i_090 = $bin_0;
            while (1) {
              $arrayidx167 = ($i_090 + 5 | 0) + ($hist + ($s_093 * 13 & -1)) | 0;
              HEAP8[$arrayidx167] = (HEAP8[$arrayidx167] | 0) - 1 & 255;
              $inc170 = $i_090 + 1 | 0;
              if (($inc170 | 0) < (HEAPU8[$arrayidx101] | 0 | 0)) {
                $i_090 = $inc170;
              } else {
                break L2340;
              }
            }
          }
          if (($next_0 | 0) <= ($bin_0 | 0) & ($conv102 | 0) < ($bin_0 | 0)) {
            $i_186 = $conv102;
          } else {
            break;
          }
          while (1) {
            $arrayidx184 = ($i_186 + 5 | 0) + ($hist + ($s_093 * 13 & -1)) | 0;
            HEAP8[$arrayidx184] = (HEAP8[$arrayidx184] | 0) + 1 & 255;
            $inc187 = $i_186 + 1 | 0;
            if (($inc187 | 0) == ($bin_0 | 0)) {
              break L2340;
            } else {
              $i_186 = $inc187;
            }
          }
        }
      } while (0);
      HEAP8[$arrayidx101] = $next_0 & 255;
      HEAP32[$sym + ($s_093 << 2) >> 2] = $bin_0;
      $inc197 = $s_093 + 1 | 0;
      if (($inc197 | 0) == 3) {
        break;
      } else {
        $carry_191 = $carry_3;
        $nbits_192 = $nbits_3;
        $s_093 = $inc197;
        $high_197 = $shl88;
        $data_198 = $data_3_in;
        $range_199 = $shl97;
      }
    }
    $20 = HEAP32[$arrayidx204 >> 2] | 0;
    $or206 = HEAP32[$arrayidx201 >> 2] << 2 | HEAP32[$arrayidx199 >> 2] << 5 | $20 & 3;
    if (($20 & 4 | 0) == 0) {
      $diff_0 = $or206;
    } else {
      $conv212 = $or206 & 255;
      $diff_0 = ($conv212 | 0) == 0 ? 128 : -$conv212 | 0;
    }
    $add223 = (_ftell(HEAP32[1316053] | 0) | 0) + 12 | 0;
    $and231 = $pix_0103 & 1;
    $arrayidx232 = $tmpcast + $and231 | 0;
    $add234 = (HEAPU8[$arrayidx232] | 0) + ($add223 >>> 0 < (HEAP32[$arrayidx225 >> 2] | 0) >>> 0 ? $diff_0 : 0) | 0;
    HEAP8[$arrayidx232] = $add234 & 255;
    HEAP16[(HEAP32[1311250] | 0) + ($pix_0103 << 1) >> 1] = $add234 & 255;
    if (($and231 | 0) == 0) {
      $pix_1 = (1 << ((($pix_0103 | 0) / (HEAPU16[2622498] | 0 | 0) & -1) - (HEAPU16[2622502] | 0) & 7) & $holes | 0) == 0 ? $pix_0103 : $pix_0103 + 2 | 0;
    } else {
      $pix_1 = $pix_0103;
    }
    $inc252 = $pix_1 + 1 | 0;
    if ($inc252 >>> 0 < (HEAP32[$arrayidx6 >> 2] | 0) >>> 0) {
      $carry_0101 = $carry_3;
      $nbits_0102 = $nbits_3;
      $pix_0103 = $inc252;
      $high_0104 = $shl88;
      $data_0105 = $data_3_in;
      $range_0106 = $shl97;
    } else {
      break;
    }
  }
  HEAP32[1315898] = 255;
  STACKTOP = __stackBase__;
  return;
}
function _smal_v6_load_raw() {
  var $str_i = 0, $seg = 0, $4 = 0, $conv2_i_i = 0, $6 = 0, $retval_0_in_i_i = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  $str_i = __stackBase__ | 0;
  $seg = __stackBase__ + 4 | 0;
  _fseek(HEAP32[1316053] | 0, 16, 0);
  HEAP32[$seg >> 2] = 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $4 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $4 & 255;
  $6 = ($4 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($6 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $6 & 65535;
  }
  HEAP32[$seg + 4 >> 2] = $retval_0_in_i_i & 65535;
  HEAP32[$seg + 8 >> 2] = Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0);
  HEAP32[$seg + 12 >> 2] = 2147483647;
  _smal_decode_segment($seg | 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _smal_v9_load_raw() {
  var $str_i33 = 0, $str_i12 = 0, $str_i = 0, $seg = 0, $4 = 0, $retval_0_i_i = 0, $call2 = 0, $7 = 0, $8 = 0, $i_057 = 0, $11 = 0, $retval_0_i_i31 = 0, $inc = 0, $call8 = 0, $22 = 0, $retval_0_i_i52 = 0, $i_155 = 0, $inc23 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2060 | 0;
  $str_i33 = __stackBase__ | 0;
  $str_i12 = __stackBase__ + 4 | 0;
  $str_i = __stackBase__ + 8 | 0;
  $seg = __stackBase__ + 12 | 0;
  _fseek(HEAP32[1316053] | 0, 67, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  $call2 = _fgetc(HEAP32[1316053] | 0) | 0;
  _fseek(HEAP32[1316053] | 0, $retval_0_i_i | 0, 0);
  L2366 : do {
    if (($call2 & 2147483647 | 0) != 0) {
      $7 = $str_i12;
      $8 = $call2 << 1;
      $i_057 = 0;
      while (1) {
        HEAP32[$str_i12 >> 2] = -1;
        _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
        $11 = HEAP32[$str_i12 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i31 = $11;
        } else {
          $retval_0_i_i31 = _llvm_bswap_i32($11 | 0) | 0;
        }
        HEAP32[$seg + ($i_057 << 2) >> 2] = (HEAP32[1357153] & -($i_057 & 1)) + $retval_0_i_i31 | 0;
        $inc = $i_057 + 1 | 0;
        if (($inc | 0) == ($8 | 0)) {
          break L2366;
        } else {
          $i_057 = $inc;
        }
      }
    }
  } while (0);
  _fseek(HEAP32[1316053] | 0, 78, 0);
  $call8 = _fgetc(HEAP32[1316053] | 0) | 0;
  _fseek(HEAP32[1316053] | 0, 88, 0);
  HEAP32[$seg + ($call2 << 3) >> 2] = Math_imul(HEAPU16[2622498] | 0, HEAPU16[2622502] | 0);
  HEAP32[$str_i33 >> 2] = -1;
  _fread($str_i33 | 0, 1, 4, HEAP32[1316053] | 0);
  $22 = HEAP32[$str_i33 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i52 = $22;
  } else {
    $retval_0_i_i52 = _llvm_bswap_i32($22 | 0) | 0;
  }
  HEAP32[$seg + ($call2 << 3) + 4 >> 2] = (HEAP32[1357153] | 0) + $retval_0_i_i52 | 0;
  L2377 : do {
    if (($call2 | 0) != 0) {
      $i_155 = 0;
      while (1) {
        _smal_decode_segment($seg + ($i_155 << 3) | 0, $call8);
        $inc23 = $i_155 + 1 | 0;
        if (($inc23 | 0) == ($call2 | 0)) {
          break L2377;
        } else {
          $i_155 = $inc23;
        }
      }
    }
  } while (0);
  if (($call8 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  _fill_holes($call8);
  STACKTOP = __stackBase__;
  return;
}
function _foveon_decoder($size, $code) {
  $size = $size | 0;
  $code = $code | 0;
  var $str_i = 0, $tobool = 0, $0 = 0, $i_022 = 0, $3 = 0, $retval_0_i_i = 0, $inc = 0, $4 = 0, $incdec_ptr = 0, $5 = 0, $6 = 0, $i_1 = 0, $or = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  $str_i = __stackBase__ | 0;
  $tobool = ($code | 0) != 0;
  if ($tobool) {
    $4 = HEAP32[1349757] | 0;
  } else {
    L2389 : do {
      if (($size | 0) != 0) {
        $0 = $str_i;
        $i_022 = 0;
        while (1) {
          HEAP32[$str_i >> 2] = -1;
          _fread($0 | 0, 1, 4, HEAP32[1316053] | 0);
          $3 = HEAP32[$str_i >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i = $3;
          } else {
            $retval_0_i_i = _llvm_bswap_i32($3 | 0) | 0;
          }
          HEAP32[5399064 + ($i_022 << 2) >> 2] = $retval_0_i_i;
          $inc = $i_022 + 1 | 0;
          if (($inc | 0) == ($size | 0)) {
            break L2389;
          } else {
            $i_022 = $inc;
          }
        }
      }
    } while (0);
    _memset(5403176, 0, 24576);
    HEAP32[1349757] = 5403176;
    $4 = 5403176;
  }
  $incdec_ptr = $4 + 12 | 0;
  HEAP32[1349757] = $incdec_ptr;
  if ($incdec_ptr >>> 0 > 5427752 >>> 0) {
    $5 = HEAP32[_stderr >> 2] | 0;
    $6 = HEAP32[1316054] | 0;
    _fprintf($5 | 0, 5585412, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $6, tempInt) | 0);
    _longjmp(5428048, 2);
  }
  do {
    if ($tobool) {
      $i_1 = 0;
      while (1) {
        if ($i_1 >>> 0 >= $size >>> 0) {
          label = 1694;
          break;
        }
        if ((HEAP32[5399064 + ($i_1 << 2) >> 2] | 0) == ($code | 0)) {
          label = 1693;
          break;
        } else {
          $i_1 = $i_1 + 1 | 0;
        }
      }
      if ((label | 0) == 1694) {
        if ($code >>> 0 <= 3623878655) {
          break;
        }
        STACKTOP = __stackBase__;
        return;
      } else if ((label | 0) == 1693) {
        HEAP32[$4 + 8 >> 2] = $i_1;
        STACKTOP = __stackBase__;
        return;
      }
    }
  } while (0);
  $or = $code + 134217728 & -134217728 | $code << 1 & 134217726;
  HEAP32[$4 >> 2] = $incdec_ptr;
  _foveon_decoder($size, $or);
  HEAP32[$4 + 4 >> 2] = HEAP32[1349757] | 0;
  _foveon_decoder($size, $or | 1);
  STACKTOP = __stackBase__;
  return;
}
function _foveon_sd_load_raw() {
  var $str_i25 = 0, $str_i = 0, $diff = 0, $pred = 0, $0 = 0, $cmp1_i = 0, $5 = 0, $6 = 0, $7 = 0, $bit_072 = 0, $row_070 = 0, $bitbuf_069 = 0, $arrayidx73 = 0, $13 = 0, $14 = 0, $15 = 0, $bit_164 = 0, $col_063 = 0, $bitbuf_162 = 0, $19 = 0, $retval_0_i_i44 = 0, $add = 0, $add_1 = 0, $add_2 = 0, $c_158 = 0, $bit_257 = 0, $bitbuf_256 = 0, $bit_352 = 0, $bitbuf_351 = 0, $dindex_050 = 0, $and33 = 0, $shl_1 = 0, $shl_2 = 0, $shl_3 = 0, $bitbuf_5 = 0, $28 = 0, $bit_3_lcssa = 0, $bitbuf_3_lcssa = 0, $dindex_0_lcssa = 0, $arrayidx54 = 0, $add55 = 0, $inc66 = 0, $33 = 0, $34 = 0, $35 = 0, $bitbuf_6 = 0, $bit_4 = 0, $add77 = 0, $add77_1 = 0, $add77_2 = 0, $inc84 = 0, $bit_1_lcssa = 0, $bitbuf_1_lcssa = 0, $inc87 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2068 | 0;
  $str_i25 = __stackBase__ | 0;
  $str_i = __stackBase__ + 4 | 0;
  $diff = __stackBase__ + 8 | 0;
  $pred = __stackBase__ + 2056 | 0;
  $0 = $diff;
  if ((_fread($0 | 0, 2, 1024, HEAP32[1316053] | 0) | 0) >>> 0 < 1024) {
    _derror();
  }
  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
  if (!($cmp1_i ^ (_htons(4660) | 0) == 4660)) {
    _swab($0 | 0, $0 | 0, 2048);
  }
  if ((HEAP32[1315948] | 0) == 0) {
    _foveon_decoder(1024, 0);
  }
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $5 = $pred;
  $6 = $str_i;
  $7 = $str_i25;
  $bitbuf_069 = 0;
  $row_070 = 0;
  $bit_072 = -1;
  while (1) {
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    do {
      if ((HEAP32[1315948] | $bit_072 | 0) == 0) {
        if ((_atoi(5263470) | 0) >= 14) {
          break;
        }
        HEAP32[$str_i >> 2] = -1;
        _fread($6 | 0, 1, 4, HEAP32[1316053] | 0);
      }
    } while (0);
    L2431 : do {
      if (HEAP16[2621484] << 16 >> 16 == 0) {
        $bitbuf_1_lcssa = $bitbuf_069;
        $bit_1_lcssa = 0;
      } else {
        $arrayidx73 = $pred | 0;
        $bitbuf_162 = $bitbuf_069;
        $col_063 = 0;
        $bit_164 = 0;
        $15 = 0;
        $14 = 0;
        $13 = 0;
        while (1) {
          if ((HEAP32[1315948] | 0) == 0) {
            $bitbuf_256 = $bitbuf_162;
            $bit_257 = $bit_164;
            $c_158 = 0;
            while (1) {
              L2442 : do {
                if ((HEAP32[1350794] | 0) == 0) {
                  $dindex_0_lcssa = 5403176;
                  $bitbuf_3_lcssa = $bitbuf_256;
                  $bit_3_lcssa = $bit_257;
                } else {
                  $dindex_050 = 5403176;
                  $bitbuf_351 = $bitbuf_256;
                  $bit_352 = $bit_257;
                  while (1) {
                    $and33 = $bit_352 + 31 & 31;
                    if (($and33 | 0) == 31) {
                      $shl_1 = (_fgetc(HEAP32[1316053] | 0) | 0) + ($bitbuf_351 << 8) << 8;
                      $shl_2 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_1 << 8;
                      $shl_3 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_2 << 8;
                      $bitbuf_5 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_3 | 0;
                    } else {
                      $bitbuf_5 = $bitbuf_351;
                    }
                    $28 = HEAP32[$dindex_050 + (($bitbuf_5 >>> ($and33 >>> 0) & 1) << 2) >> 2] | 0;
                    if ((HEAP32[$28 >> 2] | 0) == 0) {
                      $dindex_0_lcssa = $28;
                      $bitbuf_3_lcssa = $bitbuf_5;
                      $bit_3_lcssa = $and33;
                      break L2442;
                    } else {
                      $dindex_050 = $28;
                      $bitbuf_351 = $bitbuf_5;
                      $bit_352 = $and33;
                    }
                  }
                }
              } while (0);
              $arrayidx54 = $pred + ($c_158 << 2) | 0;
              $add55 = (HEAP32[$arrayidx54 >> 2] | 0) + (HEAP16[$diff + (HEAP32[$dindex_0_lcssa + 8 >> 2] << 1) >> 1] << 16 >> 16) | 0;
              HEAP32[$arrayidx54 >> 2] = $add55;
              if ($add55 >>> 0 > 65535 & ($add55 ^ -65536) >>> 0 > 65535) {
                _derror();
              }
              $inc66 = $c_158 + 1 | 0;
              if (($inc66 | 0) == 3) {
                break;
              } else {
                $bitbuf_256 = $bitbuf_3_lcssa;
                $bit_257 = $bit_3_lcssa;
                $c_158 = $inc66;
              }
            }
            $bit_4 = $bit_3_lcssa;
            $bitbuf_6 = $bitbuf_3_lcssa;
            $35 = HEAP32[$arrayidx73 >> 2] | 0;
            $34 = HEAP32[$pred + 4 >> 2] | 0;
            $33 = HEAP32[$pred + 8 >> 2] | 0;
          } else {
            HEAP32[$str_i25 >> 2] = -1;
            _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
            $19 = HEAP32[$str_i25 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i44 = $19;
            } else {
              $retval_0_i_i44 = _llvm_bswap_i32($19 | 0) | 0;
            }
            $add = $15 + (HEAP16[$diff + (($retval_0_i_i44 & 1023) << 1) >> 1] << 16 >> 16) | 0;
            HEAP32[$pred + 8 >> 2] = $add;
            $add_1 = $14 + (HEAP16[$diff + (($retval_0_i_i44 >>> 10 & 1023) << 1) >> 1] << 16 >> 16) | 0;
            HEAP32[$pred + 4 >> 2] = $add_1;
            $add_2 = $13 + (HEAP16[$diff + (($retval_0_i_i44 >>> 20 & 1023) << 1) >> 1] << 16 >> 16) | 0;
            HEAP32[$arrayidx73 >> 2] = $add_2;
            $bit_4 = $bit_164;
            $bitbuf_6 = $retval_0_i_i44;
            $35 = $add_2;
            $34 = $add_1;
            $33 = $add;
          }
          $add77 = Math_imul(HEAPU16[2621484] | 0, $row_070) + $col_063 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add77 << 3) >> 1] = $35 & 65535;
          $add77_1 = Math_imul(HEAPU16[2621484] | 0, $row_070) + $col_063 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add77_1 << 3) + 2 >> 1] = $34 & 65535;
          $add77_2 = Math_imul(HEAPU16[2621484] | 0, $row_070) + $col_063 | 0;
          HEAP16[(HEAP32[1316051] | 0) + ($add77_2 << 3) + 4 >> 1] = $33 & 65535;
          $inc84 = $col_063 + 1 | 0;
          if (($inc84 | 0) < (HEAPU16[2621484] | 0 | 0)) {
            $bitbuf_162 = $bitbuf_6;
            $col_063 = $inc84;
            $bit_164 = $bit_4;
            $15 = $33;
            $14 = $34;
            $13 = $35;
          } else {
            $bitbuf_1_lcssa = $bitbuf_6;
            $bit_1_lcssa = $bit_4;
            break L2431;
          }
        }
      }
    } while (0);
    $inc87 = $row_070 + 1 | 0;
    if (($inc87 | 0) < (HEAPU16[2699404] | 0 | 0)) {
      $bitbuf_069 = $bitbuf_1_lcssa;
      $row_070 = $inc87;
      $bit_072 = $bit_1_lcssa;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _foveon_dp_load_raw() {
  var $str_i = 0, $str_i_i = 0, $roff = 0, $huff = 0, $vpred = 0, $hpred = 0, $arraydecay = 0, $i_08_i = 0, $call_i = 0, $call1_i = 0, $shr_i = 0, $conv_i = 0, $j_07_i = 0, $inc_i = 0, $inc6_i = 0, $5 = 0, $8 = 0, $retval_0_i_i = 0, $and = 0, $11 = 0, $12 = 0, $c_128 = 0, $15 = 0, $16 = 0, $17 = 0, $row_026 = 0, $and34 = 0, $col_023 = 0, $call_i19 = 0, $19 = 0, $call4_i = 0, $retval_0_i = 0, $arrayidx36 = 0, $conv39 = 0, $arrayidx42 = 0, $arrayidx47_pre_phi = 0, $22 = 0, $add49 = 0, $inc53 = 0, $25 = 0, $26 = 0, $27 = 0, $inc56 = 0, $inc59 = 0, $retval_0_i_i_1 = 0, $and_1 = 0, $30 = 0, $retval_0_i_i_2 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $add_ptr_i = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 552 | 0;
  $str_i = __stackBase__ | 0;
  $str_i_i = __stackBase__ + 4 | 0;
  $roff = __stackBase__ + 8 | 0;
  $huff = __stackBase__ + 24 | 0;
  $vpred = __stackBase__ + 540 | 0;
  $hpred = __stackBase__ + 548 | 0;
  _fseek(HEAP32[1316053] | 0, 8, 1);
  $arraydecay = $huff | 0;
  HEAP16[$arraydecay >> 1] = 8;
  $i_08_i = 0;
  while (1) {
    $call_i = _fgetc(HEAP32[1316053] | 0) | 0;
    $call1_i = _fgetc(HEAP32[1316053] | 0) | 0;
    $shr_i = 256 >>> ($call_i >>> 0);
    L2459 : do {
      if (($shr_i | 0) > 0) {
        $conv_i = ($call_i << 8 | $i_08_i) & 65535;
        $j_07_i = 0;
        while (1) {
          $inc_i = $j_07_i + 1 | 0;
          HEAP16[$huff + ($inc_i + $call1_i << 1) >> 1] = $conv_i;
          if (($inc_i | 0) == ($shr_i | 0)) {
            break L2459;
          } else {
            $j_07_i = $inc_i;
          }
        }
      }
    } while (0);
    $inc6_i = $i_08_i + 1 | 0;
    if (($inc6_i | 0) == 13) {
      break;
    } else {
      $i_08_i = $inc6_i;
    }
  }
  HEAP16[$str_i_i >> 1] = -1;
  _fread($str_i_i | 0, 1, 2, HEAP32[1316053] | 0);
  HEAP32[$roff >> 2] = 48;
  $5 = $str_i;
  HEAP32[$str_i >> 2] = -1;
  _fread($5 | 0, 1, 4, HEAP32[1316053] | 0);
  $8 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $8;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($8 | 0) | 0;
  }
  $and = -48 - $retval_0_i_i & -16;
  HEAP32[$roff + 4 >> 2] = -$and | 0;
  HEAP32[$str_i >> 2] = -1;
  _fread($5 | 0, 1, 4, HEAP32[1316053] | 0);
  $11 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i_1 = $11;
  } else {
    $retval_0_i_i_1 = _llvm_bswap_i32($11 | 0) | 0;
  }
  $and_1 = $and - $retval_0_i_i_1 & -16;
  HEAP32[$roff + 8 >> 2] = -$and_1 | 0;
  HEAP32[$str_i >> 2] = -1;
  _fread($5 | 0, 1, 4, HEAP32[1316053] | 0);
  $30 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i_2 = $30;
  } else {
    $retval_0_i_i_2 = _llvm_bswap_i32($30 | 0) | 0;
  }
  HEAP32[$roff + 12 >> 2] = -($and_1 - $retval_0_i_i_2 & -16) | 0;
  $arrayidx14 = $vpred + 6 | 0;
  $arrayidx16 = $vpred + 4 | 0;
  $arrayidx18 = $vpred + 2 | 0;
  $arrayidx20 = $vpred | 0;
  $add_ptr_i = $huff + 2 | 0;
  $c_128 = 0;
  $12 = 48;
  while (1) {
    _fseek(HEAP32[1316053] | 0, $12 + (HEAP32[1357153] | 0) | 0, 0);
    HEAP32[1349741] = 0;
    HEAP32[1349740] = 0;
    HEAP32[1349742] = 0;
    HEAP16[$arrayidx14 >> 1] = 512;
    HEAP16[$arrayidx16 >> 1] = 512;
    HEAP16[$arrayidx18 >> 1] = 512;
    HEAP16[$arrayidx20 >> 1] = 512;
    $15 = HEAP16[2699404] | 0;
    L2476 : do {
      if ($15 << 16 >> 16 != 0) {
        $row_026 = 0;
        $17 = HEAP16[2621484] | 0;
        $16 = $15;
        while (1) {
          if ($17 << 16 >> 16 == 0) {
            $27 = 0;
            $26 = $16;
          } else {
            $and34 = $row_026 & 1;
            $col_023 = 0;
            while (1) {
              $call_i19 = _getbithuff(HEAPU16[$arraydecay >> 1] | 0, $add_ptr_i) | 0;
              do {
                if (($call_i19 | 0) == 16) {
                  $19 = HEAP32[1357024] | 0;
                  if (($19 | 0) == 0 | $19 >>> 0 > 16842751) {
                    $retval_0_i = -32768;
                    break;
                  } else {
                    label = 1744;
                    break;
                  }
                } else {
                  label = 1744;
                }
              } while (0);
              do {
                if ((label | 0) == 1744) {
                  label = 0;
                  $call4_i = _getbithuff($call_i19, 0) | 0;
                  if (($call4_i & 1 << $call_i19 - 1 | 0) != 0) {
                    $retval_0_i = $call4_i;
                    break;
                  }
                  $retval_0_i = ((-1 << $call_i19) + 1 | 0) + $call4_i | 0;
                }
              } while (0);
              if ($col_023 >>> 0 < 2) {
                $arrayidx36 = $vpred + ($and34 << 2) + ($col_023 << 1) | 0;
                $conv39 = (HEAPU16[$arrayidx36 >> 1] | 0) + $retval_0_i & 65535;
                HEAP16[$arrayidx36 >> 1] = $conv39;
                HEAP16[$hpred + ($col_023 << 1) >> 1] = $conv39;
                $arrayidx47_pre_phi = $hpred + (($col_023 & 1) << 1) | 0;
              } else {
                $arrayidx42 = $hpred + (($col_023 & 1) << 1) | 0;
                HEAP16[$arrayidx42 >> 1] = (HEAPU16[$arrayidx42 >> 1] | 0) + $retval_0_i & 65535;
                $arrayidx47_pre_phi = $arrayidx42;
              }
              $22 = HEAP16[$arrayidx47_pre_phi >> 1] | 0;
              $add49 = Math_imul(HEAPU16[2621484] | 0, $row_026) + $col_023 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add49 << 3) + ($c_128 << 1) >> 1] = $22;
              $inc53 = $col_023 + 1 | 0;
              $25 = HEAP16[2621484] | 0;
              if ($inc53 >>> 0 < ($25 & 65535) >>> 0) {
                $col_023 = $inc53;
              } else {
                break;
              }
            }
            $27 = $25;
            $26 = HEAP16[2699404] | 0;
          }
          $inc56 = $row_026 + 1 | 0;
          if ($inc56 >>> 0 < ($26 & 65535) >>> 0) {
            $row_026 = $inc56;
            $17 = $27;
            $16 = $26;
          } else {
            break L2476;
          }
        }
      }
    } while (0);
    $inc59 = $c_128 + 1 | 0;
    if (($inc59 | 0) == 3) {
      break;
    }
    $c_128 = $inc59;
    $12 = HEAP32[$roff + ($inc59 << 2) >> 2] | 0;
  }
  STACKTOP = __stackBase__;
  return;
}
function _foveon_thumb() {
  var $str_i21 = 0, $str_i = 0, $pred = 0, $3 = 0, $retval_0_i_i = 0, $conv1 = 0, $call8 = 0, $9 = 0, $10 = 0, $row_067 = 0, $inc = 0, $16 = 0, $17 = 0, $row_164 = 0, $bit_063 = 0, $bitbuf_062 = 0, $18 = 0, $bit_157 = 0, $bitbuf_156 = 0, $col_055 = 0, $c_052 = 0, $bit_251 = 0, $bitbuf_250 = 0, $dindex_047 = 0, $bit_346 = 0, $bitbuf_345 = 0, $and = 0, $shl_1 = 0, $shl_2 = 0, $shl_3 = 0, $bitbuf_5 = 0, $25 = 0, $dindex_0_lcssa = 0, $bit_3_lcssa = 0, $bitbuf_3_lcssa = 0, $arrayidx52 = 0, $add54 = 0, $inc60 = 0, $inc63 = 0, $bit_1_lcssa = 0, $bitbuf_1_lcssa = 0, $inc66 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $str_i21 = __stackBase__ | 0;
  $str_i = __stackBase__ + 4 | 0;
  $pred = __stackBase__ + 8 | 0;
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $3 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $3;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($3 | 0) | 0;
  }
  $conv1 = HEAPU16[2622034] | 0;
  _fprintf(HEAP32[1315761] | 0, 5573616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAPU16[2622024] | 0, HEAP32[tempInt + 4 >> 2] = $conv1, tempInt) | 0);
  if (($retval_0_i_i | 0) != 0) {
    if ($retval_0_i_i >>> 0 < ((HEAPU16[2622024] | 0) * 3 & -1) >>> 0) {
      STACKTOP = __stackBase__;
      return;
    }
    $call8 = _malloc($retval_0_i_i) | 0;
    if (($call8 | 0) == 0) {
      $9 = HEAP32[_stderr >> 2] | 0;
      $10 = HEAP32[1316054] | 0;
      _fprintf($9 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = 5585196, tempInt) | 0);
      _longjmp(5428048, 1);
    }
    L2511 : do {
      if (HEAP16[2622034] << 16 >> 16 != 0) {
        $row_067 = 0;
        while (1) {
          _fread($call8 | 0, 1, $retval_0_i_i | 0, HEAP32[1316053] | 0);
          _fwrite($call8 | 0, 3, HEAPU16[2622024] | 0 | 0, HEAP32[1315761] | 0);
          $inc = $row_067 + 1 | 0;
          if ($inc >>> 0 < (HEAPU16[2622034] | 0) >>> 0) {
            $row_067 = $inc;
          } else {
            break L2511;
          }
        }
      }
    } while (0);
    _free($call8);
    STACKTOP = __stackBase__;
    return;
  }
  _foveon_decoder(256, 0);
  if (HEAP16[2622034] << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $16 = $pred;
  $17 = $str_i21;
  $bitbuf_062 = 0;
  $bit_063 = 1;
  $row_164 = 0;
  while (1) {
    HEAP16[$16 >> 1] = 0;
    HEAP16[$16 + 2 >> 1] = 0;
    HEAP16[$16 + 4 >> 1] = 0;
    if (($bit_063 | 0) == 0) {
      HEAP32[$str_i21 >> 2] = -1;
      $18 = HEAP32[1316053] | 0;
      _fread($17 | 0, 1, 4, $18 | 0);
    }
    L2525 : do {
      if (HEAP16[2622024] << 16 >> 16 == 0) {
        $bitbuf_1_lcssa = $bitbuf_062;
        $bit_1_lcssa = 0;
      } else {
        $col_055 = 0;
        $bitbuf_156 = $bitbuf_062;
        $bit_157 = 0;
        while (1) {
          $bitbuf_250 = $bitbuf_156;
          $bit_251 = $bit_157;
          $c_052 = 0;
          while (1) {
            L2530 : do {
              if ((HEAP32[1350794] | 0) == 0) {
                $bitbuf_3_lcssa = $bitbuf_250;
                $bit_3_lcssa = $bit_251;
                $dindex_0_lcssa = 5403176;
              } else {
                $bitbuf_345 = $bitbuf_250;
                $bit_346 = $bit_251;
                $dindex_047 = 5403176;
                while (1) {
                  $and = $bit_346 + 31 & 31;
                  if (($and | 0) == 31) {
                    $shl_1 = (_fgetc(HEAP32[1316053] | 0) | 0) + ($bitbuf_345 << 8) << 8;
                    $shl_2 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_1 << 8;
                    $shl_3 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_2 << 8;
                    $bitbuf_5 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl_3 | 0;
                  } else {
                    $bitbuf_5 = $bitbuf_345;
                  }
                  $25 = HEAP32[$dindex_047 + (($bitbuf_5 >>> ($and >>> 0) & 1) << 2) >> 2] | 0;
                  if ((HEAP32[$25 >> 2] | 0) == 0) {
                    $bitbuf_3_lcssa = $bitbuf_5;
                    $bit_3_lcssa = $and;
                    $dindex_0_lcssa = $25;
                    break L2530;
                  } else {
                    $bitbuf_345 = $bitbuf_5;
                    $bit_346 = $and;
                    $dindex_047 = $25;
                  }
                }
              }
            } while (0);
            $arrayidx52 = $pred + ($c_052 << 1) | 0;
            $add54 = (HEAPU16[$arrayidx52 >> 1] | 0) + (HEAP32[$dindex_0_lcssa + 8 >> 2] | 0) | 0;
            HEAP16[$arrayidx52 >> 1] = $add54 & 65535;
            _fputc($add54 << 16 >> 16 | 0, HEAP32[1315761] | 0);
            $inc60 = $c_052 + 1 | 0;
            if (($inc60 | 0) == 3) {
              break;
            } else {
              $bitbuf_250 = $bitbuf_3_lcssa;
              $bit_251 = $bit_3_lcssa;
              $c_052 = $inc60;
            }
          }
          $inc63 = $col_055 + 1 | 0;
          if ($inc63 >>> 0 < (HEAPU16[2622024] | 0) >>> 0) {
            $col_055 = $inc63;
            $bitbuf_156 = $bitbuf_3_lcssa;
            $bit_157 = $bit_3_lcssa;
          } else {
            $bitbuf_1_lcssa = $bitbuf_3_lcssa;
            $bit_1_lcssa = $bit_3_lcssa;
            break L2525;
          }
        }
      }
    } while (0);
    $inc66 = $row_164 + 1 | 0;
    if ($inc66 >>> 0 < (HEAPU16[2622034] | 0) >>> 0) {
      $bitbuf_062 = $bitbuf_1_lcssa;
      $bit_063 = $bit_1_lcssa;
      $row_164 = $inc66;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _foveon_camf_param($block, $param) {
  $block = $block | 0;
  $param = $param | 0;
  var $0 = 0, $1 = 0, $cmp_i = 0, $idx_0230 = 0, $conv2_i = 0, $retval_0_i = 0, $conv2_i173 = 0, $add_ptr_sum18232 = 0, $add_ptr14233 = 0, $add_ptr_sum18 = 0, $add_ptr14 = 0, $retval_0_i170246 = 0, $add_ptr14237243 = 0, $retval_0_i140 = 0, $add_ptr_sum19 = 0, $num_0 = 0, $cp_0 = 0, $add_ptr20 = 0, $conv2_i83 = 0, $retval_0_i110 = 0, $conv2_i53 = 0, $retval_0_i80 = 0, $conv2_i23 = 0, $retval_0_i50 = 0, $add = 0, $retval_0 = 0, label = 0;
  $0 = HEAP32[1315885] | 0;
  if (($0 | 0) == 0) {
    $retval_0 = 0;
    return $retval_0 | 0;
  }
  $1 = HEAP32[1315886] | 0;
  $cmp_i = HEAP16[2631518] << 16 >> 16 == 18761;
  $idx_0230 = 0;
  L2544 : while (1) {
    if ((_strncmp($1 + $idx_0230 | 0, 5584496, 3) | 0) != 0) {
      $retval_0 = 0;
      label = 1814;
      break;
    }
    L2547 : do {
      if (HEAP8[$1 + ($idx_0230 + 3 | 0) | 0] << 24 >> 24 == 80) {
        $conv2_i = HEAPU8[$1 + ($idx_0230 + 12 | 0) | 0] | 0;
        if ($cmp_i) {
          $retval_0_i = (HEAPU8[$1 + ($idx_0230 + 13 | 0) | 0] | 0) << 8 | $conv2_i | (HEAPU8[$1 + ($idx_0230 + 14 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0230 + 15 | 0) | 0] | 0) << 24;
        } else {
          $retval_0_i = (HEAPU8[$1 + ($idx_0230 + 13 | 0) | 0] | 0) << 16 | $conv2_i << 24 | (HEAPU8[$1 + ($idx_0230 + 14 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0230 + 15 | 0) | 0] | 0);
        }
        if ((_strcmp($block | 0, $1 + ($retval_0_i + $idx_0230 | 0) | 0) | 0) != 0) {
          break;
        }
        $conv2_i173 = HEAPU8[$1 + ($idx_0230 + 16 | 0) | 0] | 0;
        if ($cmp_i) {
          $add_ptr_sum18232 = ((HEAPU8[$1 + ($idx_0230 + 17 | 0) | 0] | 0) << 8 | $conv2_i173 | (HEAPU8[$1 + ($idx_0230 + 18 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0230 + 19 | 0) | 0] | 0) << 24) + $idx_0230 | 0;
          $add_ptr14233 = $1 + $add_ptr_sum18232 | 0;
          $retval_0_i140 = (HEAPU8[$1 + ($add_ptr_sum18232 + 5 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum18232 + 4 | 0) | 0] | 0) | (HEAPU8[$1 + ($add_ptr_sum18232 + 6 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum18232 + 7 | 0) | 0] | 0) << 24;
          $add_ptr14237243 = $add_ptr14233;
          $retval_0_i170246 = (HEAPU8[$1 + ($add_ptr_sum18232 + 1 | 0) | 0] | 0) << 8 | (HEAPU8[$add_ptr14233] | 0) | (HEAPU8[$1 + ($add_ptr_sum18232 + 2 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum18232 + 3 | 0) | 0] | 0) << 24;
        } else {
          $add_ptr_sum18 = ((HEAPU8[$1 + ($idx_0230 + 17 | 0) | 0] | 0) << 16 | $conv2_i173 << 24 | (HEAPU8[$1 + ($idx_0230 + 18 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0230 + 19 | 0) | 0] | 0)) + $idx_0230 | 0;
          $add_ptr14 = $1 + $add_ptr_sum18 | 0;
          $retval_0_i140 = (HEAPU8[$1 + ($add_ptr_sum18 + 5 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum18 + 4 | 0) | 0] | 0) << 24 | (HEAPU8[$1 + ($add_ptr_sum18 + 6 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum18 + 7 | 0) | 0] | 0);
          $add_ptr14237243 = $add_ptr14;
          $retval_0_i170246 = (HEAPU8[$1 + ($add_ptr_sum18 + 1 | 0) | 0] | 0) << 16 | (HEAPU8[$add_ptr14] | 0) << 24 | (HEAPU8[$1 + ($add_ptr_sum18 + 2 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum18 + 3 | 0) | 0] | 0);
        }
        $add_ptr_sum19 = $retval_0_i140 + $idx_0230 | 0;
        $cp_0 = $add_ptr14237243;
        $num_0 = $retval_0_i170246;
        while (1) {
          if (($num_0 | 0) == 0) {
            break L2547;
          }
          $add_ptr20 = $cp_0 + 8 | 0;
          $conv2_i83 = HEAPU8[$add_ptr20] | 0;
          if ($cmp_i) {
            $retval_0_i110 = (HEAPU8[$cp_0 + 9 | 0] | 0) << 8 | $conv2_i83 | (HEAPU8[$cp_0 + 10 | 0] | 0) << 16 | (HEAPU8[$cp_0 + 11 | 0] | 0) << 24;
          } else {
            $retval_0_i110 = (HEAPU8[$cp_0 + 9 | 0] | 0) << 16 | $conv2_i83 << 24 | (HEAPU8[$cp_0 + 10 | 0] | 0) << 8 | (HEAPU8[$cp_0 + 11 | 0] | 0);
          }
          if ((_strcmp($param | 0, $1 + ($retval_0_i110 + $add_ptr_sum19 | 0) | 0) | 0) == 0) {
            label = 1803;
            break L2544;
          } else {
            $cp_0 = $add_ptr20;
            $num_0 = $num_0 - 1 | 0;
          }
        }
      }
    } while (0);
    $conv2_i23 = HEAPU8[$1 + ($idx_0230 + 8 | 0) | 0] | 0;
    if ($cmp_i) {
      $retval_0_i50 = (HEAPU8[$1 + ($idx_0230 + 9 | 0) | 0] | 0) << 8 | $conv2_i23 | (HEAPU8[$1 + ($idx_0230 + 10 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0230 + 11 | 0) | 0] | 0) << 24;
    } else {
      $retval_0_i50 = (HEAPU8[$1 + ($idx_0230 + 9 | 0) | 0] | 0) << 16 | $conv2_i23 << 24 | (HEAPU8[$1 + ($idx_0230 + 10 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0230 + 11 | 0) | 0] | 0);
    }
    $add = $retval_0_i50 + $idx_0230 | 0;
    if ($add >>> 0 < $0 >>> 0) {
      $idx_0230 = $add;
    } else {
      $retval_0 = 0;
      label = 1812;
      break;
    }
  }
  if ((label | 0) == 1814) {
    return $retval_0 | 0;
  } else if ((label | 0) == 1803) {
    $conv2_i53 = HEAPU8[$cp_0 + 12 | 0] | 0;
    if ($cmp_i) {
      $retval_0_i80 = (HEAPU8[$cp_0 + 13 | 0] | 0) << 8 | $conv2_i53 | (HEAPU8[$cp_0 + 14 | 0] | 0) << 16 | (HEAPU8[$cp_0 + 15 | 0] | 0) << 24;
    } else {
      $retval_0_i80 = (HEAPU8[$cp_0 + 13 | 0] | 0) << 16 | $conv2_i53 << 24 | (HEAPU8[$cp_0 + 14 | 0] | 0) << 8 | (HEAPU8[$cp_0 + 15 | 0] | 0);
    }
    $retval_0 = $1 + ($retval_0_i80 + $add_ptr_sum19 | 0) | 0;
    return $retval_0 | 0;
  } else if ((label | 0) == 1812) {
    return $retval_0 | 0;
  }
  return 0;
}
function _foveon_load_camf() {
  var $str_i111 = 0, $str_i_i = 0, $str_i88 = 0, $str_i67 = 0, $str_i46 = 0, $str_i25 = 0, $str_i = 0, $huff = 0, $vpred = 0, $tmpcast = 0, $hpred = 0, $5 = 0, $retval_0_i_i = 0, $13 = 0, $retval_0_i_i86 = 0, $17 = 0, $retval_0_i_i107 = 0, $18 = 0, $19 = 0, $20 = 0, $i_0139 = 0, $high_0138 = 0, $rem = 0, $mul8$0 = 0, $mul8$1 = 0, $conv9 = 0, $arrayidx = 0, $inc = 0, $div = 0, $call20 = 0, $26 = 0, $27 = 0, $arraydecay = 0, $i_08_i = 0, $call_i110 = 0, $call1_i = 0, $shr_i = 0, $conv_i = 0, $j_07_i = 0, $inc_i = 0, $inc6_i = 0, $cmp28140 = 0, $add_ptr_i = 0, $arrayidx50 = 0, $arrayidx59 = 0, $row_0146 = 0, $j_0145 = 0, $and = 0, $col_0142 = 0, $j_1141 = 0, $call_i133 = 0, $35 = 0, $call4_i = 0, $retval_0_i = 0, $arrayidx37 = 0, $conv40 = 0, $and43 = 0, $arrayidx44 = 0, $and48_pre_phi = 0, $38 = 0, $40 = 0, $j_2 = 0, $inc71 = 0, $j_1_lcssa = 0, $inc74 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 552 | 0;
  $str_i111 = __stackBase__ | 0;
  $str_i_i = __stackBase__ + 4 | 0;
  $str_i88 = __stackBase__ + 8 | 0;
  $str_i67 = __stackBase__ + 12 | 0;
  $str_i46 = __stackBase__ + 16 | 0;
  $str_i25 = __stackBase__ + 20 | 0;
  $str_i = __stackBase__ + 24 | 0;
  $huff = __stackBase__ + 28 | 0;
  $vpred = __stackBase__ + 544 | 0;
  $tmpcast = $vpred;
  $hpred = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[$vpred >> 2] = 33554944;
  HEAP32[$vpred + 4 >> 2] = 33554944;
  _fseek(HEAP32[1316053] | 0, HEAP32[1315884] | 0, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $5 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $5;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($5 | 0) | 0;
  }
  HEAP32[$str_i25 >> 2] = -1;
  _fread($str_i25 | 0, 1, 4, HEAP32[1316053] | 0);
  HEAP32[$str_i46 >> 2] = -1;
  _fread($str_i46 | 0, 1, 4, HEAP32[1316053] | 0);
  HEAP32[$str_i67 >> 2] = -1;
  _fread($str_i67 | 0, 1, 4, HEAP32[1316053] | 0);
  $13 = HEAP32[$str_i67 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i86 = $13;
  } else {
    $retval_0_i_i86 = _llvm_bswap_i32($13 | 0) | 0;
  }
  HEAP32[$str_i88 >> 2] = -1;
  _fread($str_i88 | 0, 1, 4, HEAP32[1316053] | 0);
  $17 = HEAP32[$str_i88 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i107 = $17;
  } else {
    $retval_0_i_i107 = _llvm_bswap_i32($17 | 0) | 0;
  }
  if (($retval_0_i_i | 0) == 2) {
    $18 = HEAP32[1315886] | 0;
    $19 = HEAP32[1315885] | 0;
    $20 = HEAP32[1316053] | 0;
    _fread($18 | 0, 1, $19 | 0, $20 | 0);
    if ((HEAP32[1315885] | 0) == 0) {
      STACKTOP = __stackBase__;
      return;
    } else {
      $high_0138 = $retval_0_i_i107;
      $i_0139 = 0;
    }
    while (1) {
      $rem = ((($high_0138 * 1597 & -1) + 51749 | 0) >>> 0) % 244944;
      $mul8$0 = (i64Math_multiply($rem | 0, 0, 301593171, 0), HEAP32[tempDoublePtr >> 2] | 0);
      $mul8$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $conv9 = $mul8$0 >>> 24 | $mul8$1 << 8;
      $arrayidx = (HEAP32[1315886] | 0) + $i_0139 | 0;
      HEAP8[$arrayidx] = ((((($rem << 8) - $conv9 | 0) >>> 1) + $conv9 | 0) >>> 17 ^ (HEAPU8[$arrayidx] | 0)) & 255;
      $inc = $i_0139 + 1 | 0;
      if ($inc >>> 0 < (HEAP32[1315885] | 0) >>> 0) {
        $high_0138 = $rem;
        $i_0139 = $inc;
      } else {
        break;
      }
    }
    STACKTOP = __stackBase__;
    return;
  } else if (($retval_0_i_i | 0) == 4) {
    _free(HEAP32[1315886] | 0);
    $div = Math_imul($retval_0_i_i86 * 3 & -1, $retval_0_i_i107) >>> 1;
    HEAP32[1315885] = $div;
    $call20 = _malloc($div) | 0;
    HEAP32[1315886] = $call20;
    if (($call20 | 0) == 0) {
      $26 = HEAP32[_stderr >> 2] | 0;
      $27 = HEAP32[1316054] | 0;
      _fprintf($26 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $27, HEAP32[tempInt + 4 >> 2] = 5584972, tempInt) | 0);
      _longjmp(5428048, 1);
    }
    $arraydecay = $huff | 0;
    HEAP16[$arraydecay >> 1] = 8;
    $i_08_i = 0;
    while (1) {
      $call_i110 = _fgetc(HEAP32[1316053] | 0) | 0;
      $call1_i = _fgetc(HEAP32[1316053] | 0) | 0;
      $shr_i = 256 >>> ($call_i110 >>> 0);
      L2604 : do {
        if (($shr_i | 0) > 0) {
          $conv_i = ($call_i110 << 8 | $i_08_i) & 65535;
          $j_07_i = 0;
          while (1) {
            $inc_i = $j_07_i + 1 | 0;
            HEAP16[$huff + ($inc_i + $call1_i << 1) >> 1] = $conv_i;
            if (($inc_i | 0) == ($shr_i | 0)) {
              break L2604;
            } else {
              $j_07_i = $inc_i;
            }
          }
        }
      } while (0);
      $inc6_i = $i_08_i + 1 | 0;
      if (($inc6_i | 0) == 13) {
        break;
      } else {
        $i_08_i = $inc6_i;
      }
    }
    HEAP16[$str_i_i >> 1] = -1;
    _fread($str_i_i | 0, 1, 2, HEAP32[1316053] | 0);
    HEAP32[$str_i111 >> 2] = -1;
    _fread($str_i111 | 0, 1, 4, HEAP32[1316053] | 0);
    HEAP32[1349741] = 0;
    HEAP32[1349740] = 0;
    HEAP32[1349742] = 0;
    if (($retval_0_i_i107 | 0) == 0) {
      STACKTOP = __stackBase__;
      return;
    }
    $cmp28140 = ($retval_0_i_i86 | 0) == 0;
    $add_ptr_i = $huff + 2 | 0;
    $arrayidx50 = $hpred | 0;
    $arrayidx59 = $hpred + 2 | 0;
    $j_0145 = 0;
    $row_0146 = 0;
    while (1) {
      L2615 : do {
        if ($cmp28140) {
          $j_1_lcssa = $j_0145;
        } else {
          $and = $row_0146 & 1;
          $j_1141 = $j_0145;
          $col_0142 = 0;
          while (1) {
            $call_i133 = _getbithuff(HEAPU16[$arraydecay >> 1] | 0, $add_ptr_i) | 0;
            do {
              if (($call_i133 | 0) == 16) {
                $35 = HEAP32[1357024] | 0;
                if (($35 | 0) == 0 | $35 >>> 0 > 16842751) {
                  $retval_0_i = -32768;
                  break;
                } else {
                  label = 1838;
                  break;
                }
              } else {
                label = 1838;
              }
            } while (0);
            do {
              if ((label | 0) == 1838) {
                label = 0;
                $call4_i = _getbithuff($call_i133, 0) | 0;
                if (($call4_i & 1 << $call_i133 - 1 | 0) != 0) {
                  $retval_0_i = $call4_i;
                  break;
                }
                $retval_0_i = ((-1 << $call_i133) + 1 | 0) + $call4_i | 0;
              }
            } while (0);
            if ($col_0142 >>> 0 < 2) {
              $arrayidx37 = $tmpcast + ($and << 2) + ($col_0142 << 1) | 0;
              $conv40 = (HEAPU16[$arrayidx37 >> 1] | 0) + $retval_0_i & 65535;
              HEAP16[$arrayidx37 >> 1] = $conv40;
              HEAP16[$hpred + ($col_0142 << 1) >> 1] = $conv40;
              $and48_pre_phi = $col_0142 & 1;
            } else {
              $and43 = $col_0142 & 1;
              $arrayidx44 = $hpred + ($and43 << 1) | 0;
              HEAP16[$arrayidx44 >> 1] = (HEAPU16[$arrayidx44 >> 1] | 0) + $retval_0_i & 65535;
              $and48_pre_phi = $and43;
            }
            if (($and48_pre_phi | 0) == 0) {
              $j_2 = $j_1141;
            } else {
              $38 = HEAP16[$arrayidx50 >> 1] | 0;
              HEAP8[(HEAP32[1315886] | 0) + $j_1141 | 0] = ($38 & 65535) >>> 4 & 255;
              $40 = HEAP16[$arrayidx59 >> 1] | 0;
              HEAP8[(HEAP32[1315886] | 0) + ($j_1141 + 1 | 0) | 0] = (($40 & 65535) >>> 8 | ($38 & 65535) << 4) & 255;
              HEAP8[(HEAP32[1315886] | 0) + ($j_1141 + 2 | 0) | 0] = $40 & 255;
              $j_2 = $j_1141 + 3 | 0;
            }
            $inc71 = $col_0142 + 1 | 0;
            if (($inc71 | 0) == ($retval_0_i_i86 | 0)) {
              $j_1_lcssa = $j_2;
              break L2615;
            } else {
              $j_1141 = $j_2;
              $col_0142 = $inc71;
            }
          }
        }
      } while (0);
      $inc74 = $row_0146 + 1 | 0;
      if (($inc74 | 0) == ($retval_0_i_i107 | 0)) {
        break;
      } else {
        $j_0145 = $j_1_lcssa;
        $row_0146 = $inc74;
      }
    }
    STACKTOP = __stackBase__;
    return;
  } else {
    _fprintf(HEAP32[_stderr >> 2] | 0, 5584728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[1316054] | 0, HEAP32[tempInt + 4 >> 2] = $retval_0_i_i, tempInt) | 0);
    STACKTOP = __stackBase__;
    return;
  }
}
function _foveon_camf_matrix($dim, $name) {
  $dim = $dim | 0;
  $name = $name | 0;
  var $0 = 0, $1 = 0, $cmp_i = 0, $idx_0330 = 0, $conv2_i = 0, $retval_0_i = 0, $arrayidx12 = 0, $arrayidx13 = 0, $11 = 0, $cmp_i130 = 0, $conv2_i131 = 0, $add_ptr_sum34339 = 0, $add_ptr17340 = 0, $add_ptr_sum34 = 0, $add_ptr17 = 0, $retval_0_i188354 = 0, $add_ptr_sum34342352 = 0, $add_ptr17344350 = 0, $retval_0_i218 = 0, $conv2_i251 = 0, $retval_0_i278 = 0, $add_ptr_sum36 = 0, $42 = 0, $dec327_in = 0, $cp_0326 = 0, $dec327 = 0, $add_ptr31 = 0, $conv2_i221 = 0, $retval_0_i248 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $mul40 = 0.0, $conv46 = 0, $call48 = 0, $54 = 0, $55 = 0, $56 = 0, $i_1322 = 0, $add_ptr27_sum37 = 0, $conv2_i100 = 0, $retval_0_i127 = 0, $add_ptr27_sum = 0, $conv2_i70 = 0, $retval_0_i97 = 0, $inc = 0, $conv2_i40 = 0, $retval_0_i67 = 0, $add = 0, $retval_0 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = HEAP32[1315885] | 0;
  L2635 : do {
    if (($0 | 0) != 0) {
      $1 = HEAP32[1315886] | 0;
      $cmp_i = HEAP16[2631518] << 16 >> 16 == 18761;
      $idx_0330 = 0;
      while (1) {
        if ((_strncmp($1 + $idx_0330 | 0, 5584496, 3) | 0) != 0) {
          break L2635;
        }
        if (HEAP8[$1 + ($idx_0330 + 3 | 0) | 0] << 24 >> 24 == 77) {
          $conv2_i = HEAPU8[$1 + ($idx_0330 + 12 | 0) | 0] | 0;
          if ($cmp_i) {
            $retval_0_i = (HEAPU8[$1 + ($idx_0330 + 13 | 0) | 0] | 0) << 8 | $conv2_i | (HEAPU8[$1 + ($idx_0330 + 14 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0330 + 15 | 0) | 0] | 0) << 24;
          } else {
            $retval_0_i = (HEAPU8[$1 + ($idx_0330 + 13 | 0) | 0] | 0) << 16 | $conv2_i << 24 | (HEAPU8[$1 + ($idx_0330 + 14 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0330 + 15 | 0) | 0] | 0);
          }
          if ((_strcmp($name | 0, $1 + ($retval_0_i + $idx_0330 | 0) | 0) | 0) == 0) {
            break;
          }
        }
        $conv2_i40 = HEAPU8[$1 + ($idx_0330 + 8 | 0) | 0] | 0;
        if ($cmp_i) {
          $retval_0_i67 = (HEAPU8[$1 + ($idx_0330 + 9 | 0) | 0] | 0) << 8 | $conv2_i40 | (HEAPU8[$1 + ($idx_0330 + 10 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0330 + 11 | 0) | 0] | 0) << 24;
        } else {
          $retval_0_i67 = (HEAPU8[$1 + ($idx_0330 + 9 | 0) | 0] | 0) << 16 | $conv2_i40 << 24 | (HEAPU8[$1 + ($idx_0330 + 10 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0330 + 11 | 0) | 0] | 0);
        }
        $add = $retval_0_i67 + $idx_0330 | 0;
        if ($add >>> 0 < $0 >>> 0) {
          $idx_0330 = $add;
        } else {
          break L2635;
        }
      }
      $arrayidx12 = $dim + 8 | 0;
      HEAP32[$arrayidx12 >> 2] = 1;
      $arrayidx13 = $dim + 4 | 0;
      HEAP32[$arrayidx13 >> 2] = 1;
      HEAP32[$dim >> 2] = 1;
      $11 = HEAP16[2631518] | 0;
      $cmp_i130 = $11 << 16 >> 16 == 18761;
      $conv2_i131 = HEAPU8[$1 + ($idx_0330 + 16 | 0) | 0] | 0;
      if ($cmp_i130) {
        $add_ptr_sum34339 = ((HEAPU8[$1 + ($idx_0330 + 17 | 0) | 0] | 0) << 8 | $conv2_i131 | (HEAPU8[$1 + ($idx_0330 + 18 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($idx_0330 + 19 | 0) | 0] | 0) << 24) + $idx_0330 | 0;
        $add_ptr17340 = $1 + $add_ptr_sum34339 | 0;
        $retval_0_i218 = (HEAPU8[$1 + ($add_ptr_sum34339 + 5 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum34339 + 4 | 0) | 0] | 0) | (HEAPU8[$1 + ($add_ptr_sum34339 + 6 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum34339 + 7 | 0) | 0] | 0) << 24;
        $add_ptr17344350 = $add_ptr17340;
        $add_ptr_sum34342352 = $add_ptr_sum34339;
        $retval_0_i188354 = (HEAPU8[$1 + ($add_ptr_sum34339 + 1 | 0) | 0] | 0) << 8 | (HEAPU8[$add_ptr17340] | 0) | (HEAPU8[$1 + ($add_ptr_sum34339 + 2 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum34339 + 3 | 0) | 0] | 0) << 24;
      } else {
        $add_ptr_sum34 = ((HEAPU8[$1 + ($idx_0330 + 17 | 0) | 0] | 0) << 16 | $conv2_i131 << 24 | (HEAPU8[$1 + ($idx_0330 + 18 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($idx_0330 + 19 | 0) | 0] | 0)) + $idx_0330 | 0;
        $add_ptr17 = $1 + $add_ptr_sum34 | 0;
        $retval_0_i218 = (HEAPU8[$1 + ($add_ptr_sum34 + 5 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum34 + 4 | 0) | 0] | 0) << 24 | (HEAPU8[$1 + ($add_ptr_sum34 + 6 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum34 + 7 | 0) | 0] | 0);
        $add_ptr17344350 = $add_ptr17;
        $add_ptr_sum34342352 = $add_ptr_sum34;
        $retval_0_i188354 = (HEAPU8[$1 + ($add_ptr_sum34 + 1 | 0) | 0] | 0) << 16 | (HEAPU8[$add_ptr17] | 0) << 24 | (HEAPU8[$1 + ($add_ptr_sum34 + 2 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum34 + 3 | 0) | 0] | 0);
      }
      if ($retval_0_i218 >>> 0 > 3) {
        break;
      }
      $conv2_i251 = HEAPU8[$1 + ($add_ptr_sum34342352 + 8 | 0) | 0] | 0;
      if ($cmp_i130) {
        $retval_0_i278 = (HEAPU8[$1 + ($add_ptr_sum34342352 + 9 | 0) | 0] | 0) << 8 | $conv2_i251 | (HEAPU8[$1 + ($add_ptr_sum34342352 + 10 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr_sum34342352 + 11 | 0) | 0] | 0) << 24;
      } else {
        $retval_0_i278 = (HEAPU8[$1 + ($add_ptr_sum34342352 + 9 | 0) | 0] | 0) << 16 | $conv2_i251 << 24 | (HEAPU8[$1 + ($add_ptr_sum34342352 + 10 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr_sum34342352 + 11 | 0) | 0] | 0);
      }
      $add_ptr_sum36 = $retval_0_i278 + $idx_0330 | 0;
      if (($retval_0_i218 | 0) == 0) {
        $52 = 1.0;
        $51 = 1.0;
        $50 = 1.0;
      } else {
        $cp_0326 = $add_ptr17344350;
        $dec327_in = $retval_0_i218;
        $42 = $11;
        while (1) {
          $dec327 = $dec327_in - 1 | 0;
          $add_ptr31 = $cp_0326 + 12 | 0;
          $conv2_i221 = HEAPU8[$add_ptr31] | 0;
          if ($42 << 16 >> 16 == 18761) {
            $retval_0_i248 = (HEAPU8[$cp_0326 + 13 | 0] | 0) << 8 | $conv2_i221 | (HEAPU8[$cp_0326 + 14 | 0] | 0) << 16 | (HEAPU8[$cp_0326 + 15 | 0] | 0) << 24;
          } else {
            $retval_0_i248 = (HEAPU8[$cp_0326 + 13 | 0] | 0) << 16 | $conv2_i221 << 24 | (HEAPU8[$cp_0326 + 14 | 0] | 0) << 8 | (HEAPU8[$cp_0326 + 15 | 0] | 0);
          }
          HEAP32[$dim + ($dec327 << 2) >> 2] = $retval_0_i248;
          if (($dec327 | 0) == 0) {
            break;
          }
          $cp_0326 = $add_ptr31;
          $dec327_in = $dec327;
          $42 = HEAP16[2631518] | 0;
        }
        $52 = +((HEAP32[$dim >> 2] | 0) >>> 0 >>> 0);
        $51 = +((HEAP32[$arrayidx13 >> 2] | 0) >>> 0 >>> 0);
        $50 = +((HEAP32[$arrayidx12 >> 2] | 0) >>> 0 >>> 0);
      }
      $mul40 = $52 * $51 * $50;
      if ($mul40 > +((HEAP32[1315885] | 0) >>> 2 >>> 0 >>> 0)) {
        break;
      }
      $conv46 = ~~$mul40;
      $call48 = _malloc($conv46 << 2) | 0;
      $54 = $call48;
      if (($call48 | 0) == 0) {
        $55 = HEAP32[_stderr >> 2] | 0;
        $56 = HEAP32[1316054] | 0;
        _fprintf($55 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $56, HEAP32[tempInt + 4 >> 2] = 5584224, tempInt) | 0);
        _longjmp(5428048, 1);
      }
      if (($conv46 | 0) == 0) {
        $retval_0 = $call48;
        STACKTOP = __stackBase__;
        return $retval_0 | 0;
      } else {
        $i_1322 = 0;
      }
      while (1) {
        if (($retval_0_i188354 | 0) == 6 | ($retval_0_i188354 | 0) == 0) {
          $add_ptr27_sum = ($i_1322 << 1) + $add_ptr_sum36 | 0;
          $conv2_i70 = HEAPU8[$1 + $add_ptr27_sum | 0] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i97 = (HEAPU8[$1 + ($add_ptr27_sum + 1 | 0) | 0] | 0) << 8 | $conv2_i70 | (HEAPU8[$1 + ($add_ptr27_sum + 2 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr27_sum + 3 | 0) | 0] | 0) << 24;
          } else {
            $retval_0_i97 = (HEAPU8[$1 + ($add_ptr27_sum + 1 | 0) | 0] | 0) << 16 | $conv2_i70 << 24 | (HEAPU8[$1 + ($add_ptr27_sum + 2 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr27_sum + 3 | 0) | 0] | 0);
          }
          HEAP32[$54 + ($i_1322 << 2) >> 2] = $retval_0_i97 & 65535;
        } else {
          $add_ptr27_sum37 = ($i_1322 << 2) + $add_ptr_sum36 | 0;
          $conv2_i100 = HEAPU8[$1 + $add_ptr27_sum37 | 0] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i127 = (HEAPU8[$1 + ($add_ptr27_sum37 + 1 | 0) | 0] | 0) << 8 | $conv2_i100 | (HEAPU8[$1 + ($add_ptr27_sum37 + 2 | 0) | 0] | 0) << 16 | (HEAPU8[$1 + ($add_ptr27_sum37 + 3 | 0) | 0] | 0) << 24;
          } else {
            $retval_0_i127 = (HEAPU8[$1 + ($add_ptr27_sum37 + 1 | 0) | 0] | 0) << 16 | $conv2_i100 << 24 | (HEAPU8[$1 + ($add_ptr27_sum37 + 2 | 0) | 0] | 0) << 8 | (HEAPU8[$1 + ($add_ptr27_sum37 + 3 | 0) | 0] | 0);
          }
          HEAP32[$54 + ($i_1322 << 2) >> 2] = $retval_0_i127;
        }
        $inc = $i_1322 + 1 | 0;
        if (($inc | 0) == ($conv46 | 0)) {
          $retval_0 = $call48;
          break;
        } else {
          $i_1322 = $inc;
        }
      }
      STACKTOP = __stackBase__;
      return $retval_0 | 0;
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2] | 0, 5584056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[1316054] | 0, HEAP32[tempInt + 4 >> 2] = $name, tempInt) | 0);
  $retval_0 = 0;
  STACKTOP = __stackBase__;
  return $retval_0 | 0;
}
function _foveon_make_curve($max, $mul, $filt) {
  $max = +$max;
  $mul = +$mul;
  $filt = +$filt;
  var $filt_addr_0 = 0.0, $conv = 0, $size_0 = 0, $add = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $2 = 0, $3 = 0, $4 = 0, $i_021 = 0, $mul9 = 0.0, $div14 = 0.0, $add23 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $filt_addr_0 = $filt != 0.0 ? $filt : .8;
  $conv = ~~($max * 12.566370614359172 / $filt_addr_0);
  $size_0 = ((($conv | 0) == -1) << 31 >> 31) + $conv | 0;
  $add = $size_0 + 1 | 0;
  do {
    if (($add | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $add << 1;
      if ($add >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($add >>> 0) >>> 0 | 0) == 2 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $2 = HEAP32[_stderr >> 2] | 0;
    $3 = HEAP32[1316054] | 0;
    _fprintf($2 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = 5583876, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $4 = $call_i;
  HEAP16[$4 >> 1] = $size_0 & 65535;
  if (($size_0 | 0) == 0) {
    STACKTOP = __stackBase__;
    return $4 | 0;
  } else {
    $i_021 = 0;
  }
  while (1) {
    $mul9 = $filt_addr_0 * +($i_021 >>> 0 >>> 0);
    $div14 = (+Math_cos($mul9 / $max * .25) + 1.0) * .5;
    $add23 = $i_021 + 1 | 0;
    HEAP16[$4 + ($add23 << 1) >> 1] = ~~($div14 * +_tanh(+($mul9 / $mul)) * $mul + .5);
    if (($add23 | 0) == ($size_0 | 0)) {
      break;
    } else {
      $i_021 = $add23;
    }
  }
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _foveon_interpolate() {
  var $dim_i = 0, $prev = 0, $0 = 0, $curve = 0, $ddft = 0, $ppm = 0, $cam_xyz = 0, $correct = 0, $last = 0, $trans = 0, $chroma_dq = 0, $div = 0, $fsum = 0, $smrow = 0, $total = 0, $1 = 0, $ipix = 0, $work = 0, $dev = 0, $satlev = 0, $dim = 0, $str = 0, $3 = 0, $arraydecay_i = 0, $call_i = 0, $dscr_sroa_0_0_call_i_cast = 0, $dscr_sroa_0_0_copyload = 0, $dscr_sroa_1_4_call_i_cast = 0, $dscr_sroa_1_4_copyload = 0, $dscr_sroa_2_8_call_i_cast = 0, $dscr_sroa_2_8_copyload = 0, $dscr_sroa_3_12_call_i_cast = 0, $dscr_sroa_3_12_copyload = 0, $dscr_sroa_3_12_load1036 = 0, $dscr_sroa_2_8_copyload1035 = 0, $dscr_sroa_1_4_load1034 = 0, $dscr_sroa_0_0_copyload1033 = 0, $call_i702 = 0, $call_i709 = 0, $call_i716 = 0, $keep_sroa_0_0_call_i716_cast = 0, $keep_sroa_0_0_copyload = 0, $keep_sroa_1_4_call_i716_cast = 0, $keep_sroa_1_4_copyload = 0, $keep_sroa_1_4_load10071023 = 0, $keep_sroa_0_0_load1022 = 0, $call_i723 = 0, $active_sroa_0_0_call_i723_cast = 0, $active_sroa_0_0_copyload = 0, $active_sroa_1_4_call_i723_cast = 0, $active_sroa_1_4_copyload = 0, $active_sroa_2_8_call_i723_cast = 0, $active_sroa_2_8_copyload = 0, $active_sroa_3_12_call_i723_cast = 0, $active_sroa_3_12_copyload = 0, $active_sroa_3_12_load10061021 = 0, $active_sroa_2_8_load1020 = 0, $active_sroa_1_4_load10051019 = 0, $active_sroa_0_0_load10041018 = 0, $arraydecay11 = 0, $call_i730 = 0, $call_i737 = 0, $color_dq_sroa_0_0_copyload = 0.0, $color_dq_sroa_1_4_copyload = 0.0, $color_dq_sroa_2_8_copyload = 0.0, $color_dq_sroa_2_8_load1039 = 0.0, $color_dq_sroa_1_4_load1038 = 0.0, $color_dq_sroa_0_0_load1037 = 0.0, $call_i744 = 0, $cfilt_0_copyload = 0.0, $cfilt_0_copyload1040 = 0.0, $call_i751 = 0, $i_01281 = 0, $dstb_sroa_0_0_load100810251280 = 0, $dstb_sroa_1_4_load100910271279 = 0, $dstb_sroa_2_8_load101010291278 = 0, $dstb_sroa_3_12_load101110311277 = 0, $call_i758 = 0, $dstb_sroa_0_0_call_i758_cast = 0, $dstb_sroa_0_0_copyload = 0, $dstb_sroa_1_4_call_i758_cast = 0, $dstb_sroa_1_4_copyload = 0, $dstb_sroa_2_8_call_i758_cast = 0, $dstb_sroa_2_8_copyload = 0, $dstb_sroa_3_12_call_i758_cast = 0, $dstb_sroa_3_12_copyload = 0, $dstb_sroa_3_12_load10111032 = 0, $dstb_sroa_2_8_load10101030 = 0, $dstb_sroa_1_4_load10091028 = 0, $dstb_sroa_0_0_load10081026 = 0, $cmp421272 = 0, $conv = 0, $12 = 0, $add51 = 0, $row_01275 = 0, $mul = 0, $arrayidx54_phi_trans_insert = 0, $arrayidx54_1_phi_trans_insert = 0, $arrayidx54_2_phi_trans_insert = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $col_01273 = 0, $add = 0, $add55 = 0.0, $add55_1 = 0.0, $add55_2 = 0.0, $inc57 = 0, $inc60 = 0, $add75_pre_phi = 0, $conv74 = 0.0, $arrayidx78 = 0, $arrayidx78_1 = 0, $arrayidx78_2 = 0, $call87 = 0, $22 = 0, $23 = 0, $call_i765 = 0, $25 = 0, $call95 = 0, $call_i773 = 0, $26 = 0, $_pre1448 = 0.0, $_pre1449 = 0.0, $_pre1450 = 0.0, $_pre1451 = 0.0, $_pre1452 = 0.0, $_pre1453 = 0.0, $_pre1454 = 0.0, $_pre1455 = 0.0, $_pre1456 = 0.0, $arrayidx115_promoted_2 = 0.0, $arrayidx115_promoted_1 = 0.0, $arrayidx115_promoted = 0.0, $i_11270 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $inc124 = 0, $arrayidx138 = 0, $30 = 0.0, $arrayidx144 = 0, $31 = 0.0, $arrayidx151 = 0, $32 = 0.0, $arrayidx157 = 0, $33 = 0.0, $arrayidx144_1 = 0, $34 = 0.0, $arrayidx151_1 = 0, $35 = 0.0, $arrayidx144_11419 = 0, $36 = 0.0, $arrayidx157_11422 = 0, $37 = 0.0, $arrayidx144_1_1 = 0, $38 = 0.0, $conv186 = 0.0, $arrayidx187 = 0, $conv186_1 = 0.0, $arrayidx187_1 = 0, $conv186_2 = 0.0, $arrayidx187_2 = 0, $arraydecay191 = 0, $call_i781 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $num_1 = 0.0, $num_1_1 = 0.0, $num_1_2 = 0.0, $div219 = 0.0, $div219_1 = 0.0, $div219_2 = 0.0, $43 = 0, $arrayidx243_promoted_2 = 0.0, $arrayidx243_promoted_1 = 0.0, $arrayidx243_promoted = 0.0, $i_31261 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $inc252 = 0, $arrayidx259 = 0, $47 = 0.0, $arrayidx261 = 0, $48 = 0.0, $arrayidx264 = 0, $49 = 0.0, $conv266 = 0.0, $arrayidx259_1 = 0, $50 = 0.0, $arrayidx261_1 = 0, $51 = 0.0, $arrayidx264_1 = 0, $52 = 0.0, $conv266_1 = 0.0, $arrayidx259_2 = 0, $53 = 0.0, $arrayidx261_2 = 0, $54 = 0.0, $arrayidx264_2 = 0, $55 = 0.0, $conv266_2 = 0.0, $div279 = 0.0, $conv294 = 0.0, $conv294_1 = 0.0, $conv294_2 = 0.0, $conv294_11393 = 0.0, $conv294_1_1 = 0.0, $conv294_2_1 = 0.0, $conv294_21399 = 0.0, $conv294_1_2 = 0.0, $conv294_2_2 = 0.0, $arrayidx324_promoted_2 = 0.0, $arrayidx324_promoted_1 = 0.0, $arrayidx324_promoted = 0.0, $i_51255 = 0, $conv318 = 0.0, $conv318_1 = 0.0, $conv318_2 = 0.0, $inc333 = 0, $arraydecay335 = 0, $div2_i = 0.0, $conv_i = 0.0, $conv_1_i = 0.0, $conv_2_i = 0.0, $max_1_i = 0.0, $max_1_1_i = 0.0, $max_1_2_i = 0.0, $conv20_i = 0.0, $arrayidx21_1_i = 0, $arrayidx21_2_i = 0, $div343 = 0.0, $arrayidx342_1 = 0, $div343_1 = 0.0, $arrayidx342_2 = 0, $div343_2 = 0.0, $add_ptr = 0, $div2_i788 = 0.0, $conv_i789 = 0.0, $conv_1_i793 = 0.0, $conv_2_i797 = 0.0, $max_1_i799 = 0.0, $max_1_1_i801 = 0.0, $max_1_2_i803 = 0.0, $arrayidx21_1_i807 = 0, $arrayidx21_2_i809 = 0, $add358_2 = 0.0, $arrayidx364 = 0, $mul365 = 0.0, $arrayidx369 = 0, $arraydecay370 = 0, $call371 = 0, $59 = 0, $arrayidx375 = 0, $60 = 0, $mul_i = 0, $req_0_i = 0, $call_i811 = 0, $63 = 0, $div383 = 0, $65 = 0, $req_0_i822 = 0, $call_i823 = 0, $68 = 0, $69 = 0, $cmp18_i = 0, $sub22_i = 0, $cmp23_i = 0, $cmp18_i839 = 0, $sub22_i866 = 0, $cmp23_i867 = 0, $conv33_i874 = 0.0, $conv33_i = 0.0, $70 = 0, $row_11249 = 0, $div403 = 0.0, $71 = 0.0, $73 = 0.0, $75 = 0.0, $77 = 0.0, $79 = 0.0, $81 = 0.0, $c_131245 = 0, $mul426 = 0, $84 = 0, $mul7_i = 0, $sum_022_i = 0.0, $max_021_i = 0.0, $min_020_i = 0.0, $i_019_i = 0, $mul_i832 = 0, $85 = 0, $add_i = 0.0, $add13_i = 0.0, $min_1_i = 0.0, $max_1_i834 = 0.0, $inc_i = 0, $sum_0_lcssa_i = 0.0, $max_0_lcssa_i = 0.0, $min_0_lcssa_i = 0.0, $retval_0_i837 = 0.0, $mul7_i848 = 0, $sum_022_i840 = 0.0, $max_021_i841 = 0.0, $min_020_i842 = 0.0, $i_019_i843 = 0, $mul_i844 = 0, $87 = 0, $add_i854 = 0.0, $add13_i855 = 0.0, $min_1_i857 = 0.0, $max_1_i859 = 0.0, $inc_i860 = 0, $sum_0_lcssa_i863 = 0.0, $max_0_lcssa_i864 = 0.0, $min_0_lcssa_i865 = 0.0, $retval_0_i877 = 0.0, $inc455 = 0, $inc458 = 0, $91 = 0, $conv461 = 0, $96 = 0, $97 = 0, $row_21242 = 0, $98 = 0.0, $99 = 0.0, $100 = 0.0, $row_2_lcssa = 0, $div565 = 0.0, $div565_1 = 0.0, $119 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $arrayidx596_phi_trans_insert = 0, $arrayidx596_1_phi_trans_insert = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $row_31234 = 0, $arrayidx584 = 0, $add593 = 0.0, $add597 = 0.0, $arrayidx584_1 = 0, $add593_1 = 0.0, $add597_1 = 0.0, $arrayidx584_2 = 0, $131 = 0.0, $add593_2 = 0.0, $arrayidx596_2 = 0, $add597_2 = 0.0, $inc602 = 0, $133 = 0, $conv575 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $conv575_lcssa = 0, $138 = 0, $conv6121228 = 0, $conv613 = 0.0, $arrayidx614 = 0, $div615 = 0.0, $arrayidx614_1 = 0, $div615_1 = 0.0, $arrayidx614_2 = 0, $div615_2 = 0.0, $139 = 0.0, $140 = 0.0, $141 = 0.0, $dec1227_in = 0, $dec1227 = 0, $arrayidx628 = 0, $add637 = 0.0, $arrayidx628_1 = 0, $add637_1 = 0.0, $arrayidx628_2 = 0, $add637_2 = 0.0, $_pre1469 = 0, $145 = 0, $cmp6531219 = 0, $conv647 = 0, $conv660 = 0, $146 = 0, $arrayidx671 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $row_51223 = 0, $mul661 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $mul695 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $col_11220 = 0, $add662 = 0, $add667 = 0, $add667_1 = 0, $add667_2 = 0, $inc672 = 0, $add674 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $add677 = 0, $row_61216 = 0, $arrayidx699 = 0, $arrayidx699_1 = 0, $arrayidx699_2 = 0, $inc707 = 0, $169 = 0, $arrayidx753 = 0, $conv930 = 0.0, $_pre1480 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $row_71211 = 0, $div726 = 0.0, $174 = 0.0, $arrayidx740 = 0, $176 = 0.0, $arrayidx740_1 = 0, $178 = 0.0, $180 = 0.0, $182 = 0.0, $184 = 0.0, $mul745 = 0, $arraydecay747 = 0, $187 = 0, $sub754 = 0, $conv757 = 0.0, $conv758 = 0, $irow_0 = 0, $sub767 = 0.0, $mul778 = 0, $sub782 = 0.0, $mul786 = 0, $i_81197 = 0, $add779 = 0, $add787 = 0, $inc798 = 0, $_pre1481 = 0, $195 = 0, $196 = 0, $197 = 0, $pix_01208 = 0, $col_21207 = 0, $198 = 0, $arrayidx811 = 0, $sub813 = 0, $conv818 = 0.0, $mul822 = 0.0, $sub837 = 0.0, $conv846 = 0, $arrayidx809_1 = 0, $204 = 0, $arrayidx811_1 = 0, $sub813_1 = 0, $conv818_1 = 0.0, $mul822_1 = 0.0, $conv846_1 = 0, $arrayidx809_2 = 0, $210 = 0, $arrayidx811_2 = 0, $sub813_2 = 0, $conv818_2 = 0.0, $mul822_2 = 0.0, $conv846_2 = 0, $shr858695 = 0, $arrayidx860 = 0, $shr865 = 0, $arrayidx867 = 0, $shr875 = 0, $arrayidx878 = 0, $shr858695_1 = 0, $arrayidx860_1 = 0, $shr865_1 = 0, $arrayidx867_1 = 0, $shr875_1 = 0, $arrayidx878_1 = 0, $shr858695_2 = 0, $arrayidx860_2 = 0, $shr865_2 = 0, $arrayidx867_2 = 0, $shr875_2 = 0, $arrayidx878_2 = 0, $div913 = 0, $rem916 = 0, $conv918 = 0.0, $add921 = 0, $conv925 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $c_251204 = 0, $add912 = 0.0, $conv936 = 0, $_conv936 = 0, $inc948 = 0, $inc952 = 0, $238 = 0, $239 = 0, $240 = 0, $inc955 = 0, $241 = 0, $call958 = 0, $242 = 0, $243 = 0, $i_101193 = 0, $arrayidx966 = 0, $244 = 0, $sub969 = 0, $sub973 = 0, $conv981 = 0, $247 = 0, $248 = 0, $249 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $sum_01190 = 0, $j_41189 = 0, $mul999 = 0, $add1005 = 0, $add1010 = 0, $add1016 = 0.0, $add1016_1 = 0.0, $add1016_2 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $sum_1 = 0, $inc1023 = 0, $conv1032 = 0.0, $add1037_1 = 0, $add1037_2 = 0, $inc1045 = 0, $conv1048 = 0, $mul1049 = 0, $mul_i880 = 0, $req_0_i888 = 0, $call_i889 = 0, $273 = 0, $274 = 0, $275 = 0, $arrayidx10511043 = 0, $276 = 0, $conv1058 = 0, $arrayidx1061 = 0, $arrayidx1061_1 = 0, $arrayidx1061_2 = 0, $arrayidx1061_3 = 0, $arrayidx1061_4 = 0, $277 = 0, $278 = 0, $indvars_iv1339 = 0, $smred_p_01186 = 0, $smlast_01185 = 0, $row_81184 = 0, $279 = 0, $280 = 0, $conv1191 = 0, $conv1191_min_0 = 0, $conv1191_1 = 0, $conv1191_min_0_1 = 0, $conv1191_2 = 0, $shr1200 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $smlast_11172 = 0, $inc1085 = 0, $conv10921166 = 0, $mul1087 = 0, $pix_11170 = 0, $col_31169 = 0, $arrayidx1102 = 0, $inc1120 = 0, $300 = 0, $301 = 0, $smlast_1_lcssa = 0, $conv11281174 = 0, $mul1123 = 0, $pix_21179 = 0, $smred_p_11178 = 0, $col_41177 = 0, $shr1155 = 0, $conv1161 = 0, $add1169 = 0, $inc1178 = 0, $315 = 0, $316 = 0, $smred_p_1_lcssa = 0, $inc1181 = 0, $317 = 0, $mul1253 = 0, $319 = 0, $320 = 0, $arrayidx1391 = 0, $arrayidx1392 = 0, $arrayidx1394 = 0, $pix_31161 = 0, $conv1213 = 0, $arrayidx1217 = 0, $conv1218 = 0, $arrayidx1222 = 0, $conv1223 = 0, $conv1235_min_2 = 0, $max_1 = 0, $conv1235_min_2_1 = 0, $max_1_1 = 0, $conv1257 = 0, $sub1265 = 0, $sub1268 = 0, $shr1270692 = 0, $add_ptr1289 = 0, $324 = 0, $325 = 0, $mul1206 = 0, $327 = 0, $indvars_iv1330 = 0, $smlast_21151 = 0, $row_91150 = 0, $328 = 0, $329 = 0, $arrayidx1497 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $smlast_31138 = 0, $inc1313 = 0, $conv13201132 = 0, $mul1315 = 0, $339 = 0, $pix_41136 = 0, $col_51135 = 0, $arrayidx1337 = 0, $350 = 0, $inc1350 = 0, $351 = 0, $352 = 0, $smlast_3_lcssa = 0, $conv13591142 = 0, $mul1354 = 0, $pix_51146 = 0, $col_61145 = 0, $354 = 0, $356 = 0, $358 = 0, $360 = 0, $sub1384 = 0, $conv_i903 = 0, $retval_0_i907 = 0, $sub1386 = 0, $arrayidx1369_1 = 0, $sub1384_1 = 0, $369 = 0, $inc1415 = 0, $370 = 0, $371 = 0, $indvars_iv = 0, $smlast_41129 = 0, $row_101128 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $smlast_51114 = 0, $inc1439 = 0, $conv14461108 = 0, $mul1441 = 0, $381 = 0, $pix_61112 = 0, $col_71111 = 0, $arrayidx1466 = 0, $398 = 0, $inc1483 = 0, $399 = 0, $400 = 0, $smlast_5_lcssa = 0, $conv14921120 = 0, $mul1487 = 0, $pix_71124 = 0, $col_81123 = 0, $402 = 0, $404 = 0, $406 = 0, $408 = 0, $410 = 0, $add1511_4 = 0, $add1517 = 0, $add1520 = 0, $arrayidx1502_1 = 0, $add1511_4_1 = 0, $add1517_1 = 0, $arrayidx1518_1 = 0, $add1520_1 = 0, $arrayidx1502_2 = 0, $add1511_4_2 = 0, $add1517_2 = 0, $arrayidx1518_2 = 0, $424 = 0, $conv1519_2 = 0, $add1520_2 = 0, $_sum_2 = 0, $cond1538 = 0, $425 = 0, $shr1547 = 0, $426 = 0, $sub1550 = 0, $retval_0_i924 = 0, $430 = 0, $shr1547_1 = 0, $432 = 0, $sub1550_1 = 0, $434 = 0, $inc1564 = 0, $435 = 0, $436 = 0, $437 = 0, $conv15691098 = 0, $conv15701099 = 0, $arrayidx1657 = 0, $pix_81103 = 0, $439 = 0, $440 = 0, $conv1583 = 0, $retval_0_i942 = 0, $sub1587 = 0, $444 = 0, $arrayidx1582_1 = 0, $445 = 0, $conv1583_1 = 0, $retval_0_i960 = 0, $sub1615 = 0, $449 = 0, $sub1611_1 = 0, $conv1570_lcssa = 0, $conv1569_lcssa = 0, $mul1670 = 0, $mul_i963 = 0, $req_0_i971 = 0, $call_i972 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $div1673 = 0, $arrayidx1684 = 0, $arrayidx1685 = 0, $arrayidx1686 = 0, $457 = 0, $458 = 0, $dec16751091_in = 0, $dec16751091 = 0, $mul1699 = 0, $add1724 = 0, $459 = 0, $arrayidx1775 = 0, $arrayidx1776 = 0, $arrayidx1777 = 0, $460 = 0, $col_91087 = 0, $conv1701 = 0, $mul1703 = 0, $461 = 0, $add1704_31532 = 0, $462 = 0, $463 = 0, $464 = 0, $i_181082 = 0, $mul1702 = 0, $add1705 = 0, $add1705_1 = 0, $add1705_2 = 0, $add1710_1_2 = 0, $add1710_2_2 = 0, $add1705_3 = 0, $add1710_3 = 0, $add1710_1_3 = 0, $add1710_2_3 = 0, $inc1718 = 0, $div1742 = 0, $conv1754 = 0, $row_121078 = 0, $480 = 0, $and1783 = 0, $div1792 = 0, $_pre1471 = 0, $481 = 0, $482 = 0, $dec17851053_in = 0, $dec17851053 = 0, $div1796 = 0, $shr1806 = 0, $mul1801_1 = 0, $shr1806_1 = 0, $mul1801_2 = 0, $shr1806_2 = 0, $490 = 0, $conv18201055 = 0, $_pre1477 = 0, $_pre1478 = 0, $491 = 0, $col_111058 = 0, $shr1837 = 0, $shr1837_1 = 0, $shr1837_2 = 0, $inc1846 = 0, $497 = 0, $conv1820 = 0, $498 = 0, $conv1820_lcssa = 0, $_pre1475 = 0, $_pre1476 = 0, $col_121064 = 0, $arrayidx1868 = 0, $arrayidx1868_1 = 0, $arrayidx1868_2 = 0, $inc1884 = 0, $509 = 0, $510 = 0, $_pre1473 = 0, $_pre1474 = 0, $511 = 0, $col_131074 = 0, $add1903 = 0, $512 = 0, $513 = 0, $arrayidx1905 = 0, $conv1906 = 0, $arrayidx1899_1 = 0, $arrayidx1905_1 = 0, $arrayidx1899_2 = 0, $arrayidx1905_2 = 0, $div1912 = 0, $sub1931 = 0, $522 = 0, $523 = 0, $shr1924_1 = 0, $sub1931_1 = 0, $inc1970 = 0, $sub1983 = 0, $sub1988 = 0, $mul2005 = 0, $547 = 0, $row_131048 = 0, $mul1996 = 0, $548 = 0, $inc2007 = 0, $row_13_lcssa = 0, $retval_0_i1002_1 = 0, $add1935_1 = 0, $554 = 0, $shr1924_2 = 0, $sub1931_2 = 0, $retval_0_i1002_2 = 0, $shr1939 = 0, $sub1952 = 0, $add1946_1 = 0, $arrayidx1948_1 = 0, $sub1952_1 = 0, $add1946_2 = 0, $arrayidx1948_2 = 0, $sub1952_2 = 0, $inc1967 = 0, $572 = 0, $div1742_1 = 0, $mul1748_1 = 0, $conv1754_1 = 0, $conv1732_1 = 0, $div1742_2 = 0, $mul1748_2 = 0, $conv1754_2 = 0, $conv1732_2 = 0, $inc1766 = 0, $584 = 0, $retval_0_i942_1 = 0, $sub1587_1 = 0, $587 = 0, $arrayidx1582_2 = 0, $588 = 0, $conv1583_2 = 0, $retval_0_i942_2 = 0, $sub1587_2 = 0, $conv1593 = 0, $conv1595 = 0, $conv1601 = 0, $shr1603 = 0, $592 = 0, $sub1611 = 0, $retval_0_i960_1 = 0, $sub1615_1 = 0, $596 = 0, $sub1611_2 = 0, $retval_0_i960_2 = 0, $sub1615_2 = 0, $add1635_2 = 0.0, $dsum_2 = 0.0, $conv1648 = 0, $add1635_2_1 = 0.0, $dsum_2_1 = 0.0, $arrayidx1649_1 = 0, $add1635_2_2 = 0.0, $dsum_2_2 = 0.0, $arrayidx1649_2 = 0, $add_ptr1664 = 0, $conv1569 = 0, $conv1570 = 0, $mul1571 = 0, $retval_0_i924_1 = 0, $622 = 0, $sub1550_2 = 0, $retval_0_i924_2 = 0, $inc1561 = 0, $627 = 0, $retval_0_i907_1 = 0, $arrayidx1369_2 = 0, $sub1384_2 = 0, $retval_0_i907_2 = 0, $shr1396690 = 0, $inc1412 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $add536 = 0, $645 = 0, label = 0, __stackBase__ = 0, $288$phi = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  $dim_i = __stackBase__ | 0;
  $prev = __stackBase__ + 12 | 0;
  $0 = $prev;
  $curve = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $ddft = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  $ppm = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  $cam_xyz = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $correct = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $last = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $trans = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $chroma_dq = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $div = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $fsum = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $smrow = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  $total = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = $total;
  $ipix = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $work = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $dev = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $satlev = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $dim = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $str = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  if ((HEAP32[1310884] | 0) != 0) {
    $3 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5583692, 24, 1, $3 | 0);
  }
  _foveon_load_camf();
  $arraydecay_i = $dim_i | 0;
  $call_i = _foveon_camf_matrix($arraydecay_i, 5583504) | 0;
  if (($call_i | 0) == 0) {
    $dscr_sroa_0_0_copyload1033 = 0;
    $dscr_sroa_1_4_load1034 = 0;
    $dscr_sroa_2_8_copyload1035 = 0;
    $dscr_sroa_3_12_load1036 = 0;
  } else {
    $dscr_sroa_0_0_call_i_cast = $call_i;
    $dscr_sroa_0_0_copyload = HEAPU8[$dscr_sroa_0_0_call_i_cast] | HEAPU8[$dscr_sroa_0_0_call_i_cast + 1 | 0] << 8 | HEAPU8[$dscr_sroa_0_0_call_i_cast + 2 | 0] << 16 | HEAPU8[$dscr_sroa_0_0_call_i_cast + 3 | 0] << 24 | 0;
    $dscr_sroa_1_4_call_i_cast = $call_i + 4 | 0;
    $dscr_sroa_1_4_copyload = HEAPU8[$dscr_sroa_1_4_call_i_cast] | HEAPU8[$dscr_sroa_1_4_call_i_cast + 1 | 0] << 8 | HEAPU8[$dscr_sroa_1_4_call_i_cast + 2 | 0] << 16 | HEAPU8[$dscr_sroa_1_4_call_i_cast + 3 | 0] << 24 | 0;
    $dscr_sroa_2_8_call_i_cast = $call_i + 8 | 0;
    $dscr_sroa_2_8_copyload = HEAPU8[$dscr_sroa_2_8_call_i_cast] | HEAPU8[$dscr_sroa_2_8_call_i_cast + 1 | 0] << 8 | HEAPU8[$dscr_sroa_2_8_call_i_cast + 2 | 0] << 16 | HEAPU8[$dscr_sroa_2_8_call_i_cast + 3 | 0] << 24 | 0;
    $dscr_sroa_3_12_call_i_cast = $call_i + 12 | 0;
    $dscr_sroa_3_12_copyload = HEAPU8[$dscr_sroa_3_12_call_i_cast] | HEAPU8[$dscr_sroa_3_12_call_i_cast + 1 | 0] << 8 | HEAPU8[$dscr_sroa_3_12_call_i_cast + 2 | 0] << 16 | HEAPU8[$dscr_sroa_3_12_call_i_cast + 3 | 0] << 24 | 0;
    _free($call_i);
    $dscr_sroa_0_0_copyload1033 = $dscr_sroa_0_0_copyload;
    $dscr_sroa_1_4_load1034 = $dscr_sroa_1_4_copyload;
    $dscr_sroa_2_8_copyload1035 = $dscr_sroa_2_8_copyload;
    $dscr_sroa_3_12_load1036 = $dscr_sroa_3_12_copyload;
  }
  $call_i702 = _foveon_camf_matrix($arraydecay_i, 5583328) | 0;
  if (($call_i702 | 0) != 0) {
    _memcpy($ppm, $call_i702, 108);
    _free($call_i702);
  }
  $call_i709 = _foveon_camf_matrix($arraydecay_i, 5583140) | 0;
  if (($call_i709 | 0) != 0) {
    _memcpy($satlev, $call_i709, 12);
    _free($call_i709);
  }
  $call_i716 = _foveon_camf_matrix($arraydecay_i, 5582944) | 0;
  if (($call_i716 | 0) == 0) {
    $keep_sroa_0_0_load1022 = 0;
    $keep_sroa_1_4_load10071023 = 0;
  } else {
    $keep_sroa_0_0_call_i716_cast = $call_i716;
    $keep_sroa_0_0_copyload = HEAPU8[$keep_sroa_0_0_call_i716_cast] | HEAPU8[$keep_sroa_0_0_call_i716_cast + 1 | 0] << 8 | HEAPU8[$keep_sroa_0_0_call_i716_cast + 2 | 0] << 16 | HEAPU8[$keep_sroa_0_0_call_i716_cast + 3 | 0] << 24 | 0;
    $keep_sroa_1_4_call_i716_cast = $call_i716 + 4 | 0;
    $keep_sroa_1_4_copyload = HEAPU8[$keep_sroa_1_4_call_i716_cast] | HEAPU8[$keep_sroa_1_4_call_i716_cast + 1 | 0] << 8 | HEAPU8[$keep_sroa_1_4_call_i716_cast + 2 | 0] << 16 | HEAPU8[$keep_sroa_1_4_call_i716_cast + 3 | 0] << 24 | 0;
    _free($call_i716);
    $keep_sroa_0_0_load1022 = $keep_sroa_0_0_copyload;
    $keep_sroa_1_4_load10071023 = $keep_sroa_1_4_copyload;
  }
  $call_i723 = _foveon_camf_matrix($arraydecay_i, 5582748) | 0;
  if (($call_i723 | 0) == 0) {
    $active_sroa_0_0_load10041018 = 0;
    $active_sroa_1_4_load10051019 = 0;
    $active_sroa_2_8_load1020 = 0;
    $active_sroa_3_12_load10061021 = 0;
  } else {
    $active_sroa_0_0_call_i723_cast = $call_i723;
    $active_sroa_0_0_copyload = HEAPU8[$active_sroa_0_0_call_i723_cast] | HEAPU8[$active_sroa_0_0_call_i723_cast + 1 | 0] << 8 | HEAPU8[$active_sroa_0_0_call_i723_cast + 2 | 0] << 16 | HEAPU8[$active_sroa_0_0_call_i723_cast + 3 | 0] << 24 | 0;
    $active_sroa_1_4_call_i723_cast = $call_i723 + 4 | 0;
    $active_sroa_1_4_copyload = HEAPU8[$active_sroa_1_4_call_i723_cast] | HEAPU8[$active_sroa_1_4_call_i723_cast + 1 | 0] << 8 | HEAPU8[$active_sroa_1_4_call_i723_cast + 2 | 0] << 16 | HEAPU8[$active_sroa_1_4_call_i723_cast + 3 | 0] << 24 | 0;
    $active_sroa_2_8_call_i723_cast = $call_i723 + 8 | 0;
    $active_sroa_2_8_copyload = HEAPU8[$active_sroa_2_8_call_i723_cast] | HEAPU8[$active_sroa_2_8_call_i723_cast + 1 | 0] << 8 | HEAPU8[$active_sroa_2_8_call_i723_cast + 2 | 0] << 16 | HEAPU8[$active_sroa_2_8_call_i723_cast + 3 | 0] << 24 | 0;
    $active_sroa_3_12_call_i723_cast = $call_i723 + 12 | 0;
    $active_sroa_3_12_copyload = HEAPU8[$active_sroa_3_12_call_i723_cast] | HEAPU8[$active_sroa_3_12_call_i723_cast + 1 | 0] << 8 | HEAPU8[$active_sroa_3_12_call_i723_cast + 2 | 0] << 16 | HEAPU8[$active_sroa_3_12_call_i723_cast + 3 | 0] << 24 | 0;
    _free($call_i723);
    $active_sroa_0_0_load10041018 = $active_sroa_0_0_copyload;
    $active_sroa_1_4_load10051019 = $active_sroa_1_4_copyload;
    $active_sroa_2_8_load1020 = $active_sroa_2_8_copyload;
    $active_sroa_3_12_load10061021 = $active_sroa_3_12_copyload - 2 | 0;
  }
  $arraydecay11 = $chroma_dq | 0;
  $call_i730 = _foveon_camf_matrix($arraydecay_i, 5582604) | 0;
  if (($call_i730 | 0) != 0) {
    _memcpy($chroma_dq, $call_i730, 12);
    _free($call_i730);
  }
  $call_i737 = _foveon_camf_matrix($arraydecay_i, (_foveon_camf_param(5582452, 5582324) | 0) != 0 ? 5582324 : 5582188) | 0;
  if (($call_i737 | 0) == 0) {
    $color_dq_sroa_0_0_load1037 = 0.0;
    $color_dq_sroa_1_4_load1038 = 0.0;
    $color_dq_sroa_2_8_load1039 = 0.0;
  } else {
    $color_dq_sroa_0_0_copyload = (copyTempFloat($call_i737 | 0), +HEAPF32[tempDoublePtr >> 2]);
    $color_dq_sroa_1_4_copyload = (copyTempFloat($call_i737 + 4 | 0), +HEAPF32[tempDoublePtr >> 2]);
    $color_dq_sroa_2_8_copyload = (copyTempFloat($call_i737 + 8 | 0), +HEAPF32[tempDoublePtr >> 2]);
    _free($call_i737);
    $color_dq_sroa_0_0_load1037 = $color_dq_sroa_0_0_copyload;
    $color_dq_sroa_1_4_load1038 = $color_dq_sroa_1_4_copyload;
    $color_dq_sroa_2_8_load1039 = $color_dq_sroa_2_8_copyload;
  }
  do {
    if ((_foveon_camf_param(5582452, 5582020) | 0) == 0) {
      $cfilt_0_copyload1040 = 0.0;
    } else {
      $call_i744 = _foveon_camf_matrix($arraydecay_i, 5582020) | 0;
      if (($call_i744 | 0) == 0) {
        $cfilt_0_copyload1040 = 0.0;
        break;
      }
      $cfilt_0_copyload = (copyTempFloat($call_i744 | 0), +HEAPF32[tempDoublePtr >> 2]);
      _free($call_i744);
      $cfilt_0_copyload1040 = $cfilt_0_copyload;
    }
  } while (0);
  _memset($ddft | 0, 0, 72);
  do {
    if ((_foveon_camf_param(5582452, 5581860) | 0) == 0) {
      $dstb_sroa_3_12_load101110311277 = 0;
      $dstb_sroa_2_8_load101010291278 = 0;
      $dstb_sroa_1_4_load100910271279 = 0;
      $dstb_sroa_0_0_load100810251280 = 0;
      $i_01281 = 0;
      label = 1933;
    } else {
      $call_i751 = _foveon_camf_matrix($arraydecay_i, 5581860) | 0;
      if (($call_i751 | 0) == 0) {
        $dstb_sroa_3_12_load101110311277 = 0;
        $dstb_sroa_2_8_load101010291278 = 0;
        $dstb_sroa_1_4_load100910271279 = 0;
        $dstb_sroa_0_0_load100810251280 = 0;
        $i_01281 = 0;
        label = 1933;
        break;
      }
      _memcpy($ddft + 24 | 0, $call_i751, 48);
      _free($call_i751);
      break;
    }
  } while (0);
  L2742 : do {
    if ((label | 0) == 1933) {
      while (1) {
        label = 0;
        $call_i758 = _foveon_camf_matrix($arraydecay_i, ($i_01281 | 0) != 0 ? 5581688 : 5581512) | 0;
        if (($call_i758 | 0) == 0) {
          $dstb_sroa_0_0_load10081026 = $dstb_sroa_0_0_load100810251280;
          $dstb_sroa_1_4_load10091028 = $dstb_sroa_1_4_load100910271279;
          $dstb_sroa_2_8_load10101030 = $dstb_sroa_2_8_load101010291278;
          $dstb_sroa_3_12_load10111032 = $dstb_sroa_3_12_load101110311277;
        } else {
          $dstb_sroa_0_0_call_i758_cast = $call_i758;
          $dstb_sroa_0_0_copyload = HEAPU8[$dstb_sroa_0_0_call_i758_cast] | HEAPU8[$dstb_sroa_0_0_call_i758_cast + 1 | 0] << 8 | HEAPU8[$dstb_sroa_0_0_call_i758_cast + 2 | 0] << 16 | HEAPU8[$dstb_sroa_0_0_call_i758_cast + 3 | 0] << 24 | 0;
          $dstb_sroa_1_4_call_i758_cast = $call_i758 + 4 | 0;
          $dstb_sroa_1_4_copyload = HEAPU8[$dstb_sroa_1_4_call_i758_cast] | HEAPU8[$dstb_sroa_1_4_call_i758_cast + 1 | 0] << 8 | HEAPU8[$dstb_sroa_1_4_call_i758_cast + 2 | 0] << 16 | HEAPU8[$dstb_sroa_1_4_call_i758_cast + 3 | 0] << 24 | 0;
          $dstb_sroa_2_8_call_i758_cast = $call_i758 + 8 | 0;
          $dstb_sroa_2_8_copyload = HEAPU8[$dstb_sroa_2_8_call_i758_cast] | HEAPU8[$dstb_sroa_2_8_call_i758_cast + 1 | 0] << 8 | HEAPU8[$dstb_sroa_2_8_call_i758_cast + 2 | 0] << 16 | HEAPU8[$dstb_sroa_2_8_call_i758_cast + 3 | 0] << 24 | 0;
          $dstb_sroa_3_12_call_i758_cast = $call_i758 + 12 | 0;
          $dstb_sroa_3_12_copyload = HEAPU8[$dstb_sroa_3_12_call_i758_cast] | HEAPU8[$dstb_sroa_3_12_call_i758_cast + 1 | 0] << 8 | HEAPU8[$dstb_sroa_3_12_call_i758_cast + 2 | 0] << 16 | HEAPU8[$dstb_sroa_3_12_call_i758_cast + 3 | 0] << 24 | 0;
          _free($call_i758);
          $dstb_sroa_0_0_load10081026 = $dstb_sroa_0_0_copyload;
          $dstb_sroa_1_4_load10091028 = $dstb_sroa_1_4_copyload;
          $dstb_sroa_2_8_load10101030 = $dstb_sroa_2_8_copyload;
          $dstb_sroa_3_12_load10111032 = $dstb_sroa_3_12_copyload;
        }
        L2748 : do {
          if (($dstb_sroa_1_4_load10091028 | 0) > ($dstb_sroa_3_12_load10111032 | 0)) {
            $add75_pre_phi = $i_01281 + 1 | 0;
          } else {
            $cmp421272 = ($dstb_sroa_0_0_load10081026 | 0) > ($dstb_sroa_2_8_load10101030 | 0);
            $conv = HEAPU16[2621484] | 0;
            $12 = HEAP32[1316051] | 0;
            $add51 = $i_01281 + 1 | 0;
            $row_01275 = $dstb_sroa_1_4_load10091028;
            while (1) {
              L2752 : do {
                if (!$cmp421272) {
                  $mul = Math_imul($conv, $row_01275);
                  $arrayidx54_phi_trans_insert = $ddft + ($add51 * 24 & -1) + 4 | 0;
                  $arrayidx54_1_phi_trans_insert = $ddft + ($add51 * 24 & -1) + 12 | 0;
                  $arrayidx54_2_phi_trans_insert = $ddft + ($add51 * 24 & -1) + 20 | 0;
                  $col_01273 = $dstb_sroa_0_0_load10081026;
                  $15 = +HEAPF32[$arrayidx54_phi_trans_insert >> 2];
                  $14 = +HEAPF32[$arrayidx54_1_phi_trans_insert >> 2];
                  $13 = +HEAPF32[$arrayidx54_2_phi_trans_insert >> 2];
                  while (1) {
                    $add = $mul + $col_01273 | 0;
                    $add55 = $15 + +(HEAP16[$12 + ($add << 3) >> 1] << 16 >> 16 | 0);
                    HEAPF32[$arrayidx54_phi_trans_insert >> 2] = $add55;
                    $add55_1 = $14 + +(HEAP16[$12 + ($add << 3) + 2 >> 1] << 16 >> 16 | 0);
                    HEAPF32[$arrayidx54_1_phi_trans_insert >> 2] = $add55_1;
                    $add55_2 = $13 + +(HEAP16[$12 + ($add << 3) + 4 >> 1] << 16 >> 16 | 0);
                    HEAPF32[$arrayidx54_2_phi_trans_insert >> 2] = $add55_2;
                    $inc57 = $col_01273 + 1 | 0;
                    if (($inc57 | 0) > ($dstb_sroa_2_8_load10101030 | 0)) {
                      break L2752;
                    } else {
                      $col_01273 = $inc57;
                      $15 = $add55;
                      $14 = $add55_1;
                      $13 = $add55_2;
                    }
                  }
                }
              } while (0);
              $inc60 = $row_01275 + 1 | 0;
              if (($inc60 | 0) > ($dstb_sroa_3_12_load10111032 | 0)) {
                $add75_pre_phi = $add51;
                break L2748;
              } else {
                $row_01275 = $inc60;
              }
            }
          }
        } while (0);
        $conv74 = +(Math_imul(($dstb_sroa_2_8_load10101030 + 1 | 0) - $dstb_sroa_0_0_load10081026 | 0, ($dstb_sroa_3_12_load10111032 + 1 | 0) - $dstb_sroa_1_4_load10091028 | 0) | 0);
        $arrayidx78 = $ddft + ($add75_pre_phi * 24 & -1) + 4 | 0;
        HEAPF32[$arrayidx78 >> 2] = +HEAPF32[$arrayidx78 >> 2] / $conv74;
        $arrayidx78_1 = $ddft + ($add75_pre_phi * 24 & -1) + 12 | 0;
        HEAPF32[$arrayidx78_1 >> 2] = +HEAPF32[$arrayidx78_1 >> 2] / $conv74;
        $arrayidx78_2 = $ddft + ($add75_pre_phi * 24 & -1) + 20 | 0;
        HEAPF32[$arrayidx78_2 >> 2] = +HEAPF32[$arrayidx78_2 >> 2] / $conv74;
        if (($add75_pre_phi | 0) == 2) {
          break L2742;
        } else {
          $dstb_sroa_3_12_load101110311277 = $dstb_sroa_3_12_load10111032;
          $dstb_sroa_2_8_load101010291278 = $dstb_sroa_2_8_load10101030;
          $dstb_sroa_1_4_load100910271279 = $dstb_sroa_1_4_load10091028;
          $dstb_sroa_0_0_load100810251280 = $dstb_sroa_0_0_load10081026;
          $i_01281 = $add75_pre_phi;
          label = 1933;
        }
      }
    }
  } while (0);
  $call87 = _foveon_camf_param(5581332, 5263404) | 0;
  if (($call87 | 0) == 0) {
    $22 = HEAP32[_stderr >> 2] | 0;
    $23 = HEAP32[1316054] | 0;
    _fprintf($22 | 0, 5581152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $23, HEAP32[tempInt + 4 >> 2] = 5263404, tempInt) | 0);
    STACKTOP = __stackBase__;
    return;
  }
  $call_i765 = _foveon_camf_matrix($arraydecay_i, $call87) | 0;
  if (($call_i765 | 0) != 0) {
    _memcpy($cam_xyz, $call_i765, 36);
    _free($call_i765);
  }
  $25 = $correct;
  $call95 = _foveon_camf_param(5580988, 5263404) | 0;
  do {
    if (($call95 | 0) != 0) {
      $call_i773 = _foveon_camf_matrix($arraydecay_i, $call95) | 0;
      if (($call_i773 | 0) == 0) {
        break;
      }
      _memcpy($25, $call_i773, 36);
      _free($call_i773);
    }
  } while (0);
  $26 = $last;
  _memset($26 | 0, 0, 36);
  $_pre1448 = +HEAPF32[$cam_xyz >> 2];
  $_pre1449 = +HEAPF32[$cam_xyz + 12 >> 2];
  $_pre1450 = +HEAPF32[$cam_xyz + 24 >> 2];
  $_pre1451 = +HEAPF32[$cam_xyz + 4 >> 2];
  $_pre1452 = +HEAPF32[$cam_xyz + 16 >> 2];
  $_pre1453 = +HEAPF32[$cam_xyz + 28 >> 2];
  $_pre1454 = +HEAPF32[$cam_xyz + 8 >> 2];
  $_pre1455 = +HEAPF32[$cam_xyz + 20 >> 2];
  $_pre1456 = +HEAPF32[$cam_xyz + 32 >> 2];
  $i_11270 = 0;
  $arrayidx115_promoted = 0.0;
  $arrayidx115_promoted_1 = 0.0;
  $arrayidx115_promoted_2 = 0.0;
  while (1) {
    $27 = +HEAPF32[$correct + ($i_11270 * 12 & -1) >> 2];
    $28 = +HEAPF32[$correct + ($i_11270 * 12 & -1) + 4 >> 2];
    $29 = +HEAPF32[$correct + ($i_11270 * 12 & -1) + 8 >> 2];
    HEAPF32[$last + ($i_11270 * 12 & -1) >> 2] = $arrayidx115_promoted + $27 * $_pre1448 + $28 * $_pre1449 + $29 * $_pre1450;
    HEAPF32[$last + ($i_11270 * 12 & -1) + 4 >> 2] = $arrayidx115_promoted_1 + $27 * $_pre1451 + $28 * $_pre1452 + $29 * $_pre1453;
    HEAPF32[$last + ($i_11270 * 12 & -1) + 8 >> 2] = $arrayidx115_promoted_2 + $27 * $_pre1454 + $28 * $_pre1455 + $29 * $_pre1456;
    $inc124 = $i_11270 + 1 | 0;
    if (($inc124 | 0) == 3) {
      break;
    }
    $i_11270 = $inc124;
    $arrayidx115_promoted = +HEAPF32[$last + ($inc124 * 12 & -1) >> 2];
    $arrayidx115_promoted_1 = +HEAPF32[$last + ($inc124 * 12 & -1) + 4 >> 2];
    $arrayidx115_promoted_2 = +HEAPF32[$last + ($inc124 * 12 & -1) + 8 >> 2];
  }
  $arrayidx138 = $last + 16 | 0;
  $30 = +HEAPF32[$arrayidx138 >> 2];
  $arrayidx144 = $last + 32 | 0;
  $31 = +HEAPF32[$arrayidx144 >> 2];
  $arrayidx151 = $last + 20 | 0;
  $32 = +HEAPF32[$arrayidx151 >> 2];
  $arrayidx157 = $last + 28 | 0;
  $33 = +HEAPF32[$arrayidx157 >> 2];
  $arrayidx144_1 = $last + 24 | 0;
  $34 = +HEAPF32[$arrayidx144_1 >> 2];
  $arrayidx151_1 = $last + 12 | 0;
  $35 = +HEAPF32[$arrayidx151_1 >> 2];
  $arrayidx144_11419 = $last + 8 | 0;
  $36 = +HEAPF32[$arrayidx144_11419 >> 2];
  $arrayidx157_11422 = $last + 4 | 0;
  $37 = +HEAPF32[$arrayidx157_11422 >> 2];
  $arrayidx144_1_1 = $last | 0;
  $38 = +HEAPF32[$arrayidx144_1_1 >> 2];
  $conv186 = ($30 * $31 - $32 * $33) * .3127 + ($33 * $36 - $31 * $37) * .329 + ($37 * $32 - $36 * $30) * .3583;
  $arrayidx187 = $div | 0;
  HEAPF32[$arrayidx187 >> 2] = $conv186;
  $conv186_1 = ($32 * $34 - $35 * $31) * .3127 + ($31 * $38 - $34 * $36) * .329 + ($36 * $35 - $38 * $32) * .3583;
  $arrayidx187_1 = $div + 4 | 0;
  HEAPF32[$arrayidx187_1 >> 2] = $conv186_1;
  $conv186_2 = ($35 * $33 - $30 * $34) * .3127 + ($34 * $37 - $33 * $38) * .329 + ($38 * $30 - $37 * $35) * .3583;
  $arrayidx187_2 = $div + 8 | 0;
  HEAPF32[$arrayidx187_2 >> 2] = $conv186_2;
  $arraydecay191 = $str | 0;
  _sprintf($arraydecay191 | 0, 5580764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263404, tempInt) | 0);
  do {
    if ((_foveon_camf_param(5582452, $arraydecay191) | 0) == 0) {
      $42 = $conv186_2;
      $41 = $conv186;
      $40 = $conv186_1;
    } else {
      $call_i781 = _foveon_camf_matrix($arraydecay_i, $arraydecay191) | 0;
      if (($call_i781 | 0) == 0) {
        $42 = $conv186_2;
        $41 = $conv186;
        $40 = $conv186_1;
        break;
      }
      _memcpy($div, $call_i781, 12);
      _free($call_i781);
      $42 = +HEAPF32[$arrayidx187_2 >> 2];
      $41 = +HEAPF32[$arrayidx187 >> 2];
      $40 = +HEAPF32[$arrayidx187_1 >> 2];
    }
  } while (0);
  $num_1 = $41 > 0.0 ? $41 : 0.0;
  $num_1_1 = $num_1 < $40 ? $40 : $num_1;
  $num_1_2 = $num_1_1 < $42 ? $42 : $num_1_1;
  $div219 = $41 / $num_1_2;
  HEAPF32[$arrayidx187 >> 2] = $div219;
  $div219_1 = $40 / $num_1_2;
  HEAPF32[$arrayidx187_1 >> 2] = $div219_1;
  $div219_2 = $42 / $num_1_2;
  HEAPF32[$arrayidx187_2 >> 2] = $div219_2;
  $43 = $trans;
  _memset($43 | 0, 0, 36);
  $i_31261 = 0;
  $arrayidx243_promoted = 0.0;
  $arrayidx243_promoted_1 = 0.0;
  $arrayidx243_promoted_2 = 0.0;
  while (1) {
    $44 = +HEAPF32[5244932 + ($i_31261 << 4) >> 2];
    $45 = +HEAPF32[5244936 + ($i_31261 << 4) >> 2];
    $46 = +HEAPF32[5244940 + ($i_31261 << 4) >> 2];
    HEAPF32[$trans + ($i_31261 * 12 & -1) >> 2] = $arrayidx243_promoted + $44 * $38 * $div219 + $45 * $35 * $div219 + $46 * $34 * $div219;
    HEAPF32[$trans + ($i_31261 * 12 & -1) + 4 >> 2] = $arrayidx243_promoted_1 + $44 * $37 * $div219_1 + $45 * $30 * $div219_1 + $46 * $33 * $div219_1;
    HEAPF32[$trans + ($i_31261 * 12 & -1) + 8 >> 2] = $arrayidx243_promoted_2 + $44 * $36 * $div219_2 + $45 * $32 * $div219_2 + $46 * $31 * $div219_2;
    $inc252 = $i_31261 + 1 | 0;
    if (($inc252 | 0) == 3) {
      break;
    }
    $i_31261 = $inc252;
    $arrayidx243_promoted = +HEAPF32[$trans + ($inc252 * 12 & -1) >> 2];
    $arrayidx243_promoted_1 = +HEAPF32[$trans + ($inc252 * 12 & -1) + 4 >> 2];
    $arrayidx243_promoted_2 = +HEAPF32[$trans + ($inc252 * 12 & -1) + 8 >> 2];
  }
  $arrayidx259 = $trans | 0;
  $47 = +HEAPF32[$arrayidx259 >> 2];
  $arrayidx261 = $trans + 4 | 0;
  $48 = +HEAPF32[$arrayidx261 >> 2];
  $arrayidx264 = $trans + 8 | 0;
  $49 = +HEAPF32[$arrayidx264 >> 2];
  $conv266 = $47 + $48 + $49;
  $arrayidx259_1 = $trans + 12 | 0;
  $50 = +HEAPF32[$arrayidx259_1 >> 2];
  $arrayidx261_1 = $trans + 16 | 0;
  $51 = +HEAPF32[$arrayidx261_1 >> 2];
  $arrayidx264_1 = $trans + 20 | 0;
  $52 = +HEAPF32[$arrayidx264_1 >> 2];
  $conv266_1 = $50 + $51 + $52;
  $arrayidx259_2 = $trans + 24 | 0;
  $53 = +HEAPF32[$arrayidx259_2 >> 2];
  $arrayidx261_2 = $trans + 28 | 0;
  $54 = +HEAPF32[$arrayidx261_2 >> 2];
  $arrayidx264_2 = $trans + 32 | 0;
  $55 = +HEAPF32[$arrayidx264_2 >> 2];
  $conv266_2 = $53 + $54 + $55;
  $div279 = ($conv266 * 6.0 + $conv266_1 * 11.0 + $conv266_2 * 3.0) / 20.0;
  $conv294 = $div279 * $47 / $conv266;
  HEAPF32[$arrayidx144_1_1 >> 2] = $conv294;
  $conv294_1 = $div279 * $48 / $conv266;
  HEAPF32[$arrayidx157_11422 >> 2] = $conv294_1;
  $conv294_2 = $div279 * $49 / $conv266;
  HEAPF32[$arrayidx144_11419 >> 2] = $conv294_2;
  $conv294_11393 = $div279 * $50 / $conv266_1;
  HEAPF32[$arrayidx151_1 >> 2] = $conv294_11393;
  $conv294_1_1 = $div279 * $51 / $conv266_1;
  HEAPF32[$arrayidx138 >> 2] = $conv294_1_1;
  $conv294_2_1 = $div279 * $52 / $conv266_1;
  HEAPF32[$arrayidx151 >> 2] = $conv294_2_1;
  $conv294_21399 = $div279 * $53 / $conv266_2;
  HEAPF32[$arrayidx144_1 >> 2] = $conv294_21399;
  $conv294_1_2 = $div279 * $54 / $conv266_2;
  HEAPF32[$arrayidx157 >> 2] = $conv294_1_2;
  $conv294_2_2 = $div279 * $55 / $conv266_2;
  HEAPF32[$arrayidx144 >> 2] = $conv294_2_2;
  _memset($43 | 0, 0, 36);
  $i_51255 = 0;
  $arrayidx324_promoted = 0.0;
  $arrayidx324_promoted_1 = 0.0;
  $arrayidx324_promoted_2 = 0.0;
  while (1) {
    $conv318 = ($i_51255 | 0) == 0 ? 32.0 : -1.0;
    $conv318_1 = ($i_51255 | 0) == 1 ? 32.0 : -1.0;
    $conv318_2 = ($i_51255 | 0) == 2 ? 32.0 : -1.0;
    HEAPF32[$trans + ($i_51255 * 12 & -1) >> 2] = $conv318_2 * $conv294_21399 / 30.0 + ($conv318_1 * $conv294_11393 / 30.0 + ($conv318 * $conv294 / 30.0 + $arrayidx324_promoted));
    HEAPF32[$trans + ($i_51255 * 12 & -1) + 4 >> 2] = $conv318_2 * $conv294_1_2 / 30.0 + ($conv318_1 * $conv294_1_1 / 30.0 + ($conv318 * $conv294_1 / 30.0 + $arrayidx324_promoted_1));
    HEAPF32[$trans + ($i_51255 * 12 & -1) + 8 >> 2] = $conv318_2 * $conv294_2_2 / 30.0 + ($conv318_1 * $conv294_2_1 / 30.0 + ($conv318 * $conv294_2 / 30.0 + $arrayidx324_promoted_2));
    $inc333 = $i_51255 + 1 | 0;
    if (($inc333 | 0) == 3) {
      break;
    }
    $i_51255 = $inc333;
    $arrayidx324_promoted = +HEAPF32[$trans + ($inc333 * 12 & -1) >> 2];
    $arrayidx324_promoted_1 = +HEAPF32[$trans + ($inc333 * 12 & -1) + 4 >> 2];
    $arrayidx324_promoted_2 = +HEAPF32[$trans + ($inc333 * 12 & -1) + 8 >> 2];
  }
  $arraydecay335 = $curve | 0;
  $div2_i = $color_dq_sroa_0_0_load1037 / $div219;
  $conv_i = $div2_i;
  $conv_1_i = $color_dq_sroa_1_4_load1038 / $div219_1;
  $conv_2_i = $color_dq_sroa_2_8_load1039 / $div219_2;
  $max_1_i = $div2_i > 0.0 ? $conv_i : 0.0;
  $max_1_1_i = $max_1_i < $conv_1_i ? $conv_1_i : $max_1_i;
  $max_1_2_i = $max_1_1_i < $conv_2_i ? $conv_2_i : $max_1_1_i;
  $conv20_i = $cfilt_0_copyload1040;
  HEAP32[$arraydecay335 >> 2] = _foveon_make_curve($max_1_2_i, $conv_i, $conv20_i) | 0;
  $arrayidx21_1_i = $curve + 4 | 0;
  HEAP32[$arrayidx21_1_i >> 2] = _foveon_make_curve($max_1_2_i, $conv_1_i, $conv20_i) | 0;
  $arrayidx21_2_i = $curve + 8 | 0;
  HEAP32[$arrayidx21_2_i >> 2] = _foveon_make_curve($max_1_2_i, $conv_2_i, $conv20_i) | 0;
  $div343 = +HEAPF32[$arraydecay11 >> 2] / 3.0;
  HEAPF32[$arraydecay11 >> 2] = $div343;
  $arrayidx342_1 = $chroma_dq + 4 | 0;
  $div343_1 = +HEAPF32[$arrayidx342_1 >> 2] / 3.0;
  HEAPF32[$arrayidx342_1 >> 2] = $div343_1;
  $arrayidx342_2 = $chroma_dq + 8 | 0;
  $div343_2 = +HEAPF32[$arrayidx342_2 >> 2] / 3.0;
  HEAPF32[$arrayidx342_2 >> 2] = $div343_2;
  $add_ptr = $curve + 12 | 0;
  $div2_i788 = $div343 / $div219;
  $conv_i789 = $div2_i788;
  $conv_1_i793 = $div343_1 / $div219_1;
  $conv_2_i797 = $div343_2 / $div219_2;
  $max_1_i799 = $div2_i788 > 0.0 ? $conv_i789 : 0.0;
  $max_1_1_i801 = $max_1_i799 < $conv_1_i793 ? $conv_1_i793 : $max_1_i799;
  $max_1_2_i803 = $max_1_1_i801 < $conv_2_i797 ? $conv_2_i797 : $max_1_1_i801;
  HEAP32[$add_ptr >> 2] = _foveon_make_curve($max_1_2_i803, $conv_i789, $conv20_i) | 0;
  $arrayidx21_1_i807 = $curve + 16 | 0;
  HEAP32[$arrayidx21_1_i807 >> 2] = _foveon_make_curve($max_1_2_i803, $conv_1_i793, $conv20_i) | 0;
  $arrayidx21_2_i809 = $curve + 20 | 0;
  HEAP32[$arrayidx21_2_i809 >> 2] = _foveon_make_curve($max_1_2_i803, $conv_2_i797, $conv20_i) | 0;
  $add358_2 = $div279 + $conv_i789 + $conv_1_i793 + $conv_2_i797;
  $arrayidx364 = $curve + 24 | 0;
  HEAP32[$arrayidx364 >> 2] = _foveon_make_curve($add358_2, $add358_2, $conv20_i) | 0;
  $mul365 = $add358_2 * 2.0;
  $arrayidx369 = $curve + 28 | 0;
  HEAP32[$arrayidx369 >> 2] = _foveon_make_curve($mul365, $mul365, $conv20_i) | 0;
  $arraydecay370 = $dim | 0;
  $call371 = _foveon_camf_matrix($arraydecay370, 5580572) | 0;
  $59 = $call371;
  if (($call371 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx375 = $dim + 4 | 0;
  $60 = HEAP32[$arrayidx375 >> 2] | 0;
  do {
    if (($60 | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $60 * 12 & -1;
      if ($60 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($60 >>> 0) >>> 0 | 0) == 12 ? $mul_i : -1;
    }
  } while (0);
  $call_i811 = _malloc($req_0_i) | 0;
  do {
    if (($call_i811 | 0) != 0) {
      if ((HEAP32[$call_i811 - 4 >> 2] & 3 | 0) == 0) {
        break;
      }
      _memset($call_i811 | 0, 0, $req_0_i | 0);
    }
  } while (0);
  $63 = $call_i811;
  $div383 = ((($60 - 2 | 0) + (HEAPU16[2621484] | 0) | 0) >>> 0) / (($60 - 1 | 0) >>> 0) >>> 0;
  $65 = HEAP16[2699404] | 0;
  if ($65 << 16 >> 16 == 0) {
    $req_0_i822 = 0;
  } else {
    $req_0_i822 = ($65 & 65535) * 12 & -1;
  }
  $call_i823 = _malloc($req_0_i822) | 0;
  do {
    if (($call_i823 | 0) != 0) {
      if ((HEAP32[$call_i823 - 4 >> 2] & 3 | 0) == 0) {
        break;
      }
      _memset($call_i823 | 0, 0, $req_0_i822 | 0);
    }
  } while (0);
  $68 = $call_i823;
  $69 = HEAP16[2699404] | 0;
  L2805 : do {
    if ($69 << 16 >> 16 != 0) {
      $cmp18_i = ($dscr_sroa_0_0_copyload1033 | 0) > ($dscr_sroa_1_4_load1034 | 0);
      $sub22_i = $dscr_sroa_1_4_load1034 - $dscr_sroa_0_0_copyload1033 | 0;
      $cmp23_i = ($sub22_i | 0) == 1;
      $cmp18_i839 = ($dscr_sroa_2_8_copyload1035 | 0) > ($dscr_sroa_3_12_load1036 | 0);
      $sub22_i866 = $dscr_sroa_3_12_load1036 - $dscr_sroa_2_8_copyload1035 | 0;
      $cmp23_i867 = ($sub22_i866 | 0) == 1;
      $conv33_i874 = +($sub22_i866 - 1 | 0);
      $conv33_i = +($sub22_i - 1 | 0);
      $row_11249 = 0;
      $70 = $69;
      while (1) {
        $div403 = +($row_11249 | 0) / +(($70 & 65535) - 1 | 0);
        $71 = +HEAPF32[$ddft + 24 >> 2];
        HEAPF32[$ddft >> 2] = $71 + $div403 * (+HEAPF32[$ddft + 48 >> 2] - $71);
        $73 = +HEAPF32[$ddft + 28 >> 2];
        HEAPF32[$ddft + 4 >> 2] = $73 + $div403 * (+HEAPF32[$ddft + 52 >> 2] - $73);
        $75 = +HEAPF32[$ddft + 32 >> 2];
        HEAPF32[$ddft + 8 >> 2] = $75 + $div403 * (+HEAPF32[$ddft + 56 >> 2] - $75);
        $77 = +HEAPF32[$ddft + 36 >> 2];
        HEAPF32[$ddft + 12 >> 2] = $77 + $div403 * (+HEAPF32[$ddft + 60 >> 2] - $77);
        $79 = +HEAPF32[$ddft + 40 >> 2];
        HEAPF32[$ddft + 16 >> 2] = $79 + $div403 * (+HEAPF32[$ddft + 64 >> 2] - $79);
        $81 = +HEAPF32[$ddft + 44 >> 2];
        HEAPF32[$ddft + 20 >> 2] = $81 + $div403 * (+HEAPF32[$ddft + 68 >> 2] - $81);
        $c_131245 = 0;
        while (1) {
          $mul426 = Math_imul(HEAPU16[2621484] | 0, $row_11249);
          $84 = HEAP32[1316051] | 0;
          L2811 : do {
            if ($cmp18_i) {
              $min_0_lcssa_i = 3.4028234663852886e+38;
              $max_0_lcssa_i = -3.4028234663852886e+38;
              $sum_0_lcssa_i = 0.0;
            } else {
              $mul7_i = $c_131245 - 4 | 0;
              $i_019_i = $dscr_sroa_0_0_copyload1033;
              $min_020_i = 3.4028234663852886e+38;
              $max_021_i = -3.4028234663852886e+38;
              $sum_022_i = 0.0;
              while (1) {
                $mul_i832 = $i_019_i << 2;
                $85 = HEAP16[$84 + ($mul426 << 3) + ($mul_i832 + $c_131245 << 1) >> 1] | 0;
                $add_i = +($85 << 16 >> 16 | 0) + $cfilt_0_copyload1040 * +(($85 << 16 >> 16) - (HEAP16[$84 + ($mul426 << 3) + ($mul7_i + $mul_i832 << 1) >> 1] << 16 >> 16) | 0);
                $add13_i = $sum_022_i + $add_i;
                $min_1_i = $min_020_i > $add_i ? $add_i : $min_020_i;
                $max_1_i834 = $max_021_i < $add_i ? $add_i : $max_021_i;
                $inc_i = $i_019_i + 1 | 0;
                if (($inc_i | 0) > ($dscr_sroa_1_4_load1034 | 0)) {
                  $min_0_lcssa_i = $min_1_i;
                  $max_0_lcssa_i = $max_1_i834;
                  $sum_0_lcssa_i = $add13_i;
                  break L2811;
                } else {
                  $i_019_i = $inc_i;
                  $min_020_i = $min_1_i;
                  $max_021_i = $max_1_i834;
                  $sum_022_i = $add13_i;
                }
              }
            }
          } while (0);
          if ($cmp23_i) {
            $retval_0_i837 = $sum_0_lcssa_i * .5;
          } else {
            $retval_0_i837 = ($sum_0_lcssa_i - $min_0_lcssa_i - $max_0_lcssa_i) / $conv33_i;
          }
          L2820 : do {
            if ($cmp18_i839) {
              $min_0_lcssa_i865 = 3.4028234663852886e+38;
              $max_0_lcssa_i864 = -3.4028234663852886e+38;
              $sum_0_lcssa_i863 = 0.0;
            } else {
              $mul7_i848 = $c_131245 - 4 | 0;
              $i_019_i843 = $dscr_sroa_2_8_copyload1035;
              $min_020_i842 = 3.4028234663852886e+38;
              $max_021_i841 = -3.4028234663852886e+38;
              $sum_022_i840 = 0.0;
              while (1) {
                $mul_i844 = $i_019_i843 << 2;
                $87 = HEAP16[$84 + ($mul426 << 3) + ($mul_i844 + $c_131245 << 1) >> 1] | 0;
                $add_i854 = +($87 << 16 >> 16 | 0) + $cfilt_0_copyload1040 * +(($87 << 16 >> 16) - (HEAP16[$84 + ($mul426 << 3) + ($mul7_i848 + $mul_i844 << 1) >> 1] << 16 >> 16) | 0);
                $add13_i855 = $sum_022_i840 + $add_i854;
                $min_1_i857 = $min_020_i842 > $add_i854 ? $add_i854 : $min_020_i842;
                $max_1_i859 = $max_021_i841 < $add_i854 ? $add_i854 : $max_021_i841;
                $inc_i860 = $i_019_i843 + 1 | 0;
                if (($inc_i860 | 0) > ($dscr_sroa_3_12_load1036 | 0)) {
                  $min_0_lcssa_i865 = $min_1_i857;
                  $max_0_lcssa_i864 = $max_1_i859;
                  $sum_0_lcssa_i863 = $add13_i855;
                  break L2820;
                } else {
                  $i_019_i843 = $inc_i860;
                  $min_020_i842 = $min_1_i857;
                  $max_021_i841 = $max_1_i859;
                  $sum_022_i840 = $add13_i855;
                }
              }
            }
          } while (0);
          if ($cmp23_i867) {
            $retval_0_i877 = $sum_0_lcssa_i863 * .5;
          } else {
            $retval_0_i877 = ($sum_0_lcssa_i863 - $min_0_lcssa_i865 - $max_0_lcssa_i864) / $conv33_i874;
          }
          HEAPF32[$68 + ($row_11249 * 12 & -1) + ($c_131245 << 2) >> 2] = ($retval_0_i837 + $retval_0_i877 * 3.0 - +HEAPF32[$ddft + ($c_131245 << 3) >> 2]) * .25 - +HEAPF32[$ddft + ($c_131245 << 3) + 4 >> 2];
          $inc455 = $c_131245 + 1 | 0;
          if (($inc455 | 0) == 3) {
            break;
          } else {
            $c_131245 = $inc455;
          }
        }
        $inc458 = $row_11249 + 1 | 0;
        $91 = HEAP16[2699404] | 0;
        if (($inc458 | 0) < ($91 & 65535 | 0)) {
          $row_11249 = $inc458;
          $70 = $91;
        } else {
          break L2805;
        }
      }
    }
  } while (0);
  _memcpy($call_i823, $call_i823 + 96 | 0, 96);
  $conv461 = HEAPU16[2699404] | 0;
  _memcpy($68 + (($conv461 - 11 | 0) * 12 & -1) | 0, $68 + (($conv461 - 22 | 0) * 12 & -1) | 0, 132);
  _memcpy($26, $call_i823, 36);
  L2831 : do {
    if (((HEAPU16[2699404] | 0) - 1 | 0) > 1) {
      $96 = $last + 12 | 0;
      $97 = $last + 24 | 0;
      $row_21242 = 1;
      while (1) {
        $98 = +HEAPF32[$arrayidx151_1 >> 2];
        $99 = +HEAPF32[$arrayidx144_1_1 >> 2];
        $100 = +HEAPF32[$arrayidx144_1 >> 2];
        do {
          if ($98 > $99) {
            if ($98 <= $100) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) >> 2] = $99 > $100 ? $99 : $100;
          } else {
            if ($98 >= $100) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) >> 2] = $99 < $100 ? $99 : $100;
          }
        } while (0);
        $121 = +HEAPF32[$arrayidx138 >> 2];
        $122 = +HEAPF32[$arrayidx157_11422 >> 2];
        $123 = +HEAPF32[$arrayidx157 >> 2];
        do {
          if ($121 > $122) {
            if ($121 <= $123) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) + 4 >> 2] = $122 > $123 ? $122 : $123;
          } else {
            if ($121 >= $123) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) + 4 >> 2] = $122 < $123 ? $122 : $123;
          }
        } while (0);
        $642 = +HEAPF32[$arrayidx151 >> 2];
        $643 = +HEAPF32[$arrayidx144_11419 >> 2];
        $644 = +HEAPF32[$arrayidx144 >> 2];
        do {
          if ($642 > $643) {
            if ($642 <= $644) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) + 8 >> 2] = $643 > $644 ? $643 : $644;
          } else {
            if ($642 >= $644) {
              break;
            }
            HEAPF32[$68 + ($row_21242 * 12 & -1) + 8 >> 2] = $643 < $644 ? $643 : $644;
          }
        } while (0);
        _memmove($26, $96, 24);
        $add536 = $row_21242 + 1 | 0;
        $645 = $68 + ($add536 * 12 & -1) | 0;
        HEAP32[$97 >> 2] = HEAP32[$645 >> 2] | 0;
        HEAP32[$97 + 4 >> 2] = HEAP32[$645 + 4 >> 2] | 0;
        HEAP32[$97 + 8 >> 2] = HEAP32[$645 + 8 >> 2] | 0;
        if (($add536 | 0) < ((HEAPU16[2699404] | 0) - 1 | 0)) {
          $row_21242 = $add536;
        } else {
          $row_2_lcssa = $add536;
          break L2831;
        }
      }
    } else {
      $row_2_lcssa = 1;
    }
  } while (0);
  HEAPF32[$68 + ($row_2_lcssa * 12 & -1) >> 2] = (+HEAPF32[$arrayidx144_1_1 >> 2] + +HEAPF32[$arrayidx151_1 >> 2]) * .5;
  HEAPF32[$68 + ($row_2_lcssa * 12 & -1) + 4 >> 2] = (+HEAPF32[$arrayidx157_11422 >> 2] + +HEAPF32[$arrayidx138 >> 2]) * .5;
  HEAPF32[$68 + ($row_2_lcssa * 12 & -1) + 8 >> 2] = (+HEAPF32[$arrayidx144_11419 >> 2] + +HEAPF32[$arrayidx151 >> 2]) * .5;
  $div565 = (+HEAPF32[$call_i823 + 12 >> 2] + +HEAPF32[$call_i823 + 36 >> 2]) * .5;
  HEAPF32[$call_i823 >> 2] = $div565;
  $div565_1 = (+HEAPF32[$call_i823 + 16 >> 2] + +HEAPF32[$call_i823 + 40 >> 2]) * .5;
  HEAPF32[$call_i823 + 4 >> 2] = $div565_1;
  HEAPF32[$call_i823 + 8 >> 2] = (+HEAPF32[$call_i823 + 20 >> 2] + +HEAPF32[$call_i823 + 44 >> 2]) * .5;
  $119 = $fsum;
  HEAP32[$119 >> 2] = HEAP32[$call_i823 >> 2] | 0;
  HEAP32[$119 + 4 >> 2] = HEAP32[$call_i823 + 4 >> 2] | 0;
  HEAP32[$119 + 8 >> 2] = HEAP32[$call_i823 + 8 >> 2] | 0;
  $120 = HEAP16[2699404] | 0;
  L2854 : do {
    if (($120 & 65535) > 1) {
      $arrayidx596_phi_trans_insert = $fsum | 0;
      $arrayidx596_1_phi_trans_insert = $fsum + 4 | 0;
      $row_31234 = 1;
      $127 = $div565;
      $126 = +HEAPF32[$arrayidx596_phi_trans_insert >> 2];
      $125 = $div565_1;
      $124 = +HEAPF32[$arrayidx596_1_phi_trans_insert >> 2];
      while (1) {
        $arrayidx584 = $68 + ($row_31234 * 12 & -1) | 0;
        $add593 = $127 + (+HEAPF32[$arrayidx584 >> 2] - $127) * .04081054404377937;
        HEAPF32[$arrayidx584 >> 2] = $add593;
        $add597 = $126 + $add593;
        HEAPF32[$arrayidx596_phi_trans_insert >> 2] = $add597;
        $arrayidx584_1 = $68 + ($row_31234 * 12 & -1) + 4 | 0;
        $add593_1 = $125 + (+HEAPF32[$arrayidx584_1 >> 2] - $125) * .04081054404377937;
        HEAPF32[$arrayidx584_1 >> 2] = $add593_1;
        $add597_1 = $124 + $add593_1;
        HEAPF32[$arrayidx596_1_phi_trans_insert >> 2] = $add597_1;
        $arrayidx584_2 = $68 + ($row_31234 * 12 & -1) + 8 | 0;
        $131 = +HEAPF32[$68 + (($row_31234 - 1 | 0) * 12 & -1) + 8 >> 2];
        $add593_2 = $131 + (+HEAPF32[$arrayidx584_2 >> 2] - $131) * .04081054404377937;
        HEAPF32[$arrayidx584_2 >> 2] = $add593_2;
        $arrayidx596_2 = $fsum + 8 | 0;
        $add597_2 = +HEAPF32[$arrayidx596_2 >> 2] + $add593_2;
        HEAPF32[$arrayidx596_2 >> 2] = $add597_2;
        $inc602 = $row_31234 + 1 | 0;
        $133 = HEAP16[2699404] | 0;
        $conv575 = $133 & 65535;
        if (($inc602 | 0) < ($conv575 | 0)) {
          $row_31234 = $inc602;
          $127 = $add593;
          $126 = $add597;
          $125 = $add593_1;
          $124 = $add597_1;
        } else {
          $conv575_lcssa = $conv575;
          $137 = $133;
          $136 = $add597;
          $135 = $add597_1;
          $134 = $add597_2;
          break L2854;
        }
      }
    } else {
      $conv575_lcssa = $120 & 65535;
      $137 = $120;
      $136 = +HEAPF32[$fsum >> 2];
      $135 = +HEAPF32[$fsum + 4 >> 2];
      $134 = +HEAPF32[$fsum + 8 >> 2];
    }
  } while (0);
  $138 = $68 + (($conv575_lcssa - 1 | 0) * 12 & -1) | 0;
  HEAP32[$26 >> 2] = HEAP32[$138 >> 2] | 0;
  HEAP32[$26 + 4 >> 2] = HEAP32[$138 + 4 >> 2] | 0;
  HEAP32[$26 + 8 >> 2] = HEAP32[$138 + 8 >> 2] | 0;
  $conv6121228 = $137 & 65535;
  $conv613 = +($conv6121228 | 0);
  $arrayidx614 = $fsum | 0;
  $div615 = $136 / $conv613;
  HEAPF32[$arrayidx614 >> 2] = $div615;
  $arrayidx614_1 = $fsum + 4 | 0;
  $div615_1 = $135 / $conv613;
  HEAPF32[$arrayidx614_1 >> 2] = $div615_1;
  $arrayidx614_2 = $fsum + 8 | 0;
  $div615_2 = $134 / $conv613;
  HEAPF32[$arrayidx614_2 >> 2] = $div615_2;
  L2860 : do {
    if ($137 << 16 >> 16 == 0) {
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 0;
    } else {
      $dec1227_in = $conv6121228;
      $141 = +HEAPF32[$arrayidx144_1_1 >> 2];
      $140 = +HEAPF32[$arrayidx157_11422 >> 2];
      $139 = +HEAPF32[$arrayidx144_11419 >> 2];
      while (1) {
        $dec1227 = $dec1227_in - 1 | 0;
        $arrayidx628 = $68 + ($dec1227 * 12 & -1) | 0;
        $add637 = $141 + (+HEAPF32[$arrayidx628 >> 2] - $div615 - $141) * .04081054404377937;
        HEAPF32[$arrayidx628 >> 2] = $add637;
        HEAPF32[$arrayidx144_1_1 >> 2] = $add637;
        $arrayidx628_1 = $68 + ($dec1227 * 12 & -1) + 4 | 0;
        $add637_1 = $140 + (+HEAPF32[$arrayidx628_1 >> 2] - $div615_1 - $140) * .04081054404377937;
        HEAPF32[$arrayidx628_1 >> 2] = $add637_1;
        HEAPF32[$arrayidx157_11422 >> 2] = $add637_1;
        $arrayidx628_2 = $68 + ($dec1227 * 12 & -1) + 8 | 0;
        $add637_2 = $139 + (+HEAPF32[$arrayidx628_2 >> 2] - $div615_2 - $139) * .04081054404377937;
        HEAPF32[$arrayidx628_2 >> 2] = $add637_2;
        HEAPF32[$arrayidx144_11419 >> 2] = $add637_2;
        if (($dec1227 | 0) == 0) {
          break;
        } else {
          $dec1227_in = $dec1227;
          $141 = $add637;
          $140 = $add637_1;
          $139 = $add637_2;
        }
      }
      $_pre1469 = HEAP16[2699404] | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 0;
      L2866 : do {
        if (($_pre1469 & 65535) > 2) {
          $145 = HEAP16[2621484] | 0;
          $cmp6531219 = ($145 & 65535) > 2;
          $conv647 = $_pre1469 & 65535;
          $conv660 = $145 & 65535;
          $146 = HEAP32[1316051] | 0;
          $arrayidx671 = $total + 12 | 0;
          $row_51223 = 2;
          $150 = 0;
          $149 = 0;
          $148 = 0;
          $147 = 0;
          while (1) {
            L2870 : do {
              if ($cmp6531219) {
                $mul661 = Math_imul($conv660, $row_51223);
                $col_11220 = 2;
                $158 = $150;
                $157 = $149;
                $156 = $148;
                $155 = $147;
                while (1) {
                  $add662 = $mul661 + $col_11220 | 0;
                  $add667 = $158 + (HEAP16[$146 + ($add662 << 3) >> 1] << 16 >> 16) | 0;
                  HEAP32[$total >> 2] = $add667;
                  $add667_1 = $157 + (HEAP16[$146 + ($add662 << 3) + 2 >> 1] << 16 >> 16) | 0;
                  HEAP32[$total + 4 >> 2] = $add667_1;
                  $add667_2 = $156 + (HEAP16[$146 + ($add662 << 3) + 4 >> 1] << 16 >> 16) | 0;
                  HEAP32[$total + 8 >> 2] = $add667_2;
                  $inc672 = $155 + 1 | 0;
                  HEAP32[$arrayidx671 >> 2] = $inc672;
                  $add674 = $col_11220 + 4 | 0;
                  if (($add674 | 0) < ($conv660 | 0)) {
                    $col_11220 = $add674;
                    $158 = $add667;
                    $157 = $add667_1;
                    $156 = $add667_2;
                    $155 = $inc672;
                  } else {
                    $165 = $add667;
                    $164 = $add667_1;
                    $163 = $add667_2;
                    $162 = $inc672;
                    break L2870;
                  }
                }
              } else {
                $165 = $150;
                $164 = $149;
                $163 = $148;
                $162 = $147;
              }
            } while (0);
            $add677 = $row_51223 + 4 | 0;
            if (($add677 | 0) < ($conv647 | 0)) {
              $row_51223 = $add677;
              $150 = $165;
              $149 = $164;
              $148 = $163;
              $147 = $162;
            } else {
              $154 = $162;
              $153 = $165;
              $152 = $164;
              $151 = $163;
              break L2866;
            }
          }
        } else {
          $154 = 0;
          $153 = 0;
          $152 = 0;
          $151 = 0;
        }
      } while (0);
      if ($_pre1469 << 16 >> 16 == 0) {
        break;
      }
      $mul695 = +($154 | 0) * 100.0;
      $row_61216 = 0;
      while (1) {
        $arrayidx699 = $68 + ($row_61216 * 12 & -1) | 0;
        HEAPF32[$arrayidx699 >> 2] = $div615 * .5 + +($153 | 0) / $mul695 + +HEAPF32[$arrayidx699 >> 2];
        $arrayidx699_1 = $68 + ($row_61216 * 12 & -1) + 4 | 0;
        HEAPF32[$arrayidx699_1 >> 2] = $div615_1 * .5 + +($152 | 0) / $mul695 + +HEAPF32[$arrayidx699_1 >> 2];
        $arrayidx699_2 = $68 + ($row_61216 * 12 & -1) + 8 | 0;
        HEAPF32[$arrayidx699_2 >> 2] = $div615_2 * .5 + +($151 | 0) / $mul695 + +HEAPF32[$arrayidx699_2 >> 2];
        $inc707 = $row_61216 + 1 | 0;
        $169 = HEAP16[2699404] | 0;
        if (($inc707 | 0) < ($169 & 65535 | 0)) {
          $row_61216 = $inc707;
        } else {
          break;
        }
      }
      if ($169 << 16 >> 16 == 0) {
        break;
      }
      $arrayidx753 = $dim + 8 | 0;
      $conv930 = +($div383 | 0);
      $_pre1480 = HEAP16[2621484] | 0;
      $row_71211 = 0;
      $173 = $169;
      $172 = $_pre1480;
      $171 = $_pre1480;
      $170 = $60;
      while (1) {
        $div726 = +($row_71211 | 0) / +(($173 & 65535) - 1 | 0);
        $174 = +HEAPF32[$ddft + 24 >> 2];
        $arrayidx740 = $ddft | 0;
        HEAPF32[$arrayidx740 >> 2] = $174 + $div726 * (+HEAPF32[$ddft + 48 >> 2] - $174);
        $176 = +HEAPF32[$ddft + 28 >> 2];
        $arrayidx740_1 = $ddft + 4 | 0;
        HEAPF32[$arrayidx740_1 >> 2] = $176 + $div726 * (+HEAPF32[$ddft + 52 >> 2] - $176);
        $178 = +HEAPF32[$ddft + 32 >> 2];
        HEAPF32[$ddft + 8 >> 2] = $178 + $div726 * (+HEAPF32[$ddft + 56 >> 2] - $178);
        $180 = +HEAPF32[$ddft + 36 >> 2];
        HEAPF32[$ddft + 12 >> 2] = $180 + $div726 * (+HEAPF32[$ddft + 60 >> 2] - $180);
        $182 = +HEAPF32[$ddft + 40 >> 2];
        HEAPF32[$ddft + 16 >> 2] = $182 + $div726 * (+HEAPF32[$ddft + 64 >> 2] - $182);
        $184 = +HEAPF32[$ddft + 44 >> 2];
        HEAPF32[$ddft + 20 >> 2] = $184 + $div726 * (+HEAPF32[$ddft + 68 >> 2] - $184);
        $mul745 = Math_imul($172 & 65535, $row_71211);
        $arraydecay747 = (HEAP32[1316051] | 0) + ($mul745 << 3) | 0;
        $187 = $arraydecay747;
        HEAP16[$0 >> 1] = HEAP16[$187 >> 1] | 0;
        HEAP16[$0 + 2 >> 1] = HEAP16[$187 + 2 >> 1] | 0;
        HEAP16[$0 + 4 >> 1] = HEAP16[$187 + 4 >> 1] | 0;
        $sub754 = (HEAP32[$arrayidx753 >> 2] | 0) - 1 | 0;
        $conv757 = $div726 * +($sub754 >>> 0 >>> 0);
        $conv758 = ~~$conv757;
        $irow_0 = ((($conv758 | 0) == ($sub754 | 0)) << 31 >> 31) + $conv758 | 0;
        $sub767 = $conv757 - +($irow_0 | 0);
        if (($170 | 0) == 0) {
          $196 = $172;
          $195 = $171;
        } else {
          $mul778 = Math_imul($170, $irow_0);
          $sub782 = 1.0 - $sub767;
          $mul786 = Math_imul($170, $irow_0 + 1 | 0);
          $i_81197 = 0;
          while (1) {
            $add779 = $mul778 + $i_81197 | 0;
            $add787 = $mul786 + $i_81197 | 0;
            HEAPF32[$63 + ($i_81197 * 12 & -1) >> 2] = $sub782 * +HEAPF32[$59 + ($add779 * 12 & -1) >> 2] + $sub767 * +HEAPF32[$59 + ($add787 * 12 & -1) >> 2];
            HEAPF32[$63 + ($i_81197 * 12 & -1) + 4 >> 2] = $sub782 * +HEAPF32[$59 + ($add779 * 12 & -1) + 4 >> 2] + $sub767 * +HEAPF32[$59 + ($add787 * 12 & -1) + 4 >> 2];
            HEAPF32[$63 + ($i_81197 * 12 & -1) + 8 >> 2] = $sub782 * +HEAPF32[$59 + ($add779 * 12 & -1) + 8 >> 2] + $sub767 * +HEAPF32[$59 + ($add787 * 12 & -1) + 8 >> 2];
            $inc798 = $i_81197 + 1 | 0;
            if ($inc798 >>> 0 < $170 >>> 0) {
              $i_81197 = $inc798;
            } else {
              break;
            }
          }
          $_pre1481 = HEAP16[2621484] | 0;
          $196 = $_pre1481;
          $195 = $_pre1481;
        }
        L2889 : do {
          if ($196 << 16 >> 16 == 0) {
            $240 = 0;
            $239 = $195;
          } else {
            $col_21207 = 0;
            $pix_01208 = $arraydecay747;
            $197 = $195;
            while (1) {
              $198 = HEAP16[$pix_01208 >> 1] | 0;
              $arrayidx811 = $prev | 0;
              $sub813 = ($198 << 16 >> 16) - (HEAP16[$arrayidx811 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx811 >> 1] = $198;
              $conv818 = +(HEAP16[$pix_01208 >> 1] << 16 >> 16 | 0);
              $mul822 = $cfilt_0_copyload1040 * +((Math_imul($sub813, $sub813) >>> 14) + $sub813 | 0);
              $sub837 = +($col_21207 | 0) / +($197 & 65535 | 0) + -0.5;
              $conv846 = ~~($conv818 + +Math_floor($mul822 - +HEAPF32[$arrayidx740_1 >> 2] - +HEAPF32[$arrayidx740 >> 2] * $sub837 - +HEAPF32[$68 + ($row_71211 * 12 & -1) >> 2]));
              HEAP32[$ipix >> 2] = $conv846;
              $arrayidx809_1 = $pix_01208 + 2 | 0;
              $204 = HEAP16[$arrayidx809_1 >> 1] | 0;
              $arrayidx811_1 = $prev + 2 | 0;
              $sub813_1 = ($204 << 16 >> 16) - (HEAP16[$arrayidx811_1 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx811_1 >> 1] = $204;
              $conv818_1 = +(HEAP16[$arrayidx809_1 >> 1] << 16 >> 16 | 0);
              $mul822_1 = $cfilt_0_copyload1040 * +((Math_imul($sub813_1, $sub813_1) >>> 14) + $sub813_1 | 0);
              $conv846_1 = ~~($conv818_1 + +Math_floor($mul822_1 - +HEAPF32[$ddft + 12 >> 2] - +HEAPF32[$ddft + 8 >> 2] * $sub837 - +HEAPF32[$68 + ($row_71211 * 12 & -1) + 4 >> 2]));
              HEAP32[$ipix + 4 >> 2] = $conv846_1;
              $arrayidx809_2 = $pix_01208 + 4 | 0;
              $210 = HEAP16[$arrayidx809_2 >> 1] | 0;
              $arrayidx811_2 = $prev + 4 | 0;
              $sub813_2 = ($210 << 16 >> 16) - (HEAP16[$arrayidx811_2 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx811_2 >> 1] = $210;
              $conv818_2 = +(HEAP16[$arrayidx809_2 >> 1] << 16 >> 16 | 0);
              $mul822_2 = $cfilt_0_copyload1040 * +((Math_imul($sub813_2, $sub813_2) >>> 14) + $sub813_2 | 0);
              $conv846_2 = ~~($conv818_2 + +Math_floor($mul822_2 - +HEAPF32[$ddft + 20 >> 2] - +HEAPF32[$ddft + 16 >> 2] * $sub837 - +HEAPF32[$68 + ($row_71211 * 12 & -1) + 8 >> 2]));
              HEAP32[$ipix + 8 >> 2] = $conv846_2;
              $shr858695 = Math_imul($conv846, $conv846) >>> 14;
              $arrayidx860 = $work | 0;
              HEAP32[$arrayidx860 >> 2] = $shr858695;
              $shr865 = Math_imul($shr858695, $conv846) >> 14;
              $arrayidx867 = $work + 24 | 0;
              HEAP32[$arrayidx867 >> 2] = $shr865;
              $shr875 = Math_imul($conv846_2, $conv846_1) >> 14;
              $arrayidx878 = $work + 20 | 0;
              HEAP32[$arrayidx878 >> 2] = $shr875;
              $shr858695_1 = Math_imul($conv846_1, $conv846_1) >>> 14;
              $arrayidx860_1 = $work + 4 | 0;
              HEAP32[$arrayidx860_1 >> 2] = $shr858695_1;
              $shr865_1 = Math_imul($shr858695_1, $conv846_1) >> 14;
              $arrayidx867_1 = $work + 28 | 0;
              HEAP32[$arrayidx867_1 >> 2] = $shr865_1;
              $shr875_1 = Math_imul($conv846, $conv846_2) >> 14;
              $arrayidx878_1 = $work + 16 | 0;
              HEAP32[$arrayidx878_1 >> 2] = $shr875_1;
              $shr858695_2 = Math_imul($conv846_2, $conv846_2) >>> 14;
              $arrayidx860_2 = $work + 8 | 0;
              HEAP32[$arrayidx860_2 >> 2] = $shr858695_2;
              $shr865_2 = Math_imul($shr858695_2, $conv846_2) >> 14;
              $arrayidx867_2 = $work + 32 | 0;
              HEAP32[$arrayidx867_2 >> 2] = $shr865_2;
              $shr875_2 = Math_imul($conv846_1, $conv846) >> 14;
              $arrayidx878_2 = $work + 12 | 0;
              HEAP32[$arrayidx878_2 >> 2] = $shr875_2;
              $div913 = ($col_21207 | 0) / ($div383 | 0) & -1;
              $rem916 = ($col_21207 | 0) % ($div383 | 0);
              $conv918 = +($div383 - $rem916 | 0);
              $add921 = $div913 + 1 | 0;
              $conv925 = +($rem916 | 0);
              $c_251204 = 0;
              $225 = $shr858695;
              $224 = $shr858695_1;
              $223 = $shr858695_2;
              $222 = $shr875_2;
              $221 = $shr875_1;
              $220 = $shr875;
              $219 = $shr865;
              $218 = $shr865_1;
              $217 = $shr865_2;
              $216 = $conv846;
              while (1) {
                $add912 = +($216 | 0) + +Math_floor(+HEAPF32[$ppm + ($c_251204 * 36 & -1) >> 2] * +($225 | 0) + 0.0 + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 4 >> 2] * +($224 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 8 >> 2] * +($223 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 12 >> 2] * +($222 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 16 >> 2] * +($221 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 20 >> 2] * +($220 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 24 >> 2] * +($219 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 28 >> 2] * +($218 | 0) + +HEAPF32[$ppm + ($c_251204 * 36 & -1) + 32 >> 2] * +($217 | 0));
                $conv936 = ~~+Math_floor($add912 * (+HEAPF32[$63 + ($add921 * 12 & -1) + ($c_251204 << 2) >> 2] * $conv925 + +HEAPF32[$63 + ($div913 * 12 & -1) + ($c_251204 << 2) >> 2] * $conv918) / $conv930 / +HEAPF32[$div + ($c_251204 << 2) >> 2]);
                $_conv936 = ($conv936 | 0) > 32e3 ? 32e3 : $conv936;
                HEAP32[$ipix + ($c_251204 << 2) >> 2] = $_conv936;
                HEAP16[$pix_01208 + ($c_251204 << 1) >> 1] = $_conv936 & 65535;
                $inc948 = $c_251204 + 1 | 0;
                if (($inc948 | 0) == 3) {
                  break;
                }
                $c_251204 = $inc948;
                $225 = HEAP32[$arrayidx860 >> 2] | 0;
                $224 = HEAP32[$arrayidx860_1 >> 2] | 0;
                $223 = HEAP32[$arrayidx860_2 >> 2] | 0;
                $222 = HEAP32[$arrayidx878_2 >> 2] | 0;
                $221 = HEAP32[$arrayidx878_1 >> 2] | 0;
                $220 = HEAP32[$arrayidx878 >> 2] | 0;
                $219 = HEAP32[$arrayidx867 >> 2] | 0;
                $218 = HEAP32[$arrayidx867_1 >> 2] | 0;
                $217 = HEAP32[$arrayidx867_2 >> 2] | 0;
                $216 = HEAP32[$ipix + ($inc948 << 2) >> 2] | 0;
              }
              $inc952 = $col_21207 + 1 | 0;
              $238 = HEAP16[2621484] | 0;
              if (($inc952 | 0) >= ($238 & 65535 | 0)) {
                $240 = $238;
                $239 = $238;
                break L2889;
              }
              $col_21207 = $inc952;
              $pix_01208 = $pix_01208 + 8 | 0;
              $197 = $238;
            }
          }
        } while (0);
        $inc955 = $row_71211 + 1 | 0;
        $241 = HEAP16[2699404] | 0;
        if (($inc955 | 0) >= ($241 & 65535 | 0)) {
          break L2860;
        }
        $row_71211 = $inc955;
        $173 = $241;
        $172 = $240;
        $171 = $239;
        $170 = HEAP32[$arrayidx375 >> 2] | 0;
      }
    }
  } while (0);
  _free($call_i823);
  _free($call_i811);
  _free($call371);
  $call958 = _foveon_camf_matrix($arraydecay370, 5580376) | 0;
  $242 = $call958;
  if (($call958 | 0) != 0) {
    $243 = HEAP32[$arraydecay370 >> 2] | 0;
    L2902 : do {
      if (($243 | 0) != 0) {
        $i_101193 = 0;
        while (1) {
          $arrayidx966 = $242 + ($i_101193 << 2) | 0;
          $244 = HEAP32[$arrayidx966 >> 2] | 0;
          $sub969 = ($244 >>> 8 & 4095) - $keep_sroa_0_0_load1022 | 0;
          $sub973 = ($244 >>> 20) - $keep_sroa_1_4_load10071023 | 0;
          do {
            if (($sub973 - 1 | 0) >>> 0 <= ((HEAPU16[2699404] | 0) - 3 | 0) >>> 0) {
              $conv981 = HEAPU16[2621484] | 0;
              if (($sub969 - 1 | 0) >>> 0 > ($conv981 - 3 | 0) >>> 0) {
                break;
              }
              HEAP32[$119 >> 2] = 0;
              HEAP32[$119 + 4 >> 2] = 0;
              HEAP32[$119 + 8 >> 2] = 0;
              $247 = HEAP32[$arrayidx966 >> 2] | 0;
              $248 = HEAP32[1316051] | 0;
              $j_41189 = 0;
              $sum_01190 = 0;
              $254 = 0.0;
              $253 = 0.0;
              $252 = 0.0;
              $251 = 0.0;
              $250 = 0.0;
              $249 = 0.0;
              while (1) {
                if (($247 & 1 << $j_41189 | 0) == 0) {
                  $sum_1 = $sum_01190;
                  $265 = $254;
                  $264 = $253;
                  $263 = $252;
                  $262 = $251;
                  $261 = $250;
                  $260 = $249;
                } else {
                  $mul999 = $j_41189 << 1;
                  $add1005 = Math_imul((HEAP16[5399032 + ($mul999 << 1) >> 1] << 16 >> 16) + $sub973 | 0, $conv981) + $sub969 | 0;
                  $add1010 = $add1005 + (HEAP16[5399032 + (($mul999 | 1) << 1) >> 1] << 16 >> 16) | 0;
                  $add1016 = $251 + +(HEAP16[$248 + ($add1010 << 3) >> 1] << 16 >> 16 | 0);
                  HEAPF32[$arrayidx614 >> 2] = $add1016;
                  $add1016_1 = $250 + +(HEAP16[$248 + ($add1010 << 3) + 2 >> 1] << 16 >> 16 | 0);
                  HEAPF32[$arrayidx614_1 >> 2] = $add1016_1;
                  $add1016_2 = $249 + +(HEAP16[$248 + ($add1010 << 3) + 4 >> 1] << 16 >> 16 | 0);
                  HEAPF32[$arrayidx614_2 >> 2] = $add1016_2;
                  $sum_1 = $sum_01190 + 1 | 0;
                  $265 = $add1016;
                  $264 = $add1016_1;
                  $263 = $add1016_2;
                  $262 = $add1016;
                  $261 = $add1016_1;
                  $260 = $add1016_2;
                }
                $inc1023 = $j_41189 + 1 | 0;
                if (($inc1023 | 0) == 8) {
                  break;
                } else {
                  $j_41189 = $inc1023;
                  $sum_01190 = $sum_1;
                  $254 = $265;
                  $253 = $264;
                  $252 = $263;
                  $251 = $262;
                  $250 = $261;
                  $249 = $260;
                }
              }
              if (($sum_1 | 0) == 0) {
                break;
              }
              $conv1032 = +($sum_1 | 0);
              HEAP16[$248 + (Math_imul($conv981, $sub973) + $sub969 << 3) >> 1] = ~~($265 / $conv1032);
              $add1037_1 = Math_imul(HEAPU16[2621484] | 0, $sub973) + $sub969 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1037_1 << 3) + 2 >> 1] = ~~($264 / $conv1032);
              $add1037_2 = Math_imul(HEAPU16[2621484] | 0, $sub973) + $sub969 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1037_2 << 3) + 4 >> 1] = ~~($263 / $conv1032);
            }
          } while (0);
          $inc1045 = $i_101193 + 1 | 0;
          if ($inc1045 >>> 0 < $243 >>> 0) {
            $i_101193 = $inc1045;
          } else {
            break L2902;
          }
        }
      }
    } while (0);
    _free($call958);
  }
  $conv1048 = HEAPU16[2621484] | 0;
  $mul1049 = $conv1048 * 5 & -1;
  do {
    if (($mul1049 | 0) == 0) {
      $req_0_i888 = 0;
    } else {
      $mul_i880 = $conv1048 * 60 & -1;
      if ($mul1049 >>> 0 <= 65535) {
        $req_0_i888 = $mul_i880;
        break;
      }
      $req_0_i888 = (($mul_i880 >>> 0) / ($mul1049 >>> 0) >>> 0 | 0) == 12 ? $mul_i880 : -1;
    }
  } while (0);
  $call_i889 = _malloc($req_0_i888) | 0;
  if (($call_i889 | 0) == 0) {
    $273 = HEAP32[_stderr >> 2] | 0;
    $274 = HEAP32[1316054] | 0;
    _fprintf($273 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $274, HEAP32[tempInt + 4 >> 2] = 5580152, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i889 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i889 | 0, 0, $req_0_i888 | 0);
  }
  $275 = $call_i889;
  $arrayidx10511043 = $smrow + 24 | 0;
  HEAP32[$arrayidx10511043 >> 2] = $275;
  $276 = HEAP16[2621484] | 0;
  $conv1058 = $276 & 65535;
  $arrayidx1061 = $smrow | 0;
  HEAP32[$arrayidx1061 >> 2] = $275;
  $arrayidx1061_1 = $smrow + 4 | 0;
  HEAP32[$arrayidx1061_1 >> 2] = $275 + ($conv1058 * 12 & -1) | 0;
  $arrayidx1061_2 = $smrow + 8 | 0;
  HEAP32[$arrayidx1061_2 >> 2] = $275 + (($conv1058 << 1) * 12 & -1) | 0;
  $arrayidx1061_3 = $smrow + 12 | 0;
  HEAP32[$arrayidx1061_3 >> 2] = $275 + (($conv1058 * 3 & -1) * 12 & -1) | 0;
  $arrayidx1061_4 = $smrow + 16 | 0;
  HEAP32[$arrayidx1061_4 >> 2] = $275 + (($conv1058 << 2) * 12 & -1) | 0;
  $277 = HEAP16[2699404] | 0;
  L2928 : do {
    if ((($277 & 65535) - 2 | 0) > 2) {
      $row_81184 = 2;
      $smlast_01185 = -1;
      $smred_p_01186 = 0;
      $indvars_iv1339 = 4;
      $278 = $276;
      while (1) {
        L2931 : do {
          if (($smlast_01185 | 0) < ($row_81184 + 2 | 0)) {
            $smlast_11172 = $smlast_01185;
            $293 = $278;
            $292 = HEAP32[$arrayidx1061 >> 2] | 0;
            $291 = HEAP32[$arrayidx1061_1 >> 2] | 0;
            $290 = HEAP32[$arrayidx1061_2 >> 2] | 0;
            $289 = HEAP32[$arrayidx1061_3 >> 2] | 0;
            $288 = HEAP32[$arrayidx1061_4 >> 2] | 0;
            while (1) {
              HEAP32[$smrow + 20 >> 2] = $292;
              HEAP32[$arrayidx1061 >> 2] = $291;
              HEAP32[$arrayidx1061_1 >> 2] = $290;
              HEAP32[$arrayidx1061_2 >> 2] = $289;
              HEAP32[$arrayidx1061_3 >> 2] = $288;
              HEAP32[$arrayidx1061_4 >> 2] = $292;
              $inc1085 = $smlast_11172 + 1 | 0;
              $conv10921166 = $293 & 65535;
              L2935 : do {
                if (($conv10921166 - 2 | 0) > 2) {
                  $mul1087 = Math_imul($conv10921166, $inc1085);
                  $col_31169 = 2;
                  $pix_11170 = (HEAP32[1316051] | 0) + ($mul1087 + 2 << 3) | 0;
                  while (1) {
                    $arrayidx1102 = $pix_11170 + 8 | 0;
                    HEAP32[$292 + ($col_31169 * 12 & -1) >> 2] = (((((HEAP16[$pix_11170 >> 1] << 16 >> 16) * 6 & -1) + 8 | 0) + (HEAP16[$pix_11170 - 16 >> 1] << 16 >> 16) | 0) + ((HEAP16[$arrayidx1102 >> 1] << 16 >> 16) + (HEAP16[$pix_11170 - 8 >> 1] << 16 >> 16) << 2) | 0) + (HEAP16[$pix_11170 + 16 >> 1] << 16 >> 16) >> 4;
                    $inc1120 = $col_31169 + 1 | 0;
                    $300 = HEAP16[2621484] | 0;
                    if (($inc1120 | 0) < (($300 & 65535) - 2 | 0)) {
                      $col_31169 = $inc1120;
                      $pix_11170 = $arrayidx1102;
                    } else {
                      $287 = $300;
                      break L2935;
                    }
                  }
                } else {
                  $287 = $293;
                }
              } while (0);
              if (($inc1085 | 0) == ($indvars_iv1339 | 0)) {
                $smlast_1_lcssa = $indvars_iv1339;
                $301 = $287;
                break L2931;
              } else {
                $292 = $291;
                $291 = $290;
                $290 = $289;
                $289 = $288;
                $288$phi = $292;
                $smlast_11172 = $inc1085;
                $293 = $287;
                $288 = $288$phi;
              }
            }
          } else {
            $smlast_1_lcssa = $smlast_01185;
            $301 = $278;
          }
        } while (0);
        $conv11281174 = $301 & 65535;
        L2941 : do {
          if (($conv11281174 - 2 | 0) > 2) {
            $mul1123 = Math_imul($conv11281174, $row_81184);
            $col_41177 = 2;
            $smred_p_11178 = $smred_p_01186;
            $pix_21179 = (HEAP32[1316051] | 0) + ($mul1123 + 2 << 3) | 0;
            while (1) {
              $shr1155 = (((((HEAP32[(HEAP32[$arrayidx1061_2 >> 2] | 0) + ($col_41177 * 12 & -1) >> 2] | 0) * 6 & -1) + 8 | 0) + ((HEAP32[(HEAP32[$arrayidx1061_3 >> 2] | 0) + ($col_41177 * 12 & -1) >> 2] | 0) + (HEAP32[(HEAP32[$arrayidx1061_1 >> 2] | 0) + ($col_41177 * 12 & -1) >> 2] | 0) << 2) | 0) + (HEAP32[(HEAP32[$arrayidx1061 >> 2] | 0) + ($col_41177 * 12 & -1) >> 2] | 0) | 0) + (HEAP32[(HEAP32[$arrayidx1061_4 >> 2] | 0) + ($col_41177 * 12 & -1) >> 2] | 0) >> 4;
              $conv1161 = HEAP16[$pix_21179 >> 1] << 16 >> 16;
              $add1169 = ($conv1161 - (($shr1155 * 7 & -1) + (($col_41177 | 0) == 2 ? $shr1155 : $smred_p_11178) >> 3) >> 3) + $conv1161 | 0;
              HEAP16[$pix_21179 >> 1] = ($add1169 | 0) > 32e3 ? 32e3 : $add1169 & 65535;
              $inc1178 = $col_41177 + 1 | 0;
              $315 = HEAP16[2621484] | 0;
              if (($inc1178 | 0) >= (($315 & 65535) - 2 | 0)) {
                $smred_p_1_lcssa = $shr1155;
                $316 = $315;
                break L2941;
              }
              $col_41177 = $inc1178;
              $smred_p_11178 = $shr1155;
              $pix_21179 = $pix_21179 + 8 | 0;
            }
          } else {
            $smred_p_1_lcssa = $smred_p_01186;
            $316 = $301;
          }
        } while (0);
        $inc1181 = $row_81184 + 1 | 0;
        $317 = HEAP16[2699404] | 0;
        if (($inc1181 | 0) < (($317 & 65535) - 2 | 0)) {
          $row_81184 = $inc1181;
          $smlast_01185 = $smlast_1_lcssa;
          $smred_p_01186 = $smred_p_1_lcssa;
          $indvars_iv1339 = $indvars_iv1339 + 1 | 0;
          $278 = $316;
        } else {
          $280 = $317;
          $279 = $316;
          break L2928;
        }
      }
    } else {
      $280 = $277;
      $279 = $276;
    }
  } while (0);
  $conv1191 = ~~(+(HEAP32[$satlev >> 2] | 0) / +HEAPF32[$arrayidx187 >> 2]);
  $conv1191_min_0 = ($conv1191 | 0) < 65535 ? $conv1191 : 65535;
  $conv1191_1 = ~~(+(HEAP32[$satlev + 4 >> 2] | 0) / +HEAPF32[$arrayidx187_1 >> 2]);
  $conv1191_min_0_1 = ($conv1191_min_0 | 0) > ($conv1191_1 | 0) ? $conv1191_1 : $conv1191_min_0;
  $conv1191_2 = ~~(+(HEAP32[$satlev + 8 >> 2] | 0) / +HEAPF32[$arrayidx187_2 >> 2]);
  $shr1200 = ((($conv1191_min_0_1 | 0) > ($conv1191_2 | 0) ? $conv1191_2 : $conv1191_min_0_1) * 9 & -1) >> 4;
  L2948 : do {
    if ((Math_imul($279 & 65535, $280 & 65535) | 0) == 0) {
      $320 = $280;
      $319 = $279;
    } else {
      $mul1253 = $shr1200 << 1;
      $pix_31161 = HEAP32[1316051] | 0;
      while (1) {
        $conv1213 = HEAP16[$pix_31161 >> 1] << 16 >> 16;
        do {
          if (($conv1213 | 0) > ($shr1200 | 0)) {
            $arrayidx1217 = $pix_31161 + 2 | 0;
            $conv1218 = HEAP16[$arrayidx1217 >> 1] << 16 >> 16;
            if (($conv1218 | 0) <= ($shr1200 | 0)) {
              break;
            }
            $arrayidx1222 = $pix_31161 + 4 | 0;
            $conv1223 = HEAP16[$arrayidx1222 >> 1] << 16 >> 16;
            if (($conv1223 | 0) <= ($shr1200 | 0)) {
              break;
            }
            $conv1235_min_2 = ($conv1213 | 0) > ($conv1218 | 0) ? $conv1218 : $conv1213;
            $max_1 = ($conv1213 | 0) < ($conv1218 | 0) ? $conv1218 : $conv1213;
            $conv1235_min_2_1 = ($conv1235_min_2 | 0) > ($conv1223 | 0) ? $conv1223 : $conv1235_min_2;
            $max_1_1 = ($max_1 | 0) < ($conv1223 | 0) ? $conv1223 : $max_1;
            if (($conv1235_min_2_1 | 0) < ($mul1253 | 0)) {
              $sub1265 = 16384 - (($conv1235_min_2_1 - $shr1200 << 14 | 0) / ($shr1200 | 0) & -1) | 0;
              $sub1268 = 16384 - (Math_imul($sub1265, $sub1265) >>> 14) | 0;
              $shr1270692 = Math_imul($sub1268, $sub1268) >>> 14;
              HEAP16[$pix_31161 >> 1] = (Math_imul($max_1_1 - $conv1213 | 0, $shr1270692) >>> 14) + $conv1213 & 65535;
              HEAP16[$arrayidx1217 >> 1] = (Math_imul($max_1_1 - $conv1218 | 0, $shr1270692) >>> 14) + $conv1218 & 65535;
              HEAP16[$arrayidx1222 >> 1] = (Math_imul($max_1_1 - $conv1223 | 0, $shr1270692) >>> 14) + $conv1223 & 65535;
              break;
            } else {
              $conv1257 = $max_1_1 & 65535;
              HEAP16[$arrayidx1222 >> 1] = $conv1257;
              HEAP16[$arrayidx1217 >> 1] = $conv1257;
              HEAP16[$pix_31161 >> 1] = $conv1257;
              break;
            }
          }
        } while (0);
        $add_ptr1289 = $pix_31161 + 8 | 0;
        $324 = HEAP16[2699404] | 0;
        $325 = HEAP16[2621484] | 0;
        $mul1206 = Math_imul($325 & 65535, $324 & 65535);
        if ($add_ptr1289 >>> 0 < ((HEAP32[1316051] | 0) + ($mul1206 << 3) | 0) >>> 0) {
          $pix_31161 = $add_ptr1289;
        } else {
          $320 = $324;
          $319 = $325;
          break L2948;
        }
      }
    }
  } while (0);
  L2961 : do {
    if ((($320 & 65535) - 2 | 0) > 2) {
      $arrayidx1391 = $dev | 0;
      $arrayidx1392 = $dev + 4 | 0;
      $arrayidx1394 = $dev + 8 | 0;
      $row_91150 = 2;
      $smlast_21151 = -1;
      $indvars_iv1330 = 4;
      $327 = $319;
      while (1) {
        L2965 : do {
          if (($smlast_21151 | 0) < ($row_91150 + 2 | 0)) {
            $smlast_31138 = $smlast_21151;
            $337 = $327;
            $336 = HEAP32[$arrayidx1061 >> 2] | 0;
            $335 = HEAP32[$arrayidx1061_1 >> 2] | 0;
            $334 = HEAP32[$arrayidx1061_2 >> 2] | 0;
            $333 = HEAP32[$arrayidx1061_3 >> 2] | 0;
            $332 = HEAP32[$arrayidx1061_4 >> 2] | 0;
            while (1) {
              HEAP32[$smrow + 20 >> 2] = $336;
              HEAP32[$arrayidx1061 >> 2] = $335;
              HEAP32[$arrayidx1061_1 >> 2] = $334;
              HEAP32[$arrayidx1061_2 >> 2] = $333;
              HEAP32[$arrayidx1061_3 >> 2] = $332;
              HEAP32[$arrayidx1061_4 >> 2] = $336;
              $inc1313 = $smlast_31138 + 1 | 0;
              $conv13201132 = $337 & 65535;
              L2969 : do {
                if (($conv13201132 - 2 | 0) > 2) {
                  $mul1315 = Math_imul($conv13201132, $inc1313);
                  $col_51135 = 2;
                  $pix_41136 = (HEAP32[1316051] | 0) + ($mul1315 + 2 << 3) | 0;
                  $339 = $336;
                  while (1) {
                    $arrayidx1337 = $pix_41136 + 8 | 0;
                    HEAP32[$339 + ($col_51135 * 12 & -1) >> 2] = (((HEAP16[$pix_41136 - 8 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_41136 >> 1] << 16 >> 16 << 1) | 0) + (HEAP16[$arrayidx1337 >> 1] << 16 >> 16) >> 2;
                    HEAP32[(HEAP32[$arrayidx1061_4 >> 2] | 0) + ($col_51135 * 12 & -1) + 4 >> 2] = (((HEAP16[$pix_41136 - 6 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_41136 + 2 >> 1] << 16 >> 16 << 1) | 0) + (HEAP16[$pix_41136 + 10 >> 1] << 16 >> 16) >> 2;
                    $350 = HEAP32[$arrayidx1061_4 >> 2] | 0;
                    HEAP32[$350 + ($col_51135 * 12 & -1) + 8 >> 2] = (((HEAP16[$pix_41136 - 4 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_41136 + 4 >> 1] << 16 >> 16 << 1) | 0) + (HEAP16[$pix_41136 + 12 >> 1] << 16 >> 16) >> 2;
                    $inc1350 = $col_51135 + 1 | 0;
                    $351 = HEAP16[2621484] | 0;
                    if (($inc1350 | 0) < (($351 & 65535) - 2 | 0)) {
                      $col_51135 = $inc1350;
                      $pix_41136 = $arrayidx1337;
                      $339 = $350;
                    } else {
                      $331 = $351;
                      $330 = $350;
                      break L2969;
                    }
                  }
                } else {
                  $331 = $337;
                  $330 = $336;
                }
              } while (0);
              if (($inc1313 | 0) == ($indvars_iv1330 | 0)) {
                $smlast_3_lcssa = $indvars_iv1330;
                $352 = $331;
                break L2965;
              } else {
                $smlast_31138 = $inc1313;
                $337 = $331;
                $336 = $335;
                $335 = $334;
                $334 = $333;
                $333 = $332;
                $332 = $330;
              }
            }
          } else {
            $smlast_3_lcssa = $smlast_21151;
            $352 = $327;
          }
        } while (0);
        $conv13591142 = $352 & 65535;
        L2975 : do {
          if (($conv13591142 - 2 | 0) > 2) {
            $mul1354 = Math_imul($conv13591142, $row_91150);
            $col_61145 = 2;
            $pix_51146 = (HEAP32[1316051] | 0) + ($mul1354 + 2 << 3) | 0;
            while (1) {
              $354 = HEAP32[$arrayidx369 >> 2] | 0;
              $356 = HEAP32[$arrayidx1061_1 >> 2] | 0;
              $358 = HEAP32[$arrayidx1061_2 >> 2] | 0;
              $360 = HEAP32[$arrayidx1061_3 >> 2] | 0;
              $sub1384 = (HEAP16[$pix_51146 >> 1] << 16 >> 16) - (((HEAP32[$358 + ($col_61145 * 12 & -1) >> 2] << 1) + (HEAP32[$356 + ($col_61145 * 12 & -1) >> 2] | 0) | 0) + (HEAP32[$360 + ($col_61145 * 12 & -1) >> 2] | 0) >> 2) | 0;
              $conv_i903 = HEAP16[$354 >> 1] << 16 >> 16;
              do {
                if (((($sub1384 | 0) > -1 ? $sub1384 : -$sub1384 | 0) | 0) < ($conv_i903 | 0)) {
                  if (($sub1384 | 0) < 0) {
                    $retval_0_i907 = -(HEAP16[$354 + (1 - $sub1384 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $retval_0_i907 = HEAP16[$354 + ($sub1384 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $retval_0_i907 = 0;
                }
              } while (0);
              $sub1386 = -$retval_0_i907 | 0;
              HEAP32[$arrayidx1391 >> 2] = $sub1386;
              $arrayidx1369_1 = $pix_51146 + 2 | 0;
              $sub1384_1 = (HEAP16[$arrayidx1369_1 >> 1] << 16 >> 16) - (((HEAP32[$358 + ($col_61145 * 12 & -1) + 4 >> 2] << 1) + (HEAP32[$356 + ($col_61145 * 12 & -1) + 4 >> 2] | 0) | 0) + (HEAP32[$360 + ($col_61145 * 12 & -1) + 4 >> 2] | 0) >> 2) | 0;
              do {
                if (((($sub1384_1 | 0) > -1 ? $sub1384_1 : -$sub1384_1 | 0) | 0) < ($conv_i903 | 0)) {
                  if (($sub1384_1 | 0) < 0) {
                    $retval_0_i907_1 = -(HEAP16[$354 + (1 - $sub1384_1 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $retval_0_i907_1 = HEAP16[$354 + ($sub1384_1 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $retval_0_i907_1 = 0;
                }
              } while (0);
              HEAP32[$arrayidx1392 >> 2] = -$retval_0_i907_1 | 0;
              $arrayidx1369_2 = $pix_51146 + 4 | 0;
              $sub1384_2 = (HEAP16[$arrayidx1369_2 >> 1] << 16 >> 16) - (((HEAP32[$358 + ($col_61145 * 12 & -1) + 8 >> 2] << 1) + (HEAP32[$356 + ($col_61145 * 12 & -1) + 8 >> 2] | 0) | 0) + (HEAP32[$360 + ($col_61145 * 12 & -1) + 8 >> 2] | 0) >> 2) | 0;
              do {
                if (((($sub1384_2 | 0) > -1 ? $sub1384_2 : -$sub1384_2 | 0) | 0) < ($conv_i903 | 0)) {
                  if (($sub1384_2 | 0) < 0) {
                    $retval_0_i907_2 = -(HEAP16[$354 + (1 - $sub1384_2 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $retval_0_i907_2 = HEAP16[$354 + ($sub1384_2 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $retval_0_i907_2 = 0;
                }
              } while (0);
              HEAP32[$arrayidx1394 >> 2] = -$retval_0_i907_2 | 0;
              $shr1396690 = (-(($retval_0_i907_1 + $retval_0_i907 | 0) + $retval_0_i907_2 | 0) | 0) >>> 3;
              HEAP16[$pix_51146 >> 1] = ($sub1386 - $shr1396690 | 0) + (HEAPU16[$pix_51146 >> 1] | 0) & 65535;
              HEAP16[$arrayidx1369_1 >> 1] = ((HEAP32[$arrayidx1392 >> 2] | 0) - $shr1396690 | 0) + (HEAPU16[$arrayidx1369_1 >> 1] | 0) & 65535;
              HEAP16[$arrayidx1369_2 >> 1] = ((HEAP32[$arrayidx1394 >> 2] | 0) - $shr1396690 | 0) + (HEAPU16[$arrayidx1369_2 >> 1] | 0) & 65535;
              $inc1412 = $col_61145 + 1 | 0;
              $641 = HEAP16[2621484] | 0;
              if (($inc1412 | 0) >= (($641 & 65535) - 2 | 0)) {
                $369 = $641;
                break L2975;
              }
              $col_61145 = $inc1412;
              $pix_51146 = $pix_51146 + 8 | 0;
            }
          } else {
            $369 = $352;
          }
        } while (0);
        $inc1415 = $row_91150 + 1 | 0;
        $370 = HEAP16[2699404] | 0;
        if (($inc1415 | 0) < (($370 & 65535) - 2 | 0)) {
          $row_91150 = $inc1415;
          $smlast_21151 = $smlast_3_lcssa;
          $indvars_iv1330 = $indvars_iv1330 + 1 | 0;
          $327 = $369;
        } else {
          $329 = $370;
          $328 = $369;
          break L2961;
        }
      }
    } else {
      $329 = $320;
      $328 = $319;
    }
  } while (0);
  L3000 : do {
    if ((($329 & 65535) - 2 | 0) > 2) {
      $arrayidx1497 = $total + 12 | 0;
      $row_101128 = 2;
      $smlast_41129 = -1;
      $indvars_iv = 4;
      $371 = $328;
      while (1) {
        L3004 : do {
          if (($smlast_41129 | 0) < ($row_101128 + 2 | 0)) {
            $smlast_51114 = $smlast_41129;
            $379 = $371;
            $378 = HEAP32[$arrayidx1061 >> 2] | 0;
            $377 = HEAP32[$arrayidx1061_1 >> 2] | 0;
            $376 = HEAP32[$arrayidx1061_2 >> 2] | 0;
            $375 = HEAP32[$arrayidx1061_3 >> 2] | 0;
            $374 = HEAP32[$arrayidx1061_4 >> 2] | 0;
            while (1) {
              HEAP32[$smrow + 20 >> 2] = $378;
              HEAP32[$arrayidx1061 >> 2] = $377;
              HEAP32[$arrayidx1061_1 >> 2] = $376;
              HEAP32[$arrayidx1061_2 >> 2] = $375;
              HEAP32[$arrayidx1061_3 >> 2] = $374;
              HEAP32[$arrayidx1061_4 >> 2] = $378;
              $inc1439 = $smlast_51114 + 1 | 0;
              $conv14461108 = $379 & 65535;
              L3008 : do {
                if (($conv14461108 - 2 | 0) > 2) {
                  $mul1441 = Math_imul($conv14461108, $inc1439);
                  $col_71111 = 2;
                  $pix_61112 = (HEAP32[1316051] | 0) + ($mul1441 + 2 << 3) | 0;
                  $381 = $378;
                  while (1) {
                    $arrayidx1466 = $pix_61112 + 8 | 0;
                    HEAP32[$381 + ($col_71111 * 12 & -1) >> 2] = (((((HEAP16[$pix_61112 - 16 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_61112 - 8 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 >> 1] << 16 >> 16) | 0) + (HEAP16[$arrayidx1466 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 16 >> 1] << 16 >> 16) >> 2;
                    HEAP32[(HEAP32[$arrayidx1061_4 >> 2] | 0) + ($col_71111 * 12 & -1) + 4 >> 2] = (((((HEAP16[$pix_61112 - 14 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_61112 - 6 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 2 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 10 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 18 >> 1] << 16 >> 16) >> 2;
                    $398 = HEAP32[$arrayidx1061_4 >> 2] | 0;
                    HEAP32[$398 + ($col_71111 * 12 & -1) + 8 >> 2] = (((((HEAP16[$pix_61112 - 12 >> 1] << 16 >> 16) + 2 | 0) + (HEAP16[$pix_61112 - 4 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 4 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 12 >> 1] << 16 >> 16) | 0) + (HEAP16[$pix_61112 + 20 >> 1] << 16 >> 16) >> 2;
                    $inc1483 = $col_71111 + 1 | 0;
                    $399 = HEAP16[2621484] | 0;
                    if (($inc1483 | 0) < (($399 & 65535) - 2 | 0)) {
                      $col_71111 = $inc1483;
                      $pix_61112 = $arrayidx1466;
                      $381 = $398;
                    } else {
                      $373 = $399;
                      $372 = $398;
                      break L3008;
                    }
                  }
                } else {
                  $373 = $379;
                  $372 = $378;
                }
              } while (0);
              if (($inc1439 | 0) == ($indvars_iv | 0)) {
                $smlast_5_lcssa = $indvars_iv;
                $400 = $373;
                break L3004;
              } else {
                $smlast_51114 = $inc1439;
                $379 = $373;
                $378 = $377;
                $377 = $376;
                $376 = $375;
                $375 = $374;
                $374 = $372;
              }
            }
          } else {
            $smlast_5_lcssa = $smlast_41129;
            $400 = $371;
          }
        } while (0);
        $conv14921120 = $400 & 65535;
        L3014 : do {
          if (($conv14921120 - 2 | 0) > 2) {
            $mul1487 = Math_imul($conv14921120, $row_101128);
            $col_81123 = 2;
            $pix_71124 = (HEAP32[1316051] | 0) + ($mul1487 + 2 << 3) | 0;
            while (1) {
              $402 = HEAP32[$arrayidx1061 >> 2] | 0;
              $404 = HEAP32[$arrayidx1061_1 >> 2] | 0;
              $406 = HEAP32[$arrayidx1061_2 >> 2] | 0;
              $408 = HEAP32[$arrayidx1061_3 >> 2] | 0;
              $410 = HEAP32[$arrayidx1061_4 >> 2] | 0;
              $add1511_4 = ((((HEAP32[$402 + ($col_81123 * 12 & -1) >> 2] | 0) + (HEAP32[$404 + ($col_81123 * 12 & -1) >> 2] | 0) | 0) + (HEAP32[$406 + ($col_81123 * 12 & -1) >> 2] | 0) | 0) + (HEAP32[$408 + ($col_81123 * 12 & -1) >> 2] | 0) | 0) + (HEAP32[$410 + ($col_81123 * 12 & -1) >> 2] | 0) | 0;
              HEAP32[$total >> 2] = $add1511_4;
              $add1517 = $add1511_4 + 375 | 0;
              HEAP32[$arrayidx1497 >> 2] = $add1517;
              $add1520 = (HEAP16[$pix_71124 >> 1] << 16 >> 16) + 60 | 0;
              $arrayidx1502_1 = $total + 4 | 0;
              $add1511_4_1 = ((((HEAP32[$402 + ($col_81123 * 12 & -1) + 4 >> 2] | 0) + (HEAP32[$404 + ($col_81123 * 12 & -1) + 4 >> 2] | 0) | 0) + (HEAP32[$406 + ($col_81123 * 12 & -1) + 4 >> 2] | 0) | 0) + (HEAP32[$408 + ($col_81123 * 12 & -1) + 4 >> 2] | 0) | 0) + (HEAP32[$410 + ($col_81123 * 12 & -1) + 4 >> 2] | 0) | 0;
              HEAP32[$arrayidx1502_1 >> 2] = $add1511_4_1;
              $add1517_1 = $add1517 + $add1511_4_1 | 0;
              HEAP32[$arrayidx1497 >> 2] = $add1517_1;
              $arrayidx1518_1 = $pix_71124 + 2 | 0;
              $add1520_1 = (HEAP16[$arrayidx1518_1 >> 1] << 16 >> 16) + $add1520 | 0;
              $arrayidx1502_2 = $total + 8 | 0;
              $add1511_4_2 = ((((HEAP32[$402 + ($col_81123 * 12 & -1) + 8 >> 2] | 0) + (HEAP32[$404 + ($col_81123 * 12 & -1) + 8 >> 2] | 0) | 0) + (HEAP32[$406 + ($col_81123 * 12 & -1) + 8 >> 2] | 0) | 0) + (HEAP32[$408 + ($col_81123 * 12 & -1) + 8 >> 2] | 0) | 0) + (HEAP32[$410 + ($col_81123 * 12 & -1) + 8 >> 2] | 0) | 0;
              HEAP32[$arrayidx1502_2 >> 2] = $add1511_4_2;
              $add1517_2 = $add1517_1 + $add1511_4_2 | 0;
              HEAP32[$arrayidx1497 >> 2] = $add1517_2;
              $arrayidx1518_2 = $pix_71124 + 4 | 0;
              $424 = HEAP16[$arrayidx1518_2 >> 1] | 0;
              $conv1519_2 = $424 << 16 >> 16;
              $add1520_2 = $conv1519_2 + $add1520_1 | 0;
              $_sum_2 = ($add1520_2 | 0) < 0 ? 0 : $add1520_2;
              if (($add1517_2 | 0) > 375) {
                $cond1538 = ($_sum_2 << 16 | 0) / ($add1517_2 | 0) & -1;
              } else {
                $cond1538 = $_sum_2 * 174 & -1;
              }
              $425 = HEAP32[$arrayidx364 >> 2] | 0;
              $shr1547 = Math_imul($add1511_4, $cond1538) + 32768 >> 16;
              $426 = HEAP16[$pix_71124 >> 1] | 0;
              $sub1550 = $shr1547 - ($426 << 16 >> 16) | 0;
              do {
                if (((($sub1550 | 0) > -1 ? $sub1550 : -$sub1550 | 0) | 0) < (HEAP16[$425 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1550 | 0) < 0) {
                    $retval_0_i924 = -(HEAP16[$425 + (1 - $sub1550 << 1) >> 1] | 0) & 65535;
                    break;
                  } else {
                    $retval_0_i924 = HEAP16[$425 + ($sub1550 + 1 << 1) >> 1] | 0;
                    break;
                  }
                } else {
                  $retval_0_i924 = 0;
                }
              } while (0);
              HEAP16[$pix_71124 >> 1] = $426 + $retval_0_i924 & 65535;
              $430 = HEAP32[$arrayidx364 >> 2] | 0;
              $shr1547_1 = Math_imul(HEAP32[$arrayidx1502_1 >> 2] | 0, $cond1538) + 32768 >> 16;
              $432 = HEAP16[$arrayidx1518_1 >> 1] | 0;
              $sub1550_1 = $shr1547_1 - ($432 << 16 >> 16) | 0;
              do {
                if (((($sub1550_1 | 0) > -1 ? $sub1550_1 : -$sub1550_1 | 0) | 0) < (HEAP16[$430 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1550_1 | 0) < 0) {
                    $retval_0_i924_1 = -(HEAP16[$430 + (1 - $sub1550_1 << 1) >> 1] | 0) & 65535;
                    break;
                  } else {
                    $retval_0_i924_1 = HEAP16[$430 + ($sub1550_1 + 1 << 1) >> 1] | 0;
                    break;
                  }
                } else {
                  $retval_0_i924_1 = 0;
                }
              } while (0);
              HEAP16[$arrayidx1518_1 >> 1] = $432 + $retval_0_i924_1 & 65535;
              $622 = HEAP32[$arrayidx364 >> 2] | 0;
              $sub1550_2 = (Math_imul(HEAP32[$arrayidx1502_2 >> 2] | 0, $cond1538) + 32768 >> 16) - $conv1519_2 | 0;
              do {
                if (((($sub1550_2 | 0) > -1 ? $sub1550_2 : -$sub1550_2 | 0) | 0) < (HEAP16[$622 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1550_2 | 0) < 0) {
                    $retval_0_i924_2 = -(HEAP16[$622 + (1 - $sub1550_2 << 1) >> 1] | 0) & 65535;
                    break;
                  } else {
                    $retval_0_i924_2 = HEAP16[$622 + ($sub1550_2 + 1 << 1) >> 1] | 0;
                    break;
                  }
                } else {
                  $retval_0_i924_2 = 0;
                }
              } while (0);
              HEAP16[$arrayidx1518_2 >> 1] = $424 + $retval_0_i924_2 & 65535;
              $inc1561 = $col_81123 + 1 | 0;
              $627 = HEAP16[2621484] | 0;
              if (($inc1561 | 0) >= (($627 & 65535) - 2 | 0)) {
                $434 = $627;
                break L3014;
              }
              $col_81123 = $inc1561;
              $pix_71124 = $pix_71124 + 8 | 0;
            }
          } else {
            $434 = $400;
          }
        } while (0);
        $inc1564 = $row_101128 + 1 | 0;
        $435 = HEAP16[2699404] | 0;
        if (($inc1564 | 0) < (($435 & 65535) - 2 | 0)) {
          $row_101128 = $inc1564;
          $smlast_41129 = $smlast_5_lcssa;
          $indvars_iv = $indvars_iv + 1 | 0;
          $371 = $434;
        } else {
          $437 = $435;
          $436 = $434;
          break L3000;
        }
      }
    } else {
      $437 = $329;
      $436 = $328;
    }
  } while (0);
  $conv15691098 = $437 & 65535;
  $conv15701099 = $436 & 65535;
  L3043 : do {
    if ((Math_imul($conv15701099, $conv15691098) | 0) == 0) {
      $conv1569_lcssa = $conv15691098;
      $conv1570_lcssa = $conv15701099;
    } else {
      $arrayidx1657 = $ipix | 0;
      $pix_81103 = HEAP32[1316051] | 0;
      while (1) {
        $439 = HEAP32[$arraydecay335 >> 2] | 0;
        $440 = HEAP16[$pix_81103 >> 1] | 0;
        $conv1583 = $440 << 16 >> 16;
        do {
          if ((($440 << 16 >> 16 > -1 ? $conv1583 : -$conv1583 | 0) | 0) < (HEAP16[$439 >> 1] << 16 >> 16 | 0)) {
            if ($440 << 16 >> 16 < 0) {
              $retval_0_i942 = -(HEAP16[$439 + (1 - $conv1583 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i942 = HEAP16[$439 + ($conv1583 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i942 = 0;
          }
        } while (0);
        $sub1587 = $440 - $retval_0_i942 & 65535;
        HEAP16[$pix_81103 >> 1] = $sub1587;
        $444 = HEAP32[$arrayidx21_1_i >> 2] | 0;
        $arrayidx1582_1 = $pix_81103 + 2 | 0;
        $445 = HEAP16[$arrayidx1582_1 >> 1] | 0;
        $conv1583_1 = $445 << 16 >> 16;
        do {
          if ((($445 << 16 >> 16 > -1 ? $conv1583_1 : -$conv1583_1 | 0) | 0) < (HEAP16[$444 >> 1] << 16 >> 16 | 0)) {
            if ($445 << 16 >> 16 < 0) {
              $retval_0_i942_1 = -(HEAP16[$444 + (1 - $conv1583_1 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i942_1 = HEAP16[$444 + ($conv1583_1 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i942_1 = 0;
          }
        } while (0);
        $sub1587_1 = $445 - $retval_0_i942_1 & 65535;
        HEAP16[$arrayidx1582_1 >> 1] = $sub1587_1;
        $587 = HEAP32[$arrayidx21_2_i >> 2] | 0;
        $arrayidx1582_2 = $pix_81103 + 4 | 0;
        $588 = HEAP16[$arrayidx1582_2 >> 1] | 0;
        $conv1583_2 = $588 << 16 >> 16;
        do {
          if ((($588 << 16 >> 16 > -1 ? $conv1583_2 : -$conv1583_2 | 0) | 0) < (HEAP16[$587 >> 1] << 16 >> 16 | 0)) {
            if ($588 << 16 >> 16 < 0) {
              $retval_0_i942_2 = -(HEAP16[$587 + (1 - $conv1583_2 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i942_2 = HEAP16[$587 + ($conv1583_2 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i942_2 = 0;
          }
        } while (0);
        $sub1587_2 = $588 - $retval_0_i942_2 & 65535;
        HEAP16[$arrayidx1582_2 >> 1] = $sub1587_2;
        $conv1593 = $sub1587 << 16 >> 16;
        $conv1595 = $sub1587_1 << 16 >> 16;
        $conv1601 = $sub1587_2 << 16 >> 16;
        $shr1603 = ($conv1601 + $conv1593 | 0) + ($conv1595 << 1) >> 2;
        $592 = HEAP32[$arraydecay335 >> 2] | 0;
        $sub1611 = $conv1593 - $shr1603 | 0;
        do {
          if (((($sub1611 | 0) > -1 ? $sub1611 : -$sub1611 | 0) | 0) < (HEAP16[$592 >> 1] << 16 >> 16 | 0)) {
            if (($sub1611 | 0) < 0) {
              $retval_0_i960 = -(HEAP16[$592 + (1 - $sub1611 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i960 = HEAP16[$592 + ($sub1611 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i960 = 0;
          }
        } while (0);
        $sub1615 = $sub1587 - $retval_0_i960 & 65535;
        HEAP16[$pix_81103 >> 1] = $sub1615;
        $449 = HEAP32[$arrayidx21_1_i >> 2] | 0;
        $sub1611_1 = $conv1595 - $shr1603 | 0;
        do {
          if (((($sub1611_1 | 0) > -1 ? $sub1611_1 : -$sub1611_1 | 0) | 0) < (HEAP16[$449 >> 1] << 16 >> 16 | 0)) {
            if (($sub1611_1 | 0) < 0) {
              $retval_0_i960_1 = -(HEAP16[$449 + (1 - $sub1611_1 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i960_1 = HEAP16[$449 + ($sub1611_1 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i960_1 = 0;
          }
        } while (0);
        $sub1615_1 = $sub1587_1 - $retval_0_i960_1 & 65535;
        HEAP16[$arrayidx1582_1 >> 1] = $sub1615_1;
        $596 = HEAP32[$arrayidx21_2_i >> 2] | 0;
        $sub1611_2 = $conv1601 - $shr1603 | 0;
        do {
          if (((($sub1611_2 | 0) > -1 ? $sub1611_2 : -$sub1611_2 | 0) | 0) < (HEAP16[$596 >> 1] << 16 >> 16 | 0)) {
            if (($sub1611_2 | 0) < 0) {
              $retval_0_i960_2 = -(HEAP16[$596 + (1 - $sub1611_2 << 1) >> 1] | 0) & 65535;
              break;
            } else {
              $retval_0_i960_2 = HEAP16[$596 + ($sub1611_2 + 1 << 1) >> 1] | 0;
              break;
            }
          } else {
            $retval_0_i960_2 = 0;
          }
        } while (0);
        $sub1615_2 = $sub1587_2 - $retval_0_i960_2 & 65535;
        HEAP16[$arrayidx1582_2 >> 1] = $sub1615_2;
        $add1635_2 = +HEAPF32[$arrayidx259 >> 2] * +($sub1615 << 16 >> 16 | 0) + 0.0 + +HEAPF32[$arrayidx261 >> 2] * +($sub1615_1 << 16 >> 16 | 0) + +HEAPF32[$arrayidx264 >> 2] * +($sub1615_2 << 16 >> 16 | 0);
        $dsum_2 = $add1635_2 < 0.0 ? 0.0 : $add1635_2;
        $conv1648 = ~~(($dsum_2 > 24.0e3 ? 24.0e3 : $dsum_2) + .5);
        HEAP32[$arrayidx1657 >> 2] = $conv1648;
        $add1635_2_1 = +HEAPF32[$arrayidx259_1 >> 2] * +(HEAP16[$pix_81103 >> 1] << 16 >> 16 | 0) + 0.0 + +HEAPF32[$arrayidx261_1 >> 2] * +(HEAP16[$arrayidx1582_1 >> 1] << 16 >> 16 | 0) + +HEAPF32[$arrayidx264_1 >> 2] * +(HEAP16[$arrayidx1582_2 >> 1] << 16 >> 16 | 0);
        $dsum_2_1 = $add1635_2_1 < 0.0 ? 0.0 : $add1635_2_1;
        $arrayidx1649_1 = $ipix + 4 | 0;
        HEAP32[$arrayidx1649_1 >> 2] = ~~(($dsum_2_1 > 24.0e3 ? 24.0e3 : $dsum_2_1) + .5);
        $add1635_2_2 = +HEAPF32[$arrayidx259_2 >> 2] * +(HEAP16[$pix_81103 >> 1] << 16 >> 16 | 0) + 0.0 + +HEAPF32[$arrayidx261_2 >> 2] * +(HEAP16[$arrayidx1582_1 >> 1] << 16 >> 16 | 0) + +HEAPF32[$arrayidx264_2 >> 2] * +(HEAP16[$arrayidx1582_2 >> 1] << 16 >> 16 | 0);
        $dsum_2_2 = $add1635_2_2 < 0.0 ? 0.0 : $add1635_2_2;
        $arrayidx1649_2 = $ipix + 8 | 0;
        HEAP32[$arrayidx1649_2 >> 2] = ~~(($dsum_2_2 > 24.0e3 ? 24.0e3 : $dsum_2_2) + .5);
        HEAP16[$pix_81103 >> 1] = $conv1648 & 65535;
        HEAP16[$arrayidx1582_1 >> 1] = HEAP32[$arrayidx1649_1 >> 2] & 65535;
        HEAP16[$arrayidx1582_2 >> 1] = HEAP32[$arrayidx1649_2 >> 2] & 65535;
        $add_ptr1664 = $pix_81103 + 8 | 0;
        $conv1569 = HEAPU16[2699404] | 0;
        $conv1570 = HEAPU16[2621484] | 0;
        $mul1571 = Math_imul($conv1570, $conv1569);
        if ($add_ptr1664 >>> 0 < ((HEAP32[1316051] | 0) + ($mul1571 << 3) | 0) >>> 0) {
          $pix_81103 = $add_ptr1664;
        } else {
          $conv1569_lcssa = $conv1569;
          $conv1570_lcssa = $conv1570;
          break L3043;
        }
      }
    }
  } while (0);
  $mul1670 = Math_imul($conv1570_lcssa >>> 2, $conv1569_lcssa >>> 2);
  do {
    if (($mul1670 | 0) == 0) {
      $req_0_i971 = 0;
    } else {
      $mul_i963 = $mul1670 * 6 & -1;
      if ($mul1670 >>> 0 <= 65535) {
        $req_0_i971 = $mul_i963;
        break;
      }
      $req_0_i971 = (($mul_i963 >>> 0) / ($mul1670 >>> 0) >>> 0 | 0) == 6 ? $mul_i963 : -1;
    }
  } while (0);
  $call_i972 = _malloc($req_0_i971) | 0;
  if (($call_i972 | 0) == 0) {
    $453 = HEAP32[_stderr >> 2] | 0;
    $454 = HEAP32[1316054] | 0;
    _fprintf($453 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $454, HEAP32[tempInt + 4 >> 2] = 5580152, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i972 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i972 | 0, 0, $req_0_i971 | 0);
  }
  $455 = $call_i972;
  $456 = HEAP16[2699404] | 0;
  $div1673 = ($456 & 65535) >>> 2;
  if (($div1673 | 0) == 0) {
    $459 = $456;
  } else {
    $arrayidx1684 = $ipix + 8 | 0;
    $arrayidx1685 = $ipix + 4 | 0;
    $arrayidx1686 = $ipix | 0;
    $dec16751091_in = $div1673;
    $458 = HEAP16[2621484] | 0;
    while (1) {
      $dec16751091 = $dec16751091_in - 1 | 0;
      L3098 : do {
        if (($458 & 65535) > 3) {
          $mul1699 = $dec16751091 << 2;
          $add1724 = $dec16751091_in + 1 | 0;
          $col_91087 = 0;
          $460 = $458;
          while (1) {
            HEAP32[$arrayidx1684 >> 2] = 0;
            HEAP32[$arrayidx1685 >> 2] = 0;
            HEAP32[$arrayidx1686 >> 2] = 0;
            $conv1701 = $460 & 65535;
            $mul1703 = $col_91087 << 2;
            $461 = HEAP32[1316051] | 0;
            $add1704_31532 = $mul1703 | 3;
            $i_181082 = 0;
            $464 = 0;
            $463 = 0;
            $462 = 0;
            while (1) {
              $mul1702 = Math_imul($conv1701, $i_181082 + $mul1699 | 0);
              $add1705 = $mul1703 + $mul1702 | 0;
              $add1705_1 = ($mul1703 | 1) + $mul1702 | 0;
              $add1705_2 = ($mul1703 | 2) + $mul1702 | 0;
              $add1710_1_2 = (($463 + (HEAP16[$461 + ($add1705 << 3) + 2 >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_1 << 3) + 2 >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_2 << 3) + 2 >> 1] << 16 >> 16) | 0;
              $add1710_2_2 = (($462 + (HEAP16[$461 + ($add1705 << 3) + 4 >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_1 << 3) + 4 >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_2 << 3) + 4 >> 1] << 16 >> 16) | 0;
              $add1705_3 = $add1704_31532 + $mul1702 | 0;
              $add1710_3 = ((($464 + (HEAP16[$461 + ($add1705 << 3) >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_1 << 3) >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_2 << 3) >> 1] << 16 >> 16) | 0) + (HEAP16[$461 + ($add1705_3 << 3) >> 1] << 16 >> 16) | 0;
              HEAP32[$arrayidx1686 >> 2] = $add1710_3;
              $add1710_1_3 = $add1710_1_2 + (HEAP16[$461 + ($add1705_3 << 3) + 2 >> 1] << 16 >> 16) | 0;
              HEAP32[$arrayidx1685 >> 2] = $add1710_1_3;
              $add1710_2_3 = $add1710_2_2 + (HEAP16[$461 + ($add1705_3 << 3) + 4 >> 1] << 16 >> 16) | 0;
              HEAP32[$arrayidx1684 >> 2] = $add1710_2_3;
              $inc1718 = $i_181082 + 1 | 0;
              if (($inc1718 | 0) == 4) {
                break;
              } else {
                $i_181082 = $inc1718;
                $464 = $add1710_3;
                $463 = $add1710_1_3;
                $462 = $add1710_2_3;
              }
            }
            if (($add1724 | 0) > ((HEAPU16[2699404] | 0) >>> 2 | 0)) {
              HEAP16[$455 + ((Math_imul($conv1701 >>> 2, $dec16751091) + $col_91087 | 0) * 6 & -1) >> 1] = $add1710_3 >>> 4 & 65535;
            } else {
              $div1742 = $conv1701 >>> 2;
              $conv1754 = ((($add1710_3 * 141 & -1) + 2048 | 0) + ((HEAP16[$455 + ((Math_imul($div1742, $dec16751091_in) + $col_91087 | 0) * 6 & -1) >> 1] << 16 >> 16) * 1840 & -1) | 0) >>> 12 & 65535;
              HEAP16[$455 + ((Math_imul($div1742, $dec16751091) + $col_91087 | 0) * 6 & -1) >> 1] = $conv1754;
            }
            if (($add1724 | 0) > ((HEAPU16[2699404] | 0) >>> 2 | 0)) {
              $conv1732_1 = (HEAP32[$arrayidx1685 >> 2] | 0) >>> 4 & 65535;
              HEAP16[$455 + ((Math_imul((HEAPU16[2621484] | 0) >>> 2, $dec16751091) + $col_91087 | 0) * 6 & -1) + 2 >> 1] = $conv1732_1;
            } else {
              $div1742_1 = (HEAPU16[2621484] | 0) >>> 2;
              $mul1748_1 = (HEAP16[$455 + ((Math_imul($div1742_1, $dec16751091_in) + $col_91087 | 0) * 6 & -1) + 2 >> 1] << 16 >> 16) * 1840 & -1;
              $conv1754_1 = ((((HEAP32[$arrayidx1685 >> 2] | 0) * 141 & -1) + 2048 | 0) + $mul1748_1 | 0) >>> 12 & 65535;
              HEAP16[$455 + ((Math_imul($div1742_1, $dec16751091) + $col_91087 | 0) * 6 & -1) + 2 >> 1] = $conv1754_1;
            }
            if (($add1724 | 0) > ((HEAPU16[2699404] | 0) >>> 2 | 0)) {
              $conv1732_2 = (HEAP32[$arrayidx1684 >> 2] | 0) >>> 4 & 65535;
              HEAP16[$455 + ((Math_imul((HEAPU16[2621484] | 0) >>> 2, $dec16751091) + $col_91087 | 0) * 6 & -1) + 4 >> 1] = $conv1732_2;
            } else {
              $div1742_2 = (HEAPU16[2621484] | 0) >>> 2;
              $mul1748_2 = (HEAP16[$455 + ((Math_imul($div1742_2, $dec16751091_in) + $col_91087 | 0) * 6 & -1) + 4 >> 1] << 16 >> 16) * 1840 & -1;
              $conv1754_2 = ((((HEAP32[$arrayidx1684 >> 2] | 0) * 141 & -1) + 2048 | 0) + $mul1748_2 | 0) >>> 12 & 65535;
              HEAP16[$455 + ((Math_imul($div1742_2, $dec16751091) + $col_91087 | 0) * 6 & -1) + 4 >> 1] = $conv1754_2;
            }
            $inc1766 = $col_91087 + 1 | 0;
            $584 = HEAP16[2621484] | 0;
            if (($inc1766 | 0) < (($584 & 65535) >>> 2 | 0)) {
              $col_91087 = $inc1766;
              $460 = $584;
            } else {
              $457 = $584;
              break L3098;
            }
          }
        } else {
          $457 = $458;
        }
      } while (0);
      if (($dec16751091 | 0) == 0) {
        break;
      } else {
        $dec16751091_in = $dec16751091;
        $458 = $457;
      }
    }
    $459 = HEAP16[2699404] | 0;
  }
  L3120 : do {
    if (($459 & 65535) > 3) {
      $arrayidx1775 = $ipix + 8 | 0;
      $arrayidx1776 = $ipix + 4 | 0;
      $arrayidx1777 = $ipix | 0;
      $row_121078 = 0;
      while (1) {
        HEAP32[$arrayidx1775 >> 2] = 0;
        HEAP32[$arrayidx1776 >> 2] = 0;
        HEAP32[$arrayidx1777 >> 2] = 0;
        L3124 : do {
          if (($row_121078 & 3 | 0) == 0) {
            $480 = HEAP16[2621484] | 0;
            $and1783 = $480 & 65532;
            if (($and1783 | 0) == 0) {
              break;
            }
            $div1792 = ($row_121078 | 0) / 4 & -1;
            $_pre1471 = HEAP32[$arrayidx1061 >> 2] | 0;
            $dec17851053_in = $and1783;
            $482 = $480;
            $481 = 4096;
            while (1) {
              $dec17851053 = $dec17851053_in - 1 | 0;
              $div1796 = ($dec17851053 | 0) / 4 & -1;
              $shr1806 = $481 + ((HEAP16[$455 + ((Math_imul(($482 & 65535) >>> 2, $div1792) + $div1796 | 0) * 6 & -1) >> 1] << 16 >> 16) * 1485 & -1) >> 13;
              HEAP32[$arrayidx1777 >> 2] = $shr1806;
              HEAP32[$_pre1471 + ($dec17851053 * 12 & -1) >> 2] = $shr1806;
              $mul1801_1 = (HEAP16[$455 + ((Math_imul((HEAPU16[2621484] | 0) >>> 2, $div1792) + $div1796 | 0) * 6 & -1) + 2 >> 1] << 16 >> 16) * 1485 & -1;
              $shr1806_1 = (((HEAP32[$arrayidx1776 >> 2] | 0) * 6707 & -1) + 4096 | 0) + $mul1801_1 >> 13;
              HEAP32[$arrayidx1776 >> 2] = $shr1806_1;
              HEAP32[$_pre1471 + ($dec17851053 * 12 & -1) + 4 >> 2] = $shr1806_1;
              $mul1801_2 = (HEAP16[$455 + ((Math_imul((HEAPU16[2621484] | 0) >>> 2, $div1792) + $div1796 | 0) * 6 & -1) + 4 >> 1] << 16 >> 16) * 1485 & -1;
              $shr1806_2 = (((HEAP32[$arrayidx1775 >> 2] | 0) * 6707 & -1) + 4096 | 0) + $mul1801_2 >> 13;
              HEAP32[$arrayidx1775 >> 2] = $shr1806_2;
              HEAP32[$_pre1471 + ($dec17851053 * 12 & -1) + 8 >> 2] = $shr1806_2;
              if (($dec17851053 | 0) == 0) {
                break L3124;
              }
              $dec17851053_in = $dec17851053;
              $482 = HEAP16[2621484] | 0;
              $481 = ($shr1806 * 6707 & -1) + 4096 | 0;
            }
          }
        } while (0);
        HEAP32[$arrayidx1775 >> 2] = 0;
        HEAP32[$arrayidx1776 >> 2] = 0;
        HEAP32[$arrayidx1777 >> 2] = 0;
        $490 = HEAP16[2621484] | 0;
        $conv18201055 = $490 & 65535;
        L3131 : do {
          if (($conv18201055 & 65532 | 0) == 0) {
            $conv1820_lcssa = $conv18201055;
            $498 = $490;
          } else {
            $_pre1477 = HEAP32[$arrayidx1061 >> 2] | 0;
            $_pre1478 = HEAP32[$arrayidx1061_1 >> 2] | 0;
            $col_111058 = 0;
            $491 = 0;
            while (1) {
              $shr1837 = (((HEAP32[$_pre1477 + ($col_111058 * 12 & -1) >> 2] | 0) * 1485 & -1) + 4096 | 0) + $491 >> 13;
              HEAP32[$arrayidx1777 >> 2] = $shr1837;
              HEAP32[$_pre1478 + ($col_111058 * 12 & -1) >> 2] = $shr1837;
              $shr1837_1 = (((HEAP32[$_pre1477 + ($col_111058 * 12 & -1) + 4 >> 2] | 0) * 1485 & -1) + 4096 | 0) + ((HEAP32[$arrayidx1776 >> 2] | 0) * 6707 & -1) >> 13;
              HEAP32[$arrayidx1776 >> 2] = $shr1837_1;
              HEAP32[$_pre1478 + ($col_111058 * 12 & -1) + 4 >> 2] = $shr1837_1;
              $shr1837_2 = (((HEAP32[$_pre1477 + ($col_111058 * 12 & -1) + 8 >> 2] | 0) * 1485 & -1) + 4096 | 0) + ((HEAP32[$arrayidx1775 >> 2] | 0) * 6707 & -1) >> 13;
              HEAP32[$arrayidx1775 >> 2] = $shr1837_2;
              HEAP32[$_pre1478 + ($col_111058 * 12 & -1) + 8 >> 2] = $shr1837_2;
              $inc1846 = $col_111058 + 1 | 0;
              $497 = HEAP16[2621484] | 0;
              $conv1820 = $497 & 65535;
              if (($inc1846 | 0) >= ($conv1820 & 65532 | 0)) {
                $conv1820_lcssa = $conv1820;
                $498 = $497;
                break L3131;
              }
              $col_111058 = $inc1846;
              $491 = $shr1837 * 6707 & -1;
            }
          }
        } while (0);
        L3137 : do {
          if (($row_121078 | 0) == 0) {
            _memcpy(HEAP32[$arrayidx1061_2 >> 2] | 0, HEAP32[$arrayidx1061_1 >> 2] | 0, $conv1820_lcssa * 12 & -1);
            $510 = HEAP16[2621484] | 0;
            label = 2151;
            break;
          } else {
            if (($498 & 65535) <= 3) {
              break;
            }
            $_pre1475 = HEAP32[$arrayidx1061_2 >> 2] | 0;
            $_pre1476 = HEAP32[$arrayidx1061_1 >> 2] | 0;
            $col_121064 = 0;
            while (1) {
              $arrayidx1868 = $_pre1475 + ($col_121064 * 12 & -1) | 0;
              HEAP32[$arrayidx1868 >> 2] = (((HEAP32[$arrayidx1868 >> 2] | 0) * 6707 & -1) + 4096 | 0) + ((HEAP32[$_pre1476 + ($col_121064 * 12 & -1) >> 2] | 0) * 1485 & -1) >> 13;
              $arrayidx1868_1 = $_pre1475 + ($col_121064 * 12 & -1) + 4 | 0;
              HEAP32[$arrayidx1868_1 >> 2] = (((HEAP32[$arrayidx1868_1 >> 2] | 0) * 6707 & -1) + 4096 | 0) + ((HEAP32[$_pre1476 + ($col_121064 * 12 & -1) + 4 >> 2] | 0) * 1485 & -1) >> 13;
              $arrayidx1868_2 = $_pre1475 + ($col_121064 * 12 & -1) + 8 | 0;
              HEAP32[$arrayidx1868_2 >> 2] = (((HEAP32[$arrayidx1868_2 >> 2] | 0) * 6707 & -1) + 4096 | 0) + ((HEAP32[$_pre1476 + ($col_121064 * 12 & -1) + 8 >> 2] | 0) * 1485 & -1) >> 13;
              $inc1884 = $col_121064 + 1 | 0;
              $509 = HEAP16[2621484] | 0;
              if (($inc1884 | 0) < ($509 & 65532 | 0)) {
                $col_121064 = $inc1884;
              } else {
                $510 = $509;
                label = 2151;
                break L3137;
              }
            }
          }
        } while (0);
        L3143 : do {
          if ((label | 0) == 2151) {
            label = 0;
            if (($510 & 65535) <= 3) {
              break;
            }
            $_pre1473 = HEAP32[$arrayidx1061_2 >> 2] | 0;
            $_pre1474 = HEAP32[$add_ptr >> 2] | 0;
            $col_131074 = 0;
            $511 = $510;
            while (1) {
              $add1903 = Math_imul($511 & 65535, $row_121078) + $col_131074 | 0;
              $512 = HEAP32[1316051] | 0;
              $513 = HEAP32[$_pre1473 + ($col_131074 * 12 & -1) >> 2] | 0;
              $arrayidx1905 = $512 + ($add1903 << 3) | 0;
              $conv1906 = HEAP16[$arrayidx1905 >> 1] << 16 >> 16;
              $arrayidx1899_1 = $_pre1473 + ($col_131074 * 12 & -1) + 4 | 0;
              $arrayidx1905_1 = $512 + ($add1903 << 3) + 2 | 0;
              $arrayidx1899_2 = $_pre1473 + ($col_131074 * 12 & -1) + 8 | 0;
              $arrayidx1905_2 = $512 + ($add1903 << 3) + 4 | 0;
              $div1912 = ((HEAPU16[$arrayidx1905_2 >> 1] | 0) + ((HEAPU16[$arrayidx1905_1 >> 1] | 0) + ($conv1906 + 30 | 0) | 0) << 16 | 0) / ((HEAP32[$arrayidx1899_2 >> 2] | 0) + ((HEAP32[$arrayidx1899_1 >> 2] | 0) + ($513 + 30 | 0) | 0) | 0) & -1;
              $sub1931 = (Math_imul($513, $div1912) + 32768 >> 16) - $conv1906 | 0;
              do {
                if (((($sub1931 | 0) > -1 ? $sub1931 : -$sub1931 | 0) | 0) < (HEAP16[$_pre1474 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1931 | 0) < 0) {
                    $522 = -(HEAP16[$_pre1474 + (1 - $sub1931 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $522 = HEAP16[$_pre1474 + ($sub1931 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $522 = 0;
                }
              } while (0);
              HEAP32[$arrayidx1777 >> 2] = $522;
              $523 = HEAP32[$arrayidx21_1_i807 >> 2] | 0;
              $shr1924_1 = Math_imul(HEAP32[$arrayidx1899_1 >> 2] | 0, $div1912) + 32768 >> 16;
              $sub1931_1 = $shr1924_1 - (HEAP16[$arrayidx1905_1 >> 1] << 16 >> 16) | 0;
              do {
                if (((($sub1931_1 | 0) > -1 ? $sub1931_1 : -$sub1931_1 | 0) | 0) < (HEAP16[$523 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1931_1 | 0) < 0) {
                    $retval_0_i1002_1 = -(HEAP16[$523 + (1 - $sub1931_1 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $retval_0_i1002_1 = HEAP16[$523 + ($sub1931_1 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $retval_0_i1002_1 = 0;
                }
              } while (0);
              HEAP32[$arrayidx1776 >> 2] = $retval_0_i1002_1;
              $add1935_1 = $retval_0_i1002_1 + $522 | 0;
              $554 = HEAP32[$arrayidx21_2_i809 >> 2] | 0;
              $shr1924_2 = Math_imul(HEAP32[$arrayidx1899_2 >> 2] | 0, $div1912) + 32768 >> 16;
              $sub1931_2 = $shr1924_2 - (HEAP16[$arrayidx1905_2 >> 1] << 16 >> 16) | 0;
              do {
                if (((($sub1931_2 | 0) > -1 ? $sub1931_2 : -$sub1931_2 | 0) | 0) < (HEAP16[$554 >> 1] << 16 >> 16 | 0)) {
                  if (($sub1931_2 | 0) < 0) {
                    $retval_0_i1002_2 = -(HEAP16[$554 + (1 - $sub1931_2 << 1) >> 1] << 16 >> 16) | 0;
                    break;
                  } else {
                    $retval_0_i1002_2 = HEAP16[$554 + ($sub1931_2 + 1 << 1) >> 1] << 16 >> 16;
                    break;
                  }
                } else {
                  $retval_0_i1002_2 = 0;
                }
              } while (0);
              HEAP32[$arrayidx1775 >> 2] = $retval_0_i1002_2;
              $shr1939 = $retval_0_i1002_2 + $add1935_1 >> 3;
              $sub1952 = ($522 - $shr1939 | 0) + (HEAP16[$arrayidx1905 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx1905 >> 1] = ($sub1952 | 0) < 0 ? 0 : $sub1952 & 65535;
              $add1946_1 = Math_imul(HEAPU16[2621484] | 0, $row_121078) + $col_131074 | 0;
              $arrayidx1948_1 = (HEAP32[1316051] | 0) + ($add1946_1 << 3) + 2 | 0;
              $sub1952_1 = ((HEAP32[$arrayidx1776 >> 2] | 0) - $shr1939 | 0) + (HEAP16[$arrayidx1948_1 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx1948_1 >> 1] = ($sub1952_1 | 0) < 0 ? 0 : $sub1952_1 & 65535;
              $add1946_2 = Math_imul(HEAPU16[2621484] | 0, $row_121078) + $col_131074 | 0;
              $arrayidx1948_2 = (HEAP32[1316051] | 0) + ($add1946_2 << 3) + 4 | 0;
              $sub1952_2 = ((HEAP32[$arrayidx1775 >> 2] | 0) - $shr1939 | 0) + (HEAP16[$arrayidx1948_2 >> 1] << 16 >> 16) | 0;
              HEAP16[$arrayidx1948_2 >> 1] = ($sub1952_2 | 0) < 0 ? 0 : $sub1952_2 & 65535;
              $inc1967 = $col_131074 + 1 | 0;
              $572 = HEAP16[2621484] | 0;
              if (($inc1967 | 0) < ($572 & 65532 | 0)) {
                $col_131074 = $inc1967;
                $511 = $572;
              } else {
                break L3143;
              }
            }
          }
        } while (0);
        $inc1970 = $row_121078 + 1 | 0;
        if (($inc1970 | 0) < (HEAP16[2699404] & 65532 | 0)) {
          $row_121078 = $inc1970;
        } else {
          break L3120;
        }
      }
    }
  } while (0);
  _free($call_i972);
  _free(HEAP32[$arrayidx10511043 >> 2] | 0);
  _free(HEAP32[$arraydecay335 >> 2] | 0);
  _free(HEAP32[$arrayidx21_1_i >> 2] | 0);
  _free(HEAP32[$arrayidx21_2_i >> 2] | 0);
  _free(HEAP32[$add_ptr >> 2] | 0);
  _free(HEAP32[$arrayidx21_1_i807 >> 2] | 0);
  _free(HEAP32[$arrayidx21_2_i809 >> 2] | 0);
  _free(HEAP32[$arrayidx364 >> 2] | 0);
  _free(HEAP32[$arrayidx369 >> 2] | 0);
  $sub1983 = $active_sroa_1_4_load10051019 - $keep_sroa_1_4_load10071023 | 0;
  $sub1988 = $active_sroa_2_8_load1020 - $active_sroa_0_0_load10041018 | 0;
  if (($active_sroa_3_12_load10061021 - $sub1983 | 0) > 0) {
    $mul2005 = $sub1988 << 3;
    $547 = ($keep_sroa_1_4_load10071023 + $active_sroa_3_12_load10061021 | 0) - $active_sroa_1_4_load10051019 | 0;
    $row_131048 = 0;
    while (1) {
      $mul1996 = Math_imul($row_131048, $sub1988);
      $548 = HEAP32[1316051] | 0;
      _memcpy($548 + ($mul1996 << 3) | 0, $548 + (Math_imul(HEAPU16[2621484] | 0, $row_131048 + $sub1983 | 0) + $active_sroa_0_0_load10041018 << 3) | 0, $mul2005);
      $inc2007 = $row_131048 + 1 | 0;
      if (($inc2007 | 0) == ($547 | 0)) {
        break;
      } else {
        $row_131048 = $inc2007;
      }
    }
    $row_13_lcssa = $547 & 65535;
  } else {
    $row_13_lcssa = 0;
  }
  HEAP16[2621484] = $sub1988 & 65535;
  HEAP16[2699404] = $row_13_lcssa;
  STACKTOP = __stackBase__;
  return;
}
function _remove_zeroes() {
  var $0 = 0, $_pre = 0, $1 = 0, $2 = 0, $3 = 0, $row_049 = 0, $and = 0, $sub = 0, $add21 = 0, $cmp2238 = 0, $4 = 0, $col_046 = 0, $5 = 0, $and9 = 0, $conv10 = 0, $conv12 = 0, $add15 = 0, $8 = 0, $arrayidx16 = 0, $sub25 = 0, $add27 = 0, $cmp2833 = 0, $conv31 = 0, $conv34 = 0, $r_041 = 0, $n_040 = 0, $tot_039 = 0, $cmp32 = 0, $and39 = 0, $mul65 = 0, $c_036 = 0, $n_135 = 0, $tot_134 = 0, $11 = 0, $tot_2 = 0, $n_2 = 0, $inc91 = 0, $n_1_lcssa = 0, $tot_1_lcssa = 0, $inc93 = 0, $12 = 0, $inc117 = 0, $13 = 0, $14 = 0, $15 = 0, $inc120 = 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    return;
  }
  $_pre = HEAP16[2621484] | 0;
  $row_049 = 0;
  $3 = $_pre;
  $2 = $0;
  $1 = $_pre;
  while (1) {
    if ($3 << 16 >> 16 == 0) {
      $15 = 0;
      $14 = $2;
      $13 = $1;
    } else {
      $and = $row_049 << 1 & 14;
      $sub = $row_049 - 2 | 0;
      $add21 = $row_049 + 2 | 0;
      $cmp2238 = $sub >>> 0 > $add21 >>> 0;
      $col_046 = 0;
      $4 = $1;
      while (1) {
        $5 = HEAP32[1356938] | 0;
        $and9 = $5 >>> (($col_046 & 1 | $and) << 1 >>> 0) & 3;
        $conv10 = HEAPU16[2622460] | 0;
        $conv12 = HEAPU16[2632094] | 0;
        $add15 = Math_imul($row_049 >>> ($conv10 >>> 0), $conv12) + ($col_046 >>> ($conv10 >>> 0)) | 0;
        $8 = HEAP32[1316051] | 0;
        $arrayidx16 = $8 + ($add15 << 3) + ($and9 << 1) | 0;
        do {
          if (HEAP16[$arrayidx16 >> 1] << 16 >> 16 != 0 | $cmp2238) {
            $12 = $4;
          } else {
            $sub25 = $col_046 - 2 | 0;
            $add27 = $col_046 + 2 | 0;
            $cmp2833 = $sub25 >>> 0 > $add27 >>> 0;
            $conv31 = HEAPU16[2699404] | 0;
            $conv34 = $4 & 65535;
            $tot_039 = 0;
            $n_040 = 0;
            $r_041 = $sub;
            while (1) {
              L3189 : do {
                if ($cmp2833) {
                  $tot_1_lcssa = $tot_039;
                  $n_1_lcssa = $n_040;
                } else {
                  $cmp32 = $r_041 >>> 0 < $conv31 >>> 0;
                  $and39 = $r_041 << 1 & 14;
                  $mul65 = Math_imul($r_041 >>> ($conv10 >>> 0), $conv12);
                  $tot_134 = $tot_039;
                  $n_135 = $n_040;
                  $c_036 = $sub25;
                  while (1) {
                    do {
                      if ($cmp32 & $c_036 >>> 0 < $conv34 >>> 0) {
                        if (($5 >>> (($c_036 & 1 | $and39) << 1 >>> 0) & 3 | 0) != ($and9 | 0)) {
                          $n_2 = $n_135;
                          $tot_2 = $tot_134;
                          break;
                        }
                        $11 = HEAP16[$8 + ($mul65 + ($c_036 >>> ($conv10 >>> 0)) << 3) + ($and9 << 1) >> 1] | 0;
                        if ($11 << 16 >> 16 == 0) {
                          $n_2 = $n_135;
                          $tot_2 = $tot_134;
                          break;
                        }
                        $n_2 = $n_135 + 1 | 0;
                        $tot_2 = ($11 & 65535) + $tot_134 | 0;
                      } else {
                        $n_2 = $n_135;
                        $tot_2 = $tot_134;
                      }
                    } while (0);
                    $inc91 = $c_036 + 1 | 0;
                    if ($inc91 >>> 0 > $add27 >>> 0) {
                      $tot_1_lcssa = $tot_2;
                      $n_1_lcssa = $n_2;
                      break L3189;
                    } else {
                      $tot_134 = $tot_2;
                      $n_135 = $n_2;
                      $c_036 = $inc91;
                    }
                  }
                }
              } while (0);
              $inc93 = $r_041 + 1 | 0;
              if ($inc93 >>> 0 > $add21 >>> 0) {
                break;
              } else {
                $tot_039 = $tot_1_lcssa;
                $n_040 = $n_1_lcssa;
                $r_041 = $inc93;
              }
            }
            if (($n_1_lcssa | 0) == 0) {
              $12 = $4;
              break;
            }
            HEAP16[$arrayidx16 >> 1] = ($tot_1_lcssa >>> 0) / ($n_1_lcssa >>> 0) >>> 0 & 65535;
            $12 = HEAP16[2621484] | 0;
          }
        } while (0);
        $inc117 = $col_046 + 1 | 0;
        if ($inc117 >>> 0 < ($12 & 65535) >>> 0) {
          $col_046 = $inc117;
          $4 = $12;
        } else {
          break;
        }
      }
      $15 = $12;
      $14 = HEAP16[2699404] | 0;
      $13 = $12;
    }
    $inc120 = $row_049 + 1 | 0;
    if ($inc120 >>> 0 < ($14 & 65535) >>> 0) {
      $row_049 = $inc120;
      $3 = $15;
      $2 = $14;
      $1 = $13;
    } else {
      break;
    }
  }
  return;
}
function _crop_masked_pixels() {
  var $mblack = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $row_081 = 0, $conv767 = 0, $tobool868 = 0, $shr = 0, $add17 = 0, $shr18 = 0, $10 = 0, $11 = 0, $tobool874 = 0, $conv773 = 0, $col_072 = 0, $sub16_pn = 0, $c_0 = 0, $r_0 = 0, $mul39 = 0, $18 = 0, $and48 = 0, $conv49 = 0, $add55 = 0, $23 = 0, $24 = 0, $inc = 0, $conv7 = 0, $tobool8 = 0, $inc60_pre_phi = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $row_165 = 0, $and16_i = 0, $rem11_i = 0, $col_162 = 0, $add74 = 0, $mul76 = 0, $add78 = 0, $36 = 0, $37 = 0, $retval_0_i = 0, $conv81 = 0, $add87 = 0, $inc91 = 0, $43 = 0, $44 = 0, $45 = 0, $inc94 = 0, $47 = 0, $_pr84 = 0, $49 = 0, $conv128 = 0, $add131 = 0, $conv132 = 0, $57 = 0, $61 = 0, $conv167 = 0, $conv171 = 0, $64 = 0, $conv178 = 0, $65 = 0, $zero_059 = 0, $m_058 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $cmp16451 = 0, $row_256 = 0, $zero_155 = 0, $and170 = 0, $mul179 = 0, $zero_253 = 0, $col_252 = 0, $and177 = 0, $70 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $add191 = 0, $inc193 = 0, $zero_2_lcssa = 0, $inc196 = 0, $zero_1_lcssa = 0, $inc199 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $mblack = __stackBase__ | 0;
  $0 = HEAP32[1315947] | 0;
  if (($0 | 0) == 64 | ($0 | 0) == 84) {
    _phase_one_correct();
  }
  $1 = HEAP16[2699510] | 0;
  L3209 : do {
    if ($1 << 16 >> 16 == 0) {
      $4 = HEAP16[2699404] | 0;
      if ($4 << 16 >> 16 == 0) {
        break;
      }
      $row_165 = 0;
      $31 = HEAP16[2621484] | 0;
      $30 = $4;
      while (1) {
        if ($31 << 16 >> 16 == 0) {
          $45 = 0;
          $44 = $30;
        } else {
          $and16_i = $row_165 << 1 & 14;
          $rem11_i = ($row_165 + 6 | 0) % 6;
          $col_162 = 0;
          while (1) {
            $add74 = (HEAPU16[2621786] | 0) + $row_165 | 0;
            $mul76 = Math_imul($add74, HEAPU16[2622498] | 0);
            $add78 = (HEAPU16[2631898] | 0) + $col_162 | 0;
            $36 = HEAP16[(HEAP32[1311250] | 0) + ($add78 + $mul76 << 1) >> 1] | 0;
            $37 = HEAP32[1356938] | 0;
            if (($37 | 0) == 1) {
              $retval_0_i = HEAP8[($add78 & 15) + (5427792 + (($add74 & 15) << 4)) | 0] << 24 >> 24;
            } else if (($37 | 0) == 2) {
              $retval_0_i = HEAP8[($col_162 + 6 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
            } else {
              $retval_0_i = $37 >>> (($col_162 & 1 | $and16_i) << 1 >>> 0) & 3;
            }
            $conv81 = HEAPU16[2622460] | 0;
            $add87 = Math_imul($row_165 >> $conv81, HEAPU16[2632094] | 0) + ($col_162 >> $conv81) | 0;
            HEAP16[(HEAP32[1316051] | 0) + ($add87 << 3) + ($retval_0_i << 1) >> 1] = $36;
            $inc91 = $col_162 + 1 | 0;
            $43 = HEAP16[2621484] | 0;
            if (($inc91 | 0) < ($43 & 65535 | 0)) {
              $col_162 = $inc91;
            } else {
              break;
            }
          }
          $45 = $43;
          $44 = HEAP16[2699404] | 0;
        }
        $inc94 = $row_165 + 1 | 0;
        if (($inc94 | 0) < ($44 & 65535 | 0)) {
          $row_165 = $inc94;
          $31 = $45;
          $30 = $44;
        } else {
          break L3209;
        }
      }
    } else {
      $2 = HEAP16[2622502] | 0;
      $3 = HEAP16[2621786] | 0;
      if ((($2 & 65535) - (($3 & 65535) << 1) | 0) <= 0) {
        break;
      }
      $row_081 = 0;
      $8 = $1;
      $7 = HEAP32[1349756] | 0;
      $6 = $2;
      $5 = $3;
      while (1) {
        $conv767 = $8 & 65535;
        $tobool868 = ($7 | 0) != 0;
        if (($conv767 << ($tobool868 & 1 ^ 1) | 0) > 0) {
          $shr = $row_081 >> 1;
          $add17 = $row_081 + 1 | 0;
          $shr18 = $add17 >> 1;
          $col_072 = 0;
          $conv773 = $conv767;
          $tobool874 = $tobool868;
          $11 = $8;
          $10 = $7;
          while (1) {
            if ($tobool874) {
              $c_0 = $col_072 + $shr18 | 0;
              $sub16_pn = $shr - $col_072 | 0;
            } else {
              $c_0 = ($col_072 + 1 >> 1) + $row_081 | 0;
              $sub16_pn = $row_081 - ($col_072 >> 1) | 0;
            }
            $r_0 = $sub16_pn + ($conv773 - 1 | 0) | 0;
            do {
              if ($r_0 >>> 0 < (HEAPU16[2699404] | 0) >>> 0) {
                if ($c_0 >>> 0 >= (HEAPU16[2621484] | 0) >>> 0) {
                  $24 = $11;
                  $23 = $10;
                  break;
                }
                $mul39 = Math_imul((HEAPU16[2621786] | 0) + $row_081 | 0, HEAPU16[2622498] | 0);
                $18 = HEAP16[(HEAP32[1311250] | 0) + (((HEAPU16[2631898] | 0) + $col_072 | 0) + $mul39 << 1) >> 1] | 0;
                $and48 = (HEAP32[1356938] | 0) >>> (($r_0 << 1 & 14 | $c_0 & 1) << 1 >>> 0) & 3;
                $conv49 = HEAPU16[2622460] | 0;
                $add55 = Math_imul($r_0 >>> ($conv49 >>> 0), HEAPU16[2632094] | 0) + ($c_0 >>> ($conv49 >>> 0)) | 0;
                HEAP16[(HEAP32[1316051] | 0) + ($add55 << 3) + ($and48 << 1) >> 1] = $18;
                $24 = HEAP16[2699510] | 0;
                $23 = HEAP32[1349756] | 0;
              } else {
                $24 = $11;
                $23 = $10;
              }
            } while (0);
            $inc = $col_072 + 1 | 0;
            $conv7 = $24 & 65535;
            $tobool8 = ($23 | 0) != 0;
            if (($inc | 0) < ($conv7 << ($tobool8 & 1 ^ 1) | 0)) {
              $col_072 = $inc;
              $conv773 = $conv7;
              $tobool874 = $tobool8;
              $11 = $24;
              $10 = $23;
            } else {
              break;
            }
          }
          $29 = $24;
          $28 = $23;
          $27 = HEAP16[2622502] | 0;
          $26 = HEAP16[2621786] | 0;
          $inc60_pre_phi = $add17;
        } else {
          $29 = $8;
          $28 = $7;
          $27 = $6;
          $26 = $5;
          $inc60_pre_phi = $row_081 + 1 | 0;
        }
        if (($inc60_pre_phi | 0) < (($27 & 65535) - (($26 & 65535) << 1) | 0)) {
          $row_081 = $inc60_pre_phi;
          $8 = $29;
          $7 = $28;
          $6 = $27;
          $5 = $26;
        } else {
          break L3209;
        }
      }
    }
  } while (0);
  L3245 : do {
    if ((HEAP32[1315902] | 0) == 0) {
      $47 = HEAP32[1315947] | 0;
      do {
        if (($47 | 0) == 42 | ($47 | 0) == 46) {
          HEAP32[1315904] = 2;
          HEAP32[1315900] = 2;
          HEAP32[1315902] = -2;
          $49 = -2;
          $_pr84 = $47;
          label = 2285;
          break;
        } else {
          if (($47 | 0) == 10 | ($47 | 0) == 26) {
            $49 = 0;
            $_pr84 = $47;
            label = 2285;
            break;
          }
          if (($47 | 0) == 24) {
            if ((_strncmp(5263468, 5579988, 3) | 0) == 0) {
              break L3245;
            } else {
              $49 = 0;
              $_pr84 = 24;
              label = 2285;
              break;
            }
          }
          if (($47 | 0) == 34) {
            $49 = 0;
            $_pr84 = 34;
            label = 2285;
            break;
          }
          if (($47 | 0) != 36) {
            $57 = $47;
            break;
          }
          if ((HEAP32[1315948] & 32 | 0) == 0) {
            break L3245;
          } else {
            $49 = 0;
            $_pr84 = 36;
            label = 2285;
            break;
          }
        }
      } while (0);
      if ((label | 0) == 2285) {
        $conv128 = HEAPU16[2621786] | 0;
        HEAP32[1315903] = $conv128;
        HEAP32[1315899] = $conv128;
        $add131 = (HEAPU16[2699404] | 0) + $conv128 | 0;
        HEAP32[1315905] = $add131;
        HEAP32[1315901] = $add131;
        $conv132 = HEAPU16[2631898] | 0;
        HEAP32[1315902] = $49 + $conv132 | 0;
        HEAP32[1315904] = ((HEAPU16[2621484] | 0) + $conv132 | 0) + (HEAP32[1315904] | 0) | 0;
        HEAP32[1315906] = (HEAP32[1315906] | 0) + (HEAPU16[2622498] | 0) | 0;
        $57 = $_pr84;
      }
      if (($57 | 0) != 66) {
        break;
      }
      HEAP32[1315901] = HEAPU16[2621786] | 0;
      HEAP32[1315902] = HEAPU16[2621484] | 0;
    }
  } while (0);
  _memset($mblack | 0, 0, 32);
  $61 = HEAP32[1356938] | 0;
  $conv167 = HEAPU16[2621786] | 0;
  $conv171 = HEAPU16[2631898] | 0;
  $64 = HEAP16[2622498] | 0;
  $conv178 = $64 & 65535;
  $65 = HEAP32[1311250] | 0;
  $m_058 = 0;
  $zero_059 = 0;
  while (1) {
    $66 = HEAP32[5263596 + ($m_058 << 4) >> 2] | 0;
    $67 = HEAP32[5263604 + ($m_058 << 4) >> 2] | 0;
    L3263 : do {
      if (($66 | 0) < ($67 | 0)) {
        $68 = HEAP32[5263600 + ($m_058 << 4) >> 2] | 0;
        $69 = HEAP32[5263608 + ($m_058 << 4) >> 2] | 0;
        $cmp16451 = ($68 | 0) < ($69 | 0);
        $zero_155 = $zero_059;
        $row_256 = $66;
        while (1) {
          L3267 : do {
            if ($cmp16451) {
              $and170 = $row_256 - $conv167 << 1 & 14;
              $mul179 = Math_imul($conv178, $row_256);
              $col_252 = $68;
              $zero_253 = $zero_155;
              while (1) {
                $and177 = $61 >>> (($and170 | $col_252 - $conv171 & 1) << 1 >>> 0) & 3;
                $70 = HEAP16[$65 + ($mul179 + $col_252 << 1) >> 1] | 0;
                $arrayidx183 = $mblack + ($and177 << 2) | 0;
                HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + ($70 & 65535) | 0;
                $arrayidx186 = $mblack + (($and177 | 4) << 2) | 0;
                HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + 1 | 0;
                $add191 = ($70 << 16 >> 16 == 0 & 1) + $zero_253 | 0;
                $inc193 = $col_252 + 1 | 0;
                if (($inc193 | 0) < ($69 | 0)) {
                  $col_252 = $inc193;
                  $zero_253 = $add191;
                } else {
                  $zero_2_lcssa = $add191;
                  break L3267;
                }
              }
            } else {
              $zero_2_lcssa = $zero_155;
            }
          } while (0);
          $inc196 = $row_256 + 1 | 0;
          if (($inc196 | 0) < ($67 | 0)) {
            $zero_155 = $zero_2_lcssa;
            $row_256 = $inc196;
          } else {
            $zero_1_lcssa = $zero_2_lcssa;
            break L3263;
          }
        }
      } else {
        $zero_1_lcssa = $zero_059;
      }
    } while (0);
    $inc199 = $m_058 + 1 | 0;
    if (($inc199 | 0) == 8) {
      break;
    } else {
      $m_058 = $inc199;
      $zero_059 = $zero_1_lcssa;
    }
  }
  if ((HEAP32[1315947] | 0) == 10 & (HEAPU16[2621484] | 0) < ($64 & 65535)) {
    HEAP32[1390380] = ((((((HEAP32[$mblack + 4 >> 2] | 0) + (HEAP32[$mblack >> 2] | 0) | 0) + (HEAP32[$mblack + 8 >> 2] | 0) | 0) + (HEAP32[$mblack + 12 >> 2] | 0) | 0) >>> 0) / (((((HEAP32[$mblack + 20 >> 2] | 0) + (HEAP32[$mblack + 16 >> 2] | 0) | 0) + (HEAP32[$mblack + 24 >> 2] | 0) | 0) + (HEAP32[$mblack + 28 >> 2] | 0) | 0) >>> 0) >>> 0) - 4 | 0;
    _canon_600_correct();
    STACKTOP = __stackBase__;
    return;
  }
  $83 = HEAP32[$mblack + 16 >> 2] | 0;
  if ($zero_1_lcssa >>> 0 >= $83 >>> 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $84 = HEAP32[$mblack + 20 >> 2] | 0;
  if (($84 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $85 = HEAP32[$mblack + 24 >> 2] | 0;
  if (($85 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $86 = HEAP32[$mblack + 28 >> 2] | 0;
  if (($86 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1390256] = ((HEAP32[$mblack >> 2] | 0) >>> 0) / ($83 >>> 0) >>> 0;
  HEAP32[1390257] = ((HEAP32[$mblack + 4 >> 2] | 0) >>> 0) / ($84 >>> 0) >>> 0;
  HEAP32[1390258] = ((HEAP32[$mblack + 8 >> 2] | 0) >>> 0) / ($85 >>> 0) >>> 0;
  HEAP32[1390259] = ((HEAP32[$mblack + 12 >> 2] | 0) >>> 0) / ($86 >>> 0) >>> 0;
  STACKTOP = __stackBase__;
  return;
}
function _bad_pixels($cfname) {
  $cfname = $cfname | 0;
  var $line = 0, $time = 0, $row = 0, $col = 0, $len_0 = 0, $call3 = 0, $call14 = 0, $arrayidx = 0, $cp_0139 = 0, $call23 = 0, $cp_1 = 0, $incdec_ptr32 = 0, $fp_1 = 0, $fp_2 = 0, $arraydecay = 0, $fixed_0_ph147 = 0, $call47 = 0, $6 = 0, $conv57 = 0, $8 = 0, $conv60 = 0, $12 = 0, $and20_i115 = 0, $conv104 = 0, $conv105 = 0, $15 = 0, $conv_i67 = 0, $conv1_i70 = 0, $arrayidx4_i99 = 0, $arrayidx13_i106 = 0, $tot_0134 = 0, $rad_0133 = 0, $sub74 = 0, $add126 = 0, $sub79 = 0, $add81119 = 0, $cmp82120 = 0, $n_1130 = 0, $tot_1129 = 0, $r_0128 = 0, $cmp86 = 0, $cmp92 = 0, $and16_i = 0, $mul106 = 0, $and3_i72 = 0, $rem11_i79 = 0, $n_2124 = 0, $tot_2123 = 0, $c_0121 = 0, $retval_0_i152 = 0, $retval_0_i117 = 0, $retval_0_i91 = 0, $tot_3 = 0, $n_3 = 0, $inc116 = 0, $n_2_lcssa = 0, $tot_2_lcssa = 0, $inc119 = 0, $n_1_lcssa = 0, $tot_1_lcssa = 0, $inc122 = 0, $conv124 = 0, $retval_0_i65 = 0, $inc137 = 0, $28 = 0, $32 = 0, $fixed_0_ph144 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 140 | 0;
  $line = __stackBase__ | 0;
  $time = __stackBase__ + 128 | 0;
  $row = __stackBase__ + 132 | 0;
  $col = __stackBase__ + 136 | 0;
  if ((HEAP32[1356938] | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  do {
    if (($cfname | 0) == 0) {
      $len_0 = 32;
      while (1) {
        $call3 = _malloc($len_0) | 0;
        if (($call3 | 0) == 0) {
          label = 2365;
          break;
        }
        if ((_getcwd($call3 | 0, $len_0 - 16 | 0) | 0) != 0) {
          label = 2316;
          break;
        }
        _free($call3);
        if ((HEAP32[___errno_location() >> 2] | 0) == 34) {
          $len_0 = $len_0 << 1;
        } else {
          label = 2367;
          break;
        }
      }
      if ((label | 0) == 2365) {
        STACKTOP = __stackBase__;
        return;
      } else if ((label | 0) == 2316) {
        $call14 = _strlen($call3) | 0;
        $arrayidx = $call3 + ($call14 - 1 | 0) | 0;
        L3304 : do {
          if (HEAP8[$call3] << 24 >> 24 == 47) {
            $cp_0139 = HEAP8[$arrayidx] << 24 >> 24 == 47 ? $arrayidx : $call3 + $call14 | 0;
            while (1) {
              _memcpy($cp_0139, 5579684, 12);
              $call23 = _fopen($call3 | 0, 5579848) | 0;
              if (($call23 | 0) != 0 | ($cp_0139 | 0) == ($call3 | 0)) {
                $fp_1 = $call23;
                break L3304;
              } else {
                $cp_1 = $cp_0139;
              }
              while (1) {
                $incdec_ptr32 = $cp_1 - 1 | 0;
                if (HEAP8[$incdec_ptr32] << 24 >> 24 == 47) {
                  break;
                } else {
                  $cp_1 = $incdec_ptr32;
                }
              }
              if (HEAP8[$call3] << 24 >> 24 == 47) {
                $cp_0139 = $incdec_ptr32;
              } else {
                $fp_1 = 0;
                break L3304;
              }
            }
          } else {
            $fp_1 = 0;
          }
        } while (0);
        _free($call3);
        $fp_2 = $fp_1;
        break;
      } else if ((label | 0) == 2367) {
        STACKTOP = __stackBase__;
        return;
      }
    } else {
      $fp_2 = _fopen($cfname | 0, 5579848) | 0;
    }
  } while (0);
  if (($fp_2 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = $line | 0;
  do {
    if ((_fgets($arraydecay | 0, 128, $fp_2 | 0) | 0) != 0) {
      $fixed_0_ph147 = 0;
      L3318 : while (1) {
        L3320 : while (1) {
          $call47 = _strchr($arraydecay | 0, 35) | 0;
          if (($call47 | 0) != 0) {
            HEAP8[$call47] = 0;
          }
          do {
            if ((_sscanf($arraydecay | 0, 5579520, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $col, HEAP32[tempInt + 4 >> 2] = $row, HEAP32[tempInt + 8 >> 2] = $time, tempInt) | 0) | 0) == 3) {
              $6 = HEAP32[$col >> 2] | 0;
              $conv57 = HEAPU16[2621484] | 0;
              if ($6 >>> 0 >= $conv57 >>> 0) {
                break;
              }
              $8 = HEAP32[$row >> 2] | 0;
              $conv60 = HEAPU16[2699404] | 0;
              if ($8 >>> 0 >= $conv60 >>> 0) {
                break;
              }
              if ((HEAP32[$time >> 2] | 0) > (HEAP32[1310894] | 0)) {
                break;
              }
              $12 = HEAP32[1356938] | 0;
              $and20_i115 = $12 >>> (($8 << 1 & 14 | $6 & 1) << 1 >>> 0) & 3;
              $conv104 = HEAPU16[2622460] | 0;
              $conv105 = HEAPU16[2632094] | 0;
              $15 = HEAP32[1316051] | 0;
              $conv_i67 = HEAPU16[2631898] | 0;
              $conv1_i70 = HEAPU16[2621786] | 0;
              $arrayidx4_i99 = ($conv_i67 + $6 & 15) + (5427792 + (($conv1_i70 + $8 & 15) << 4)) | 0;
              $arrayidx13_i106 = ($6 + 6 | 0) % 6 + (5427756 + (($8 + 6 | 0) % 6 * 6 & -1)) | 0;
              $rad_0133 = 1;
              $tot_0134 = 0;
              while (1) {
                $sub74 = $8 - $rad_0133 | 0;
                $add126 = $8 + $rad_0133 | 0;
                L3332 : do {
                  if (($sub74 | 0) > ($add126 | 0)) {
                    $tot_1_lcssa = $tot_0134;
                    $n_1_lcssa = 0;
                  } else {
                    $sub79 = $6 - $rad_0133 | 0;
                    $add81119 = $6 + $rad_0133 | 0;
                    $cmp82120 = ($sub79 | 0) > ($add81119 | 0);
                    $r_0128 = $sub74;
                    $tot_1129 = $tot_0134;
                    $n_1130 = 0;
                    while (1) {
                      L3336 : do {
                        if ($cmp82120) {
                          $tot_2_lcssa = $tot_1129;
                          $n_2_lcssa = $n_1130;
                        } else {
                          $cmp86 = $r_0128 >>> 0 < $conv60 >>> 0;
                          $cmp92 = ($r_0128 | 0) == ($8 | 0);
                          $and16_i = $r_0128 << 1 & 14;
                          $mul106 = Math_imul($r_0128 >> $conv104, $conv105);
                          $and3_i72 = $conv1_i70 + $r_0128 & 15;
                          $rem11_i79 = ($r_0128 + 6 | 0) % 6;
                          $c_0121 = $sub79;
                          $tot_2123 = $tot_1129;
                          $n_2124 = $n_1130;
                          while (1) {
                            do {
                              if ($cmp86 & $c_0121 >>> 0 < $conv57 >>> 0) {
                                if ($cmp92 & ($c_0121 | 0) == ($6 | 0)) {
                                  $n_3 = $n_2124;
                                  $tot_3 = $tot_2123;
                                  break;
                                }
                                if (($12 | 0) == 1) {
                                  $retval_0_i117 = HEAP8[$arrayidx4_i99] << 24 >> 24;
                                  $retval_0_i152 = HEAP8[($conv_i67 + $c_0121 & 15) + (5427792 + ($and3_i72 << 4)) | 0] << 24 >> 24;
                                } else if (($12 | 0) == 2) {
                                  $retval_0_i117 = HEAP8[$arrayidx13_i106] << 24 >> 24;
                                  $retval_0_i152 = HEAP8[($c_0121 + 6 | 0) % 6 + (5427756 + ($rem11_i79 * 6 & -1)) | 0] << 24 >> 24;
                                } else {
                                  $retval_0_i117 = $and20_i115;
                                  $retval_0_i152 = $12 >>> (($c_0121 & 1 | $and16_i) << 1 >>> 0) & 3;
                                }
                                if (($retval_0_i152 | 0) != ($retval_0_i117 | 0)) {
                                  $n_3 = $n_2124;
                                  $tot_3 = $tot_2123;
                                  break;
                                }
                                if (($12 | 0) == 1) {
                                  $retval_0_i91 = HEAP8[($conv_i67 + $c_0121 & 15) + (5427792 + ($and3_i72 << 4)) | 0] << 24 >> 24;
                                } else if (($12 | 0) == 2) {
                                  $retval_0_i91 = HEAP8[($c_0121 + 6 | 0) % 6 + (5427756 + ($rem11_i79 * 6 & -1)) | 0] << 24 >> 24;
                                } else {
                                  $retval_0_i91 = $12 >>> (($c_0121 & 1 | $and16_i) << 1 >>> 0) & 3;
                                }
                                $n_3 = $n_2124 + 1 | 0;
                                $tot_3 = (HEAPU16[$15 + ($mul106 + ($c_0121 >> $conv104) << 3) + ($retval_0_i91 << 1) >> 1] | 0) + $tot_2123 | 0;
                              } else {
                                $n_3 = $n_2124;
                                $tot_3 = $tot_2123;
                              }
                            } while (0);
                            $inc116 = $c_0121 + 1 | 0;
                            if (($inc116 | 0) > ($add81119 | 0)) {
                              $tot_2_lcssa = $tot_3;
                              $n_2_lcssa = $n_3;
                              break L3336;
                            } else {
                              $c_0121 = $inc116;
                              $tot_2123 = $tot_3;
                              $n_2124 = $n_3;
                            }
                          }
                        }
                      } while (0);
                      $inc119 = $r_0128 + 1 | 0;
                      if (($inc119 | 0) > ($add126 | 0)) {
                        $tot_1_lcssa = $tot_2_lcssa;
                        $n_1_lcssa = $n_2_lcssa;
                        break L3332;
                      } else {
                        $r_0128 = $inc119;
                        $tot_1129 = $tot_2_lcssa;
                        $n_1130 = $n_2_lcssa;
                      }
                    }
                  }
                } while (0);
                $inc122 = $rad_0133 + 1 | 0;
                if (($inc122 | 0) < 3 & ($n_1_lcssa | 0) == 0) {
                  $rad_0133 = $inc122;
                  $tot_0134 = $tot_1_lcssa;
                } else {
                  break;
                }
              }
              $conv124 = ($tot_1_lcssa | 0) / ($n_1_lcssa | 0) & -1 & 65535;
              if (($12 | 0) == 1) {
                $retval_0_i65 = HEAP8[$arrayidx4_i99] << 24 >> 24;
              } else if (($12 | 0) == 2) {
                $retval_0_i65 = HEAP8[$arrayidx13_i106] << 24 >> 24;
              } else {
                $retval_0_i65 = $and20_i115;
              }
              HEAP16[$15 + (Math_imul($8 >> $conv104, $conv105) + ($6 >> $conv104) << 3) + ($retval_0_i65 << 1) >> 1] = $conv124;
              if ((HEAP32[1310884] | 0) != 0) {
                break L3320;
              }
            }
          } while (0);
          if ((_fgets($arraydecay | 0, 128, $fp_2 | 0) | 0) == 0) {
            $fixed_0_ph144 = $fixed_0_ph147;
            break L3318;
          }
        }
        $inc137 = $fixed_0_ph147 + 1 | 0;
        if (($fixed_0_ph147 | 0) == 0) {
          $28 = HEAP32[_stderr >> 2] | 0;
          _fwrite(5579356, 21, 1, $28 | 0);
        }
        $32 = HEAP32[$row >> 2] | 0;
        _fprintf(HEAP32[_stderr >> 2] | 0, 5579240, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$col >> 2] | 0, HEAP32[tempInt + 4 >> 2] = $32, tempInt) | 0);
        if ((_fgets($arraydecay | 0, 128, $fp_2 | 0) | 0) == 0) {
          $fixed_0_ph144 = $inc137;
          break;
        } else {
          $fixed_0_ph147 = $inc137;
        }
      }
      if (($fixed_0_ph144 | 0) == 0) {
        break;
      }
      _fputc(10, HEAP32[_stderr >> 2] | 0);
    }
  } while (0);
  _fclose($fp_2 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _gamma_curve($pwr, $ts, $mode, $imax) {
  $pwr = +$pwr;
  $ts = +$ts;
  $mode = $mode | 0;
  $imax = $imax | 0;
  var $bnd = 0, $0 = 0, $arrayidx6 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $tobool19 = 0, $sub26 = 0.0, $i_055 = 0, $1 = 0.0, $div = 0.0, $arrayidx35 = 0, $arrayidx45 = 0, $inc = 0, $div48 = 0.0, $g_sroa_4_0 = 0.0, $g_sroa_3_0 = 0.0, $g_sroa_2_1 = 0.0, $tobool62 = 0, $div69 = 0.0, $add77 = 0.0, $add85_pn = 0.0, $conv122 = 0.0, $tobool127 = 0, $add164 = 0.0, $div167 = 0.0, $g_sroa_5_0 = 0.0, $i_154 = 0, $arrayidx120 = 0, $div123 = 0.0, $cond178 = 0.0, $inc184 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $bnd = __stackBase__ | 0;
  $0 = $bnd;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $arrayidx6 = $bnd + (($ts >= 1.0 & 1) << 3) | 0;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[$arrayidx6 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  do {
    if ($ts != 0.0) {
      if (($pwr + -1.0) * ($ts + -1.0) > 0.0) {
        $g_sroa_2_1 = 0.0;
        $g_sroa_3_0 = 0.0;
        $g_sroa_4_0 = 0.0;
        break;
      }
      $arrayidx15 = $bnd | 0;
      $arrayidx16 = $bnd + 8 | 0;
      $tobool19 = $pwr != 0.0;
      $sub26 = 0.0 - $pwr;
      $i_055 = 0;
      while (1) {
        $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx15 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx15 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $div = ($1 + (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3])) * .5;
        if ($tobool19) {
          $arrayidx35 = $bnd + (((+Math_pow($div / $ts, $sub26) + -1.0) / $pwr - 1.0 / $div > -1.0 & 1) << 3) | 0;
          HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx35 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx35 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        } else {
          $arrayidx45 = $bnd + (($div / +Math_exp(1.0 - 1.0 / $div) < $ts & 1) << 3) | 0;
          HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx45 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx45 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        }
        $inc = $i_055 + 1 | 0;
        if (($inc | 0) == 48) {
          break;
        } else {
          $i_055 = $inc;
        }
      }
      $div48 = $div / $ts;
      if (!$tobool19) {
        $g_sroa_2_1 = $div;
        $g_sroa_3_0 = $div48;
        $g_sroa_4_0 = 0.0;
        break;
      }
      $g_sroa_2_1 = $div;
      $g_sroa_3_0 = $div48;
      $g_sroa_4_0 = $div * (1.0 / $pwr + -1.0);
    } else {
      $g_sroa_2_1 = 0.0;
      $g_sroa_3_0 = 0.0;
      $g_sroa_4_0 = 0.0;
    }
  } while (0);
  $tobool62 = $pwr != 0.0;
  $div69 = $g_sroa_3_0 * $g_sroa_3_0 * $ts * .5;
  if ($tobool62) {
    $add77 = $pwr + 1.0;
    $add85_pn = $div69 - $g_sroa_4_0 * (1.0 - $g_sroa_3_0) + ($g_sroa_4_0 + 1.0) * (1.0 - +Math_pow($g_sroa_3_0, $add77)) / $add77;
  } else {
    $add85_pn = $div69 + 1.0 - $g_sroa_2_1 - $g_sroa_3_0 - $g_sroa_3_0 * $g_sroa_2_1 * (+Math_log($g_sroa_3_0) + -1.0);
  }
  if (($mode | 0) == 0) {
    $g_sroa_5_0 = 1.0 / $add85_pn + -1.0;
    HEAPF64[tempDoublePtr >> 3] = $pwr, HEAP32[1349743] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398976 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $ts, HEAP32[1349745] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398984 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_2_1, HEAP32[1349747] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398992 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_3_0, HEAP32[1349749] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5399e3 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_4_0, HEAP32[1349751] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5399008 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_5_0, HEAP32[1349753] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5399016 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    STACKTOP = __stackBase__;
    return;
  }
  $conv122 = +($imax | 0);
  $tobool127 = ($mode | 0) == 1;
  $add164 = $g_sroa_4_0 + 1.0;
  $div167 = 1.0 / $pwr;
  $i_154 = 0;
  while (1) {
    $arrayidx120 = 5428620 + ($i_154 << 1) | 0;
    HEAP16[$arrayidx120 >> 1] = -1;
    $div123 = +($i_154 | 0) / $conv122;
    if ($div123 < 1.0) {
      do {
        if ($tobool127) {
          if ($div123 < $g_sroa_2_1) {
            $cond178 = $div123 / $ts;
            break;
          }
          if ($tobool62) {
            $cond178 = +Math_pow(($g_sroa_4_0 + $div123) / $add164, $div167);
            break;
          } else {
            $cond178 = +Math_exp(($div123 + -1.0) / $g_sroa_2_1);
            break;
          }
        } else {
          if ($div123 < $g_sroa_3_0) {
            $cond178 = $div123 * $ts;
            break;
          }
          if ($tobool62) {
            $cond178 = $add164 * +Math_pow($div123, $pwr) - $g_sroa_4_0;
            break;
          } else {
            $cond178 = $g_sroa_2_1 * +Math_log($div123) + 1.0;
            break;
          }
        }
      } while (0);
      HEAP16[$arrayidx120 >> 1] = ~~($cond178 * 65536.0);
    }
    $inc184 = $i_154 + 1 | 0;
    if (($inc184 | 0) == 65536) {
      break;
    } else {
      $i_154 = $inc184;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _subtract($fname) {
  $fname = $fname | 0;
  var $dim = 0, $0 = 0, $call = 0, $error_0_ph52 = 0, $nd_0_ph = 0, $number_0_ph = 0, $tobool6 = 0, $cmp7 = 0, $or_cond = 0, $arrayidx = 0, $number_0_ph54 = 0, $comment_0 = 0, $call8 = 0, $comment_1 = 0, $_comment_1 = 0, $isdigittmp = 0, $isdigit = 0, $number_0_ = 0, $tobool30 = 0, $4 = 0, $5 = 0, $_mul_i = 0, $call_i = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $row_051 = 0, $and = 0, $col_048 = 0, $shl74 = 0, $and75 = 0, $conv76 = 0, $add82 = 0, $conv85 = 0, $arrayidx86 = 0, $and98 = 0, $conv99 = 0, $add105 = 0, $conv108 = 0, $cond = 0, $and120 = 0, $conv121 = 0, $add127 = 0, $inc130 = 0, $34 = 0, $35 = 0, $inc132 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $dim = __stackBase__ | 0;
  $0 = $dim;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $call = _fopen($fname | 0, 5579128) | 0;
  if (($call | 0) == 0) {
    _perror($fname | 0);
    STACKTOP = __stackBase__;
    return;
  }
  do {
    if ((_fgetc($call | 0) | 0) == 80) {
      if ((_fgetc($call | 0) | 0) == 53) {
        $number_0_ph = 0;
        $nd_0_ph = 0;
        $error_0_ph52 = 0;
        break;
      } else {
        label = 2404;
        break;
      }
    } else {
      label = 2404;
    }
  } while (0);
  do {
    if ((label | 0) == 2404) {
      $number_0_ph = 0;
      $nd_0_ph = 0;
      $error_0_ph52 = 1;
      break;
    }
  } while (0);
  L3423 : while (1) {
    $tobool6 = ($error_0_ph52 | 0) != 0;
    $cmp7 = ($nd_0_ph | 0) < 3;
    $or_cond = $cmp7 & ($tobool6 ^ 1);
    $arrayidx = $dim + ($nd_0_ph << 2) | 0;
    $number_0_ph54 = $number_0_ph;
    while (1) {
      $comment_0 = 0;
      while (1) {
        if (!$or_cond) {
          label = 2415;
          break L3423;
        }
        $call8 = _fgetc($call | 0) | 0;
        if (($call8 | 0) == 35) {
          $comment_1 = 1;
        } else if (($call8 | 0) == (-1 | 0)) {
          break L3423;
        } else {
          $comment_1 = $comment_0;
        }
        $_comment_1 = ($call8 | 0) == 10 ? 0 : $comment_1;
        if (($_comment_1 | 0) == 0) {
          break;
        } else {
          $comment_0 = $_comment_1;
        }
      }
      $isdigittmp = $call8 - 48 | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      $number_0_ = $isdigit ? 1 : $number_0_ph54;
      if (($number_0_ | 0) == 0) {
        $number_0_ph54 = 0;
        continue;
      }
      if (!$isdigit) {
        break;
      }
      HEAP32[$arrayidx >> 2] = $isdigittmp + ((HEAP32[$arrayidx >> 2] | 0) * 10 & -1) | 0;
      $number_0_ph54 = $number_0_;
    }
    $tobool30 = (_isspace($call8 | 0) | 0) == 0;
    $number_0_ph = $tobool30 ? $number_0_ : 0;
    $nd_0_ph = ($tobool30 & 1 ^ 1) + $nd_0_ph | 0;
    $error_0_ph52 = $tobool30 ? 1 : $error_0_ph52;
  }
  do {
    if ((label | 0) == 2415) {
      if ($tobool6 | $cmp7) {
        break;
      }
      $4 = HEAP32[$dim >> 2] | 0;
      $5 = HEAP16[2621484] | 0;
      do {
        if (($4 | 0) == ($5 & 65535 | 0)) {
          if ((HEAP32[$dim + 4 >> 2] | 0) != (HEAPU16[2699404] | 0 | 0)) {
            break;
          }
          if ((HEAP32[$dim + 8 >> 2] | 0) != 65535) {
            break;
          }
          $_mul_i = $5 << 16 >> 16 == 0 ? 0 : $4 << 1;
          $call_i = _malloc($_mul_i) | 0;
          if (($call_i | 0) == 0) {
            $12 = HEAP32[_stderr >> 2] | 0;
            $13 = HEAP32[1316054] | 0;
            _fprintf($12 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = 5578764, tempInt) | 0);
            _longjmp(5428048, 1);
          }
          if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
            _memset($call_i | 0, 0, $_mul_i | 0);
          }
          $14 = $call_i;
          L3450 : do {
            if (HEAP16[2699404] << 16 >> 16 != 0) {
              $row_051 = 0;
              $16 = HEAP16[2621484] | 0;
              while (1) {
                _fread($call_i | 0, 2, $16 & 65535 | 0, $call | 0);
                L3454 : do {
                  if (HEAP16[2621484] << 16 >> 16 == 0) {
                    $35 = 0;
                  } else {
                    $and = $row_051 << 1 & 14;
                    $col_048 = 0;
                    while (1) {
                      $shl74 = ($col_048 & 1 | $and) << 1;
                      $and75 = (HEAP32[1356938] | 0) >>> ($shl74 >>> 0) & 3;
                      $conv76 = HEAPU16[2622460] | 0;
                      $add82 = Math_imul($row_051 >> $conv76, HEAPU16[2632094] | 0) + ($col_048 >> $conv76) | 0;
                      $conv85 = HEAPU16[(HEAP32[1316051] | 0) + ($add82 << 3) + ($and75 << 1) >> 1] | 0;
                      $arrayidx86 = $14 + ($col_048 << 1) | 0;
                      if (($conv85 - (_htons(HEAPU16[$arrayidx86 >> 1] | 0 | 0) | 0) | 0) > 0) {
                        $and98 = (HEAP32[1356938] | 0) >>> ($shl74 >>> 0) & 3;
                        $conv99 = HEAPU16[2622460] | 0;
                        $add105 = Math_imul($row_051 >> $conv99, HEAPU16[2632094] | 0) + ($col_048 >> $conv99) | 0;
                        $conv108 = HEAPU16[(HEAP32[1316051] | 0) + ($add105 << 3) + ($and98 << 1) >> 1] | 0;
                        $cond = $conv108 - (_htons(HEAPU16[$arrayidx86 >> 1] | 0 | 0) | 0) & 65535;
                      } else {
                        $cond = 0;
                      }
                      $and120 = (HEAP32[1356938] | 0) >>> ($shl74 >>> 0) & 3;
                      $conv121 = HEAPU16[2622460] | 0;
                      $add127 = Math_imul($row_051 >> $conv121, HEAPU16[2632094] | 0) + ($col_048 >> $conv121) | 0;
                      HEAP16[(HEAP32[1316051] | 0) + ($add127 << 3) + ($and120 << 1) >> 1] = $cond;
                      $inc130 = $col_048 + 1 | 0;
                      $34 = HEAP16[2621484] | 0;
                      if (($inc130 | 0) < ($34 & 65535 | 0)) {
                        $col_048 = $inc130;
                      } else {
                        $35 = $34;
                        break L3454;
                      }
                    }
                  }
                } while (0);
                $inc132 = $row_051 + 1 | 0;
                if (($inc132 | 0) < (HEAPU16[2699404] | 0 | 0)) {
                  $row_051 = $inc132;
                  $16 = $35;
                } else {
                  break L3450;
                }
              }
            }
          } while (0);
          _free($call_i);
          _fclose($call | 0);
          HEAP32[1390256] = 0;
          HEAP32[1390257] = 0;
          HEAP32[1390258] = 0;
          HEAP32[1390259] = 0;
          HEAP32[1390380] = 0;
          STACKTOP = __stackBase__;
          return;
        }
      } while (0);
      _fprintf(HEAP32[_stderr >> 2] | 0, 5578880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt) | 0);
      _fclose($call | 0);
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2] | 0, 5579e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt) | 0);
  _fclose($call | 0);
  STACKTOP = __stackBase__;
  return;
}
function _hat_transform($temp, $base, $st, $size, $sc) {
  $temp = $temp | 0;
  $base = $base | 0;
  $st = $st | 0;
  $size = $size | 0;
  $sc = $sc | 0;
  var $i_0_lcssa = 0, $add1047 = 0, $0 = 0, $i_052 = 0, $mul1 = 0.0, $add = 0.0, $inc = 0, $i_1_lcssa = 0, $sub39 = 0, $add1050 = 0, $i_149 = 0, $mul15 = 0.0, $add19 = 0.0, $inc26 = 0, $i_246 = 0, $mul33 = 0.0, $add37 = 0.0, $inc47 = 0;
  L3469 : do {
    if (($sc | 0) > 0) {
      $i_052 = 0;
      while (1) {
        $mul1 = +HEAPF32[$base + (Math_imul($i_052, $st) << 2) >> 2] * 2.0;
        $add = $mul1 + +HEAPF32[$base + (Math_imul($sc - $i_052 | 0, $st) << 2) >> 2];
        HEAPF32[$temp + ($i_052 << 2) >> 2] = $add + +HEAPF32[$base + (Math_imul($i_052 + $sc | 0, $st) << 2) >> 2];
        $inc = $i_052 + 1 | 0;
        if (($inc | 0) == ($sc | 0)) {
          $i_0_lcssa = $sc;
          break L3469;
        } else {
          $i_052 = $inc;
        }
      }
    } else {
      $i_0_lcssa = 0;
    }
  } while (0);
  $add1047 = $i_0_lcssa + $sc | 0;
  L3473 : do {
    if (($add1047 | 0) < ($size | 0)) {
      $0 = $size - $sc | 0;
      $i_149 = $i_0_lcssa;
      $add1050 = $add1047;
      while (1) {
        $mul15 = +HEAPF32[$base + (Math_imul($i_149, $st) << 2) >> 2] * 2.0;
        $add19 = $mul15 + +HEAPF32[$base + (Math_imul($i_149 - $sc | 0, $st) << 2) >> 2];
        HEAPF32[$temp + ($i_149 << 2) >> 2] = $add19 + +HEAPF32[$base + (Math_imul($add1050, $st) << 2) >> 2];
        $inc26 = $i_149 + 1 | 0;
        if (($inc26 | 0) == ($0 | 0)) {
          $i_1_lcssa = $0;
          break L3473;
        } else {
          $i_149 = $inc26;
          $add1050 = $inc26 + $sc | 0;
        }
      }
    } else {
      $i_1_lcssa = $i_0_lcssa;
    }
  } while (0);
  if (($i_1_lcssa | 0) >= ($size | 0)) {
    return;
  }
  $sub39 = (($size << 1) - 2 | 0) - $sc | 0;
  $i_246 = $i_1_lcssa;
  while (1) {
    $mul33 = +HEAPF32[$base + (Math_imul($i_246, $st) << 2) >> 2] * 2.0;
    $add37 = $mul33 + +HEAPF32[$base + (Math_imul($i_246 - $sc | 0, $st) << 2) >> 2];
    HEAPF32[$temp + ($i_246 << 2) >> 2] = $add37 + +HEAPF32[$base + (Math_imul($sub39 - $i_246 | 0, $st) << 2) >> 2];
    $inc47 = $i_246 + 1 | 0;
    if (($inc47 | 0) == ($size | 0)) {
      break;
    } else {
      $i_246 = $inc47;
    }
  }
  return;
}
function _pseudoinverse($in, $out, $size) {
  $in = $in | 0;
  $out = $out | 0;
  $size = $size | 0;
  var $work = 0, $cmp1265 = 0, $i_068 = 0, $add = 0, $arrayidx6 = 0, $arrayidx6_1 = 0, $arrayidx6_2 = 0, $conv5_3 = 0.0, $arrayidx6_3 = 0, $0 = 0, $conv5_4 = 0.0, $arrayidx6_4 = 0, $conv5_5 = 0.0, $arrayidx6_5 = 0, $1 = 0.0, $k_066 = 0, $arrayidx16 = 0, $2 = 0.0, $arrayidx18 = 0, $add21 = 0.0, $inc23 = 0, $arrayidx88_274 = 0, $arrayidx88_phi_trans_insert = 0, $_pre = 0.0, $arrayidx88_1_phi_trans_insert = 0, $_pre86 = 0.0, $arrayidx88_2_phi_trans_insert = 0, $_pre87 = 0.0, $arrayidx88_170_phi_trans_insert = 0, $_pre88 = 0.0, $arrayidx88_1_1_phi_trans_insert = 0, $_pre89 = 0.0, $arrayidx88_2_1_phi_trans_insert = 0, $_pre90 = 0.0, $_pre91 = 0.0, $arrayidx88_1_2_phi_trans_insert = 0, $_pre92 = 0.0, $arrayidx88_2_2_phi_trans_insert = 0, $_pre93 = 0.0, $i_163 = 0, $arrayidx36 = 0, $4 = 0.0, $arrayidx42 = 0, $div = 0.0, $arrayidx42_1 = 0, $div_1 = 0.0, $arrayidx42_2 = 0, $div_2 = 0.0, $arrayidx42_3 = 0, $div_3 = 0.0, $arrayidx42_4 = 0, $div_4 = 0.0, $arrayidx42_5 = 0, $div_5 = 0.0, $k_161 = 0, $arrayidx53 = 0, $11 = 0.0, $mul60 = 0.0, $arrayidx62 = 0, $sub = 0.0, $mul60_1 = 0.0, $arrayidx62_1 = 0, $sub_1 = 0.0, $mul60_2 = 0.0, $arrayidx62_2 = 0, $sub_2 = 0.0, $mul60_3 = 0.0, $arrayidx62_3 = 0, $sub_3 = 0.0, $mul60_4 = 0.0, $arrayidx62_4 = 0, $sub_4 = 0.0, $mul60_5 = 0.0, $arrayidx62_5 = 0, $sub_5 = 0.0, $inc67 = 0, $inc70 = 0, $i_258 = 0, $arrayidx81 = 0, $arrayidx90 = 0, $add94 = 0.0, $arrayidx90_1 = 0, $add94_1 = 0.0, $arrayidx90_2 = 0, $add94_2 = 0.0, $arrayidx81_1 = 0, $add94_173 = 0.0, $add94_1_1 = 0.0, $add94_2_1 = 0.0, $arrayidx81_2 = 0, $add94_277 = 0.0, $add94_1_2 = 0.0, $add94_2_2 = 0.0, $inc102 = 0, $33 = 0.0, $k_066_1 = 0, $arrayidx16_1 = 0, $34 = 0.0, $arrayidx18_1 = 0, $add21_1 = 0.0, $inc23_1 = 0, $36 = 0.0, $k_066_2 = 0, $arrayidx16_2 = 0, $37 = 0.0, $arrayidx18_2 = 0, $add21_2 = 0.0, $inc23_2 = 0, $inc29 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  $work = __stackBase__ | 0;
  $cmp1265 = ($size | 0) > 0;
  $i_068 = 0;
  while (1) {
    $add = $i_068 + 3 | 0;
    $arrayidx6 = $work + ($i_068 * 48 & -1) | 0;
    $arrayidx6_1 = $work + ($i_068 * 48 & -1) + 8 | 0;
    $arrayidx6_2 = $work + ($i_068 * 48 & -1) + 16 | 0;
    $conv5_3 = +(($i_068 | 0) == 0 & 1 | 0);
    $arrayidx6_3 = $work + ($i_068 * 48 & -1) + 24 | 0;
    $0 = $arrayidx6;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_3, HEAP32[$arrayidx6_3 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $conv5_4 = +(($add | 0) == 4 & 1 | 0);
    $arrayidx6_4 = $work + ($i_068 * 48 & -1) + 32 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_4, HEAP32[$arrayidx6_4 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $conv5_5 = +(($add | 0) == 5 & 1 | 0);
    $arrayidx6_5 = $work + ($i_068 * 48 & -1) + 40 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_5, HEAP32[$arrayidx6_5 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    do {
      if ($cmp1265) {
        $k_066 = 0;
        $1 = 0.0;
        while (1) {
          $arrayidx16 = $in + ($k_066 * 24 & -1) + ($i_068 << 3) | 0;
          $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $arrayidx18 = $in + ($k_066 * 24 & -1) | 0;
          $add21 = $1 + $2 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $inc23 = $k_066 + 1 | 0;
          if (($inc23 | 0) == ($size | 0)) {
            break;
          } else {
            $k_066 = $inc23;
            $1 = $add21;
          }
        }
        HEAPF64[tempDoublePtr >> 3] = $add21, HEAP32[$arrayidx6 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        if ($cmp1265) {
          $k_066_1 = 0;
          $33 = 0.0;
        } else {
          break;
        }
        while (1) {
          $arrayidx16_1 = $in + ($k_066_1 * 24 & -1) + ($i_068 << 3) | 0;
          $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $arrayidx18_1 = $in + ($k_066_1 * 24 & -1) + 8 | 0;
          $add21_1 = $33 + $34 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $inc23_1 = $k_066_1 + 1 | 0;
          if (($inc23_1 | 0) == ($size | 0)) {
            break;
          } else {
            $k_066_1 = $inc23_1;
            $33 = $add21_1;
          }
        }
        HEAPF64[tempDoublePtr >> 3] = $add21_1, HEAP32[$arrayidx6_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        if ($cmp1265) {
          $k_066_2 = 0;
          $36 = 0.0;
        } else {
          break;
        }
        while (1) {
          $arrayidx16_2 = $in + ($k_066_2 * 24 & -1) + ($i_068 << 3) | 0;
          $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $arrayidx18_2 = $in + ($k_066_2 * 24 & -1) + 16 | 0;
          $add21_2 = $36 + $37 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $inc23_2 = $k_066_2 + 1 | 0;
          if (($inc23_2 | 0) == ($size | 0)) {
            break;
          } else {
            $k_066_2 = $inc23_2;
            $36 = $add21_2;
          }
        }
        HEAPF64[tempDoublePtr >> 3] = $add21_2, HEAP32[$arrayidx6_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx6_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      }
    } while (0);
    $inc29 = $i_068 + 1 | 0;
    if (($inc29 | 0) == 3) {
      $i_163 = 0;
      break;
    } else {
      $i_068 = $inc29;
    }
  }
  while (1) {
    $arrayidx36 = $work + ($i_163 * 48 & -1) + ($i_163 << 3) | 0;
    $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx36 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx36 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $arrayidx42 = $work + ($i_163 * 48 & -1) | 0;
    $div = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx42 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx42_1 = $work + ($i_163 * 48 & -1) + 8 | 0;
    $div_1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx42_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx42_2 = $work + ($i_163 * 48 & -1) + 16 | 0;
    $div_2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx42_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx42_3 = $work + ($i_163 * 48 & -1) + 24 | 0;
    $div_3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_3 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_3 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div_3, HEAP32[$arrayidx42_3 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx42_4 = $work + ($i_163 * 48 & -1) + 32 | 0;
    $div_4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_4 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_4 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div_4, HEAP32[$arrayidx42_4 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx42_5 = $work + ($i_163 * 48 & -1) + 40 | 0;
    $div_5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_5 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_5 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) / $4;
    HEAPF64[tempDoublePtr >> 3] = $div_5, HEAP32[$arrayidx42_5 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx42_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $k_161 = 0;
    while (1) {
      if (($k_161 | 0) != ($i_163 | 0)) {
        $arrayidx53 = $work + ($k_161 * 48 & -1) + ($i_163 << 3) | 0;
        $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx53 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx53 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $mul60 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62 = $work + ($k_161 * 48 & -1) | 0;
        $sub = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60;
        HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$arrayidx62 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $mul60_1 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62_1 = $work + ($k_161 * 48 & -1) + 8 | 0;
        $sub_1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60_1;
        HEAPF64[tempDoublePtr >> 3] = $sub_1, HEAP32[$arrayidx62_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $mul60_2 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62_2 = $work + ($k_161 * 48 & -1) + 16 | 0;
        $sub_2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60_2;
        HEAPF64[tempDoublePtr >> 3] = $sub_2, HEAP32[$arrayidx62_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $mul60_3 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_3 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_3 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62_3 = $work + ($k_161 * 48 & -1) + 24 | 0;
        $sub_3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_3 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_3 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60_3;
        HEAPF64[tempDoublePtr >> 3] = $sub_3, HEAP32[$arrayidx62_3 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $mul60_4 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_4 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_4 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62_4 = $work + ($k_161 * 48 & -1) + 32 | 0;
        $sub_4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_4 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_4 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60_4;
        HEAPF64[tempDoublePtr >> 3] = $sub_4, HEAP32[$arrayidx62_4 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $mul60_5 = $11 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_5 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_5 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx62_5 = $work + ($k_161 * 48 & -1) + 40 | 0;
        $sub_5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_5 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_5 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) - $mul60_5;
        HEAPF64[tempDoublePtr >> 3] = $sub_5, HEAP32[$arrayidx62_5 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx62_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      }
      $inc67 = $k_161 + 1 | 0;
      if (($inc67 | 0) == 3) {
        break;
      } else {
        $k_161 = $inc67;
      }
    }
    $inc70 = $i_163 + 1 | 0;
    if (($inc70 | 0) == 3) {
      break;
    } else {
      $i_163 = $inc70;
    }
  }
  if (!$cmp1265) {
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx88_274 = $work + 120 | 0;
  $arrayidx88_phi_trans_insert = $work + 24 | 0;
  $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_1_phi_trans_insert = $work + 32 | 0;
  $_pre86 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_2_phi_trans_insert = $work + 40 | 0;
  $_pre87 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_170_phi_trans_insert = $work + 72 | 0;
  $_pre88 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_170_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_170_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_1_1_phi_trans_insert = $work + 80 | 0;
  $_pre89 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_2_1_phi_trans_insert = $work + 88 | 0;
  $_pre90 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $_pre91 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_274 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_274 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_1_2_phi_trans_insert = $work + 128 | 0;
  $_pre92 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx88_2_2_phi_trans_insert = $work + 136 | 0;
  $_pre93 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $i_258 = 0;
  while (1) {
    $arrayidx81 = $out + ($i_258 * 24 & -1) | 0;
    HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx90 = $in + ($i_258 * 24 & -1) | 0;
    $add94 = $_pre * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + 0.0;
    HEAPF64[tempDoublePtr >> 3] = $add94, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx90_1 = $in + ($i_258 * 24 & -1) + 8 | 0;
    $add94_1 = $add94 + $_pre86 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_1, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx90_2 = $in + ($i_258 * 24 & -1) + 16 | 0;
    $add94_2 = $add94_1 + $_pre87 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_2, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx81_1 = $out + ($i_258 * 24 & -1) + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_173 = $_pre88 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + 0.0;
    HEAPF64[tempDoublePtr >> 3] = $add94_173, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_1_1 = $add94_173 + $_pre89 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_1_1, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_2_1 = $add94_1_1 + $_pre90 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_2_1, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $arrayidx81_2 = $out + ($i_258 * 24 & -1) + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_277 = $_pre91 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + 0.0;
    HEAPF64[tempDoublePtr >> 3] = $add94_277, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_1_2 = $add94_277 + $_pre92 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_1_2, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $add94_2_2 = $add94_1_2 + $_pre93 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    HEAPF64[tempDoublePtr >> 3] = $add94_2_2, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $inc102 = $i_258 + 1 | 0;
    if (($inc102 | 0) == ($size | 0)) {
      break;
    } else {
      $i_258 = $inc102;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _cam_xyz_coeff($cam_xyz) {
  $cam_xyz = $cam_xyz | 0;
  var $cam_rgb = 0, $inverse = 0, $0 = 0, $cmp43 = 0, $i_044 = 0, $arrayidx9 = 0, $arrayidx4 = 0, $1 = 0.0, $arrayidx9_1 = 0, $2 = 0.0, $arrayidx9_2 = 0, $3 = 0.0, $add_2 = 0.0, $arrayidx4_1 = 0, $add_2_1 = 0.0, $arrayidx4_2 = 0, $add_2_2 = 0.0, $inc18 = 0, $i_139 = 0, $arrayidx27 = 0, $4 = 0.0, $arrayidx27_1 = 0, $5 = 0.0, $arrayidx27_2 = 0, $6 = 0.0, $add28_2 = 0.0, $div = 0.0, $div_1 = 0.0, $div_2 = 0.0, $inc43 = 0, $7 = 0, $cmp5131 = 0, $j_332 = 0, $arrayidx55 = 0, $inc60 = 0, $j_332_1 = 0, $arrayidx55_1 = 0, $inc60_1 = 0, $j_332_2 = 0, $arrayidx55_2 = 0, $inc60_2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 192 | 0;
  $cam_rgb = __stackBase__ | 0;
  $inverse = __stackBase__ + 96 | 0;
  $0 = HEAP32[1390240] | 0;
  $cmp43 = ($0 | 0) > 0;
  L3514 : do {
    if ($cmp43) {
      $i_044 = 0;
      while (1) {
        $arrayidx9 = $cam_xyz + ($i_044 * 24 & -1) | 0;
        $arrayidx4 = $cam_rgb + ($i_044 * 24 & -1) | 0;
        $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx9_1 = $cam_xyz + ($i_044 * 24 & -1) + 8 | 0;
        $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx9_2 = $cam_xyz + ($i_044 * 24 & -1) + 16 | 0;
        $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $add_2 = $1 * .412453 + 0.0 + $2 * .212671 + $3 * .019334;
        HEAPF64[tempDoublePtr >> 3] = $add_2, HEAP32[$arrayidx4 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $arrayidx4_1 = $cam_rgb + ($i_044 * 24 & -1) + 8 | 0;
        $add_2_1 = $1 * .35758 + 0.0 + $2 * .71516 + $3 * .119193;
        HEAPF64[tempDoublePtr >> 3] = $add_2_1, HEAP32[$arrayidx4_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx4_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $arrayidx4_2 = $cam_rgb + ($i_044 * 24 & -1) + 16 | 0;
        $add_2_2 = $1 * .180423 + 0.0 + $2 * .072169 + $3 * .950227;
        HEAPF64[tempDoublePtr >> 3] = $add_2_2, HEAP32[$arrayidx4_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx4_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $inc18 = $i_044 + 1 | 0;
        if (($inc18 | 0) < ($0 | 0)) {
          $i_044 = $inc18;
        } else {
          break;
        }
      }
      if ($cmp43) {
        $i_139 = 0;
      } else {
        break;
      }
      while (1) {
        $arrayidx27 = $cam_rgb + ($i_139 * 24 & -1) | 0;
        $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx27_1 = $cam_rgb + ($i_139 * 24 & -1) + 8 | 0;
        $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx27_2 = $cam_rgb + ($i_139 * 24 & -1) + 16 | 0;
        $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $add28_2 = $4 + 0.0 + $5 + $6;
        $div = $4 / $add28_2;
        HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx27 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx27 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $div_1 = $5 / $add28_2;
        HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx27_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx27_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $div_2 = $6 / $add28_2;
        HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx27_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx27_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        HEAPF32[5245612 + ($i_139 << 2) >> 2] = 1.0 / $add28_2;
        $inc43 = $i_139 + 1 | 0;
        if (($inc43 | 0) < ($0 | 0)) {
          $i_139 = $inc43;
        } else {
          break L3514;
        }
      }
    }
  } while (0);
  _pseudoinverse($cam_rgb | 0, $inverse | 0, $0);
  HEAP32[1311252] = 0;
  $7 = HEAP32[1390240] | 0;
  $cmp5131 = ($7 | 0) > 0;
  if ($cmp5131) {
    $j_332 = 0;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
  while (1) {
    $arrayidx55 = $inverse + ($j_332 * 24 & -1) | 0;
    HEAPF32[5244932 + ($j_332 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $inc60 = $j_332 + 1 | 0;
    if (($inc60 | 0) == ($7 | 0)) {
      break;
    } else {
      $j_332 = $inc60;
    }
  }
  if ($cmp5131) {
    $j_332_1 = 0;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
  while (1) {
    $arrayidx55_1 = $inverse + ($j_332_1 * 24 & -1) + 8 | 0;
    HEAPF32[5244948 + ($j_332_1 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $inc60_1 = $j_332_1 + 1 | 0;
    if (($inc60_1 | 0) == ($7 | 0)) {
      break;
    } else {
      $j_332_1 = $inc60_1;
    }
  }
  if ($cmp5131) {
    $j_332_2 = 0;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
  while (1) {
    $arrayidx55_2 = $inverse + ($j_332_2 * 24 & -1) + 16 | 0;
    HEAPF32[5244964 + ($j_332_2 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $inc60_2 = $j_332_2 + 1 | 0;
    if (($inc60_2 | 0) == ($7 | 0)) {
      break;
    } else {
      $j_332_2 = $inc60_2;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _wavelet_denoise() {
  var $mul = 0, $blk = 0, $window = 0, $1 = 0, $3 = 0, $scale_0 = 0, $dec = 0, $conv = 0, $conv6 = 0, $mul7 = 0, $call16 = 0, $11 = 0, $12 = 0, $13 = 0, $call_i = 0, $mul18 = 0, $add_ptr = 0, $14 = 0, $15 = 0, $nc_0 = 0, $cmp30226 = 0, $c_1250 = 0, $i_0227 = 0, $inc43 = 0, $hpass_0246 = 0, $lev_0245 = 0, $mul50 = 0, $shl61 = 0, $19 = 0, $row_0234 = 0, $conv57 = 0, $20 = 0, $conv63231 = 0, $col_0230 = 0, $conv70 = 0.0, $inc77 = 0, $22 = 0, $conv63 = 0, $23 = 0, $inc80 = 0, $24 = 0, $25 = 0, $26 = 0, $shl91 = 0, $27 = 0, $conv83242 = 0, $col_1241 = 0, $add_ptr87_sum = 0, $row_1238 = 0, $conv100 = 0.0, $inc107 = 0, $31 = 0, $32 = 0, $inc110 = 0, $conv83 = 0, $mul113 = 0.0, $sub124 = 0.0, $tobool144 = 0, $i_1244 = 0, $arrayidx121 = 0, $sub = 0.0, $add130 = 0.0, $sub138 = 0.0, $38 = 0.0, $arrayidx148 = 0, $inc152 = 0, $inc155 = 0, $i_2248 = 0, $add164 = 0.0, $div = 0.0, $cmp170 = 0, $or_cond205 = 0, $cond213 = 0, $inc218 = 0, $inc221 = 0, $43 = 0, $44 = 0, $or = 0, $conv239 = 0.0, $or247 = 0, $50 = 0, $51 = 0, $conv269 = 0, $arrayidx272 = 0, $add_ptr271_1 = 0, $arrayidx272_1 = 0, $add_ptr271_2 = 0, $arrayidx272_2 = 0, $arrayidx272_3 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $indvars_iv = 0, $wlast_0223 = 0, $row_3222 = 0, $add283 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $wlast_1213 = 0, $inc287 = 0, $67 = 0, $and300 = 0, $and305 = 0, $68 = 0, $col_2211 = 0, $conv318 = 0, $add324 = 0, $add330 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $wlast_1_lcssa = 0, $div333 = 0.0, $and335 = 0, $add341 = 0, $80 = 0, $81 = 0, $neg = 0, $mul369 = 0, $83 = 0.0, $84 = 0, $85 = 0, $sub416 = 0.0, $col_3218 = 0, $sub348 = 0, $add352 = 0, $conv385 = 0.0, $cond393 = 0.0, $and401 = 0, $conv402 = 0, $add408 = 0, $arrayidx410 = 0, $conv415 = 0.0, $diff_0 = 0.0, $add429 = 0.0, $add433 = 0.0, $phitmp199 = 0, $cond466 = 0, $add485 = 0, $96 = 0, __stackBase__ = 0, $64$phi = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $mul = __stackBase__ | 0;
  $blk = __stackBase__ + 8 | 0;
  $window = __stackBase__ + 16 | 0;
  if ((HEAP32[1310884] | 0) != 0) {
    $1 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5578584, 21, 1, $1 | 0);
  }
  $3 = HEAP32[1315898] | 0;
  $scale_0 = 1;
  while (1) {
    if ($3 << $scale_0 >>> 0 < 65536) {
      $scale_0 = $scale_0 + 1 | 0;
    } else {
      break;
    }
  }
  $dec = $scale_0 - 1 | 0;
  HEAP32[1315898] = $3 << $dec;
  HEAP32[1390380] = HEAP32[1390380] << $dec;
  HEAP32[1390256] = HEAP32[1390256] << $dec;
  HEAP32[1390257] = HEAP32[1390257] << $dec;
  HEAP32[1390258] = HEAP32[1390258] << $dec;
  HEAP32[1390259] = HEAP32[1390259] << $dec;
  $conv = HEAPU16[2632104] | 0;
  $conv6 = HEAPU16[2632094] | 0;
  $mul7 = Math_imul($conv6, $conv);
  if ($mul7 >>> 0 >= 357892096) {
    $12 = HEAP32[_stderr >> 2] | 0;
    $13 = HEAP32[1316054] | 0;
    $call_i = _fprintf($12 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = 5578380, tempInt) | 0) | 0;
    _longjmp(5428048, 1);
  }
  $call16 = _malloc(($conv6 + $conv | 0) + ($mul7 * 3 & -1) << 2) | 0;
  $11 = $call16;
  if (($call16 | 0) == 0) {
    $12 = HEAP32[_stderr >> 2] | 0;
    $13 = HEAP32[1316054] | 0;
    $call_i = _fprintf($12 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = 5578380, tempInt) | 0) | 0;
    _longjmp(5428048, 1);
  }
  $mul18 = $mul7 * 3 & -1;
  $add_ptr = $11 + ($mul18 << 2) | 0;
  $14 = HEAP32[1390240] | 0;
  $15 = HEAP32[1356938] | 0;
  $nc_0 = (($14 | 0) == 3 & ($15 | 0) != 0 & 1) + $14 | 0;
  if (($nc_0 | 0) > 0) {
    $cmp30226 = ($mul7 | 0) == 0;
    $c_1250 = 0;
    while (1) {
      L3553 : do {
        if ($cmp30226) {
          $lev_0245 = 0;
          $hpass_0246 = 0;
        } else {
          $i_0227 = 0;
          while (1) {
            HEAPF32[$11 + ($i_0227 << 2) >> 2] = +Math_sqrt(+((HEAPU16[(HEAP32[1316051] | 0) + ($i_0227 << 3) + ($c_1250 << 1) >> 1] | 0) << $dec | 0)) * 256.0;
            $inc43 = $i_0227 + 1 | 0;
            if (($inc43 | 0) < ($mul7 | 0)) {
              $i_0227 = $inc43;
            } else {
              $lev_0245 = 0;
              $hpass_0246 = 0;
              break L3553;
            }
          }
        }
      } while (0);
      while (1) {
        $mul50 = Math_imul(($lev_0245 & 1) + 1 | 0, $mul7);
        L3558 : do {
          if (HEAP16[2632104] << 16 >> 16 == 0) {
            $26 = 0;
            $25 = HEAP16[2632094] | 0;
          } else {
            $shl61 = 1 << $lev_0245;
            $row_0234 = 0;
            $19 = HEAP16[2632094] | 0;
            while (1) {
              $conv57 = $19 & 65535;
              _hat_transform($add_ptr, $11 + (Math_imul($conv57, $row_0234) + $hpass_0246 << 2) | 0, 1, $conv57, $shl61);
              $20 = HEAP16[2632094] | 0;
              L3562 : do {
                if ($20 << 16 >> 16 == 0) {
                  $23 = 0;
                } else {
                  $col_0230 = 0;
                  $conv63231 = $20 & 65535;
                  while (1) {
                    $conv70 = +HEAPF32[$11 + ($col_0230 + $mul18 << 2) >> 2] * .25;
                    HEAPF32[$11 + (($col_0230 + $mul50 | 0) + Math_imul($conv63231, $row_0234) << 2) >> 2] = $conv70;
                    $inc77 = $col_0230 + 1 | 0;
                    $22 = HEAP16[2632094] | 0;
                    $conv63 = $22 & 65535;
                    if (($inc77 | 0) < ($conv63 | 0)) {
                      $col_0230 = $inc77;
                      $conv63231 = $conv63;
                    } else {
                      $23 = $22;
                      break L3562;
                    }
                  }
                }
              } while (0);
              $inc80 = $row_0234 + 1 | 0;
              $24 = HEAP16[2632104] | 0;
              if (($inc80 | 0) < ($24 & 65535 | 0)) {
                $row_0234 = $inc80;
                $19 = $23;
              } else {
                $26 = $24;
                $25 = $23;
                break L3558;
              }
            }
          }
        } while (0);
        L3569 : do {
          if ($25 << 16 >> 16 != 0) {
            $shl91 = 1 << $lev_0245;
            $col_1241 = 0;
            $conv83242 = $25 & 65535;
            $27 = $26;
            while (1) {
              $add_ptr87_sum = $col_1241 + $mul50 | 0;
              _hat_transform($add_ptr, $11 + ($add_ptr87_sum << 2) | 0, $conv83242, $27 & 65535, $shl91);
              L3573 : do {
                if (HEAP16[2632104] << 16 >> 16 == 0) {
                  $32 = 0;
                } else {
                  $row_1238 = 0;
                  while (1) {
                    $conv100 = +HEAPF32[$11 + ($row_1238 + $mul18 << 2) >> 2] * .25;
                    HEAPF32[$11 + ($add_ptr87_sum + Math_imul(HEAPU16[2632094] | 0, $row_1238) << 2) >> 2] = $conv100;
                    $inc107 = $row_1238 + 1 | 0;
                    $31 = HEAP16[2632104] | 0;
                    if (($inc107 | 0) < ($31 & 65535 | 0)) {
                      $row_1238 = $inc107;
                    } else {
                      $32 = $31;
                      break L3573;
                    }
                  }
                }
              } while (0);
              $inc110 = $col_1241 + 1 | 0;
              $conv83 = HEAPU16[2632094] | 0;
              if (($inc110 | 0) < ($conv83 | 0)) {
                $col_1241 = $inc110;
                $conv83242 = $conv83;
                $27 = $32;
              } else {
                break L3569;
              }
            }
          }
        } while (0);
        $mul113 = +HEAPF32[1311018] * +HEAPF32[5243100 + ($lev_0245 << 2) >> 2];
        L3578 : do {
          if (!$cmp30226) {
            $sub124 = 0.0 - $mul113;
            $tobool144 = ($hpass_0246 | 0) == 0;
            $i_1244 = 0;
            while (1) {
              $arrayidx121 = $11 + ($i_1244 + $hpass_0246 << 2) | 0;
              $sub = +HEAPF32[$arrayidx121 >> 2] - +HEAPF32[$11 + ($i_1244 + $mul50 << 2) >> 2];
              HEAPF32[$arrayidx121 >> 2] = $sub;
              do {
                if ($sub < $sub124) {
                  $add130 = $mul113 + $sub;
                  HEAPF32[$arrayidx121 >> 2] = $add130;
                  $38 = $add130;
                } else {
                  if ($sub > $mul113) {
                    $sub138 = $sub - $mul113;
                    HEAPF32[$arrayidx121 >> 2] = $sub138;
                    $38 = $sub138;
                    break;
                  } else {
                    HEAPF32[$arrayidx121 >> 2] = 0.0;
                    $38 = 0.0;
                    break;
                  }
                }
              } while (0);
              if (!$tobool144) {
                $arrayidx148 = $11 + ($i_1244 << 2) | 0;
                HEAPF32[$arrayidx148 >> 2] = $38 + +HEAPF32[$arrayidx148 >> 2];
              }
              $inc152 = $i_1244 + 1 | 0;
              if (($inc152 | 0) < ($mul7 | 0)) {
                $i_1244 = $inc152;
              } else {
                break L3578;
              }
            }
          }
        } while (0);
        $inc155 = $lev_0245 + 1 | 0;
        if (($inc155 | 0) == 5) {
          break;
        } else {
          $lev_0245 = $inc155;
          $hpass_0246 = $mul50;
        }
      }
      L3594 : do {
        if (!$cmp30226) {
          $i_2248 = 0;
          while (1) {
            $add164 = +HEAPF32[$11 + ($i_2248 << 2) >> 2] + +HEAPF32[$11 + ($i_2248 + $mul7 << 2) >> 2];
            $div = $add164 * $add164 * 152587890625.0e-16;
            $cmp170 = $div < 65535.0;
            $or_cond205 = $cmp170 & $div < 0.0;
            if ($or_cond205 | $cmp170 ^ 1) {
              $cond213 = ($or_cond205 ^ 1) << 31 >> 31;
            } else {
              $cond213 = ~~$div;
            }
            HEAP16[(HEAP32[1316051] | 0) + ($i_2248 << 3) + ($c_1250 << 1) >> 1] = $cond213;
            $inc218 = $i_2248 + 1 | 0;
            if (($inc218 | 0) < ($mul7 | 0)) {
              $i_2248 = $inc218;
            } else {
              break L3594;
            }
          }
        }
      } while (0);
      $inc221 = $c_1250 + 1 | 0;
      if (($inc221 | 0) == ($nc_0 | 0)) {
        break;
      } else {
        $c_1250 = $inc221;
      }
    }
    $44 = HEAP32[1356938] | 0;
    $43 = HEAP32[1390240] | 0;
  } else {
    $44 = $15;
    $43 = $14;
  }
  if (!(($44 | 0) != 0 & ($43 | 0) == 3)) {
    _free($call16);
    STACKTOP = __stackBase__;
    return;
  }
  $or = $44 >>> 4 & 2 | 1;
  $conv239 = +HEAPF32[5245612 + ($or << 2) >> 2];
  $or247 = $44 & 2 | 1;
  HEAPF32[$mul >> 2] = $conv239 * .125 / +HEAPF32[5245612 + ($or247 << 2) >> 2];
  HEAP32[$blk >> 2] = HEAP32[5561024 + ($or247 << 2) >> 2] | 0;
  HEAPF32[$mul + 4 >> 2] = +HEAPF32[5245612 + (($44 >>> 8 & 2 | 1) << 2) >> 2] * .125 / $conv239;
  HEAP32[$blk + 4 >> 2] = HEAP32[5561024 + ($or << 2) >> 2] | 0;
  $50 = $call16;
  $51 = HEAP16[2621484] | 0;
  $conv269 = $51 & 65535;
  $arrayidx272 = $window | 0;
  HEAP32[$arrayidx272 >> 2] = $50;
  $add_ptr271_1 = $50 + ($conv269 << 1) | 0;
  $arrayidx272_1 = $window + 4 | 0;
  HEAP32[$arrayidx272_1 >> 2] = $add_ptr271_1;
  $add_ptr271_2 = $11 + ($conv269 << 2) | 0;
  $arrayidx272_2 = $window + 8 | 0;
  HEAP32[$arrayidx272_2 >> 2] = $add_ptr271_2;
  $arrayidx272_3 = $window + 12 | 0;
  HEAP32[$arrayidx272_3 >> 2] = $50 + (($conv269 * 3 & -1) << 1) | 0;
  if (((HEAPU16[2699404] | 0) - 1 | 0) > 1) {
    $row_3222 = 1;
    $wlast_0223 = -1;
    $indvars_iv = 2;
    $61 = $50;
    $60 = $add_ptr271_1;
    $59 = $add_ptr271_2;
    $58 = $51;
  } else {
    _free($call16);
    STACKTOP = __stackBase__;
    return;
  }
  while (1) {
    $add283 = $row_3222 + 1 | 0;
    L3610 : do {
      if (($wlast_0223 | 0) < ($add283 | 0)) {
        $wlast_1213 = $wlast_0223;
        $66 = $61;
        $65 = $60;
        $64 = $59;
        $63 = $58;
        while (1) {
          HEAP32[$arrayidx272_3 >> 2] = $66;
          HEAP32[$arrayidx272 >> 2] = $65;
          HEAP32[$arrayidx272_1 >> 2] = $64;
          HEAP32[$arrayidx272_2 >> 2] = $66;
          $inc287 = $wlast_1213 + 1 | 0;
          $67 = HEAP32[1356938] | 0;
          $and300 = $inc287 << 1 & 14;
          $and305 = $67 >>> (($and300 << 1 | 2) >>> 0) & 1;
          L3613 : do {
            if ($and305 >>> 0 < ($63 & 65535) >>> 0) {
              $col_2211 = $and305;
              $68 = $67;
              while (1) {
                $conv318 = HEAPU16[2622460] | 0;
                $add324 = Math_imul($inc287 >> $conv318, HEAPU16[2632094] | 0) + ($col_2211 >> $conv318) | 0;
                HEAP16[$66 + ($col_2211 << 1) >> 1] = HEAP16[(HEAP32[1316051] | 0) + ($add324 << 3) + (($68 >>> (($col_2211 & 1 | $and300) << 1 >>> 0) & 3) << 1) >> 1] | 0;
                $add330 = $col_2211 + 2 | 0;
                $73 = HEAP16[2621484] | 0;
                if (($add330 | 0) >= ($73 & 65535 | 0)) {
                  $62 = $73;
                  break L3613;
                }
                $col_2211 = $add330;
                $68 = HEAP32[1356938] | 0;
              }
            } else {
              $62 = $63;
            }
          } while (0);
          if (($inc287 | 0) == ($indvars_iv | 0)) {
            $wlast_1_lcssa = $indvars_iv;
            $77 = $65;
            $76 = $64;
            $75 = $66;
            $74 = $62;
            break L3610;
          } else {
            $66 = $65;
            $65 = $64;
            $64$phi = $66;
            $wlast_1213 = $inc287;
            $63 = $62;
            $64 = $64$phi;
          }
        }
      } else {
        $wlast_1_lcssa = $wlast_0223;
        $77 = $61;
        $76 = $60;
        $75 = $59;
        $74 = $58;
      }
    } while (0);
    $div333 = +HEAPF32[1311018] * .001953125;
    $and335 = $row_3222 << 1 & 14;
    $add341 = ((HEAP32[1356938] | 0) >>> ($and335 << 1 >>> 0) & 1) + 1 | 0;
    L3619 : do {
      if (($add341 | 0) < (($74 & 65535) - 1 | 0)) {
        $80 = HEAP32[$arrayidx272 >> 2] | 0;
        $81 = HEAP32[$arrayidx272_2 >> 2] | 0;
        $neg = $row_3222 & 1;
        $mul369 = HEAP32[$blk + (($neg ^ 1) << 2) >> 2] << 2;
        $83 = +HEAPF32[$mul + ($neg << 2) >> 2];
        $84 = HEAP32[$arrayidx272_1 >> 2] | 0;
        $85 = HEAP32[$blk + ($neg << 2) >> 2] | 0;
        $sub416 = 0.0 - $div333;
        $col_3218 = $add341;
        while (1) {
          $sub348 = $col_3218 - 1 | 0;
          $add352 = $col_3218 + 1 | 0;
          $conv385 = $83 * +(((((HEAPU16[$80 + ($add352 << 1) >> 1] | 0) + (HEAPU16[$80 + ($sub348 << 1) >> 1] | 0) | 0) + (HEAPU16[$81 + ($sub348 << 1) >> 1] | 0) | 0) + (HEAPU16[$81 + ($add352 << 1) >> 1] | 0) | 0) - $mul369 | 0) + +((HEAPU16[$84 + ($col_3218 << 1) >> 1] | 0) + $85 | 0) * .5;
          if ($conv385 < 0.0) {
            $cond393 = 0.0;
          } else {
            $cond393 = +Math_sqrt($conv385);
          }
          $and401 = (HEAP32[1356938] | 0) >>> (($col_3218 & 1 | $and335) << 1 >>> 0) & 3;
          $conv402 = HEAPU16[2622460] | 0;
          $add408 = Math_imul($row_3222 >> $conv402, HEAPU16[2632094] | 0) + ($col_3218 >> $conv402) | 0;
          $arrayidx410 = (HEAP32[1316051] | 0) + ($add408 << 3) + ($and401 << 1) | 0;
          $conv415 = +Math_sqrt(+((HEAPU16[$arrayidx410 >> 1] | 0) >>> 0)) - $cond393;
          do {
            if ($conv415 < $sub416) {
              $diff_0 = $div333 + $conv415;
            } else {
              if ($conv415 <= $div333) {
                $diff_0 = 0.0;
                break;
              }
              $diff_0 = $conv415 - $div333;
            }
          } while (0);
          $add429 = $cond393 + $diff_0;
          $add433 = $add429 * $add429 + .5;
          do {
            if ($add433 < 65535.0) {
              $phitmp199 = $add433 < 0.0;
              if ($phitmp199) {
                $cond466 = ($phitmp199 ^ 1) << 31 >> 31;
                break;
              }
              $cond466 = ~~$add433;
            } else {
              $cond466 = -1;
            }
          } while (0);
          HEAP16[$arrayidx410 >> 1] = $cond466;
          $add485 = $col_3218 + 2 | 0;
          $96 = HEAP16[2621484] | 0;
          if (($add485 | 0) < (($96 & 65535) - 1 | 0)) {
            $col_3218 = $add485;
          } else {
            $56 = $80;
            $55 = $84;
            $54 = $81;
            $53 = $96;
            break L3619;
          }
        }
      } else {
        $56 = $77;
        $55 = $76;
        $54 = $75;
        $53 = $74;
      }
    } while (0);
    if (($add283 | 0) < ((HEAPU16[2699404] | 0) - 1 | 0)) {
      $row_3222 = $add283;
      $wlast_0223 = $wlast_1_lcssa;
      $indvars_iv = $indvars_iv + 1 | 0;
      $61 = $56;
      $60 = $55;
      $59 = $54;
      $58 = $53;
    } else {
      break;
    }
  }
  _free($call16);
  STACKTOP = __stackBase__;
  return;
}
function _scale_colors() {
  var $sum = 0, $scale_mul = 0, $2 = 0, $3 = 0.0, $4 = 0, $add = 0, $conv = 0, $add_conv = 0, $7 = 0, $add8 = 0, $conv9 = 0, $cond17 = 0, $cmp21191 = 0, $10 = 0, $11 = 0, $conv47 = 0, $conv48 = 0, $14 = 0, $conv_i128 = 0, $conv1_i131 = 0, $sub = 0, $tobool75 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $row_0196 = 0, $add25 = 0, $cmp26185 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $col_0192 = 0, $add32 = 0, $cmp33181 = 0, $y_0188 = 0, $and16_i = 0, $mul = 0, $and3_i133 = 0, $rem11_i140 = 0, $mul55 = 0, $x_0184 = 0, $and20_i = 0, $add51 = 0, $arrayidx4_i134 = 0, $arrayidx13_i141 = 0, $add56 = 0, $c_0 = 0, $50 = 0, $51 = 0, $retval_0_i232 = 0, $retval_0_i152 = 0, $c_1 = 0, $val_0_in_in = 0, $val_0 = 0, $sub66 = 0, $arrayidx71 = 0, $arrayidx74 = 0, $inc80 = 0, $inc83 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $add92 = 0.0, $add92_1 = 0.0, $add92_2 = 0.0, $add92_3 = 0.0, $add92_4 = 0.0, $add92_5 = 0.0, $add92_6 = 0.0, $add92_7 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $98 = 0, $row_1179 = 0, $shl = 0, $col_1178 = 0, $and136 = 0, $sub141 = 0, $arrayidx145 = 0, $arrayidx149 = 0, $inc152 = 0, $inc155 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $div178_3 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $cond201 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $121 = 0.0, $122 = 0, $123 = 0, $sub206 = 0, $124 = 0.0, $conv212 = 0.0, $dmin_1 = 0.0, $dmax_1 = 0.0, $conv212_1 = 0.0, $dmin_1_1 = 0.0, $dmax_1_1 = 0.0, $conv212_2 = 0.0, $dmin_1_2 = 0.0, $dmax_1_2 = 0.0, $conv212_3 = 0.0, $dmin_0_dmax_0 = 0.0, $conv243 = 0.0, $conv240 = 0.0, $conv240_1 = 0.0, $conv240_2 = 0.0, $conv240_3 = 0.0, $129 = 0, $130 = 0, $conv258 = 0.0, $132 = 0, $conv258_1 = 0.0, $134 = 0, $conv258_2 = 0.0, $136 = 0, $conv258_3 = 0.0, $138 = 0, $mul267 = 0, $141 = 0, $i_0171 = 0, $arrayidx274 = 0, $143 = 0, $and279 = 0, $conv286 = 0, $cond292 = 0, $inc309 = 0, $cmp311 = 0, $150 = 0, $mul333 = 0, $cmp336155 = 0, $c_8167 = 0, $arrayidx328 = 0, $call334 = 0, $153 = 0, $154 = 0, $155 = 0, $i_1156 = 0, $inc343 = 0, $158 = 0, $159 = 0, $conv346166 = 0, $row_2163 = 0, $mul353 = 0.0, $160 = 0.0, $conv361 = 0.0, $conv362 = 0, $sub370 = 0.0, $161 = 0, $sub410 = 0.0, $162 = 0.0, $163 = 0, $conv372160 = 0, $col_2159 = 0, $mul379 = 0.0, $conv387 = 0.0, $conv388 = 0, $sub396 = 0.0, $add_ptr_sum = 0, $sub403 = 0.0, $conv426 = 0, $add429 = 0, $169 = 0, $inc433 = 0, $conv372 = 0, $170 = 0, $inc436 = 0, $conv346 = 0, $add439 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  $sum = __stackBase__ | 0;
  $scale_mul = __stackBase__ + 32 | 0;
  if (+HEAPF32[1310885] != 0.0) {
    HEAP32[1311403] = HEAP32[1310885] | 0;
    HEAP32[1311404] = HEAP32[1310886] | 0;
    HEAP32[1311405] = HEAP32[1310887] | 0;
    HEAP32[1311406] = HEAP32[1310888] | 0;
  }
  do {
    if ((HEAP32[1310891] | 0) == 0) {
      $2 = HEAP32[1310889] | 0;
      $3 = +HEAPF32[1390311];
      if (($2 | 0) != 0 & $3 == -1.0) {
        label = 2555;
        break;
      } else {
        $96 = $2;
        $95 = $3;
        break;
      }
    } else {
      label = 2555;
    }
  } while (0);
  if ((label | 0) == 2555) {
    $4 = HEAP32[1349705] | 0;
    $add = (HEAP32[1349707] | 0) + $4 | 0;
    $conv = HEAPU16[2699404] | 0;
    $add_conv = $add >>> 0 < $conv >>> 0 ? $add : $conv;
    $7 = HEAP32[1349704] | 0;
    $add8 = (HEAP32[1349706] | 0) + $7 | 0;
    $conv9 = HEAPU16[2621484] | 0;
    $cond17 = $add8 >>> 0 < $conv9 >>> 0 ? $add8 : $conv9;
    do {
      if ($4 >>> 0 < $add_conv >>> 0) {
        $cmp21191 = $7 >>> 0 < $cond17 >>> 0;
        $10 = $sum;
        $11 = HEAP32[1356938] | 0;
        $conv47 = HEAPU16[2622460] | 0;
        $conv48 = HEAPU16[2632094] | 0;
        $14 = HEAP32[1316051] | 0;
        $conv_i128 = HEAPU16[2631898] | 0;
        $conv1_i131 = HEAPU16[2621786] | 0;
        $sub = (HEAP32[1315898] | 0) - 25 | 0;
        $tobool75 = ($11 | 0) == 0;
        $row_0196 = $4;
        $33 = 0.0;
        $32 = 0.0;
        $31 = 0.0;
        $30 = 0.0;
        $29 = 0.0;
        $28 = 0.0;
        $27 = 0.0;
        $26 = 0.0;
        $25 = 0.0;
        $24 = 0.0;
        $23 = 0.0;
        $22 = 0.0;
        $21 = 0.0;
        $20 = 0.0;
        $19 = 0.0;
        $18 = 0.0;
        while (1) {
          $add25 = $row_0196 + 8 | 0;
          L3649 : do {
            if ($cmp21191) {
              $cmp26185 = $row_0196 >>> 0 < 4294967288;
              $col_0192 = $7;
              $49 = $33;
              $48 = $32;
              $47 = $31;
              $46 = $30;
              $45 = $29;
              $44 = $28;
              $43 = $27;
              $42 = $26;
              $41 = $25;
              $40 = $24;
              $39 = $23;
              $38 = $22;
              $37 = $21;
              $36 = $20;
              $35 = $19;
              $34 = $18;
              while (1) {
                _memset($10 | 0, 0, 32);
                $add32 = $col_0192 + 8 | 0;
                L3653 : do {
                  if ($cmp26185) {
                    $cmp33181 = $col_0192 >>> 0 < 4294967288;
                    $y_0188 = $row_0196;
                    while (1) {
                      L3657 : do {
                        if ($cmp33181) {
                          $and16_i = $y_0188 << 1 & 14;
                          $mul = Math_imul($y_0188 >>> ($conv47 >>> 0), $conv48);
                          $and3_i133 = $conv1_i131 + $y_0188 & 15;
                          $rem11_i140 = ($y_0188 + 6 | 0) % 6;
                          $mul55 = Math_imul($conv9, $y_0188);
                          $x_0184 = $col_0192;
                          while (1) {
                            $and20_i = $11 >>> (($x_0184 & 1 | $and16_i) << 1 >>> 0) & 3;
                            $add51 = $mul + ($x_0184 >>> ($conv47 >>> 0)) | 0;
                            $arrayidx4_i134 = ($conv_i128 + $x_0184 & 15) + (5427792 + ($and3_i133 << 4)) | 0;
                            $arrayidx13_i141 = ($x_0184 + 6 | 0) % 6 + (5427756 + ($rem11_i140 * 6 & -1)) | 0;
                            $add56 = $mul55 + $x_0184 | 0;
                            $c_0 = 0;
                            while (1) {
                              if ($c_0 >>> 0 >= 4) {
                                break;
                              }
                              do {
                                if (($11 | 0) == 0) {
                                  $val_0_in_in = $14 + ($add56 << 3) + ($c_0 << 1) | 0;
                                  $c_1 = $c_0;
                                  break;
                                } else if (($11 | 0) == 1) {
                                  $50 = HEAP8[$arrayidx4_i134] | 0;
                                  $retval_0_i152 = $50 << 24 >> 24;
                                  $retval_0_i232 = $50 << 24 >> 24;
                                  label = 2569;
                                  break;
                                } else if (($11 | 0) == 2) {
                                  $51 = HEAP8[$arrayidx13_i141] | 0;
                                  $retval_0_i152 = $51 << 24 >> 24;
                                  $retval_0_i232 = $51 << 24 >> 24;
                                  label = 2569;
                                  break;
                                } else {
                                  $retval_0_i152 = $and20_i;
                                  $retval_0_i232 = $and20_i;
                                  label = 2569;
                                }
                              } while (0);
                              if ((label | 0) == 2569) {
                                label = 0;
                                $val_0_in_in = $14 + ($add51 << 3) + ($retval_0_i152 << 1) | 0;
                                $c_1 = $retval_0_i232;
                              }
                              $val_0 = HEAPU16[$val_0_in_in >> 1] | 0;
                              if ($val_0 >>> 0 > $sub >>> 0) {
                                $78 = $49;
                                $77 = $48;
                                $76 = $47;
                                $75 = $46;
                                $74 = $45;
                                $73 = $44;
                                $72 = $43;
                                $71 = $42;
                                $70 = $41;
                                $69 = $40;
                                $68 = $39;
                                $67 = $38;
                                $66 = $37;
                                $65 = $36;
                                $64 = $35;
                                $63 = $34;
                                break L3653;
                              }
                              $sub66 = $val_0 - (HEAP32[5561024 + ($c_1 << 2) >> 2] | 0) | 0;
                              $arrayidx71 = $sum + ($c_1 << 2) | 0;
                              HEAP32[$arrayidx71 >> 2] = (($sub66 | 0) < 0 ? 0 : $sub66) + (HEAP32[$arrayidx71 >> 2] | 0) | 0;
                              $arrayidx74 = $sum + ($c_1 + 4 << 2) | 0;
                              HEAP32[$arrayidx74 >> 2] = (HEAP32[$arrayidx74 >> 2] | 0) + 1 | 0;
                              if ($tobool75) {
                                $c_0 = $c_1 + 1 | 0;
                              } else {
                                break;
                              }
                            }
                            $inc80 = $x_0184 + 1 | 0;
                            if ($inc80 >>> 0 < $add32 >>> 0 & $inc80 >>> 0 < $cond17 >>> 0) {
                              $x_0184 = $inc80;
                            } else {
                              break L3657;
                            }
                          }
                        }
                      } while (0);
                      $inc83 = $y_0188 + 1 | 0;
                      if ($inc83 >>> 0 < $add25 >>> 0 & $inc83 >>> 0 < $add_conv >>> 0) {
                        $y_0188 = $inc83;
                      } else {
                        break;
                      }
                    }
                    $62 = +((HEAP32[$sum >> 2] | 0) >>> 0 >>> 0);
                    $61 = +((HEAP32[$sum + 4 >> 2] | 0) >>> 0 >>> 0);
                    $60 = +((HEAP32[$sum + 8 >> 2] | 0) >>> 0 >>> 0);
                    $59 = +((HEAP32[$sum + 12 >> 2] | 0) >>> 0 >>> 0);
                    $58 = +((HEAP32[$sum + 16 >> 2] | 0) >>> 0 >>> 0);
                    $57 = +((HEAP32[$sum + 20 >> 2] | 0) >>> 0 >>> 0);
                    $56 = +((HEAP32[$sum + 24 >> 2] | 0) >>> 0 >>> 0);
                    $55 = +((HEAP32[$sum + 28 >> 2] | 0) >>> 0 >>> 0);
                    label = 2576;
                    break;
                  } else {
                    $62 = 0.0;
                    $61 = 0.0;
                    $60 = 0.0;
                    $59 = 0.0;
                    $58 = 0.0;
                    $57 = 0.0;
                    $56 = 0.0;
                    $55 = 0.0;
                    label = 2576;
                  }
                } while (0);
                if ((label | 0) == 2576) {
                  label = 0;
                  $add92 = $49 + $62;
                  $add92_1 = $48 + $61;
                  $add92_2 = $47 + $60;
                  $add92_3 = $46 + $59;
                  $add92_4 = $45 + $58;
                  $add92_5 = $44 + $57;
                  $add92_6 = $43 + $56;
                  $add92_7 = $42 + $55;
                  $78 = $add92;
                  $77 = $add92_1;
                  $76 = $add92_2;
                  $75 = $add92_3;
                  $74 = $add92_4;
                  $73 = $add92_5;
                  $72 = $add92_6;
                  $71 = $add92_7;
                  $70 = $add92;
                  $69 = $add92_4;
                  $68 = $add92_1;
                  $67 = $add92_5;
                  $66 = $add92_2;
                  $65 = $add92_6;
                  $64 = $add92_3;
                  $63 = $add92_7;
                }
                if ($add32 >>> 0 < $cond17 >>> 0) {
                  $col_0192 = $add32;
                  $49 = $78;
                  $48 = $77;
                  $47 = $76;
                  $46 = $75;
                  $45 = $74;
                  $44 = $73;
                  $43 = $72;
                  $42 = $71;
                  $41 = $70;
                  $40 = $69;
                  $39 = $68;
                  $38 = $67;
                  $37 = $66;
                  $36 = $65;
                  $35 = $64;
                  $34 = $63;
                } else {
                  $94 = $78;
                  $93 = $77;
                  $92 = $76;
                  $91 = $75;
                  $90 = $74;
                  $89 = $73;
                  $88 = $72;
                  $87 = $71;
                  $86 = $70;
                  $85 = $69;
                  $84 = $68;
                  $83 = $67;
                  $82 = $66;
                  $81 = $65;
                  $80 = $64;
                  $79 = $63;
                  break L3649;
                }
              }
            } else {
              $94 = $33;
              $93 = $32;
              $92 = $31;
              $91 = $30;
              $90 = $29;
              $89 = $28;
              $88 = $27;
              $87 = $26;
              $86 = $25;
              $85 = $24;
              $84 = $23;
              $83 = $22;
              $82 = $21;
              $81 = $20;
              $80 = $19;
              $79 = $18;
            }
          } while (0);
          if ($add25 >>> 0 < $add_conv >>> 0) {
            $row_0196 = $add25;
            $33 = $94;
            $32 = $93;
            $31 = $92;
            $30 = $91;
            $29 = $90;
            $28 = $89;
            $27 = $88;
            $26 = $87;
            $25 = $86;
            $24 = $85;
            $23 = $84;
            $22 = $83;
            $21 = $82;
            $20 = $81;
            $19 = $80;
            $18 = $79;
          } else {
            break;
          }
        }
        if ($86 != 0.0) {
          HEAPF32[1311403] = $85 / $86;
        }
        if ($84 != 0.0) {
          HEAPF32[1311404] = $83 / $84;
        }
        if ($82 != 0.0) {
          HEAPF32[1311405] = $81 / $82;
        }
        if ($80 == 0.0) {
          break;
        }
        HEAPF32[1311406] = $79 / $80;
      }
    } while (0);
    $96 = HEAP32[1310889] | 0;
    $95 = +HEAPF32[1390311];
  }
  L3692 : do {
    if (($96 | 0) != 0 & $95 != -1.0) {
      _memset($sum | 0, 0, 32);
      $98 = HEAP32[1356938] | 0;
      $row_1179 = 0;
      while (1) {
        $shl = $row_1179 << 1;
        $col_1178 = 0;
        while (1) {
          $and136 = $98 >>> (($col_1178 & 1 | $shl) << 1 >>> 0) & 3;
          $sub141 = (HEAPU16[5242972 + ($row_1179 << 4) + ($col_1178 << 1) >> 1] | 0) - (HEAP32[5561024 + ($and136 << 2) >> 2] | 0) | 0;
          if (($sub141 | 0) > 0) {
            $arrayidx145 = $sum + ($and136 << 2) | 0;
            HEAP32[$arrayidx145 >> 2] = (HEAP32[$arrayidx145 >> 2] | 0) + $sub141 | 0;
          }
          $arrayidx149 = $sum + (($and136 | 4) << 2) | 0;
          HEAP32[$arrayidx149 >> 2] = (HEAP32[$arrayidx149 >> 2] | 0) + 1 | 0;
          $inc152 = $col_1178 + 1 | 0;
          if (($inc152 | 0) == 8) {
            break;
          } else {
            $col_1178 = $inc152;
          }
        }
        $inc155 = $row_1179 + 1 | 0;
        if (($inc155 | 0) == 8) {
          break;
        } else {
          $row_1179 = $inc155;
        }
      }
      $103 = HEAP32[$sum >> 2] | 0;
      do {
        if (($103 | 0) != 0) {
          $104 = HEAP32[$sum + 4 >> 2] | 0;
          if (($104 | 0) == 0) {
            break;
          }
          $105 = HEAP32[$sum + 8 >> 2] | 0;
          if (($105 | 0) == 0) {
            break;
          }
          $106 = HEAP32[$sum + 12 >> 2] | 0;
          if (($106 | 0) == 0) {
            break;
          }
          HEAPF32[1311403] = +((HEAP32[$sum + 16 >> 2] | 0) >>> 0 >>> 0) / +($103 >>> 0 >>> 0);
          HEAPF32[1311404] = +((HEAP32[$sum + 20 >> 2] | 0) >>> 0 >>> 0) / +($104 >>> 0 >>> 0);
          HEAPF32[1311405] = +((HEAP32[$sum + 24 >> 2] | 0) >>> 0 >>> 0) / +($105 >>> 0 >>> 0);
          $div178_3 = +((HEAP32[$sum + 28 >> 2] | 0) >>> 0 >>> 0) / +($106 >>> 0 >>> 0);
          HEAPF32[1311406] = $div178_3;
          $114 = $div178_3;
          break L3692;
        }
      } while (0);
      if ($95 != 0.0 & +HEAPF32[1390313] != 0.0) {
        HEAP32[1311403] = HEAP32[1390311] | 0;
        HEAP32[1311404] = HEAP32[1390312] | 0;
        HEAP32[1311405] = HEAP32[1390313] | 0;
        HEAP32[1311406] = HEAP32[1390314] | 0;
        label = 2596;
        break;
      } else {
        $112 = HEAP32[_stderr >> 2] | 0;
        $113 = HEAP32[1316054] | 0;
        _fprintf($112 | 0, 5578216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $113, tempInt) | 0);
        label = 2596;
        break;
      }
    } else {
      label = 2596;
    }
  } while (0);
  if ((label | 0) == 2596) {
    $114 = +HEAPF32[1311406];
  }
  if ($114 == 0.0) {
    $cond201 = (HEAP32[1390240] | 0) < 4 ? +HEAPF32[1311404] : 1.0;
    HEAPF32[1311406] = $cond201;
    $117 = $cond201;
  } else {
    $117 = $114;
  }
  $118 = HEAP32[1390380] | 0;
  $119 = HEAP32[1315898] | 0;
  if (+HEAPF32[1311018] != 0.0) {
    _wavelet_denoise();
    $123 = HEAP32[1390380] | 0;
    $122 = HEAP32[1315898] | 0;
    $121 = +HEAPF32[1311406];
  } else {
    $123 = $118;
    $122 = $119;
    $121 = $117;
  }
  $sub206 = $122 - $123 | 0;
  HEAP32[1315898] = $sub206;
  $124 = +HEAPF32[1311403];
  $conv212 = $124;
  $dmin_1 = $conv212 < 1.7976931348623157e+308 ? $conv212 : 1.7976931348623157e+308;
  $dmax_1 = $124 > 0.0 ? $conv212 : 0.0;
  $conv212_1 = +HEAPF32[1311404];
  $dmin_1_1 = $dmin_1 > $conv212_1 ? $conv212_1 : $dmin_1;
  $dmax_1_1 = $dmax_1 < $conv212_1 ? $conv212_1 : $dmax_1;
  $conv212_2 = +HEAPF32[1311405];
  $dmin_1_2 = $dmin_1_1 > $conv212_2 ? $conv212_2 : $dmin_1_1;
  $dmax_1_2 = $dmax_1_1 < $conv212_2 ? $conv212_2 : $dmax_1_1;
  $conv212_3 = $121;
  $dmin_0_dmax_0 = (HEAP32[1349701] | 0) == 0 ? $dmin_1_2 > $conv212_3 ? $conv212_3 : $dmin_1_2 : $dmax_1_2 < $conv212_3 ? $conv212_3 : $dmax_1_2;
  $conv243 = +($sub206 >>> 0 >>> 0);
  $conv240 = $conv212 / $dmin_0_dmax_0;
  HEAPF32[1311403] = $conv240;
  HEAPF32[$scale_mul >> 2] = $conv240 * 65535.0 / $conv243;
  $conv240_1 = $conv212_1 / $dmin_0_dmax_0;
  HEAPF32[1311404] = $conv240_1;
  HEAPF32[$scale_mul + 4 >> 2] = $conv240_1 * 65535.0 / $conv243;
  $conv240_2 = $conv212_2 / $dmin_0_dmax_0;
  HEAPF32[1311405] = $conv240_2;
  HEAPF32[$scale_mul + 8 >> 2] = $conv240_2 * 65535.0 / $conv243;
  $conv240_3 = $conv212_3 / $dmin_0_dmax_0;
  HEAPF32[1311406] = $conv240_3;
  HEAPF32[$scale_mul + 12 >> 2] = $conv240_3 * 65535.0 / $conv243;
  if ((HEAP32[1310884] | 0) != 0) {
    $129 = HEAP32[_stderr >> 2] | 0;
    _fprintf($129 | 0, 5578084, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $118, HEAP32[tempInt + 4 >> 2] = $119, tempInt) | 0);
    $130 = HEAP32[_stderr >> 2] | 0;
    $conv258 = +HEAPF32[1311403];
    _fprintf($130 | 0, 5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0);
    $132 = HEAP32[_stderr >> 2] | 0;
    $conv258_1 = +HEAPF32[1311404];
    _fprintf($132 | 0, 5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_1, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0);
    $134 = HEAP32[_stderr >> 2] | 0;
    $conv258_2 = +HEAPF32[1311405];
    _fprintf($134 | 0, 5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_2, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0);
    $136 = HEAP32[_stderr >> 2] | 0;
    $conv258_3 = +HEAPF32[1311406];
    _fprintf($136 | 0, 5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_3, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0);
    $138 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, $138 | 0);
  }
  $mul267 = Math_imul(HEAPU16[2632094] | 0, HEAPU16[2632104] | 0);
  L3724 : do {
    if (($mul267 & 1073741823 | 0) != 0) {
      $141 = $mul267 << 2;
      $i_0171 = 0;
      while (1) {
        $arrayidx274 = (HEAP32[1316051] | 0) + ($i_0171 << 1) | 0;
        $143 = HEAP16[$arrayidx274 >> 1] | 0;
        if ($143 << 16 >> 16 != 0) {
          $and279 = $i_0171 & 3;
          $conv286 = ~~(+HEAPF32[$scale_mul + ($and279 << 2) >> 2] * +(($143 & 65535) - (HEAP32[5561024 + ($and279 << 2) >> 2] | 0) | 0));
          $cond292 = ($conv286 | 0) < 65535 ? $conv286 : 65535;
          HEAP16[$arrayidx274 >> 1] = ($cond292 | 0) < 0 ? 0 : $cond292 & 65535;
        }
        $inc309 = $i_0171 + 1 | 0;
        if (($inc309 | 0) == ($141 | 0)) {
          break L3724;
        } else {
          $i_0171 = $inc309;
        }
      }
    }
  } while (0);
  $cmp311 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1393342] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573372 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) != 1.0;
  if (!(($cmp311 | (HEAP32[tempDoublePtr >> 2] = HEAP32[1393346] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573388 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) != 1.0) & (HEAP32[1390240] | 0) == 3)) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[1310884] | 0) != 0) {
    $150 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5577908, 35, 1, $150 | 0);
  }
  $mul333 = $mul267 << 1;
  $cmp336155 = ($mul267 | 0) == 0;
  $c_8167 = 0;
  while (1) {
    $arrayidx328 = 5573368 + ($c_8167 << 3) | 0;
    if ((HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx328 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx328 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) != 1.0) {
      $call334 = _malloc($mul333) | 0;
      $153 = $call334;
      if (($call334 | 0) == 0) {
        label = 2615;
        break;
      }
      L3743 : do {
        if (!$cmp336155) {
          $i_1156 = 0;
          while (1) {
            HEAP16[$153 + ($i_1156 << 1) >> 1] = HEAP16[(HEAP32[1316051] | 0) + ($i_1156 << 3) + ($c_8167 << 1) >> 1] | 0;
            $inc343 = $i_1156 + 1 | 0;
            if (($inc343 | 0) == ($mul267 | 0)) {
              break L3743;
            } else {
              $i_1156 = $inc343;
            }
          }
        }
      } while (0);
      $158 = HEAP16[2632104] | 0;
      L3747 : do {
        if ($158 << 16 >> 16 != 0) {
          $row_2163 = 0;
          $conv346166 = $158 & 65535;
          $159 = $158;
          while (1) {
            $mul353 = +($conv346166 | 0) * .5;
            $160 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx328 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx328 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
            $conv361 = $mul353 + (+($row_2163 >>> 0 >>> 0) - $mul353) * $160;
            $conv362 = ~~$conv361;
            do {
              if ($conv362 >>> 0 > ($conv346166 - 2 | 0) >>> 0) {
                $170 = $159;
              } else {
                $sub370 = $conv361 - +($conv362 >>> 0 >>> 0);
                $161 = HEAP16[2632094] | 0;
                if ($161 << 16 >> 16 == 0) {
                  $170 = $159;
                  break;
                }
                $sub410 = 1.0 - $sub370;
                $col_2159 = 0;
                $conv372160 = $161 & 65535;
                $163 = $161;
                $162 = $160;
                while (1) {
                  $mul379 = +($conv372160 | 0) * .5;
                  $conv387 = $mul379 + (+($col_2159 >>> 0 >>> 0) - $mul379) * $162;
                  $conv388 = ~~$conv387;
                  if ($conv388 >>> 0 > ($conv372160 - 2 | 0) >>> 0) {
                    $169 = $163;
                  } else {
                    $sub396 = $conv387 - +($conv388 >>> 0 >>> 0);
                    $add_ptr_sum = $conv388 + Math_imul($conv372160, $conv362) | 0;
                    $sub403 = 1.0 - $sub396;
                    $conv426 = ~~($sub410 * ($sub403 * +(HEAPU16[$153 + ($add_ptr_sum << 1) >> 1] | 0 | 0) + $sub396 * +(HEAPU16[$153 + ($add_ptr_sum + 1 << 1) >> 1] | 0 | 0)) + $sub370 * ($sub403 * +(HEAPU16[$153 + ($add_ptr_sum + $conv372160 << 1) >> 1] | 0 | 0) + $sub396 * +(HEAPU16[$153 + (($conv372160 + 1 | 0) + $add_ptr_sum << 1) >> 1] | 0 | 0)));
                    $add429 = Math_imul($conv372160, $row_2163) + $col_2159 | 0;
                    HEAP16[(HEAP32[1316051] | 0) + ($add429 << 3) + ($c_8167 << 1) >> 1] = $conv426;
                    $169 = HEAP16[2632094] | 0;
                  }
                  $inc433 = $col_2159 + 1 | 0;
                  $conv372 = $169 & 65535;
                  if ($inc433 >>> 0 >= $conv372 >>> 0) {
                    break;
                  }
                  $col_2159 = $inc433;
                  $conv372160 = $conv372;
                  $163 = $169;
                  $162 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx328 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx328 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
                }
                $170 = HEAP16[2632104] | 0;
              }
            } while (0);
            $inc436 = $row_2163 + 1 | 0;
            $conv346 = $170 & 65535;
            if ($inc436 >>> 0 < $conv346 >>> 0) {
              $row_2163 = $inc436;
              $conv346166 = $conv346;
              $159 = $170;
            } else {
              break L3747;
            }
          }
        }
      } while (0);
      _free($call334);
    }
    $add439 = $c_8167 + 2 | 0;
    if ($add439 >>> 0 < 4) {
      $c_8167 = $add439;
    } else {
      label = 2638;
      break;
    }
  }
  if ((label | 0) == 2615) {
    $154 = HEAP32[_stderr >> 2] | 0;
    $155 = HEAP32[1316054] | 0;
    _fprintf($154 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $155, HEAP32[tempInt + 4 >> 2] = 5577780, tempInt) | 0);
    _longjmp(5428048, 1);
  } else if ((label | 0) == 2638) {
    STACKTOP = __stackBase__;
    return;
  }
}
function _border_interpolate($border) {
  $border = $border | 0;
  var $sum = 0, $0 = 0, $1 = 0, $_pre = 0, $2 = 0, $3 = 0, $4 = 0, $row_069 = 0, $cmp9 = 0, $sub17 = 0, $add = 0, $and16_i50 = 0, $rem11_i45 = 0, $5 = 0, $conv366 = 0, $col_065 = 0, $col_1 = 0, $sub22 = 0, $conv28 = 0, $conv32 = 0, $8 = 0, $9 = 0, $conv_i = 0, $conv1_i = 0, $y_060 = 0, $cmp29 = 0, $and16_i = 0, $mul = 0, $and3_i = 0, $rem11_i = 0, $retval_0_i = 0, $arrayidx40 = 0, $arrayidx43 = 0, $retval_0_i57 = 0, $19 = 0, $20 = 0, $c_062 = 0, $21 = 0, $conv63 = 0, $add66 = 0, $25 = 0, $inc71 = 0, $26 = 0, $conv3 = 0, $27 = 0, $28 = 0, $29 = 0, $inc77 = 0, $retval_0_i_1 = 0, $arrayidx40_1 = 0, $arrayidx43_1 = 0, $inc45_1 = 0, $retval_0_i_2 = 0, $arrayidx40_2 = 0, $arrayidx43_2 = 0, $inc45_176 = 0, $inc47 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $sum = __stackBase__ | 0;
  $0 = HEAP16[2699404] | 0;
  if ($0 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $1 = $sum;
  $_pre = HEAP16[2621484] | 0;
  $row_069 = 0;
  $4 = $_pre;
  $3 = $0;
  $2 = $_pre;
  while (1) {
    if ($4 << 16 >> 16 == 0) {
      $29 = 0;
      $28 = $3;
      $27 = $2;
    } else {
      $cmp9 = $row_069 >>> 0 < $border >>> 0;
      $sub17 = $row_069 - 1 | 0;
      $add = $row_069 + 2 | 0;
      $and16_i50 = $row_069 << 1 & 14;
      $rem11_i45 = ($row_069 + 6 | 0) % 6;
      $col_065 = 0;
      $conv366 = $4 & 65535;
      $5 = $2;
      while (1) {
        if (($col_065 | 0) != ($border | 0) | $cmp9) {
          $col_1 = $col_065;
        } else {
          $col_1 = $row_069 >>> 0 < ((HEAPU16[2699404] | 0) - $border | 0) >>> 0 ? $conv366 - $border | 0 : $border;
        }
        _memset($1 | 0, 0, 32);
        $sub22 = $col_1 - 1 | 0;
        $conv28 = HEAPU16[2699404] | 0;
        $conv32 = $5 & 65535;
        $8 = HEAP32[1356938] | 0;
        $9 = HEAP32[1316051] | 0;
        $conv_i = HEAPU16[2631898] | 0;
        $conv1_i = HEAPU16[2621786] | 0;
        $y_060 = $sub17;
        while (1) {
          $cmp29 = $y_060 >>> 0 < $conv28 >>> 0;
          $and16_i = $y_060 << 1 & 14;
          $mul = Math_imul($conv32, $y_060);
          $and3_i = $conv1_i + $y_060 & 15;
          $rem11_i = ($y_060 + 6 | 0) % 6;
          do {
            if ($cmp29) {
              if ($sub22 >>> 0 < $conv32 >>> 0) {
                if (($8 | 0) == 2) {
                  $retval_0_i = HEAP8[($col_1 + 5 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
                } else if (($8 | 0) == 1) {
                  $retval_0_i = HEAP8[($conv_i + $sub22 & 15) + (5427792 + ($and3_i << 4)) | 0] << 24 >> 24;
                } else {
                  $retval_0_i = $8 >>> (($sub22 & 1 | $and16_i) << 1 >>> 0) & 3;
                }
                $arrayidx40 = $sum + ($retval_0_i << 2) | 0;
                HEAP32[$arrayidx40 >> 2] = (HEAP32[$arrayidx40 >> 2] | 0) + (HEAPU16[$9 + ($mul + $sub22 << 3) + ($retval_0_i << 1) >> 1] | 0) | 0;
                $arrayidx43 = $sum + ($retval_0_i + 4 << 2) | 0;
                HEAP32[$arrayidx43 >> 2] = (HEAP32[$arrayidx43 >> 2] | 0) + 1 | 0;
                if (!$cmp29) {
                  label = 2673;
                  break;
                }
              }
              if ($col_1 >>> 0 < $conv32 >>> 0) {
                if (($8 | 0) == 2) {
                  $retval_0_i_1 = HEAP8[($col_1 + 6 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
                } else if (($8 | 0) == 1) {
                  $retval_0_i_1 = HEAP8[($conv_i + $col_1 & 15) + (5427792 + ($and3_i << 4)) | 0] << 24 >> 24;
                } else {
                  $retval_0_i_1 = $8 >>> (($col_1 & 1 | $and16_i) << 1 >>> 0) & 3;
                }
                $arrayidx40_1 = $sum + ($retval_0_i_1 << 2) | 0;
                HEAP32[$arrayidx40_1 >> 2] = (HEAP32[$arrayidx40_1 >> 2] | 0) + (HEAPU16[$9 + ($mul + $col_1 << 3) + ($retval_0_i_1 << 1) >> 1] | 0) | 0;
                $arrayidx43_1 = $sum + ($retval_0_i_1 + 4 << 2) | 0;
                HEAP32[$arrayidx43_1 >> 2] = (HEAP32[$arrayidx43_1 >> 2] | 0) + 1 | 0;
              }
              $inc45_1 = $col_1 + 1 | 0;
              if (!($cmp29 & $inc45_1 >>> 0 < $conv32 >>> 0)) {
                $inc45_176 = $inc45_1;
                break;
              }
              if (($8 | 0) == 2) {
                $retval_0_i_2 = HEAP8[($col_1 + 7 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
              } else if (($8 | 0) == 1) {
                $retval_0_i_2 = HEAP8[($conv_i + $inc45_1 & 15) + (5427792 + ($and3_i << 4)) | 0] << 24 >> 24;
              } else {
                $retval_0_i_2 = $8 >>> (($inc45_1 & 1 | $and16_i) << 1 >>> 0) & 3;
              }
              $arrayidx40_2 = $sum + ($retval_0_i_2 << 2) | 0;
              HEAP32[$arrayidx40_2 >> 2] = (HEAP32[$arrayidx40_2 >> 2] | 0) + (HEAPU16[$9 + ($mul + $inc45_1 << 3) + ($retval_0_i_2 << 1) >> 1] | 0) | 0;
              $arrayidx43_2 = $sum + ($retval_0_i_2 + 4 << 2) | 0;
              HEAP32[$arrayidx43_2 >> 2] = (HEAP32[$arrayidx43_2 >> 2] | 0) + 1 | 0;
              $inc45_176 = $inc45_1;
              break;
            } else {
              label = 2673;
            }
          } while (0);
          if ((label | 0) == 2673) {
            label = 0;
            $inc45_176 = $col_1 + 1 | 0;
          }
          $inc47 = $y_060 + 1 | 0;
          if (($inc47 | 0) == ($add | 0)) {
            break;
          } else {
            $y_060 = $inc47;
          }
        }
        if (($8 | 0) == 2) {
          $retval_0_i57 = HEAP8[($col_1 + 6 | 0) % 6 + (5427756 + ($rem11_i45 * 6 & -1)) | 0] << 24 >> 24;
        } else if (($8 | 0) == 1) {
          $retval_0_i57 = HEAP8[($conv_i + $col_1 & 15) + (5427792 + (($conv1_i + $row_069 & 15) << 4)) | 0] << 24 >> 24;
        } else {
          $retval_0_i57 = $8 >>> (($col_1 & 1 | $and16_i50) << 1 >>> 0) & 3;
        }
        $19 = HEAP32[1390240] | 0;
        if (($19 | 0) == 0) {
          $26 = $5;
        } else {
          $c_062 = 0;
          $20 = $19;
          while (1) {
            do {
              if (($c_062 | 0) == ($retval_0_i57 | 0)) {
                $25 = $20;
              } else {
                $21 = HEAP32[$sum + ($c_062 + 4 << 2) >> 2] | 0;
                if (($21 | 0) == 0) {
                  $25 = $20;
                  break;
                }
                $conv63 = ((HEAP32[$sum + ($c_062 << 2) >> 2] | 0) >>> 0) / ($21 >>> 0) >>> 0 & 65535;
                $add66 = Math_imul(HEAPU16[2621484] | 0, $row_069) + $col_1 | 0;
                HEAP16[(HEAP32[1316051] | 0) + ($add66 << 3) + ($c_062 << 1) >> 1] = $conv63;
                $25 = HEAP32[1390240] | 0;
              }
            } while (0);
            $inc71 = $c_062 + 1 | 0;
            if ($inc71 >>> 0 < $25 >>> 0) {
              $c_062 = $inc71;
              $20 = $25;
            } else {
              break;
            }
          }
          $26 = HEAP16[2621484] | 0;
        }
        $conv3 = $26 & 65535;
        if ($inc45_176 >>> 0 < $conv3 >>> 0) {
          $col_065 = $inc45_176;
          $conv366 = $conv3;
          $5 = $26;
        } else {
          break;
        }
      }
      $29 = $26;
      $28 = HEAP16[2699404] | 0;
      $27 = $26;
    }
    $inc77 = $row_069 + 1 | 0;
    if ($inc77 >>> 0 < ($28 & 65535) >>> 0) {
      $row_069 = $inc77;
      $4 = $29;
      $3 = $28;
      $2 = $27;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _pre_interpolate() {
  var $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_pre43 = 0, $12 = 0, $13 = 0, $14 = 0, $row_038 = 0, $and16_i = 0, $shr = 0, $rem11_i = 0, $15 = 0, $col_035 = 0, $16 = 0, $retval_0_i = 0, $add = 0, $23 = 0, $inc = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $inc22 = 0, $30 = 0, $33 = 0, $and = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $row_131 = 0, $and49 = 0, $conv5125 = 0, $conv5128 = 0, $col_127 = 0, $add57 = 0, $38 = 0, $add66 = 0, $40 = 0, $conv51 = 0, $41 = 0, $42 = 0, $43 = 0, $add69 = 0, $_lcssa = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  do {
    if (HEAP16[2622460] << 16 >> 16 != 0) {
      if ((HEAP32[1349703] | 0) != 0) {
        HEAP16[2699404] = HEAP16[2632104] | 0;
        HEAP16[2621484] = HEAP16[2632094] | 0;
        break;
      }
      $mul = Math_imul(HEAPU16[2621484] | 0, HEAPU16[2699404] | 0);
      do {
        if (($mul | 0) == 0) {
          $req_0_i = 0;
        } else {
          $mul_i = $mul << 3;
          if ($mul >>> 0 <= 65535) {
            $req_0_i = $mul_i;
            break;
          }
          $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 8 ? $mul_i : -1;
        }
      } while (0);
      $call_i = _malloc($req_0_i) | 0;
      if (($call_i | 0) == 0) {
        $8 = HEAP32[_stderr >> 2] | 0;
        $9 = HEAP32[1316054] | 0;
        _fprintf($8 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $9, HEAP32[tempInt + 4 >> 2] = 5577668, tempInt) | 0);
        _longjmp(5428048, 1);
      }
      if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
        _memset($call_i | 0, 0, $req_0_i | 0);
      }
      $10 = $call_i;
      $11 = HEAP16[2699404] | 0;
      L3843 : do {
        if ($11 << 16 >> 16 != 0) {
          $_pre43 = HEAP16[2621484] | 0;
          $row_038 = 0;
          $14 = $_pre43;
          $13 = $11;
          $12 = $_pre43;
          while (1) {
            if ($14 << 16 >> 16 == 0) {
              $27 = 0;
              $26 = $13;
              $25 = $12;
            } else {
              $and16_i = $row_038 << 1 & 14;
              $shr = $row_038 >> 1;
              $rem11_i = ($row_038 + 6 | 0) % 6;
              $col_035 = 0;
              $15 = $12;
              while (1) {
                $16 = HEAP32[1356938] | 0;
                if (($16 | 0) == 1) {
                  $retval_0_i = HEAP8[((HEAPU16[2631898] | 0) + $col_035 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_038 & 15) << 4)) | 0] << 24 >> 24;
                } else if (($16 | 0) == 2) {
                  $retval_0_i = HEAP8[($col_035 + 6 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
                } else {
                  $retval_0_i = $16 >>> (($col_035 & 1 | $and16_i) << 1 >>> 0) & 3;
                }
                $add = Math_imul(HEAPU16[2632094] | 0, $shr) + ($col_035 >> 1) | 0;
                $23 = HEAP16[(HEAP32[1316051] | 0) + ($add << 3) + ($retval_0_i << 1) >> 1] | 0;
                HEAP16[$10 + (Math_imul($15 & 65535, $row_038) + $col_035 << 3) + ($retval_0_i << 1) >> 1] = $23;
                $inc = $col_035 + 1 | 0;
                $24 = HEAP16[2621484] | 0;
                if (($inc | 0) < ($24 & 65535 | 0)) {
                  $col_035 = $inc;
                  $15 = $24;
                } else {
                  break;
                }
              }
              $27 = $24;
              $26 = HEAP16[2699404] | 0;
              $25 = $24;
            }
            $inc22 = $row_038 + 1 | 0;
            if (($inc22 | 0) < ($26 & 65535 | 0)) {
              $row_038 = $inc22;
              $14 = $27;
              $13 = $26;
              $12 = $25;
            } else {
              break L3843;
            }
          }
        }
      } while (0);
      _free(HEAP32[1316051] | 0);
      HEAP32[1316051] = $10;
      HEAP16[2622460] = 0;
    }
  } while (0);
  $30 = HEAP32[1356938] | 0;
  do {
    if ($30 >>> 0 > 1e3 & (HEAP32[1390240] | 0) == 3) {
      if ((HEAP32[1350790] | 0) != 0) {
        HEAP32[1390240] = 4;
        $33 = HEAP32[1349703] | 0;
        HEAP32[1315883] = ($33 | 0) == 0 & 1;
        $44 = $33;
        break;
      }
      $and = $30 >>> 5 & 1;
      $34 = HEAP16[2699404] | 0;
      L3865 : do {
        if ($and >>> 0 < ($34 & 65535) >>> 0) {
          $row_131 = $and;
          $37 = $30;
          $36 = HEAP16[2621484] | 0;
          $35 = $34;
          while (1) {
            $and49 = $37 >>> (($row_131 << 2 & 28 | 2) >>> 0) & 1;
            $conv5125 = $36 & 65535;
            if ($and49 >>> 0 < $conv5125 >>> 0) {
              $col_127 = $and49;
              $conv5128 = $conv5125;
              while (1) {
                $add57 = Math_imul($conv5128, $row_131) + $col_127 | 0;
                $38 = HEAP32[1316051] | 0;
                HEAP16[$38 + ($add57 << 3) + 2 >> 1] = HEAP16[$38 + ($add57 << 3) + 6 >> 1] | 0;
                $add66 = $col_127 + 2 | 0;
                $40 = HEAP16[2621484] | 0;
                $conv51 = $40 & 65535;
                if (($add66 | 0) < ($conv51 | 0)) {
                  $col_127 = $add66;
                  $conv5128 = $conv51;
                } else {
                  break;
                }
              }
              $43 = $40;
              $42 = HEAP16[2699404] | 0;
              $41 = HEAP32[1356938] | 0;
            } else {
              $43 = $36;
              $42 = $35;
              $41 = $37;
            }
            $add69 = $row_131 + 2 | 0;
            if (($add69 | 0) < ($42 & 65535 | 0)) {
              $row_131 = $add69;
              $37 = $41;
              $36 = $43;
              $35 = $42;
            } else {
              $_lcssa = $41;
              break L3865;
            }
          }
        } else {
          $_lcssa = $30;
        }
      } while (0);
      HEAP32[1356938] = (($_lcssa << 1 | 1431655765) ^ -1431655766) & $_lcssa;
      label = 2715;
      break;
    } else {
      label = 2715;
    }
  } while (0);
  if ((label | 0) == 2715) {
    $44 = HEAP32[1349703] | 0;
  }
  if (($44 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1356938] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _lin_interpolate() {
  var $code = 0, $sum = 0, $1 = 0, $_ = 0, $4 = 0, $row_0107 = 0, $and16_i = 0, $rem11_i = 0, $5 = 0, $col_0106 = 0, $arraydecay = 0, $add_ptr = 0, $6 = 0, $retval_0_i = 0, $11 = 0, $ip_0102 = 0, $y_0101 = 0, $cmp15 = 0, $conv = 0, $add18 = 0, $and16_i73 = 0, $rem11_i68 = 0, $add19 = 0, $retval_0_i80 = 0, $arrayidx31 = 0, $18 = 0, $ip_2 = 0, $add_1 = 0, $19 = 0, $20 = 0, $ip_3105 = 0, $c_0104 = 0, $22 = 0, $ip_4 = 0, $inc55 = 0, $inc61 = 0, $23 = 0, $24 = 0, $row_197 = 0, $conv6989 = 0, $rem79 = 0, $scevgep_sum116 = 0, $26 = 0, $conv6993 = 0, $col_192 = 0, $add76 = 0, $27 = 0, $rem = 0, $incdec_ptr83 = 0, $28 = 0, $31 = 0, $ip_584 = 0, $i_083 = 0, $dec = 0, $arrayidx93 = 0, $ip_5_lcssa = 0, $dec9985 = 0, $dec9988 = 0, $ip_687 = 0, $38 = 0, $dec99 = 0, $41 = 0, $inc113 = 0, $conv69 = 0, $42 = 0, $43 = 0, $inc116 = 0, $retval_0_i80_1 = 0, $arrayidx31_1 = 0, $50 = 0, $ip_2_1 = 0, $add19_2 = 0, $retval_0_i80_2 = 0, $arrayidx31_2 = 0, $ip_2_2 = 0, $inc34 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32784 | 0;
  $code = __stackBase__ | 0;
  $sum = __stackBase__ + 32768 | 0;
  if ((HEAP32[1310884] | 0) != 0) {
    $1 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5577560, 26, 1, $1 | 0);
  }
  $_ = (HEAP32[1356938] | 0) == 2 ? 6 : 16;
  _border_interpolate(1);
  $4 = $sum;
  $row_0107 = 0;
  while (1) {
    $and16_i = $row_0107 << 1 & 14;
    $rem11_i = ($row_0107 + 6 | 0) % 6;
    $col_0106 = 0;
    while (1) {
      $arraydecay = $code + ($row_0107 << 11) + ($col_0106 << 7) | 0;
      $add_ptr = $code + ($row_0107 << 11) + ($col_0106 << 7) + 4 | 0;
      $6 = HEAP32[1356938] | 0;
      if (($6 | 0) == 2) {
        $retval_0_i = HEAP8[($col_0106 + 6 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
      } else if (($6 | 0) == 1) {
        $retval_0_i = HEAP8[((HEAPU16[2631898] | 0) + $col_0106 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_0107 & 15) << 4)) | 0] << 24 >> 24;
      } else {
        $retval_0_i = $6 >>> (($col_0106 & 1 | $and16_i) << 1 >>> 0) & 3;
      }
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      $y_0101 = -1;
      $ip_0102 = $add_ptr;
      $11 = $6;
      while (1) {
        $cmp15 = ($y_0101 | 0) == 0;
        $conv = $cmp15 & 1;
        $add18 = $y_0101 + $row_0107 | 0;
        $and16_i73 = $add18 << 1 & 14;
        $rem11_i68 = ($add18 + 6 | 0) % 6;
        $add19 = $col_0106 - 1 | 0;
        if (($11 | 0) == 2) {
          $retval_0_i80 = HEAP8[($col_0106 + 5 | 0) % 6 + (5427756 + ($rem11_i68 * 6 & -1)) | 0] << 24 >> 24;
        } else if (($11 | 0) == 1) {
          $retval_0_i80 = HEAP8[((HEAPU16[2631898] | 0) + $add19 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add18 & 15) << 4)) | 0] << 24 >> 24;
        } else {
          $retval_0_i80 = $11 >>> (($add19 & 1 | $and16_i73) << 1 >>> 0) & 3;
        }
        if (($retval_0_i80 | 0) == ($retval_0_i | 0)) {
          $ip_2 = $ip_0102;
          $18 = $11;
        } else {
          HEAP32[$ip_0102 >> 2] = ((Math_imul(HEAPU16[2621484] | 0, $y_0101) << 2) - 4 | 0) + $retval_0_i80 | 0;
          HEAP32[$ip_0102 + 4 >> 2] = $conv;
          HEAP32[$ip_0102 + 8 >> 2] = $retval_0_i80;
          $arrayidx31 = $sum + ($retval_0_i80 << 2) | 0;
          HEAP32[$arrayidx31 >> 2] = (HEAP32[$arrayidx31 >> 2] | 0) + (1 << $conv) | 0;
          $ip_2 = $ip_0102 + 12 | 0;
          $18 = HEAP32[1356938] | 0;
        }
        $add_1 = $cmp15 ? 2 : 1;
        if (($18 | 0) == 2) {
          $retval_0_i80_1 = HEAP8[($col_0106 + 6 | 0) % 6 + (5427756 + ($rem11_i68 * 6 & -1)) | 0] << 24 >> 24;
        } else if (($18 | 0) == 1) {
          $retval_0_i80_1 = HEAP8[((HEAPU16[2631898] | 0) + $col_0106 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add18 & 15) << 4)) | 0] << 24 >> 24;
        } else {
          $retval_0_i80_1 = $18 >>> (($col_0106 & 1 | $and16_i73) << 1 >>> 0) & 3;
        }
        if (($retval_0_i80_1 | 0) == ($retval_0_i | 0)) {
          $ip_2_1 = $ip_2;
          $50 = $18;
        } else {
          HEAP32[$ip_2 >> 2] = (Math_imul(HEAPU16[2621484] | 0, $y_0101) << 2) + $retval_0_i80_1 | 0;
          HEAP32[$ip_2 + 4 >> 2] = $add_1;
          HEAP32[$ip_2 + 8 >> 2] = $retval_0_i80_1;
          $arrayidx31_1 = $sum + ($retval_0_i80_1 << 2) | 0;
          HEAP32[$arrayidx31_1 >> 2] = (HEAP32[$arrayidx31_1 >> 2] | 0) + (1 << $add_1) | 0;
          $ip_2_1 = $ip_2 + 12 | 0;
          $50 = HEAP32[1356938] | 0;
        }
        $add19_2 = $col_0106 + 1 | 0;
        if (($50 | 0) == 1) {
          $retval_0_i80_2 = HEAP8[((HEAPU16[2631898] | 0) + $add19_2 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add18 & 15) << 4)) | 0] << 24 >> 24;
        } else if (($50 | 0) == 2) {
          $retval_0_i80_2 = HEAP8[($col_0106 + 7 | 0) % 6 + (5427756 + ($rem11_i68 * 6 & -1)) | 0] << 24 >> 24;
        } else {
          $retval_0_i80_2 = $50 >>> (($add19_2 & 1 | $and16_i73) << 1 >>> 0) & 3;
        }
        if (($retval_0_i80_2 | 0) == ($retval_0_i | 0)) {
          $ip_2_2 = $ip_2_1;
        } else {
          HEAP32[$ip_2_1 >> 2] = ((Math_imul(HEAPU16[2621484] | 0, $y_0101) << 2) + 4 | 0) + $retval_0_i80_2 | 0;
          HEAP32[$ip_2_1 + 4 >> 2] = $conv;
          HEAP32[$ip_2_1 + 8 >> 2] = $retval_0_i80_2;
          $arrayidx31_2 = $sum + ($retval_0_i80_2 << 2) | 0;
          HEAP32[$arrayidx31_2 >> 2] = (HEAP32[$arrayidx31_2 >> 2] | 0) + (1 << $conv) | 0;
          $ip_2_2 = $ip_2_1 + 12 | 0;
        }
        $inc34 = $y_0101 + 1 | 0;
        if (($inc34 | 0) == 2) {
          break;
        }
        $y_0101 = $inc34;
        $ip_0102 = $ip_2_2;
        $11 = HEAP32[1356938] | 0;
      }
      HEAP32[$arraydecay >> 2] = ($ip_2_2 - $arraydecay >> 2 | 0) / 3 & -1;
      $19 = HEAP32[1390240] | 0;
      L3923 : do {
        if (($19 | 0) > 0) {
          $c_0104 = 0;
          $ip_3105 = $ip_2_2;
          $20 = $19;
          while (1) {
            if (($c_0104 | 0) == ($retval_0_i | 0)) {
              $ip_4 = $ip_3105;
              $22 = $20;
            } else {
              HEAP32[$ip_3105 >> 2] = $c_0104;
              HEAP32[$ip_3105 + 4 >> 2] = 256 / (HEAP32[$sum + ($c_0104 << 2) >> 2] | 0) & -1;
              $ip_4 = $ip_3105 + 8 | 0;
              $22 = HEAP32[1390240] | 0;
            }
            $inc55 = $c_0104 + 1 | 0;
            if (($inc55 | 0) < ($22 | 0)) {
              $c_0104 = $inc55;
              $ip_3105 = $ip_4;
              $20 = $22;
            } else {
              break L3923;
            }
          }
        }
      } while (0);
      if (($add19_2 | 0) < ($_ | 0)) {
        $col_0106 = $add19_2;
      } else {
        break;
      }
    }
    $inc61 = $row_0107 + 1 | 0;
    if (($inc61 | 0) < ($_ | 0)) {
      $row_0107 = $inc61;
    } else {
      break;
    }
  }
  $5 = HEAP16[2699404] | 0;
  if ((($5 & 65535) - 1 | 0) <= 1) {
    STACKTOP = __stackBase__;
    return;
  }
  $row_197 = 1;
  $24 = HEAP16[2621484] | 0;
  $23 = $5;
  while (1) {
    $conv6989 = $24 & 65535;
    if (($conv6989 - 1 | 0) > 1) {
      $rem79 = ($row_197 | 0) % ($_ | 0);
      $scevgep_sum116 = $rem79 << 9 | 1;
      $col_192 = 1;
      $conv6993 = $conv6989;
      $26 = $24;
      while (1) {
        $add76 = Math_imul($conv6993, $row_197) + $col_192 | 0;
        $27 = HEAP32[1316051] | 0;
        $rem = ($col_192 | 0) % ($_ | 0);
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = 0;
        HEAP32[$4 + 8 >> 2] = 0;
        HEAP32[$4 + 12 >> 2] = 0;
        $incdec_ptr83 = $code + ($rem79 << 11) + ($rem << 7) + 4 | 0;
        $28 = HEAP32[$code + ($rem79 << 11) + ($rem << 7) >> 2] | 0;
        if (($28 | 0) == 0) {
          $ip_5_lcssa = $incdec_ptr83;
        } else {
          $31 = ($rem << 5) + ($28 * 3 & -1) | 0;
          $i_083 = $28;
          $ip_584 = $incdec_ptr83;
          while (1) {
            $dec = $i_083 - 1 | 0;
            $arrayidx93 = $sum + (HEAP32[$ip_584 + 8 >> 2] << 2) | 0;
            HEAP32[$arrayidx93 >> 2] = (HEAP32[$arrayidx93 >> 2] | 0) + ((HEAPU16[$27 + ($add76 << 3) + (HEAP32[$ip_584 >> 2] << 1) >> 1] | 0) << HEAP32[$ip_584 + 4 >> 2]) | 0;
            if (($dec | 0) == 0) {
              break;
            } else {
              $i_083 = $dec;
              $ip_584 = $ip_584 + 12 | 0;
            }
          }
          $ip_5_lcssa = $code + ($scevgep_sum116 + $31 << 2) | 0;
        }
        $dec9985 = (HEAP32[1390240] | 0) - 1 | 0;
        if (($dec9985 | 0) == 0) {
          $41 = $26;
        } else {
          $ip_687 = $ip_5_lcssa;
          $dec9988 = $dec9985;
          while (1) {
            $38 = HEAP32[$ip_687 >> 2] | 0;
            HEAP16[$27 + ($add76 << 3) + ($38 << 1) >> 1] = Math_imul(HEAP32[$ip_687 + 4 >> 2] | 0, HEAP32[$sum + ($38 << 2) >> 2] | 0) >>> 8 & 65535;
            $dec99 = $dec9988 - 1 | 0;
            if (($dec99 | 0) == 0) {
              break;
            } else {
              $ip_687 = $ip_687 + 8 | 0;
              $dec9988 = $dec99;
            }
          }
          $41 = HEAP16[2621484] | 0;
        }
        $inc113 = $col_192 + 1 | 0;
        $conv69 = $41 & 65535;
        if (($inc113 | 0) < ($conv69 - 1 | 0)) {
          $col_192 = $inc113;
          $conv6993 = $conv69;
          $26 = $41;
        } else {
          break;
        }
      }
      $43 = $41;
      $42 = HEAP16[2699404] | 0;
    } else {
      $43 = $24;
      $42 = $23;
    }
    $inc116 = $row_197 + 1 | 0;
    if (($inc116 | 0) < (($42 & 65535) - 1 | 0)) {
      $row_197 = $inc116;
      $24 = $43;
      $23 = $42;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _vng_interpolate() {
  var $brow = 0, $code = 0, $gval = 0, $sum = 0, $1 = 0, $3 = 0, $cmp = 0, $cmp3 = 0, $pcol_1 = 0, $prow_1 = 0, $mul_i = 0, $call_i = 0, $6 = 0, $7 = 0, $ip_0406 = 0, $row_0405 = 0, $and16_i196 = 0, $add38 = 0, $and16_i222 = 0, $rem11_i217 = 0, $rem11_i191 = 0, $ip_1404 = 0, $col_0403 = 0, $add34 = 0, $shl19_i199 = 0, $and17_i223 = 0, $shl19_i225 = 0, $rem_i215 = 0, $arrayidx13_i218 = 0, $arrayidx13_i192 = 0, $9 = 0, $ip_2400 = 0, $t_0399 = 0, $incdec_ptr = 0, $conv = 0, $incdec_ptr15 = 0, $conv16 = 0, $incdec_ptr17 = 0, $conv18 = 0, $incdec_ptr19 = 0, $conv20 = 0, $incdec_ptr21 = 0, $conv22 = 0, $conv24 = 0, $add = 0, $add25 = 0, $16 = 0, $retval_0_i432 = 0, $retval_0_i177 = 0, $retval_0_i203 = 0, $retval_0_i229 = 0, $33 = 0, $sub = 0, $sub45 = 0, $incdec_ptr63 = 0, $ip_4 = 0, $ip_5 = 0, $shl19_i282 = 0, $arrayidx13_i275 = 0, $36 = 0, $g_1402 = 0, $ip_6401 = 0, $incdec_ptr81 = 0, $conv82 = 0, $conv84 = 0, $incdec_ptr89 = 0, $40 = 0, $retval_0_i286444 = 0, $retval_0_i312 = 0, $add98 = 0, $add100 = 0, $retval_0_i356 = 0, $storemerge = 0, $scevgep = 0, $conv122 = 0, $mul123 = 0, $mul_i314 = 0, $req_0_i322 = 0, $call_i323 = 0, $57 = 0, $58 = 0, $59 = 0, $arrayidx125360 = 0, $60 = 0, $conv132 = 0, $arrayidx134 = 0, $add_ptr_1 = 0, $arrayidx134_1 = 0, $add_ptr_2 = 0, $arrayidx134_2 = 0, $62 = 0, $arrayidx202 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $row_2393 = 0, $conv145381 = 0, $rem154 = 0, $and16_i248 = 0, $rem11_i243 = 0, $conv145387 = 0, $col_1384 = 0, $add152 = 0, $67 = 0, $arraydecay = 0, $68 = 0, $69 = 0, $70 = 0, $ip_8366 = 0, $sub165 = 0, $shr = 0, $shl181 = 0, $arrayidx183 = 0, $add_ptr185 = 0, $77 = 0, $ip_8_be = 0, $78 = 0, $arrayidx191 = 0, $incdec_ptr194362 = 0, $80 = 0, $81 = 0, $incdec_ptr194364 = 0, $arrayidx198 = 0, $incdec_ptr194 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $ip_8_lcssa = 0, $_gmin_0 = 0, $gmax_1 = 0, $_gmin_0_1 = 0, $gmax_1_1 = 0, $_gmin_0_2 = 0, $gmax_1_2 = 0, $_gmin_0_3 = 0, $gmax_1_3 = 0, $_gmin_0_4 = 0, $gmax_1_4 = 0, $_gmin_0_5 = 0, $gmax_1_5 = 0, $gmax_1_6 = 0, $incdec_ptr201 = 0, $92 = 0, $93 = 0, $ld$0$0 = 0, $ld$1$1 = 0, $94$1 = 0, $st$2$0 = 0, $st$3$1 = 0, $add229 = 0, $95 = 0, $retval_0_i255 = 0, $100 = 0, $num_0378 = 0, $g_3377 = 0, $ip_10374 = 0, $101 = 0, $arrayidx246 = 0, $c_0372 = 0, $102 = 0, $arrayidx256 = 0, $arrayidx263 = 0, $inc267 = 0, $num_1 = 0, $_pre426 = 0, $arrayidx279 = 0, $arrayidx285 = 0, $c_1380 = 0, $conv280 = 0, $t_1 = 0, $cond291 = 0, $inc309 = 0, $inc312 = 0, $conv145 = 0, $conv145_lcssa = 0, $add320 = 0, $118 = 0, $119 = 0, $inc340 = 0, $_pre425 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $row_2_lcssa = 0, $sub342 = 0, $conv343 = 0, $mul344 = 0, $add345 = 0, $125 = 0, $arrayidx346 = 0, $126 = 0, $add_ptr348 = 0, $127 = 0, $sub350 = 0, $mul351 = 0, $sub352 = 0, $128 = 0, $conv353 = 0, $mul354 = 0, $add355 = 0, $129 = 0, $arrayidx356 = 0, $130 = 0, $add_ptr358 = 0, $131 = 0, $sub360 = 0, $mul361 = 0, $132 = 0, $arrayidx364 = 0, $133 = 0, $134 = 0, $ip_4_1 = 0, $ip_4_2 = 0, $ip_4_3 = 0, $ip_4_4 = 0, $ip_4_5 = 0, $ip_4_6 = 0, $ip_4_7 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1092 | 0;
  $brow = __stackBase__ | 0;
  $code = __stackBase__ + 20 | 0;
  $gval = __stackBase__ + 1044 | 0;
  $sum = __stackBase__ + 1076 | 0;
  _lin_interpolate();
  if ((HEAP32[1310884] | 0) != 0) {
    $1 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5577456, 21, 1, $1 | 0);
  }
  $3 = HEAP32[1356938] | 0;
  $cmp = ($3 | 0) == 1;
  $cmp3 = ($3 | 0) == 2;
  $pcol_1 = $cmp3 ? 6 : $cmp ? 16 : 2;
  $prow_1 = $cmp3 ? 6 : $cmp ? 16 : 8;
  $mul_i = Math_imul($pcol_1 * 1280 & -1, $prow_1);
  $call_i = _malloc($mul_i) | 0;
  if (($call_i | 0) == 0) {
    $6 = HEAP32[_stderr >> 2] | 0;
    $7 = HEAP32[1316054] | 0;
    _fprintf($6 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $7, HEAP32[tempInt + 4 >> 2] = 5577360, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $mul_i | 0);
  }
  $row_0405 = 0;
  $ip_0406 = $call_i;
  while (1) {
    $and16_i196 = $row_0405 << 1 & 14;
    $add38 = $row_0405 + 1 | 0;
    $and16_i222 = $add38 << 1 & 14;
    $rem11_i217 = ($row_0405 + 7 | 0) % 6;
    $rem11_i191 = ($row_0405 + 6 | 0) % 6;
    $col_0403 = 0;
    $ip_1404 = $ip_0406;
    while (1) {
      HEAP32[$code + ($row_0405 << 6) + ($col_0403 << 2) >> 2] = $ip_1404;
      HEAP32[1310879] = 5243132;
      $add34 = $col_0403 + 1 | 0;
      $shl19_i199 = ($add34 & 1 | $and16_i196) << 1;
      $and17_i223 = $col_0403 & 1;
      $shl19_i225 = ($and17_i223 | $and16_i222) << 1;
      $rem_i215 = ($col_0403 + 6 | 0) % 6;
      $arrayidx13_i218 = 5427756 + ($rem11_i217 * 6 & -1) + $rem_i215 | 0;
      $arrayidx13_i192 = ($col_0403 + 7 | 0) % 6 + (5427756 + ($rem11_i191 * 6 & -1)) | 0;
      $t_0399 = 1;
      $ip_2400 = $ip_1404;
      $9 = 5243132;
      while (1) {
        $incdec_ptr = $9 + 1 | 0;
        HEAP32[1310879] = $incdec_ptr;
        $conv = HEAP8[$9] << 24 >> 24;
        $incdec_ptr15 = $9 + 2 | 0;
        HEAP32[1310879] = $incdec_ptr15;
        $conv16 = HEAP8[$incdec_ptr] << 24 >> 24;
        $incdec_ptr17 = $9 + 3 | 0;
        HEAP32[1310879] = $incdec_ptr17;
        $conv18 = HEAP8[$incdec_ptr15] << 24 >> 24;
        $incdec_ptr19 = $9 + 4 | 0;
        HEAP32[1310879] = $incdec_ptr19;
        $conv20 = HEAP8[$incdec_ptr17] << 24 >> 24;
        $incdec_ptr21 = $9 + 5 | 0;
        HEAP32[1310879] = $incdec_ptr21;
        $conv22 = HEAP8[$incdec_ptr19] << 24 >> 24;
        HEAP32[1310879] = $9 + 6 | 0;
        $conv24 = HEAP8[$incdec_ptr21] << 24 >> 24;
        $add = $conv + $row_0405 | 0;
        $add25 = $conv16 + $col_0403 | 0;
        $16 = HEAP32[1356938] | 0;
        if (($16 | 0) == 1) {
          $retval_0_i177 = HEAP8[((HEAPU16[2631898] | 0) + ($conv20 + $col_0403 | 0) & 15) + (5427792 + (((HEAPU16[2621786] | 0) + ($conv18 + $row_0405 | 0) & 15) << 4)) | 0] << 24 >> 24;
          $retval_0_i432 = HEAP8[((HEAPU16[2631898] | 0) + $add25 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add & 15) << 4)) | 0] << 24 >> 24;
        } else if (($16 | 0) == 2) {
          $retval_0_i177 = HEAP8[(($conv20 + $col_0403 | 0) + 6 | 0) % 6 + (5427756 + ((($conv18 + $row_0405 | 0) + 6 | 0) % 6 * 6 & -1)) | 0] << 24 >> 24;
          $retval_0_i432 = HEAP8[($add25 + 6 | 0) % 6 + (5427756 + (($add + 6 | 0) % 6 * 6 & -1)) | 0] << 24 >> 24;
        } else {
          $retval_0_i177 = $16 >>> (($conv18 + $row_0405 << 1 & 14 | $conv20 + $col_0403 & 1) << 1 >>> 0) & 3;
          $retval_0_i432 = $16 >>> (($add << 1 & 14 | $add25 & 1) << 1 >>> 0) & 3;
        }
        do {
          if (($retval_0_i177 | 0) == ($retval_0_i432 | 0)) {
            if (($16 | 0) == 1) {
              $retval_0_i203 = HEAP8[((HEAPU16[2631898] | 0) + $add34 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_0405 & 15) << 4)) | 0] << 24 >> 24;
            } else if (($16 | 0) == 2) {
              $retval_0_i203 = HEAP8[$arrayidx13_i192] << 24 >> 24;
            } else {
              $retval_0_i203 = $16 >>> ($shl19_i199 >>> 0) & 3;
            }
            if (($retval_0_i203 | 0) == ($retval_0_i432 | 0)) {
              if (($16 | 0) == 2) {
                $retval_0_i229 = HEAP8[$arrayidx13_i218] << 24 >> 24;
              } else if (($16 | 0) == 1) {
                $retval_0_i229 = HEAP8[((HEAPU16[2631898] | 0) + $col_0403 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add38 & 15) << 4)) | 0] << 24 >> 24;
              } else {
                $retval_0_i229 = $16 >>> ($shl19_i225 >>> 0) & 3;
              }
              $33 = ($retval_0_i229 | 0) == ($retval_0_i432 | 0) ? 2 : 1;
            } else {
              $33 = 1;
            }
            $sub = $conv - $conv18 | 0;
            if (((($sub | 0) > -1 ? $sub : -$sub | 0) | 0) == ($33 | 0)) {
              $sub45 = $conv16 - $conv20 | 0;
              if (((($sub45 | 0) > -1 ? $sub45 : -$sub45 | 0) | 0) == ($33 | 0)) {
                $ip_5 = $ip_2400;
                break;
              }
            }
            HEAP32[$ip_2400 >> 2] = (Math_imul(HEAPU16[2621484] | 0, $conv) + $conv16 << 2) + $retval_0_i432 | 0;
            HEAP32[$ip_2400 + 4 >> 2] = (Math_imul(HEAPU16[2621484] | 0, $conv18) + $conv20 << 2) + $retval_0_i432 | 0;
            $incdec_ptr63 = $ip_2400 + 12 | 0;
            HEAP32[$ip_2400 + 8 >> 2] = $conv22;
            if (($conv24 & 1 | 0) == 0) {
              $ip_4 = $incdec_ptr63;
            } else {
              HEAP32[$incdec_ptr63 >> 2] = 0;
              $ip_4 = $ip_2400 + 16 | 0;
            }
            if (($conv24 & 2 | 0) == 0) {
              $ip_4_1 = $ip_4;
            } else {
              HEAP32[$ip_4 >> 2] = 1;
              $ip_4_1 = $ip_4 + 4 | 0;
            }
            if (($conv24 & 4 | 0) == 0) {
              $ip_4_2 = $ip_4_1;
            } else {
              HEAP32[$ip_4_1 >> 2] = 2;
              $ip_4_2 = $ip_4_1 + 4 | 0;
            }
            if (($conv24 & 8 | 0) == 0) {
              $ip_4_3 = $ip_4_2;
            } else {
              HEAP32[$ip_4_2 >> 2] = 3;
              $ip_4_3 = $ip_4_2 + 4 | 0;
            }
            if (($conv24 & 16 | 0) == 0) {
              $ip_4_4 = $ip_4_3;
            } else {
              HEAP32[$ip_4_3 >> 2] = 4;
              $ip_4_4 = $ip_4_3 + 4 | 0;
            }
            if (($conv24 & 32 | 0) == 0) {
              $ip_4_5 = $ip_4_4;
            } else {
              HEAP32[$ip_4_4 >> 2] = 5;
              $ip_4_5 = $ip_4_4 + 4 | 0;
            }
            if (($conv24 & 64 | 0) == 0) {
              $ip_4_6 = $ip_4_5;
            } else {
              HEAP32[$ip_4_5 >> 2] = 6;
              $ip_4_6 = $ip_4_5 + 4 | 0;
            }
            if (($conv24 & 128 | 0) == 0) {
              $ip_4_7 = $ip_4_6;
            } else {
              HEAP32[$ip_4_6 >> 2] = 7;
              $ip_4_7 = $ip_4_6 + 4 | 0;
            }
            HEAP32[$ip_4_7 >> 2] = -1;
            $ip_5 = $ip_4_7 + 4 | 0;
          } else {
            $ip_5 = $ip_2400;
          }
        } while (0);
        if (($t_0399 | 0) == 64) {
          break;
        }
        $t_0399 = $t_0399 + 1 | 0;
        $ip_2400 = $ip_5;
        $9 = HEAP32[1310879] | 0;
      }
      HEAP32[$ip_5 >> 2] = 2147483647;
      HEAP32[1310879] = 5243520;
      $shl19_i282 = ($and17_i223 | $and16_i196) << 1;
      $arrayidx13_i275 = 5427756 + ($rem11_i191 * 6 & -1) + $rem_i215 | 0;
      $ip_6401 = $ip_5 + 4 | 0;
      $g_1402 = 1;
      $36 = 5243520;
      while (1) {
        $incdec_ptr81 = $36 + 1 | 0;
        HEAP32[1310879] = $incdec_ptr81;
        $conv82 = HEAP8[$36] << 24 >> 24;
        HEAP32[1310879] = $36 + 2 | 0;
        $conv84 = HEAP8[$incdec_ptr81] << 24 >> 24;
        $incdec_ptr89 = $ip_6401 + 4 | 0;
        HEAP32[$ip_6401 >> 2] = Math_imul(HEAPU16[2621484] | 0, $conv82) + $conv84 << 2;
        $40 = HEAP32[1356938] | 0;
        if (($40 | 0) == 1) {
          $retval_0_i312 = HEAP8[((HEAPU16[2631898] | 0) + ($conv84 + $col_0403 | 0) & 15) + (5427792 + (((HEAPU16[2621786] | 0) + ($conv82 + $row_0405 | 0) & 15) << 4)) | 0] << 24 >> 24;
          $retval_0_i286444 = HEAP8[((HEAPU16[2631898] | 0) + $col_0403 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_0405 & 15) << 4)) | 0] << 24 >> 24;
        } else if (($40 | 0) == 2) {
          $retval_0_i312 = HEAP8[(($conv84 + $col_0403 | 0) + 6 | 0) % 6 + (5427756 + ((($conv82 + $row_0405 | 0) + 6 | 0) % 6 * 6 & -1)) | 0] << 24 >> 24;
          $retval_0_i286444 = HEAP8[$arrayidx13_i275] << 24 >> 24;
        } else {
          $retval_0_i312 = $40 >>> (($conv82 + $row_0405 << 1 & 14 | $conv84 + $col_0403 & 1) << 1 >>> 0) & 3;
          $retval_0_i286444 = $40 >>> ($shl19_i282 >>> 0) & 3;
        }
        do {
          if (($retval_0_i312 | 0) == ($retval_0_i286444 | 0)) {
            $storemerge = 0;
          } else {
            $add98 = ($conv82 << 1) + $row_0405 | 0;
            $add100 = ($conv84 << 1) + $col_0403 | 0;
            if (($40 | 0) == 1) {
              $retval_0_i356 = HEAP8[((HEAPU16[2631898] | 0) + $add100 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $add98 & 15) << 4)) | 0] << 24 >> 24;
            } else if (($40 | 0) == 2) {
              $retval_0_i356 = HEAP8[($add100 + 6 | 0) % 6 + (5427756 + (($add98 + 6 | 0) % 6 * 6 & -1)) | 0] << 24 >> 24;
            } else {
              $retval_0_i356 = $40 >>> (($add98 << 1 & 14 | $add100 & 1) << 1 >>> 0) & 3;
            }
            if (($retval_0_i356 | 0) != ($retval_0_i286444 | 0)) {
              $storemerge = 0;
              break;
            }
            $storemerge = (Math_imul(HEAPU16[2621484] | 0, $conv82) + $conv84 << 3) + $retval_0_i286444 | 0;
          }
        } while (0);
        HEAP32[$incdec_ptr89 >> 2] = $storemerge;
        if (($g_1402 | 0) == 8) {
          break;
        }
        $ip_6401 = $ip_6401 + 8 | 0;
        $g_1402 = $g_1402 + 1 | 0;
        $36 = HEAP32[1310879] | 0;
      }
      $scevgep = $ip_5 + 68 | 0;
      if (($add34 | 0) < ($pcol_1 | 0)) {
        $col_0403 = $add34;
        $ip_1404 = $scevgep;
      } else {
        break;
      }
    }
    if (($add38 | 0) < ($prow_1 | 0)) {
      $row_0405 = $add38;
      $ip_0406 = $scevgep;
    } else {
      break;
    }
  }
  $conv122 = HEAPU16[2621484] | 0;
  $mul123 = $conv122 * 3 & -1;
  do {
    if (($mul123 | 0) == 0) {
      $req_0_i322 = 0;
    } else {
      $mul_i314 = $conv122 * 24 & -1;
      if ($mul123 >>> 0 <= 65535) {
        $req_0_i322 = $mul_i314;
        break;
      }
      $req_0_i322 = (($mul_i314 >>> 0) / ($mul123 >>> 0) >>> 0 | 0) == 8 ? $mul_i314 : -1;
    }
  } while (0);
  $call_i323 = _malloc($req_0_i322) | 0;
  if (($call_i323 | 0) == 0) {
    $57 = HEAP32[_stderr >> 2] | 0;
    $58 = HEAP32[1316054] | 0;
    _fprintf($57 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $58, HEAP32[tempInt + 4 >> 2] = 5577360, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i323 - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i323 | 0, 0, $req_0_i322 | 0);
  }
  $59 = $call_i323;
  $arrayidx125360 = $brow + 16 | 0;
  HEAP32[$arrayidx125360 >> 2] = $59;
  $60 = HEAP16[2621484] | 0;
  $conv132 = $60 & 65535;
  $arrayidx134 = $brow | 0;
  HEAP32[$arrayidx134 >> 2] = $59;
  $add_ptr_1 = $59 + ($conv132 << 3) | 0;
  $arrayidx134_1 = $brow + 4 | 0;
  HEAP32[$arrayidx134_1 >> 2] = $add_ptr_1;
  $add_ptr_2 = $59 + ($conv132 << 1 << 3) | 0;
  $arrayidx134_2 = $brow + 8 | 0;
  HEAP32[$arrayidx134_2 >> 2] = $add_ptr_2;
  if (((HEAPU16[2699404] | 0) - 2 | 0) <= 2) {
    $row_2_lcssa = 2;
    $124 = $60;
    $123 = $59;
    $122 = $add_ptr_1;
    $121 = $59;
    $sub342 = $row_2_lcssa - 2 | 0;
    $conv343 = $124 & 65535;
    $mul344 = Math_imul($conv343, $sub342);
    $add345 = $mul344 + 2 | 0;
    $125 = HEAP32[1316051] | 0;
    $arrayidx346 = $125 + ($add345 << 3) | 0;
    $126 = $arrayidx346;
    $add_ptr348 = $123 + 16 | 0;
    $127 = $add_ptr348;
    $sub350 = $conv343 << 3;
    $mul351 = $sub350 - 32 | 0;
    _memcpy($126, $127, $mul351);
    $sub352 = $row_2_lcssa - 1 | 0;
    $128 = HEAP16[2621484] | 0;
    $conv353 = $128 & 65535;
    $mul354 = Math_imul($conv353, $sub352);
    $add355 = $mul354 + 2 | 0;
    $129 = HEAP32[1316051] | 0;
    $arrayidx356 = $129 + ($add355 << 3) | 0;
    $130 = $arrayidx356;
    $add_ptr358 = $122 + 16 | 0;
    $131 = $add_ptr358;
    $sub360 = $conv353 << 3;
    $mul361 = $sub360 - 32 | 0;
    _memcpy($130, $131, $mul361);
    $132 = $121;
    _free($132);
    $arrayidx364 = $code | 0;
    $133 = HEAP32[$arrayidx364 >> 2] | 0;
    $134 = $133;
    _free($134);
    STACKTOP = __stackBase__;
    return;
  }
  $62 = $gval;
  $arrayidx202 = $gval | 0;
  $63 = $sum;
  $row_2393 = 2;
  $66 = $add_ptr_2;
  $65 = $60;
  $64 = $59;
  while (1) {
    $conv145381 = $65 & 65535;
    L4056 : do {
      if (($conv145381 - 2 | 0) > 2) {
        $rem154 = ($row_2393 | 0) % ($prow_1 | 0);
        $and16_i248 = $row_2393 << 1 & 14;
        $rem11_i243 = ($row_2393 + 6 | 0) % 6;
        $col_1384 = 2;
        $conv145387 = $conv145381;
        while (1) {
          $add152 = Math_imul($conv145387, $row_2393) + $col_1384 | 0;
          $67 = HEAP32[1316051] | 0;
          $arraydecay = $67 + ($add152 << 3) | 0;
          $68 = HEAP32[$code + ($rem154 << 6) + (($col_1384 | 0) % ($pcol_1 | 0) << 2) >> 2] | 0;
          _memset($62 | 0, 0, 32);
          $69 = HEAP32[$68 >> 2] | 0;
          if (($69 | 0) == 2147483647) {
            $ip_8_lcssa = $68;
            $91 = 0;
            $90 = 0;
            $89 = 0;
            $88 = 0;
            $87 = 0;
            $86 = 0;
            $85 = 0;
            $84 = 0;
          } else {
            $ip_8366 = $68;
            $70 = $69;
            while (1) {
              $sub165 = (HEAPU16[$67 + ($add152 << 3) + ($70 << 1) >> 1] | 0) - (HEAPU16[$67 + ($add152 << 3) + (HEAP32[$ip_8366 + 4 >> 2] << 1) >> 1] | 0) | 0;
              $shr = $sub165 >> 31;
              $shl181 = ($shr ^ $sub165) - $shr << HEAP32[$ip_8366 + 8 >> 2];
              $arrayidx183 = $gval + (HEAP32[$ip_8366 + 12 >> 2] << 2) | 0;
              HEAP32[$arrayidx183 >> 2] = $shl181 + (HEAP32[$arrayidx183 >> 2] | 0) | 0;
              $add_ptr185 = $ip_8366 + 20 | 0;
              $77 = HEAP32[$ip_8366 + 16 >> 2] | 0;
              L4063 : do {
                if (($77 | 0) == -1) {
                  $ip_8_be = $add_ptr185;
                } else {
                  $arrayidx191 = $gval + ($77 << 2) | 0;
                  HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $shl181 | 0;
                  $incdec_ptr194362 = $ip_8366 + 24 | 0;
                  $80 = HEAP32[$add_ptr185 >> 2] | 0;
                  if (($80 | 0) == -1) {
                    $ip_8_be = $incdec_ptr194362;
                    break;
                  } else {
                    $incdec_ptr194364 = $incdec_ptr194362;
                    $81 = $80;
                  }
                  while (1) {
                    $arrayidx198 = $gval + ($81 << 2) | 0;
                    HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $shl181 | 0;
                    $incdec_ptr194 = $incdec_ptr194364 + 4 | 0;
                    $83 = HEAP32[$incdec_ptr194364 >> 2] | 0;
                    if (($83 | 0) == -1) {
                      $ip_8_be = $incdec_ptr194;
                      break L4063;
                    } else {
                      $incdec_ptr194364 = $incdec_ptr194;
                      $81 = $83;
                    }
                  }
                }
              } while (0);
              $78 = HEAP32[$ip_8_be >> 2] | 0;
              if (($78 | 0) == 2147483647) {
                break;
              } else {
                $ip_8366 = $ip_8_be;
                $70 = $78;
              }
            }
            $ip_8_lcssa = $ip_8_be;
            $91 = HEAP32[$arrayidx202 >> 2] | 0;
            $90 = HEAP32[$gval + 4 >> 2] | 0;
            $89 = HEAP32[$gval + 8 >> 2] | 0;
            $88 = HEAP32[$gval + 12 >> 2] | 0;
            $87 = HEAP32[$gval + 16 >> 2] | 0;
            $86 = HEAP32[$gval + 20 >> 2] | 0;
            $85 = HEAP32[$gval + 24 >> 2] | 0;
            $84 = HEAP32[$gval + 28 >> 2] | 0;
          }
          $_gmin_0 = ($91 | 0) > ($90 | 0) ? $90 : $91;
          $gmax_1 = ($91 | 0) < ($90 | 0) ? $90 : $91;
          $_gmin_0_1 = ($_gmin_0 | 0) > ($89 | 0) ? $89 : $_gmin_0;
          $gmax_1_1 = ($gmax_1 | 0) < ($89 | 0) ? $89 : $gmax_1;
          $_gmin_0_2 = ($_gmin_0_1 | 0) > ($88 | 0) ? $88 : $_gmin_0_1;
          $gmax_1_2 = ($gmax_1_1 | 0) < ($88 | 0) ? $88 : $gmax_1_1;
          $_gmin_0_3 = ($_gmin_0_2 | 0) > ($87 | 0) ? $87 : $_gmin_0_2;
          $gmax_1_3 = ($gmax_1_2 | 0) < ($87 | 0) ? $87 : $gmax_1_2;
          $_gmin_0_4 = ($_gmin_0_3 | 0) > ($86 | 0) ? $86 : $_gmin_0_3;
          $gmax_1_4 = ($gmax_1_3 | 0) < ($86 | 0) ? $86 : $gmax_1_3;
          $_gmin_0_5 = ($_gmin_0_4 | 0) > ($85 | 0) ? $85 : $_gmin_0_4;
          $gmax_1_5 = ($gmax_1_4 | 0) < ($85 | 0) ? $85 : $gmax_1_4;
          $gmax_1_6 = ($gmax_1_5 | 0) < ($84 | 0) ? $84 : $gmax_1_5;
          $incdec_ptr201 = $ip_8_lcssa + 4 | 0;
          L4070 : do {
            if (($gmax_1_6 | 0) == 0) {
              $92 = $arraydecay;
              $93 = $66 + ($col_1384 << 3) | 0;
              $ld$0$0 = $92 | 0;
              $ld$1$1 = $92 + 4 | 0;
              $94$1 = HEAPU16[$ld$1$1 >> 1] | HEAPU16[$ld$1$1 + 2 >> 1] << 16;
              $st$2$0 = $93 | 0;
              tempBigInt = HEAPU16[$ld$0$0 >> 1] | HEAPU16[$ld$0$0 + 2 >> 1] << 16;
              HEAP16[$st$2$0 >> 1] = tempBigInt & 65535;
              HEAP16[$st$2$0 + 2 >> 1] = tempBigInt >> 16;
              $st$3$1 = $93 + 4 | 0;
              tempBigInt = $94$1;
              HEAP16[$st$3$1 >> 1] = tempBigInt & 65535;
              HEAP16[$st$3$1 + 2 >> 1] = tempBigInt >> 16;
            } else {
              $add229 = (($_gmin_0_5 | 0) > ($84 | 0) ? $84 : $_gmin_0_5) + ($gmax_1_6 >> 1) | 0;
              HEAP32[$63 >> 2] = 0;
              HEAP32[$63 + 4 >> 2] = 0;
              HEAP32[$63 + 8 >> 2] = 0;
              HEAP32[$63 + 12 >> 2] = 0;
              $95 = HEAP32[1356938] | 0;
              if (($95 | 0) == 1) {
                $retval_0_i255 = HEAP8[((HEAPU16[2631898] | 0) + $col_1384 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_2393 & 15) << 4)) | 0] << 24 >> 24;
              } else if (($95 | 0) == 2) {
                $retval_0_i255 = HEAP8[($col_1384 + 6 | 0) % 6 + (5427756 + ($rem11_i243 * 6 & -1)) | 0] << 24 >> 24;
              } else {
                $retval_0_i255 = $95 >>> (($col_1384 & 1 | $and16_i248) << 1 >>> 0) & 3;
              }
              $ip_10374 = $incdec_ptr201;
              $g_3377 = 1;
              $num_0378 = 0;
              $100 = $91;
              while (1) {
                if (($100 | 0) > ($add229 | 0)) {
                  $num_1 = $num_0378;
                } else {
                  $101 = HEAP32[1390240] | 0;
                  L4082 : do {
                    if (($101 | 0) > 0) {
                      $arrayidx246 = $ip_10374 + 4 | 0;
                      $c_0372 = 0;
                      while (1) {
                        do {
                          if (($c_0372 | 0) == ($retval_0_i255 | 0)) {
                            $102 = HEAP32[$arrayidx246 >> 2] | 0;
                            if (($102 | 0) == 0) {
                              label = 2850;
                              break;
                            }
                            $arrayidx256 = $sum + ($retval_0_i255 << 2) | 0;
                            HEAP32[$arrayidx256 >> 2] = (((HEAPU16[$67 + ($add152 << 3) + ($102 << 1) >> 1] | 0) + (HEAPU16[$67 + ($add152 << 3) + ($retval_0_i255 << 1) >> 1] | 0) | 0) >>> 1) + (HEAP32[$arrayidx256 >> 2] | 0) | 0;
                            break;
                          } else {
                            label = 2850;
                          }
                        } while (0);
                        if ((label | 0) == 2850) {
                          label = 0;
                          $arrayidx263 = $sum + ($c_0372 << 2) | 0;
                          HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + (HEAPU16[$67 + ($add152 << 3) + ((HEAP32[$ip_10374 >> 2] | 0) + $c_0372 << 1) >> 1] | 0) | 0;
                        }
                        $inc267 = $c_0372 + 1 | 0;
                        if (($inc267 | 0) < ($101 | 0)) {
                          $c_0372 = $inc267;
                        } else {
                          break L4082;
                        }
                      }
                    }
                  } while (0);
                  $num_1 = $num_0378 + 1 | 0;
                }
                if (($g_3377 | 0) == 8) {
                  break;
                }
                $_pre426 = HEAP32[$gval + ($g_3377 << 2) >> 2] | 0;
                $ip_10374 = $ip_10374 + 8 | 0;
                $g_3377 = $g_3377 + 1 | 0;
                $num_0378 = $num_1;
                $100 = $_pre426;
              }
              if ((HEAP32[1390240] | 0) <= 0) {
                break;
              }
              $arrayidx279 = $67 + ($add152 << 3) + ($retval_0_i255 << 1) | 0;
              $arrayidx285 = $sum + ($retval_0_i255 << 2) | 0;
              $c_1380 = 0;
              while (1) {
                $conv280 = HEAPU16[$arrayidx279 >> 1] | 0;
                if (($c_1380 | 0) == ($retval_0_i255 | 0)) {
                  $t_1 = $conv280;
                } else {
                  $t_1 = (((HEAP32[$sum + ($c_1380 << 2) >> 2] | 0) - (HEAP32[$arrayidx285 >> 2] | 0) | 0) / ($num_1 | 0) & -1) + $conv280 | 0;
                }
                $cond291 = ($t_1 | 0) < 65535 ? $t_1 : 65535;
                HEAP16[$66 + ($col_1384 << 3) + ($c_1380 << 1) >> 1] = ($cond291 | 0) < 0 ? 0 : $cond291 & 65535;
                $inc309 = $c_1380 + 1 | 0;
                if (($inc309 | 0) < (HEAP32[1390240] | 0)) {
                  $c_1380 = $inc309;
                } else {
                  break L4070;
                }
              }
            }
          } while (0);
          $inc312 = $col_1384 + 1 | 0;
          $conv145 = HEAPU16[2621484] | 0;
          if (($inc312 | 0) < ($conv145 - 2 | 0)) {
            $col_1384 = $inc312;
            $conv145387 = $conv145;
          } else {
            $conv145_lcssa = $conv145;
            break L4056;
          }
        }
      } else {
        $conv145_lcssa = $conv145381;
      }
    } while (0);
    if (($row_2393 | 0) > 3) {
      $add320 = Math_imul($conv145_lcssa, $row_2393 - 2 | 0) + 2 | 0;
      _memcpy((HEAP32[1316051] | 0) + ($add320 << 3) | 0, $64 + 16 | 0, ($conv145_lcssa << 3) - 32 | 0);
    }
    HEAP32[$brow + 12 >> 2] = $64;
    $118 = HEAP32[$arrayidx134_1 >> 2] | 0;
    HEAP32[$arrayidx134 >> 2] = $118;
    $119 = HEAP32[$arrayidx134_2 >> 2] | 0;
    HEAP32[$arrayidx134_1 >> 2] = $119;
    HEAP32[$arrayidx134_2 >> 2] = $64;
    $inc340 = $row_2393 + 1 | 0;
    $_pre425 = HEAP16[2621484] | 0;
    if (($inc340 | 0) < ((HEAPU16[2699404] | 0) - 2 | 0)) {
      $row_2393 = $inc340;
      $66 = $64;
      $65 = $_pre425;
      $64 = $118;
    } else {
      break;
    }
  }
  $row_2_lcssa = $inc340;
  $124 = $_pre425;
  $123 = $118;
  $122 = $119;
  $121 = HEAP32[$arrayidx125360 >> 2] | 0;
  $sub342 = $row_2_lcssa - 2 | 0;
  $conv343 = $124 & 65535;
  $mul344 = Math_imul($conv343, $sub342);
  $add345 = $mul344 + 2 | 0;
  $125 = HEAP32[1316051] | 0;
  $arrayidx346 = $125 + ($add345 << 3) | 0;
  $126 = $arrayidx346;
  $add_ptr348 = $123 + 16 | 0;
  $127 = $add_ptr348;
  $sub350 = $conv343 << 3;
  $mul351 = $sub350 - 32 | 0;
  _memcpy($126, $127, $mul351);
  $sub352 = $row_2_lcssa - 1 | 0;
  $128 = HEAP16[2621484] | 0;
  $conv353 = $128 & 65535;
  $mul354 = Math_imul($conv353, $sub352);
  $add355 = $mul354 + 2 | 0;
  $129 = HEAP32[1316051] | 0;
  $arrayidx356 = $129 + ($add355 << 3) | 0;
  $130 = $arrayidx356;
  $add_ptr358 = $122 + 16 | 0;
  $131 = $add_ptr358;
  $sub360 = $conv353 << 3;
  $mul361 = $sub360 - 32 | 0;
  _memcpy($130, $131, $mul361);
  $132 = $121;
  _free($132);
  $arrayidx364 = $code | 0;
  $133 = HEAP32[$arrayidx364 >> 2] | 0;
  $134 = $133;
  _free($134);
  STACKTOP = __stackBase__;
  return;
}
function _ppg_interpolate() {
  var $dir = 0, $diff = 0, $guess = 0, $arrayinit_element = 0, $conv = 0, $2 = 0, $4 = 0, $arrayidx204 = 0, $arrayidx205 = 0, $5 = 0, $6 = 0, $7 = 0, $row_0306 = 0, $8 = 0, $9 = 0, $and10 = 0, $add11 = 0, $and18 = 0, $conv20298 = 0, $conv20302 = 0, $col_0301 = 0, $10 = 0, $add_ptr_sum = 0, $conv37 = 0, $12 = 0, $i_0297 = 0, $conv34 = 0, $conv41 = 0, $conv47 = 0, $conv52 = 0, $sub62 = 0, $sub89 = 0, $sub118 = 0, $sub148 = 0, $sub177 = 0, $inc = 0, $19 = 0, $conv207 = 0, $20 = 0, $21 = 0, $conv211 = 0, $22 = 0, $conv215 = 0, $shr222 = 0, $shr222_conv215 = 0, $shr222_conv211 = 0, $cond311 = 0, $add316 = 0, $24 = 0, $conv20 = 0, $25 = 0, $26 = 0, $inc319 = 0, $27 = 0, $add517265 = 0, $arrayidx631 = 0, $arrayidx632 = 0, $arrayidx681 = 0, $arrayidx682 = 0, $28 = 0, $29 = 0, $row_1293 = 0, $30 = 0, $and328 = 0, $and333 = 0, $add334 = 0, $conv344284 = 0, $conv344289 = 0, $c_0288 = 0, $col_1287 = 0, $31 = 0, $add_ptr351_sum = 0, $arrayidx367 = 0, $32 = 0, $i_1283 = 0, $c_1282 = 0, $add_ptr352_sum = 0, $add_ptr352_sum251 = 0, $shr380 = 0, $cond467 = 0, $sub472 = 0, $inc473 = 0, $38 = 0, $_pre314 = 0, $add476 = 0, $conv344 = 0, $39 = 0, $40 = 0, $inc479 = 0, $41 = 0, $42 = 0, $row_2278 = 0, $43 = 0, $44 = 0, $and493 = 0, $add494 = 0, $sub502 = 0, $conv504270 = 0, $conv504274 = 0, $col_2273 = 0, $45 = 0, $add_ptr511_sum = 0, $conv555 = 0, $mul616 = 0, $47 = 0, $add517269 = 0, $add515268 = 0, $i_2267 = 0, $add_ptr512_sum = 0, $conv524 = 0, $add_ptr512_sum249 = 0, $conv527 = 0, $sub528 = 0, $conv552 = 0, $sub556 = 0, $conv580 = 0, $sub584 = 0, $add515 = 0, $52 = 0, $add517 = 0, $_pre309 = 0, $_pre310 = 0, $shr641 = 0, $cond677 = 0, $shr684 = 0, $cond714 = 0, $add720 = 0, $56 = 0, $conv504 = 0, $57 = 0, $58 = 0, $inc723 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $dir = __stackBase__ | 0;
  $diff = __stackBase__ + 20 | 0;
  $guess = __stackBase__ + 28 | 0;
  HEAP32[$dir >> 2] = 1;
  $arrayinit_element = $dir + 4 | 0;
  $conv = HEAPU16[2621484] | 0;
  HEAP32[$arrayinit_element >> 2] = $conv;
  HEAP32[$dir + 8 >> 2] = -1;
  HEAP32[$dir + 12 >> 2] = -$conv | 0;
  HEAP32[$dir + 16 >> 2] = 1;
  _border_interpolate(3);
  if ((HEAP32[1310884] | 0) != 0) {
    $2 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5577248, 21, 1, $2 | 0);
  }
  $4 = HEAP16[2699404] | 0;
  L4113 : do {
    if ((($4 & 65535) - 3 | 0) > 3) {
      $arrayidx204 = $diff | 0;
      $arrayidx205 = $diff + 4 | 0;
      $row_0306 = 3;
      $7 = HEAP16[2621484] | 0;
      $6 = $4;
      while (1) {
        $8 = HEAP32[1356938] | 0;
        $9 = $row_0306 << 1 & 14;
        $and10 = $8 >>> (($9 << 1 | 2) >>> 0) & 1;
        $add11 = $and10 + 3 | 0;
        $and18 = $8 >>> ((($and10 | $9) << 1 ^ 2) >>> 0) & 3;
        $conv20298 = $7 & 65535;
        if (($add11 | 0) < ($conv20298 - 3 | 0)) {
          $col_0301 = $add11;
          $conv20302 = $conv20298;
          while (1) {
            $10 = HEAP32[1316051] | 0;
            $add_ptr_sum = Math_imul($conv20302, $row_0306) + $col_0301 | 0;
            $conv37 = HEAPU16[$10 + ($add_ptr_sum << 3) + ($and18 << 1) >> 1] | 0;
            $i_0297 = 0;
            $12 = 1;
            while (1) {
              $conv34 = HEAPU16[$10 + ($add_ptr_sum - $12 << 3) + 2 >> 1] | 0;
              $conv41 = HEAPU16[$10 + ($12 + $add_ptr_sum << 3) + 2 >> 1] | 0;
              $conv47 = HEAPU16[$10 + (($12 * -2 & -1) + $add_ptr_sum << 3) + ($and18 << 1) >> 1] | 0;
              $conv52 = HEAPU16[$10 + (($12 << 1) + $add_ptr_sum << 3) + ($and18 << 1) >> 1] | 0;
              HEAP32[$guess + ($i_0297 << 2) >> 2] = ((($conv37 + $conv34 | 0) + $conv41 << 1) - $conv47 | 0) - $conv52 | 0;
              $sub62 = $conv47 - $conv37 | 0;
              $sub89 = $conv52 - $conv37 | 0;
              $sub118 = $conv34 - $conv41 | 0;
              $sub148 = (HEAPU16[$10 + (($12 * 3 & -1) + $add_ptr_sum << 3) + 2 >> 1] | 0) - $conv41 | 0;
              $sub177 = (HEAPU16[$10 + (($12 * -3 & -1) + $add_ptr_sum << 3) + 2 >> 1] | 0) - $conv34 | 0;
              HEAP32[$diff + ($i_0297 << 2) >> 2] = (((($sub148 >> 31 ^ $sub148) + ($sub148 >>> 31) | 0) + ($sub177 >>> 31) | 0) + ($sub177 >> 31 ^ $sub177) << 1) + ((((((($sub62 >> 31 ^ $sub62) + ($sub62 >>> 31) | 0) + ($sub89 >>> 31) | 0) + ($sub89 >> 31 ^ $sub89) | 0) + ($sub118 >>> 31) | 0) + ($sub118 >> 31 ^ $sub118) | 0) * 3 & -1) | 0;
              $inc = $i_0297 + 1 | 0;
              $19 = HEAP32[$dir + ($inc << 2) >> 2] | 0;
              if (($19 | 0) > 0) {
                $i_0297 = $inc;
                $12 = $19;
              } else {
                break;
              }
            }
            $conv207 = (HEAP32[$arrayidx204 >> 2] | 0) > (HEAP32[$arrayidx205 >> 2] | 0) & 1;
            $20 = HEAP32[$dir + ($conv207 << 2) >> 2] | 0;
            $21 = HEAP16[$10 + ($20 + $add_ptr_sum << 3) + 2 >> 1] | 0;
            $conv211 = $21 & 65535;
            $22 = HEAP16[$10 + ($add_ptr_sum - $20 << 3) + 2 >> 1] | 0;
            $conv215 = $22 & 65535;
            $shr222 = HEAP32[$guess + ($conv207 << 2) >> 2] >> 2;
            if (($21 & 65535) < ($22 & 65535)) {
              $shr222_conv215 = ($shr222 | 0) < ($conv215 | 0) ? $shr222 : $conv215;
              $cond311 = ($conv211 | 0) > ($shr222_conv215 | 0) ? $conv211 : $shr222_conv215;
            } else {
              $shr222_conv211 = ($shr222 | 0) < ($conv211 | 0) ? $shr222 : $conv211;
              $cond311 = ($conv215 | 0) > ($shr222_conv211 | 0) ? $conv215 : $shr222_conv211;
            }
            HEAP16[$10 + ($add_ptr_sum << 3) + 2 >> 1] = $cond311 & 65535;
            $add316 = $col_0301 + 2 | 0;
            $24 = HEAP16[2621484] | 0;
            $conv20 = $24 & 65535;
            if (($add316 | 0) < ($conv20 - 3 | 0)) {
              $col_0301 = $add316;
              $conv20302 = $conv20;
            } else {
              break;
            }
          }
          $26 = $24;
          $25 = HEAP16[2699404] | 0;
        } else {
          $26 = $7;
          $25 = $6;
        }
        $inc319 = $row_0306 + 1 | 0;
        if (($inc319 | 0) < (($25 & 65535) - 3 | 0)) {
          $row_0306 = $inc319;
          $7 = $26;
          $6 = $25;
        } else {
          $5 = $25;
          break L4113;
        }
      }
    } else {
      $5 = $4;
    }
  } while (0);
  L4130 : do {
    if ((($5 & 65535) - 1 | 0) > 1) {
      $row_1293 = 1;
      $29 = HEAP16[2621484] | 0;
      $28 = $5;
      while (1) {
        $30 = HEAP32[1356938] | 0;
        $and328 = $row_1293 << 1 & 14;
        $and333 = $30 >>> ($and328 << 1 >>> 0) & 1;
        $add334 = $and333 + 1 | 0;
        $conv344284 = $29 & 65535;
        if (($add334 | 0) < ($conv344284 - 1 | 0)) {
          $col_1287 = $add334;
          $c_0288 = $30 >>> (($and333 | $and328) << 1 >>> 0) & 3;
          $conv344289 = $conv344284;
          while (1) {
            $31 = HEAP32[1316051] | 0;
            $add_ptr351_sum = Math_imul($conv344289, $row_1293) + $col_1287 | 0;
            $arrayidx367 = $31 + ($add_ptr351_sum << 3) + 2 | 0;
            $c_1282 = $c_0288;
            $i_1283 = 0;
            $32 = 1;
            while (1) {
              $add_ptr352_sum = $add_ptr351_sum - $32 | 0;
              $add_ptr352_sum251 = $32 + $add_ptr351_sum | 0;
              $shr380 = ((((HEAPU16[$31 + ($add_ptr352_sum251 << 3) + ($c_1282 << 1) >> 1] | 0) + (HEAPU16[$31 + ($add_ptr352_sum << 3) + ($c_1282 << 1) >> 1] | 0) | 0) + ((HEAPU16[$arrayidx367 >> 1] | 0) << 1) | 0) - (HEAPU16[$31 + ($add_ptr352_sum << 3) + 2 >> 1] | 0) | 0) - (HEAPU16[$31 + ($add_ptr352_sum251 << 3) + 2 >> 1] | 0) >> 1;
              if (($shr380 | 0) < 0) {
                $cond467 = 0;
              } else {
                $cond467 = ($shr380 | 0) < 65535 ? $shr380 & 65535 : -1;
              }
              HEAP16[$31 + ($add_ptr351_sum << 3) + ($c_1282 << 1) >> 1] = $cond467;
              $sub472 = 2 - $c_1282 | 0;
              $inc473 = $i_1283 + 1 | 0;
              $38 = HEAP32[$dir + ($inc473 << 2) >> 2] | 0;
              if (($38 | 0) > 0) {
                $c_1282 = $sub472;
                $i_1283 = $inc473;
                $32 = $38;
              } else {
                break;
              }
            }
            $_pre314 = HEAP16[2621484] | 0;
            $add476 = $col_1287 + 2 | 0;
            $conv344 = $_pre314 & 65535;
            if (($add476 | 0) < ($conv344 - 1 | 0)) {
              $col_1287 = $add476;
              $c_0288 = $sub472;
              $conv344289 = $conv344;
            } else {
              break;
            }
          }
          $40 = $_pre314;
          $39 = HEAP16[2699404] | 0;
        } else {
          $40 = $29;
          $39 = $28;
        }
        $inc479 = $row_1293 + 1 | 0;
        if (($inc479 | 0) < (($39 & 65535) - 1 | 0)) {
          $row_1293 = $inc479;
          $29 = $40;
          $28 = $39;
        } else {
          $27 = $39;
          break L4130;
        }
      }
    } else {
      $27 = $5;
    }
  } while (0);
  if ((($27 & 65535) - 1 | 0) <= 1) {
    STACKTOP = __stackBase__;
    return;
  }
  $add517265 = $conv + 1 | 0;
  $arrayidx631 = $diff | 0;
  $arrayidx632 = $diff + 4 | 0;
  $arrayidx681 = $guess | 0;
  $arrayidx682 = $guess + 4 | 0;
  $row_2278 = 1;
  $42 = HEAP16[2621484] | 0;
  $41 = $27;
  while (1) {
    $43 = HEAP32[1356938] | 0;
    $44 = $row_2278 << 1 & 14;
    $and493 = $43 >>> (($44 << 1 | 2) >>> 0) & 1;
    $add494 = $and493 + 1 | 0;
    $sub502 = 2 - ($43 >>> ((($and493 | $44) << 1 ^ 2) >>> 0) & 3) | 0;
    $conv504270 = $42 & 65535;
    if (($add494 | 0) < ($conv504270 - 1 | 0)) {
      $col_2273 = $add494;
      $conv504274 = $conv504270;
      while (1) {
        $45 = HEAP32[1316051] | 0;
        $add_ptr511_sum = Math_imul($conv504274, $row_2278) + $col_2273 | 0;
        $conv555 = HEAPU16[$45 + ($add_ptr511_sum << 3) + 2 >> 1] | 0;
        $mul616 = $conv555 << 1;
        $i_2267 = 0;
        $add515268 = 1;
        $add517269 = $add517265;
        $47 = HEAP32[$arrayinit_element >> 2] | 0;
        while (1) {
          $add_ptr512_sum = $add_ptr511_sum - $add517269 | 0;
          $conv524 = HEAPU16[$45 + ($add_ptr512_sum << 3) + ($sub502 << 1) >> 1] | 0;
          $add_ptr512_sum249 = $add517269 + $add_ptr511_sum | 0;
          $conv527 = HEAPU16[$45 + ($add_ptr512_sum249 << 3) + ($sub502 << 1) >> 1] | 0;
          $sub528 = $conv524 - $conv527 | 0;
          $conv552 = HEAPU16[$45 + ($add_ptr512_sum << 3) + 2 >> 1] | 0;
          $sub556 = $conv552 - $conv555 | 0;
          $conv580 = HEAPU16[$45 + ($add_ptr512_sum249 << 3) + 2 >> 1] | 0;
          $sub584 = $conv580 - $conv555 | 0;
          HEAP32[$diff + ($i_2267 << 2) >> 2] = ((((($sub528 >> 31 ^ $sub528) + ($sub528 >>> 31) | 0) + ($sub556 >>> 31) | 0) + ($sub556 >> 31 ^ $sub556) | 0) + ($sub584 >>> 31) | 0) + ($sub584 >> 31 ^ $sub584) | 0;
          HEAP32[$guess + ($i_2267 << 2) >> 2] = ((($conv527 + $conv524 | 0) + $mul616 | 0) - $conv552 | 0) - $conv580 | 0;
          $add515 = $add515268 + 1 | 0;
          $52 = HEAP32[$dir + ($add515 << 2) >> 2] | 0;
          $add517 = $52 + $47 | 0;
          if (($add517 | 0) > 0) {
            $i_2267 = $add515268;
            $add515268 = $add515;
            $add517269 = $add517;
            $47 = $52;
          } else {
            break;
          }
        }
        $_pre309 = HEAP32[$arrayidx631 >> 2] | 0;
        $_pre310 = HEAP32[$arrayidx632 >> 2] | 0;
        if (($_pre309 | 0) == ($_pre310 | 0)) {
          $shr684 = (HEAP32[$arrayidx682 >> 2] | 0) + (HEAP32[$arrayidx681 >> 2] | 0) >> 2;
          if (($shr684 | 0) < 0) {
            $cond714 = 0;
          } else {
            $cond714 = ($shr684 | 0) < 65535 ? $shr684 & 65535 : -1;
          }
          HEAP16[$45 + ($add_ptr511_sum << 3) + ($sub502 << 1) >> 1] = $cond714;
        } else {
          $shr641 = HEAP32[$guess + ((($_pre309 | 0) > ($_pre310 | 0) & 1) << 2) >> 2] >> 1;
          if (($shr641 | 0) < 0) {
            $cond677 = 0;
          } else {
            $cond677 = ($shr641 | 0) < 65535 ? $shr641 & 65535 : -1;
          }
          HEAP16[$45 + ($add_ptr511_sum << 3) + ($sub502 << 1) >> 1] = $cond677;
        }
        $add720 = $col_2273 + 2 | 0;
        $56 = HEAP16[2621484] | 0;
        $conv504 = $56 & 65535;
        if (($add720 | 0) < ($conv504 - 1 | 0)) {
          $col_2273 = $add720;
          $conv504274 = $conv504;
        } else {
          break;
        }
      }
      $58 = $56;
      $57 = HEAP16[2699404] | 0;
    } else {
      $58 = $42;
      $57 = $41;
    }
    $inc723 = $row_2278 + 1 | 0;
    if (($inc723 | 0) < (($57 & 65535) - 1 | 0)) {
      $row_2278 = $inc723;
      $42 = $58;
      $41 = $57;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _ahd_interpolate() {
  var $ldiff = 0, $abdiff = 0, $cbrt = 0, $xyz_cam = 0, $1 = 0, $3 = 0, $cmp13398 = 0, $i_0402 = 0, $conv2 = 0.0, $cond = 0.0, $inc = 0, $j_0399 = 0, $inc40 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $add_ptr46 = 0, $12 = 0, $13 = 0, $14 = 0, $arrayidx825 = 0, $arrayidx827 = 0, $arrayidx839 = 0, $arrayidx841 = 0, $arrayidx887 = 0, $arrayidx889 = 0, $arrayidx901 = 0, $arrayidx903 = 0, $15 = 0, $16 = 0, $top_0394 = 0, $add59 = 0, $add356314 = 0, $sub359 = 0, $cmp360363 = 0, $add713 = 0, $sub716 = 0, $add982 = 0, $sub985 = 0, $left_0389 = 0, $add81 = 0, $row_0352 = 0, $18 = 0, $and = 0, $and71 = 0, $add72 = 0, $and79 = 0, $sub202 = 0, $col_0351 = 0, $conv85 = 0, $20 = 0, $add_ptr93_sum = 0, $21 = 0, $conv97 = 0, $arrayidx99 = 0, $23 = 0, $conv104 = 0, $shr115 = 0, $shr115_conv104 = 0, $shr115_conv97 = 0, $cond199 = 0, $sub201 = 0, $conv207 = 0, $27 = 0, $conv211 = 0, $29 = 0, $conv218 = 0, $shr233 = 0, $shr233_conv218 = 0, $shr233_conv211 = 0, $cond338 = 0, $add347 = 0, $inc350 = 0, $add369315 = 0, $sub372 = 0, $cmp373361 = 0, $d_0366 = 0, $row_1364 = 0, $sub387 = 0, $shl396 = 0, $and397 = 0, $and409 = 0, $col_1362 = 0, $conv376 = 0, $34 = 0, $add_ptr384_sum = 0, $sub386 = 0, $35 = 0, $and398 = 0, $shl400 = 0, $sub403 = 0, $and414 = 0, $arrayidx416 = 0, $sub418 = 0, $add436 = 0, $cond442 = 0, $conv462 = 0, $c_0 = 0, $val_0 = 0, $cond535 = 0, $and557 = 0, $58 = 0, $xyz_sroa_0_0358 = 0.0, $xyz_sroa_1_0357 = 0.0, $xyz_sroa_2_0356 = 0.0, $c_1355 = 0, $conv574 = 0.0, $add577 = 0.0, $add586 = 0.0, $add595 = 0.0, $inc597 = 0, $phitmp403 = 0, $phitmp404 = 0, $phitmp405 = 0, $xyz_sroa_2_0_lcssa446 = 0, $xyz_sroa_1_0_lcssa444 = 0, $xyz_sroa_0_0_lcssa443 = 0, $xyz_sroa_2_0_lcssa447 = 0, $xyz_sroa_1_0_lcssa445 = 0, $cond624 = 0, $63 = 0.0, $cond652 = 0, $64 = 0.0, $cond680 = 0, $65 = 0.0, $inc705 = 0, $inc708 = 0, $inc711 = 0, $add727 = 0, $sub730 = 0, $row_2373 = 0, $sub726 = 0, $col_2372 = 0, $sub740 = 0, $arrayidx747_sum = 0, $d_1369 = 0, $conv754 = 0, $conv783 = 0, $conv800 = 0, $sub759 = 0, $shr768 = 0, $sub788 = 0, $mul797 = 0, $sub805 = 0, $arrayidx747_sum_1 = 0, $sub759_1 = 0, $shr768_1 = 0, $sub788_1 = 0, $mul797_1 = 0, $sub805_1 = 0, $arrayidx747_sum_2 = 0, $sub759_2 = 0, $shr768_2 = 0, $sub788_2 = 0, $mul797_2 = 0, $sub805_2 = 0, $arrayidx747_sum_3 = 0, $sub759_3 = 0, $shr768_3 = 0, $sub788_3 = 0, $mul797_3 = 0, $sub805_3 = 0, $inc822 = 0, $83 = 0, $84 = 0, $_ = 0, $85 = 0, $86 = 0, $cond851 = 0, $__cond851 = 0, $87 = 0, $88 = 0, $_347 = 0, $89 = 0, $90 = 0, $cond913 = 0, $cond947 = 0, $arrayidx967 = 0, $inc980 = 0, $add996 = 0, $sub999 = 0, $row_3384 = 0, $sub995 = 0, $sub1015 = 0, $add1017 = 0, $col_3382 = 0, $conv1003 = 0, $sub1009 = 0, $sub1021 = 0, $add1023 = 0, $add1032_lcssa377 = 0, $i_4375 = 0, $94 = 0, $j_1374 = 0, $add1032 = 0, $inc1034 = 0, $inc1037 = 0, $conv1084 = 0, $add1087 = 0, $conv1084_1 = 0, $add1087_1 = 0, $conv1084_2 = 0, $add1087_2 = 0, $conv1054 = 0, $107 = 0, $add1061 = 0, $109 = 0, $add1061_1 = 0, $112 = 0, $add1061_2 = 0, $inc1095 = 0, $inc1098 = 0, $add1101 = 0, $115 = 0, $116 = 0, $117 = 0, $add1104 = 0, $arrayidx967_1 = 0, $inc977 = 0, $add1032_lcssa377_1 = 0, $i_4375_1 = 0, $133 = 0, $j_1374_1 = 0, $add1032_1 = 0, $inc1034_1 = 0, $inc1037_1 = 0, $j_0399_1 = 0, $inc40_1 = 0, $j_0399_2 = 0, $inc40_2 = 0, $call45 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 262256 | 0;
  $ldiff = __stackBase__ | 0;
  $abdiff = __stackBase__ + 32 | 0;
  $cbrt = __stackBase__ + 64 | 0;
  $xyz_cam = __stackBase__ + 262208 | 0;
  do {
    if ((HEAP32[1310884] | 0) == 0) {
      $i_0402 = 0;
    } else {
      $1 = HEAP32[_stderr >> 2] | 0;
      _fwrite(5577132, 21, 1, $1 | 0);
      $i_0402 = 0;
      break;
    }
  } while (0);
  while (1) {
    $conv2 = +($i_0402 | 0) / 65535.0;
    if ($conv2 > .008856) {
      $cond = +Math_pow($conv2, .3333333333333333);
    } else {
      $cond = $conv2 * 7.787 + .13793103448275862;
    }
    HEAPF32[$cbrt + ($i_0402 << 2) >> 2] = $cond;
    $inc = $i_0402 + 1 | 0;
    if (($inc | 0) == 65536) {
      break;
    } else {
      $i_0402 = $inc;
    }
  }
  $3 = HEAP32[1390240] | 0;
  $cmp13398 = ($3 | 0) > 0;
  L4181 : do {
    if ($cmp13398) {
      $j_0399 = 0;
      while (1) {
        HEAPF32[$xyz_cam + ($j_0399 << 2) >> 2] = +HEAPF32[5244964 + ($j_0399 << 2) >> 2] * .180423 / .9504560232162476 + (+HEAPF32[5244948 + ($j_0399 << 2) >> 2] * .35758 / .9504560232162476 + (+HEAPF32[5244932 + ($j_0399 << 2) >> 2] * .412453 / .9504560232162476 + 0.0));
        $inc40 = $j_0399 + 1 | 0;
        if (($inc40 | 0) == ($3 | 0)) {
          break;
        } else {
          $j_0399 = $inc40;
        }
      }
      if ($cmp13398) {
        $j_0399_1 = 0;
      } else {
        break;
      }
      while (1) {
        HEAPF32[$xyz_cam + 16 + ($j_0399_1 << 2) >> 2] = +HEAPF32[5244964 + ($j_0399_1 << 2) >> 2] * .072169 + (+HEAPF32[5244948 + ($j_0399_1 << 2) >> 2] * .71516 + (+HEAPF32[5244932 + ($j_0399_1 << 2) >> 2] * .212671 + 0.0));
        $inc40_1 = $j_0399_1 + 1 | 0;
        if (($inc40_1 | 0) == ($3 | 0)) {
          break;
        } else {
          $j_0399_1 = $inc40_1;
        }
      }
      if ($cmp13398) {
        $j_0399_2 = 0;
      } else {
        break;
      }
      while (1) {
        HEAPF32[$xyz_cam + 32 + ($j_0399_2 << 2) >> 2] = +HEAPF32[5244964 + ($j_0399_2 << 2) >> 2] * .950227 / 1.0887540578842163 + (+HEAPF32[5244948 + ($j_0399_2 << 2) >> 2] * .119193 / 1.0887540578842163 + (+HEAPF32[5244932 + ($j_0399_2 << 2) >> 2] * .019334 / 1.0887540578842163 + 0.0));
        $inc40_2 = $j_0399_2 + 1 | 0;
        if (($inc40_2 | 0) == ($3 | 0)) {
          break L4181;
        } else {
          $j_0399_2 = $inc40_2;
        }
      }
    }
  } while (0);
  _border_interpolate(5);
  $call45 = _malloc(1703936) | 0;
  if (($call45 | 0) == 0) {
    $8 = HEAP32[_stderr >> 2] | 0;
    $9 = HEAP32[1316054] | 0;
    _fprintf($8 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $9, HEAP32[tempInt + 4 >> 2] = 5577040, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  $10 = $call45;
  $11 = $call45 + 786432 | 0;
  $add_ptr46 = $call45 + 1572864 | 0;
  $12 = $add_ptr46;
  $13 = HEAP16[2699404] | 0;
  if ((($13 & 65535) - 5 | 0) <= 2) {
    _free($call45);
    STACKTOP = __stackBase__;
    return;
  }
  $14 = $call45 + 393216 | 0;
  $arrayidx825 = $ldiff | 0;
  $arrayidx827 = $ldiff + 4 | 0;
  $arrayidx839 = $ldiff + 24 | 0;
  $arrayidx841 = $ldiff + 28 | 0;
  $arrayidx887 = $abdiff | 0;
  $arrayidx889 = $abdiff + 4 | 0;
  $arrayidx901 = $abdiff + 24 | 0;
  $arrayidx903 = $abdiff + 28 | 0;
  $top_0394 = 2;
  $16 = HEAP16[2621484] | 0;
  $15 = $13;
  while (1) {
    if ((($16 & 65535) - 5 | 0) > 2) {
      $add59 = $top_0394 + 256 | 0;
      $add356314 = $top_0394 | 1;
      $sub359 = $top_0394 + 255 | 0;
      $cmp360363 = ($add356314 | 0) < ($sub359 | 0);
      $add713 = $top_0394 + 2 | 0;
      $sub716 = $top_0394 + 254 | 0;
      $add982 = $top_0394 + 3 | 0;
      $sub985 = $top_0394 + 253 | 0;
      $left_0389 = 2;
      while (1) {
        $add81 = $left_0389 + 256 | 0;
        $row_0352 = $top_0394;
        while (1) {
          if (($row_0352 | 0) >= ((HEAPU16[2699404] | 0) - 2 | 0)) {
            break;
          }
          $18 = HEAP32[1356938] | 0;
          $and = $row_0352 << 1 & 14;
          $and71 = $18 >>> ($and << 1 >>> 0) & 1;
          $add72 = $and71 | $left_0389;
          $and79 = $18 >>> (($and71 | $and) << 1 >>> 0) & 3;
          L4206 : do {
            if (($add72 | 0) < ($add81 | 0)) {
              $sub202 = $row_0352 - $top_0394 | 0;
              $col_0351 = $add72;
              while (1) {
                $conv85 = HEAPU16[2621484] | 0;
                if (($col_0351 | 0) >= ($conv85 - 2 | 0)) {
                  break L4206;
                }
                $20 = HEAP32[1316051] | 0;
                $add_ptr93_sum = Math_imul($conv85, $row_0352) + $col_0351 | 0;
                $21 = HEAP16[$20 + ($add_ptr93_sum - 1 << 3) + 2 >> 1] | 0;
                $conv97 = $21 & 65535;
                $arrayidx99 = $20 + ($add_ptr93_sum << 3) + ($and79 << 1) | 0;
                $23 = HEAP16[$20 + ($add_ptr93_sum + 1 << 3) + 2 >> 1] | 0;
                $conv104 = $23 & 65535;
                $shr115 = ((((HEAPU16[$arrayidx99 >> 1] | 0) + $conv97 | 0) + $conv104 << 1) - (HEAPU16[$20 + ($add_ptr93_sum - 2 << 3) + ($and79 << 1) >> 1] | 0) | 0) - (HEAPU16[$20 + ($add_ptr93_sum + 2 << 3) + ($and79 << 1) >> 1] | 0) >> 2;
                if (($21 & 65535) < ($23 & 65535)) {
                  $shr115_conv104 = ($shr115 | 0) < ($conv104 | 0) ? $shr115 : $conv104;
                  $cond199 = ($conv97 | 0) > ($shr115_conv104 | 0) ? $conv97 : $shr115_conv104;
                } else {
                  $shr115_conv97 = ($shr115 | 0) < ($conv97 | 0) ? $shr115 : $conv97;
                  $cond199 = ($conv104 | 0) > ($shr115_conv97 | 0) ? $conv104 : $shr115_conv97;
                }
                $sub201 = $col_0351 - $left_0389 | 0;
                HEAP16[$10 + ($sub202 * 1536 & -1) + ($sub201 * 6 & -1) + 2 >> 1] = $cond199 & 65535;
                $conv207 = HEAPU16[2621484] | 0;
                $27 = HEAP16[$20 + ($add_ptr93_sum - $conv207 << 3) + 2 >> 1] | 0;
                $conv211 = $27 & 65535;
                $29 = HEAP16[$20 + ($conv207 + $add_ptr93_sum << 3) + 2 >> 1] | 0;
                $conv218 = $29 & 65535;
                $shr233 = ((((HEAPU16[$arrayidx99 >> 1] | 0) + $conv211 | 0) + $conv218 << 1) - (HEAPU16[$20 + (($conv207 * -2 & -1) + $add_ptr93_sum << 3) + ($and79 << 1) >> 1] | 0) | 0) - (HEAPU16[$20 + (($conv207 << 1) + $add_ptr93_sum << 3) + ($and79 << 1) >> 1] | 0) >> 2;
                if (($27 & 65535) < ($29 & 65535)) {
                  $shr233_conv218 = ($shr233 | 0) < ($conv218 | 0) ? $shr233 : $conv218;
                  $cond338 = ($conv211 | 0) > ($shr233_conv218 | 0) ? $conv211 : $shr233_conv218;
                } else {
                  $shr233_conv211 = ($shr233 | 0) < ($conv211 | 0) ? $shr233 : $conv211;
                  $cond338 = ($conv218 | 0) > ($shr233_conv211 | 0) ? $conv218 : $shr233_conv211;
                }
                HEAP16[$14 + ($sub202 * 1536 & -1) + ($sub201 * 6 & -1) + 2 >> 1] = $cond338 & 65535;
                $add347 = $col_0351 + 2 | 0;
                if (($add347 | 0) < ($add81 | 0)) {
                  $col_0351 = $add347;
                } else {
                  break L4206;
                }
              }
            }
          } while (0);
          $inc350 = $row_0352 + 1 | 0;
          if (($inc350 | 0) < ($add59 | 0)) {
            $row_0352 = $inc350;
          } else {
            break;
          }
        }
        $add369315 = $left_0389 | 1;
        $sub372 = $left_0389 + 255 | 0;
        $cmp373361 = ($add369315 | 0) < ($sub372 | 0);
        $d_0366 = 0;
        while (1) {
          L4223 : do {
            if ($cmp360363) {
              $row_1364 = $add356314;
              while (1) {
                if (($row_1364 | 0) >= ((HEAPU16[2699404] | 0) - 3 | 0)) {
                  break L4223;
                }
                L4227 : do {
                  if ($cmp373361) {
                    $sub387 = $row_1364 - $top_0394 | 0;
                    $shl396 = $row_1364 << 1;
                    $and397 = $shl396 & 14;
                    $and409 = $shl396 + 2 & 14;
                    $col_1362 = $add369315;
                    while (1) {
                      $conv376 = HEAPU16[2621484] | 0;
                      if (($col_1362 | 0) >= ($conv376 - 3 | 0)) {
                        break L4227;
                      }
                      $34 = HEAP32[1316051] | 0;
                      $add_ptr384_sum = Math_imul($conv376, $row_1364) + $col_1362 | 0;
                      $sub386 = $col_1362 - $left_0389 | 0;
                      $35 = HEAP32[1356938] | 0;
                      $and398 = $col_1362 & 1;
                      $shl400 = ($and398 | $and397) << 1;
                      $sub403 = 2 - ($35 >>> ($shl400 >>> 0) & 3) | 0;
                      if (($sub403 | 0) == 1) {
                        $and414 = $35 >>> (($and398 | $and409) << 1 >>> 0) & 3;
                        $arrayidx416 = $34 + ($add_ptr384_sum << 3) + 2 | 0;
                        $sub418 = 2 - $and414 | 0;
                        $add436 = ((((HEAPU16[$34 + ($add_ptr384_sum + 1 << 3) + ($sub418 << 1) >> 1] | 0) + (HEAPU16[$34 + ($add_ptr384_sum - 1 << 3) + ($sub418 << 1) >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 - 1 | 0) * 6 & -1) + 2 >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 + 1 | 0) * 6 & -1) + 2 >> 1] | 0) >> 1) + (HEAPU16[$arrayidx416 >> 1] | 0) | 0;
                        $cond442 = ($add436 | 0) < 65535 ? $add436 : 65535;
                        HEAP16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + ($sub418 << 1) >> 1] = ($cond442 | 0) < 0 ? 0 : $cond442 & 65535;
                        $conv462 = HEAPU16[2621484] | 0;
                        $val_0 = ((((HEAPU16[$34 + ($conv462 + $add_ptr384_sum << 3) + ($and414 << 1) >> 1] | 0) + (HEAPU16[$34 + ($add_ptr384_sum - $conv462 << 3) + ($and414 << 1) >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 - 256 | 0) * 6 & -1) + 2 >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 + 256 | 0) * 6 & -1) + 2 >> 1] | 0) >> 1) + (HEAPU16[$arrayidx416 >> 1] | 0) | 0;
                        $c_0 = $and414;
                      } else {
                        $val_0 = (((((((((HEAPU16[$34 + ($add_ptr384_sum + ($conv376 ^ -1) << 3) + ($sub403 << 1) >> 1] | 0) + 1 | 0) + (HEAPU16[$34 + ((1 - $conv376 | 0) + $add_ptr384_sum << 3) + ($sub403 << 1) >> 1] | 0) | 0) + (HEAPU16[$34 + (($conv376 - 1 | 0) + $add_ptr384_sum << 3) + ($sub403 << 1) >> 1] | 0) | 0) + (HEAPU16[$34 + (($conv376 + 1 | 0) + $add_ptr384_sum << 3) + ($sub403 << 1) >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 - 257 | 0) * 6 & -1) + 2 >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 - 255 | 0) * 6 & -1) + 2 >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 + 255 | 0) * 6 & -1) + 2 >> 1] | 0) | 0) - (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + (($sub386 + 257 | 0) * 6 & -1) + 2 >> 1] | 0) >> 2) + (HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + 2 >> 1] | 0) | 0;
                        $c_0 = $sub403;
                      }
                      $cond535 = ($val_0 | 0) < 65535 ? $val_0 : 65535;
                      HEAP16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + ($c_0 << 1) >> 1] = ($cond535 | 0) < 0 ? 0 : $cond535 & 65535;
                      $and557 = (HEAP32[1356938] | 0) >>> ($shl400 >>> 0) & 3;
                      HEAP16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + ($and557 << 1) >> 1] = HEAP16[$34 + ($add_ptr384_sum << 3) + ($and557 << 1) >> 1] | 0;
                      $58 = HEAP32[1390240] | 0;
                      do {
                        if (($58 | 0) > 0) {
                          $c_1355 = 0;
                          $xyz_sroa_2_0356 = .5;
                          $xyz_sroa_1_0357 = .5;
                          $xyz_sroa_0_0358 = .5;
                          while (1) {
                            $conv574 = +(HEAPU16[$10 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + ($c_1355 << 1) >> 1] | 0 | 0);
                            $add577 = $xyz_sroa_0_0358 + +HEAPF32[$xyz_cam + ($c_1355 << 2) >> 2] * $conv574;
                            $add586 = $xyz_sroa_1_0357 + +HEAPF32[$xyz_cam + 16 + ($c_1355 << 2) >> 2] * $conv574;
                            $add595 = $xyz_sroa_2_0356 + +HEAPF32[$xyz_cam + 32 + ($c_1355 << 2) >> 2] * $conv574;
                            $inc597 = $c_1355 + 1 | 0;
                            if (($inc597 | 0) < ($58 | 0)) {
                              $c_1355 = $inc597;
                              $xyz_sroa_2_0356 = $add595;
                              $xyz_sroa_1_0357 = $add586;
                              $xyz_sroa_0_0358 = $add577;
                            } else {
                              break;
                            }
                          }
                          $phitmp403 = ~~$add577;
                          $phitmp404 = ~~$add586;
                          $phitmp405 = ~~$add595;
                          if (($phitmp403 | 0) < 0) {
                            $cond624 = 0;
                            $xyz_sroa_1_0_lcssa445 = $phitmp404;
                            $xyz_sroa_2_0_lcssa447 = $phitmp405;
                            break;
                          } else {
                            $xyz_sroa_0_0_lcssa443 = $phitmp403;
                            $xyz_sroa_1_0_lcssa444 = $phitmp404;
                            $xyz_sroa_2_0_lcssa446 = $phitmp405;
                            label = 2963;
                            break;
                          }
                        } else {
                          $xyz_sroa_0_0_lcssa443 = 0;
                          $xyz_sroa_1_0_lcssa444 = 0;
                          $xyz_sroa_2_0_lcssa446 = 0;
                          label = 2963;
                        }
                      } while (0);
                      if ((label | 0) == 2963) {
                        label = 0;
                        $cond624 = ($xyz_sroa_0_0_lcssa443 | 0) < 65535 ? $xyz_sroa_0_0_lcssa443 : 65535;
                        $xyz_sroa_1_0_lcssa445 = $xyz_sroa_1_0_lcssa444;
                        $xyz_sroa_2_0_lcssa447 = $xyz_sroa_2_0_lcssa446;
                      }
                      $63 = +HEAPF32[$cbrt + ($cond624 << 2) >> 2];
                      if (($xyz_sroa_1_0_lcssa445 | 0) < 0) {
                        $cond652 = 0;
                      } else {
                        $cond652 = ($xyz_sroa_1_0_lcssa445 | 0) < 65535 ? $xyz_sroa_1_0_lcssa445 : 65535;
                      }
                      $64 = +HEAPF32[$cbrt + ($cond652 << 2) >> 2];
                      if (($xyz_sroa_2_0_lcssa447 | 0) < 0) {
                        $cond680 = 0;
                      } else {
                        $cond680 = ($xyz_sroa_2_0_lcssa447 | 0) < 65535 ? $xyz_sroa_2_0_lcssa447 : 65535;
                      }
                      $65 = +HEAPF32[$cbrt + ($cond680 << 2) >> 2];
                      HEAP16[$11 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) >> 1] = ~~(($64 * 116.0 + -16.0) * 64.0);
                      HEAP16[$11 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + 2 >> 1] = ~~(($63 - $64) * 32.0e3);
                      HEAP16[$11 + ($d_0366 * 393216 & -1) + ($sub387 * 1536 & -1) + ($sub386 * 6 & -1) + 4 >> 1] = ~~(($64 - $65) * 12800.0);
                      $inc705 = $col_1362 + 1 | 0;
                      if (($inc705 | 0) < ($sub372 | 0)) {
                        $col_1362 = $inc705;
                      } else {
                        break L4227;
                      }
                    }
                  }
                } while (0);
                $inc708 = $row_1364 + 1 | 0;
                if (($inc708 | 0) < ($sub359 | 0)) {
                  $row_1364 = $inc708;
                } else {
                  break L4223;
                }
              }
            }
          } while (0);
          $inc711 = $d_0366 + 1 | 0;
          if (($inc711 | 0) == 2) {
            break;
          } else {
            $d_0366 = $inc711;
          }
        }
        _memset($add_ptr46 | 0, 0, 131072);
        $add727 = $left_0389 + 2 | 0;
        $sub730 = $left_0389 + 254 | 0;
        $row_2373 = $add713;
        while (1) {
          if (($row_2373 | 0) >= ((HEAPU16[2699404] | 0) - 4 | 0)) {
            break;
          }
          $sub726 = $row_2373 - $top_0394 | 0;
          $col_2372 = $add727;
          while (1) {
            if (($col_2372 | 0) >= ((HEAPU16[2621484] | 0) - 4 | 0)) {
              break;
            }
            $sub740 = $col_2372 - $left_0389 | 0;
            $arrayidx747_sum = $sub740 - 1 | 0;
            $d_1369 = 0;
            while (1) {
              $conv754 = HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($sub740 * 6 & -1) >> 1] << 16 >> 16;
              $conv783 = HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($sub740 * 6 & -1) + 2 >> 1] << 16 >> 16;
              $conv800 = HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($sub740 * 6 & -1) + 4 >> 1] << 16 >> 16;
              $sub759 = $conv754 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum * 6 & -1) >> 1] << 16 >> 16) | 0;
              $shr768 = $sub759 >> 31;
              HEAP32[$ldiff + ($d_1369 << 4) >> 2] = ($shr768 ^ $sub759) - $shr768 | 0;
              $sub788 = $conv783 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum * 6 & -1) + 2 >> 1] << 16 >> 16) | 0;
              $mul797 = Math_imul($sub788, $sub788);
              $sub805 = $conv800 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum * 6 & -1) + 4 >> 1] << 16 >> 16) | 0;
              HEAP32[$abdiff + ($d_1369 << 4) >> 2] = Math_imul($sub805, $sub805) + $mul797 | 0;
              $arrayidx747_sum_1 = $sub740 + 1 | 0;
              $sub759_1 = $conv754 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_1 * 6 & -1) >> 1] << 16 >> 16) | 0;
              $shr768_1 = $sub759_1 >> 31;
              HEAP32[$ldiff + ($d_1369 << 4) + 4 >> 2] = ($shr768_1 ^ $sub759_1) - $shr768_1 | 0;
              $sub788_1 = $conv783 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_1 * 6 & -1) + 2 >> 1] << 16 >> 16) | 0;
              $mul797_1 = Math_imul($sub788_1, $sub788_1);
              $sub805_1 = $conv800 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_1 * 6 & -1) + 4 >> 1] << 16 >> 16) | 0;
              HEAP32[$abdiff + ($d_1369 << 4) + 4 >> 2] = Math_imul($sub805_1, $sub805_1) + $mul797_1 | 0;
              $arrayidx747_sum_2 = $sub740 - 256 | 0;
              $sub759_2 = $conv754 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_2 * 6 & -1) >> 1] << 16 >> 16) | 0;
              $shr768_2 = $sub759_2 >> 31;
              HEAP32[$ldiff + ($d_1369 << 4) + 8 >> 2] = ($shr768_2 ^ $sub759_2) - $shr768_2 | 0;
              $sub788_2 = $conv783 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_2 * 6 & -1) + 2 >> 1] << 16 >> 16) | 0;
              $mul797_2 = Math_imul($sub788_2, $sub788_2);
              $sub805_2 = $conv800 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_2 * 6 & -1) + 4 >> 1] << 16 >> 16) | 0;
              HEAP32[$abdiff + ($d_1369 << 4) + 8 >> 2] = Math_imul($sub805_2, $sub805_2) + $mul797_2 | 0;
              $arrayidx747_sum_3 = $sub740 + 256 | 0;
              $sub759_3 = $conv754 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_3 * 6 & -1) >> 1] << 16 >> 16) | 0;
              $shr768_3 = $sub759_3 >> 31;
              HEAP32[$ldiff + ($d_1369 << 4) + 12 >> 2] = ($shr768_3 ^ $sub759_3) - $shr768_3 | 0;
              $sub788_3 = $conv783 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_3 * 6 & -1) + 2 >> 1] << 16 >> 16) | 0;
              $mul797_3 = Math_imul($sub788_3, $sub788_3);
              $sub805_3 = $conv800 - (HEAP16[$11 + ($d_1369 * 393216 & -1) + ($sub726 * 1536 & -1) + ($arrayidx747_sum_3 * 6 & -1) + 4 >> 1] << 16 >> 16) | 0;
              HEAP32[$abdiff + ($d_1369 << 4) + 12 >> 2] = Math_imul($sub805_3, $sub805_3) + $mul797_3 | 0;
              $inc822 = $d_1369 + 1 | 0;
              if (($inc822 | 0) == 2) {
                break;
              } else {
                $d_1369 = $inc822;
              }
            }
            $83 = HEAP32[$arrayidx825 >> 2] | 0;
            $84 = HEAP32[$arrayidx827 >> 2] | 0;
            $_ = $83 >>> 0 > $84 >>> 0 ? $83 : $84;
            $85 = HEAP32[$arrayidx839 >> 2] | 0;
            $86 = HEAP32[$arrayidx841 >> 2] | 0;
            $cond851 = $85 >>> 0 > $86 >>> 0 ? $85 : $86;
            $__cond851 = $_ >>> 0 < $cond851 >>> 0 ? $_ : $cond851;
            $87 = HEAP32[$arrayidx887 >> 2] | 0;
            $88 = HEAP32[$arrayidx889 >> 2] | 0;
            $_347 = $87 >>> 0 > $88 >>> 0 ? $87 : $88;
            $89 = HEAP32[$arrayidx901 >> 2] | 0;
            $90 = HEAP32[$arrayidx903 >> 2] | 0;
            $cond913 = $89 >>> 0 > $90 >>> 0 ? $89 : $90;
            $cond947 = $_347 >>> 0 < $cond913 >>> 0 ? $_347 : $cond913;
            $arrayidx967 = $12 + ($sub726 << 8) + $sub740 | 0;
            if (!($83 >>> 0 > $__cond851 >>> 0 | $87 >>> 0 > $cond947 >>> 0)) {
              HEAP8[$arrayidx967] = (HEAP8[$arrayidx967] | 0) + 1 & 255;
            }
            if (!($84 >>> 0 > $__cond851 >>> 0 | $88 >>> 0 > $cond947 >>> 0)) {
              HEAP8[$arrayidx967] = (HEAP8[$arrayidx967] | 0) + 1 & 255;
            }
            do {
              if ((HEAP32[$ldiff + 8 >> 2] | 0) >>> 0 <= $__cond851 >>> 0) {
                if ((HEAP32[$abdiff + 8 >> 2] | 0) >>> 0 > $cond947 >>> 0) {
                  break;
                }
                HEAP8[$arrayidx967] = (HEAP8[$arrayidx967] | 0) + 1 & 255;
              }
            } while (0);
            do {
              if ((HEAP32[$ldiff + 12 >> 2] | 0) >>> 0 <= $__cond851 >>> 0) {
                if ((HEAP32[$abdiff + 12 >> 2] | 0) >>> 0 > $cond947 >>> 0) {
                  break;
                }
                HEAP8[$arrayidx967] = (HEAP8[$arrayidx967] | 0) + 1 & 255;
              }
            } while (0);
            $arrayidx967_1 = $12 + 65536 + ($sub726 << 8) + $sub740 | 0;
            do {
              if ((HEAP32[$ldiff + 16 >> 2] | 0) >>> 0 <= $__cond851 >>> 0) {
                if ((HEAP32[$abdiff + 16 >> 2] | 0) >>> 0 > $cond947 >>> 0) {
                  break;
                }
                HEAP8[$arrayidx967_1] = (HEAP8[$arrayidx967_1] | 0) + 1 & 255;
              }
            } while (0);
            do {
              if ((HEAP32[$ldiff + 20 >> 2] | 0) >>> 0 <= $__cond851 >>> 0) {
                if ((HEAP32[$abdiff + 20 >> 2] | 0) >>> 0 > $cond947 >>> 0) {
                  break;
                }
                HEAP8[$arrayidx967_1] = (HEAP8[$arrayidx967_1] | 0) + 1 & 255;
              }
            } while (0);
            if (!($85 >>> 0 > $__cond851 >>> 0 | $89 >>> 0 > $cond947 >>> 0)) {
              HEAP8[$arrayidx967_1] = (HEAP8[$arrayidx967_1] | 0) + 1 & 255;
            }
            if (!($86 >>> 0 > $__cond851 >>> 0 | $90 >>> 0 > $cond947 >>> 0)) {
              HEAP8[$arrayidx967_1] = (HEAP8[$arrayidx967_1] | 0) + 1 & 255;
            }
            $inc977 = $col_2372 + 1 | 0;
            if (($inc977 | 0) < ($sub730 | 0)) {
              $col_2372 = $inc977;
            } else {
              break;
            }
          }
          $inc980 = $row_2373 + 1 | 0;
          if (($inc980 | 0) < ($sub716 | 0)) {
            $row_2373 = $inc980;
          } else {
            break;
          }
        }
        $add996 = $left_0389 + 3 | 0;
        $sub999 = $left_0389 + 253 | 0;
        $row_3384 = $add982;
        while (1) {
          if (($row_3384 | 0) >= ((HEAPU16[2699404] | 0) - 5 | 0)) {
            break;
          }
          $sub995 = $row_3384 - $top_0394 | 0;
          $sub1015 = $sub995 - 1 | 0;
          $add1017 = $sub995 + 1 | 0;
          $col_3382 = $add996;
          while (1) {
            $conv1003 = HEAPU16[2621484] | 0;
            if (($col_3382 | 0) >= ($conv1003 - 5 | 0)) {
              break;
            }
            $sub1009 = $col_3382 - $left_0389 | 0;
            $sub1021 = $sub1009 - 1 | 0;
            $add1023 = $sub1009 + 1 | 0;
            $i_4375 = $sub1015;
            $add1032_lcssa377 = 0;
            while (1) {
              $j_1374 = $sub1021;
              $94 = $add1032_lcssa377;
              while (1) {
                $add1032 = $94 + (HEAP8[$12 + ($i_4375 << 8) + $j_1374 | 0] << 24 >> 24) | 0;
                $inc1034 = $j_1374 + 1 | 0;
                if (($inc1034 | 0) > ($add1023 | 0)) {
                  break;
                } else {
                  $j_1374 = $inc1034;
                  $94 = $add1032;
                }
              }
              $inc1037 = $i_4375 + 1 | 0;
              if (($inc1037 | 0) > ($add1017 | 0)) {
                $i_4375_1 = $sub1015;
                $add1032_lcssa377_1 = 0;
                break;
              } else {
                $i_4375 = $inc1037;
                $add1032_lcssa377 = $add1032;
              }
            }
            while (1) {
              $j_1374_1 = $sub1021;
              $133 = $add1032_lcssa377_1;
              while (1) {
                $add1032_1 = $133 + (HEAP8[$12 + 65536 + ($i_4375_1 << 8) + $j_1374_1 | 0] << 24 >> 24) | 0;
                $inc1034_1 = $j_1374_1 + 1 | 0;
                if (($inc1034_1 | 0) > ($add1023 | 0)) {
                  break;
                } else {
                  $j_1374_1 = $inc1034_1;
                  $133 = $add1032_1;
                }
              }
              $inc1037_1 = $i_4375_1 + 1 | 0;
              if (($inc1037_1 | 0) > ($add1017 | 0)) {
                break;
              } else {
                $i_4375_1 = $inc1037_1;
                $add1032_lcssa377_1 = $add1032_1;
              }
            }
            if (($add1032 | 0) == ($add1032_1 | 0)) {
              $conv1084 = ((HEAPU16[$14 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) >> 1] | 0) + (HEAPU16[$10 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) >> 1] | 0) | 0) >>> 1 & 65535;
              $add1087 = Math_imul($conv1003, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1087 << 3) >> 1] = $conv1084;
              $conv1084_1 = ((HEAPU16[$14 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 2 >> 1] | 0) + (HEAPU16[$10 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 2 >> 1] | 0) | 0) >>> 1 & 65535;
              $add1087_1 = Math_imul(HEAPU16[2621484] | 0, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1087_1 << 3) + 2 >> 1] = $conv1084_1;
              $conv1084_2 = ((HEAPU16[$14 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 4 >> 1] | 0) + (HEAPU16[$10 + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 4 >> 1] | 0) | 0) >>> 1 & 65535;
              $add1087_2 = Math_imul(HEAPU16[2621484] | 0, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1087_2 << 3) + 4 >> 1] = $conv1084_2;
            } else {
              $conv1054 = ($add1032_1 | 0) > ($add1032 | 0) & 1;
              $107 = HEAP16[$10 + ($conv1054 * 393216 & -1) + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) >> 1] | 0;
              $add1061 = Math_imul($conv1003, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1061 << 3) >> 1] = $107;
              $109 = HEAP16[$10 + ($conv1054 * 393216 & -1) + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 2 >> 1] | 0;
              $add1061_1 = Math_imul(HEAPU16[2621484] | 0, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1061_1 << 3) + 2 >> 1] = $109;
              $112 = HEAP16[$10 + ($conv1054 * 393216 & -1) + ($sub995 * 1536 & -1) + ($sub1009 * 6 & -1) + 4 >> 1] | 0;
              $add1061_2 = Math_imul(HEAPU16[2621484] | 0, $row_3384) + $col_3382 | 0;
              HEAP16[(HEAP32[1316051] | 0) + ($add1061_2 << 3) + 4 >> 1] = $112;
            }
            $inc1095 = $col_3382 + 1 | 0;
            if (($inc1095 | 0) < ($sub999 | 0)) {
              $col_3382 = $inc1095;
            } else {
              break;
            }
          }
          $inc1098 = $row_3384 + 1 | 0;
          if (($inc1098 | 0) < ($sub985 | 0)) {
            $row_3384 = $inc1098;
          } else {
            break;
          }
        }
        $add1101 = $left_0389 + 250 | 0;
        $115 = HEAP16[2621484] | 0;
        if (($add1101 | 0) < (($115 & 65535) - 5 | 0)) {
          $left_0389 = $add1101;
        } else {
          break;
        }
      }
      $117 = $115;
      $116 = HEAP16[2699404] | 0;
    } else {
      $117 = $16;
      $116 = $15;
    }
    $add1104 = $top_0394 + 250 | 0;
    if (($add1104 | 0) < (($116 & 65535) - 5 | 0)) {
      $top_0394 = $add1104;
      $16 = $117;
      $15 = $116;
    } else {
      break;
    }
  }
  _free($call45);
  STACKTOP = __stackBase__;
  return;
}
function _median_filter() {
  var $med = 0, $arrayidx106 = 0, $pass_067 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c_064 = 0, $conv40 = 0, $pix_045 = 0, $incdec_ptr = 0, $7 = 0, $8 = 0, $conv = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $conv_lcssa = 0, $conv1554 = 0, $13 = 0, $14 = 0, $conv1563 = 0, $15 = 0, $pix_160 = 0, $sub28 = 0, $conv3049 = 0, $k_052 = 0, $i_051 = 0, $add36 = 0, $k_148 = 0, $j_047 = 0, $inc = 0, $inc49 = 0, $i_153 = 0, $arrayidx60 = 0, $19 = 0, $arrayidx64 = 0, $21 = 0, $add75 = 0, $sub86 = 0, $add104 = 0, $add110 = 0, $cond139 = 0, $26 = 0, $27 = 0, $28 = 0, $incdec_ptr144 = 0, $conv15 = 0, $29 = 0, $30 = 0, $31 = 0, $add147 = 0, $inc150 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $med = __stackBase__ | 0;
  if ((HEAP32[1315897] | 0) < 1) {
    STACKTOP = __stackBase__;
    return;
  }
  $arrayidx106 = $med + 16 | 0;
  $pass_067 = 1;
  while (1) {
    if ((HEAP32[1310884] | 0) != 0) {
      $2 = HEAP32[_stderr >> 2] | 0;
      _fprintf($2 | 0, 5576928, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $pass_067, tempInt) | 0);
    }
    $c_064 = 0;
    $5 = HEAP32[1316051] | 0;
    $4 = HEAP16[2621484] | 0;
    $3 = HEAP16[2699404] | 0;
    while (1) {
      $conv40 = $4 & 65535;
      L4328 : do {
        if ((Math_imul($3 & 65535, $conv40) | 0) == 0) {
          $conv_lcssa = $conv40;
          $12 = $5;
          $11 = $4;
          $10 = $3;
        } else {
          $pix_045 = $5;
          while (1) {
            HEAP16[$pix_045 + 6 >> 1] = HEAP16[$pix_045 + ($c_064 << 1) >> 1] | 0;
            $incdec_ptr = $pix_045 + 8 | 0;
            $7 = HEAP32[1316051] | 0;
            $8 = HEAP16[2621484] | 0;
            $conv = $8 & 65535;
            $9 = HEAP16[2699404] | 0;
            if ($incdec_ptr >>> 0 < ($7 + (Math_imul($9 & 65535, $conv) << 3) | 0) >>> 0) {
              $pix_045 = $incdec_ptr;
            } else {
              $conv_lcssa = $conv;
              $12 = $7;
              $11 = $8;
              $10 = $9;
              break L4328;
            }
          }
        }
      } while (0);
      $conv1554 = $11 & 65535;
      L4332 : do {
        if (($conv_lcssa | 0) < (Math_imul(($10 & 65535) - 1 | 0, $conv1554) | 0)) {
          $pix_160 = $12 + ($conv_lcssa << 3) | 0;
          $15 = $12;
          $conv1563 = $conv1554;
          $14 = $11;
          $13 = $10;
          while (1) {
            if (((($pix_160 - $15 >> 3) + 1 | 0) % ($conv1563 | 0) | 0) < 2) {
              $28 = $15;
              $27 = $14;
              $26 = $13;
            } else {
              $sub28 = -$conv1563 | 0;
              $conv3049 = $14 & 65535;
              L4337 : do {
                if (($conv3049 | 0) < ($sub28 | 0)) {
                  $i_153 = 0;
                } else {
                  $i_051 = $sub28;
                  $k_052 = 0;
                  while (1) {
                    $add36 = $i_051 + 1 | 0;
                    $j_047 = $i_051 - 1 | 0;
                    $k_148 = $k_052;
                    while (1) {
                      $inc = $k_148 + 1 | 0;
                      HEAP32[$med + ($k_148 << 2) >> 2] = (HEAPU16[$pix_160 + ($j_047 << 3) + 6 >> 1] | 0) - (HEAPU16[$pix_160 + ($j_047 << 3) + 2 >> 1] | 0) | 0;
                      $inc49 = $j_047 + 1 | 0;
                      if (($inc49 | 0) > ($add36 | 0)) {
                        break;
                      } else {
                        $j_047 = $inc49;
                        $k_148 = $inc;
                      }
                    }
                    if (($i_051 | 0) > 0) {
                      $i_153 = 0;
                      break L4337;
                    } else {
                      $i_051 = $conv3049 + $i_051 | 0;
                      $k_052 = $inc;
                    }
                  }
                }
              } while (0);
              while (1) {
                $arrayidx60 = $med + ((HEAPU8[$i_153 + 5263548 | 0] | 0) << 2) | 0;
                $19 = HEAP32[$arrayidx60 >> 2] | 0;
                $arrayidx64 = $med + ((HEAPU8[5263548 + ($i_153 | 1) | 0] | 0) << 2) | 0;
                $21 = HEAP32[$arrayidx64 >> 2] | 0;
                if (($19 | 0) > ($21 | 0)) {
                  $add75 = $21 + $19 | 0;
                  HEAP32[$arrayidx60 >> 2] = $add75;
                  $sub86 = $add75 - (HEAP32[$arrayidx64 >> 2] | 0) | 0;
                  HEAP32[$arrayidx64 >> 2] = $sub86;
                  HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) - $sub86 | 0;
                }
                $add104 = $i_153 + 2 | 0;
                if ($add104 >>> 0 < 38) {
                  $i_153 = $add104;
                } else {
                  break;
                }
              }
              $add110 = (HEAPU16[$pix_160 + 2 >> 1] | 0) + (HEAP32[$arrayidx106 >> 2] | 0) | 0;
              if (($add110 | 0) < 0) {
                $cond139 = 0;
              } else {
                $cond139 = ($add110 | 0) < 65535 ? $add110 & 65535 : -1;
              }
              HEAP16[$pix_160 + ($c_064 << 1) >> 1] = $cond139;
              $28 = HEAP32[1316051] | 0;
              $27 = HEAP16[2621484] | 0;
              $26 = HEAP16[2699404] | 0;
            }
            $incdec_ptr144 = $pix_160 + 8 | 0;
            $conv15 = $27 & 65535;
            if ($incdec_ptr144 >>> 0 < ($28 + (Math_imul(($26 & 65535) - 1 | 0, $conv15) << 3) | 0) >>> 0) {
              $pix_160 = $incdec_ptr144;
              $15 = $28;
              $conv1563 = $conv15;
              $14 = $27;
              $13 = $26;
            } else {
              $31 = $28;
              $30 = $27;
              $29 = $26;
              break L4332;
            }
          }
        } else {
          $31 = $12;
          $30 = $11;
          $29 = $10;
        }
      } while (0);
      $add147 = $c_064 + 2 | 0;
      if (($add147 | 0) < 3) {
        $c_064 = $add147;
        $5 = $31;
        $4 = $30;
        $3 = $29;
      } else {
        break;
      }
    }
    $inc150 = $pass_067 + 1 | 0;
    if (($inc150 | 0) > (HEAP32[1315897] | 0)) {
      break;
    } else {
      $pass_067 = $inc150;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _blend_highlights() {
  var $cam = 0, $lab = 0, $0 = 0, $2 = 0, $4 = 0, $clip_0_lcssa = 0, $5 = 0, $conv52 = 0.0, $_pre104 = 0, $clip_096 = 0, $c_095 = 0, $conv = 0, $conv_clip_0 = 0, $inc = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $row_092 = 0, $12 = 0, $13 = 0, $14 = 0, $col_087 = 0, $add = 0, $15 = 0, $c_1 = 0, $cmp3962 = 0, $c_263 = 0, $conv47 = 0.0, $inc61 = 0, $cmp9570 = 0, $c_368 = 0, $arrayidx72 = 0, $add8666 = 0.0, $j_065 = 0, $add86 = 0.0, $inc88 = 0, $inc91 = 0, $20 = 0.0, $c_471 = 0, $21 = 0.0, $add104 = 0.0, $inc106 = 0, $cmp9570111112 = 0, $22 = 0.0, $c_576 = 0, $arrayidx121 = 0, $inc124 = 0, $c_681 = 0, $arrayidx131 = 0, $add14579 = 0.0, $j_178 = 0, $add145 = 0.0, $inc147 = 0, $inc150 = 0, $26 = 0, $27 = 0, $28 = 0, $c_784 = 0, $conv160 = 0, $inc167 = 0, $30 = 0, $_pre108 = 0, $31 = 0, $32 = 0, $33 = 0, $inc170 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $inc173 = 0, $c_368_1 = 0, $arrayidx72_1 = 0, $add8666_1 = 0.0, $j_065_1 = 0, $add86_1 = 0.0, $inc88_1 = 0, $inc91_1 = 0, $41 = 0.0, $c_471_1 = 0, $42 = 0.0, $add104_1 = 0.0, $inc106_1 = 0, $conv115 = 0.0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  $cam = __stackBase__ | 0;
  $lab = __stackBase__ + 32 | 0;
  $0 = HEAP32[1390240] | 0;
  if (($0 - 3 | 0) >>> 0 > 1) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[1310884] | 0) == 0) {
    $4 = $0;
  } else {
    $2 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5576824, 23, 1, $2 | 0);
    $4 = HEAP32[1390240] | 0;
  }
  L4363 : do {
    if (($4 | 0) > 0) {
      $c_095 = 0;
      $clip_096 = 2147483647;
      while (1) {
        $conv = ~~(+HEAPF32[5245612 + ($c_095 << 2) >> 2] * 65535.0);
        $conv_clip_0 = ($clip_096 | 0) > ($conv | 0) ? $conv : $clip_096;
        $inc = $c_095 + 1 | 0;
        if (($inc | 0) < ($4 | 0)) {
          $c_095 = $inc;
          $clip_096 = $conv_clip_0;
        } else {
          $clip_0_lcssa = $conv_clip_0;
          break L4363;
        }
      }
    } else {
      $clip_0_lcssa = 2147483647;
    }
  } while (0);
  $5 = HEAP16[2699404] | 0;
  if ($5 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $conv52 = +($clip_0_lcssa | 0);
  $_pre104 = HEAP16[2621484] | 0;
  $row_092 = 0;
  $11 = $_pre104;
  $10 = $5;
  $9 = $4;
  $8 = $_pre104;
  $7 = $4;
  while (1) {
    if ($11 << 16 >> 16 == 0) {
      $38 = 0;
      $37 = $10;
      $36 = $9;
      $35 = $8;
      $34 = $7;
    } else {
      $col_087 = 0;
      $14 = $9;
      $13 = $8;
      $12 = $7;
      while (1) {
        $add = Math_imul($13 & 65535, $row_092) + $col_087 | 0;
        $15 = HEAP32[1316051] | 0;
        $c_1 = 0;
        while (1) {
          if (($c_1 | 0) >= ($14 | 0)) {
            break;
          }
          if ((HEAPU16[$15 + ($add << 3) + ($c_1 << 1) >> 1] | 0 | 0) > ($clip_0_lcssa | 0)) {
            break;
          } else {
            $c_1 = $c_1 + 1 | 0;
          }
        }
        L4379 : do {
          if (($c_1 | 0) == ($14 | 0)) {
            $33 = $14;
            $32 = $13;
            $31 = $12;
          } else {
            $cmp3962 = ($12 | 0) > 0;
            if ($cmp3962) {
              $c_263 = 0;
            } else {
              $33 = $12;
              $32 = $13;
              $31 = $12;
              break;
            }
            while (1) {
              $conv47 = +((HEAPU16[$15 + ($add << 3) + ($c_263 << 1) >> 1] | 0) >>> 0);
              HEAPF32[$cam + ($c_263 << 2) >> 2] = $conv47;
              HEAPF32[$cam + 16 + ($c_263 << 2) >> 2] = $conv47 < $conv52 ? $conv47 : $conv52;
              $inc61 = $c_263 + 1 | 0;
              if (($inc61 | 0) < ($12 | 0)) {
                $c_263 = $inc61;
              } else {
                break;
              }
            }
            $cmp9570 = ($12 | 0) > 1;
            L4384 : do {
              if ($cmp3962) {
                $c_368 = 0;
                while (1) {
                  $arrayidx72 = $lab + ($c_368 << 2) | 0;
                  HEAPF32[$arrayidx72 >> 2] = 0.0;
                  $j_065 = 0;
                  $add8666 = 0.0;
                  while (1) {
                    $add86 = $add8666 + +HEAPF32[5561264 + ($12 - 3 << 6) + ($c_368 << 4) + ($j_065 << 2) >> 2] * +HEAPF32[$cam + ($j_065 << 2) >> 2];
                    $inc88 = $j_065 + 1 | 0;
                    if (($inc88 | 0) == ($12 | 0)) {
                      break;
                    } else {
                      $j_065 = $inc88;
                      $add8666 = $add86;
                    }
                  }
                  HEAPF32[$arrayidx72 >> 2] = $add86;
                  $inc91 = $c_368 + 1 | 0;
                  if (($inc91 | 0) == ($12 | 0)) {
                    break L4384;
                  } else {
                    $c_368 = $inc91;
                  }
                }
              }
            } while (0);
            L4391 : do {
              if ($cmp9570) {
                $c_471 = 1;
                $20 = 0.0;
                while (1) {
                  $21 = +HEAPF32[$lab + ($c_471 << 2) >> 2];
                  $add104 = $20 + $21 * $21;
                  $inc106 = $c_471 + 1 | 0;
                  if (($inc106 | 0) == ($12 | 0)) {
                    $22 = $add104;
                    $cmp9570111112 = 1;
                    break L4391;
                  } else {
                    $c_471 = $inc106;
                    $20 = $add104;
                  }
                }
              } else {
                $22 = 0.0;
                $cmp9570111112 = 0;
              }
            } while (0);
            L4395 : do {
              if ($cmp3962) {
                $c_368_1 = 0;
                while (1) {
                  $arrayidx72_1 = $lab + 16 + ($c_368_1 << 2) | 0;
                  HEAPF32[$arrayidx72_1 >> 2] = 0.0;
                  $j_065_1 = 0;
                  $add8666_1 = 0.0;
                  while (1) {
                    $add86_1 = $add8666_1 + +HEAPF32[5561264 + ($12 - 3 << 6) + ($c_368_1 << 4) + ($j_065_1 << 2) >> 2] * +HEAPF32[$cam + 16 + ($j_065_1 << 2) >> 2];
                    $inc88_1 = $j_065_1 + 1 | 0;
                    if (($inc88_1 | 0) == ($12 | 0)) {
                      break;
                    } else {
                      $j_065_1 = $inc88_1;
                      $add8666_1 = $add86_1;
                    }
                  }
                  HEAPF32[$arrayidx72_1 >> 2] = $add86_1;
                  $inc91_1 = $c_368_1 + 1 | 0;
                  if (($inc91_1 | 0) == ($12 | 0)) {
                    break L4395;
                  } else {
                    $c_368_1 = $inc91_1;
                  }
                }
              }
            } while (0);
            L4402 : do {
              if ($cmp9570111112) {
                $c_471_1 = 1;
                $41 = 0.0;
                while (1) {
                  $42 = +HEAPF32[$lab + 16 + ($c_471_1 << 2) >> 2];
                  $add104_1 = $41 + $42 * $42;
                  $inc106_1 = $c_471_1 + 1 | 0;
                  if (($inc106_1 | 0) == ($12 | 0)) {
                    break;
                  } else {
                    $c_471_1 = $inc106_1;
                    $41 = $add104_1;
                  }
                }
                $conv115 = +Math_sqrt($add104_1 / $22);
                if ($cmp9570111112) {
                  $c_576 = 1;
                } else {
                  break;
                }
                while (1) {
                  $arrayidx121 = $lab + ($c_576 << 2) | 0;
                  HEAPF32[$arrayidx121 >> 2] = $conv115 * +HEAPF32[$arrayidx121 >> 2];
                  $inc124 = $c_576 + 1 | 0;
                  if (($inc124 | 0) < ($12 | 0)) {
                    $c_576 = $inc124;
                  } else {
                    break L4402;
                  }
                }
              }
            } while (0);
            if ($cmp3962) {
              $c_681 = 0;
            } else {
              $33 = $12;
              $32 = $13;
              $31 = $12;
              break;
            }
            while (1) {
              $arrayidx131 = $cam + ($c_681 << 2) | 0;
              HEAPF32[$arrayidx131 >> 2] = 0.0;
              $j_178 = 0;
              $add14579 = 0.0;
              while (1) {
                $add145 = $add14579 + +HEAPF32[5561392 + ($12 - 3 << 6) + ($c_681 << 4) + ($j_178 << 2) >> 2] * +HEAPF32[$lab + ($j_178 << 2) >> 2];
                $inc147 = $j_178 + 1 | 0;
                if (($inc147 | 0) == ($12 | 0)) {
                  break;
                } else {
                  $j_178 = $inc147;
                  $add14579 = $add145;
                }
              }
              HEAPF32[$arrayidx131 >> 2] = $add145;
              $inc150 = $c_681 + 1 | 0;
              if (($inc150 | 0) < ($12 | 0)) {
                $c_681 = $inc150;
              } else {
                break;
              }
            }
            if ($cmp3962) {
              $c_784 = 0;
              $28 = $12;
              $27 = $13;
              $26 = $15;
            } else {
              $33 = $12;
              $32 = $13;
              $31 = $12;
              break;
            }
            while (1) {
              $conv160 = ~~(+HEAPF32[$cam + ($c_784 << 2) >> 2] / +($28 | 0));
              HEAP16[$26 + (Math_imul($27 & 65535, $row_092) + $col_087 << 3) + ($c_784 << 1) >> 1] = $conv160;
              $inc167 = $c_784 + 1 | 0;
              $30 = HEAP32[1390240] | 0;
              $_pre108 = HEAP16[2621484] | 0;
              if (($inc167 | 0) >= ($30 | 0)) {
                $33 = $30;
                $32 = $_pre108;
                $31 = $30;
                break L4379;
              }
              $c_784 = $inc167;
              $28 = $30;
              $27 = $_pre108;
              $26 = HEAP32[1316051] | 0;
            }
          }
        } while (0);
        $inc170 = $col_087 + 1 | 0;
        if (($inc170 | 0) < ($32 & 65535 | 0)) {
          $col_087 = $inc170;
          $14 = $33;
          $13 = $32;
          $12 = $31;
        } else {
          break;
        }
      }
      $38 = $32;
      $37 = HEAP16[2699404] | 0;
      $36 = $33;
      $35 = $32;
      $34 = $31;
    }
    $inc173 = $row_092 + 1 | 0;
    if (($inc173 | 0) < ($37 & 65535 | 0)) {
      $row_092 = $inc173;
      $11 = $38;
      $10 = $37;
      $9 = $36;
      $8 = $35;
      $7 = $34;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _recover_highlights() {
  var $hsat = 0, $1 = 0, $conv1 = 0.0, $4 = 0, $c_0200 = 0, $inc = 0, $c_1197 = 0, $kc_0196 = 0, $kc_1 = 0, $inc16 = 0, $kc_0_lcssa = 0, $shr = 0, $div = 0, $div23 = 0, $mul24 = 0, $cmp_i = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $mul34 = 0, $cmp36154 = 0, $conv115 = 0, $cmp124160 = 0, $17 = 0, $c_2191 = 0, $arrayidx70 = 0, $mrow_0155 = 0, $inc112_pre = 0, $mul104 = 0, $mcol_0153 = 0, $shr44 = 0, $mul45 = 0, $mul49141 = 0, $mul60131 = 0, $conv64 = 0, $20 = 0, $sum_0146 = 0.0, $wgt_0145 = 0.0, $row_0144 = 0, $count_0143 = 0, $mul55 = 0, $mul65 = 0, $21 = 0, $sum_1136 = 0.0, $wgt_1135 = 0.0, $col_0134 = 0, $count_1133 = 0, $add66 = 0, $conv69 = 0, $23 = 0, $count_2 = 0, $wgt_2 = 0.0, $sum_2 = 0.0, $inc90 = 0, $sum_1_lcssa = 0.0, $wgt_1_lcssa = 0.0, $count_1_lcssa = 0, $inc93 = 0, $sum_0_lcssa = 0.0, $wgt_0_lcssa = 0.0, $count_0_lcssa = 0, $inc109 = 0, $spread_0 = 0, $dec = 0, $mrow_1164 = 0, $mul127 = 0, $mcol_1161 = 0, $arrayidx129 = 0, $sum_3159 = 0.0, $d_0158 = 0, $count_3157 = 0, $add140 = 0, $add144 = 0, $27 = 0.0, $add157 = 0, $count_4 = 0, $sum_4 = 0.0, $inc169 = 0, $inc184 = 0, $inc187 = 0, $i_0168 = 0, $change_0167 = 0, $arrayidx194 = 0, $28 = 0.0, $change_1 = 0, $inc203 = 0, $i_1171 = 0, $arrayidx214 = 0, $inc221 = 0, $arrayidx260 = 0, $mrow_2188 = 0, $inc306_pre = 0, $mul268 = 0, $30 = 0, $mcol_2185 = 0, $shr232 = 0, $mul233 = 0, $add246 = 0, $arrayidx270 = 0, $31 = 0, $shr237183 = 0, $row_1181 = 0, $mul244 = 0, $32 = 0, $33 = 0, $col_1176 = 0, $add255 = 0, $35 = 0, $arrayidx258 = 0, $conv259 = 0, $conv272 = 0, $cond = 0, $39 = 0, $inc297 = 0, $40 = 0, $inc300 = 0, $shr237 = 0, $41 = 0, $42 = 0, $inc310 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $hsat = __stackBase__ | 0;
  if ((HEAP32[1310884] | 0) != 0) {
    $1 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5576664, 25, 1, $1 | 0);
  }
  $conv1 = +_ldexp(1.0, 4 - (HEAP32[1349701] | 0) | 0);
  $4 = HEAP32[1390240] | 0;
  L4426 : do {
    if (($4 | 0) == 0) {
      $kc_0_lcssa = 0;
    } else {
      $c_0200 = 0;
      while (1) {
        HEAP32[$hsat + ($c_0200 << 2) >> 2] = ~~(+HEAPF32[5245612 + ($c_0200 << 2) >> 2] * 32.0e3);
        $inc = $c_0200 + 1 | 0;
        if ($inc >>> 0 < $4 >>> 0) {
          $c_0200 = $inc;
        } else {
          break;
        }
      }
      if ($4 >>> 0 > 1) {
        $kc_0196 = 0;
        $c_1197 = 1;
      } else {
        $kc_0_lcssa = 0;
        break;
      }
      while (1) {
        $kc_1 = +HEAPF32[5245612 + ($kc_0196 << 2) >> 2] < +HEAPF32[5245612 + ($c_1197 << 2) >> 2] ? $c_1197 : $kc_0196;
        $inc16 = $c_1197 + 1 | 0;
        if ($inc16 >>> 0 < $4 >>> 0) {
          $kc_0196 = $kc_1;
          $c_1197 = $inc16;
        } else {
          $kc_0_lcssa = $kc_1;
          break L4426;
        }
      }
    }
  } while (0);
  $shr = 4 >>> ((HEAPU16[2622460] | 0) >>> 0);
  $div = (HEAPU16[2699404] | 0 | 0) / ($shr | 0) & -1;
  $div23 = (HEAPU16[2621484] | 0 | 0) / ($shr | 0) & -1;
  $mul24 = Math_imul($div23, $div);
  $cmp_i = ($mul24 | 0) == 0;
  do {
    if ($cmp_i) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul24 << 2;
      if ($mul24 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul24 >>> 0) >>> 0 | 0) == 4 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $13 = HEAP32[_stderr >> 2] | 0;
    $14 = HEAP32[1316054] | 0;
    _fprintf($13 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = 5576444, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $15 = $call_i;
  $16 = HEAP32[1390240] | 0;
  if (($16 | 0) == 0) {
    _free($call_i);
    STACKTOP = __stackBase__;
    return;
  }
  $mul34 = $mul24 << 2;
  $cmp36154 = ($div | 0) == 0;
  $conv115 = ~~(32.0 / $conv1);
  $cmp124160 = ($div23 | 0) == 0;
  $c_2191 = 0;
  $17 = $16;
  while (1) {
    if (($c_2191 | 0) == ($kc_0_lcssa | 0)) {
      $42 = $17;
    } else {
      _memset($call_i | 0, 0, $mul34 | 0);
      L4450 : do {
        if ($cmp36154) {
          $spread_0 = $conv115;
        } else {
          $arrayidx70 = $hsat + ($c_2191 << 2) | 0;
          $mrow_0155 = 0;
          while (1) {
            $inc112_pre = $mrow_0155 + 1 | 0;
            L4454 : do {
              if (!$cmp124160) {
                $mul104 = Math_imul($mrow_0155, $div23);
                $mcol_0153 = 0;
                while (1) {
                  $shr44 = 4 >>> ((HEAPU16[2622460] | 0) >>> 0);
                  $mul45 = Math_imul($shr44, $mrow_0155);
                  $mul49141 = Math_imul($shr44, $inc112_pre);
                  L4458 : do {
                    if ($mul45 >>> 0 < $mul49141 >>> 0) {
                      $mul60131 = Math_imul($shr44, $mcol_0153 + 1 | 0);
                      $conv64 = HEAPU16[2621484] | 0;
                      $20 = HEAP32[1316051] | 0;
                      $count_0143 = 0;
                      $row_0144 = $mul45;
                      $wgt_0145 = 0.0;
                      $sum_0146 = 0.0;
                      while (1) {
                        $mul55 = Math_imul($shr44, $mcol_0153);
                        L4462 : do {
                          if ($mul55 >>> 0 < $mul60131 >>> 0) {
                            $mul65 = Math_imul($conv64, $row_0144);
                            $21 = HEAP32[$arrayidx70 >> 2] | 0;
                            $count_1133 = $count_0143;
                            $col_0134 = $mul55;
                            $wgt_1135 = $wgt_0145;
                            $sum_1136 = $sum_0146;
                            while (1) {
                              $add66 = $mul65 + $col_0134 | 0;
                              $conv69 = HEAPU16[$20 + ($add66 << 3) + ($c_2191 << 1) >> 1] | 0;
                              do {
                                if ((($conv69 | 0) / ($21 | 0) & -1 | 0) == 1) {
                                  $23 = HEAP16[$20 + ($add66 << 3) + ($kc_0_lcssa << 1) >> 1] | 0;
                                  if (($23 & 65535) <= 24e3) {
                                    $sum_2 = $sum_1136;
                                    $wgt_2 = $wgt_1135;
                                    $count_2 = $count_1133;
                                    break;
                                  }
                                  $sum_2 = $sum_1136 + +($conv69 | 0);
                                  $wgt_2 = $wgt_1135 + +($23 & 65535 | 0);
                                  $count_2 = $count_1133 + 1 | 0;
                                } else {
                                  $sum_2 = $sum_1136;
                                  $wgt_2 = $wgt_1135;
                                  $count_2 = $count_1133;
                                }
                              } while (0);
                              $inc90 = $col_0134 + 1 | 0;
                              if ($inc90 >>> 0 < $mul60131 >>> 0) {
                                $count_1133 = $count_2;
                                $col_0134 = $inc90;
                                $wgt_1135 = $wgt_2;
                                $sum_1136 = $sum_2;
                              } else {
                                $count_1_lcssa = $count_2;
                                $wgt_1_lcssa = $wgt_2;
                                $sum_1_lcssa = $sum_2;
                                break L4462;
                              }
                            }
                          } else {
                            $count_1_lcssa = $count_0143;
                            $wgt_1_lcssa = $wgt_0145;
                            $sum_1_lcssa = $sum_0146;
                          }
                        } while (0);
                        $inc93 = $row_0144 + 1 | 0;
                        if ($inc93 >>> 0 < $mul49141 >>> 0) {
                          $count_0143 = $count_1_lcssa;
                          $row_0144 = $inc93;
                          $wgt_0145 = $wgt_1_lcssa;
                          $sum_0146 = $sum_1_lcssa;
                        } else {
                          $count_0_lcssa = $count_1_lcssa;
                          $wgt_0_lcssa = $wgt_1_lcssa;
                          $sum_0_lcssa = $sum_1_lcssa;
                          break L4458;
                        }
                      }
                    } else {
                      $count_0_lcssa = 0;
                      $wgt_0_lcssa = 0.0;
                      $sum_0_lcssa = 0.0;
                    }
                  } while (0);
                  if (($count_0_lcssa | 0) == (Math_imul($shr44, $shr44) | 0)) {
                    HEAPF32[$15 + ($mcol_0153 + $mul104 << 2) >> 2] = $sum_0_lcssa / $wgt_0_lcssa;
                  }
                  $inc109 = $mcol_0153 + 1 | 0;
                  if (($inc109 | 0) == ($div23 | 0)) {
                    break L4454;
                  } else {
                    $mcol_0153 = $inc109;
                  }
                }
              }
            } while (0);
            if (($inc112_pre | 0) == ($div | 0)) {
              $spread_0 = $conv115;
              break L4450;
            } else {
              $mrow_0155 = $inc112_pre;
            }
          }
        }
      } while (0);
      while (1) {
        $dec = $spread_0 - 1 | 0;
        if (($spread_0 | 0) == 0) {
          label = 3143;
          break;
        }
        L4479 : do {
          if (!$cmp36154) {
            $mrow_1164 = 0;
            while (1) {
              L4482 : do {
                if (!$cmp124160) {
                  $mul127 = Math_imul($mrow_1164, $div23);
                  $mcol_1161 = 0;
                  while (1) {
                    $arrayidx129 = $15 + ($mcol_1161 + $mul127 << 2) | 0;
                    do {
                      if (+HEAPF32[$arrayidx129 >> 2] == 0.0) {
                        $count_3157 = 0;
                        $d_0158 = 0;
                        $sum_3159 = 0.0;
                        while (1) {
                          $add140 = (HEAP8[5244980 + ($d_0158 << 1) | 0] << 24 >> 24) + $mrow_1164 | 0;
                          $add144 = (HEAP8[5244981 + ($d_0158 << 1) | 0] << 24 >> 24) + $mcol_1161 | 0;
                          do {
                            if ($add140 >>> 0 < $div >>> 0 & $add144 >>> 0 < $div23 >>> 0) {
                              $27 = +HEAPF32[$15 + (Math_imul($add140, $div23) + $add144 << 2) >> 2];
                              if ($27 <= 0.0) {
                                $sum_4 = $sum_3159;
                                $count_4 = $count_3157;
                                break;
                              }
                              $add157 = ($d_0158 & 1) + 1 | 0;
                              $sum_4 = $sum_3159 + +($add157 >>> 0 >>> 0) * $27;
                              $count_4 = $add157 + $count_3157 | 0;
                            } else {
                              $sum_4 = $sum_3159;
                              $count_4 = $count_3157;
                            }
                          } while (0);
                          $inc169 = $d_0158 + 1 | 0;
                          if (($inc169 | 0) == 8) {
                            break;
                          } else {
                            $count_3157 = $count_4;
                            $d_0158 = $inc169;
                            $sum_3159 = $sum_4;
                          }
                        }
                        if (($count_4 | 0) <= 3) {
                          break;
                        }
                        HEAPF32[$arrayidx129 >> 2] = (0.0 - ($conv1 + $sum_4)) / ($conv1 + +($count_4 | 0));
                      }
                    } while (0);
                    $inc184 = $mcol_1161 + 1 | 0;
                    if (($inc184 | 0) == ($div23 | 0)) {
                      break L4482;
                    } else {
                      $mcol_1161 = $inc184;
                    }
                  }
                }
              } while (0);
              $inc187 = $mrow_1164 + 1 | 0;
              if (($inc187 | 0) == ($div | 0)) {
                break L4479;
              } else {
                $mrow_1164 = $inc187;
              }
            }
          }
        } while (0);
        if ($cmp_i) {
          break;
        } else {
          $change_0167 = 0;
          $i_0168 = 0;
        }
        while (1) {
          $arrayidx194 = $15 + ($i_0168 << 2) | 0;
          $28 = +HEAPF32[$arrayidx194 >> 2];
          if ($28 < 0.0) {
            HEAPF32[$arrayidx194 >> 2] = 0.0 - $28;
            $change_1 = 1;
          } else {
            $change_1 = $change_0167;
          }
          $inc203 = $i_0168 + 1 | 0;
          if (($inc203 | 0) == ($mul24 | 0)) {
            break;
          } else {
            $change_0167 = $change_1;
            $i_0168 = $inc203;
          }
        }
        if (($change_1 | 0) == 0) {
          label = 3143;
          break;
        } else {
          $spread_0 = $dec;
        }
      }
      L4504 : do {
        if ((label | 0) == 3143) {
          label = 0;
          if ($cmp_i) {
            break;
          } else {
            $i_1171 = 0;
          }
          while (1) {
            $arrayidx214 = $15 + ($i_1171 << 2) | 0;
            if (+HEAPF32[$arrayidx214 >> 2] == 0.0) {
              HEAPF32[$arrayidx214 >> 2] = 1.0;
            }
            $inc221 = $i_1171 + 1 | 0;
            if (($inc221 | 0) == ($mul24 | 0)) {
              break L4504;
            } else {
              $i_1171 = $inc221;
            }
          }
        }
      } while (0);
      L4512 : do {
        if (!$cmp36154) {
          $arrayidx260 = $hsat + ($c_2191 << 2) | 0;
          $mrow_2188 = 0;
          while (1) {
            $inc306_pre = $mrow_2188 + 1 | 0;
            L4516 : do {
              if (!$cmp124160) {
                $mul268 = Math_imul($mrow_2188, $div23);
                $mcol_2185 = 0;
                $30 = HEAP16[2622460] | 0;
                while (1) {
                  $shr232 = 4 >>> (($30 & 65535) >>> 0);
                  $mul233 = Math_imul($shr232, $mrow_2188);
                  $add246 = $mcol_2185 + 1 | 0;
                  L4520 : do {
                    if ($mul233 >>> 0 < Math_imul($shr232, $inc306_pre) >>> 0) {
                      $arrayidx270 = $15 + ($mcol_2185 + $mul268 << 2) | 0;
                      $row_1181 = $mul233;
                      $shr237183 = $shr232;
                      $31 = $30;
                      while (1) {
                        $mul244 = Math_imul($shr237183, $mcol_2185);
                        L4524 : do {
                          if ($mul244 >>> 0 < Math_imul(4 >>> (($31 & 65535) >>> 0), $add246) >>> 0) {
                            $32 = HEAP32[$arrayidx260 >> 2] | 0;
                            $col_1176 = $mul244;
                            $33 = $31;
                            while (1) {
                              $add255 = Math_imul(HEAPU16[2621484] | 0, $row_1181) + $col_1176 | 0;
                              $35 = HEAP32[1316051] | 0;
                              $arrayidx258 = $35 + ($add255 << 3) + ($c_2191 << 1) | 0;
                              $conv259 = HEAPU16[$arrayidx258 >> 1] | 0;
                              do {
                                if ((($conv259 | 0) / ($32 | 0) & -1 | 0) > 1) {
                                  $conv272 = ~~(+HEAPF32[$arrayidx270 >> 2] * +(HEAPU16[$35 + ($add255 << 3) + ($kc_0_lcssa << 1) >> 1] | 0 | 0));
                                  if (($conv259 | 0) >= ($conv272 | 0)) {
                                    $39 = $33;
                                    break;
                                  }
                                  $cond = ($conv272 | 0) < 65535 ? $conv272 : 65535;
                                  HEAP16[$arrayidx258 >> 1] = ($cond | 0) < 0 ? 0 : $cond & 65535;
                                  $39 = HEAP16[2622460] | 0;
                                } else {
                                  $39 = $33;
                                }
                              } while (0);
                              $inc297 = $col_1176 + 1 | 0;
                              if ($inc297 >>> 0 < Math_imul(4 >>> (($39 & 65535) >>> 0), $add246) >>> 0) {
                                $col_1176 = $inc297;
                                $33 = $39;
                              } else {
                                $40 = $39;
                                break L4524;
                              }
                            }
                          } else {
                            $40 = $31;
                          }
                        } while (0);
                        $inc300 = $row_1181 + 1 | 0;
                        $shr237 = 4 >>> (($40 & 65535) >>> 0);
                        if ($inc300 >>> 0 < Math_imul($shr237, $inc306_pre) >>> 0) {
                          $row_1181 = $inc300;
                          $shr237183 = $shr237;
                          $31 = $40;
                        } else {
                          $41 = $40;
                          break L4520;
                        }
                      }
                    } else {
                      $41 = $30;
                    }
                  } while (0);
                  if (($add246 | 0) == ($div23 | 0)) {
                    break L4516;
                  } else {
                    $mcol_2185 = $add246;
                    $30 = $41;
                  }
                }
              }
            } while (0);
            if (($inc306_pre | 0) == ($div | 0)) {
              break L4512;
            } else {
              $mrow_2188 = $inc306_pre;
            }
          }
        }
      } while (0);
      $42 = HEAP32[1390240] | 0;
    }
    $inc310 = $c_2191 + 1 | 0;
    if ($inc310 >>> 0 < $42 >>> 0) {
      $c_2191 = $inc310;
      $17 = $42;
    } else {
      break;
    }
  }
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _tiff_get($base, $tag, $type, $len, $save) {
  $base = $base | 0;
  $tag = $tag | 0;
  $type = $type | 0;
  $len = $len | 0;
  $save = $save | 0;
  var $str_i28 = 0, $str_i19 = 0, $str_i4 = 0, $str_i = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $10 = 0, $conv2_i_i8 = 0, $12 = 0, $retval_0_in_i_i16 = 0, $17 = 0, $retval_0_i_i27 = 0, $20 = 0, $22 = 0, $25 = 0, $retval_0_i_i47 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $str_i28 = __stackBase__ | 0;
  $str_i19 = __stackBase__ + 4 | 0;
  $str_i4 = __stackBase__ + 8 | 0;
  $str_i = __stackBase__ + 12 | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $3 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $3 & 255;
  $5 = ($3 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
  }
  HEAP32[$tag >> 2] = $retval_0_in_i_i & 65535;
  HEAP16[$str_i4 >> 1] = -1;
  _fread($str_i4 | 0, 1, 2, HEAP32[1316053] | 0);
  $10 = HEAP16[$str_i4 >> 1] | 0;
  $conv2_i_i8 = $10 & 255;
  $12 = ($10 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i16 = ($12 & 65535) << 8 | $conv2_i_i8;
  } else {
    $retval_0_in_i_i16 = $conv2_i_i8 << 8 | $12 & 65535;
  }
  HEAP32[$type >> 2] = $retval_0_in_i_i16 & 65535;
  HEAP32[$str_i19 >> 2] = -1;
  _fread($str_i19 | 0, 1, 4, HEAP32[1316053] | 0);
  $17 = HEAP32[$str_i19 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i27 = $17;
  } else {
    $retval_0_i_i27 = _llvm_bswap_i32($17 | 0) | 0;
  }
  HEAP32[$len >> 2] = $retval_0_i_i27;
  HEAP32[$save >> 2] = (_ftell(HEAP32[1316053] | 0) | 0) + 4 | 0;
  $20 = HEAP32[$type >> 2] | 0;
  if (Math_imul((HEAP8[5576204 + ($20 >>> 0 < 14 ? $20 : 0) | 0] << 24 >> 24) - 48 | 0, HEAP32[$len >> 2] | 0) >>> 0 <= 4) {
    STACKTOP = __stackBase__;
    return;
  }
  $22 = HEAP32[1316053] | 0;
  HEAP32[$str_i28 >> 2] = -1;
  _fread($str_i28 | 0, 1, 4, $22 | 0);
  $25 = HEAP32[$str_i28 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i47 = $25;
  } else {
    $retval_0_i_i47 = _llvm_bswap_i32($25 | 0) | 0;
  }
  _fseek($22 | 0, $retval_0_i_i47 + $base | 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _parse_thumb_note($base, $toff, $tlen) {
  $base = $base | 0;
  $toff = $toff | 0;
  $tlen = $tlen | 0;
  var $str_i11 = 0, $str_i2 = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $conv = 0, $7 = 0, $8 = 0, $dec34_in = 0, $dec34 = 0, $9 = 0, $10 = 0, $12 = 0, $retval_0_i_i10 = 0, $13 = 0, $15 = 0, $retval_0_i_i30 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  $str_i11 = __stackBase__ | 0;
  $str_i2 = __stackBase__ + 4 | 0;
  $str_i = __stackBase__ + 8 | 0;
  $tag = __stackBase__ + 12 | 0;
  $type = __stackBase__ + 16 | 0;
  $len = __stackBase__ + 20 | 0;
  $save = __stackBase__ + 24 | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $3 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $3 & 255;
  $5 = ($3 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
  }
  $conv = $retval_0_in_i_i & 65535;
  if (($conv | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $7 = $str_i2;
  $8 = $str_i11;
  $dec34_in = $conv;
  while (1) {
    $dec34 = $dec34_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    $9 = HEAP32[$tag >> 2] | 0;
    if (($9 | 0) == ($toff | 0)) {
      HEAP32[$str_i2 >> 2] = -1;
      $10 = HEAP32[1316053] | 0;
      _fread($7 | 0, 1, 4, $10 | 0);
      $12 = HEAP32[$str_i2 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i10 = $12;
      } else {
        $retval_0_i_i10 = _llvm_bswap_i32($12 | 0) | 0;
      }
      HEAP32[1311013] = $retval_0_i_i10 + $base | 0;
    }
    if (($9 | 0) == ($tlen | 0)) {
      HEAP32[$str_i11 >> 2] = -1;
      $13 = HEAP32[1316053] | 0;
      _fread($8 | 0, 1, 4, $13 | 0);
      $15 = HEAP32[$str_i11 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i30 = $15;
      } else {
        $retval_0_i_i30 = _llvm_bswap_i32($15 | 0) | 0;
      }
      HEAP32[1311016] = $retval_0_i_i30;
    }
    _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
    if (($dec34 | 0) == 0) {
      break;
    } else {
      $dec34_in = $dec34;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_makernote($base, $uptag) {
  $base = $base | 0;
  $uptag = $uptag | 0;
  var $str_i1129 = 0, $str_i1114 = 0, $str_i1099 = 0, $str_i1084 = 0, $str_i1063 = 0, $str_i1042 = 0, $str_i1021 = 0, $str_i1006 = 0, $str_i985 = 0, $str_i964 = 0, $str_i949 = 0, $str_i928 = 0, $str_i913 = 0, $str_i898 = 0, $str_i877 = 0, $str_i856 = 0, $str_i835 = 0, $str_i820 = 0, $str_i805 = 0, $str_i784 = 0, $str_i763 = 0, $str_i742 = 0, $str_i721 = 0, $str_i700 = 0, $str_i685 = 0, $str_i664 = 0, $str_i643 = 0, $str_i622 = 0, $str_i601 = 0, $str_i586 = 0, $str_i565 = 0, $str_i550 = 0, $str_i535 = 0, $str_i520 = 0, $str_i505 = 0, $str_i490 = 0, $str_i475 = 0, $str_i460 = 0, $str_i445 = 0, $str_i430 = 0, $str_i409 = 0, $str_i394 = 0, $str_i379 = 0, $str_i364 = 0, $str_i349 = 0, $str_i334 = 0, $str_i313 = 0, $str_i298 = 0, $str_i283 = 0, $str_i268 = 0, $str_i253 = 0, $str_i238 = 0, $str_i223 = 0, $str_i208 = 0, $str_i187 = 0, $str_i166 = 0, $str_i151 = 0, $str_i142 = 0, $str_i121 = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $buf97 = 0, $buf = 0, $0 = 0, $arraydecay = 0, $call261256 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $conv2_i_i272 = 0, $12 = 0, $retval_0_in_i_i280 = 0, $conv = 0, $16 = 0, $call26 = 0, $call69 = 0, $20 = 0, $21 = 0, $23 = 0, $conv2_i_i287 = 0, $25 = 0, $retval_0_in_i_i295 = 0, $30 = 0, $conv2_i_i302 = 0, $32 = 0, $retval_0_in_i_i310 = 0, $37 = 0, $retval_0_i_i332 = 0, $sub84 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $conv2_i_i338 = 0, $46 = 0, $retval_0_in_i_i346 = 0, $base_addr_0 = 0, $base_addr_1 = 0, $58 = 0, $59 = 0, $conv2_i_i368 = 0, $61 = 0, $retval_0_in_i_i376 = 0, $conv147 = 0, $shl = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $add_ptr = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $arraydecay564 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $dec1295_in = 0, $wbi_01294 = 0, $serial_01293 = 0, $ver97_01292 = 0, $dec1295 = 0, $or = 0, $tobool159 = 0, $121 = 0, $conv2_i_i398 = 0, $123 = 0, $retval_0_in_i_i406 = 0, $125 = 0, $131 = 0, $conv2_i_i434 = 0, $133 = 0, $retval_0_in_i_i442 = 0, $retval_0_i_i443 = 0, $139 = 0, $conv2_i_i464 = 0, $141 = 0, $retval_0_in_i_i472 = 0, $retval_0_i_i473 = 0, $146 = 0, $conv2_i_i479 = 0, $148 = 0, $retval_0_in_i_i487 = 0, $retval_0_i_i488 = 0, $154 = 0, $conv2_i_i509 = 0, $156 = 0, $retval_0_in_i_i517 = 0, $161 = 0, $conv2_i_i539 = 0, $163 = 0, $retval_0_in_i_i547 = 0, $165 = 0, $wbi_1 = 0, $wbi_11353 = 0, $166 = 0, $167 = 0, $cond = 0, $168 = 0, $170 = 0, $conv2_i_i554 = 0, $172 = 0, $retval_0_in_i_i562 = 0, $conv233 = 0, $wbi_11344 = 0, $174 = 0, $178 = 0, $182 = 0, $retval_0_i_i584 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $conv2_i_i590 = 0, $195 = 0, $retval_0_in_i_i598 = 0, $i_01261 = 0, $c_11260 = 0, $197 = 0, $or298 = 0, $inc300 = 0, $199 = 0, $i_0_lcssa = 0, $add1262 = 0, $add1265 = 0, $202 = 0, $retval_0_i_i620 = 0, $203 = 0, $call314 = 0, $i_1_be = 0, $add = 0, $wbi_1134413551357136013631366 = 0, $208 = 0, $212 = 0, $retval_0_i_i662 = 0, $213 = 0, $215 = 0, $217 = 0, $retval_0_i_i683 = 0, $218 = 0, $221 = 0, $222 = 0, $225 = 0, $retval_0_i_i719 = 0, $228 = 0, $retval_0_i_i740 = 0, $231 = 0, $retval_0_i_i761 = 0, $234 = 0, $retval_0_i_i782 = 0, $tobool390 = 0, $_pr1151_pr_pre = 0, $serial_1 = 0, $call405 = 0, $isdigittmp = 0, $cond416 = 0, $240 = 0, $serial_2 = 0, $241 = 0, $244 = 0, $retval_0_i_i803 = 0, $248 = 0, $conv2_i_i809 = 0, $250 = 0, $retval_0_in_i_i817 = 0, $254 = 0, $conv2_i_i824 = 0, $256 = 0, $retval_0_in_i_i832 = 0, $_pr1174 = 0, $cond449 = 0, $c_21266 = 0, $263 = 0, $retval_0_i_i854 = 0, $inc462 = 0, $_pr1155 = 0, $264 = 0, $_pr1185 = 0, $270 = 0, $272 = 0, $retval_0_i_i875 = 0, $273 = 0, $277 = 0, $retval_0_i_i896 = 0, $_pr1190 = 0, $279 = 0, $mul519_1 = 0, $mul519_2 = 0, $mul519_3 = 0, $sub522_3 = 0, $284 = 0, $285 = 0, $287 = 0, $conv2_i_i902 = 0, $289 = 0, $retval_0_in_i_i910 = 0, $293 = 0, $conv2_i_i902_1 = 0, $295 = 0, $300 = 0, $conv2_i_i917 = 0, $302 = 0, $retval_0_in_i_i925 = 0, $306 = 0, $conv2_i_i917_1 = 0, $308 = 0, $309 = 0, $ver97_2_ph_ph = 0, $_pr1194_pr = 0, $315 = 0, $retval_0_i_i947 = 0, $318 = 0, $319 = 0, $324 = 0, $conv2_i_i953 = 0, $326 = 0, $retval_0_in_i_i961 = 0, $330 = 0, $conv2_i_i953_1 = 0, $332 = 0, $_pr1201 = 0, $sub608 = 0, $333 = 0, $call614 = 0, $xor616 = 0, $xor618 = 0, $ck_01276 = 0, $cj_01275 = 0, $i_31274 = 0, $add631 = 0, $arrayidx634 = 0, $inc639 = 0, $sub644 = 0, $and650 = 0, $cmp_i = 0, $and658 = 0, $conv2_i = 0, $retval_0_in_i = 0, $add_ptr651_sum_1 = 0, $conv2_i_1 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $351 = 0, $retval_0_i_i1004 = 0, $_pr1208_pre = 0, $352 = 0, $355 = 0, $conv2_i_i1010 = 0, $357 = 0, $retval_0_in_i_i1018 = 0, $361 = 0, $conv2_i_i1010_1 = 0, $363 = 0, $_pr1215 = 0, $367 = 0, $c_91279 = 0, $372 = 0, $retval_0_i_i1040 = 0, $inc726 = 0, $_pr1222 = 0, $373 = 0, $offset_01281 = 0, $377 = 0, $retval_0_i_i1061 = 0, $381 = 0, $retval_0_i_i1082 = 0, $383 = 0, $385 = 0, $conv2_i_i1088 = 0, $387 = 0, $retval_0_in_i_i1096 = 0, $add752 = 0, $391 = 0, $397 = 0, $conv2_i_i1103 = 0, $399 = 0, $retval_0_in_i_i1111 = 0, $403 = 0, $conv2_i_i1118 = 0, $405 = 0, $retval_0_in_i_i1126 = 0, $_pr1240 = 0, $408 = 0, $409 = 0, $i_41283 = 0, $414 = 0, $conv2_i_i1133 = 0, $416 = 0, $retval_0_in_i_i1141 = 0, $420 = 0, $conv2_i_i1133_1 = 0, $422 = 0, $423 = 0, $427 = 0, $conv2_i_i689 = 0, $429 = 0, $retval_0_in_i_i697 = 0, $433 = 0, $conv2_i_i689_1 = 0, $435 = 0, $_pr1244 = 0, $serial_21372137413761385143514651538 = 0, $ver97_2_ph149915311537 = 0, $436 = 0, $438 = 0, $conv2_i_i257 = 0, $440 = 0, $retval_0_in_i_i265 = 0, $ver97_2_ph149915311535 = 0, $serial_21372137413761385143514651479 = 0, $442 = 0, $ver97_2119711991204120612111213121812201225122712321234124312451249 = 0, $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461247 = 0, $443 = 0, $445 = 0, $conv2_i_i242 = 0, $447 = 0, $retval_0_in_i_i250 = 0, $449 = 0, $ver97_2119711991204120612111213121812201225122712321234124312451250 = 0, $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248 = 0, $ver97_3 = 0, $serial_3 = 0, $451 = 0, $453 = 0, $conv2_i_i227 = 0, $455 = 0, $retval_0_in_i_i235 = 0, $459 = 0, $conv2_i_i212 = 0, $461 = 0, $retval_0_in_i_i220 = 0, $463 = 0, $ver97_4 = 0, $serial_4 = 0, $465 = 0, $467 = 0, $retval_0_i_i206 = 0, $468 = 0, $470 = 0, $471 = 0, $472 = 0, $474 = 0, $retval_0_i_i185 = 0, $475 = 0, $476 = 0, $cond949 = 0, $ver97_5 = 0, $serial_5 = 0, $478 = 0, $480 = 0, $conv2_i_i155 = 0, $482 = 0, $retval_0_in_i_i163 = 0, $486 = 0, $conv2_i_i155_1 = 0, $488 = 0, $retval_0_in_i_i = 0, $492 = 0, $conv2_i_i146_1 = 0, $494 = 0, $495 = 0, $ver97_6 = 0, $serial_6 = 0, $c_141287 = 0, $498 = 0, $retval_0_i_i140 = 0, $inc993 = 0, $499 = 0, $c_151288 = 0, $502 = 0, $retval_0_i_i = 0, $arrayidx1007 = 0, $inc1010 = 0, $ver97_7 = 0, $serial_7 = 0, $retval_0_in_i_i925_1 = 0, $509 = 0, $conv2_i_i917_2 = 0, $511 = 0, $retval_0_in_i_i925_2 = 0, $515 = 0, $conv2_i_i917_3 = 0, $517 = 0, $retval_0_in_i_i925_3 = 0, $retval_0_in_i_i910_1 = 0, $522 = 0, $conv2_i_i902_2 = 0, $524 = 0, $retval_0_in_i_i910_2 = 0, $528 = 0, $conv2_i_i902_3 = 0, $530 = 0, $retval_0_in_i_i910_3 = 0, $retval_0_i_i947_1 = 0, $534 = 0, $retval_0_i_i947_2 = 0, $retval_0_in_i_i961_1 = 0, $538 = 0, $conv2_i_i953_2 = 0, $540 = 0, $retval_0_in_i_i961_2 = 0, $retval_0_in_i_1 = 0, $add_ptr651_sum_2 = 0, $conv2_i_2 = 0, $retval_0_in_i_2 = 0, $add_ptr651_sum_3 = 0, $conv2_i_3 = 0, $retval_0_in_i_3 = 0, $retval_0_in_i_i1018_1 = 0, $553 = 0, $conv2_i_i1010_2 = 0, $555 = 0, $retval_0_in_i_i1018_2 = 0, $559 = 0, $conv2_i_i1010_3 = 0, $561 = 0, $retval_0_in_i_i1018_3 = 0, $retval_0_in_i_i1141_1 = 0, $566 = 0, $conv2_i_i1133_2 = 0, $568 = 0, $retval_0_in_i_i1141_2 = 0, $inc830 = 0, $retval_0_in_i_i697_1 = 0, $573 = 0, $conv2_i_i689_2 = 0, $575 = 0, $retval_0_in_i_i697_2 = 0, $579 = 0, $conv2_i_i689_3 = 0, $581 = 0, $retval_0_in_i_i697_3 = 0, $retval_0_in_i_i163_1 = 0, $586 = 0, $conv2_i_i155_2 = 0, $588 = 0, $retval_0_in_i_i163_2 = 0, $592 = 0, $conv2_i_i155_3 = 0, $594 = 0, $retval_0_in_i_i163_3 = 0, $600 = 0, $conv2_i_i146 = 0, $602 = 0, $retval_0_in_i_i_1 = 0, $606 = 0, $conv2_i_i146_2 = 0, $608 = 0, $retval_0_in_i_i_2 = 0, $612 = 0, $conv2_i_i146_3 = 0, $614 = 0, $retval_0_in_i_i_3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 592 | 0;
  $str_i1129 = __stackBase__ | 0;
  $str_i1114 = __stackBase__ + 4 | 0;
  $str_i1099 = __stackBase__ + 8 | 0;
  $str_i1084 = __stackBase__ + 12 | 0;
  $str_i1063 = __stackBase__ + 16 | 0;
  $str_i1042 = __stackBase__ + 20 | 0;
  $str_i1021 = __stackBase__ + 24 | 0;
  $str_i1006 = __stackBase__ + 28 | 0;
  $str_i985 = __stackBase__ + 32 | 0;
  $str_i964 = __stackBase__ + 36 | 0;
  $str_i949 = __stackBase__ + 40 | 0;
  $str_i928 = __stackBase__ + 44 | 0;
  $str_i913 = __stackBase__ + 48 | 0;
  $str_i898 = __stackBase__ + 52 | 0;
  $str_i877 = __stackBase__ + 56 | 0;
  $str_i856 = __stackBase__ + 60 | 0;
  $str_i835 = __stackBase__ + 64 | 0;
  $str_i820 = __stackBase__ + 68 | 0;
  $str_i805 = __stackBase__ + 72 | 0;
  $str_i784 = __stackBase__ + 76 | 0;
  $str_i763 = __stackBase__ + 80 | 0;
  $str_i742 = __stackBase__ + 84 | 0;
  $str_i721 = __stackBase__ + 88 | 0;
  $str_i700 = __stackBase__ + 92 | 0;
  $str_i685 = __stackBase__ + 96 | 0;
  $str_i664 = __stackBase__ + 100 | 0;
  $str_i643 = __stackBase__ + 104 | 0;
  $str_i622 = __stackBase__ + 108 | 0;
  $str_i601 = __stackBase__ + 112 | 0;
  $str_i586 = __stackBase__ + 116 | 0;
  $str_i565 = __stackBase__ + 120 | 0;
  $str_i550 = __stackBase__ + 124 | 0;
  $str_i535 = __stackBase__ + 128 | 0;
  $str_i520 = __stackBase__ + 132 | 0;
  $str_i505 = __stackBase__ + 136 | 0;
  $str_i490 = __stackBase__ + 140 | 0;
  $str_i475 = __stackBase__ + 144 | 0;
  $str_i460 = __stackBase__ + 148 | 0;
  $str_i445 = __stackBase__ + 152 | 0;
  $str_i430 = __stackBase__ + 156 | 0;
  $str_i409 = __stackBase__ + 160 | 0;
  $str_i394 = __stackBase__ + 164 | 0;
  $str_i379 = __stackBase__ + 168 | 0;
  $str_i364 = __stackBase__ + 172 | 0;
  $str_i349 = __stackBase__ + 176 | 0;
  $str_i334 = __stackBase__ + 180 | 0;
  $str_i313 = __stackBase__ + 184 | 0;
  $str_i298 = __stackBase__ + 188 | 0;
  $str_i283 = __stackBase__ + 192 | 0;
  $str_i268 = __stackBase__ + 196 | 0;
  $str_i253 = __stackBase__ + 200 | 0;
  $str_i238 = __stackBase__ + 204 | 0;
  $str_i223 = __stackBase__ + 208 | 0;
  $str_i208 = __stackBase__ + 212 | 0;
  $str_i187 = __stackBase__ + 216 | 0;
  $str_i166 = __stackBase__ + 220 | 0;
  $str_i151 = __stackBase__ + 224 | 0;
  $str_i142 = __stackBase__ + 228 | 0;
  $str_i121 = __stackBase__ + 232 | 0;
  $str_i = __stackBase__ + 236 | 0;
  $tag = __stackBase__ + 240 | 0;
  $type = __stackBase__ + 244 | 0;
  $len = __stackBase__ + 248 | 0;
  $save = __stackBase__ + 252 | 0;
  $buf97 = __stackBase__ + 256 | 0;
  $buf = __stackBase__ + 580 | 0;
  $0 = HEAP16[2631518] | 0;
  if ((_strcmp(5263724, 5575920) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $arraydecay = $buf | 0;
  _fread($arraydecay | 0, 1, 10, HEAP32[1316053] | 0);
  if ((_strncmp($arraydecay | 0, 5575440, 3) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_strncmp($arraydecay | 0, 5574916, 3) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_strncmp($arraydecay | 0, 5574428, 4) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_strncmp($arraydecay | 0, 5574200, 4) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  L16 : do {
    if ((_strncmp($arraydecay | 0, 5574056, 2) | 0) == 0) {
      label = 8;
    } else {
      if ((_strncmp($arraydecay | 0, 5573856, 3) | 0) == 0) {
        label = 8;
        break;
      }
      L19 : do {
        if ((_strcmp($arraydecay | 0, 5573608) | 0) == 0) {
          $call69 = _ftell(HEAP32[1316053] | 0) | 0;
          $20 = $str_i283;
          HEAP16[$str_i283 >> 1] = -1;
          $21 = HEAP32[1316053] | 0;
          _fread($20 | 0, 1, 2, $21 | 0);
          $23 = HEAP16[$str_i283 >> 1] | 0;
          $conv2_i_i287 = $23 & 255;
          $25 = ($23 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i295 = ($25 & 65535) << 8 | $conv2_i_i287;
          } else {
            $retval_0_in_i_i295 = $conv2_i_i287 << 8 | $25 & 65535;
          }
          HEAP16[2631518] = $retval_0_in_i_i295 & 65535;
          HEAP16[$str_i298 >> 1] = -1;
          _fread($str_i298 | 0, 1, 2, HEAP32[1316053] | 0);
          $30 = HEAP16[$str_i298 >> 1] | 0;
          $conv2_i_i302 = $30 & 255;
          $32 = ($30 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i310 = ($32 & 65535) << 8 | $conv2_i_i302;
          } else {
            $retval_0_in_i_i310 = $conv2_i_i302 << 8 | $32 & 65535;
          }
          if (($retval_0_in_i_i310 & 65535) << 16 >> 16 != 42) {
            break L16;
          }
          HEAP32[$str_i313 >> 2] = -1;
          _fread($str_i313 | 0, 1, 4, HEAP32[1316053] | 0);
          $37 = HEAP32[$str_i313 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i332 = $37;
          } else {
            $retval_0_i_i332 = _llvm_bswap_i32($37 | 0) | 0;
          }
          _fseek(HEAP32[1316053] | 0, $retval_0_i_i332 - 8 | 0, 1);
          $base_addr_1 = $call69;
        } else {
          if ((_strcmp($arraydecay | 0, 5573468) | 0) == 0) {
            $sub84 = (_ftell(HEAP32[1316053] | 0) | 0) - 10 | 0;
            $40 = HEAP32[1316053] | 0;
            _fseek($40 | 0, -2 | 0, 1);
            $41 = $str_i334;
            HEAP16[$str_i334 >> 1] = -1;
            $42 = HEAP32[1316053] | 0;
            _fread($41 | 0, 1, 2, $42 | 0);
            $44 = HEAP16[$str_i334 >> 1] | 0;
            $conv2_i_i338 = $44 & 255;
            $46 = ($44 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i346 = ($46 & 65535) << 8 | $conv2_i_i338;
            } else {
              $retval_0_in_i_i346 = $conv2_i_i338 << 8 | $46 & 65535;
            }
            HEAP16[2631518] = $retval_0_in_i_i346 & 65535;
            HEAP16[$str_i349 >> 1] = -1;
            _fread($str_i349 | 0, 1, 2, HEAP32[1316053] | 0);
            $base_addr_1 = $sub84;
            break;
          }
          do {
            if ((_strncmp($arraydecay | 0, 5573460, 4) | 0) == 0) {
              $base_addr_0 = $base;
            } else {
              if ((_strcmp($arraydecay | 0, 5573448) | 0) == 0) {
                $base_addr_0 = $base;
                break;
              }
              if ((_strncmp($arraydecay | 0, 5573436, 8) | 0) == 0) {
                $base_addr_0 = (_ftell(HEAP32[1316053] | 0) | 0) - 10 | 0;
                break;
              }
              do {
                if ((_strcmp($arraydecay | 0, 5573428) | 0) != 0) {
                  if ((_strcmp($arraydecay | 0, 5573420) | 0) == 0) {
                    break;
                  }
                  if ((_strcmp($arraydecay | 0, 5573412) | 0) == 0) {
                    break;
                  }
                  if ((_strcmp($arraydecay | 0, 5573404) | 0) == 0) {
                    break;
                  }
                  do {
                    if ((_strcmp($arraydecay | 0, 5573400) | 0) != 0) {
                      if ((_strcmp($arraydecay | 0, 5587668) | 0) == 0) {
                        break;
                      }
                      _fseek(HEAP32[1316053] | 0, -10 | 0, 1);
                      if ((_strncmp(5263724, 5587660, 7) | 0) != 0) {
                        $base_addr_1 = $base;
                        break L19;
                      }
                      $base_addr_1 = _ftell(HEAP32[1316053] | 0) | 0;
                      break L19;
                    }
                  } while (0);
                  _fseek(HEAP32[1316053] | 0, -4 | 0, 1);
                  $base_addr_1 = $base;
                  break L19;
                }
              } while (0);
              _fseek(HEAP32[1316053] | 0, -2 | 0, 1);
              $base_addr_1 = $base;
              break L19;
            }
          } while (0);
          HEAP16[2631518] = 18761;
          _fseek(HEAP32[1316053] | 0, 2, 1);
          $base_addr_1 = $base_addr_0;
        }
      } while (0);
      HEAP16[$str_i364 >> 1] = -1;
      _fread($str_i364 | 0, 1, 2, HEAP32[1316053] | 0);
      $58 = HEAP16[2631518] | 0;
      $59 = HEAP16[$str_i364 >> 1] | 0;
      $conv2_i_i368 = $59 & 255;
      $61 = ($59 & 65535) >>> 8;
      if ($58 << 16 >> 16 == 18761) {
        $retval_0_in_i_i376 = ($61 & 65535) << 8 | $conv2_i_i368;
      } else {
        $retval_0_in_i_i376 = $conv2_i_i368 << 8 | $61 & 65535;
      }
      if (($retval_0_in_i_i376 & 65535) > 1e3) {
        STACKTOP = __stackBase__;
        return;
      }
      $conv147 = $retval_0_in_i_i376 & 65535;
      if (($conv147 | 0) == 0) {
        break;
      }
      $shl = $uptag << 16;
      $63 = $str_i379;
      $64 = $str_i394;
      $65 = $str_i409;
      $66 = $str_i430;
      $67 = $str_i445;
      $68 = $str_i460;
      $69 = $str_i475;
      $70 = $str_i490;
      $71 = $str_i505;
      $72 = $str_i520;
      $73 = $str_i535;
      $74 = $str_i565;
      $75 = $str_i586;
      $76 = $str_i601;
      $77 = $str_i622;
      $78 = $str_i643;
      $79 = $str_i664;
      $add_ptr = $buf + 4 | 0;
      $80 = $str_i700;
      $81 = $str_i721;
      $82 = $str_i742;
      $83 = $str_i763;
      $84 = $str_i223;
      $85 = $str_i208;
      $86 = $str_i187;
      $87 = $str_i166;
      $88 = $str_i151;
      $89 = $str_i142;
      $90 = $str_i;
      $91 = $str_i121;
      $92 = $str_i784;
      $93 = $str_i805;
      $94 = $str_i820;
      $95 = $str_i835;
      $96 = $str_i856;
      $97 = $str_i877;
      $98 = $str_i928;
      $99 = $str_i949;
      $100 = $str_i964;
      $101 = $str_i985;
      $102 = $str_i1006;
      $103 = $str_i1021;
      $104 = $str_i1042;
      $105 = $str_i1063;
      $106 = $str_i1084;
      $107 = $str_i1099;
      $108 = $str_i1114;
      $109 = $str_i253;
      $110 = $str_i685;
      $111 = $str_i1129;
      $arraydecay564 = $buf97 | 0;
      $112 = $str_i898;
      $113 = $str_i913;
      $114 = $str_i238;
      $115 = $str_i550;
      $ver97_01292 = 0;
      $serial_01293 = 0;
      $wbi_01294 = 0;
      $dec1295_in = $conv147;
      while (1) {
        $dec1295 = $dec1295_in - 1 | 0;
        HEAP16[2631518] = $58;
        _tiff_get($base_addr_1, $tag, $type, $len, $save);
        $or = HEAP32[$tag >> 2] | $shl;
        HEAP32[$tag >> 2] = $or;
        do {
          if (($or | 0) == 2) {
            $tobool159 = (_strstr(5263724, 5587652) | 0) == 0;
            if ($tobool159 | +HEAPF32[1316048] != 0.0) {
              $wbi_1134413551357136013631366 = $wbi_01294;
              break;
            }
            HEAP16[$str_i379 >> 1] = -1;
            _fread($63 | 0, 1, 2, HEAP32[1316053] | 0);
            HEAP16[$str_i394 >> 1] = -1;
            _fread($64 | 0, 1, 2, HEAP32[1316053] | 0);
            $121 = HEAP16[$str_i394 >> 1] | 0;
            $conv2_i_i398 = $121 & 255;
            $123 = ($121 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i406 = ($123 & 65535) << 8 | $conv2_i_i398;
            } else {
              $retval_0_in_i_i406 = $conv2_i_i398 << 8 | $123 & 65535;
            }
            HEAPF32[1316048] = +(($retval_0_in_i_i406 & 65535) >>> 0);
            $125 = HEAP32[$tag >> 2] | 0;
            label = 60;
            break;
          } else {
            $125 = $or;
            label = 60;
          }
        } while (0);
        L77 : do {
          if ((label | 0) == 60) {
            label = 0;
            do {
              if (($125 | 0) == 4) {
                if (((HEAP32[$len >> 2] | 0) - 27 | 0) >>> 0 >= 8) {
                  $166 = 4;
                  $wbi_11353 = $wbi_01294;
                  label = 85;
                  break;
                }
                HEAP32[$str_i409 >> 2] = -1;
                _fread($65 | 0, 1, 4, HEAP32[1316053] | 0);
                HEAP16[$str_i430 >> 1] = -1;
                _fread($66 | 0, 1, 2, HEAP32[1316053] | 0);
                $131 = HEAP16[$str_i430 >> 1] | 0;
                $conv2_i_i434 = $131 & 255;
                $133 = ($131 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i442 = ($133 & 65535) << 8 | $conv2_i_i434;
                } else {
                  $retval_0_in_i_i442 = $conv2_i_i434 << 8 | $133 & 65535;
                }
                $retval_0_i_i443 = $retval_0_in_i_i442 & 65535;
                if (!($retval_0_i_i443 << 16 >> 16 == 32767 | +HEAPF32[1316048] != 0.0)) {
                  HEAPF32[1316048] = +_exp2(+(+(($retval_0_i_i443 & 65535) >>> 0) * .03125 + -4.0)) * 50.0;
                }
                HEAP16[$str_i445 >> 1] = -1;
                _fread($67 | 0, 1, 2, HEAP32[1316053] | 0);
                HEAP16[$str_i460 >> 1] = -1;
                _fread($68 | 0, 1, 2, HEAP32[1316053] | 0);
                $139 = HEAP16[$str_i460 >> 1] | 0;
                $conv2_i_i464 = $139 & 255;
                $141 = ($139 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i472 = ($141 & 65535) << 8 | $conv2_i_i464;
                } else {
                  $retval_0_in_i_i472 = $conv2_i_i464 << 8 | $141 & 65535;
                }
                $retval_0_i_i473 = $retval_0_in_i_i472 & 65535;
                if (!($retval_0_i_i473 << 16 >> 16 == 32767 | +HEAPF32[1390397] != 0.0)) {
                  HEAPF32[1390397] = +_exp2(+(+(($retval_0_i_i473 & 65535) >>> 0) * .015625));
                }
                HEAP16[$str_i475 >> 1] = -1;
                _fread($69 | 0, 1, 2, HEAP32[1316053] | 0);
                $146 = HEAP16[$str_i475 >> 1] | 0;
                $conv2_i_i479 = $146 & 255;
                $148 = ($146 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i487 = ($148 & 65535) << 8 | $conv2_i_i479;
                } else {
                  $retval_0_in_i_i487 = $conv2_i_i479 << 8 | $148 & 65535;
                }
                $retval_0_i_i488 = $retval_0_in_i_i487 & 65535;
                if (!($retval_0_i_i488 << 16 >> 16 == -1 | +HEAPF32[1311229] != 0.0)) {
                  HEAPF32[1311229] = +_exp2(+(+($retval_0_i_i488 << 16 >> 16 | 0) * -0.03125));
                }
                HEAP16[$str_i490 >> 1] = -1;
                _fread($70 | 0, 1, 2, HEAP32[1316053] | 0);
                HEAP16[$str_i505 >> 1] = -1;
                _fread($71 | 0, 1, 2, HEAP32[1316053] | 0);
                $154 = HEAP16[$str_i505 >> 1] | 0;
                $conv2_i_i509 = $154 & 255;
                $156 = ($154 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i517 = ($156 & 65535) << 8 | $conv2_i_i509;
                } else {
                  $retval_0_in_i_i517 = $conv2_i_i509 << 8 | $156 & 65535;
                }
                HEAP16[$str_i520 >> 1] = -1;
                _fread($72 | 0, 1, 2, HEAP32[1316053] | 0);
                HEAP16[$str_i535 >> 1] = -1;
                _fread($73 | 0, 1, 2, HEAP32[1316053] | 0);
                $161 = HEAP16[$str_i535 >> 1] | 0;
                $conv2_i_i539 = $161 & 255;
                $163 = ($161 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i547 = ($163 & 65535) << 8 | $conv2_i_i539;
                } else {
                  $retval_0_in_i_i547 = $conv2_i_i539 << 8 | $163 & 65535;
                }
                HEAP32[1311232] = $retval_0_in_i_i547 & 65535;
                $wbi_1 = $retval_0_in_i_i517 & 65535;
                $165 = HEAP32[$tag >> 2] | 0;
                label = 84;
                break;
              } else {
                $wbi_1 = $wbi_01294;
                $165 = $125;
                label = 84;
              }
            } while (0);
            do {
              if ((label | 0) == 84) {
                label = 0;
                if (($165 | 0) == 276 | ($165 | 0) == 4) {
                  $166 = $165;
                  $wbi_11353 = $wbi_1;
                  label = 85;
                  break;
                } else {
                  $174 = $165;
                  $wbi_11344 = $wbi_1;
                  break;
                }
              }
            } while (0);
            if ((label | 0) == 85) {
              label = 0;
              do {
                if ((_strncmp(5263724, 5587644, 6) | 0) == 0) {
                  $167 = HEAP32[1316053] | 0;
                  $cond = ($166 | 0) == 4 ? 140 : 160;
                  _fseek($167 | 0, $cond | 0, 1);
                  HEAP16[$str_i550 >> 1] = -1;
                  $168 = HEAP32[1316053] | 0;
                  _fread($115 | 0, 1, 2, $168 | 0);
                  $170 = HEAP16[$str_i550 >> 1] | 0;
                  $conv2_i_i554 = $170 & 255;
                  $172 = ($170 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i562 = ($172 & 65535) << 8 | $conv2_i_i554;
                  } else {
                    $retval_0_in_i_i562 = $conv2_i_i554 << 8 | $172 & 65535;
                  }
                  $conv233 = $retval_0_in_i_i562 & 65535;
                  if (($conv233 | 0) == 72) {
                    HEAP32[1350792] = 0;
                    break;
                  } else if (($conv233 | 0) == 76) {
                    HEAP32[1350792] = 6;
                    break;
                  } else if (($conv233 | 0) == 82) {
                    HEAP32[1350792] = 5;
                    break;
                  } else {
                    break;
                  }
                }
              } while (0);
              $174 = HEAP32[$tag >> 2] | 0;
              $wbi_11344 = $wbi_11353;
            }
            if (($174 | 0) == 7) {
              if ((HEAP32[$type >> 2] | 0) != 2) {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break;
              }
              if ((HEAP32[$len >> 2] | 0) >>> 0 <= 20) {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break;
              }
              _fgets(5263404, 64, HEAP32[1316053] | 0);
              $178 = HEAP32[$tag >> 2] | 0;
            } else {
              $178 = $174;
            }
            if (($178 | 0) == 8) {
              if ((HEAP32[$type >> 2] | 0) != 4) {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break;
              }
              HEAP32[$str_i565 >> 2] = -1;
              _fread($74 | 0, 1, 4, HEAP32[1316053] | 0);
              $182 = HEAP32[$str_i565 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i584 = $182;
              } else {
                $retval_0_i_i584 = _llvm_bswap_i32($182 | 0) | 0;
              }
              HEAP32[1311232] = $retval_0_i_i584;
              $183 = HEAP32[$tag >> 2] | 0;
            } else {
              $183 = $178;
            }
            if (($183 | 0) == 9) {
              if ((_strcmp(5263724, 5587636) | 0) != 0) {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break;
              }
              _fread(5561524, 64, 1, HEAP32[1316053] | 0);
              $185 = HEAP32[$tag >> 2] | 0;
            } else {
              $185 = $183;
            }
            if (($185 | 0) == 12) {
              if ((HEAP32[$len >> 2] | 0) != 4) {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break;
              }
              HEAPF32[1390311] = +_getreal(HEAP32[$type >> 2] | 0);
              HEAPF32[1390313] = +_getreal(HEAP32[$type >> 2] | 0);
              $189 = HEAP32[$tag >> 2] | 0;
            } else {
              $189 = $185;
            }
            if (($189 | 0) != 13) {
              $wbi_1134413551357136013631366 = $wbi_11344;
              break;
            }
            if ((HEAP32[$type >> 2] | 0) != 7) {
              $wbi_1134413551357136013631366 = $wbi_11344;
              break;
            }
            HEAP16[$str_i586 >> 1] = -1;
            _fread($75 | 0, 1, 2, HEAP32[1316053] | 0);
            $193 = HEAP16[$str_i586 >> 1] | 0;
            $conv2_i_i590 = $193 & 255;
            $195 = ($193 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i598 = ($195 & 65535) << 8 | $conv2_i_i590;
            } else {
              $retval_0_in_i_i598 = $conv2_i_i590 << 8 | $195 & 65535;
            }
            if (($retval_0_in_i_i598 & 65535) << 16 >> 16 == -21846) {
              $c_11260 = 2;
              $i_01261 = 2;
            } else {
              $wbi_1134413551357136013631366 = $wbi_11344;
              break;
            }
            while (1) {
              $197 = HEAP32[$len >> 2] | 0;
              if ($i_01261 >>> 0 >= $197 >>> 0) {
                $i_0_lcssa = $i_01261;
                $199 = $197;
                break;
              }
              $or298 = _fgetc(HEAP32[1316053] | 0) | $c_11260 << 8;
              $inc300 = $i_01261 + 1 | 0;
              if (($or298 & 65535 | 0) == 48059) {
                label = 117;
                break;
              } else {
                $c_11260 = $or298;
                $i_01261 = $inc300;
              }
            }
            if ((label | 0) == 117) {
              label = 0;
              $i_0_lcssa = $inc300;
              $199 = HEAP32[$len >> 2] | 0;
            }
            $add1262 = $i_0_lcssa + 4 | 0;
            if ($add1262 >>> 0 < ($199 - 5 | 0) >>> 0) {
              $add1265 = $add1262;
            } else {
              $wbi_1134413551357136013631366 = $wbi_11344;
              break;
            }
            while (1) {
              HEAP32[$str_i601 >> 2] = -1;
              _fread($76 | 0, 1, 4, HEAP32[1316053] | 0);
              $202 = HEAP32[$str_i601 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i620 = $202;
              } else {
                $retval_0_i_i620 = _llvm_bswap_i32($202 | 0) | 0;
              }
              do {
                if (($retval_0_i_i620 | 0) == 257) {
                  $203 = HEAP32[$len >> 2] | 0;
                  if (($203 | 0) == 0) {
                    $i_1_be = 0;
                    break;
                  }
                  HEAP32[$str_i622 >> 2] = -1;
                  _fread($77 | 0, 1, 4, HEAP32[1316053] | 0);
                  $call314 = _fgetc(HEAP32[1316053] | 0) | 0;
                  if ($call314 >>> 0 >= 3) {
                    $i_1_be = $203;
                    break;
                  }
                  HEAP32[1350792] = (HEAP8[$call314 + 5587632 | 0] << 24 >> 24) - 48 | 0;
                  $i_1_be = $203;
                } else {
                  $i_1_be = $add1265;
                }
              } while (0);
              $add = $i_1_be + 4 | 0;
              if ($add >>> 0 < ((HEAP32[$len >> 2] | 0) - 5 | 0) >>> 0) {
                $add1265 = $add;
              } else {
                $wbi_1134413551357136013631366 = $wbi_11344;
                break L77;
              }
            }
          }
        } while (0);
        $208 = HEAP32[$tag >> 2] | 0;
        do {
          if (($208 | 0) == 16) {
            if ((HEAP32[$type >> 2] | 0) != 4) {
              label = 150;
              break;
            }
            HEAP32[$str_i643 >> 2] = -1;
            _fread($78 | 0, 1, 4, HEAP32[1316053] | 0);
            $212 = HEAP32[$str_i643 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i662 = $212;
            } else {
              $retval_0_i_i662 = _llvm_bswap_i32($212 | 0) | 0;
            }
            HEAP32[1310892] = $retval_0_i_i662;
            $213 = HEAP32[$tag >> 2] | 0;
            label = 131;
            break;
          } else {
            $213 = $208;
            label = 131;
          }
        } while (0);
        do {
          if ((label | 0) == 131) {
            label = 0;
            if (($213 | 0) == 17 & (HEAP32[1316049] | 0) != 0) {
              if ((_strncmp(5263724, 5587652, 5) | 0) != 0) {
                label = 150;
                break;
              }
              $215 = HEAP32[1316053] | 0;
              HEAP32[$str_i664 >> 2] = -1;
              _fread($79 | 0, 1, 4, $215 | 0);
              $217 = HEAP32[$str_i664 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i683 = $217;
              } else {
                $retval_0_i_i683 = _llvm_bswap_i32($217 | 0) | 0;
              }
              _fseek($215 | 0, $retval_0_i_i683 + $base_addr_1 | 0, 0);
              _parse_tiff_ifd($base_addr_1);
              $218 = HEAP32[$tag >> 2] | 0;
            } else {
              $218 = $213;
            }
            if (($218 | 0) != 20) {
              label = 150;
              break;
            }
            if ((HEAP32[$type >> 2] | 0) != 7) {
              label = 150;
              break;
            }
            $221 = HEAP32[1316053] | 0;
            if ((HEAP32[$len >> 2] | 0) == 2560) {
              _fseek($221 | 0, 1248, 1);
              $serial_3 = $serial_01293;
              $ver97_3 = $ver97_01292;
              label = 313;
              break;
            }
            _fread($arraydecay | 0, 1, 10, $221 | 0);
            if ((_strncmp($arraydecay | 0, 5587624, 4) | 0) != 0) {
              label = 150;
              break;
            }
            $222 = HEAP32[1316053] | 0;
            _fseek($222 | 0, ((_strcmp($add_ptr | 0, 5587616) | 0) != 0 ? 46 : 1546) | 0, 1);
            HEAP32[$str_i700 >> 2] = -1;
            _fread($80 | 0, 1, 4, HEAP32[1316053] | 0);
            $225 = HEAP32[$str_i700 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i719 = $225;
            } else {
              $retval_0_i_i719 = _llvm_bswap_i32($225 | 0) | 0;
            }
            HEAPF32[1390311] = +($retval_0_i_i719 << 2 >>> 0 >>> 0);
            HEAP32[$str_i721 >> 2] = -1;
            _fread($81 | 0, 1, 4, HEAP32[1316053] | 0);
            $228 = HEAP32[$str_i721 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i740 = $228;
            } else {
              $retval_0_i_i740 = _llvm_bswap_i32($228 | 0) | 0;
            }
            HEAP32[$str_i742 >> 2] = -1;
            _fread($82 | 0, 1, 4, HEAP32[1316053] | 0);
            $231 = HEAP32[$str_i742 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i761 = $231;
            } else {
              $retval_0_i_i761 = _llvm_bswap_i32($231 | 0) | 0;
            }
            HEAPF32[1390312] = +(($retval_0_i_i761 + $retval_0_i_i740 | 0) >>> 0 >>> 0);
            HEAP32[$str_i763 >> 2] = -1;
            _fread($83 | 0, 1, 4, HEAP32[1316053] | 0);
            $234 = HEAP32[$str_i763 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i782 = $234;
            } else {
              $retval_0_i_i782 = _llvm_bswap_i32($234 | 0) | 0;
            }
            HEAPF32[1390313] = +($retval_0_i_i782 << 2 >>> 0 >>> 0);
            label = 150;
            break;
          }
        } while (0);
        L203 : do {
          if ((label | 0) == 150) {
            label = 0;
            do {
              if ((HEAP32[$tag >> 2] | 0) == 21) {
                if (!((HEAP32[$type >> 2] | 0) == 2 & (HEAP32[1316049] | 0) != 0)) {
                  break;
                }
                _fread(5263468, 64, 1, HEAP32[1316053] | 0);
              }
            } while (0);
            $tobool390 = (_strstr(5263724, 5587608) | 0) == 0;
            $_pr1151_pr_pre = HEAP32[$tag >> 2] | 0;
            do {
              if ($tobool390) {
                label = 157;
              } else {
                if (($_pr1151_pr_pre | 0) == 27) {
                  HEAP32[$tag >> 2] = 4120;
                  $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461247 = $serial_01293;
                  $ver97_2119711991204120612111213121812201225122712321234124312451249 = $ver97_01292;
                  label = 307;
                  break;
                } else if (($_pr1151_pr_pre | 0) == 28) {
                  HEAP32[$tag >> 2] = 4119;
                  $ver97_2_ph149915311537 = $ver97_01292;
                  $serial_21372137413761385143514651538 = $serial_01293;
                  label = 302;
                  break;
                } else {
                  label = 157;
                  break;
                }
              }
            } while (0);
            do {
              if ((label | 0) == 157) {
                label = 0;
                if (($_pr1151_pr_pre | 0) == 29) {
                  $serial_1 = $serial_01293;
                  while (1) {
                    $call405 = _fgetc(HEAP32[1316053] | 0) | 0;
                    if (($call405 | 0) == 0 | ($call405 | 0) == (-1 | 0)) {
                      break;
                    }
                    $isdigittmp = $call405 - 48 | 0;
                    if ($isdigittmp >>> 0 < 10) {
                      $cond416 = $isdigittmp;
                    } else {
                      $cond416 = ($call405 >>> 0) % 10;
                    }
                    $serial_1 = $cond416 + ($serial_1 * 10 & -1) | 0;
                  }
                  $serial_2 = $serial_1;
                  $240 = HEAP32[$tag >> 2] | 0;
                } else {
                  $serial_2 = $serial_01293;
                  $240 = $_pr1151_pr_pre;
                }
                do {
                  if (($240 | 0) == 129) {
                    $241 = HEAP32[$type >> 2] | 0;
                    if (($241 | 0) != 4) {
                      $264 = $241;
                      label = 185;
                      break;
                    }
                    HEAP32[$str_i784 >> 2] = -1;
                    _fread($92 | 0, 1, 4, HEAP32[1316053] | 0);
                    $244 = HEAP32[$str_i784 >> 2] | 0;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_i_i803 = $244;
                    } else {
                      $retval_0_i_i803 = _llvm_bswap_i32($244 | 0) | 0;
                    }
                    HEAP32[1357153] = $retval_0_i_i803;
                    _fseek(HEAP32[1316053] | 0, $retval_0_i_i803 + 41 | 0, 0);
                    HEAP16[$str_i805 >> 1] = -1;
                    _fread($93 | 0, 1, 2, HEAP32[1316053] | 0);
                    $248 = HEAP16[$str_i805 >> 1] | 0;
                    $conv2_i_i809 = $248 & 255;
                    $250 = ($248 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i817 = ($250 & 65535) << 8 | $conv2_i_i809;
                    } else {
                      $retval_0_in_i_i817 = $conv2_i_i809 << 8 | $250 & 65535;
                    }
                    HEAP16[2622502] = ($retval_0_in_i_i817 & 65535) << 1;
                    HEAP16[$str_i820 >> 1] = -1;
                    _fread($94 | 0, 1, 2, HEAP32[1316053] | 0);
                    $254 = HEAP16[$str_i820 >> 1] | 0;
                    $conv2_i_i824 = $254 & 255;
                    $256 = ($254 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i832 = ($256 & 65535) << 8 | $conv2_i_i824;
                    } else {
                      $retval_0_in_i_i832 = $conv2_i_i824 << 8 | $256 & 65535;
                    }
                    HEAP16[2622498] = $retval_0_in_i_i832 & 65535;
                    HEAP32[1356938] = 1633771873;
                    $_pr1174 = HEAP32[$tag >> 2] | 0;
                    label = 174;
                    break;
                  } else {
                    $_pr1174 = $240;
                    label = 174;
                  }
                } while (0);
                do {
                  if ((label | 0) == 174) {
                    label = 0;
                    if (($_pr1174 | 0) == 41) {
                      if ((HEAP32[$type >> 2] | 0) != 1) {
                        $ver97_2_ph_ph = $ver97_01292;
                        break;
                      }
                      if ($wbi_1134413551357136013631366 >>> 0 < 18) {
                        $cond449 = (HEAP8[$wbi_1134413551357136013631366 + 5587588 | 0] << 24 >> 24 << 5) - 1536 | 8;
                      } else {
                        $cond449 = 8;
                      }
                      _fseek(HEAP32[1316053] | 0, $cond449 | 0, 1);
                      $c_21266 = 0;
                      while (1) {
                        HEAP32[$str_i835 >> 2] = -1;
                        _fread($95 | 0, 1, 4, HEAP32[1316053] | 0);
                        $263 = HEAP32[$str_i835 >> 2] | 0;
                        if (HEAP16[2631518] << 16 >> 16 == 18761) {
                          $retval_0_i_i854 = $263;
                        } else {
                          $retval_0_i_i854 = _llvm_bswap_i32($263 | 0) | 0;
                        }
                        HEAPF32[5561244 + (($c_21266 ^ 1 ^ $c_21266 >>> 1) << 2) >> 2] = +($retval_0_i_i854 >>> 0 >>> 0);
                        $inc462 = $c_21266 + 1 | 0;
                        if (($inc462 | 0) == 4) {
                          break;
                        } else {
                          $c_21266 = $inc462;
                        }
                      }
                      $_pr1155 = HEAP32[$tag >> 2] | 0;
                    } else {
                      $_pr1155 = $_pr1174;
                    }
                    if (($_pr1155 | 0) == 129) {
                      $264 = HEAP32[$type >> 2] | 0;
                      label = 185;
                      break;
                    } else if (($_pr1155 | 0) == 256) {
                      if ((HEAP32[$type >> 2] | 0) == 7) {
                        label = 188;
                        break;
                      } else {
                        $ver97_2_ph_ph = $ver97_01292;
                        break;
                      }
                    } else if (($_pr1155 | 0) == 640) {
                      if ((HEAP32[$type >> 2] | 0) == 1) {
                        label = 188;
                        break;
                      } else {
                        $ver97_2_ph_ph = $ver97_01292;
                        break;
                      }
                    } else {
                      $_pr1185 = $_pr1155;
                      label = 189;
                      break;
                    }
                  }
                } while (0);
                do {
                  if ((label | 0) == 185) {
                    label = 0;
                    if (($264 | 0) == 7) {
                      label = 188;
                      break;
                    } else {
                      $ver97_2_ph_ph = $ver97_01292;
                      break;
                    }
                  }
                } while (0);
                do {
                  if ((label | 0) == 188) {
                    label = 0;
                    HEAP32[1311013] = _ftell(HEAP32[1316053] | 0) | 0;
                    HEAP32[1311016] = HEAP32[$len >> 2] | 0;
                    $_pr1185 = HEAP32[$tag >> 2] | 0;
                    label = 189;
                    break;
                  }
                } while (0);
                do {
                  if ((label | 0) == 189) {
                    label = 0;
                    if (($_pr1185 | 0) == 136) {
                      do {
                        if ((HEAP32[$type >> 2] | 0) == 4) {
                          HEAP32[$str_i856 >> 2] = -1;
                          $270 = HEAP32[1316053] | 0;
                          _fread($96 | 0, 1, 4, $270 | 0);
                          $272 = HEAP32[$str_i856 >> 2] | 0;
                          if (HEAP16[2631518] << 16 >> 16 == 18761) {
                            $retval_0_i_i875 = $272;
                          } else {
                            $retval_0_i_i875 = _llvm_bswap_i32($272 | 0) | 0;
                          }
                          HEAP32[1311013] = $retval_0_i_i875;
                          if (($retval_0_i_i875 | 0) == 0) {
                            break;
                          }
                          HEAP32[1311013] = $retval_0_i_i875 + $base_addr_1 | 0;
                        }
                      } while (0);
                      $273 = HEAP32[$tag >> 2] | 0;
                    } else {
                      $273 = $_pr1185;
                    }
                    if (($273 | 0) == 137) {
                      if ((HEAP32[$type >> 2] | 0) != 4) {
                        $ver97_2_ph_ph = $ver97_01292;
                        break;
                      }
                      HEAP32[$str_i877 >> 2] = -1;
                      _fread($97 | 0, 1, 4, HEAP32[1316053] | 0);
                      $277 = HEAP32[$str_i877 >> 2] | 0;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_i_i896 = $277;
                      } else {
                        $retval_0_i_i896 = _llvm_bswap_i32($277 | 0) | 0;
                      }
                      HEAP32[1311016] = $retval_0_i_i896;
                      $_pr1190 = HEAP32[$tag >> 2] | 0;
                    } else {
                      $_pr1190 = $273;
                    }
                    if (($_pr1190 | 0) == 150 | ($_pr1190 | 0) == 140) {
                      HEAP32[1315884] = _ftell(HEAP32[1316053] | 0) | 0;
                      $279 = HEAP32[$tag >> 2] | 0;
                    } else {
                      $279 = $_pr1190;
                    }
                    if (($279 | 0) != 151) {
                      $ver97_2_ph_ph = $ver97_01292;
                      break;
                    }
                    $mul519_1 = ((($ver97_01292 * 10 & -1) - 48 | 0) + (_fgetc(HEAP32[1316053] | 0) | 0) | 0) * 10 & -1;
                    $mul519_2 = (($mul519_1 - 48 | 0) + (_fgetc(HEAP32[1316053] | 0) | 0) | 0) * 10 & -1;
                    $mul519_3 = (($mul519_2 - 48 | 0) + (_fgetc(HEAP32[1316053] | 0) | 0) | 0) * 10 & -1;
                    $sub522_3 = ($mul519_3 - 48 | 0) + (_fgetc(HEAP32[1316053] | 0) | 0) | 0;
                    if (($sub522_3 | 0) == 100) {
                      $284 = HEAP32[1316053] | 0;
                      _fseek($284 | 0, 68, 1);
                      HEAP16[$str_i898 >> 1] = -1;
                      $285 = HEAP32[1316053] | 0;
                      _fread($112 | 0, 1, 2, $285 | 0);
                      $287 = HEAP16[$str_i898 >> 1] | 0;
                      $conv2_i_i902 = $287 & 255;
                      $289 = ($287 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i910 = ($289 & 65535) << 8 | $conv2_i_i902;
                      } else {
                        $retval_0_in_i_i910 = $conv2_i_i902 << 8 | $289 & 65535;
                      }
                      HEAPF32[1390311] = +(($retval_0_in_i_i910 & 65535) >>> 0);
                      HEAP16[$str_i898 >> 1] = -1;
                      _fread($112 | 0, 1, 2, HEAP32[1316053] | 0);
                      $293 = HEAP16[$str_i898 >> 1] | 0;
                      $conv2_i_i902_1 = $293 & 255;
                      $295 = ($293 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i910_1 = ($295 & 65535) << 8 | $conv2_i_i902_1;
                      } else {
                        $retval_0_in_i_i910_1 = $conv2_i_i902_1 << 8 | $295 & 65535;
                      }
                      HEAPF32[1390313] = +(($retval_0_in_i_i910_1 & 65535) >>> 0);
                      HEAP16[$str_i898 >> 1] = -1;
                      _fread($112 | 0, 1, 2, HEAP32[1316053] | 0);
                      $522 = HEAP16[$str_i898 >> 1] | 0;
                      $conv2_i_i902_2 = $522 & 255;
                      $524 = ($522 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i910_2 = ($524 & 65535) << 8 | $conv2_i_i902_2;
                      } else {
                        $retval_0_in_i_i910_2 = $conv2_i_i902_2 << 8 | $524 & 65535;
                      }
                      HEAPF32[1390312] = +(($retval_0_in_i_i910_2 & 65535) >>> 0);
                      HEAP16[$str_i898 >> 1] = -1;
                      _fread($112 | 0, 1, 2, HEAP32[1316053] | 0);
                      $528 = HEAP16[$str_i898 >> 1] | 0;
                      $conv2_i_i902_3 = $528 & 255;
                      $530 = ($528 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i910_3 = ($530 & 65535) << 8 | $conv2_i_i902_3;
                      } else {
                        $retval_0_in_i_i910_3 = $conv2_i_i902_3 << 8 | $530 & 65535;
                      }
                      HEAPF32[1390314] = +(($retval_0_in_i_i910_3 & 65535) >>> 0);
                    } else if (($sub522_3 | 0) == 102) {
                      _fseek(HEAP32[1316053] | 0, 6, 1);
                      $serial_5 = $serial_2;
                      $ver97_5 = 102;
                      label = 341;
                      break L203;
                    } else if (($sub522_3 | 0) == 103) {
                      _fseek(HEAP32[1316053] | 0, 16, 1);
                      HEAP16[$str_i913 >> 1] = -1;
                      _fread($113 | 0, 1, 2, HEAP32[1316053] | 0);
                      $300 = HEAP16[$str_i913 >> 1] | 0;
                      $conv2_i_i917 = $300 & 255;
                      $302 = ($300 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i925 = ($302 & 65535) << 8 | $conv2_i_i917;
                      } else {
                        $retval_0_in_i_i925 = $conv2_i_i917 << 8 | $302 & 65535;
                      }
                      HEAPF32[1390311] = +(($retval_0_in_i_i925 & 65535) >>> 0);
                      HEAP16[$str_i913 >> 1] = -1;
                      _fread($113 | 0, 1, 2, HEAP32[1316053] | 0);
                      $306 = HEAP16[$str_i913 >> 1] | 0;
                      $conv2_i_i917_1 = $306 & 255;
                      $308 = ($306 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i925_1 = ($308 & 65535) << 8 | $conv2_i_i917_1;
                      } else {
                        $retval_0_in_i_i925_1 = $conv2_i_i917_1 << 8 | $308 & 65535;
                      }
                      HEAPF32[1390312] = +(($retval_0_in_i_i925_1 & 65535) >>> 0);
                      HEAP16[$str_i913 >> 1] = -1;
                      _fread($113 | 0, 1, 2, HEAP32[1316053] | 0);
                      $509 = HEAP16[$str_i913 >> 1] | 0;
                      $conv2_i_i917_2 = $509 & 255;
                      $511 = ($509 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i925_2 = ($511 & 65535) << 8 | $conv2_i_i917_2;
                      } else {
                        $retval_0_in_i_i925_2 = $conv2_i_i917_2 << 8 | $511 & 65535;
                      }
                      HEAPF32[1390313] = +(($retval_0_in_i_i925_2 & 65535) >>> 0);
                      HEAP16[$str_i913 >> 1] = -1;
                      _fread($113 | 0, 1, 2, HEAP32[1316053] | 0);
                      $515 = HEAP16[$str_i913 >> 1] | 0;
                      $conv2_i_i917_3 = $515 & 255;
                      $517 = ($515 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i925_3 = ($517 & 65535) << 8 | $conv2_i_i917_3;
                      } else {
                        $retval_0_in_i_i925_3 = $conv2_i_i917_3 << 8 | $517 & 65535;
                      }
                      HEAPF32[1390314] = +(($retval_0_in_i_i925_3 & 65535) >>> 0);
                    }
                    if ($sub522_3 >>> 0 <= 199) {
                      $ver97_2_ph_ph = $sub522_3;
                      break;
                    }
                    if (($sub522_3 | 0) != 205) {
                      $309 = HEAP32[1316053] | 0;
                      _fseek($309 | 0, 280, 1);
                    }
                    _fread($arraydecay564 | 0, 324, 1, HEAP32[1316053] | 0);
                    $ver97_2_ph_ph = $sub522_3;
                  }
                } while (0);
                $_pr1194_pr = HEAP32[$tag >> 2] | 0;
                if (($_pr1194_pr | 0) == 161) {
                  if ((HEAP32[$type >> 2] | 0) != 7) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  HEAP16[2631518] = 18761;
                  _fseek(HEAP32[1316053] | 0, 140, 1);
                  HEAP32[$str_i928 >> 2] = -1;
                  _fread($98 | 0, 1, 4, HEAP32[1316053] | 0);
                  $315 = HEAP32[$str_i928 >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i947 = $315;
                  } else {
                    $retval_0_i_i947 = _llvm_bswap_i32($315 | 0) | 0;
                  }
                  HEAPF32[1390311] = +($retval_0_i_i947 >>> 0 >>> 0);
                  HEAP32[$str_i928 >> 2] = -1;
                  _fread($98 | 0, 1, 4, HEAP32[1316053] | 0);
                  $318 = HEAP32[$str_i928 >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i947_1 = $318;
                  } else {
                    $retval_0_i_i947_1 = _llvm_bswap_i32($318 | 0) | 0;
                  }
                  HEAPF32[1390312] = +($retval_0_i_i947_1 >>> 0 >>> 0);
                  HEAP32[$str_i928 >> 2] = -1;
                  _fread($98 | 0, 1, 4, HEAP32[1316053] | 0);
                  $534 = HEAP32[$str_i928 >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i947_2 = $534;
                  } else {
                    $retval_0_i_i947_2 = _llvm_bswap_i32($534 | 0) | 0;
                  }
                  HEAPF32[1390313] = +($retval_0_i_i947_2 >>> 0 >>> 0);
                  $319 = HEAP32[$tag >> 2] | 0;
                } else {
                  $319 = $_pr1194_pr;
                }
                if (($319 | 0) == 164) {
                  if ((HEAP32[$type >> 2] | 0) != 3) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  _fseek(HEAP32[1316053] | 0, $wbi_1134413551357136013631366 * 48 & -1 | 0, 1);
                  HEAP16[$str_i949 >> 1] = -1;
                  _fread($99 | 0, 1, 2, HEAP32[1316053] | 0);
                  $324 = HEAP16[$str_i949 >> 1] | 0;
                  $conv2_i_i953 = $324 & 255;
                  $326 = ($324 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i961 = ($326 & 65535) << 8 | $conv2_i_i953;
                  } else {
                    $retval_0_in_i_i961 = $conv2_i_i953 << 8 | $326 & 65535;
                  }
                  HEAPF32[1390311] = +(($retval_0_in_i_i961 & 65535) >>> 0);
                  HEAP16[$str_i949 >> 1] = -1;
                  _fread($99 | 0, 1, 2, HEAP32[1316053] | 0);
                  $330 = HEAP16[$str_i949 >> 1] | 0;
                  $conv2_i_i953_1 = $330 & 255;
                  $332 = ($330 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i961_1 = ($332 & 65535) << 8 | $conv2_i_i953_1;
                  } else {
                    $retval_0_in_i_i961_1 = $conv2_i_i953_1 << 8 | $332 & 65535;
                  }
                  HEAPF32[1390312] = +(($retval_0_in_i_i961_1 & 65535) >>> 0);
                  HEAP16[$str_i949 >> 1] = -1;
                  _fread($99 | 0, 1, 2, HEAP32[1316053] | 0);
                  $538 = HEAP16[$str_i949 >> 1] | 0;
                  $conv2_i_i953_2 = $538 & 255;
                  $540 = ($538 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i961_2 = ($540 & 65535) << 8 | $conv2_i_i953_2;
                  } else {
                    $retval_0_in_i_i961_2 = $conv2_i_i953_2 << 8 | $540 & 65535;
                  }
                  HEAPF32[1390313] = +(($retval_0_in_i_i961_2 & 65535) >>> 0);
                  $_pr1201 = HEAP32[$tag >> 2] | 0;
                } else {
                  $_pr1201 = $319;
                }
                if (($_pr1201 | 0) == 167) {
                  $sub608 = $ver97_2_ph_ph - 200 | 0;
                  if ($sub608 >>> 0 >= 17) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  $333 = HEAP8[5246096 + ($serial_2 & 255) | 0] | 0;
                  $call614 = _fgetc(HEAP32[1316053] | 0) | 0;
                  $xor616 = _fgetc(HEAP32[1316053] | 0) ^ $call614;
                  $xor618 = $xor616 ^ _fgetc(HEAP32[1316053] | 0);
                  $i_31274 = 0;
                  $cj_01275 = HEAP8[5246352 + ($xor618 ^ _fgetc(HEAP32[1316053] | 0)) | 0] | 0;
                  $ck_01276 = 96;
                  while (1) {
                    $add631 = Math_imul($ck_01276, $333) + $cj_01275 & 255;
                    $arrayidx634 = $buf97 + $i_31274 | 0;
                    HEAP8[$arrayidx634] = HEAP8[$arrayidx634] ^ $add631;
                    $inc639 = $i_31274 + 1 | 0;
                    if (($inc639 | 0) == 324) {
                      break;
                    }
                    $i_31274 = $inc639;
                    $cj_01275 = $add631;
                    $ck_01276 = $ck_01276 + 1 & 255;
                  }
                  $sub644 = (HEAP8[$sub608 + 5587552 | 0] << 24 >> 24) - 48 | 0;
                  $and650 = $sub644 & -2;
                  $cmp_i = HEAP16[2631518] << 16 >> 16 == 18761;
                  $and658 = $sub644 & 1;
                  $conv2_i = HEAPU8[$buf97 + $and650 | 0] | 0;
                  if ($cmp_i) {
                    $retval_0_in_i = (HEAPU8[$buf97 + ($sub644 | 1) | 0] | 0) << 8 | $conv2_i;
                  } else {
                    $retval_0_in_i = HEAPU8[$buf97 + ($sub644 | 1) | 0] | 0 | $conv2_i << 8;
                  }
                  HEAPF32[5561244 + ($and658 << 2) >> 2] = +(($retval_0_in_i & 65535) >>> 0);
                  $add_ptr651_sum_1 = $and650 + 2 | 0;
                  $conv2_i_1 = HEAPU8[$buf97 + $add_ptr651_sum_1 | 0] | 0;
                  if ($cmp_i) {
                    $retval_0_in_i_1 = (HEAPU8[$buf97 + ($add_ptr651_sum_1 | 1) | 0] | 0) << 8 | $conv2_i_1;
                  } else {
                    $retval_0_in_i_1 = HEAPU8[$buf97 + ($add_ptr651_sum_1 | 1) | 0] | 0 | $conv2_i_1 << 8;
                  }
                  HEAPF32[5561244 + (($and658 ^ 1) << 2) >> 2] = +(($retval_0_in_i_1 & 65535) >>> 0);
                  $add_ptr651_sum_2 = $and650 + 4 | 0;
                  $conv2_i_2 = HEAPU8[$buf97 + $add_ptr651_sum_2 | 0] | 0;
                  if ($cmp_i) {
                    $retval_0_in_i_2 = (HEAPU8[$buf97 + ($add_ptr651_sum_2 | 1) | 0] | 0) << 8 | $conv2_i_2;
                  } else {
                    $retval_0_in_i_2 = HEAPU8[$buf97 + ($add_ptr651_sum_2 | 1) | 0] | 0 | $conv2_i_2 << 8;
                  }
                  HEAPF32[5561244 + (($and658 ^ 3) << 2) >> 2] = +(($retval_0_in_i_2 & 65535) >>> 0);
                  $add_ptr651_sum_3 = $and650 + 6 | 0;
                  $conv2_i_3 = HEAPU8[$buf97 + $add_ptr651_sum_3 | 0] | 0;
                  if ($cmp_i) {
                    $retval_0_in_i_3 = (HEAPU8[$buf97 + ($add_ptr651_sum_3 | 1) | 0] | 0) << 8 | $conv2_i_3;
                  } else {
                    $retval_0_in_i_3 = HEAPU8[$buf97 + ($add_ptr651_sum_3 | 1) | 0] | 0 | $conv2_i_3 << 8;
                  }
                  HEAPF32[5561244 + (($and658 | 2) << 2) >> 2] = +(($retval_0_in_i_3 & 65535) >>> 0);
                  $346 = HEAP32[$tag >> 2] | 0;
                } else {
                  $346 = $_pr1201;
                }
                do {
                  if (($346 | 0) == 512) {
                    $347 = HEAP32[$len >> 2] | 0;
                    if (($347 | 0) == 3) {
                      HEAP32[$str_i964 >> 2] = -1;
                      $348 = HEAP32[1316053] | 0;
                      _fread($100 | 0, 1, 4, $348 | 0);
                      HEAP32[$str_i985 >> 2] = -1;
                      $349 = HEAP32[1316053] | 0;
                      _fread($101 | 0, 1, 4, $349 | 0);
                      $351 = HEAP32[$str_i985 >> 2] | 0;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_i_i1004 = $351;
                      } else {
                        $retval_0_i_i1004 = _llvm_bswap_i32($351 | 0) | 0;
                      }
                      HEAP32[1311232] = $retval_0_i_i1004;
                      $_pr1208_pre = HEAP32[$tag >> 2] | 0;
                      if (($_pr1208_pre | 0) != 512) {
                        $_pr1215 = $_pr1208_pre;
                        break;
                      }
                      $352 = HEAP32[$len >> 2] | 0;
                    } else {
                      $352 = $347;
                    }
                    if (($352 | 0) != 4) {
                      $serial_7 = $serial_2;
                      $ver97_7 = $ver97_2_ph_ph;
                      break L203;
                    }
                    HEAP16[$str_i1006 >> 1] = -1;
                    _fread($102 | 0, 1, 2, HEAP32[1316053] | 0);
                    $355 = HEAP16[$str_i1006 >> 1] | 0;
                    $conv2_i_i1010 = $355 & 255;
                    $357 = ($355 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1018 = ($357 & 65535) << 8 | $conv2_i_i1010;
                    } else {
                      $retval_0_in_i_i1018 = $conv2_i_i1010 << 8 | $357 & 65535;
                    }
                    HEAP32[1390256] = $retval_0_in_i_i1018 & 65535;
                    HEAP16[$str_i1006 >> 1] = -1;
                    _fread($102 | 0, 1, 2, HEAP32[1316053] | 0);
                    $361 = HEAP16[$str_i1006 >> 1] | 0;
                    $conv2_i_i1010_1 = $361 & 255;
                    $363 = ($361 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1018_1 = ($363 & 65535) << 8 | $conv2_i_i1010_1;
                    } else {
                      $retval_0_in_i_i1018_1 = $conv2_i_i1010_1 << 8 | $363 & 65535;
                    }
                    HEAP32[1390257] = $retval_0_in_i_i1018_1 & 65535;
                    HEAP16[$str_i1006 >> 1] = -1;
                    _fread($102 | 0, 1, 2, HEAP32[1316053] | 0);
                    $553 = HEAP16[$str_i1006 >> 1] | 0;
                    $conv2_i_i1010_2 = $553 & 255;
                    $555 = ($553 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1018_2 = ($555 & 65535) << 8 | $conv2_i_i1010_2;
                    } else {
                      $retval_0_in_i_i1018_2 = $conv2_i_i1010_2 << 8 | $555 & 65535;
                    }
                    HEAP32[1390259] = $retval_0_in_i_i1018_2 & 65535;
                    HEAP16[$str_i1006 >> 1] = -1;
                    _fread($102 | 0, 1, 2, HEAP32[1316053] | 0);
                    $559 = HEAP16[$str_i1006 >> 1] | 0;
                    $conv2_i_i1010_3 = $559 & 255;
                    $561 = ($559 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1018_3 = ($561 & 65535) << 8 | $conv2_i_i1010_3;
                    } else {
                      $retval_0_in_i_i1018_3 = $conv2_i_i1010_3 << 8 | $561 & 65535;
                    }
                    HEAP32[1390258] = $retval_0_in_i_i1018_3 & 65535;
                    $_pr1215 = HEAP32[$tag >> 2] | 0;
                  } else {
                    $_pr1215 = $346;
                  }
                } while (0);
                if (($_pr1215 | 0) == 513) {
                  if ((HEAP32[$len >> 2] | 0) == 4) {
                    $serial_5 = $serial_2;
                    $ver97_5 = $ver97_2_ph_ph;
                    label = 341;
                    break L203;
                  } else {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                } else if (($_pr1215 | 0) == 544) {
                  label = 251;
                } else {
                  $367 = $_pr1215;
                }
                if ((label | 0) == 251) {
                  label = 0;
                  if ((HEAP32[$type >> 2] | 0) != 7) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  HEAP32[1315884] = _ftell(HEAP32[1316053] | 0) | 0;
                  $367 = HEAP32[$tag >> 2] | 0;
                }
                if (($367 | 0) == 1025) {
                  if ((HEAP32[$type >> 2] | 0) != 4) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  if ((HEAP32[$len >> 2] | 0) == 4) {
                    $c_91279 = 0;
                  } else {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  while (1) {
                    HEAP32[$str_i1021 >> 2] = -1;
                    _fread($103 | 0, 1, 4, HEAP32[1316053] | 0);
                    $372 = HEAP32[$str_i1021 >> 2] | 0;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_i_i1040 = $372;
                    } else {
                      $retval_0_i_i1040 = _llvm_bswap_i32($372 | 0) | 0;
                    }
                    HEAP32[5561024 + (($c_91279 >>> 1 ^ $c_91279) << 2) >> 2] = $retval_0_i_i1040;
                    $inc726 = $c_91279 + 1 | 0;
                    if (($inc726 | 0) == 4) {
                      break;
                    } else {
                      $c_91279 = $inc726;
                    }
                  }
                  $_pr1222 = HEAP32[$tag >> 2] | 0;
                } else {
                  $_pr1222 = $367;
                }
                if (($_pr1222 | 0) == 3585) {
                  HEAP16[2631518] = 18761;
                  $373 = HEAP32[1316053] | 0;
                  _fseek($373 | 0, 22, 1);
                  L425 : do {
                    if ((HEAP32[$len >> 2] | 0) >>> 0 > 44) {
                      $offset_01281 = 22;
                      while (1) {
                        HEAP32[$str_i1042 >> 2] = -1;
                        _fread($104 | 0, 1, 4, HEAP32[1316053] | 0);
                        $377 = HEAP32[$str_i1042 >> 2] | 0;
                        if (HEAP16[2631518] << 16 >> 16 == 18761) {
                          $retval_0_i_i1061 = $377;
                        } else {
                          $retval_0_i_i1061 = _llvm_bswap_i32($377 | 0) | 0;
                        }
                        HEAP32[$tag >> 2] = $retval_0_i_i1061;
                        _fseek(HEAP32[1316053] | 0, 14, 1);
                        HEAP32[$str_i1063 >> 2] = -1;
                        _fread($105 | 0, 1, 4, HEAP32[1316053] | 0);
                        $381 = HEAP32[$str_i1063 >> 2] | 0;
                        if (HEAP16[2631518] << 16 >> 16 == 18761) {
                          $retval_0_i_i1082 = $381;
                        } else {
                          $retval_0_i_i1082 = _llvm_bswap_i32($381 | 0) | 0;
                        }
                        if ((HEAP32[$tag >> 2] | 0) == 1990472199) {
                          HEAP16[$str_i1084 >> 1] = -1;
                          $383 = HEAP32[1316053] | 0;
                          _fread($106 | 0, 1, 2, $383 | 0);
                          $385 = HEAP16[$str_i1084 >> 1] | 0;
                          $conv2_i_i1088 = $385 & 255;
                          $387 = ($385 & 65535) >>> 8;
                          if (HEAP16[2631518] << 16 >> 16 == 18761) {
                            $retval_0_in_i_i1096 = ($387 & 65535) << 8 | $conv2_i_i1088;
                          } else {
                            $retval_0_in_i_i1096 = $conv2_i_i1088 << 8 | $387 & 65535;
                          }
                          HEAP32[1350792] = $retval_0_in_i_i1096 & 65535;
                        } else {
                          _fseek(HEAP32[1316053] | 0, $retval_0_i_i1082 - 4 | 0, 1);
                        }
                        $add752 = ($offset_01281 + 18 | 0) + $retval_0_i_i1082 | 0;
                        if (($add752 + 22 | 0) >>> 0 < (HEAP32[$len >> 2] | 0) >>> 0) {
                          $offset_01281 = $add752;
                        } else {
                          break L425;
                        }
                      }
                    }
                  } while (0);
                  $391 = HEAP32[$tag >> 2] | 0;
                } else {
                  $391 = $_pr1222;
                }
                if (($391 | 0) == 3712) {
                  if ((HEAP32[$len >> 2] | 0) != 256) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  if ((HEAP32[$type >> 2] | 0) != 7) {
                    $serial_7 = $serial_2;
                    $ver97_7 = $ver97_2_ph_ph;
                    break L203;
                  }
                  _fseek(HEAP32[1316053] | 0, 48, 1);
                  HEAP16[$str_i1099 >> 1] = -1;
                  _fread($107 | 0, 1, 2, HEAP32[1316053] | 0);
                  $397 = HEAP16[$str_i1099 >> 1] | 0;
                  $conv2_i_i1103 = $397 & 255;
                  $399 = ($397 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i1111 = ($399 & 65535) << 8 | $conv2_i_i1103;
                  } else {
                    $retval_0_in_i_i1111 = $conv2_i_i1103 << 8 | $399 & 65535;
                  }
                  HEAPF32[1390311] = +(($retval_0_in_i_i1111 & 65535) * 508 & -1 | 0) * 1.078 * 152587890625.0e-16;
                  HEAP16[$str_i1114 >> 1] = -1;
                  _fread($108 | 0, 1, 2, HEAP32[1316053] | 0);
                  $403 = HEAP16[$str_i1114 >> 1] | 0;
                  $conv2_i_i1118 = $403 & 255;
                  $405 = ($403 & 65535) >>> 8;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_in_i_i1126 = ($405 & 65535) << 8 | $conv2_i_i1118;
                  } else {
                    $retval_0_in_i_i1126 = $conv2_i_i1118 << 8 | $405 & 65535;
                  }
                  HEAPF32[1390313] = +(($retval_0_in_i_i1126 & 65535) * 382 & -1 | 0) * 1.173 * 152587890625.0e-16;
                  $_pr1240 = HEAP32[$tag >> 2] | 0;
                } else {
                  $_pr1240 = $391;
                }
                do {
                  if (($_pr1240 | 0) == 3840) {
                    if ((HEAP32[$type >> 2] | 0) != 7) {
                      $serial_7 = $serial_2;
                      $ver97_7 = $ver97_2_ph_ph;
                      break L203;
                    }
                    $408 = HEAP32[$len >> 2] | 0;
                    if (($408 | 0) == 614) {
                      $409 = HEAP32[1316053] | 0;
                      _fseek($409 | 0, 176, 1);
                      $serial_3 = $serial_2;
                      $ver97_3 = $ver97_2_ph_ph;
                      label = 313;
                      break L203;
                    } else if (($408 | 0) == 1502 | ($408 | 0) == 734) {
                      _fseek(HEAP32[1316053] | 0, 148, 1);
                      $serial_3 = $serial_2;
                      $ver97_3 = $ver97_2_ph_ph;
                      label = 313;
                      break L203;
                    } else {
                      $serial_7 = $serial_2;
                      $ver97_7 = $ver97_2_ph_ph;
                      break L203;
                    }
                  } else if (($_pr1240 | 0) == 4113) {
                    if ((HEAP32[$len >> 2] | 0) == 9) {
                      $i_41283 = 0;
                      label = 290;
                      break;
                    } else {
                      $serial_7 = $serial_2;
                      $ver97_7 = $ver97_2_ph_ph;
                      break L203;
                    }
                  } else if (($_pr1240 | 0) == 541065728) {
                    $i_41283 = 0;
                    label = 290;
                  } else {
                    $423 = $_pr1240;
                  }
                } while (0);
                if ((label | 0) == 290) {
                  while (1) {
                    label = 0;
                    HEAP16[$str_i1129 >> 1] = -1;
                    _fread($111 | 0, 1, 2, HEAP32[1316053] | 0);
                    $414 = HEAP16[$str_i1129 >> 1] | 0;
                    $conv2_i_i1133 = $414 & 255;
                    $416 = ($414 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1141 = ($416 & 65535) << 8 | $conv2_i_i1133;
                    } else {
                      $retval_0_in_i_i1141 = $conv2_i_i1133 << 8 | $416 & 65535;
                    }
                    HEAPF32[5560964 + ($i_41283 << 4) >> 2] = +(($retval_0_in_i_i1141 & 65535) << 16 >> 16 | 0) * .00390625;
                    HEAP16[$str_i1129 >> 1] = -1;
                    _fread($111 | 0, 1, 2, HEAP32[1316053] | 0);
                    $420 = HEAP16[$str_i1129 >> 1] | 0;
                    $conv2_i_i1133_1 = $420 & 255;
                    $422 = ($420 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1141_1 = ($422 & 65535) << 8 | $conv2_i_i1133_1;
                    } else {
                      $retval_0_in_i_i1141_1 = $conv2_i_i1133_1 << 8 | $422 & 65535;
                    }
                    HEAPF32[5560968 + ($i_41283 << 4) >> 2] = +(($retval_0_in_i_i1141_1 & 65535) << 16 >> 16 | 0) * .00390625;
                    HEAP16[$str_i1129 >> 1] = -1;
                    _fread($111 | 0, 1, 2, HEAP32[1316053] | 0);
                    $566 = HEAP16[$str_i1129 >> 1] | 0;
                    $conv2_i_i1133_2 = $566 & 255;
                    $568 = ($566 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i1141_2 = ($568 & 65535) << 8 | $conv2_i_i1133_2;
                    } else {
                      $retval_0_in_i_i1141_2 = $conv2_i_i1133_2 << 8 | $568 & 65535;
                    }
                    HEAPF32[5560972 + ($i_41283 << 4) >> 2] = +(($retval_0_in_i_i1141_2 & 65535) << 16 >> 16 | 0) * .00390625;
                    $inc830 = $i_41283 + 1 | 0;
                    if (($inc830 | 0) == 3) {
                      break;
                    } else {
                      $i_41283 = $inc830;
                      label = 290;
                    }
                  }
                  $423 = HEAP32[$tag >> 2] | 0;
                }
                do {
                  if (($423 | 0) == 541066752 | ($423 | 0) == 4114) {
                    if ((HEAP32[$len >> 2] | 0) != 4) {
                      $_pr1244 = $423;
                      break;
                    }
                    HEAP16[$str_i685 >> 1] = -1;
                    _fread($110 | 0, 1, 2, HEAP32[1316053] | 0);
                    $427 = HEAP16[$str_i685 >> 1] | 0;
                    $conv2_i_i689 = $427 & 255;
                    $429 = ($427 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i697 = ($429 & 65535) << 8 | $conv2_i_i689;
                    } else {
                      $retval_0_in_i_i697 = $conv2_i_i689 << 8 | $429 & 65535;
                    }
                    HEAP32[1390256] = $retval_0_in_i_i697 & 65535;
                    HEAP16[$str_i685 >> 1] = -1;
                    _fread($110 | 0, 1, 2, HEAP32[1316053] | 0);
                    $433 = HEAP16[$str_i685 >> 1] | 0;
                    $conv2_i_i689_1 = $433 & 255;
                    $435 = ($433 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i697_1 = ($435 & 65535) << 8 | $conv2_i_i689_1;
                    } else {
                      $retval_0_in_i_i697_1 = $conv2_i_i689_1 << 8 | $435 & 65535;
                    }
                    HEAP32[1390257] = $retval_0_in_i_i697_1 & 65535;
                    HEAP16[$str_i685 >> 1] = -1;
                    _fread($110 | 0, 1, 2, HEAP32[1316053] | 0);
                    $573 = HEAP16[$str_i685 >> 1] | 0;
                    $conv2_i_i689_2 = $573 & 255;
                    $575 = ($573 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i697_2 = ($575 & 65535) << 8 | $conv2_i_i689_2;
                    } else {
                      $retval_0_in_i_i697_2 = $conv2_i_i689_2 << 8 | $575 & 65535;
                    }
                    HEAP32[1390259] = $retval_0_in_i_i697_2 & 65535;
                    HEAP16[$str_i685 >> 1] = -1;
                    _fread($110 | 0, 1, 2, HEAP32[1316053] | 0);
                    $579 = HEAP16[$str_i685 >> 1] | 0;
                    $conv2_i_i689_3 = $579 & 255;
                    $581 = ($579 & 65535) >>> 8;
                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                      $retval_0_in_i_i697_3 = ($581 & 65535) << 8 | $conv2_i_i689_3;
                    } else {
                      $retval_0_in_i_i697_3 = $conv2_i_i689_3 << 8 | $581 & 65535;
                    }
                    HEAP32[1390258] = $retval_0_in_i_i697_3 & 65535;
                    $_pr1244 = HEAP32[$tag >> 2] | 0;
                  } else {
                    $_pr1244 = $423;
                  }
                } while (0);
                if (($_pr1244 | 0) == 541065472 | ($_pr1244 | 0) == 4119) {
                  $ver97_2_ph149915311537 = $ver97_2_ph_ph;
                  $serial_21372137413761385143514651538 = $serial_2;
                  label = 302;
                  break;
                } else {
                  $442 = $_pr1244;
                  $serial_21372137413761385143514651479 = $serial_2;
                  $ver97_2_ph149915311535 = $ver97_2_ph_ph;
                  label = 306;
                  break;
                }
              }
            } while (0);
            do {
              if ((label | 0) == 302) {
                label = 0;
                HEAP16[$str_i253 >> 1] = -1;
                $436 = HEAP32[1316053] | 0;
                _fread($109 | 0, 1, 2, $436 | 0);
                $438 = HEAP16[$str_i253 >> 1] | 0;
                $conv2_i_i257 = $438 & 255;
                $440 = ($438 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i265 = ($440 & 65535) << 8 | $conv2_i_i257;
                } else {
                  $retval_0_in_i_i265 = $conv2_i_i257 << 8 | $440 & 65535;
                }
                HEAPF32[1390311] = +($retval_0_in_i_i265 & 65535 | 0) * .00390625;
                $442 = HEAP32[$tag >> 2] | 0;
                $serial_21372137413761385143514651479 = $serial_21372137413761385143514651538;
                $ver97_2_ph149915311535 = $ver97_2_ph149915311537;
                label = 306;
                break;
              }
            } while (0);
            do {
              if ((label | 0) == 306) {
                label = 0;
                if (($442 | 0) == 541065472 | ($442 | 0) == 4120) {
                  $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461247 = $serial_21372137413761385143514651479;
                  $ver97_2119711991204120612111213121812201225122712321234124312451249 = $ver97_2_ph149915311535;
                  label = 307;
                  break;
                } else {
                  $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248 = $serial_21372137413761385143514651479;
                  $ver97_2119711991204120612111213121812201225122712321234124312451250 = $ver97_2_ph149915311535;
                  $449 = $442;
                  break;
                }
              }
            } while (0);
            if ((label | 0) == 307) {
              label = 0;
              HEAP16[$str_i238 >> 1] = -1;
              $443 = HEAP32[1316053] | 0;
              _fread($114 | 0, 1, 2, $443 | 0);
              $445 = HEAP16[$str_i238 >> 1] | 0;
              $conv2_i_i242 = $445 & 255;
              $447 = ($445 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i250 = ($447 & 65535) << 8 | $conv2_i_i242;
              } else {
                $retval_0_in_i_i250 = $conv2_i_i242 << 8 | $447 & 65535;
              }
              HEAPF32[1390313] = +($retval_0_in_i_i250 & 65535 | 0) * .00390625;
              $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248 = $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461247;
              $ver97_2119711991204120612111213121812201225122712321234124312451250 = $ver97_2119711991204120612111213121812201225122712321234124312451249;
              $449 = HEAP32[$tag >> 2] | 0;
            }
            if (($449 | 0) != 8209) {
              $serial_4 = $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248;
              $ver97_4 = $ver97_2119711991204120612111213121812201225122712321234124312451250;
              $463 = $449;
              label = 320;
              break;
            }
            if ((HEAP32[$len >> 2] | 0) == 2) {
              $serial_3 = $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248;
              $ver97_3 = $ver97_2119711991204120612111213121812201225122712321234124312451250;
              label = 313;
              break;
            } else {
              $serial_7 = $serial_21173117611781187118911911193119612001203120712101214121712211224122812311237124212461248;
              $ver97_7 = $ver97_2119711991204120612111213121812201225122712321234124312451250;
              break;
            }
          }
        } while (0);
        do {
          if ((label | 0) == 313) {
            label = 0;
            HEAP16[2631518] = 19789;
            HEAP16[$str_i223 >> 1] = -1;
            $451 = HEAP32[1316053] | 0;
            _fread($84 | 0, 1, 2, $451 | 0);
            $453 = HEAP16[$str_i223 >> 1] | 0;
            $conv2_i_i227 = $453 & 255;
            $455 = ($453 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i235 = ($455 & 65535) << 8 | $conv2_i_i227;
            } else {
              $retval_0_in_i_i235 = $conv2_i_i227 << 8 | $455 & 65535;
            }
            HEAPF32[1390311] = +($retval_0_in_i_i235 & 65535 | 0) * .00390625;
            HEAP16[$str_i208 >> 1] = -1;
            _fread($85 | 0, 1, 2, HEAP32[1316053] | 0);
            $459 = HEAP16[$str_i208 >> 1] | 0;
            $conv2_i_i212 = $459 & 255;
            $461 = ($459 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i220 = ($461 & 65535) << 8 | $conv2_i_i212;
            } else {
              $retval_0_in_i_i220 = $conv2_i_i212 << 8 | $461 & 65535;
            }
            HEAPF32[1390313] = +($retval_0_in_i_i220 & 65535 | 0) * .00390625;
            $serial_4 = $serial_3;
            $ver97_4 = $ver97_3;
            $463 = HEAP32[$tag >> 2] | 0;
            label = 320;
            break;
          }
        } while (0);
        do {
          if ((label | 0) == 320) {
            label = 0;
            do {
              if (($463 | 112 | 0) == 8304) {
                if ((HEAP32[$type >> 2] | 0) != 4) {
                  $468 = $463;
                  break;
                }
                $465 = HEAP32[1316053] | 0;
                HEAP32[$str_i187 >> 2] = -1;
                _fread($86 | 0, 1, 4, $465 | 0);
                $467 = HEAP32[$str_i187 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i206 = $467;
                } else {
                  $retval_0_i_i206 = _llvm_bswap_i32($467 | 0) | 0;
                }
                _fseek($465 | 0, $retval_0_i_i206 + $base_addr_1 | 0, 0);
                $468 = HEAP32[$tag >> 2] | 0;
              } else {
                $468 = $463;
              }
            } while (0);
            if (($468 | 0) == 8208) {
              if ((HEAP32[$type >> 2] | 0) == 7) {
                $serial_7 = $serial_4;
                $ver97_7 = $ver97_4;
                break;
              }
              HEAP32[1315947] = 62;
              $serial_7 = $serial_4;
              $ver97_7 = $ver97_4;
              break;
            } else if (($468 | 0) == 8224) {
              _parse_thumb_note($base_addr_1, 257, 258);
              $470 = HEAP32[$tag >> 2] | 0;
            } else {
              $470 = $468;
            }
            if (($470 | 0) == 8256) {
              _parse_makernote($base_addr_1, 8256);
              $471 = HEAP32[$tag >> 2] | 0;
            } else {
              $471 = $470;
            }
            if (($471 | 0) == 45096) {
              $472 = HEAP32[1316053] | 0;
              HEAP32[$str_i166 >> 2] = -1;
              _fread($87 | 0, 1, 4, $472 | 0);
              $474 = HEAP32[$str_i166 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i185 = $474;
              } else {
                $retval_0_i_i185 = _llvm_bswap_i32($474 | 0) | 0;
              }
              _fseek($472 | 0, $retval_0_i_i185 + $base_addr_1 | 0, 0);
              _parse_thumb_note($base_addr_1, 136, 137);
              $475 = HEAP32[$tag >> 2] | 0;
            } else {
              $475 = $471;
            }
            if (($475 | 0) != 16385) {
              $serial_6 = $serial_4;
              $ver97_6 = $ver97_4;
              $495 = $475;
              label = 348;
              break;
            }
            $476 = HEAP32[$len >> 2] | 0;
            if ($476 >>> 0 <= 500) {
              $serial_7 = $serial_4;
              $ver97_7 = $ver97_4;
              break;
            }
            do {
              if (($476 | 0) == 582) {
                $cond949 = 50;
              } else {
                if (($476 | 0) == 653) {
                  $cond949 = 68;
                  break;
                }
                $cond949 = ($476 | 0) == 5120 ? 142 : 126;
              }
            } while (0);
            _fseek(HEAP32[1316053] | 0, $cond949 | 0, 1);
            $serial_5 = $serial_4;
            $ver97_5 = $ver97_4;
            label = 341;
            break;
          }
        } while (0);
        do {
          if ((label | 0) == 341) {
            label = 0;
            HEAP16[$str_i151 >> 1] = -1;
            $478 = HEAP32[1316053] | 0;
            _fread($88 | 0, 1, 2, $478 | 0);
            $480 = HEAP16[$str_i151 >> 1] | 0;
            $conv2_i_i155 = $480 & 255;
            $482 = ($480 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i163 = ($482 & 65535) << 8 | $conv2_i_i155;
            } else {
              $retval_0_in_i_i163 = $conv2_i_i155 << 8 | $482 & 65535;
            }
            HEAPF32[1390311] = +(($retval_0_in_i_i163 & 65535) >>> 0);
            HEAP16[$str_i151 >> 1] = -1;
            _fread($88 | 0, 1, 2, HEAP32[1316053] | 0);
            $486 = HEAP16[$str_i151 >> 1] | 0;
            $conv2_i_i155_1 = $486 & 255;
            $488 = ($486 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i163_1 = ($488 & 65535) << 8 | $conv2_i_i155_1;
            } else {
              $retval_0_in_i_i163_1 = $conv2_i_i155_1 << 8 | $488 & 65535;
            }
            HEAPF32[1390312] = +(($retval_0_in_i_i163_1 & 65535) >>> 0);
            HEAP16[$str_i151 >> 1] = -1;
            _fread($88 | 0, 1, 2, HEAP32[1316053] | 0);
            $586 = HEAP16[$str_i151 >> 1] | 0;
            $conv2_i_i155_2 = $586 & 255;
            $588 = ($586 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i163_2 = ($588 & 65535) << 8 | $conv2_i_i155_2;
            } else {
              $retval_0_in_i_i163_2 = $conv2_i_i155_2 << 8 | $588 & 65535;
            }
            HEAPF32[1390314] = +(($retval_0_in_i_i163_2 & 65535) >>> 0);
            HEAP16[$str_i151 >> 1] = -1;
            _fread($88 | 0, 1, 2, HEAP32[1316053] | 0);
            $592 = HEAP16[$str_i151 >> 1] | 0;
            $conv2_i_i155_3 = $592 & 255;
            $594 = ($592 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i163_3 = ($594 & 65535) << 8 | $conv2_i_i155_3;
            } else {
              $retval_0_in_i_i163_3 = $conv2_i_i155_3 << 8 | $594 & 65535;
            }
            HEAPF32[1390313] = +(($retval_0_in_i_i163_3 & 65535) >>> 0);
            _fseek(HEAP32[1316053] | 0, ((HEAP32[$len >> 2] & -8 | 0) == 1312 ? 112 : 22) | 0, 1);
            HEAP16[$str_i142 >> 1] = -1;
            _fread($89 | 0, 1, 2, HEAP32[1316053] | 0);
            $600 = HEAP16[$str_i142 >> 1] | 0;
            $conv2_i_i146 = $600 & 255;
            $602 = ($600 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i = ($602 & 65535) << 8 | $conv2_i_i146;
            } else {
              $retval_0_in_i_i = $conv2_i_i146 << 8 | $602 & 65535;
            }
            HEAP16[2622062] = $retval_0_in_i_i & 65535;
            HEAP16[$str_i142 >> 1] = -1;
            _fread($89 | 0, 1, 2, HEAP32[1316053] | 0);
            $492 = HEAP16[$str_i142 >> 1] | 0;
            $conv2_i_i146_1 = $492 & 255;
            $494 = ($492 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i_1 = ($494 & 65535) << 8 | $conv2_i_i146_1;
            } else {
              $retval_0_in_i_i_1 = $conv2_i_i146_1 << 8 | $494 & 65535;
            }
            HEAP16[2622063] = $retval_0_in_i_i_1 & 65535;
            HEAP16[$str_i142 >> 1] = -1;
            _fread($89 | 0, 1, 2, HEAP32[1316053] | 0);
            $606 = HEAP16[$str_i142 >> 1] | 0;
            $conv2_i_i146_2 = $606 & 255;
            $608 = ($606 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i_2 = ($608 & 65535) << 8 | $conv2_i_i146_2;
            } else {
              $retval_0_in_i_i_2 = $conv2_i_i146_2 << 8 | $608 & 65535;
            }
            HEAP16[2622065] = $retval_0_in_i_i_2 & 65535;
            HEAP16[$str_i142 >> 1] = -1;
            _fread($89 | 0, 1, 2, HEAP32[1316053] | 0);
            $612 = HEAP16[$str_i142 >> 1] | 0;
            $conv2_i_i146_3 = $612 & 255;
            $614 = ($612 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i_3 = ($614 & 65535) << 8 | $conv2_i_i146_3;
            } else {
              $retval_0_in_i_i_3 = $conv2_i_i146_3 << 8 | $614 & 65535;
            }
            HEAP16[2622064] = $retval_0_in_i_i_3 & 65535;
            $serial_6 = $serial_5;
            $ver97_6 = $ver97_5;
            $495 = HEAP32[$tag >> 2] | 0;
            label = 348;
            break;
          }
        } while (0);
        L590 : do {
          if ((label | 0) == 348) {
            label = 0;
            if (($495 | 0) == 40993) {
              $c_141287 = 0;
              while (1) {
                HEAP32[$str_i121 >> 2] = -1;
                _fread($91 | 0, 1, 4, HEAP32[1316053] | 0);
                $498 = HEAP32[$str_i121 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i140 = $498;
                } else {
                  $retval_0_i_i140 = _llvm_bswap_i32($498 | 0) | 0;
                }
                HEAPF32[5561244 + (($c_141287 >>> 1 ^ $c_141287) << 2) >> 2] = +($retval_0_i_i140 >>> 0 >>> 0);
                $inc993 = $c_141287 + 1 | 0;
                if (($inc993 | 0) == 4) {
                  break;
                } else {
                  $c_141287 = $inc993;
                }
              }
              $499 = HEAP32[$tag >> 2] | 0;
            } else {
              $499 = $495;
            }
            if (($499 | 0) == 41e3) {
              $c_151288 = 0;
            } else {
              $serial_7 = $serial_6;
              $ver97_7 = $ver97_6;
              break;
            }
            while (1) {
              HEAP32[$str_i >> 2] = -1;
              _fread($90 | 0, 1, 4, HEAP32[1316053] | 0);
              $502 = HEAP32[$str_i >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i = $502;
              } else {
                $retval_0_i_i = _llvm_bswap_i32($502 | 0) | 0;
              }
              $arrayidx1007 = 5561244 + (($c_151288 >>> 1 ^ $c_151288) << 2) | 0;
              HEAPF32[$arrayidx1007 >> 2] = +HEAPF32[$arrayidx1007 >> 2] - +($retval_0_i_i >>> 0 >>> 0);
              $inc1010 = $c_151288 + 1 | 0;
              if (($inc1010 | 0) == 4) {
                $serial_7 = $serial_6;
                $ver97_7 = $ver97_6;
                break L590;
              } else {
                $c_151288 = $inc1010;
              }
            }
          }
        } while (0);
        _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
        if (($dec1295 | 0) == 0) {
          break L16;
        } else {
          $ver97_01292 = $ver97_7;
          $serial_01293 = $serial_7;
          $wbi_01294 = $wbi_1134413551357136013631366;
          $dec1295_in = $dec1295;
        }
      }
    }
  } while (0);
  L606 : do {
    if ((label | 0) == 8) {
      HEAP16[2631518] = 19789;
      $call261256 = _ftell(HEAP32[1316053] | 0) | 0;
      if (!($call261256 >>> 0 < (HEAP32[1357153] | 0) >>> 0 & $call261256 >>> 0 < 16384)) {
        break;
      }
      $4 = $str_i268;
      $7 = 0;
      $6 = 0;
      $5 = 0;
      while (1) {
        HEAP16[$str_i268 >> 1] = -1;
        _fread($4 | 0, 1, 2, HEAP32[1316053] | 0);
        $10 = HEAP16[$str_i268 >> 1] | 0;
        $conv2_i_i272 = $10 & 255;
        $12 = ($10 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i280 = ($12 & 65535) << 8 | $conv2_i_i272;
        } else {
          $retval_0_in_i_i280 = $conv2_i_i272 << 8 | $12 & 65535;
        }
        $conv = $retval_0_in_i_i280 & 65535;
        do {
          if (($5 | 0) == 256 & ($retval_0_in_i_i280 & 65535) << 16 >> 16 == 256) {
            if (!(($7 - 257 | 0) >>> 0 < 383 & ($6 - 257 | 0) >>> 0 < 383)) {
              $16 = 256;
              break;
            }
            HEAPF32[1390311] = +($7 >>> 0 >>> 0);
            HEAPF32[1390312] = 256.0;
            HEAPF32[1390313] = +($6 >>> 0 >>> 0);
            HEAPF32[1390314] = +($conv >>> 0 >>> 0);
            $16 = 256;
          } else {
            $16 = $5;
          }
        } while (0);
        $call26 = _ftell(HEAP32[1316053] | 0) | 0;
        if ($call26 >>> 0 < (HEAP32[1357153] | 0) >>> 0 & $call26 >>> 0 < 16384) {
          $7 = $6;
          $6 = $16;
          $5 = $conv;
        } else {
          break L606;
        }
      }
    }
  } while (0);
  HEAP16[2631518] = $0;
  STACKTOP = __stackBase__;
  return;
}
function _parse_tiff_ifd($base) {
  $base = $base | 0;
  var $str_i1311 = 0, $str_i1290 = 0, $str_i1_i1266 = 0, $str_i_i1267 = 0, $str_i1_i1242 = 0, $str_i_i1243 = 0, $str_i1_i1218 = 0, $str_i_i1219 = 0, $str_i1_i1194 = 0, $str_i_i1195 = 0, $str_i1_i1170 = 0, $str_i_i1171 = 0, $str_i1146 = 0, $str_i1_i1122 = 0, $str_i_i1123 = 0, $str_i1107 = 0, $str_i1092 = 0, $str_i1072 = 0, $str_i1051 = 0, $str_i1036 = 0, $str_i1021 = 0, $str_i1006 = 0, $str_i132_i = 0, $str_i984 = 0, $str_i963 = 0, $str_i942 = 0, $str_i921 = 0, $str_i900 = 0, $str_i879 = 0, $str_i1_i855 = 0, $str_i_i856 = 0, $str_i834 = 0, $str_i813 = 0, $str_i792 = 0, $str_i777 = 0, $str_i756 = 0, $str_i741 = 0, $str_i726 = 0, $str_i705 = 0, $str_i684 = 0, $str_i663 = 0, $str_i648 = 0, $str_i627 = 0, $str_i606 = 0, $str_i585 = 0, $str_i1_i561 = 0, $str_i_i562 = 0, $str_i1_i537 = 0, $str_i_i538 = 0, $str_i1_i513 = 0, $str_i_i514 = 0, $str_i492 = 0, $str_i1_i468 = 0, $str_i_i469 = 0, $str_i453 = 0, $str_i432 = 0, $str_i417 = 0, $str_i1_i393 = 0, $str_i_i394 = 0, $str_i384 = 0, $str_i1_i360 = 0, $str_i_i361 = 0, $str_i1_i336 = 0, $str_i_i337 = 0, $str_i1_i = 0, $str_i_i = 0, $str_i321 = 0, $str_i306 = 0, $str_i291 = 0, $str_i276 = 0, $str_i261 = 0, $str_i246 = 0, $str_i231 = 0, $str_i216 = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $software = 0, $cfa_pat = 0, $cfa_pc = 0, $tmpcast = 0, $tab = 0, $cc = 0, $cm = 0, $cam_xyz = 0, $ab = 0, $asn = 0, $xyz = 0, $sony_curve = 0, $jh = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx7 = 0, $arrayidx7_1_1 = 0, $6 = 0, $arrayidx7_2_2 = 0, $7 = 0, $arrayidx7_3_3 = 0, $8 = 0, $12 = 0, $conv2_i_i = 0, $14 = 0, $retval_0_in_i_i = 0, $conv12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $wide = 0, $high = 0, $bits = 0, $clrs = 0, $sraw = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $arraydecay = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $arraydecay369 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $arrayidx853 = 0, $arrayidx855 = 0, $arrayidx860 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $dec1444_in = 0, $sony_key_01443 = 0, $sony_length_01442 = 0, $sony_offset_01441 = 0, $plen_01440 = 0, $blrc_01439 = 0, $blrr_01438 = 0, $ima_len_01437 = 0, $use_cm_01436 = 0, $ifd_01435 = 0, $dec1444 = 0, $90 = 0, $94 = 0, $conv2_i_i652 = 0, $96 = 0, $99 = 0, $conv2_i_i730 = 0, $101 = 0, $104 = 0, $conv2_i_i745 = 0, $106 = 0, $109 = 0, $conv2_i_i781 = 0, $111 = 0, $shl650 = 0, $add652 = 0, $add652_1 = 0, $add652_2 = 0, $120 = 0, $126 = 0, $conv2_i_i220 = 0, $128 = 0, $retval_0_in_i_i228 = 0, $132 = 0, $conv2_i_i235 = 0, $134 = 0, $retval_0_in_i_i243 = 0, $138 = 0, $conv2_i_i250 = 0, $140 = 0, $retval_0_in_i_i258 = 0, $145 = 0, $conv2_i_i265 = 0, $147 = 0, $retval_0_in_i_i273 = 0, $153 = 0, $conv2_i_i280 = 0, $155 = 0, $retval_0_in_i_i288 = 0, $160 = 0, $conv2_i_i295 = 0, $162 = 0, $retval_0_in_i_i303 = 0, $166 = 0, $conv2_i_i310 = 0, $168 = 0, $retval_0_in_i_i318 = 0, $175 = 0, $conv2_i_i325 = 0, $177 = 0, $retval_0_in_i_i333 = 0, $181 = 0, $conv2_i_i325_1 = 0, $183 = 0, $190 = 0, $192 = 0, $conv2_i_i_i = 0, $194 = 0, $retval_0_in_i_i_i = 0, $198 = 0, $cond_i = 0, $200 = 0, $202 = 0, $conv2_i_i_i341 = 0, $204 = 0, $retval_0_in_i_i_i350 = 0, $208 = 0, $cond_i358 = 0, $211 = 0, $213 = 0, $conv2_i_i_i365 = 0, $215 = 0, $retval_0_in_i_i_i374 = 0, $219 = 0, $cond_i382 = 0, $222 = 0, $retval_0_i_i392 = 0, $223 = 0, $225 = 0, $227 = 0, $conv2_i_i_i398 = 0, $229 = 0, $retval_0_in_i_i_i407 = 0, $233 = 0, $cond_i415 = 0, $236 = 0, $conv2_i_i421 = 0, $238 = 0, $retval_0_in_i_i429 = 0, $246 = 0, $retval_0_i_i451 = 0, $add119 = 0, $offset = 0, $bps122 = 0, $249 = 0, $width139 = 0, $252 = 0, $254 = 0, $258 = 0, $conv2_i_i457 = 0, $260 = 0, $retval_0_in_i_i465 = 0, $264 = 0, $266 = 0, $conv2_i_i_i473 = 0, $268 = 0, $retval_0_in_i_i_i482 = 0, $272 = 0, $cond_i490 = 0, $275 = 0, $retval_0_i_i511 = 0, $276 = 0, $278 = 0, $conv2_i_i_i518 = 0, $280 = 0, $retval_0_in_i_i_i527 = 0, $284 = 0, $cond_i535 = 0, $289 = 0, $291 = 0, $conv2_i_i_i542 = 0, $293 = 0, $retval_0_in_i_i_i551 = 0, $297 = 0, $cond_i559 = 0, $299 = 0, $301 = 0, $conv2_i_i_i566 = 0, $303 = 0, $retval_0_in_i_i_i575 = 0, $307 = 0, $cond_i583 = 0, $310 = 0, $312 = 0, $cond234 = 0, $314 = 0, $318 = 0, $retval_0_i_i625 = 0, $call258 = 0, $320 = 0, $322 = 0, $retval_0_i_i646 = 0, $324 = 0, $$etemp$1 = 0, $st$2$0 = 0, $st$3$1 = 0, $retval_0_in_i_i660 = 0, $and277 = 0, $328 = 0, $conv2_i_i652_1 = 0, $330 = 0, $j_11419_1 = 0, $331 = 0, $j_11422 = 0, $add298 = 0, $j_1 = 0, $334 = 0, $337 = 0, $340 = 0, $retval_0_in_i_i738 = 0, $345 = 0, $conv2_i_i730_1 = 0, $347 = 0, $retval_0_in_i_i753 = 0, $351 = 0, $conv2_i_i745_1 = 0, $353 = 0, $355 = 0, $shl345 = 0, $arrayidx346 = 0, $arrayidx348 = 0, $357 = 0.0, $add349 = 0.0, $sub354 = 0.0, $359 = 0, $_ = 0, $362 = 0, $add3801407 = 0, $i_21405 = 0, $cfa_01404 = 0, $shl377 = 0, $add380 = 0, $or = 0, $inc385 = 0, $364 = 0, $366 = 0, $retval_0_i_i775 = 0, $retval_0_in_i_i789 = 0, $372 = 0, $conv2_i_i781_1 = 0, $374 = 0, $i_31399 = 0, $arrayidx438 = 0, $arrayidx438_1 = 0, $arrayidx438_2 = 0, $arrayidx438_3 = 0, $conv452 = 0.0, $conv452_1 = 0.0, $conv452_2 = 0.0, $conv452_3 = 0.0, $add453_3 = 0.0, $inc470 = 0, $386 = 0, $388 = 0, $retval_0_i_i811 = 0, $389 = 0, $391 = 0, $retval_0_i_i832 = 0, $396 = 0, $retval_0_i_i853 = 0, $399 = 0, $401 = 0, $conv2_i_i_i860 = 0, $403 = 0, $retval_0_in_i_i_i869 = 0, $407 = 0, $cond_i877 = 0, $426 = 0, $retval_0_i_i898 = 0, $429 = 0, $retval_0_i_i919 = 0, $432 = 0, $retval_0_i_i940 = 0, $conv529 = 0, $sub532 = 0, $436 = 0, $retval_0_i_i961 = 0, $439 = 0, $retval_0_i_i982 = 0, $conv539 = 0, $sub542 = 0, $443 = 0, $retval_0_i_i1003 = 0, $448 = 0, $retval_0_i_i151_i = 0, $452 = 0, $retval_0_in_i_i1018 = 0, $mul567 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $div596 = 0, $call607 = 0, $add_ptr = 0, $cp_01389 = 0, $incdec_ptr = 0, $add_ptr624 = 0, $call628 = 0, $467 = 0, $call637 = 0, $469 = 0, $472 = 0, $conv2_i_i1025 = 0, $474 = 0, $retval_0_in_i_i1033 = 0, $476 = 0, $479 = 0, $retval_0_i_i1070 = 0, $480 = 0, $481 = 0, $483 = 0, $plen_2 = 0, $484 = 0, $c_121409 = 0, $inc675 = 0, $plen_21503 = 0, $c_12_lcssa = 0, $or6881413 = 0, $dec6791412 = 0, $or688 = 0, $490 = 0, $conv2_i_i1076 = 0, $492 = 0, $retval_0_in_i_i1084 = 0, $494 = 0, $_len_i = 0, $cmp1_i_i = 0, $i_07_i = 0, $inc_i = 0, $501 = 0, $conv2_i_i1096 = 0, $503 = 0, $retval_0_in_i_i1104 = 0, $507 = 0, $conv2_i_i1111 = 0, $509 = 0, $retval_0_in_i_i1119 = 0, $blrr_1 = 0, $blrc_1 = 0, $conv706 = 0, $512 = 0, $cmp713 = 0, $cond721 = 0.0, $conv722 = 0, $conv733 = 0, $516 = 0, $517 = 0, $cond746 = 0.0, $519 = 0, $or759 = 0, $520 = 0, $num_11384 = 0.0, $i_61383 = 0, $add779 = 0.0, $inc781 = 0, $522 = 0, $_lcssa = 0.0, $num_1_lcssa = 0.0, $525 = 0, $527 = 0, $conv2_i_i_i1127 = 0, $529 = 0, $retval_0_in_i_i_i1136 = 0, $533 = 0, $cond_i1144 = 0, $call792 = 0.0, $call793 = 0.0, $div794 = 0.0, $c_141381 = 0, $call804 = 0.0, $arrayidx806 = 0, $call804_1 = 0.0, $arrayidx806_1 = 0, $call804_2 = 0.0, $arrayidx806_2 = 0, $inc811 = 0, $541 = 0, $i_71376 = 0, $c_151373 = 0, $call822 = 0.0, $arrayidx824 = 0, $inc826 = 0, $543 = 0, $544 = 0, $inc829 = 0, $c_161371 = 0, $call836 = 0.0, $arrayidx837 = 0, $inc839 = 0, $c_171368 = 0, $call846 = 0.0, $arrayidx847 = 0, $inc849 = 0, $call852 = 0.0, $call854 = 0.0, $sub859 = 0.0, $div868 = 0.0, $div868_2 = 0.0, $554 = 0, $retval_0_i_i1165 = 0, $add877 = 0, $cmp1_i1169 = 0, $559 = 0, $561 = 0, $conv2_i_i_i1175 = 0, $563 = 0, $retval_0_in_i_i_i1184 = 0, $567 = 0, $cond_i1192 = 0, $569 = 0, $571 = 0, $conv2_i_i_i1199 = 0, $573 = 0, $retval_0_in_i_i_i1208 = 0, $577 = 0, $cond_i1216 = 0, $579 = 0, $581 = 0, $conv2_i_i_i1223 = 0, $583 = 0, $retval_0_in_i_i_i1232 = 0, $587 = 0, $cond_i1240 = 0, $590 = 0, $592 = 0, $conv2_i_i_i1247 = 0, $594 = 0, $retval_0_in_i_i_i1256 = 0, $598 = 0, $cond_i1264 = 0, $i_81364 = 0, $601 = 0, $603 = 0, $conv2_i_i_i1271 = 0, $605 = 0, $retval_0_in_i_i_i1280 = 0, $609 = 0, $cond_i1288 = 0, $inc907 = 0, $616 = 0, $retval_0_i_i1309 = 0, $620 = 0, $retval_0_i_i1330 = 0, $ifd_1 = 0, $use_cm_1 = 0, $ima_len_1 = 0, $blrr_2 = 0, $blrc_2 = 0, $plen_3 = 0, $sony_offset_1 = 0, $sony_length_1 = 0, $sony_key_1 = 0, $call931 = 0, $629 = 0, $call937 = 0, $630 = 0, $sub942 = 0, $631 = 0, $use_cm_0_lcssa1505 = 0, $632 = 0, $cmp9481359 = 0, $i_91360 = 0, $arrayidx955 = 0, $633 = 0.0, $c_191358 = 0, $arrayidx957 = 0, $mul958 = 0.0, $inc960 = 0, $inc963 = 0, $tobool965 = 0, $c_201356 = 0, $arrayidx976 = 0, $arrayidx986 = 0, $635 = 0.0, $add9901352 = 0.0, $j_31351 = 0, $arrayidx982 = 0, $636 = 0.0, $arrayidx984 = 0, $add990 = 0.0, $inc992 = 0, $arrayidx1002 = 0, $638 = 0.0, $639 = 0, $640 = 0.0, $c_211349 = 0, $inc1014 = 0, $arrayidx1009_phi_trans_insert = 0, $641 = 0, $c_221347 = 0, $arrayidx1024 = 0, $arrayidx1025 = 0, $inc1030 = 0, $retval_0 = 0, $arrayidx976_1 = 0, $arrayidx986_1 = 0, $644 = 0.0, $add9901352_1 = 0.0, $j_31351_1 = 0, $arrayidx982_1 = 0, $645 = 0.0, $arrayidx984_1 = 0, $add990_1 = 0.0, $inc992_1 = 0, $arrayidx976_2 = 0, $arrayidx986_2 = 0, $647 = 0.0, $add9901352_2 = 0.0, $j_31351_2 = 0, $arrayidx982_2 = 0, $648 = 0.0, $arrayidx984_2 = 0, $add990_2 = 0.0, $inc992_2 = 0, $inc998 = 0, $retval_0_i_i151_i_1 = 0, $653 = 0, $retval_0_i_i151_i_2 = 0, $658 = 0, $conv2_i_i1010 = 0, $660 = 0, $retval_0_in_i_i789_1 = 0, $664 = 0, $conv2_i_i781_2 = 0, $666 = 0, $retval_0_in_i_i789_2 = 0, $670 = 0, $conv2_i_i781_3 = 0, $672 = 0, $retval_0_in_i_i789_3 = 0, $retval_0_in_i_i753_1 = 0, $677 = 0, $conv2_i_i745_2 = 0, $679 = 0, $retval_0_in_i_i753_2 = 0, $683 = 0, $conv2_i_i745_3 = 0, $685 = 0, $retval_0_in_i_i753_3 = 0, $retval_0_in_i_i738_1 = 0, $691 = 0, $conv2_i_i730_2 = 0, $693 = 0, $retval_0_in_i_i738_2 = 0, $697 = 0, $conv2_i_i730_3 = 0, $699 = 0, $retval_0_in_i_i738_3 = 0, $retval_0_in_i_i660_1 = 0, $and277_1 = 0, $704 = 0, $conv2_i_i652_2 = 0, $706 = 0, $retval_0_in_i_i660_2 = 0, $and277_2 = 0, $710 = 0, $conv2_i_i652_3 = 0, $712 = 0, $retval_0_in_i_i660_3 = 0, $and277_3 = 0, $714 = 0, $j_11419 = 0, $715 = 0, $j_11422_1 = 0, $add298_1 = 0, $j_1_1 = 0, $j_11419_2 = 0, $716 = 0, $j_11422_2 = 0, $add298_2 = 0, $j_1_2 = 0, $j_11419_3 = 0, $717 = 0, $j_11422_3 = 0, $add298_3 = 0, $j_1_3 = 0, $j_11419_4 = 0, $718 = 0, $719 = 0, $j_11422_4 = 0, $add298_4 = 0, $j_1_4 = 0, $722 = 0, $723 = 0, $725 = 0, $conv2_i_i_i518_1 = 0, $727 = 0, $retval_0_in_i_i_i527_1 = 0, $cond_i535_1 = 0, $732 = 0, $733 = 0, $735 = 0, $conv2_i_i_i518_2 = 0, $737 = 0, $retval_0_in_i_i_i527_2 = 0, $cond_i535_2 = 0, $retval_0_in_i_i333_1 = 0, $742 = 0, $conv2_i_i325_2 = 0, $744 = 0, $retval_0_in_i_i333_2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 400 | 0;
  $str_i1311 = __stackBase__ | 0;
  $str_i1290 = __stackBase__ + 4 | 0;
  $str_i1_i1266 = __stackBase__ + 8 | 0;
  $str_i_i1267 = __stackBase__ + 12 | 0;
  $str_i1_i1242 = __stackBase__ + 16 | 0;
  $str_i_i1243 = __stackBase__ + 20 | 0;
  $str_i1_i1218 = __stackBase__ + 24 | 0;
  $str_i_i1219 = __stackBase__ + 28 | 0;
  $str_i1_i1194 = __stackBase__ + 32 | 0;
  $str_i_i1195 = __stackBase__ + 36 | 0;
  $str_i1_i1170 = __stackBase__ + 40 | 0;
  $str_i_i1171 = __stackBase__ + 44 | 0;
  $str_i1146 = __stackBase__ + 48 | 0;
  $str_i1_i1122 = __stackBase__ + 52 | 0;
  $str_i_i1123 = __stackBase__ + 56 | 0;
  $str_i1107 = __stackBase__ + 60 | 0;
  $str_i1092 = __stackBase__ + 64 | 0;
  $str_i1072 = __stackBase__ + 68 | 0;
  $str_i1051 = __stackBase__ + 72 | 0;
  $str_i1036 = __stackBase__ + 76 | 0;
  $str_i1021 = __stackBase__ + 80 | 0;
  $str_i1006 = __stackBase__ + 84 | 0;
  $str_i132_i = __stackBase__ + 88 | 0;
  $str_i984 = __stackBase__ + 92 | 0;
  $str_i963 = __stackBase__ + 96 | 0;
  $str_i942 = __stackBase__ + 100 | 0;
  $str_i921 = __stackBase__ + 104 | 0;
  $str_i900 = __stackBase__ + 108 | 0;
  $str_i879 = __stackBase__ + 112 | 0;
  $str_i1_i855 = __stackBase__ + 116 | 0;
  $str_i_i856 = __stackBase__ + 120 | 0;
  $str_i834 = __stackBase__ + 124 | 0;
  $str_i813 = __stackBase__ + 128 | 0;
  $str_i792 = __stackBase__ + 132 | 0;
  $str_i777 = __stackBase__ + 136 | 0;
  $str_i756 = __stackBase__ + 140 | 0;
  $str_i741 = __stackBase__ + 144 | 0;
  $str_i726 = __stackBase__ + 148 | 0;
  $str_i705 = __stackBase__ + 152 | 0;
  $str_i684 = __stackBase__ + 156 | 0;
  $str_i663 = __stackBase__ + 160 | 0;
  $str_i648 = __stackBase__ + 164 | 0;
  $str_i627 = __stackBase__ + 168 | 0;
  $str_i606 = __stackBase__ + 172 | 0;
  $str_i585 = __stackBase__ + 176 | 0;
  $str_i1_i561 = __stackBase__ + 180 | 0;
  $str_i_i562 = __stackBase__ + 184 | 0;
  $str_i1_i537 = __stackBase__ + 188 | 0;
  $str_i_i538 = __stackBase__ + 192 | 0;
  $str_i1_i513 = __stackBase__ + 196 | 0;
  $str_i_i514 = __stackBase__ + 200 | 0;
  $str_i492 = __stackBase__ + 204 | 0;
  $str_i1_i468 = __stackBase__ + 208 | 0;
  $str_i_i469 = __stackBase__ + 212 | 0;
  $str_i453 = __stackBase__ + 216 | 0;
  $str_i432 = __stackBase__ + 220 | 0;
  $str_i417 = __stackBase__ + 224 | 0;
  $str_i1_i393 = __stackBase__ + 228 | 0;
  $str_i_i394 = __stackBase__ + 232 | 0;
  $str_i384 = __stackBase__ + 236 | 0;
  $str_i1_i360 = __stackBase__ + 240 | 0;
  $str_i_i361 = __stackBase__ + 244 | 0;
  $str_i1_i336 = __stackBase__ + 248 | 0;
  $str_i_i337 = __stackBase__ + 252 | 0;
  $str_i1_i = __stackBase__ + 256 | 0;
  $str_i_i = __stackBase__ + 260 | 0;
  $str_i321 = __stackBase__ + 264 | 0;
  $str_i306 = __stackBase__ + 268 | 0;
  $str_i291 = __stackBase__ + 272 | 0;
  $str_i276 = __stackBase__ + 276 | 0;
  $str_i261 = __stackBase__ + 280 | 0;
  $str_i246 = __stackBase__ + 284 | 0;
  $str_i231 = __stackBase__ + 288 | 0;
  $str_i216 = __stackBase__ + 292 | 0;
  $str_i = __stackBase__ + 296 | 0;
  $tag = __stackBase__ + 300 | 0;
  $type = __stackBase__ + 304 | 0;
  $len = __stackBase__ + 308 | 0;
  $save = __stackBase__ + 312 | 0;
  $software = __stackBase__ + 316 | 0;
  $cfa_pat = __stackBase__ + 380 | 0;
  $cfa_pc = __stackBase__ + 396 | 0;
  $tmpcast = $cfa_pc;
  $tab = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  $cc = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  $cm = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $cam_xyz = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $ab = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $asn = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $xyz = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $sony_curve = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $jh = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $0 = $cfa_pc;
  HEAP32[$cfa_pc >> 2] = 50462976;
  _memcpy($ab, 5245860, 32);
  $2 = $asn;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $3 = $xyz;
  HEAP32[$3 >> 2] = HEAP32[1311453] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[1311454] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[1311455] | 0;
  HEAP32[$3 + 12 >> 2] = HEAP32[1311456] | 0;
  HEAP32[$3 + 16 >> 2] = HEAP32[1311457] | 0;
  HEAP32[$3 + 20 >> 2] = HEAP32[1311458] | 0;
  $4 = $sony_curve;
  HEAP32[$4 >> 2] = HEAP32[1311459] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[1311460] | 0;
  HEAP32[$4 + 8 >> 2] = HEAP32[1311461] | 0;
  HEAP32[$4 + 12 >> 2] = HEAP32[1311462] | 0;
  HEAP32[$4 + 16 >> 2] = HEAP32[1311463] | 0;
  HEAP32[$4 + 20 >> 2] = HEAP32[1311464] | 0;
  $5 = HEAP32[1310898] | 0;
  if ($5 >>> 0 > 9) {
    $retval_0 = 1;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  HEAP32[1310898] = $5 + 1 | 0;
  $arrayidx7 = $cc | 0;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[$arrayidx7 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $arrayidx7_1_1 = $cc + 40 | 0;
  $6 = $cc + 8 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = 0;
  HEAP32[$6 + 16 >> 2] = 0;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[$arrayidx7_1_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx7_1_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $arrayidx7_2_2 = $cc + 80 | 0;
  $7 = $cc + 48 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  HEAP32[$7 + 12 >> 2] = 0;
  HEAP32[$7 + 16 >> 2] = 0;
  HEAP32[$7 + 20 >> 2] = 0;
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[$arrayidx7_2_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx7_2_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $arrayidx7_3_3 = $cc + 120 | 0;
  $8 = $cc + 88 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  HEAP32[$8 + 16 >> 2] = 0;
  HEAP32[$8 + 20 >> 2] = 0;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[$arrayidx7_3_3 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx7_3_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $12 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $12 & 255;
  $14 = ($12 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($14 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $14 & 65535;
  }
  $conv12 = $retval_0_in_i_i & 65535;
  if (($retval_0_in_i_i & 65535) > 512) {
    $retval_0 = 1;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  do {
    if (($conv12 | 0) == 0) {
      $use_cm_0_lcssa1505 = 0;
    } else {
      $16 = $str_i216;
      $17 = $str_i231;
      $18 = $str_i246;
      $19 = $str_i261;
      $20 = $str_i276;
      $21 = $str_i291;
      $22 = $str_i306;
      $23 = $str_i321;
      $24 = $str_i_i;
      $25 = $str_i1_i;
      $26 = $str_i_i337;
      $27 = $str_i1_i336;
      $28 = $str_i_i361;
      $29 = $str_i1_i360;
      $30 = $str_i384;
      $31 = $str_i_i394;
      $32 = $str_i1_i393;
      $33 = $str_i417;
      $34 = $str_i432;
      $wide = $jh + 8 | 0;
      $high = $jh + 4 | 0;
      $bits = $jh | 0;
      $clrs = $jh + 12 | 0;
      $sraw = $jh + 16 | 0;
      $35 = $str_i453;
      $36 = $str_i_i469;
      $37 = $str_i1_i468;
      $38 = $str_i492;
      $arraydecay = $software | 0;
      $39 = $str_i_i538;
      $40 = $str_i1_i537;
      $41 = $str_i_i562;
      $42 = $str_i1_i561;
      $43 = $str_i585;
      $44 = $str_i606;
      $45 = $str_i627;
      $46 = $str_i663;
      $47 = $str_i684;
      $48 = $str_i705;
      $arraydecay369 = $cfa_pat | 0;
      $49 = $str_i756;
      $50 = $str_i792;
      $51 = $str_i813;
      $52 = $str_i834;
      $53 = $str_i_i856;
      $54 = $str_i1_i855;
      $55 = $str_i879;
      $56 = $str_i900;
      $57 = $str_i921;
      $58 = $str_i942;
      $59 = $str_i963;
      $60 = $str_i984;
      $61 = $str_i132_i;
      $62 = $str_i1006;
      $63 = $str_i1021;
      $64 = $str_i1036;
      $65 = $str_i1051;
      $66 = $str_i1072;
      $67 = $str_i1092;
      $68 = $str_i1107;
      $69 = $str_i_i1123;
      $70 = $str_i1_i1122;
      $arrayidx853 = $xyz | 0;
      $arrayidx855 = $xyz + 8 | 0;
      $arrayidx860 = $xyz + 16 | 0;
      $71 = $str_i1146;
      $72 = $str_i_i1171;
      $73 = $str_i_i1195;
      $74 = $str_i_i1219;
      $75 = $str_i_i1243;
      $76 = $str_i1_i1242;
      $77 = $str_i1_i1218;
      $78 = $str_i1_i1194;
      $79 = $str_i1_i1170;
      $80 = $str_i1290;
      $81 = $str_i1311;
      $82 = $str_i_i1267;
      $83 = $str_i1_i1266;
      $84 = $str_i777;
      $85 = $str_i741;
      $86 = $str_i726;
      $87 = $str_i648;
      $88 = $str_i_i514;
      $89 = $str_i1_i513;
      $ifd_01435 = $5;
      $use_cm_01436 = 0;
      $ima_len_01437 = 0;
      $blrr_01438 = 1;
      $blrc_01439 = 1;
      $plen_01440 = 16;
      $sony_offset_01441 = 0;
      $sony_length_01442 = 0;
      $sony_key_01443 = 0;
      $dec1444_in = $conv12;
      while (1) {
        $dec1444 = $dec1444_in - 1 | 0;
        _tiff_get($base, $tag, $type, $len, $save);
        $90 = HEAP32[$tag >> 2] | 0;
        L636 : do {
          if (($90 | 0) == 51009) {
            HEAP32[1315884] = _ftell(HEAP32[1316053] | 0) | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 64772) {
            if ((HEAP32[$len >> 2] | 0) >>> 0 < 13) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fseek(HEAP32[1316053] | 0, 16, 1);
            HEAP32[$str_i1290 >> 2] = -1;
            _fread($80 | 0, 1, 4, HEAP32[1316053] | 0);
            $616 = HEAP32[$str_i1290 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i1309 = $616;
            } else {
              $retval_0_i_i1309 = _llvm_bswap_i32($616 | 0) | 0;
            }
            HEAP32[1357153] = $retval_0_i_i1309;
            _fseek(HEAP32[1316053] | 0, 28, 1);
            HEAP32[$str_i1311 >> 2] = -1;
            _fread($81 | 0, 1, 4, HEAP32[1316053] | 0);
            $620 = HEAP32[$str_i1311 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i1330 = $620;
            } else {
              $retval_0_i_i1330 = _llvm_bswap_i32($620 | 0) | 0;
            }
            HEAP32[1357153] = (HEAP32[1357153] | 0) + $retval_0_i_i1330 | 0;
            HEAP32[1315947] = 36;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 65026) {
            if ((HEAP32[$type >> 2] | 0) != 2) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fgets(5263404, 64, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50715 | ($90 | 0) == 50716) {
            if ((HEAP32[$len >> 2] | 0) == 0) {
              $num_1_lcssa = 0.0;
              $_lcssa = 0.0;
            } else {
              $i_61383 = 0;
              $num_11384 = 0.0;
              while (1) {
                $add779 = $num_11384 + +_getreal(HEAP32[$type >> 2] | 0);
                $inc781 = $i_61383 + 1 | 0;
                $522 = HEAP32[$len >> 2] | 0;
                if ($inc781 >>> 0 < $522 >>> 0) {
                  $i_61383 = $inc781;
                  $num_11384 = $add779;
                } else {
                  break;
                }
              }
              $num_1_lcssa = $add779;
              $_lcssa = +($522 >>> 0 >>> 0);
            }
            HEAP32[1390380] = ~~($num_1_lcssa / $_lcssa + .5 + +((HEAP32[1390380] | 0) >>> 0 >>> 0));
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50706) {
            $shl650 = HEAP32[1357024] << 8;
            $add652 = (_fgetc(HEAP32[1316053] | 0) | 0) + $shl650 | 0;
            HEAP32[1357024] = $add652;
            $add652_1 = (_fgetc(HEAP32[1316053] | 0) | 0) + ($add652 << 8) | 0;
            HEAP32[1357024] = $add652_1;
            $add652_2 = (_fgetc(HEAP32[1316053] | 0) | 0) + ($add652_1 << 8) | 0;
            HEAP32[1357024] = $add652_2;
            HEAP32[1357024] = (_fgetc(HEAP32[1316053] | 0) | 0) + ($add652_2 << 8) | 0;
            if (HEAP8[5263724] << 24 >> 24 == 0) {
              tempBigInt = 4673092;
              HEAP8[5263724] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[5263725] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[5263726] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[5263727] = tempBigInt & 255;
            }
            HEAP32[1316049] = 1;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 33405) {
            _fgets(5263404, 64, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 33422 | ($90 | 0) == 64777) {
            $359 = HEAP32[$len >> 2] | 0;
            $_ = $359 >>> 0 > 16 ? 16 : $359;
            _fread($arraydecay369 | 0, 1, $_ | 0, HEAP32[1316053] | 0);
            HEAP32[1390240] = 0;
            if (($_ | 0) == 0) {
              $c_12_lcssa = 0;
              $plen_21503 = 0;
              label = 743;
              break;
            }
            $362 = $359 >>> 0 < 16 ? $359 : 16;
            $cfa_01404 = 0;
            $i_21405 = 0;
            $add3801407 = 0;
            while (1) {
              $shl377 = 1 << (HEAPU8[$cfa_pat + $i_21405 | 0] | 0);
              $add380 = (($shl377 & $cfa_01404 | 0) == 0 & 1) + $add3801407 | 0;
              $or = $shl377 | $cfa_01404;
              $inc385 = $i_21405 + 1 | 0;
              if (($inc385 | 0) == ($362 | 0)) {
                break;
              } else {
                $cfa_01404 = $or;
                $i_21405 = $inc385;
                $add3801407 = $add380;
              }
            }
            HEAP32[1390240] = $add380;
            if (($or | 0) == 56) {
              HEAP8[$0] = HEAP8[5586868] | 0;
              HEAP8[$0 + 1 | 0] = HEAP8[5586869 | 0] | 0;
              HEAP8[$0 + 2 | 0] = HEAP8[5586870 | 0] | 0;
              $plen_2 = $_;
              $483 = $add380;
              label = 739;
              break;
            } else if (($or | 0) == 58) {
              HEAP32[$cfa_pc >> 2] = 17040133;
              $plen_2 = $_;
              $483 = $add380;
              label = 739;
              break;
            } else {
              $plen_2 = $_;
              $483 = $add380;
              label = 739;
              break;
            }
          } else if (($90 | 0) == 33424 | ($90 | 0) == 65024) {
            $364 = HEAP32[1316053] | 0;
            HEAP32[$str_i756 >> 2] = -1;
            _fread($49 | 0, 1, 4, $364 | 0);
            $366 = HEAP32[$str_i756 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i775 = $366;
            } else {
              $retval_0_i_i775 = _llvm_bswap_i32($366 | 0) | 0;
            }
            _fseek($364 | 0, $retval_0_i_i775 + $base | 0, 0);
            _parse_kodak_ifd($base);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 33434) {
            HEAPF32[1311229] = +_getreal(HEAP32[$type >> 2] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 33437) {
            HEAPF32[1390397] = +_getreal(HEAP32[$type >> 2] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 34307) {
            _fread($arraydecay | 0, 1, 7, HEAP32[1316053] | 0);
            if ((_strncmp($arraydecay | 0, 5586860, 6) | 0) != 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[1390240] = 4;
            HEAP32[1311252] = 0;
            $i_31399 = 0;
            while (1) {
              $arrayidx438 = 5244936 + ($i_31399 << 4) | 0;
              _fscanf(HEAP32[1316053] | 0, 5587140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438, tempInt) | 0);
              $arrayidx438_1 = 5244932 + ($i_31399 << 4) | 0;
              _fscanf(HEAP32[1316053] | 0, 5587140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_1, tempInt) | 0);
              $arrayidx438_2 = 5244944 + ($i_31399 << 4) | 0;
              _fscanf(HEAP32[1316053] | 0, 5587140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_2, tempInt) | 0);
              $arrayidx438_3 = 5244940 + ($i_31399 << 4) | 0;
              _fscanf(HEAP32[1316053] | 0, 5587140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_3, tempInt) | 0);
              if ((HEAP32[1310889] | 0) != 0) {
                $conv452 = +HEAPF32[$arrayidx438_1 >> 2];
                $conv452_1 = +HEAPF32[$arrayidx438 >> 2];
                $conv452_2 = +HEAPF32[$arrayidx438_3 >> 2];
                $conv452_3 = +HEAPF32[$arrayidx438_2 >> 2];
                $add453_3 = $conv452 + 0.0 + $conv452_1 + $conv452_2 + $conv452_3;
                HEAPF32[$arrayidx438_1 >> 2] = $conv452 / $add453_3;
                HEAPF32[$arrayidx438 >> 2] = $conv452_1 / $add453_3;
                HEAPF32[$arrayidx438_3 >> 2] = $conv452_2 / $add453_3;
                HEAPF32[$arrayidx438_2 >> 2] = $conv452_3 / $add453_3;
              }
              $inc470 = $i_31399 + 1 | 0;
              if (($inc470 | 0) == 3) {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              } else {
                $i_31399 = $inc470;
              }
            }
          } else if (($90 | 0) == 34310) {
            _parse_mos(_ftell(HEAP32[1316053] | 0) | 0);
            label = 667;
            break;
          } else if (($90 | 0) == 34303) {
            label = 667;
          } else if (($90 | 0) == 34665) {
            $386 = HEAP32[1316053] | 0;
            HEAP32[$str_i792 >> 2] = -1;
            _fread($50 | 0, 1, 4, $386 | 0);
            $388 = HEAP32[$str_i792 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i811 = $388;
            } else {
              $retval_0_i_i811 = _llvm_bswap_i32($388 | 0) | 0;
            }
            _fseek($386 | 0, $retval_0_i_i811 + $base | 0, 0);
            _parse_exif($base);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 34853) {
            $389 = HEAP32[1316053] | 0;
            HEAP32[$str_i813 >> 2] = -1;
            _fread($51 | 0, 1, 4, $389 | 0);
            $391 = HEAP32[$str_i813 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i832 = $391;
            } else {
              $retval_0_i_i832 = _llvm_bswap_i32($391 | 0) | 0;
            }
            _fseek($389 | 0, $retval_0_i_i832 + $base | 0, 0);
            _parse_gps($base);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 34675 | ($90 | 0) == 50831) {
            HEAP32[1311401] = _ftell(HEAP32[1316053] | 0) | 0;
            HEAP32[1311402] = HEAP32[$len >> 2] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 37122) {
            HEAP32[$str_i834 >> 2] = -1;
            _fread($52 | 0, 1, 4, HEAP32[1316053] | 0);
            $396 = HEAP32[$str_i834 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i853 = $396;
            } else {
              $retval_0_i_i853 = _llvm_bswap_i32($396 | 0) | 0;
            }
            HEAP32[1316033] = $retval_0_i_i853;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 37386) {
            HEAPF32[1350791] = +_getreal(HEAP32[$type >> 2] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 37393) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i856 >> 1] = -1;
                $399 = HEAP32[1316053] | 0;
                _fread($53 | 0, 1, 2, $399 | 0);
                $401 = HEAP16[$str_i_i856 >> 1] | 0;
                $conv2_i_i_i860 = $401 & 255;
                $403 = ($401 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i869 = ($403 & 65535) << 8 | $conv2_i_i_i860;
                } else {
                  $retval_0_in_i_i_i869 = $conv2_i_i_i860 << 8 | $403 & 65535;
                }
                $cond_i877 = $retval_0_in_i_i_i869 & 65535;
              } else {
                HEAP32[$str_i1_i855 >> 2] = -1;
                _fread($54 | 0, 1, 4, HEAP32[1316053] | 0);
                $407 = HEAP32[$str_i1_i855 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i877 = $407;
                  break;
                }
                $cond_i877 = _llvm_bswap_i32($407 | 0) | 0;
              }
            } while (0);
            HEAP32[1311232] = $cond_i877;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 37400) {
            HEAP32[1311252] = 0;
            _getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311233] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311234] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311235] = +_getreal(HEAP32[$type >> 2] | 0);
            _getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311237] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311238] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311239] = +_getreal(HEAP32[$type >> 2] | 0);
            _getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311241] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311242] = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF32[1311243] = +_getreal(HEAP32[$type >> 2] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 46275) {
            HEAP8[5263724] = HEAP8[5586824] | 0;
            HEAP8[5263725 | 0] = HEAP8[5586825 | 0] | 0;
            HEAP8[5263726 | 0] = HEAP8[5586826 | 0] | 0;
            HEAP8[5263727 | 0] = HEAP8[5586827 | 0] | 0;
            HEAP8[5263728 | 0] = HEAP8[5586828 | 0] | 0;
            HEAP8[5263729 | 0] = HEAP8[5586829 | 0] | 0;
            HEAP8[5263730 | 0] = HEAP8[5586830 | 0] | 0;
            HEAP32[1357153] = _ftell(HEAP32[1316053] | 0) | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = HEAP32[$len >> 2] | 0;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 46279) {
            if (($ima_len_01437 | 0) == 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = 0;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fseek(HEAP32[1316053] | 0, 38, 1);
            label = 691;
            break;
          } else if (($90 | 0) == 46274) {
            label = 691;
          } else if (($90 | 0) == 50454 | ($90 | 0) == 50455) {
            $call607 = _malloc(HEAP32[$len >> 2] | 0) | 0;
            if (($call607 | 0) == 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fread($call607 | 0, 1, HEAP32[$len >> 2] | 0, HEAP32[1316053] | 0);
            $add_ptr = $call607 - 1 | 0;
            L711 : do {
              if (($add_ptr | 0) != 0) {
                $cp_01389 = $add_ptr;
                while (1) {
                  if ($cp_01389 >>> 0 >= ($call607 + (HEAP32[$len >> 2] | 0) | 0) >>> 0) {
                    break L711;
                  }
                  $incdec_ptr = $cp_01389 + 1 | 0;
                  if ((_strncmp($incdec_ptr | 0, 5586796, 8) | 0) == 0) {
                    $add_ptr624 = $cp_01389 + 9 | 0;
                    _sscanf($add_ptr624 | 0, 5586784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5561244, HEAP32[tempInt + 4 >> 2] = 5561248, HEAP32[tempInt + 8 >> 2] = 5561252, tempInt) | 0);
                  }
                  $call628 = _strchr($incdec_ptr | 0, 10) | 0;
                  if (($call628 | 0) == 0) {
                    break L711;
                  } else {
                    $cp_01389 = $call628;
                  }
                }
              }
            } while (0);
            _free($call607);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50458) {
            if (HEAP8[5263724] << 24 >> 24 != 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _memcpy(5263724, 5586772, 11);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50459) {
            $467 = HEAP16[2631518] | 0;
            $call637 = _ftell(HEAP32[1316053] | 0) | 0;
            $469 = HEAP32[1310898] | 0;
            HEAP16[$str_i1021 >> 1] = -1;
            _fread($63 | 0, 1, 2, HEAP32[1316053] | 0);
            $472 = HEAP16[$str_i1021 >> 1] | 0;
            $conv2_i_i1025 = $472 & 255;
            $474 = ($472 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i1033 = ($474 & 65535) << 8 | $conv2_i_i1025;
            } else {
              $retval_0_in_i_i1033 = $conv2_i_i1025 << 8 | $474 & 65535;
            }
            HEAP16[2631518] = $retval_0_in_i_i1033 & 65535;
            $476 = HEAP32[1316053] | 0;
            HEAP16[$str_i1036 >> 1] = -1;
            _fread($64 | 0, 1, 2, $476 | 0);
            HEAP32[$str_i1051 >> 2] = -1;
            _fread($65 | 0, 1, 4, HEAP32[1316053] | 0);
            $479 = HEAP32[$str_i1051 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i1070 = $479;
            } else {
              $retval_0_i_i1070 = _llvm_bswap_i32($479 | 0) | 0;
            }
            _fseek($476 | 0, $retval_0_i_i1070 + $call637 | 0, 0);
            _parse_tiff_ifd($call637);
            HEAP32[1315898] = 65535;
            HEAP32[1310898] = $469;
            HEAP16[2631518] = $467;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50710) {
            $480 = HEAP32[$len >> 2] | 0;
            if ($480 >>> 0 > 4) {
              HEAP32[$len >> 2] = 4;
              $481 = 4;
            } else {
              $481 = $480;
            }
            HEAP32[1390240] = $481;
            _fread($0 | 0, 1, $481 | 0, HEAP32[1316053] | 0);
            $plen_2 = $plen_01440;
            $483 = HEAP32[1390240] | 0;
            label = 739;
            break;
          } else if (($90 | 0) == 50711) {
            HEAP16[$str_i1072 >> 1] = -1;
            _fread($66 | 0, 1, 2, HEAP32[1316053] | 0);
            $490 = HEAP16[$str_i1072 >> 1] | 0;
            $conv2_i_i1076 = $490 & 255;
            $492 = ($490 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i1084 = ($492 & 65535) << 8 | $conv2_i_i1076;
            } else {
              $retval_0_in_i_i1084 = $conv2_i_i1076 << 8 | $492 & 65535;
            }
            if (($retval_0_in_i_i1084 & 65535) << 16 >> 16 != 2) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP16[2699510] = 1;
            HEAP32[1356938] = 1229539657;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 291 | ($90 | 0) == 50712) {
            $494 = HEAP32[$len >> 2] | 0;
            $_len_i = $494 >>> 0 > 4096 ? 4096 : $494;
            if ((_fread(5428620, 2, $_len_i | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $_len_i >>> 0) {
              _derror();
            }
            $cmp1_i_i = HEAP16[2631518] << 16 >> 16 == 18761;
            if (!($cmp1_i_i ^ (_htons(4660) | 0) == 4660)) {
              _swab(5428620, 5428620, $_len_i << 1 | 0);
            }
            L746 : do {
              if (($_len_i | 0) < 4096) {
                $i_07_i = $_len_i;
                while (1) {
                  HEAP16[5428620 + ($i_07_i << 1) >> 1] = HEAP16[5428620 + ($i_07_i - 1 << 1) >> 1] | 0;
                  $inc_i = $i_07_i + 1 | 0;
                  if (($inc_i | 0) < 4096) {
                    $i_07_i = $inc_i;
                  } else {
                    break L746;
                  }
                }
              }
            } while (0);
            HEAP32[1315898] = HEAPU16[2718405] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50713) {
            HEAP16[$str_i1092 >> 1] = -1;
            _fread($67 | 0, 1, 2, HEAP32[1316053] | 0);
            $501 = HEAP16[$str_i1092 >> 1] | 0;
            $conv2_i_i1096 = $501 & 255;
            $503 = ($501 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i1104 = ($503 & 65535) << 8 | $conv2_i_i1096;
            } else {
              $retval_0_in_i_i1104 = $conv2_i_i1096 << 8 | $503 & 65535;
            }
            HEAP16[$str_i1107 >> 1] = -1;
            _fread($68 | 0, 1, 2, HEAP32[1316053] | 0);
            $507 = HEAP16[$str_i1107 >> 1] | 0;
            $conv2_i_i1111 = $507 & 255;
            $509 = ($507 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i1119 = ($509 & 65535) << 8 | $conv2_i_i1111;
            } else {
              $retval_0_in_i_i1119 = $conv2_i_i1111 << 8 | $509 & 65535;
            }
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $retval_0_in_i_i1119 & 65535;
            $blrr_2 = $retval_0_in_i_i1104 & 65535;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 61450) {
            $blrc_1 = 2;
            $blrr_1 = 2;
            label = 765;
            break;
          } else if (($90 | 0) == 50714) {
            $blrc_1 = $blrc_01439;
            $blrr_1 = $blrr_01438;
            label = 765;
          } else if (($90 | 0) == 50717) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i1123 >> 1] = -1;
                $525 = HEAP32[1316053] | 0;
                _fread($69 | 0, 1, 2, $525 | 0);
                $527 = HEAP16[$str_i_i1123 >> 1] | 0;
                $conv2_i_i_i1127 = $527 & 255;
                $529 = ($527 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i1136 = ($529 & 65535) << 8 | $conv2_i_i_i1127;
                } else {
                  $retval_0_in_i_i_i1136 = $conv2_i_i_i1127 << 8 | $529 & 65535;
                }
                $cond_i1144 = $retval_0_in_i_i_i1136 & 65535;
              } else {
                HEAP32[$str_i1_i1122 >> 2] = -1;
                _fread($70 | 0, 1, 4, HEAP32[1316053] | 0);
                $533 = HEAP32[$str_i1_i1122 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i1144 = $533;
                  break;
                }
                $cond_i1144 = _llvm_bswap_i32($533 | 0) | 0;
              }
            } while (0);
            HEAP32[1315898] = $cond_i1144;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50718) {
            $call792 = +_getreal(HEAP32[$type >> 2] | 0);
            HEAPF64[tempDoublePtr >> 3] = $call792, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            $call793 = +_getreal(HEAP32[$type >> 2] | 0);
            $div794 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]) / $call793;
            HEAPF64[tempDoublePtr >> 3] = $div794, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50729) {
            $call852 = +_getreal(HEAP32[$type >> 2] | 0);
            $call854 = +_getreal(HEAP32[$type >> 2] | 0);
            $sub859 = 1.0 - $call852 - $call854;
            $div868 = $call852 / .9504560232162476;
            HEAPF64[tempDoublePtr >> 3] = $div868, HEAP32[$arrayidx853 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx853 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            HEAPF64[tempDoublePtr >> 3] = $call854, HEAP32[$arrayidx855 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx855 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            $div868_2 = $sub859 / 1.0887540578842163;
            HEAPF64[tempDoublePtr >> 3] = $div868_2, HEAP32[$arrayidx860 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx860 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50740) {
            if ((HEAP32[1357024] | 0) != 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[$str_i1146 >> 2] = -1;
            _fread($71 | 0, 1, 4, HEAP32[1316053] | 0);
            $554 = HEAP32[$str_i1146 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i1165 = $554;
            } else {
              $retval_0_i_i1165 = _llvm_bswap_i32($554 | 0) | 0;
            }
            $add877 = $retval_0_i_i1165 + $base | 0;
            _parse_minolta($add877);
            _fseek(HEAP32[1316053] | 0, $add877 | 0, 0);
            _parse_tiff_ifd($base);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50752) {
            if ((_fread(5560320, 2, 3, HEAP32[1316053] | 0) | 0) >>> 0 < 3) {
              _derror();
            }
            $cmp1_i1169 = HEAP16[2631518] << 16 >> 16 == 18761;
            if ($cmp1_i1169 ^ (_htons(4660) | 0) == 4660) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _swab(5560320, 5560320, 6);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50829) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i1171 >> 1] = -1;
                $559 = HEAP32[1316053] | 0;
                _fread($72 | 0, 1, 2, $559 | 0);
                $561 = HEAP16[$str_i_i1171 >> 1] | 0;
                $conv2_i_i_i1175 = $561 & 255;
                $563 = ($561 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i1184 = ($563 & 65535) << 8 | $conv2_i_i_i1175;
                } else {
                  $retval_0_in_i_i_i1184 = $conv2_i_i_i1175 << 8 | $563 & 65535;
                }
                $cond_i1192 = $retval_0_in_i_i_i1184 & 65535;
              } else {
                HEAP32[$str_i1_i1170 >> 2] = -1;
                _fread($79 | 0, 1, 4, HEAP32[1316053] | 0);
                $567 = HEAP32[$str_i1_i1170 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i1192 = $567;
                  break;
                }
                $cond_i1192 = _llvm_bswap_i32($567 | 0) | 0;
              }
            } while (0);
            HEAP16[2621786] = $cond_i1192 & 65535;
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i1195 >> 1] = -1;
                $569 = HEAP32[1316053] | 0;
                _fread($73 | 0, 1, 2, $569 | 0);
                $571 = HEAP16[$str_i_i1195 >> 1] | 0;
                $conv2_i_i_i1199 = $571 & 255;
                $573 = ($571 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i1208 = ($573 & 65535) << 8 | $conv2_i_i_i1199;
                } else {
                  $retval_0_in_i_i_i1208 = $conv2_i_i_i1199 << 8 | $573 & 65535;
                }
                $cond_i1216 = $retval_0_in_i_i_i1208 & 65535;
              } else {
                HEAP32[$str_i1_i1194 >> 2] = -1;
                _fread($78 | 0, 1, 4, HEAP32[1316053] | 0);
                $577 = HEAP32[$str_i1_i1194 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i1216 = $577;
                  break;
                }
                $cond_i1216 = _llvm_bswap_i32($577 | 0) | 0;
              }
            } while (0);
            HEAP16[2631898] = $cond_i1216 & 65535;
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i1219 >> 1] = -1;
                $579 = HEAP32[1316053] | 0;
                _fread($74 | 0, 1, 2, $579 | 0);
                $581 = HEAP16[$str_i_i1219 >> 1] | 0;
                $conv2_i_i_i1223 = $581 & 255;
                $583 = ($581 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i1232 = ($583 & 65535) << 8 | $conv2_i_i_i1223;
                } else {
                  $retval_0_in_i_i_i1232 = $conv2_i_i_i1223 << 8 | $583 & 65535;
                }
                $cond_i1240 = $retval_0_in_i_i_i1232 & 65535;
              } else {
                HEAP32[$str_i1_i1218 >> 2] = -1;
                _fread($77 | 0, 1, 4, HEAP32[1316053] | 0);
                $587 = HEAP32[$str_i1_i1218 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i1240 = $587;
                  break;
                }
                $cond_i1240 = _llvm_bswap_i32($587 | 0) | 0;
              }
            } while (0);
            HEAP16[2699404] = $cond_i1240 - (HEAPU16[2621786] | 0) & 65535;
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i1243 >> 1] = -1;
                $590 = HEAP32[1316053] | 0;
                _fread($75 | 0, 1, 2, $590 | 0);
                $592 = HEAP16[$str_i_i1243 >> 1] | 0;
                $conv2_i_i_i1247 = $592 & 255;
                $594 = ($592 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i1256 = ($594 & 65535) << 8 | $conv2_i_i_i1247;
                } else {
                  $retval_0_in_i_i_i1256 = $conv2_i_i_i1247 << 8 | $594 & 65535;
                }
                $cond_i1264 = $retval_0_in_i_i_i1256 & 65535;
              } else {
                HEAP32[$str_i1_i1242 >> 2] = -1;
                _fread($76 | 0, 1, 4, HEAP32[1316053] | 0);
                $598 = HEAP32[$str_i1_i1242 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i1264 = $598;
                  break;
                }
                $cond_i1264 = _llvm_bswap_i32($598 | 0) | 0;
              }
            } while (0);
            HEAP16[2621484] = $cond_i1264 - (HEAPU16[2631898] | 0) & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 50721 | ($90 | 0) == 50722) {
            if ((HEAP32[1390240] | 0) > 0) {
              $c_141381 = 0;
            } else {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = 1;
              $ifd_1 = $ifd_01435;
              break;
            }
            while (1) {
              $call804 = +_getreal(HEAP32[$type >> 2] | 0);
              $arrayidx806 = $cm + ($c_141381 * 24 & -1) | 0;
              HEAPF64[tempDoublePtr >> 3] = $call804, HEAP32[$arrayidx806 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx806 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $call804_1 = +_getreal(HEAP32[$type >> 2] | 0);
              $arrayidx806_1 = $cm + ($c_141381 * 24 & -1) + 8 | 0;
              HEAPF64[tempDoublePtr >> 3] = $call804_1, HEAP32[$arrayidx806_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx806_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $call804_2 = +_getreal(HEAP32[$type >> 2] | 0);
              $arrayidx806_2 = $cm + ($c_141381 * 24 & -1) + 16 | 0;
              HEAPF64[tempDoublePtr >> 3] = $call804_2, HEAP32[$arrayidx806_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx806_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $inc811 = $c_141381 + 1 | 0;
              if (($inc811 | 0) < (HEAP32[1390240] | 0)) {
                $c_141381 = $inc811;
              } else {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = 1;
                $ifd_1 = $ifd_01435;
                break L636;
              }
            }
          } else if (($90 | 0) == 50723 | ($90 | 0) == 50724) {
            $120 = HEAP32[1390240] | 0;
            if (($120 | 0) > 0) {
              $i_71376 = 0;
              $541 = $120;
            } else {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            while (1) {
              L825 : do {
                if (($541 | 0) > 0) {
                  $c_151373 = 0;
                  while (1) {
                    $call822 = +_getreal(HEAP32[$type >> 2] | 0);
                    $arrayidx824 = $cc + ($i_71376 << 5) + ($c_151373 << 3) | 0;
                    HEAPF64[tempDoublePtr >> 3] = $call822, HEAP32[$arrayidx824 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx824 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                    $inc826 = $c_151373 + 1 | 0;
                    $543 = HEAP32[1390240] | 0;
                    if (($inc826 | 0) < ($543 | 0)) {
                      $c_151373 = $inc826;
                    } else {
                      $544 = $543;
                      break L825;
                    }
                  }
                } else {
                  $544 = $541;
                }
              } while (0);
              $inc829 = $i_71376 + 1 | 0;
              if (($inc829 | 0) < ($544 | 0)) {
                $i_71376 = $inc829;
                $541 = $544;
              } else {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              }
            }
          } else if (($90 | 0) == 50727) {
            if ((HEAP32[1390240] | 0) > 0) {
              $c_161371 = 0;
            } else {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            while (1) {
              $call836 = +_getreal(HEAP32[$type >> 2] | 0);
              $arrayidx837 = $ab + ($c_161371 << 3) | 0;
              HEAPF64[tempDoublePtr >> 3] = $call836, HEAP32[$arrayidx837 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx837 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $inc839 = $c_161371 + 1 | 0;
              if (($inc839 | 0) < (HEAP32[1390240] | 0)) {
                $c_161371 = $inc839;
              } else {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              }
            }
          } else if (($90 | 0) == 50728) {
            if ((HEAP32[1390240] | 0) > 0) {
              $c_171368 = 0;
            } else {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            while (1) {
              $call846 = +_getreal(HEAP32[$type >> 2] | 0);
              $arrayidx847 = $asn + ($c_171368 << 3) | 0;
              HEAPF64[tempDoublePtr >> 3] = $call846, HEAP32[$arrayidx847 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx847 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              $inc849 = $c_171368 + 1 | 0;
              if (($inc849 | 0) < (HEAP32[1390240] | 0)) {
                $c_171368 = $inc849;
              } else {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              }
            }
          } else if (($90 | 0) == 50830) {
            L836 : do {
              if ((HEAP32[$len >> 2] | 0) != 0) {
                $i_81364 = 0;
                while (1) {
                  do {
                    if ((HEAP32[$type >> 2] | 0) == 3) {
                      HEAP16[$str_i_i1267 >> 1] = -1;
                      $601 = HEAP32[1316053] | 0;
                      _fread($82 | 0, 1, 2, $601 | 0);
                      $603 = HEAP16[$str_i_i1267 >> 1] | 0;
                      $conv2_i_i_i1271 = $603 & 255;
                      $605 = ($603 & 65535) >>> 8;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $retval_0_in_i_i_i1280 = ($605 & 65535) << 8 | $conv2_i_i_i1271;
                      } else {
                        $retval_0_in_i_i_i1280 = $conv2_i_i_i1271 << 8 | $605 & 65535;
                      }
                      $cond_i1288 = $retval_0_in_i_i_i1280 & 65535;
                    } else {
                      HEAP32[$str_i1_i1266 >> 2] = -1;
                      _fread($83 | 0, 1, 4, HEAP32[1316053] | 0);
                      $609 = HEAP32[$str_i1_i1266 >> 2] | 0;
                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                        $cond_i1288 = $609;
                        break;
                      }
                      $cond_i1288 = _llvm_bswap_i32($609 | 0) | 0;
                    }
                  } while (0);
                  HEAP32[5263596 + ($i_81364 << 2) >> 2] = $cond_i1288;
                  $inc907 = $i_81364 + 1 | 0;
                  if ($inc907 >>> 0 < (HEAP32[$len >> 2] | 0) >>> 0 & ($inc907 | 0) < 32) {
                    $i_81364 = $inc907;
                  } else {
                    break L836;
                  }
                }
              }
            } while (0);
            HEAP32[1390380] = 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 5) {
            HEAP16[$str_i216 >> 1] = -1;
            _fread($16 | 0, 1, 2, HEAP32[1316053] | 0);
            $126 = HEAP16[$str_i216 >> 1] | 0;
            $conv2_i_i220 = $126 & 255;
            $128 = ($126 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i228 = ($128 & 65535) << 8 | $conv2_i_i220;
            } else {
              $retval_0_in_i_i228 = $conv2_i_i220 << 8 | $128 & 65535;
            }
            HEAP16[2621484] = $retval_0_in_i_i228 & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 6) {
            HEAP16[$str_i231 >> 1] = -1;
            _fread($17 | 0, 1, 2, HEAP32[1316053] | 0);
            $132 = HEAP16[$str_i231 >> 1] | 0;
            $conv2_i_i235 = $132 & 255;
            $134 = ($132 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i243 = ($134 & 65535) << 8 | $conv2_i_i235;
            } else {
              $retval_0_in_i_i243 = $conv2_i_i235 << 8 | $134 & 65535;
            }
            HEAP16[2699404] = $retval_0_in_i_i243 & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 7) {
            HEAP16[$str_i246 >> 1] = -1;
            _fread($18 | 0, 1, 2, HEAP32[1316053] | 0);
            $138 = HEAP16[$str_i246 >> 1] | 0;
            $conv2_i_i250 = $138 & 255;
            $140 = ($138 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i258 = ($140 & 65535) << 8 | $conv2_i_i250;
            } else {
              $retval_0_in_i_i258 = $conv2_i_i250 << 8 | $140 & 65535;
            }
            HEAP16[2621484] = (HEAP16[2621484] | 0) + ($retval_0_in_i_i258 & 65535) & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 9) {
            HEAP16[$str_i261 >> 1] = -1;
            _fread($19 | 0, 1, 2, HEAP32[1316053] | 0);
            $145 = HEAP16[$str_i261 >> 1] | 0;
            $conv2_i_i265 = $145 & 255;
            $147 = ($145 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i273 = ($147 & 65535) << 8 | $conv2_i_i265;
            } else {
              $retval_0_in_i_i273 = $conv2_i_i265 << 8 | $147 & 65535;
            }
            HEAP32[1356938] = $retval_0_in_i_i273 & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 17 | ($90 | 0) == 18) {
            if ((HEAP32[$type >> 2] | 0) != 3) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            if ((HEAP32[$len >> 2] | 0) != 1) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP16[$str_i276 >> 1] = -1;
            _fread($20 | 0, 1, 2, HEAP32[1316053] | 0);
            $153 = HEAP16[$str_i276 >> 1] | 0;
            $conv2_i_i280 = $153 & 255;
            $155 = ($153 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i288 = ($155 & 65535) << 8 | $conv2_i_i280;
            } else {
              $retval_0_in_i_i288 = $conv2_i_i280 << 8 | $155 & 65535;
            }
            HEAPF32[5561244 + (($90 << 1) - 34 << 2) >> 2] = +($retval_0_in_i_i288 & 65535 | 0) * .00390625;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 23) {
            if ((HEAP32[$type >> 2] | 0) != 3) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP16[$str_i291 >> 1] = -1;
            _fread($21 | 0, 1, 2, HEAP32[1316053] | 0);
            $160 = HEAP16[$str_i291 >> 1] | 0;
            $conv2_i_i295 = $160 & 255;
            $162 = ($160 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i303 = ($162 & 65535) << 8 | $conv2_i_i295;
            } else {
              $retval_0_in_i_i303 = $conv2_i_i295 << 8 | $162 & 65535;
            }
            HEAPF32[1316048] = +(($retval_0_in_i_i303 & 65535) >>> 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 36 | ($90 | 0) == 37 | ($90 | 0) == 38) {
            HEAP16[$str_i306 >> 1] = -1;
            _fread($22 | 0, 1, 2, HEAP32[1316053] | 0);
            $166 = HEAP16[$str_i306 >> 1] | 0;
            $conv2_i_i310 = $166 & 255;
            $168 = ($166 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i318 = ($168 & 65535) << 8 | $conv2_i_i310;
            } else {
              $retval_0_in_i_i318 = $conv2_i_i310 << 8 | $168 & 65535;
            }
            HEAPF32[5561244 + ($90 - 36 << 2) >> 2] = +(($retval_0_in_i_i318 & 65535) >>> 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 39) {
            if ((HEAP32[$len >> 2] | 0) >>> 0 < 50 | +HEAPF32[1390311] != 0.0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fseek(HEAP32[1316053] | 0, 12, 1);
            HEAP16[$str_i321 >> 1] = -1;
            _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
            $175 = HEAP16[$str_i321 >> 1] | 0;
            $conv2_i_i325 = $175 & 255;
            $177 = ($175 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i333 = ($177 & 65535) << 8 | $conv2_i_i325;
            } else {
              $retval_0_in_i_i333 = $conv2_i_i325 << 8 | $177 & 65535;
            }
            HEAPF32[1390311] = +(($retval_0_in_i_i333 & 65535) >>> 0);
            HEAP16[$str_i321 >> 1] = -1;
            _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
            $181 = HEAP16[$str_i321 >> 1] | 0;
            $conv2_i_i325_1 = $181 & 255;
            $183 = ($181 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i333_1 = ($183 & 65535) << 8 | $conv2_i_i325_1;
            } else {
              $retval_0_in_i_i333_1 = $conv2_i_i325_1 << 8 | $183 & 65535;
            }
            HEAPF32[1390312] = +(($retval_0_in_i_i333_1 & 65535) >>> 0);
            HEAP16[$str_i321 >> 1] = -1;
            _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
            $742 = HEAP16[$str_i321 >> 1] | 0;
            $conv2_i_i325_2 = $742 & 255;
            $744 = ($742 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i333_2 = ($744 & 65535) << 8 | $conv2_i_i325_2;
            } else {
              $retval_0_in_i_i333_2 = $conv2_i_i325_2 << 8 | $744 & 65535;
            }
            HEAPF32[1390313] = +(($retval_0_in_i_i333_2 & 65535) >>> 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 46) {
            if ((HEAP32[$type >> 2] | 0) != 7) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            if ((_fgetc(HEAP32[1316053] | 0) | 0) != 255) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            if ((_fgetc(HEAP32[1316053] | 0) | 0) != 216) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[1311013] = (_ftell(HEAP32[1316053] | 0) | 0) - 2 | 0;
            HEAP32[1311016] = HEAP32[$len >> 2] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 61440) {
            _parse_tiff_ifd($base);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 2 | ($90 | 0) == 256 | ($90 | 0) == 61441) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i >> 1] = -1;
                $190 = HEAP32[1316053] | 0;
                _fread($24 | 0, 1, 2, $190 | 0);
                $192 = HEAP16[$str_i_i >> 1] | 0;
                $conv2_i_i_i = $192 & 255;
                $194 = ($192 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i = ($194 & 65535) << 8 | $conv2_i_i_i;
                } else {
                  $retval_0_in_i_i_i = $conv2_i_i_i << 8 | $194 & 65535;
                }
                $cond_i = $retval_0_in_i_i_i & 65535;
              } else {
                HEAP32[$str_i1_i >> 2] = -1;
                _fread($25 | 0, 1, 4, HEAP32[1316053] | 0);
                $198 = HEAP32[$str_i1_i >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i = $198;
                  break;
                }
                $cond_i = _llvm_bswap_i32($198 | 0) | 0;
              }
            } while (0);
            HEAP32[5243596 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 3 | ($90 | 0) == 257 | ($90 | 0) == 61442) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i337 >> 1] = -1;
                $200 = HEAP32[1316053] | 0;
                _fread($26 | 0, 1, 2, $200 | 0);
                $202 = HEAP16[$str_i_i337 >> 1] | 0;
                $conv2_i_i_i341 = $202 & 255;
                $204 = ($202 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i350 = ($204 & 65535) << 8 | $conv2_i_i_i341;
                } else {
                  $retval_0_in_i_i_i350 = $conv2_i_i_i341 << 8 | $204 & 65535;
                }
                $cond_i358 = $retval_0_in_i_i_i350 & 65535;
              } else {
                HEAP32[$str_i1_i336 >> 2] = -1;
                _fread($27 | 0, 1, 4, HEAP32[1316053] | 0);
                $208 = HEAP32[$str_i1_i336 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i358 = $208;
                  break;
                }
                $cond_i358 = _llvm_bswap_i32($208 | 0) | 0;
              }
            } while (0);
            HEAP32[5243600 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i358;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 61454) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i514 >> 1] = -1;
                $276 = HEAP32[1316053] | 0;
                _fread($88 | 0, 1, 2, $276 | 0);
                $278 = HEAP16[$str_i_i514 >> 1] | 0;
                $conv2_i_i_i518 = $278 & 255;
                $280 = ($278 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i527 = ($280 & 65535) << 8 | $conv2_i_i_i518;
                } else {
                  $retval_0_in_i_i_i527 = $conv2_i_i_i518 << 8 | $280 & 65535;
                }
                $cond_i535 = $retval_0_in_i_i_i527 & 65535;
              } else {
                HEAP32[$str_i1_i513 >> 2] = -1;
                _fread($89 | 0, 1, 4, HEAP32[1316053] | 0);
                $284 = HEAP32[$str_i1_i513 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i535 = $284;
                  break;
                }
                $cond_i535 = _llvm_bswap_i32($284 | 0) | 0;
              }
            } while (0);
            HEAPF32[1390312] = +($cond_i535 >>> 0 >>> 0);
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i514 >> 1] = -1;
                $723 = HEAP32[1316053] | 0;
                _fread($88 | 0, 1, 2, $723 | 0);
                $725 = HEAP16[$str_i_i514 >> 1] | 0;
                $conv2_i_i_i518_1 = $725 & 255;
                $727 = ($725 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i527_1 = ($727 & 65535) << 8 | $conv2_i_i_i518_1;
                } else {
                  $retval_0_in_i_i_i527_1 = $conv2_i_i_i518_1 << 8 | $727 & 65535;
                }
                $cond_i535_1 = $retval_0_in_i_i_i527_1 & 65535;
              } else {
                HEAP32[$str_i1_i513 >> 2] = -1;
                _fread($89 | 0, 1, 4, HEAP32[1316053] | 0);
                $722 = HEAP32[$str_i1_i513 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i535_1 = $722;
                  break;
                }
                $cond_i535_1 = _llvm_bswap_i32($722 | 0) | 0;
              }
            } while (0);
            HEAPF32[1390311] = +($cond_i535_1 >>> 0 >>> 0);
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i514 >> 1] = -1;
                $733 = HEAP32[1316053] | 0;
                _fread($88 | 0, 1, 2, $733 | 0);
                $735 = HEAP16[$str_i_i514 >> 1] | 0;
                $conv2_i_i_i518_2 = $735 & 255;
                $737 = ($735 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i527_2 = ($737 & 65535) << 8 | $conv2_i_i_i518_2;
                } else {
                  $retval_0_in_i_i_i527_2 = $conv2_i_i_i518_2 << 8 | $737 & 65535;
                }
                $cond_i535_2 = $retval_0_in_i_i_i527_2 & 65535;
              } else {
                HEAP32[$str_i1_i513 >> 2] = -1;
                _fread($89 | 0, 1, 4, HEAP32[1316053] | 0);
                $732 = HEAP32[$str_i1_i513 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i535_2 = $732;
                  break;
                }
                $cond_i535_2 = _llvm_bswap_i32($732 | 0) | 0;
              }
            } while (0);
            HEAPF32[1390313] = +($cond_i535_2 >>> 0 >>> 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 28688) {
            HEAP16[$str_i648 >> 1] = -1;
            _fread($87 | 0, 1, 2, HEAP32[1316053] | 0);
            $94 = HEAP16[$str_i648 >> 1] | 0;
            $conv2_i_i652 = $94 & 255;
            $96 = ($94 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i660 = ($96 & 65535) << 8 | $conv2_i_i652;
            } else {
              $retval_0_in_i_i660 = $conv2_i_i652 << 8 | $96 & 65535;
            }
            $and277 = $retval_0_in_i_i660 >>> 2 & 4095;
            HEAP32[$sony_curve + 4 >> 2] = $and277;
            HEAP16[$str_i648 >> 1] = -1;
            _fread($87 | 0, 1, 2, HEAP32[1316053] | 0);
            $328 = HEAP16[$str_i648 >> 1] | 0;
            $conv2_i_i652_1 = $328 & 255;
            $330 = ($328 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i660_1 = ($330 & 65535) << 8 | $conv2_i_i652_1;
            } else {
              $retval_0_in_i_i660_1 = $conv2_i_i652_1 << 8 | $330 & 65535;
            }
            $and277_1 = $retval_0_in_i_i660_1 >>> 2 & 4095;
            HEAP32[$sony_curve + 8 >> 2] = $and277_1;
            HEAP16[$str_i648 >> 1] = -1;
            _fread($87 | 0, 1, 2, HEAP32[1316053] | 0);
            $704 = HEAP16[$str_i648 >> 1] | 0;
            $conv2_i_i652_2 = $704 & 255;
            $706 = ($704 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i660_2 = ($706 & 65535) << 8 | $conv2_i_i652_2;
            } else {
              $retval_0_in_i_i660_2 = $conv2_i_i652_2 << 8 | $706 & 65535;
            }
            $and277_2 = $retval_0_in_i_i660_2 >>> 2 & 4095;
            HEAP32[$sony_curve + 12 >> 2] = $and277_2;
            HEAP16[$str_i648 >> 1] = -1;
            _fread($87 | 0, 1, 2, HEAP32[1316053] | 0);
            $710 = HEAP16[$str_i648 >> 1] | 0;
            $conv2_i_i652_3 = $710 & 255;
            $712 = ($710 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i660_3 = ($712 & 65535) << 8 | $conv2_i_i652_3;
            } else {
              $retval_0_in_i_i660_3 = $conv2_i_i652_3 << 8 | $712 & 65535;
            }
            $and277_3 = $retval_0_in_i_i660_3 >>> 2 & 4095;
            HEAP32[$sony_curve + 16 >> 2] = $and277_3;
            $714 = HEAP32[$sony_curve >> 2] | 0;
            $j_11419 = $714 + 1 | 0;
            L971 : do {
              if ($j_11419 >>> 0 <= $and277 >>> 0) {
                $j_11422 = $j_11419;
                $331 = HEAP16[5428620 + ($714 << 1) >> 1] | 0;
                while (1) {
                  $add298 = $331 + 1 & 65535;
                  HEAP16[5428620 + ($j_11422 << 1) >> 1] = $add298;
                  $j_1 = $j_11422 + 1 | 0;
                  if ($j_1 >>> 0 > $and277 >>> 0) {
                    break L971;
                  } else {
                    $j_11422 = $j_1;
                    $331 = $add298;
                  }
                }
              }
            } while (0);
            $j_11419_1 = $and277 + 1 | 0;
            L976 : do {
              if ($j_11419_1 >>> 0 <= $and277_1 >>> 0) {
                $j_11422_1 = $j_11419_1;
                $715 = HEAP16[5428620 + ($and277 << 1) >> 1] | 0;
                while (1) {
                  $add298_1 = $715 + 2 & 65535;
                  HEAP16[5428620 + ($j_11422_1 << 1) >> 1] = $add298_1;
                  $j_1_1 = $j_11422_1 + 1 | 0;
                  if ($j_1_1 >>> 0 > $and277_1 >>> 0) {
                    break L976;
                  } else {
                    $j_11422_1 = $j_1_1;
                    $715 = $add298_1;
                  }
                }
              }
            } while (0);
            $j_11419_2 = $and277_1 + 1 | 0;
            L981 : do {
              if ($j_11419_2 >>> 0 <= $and277_2 >>> 0) {
                $j_11422_2 = $j_11419_2;
                $716 = HEAP16[5428620 + ($and277_1 << 1) >> 1] | 0;
                while (1) {
                  $add298_2 = $716 + 4 & 65535;
                  HEAP16[5428620 + ($j_11422_2 << 1) >> 1] = $add298_2;
                  $j_1_2 = $j_11422_2 + 1 | 0;
                  if ($j_1_2 >>> 0 > $and277_2 >>> 0) {
                    break L981;
                  } else {
                    $j_11422_2 = $j_1_2;
                    $716 = $add298_2;
                  }
                }
              }
            } while (0);
            $j_11419_3 = $and277_2 + 1 | 0;
            L986 : do {
              if ($j_11419_3 >>> 0 <= $and277_3 >>> 0) {
                $j_11422_3 = $j_11419_3;
                $717 = HEAP16[5428620 + ($and277_2 << 1) >> 1] | 0;
                while (1) {
                  $add298_3 = $717 + 8 & 65535;
                  HEAP16[5428620 + ($j_11422_3 << 1) >> 1] = $add298_3;
                  $j_1_3 = $j_11422_3 + 1 | 0;
                  if ($j_1_3 >>> 0 > $and277_3 >>> 0) {
                    break L986;
                  } else {
                    $j_11422_3 = $j_1_3;
                    $717 = $add298_3;
                  }
                }
              }
            } while (0);
            $j_11419_4 = $and277_3 + 1 | 0;
            $718 = HEAP32[$sony_curve + 20 >> 2] | 0;
            if ($j_11419_4 >>> 0 > $718 >>> 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            $j_11422_4 = $j_11419_4;
            $719 = HEAP16[5428620 + ($and277_3 << 1) >> 1] | 0;
            while (1) {
              $add298_4 = $719 + 16 & 65535;
              HEAP16[5428620 + ($j_11422_4 << 1) >> 1] = $add298_4;
              $j_1_4 = $j_11422_4 + 1 | 0;
              if ($j_1_4 >>> 0 > $718 >>> 0) {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              } else {
                $j_11422_4 = $j_1_4;
                $719 = $add298_4;
              }
            }
          } else if (($90 | 0) == 29443) {
            HEAP16[$str_i726 >> 1] = -1;
            _fread($86 | 0, 1, 2, HEAP32[1316053] | 0);
            $99 = HEAP16[$str_i726 >> 1] | 0;
            $conv2_i_i730 = $99 & 255;
            $101 = ($99 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i738 = ($101 & 65535) << 8 | $conv2_i_i730;
            } else {
              $retval_0_in_i_i738 = $conv2_i_i730 << 8 | $101 & 65535;
            }
            HEAPF32[1390312] = +(($retval_0_in_i_i738 & 65535) >>> 0);
            HEAP16[$str_i726 >> 1] = -1;
            _fread($86 | 0, 1, 2, HEAP32[1316053] | 0);
            $345 = HEAP16[$str_i726 >> 1] | 0;
            $conv2_i_i730_1 = $345 & 255;
            $347 = ($345 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i738_1 = ($347 & 65535) << 8 | $conv2_i_i730_1;
            } else {
              $retval_0_in_i_i738_1 = $conv2_i_i730_1 << 8 | $347 & 65535;
            }
            HEAPF32[1390311] = +(($retval_0_in_i_i738_1 & 65535) >>> 0);
            HEAP16[$str_i726 >> 1] = -1;
            _fread($86 | 0, 1, 2, HEAP32[1316053] | 0);
            $691 = HEAP16[$str_i726 >> 1] | 0;
            $conv2_i_i730_2 = $691 & 255;
            $693 = ($691 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i738_2 = ($693 & 65535) << 8 | $conv2_i_i730_2;
            } else {
              $retval_0_in_i_i738_2 = $conv2_i_i730_2 << 8 | $693 & 65535;
            }
            HEAPF32[1390313] = +(($retval_0_in_i_i738_2 & 65535) >>> 0);
            HEAP16[$str_i726 >> 1] = -1;
            _fread($86 | 0, 1, 2, HEAP32[1316053] | 0);
            $697 = HEAP16[$str_i726 >> 1] | 0;
            $conv2_i_i730_3 = $697 & 255;
            $699 = ($697 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i738_3 = ($699 & 65535) << 8 | $conv2_i_i730_3;
            } else {
              $retval_0_in_i_i738_3 = $conv2_i_i730_3 << 8 | $699 & 65535;
            }
            HEAPF32[1390314] = +(($retval_0_in_i_i738_3 & 65535) >>> 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 29459) {
            HEAP16[$str_i741 >> 1] = -1;
            _fread($85 | 0, 1, 2, HEAP32[1316053] | 0);
            $104 = HEAP16[$str_i741 >> 1] | 0;
            $conv2_i_i745 = $104 & 255;
            $106 = ($104 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i753 = ($106 & 65535) << 8 | $conv2_i_i745;
            } else {
              $retval_0_in_i_i753 = $conv2_i_i745 << 8 | $106 & 65535;
            }
            HEAPF32[1390311] = +(($retval_0_in_i_i753 & 65535) >>> 0);
            HEAP16[$str_i741 >> 1] = -1;
            _fread($85 | 0, 1, 2, HEAP32[1316053] | 0);
            $351 = HEAP16[$str_i741 >> 1] | 0;
            $conv2_i_i745_1 = $351 & 255;
            $353 = ($351 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i753_1 = ($353 & 65535) << 8 | $conv2_i_i745_1;
            } else {
              $retval_0_in_i_i753_1 = $conv2_i_i745_1 << 8 | $353 & 65535;
            }
            HEAPF32[1390312] = +(($retval_0_in_i_i753_1 & 65535) >>> 0);
            HEAP16[$str_i741 >> 1] = -1;
            _fread($85 | 0, 1, 2, HEAP32[1316053] | 0);
            $677 = HEAP16[$str_i741 >> 1] | 0;
            $conv2_i_i745_2 = $677 & 255;
            $679 = ($677 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i753_2 = ($679 & 65535) << 8 | $conv2_i_i745_2;
            } else {
              $retval_0_in_i_i753_2 = $conv2_i_i745_2 << 8 | $679 & 65535;
            }
            HEAPF32[1390313] = +(($retval_0_in_i_i753_2 & 65535) >>> 0);
            HEAP16[$str_i741 >> 1] = -1;
            _fread($85 | 0, 1, 2, HEAP32[1316053] | 0);
            $683 = HEAP16[$str_i741 >> 1] | 0;
            $conv2_i_i745_3 = $683 & 255;
            $685 = ($683 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i753_3 = ($685 & 65535) << 8 | $conv2_i_i745_3;
            } else {
              $retval_0_in_i_i753_3 = $conv2_i_i745_3 << 8 | $685 & 65535;
            }
            HEAPF32[1390314] = +(($retval_0_in_i_i753_3 & 65535) >>> 0);
            if (+HEAPF32[1390312] == 1024.0) {
              $355 = +HEAPF32[1390313] == 1024.0;
            } else {
              $355 = 0;
            }
            $shl345 = ($355 & 1) << 1;
            $arrayidx346 = 5561244 + ($shl345 << 2) | 0;
            $arrayidx348 = 5561244 + (($shl345 | 1) << 2) | 0;
            $357 = +HEAPF32[$arrayidx348 >> 2];
            $add349 = +HEAPF32[$arrayidx346 >> 2] + $357;
            $sub354 = $add349 - $357;
            HEAPF32[$arrayidx348 >> 2] = $sub354;
            HEAPF32[$arrayidx346 >> 2] = $add349 - $sub354;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 34306) {
            HEAP16[$str_i777 >> 1] = -1;
            _fread($84 | 0, 1, 2, HEAP32[1316053] | 0);
            $109 = HEAP16[$str_i777 >> 1] | 0;
            $conv2_i_i781 = $109 & 255;
            $111 = ($109 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i789 = ($111 & 65535) << 8 | $conv2_i_i781;
            } else {
              $retval_0_in_i_i789 = $conv2_i_i781 << 8 | $111 & 65535;
            }
            HEAPF32[1390312] = 4096.0 / +($retval_0_in_i_i789 & 65535 | 0);
            HEAP16[$str_i777 >> 1] = -1;
            _fread($84 | 0, 1, 2, HEAP32[1316053] | 0);
            $372 = HEAP16[$str_i777 >> 1] | 0;
            $conv2_i_i781_1 = $372 & 255;
            $374 = ($372 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i789_1 = ($374 & 65535) << 8 | $conv2_i_i781_1;
            } else {
              $retval_0_in_i_i789_1 = $conv2_i_i781_1 << 8 | $374 & 65535;
            }
            HEAPF32[1390311] = 4096.0 / +($retval_0_in_i_i789_1 & 65535 | 0);
            HEAP16[$str_i777 >> 1] = -1;
            _fread($84 | 0, 1, 2, HEAP32[1316053] | 0);
            $664 = HEAP16[$str_i777 >> 1] | 0;
            $conv2_i_i781_2 = $664 & 255;
            $666 = ($664 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i789_2 = ($666 & 65535) << 8 | $conv2_i_i781_2;
            } else {
              $retval_0_in_i_i789_2 = $conv2_i_i781_2 << 8 | $666 & 65535;
            }
            HEAPF32[1390314] = 4096.0 / +($retval_0_in_i_i789_2 & 65535 | 0);
            HEAP16[$str_i777 >> 1] = -1;
            _fread($84 | 0, 1, 2, HEAP32[1316053] | 0);
            $670 = HEAP16[$str_i777 >> 1] | 0;
            $conv2_i_i781_3 = $670 & 255;
            $672 = ($670 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i789_3 = ($672 & 65535) << 8 | $conv2_i_i781_3;
            } else {
              $retval_0_in_i_i789_3 = $conv2_i_i781_3 << 8 | $672 & 65535;
            }
            HEAPF32[1390313] = 4096.0 / +($retval_0_in_i_i789_3 & 65535 | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 258 | ($90 | 0) == 61443) {
            HEAP32[5243624 + ($ifd_01435 * 44 & -1) >> 2] = HEAP32[$len >> 2] & 7;
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i361 >> 1] = -1;
                $211 = HEAP32[1316053] | 0;
                _fread($28 | 0, 1, 2, $211 | 0);
                $213 = HEAP16[$str_i_i361 >> 1] | 0;
                $conv2_i_i_i365 = $213 & 255;
                $215 = ($213 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i374 = ($215 & 65535) << 8 | $conv2_i_i_i365;
                } else {
                  $retval_0_in_i_i_i374 = $conv2_i_i_i365 << 8 | $215 & 65535;
                }
                $cond_i382 = $retval_0_in_i_i_i374 & 65535;
              } else {
                HEAP32[$str_i1_i360 >> 2] = -1;
                _fread($29 | 0, 1, 4, HEAP32[1316053] | 0);
                $219 = HEAP32[$str_i1_i360 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i382 = $219;
                  break;
                }
                $cond_i382 = _llvm_bswap_i32($219 | 0) | 0;
              }
            } while (0);
            HEAP32[5243604 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i382;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 61446) {
            HEAP16[2622502] = 0;
            HEAP32[1315947] = 36;
            HEAP32[$str_i384 >> 2] = -1;
            _fread($30 | 0, 1, 4, HEAP32[1316053] | 0);
            $222 = HEAP32[$str_i384 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i392 = $222;
            } else {
              $retval_0_i_i392 = _llvm_bswap_i32($222 | 0) | 0;
            }
            if (($retval_0_i_i392 | 0) == 0) {
              $223 = 80;
            } else {
              HEAP32[1356938] = 370546198;
              $223 = 24;
            }
            HEAP32[1315948] = $223;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 259) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i394 >> 1] = -1;
                $225 = HEAP32[1316053] | 0;
                _fread($31 | 0, 1, 2, $225 | 0);
                $227 = HEAP16[$str_i_i394 >> 1] | 0;
                $conv2_i_i_i398 = $227 & 255;
                $229 = ($227 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i407 = ($229 & 65535) << 8 | $conv2_i_i_i398;
                } else {
                  $retval_0_in_i_i_i407 = $conv2_i_i_i398 << 8 | $229 & 65535;
                }
                $cond_i415 = $retval_0_in_i_i_i407 & 65535;
              } else {
                HEAP32[$str_i1_i393 >> 2] = -1;
                _fread($32 | 0, 1, 4, HEAP32[1316053] | 0);
                $233 = HEAP32[$str_i1_i393 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i415 = $233;
                  break;
                }
                $cond_i415 = _llvm_bswap_i32($233 | 0) | 0;
              }
            } while (0);
            HEAP32[5243608 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i415;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 262) {
            HEAP16[$str_i417 >> 1] = -1;
            _fread($33 | 0, 1, 2, HEAP32[1316053] | 0);
            $236 = HEAP16[$str_i417 >> 1] | 0;
            $conv2_i_i421 = $236 & 255;
            $238 = ($236 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i429 = ($238 & 65535) << 8 | $conv2_i_i421;
            } else {
              $retval_0_in_i_i429 = $conv2_i_i421 << 8 | $238 & 65535;
            }
            HEAP32[5243612 + ($ifd_01435 * 44 & -1) >> 2] = $retval_0_in_i_i429 & 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 270) {
            _fread(5428100, 512, 1, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 271) {
            _fgets(5263724, 64, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 272) {
            _fgets(5263468, 64, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 280) {
            if ((HEAP32[$type >> 2] | 0) != 4) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[1315947] = 40;
            HEAP32[1315948] = 8200;
            label = 553;
            break;
          } else if (($90 | 0) == 273 | ($90 | 0) == 513 | ($90 | 0) == 61447) {
            label = 553;
          } else if (($90 | 0) == 274) {
            HEAP16[$str_i453 >> 1] = -1;
            _fread($35 | 0, 1, 2, HEAP32[1316053] | 0);
            $258 = HEAP16[$str_i453 >> 1] | 0;
            $conv2_i_i457 = $258 & 255;
            $260 = ($258 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i465 = ($260 & 65535) << 8 | $conv2_i_i457;
            } else {
              $retval_0_in_i_i465 = $conv2_i_i457 << 8 | $260 & 65535;
            }
            HEAP32[5243620 + ($ifd_01435 * 44 & -1) >> 2] = (HEAP8[5586984 + ($retval_0_in_i_i465 & 7) | 0] << 24 >> 24) - 48 | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 277) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i469 >> 1] = -1;
                $264 = HEAP32[1316053] | 0;
                _fread($36 | 0, 1, 2, $264 | 0);
                $266 = HEAP16[$str_i_i469 >> 1] | 0;
                $conv2_i_i_i473 = $266 & 255;
                $268 = ($266 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i482 = ($268 & 65535) << 8 | $conv2_i_i_i473;
                } else {
                  $retval_0_in_i_i_i482 = $conv2_i_i_i473 << 8 | $268 & 65535;
                }
                $cond_i490 = $retval_0_in_i_i_i482 & 65535;
              } else {
                HEAP32[$str_i1_i468 >> 2] = -1;
                _fread($37 | 0, 1, 4, HEAP32[1316053] | 0);
                $272 = HEAP32[$str_i1_i468 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i490 = $272;
                  break;
                }
                $cond_i490 = _llvm_bswap_i32($272 | 0) | 0;
              }
            } while (0);
            HEAP32[5243624 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i490 & 7;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 279 | ($90 | 0) == 514 | ($90 | 0) == 61448) {
            HEAP32[$str_i492 >> 2] = -1;
            _fread($38 | 0, 1, 4, HEAP32[1316053] | 0);
            $275 = HEAP32[$str_i492 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i511 = $275;
            } else {
              $retval_0_i_i511 = _llvm_bswap_i32($275 | 0) | 0;
            }
            HEAP32[5243628 + ($ifd_01435 * 44 & -1) >> 2] = $retval_0_i_i511;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 305 | ($90 | 0) == 11) {
            _fgets($arraydecay | 0, 64, HEAP32[1316053] | 0);
            do {
              if ((_strncmp($arraydecay | 0, 5586976, 5) | 0) != 0) {
                if ((_strncmp($arraydecay | 0, 5586940, 5) | 0) == 0) {
                  break;
                }
                if ((_strncmp($arraydecay | 0, 5586932, 5) | 0) == 0) {
                  break;
                }
                if ((_strncmp($arraydecay | 0, 5586924, 6) | 0) == 0) {
                  break;
                }
                if ((_strncmp($arraydecay | 0, 5586912, 10) | 0) == 0) {
                  break;
                }
                if ((_strcmp($arraydecay | 0, 5586884) | 0) != 0) {
                  $sony_key_1 = $sony_key_01443;
                  $sony_length_1 = $sony_length_01442;
                  $sony_offset_1 = $sony_offset_01441;
                  $plen_3 = $plen_01440;
                  $blrc_2 = $blrc_01439;
                  $blrr_2 = $blrr_01438;
                  $ima_len_1 = $ima_len_01437;
                  $use_cm_1 = $use_cm_01436;
                  $ifd_1 = $ifd_01435;
                  break L636;
                }
              }
            } while (0);
            HEAP32[1316049] = 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 306) {
            _get_timestamp(0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 315) {
            _fread(5561524, 64, 1, HEAP32[1316053] | 0);
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 322) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i538 >> 1] = -1;
                $289 = HEAP32[1316053] | 0;
                _fread($39 | 0, 1, 2, $289 | 0);
                $291 = HEAP16[$str_i_i538 >> 1] | 0;
                $conv2_i_i_i542 = $291 & 255;
                $293 = ($291 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i551 = ($293 & 65535) << 8 | $conv2_i_i_i542;
                } else {
                  $retval_0_in_i_i_i551 = $conv2_i_i_i542 << 8 | $293 & 65535;
                }
                $cond_i559 = $retval_0_in_i_i_i551 & 65535;
              } else {
                HEAP32[$str_i1_i537 >> 2] = -1;
                _fread($40 | 0, 1, 4, HEAP32[1316053] | 0);
                $297 = HEAP32[$str_i1_i537 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i559 = $297;
                  break;
                }
                $cond_i559 = _llvm_bswap_i32($297 | 0) | 0;
              }
            } while (0);
            HEAP32[5243632 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i559;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 323) {
            do {
              if ((HEAP32[$type >> 2] | 0) == 3) {
                HEAP16[$str_i_i562 >> 1] = -1;
                $299 = HEAP32[1316053] | 0;
                _fread($41 | 0, 1, 2, $299 | 0);
                $301 = HEAP16[$str_i_i562 >> 1] | 0;
                $conv2_i_i_i566 = $301 & 255;
                $303 = ($301 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i575 = ($303 & 65535) << 8 | $conv2_i_i_i566;
                } else {
                  $retval_0_in_i_i_i575 = $conv2_i_i_i566 << 8 | $303 & 65535;
                }
                $cond_i583 = $retval_0_in_i_i_i575 & 65535;
              } else {
                HEAP32[$str_i1_i561 >> 2] = -1;
                _fread($42 | 0, 1, 4, HEAP32[1316053] | 0);
                $307 = HEAP32[$str_i1_i561 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond_i583 = $307;
                  break;
                }
                $cond_i583 = _llvm_bswap_i32($307 | 0) | 0;
              }
            } while (0);
            HEAP32[5243636 + ($ifd_01435 * 44 & -1) >> 2] = $cond_i583;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 324) {
            do {
              if ((HEAP32[$len >> 2] | 0) >>> 0 > 1) {
                $cond234 = _ftell(HEAP32[1316053] | 0) | 0;
              } else {
                HEAP32[$str_i585 >> 2] = -1;
                $310 = HEAP32[1316053] | 0;
                _fread($43 | 0, 1, 4, $310 | 0);
                $312 = HEAP32[$str_i585 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $cond234 = $312;
                  break;
                }
                $cond234 = _llvm_bswap_i32($312 | 0) | 0;
              }
            } while (0);
            HEAP32[5243616 + ($ifd_01435 * 44 & -1) >> 2] = $cond234;
            if ((HEAP32[$len >> 2] | 0) != 4) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[1315947] = 30;
            HEAP32[1316049] = 5;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 330) {
            do {
              if ((_strcmp(5263468, 5586872) | 0) == 0) {
                if ((HEAP32[5243596 + ($ifd_01435 * 44 & -1) >> 2] | 0) != 3872) {
                  break;
                }
                HEAP32[1315947] = 94;
                HEAP32[$str_i606 >> 2] = -1;
                _fread($44 | 0, 1, 4, HEAP32[1316053] | 0);
                $318 = HEAP32[$str_i606 >> 2] | 0;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_i_i625 = $318;
                } else {
                  $retval_0_i_i625 = _llvm_bswap_i32($318 | 0) | 0;
                }
                HEAP32[1357153] = $retval_0_i_i625 + $base | 0;
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435 + 1 | 0;
                break L636;
              }
            } while (0);
            $314 = HEAP32[$len >> 2] | 0;
            HEAP32[$len >> 2] = $314 - 1 | 0;
            if (($314 | 0) == 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            while (1) {
              $call258 = _ftell(HEAP32[1316053] | 0) | 0;
              $320 = HEAP32[1316053] | 0;
              HEAP32[$str_i627 >> 2] = -1;
              _fread($45 | 0, 1, 4, $320 | 0);
              $322 = HEAP32[$str_i627 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i646 = $322;
              } else {
                $retval_0_i_i646 = _llvm_bswap_i32($322 | 0) | 0;
              }
              _fseek($320 | 0, $retval_0_i_i646 + $base | 0, 0);
              if ((_parse_tiff_ifd($base) | 0) != 0) {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              }
              _fseek(HEAP32[1316053] | 0, $call258 + 4 | 0, 0);
              $324 = HEAP32[$len >> 2] | 0;
              HEAP32[$len >> 2] = $324 - 1 | 0;
              if (($324 | 0) == 0) {
                $sony_key_1 = $sony_key_01443;
                $sony_length_1 = $sony_length_01442;
                $sony_offset_1 = $sony_offset_01441;
                $plen_3 = $plen_01440;
                $blrc_2 = $blrc_01439;
                $blrr_2 = $blrr_01438;
                $ima_len_1 = $ima_len_01437;
                $use_cm_1 = $use_cm_01436;
                $ifd_1 = $ifd_01435;
                break L636;
              }
            }
          } else if (($90 | 0) == 400) {
            $$etemp$1 = 5263724;
            $st$2$0 = $$etemp$1 | 0;
            tempBigInt = 1852989779;
            HEAP8[$st$2$0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$2$0 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$2$0 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$2$0 + 3 | 0] = tempBigInt & 255;
            $st$3$1 = $$etemp$1 + 4 | 0;
            tempBigInt = 6710895;
            HEAP8[$st$3$1] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$3$1 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$3$1 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$st$3$1 + 3 | 0] = tempBigInt & 255;
            HEAP32[1315898] = 4095;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 29184) {
            HEAP32[$str_i663 >> 2] = -1;
            _fread($46 | 0, 1, 4, HEAP32[1316053] | 0);
            $334 = HEAP32[$str_i663 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $334;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = _llvm_bswap_i32($334 | 0) | 0;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 29185) {
            HEAP32[$str_i684 >> 2] = -1;
            _fread($47 | 0, 1, 4, HEAP32[1316053] | 0);
            $337 = HEAP32[$str_i684 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $337;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = _llvm_bswap_i32($337 | 0) | 0;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 29217) {
            HEAP32[$str_i705 >> 2] = -1;
            _fread($48 | 0, 1, 4, HEAP32[1316053] | 0);
            $340 = HEAP32[$str_i705 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $sony_key_1 = $340;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            $sony_key_1 = _llvm_bswap_i32($340 | 0) | 0;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if (($90 | 0) == 29264) {
            _parse_minolta(_ftell(HEAP32[1316053] | 0) | 0);
            HEAP16[2622498] = 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else {
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
          }
        } while (0);
        do {
          if ((label | 0) == 667) {
            label = 0;
            HEAP8[5263724] = HEAP8[5586832] | 0;
            HEAP8[5263725 | 0] = HEAP8[5586833 | 0] | 0;
            HEAP8[5263726 | 0] = HEAP8[5586834 | 0] | 0;
            HEAP8[5263727 | 0] = HEAP8[5586835 | 0] | 0;
            HEAP8[5263728 | 0] = HEAP8[5586836 | 0] | 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if ((label | 0) == 691) {
            label = 0;
            _fseek(HEAP32[1316053] | 0, 40, 1);
            HEAP32[$str_i879 >> 2] = -1;
            _fread($55 | 0, 1, 4, HEAP32[1316053] | 0);
            $426 = HEAP32[$str_i879 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i898 = $426;
            } else {
              $retval_0_i_i898 = _llvm_bswap_i32($426 | 0) | 0;
            }
            HEAP16[2622498] = $retval_0_i_i898 & 65535;
            HEAP32[$str_i900 >> 2] = -1;
            _fread($56 | 0, 1, 4, HEAP32[1316053] | 0);
            $429 = HEAP32[$str_i900 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i919 = $429;
            } else {
              $retval_0_i_i919 = _llvm_bswap_i32($429 | 0) | 0;
            }
            HEAP16[2622502] = $retval_0_i_i919 & 65535;
            HEAP32[$str_i921 >> 2] = -1;
            _fread($57 | 0, 1, 4, HEAP32[1316053] | 0);
            $432 = HEAP32[$str_i921 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i940 = $432;
            } else {
              $retval_0_i_i940 = _llvm_bswap_i32($432 | 0) | 0;
            }
            $conv529 = $retval_0_i_i940 & 7;
            HEAP16[2631898] = $conv529;
            $sub532 = (HEAPU16[2622498] | 0) - ($conv529 & 65535) | 0;
            HEAP32[$str_i942 >> 2] = -1;
            _fread($58 | 0, 1, 4, HEAP32[1316053] | 0);
            $436 = HEAP32[$str_i942 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i961 = $436;
            } else {
              $retval_0_i_i961 = _llvm_bswap_i32($436 | 0) | 0;
            }
            HEAP16[2621484] = $sub532 - ($retval_0_i_i961 & 7) & 65535;
            HEAP32[$str_i963 >> 2] = -1;
            _fread($59 | 0, 1, 4, HEAP32[1316053] | 0);
            $439 = HEAP32[$str_i963 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i982 = $439;
            } else {
              $retval_0_i_i982 = _llvm_bswap_i32($439 | 0) | 0;
            }
            $conv539 = $retval_0_i_i982 & 7;
            HEAP16[2621786] = $conv539;
            $sub542 = (HEAPU16[2622502] | 0) - ($conv539 & 65535) | 0;
            HEAP32[$str_i984 >> 2] = -1;
            _fread($60 | 0, 1, 4, HEAP32[1316053] | 0);
            $443 = HEAP32[$str_i984 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i1003 = $443;
            } else {
              $retval_0_i_i1003 = _llvm_bswap_i32($443 | 0) | 0;
            }
            HEAP16[2699404] = $sub542 - ($retval_0_i_i1003 & 7) & 65535;
            if (HEAP16[2622498] << 16 >> 16 == 7262) {
              HEAP16[2699404] = 5444;
              HEAP16[2621484] = 7244;
              HEAP16[2631898] = 7;
            }
            _fseek(HEAP32[1316053] | 0, 52, 1);
            HEAP32[$str_i132_i >> 2] = -1;
            _fread($61 | 0, 1, 4, HEAP32[1316053] | 0);
            $448 = HEAP32[$str_i132_i >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i = $448;
            } else {
              $retval_0_i_i151_i = _llvm_bswap_i32($448 | 0) | 0;
            }
            HEAPF32[1390311] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i, +HEAPF32[tempDoublePtr >> 2]);
            HEAP32[$str_i132_i >> 2] = -1;
            _fread($61 | 0, 1, 4, HEAP32[1316053] | 0);
            $452 = HEAP32[$str_i132_i >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i_1 = $452;
            } else {
              $retval_0_i_i151_i_1 = _llvm_bswap_i32($452 | 0) | 0;
            }
            HEAPF32[1390312] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i_1, +HEAPF32[tempDoublePtr >> 2]);
            HEAP32[$str_i132_i >> 2] = -1;
            _fread($61 | 0, 1, 4, HEAP32[1316053] | 0);
            $653 = HEAP32[$str_i132_i >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i_2 = $653;
            } else {
              $retval_0_i_i151_i_2 = _llvm_bswap_i32($653 | 0) | 0;
            }
            HEAPF32[1390313] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i_2, +HEAPF32[tempDoublePtr >> 2]);
            _fseek(HEAP32[1316053] | 0, 114, 1);
            HEAP16[$str_i1006 >> 1] = -1;
            _fread($62 | 0, 1, 2, HEAP32[1316053] | 0);
            $658 = HEAP16[$str_i1006 >> 1] | 0;
            $conv2_i_i1010 = $658 & 255;
            $660 = ($658 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i1018 = ($660 & 65535) << 8 | $conv2_i_i1010;
            } else {
              $retval_0_in_i_i1018 = $conv2_i_i1010 << 8 | $660 & 65535;
            }
            $mul567 = ($retval_0_in_i_i1018 >>> 7 & 511) * 90 & -1;
            HEAP32[1350792] = $mul567;
            $454 = HEAP16[2621484] | 0;
            $455 = HEAP16[2699404] | 0;
            if ((Math_imul(($454 & 65535) * 6 & -1, $455 & 65535) | 0) == ($ima_len_01437 | 0)) {
              if ((($mul567 >>> 0) % 180 | 0) == 90) {
                HEAP16[2699404] = $454;
                HEAP16[2621484] = $455;
                $457 = $455;
                $456 = $454;
              } else {
                $457 = $454;
                $456 = $455;
              }
              HEAP16[2622498] = $457;
              HEAP16[2622502] = $456;
              HEAP32[1350792] = 0;
              HEAP32[1356938] = 0;
              HEAP16[2621786] = 0;
              HEAP16[2631898] = 0;
              $459 = $456;
              $458 = $457;
            } else {
              $459 = $455;
              $458 = $454;
            }
            $div596 = (Math_imul($458 & 65535, $459 & 65535) >>> 0) / 1e6 >>> 0;
            _sprintf(5263468, 5586808, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $div596, tempInt) | 0);
            HEAP32[1315947] = 72;
            if ((HEAP32[1356938] | 0) != 0) {
              if ((HEAP16[2631898] & 1) << 16 >> 16 != 0) {
                HEAP32[1356938] = 1633771873;
              }
              HEAP32[1315947] = 4;
            }
            HEAP32[1315898] = 65535;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if ((label | 0) == 739) {
            label = 0;
            if (($483 | 0) <= 0) {
              $c_12_lcssa = 0;
              $plen_21503 = $plen_2;
              label = 743;
              break;
            }
            $484 = ($483 | 0) > 1;
            $c_121409 = 0;
            while (1) {
              HEAP8[$tab + (HEAPU8[$tmpcast + $c_121409 | 0] | 0) | 0] = $c_121409 & 255;
              $inc675 = $c_121409 + 1 | 0;
              if (($inc675 | 0) < ($483 | 0)) {
                $c_121409 = $inc675;
              } else {
                break;
              }
            }
            $c_12_lcssa = $484 ? $483 : 1;
            $plen_21503 = $plen_2;
            label = 743;
            break;
          } else if ((label | 0) == 765) {
            label = 0;
            $conv706 = ~~+_getreal(HEAP32[$type >> 2] | 0);
            HEAP32[1390380] = $conv706;
            $512 = HEAP32[1356938] | 0;
            if (($512 | 0) == 0 | ($512 | 0) == (-1 | 0)) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_1;
              $blrr_2 = $blrr_1;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            $cmp713 = ($blrc_1 | 0) == 2;
            if ($cmp713) {
              $cond721 = +_getreal(HEAP32[$type >> 2] | 0);
            } else {
              $cond721 = +($conv706 | 0);
            }
            $conv722 = ~~$cond721;
            do {
              if (($blrr_1 | 0) == 2) {
                $conv733 = ~~+_getreal(HEAP32[$type >> 2] | 0);
                if (!$cmp713) {
                  $516 = $conv733;
                  label = 772;
                  break;
                }
                $cond746 = +_getreal(HEAP32[$type >> 2] | 0);
                $517 = $conv733;
                break;
              } else {
                $516 = $conv706;
                label = 772;
              }
            } while (0);
            if ((label | 0) == 772) {
              label = 0;
              $cond746 = +($conv722 | 0);
              $517 = $516;
            }
            $519 = HEAP32[1356938] | 0;
            if ((HEAP32[1390240] | 0) == 3) {
              $or759 = ($519 >>> 2 & 572662306 | $519 << 2 & -2004318072) & $519 << 1 | $519;
              HEAP32[1356938] = $or759;
              $520 = $or759;
            } else {
              $520 = $519;
            }
            HEAP32[5561024 + (($520 & 3) << 2) >> 2] = $conv706;
            HEAP32[5561024 + (($520 >>> 2 & 3) << 2) >> 2] = $conv722;
            HEAP32[5561024 + (($520 >>> 4 & 3) << 2) >> 2] = $517;
            HEAP32[5561024 + (($520 >>> 6 & 3) << 2) >> 2] = ~~$cond746;
            HEAP32[1390380] = 0;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_1;
            $blrr_2 = $blrr_1;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          } else if ((label | 0) == 553) {
            label = 0;
            HEAP32[$str_i432 >> 2] = -1;
            _fread($34 | 0, 1, 4, HEAP32[1316053] | 0);
            $246 = HEAP32[$str_i432 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i451 = $246;
            } else {
              $retval_0_i_i451 = _llvm_bswap_i32($246 | 0) | 0;
            }
            $add119 = $retval_0_i_i451 + $base | 0;
            $offset = 5243616 + ($ifd_01435 * 44 & -1) | 0;
            HEAP32[$offset >> 2] = $add119;
            $bps122 = 5243604 + ($ifd_01435 * 44 & -1) | 0;
            if (!((HEAP32[$bps122 >> 2] | 0) == 0 & ($add119 | 0) > 0)) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            _fseek(HEAP32[1316053] | 0, $add119 | 0, 0);
            if ((_ljpeg_start($jh, 1) | 0) == 0) {
              $sony_key_1 = $sony_key_01443;
              $sony_length_1 = $sony_length_01442;
              $sony_offset_1 = $sony_offset_01441;
              $plen_3 = $plen_01440;
              $blrc_2 = $blrc_01439;
              $blrr_2 = $blrr_01438;
              $ima_len_1 = $ima_len_01437;
              $use_cm_1 = $use_cm_01436;
              $ifd_1 = $ifd_01435;
              break;
            }
            HEAP32[5243608 + ($ifd_01435 * 44 & -1) >> 2] = 6;
            $249 = HEAP32[$wide >> 2] | 0;
            $width139 = 5243596 + ($ifd_01435 * 44 & -1) | 0;
            HEAP32[$width139 >> 2] = $249;
            HEAP32[5243600 + ($ifd_01435 * 44 & -1) >> 2] = HEAP32[$high >> 2] | 0;
            HEAP32[$bps122 >> 2] = HEAP32[$bits >> 2] | 0;
            $252 = HEAP32[$clrs >> 2] | 0;
            HEAP32[5243624 + ($ifd_01435 * 44 & -1) >> 2] = $252;
            do {
              if ((HEAP32[$sraw >> 2] | 0) == 0) {
                if (($252 & 1 | 0) != 0) {
                  break;
                }
                HEAP32[$width139 >> 2] = Math_imul($249, $252);
              }
            } while (0);
            $254 = HEAP16[2631518] | 0;
            _parse_tiff((HEAP32[$offset >> 2] | 0) + 12 | 0);
            HEAP16[2631518] = $254;
            $sony_key_1 = $sony_key_01443;
            $sony_length_1 = $sony_length_01442;
            $sony_offset_1 = $sony_offset_01441;
            $plen_3 = $plen_01440;
            $blrc_2 = $blrc_01439;
            $blrr_2 = $blrr_01438;
            $ima_len_1 = $ima_len_01437;
            $use_cm_1 = $use_cm_01436;
            $ifd_1 = $ifd_01435;
            break;
          }
        } while (0);
        if ((label | 0) == 743) {
          label = 0;
          HEAP8[$c_12_lcssa + 5561016 | 0] = 0;
          $dec6791412 = 15;
          $or6881413 = HEAP32[1356938] | 0;
          while (1) {
            $or688 = HEAPU8[$tab + (HEAPU8[$cfa_pat + ($dec6791412 >>> 0) % ($plen_21503 >>> 0) | 0] | 0) | 0] | 0 | $or6881413 << 2;
            if (($dec6791412 | 0) == 0) {
              break;
            } else {
              $dec6791412 = $dec6791412 - 1 | 0;
              $or6881413 = $or688;
            }
          }
          HEAP32[1356938] = $or688;
          $sony_key_1 = $sony_key_01443;
          $sony_length_1 = $sony_length_01442;
          $sony_offset_1 = $sony_offset_01441;
          $plen_3 = $plen_21503;
          $blrc_2 = $blrc_01439;
          $blrr_2 = $blrr_01438;
          $ima_len_1 = $ima_len_01437;
          $use_cm_1 = $use_cm_01436;
          $ifd_1 = $ifd_01435;
        }
        _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
        if (($dec1444 | 0) == 0) {
          break;
        } else {
          $ifd_01435 = $ifd_1;
          $use_cm_01436 = $use_cm_1;
          $ima_len_01437 = $ima_len_1;
          $blrr_01438 = $blrr_2;
          $blrc_01439 = $blrc_2;
          $plen_01440 = $plen_3;
          $sony_offset_01441 = $sony_offset_1;
          $sony_length_01442 = $sony_length_1;
          $sony_key_01443 = $sony_key_1;
          $dec1444_in = $dec1444;
        }
      }
      if (($sony_length_1 | 0) == 0) {
        $use_cm_0_lcssa1505 = $use_cm_1;
        break;
      }
      $call931 = _malloc($sony_length_1) | 0;
      if (($call931 | 0) == 0) {
        $use_cm_0_lcssa1505 = $use_cm_1;
        break;
      }
      _fseek(HEAP32[1316053] | 0, $sony_offset_1 | 0, 0);
      _fread($call931 | 0, $sony_length_1 | 0, 1, HEAP32[1316053] | 0);
      _sony_decrypt($call931, $sony_length_1 >>> 2, 1, $sony_key_1);
      $629 = HEAP32[1316053] | 0;
      $call937 = _tmpfile() | 0;
      HEAP32[1316053] = $call937;
      if (($call937 | 0) != 0) {
        _fwrite($call931 | 0, $sony_length_1 | 0, 1, $call937 | 0);
        $630 = HEAP32[1316053] | 0;
        _fseek($630 | 0, 0, 0);
        $sub942 = -$sony_offset_1 | 0;
        _parse_tiff_ifd($sub942);
        $631 = HEAP32[1316053] | 0;
        _fclose($631 | 0);
      }
      HEAP32[1316053] = $629;
      _free($call931);
      $use_cm_0_lcssa1505 = $use_cm_1;
    }
  } while (0);
  $632 = HEAP32[1390240] | 0;
  $cmp9481359 = ($632 | 0) > 0;
  L1255 : do {
    if ($cmp9481359) {
      $i_91360 = 0;
      while (1) {
        $arrayidx955 = $ab + ($i_91360 << 3) | 0;
        $633 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx955 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx955 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $c_191358 = 0;
        while (1) {
          $arrayidx957 = $cc + ($i_91360 << 5) + ($c_191358 << 3) | 0;
          $mul958 = $633 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx957 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx957 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          HEAPF64[tempDoublePtr >> 3] = $mul958, HEAP32[$arrayidx957 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx957 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $inc960 = $c_191358 + 1 | 0;
          if (($inc960 | 0) == ($632 | 0)) {
            break;
          } else {
            $c_191358 = $inc960;
          }
        }
        $inc963 = $i_91360 + 1 | 0;
        if (($inc963 | 0) < ($632 | 0)) {
          $i_91360 = $inc963;
        } else {
          break L1255;
        }
      }
    }
  } while (0);
  $tobool965 = ($use_cm_0_lcssa1505 | 0) != 0;
  if ($tobool965) {
    L1264 : do {
      if ($cmp9481359) {
        $c_201356 = 0;
        while (1) {
          $arrayidx976 = $cam_xyz + ($c_201356 * 24 & -1) | 0;
          HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx976 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $arrayidx986 = $xyz | 0;
          $635 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx986 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx986 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $j_31351 = 0;
          $add9901352 = 0.0;
          while (1) {
            $arrayidx982 = $cc + ($c_201356 << 5) + ($j_31351 << 3) | 0;
            $636 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
            $arrayidx984 = $cm + ($j_31351 * 24 & -1) | 0;
            $add990 = $add9901352 + $636 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) * $635;
            $inc992 = $j_31351 + 1 | 0;
            if (($inc992 | 0) == ($632 | 0)) {
              break;
            } else {
              $j_31351 = $inc992;
              $add9901352 = $add990;
            }
          }
          HEAPF64[tempDoublePtr >> 3] = $add990, HEAP32[$arrayidx976 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $arrayidx976_1 = $cam_xyz + ($c_201356 * 24 & -1) + 8 | 0;
          HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx976_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $arrayidx986_1 = $xyz + 8 | 0;
          $644 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx986_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx986_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $j_31351_1 = 0;
          $add9901352_1 = 0.0;
          while (1) {
            $arrayidx982_1 = $cc + ($c_201356 << 5) + ($j_31351_1 << 3) | 0;
            $645 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
            $arrayidx984_1 = $cm + ($j_31351_1 * 24 & -1) + 8 | 0;
            $add990_1 = $add9901352_1 + $645 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) * $644;
            $inc992_1 = $j_31351_1 + 1 | 0;
            if (($inc992_1 | 0) == ($632 | 0)) {
              break;
            } else {
              $j_31351_1 = $inc992_1;
              $add9901352_1 = $add990_1;
            }
          }
          HEAPF64[tempDoublePtr >> 3] = $add990_1, HEAP32[$arrayidx976_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $arrayidx976_2 = $cam_xyz + ($c_201356 * 24 & -1) + 16 | 0;
          HEAPF64[tempDoublePtr >> 3] = 0.0, HEAP32[$arrayidx976_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $arrayidx986_2 = $xyz + 16 | 0;
          $647 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx986_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx986_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $j_31351_2 = 0;
          $add9901352_2 = 0.0;
          while (1) {
            $arrayidx982_2 = $cc + ($c_201356 << 5) + ($j_31351_2 << 3) | 0;
            $648 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
            $arrayidx984_2 = $cm + ($j_31351_2 * 24 & -1) + 16 | 0;
            $add990_2 = $add9901352_2 + $648 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) * $647;
            $inc992_2 = $j_31351_2 + 1 | 0;
            if (($inc992_2 | 0) == ($632 | 0)) {
              break;
            } else {
              $j_31351_2 = $inc992_2;
              $add9901352_2 = $add990_2;
            }
          }
          HEAPF64[tempDoublePtr >> 3] = $add990_2, HEAP32[$arrayidx976_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx976_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $inc998 = $c_201356 + 1 | 0;
          if (($inc998 | 0) < ($632 | 0)) {
            $c_201356 = $inc998;
          } else {
            break L1264;
          }
        }
      }
    } while (0);
    _cam_xyz_coeff($cam_xyz | 0);
  }
  $arrayidx1002 = $asn | 0;
  $638 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1002 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1002 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  L1278 : do {
    if ($638 != 0.0) {
      HEAPF32[1390314] = 0.0;
      $639 = HEAP32[1390240] | 0;
      if (($639 | 0) > 0) {
        $c_211349 = 0;
        $640 = $638;
      } else {
        break;
      }
      while (1) {
        HEAPF32[5561244 + ($c_211349 << 2) >> 2] = 1.0 / $640;
        $inc1014 = $c_211349 + 1 | 0;
        if (($inc1014 | 0) >= ($639 | 0)) {
          break L1278;
        }
        $arrayidx1009_phi_trans_insert = $asn + ($inc1014 << 3) | 0;
        $c_211349 = $inc1014;
        $640 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1009_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1009_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      }
    }
  } while (0);
  if ($tobool965) {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  $641 = HEAP32[1390240] | 0;
  if (($641 | 0) > 0) {
    $c_221347 = 0;
  } else {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  while (1) {
    $arrayidx1024 = $cc + ($c_221347 << 5) + ($c_221347 << 3) | 0;
    $arrayidx1025 = 5245612 + ($c_221347 << 2) | 0;
    HEAPF32[$arrayidx1025 >> 2] = +HEAPF32[$arrayidx1025 >> 2] / (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1024 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1024 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
    $inc1030 = $c_221347 + 1 | 0;
    if (($inc1030 | 0) < ($641 | 0)) {
      $c_221347 = $inc1030;
    } else {
      $retval_0 = 0;
      break;
    }
  }
  STACKTOP = __stackBase__;
  return $retval_0 | 0;
}
function _get_timestamp($reversed) {
  $reversed = $reversed | 0;
  var $t = 0, $str = 0, $dec2 = 0, $arraydecay = 0, $1 = 0, $arraydecay4_pre_phi = 0, $tm_year = 0, $tm_mon = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  $t = __stackBase__ | 0;
  $str = __stackBase__ + 44 | 0;
  HEAP8[$str + 19 | 0] = 0;
  if (($reversed | 0) == 0) {
    $arraydecay = $str | 0;
    $1 = HEAP32[1316053] | 0;
    _fread($arraydecay | 0, 19, 1, $1 | 0);
    $arraydecay4_pre_phi = $arraydecay;
  } else {
    $dec2 = 18;
    while (1) {
      HEAP8[$str + $dec2 | 0] = _fgetc(HEAP32[1316053] | 0) & 255;
      if (($dec2 | 0) == 0) {
        break;
      } else {
        $dec2 = $dec2 - 1 | 0;
      }
    }
    $arraydecay4_pre_phi = $str | 0;
  }
  _memset($t | 0, 0, 44);
  $tm_year = $t + 20 | 0;
  $tm_mon = $t + 16 | 0;
  if ((_sscanf($arraydecay4_pre_phi | 0, 5587532, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $tm_year, HEAP32[tempInt + 4 >> 2] = $tm_mon, HEAP32[tempInt + 8 >> 2] = $t + 12 | 0, HEAP32[tempInt + 12 >> 2] = $t + 8 | 0, HEAP32[tempInt + 16 >> 2] = $t + 4 | 0, HEAP32[tempInt + 20 >> 2] = $t | 0, tempInt) | 0) | 0) != 6) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[$tm_year >> 2] = (HEAP32[$tm_year >> 2] | 0) - 1900 | 0;
  HEAP32[$tm_mon >> 2] = (HEAP32[$tm_mon >> 2] | 0) - 1 | 0;
  HEAP32[$t + 32 >> 2] = -1;
  if ((_mktime($t | 0) | 0) <= 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1310894] = _mktime($t | 0) | 0;
  STACKTOP = __stackBase__;
  return;
}
function _parse_exif($base) {
  $base = $base | 0;
  var $str_i50 = 0, $str_i29 = 0, $str_i20 = 0, $str_i5 = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $1 = 0, $5 = 0, $conv2_i_i = 0, $7 = 0, $retval_0_in_i_i = 0, $conv = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $dec75_in = 0, $dec75 = 0, $13 = 0, $18 = 0, $conv2_i_i9 = 0, $20 = 0, $retval_0_in_i_i17 = 0, $call13 = 0.0, $27 = 0, $retval_0_i_i28 = 0, $30 = 0, $retval_0_i_i48 = 0, $31 = 0, $33 = 0, $retval_0_i_i69 = 0, $mul = 0, $shl_1 = 0, $shl_2 = 0, $shl_3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $str_i50 = __stackBase__ | 0;
  $str_i29 = __stackBase__ + 4 | 0;
  $str_i20 = __stackBase__ + 8 | 0;
  $str_i5 = __stackBase__ + 12 | 0;
  $str_i = __stackBase__ + 16 | 0;
  $tag = __stackBase__ + 20 | 0;
  $type = __stackBase__ + 24 | 0;
  $len = __stackBase__ + 28 | 0;
  $save = __stackBase__ + 32 | 0;
  if ((_strncmp(5263724, 5587524, 7) | 0) == 0) {
    $1 = (HEAP32[1310898] | 0) >>> 0 < 3;
  } else {
    $1 = 0;
  }
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $5 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $5 & 255;
  $7 = ($5 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($7 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $7 & 65535;
  }
  $conv = $retval_0_in_i_i & 65535;
  if (($conv | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $9 = $str_i5;
  $10 = $str_i20;
  $11 = $str_i29;
  $12 = $str_i50;
  $dec75_in = $conv;
  while (1) {
    $dec75 = $dec75_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    $13 = HEAP32[$tag >> 2] | 0;
    do {
      if (($13 | 0) == 41730) {
        HEAP32[$str_i50 >> 2] = -1;
        $31 = HEAP32[1316053] | 0;
        _fread($12 | 0, 1, 4, $31 | 0);
        $33 = HEAP32[$str_i50 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i69 = $33;
        } else {
          $retval_0_i_i69 = _llvm_bswap_i32($33 | 0) | 0;
        }
        if (($retval_0_i_i69 | 0) != 131074) {
          break;
        }
        HEAP32[1357022] = 0;
        $mul = Math_imul(_fgetc(HEAP32[1316053] | 0) | 0, 16843009);
        HEAP32[1357022] = $mul | HEAP32[1357022];
        $shl_1 = Math_imul(_fgetc(HEAP32[1316053] | 0) | 0, 67372036);
        HEAP32[1357022] = $shl_1 | HEAP32[1357022];
        $shl_2 = Math_imul(_fgetc(HEAP32[1316053] | 0) | 0, 269488144);
        HEAP32[1357022] = $shl_2 | HEAP32[1357022];
        $shl_3 = Math_imul(_fgetc(HEAP32[1316053] | 0) | 0, 1077952576);
        HEAP32[1357022] = $shl_3 | HEAP32[1357022];
      } else if (($13 | 0) == 40963) {
        if (!$1) {
          break;
        }
        HEAP32[$str_i29 >> 2] = -1;
        _fread($11 | 0, 1, 4, HEAP32[1316053] | 0);
        $30 = HEAP32[$str_i29 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i48 = $30;
        } else {
          $retval_0_i_i48 = _llvm_bswap_i32($30 | 0) | 0;
        }
        HEAP16[2622502] = $retval_0_i_i48 & 65535;
      } else if (($13 | 0) == 33434) {
        HEAPF32[1311229] = +_getreal(HEAP32[$type >> 2] | 0);
      } else if (($13 | 0) == 33437) {
        HEAPF32[1390397] = +_getreal(HEAP32[$type >> 2] | 0);
      } else if (($13 | 0) == 34855) {
        HEAP16[$str_i5 >> 1] = -1;
        _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
        $18 = HEAP16[$str_i5 >> 1] | 0;
        $conv2_i_i9 = $18 & 255;
        $20 = ($18 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i17 = ($20 & 65535) << 8 | $conv2_i_i9;
        } else {
          $retval_0_in_i_i17 = $conv2_i_i9 << 8 | $20 & 65535;
        }
        HEAPF32[1316048] = +(($retval_0_in_i_i17 & 65535) >>> 0);
      } else if (($13 | 0) == 36867 | ($13 | 0) == 36868) {
        _get_timestamp(0);
      } else if (($13 | 0) == 37377) {
        $call13 = +_getreal(HEAP32[$type >> 2] | 0);
        if ($call13 <= -128.0) {
          break;
        }
        HEAPF32[1311229] = +_exp2(+(0.0 - $call13));
      } else if (($13 | 0) == 37378) {
        HEAPF32[1390397] = +_exp2(+(+_getreal(HEAP32[$type >> 2] | 0) * .5));
      } else if (($13 | 0) == 37386) {
        HEAPF32[1350791] = +_getreal(HEAP32[$type >> 2] | 0);
      } else if (($13 | 0) == 37500) {
        _parse_makernote($base, 0);
      } else if (($13 | 0) == 40962) {
        if (!$1) {
          break;
        }
        HEAP32[$str_i20 >> 2] = -1;
        _fread($10 | 0, 1, 4, HEAP32[1316053] | 0);
        $27 = HEAP32[$str_i20 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i28 = $27;
        } else {
          $retval_0_i_i28 = _llvm_bswap_i32($27 | 0) | 0;
        }
        HEAP16[2622498] = $retval_0_i_i28 & 65535;
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
    if (($dec75 | 0) == 0) {
      break;
    } else {
      $dec75_in = $dec75;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_gps($base) {
  $base = $base | 0;
  var $str_i15 = 0, $str_i6 = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $conv = 0, $7 = 0, $8 = 0, $dec41_in = 0, $dec41 = 0, $9 = 0, $mul = 0, $12 = 0, $c_038 = 0, $16 = 0, $retval_0_i_i14 = 0, $inc = 0, $retval_0_i_i34 = 0, $19 = 0, $21 = 0, $retval_0_i_i34_1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  $str_i15 = __stackBase__ | 0;
  $str_i6 = __stackBase__ + 4 | 0;
  $str_i = __stackBase__ + 8 | 0;
  $tag = __stackBase__ + 12 | 0;
  $type = __stackBase__ + 16 | 0;
  $len = __stackBase__ + 20 | 0;
  $save = __stackBase__ + 24 | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $3 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $3 & 255;
  $5 = ($3 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
  }
  $conv = $retval_0_in_i_i & 65535;
  if (($conv | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $7 = $str_i15;
  $8 = $str_i6;
  $dec41_in = $conv;
  while (1) {
    $dec41 = $dec41_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    $9 = HEAP32[$tag >> 2] | 0;
    L1360 : do {
      if (($9 | 0) == 2 | ($9 | 0) == 4 | ($9 | 0) == 7) {
        $mul = (($9 >>> 0) / 3 >>> 0) * 6 & -1;
        $c_038 = 0;
        while (1) {
          HEAP32[$str_i6 >> 2] = -1;
          _fread($8 | 0, 1, 4, HEAP32[1316053] | 0);
          $16 = HEAP32[$str_i6 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i14 = $16;
          } else {
            $retval_0_i_i14 = _llvm_bswap_i32($16 | 0) | 0;
          }
          HEAP32[5398832 + ($mul + $c_038 << 2) >> 2] = $retval_0_i_i14;
          $inc = $c_038 + 1 | 0;
          if (($inc | 0) == 6) {
            break L1360;
          } else {
            $c_038 = $inc;
          }
        }
      } else if (($9 | 0) == 6) {
        HEAP32[$str_i15 >> 2] = -1;
        _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
        $12 = HEAP32[$str_i15 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i34 = $12;
        } else {
          $retval_0_i_i34 = _llvm_bswap_i32($12 | 0) | 0;
        }
        HEAP32[1349726] = $retval_0_i_i34;
        HEAP32[$str_i15 >> 2] = -1;
        _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
        $19 = HEAP32[$str_i15 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i34_1 = $19;
        } else {
          $retval_0_i_i34_1 = _llvm_bswap_i32($19 | 0) | 0;
        }
        HEAP32[1349727] = $retval_0_i_i34_1;
      } else if (($9 | 0) == 1 | ($9 | 0) == 3 | ($9 | 0) == 5) {
        HEAP32[5398832 + (($9 >>> 1) + 29 << 2) >> 2] = _fgetc(HEAP32[1316053] | 0) | 0;
      } else if (($9 | 0) == 18 | ($9 | 0) == 29) {
        $21 = HEAP32[$len >> 2] | 0;
        _fgets(5398832 + ((($9 >>> 0) / 3 >>> 0) + 14 << 2) | 0, ($21 >>> 0 < 12 ? $21 : 12) | 0, HEAP32[1316053] | 0);
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
    if (($dec41 | 0) == 0) {
      break;
    } else {
      $dec41_in = $dec41;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_mos($offset) {
  $offset = $offset | 0;
  var $str_i80 = 0, $str_i59 = 0, $str_i38 = 0, $str_i17 = 0, $str_i = 0, $i = 0, $neut = 0, $planes = 0, $romm_cam = 0, $1 = 0, $2 = 0, $arraydecay = 0, $3 = 0, $4 = 0, $arrayidx100 = 0, $arrayidx11_i104 = 0, $arrayidx11_1_i108 = 0, $arrayidx11_2_i112 = 0, $arrayidx11_116_i116 = 0, $arrayidx11_1_1_i119 = 0, $arrayidx11_2_1_i122 = 0, $arrayidx11_219_i126 = 0, $arrayidx11_1_2_i129 = 0, $arrayidx11_2_2_i132 = 0, $5 = 0, $frot_0 = 0, $8 = 0, $retval_0_i_i = 0, $13 = 0, $retval_0_i_i57 = 0, $call5 = 0, $15 = 0, $16 = 0, $20 = 0, $retval_0_i_i78 = 0, $22 = 0, $inc = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $storemerge16139 = 0, $inc47 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $_frot_0 = 0, $47 = 0, $frot_2_1 = 0, $49 = 0, $_frot_2_1 = 0, $51 = 0, $frot_3 = 0, $53 = 0, $tobool86 = 0, $57 = 0, $58 = 0, $add_ptr_1 = 0, $59 = 0, $add_ptr_2 = 0, $60 = 0, $add_ptr_3 = 0, $conv = 0.0, $65 = 0, $67 = 0, $retval_0_i_i99 = 0, $69 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  $str_i80 = __stackBase__ | 0;
  $str_i59 = __stackBase__ + 4 | 0;
  $str_i38 = __stackBase__ + 8 | 0;
  $str_i17 = __stackBase__ + 12 | 0;
  $str_i = __stackBase__ + 16 | 0;
  $i = __stackBase__ + 60 | 0;
  $neut = __stackBase__ + 64 | 0;
  $planes = __stackBase__ + 80 | 0;
  $romm_cam = __stackBase__ + 84 | 0;
  HEAP32[$planes >> 2] = 0;
  _fseek(HEAP32[1316053] | 0, $offset | 0, 0);
  $1 = $str_i;
  $2 = $str_i17;
  $arraydecay = __stackBase__ + 20 | 0;
  $3 = $str_i38;
  $4 = $str_i80;
  $arrayidx100 = $neut | 0;
  $arrayidx11_i104 = $romm_cam | 0;
  $arrayidx11_1_i108 = $romm_cam + 12 | 0;
  $arrayidx11_2_i112 = $romm_cam + 24 | 0;
  $arrayidx11_116_i116 = $romm_cam + 4 | 0;
  $arrayidx11_1_1_i119 = $romm_cam + 16 | 0;
  $arrayidx11_2_1_i122 = $romm_cam + 28 | 0;
  $arrayidx11_219_i126 = $romm_cam + 8 | 0;
  $arrayidx11_1_2_i129 = $romm_cam + 20 | 0;
  $arrayidx11_2_2_i132 = $romm_cam + 32 | 0;
  $5 = $str_i59;
  $frot_0 = 0;
  while (1) {
    HEAP32[$str_i >> 2] = -1;
    _fread($1 | 0, 1, 4, HEAP32[1316053] | 0);
    $8 = HEAP32[$str_i >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i = $8;
    } else {
      $retval_0_i_i = _llvm_bswap_i32($8 | 0) | 0;
    }
    if (($retval_0_i_i | 0) != 1347114067) {
      break;
    }
    HEAP32[$str_i17 >> 2] = -1;
    _fread($2 | 0, 1, 4, HEAP32[1316053] | 0);
    _fread($arraydecay | 0, 1, 40, HEAP32[1316053] | 0);
    HEAP32[$str_i38 >> 2] = -1;
    _fread($3 | 0, 1, 4, HEAP32[1316053] | 0);
    $13 = HEAP32[$str_i38 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i57 = $13;
    } else {
      $retval_0_i_i57 = _llvm_bswap_i32($13 | 0) | 0;
    }
    $call5 = _ftell(HEAP32[1316053] | 0) | 0;
    if ((_strcmp($arraydecay | 0, 5587264) | 0) == 0) {
      HEAP32[1311013] = $call5;
      HEAP32[1311016] = $retval_0_i_i57;
    }
    if ((_strcmp($arraydecay | 0, 5587244) | 0) == 0) {
      HEAP32[1311401] = $call5;
      HEAP32[1311402] = $retval_0_i_i57;
    }
    do {
      if ((_strcmp($arraydecay | 0, 5587224) | 0) == 0) {
        $15 = HEAP32[1316053] | 0;
        _fscanf($15 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
        $16 = HEAP32[$i >> 2] | 0;
        if ($16 >>> 0 >= 39) {
          break;
        }
        _strcpy(5263468, HEAP32[5245940 + ($16 << 2) >> 2] | 0);
      }
    } while (0);
    if ((_strcmp($arraydecay | 0, 5587192) | 0) == 0) {
      HEAP32[$i >> 2] = 0;
      while (1) {
        HEAP32[$str_i59 >> 2] = -1;
        _fread($5 | 0, 1, 4, HEAP32[1316053] | 0);
        $20 = HEAP32[$str_i59 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i78 = $20;
        } else {
          $retval_0_i_i78 = _llvm_bswap_i32($20 | 0) | 0;
        }
        $22 = HEAP32[$i >> 2] | 0;
        HEAPF32[$romm_cam + ($22 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i78, +HEAPF32[tempDoublePtr >> 2]);
        $inc = $22 + 1 | 0;
        HEAP32[$i >> 2] = $inc;
        if (($inc | 0) >= 9) {
          break;
        }
      }
      $23 = +HEAPF32[$arrayidx11_i104 >> 2];
      $24 = +HEAPF32[$arrayidx11_1_i108 >> 2];
      $25 = +HEAPF32[$arrayidx11_2_i112 >> 2];
      $26 = +HEAPF32[$arrayidx11_116_i116 >> 2];
      $27 = +HEAPF32[$arrayidx11_1_1_i119 >> 2];
      $28 = +HEAPF32[$arrayidx11_2_1_i122 >> 2];
      $29 = +HEAPF32[$arrayidx11_219_i126 >> 2];
      $30 = +HEAPF32[$arrayidx11_1_2_i129 >> 2];
      $31 = +HEAPF32[$arrayidx11_2_2_i132 >> 2];
      HEAPF32[1390241] = $23 * 2.0341930389404297 + 0.0 + $24 * -0.7274199724197388 + $25 * -0.30676600337028503;
      HEAPF32[1390242] = $26 * 2.0341930389404297 + 0.0 + $27 * -0.7274199724197388 + $28 * -0.30676600337028503;
      HEAPF32[1390243] = $29 * 2.0341930389404297 + 0.0 + $30 * -0.7274199724197388 + $31 * -0.30676600337028503;
      HEAPF32[1390245] = $23 * -0.22881099581718445 + 0.0 + $24 * 1.2317290306091309 + $25 * -0.0029219998978078365;
      HEAPF32[1390246] = $26 * -0.22881099581718445 + 0.0 + $27 * 1.2317290306091309 + $28 * -0.0029219998978078365;
      HEAPF32[1390247] = $29 * -0.22881099581718445 + 0.0 + $30 * 1.2317290306091309 + $31 * -0.0029219998978078365;
      HEAPF32[1390249] = $23 * -0.008565000258386135 + 0.0 + $24 * -0.15327300131320953 + $25 * 1.1618390083312988;
      HEAPF32[1390250] = $26 * -0.008565000258386135 + 0.0 + $27 * -0.15327300131320953 + $28 * 1.1618390083312988;
      HEAPF32[1390251] = $29 * -0.008565000258386135 + 0.0 + $30 * -0.15327300131320953 + $31 * 1.1618390083312988;
    }
    if ((_strcmp($arraydecay | 0, 5587168) | 0) == 0) {
      HEAP32[$i >> 2] = 0;
      $storemerge16139 = 0;
      while (1) {
        _fscanf(HEAP32[1316053] | 0, 5587140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $romm_cam + ($storemerge16139 << 2) | 0, tempInt) | 0);
        $inc47 = (HEAP32[$i >> 2] | 0) + 1 | 0;
        HEAP32[$i >> 2] = $inc47;
        if (($inc47 | 0) < 9) {
          $storemerge16139 = $inc47;
        } else {
          break;
        }
      }
      $34 = +HEAPF32[$arrayidx11_i104 >> 2];
      $35 = +HEAPF32[$arrayidx11_1_i108 >> 2];
      $36 = +HEAPF32[$arrayidx11_2_i112 >> 2];
      $37 = +HEAPF32[$arrayidx11_116_i116 >> 2];
      $38 = +HEAPF32[$arrayidx11_1_1_i119 >> 2];
      $39 = +HEAPF32[$arrayidx11_2_1_i122 >> 2];
      $40 = +HEAPF32[$arrayidx11_219_i126 >> 2];
      $41 = +HEAPF32[$arrayidx11_1_2_i129 >> 2];
      $42 = +HEAPF32[$arrayidx11_2_2_i132 >> 2];
      HEAPF32[1390241] = $34 * 2.0341930389404297 + 0.0 + $35 * -0.7274199724197388 + $36 * -0.30676600337028503;
      HEAPF32[1390242] = $37 * 2.0341930389404297 + 0.0 + $38 * -0.7274199724197388 + $39 * -0.30676600337028503;
      HEAPF32[1390243] = $40 * 2.0341930389404297 + 0.0 + $41 * -0.7274199724197388 + $42 * -0.30676600337028503;
      HEAPF32[1390245] = $34 * -0.22881099581718445 + 0.0 + $35 * 1.2317290306091309 + $36 * -0.0029219998978078365;
      HEAPF32[1390246] = $37 * -0.22881099581718445 + 0.0 + $38 * 1.2317290306091309 + $39 * -0.0029219998978078365;
      HEAPF32[1390247] = $40 * -0.22881099581718445 + 0.0 + $41 * 1.2317290306091309 + $42 * -0.0029219998978078365;
      HEAPF32[1390249] = $34 * -0.008565000258386135 + 0.0 + $35 * -0.15327300131320953 + $36 * 1.1618390083312988;
      HEAPF32[1390250] = $37 * -0.008565000258386135 + 0.0 + $38 * -0.15327300131320953 + $39 * 1.1618390083312988;
      HEAPF32[1390251] = $40 * -0.008565000258386135 + 0.0 + $41 * -0.15327300131320953 + $42 * 1.1618390083312988;
    }
    if ((_strcmp($arraydecay | 0, 5587112) | 0) == 0) {
      $43 = HEAP32[1316053] | 0;
      _fscanf($43 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $planes, tempInt) | 0);
    }
    if ((_strcmp($arraydecay | 0, 5587084) | 0) == 0) {
      $44 = HEAP32[1316053] | 0;
      _fscanf($44 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5403168, tempInt) | 0);
    }
    if ((_strcmp($arraydecay | 0, 5587060) | 0) == 0) {
      $45 = HEAP32[1316053] | 0;
      _fscanf($45 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
      $_frot_0 = (HEAP32[$i >> 2] | 0) == 1 ? 0 : $frot_0;
      $47 = HEAP32[1316053] | 0;
      _fscanf($47 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
      $frot_2_1 = (HEAP32[$i >> 2] | 0) == 1 ? 1 : $_frot_0;
      $49 = HEAP32[1316053] | 0;
      _fscanf($49 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
      $_frot_2_1 = (HEAP32[$i >> 2] | 0) == 1 ? 3 : $frot_2_1;
      $51 = HEAP32[1316053] | 0;
      _fscanf($51 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
      $frot_3 = (HEAP32[$i >> 2] | 0) == 1 ? 2 : $_frot_2_1;
    } else {
      $frot_3 = $frot_0;
    }
    if ((_strcmp($arraydecay | 0, 5587036) | 0) == 0) {
      $53 = HEAP32[1316053] | 0;
      _fscanf($53 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt) | 0);
      HEAP32[1350792] = (HEAP32[$i >> 2] | 0) - (HEAP32[1350792] | 0) | 0;
    }
    $tobool86 = (_strcmp($arraydecay | 0, 5587016) | 0) != 0;
    if (!($tobool86 | +HEAPF32[1390311] != 0.0)) {
      $57 = HEAP32[1316053] | 0;
      _fscanf($57 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx100, tempInt) | 0);
      $58 = HEAP32[1316053] | 0;
      $add_ptr_1 = $neut + 4 | 0;
      _fscanf($58 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_1, tempInt) | 0);
      $59 = HEAP32[1316053] | 0;
      $add_ptr_2 = $neut + 8 | 0;
      _fscanf($59 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_2, tempInt) | 0);
      $60 = HEAP32[1316053] | 0;
      $add_ptr_3 = $neut + 12 | 0;
      _fscanf($60 | 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_3, tempInt) | 0);
      $conv = +(HEAP32[$arrayidx100 >> 2] | 0);
      HEAPF32[1390311] = $conv / +(HEAP32[$add_ptr_1 >> 2] | 0);
      HEAPF32[1390312] = $conv / +(HEAP32[$add_ptr_2 >> 2] | 0);
      HEAPF32[1390313] = $conv / +(HEAP32[$add_ptr_3 >> 2] | 0);
    }
    if ((_strcmp($arraydecay | 0, 5587004) | 0) == 0) {
      HEAP32[$str_i80 >> 2] = -1;
      $65 = HEAP32[1316053] | 0;
      _fread($4 | 0, 1, 4, $65 | 0);
      $67 = HEAP32[$str_i80 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i99 = $67;
      } else {
        $retval_0_i_i99 = _llvm_bswap_i32($67 | 0) | 0;
      }
      HEAP32[1315948] = $retval_0_i_i99;
    }
    _parse_mos($call5);
    _fseek(HEAP32[1316053] | 0, $call5 + $retval_0_i_i57 | 0, 0);
    $frot_0 = $frot_3;
  }
  $69 = HEAP32[$planes >> 2] | 0;
  if (($69 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1356938] = Math_imul(HEAPU8[5586996 + (((HEAP32[1350792] | 0) / 90 & -1) + $frot_0 & 3) | 0] | 0, -(($69 | 0) == 1 & 1) & 16843009);
  STACKTOP = __stackBase__;
  return;
}
function _parse_kodak_ifd($base) {
  $base = $base | 0;
  var $str_i1_i122 = 0, $str_i_i123 = 0, $str_i1_i98 = 0, $str_i_i99 = 0, $str_i89 = 0, $str_i1_i65 = 0, $str_i_i66 = 0, $str_i1_i36 = 0, $str_i_i37 = 0, $str_i21 = 0, $str_i1_i = 0, $str_i_i = 0, $str_i = 0, $tag = 0, $type = 0, $len = 0, $save = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $conv = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $dec159_in = 0, $wbtemp_0158 = 0, $wbi_0157 = 0, $dec159 = 0, $22 = 0, $26 = 0, $conv2_i_i_i = 0, $28 = 0, $retval_0_in_i_i_i = 0, $30 = 0, $32 = 0, $wbi_1 = 0, $37 = 0, $conv2_i_i25 = 0, $39 = 0, $retval_0_in_i_i33 = 0, $43 = 0, $conv2_i_i25_1 = 0, $45 = 0, $wbi_2 = 0, $49 = 0, $conv2_i_i_i41 = 0, $51 = 0, $retval_0_in_i_i_i50 = 0, $53 = 0, $55 = 0, $wbi_2170 = 0, $wbtemp_1 = 0, $56 = 0, $conv33 = 0.0, $conv33_1 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $div56 = 0.0, $call54 = 0.0, $conv61 = 0.0, $call54_1 = 0.0, $conv61_1 = 0.0, $call54_2 = 0.0, $conv61_2 = 0.0, $call54_3 = 0.0, $call54_1160 = 0.0, $conv61_1163 = 0.0, $call54_1_1 = 0.0, $conv61_1_1 = 0.0, $call54_2_1 = 0.0, $conv61_2_1 = 0.0, $call54_3_1 = 0.0, $call54_2164 = 0.0, $conv61_2167 = 0.0, $call54_1_2 = 0.0, $conv61_1_2 = 0.0, $call54_2_2 = 0.0, $conv61_2_2 = 0.0, $call54_3_2 = 0.0, $73 = 0, $_len_i = 0, $cmp1_i_i = 0, $i_07_i = 0, $inc_i = 0, $79 = 0, $81 = 0, $conv2_i_i_i70 = 0, $83 = 0, $retval_0_in_i_i_i79 = 0, $87 = 0, $cond_i87 = 0, $wbi_3 = 0, $92 = 0, $retval_0_i_i97 = 0, $95 = 0, $97 = 0, $99 = 0, $conv2_i_i_i103 = 0, $101 = 0, $retval_0_in_i_i_i112 = 0, $105 = 0, $cond_i120 = 0, $107 = 0, $109 = 0, $conv2_i_i_i127 = 0, $111 = 0, $retval_0_in_i_i_i136 = 0, $115 = 0, $cond_i144 = 0, $retval_0_in_i_i33_1 = 0, $121 = 0, $conv2_i_i25_2 = 0, $123 = 0, $retval_0_in_i_i33_2 = 0, $retval_0_i_i97_1 = 0, $127 = 0, $retval_0_i_i97_2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  $str_i1_i122 = __stackBase__ | 0;
  $str_i_i123 = __stackBase__ + 4 | 0;
  $str_i1_i98 = __stackBase__ + 8 | 0;
  $str_i_i99 = __stackBase__ + 12 | 0;
  $str_i89 = __stackBase__ + 16 | 0;
  $str_i1_i65 = __stackBase__ + 20 | 0;
  $str_i_i66 = __stackBase__ + 24 | 0;
  $str_i1_i36 = __stackBase__ + 28 | 0;
  $str_i_i37 = __stackBase__ + 32 | 0;
  $str_i21 = __stackBase__ + 36 | 0;
  $str_i1_i = __stackBase__ + 40 | 0;
  $str_i_i = __stackBase__ + 44 | 0;
  $str_i = __stackBase__ + 48 | 0;
  $tag = __stackBase__ + 52 | 0;
  $type = __stackBase__ + 56 | 0;
  $len = __stackBase__ + 60 | 0;
  $save = __stackBase__ + 64 | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $3 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $3 & 255;
  $5 = ($3 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
  }
  $conv = $retval_0_in_i_i & 65535;
  if (($retval_0_in_i_i & 65535) > 1024 | ($conv | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $7 = $str_i_i;
  $8 = $str_i1_i;
  $9 = $str_i21;
  $10 = $str_i_i37;
  $11 = $str_i1_i36;
  $12 = $str_i_i66;
  $13 = $str_i1_i65;
  $14 = $str_i89;
  $15 = $str_i_i99;
  $16 = $str_i1_i98;
  $17 = $str_i_i123;
  $18 = $str_i1_i122;
  $wbi_0157 = -2;
  $wbtemp_0158 = 6500;
  $dec159_in = $conv;
  $21 = 1.0;
  $20 = 1.0;
  $19 = 1.0;
  while (1) {
    $dec159 = $dec159_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    $22 = HEAP32[$tag >> 2] | 0;
    do {
      if (($22 | 0) == 1020) {
        if ((HEAP32[$type >> 2] | 0) != 3) {
          HEAP32[$str_i1_i >> 2] = -1;
          $30 = HEAP32[1316053] | 0;
          _fread($8 | 0, 1, 4, $30 | 0);
          $32 = HEAP32[$str_i1_i >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $wbi_1 = $32;
            break;
          }
          $wbi_1 = _llvm_bswap_i32($32 | 0) | 0;
          break;
        }
        HEAP16[$str_i_i >> 1] = -1;
        _fread($7 | 0, 1, 2, HEAP32[1316053] | 0);
        $26 = HEAP16[$str_i_i >> 1] | 0;
        $conv2_i_i_i = $26 & 255;
        $28 = ($26 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i_i = ($28 & 65535) << 8 | $conv2_i_i_i;
        } else {
          $retval_0_in_i_i_i = $conv2_i_i_i << 8 | $28 & 65535;
        }
        $wbi_1 = $retval_0_in_i_i_i & 65535;
      } else {
        $wbi_1 = $wbi_0157;
      }
    } while (0);
    do {
      if (($22 | 0) == 1021) {
        if ((HEAP32[$len >> 2] | 0) != 72) {
          $wbtemp_1 = $wbtemp_0158;
          $wbi_2170 = $wbi_1;
          break;
        }
        _fseek(HEAP32[1316053] | 0, 40, 1);
        HEAP16[$str_i21 >> 1] = -1;
        _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
        $37 = HEAP16[$str_i21 >> 1] | 0;
        $conv2_i_i25 = $37 & 255;
        $39 = ($37 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i33 = ($39 & 65535) << 8 | $conv2_i_i25;
        } else {
          $retval_0_in_i_i33 = $conv2_i_i25 << 8 | $39 & 65535;
        }
        HEAPF32[1390311] = 2048.0 / +($retval_0_in_i_i33 & 65535 | 0);
        HEAP16[$str_i21 >> 1] = -1;
        _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
        $43 = HEAP16[$str_i21 >> 1] | 0;
        $conv2_i_i25_1 = $43 & 255;
        $45 = ($43 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i33_1 = ($45 & 65535) << 8 | $conv2_i_i25_1;
        } else {
          $retval_0_in_i_i33_1 = $conv2_i_i25_1 << 8 | $45 & 65535;
        }
        HEAPF32[1390312] = 2048.0 / +($retval_0_in_i_i33_1 & 65535 | 0);
        HEAP16[$str_i21 >> 1] = -1;
        _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
        $121 = HEAP16[$str_i21 >> 1] | 0;
        $conv2_i_i25_2 = $121 & 255;
        $123 = ($121 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i33_2 = ($123 & 65535) << 8 | $conv2_i_i25_2;
        } else {
          $retval_0_in_i_i33_2 = $conv2_i_i25_2 << 8 | $123 & 65535;
        }
        HEAPF32[1390313] = 2048.0 / +($retval_0_in_i_i33_2 & 65535 | 0);
        $wbi_2 = -2;
        label = 1085;
        break;
      } else {
        $wbi_2 = $wbi_1;
        label = 1085;
      }
    } while (0);
    do {
      if ((label | 0) == 1085) {
        label = 0;
        if (($22 | 0) != 2118) {
          $wbtemp_1 = $wbtemp_0158;
          $wbi_2170 = $wbi_2;
          break;
        }
        if ((HEAP32[$type >> 2] | 0) != 3) {
          HEAP32[$str_i1_i36 >> 2] = -1;
          $53 = HEAP32[1316053] | 0;
          _fread($11 | 0, 1, 4, $53 | 0);
          $55 = HEAP32[$str_i1_i36 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $wbtemp_1 = $55;
            $wbi_2170 = $wbi_2;
            break;
          }
          $wbtemp_1 = _llvm_bswap_i32($55 | 0) | 0;
          $wbi_2170 = $wbi_2;
          break;
        }
        HEAP16[$str_i_i37 >> 1] = -1;
        _fread($10 | 0, 1, 2, HEAP32[1316053] | 0);
        $49 = HEAP16[$str_i_i37 >> 1] | 0;
        $conv2_i_i_i41 = $49 & 255;
        $51 = ($49 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i_i50 = ($51 & 65535) << 8 | $conv2_i_i_i41;
        } else {
          $retval_0_in_i_i_i50 = $conv2_i_i_i41 << 8 | $51 & 65535;
        }
        $wbtemp_1 = $retval_0_in_i_i_i50 & 65535;
        $wbi_2170 = $wbi_2;
      }
    } while (0);
    if (($22 | 0) == ($wbi_2170 + 2130 | 0)) {
      $56 = HEAP32[$type >> 2] | 0;
      $conv33 = +_getreal($56);
      $conv33_1 = +_getreal($56);
      $59 = $conv33;
      $58 = $conv33_1;
      $57 = +_getreal($56);
    } else {
      $59 = $21;
      $58 = $20;
      $57 = $19;
    }
    if (($22 | 0) == ($wbi_2170 + 2140 | 0) & ($wbi_2170 | 0) > -1) {
      $60 = HEAP32[$type >> 2] | 0;
      $div56 = +($wbtemp_1 | 0) / 100.0;
      $call54 = +_getreal($60);
      $conv61 = $call54 * +Math_pow($div56, 0.0) + 0.0;
      $call54_1 = +_getreal($60);
      $conv61_1 = $conv61 + $call54_1 * +Math_pow($div56, 1.0);
      $call54_2 = +_getreal($60);
      $conv61_2 = $conv61_1 + $call54_2 * +Math_pow($div56, 2.0);
      $call54_3 = +_getreal($60);
      HEAPF32[1390311] = 2048.0 / (($conv61_2 + $call54_3 * +Math_pow($div56, 3.0)) * $59);
      $call54_1160 = +_getreal($60);
      $conv61_1163 = $call54_1160 * +Math_pow($div56, 0.0) + 0.0;
      $call54_1_1 = +_getreal($60);
      $conv61_1_1 = $conv61_1163 + $call54_1_1 * +Math_pow($div56, 1.0);
      $call54_2_1 = +_getreal($60);
      $conv61_2_1 = $conv61_1_1 + $call54_2_1 * +Math_pow($div56, 2.0);
      $call54_3_1 = +_getreal($60);
      HEAPF32[1390312] = 2048.0 / (($conv61_2_1 + $call54_3_1 * +Math_pow($div56, 3.0)) * $58);
      $call54_2164 = +_getreal($60);
      $conv61_2167 = $call54_2164 * +Math_pow($div56, 0.0) + 0.0;
      $call54_1_2 = +_getreal($60);
      $conv61_1_2 = $conv61_2167 + $call54_1_2 * +Math_pow($div56, 1.0);
      $call54_2_2 = +_getreal($60);
      $conv61_2_2 = $conv61_1_2 + $call54_2_2 * +Math_pow($div56, 2.0);
      $call54_3_2 = +_getreal($60);
      HEAPF32[1390313] = 2048.0 / (($conv61_2_2 + $call54_3_2 * +Math_pow($div56, 3.0)) * $57);
    }
    do {
      if (($22 | 0) == 64013) {
        label = 1113;
      } else if (($22 | 0) == 6020) {
        label = 1105;
      } else if (($22 | 0) == 2317) {
        $73 = HEAP32[$len >> 2] | 0;
        $_len_i = $73 >>> 0 > 4096 ? 4096 : $73;
        if ((_fread(5428620, 2, $_len_i | 0, HEAP32[1316053] | 0) | 0) >>> 0 < $_len_i >>> 0) {
          _derror();
        }
        $cmp1_i_i = HEAP16[2631518] << 16 >> 16 == 18761;
        if (!($cmp1_i_i ^ (_htons(4660) | 0) == 4660)) {
          _swab(5428620, 5428620, $_len_i << 1 | 0);
        }
        L1501 : do {
          if (($_len_i | 0) < 4096) {
            $i_07_i = $_len_i;
            while (1) {
              HEAP16[5428620 + ($i_07_i << 1) >> 1] = HEAP16[5428620 + ($i_07_i - 1 << 1) >> 1] | 0;
              $inc_i = $i_07_i + 1 | 0;
              if (($inc_i | 0) < 4096) {
                $i_07_i = $inc_i;
              } else {
                break L1501;
              }
            }
          }
        } while (0);
        HEAP32[1315898] = HEAPU16[2718405] | 0;
        if (($22 | 0) == 64013) {
          label = 1113;
          break;
        } else if (($22 | 0) == 6020) {
          label = 1105;
          break;
        } else {
          $wbi_3 = $wbi_2170;
          break;
        }
      } else {
        $wbi_3 = $wbi_2170;
      }
    } while (0);
    do {
      if ((label | 0) == 1105) {
        label = 0;
        do {
          if ((HEAP32[$type >> 2] | 0) == 3) {
            HEAP16[$str_i_i66 >> 1] = -1;
            $79 = HEAP32[1316053] | 0;
            _fread($12 | 0, 1, 2, $79 | 0);
            $81 = HEAP16[$str_i_i66 >> 1] | 0;
            $conv2_i_i_i70 = $81 & 255;
            $83 = ($81 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i_i79 = ($83 & 65535) << 8 | $conv2_i_i_i70;
            } else {
              $retval_0_in_i_i_i79 = $conv2_i_i_i70 << 8 | $83 & 65535;
            }
            $cond_i87 = $retval_0_in_i_i_i79 & 65535;
          } else {
            HEAP32[$str_i1_i65 >> 2] = -1;
            _fread($13 | 0, 1, 4, HEAP32[1316053] | 0);
            $87 = HEAP32[$str_i1_i65 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $cond_i87 = $87;
              break;
            }
            $cond_i87 = _llvm_bswap_i32($87 | 0) | 0;
          }
        } while (0);
        HEAPF32[1316048] = +($cond_i87 >>> 0 >>> 0);
        if (($22 | 0) == 64013) {
          label = 1113;
          break;
        } else {
          $wbi_3 = $wbi_2170;
          break;
        }
      }
    } while (0);
    if ((label | 0) == 1113) {
      label = 0;
      $wbi_3 = _fgetc(HEAP32[1316053] | 0) | 0;
    }
    do {
      if ($wbi_3 >>> 0 < 7) {
        if (($22 | 0) != (HEAP32[5246608 + ($wbi_3 << 2) >> 2] | 0)) {
          break;
        }
        HEAP32[$str_i89 >> 2] = -1;
        _fread($14 | 0, 1, 4, HEAP32[1316053] | 0);
        $92 = HEAP32[$str_i89 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i97 = $92;
        } else {
          $retval_0_i_i97 = _llvm_bswap_i32($92 | 0) | 0;
        }
        HEAPF32[1390311] = +($retval_0_i_i97 >>> 0 >>> 0);
        HEAP32[$str_i89 >> 2] = -1;
        _fread($14 | 0, 1, 4, HEAP32[1316053] | 0);
        $95 = HEAP32[$str_i89 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i97_1 = $95;
        } else {
          $retval_0_i_i97_1 = _llvm_bswap_i32($95 | 0) | 0;
        }
        HEAPF32[1390312] = +($retval_0_i_i97_1 >>> 0 >>> 0);
        HEAP32[$str_i89 >> 2] = -1;
        _fread($14 | 0, 1, 4, HEAP32[1316053] | 0);
        $127 = HEAP32[$str_i89 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i97_2 = $127;
        } else {
          $retval_0_i_i97_2 = _llvm_bswap_i32($127 | 0) | 0;
        }
        HEAPF32[1390313] = +($retval_0_i_i97_2 >>> 0 >>> 0);
      }
    } while (0);
    do {
      if (($22 | 0) == 64019) {
        do {
          if ((HEAP32[$type >> 2] | 0) == 3) {
            HEAP16[$str_i_i99 >> 1] = -1;
            $97 = HEAP32[1316053] | 0;
            _fread($15 | 0, 1, 2, $97 | 0);
            $99 = HEAP16[$str_i_i99 >> 1] | 0;
            $conv2_i_i_i103 = $99 & 255;
            $101 = ($99 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i_i112 = ($101 & 65535) << 8 | $conv2_i_i_i103;
            } else {
              $retval_0_in_i_i_i112 = $conv2_i_i_i103 << 8 | $101 & 65535;
            }
            $cond_i120 = $retval_0_in_i_i_i112 & 65535;
          } else {
            HEAP32[$str_i1_i98 >> 2] = -1;
            _fread($16 | 0, 1, 4, HEAP32[1316053] | 0);
            $105 = HEAP32[$str_i1_i98 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $cond_i120 = $105;
              break;
            }
            $cond_i120 = _llvm_bswap_i32($105 | 0) | 0;
          }
        } while (0);
        HEAP16[2621484] = $cond_i120 & 65535;
        if (($22 | 0) == 64020) {
          label = 1128;
          break;
        } else {
          break;
        }
      } else if (($22 | 0) == 64020) {
        label = 1128;
      }
    } while (0);
    if ((label | 0) == 1128) {
      label = 0;
      do {
        if ((HEAP32[$type >> 2] | 0) == 3) {
          HEAP16[$str_i_i123 >> 1] = -1;
          $107 = HEAP32[1316053] | 0;
          _fread($17 | 0, 1, 2, $107 | 0);
          $109 = HEAP16[$str_i_i123 >> 1] | 0;
          $conv2_i_i_i127 = $109 & 255;
          $111 = ($109 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i_i136 = ($111 & 65535) << 8 | $conv2_i_i_i127;
          } else {
            $retval_0_in_i_i_i136 = $conv2_i_i_i127 << 8 | $111 & 65535;
          }
          $cond_i144 = $retval_0_in_i_i_i136 & 65535;
        } else {
          HEAP32[$str_i1_i122 >> 2] = -1;
          _fread($18 | 0, 1, 4, HEAP32[1316053] | 0);
          $115 = HEAP32[$str_i1_i122 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $cond_i144 = $115;
            break;
          }
          $cond_i144 = _llvm_bswap_i32($115 | 0) | 0;
        }
      } while (0);
      HEAP16[2699404] = $cond_i144 + 1 & 65535 & -2;
    }
    _fseek(HEAP32[1316053] | 0, HEAP32[$save >> 2] | 0, 0);
    if (($dec159 | 0) == 0) {
      break;
    } else {
      $wbi_0157 = $wbi_3;
      $wbtemp_0158 = $wbtemp_1;
      $dec159_in = $dec159;
      $21 = $59;
      $20 = $58;
      $19 = $57;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_tiff($base) {
  $base = $base | 0;
  var $str_i18 = 0, $str_i3 = 0, $str_i = 0, $4 = 0, $conv2_i_i = 0, $6 = 0, $retval_0_in_i_i = 0, $retval_0_i_i = 0, $10 = 0, $13 = 0, $retval_0_i_i26 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  $str_i18 = __stackBase__ | 0;
  $str_i3 = __stackBase__ + 4 | 0;
  $str_i = __stackBase__ + 8 | 0;
  _fseek(HEAP32[1316053] | 0, $base | 0, 0);
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $4 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $4 & 255;
  $6 = ($4 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($6 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $6 & 65535;
  }
  $retval_0_i_i = $retval_0_in_i_i & 65535;
  HEAP16[2631518] = $retval_0_i_i;
  if (!(($retval_0_i_i << 16 >> 16 | 0) == 18761 | ($retval_0_i_i << 16 >> 16 | 0) == 19789)) {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  HEAP16[$str_i3 >> 1] = -1;
  _fread($str_i3 | 0, 1, 2, HEAP32[1316053] | 0);
  $10 = $str_i18;
  while (1) {
    HEAP32[$str_i18 >> 2] = -1;
    _fread($10 | 0, 1, 4, HEAP32[1316053] | 0);
    $13 = HEAP32[$str_i18 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i26 = $13;
    } else {
      $retval_0_i_i26 = _llvm_bswap_i32($13 | 0) | 0;
    }
    if (($retval_0_i_i26 | 0) == 0) {
      $retval_0 = 1;
      label = 1161;
      break;
    }
    _fseek(HEAP32[1316053] | 0, $retval_0_i_i26 + $base | 0, 0);
    if ((_parse_tiff_ifd($base) | 0) != 0) {
      $retval_0 = 1;
      label = 1162;
      break;
    }
  }
  if ((label | 0) == 1161) {
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  } else if ((label | 0) == 1162) {
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _parse_minolta($base) {
  $base = $base | 0;
  var $str_i75 = 0, $str_i54 = 0, $str_i39 = 0, $str_i30 = 0, $str_i9 = 0, $str_i = 0, $0 = 0, $9 = 0, $retval_0_i_i = 0, $add10 = 0, $call1193 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $call1197 = 0, $wide_096 = 0, $high_095 = 0, $shl_1 = 0, $shl_2 = 0, $shl_3 = 0, $or_3 = 0, $22 = 0, $retval_0_i_i28 = 0, $23 = 0, $24 = 0, $26 = 0, $conv2_i_i34 = 0, $28 = 0, $retval_0_in_i_i = 0, $32 = 0, $conv2_i_i43 = 0, $34 = 0, $retval_0_in_i_i51 = 0, $cond = 0, $39 = 0, $conv2_i_i79 = 0, $41 = 0, $retval_0_in_i_i87 = 0, $45 = 0, $conv2_i_i79_1 = 0, $47 = 0, $high_1 = 0, $wide_1 = 0, $call11 = 0, $wide_0_lcssa = 0, $high_0_lcssa = 0, $retval_0_in_i_i87_1 = 0, $54 = 0, $conv2_i_i79_2 = 0, $56 = 0, $retval_0_in_i_i87_2 = 0, $60 = 0, $conv2_i_i79_3 = 0, $62 = 0, $retval_0_in_i_i87_3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $str_i75 = __stackBase__ | 0;
  $str_i54 = __stackBase__ + 4 | 0;
  $str_i39 = __stackBase__ + 8 | 0;
  $str_i30 = __stackBase__ + 12 | 0;
  $str_i9 = __stackBase__ + 16 | 0;
  $str_i = __stackBase__ + 20 | 0;
  $0 = HEAP16[2631518] | 0;
  _fseek(HEAP32[1316053] | 0, $base | 0, 0);
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 77) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 82) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP16[2631518] = (_fgetc(HEAP32[1316053] | 0) | 0) * 257 & -1 & 65535;
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $9 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $9;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($9 | 0) | 0;
  }
  $add10 = ($base + 8 | 0) + $retval_0_i_i | 0;
  $call1193 = _ftell(HEAP32[1316053] | 0) | 0;
  L1586 : do {
    if (($call1193 | 0) < ($add10 | 0)) {
      $11 = $str_i9;
      $12 = $str_i30;
      $13 = $str_i39;
      $14 = $str_i54;
      $15 = $str_i75;
      $high_095 = 0;
      $wide_096 = 0;
      $call1197 = $call1193;
      while (1) {
        $shl_1 = _fgetc(HEAP32[1316053] | 0) << 8;
        $shl_2 = (_fgetc(HEAP32[1316053] | 0) | $shl_1) << 8;
        $shl_3 = (_fgetc(HEAP32[1316053] | 0) | $shl_2) << 8;
        $or_3 = _fgetc(HEAP32[1316053] | 0) | $shl_3;
        HEAP32[$str_i9 >> 2] = -1;
        _fread($11 | 0, 1, 4, HEAP32[1316053] | 0);
        $22 = HEAP32[$str_i9 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i28 = $22;
        } else {
          $retval_0_i_i28 = _llvm_bswap_i32($22 | 0) | 0;
        }
        if (($or_3 | 0) == 5263940) {
          $23 = HEAP32[1316053] | 0;
          _fseek($23 | 0, 8, 1);
          HEAP16[$str_i30 >> 1] = -1;
          $24 = HEAP32[1316053] | 0;
          _fread($12 | 0, 1, 2, $24 | 0);
          $26 = HEAP16[$str_i30 >> 1] | 0;
          $conv2_i_i34 = $26 & 255;
          $28 = ($26 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i = ($28 & 65535) << 8 | $conv2_i_i34;
          } else {
            $retval_0_in_i_i = $conv2_i_i34 << 8 | $28 & 65535;
          }
          HEAP16[$str_i39 >> 1] = -1;
          _fread($13 | 0, 1, 2, HEAP32[1316053] | 0);
          $32 = HEAP16[$str_i39 >> 1] | 0;
          $conv2_i_i43 = $32 & 255;
          $34 = ($32 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i51 = ($34 & 65535) << 8 | $conv2_i_i43;
          } else {
            $retval_0_in_i_i51 = $conv2_i_i43 << 8 | $34 & 65535;
          }
          $wide_1 = $retval_0_in_i_i51 & 65535;
          $high_1 = $retval_0_in_i_i & 65535;
        } else if (($or_3 | 0) == 5718599) {
          HEAP32[$str_i54 >> 2] = -1;
          _fread($14 | 0, 1, 4, HEAP32[1316053] | 0);
          $cond = (_strcmp(5263468, 5586704) | 0) != 0 ? 0 : 3;
          HEAP16[$str_i75 >> 1] = -1;
          _fread($15 | 0, 1, 2, HEAP32[1316053] | 0);
          $39 = HEAP16[$str_i75 >> 1] | 0;
          $conv2_i_i79 = $39 & 255;
          $41 = ($39 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i87 = ($41 & 65535) << 8 | $conv2_i_i79;
          } else {
            $retval_0_in_i_i87 = $conv2_i_i79 << 8 | $41 & 65535;
          }
          HEAPF32[5561244 + ($cond << 2) >> 2] = +(($retval_0_in_i_i87 & 65535) >>> 0);
          HEAP16[$str_i75 >> 1] = -1;
          _fread($15 | 0, 1, 2, HEAP32[1316053] | 0);
          $45 = HEAP16[$str_i75 >> 1] | 0;
          $conv2_i_i79_1 = $45 & 255;
          $47 = ($45 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i87_1 = ($47 & 65535) << 8 | $conv2_i_i79_1;
          } else {
            $retval_0_in_i_i87_1 = $conv2_i_i79_1 << 8 | $47 & 65535;
          }
          HEAPF32[5561244 + (($cond ^ 1) << 2) >> 2] = +(($retval_0_in_i_i87_1 & 65535) >>> 0);
          HEAP16[$str_i75 >> 1] = -1;
          _fread($15 | 0, 1, 2, HEAP32[1316053] | 0);
          $54 = HEAP16[$str_i75 >> 1] | 0;
          $conv2_i_i79_2 = $54 & 255;
          $56 = ($54 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i87_2 = ($56 & 65535) << 8 | $conv2_i_i79_2;
          } else {
            $retval_0_in_i_i87_2 = $conv2_i_i79_2 << 8 | $56 & 65535;
          }
          HEAPF32[5561244 + (($cond ^ 3) << 2) >> 2] = +(($retval_0_in_i_i87_2 & 65535) >>> 0);
          HEAP16[$str_i75 >> 1] = -1;
          _fread($15 | 0, 1, 2, HEAP32[1316053] | 0);
          $60 = HEAP16[$str_i75 >> 1] | 0;
          $conv2_i_i79_3 = $60 & 255;
          $62 = ($60 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i87_3 = ($62 & 65535) << 8 | $conv2_i_i79_3;
          } else {
            $retval_0_in_i_i87_3 = $conv2_i_i79_3 << 8 | $62 & 65535;
          }
          HEAPF32[5561244 + (($cond ^ 2) << 2) >> 2] = +(($retval_0_in_i_i87_3 & 65535) >>> 0);
          $wide_1 = $wide_096;
          $high_1 = $high_095;
        } else if (($or_3 | 0) == 5526615) {
          _parse_tiff(_ftell(HEAP32[1316053] | 0) | 0);
          HEAP32[1357153] = $add10;
          $wide_1 = $wide_096;
          $high_1 = $high_095;
        } else {
          $wide_1 = $wide_096;
          $high_1 = $high_095;
        }
        _fseek(HEAP32[1316053] | 0, ($call1197 + 8 | 0) + $retval_0_i_i28 | 0, 0);
        $call11 = _ftell(HEAP32[1316053] | 0) | 0;
        if (($call11 | 0) < ($add10 | 0)) {
          $high_095 = $high_1;
          $wide_096 = $wide_1;
          $call1197 = $call11;
        } else {
          $high_0_lcssa = $high_1;
          $wide_0_lcssa = $wide_1;
          break L1586;
        }
      }
    } else {
      $high_0_lcssa = 0;
      $wide_0_lcssa = 0;
    }
  } while (0);
  HEAP16[2622502] = $high_0_lcssa & 65535;
  HEAP16[2622498] = $wide_0_lcssa & 65535;
  HEAP16[2631518] = $0;
  STACKTOP = __stackBase__;
  return;
}
function _apply_tiff() {
  var $jh = 0, $0 = 0, $1 = 0, $5 = 0, $i_068 = 0, $raw_067 = 0, $max_samp_066 = 0, $6 = 0, $_max_samp_0 = 0, $max_samp_2 = 0, $7 = 0, $8 = 0, $9 = 0, $mul = 0, $raw_1 = 0, $inc = 0, $17 = 0, $raw_0_lcssa = 0, $max_samp_0_lcssa = 0, $tobool6262 = 0, $dec63_in = 0, $dec63 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $mul80 = 0, $27 = 0, $mul104 = 0, $_pr = 0, $conv125 = 0, $conv128 = 0, $mul129 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $i_260 = 0, $thm_059 = 0, $43 = 0, $44 = 0, $mul210 = 0, $45 = 0, $add213 = 0, $div218 = 0, $mul221 = 0, $add222 = 0, $thm_1 = 0, $inc248 = 0, $54 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  $jh = __stackBase__ | 0;
  HEAP32[1311014] = 16;
  $0 = HEAP32[1311013] | 0;
  do {
    if (($0 | 0) != 0) {
      $1 = HEAP32[1316053] | 0;
      _fseek($1 | 0, $0 | 0, 0);
      if ((_ljpeg_start($jh, 1) | 0) == 0) {
        break;
      }
      HEAP32[1311014] = HEAP32[$jh >> 2] | 0;
      HEAP16[2622024] = HEAP32[$jh + 8 >> 2] & 65535;
      HEAP16[2622034] = HEAP32[$jh + 4 >> 2] & 65535;
    }
  } while (0);
  $5 = HEAP32[1310898] | 0;
  L1629 : do {
    if (($5 | 0) == 0) {
      $max_samp_0_lcssa = 0;
      $raw_0_lcssa = -1;
      $17 = 0;
    } else {
      $max_samp_066 = 0;
      $raw_067 = -1;
      $i_068 = 0;
      while (1) {
        $6 = HEAP32[5243624 + ($i_068 * 44 & -1) >> 2] | 0;
        $_max_samp_0 = ($max_samp_066 | 0) < ($6 | 0) ? $6 : $max_samp_066;
        $max_samp_2 = ($_max_samp_0 | 0) > 3 ? 3 : $_max_samp_0;
        $7 = HEAP32[5243608 + ($i_068 * 44 & -1) >> 2] | 0;
        do {
          if (($7 | 0) == 6 & ($6 | 0) == 3) {
            $raw_1 = $raw_067;
          } else {
            $8 = HEAP32[5243596 + ($i_068 * 44 & -1) >> 2] | 0;
            $9 = HEAP32[5243600 + ($i_068 * 44 & -1) >> 2] | 0;
            if (($9 | $8 | 0) >= 65536) {
              $raw_1 = $raw_067;
              break;
            }
            $mul = Math_imul($9, $8);
            if (($mul | 0) <= (Math_imul(HEAPU16[2622502] | 0, HEAPU16[2622498] | 0) | 0)) {
              $raw_1 = $raw_067;
              break;
            }
            HEAP16[2622498] = $8 & 65535;
            HEAP16[2622502] = $9 & 65535;
            HEAP32[1311011] = HEAP32[5243604 + ($i_068 * 44 & -1) >> 2] | 0;
            HEAP32[1311010] = $7;
            HEAP32[1357153] = HEAP32[5243616 + ($i_068 * 44 & -1) >> 2] | 0;
            HEAP32[1311009] = HEAP32[5243620 + ($i_068 * 44 & -1) >> 2] | 0;
            HEAP32[1310897] = $6;
            HEAP32[1310895] = HEAP32[5243632 + ($i_068 * 44 & -1) >> 2] | 0;
            HEAP32[1310896] = HEAP32[5243636 + ($i_068 * 44 & -1) >> 2] | 0;
            $raw_1 = $i_068;
          }
        } while (0);
        $inc = $i_068 + 1 | 0;
        if ($inc >>> 0 < $5 >>> 0) {
          $max_samp_066 = $max_samp_2;
          $raw_067 = $raw_1;
          $i_068 = $inc;
        } else {
          $max_samp_0_lcssa = $max_samp_2;
          $raw_0_lcssa = $raw_1;
          $17 = $5;
          break L1629;
        }
      }
    }
  } while (0);
  if ((HEAP32[1310895] | 0) == 0) {
    HEAP32[1310895] = 2147483647;
  }
  if ((HEAP32[1310896] | 0) == 0) {
    HEAP32[1310896] = 2147483647;
  }
  $tobool6262 = ($17 | 0) == 0;
  L1644 : do {
    if (!$tobool6262) {
      $dec63_in = $17;
      while (1) {
        $dec63 = $dec63_in - 1 | 0;
        $20 = HEAP32[5243620 + ($dec63 * 44 & -1) >> 2] | 0;
        if (($20 | 0) != 0) {
          HEAP32[1311009] = $20;
        }
        if (($dec63 | 0) == 0) {
          break L1644;
        } else {
          $dec63_in = $dec63;
        }
      }
    }
  } while (0);
  L1651 : do {
    if (!(($raw_0_lcssa | 0) < 0 | (HEAP32[1315947] | 0) != 0)) {
      $22 = HEAP32[1311010] | 0;
      do {
        if (($22 | 0) == 32769) {
          $27 = (HEAP32[1315948] | 0) + 1 | 0;
          label = 1226;
          break;
        } else if (($22 | 0) == 32767) {
          $23 = HEAP32[5243628 + ($raw_0_lcssa * 44 & -1) >> 2] | 0;
          $25 = HEAP16[2622502] | 0;
          $mul80 = Math_imul($25 & 65535, HEAPU16[2622498] | 0);
          if (($23 | 0) == ($mul80 | 0)) {
            HEAP32[1311011] = 12;
            HEAP32[1315947] = 38;
            break L1651;
          }
          if (($23 << 3 | 0) == (Math_imul(HEAP32[1311011] | 0, $mul80) | 0)) {
            HEAP32[1315948] = 79;
            $27 = 80;
            label = 1226;
            break;
          } else {
            HEAP16[2622502] = $25 + 8 & 65535;
            HEAP32[1315947] = 94;
            break L1651;
          }
        } else if (($22 | 0) == 0 | ($22 | 0) == 1) {
          $mul104 = (HEAP32[5243628 + ($raw_0_lcssa * 44 & -1) >> 2] | 0) * 5 & -1;
          if (($mul104 | 0) != (Math_imul((HEAPU16[2622498] | 0) << 3, HEAPU16[2622502] | 0) | 0)) {
            label = 1229;
            break;
          }
          HEAP32[1315948] = 81;
          HEAP32[1311011] = 12;
          break;
        } else if (($22 | 0) == 32770 | ($22 | 0) == 32773) {
          label = 1229;
        } else if (($22 | 0) == 6 | ($22 | 0) == 7 | ($22 | 0) == 99) {
          HEAP32[1315947] = 46;
          break L1651;
        } else if (($22 | 0) == 262) {
          HEAP32[1315947] = 34;
          break L1651;
        } else if (($22 | 0) == 34713) {
          $conv125 = HEAPU16[2622498] | 0;
          $conv128 = HEAPU16[2622502] | 0;
          $mul129 = Math_imul((($conv125 + 9 | 0) >>> 0) / 10 >>> 0 << 4, $conv128);
          $34 = HEAP32[5243628 + ($raw_0_lcssa * 44 & -1) >> 2] | 0;
          if (($mul129 | 0) == ($34 | 0)) {
            HEAP32[1315947] = 36;
            HEAP32[1315948] = 1;
            break L1651;
          }
          if ((Math_imul($conv125 << 1, $conv128) | 0) == ($34 | 0)) {
            HEAP32[1315947] = 4;
            HEAP32[1315948] = 4;
            HEAP16[2631518] = 19789;
            break L1651;
          } else {
            HEAP32[1315947] = 16;
            break L1651;
          }
        } else if (($22 | 0) == 34892) {
          HEAP32[1315947] = 92;
          break L1651;
        } else if (($22 | 0) == 65535) {
          HEAP32[1315947] = 86;
          break L1651;
        } else if (($22 | 0) == 65e3) {
          $35 = HEAP32[5243612 + ($raw_0_lcssa * 44 & -1) >> 2] | 0;
          if (($35 | 0) == 2) {
            HEAP32[1315947] = 88;
            HEAP32[1356938] = 0;
            break L1651;
          } else if (($35 | 0) == 6) {
            HEAP32[1315947] = 8;
            HEAP32[1356938] = 0;
            break L1651;
          } else if (($35 | 0) == 32803) {
            HEAP32[1315947] = 54;
            break L1651;
          } else {
            break L1651;
          }
        } else if (($22 | 0) == 32867) {
          break L1651;
        } else {
          HEAP32[1316049] = 0;
          break L1651;
        }
      } while (0);
      do {
        if ((label | 0) == 1226) {
          HEAP32[1315948] = $27;
          label = 1229;
          break;
        }
      } while (0);
      do {
        if ((label | 0) == 1229) {
          $_pr = HEAP32[1311011] | 0;
          if (($_pr | 0) == 8) {
            HEAP32[1315947] = 24;
            break L1651;
          } else if (($_pr | 0) == 12) {
            break;
          } else if (($_pr | 0) == 14) {
            HEAP32[1315948] = 0;
          } else if (($_pr | 0) != 16) {
            break L1651;
          }
          HEAP32[1315947] = 4;
          break L1651;
        }
      } while (0);
      if ((HEAP32[5243612 + ($raw_0_lcssa * 44 & -1) >> 2] | 0) == 2) {
        HEAP32[1315948] = 6;
      }
      HEAP32[1315947] = 36;
    }
  } while (0);
  do {
    if ((HEAP32[1357024] | 0) == 0) {
      do {
        if ((HEAP32[1310897] | 0) == 3) {
          $39 = HEAP32[1311011] | 0;
          $40 = HEAP32[1311010] | 0;
          if ((HEAP32[5243628 + ($raw_0_lcssa * 44 & -1) >> 2] | 0) != 0 & ($39 | 0) != 14 & ($39 | 0) != 2048 & ($40 | 0) != 32769 & ($40 | 0) != 32770) {
            break;
          } else {
            $41 = $39;
            label = 1254;
            break;
          }
        } else {
          $41 = HEAP32[1311011] | 0;
          label = 1254;
          break;
        }
      } while (0);
      if ((label | 0) == 1254) {
        if (($41 | 0) != 8) {
          break;
        }
        if ((_strstr(5263724, 5586764) | 0) != 0) {
          break;
        }
        if ((_strstr(5263724, 5586756) | 0) != 0) {
          break;
        }
        if ((_strstr(5263404, 5586744) | 0) != 0) {
          break;
        }
      }
      HEAP32[1316049] = 0;
    }
  } while (0);
  if ($tobool6262) {
    STACKTOP = __stackBase__;
    return;
  } else {
    $thm_059 = -1;
    $i_260 = 0;
  }
  while (1) {
    do {
      if (($i_260 | 0) == ($raw_0_lcssa | 0)) {
        $thm_1 = $thm_059;
      } else {
        if ((HEAP32[5243624 + ($i_260 * 44 & -1) >> 2] | 0) != ($max_samp_0_lcssa | 0)) {
          $thm_1 = $thm_059;
          break;
        }
        $43 = HEAP32[5243596 + ($i_260 * 44 & -1) >> 2] | 0;
        $44 = HEAP32[5243600 + ($i_260 * 44 & -1) >> 2] | 0;
        $mul210 = Math_imul($44, $43);
        $45 = HEAP32[5243604 + ($i_260 * 44 & -1) >> 2] | 0;
        $add213 = $45 + 1 | 0;
        $div218 = ($mul210 | 0) / (Math_imul($add213, $add213) | 0) & -1;
        $mul221 = Math_imul(HEAPU16[2622034] | 0, HEAPU16[2622024] | 0);
        $add222 = (HEAP32[1311014] | 0) + 1 | 0;
        if ($div218 >>> 0 <= ($mul221 >>> 0) / (Math_imul($add222, $add222) >>> 0) >>> 0 >>> 0) {
          $thm_1 = $thm_059;
          break;
        }
        if ((HEAP32[5243608 + ($i_260 * 44 & -1) >> 2] | 0) == 34892) {
          $thm_1 = $thm_059;
          break;
        }
        HEAP16[2622024] = $43 & 65535;
        HEAP16[2622034] = $44 & 65535;
        HEAP32[1311013] = HEAP32[5243616 + ($i_260 * 44 & -1) >> 2] | 0;
        HEAP32[1311016] = HEAP32[5243628 + ($i_260 * 44 & -1) >> 2] | 0;
        HEAP32[1311014] = $45;
        $thm_1 = $i_260;
      }
    } while (0);
    $inc248 = $i_260 + 1 | 0;
    if ($inc248 >>> 0 < $17 >>> 0) {
      $thm_059 = $thm_1;
      $i_260 = $inc248;
    } else {
      break;
    }
  }
  if (($thm_1 | 0) <= -1) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1311014] = HEAP32[1311014] | HEAP32[5243624 + ($thm_1 * 44 & -1) >> 2] << 5;
  $54 = HEAP32[5243608 + ($thm_1 * 44 & -1) >> 2] | 0;
  if (($54 | 0) == 0) {
    HEAP32[1310740] = 50;
    STACKTOP = __stackBase__;
    return;
  } else if (($54 | 0) == 1) {
    if ((HEAP32[5243604 + ($thm_1 * 44 & -1) >> 2] | 0) < 9) {
      HEAP32[1310740] = 68;
      STACKTOP = __stackBase__;
      return;
    }
    if ((_strcmp(5263724, 5586824) | 0) == 0) {
      HEAP32[1310740] = 78;
      STACKTOP = __stackBase__;
      return;
    } else {
      HEAP32[1311015] = 28;
      STACKTOP = __stackBase__;
      return;
    }
  } else if (($54 | 0) == 65e3) {
    HEAP32[1311015] = (HEAP32[5243612 + ($thm_1 * 44 & -1) >> 2] | 0) == 6 ? 8 : 88;
    STACKTOP = __stackBase__;
    return;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}
function _ciff_block_1030() {
  var $str_i59 = 0, $str_i44 = 0, $str_i23 = 0, $str_i14 = 0, $str_i = 0, $5 = 0, $retval_0_i_i22 = 0, $9 = 0, $retval_0_i_i42 = 0, $13 = 0, $conv2_i_i48 = 0, $15 = 0, $retval_0_in_i_i56 = 0, $retval_0_i_i57 = 0, $conv = 0, $17 = 0, $sub24 = 0, $bitbuf_081 = 0, $vbits_080 = 0, $row_079 = 0, $i_078 = 0, $bitbuf_177 = 0, $vbits_176 = 0, $col_075 = 0, $i_174 = 0, $shl = 0, $18 = 0, $20 = 0, $conv2_i_i63 = 0, $22 = 0, $retval_0_in_i_i71 = 0, $i_2 = 0, $vbits_2 = 0, $bitbuf_2 = 0, $sub28 = 0, $inc29 = 0, $inc31 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  $str_i59 = __stackBase__ | 0;
  $str_i44 = __stackBase__ + 4 | 0;
  $str_i23 = __stackBase__ + 8 | 0;
  $str_i14 = __stackBase__ + 12 | 0;
  $str_i = __stackBase__ + 16 | 0;
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  HEAP32[$str_i14 >> 2] = -1;
  _fread($str_i14 | 0, 1, 4, HEAP32[1316053] | 0);
  $5 = HEAP32[$str_i14 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i22 = $5;
  } else {
    $retval_0_i_i22 = _llvm_bswap_i32($5 | 0) | 0;
  }
  if (($retval_0_i_i22 | 0) != 524296) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[$str_i23 >> 2] = -1;
  _fread($str_i23 | 0, 1, 4, HEAP32[1316053] | 0);
  $9 = HEAP32[$str_i23 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i42 = $9;
  } else {
    $retval_0_i_i42 = _llvm_bswap_i32($9 | 0) | 0;
  }
  if (($retval_0_i_i42 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP16[$str_i44 >> 1] = -1;
  _fread($str_i44 | 0, 1, 2, HEAP32[1316053] | 0);
  $13 = HEAP16[$str_i44 >> 1] | 0;
  $conv2_i_i48 = $13 & 255;
  $15 = ($13 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i56 = ($15 & 65535) << 8 | $conv2_i_i48;
  } else {
    $retval_0_in_i_i56 = $conv2_i_i48 << 8 | $15 & 65535;
  }
  $retval_0_i_i57 = $retval_0_in_i_i56 & 65535;
  $conv = $retval_0_in_i_i56 & 65535;
  if (!(($retval_0_i_i57 << 16 >> 16 | 0) == 12 | ($retval_0_i_i57 << 16 >> 16 | 0) == 10)) {
    STACKTOP = __stackBase__;
    return;
  }
  $17 = $str_i59;
  $sub24 = 32 - $conv | 0;
  $i_078 = 0;
  $row_079 = 0;
  $vbits_080 = 0;
  $bitbuf_081 = 0;
  while (1) {
    $i_174 = $i_078;
    $col_075 = 0;
    $vbits_176 = $vbits_080;
    $bitbuf_177 = $bitbuf_081;
    while (1) {
      if (($vbits_176 | 0) < ($conv | 0)) {
        $shl = $bitbuf_177 << 16;
        HEAP16[$str_i59 >> 1] = -1;
        $18 = HEAP32[1316053] | 0;
        _fread($17 | 0, 1, 2, $18 | 0);
        $20 = HEAP16[$str_i59 >> 1] | 0;
        $conv2_i_i63 = $20 & 255;
        $22 = ($20 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i71 = ($22 & 65535) << 8 | $conv2_i_i63;
        } else {
          $retval_0_in_i_i71 = $conv2_i_i63 << 8 | $22 & 65535;
        }
        $bitbuf_2 = (HEAP16[5561012 + (($i_174 & 1) << 1) >> 1] ^ $retval_0_in_i_i71 & 65535) & 65535 | $shl;
        $vbits_2 = $vbits_176 + 16 | 0;
        $i_2 = $i_174 + 1 | 0;
      } else {
        $bitbuf_2 = $bitbuf_177;
        $vbits_2 = $vbits_176;
        $i_2 = $i_174;
      }
      HEAP16[5242972 + ($row_079 << 4) + ($col_075 << 1) >> 1] = $bitbuf_2 << 32 - $vbits_2 >>> ($sub24 >>> 0) & 65535;
      $sub28 = $vbits_2 - $conv | 0;
      $inc29 = $col_075 + 1 | 0;
      if (($inc29 | 0) == 8) {
        break;
      } else {
        $i_174 = $i_2;
        $col_075 = $inc29;
        $vbits_176 = $sub28;
        $bitbuf_177 = $bitbuf_2;
      }
    }
    $inc31 = $row_079 + 1 | 0;
    if (($inc31 | 0) == 8) {
      break;
    } else {
      $i_078 = $i_2;
      $row_079 = $inc31;
      $vbits_080 = $sub28;
      $bitbuf_081 = $bitbuf_2;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_external_jpeg() {
  var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $file_1 = 0, $incdec_ptr = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_rhs_cast = 0, $call13 = 0, $2 = 0, $3 = 0, $sub_ptr_rhs_cast16 = 0, $sub_ptr_sub17 = 0, $add_ptr18 = 0, $sub_ptr_sub21 = 0, $incdec_ptr3629 = 0, $6 = 0, $add_ptr22 = 0, $cond = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $incdec_ptr3633 = 0, $incdec_ptr36 = 0, $16 = 0, $call49 = 0, $19 = 0, $22 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = HEAP32[1316053] | 0;
  $1 = HEAP32[1316054] | 0;
  $call = _strrchr($1 | 0, 46) | 0;
  $call1 = _strrchr($1 | 0, 47) | 0;
  if (($call1 | 0) == 0) {
    $call2 = _strrchr($1 | 0, 92) | 0;
    $file_1 = ($call2 | 0) == 0 ? $1 - 1 | 0 : $call2;
  } else {
    $file_1 = $call1;
  }
  $incdec_ptr = $file_1 + 1 | 0;
  if (($call | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((_strlen($call) | 0) != 4) {
    STACKTOP = __stackBase__;
    return;
  }
  $sub_ptr_lhs_cast = $call;
  $sub_ptr_rhs_cast = $incdec_ptr;
  if (($sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0) != 8) {
    STACKTOP = __stackBase__;
    return;
  }
  $call13 = _malloc((_strlen($1) | 0) + 1 | 0) | 0;
  if (($call13 | 0) == 0) {
    $2 = HEAP32[_stderr >> 2] | 0;
    $3 = HEAP32[1316054] | 0;
    _fprintf($2 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, HEAP32[tempInt + 4 >> 2] = 5586680, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  _strcpy($call13 | 0, HEAP32[1316054] | 0);
  $sub_ptr_rhs_cast16 = HEAP32[1316054] | 0;
  $sub_ptr_sub17 = $sub_ptr_rhs_cast - $sub_ptr_rhs_cast16 | 0;
  $add_ptr18 = $call13 + $sub_ptr_sub17 | 0;
  $sub_ptr_sub21 = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast16 | 0;
  L1785 : do {
    if ((_strcasecmp($call | 0, 5586672) | 0) == 0) {
      $incdec_ptr3629 = $call13 + ($sub_ptr_sub21 - 1 | 0) | 0;
      $6 = HEAP8[$incdec_ptr3629] | 0;
      if ((($6 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
        $incdec_ptr3633 = $incdec_ptr3629;
        $15 = $6;
      } else {
        break;
      }
      while (1) {
        if ($15 << 24 >> 24 != 57) {
          break;
        }
        HEAP8[$incdec_ptr3633] = 48;
        $incdec_ptr36 = $incdec_ptr3633 - 1 | 0;
        $16 = HEAP8[$incdec_ptr36] | 0;
        if ((($16 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
          $incdec_ptr3633 = $incdec_ptr36;
          $15 = $16;
        } else {
          break L1785;
        }
      }
      HEAP8[$incdec_ptr3633] = $15 + 1 & 255;
    } else {
      $add_ptr22 = $call13 + $sub_ptr_sub21 | 0;
      $cond = (_isupper(HEAP8[$call + 1 | 0] << 24 >> 24 | 0) | 0) != 0 ? 5586664 : 5586672;
      HEAP8[$add_ptr22] = HEAP8[$cond] | 0;
      HEAP8[$add_ptr22 + 1 | 0] = HEAP8[$cond + 1 | 0] | 0;
      HEAP8[$add_ptr22 + 2 | 0] = HEAP8[$cond + 2 | 0] | 0;
      HEAP8[$add_ptr22 + 3 | 0] = HEAP8[$cond + 3 | 0] | 0;
      HEAP8[$add_ptr22 + 4 | 0] = HEAP8[$cond + 4 | 0] | 0;
      if (((HEAP8[$incdec_ptr] << 24 >> 24) - 48 | 0) >>> 0 >= 10) {
        break;
      }
      $9 = $file_1 + 5 | 0;
      $10 = $add_ptr18;
      tempBigInt = HEAPU8[$9] | HEAPU8[$9 + 1 | 0] << 8 | HEAPU8[$9 + 2 | 0] << 16 | HEAPU8[$9 + 3 | 0] << 24 | 0;
      HEAP8[$10] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$10 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$10 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$10 + 3 | 0] = tempBigInt & 255;
      $12 = $incdec_ptr;
      $13 = $call13 + ($sub_ptr_sub17 + 4 | 0) | 0;
      tempBigInt = HEAPU8[$12] | HEAPU8[$12 + 1 | 0] << 8 | HEAPU8[$12 + 2 | 0] << 16 | HEAPU8[$12 + 3 | 0] << 24 | 0;
      HEAP8[$13] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$13 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$13 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$13 + 3 | 0] = tempBigInt & 255;
    }
  } while (0);
  do {
    if ((_strcmp($call13 | 0, HEAP32[1316054] | 0) | 0) != 0) {
      $call49 = _fopen($call13 | 0, 5579128) | 0;
      HEAP32[1316053] = $call49;
      if (($call49 | 0) == 0) {
        break;
      }
      if ((HEAP32[1310884] | 0) != 0) {
        $19 = HEAP32[_stderr >> 2] | 0;
        _fprintf($19 | 0, 5586632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call13, tempInt) | 0);
      }
      _parse_tiff(12);
      HEAP32[1311013] = 0;
      HEAP32[1316049] = 1;
      _fclose(HEAP32[1316053] | 0);
    }
  } while (0);
  if ((HEAP32[1310894] | 0) == 0) {
    $22 = HEAP32[_stderr >> 2] | 0;
    _fprintf($22 | 0, 5586596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call13, tempInt) | 0);
  }
  _free($call13);
  HEAP32[1316053] = $0;
  STACKTOP = __stackBase__;
  return;
}
function _parse_ciff($offset, $length) {
  $offset = $offset | 0;
  $length = $length | 0;
  var $str_i515 = 0, $str_i500 = 0, $str_i485 = 0, $str_i470 = 0, $str_i455 = 0, $str_i440 = 0, $str_i425 = 0, $str_i410 = 0, $str_i395 = 0, $str_i380 = 0, $str_i365 = 0, $str_i350 = 0, $str_i335 = 0, $str_i320 = 0, $str_i305 = 0, $str_i290 = 0, $str_i269 = 0, $str_i254 = 0, $str_i233 = 0, $str_i212 = 0, $str_i191 = 0, $str_i170 = 0, $str_i149 = 0, $str_i128 = 0, $str_i107 = 0, $str_i86 = 0, $str_i71 = 0, $str_i62 = 0, $str_i = 0, $4 = 0, $retval_0_i_i = 0, $9 = 0, $conv2_i_i66 = 0, $11 = 0, $retval_0_in_i_i = 0, $conv = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $dec554_in = 0, $wbi_0553 = 0, $dec554 = 0, $44 = 0, $conv2_i_i75 = 0, $46 = 0, $retval_0_in_i_i83 = 0, $retval_0_i_i84 = 0, $50 = 0, $retval_0_i_i105 = 0, $add10 = 0, $52 = 0, $54 = 0, $retval_0_i_i126 = 0, $58 = 0, $63 = 0, $retval_0_i_i168 = 0, $64 = 0, $66 = 0, $retval_0_i_i189 = 0, $71 = 0, $retval_0_i_i231 = 0, $75 = 0, $retval_0_i_i252 = 0, $80 = 0, $conv2_i_i294 = 0, $82 = 0, $retval_0_in_i_i302 = 0, $87 = 0, $conv2_i_i324 = 0, $89 = 0, $retval_0_in_i_i332 = 0, $93 = 0, $conv2_i_i339 = 0, $95 = 0, $retval_0_in_i_i347 = 0, $100 = 0, $conv2_i_i369 = 0, $102 = 0, $retval_0_in_i_i377 = 0, $_conv88 = 0, $108 = 0, $conv2_i_i384 = 0, $110 = 0, $retval_0_in_i_i392 = 0, $wbi_2 = 0, $112 = 0, $114 = 0, $conv2_i_i399 = 0, $116 = 0, $retval_0_in_i_i407 = 0, $118 = 0, $119 = 0, $121 = 0, $conv2_i_i414 = 0, $123 = 0, $retval_0_in_i_i422 = 0, $127 = 0, $conv2_i_i414_1 = 0, $129 = 0, $132 = 0, $conv2_i_i429 = 0, $134 = 0, $retval_0_in_i_i437 = 0, $138 = 0, $conv2_i_i429_1 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $conv2_i_i444 = 0, $146 = 0, $retval_0_in_i_i452 = 0, $150 = 0, $conv2_i_i444_1 = 0, $152 = 0, $156 = 0, $conv2_i_i459 = 0, $158 = 0, $retval_0_in_i_i467 = 0, $162 = 0, $163 = 0, $c_3 = 0, $167 = 0, $conv2_i_i474 = 0, $169 = 0, $retval_0_in_i_i482 = 0, $173 = 0, $conv2_i_i474_1 = 0, $175 = 0, $176 = 0, $177 = 0, $wbi_2535 = 0, $178 = 0, $179 = 0, $wbi_2534 = 0, $wbi_3 = 0, $184 = 0, $conv2_i_i489 = 0, $186 = 0, $retval_0_in_i_i497 = 0, $190 = 0, $conv2_i_i489_1 = 0, $192 = 0, $193 = 0, $194 = 0, $wbi_4 = 0, $198 = 0, $conv2_i_i519 = 0, $200 = 0, $retval_0_in_i_i527 = 0, $204 = 0, $conv2_i_i258 = 0, $206 = 0, $retval_0_in_i_i266 = 0, $conv252 = 0.0, $212 = 0, $retval_0_i_i147 = 0, $213 = 0, $214 = 0, $wbi_4537 = 0, $retval_0_in_i_i437_1 = 0, $219 = 0, $conv2_i_i429_2 = 0, $221 = 0, $retval_0_in_i_i437_2 = 0, $225 = 0, $conv2_i_i429_3 = 0, $227 = 0, $retval_0_in_i_i437_3 = 0, $retval_0_in_i_i422_1 = 0, $232 = 0, $conv2_i_i414_2 = 0, $234 = 0, $retval_0_in_i_i422_2 = 0, $238 = 0, $conv2_i_i414_3 = 0, $240 = 0, $retval_0_in_i_i422_3 = 0, $retval_0_in_i_i482_1 = 0, $245 = 0, $conv2_i_i474_2 = 0, $247 = 0, $retval_0_in_i_i482_2 = 0, $251 = 0, $conv2_i_i474_3 = 0, $253 = 0, $retval_0_in_i_i482_3 = 0, $retval_0_in_i_i452_1 = 0, $258 = 0, $conv2_i_i444_2 = 0, $260 = 0, $retval_0_in_i_i452_2 = 0, $264 = 0, $conv2_i_i444_3 = 0, $266 = 0, $retval_0_in_i_i452_3 = 0, $retval_0_in_i_i497_1 = 0, $271 = 0, $conv2_i_i489_2 = 0, $273 = 0, $retval_0_in_i_i497_2 = 0, $277 = 0, $conv2_i_i489_3 = 0, $279 = 0, $retval_0_in_i_i497_3 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 116 | 0;
  $str_i515 = __stackBase__ | 0;
  $str_i500 = __stackBase__ + 4 | 0;
  $str_i485 = __stackBase__ + 8 | 0;
  $str_i470 = __stackBase__ + 12 | 0;
  $str_i455 = __stackBase__ + 16 | 0;
  $str_i440 = __stackBase__ + 20 | 0;
  $str_i425 = __stackBase__ + 24 | 0;
  $str_i410 = __stackBase__ + 28 | 0;
  $str_i395 = __stackBase__ + 32 | 0;
  $str_i380 = __stackBase__ + 36 | 0;
  $str_i365 = __stackBase__ + 40 | 0;
  $str_i350 = __stackBase__ + 44 | 0;
  $str_i335 = __stackBase__ + 48 | 0;
  $str_i320 = __stackBase__ + 52 | 0;
  $str_i305 = __stackBase__ + 56 | 0;
  $str_i290 = __stackBase__ + 60 | 0;
  $str_i269 = __stackBase__ + 64 | 0;
  $str_i254 = __stackBase__ + 68 | 0;
  $str_i233 = __stackBase__ + 72 | 0;
  $str_i212 = __stackBase__ + 76 | 0;
  $str_i191 = __stackBase__ + 80 | 0;
  $str_i170 = __stackBase__ + 84 | 0;
  $str_i149 = __stackBase__ + 88 | 0;
  $str_i128 = __stackBase__ + 92 | 0;
  $str_i107 = __stackBase__ + 96 | 0;
  $str_i86 = __stackBase__ + 100 | 0;
  $str_i71 = __stackBase__ + 104 | 0;
  $str_i62 = __stackBase__ + 108 | 0;
  $str_i = __stackBase__ + 112 | 0;
  _fseek(HEAP32[1316053] | 0, ($offset - 4 | 0) + $length | 0, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  _fseek(HEAP32[1316053] | 0, $retval_0_i_i + $offset | 0, 0);
  HEAP16[$str_i62 >> 1] = -1;
  _fread($str_i62 | 0, 1, 2, HEAP32[1316053] | 0);
  $9 = HEAP16[$str_i62 >> 1] | 0;
  $conv2_i_i66 = $9 & 255;
  $11 = ($9 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($11 & 65535) << 8 | $conv2_i_i66;
  } else {
    $retval_0_in_i_i = $conv2_i_i66 << 8 | $11 & 65535;
  }
  $conv = $retval_0_in_i_i & 65535;
  if (($retval_0_in_i_i & 65535) > 100 | ($conv | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $13 = $str_i71;
  $14 = $str_i86;
  $15 = $str_i107;
  $16 = $str_i500;
  $17 = $str_i515;
  $18 = $str_i254;
  $19 = $str_i128;
  $20 = $str_i395;
  $21 = $str_i410;
  $22 = $str_i425;
  $23 = $str_i440;
  $24 = $str_i455;
  $25 = $str_i470;
  $26 = $str_i485;
  $27 = $str_i149;
  $28 = $str_i170;
  $29 = $str_i191;
  $30 = $str_i212;
  $31 = $str_i233;
  $32 = $str_i269;
  $33 = $str_i290;
  $34 = $str_i305;
  $35 = $str_i320;
  $36 = $str_i335;
  $37 = $str_i350;
  $38 = $str_i365;
  $39 = $str_i380;
  $wbi_0553 = -1;
  $dec554_in = $conv;
  $41 = 1040;
  $40 = 17907;
  while (1) {
    $dec554 = $dec554_in - 1 | 0;
    HEAP16[$str_i71 >> 1] = -1;
    _fread($13 | 0, 1, 2, HEAP32[1316053] | 0);
    $44 = HEAP16[$str_i71 >> 1] | 0;
    $conv2_i_i75 = $44 & 255;
    $46 = ($44 & 65535) >>> 8;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_in_i_i83 = ($46 & 65535) << 8 | $conv2_i_i75;
    } else {
      $retval_0_in_i_i83 = $conv2_i_i75 << 8 | $46 & 65535;
    }
    $retval_0_i_i84 = $retval_0_in_i_i83 & 65535;
    HEAP32[$str_i86 >> 2] = -1;
    _fread($14 | 0, 1, 4, HEAP32[1316053] | 0);
    $50 = HEAP32[$str_i86 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i105 = $50;
    } else {
      $retval_0_i_i105 = _llvm_bswap_i32($50 | 0) | 0;
    }
    $add10 = (_ftell(HEAP32[1316053] | 0) | 0) + 4 | 0;
    $52 = HEAP32[1316053] | 0;
    HEAP32[$str_i107 >> 2] = -1;
    _fread($15 | 0, 1, 4, $52 | 0);
    $54 = HEAP32[$str_i107 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i126 = $54;
    } else {
      $retval_0_i_i126 = _llvm_bswap_i32($54 | 0) | 0;
    }
    _fseek($52 | 0, $retval_0_i_i126 + $offset | 0, 0);
    if ((($retval_0_in_i_i83 >>> 8 & 255) + 8 | 8 | 0) == 56) {
      _parse_ciff(_ftell(HEAP32[1316053] | 0) | 0, $retval_0_i_i105);
    }
    do {
      if (($retval_0_i_i84 << 16 >> 16 | 0) == 6197) {
        HEAP32[$str_i170 >> 2] = -1;
        $64 = HEAP32[1316053] | 0;
        _fread($28 | 0, 1, 4, $64 | 0);
        $66 = HEAP32[$str_i170 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i189 = $66;
        } else {
          $retval_0_i_i189 = _llvm_bswap_i32($66 | 0) | 0;
        }
        HEAP32[1311010] = $retval_0_i_i189;
        $wbi_2 = $wbi_0553;
        label = 1383;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 8199) {
        HEAP32[1311013] = _ftell(HEAP32[1316053] | 0) | 0;
        HEAP32[1311016] = $retval_0_i_i105;
        $wbi_4537 = $wbi_0553;
        $214 = $41;
        $213 = $40;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 6168) {
        HEAP32[$str_i191 >> 2] = -1;
        _fread($29 | 0, 1, 4, HEAP32[1316053] | 0);
        HEAP32[$str_i212 >> 2] = -1;
        _fread($30 | 0, 1, 4, HEAP32[1316053] | 0);
        $71 = HEAP32[$str_i212 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i231 = $71;
        } else {
          $retval_0_i_i231 = _llvm_bswap_i32($71 | 0) | 0;
        }
        HEAPF32[1311229] = +_exp2(+(0.0 - (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i231, +HEAPF32[tempDoublePtr >> 2])));
        HEAP32[$str_i233 >> 2] = -1;
        _fread($31 | 0, 1, 4, HEAP32[1316053] | 0);
        $75 = HEAP32[$str_i233 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i252 = $75;
        } else {
          $retval_0_i_i252 = _llvm_bswap_i32($75 | 0) | 0;
        }
        HEAPF32[1390397] = +_exp2(+((HEAP32[tempDoublePtr >> 2] = $retval_0_i_i252, +HEAPF32[tempDoublePtr >> 2]) * .5));
        $wbi_2 = $wbi_0553;
        label = 1383;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 4138) {
        HEAP32[$str_i269 >> 2] = -1;
        _fread($32 | 0, 1, 4, HEAP32[1316053] | 0);
        HEAP16[$str_i290 >> 1] = -1;
        _fread($33 | 0, 1, 2, HEAP32[1316053] | 0);
        $80 = HEAP16[$str_i290 >> 1] | 0;
        $conv2_i_i294 = $80 & 255;
        $82 = ($80 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i302 = ($82 & 65535) << 8 | $conv2_i_i294;
        } else {
          $retval_0_in_i_i302 = $conv2_i_i294 << 8 | $82 & 65535;
        }
        HEAPF32[1316048] = +_exp2(+(+($retval_0_in_i_i302 & 65535 | 0) * .03125 + -4.0)) * 50.0;
        HEAP16[$str_i305 >> 1] = -1;
        _fread($34 | 0, 1, 2, HEAP32[1316053] | 0);
        HEAP16[$str_i320 >> 1] = -1;
        _fread($35 | 0, 1, 2, HEAP32[1316053] | 0);
        $87 = HEAP16[$str_i320 >> 1] | 0;
        $conv2_i_i324 = $87 & 255;
        $89 = ($87 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i332 = ($89 & 65535) << 8 | $conv2_i_i324;
        } else {
          $retval_0_in_i_i332 = $conv2_i_i324 << 8 | $89 & 65535;
        }
        HEAPF32[1390397] = +_exp2(+(+(($retval_0_in_i_i332 & 65535) << 16 >> 16 | 0) * .015625));
        HEAP16[$str_i335 >> 1] = -1;
        _fread($36 | 0, 1, 2, HEAP32[1316053] | 0);
        $93 = HEAP16[$str_i335 >> 1] | 0;
        $conv2_i_i339 = $93 & 255;
        $95 = ($93 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i347 = ($95 & 65535) << 8 | $conv2_i_i339;
        } else {
          $retval_0_in_i_i347 = $conv2_i_i339 << 8 | $95 & 65535;
        }
        HEAPF32[1311229] = +_exp2(+(+(-($retval_0_in_i_i347 << 16 >> 16) | 0) * .03125));
        HEAP16[$str_i350 >> 1] = -1;
        _fread($37 | 0, 1, 2, HEAP32[1316053] | 0);
        HEAP16[$str_i365 >> 1] = -1;
        _fread($38 | 0, 1, 2, HEAP32[1316053] | 0);
        $100 = HEAP16[$str_i365 >> 1] | 0;
        $conv2_i_i369 = $100 & 255;
        $102 = ($100 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i377 = ($102 & 65535) << 8 | $conv2_i_i369;
        } else {
          $retval_0_in_i_i377 = $conv2_i_i369 << 8 | $102 & 65535;
        }
        $_conv88 = ($retval_0_in_i_i377 & 65535) > 17 ? 0 : $retval_0_in_i_i377 & 65535;
        _fseek(HEAP32[1316053] | 0, 32, 1);
        if (+HEAPF32[1311229] <= 1.0e6) {
          $wbi_2 = $_conv88;
          label = 1383;
          break;
        }
        HEAP16[$str_i380 >> 1] = -1;
        _fread($39 | 0, 1, 2, HEAP32[1316053] | 0);
        $108 = HEAP16[$str_i380 >> 1] | 0;
        $conv2_i_i384 = $108 & 255;
        $110 = ($108 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i392 = ($110 & 65535) << 8 | $conv2_i_i384;
        } else {
          $retval_0_in_i_i392 = $conv2_i_i384 << 8 | $110 & 65535;
        }
        HEAPF32[1311229] = +($retval_0_in_i_i392 & 65535 | 0) / 10.0;
        $wbi_2 = $_conv88;
        label = 1383;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 6160) {
        _fseek(HEAP32[1316053] | 0, 12, 1);
        HEAP32[$str_i149 >> 2] = -1;
        _fread($27 | 0, 1, 4, HEAP32[1316053] | 0);
        $63 = HEAP32[$str_i149 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i168 = $63;
        } else {
          $retval_0_i_i168 = _llvm_bswap_i32($63 | 0) | 0;
        }
        HEAP32[1350792] = $retval_0_i_i168;
        $wbi_2 = $wbi_0553;
        label = 1383;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 2058) {
        _fread(5263724, 64, 1, HEAP32[1316053] | 0);
        $58 = HEAP32[1316053] | 0;
        _fseek($58 | 0, (_strlen(5263724) | 0) - 63 | 0, 1);
        _fread(5263468, 64, 1, HEAP32[1316053] | 0);
        $wbi_4537 = $wbi_0553;
        $214 = $41;
        $213 = $40;
        break;
      } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 2064) {
        _fread(5561524, 64, 1, HEAP32[1316053] | 0);
        $wbi_4537 = $wbi_0553;
        $214 = $41;
        $213 = $40;
        break;
      } else {
        $wbi_2 = $wbi_0553;
        label = 1383;
      }
    } while (0);
    L1872 : do {
      if ((label | 0) == 1383) {
        label = 0;
        do {
          if (($retval_0_i_i84 << 16 >> 16 | 0) == 4140) {
            HEAP16[$str_i395 >> 1] = -1;
            $112 = HEAP32[1316053] | 0;
            _fread($20 | 0, 1, 2, $112 | 0);
            $114 = HEAP16[$str_i395 >> 1] | 0;
            $conv2_i_i399 = $114 & 255;
            $116 = ($114 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i407 = ($116 & 65535) << 8 | $conv2_i_i399;
            } else {
              $retval_0_in_i_i407 = $conv2_i_i399 << 8 | $116 & 65535;
            }
            $118 = HEAP32[1316053] | 0;
            if (($retval_0_in_i_i407 & 65535) > 512) {
              _fseek($118 | 0, 118, 1);
              HEAP16[$str_i410 >> 1] = -1;
              $119 = HEAP32[1316053] | 0;
              _fread($21 | 0, 1, 2, $119 | 0);
              $121 = HEAP16[$str_i410 >> 1] | 0;
              $conv2_i_i414 = $121 & 255;
              $123 = ($121 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i422 = ($123 & 65535) << 8 | $conv2_i_i414;
              } else {
                $retval_0_in_i_i422 = $conv2_i_i414 << 8 | $123 & 65535;
              }
              HEAPF32[1390313] = +(($retval_0_in_i_i422 & 65535) >>> 0);
              HEAP16[$str_i410 >> 1] = -1;
              _fread($21 | 0, 1, 2, HEAP32[1316053] | 0);
              $127 = HEAP16[$str_i410 >> 1] | 0;
              $conv2_i_i414_1 = $127 & 255;
              $129 = ($127 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i422_1 = ($129 & 65535) << 8 | $conv2_i_i414_1;
              } else {
                $retval_0_in_i_i422_1 = $conv2_i_i414_1 << 8 | $129 & 65535;
              }
              HEAPF32[1390314] = +(($retval_0_in_i_i422_1 & 65535) >>> 0);
              HEAP16[$str_i410 >> 1] = -1;
              _fread($21 | 0, 1, 2, HEAP32[1316053] | 0);
              $232 = HEAP16[$str_i410 >> 1] | 0;
              $conv2_i_i414_2 = $232 & 255;
              $234 = ($232 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i422_2 = ($234 & 65535) << 8 | $conv2_i_i414_2;
              } else {
                $retval_0_in_i_i422_2 = $conv2_i_i414_2 << 8 | $234 & 65535;
              }
              HEAPF32[1390311] = +(($retval_0_in_i_i422_2 & 65535) >>> 0);
              HEAP16[$str_i410 >> 1] = -1;
              _fread($21 | 0, 1, 2, HEAP32[1316053] | 0);
              $238 = HEAP16[$str_i410 >> 1] | 0;
              $conv2_i_i414_3 = $238 & 255;
              $240 = ($238 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i422_3 = ($240 & 65535) << 8 | $conv2_i_i414_3;
              } else {
                $retval_0_in_i_i422_3 = $conv2_i_i414_3 << 8 | $240 & 65535;
              }
              HEAPF32[1390312] = +(($retval_0_in_i_i422_3 & 65535) >>> 0);
              $wbi_4 = $wbi_2;
              $194 = $41;
              $193 = $40;
              break;
            } else {
              _fseek($118 | 0, 98, 1);
              HEAP16[$str_i425 >> 1] = -1;
              _fread($22 | 0, 1, 2, HEAP32[1316053] | 0);
              $132 = HEAP16[$str_i425 >> 1] | 0;
              $conv2_i_i429 = $132 & 255;
              $134 = ($132 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i437 = ($134 & 65535) << 8 | $conv2_i_i429;
              } else {
                $retval_0_in_i_i437 = $conv2_i_i429 << 8 | $134 & 65535;
              }
              HEAPF32[1390312] = +(($retval_0_in_i_i437 & 65535) >>> 0);
              HEAP16[$str_i425 >> 1] = -1;
              _fread($22 | 0, 1, 2, HEAP32[1316053] | 0);
              $138 = HEAP16[$str_i425 >> 1] | 0;
              $conv2_i_i429_1 = $138 & 255;
              $140 = ($138 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i437_1 = ($140 & 65535) << 8 | $conv2_i_i429_1;
              } else {
                $retval_0_in_i_i437_1 = $conv2_i_i429_1 << 8 | $140 & 65535;
              }
              HEAPF32[1390311] = +(($retval_0_in_i_i437_1 & 65535) >>> 0);
              HEAP16[$str_i425 >> 1] = -1;
              _fread($22 | 0, 1, 2, HEAP32[1316053] | 0);
              $219 = HEAP16[$str_i425 >> 1] | 0;
              $conv2_i_i429_2 = $219 & 255;
              $221 = ($219 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i437_2 = ($221 & 65535) << 8 | $conv2_i_i429_2;
              } else {
                $retval_0_in_i_i437_2 = $conv2_i_i429_2 << 8 | $221 & 65535;
              }
              HEAPF32[1390313] = +(($retval_0_in_i_i437_2 & 65535) >>> 0);
              HEAP16[$str_i425 >> 1] = -1;
              _fread($22 | 0, 1, 2, HEAP32[1316053] | 0);
              $225 = HEAP16[$str_i425 >> 1] | 0;
              $conv2_i_i429_3 = $225 & 255;
              $227 = ($225 & 65535) >>> 8;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_in_i_i437_3 = ($227 & 65535) << 8 | $conv2_i_i429_3;
              } else {
                $retval_0_in_i_i437_3 = $conv2_i_i429_3 << 8 | $227 & 65535;
              }
              HEAPF32[1390314] = +(($retval_0_in_i_i437_3 & 65535) >>> 0);
              $wbi_4 = $wbi_2;
              $194 = $41;
              $193 = $40;
              break;
            }
          } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 4265) {
            $wbi_2534 = $wbi_2;
            $179 = $41;
            $178 = $40;
            label = 1415;
          } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 50) {
            do {
              if (($retval_0_i_i105 | 0) == 768) {
                $141 = HEAP32[1316053] | 0;
                _fseek($141 | 0, 72, 1);
                HEAP16[$str_i440 >> 1] = -1;
                $142 = HEAP32[1316053] | 0;
                _fread($23 | 0, 1, 2, $142 | 0);
                $144 = HEAP16[$str_i440 >> 1] | 0;
                $conv2_i_i444 = $144 & 255;
                $146 = ($144 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i452 = ($146 & 65535) << 8 | $conv2_i_i444;
                } else {
                  $retval_0_in_i_i452 = $conv2_i_i444 << 8 | $146 & 65535;
                }
                HEAPF32[1390311] = 1024.0 / +($retval_0_in_i_i452 & 65535 | 0);
                HEAP16[$str_i440 >> 1] = -1;
                _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
                $150 = HEAP16[$str_i440 >> 1] | 0;
                $conv2_i_i444_1 = $150 & 255;
                $152 = ($150 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i452_1 = ($152 & 65535) << 8 | $conv2_i_i444_1;
                } else {
                  $retval_0_in_i_i452_1 = $conv2_i_i444_1 << 8 | $152 & 65535;
                }
                HEAPF32[1390312] = 1024.0 / +($retval_0_in_i_i452_1 & 65535 | 0);
                HEAP16[$str_i440 >> 1] = -1;
                _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
                $258 = HEAP16[$str_i440 >> 1] | 0;
                $conv2_i_i444_2 = $258 & 255;
                $260 = ($258 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i452_2 = ($260 & 65535) << 8 | $conv2_i_i444_2;
                } else {
                  $retval_0_in_i_i452_2 = $conv2_i_i444_2 << 8 | $260 & 65535;
                }
                HEAPF32[1390314] = 1024.0 / +($retval_0_in_i_i452_2 & 65535 | 0);
                HEAP16[$str_i440 >> 1] = -1;
                _fread($23 | 0, 1, 2, HEAP32[1316053] | 0);
                $264 = HEAP16[$str_i440 >> 1] | 0;
                $conv2_i_i444_3 = $264 & 255;
                $266 = ($264 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i452_3 = ($266 & 65535) << 8 | $conv2_i_i444_3;
                } else {
                  $retval_0_in_i_i452_3 = $conv2_i_i444_3 << 8 | $266 & 65535;
                }
                HEAPF32[1390313] = 1024.0 / +($retval_0_in_i_i452_3 & 65535 | 0);
                if (($wbi_2 | 0) != 0) {
                  $wbi_2535 = $wbi_2;
                  $177 = $41;
                  $176 = $40;
                  break;
                }
                HEAPF32[1390311] = -1.0;
                $wbi_2535 = 0;
                $177 = $41;
                $176 = $40;
              } else {
                if (+HEAPF32[1390311] != 0.0) {
                  $wbi_4537 = $wbi_2;
                  $214 = $41;
                  $213 = $40;
                  break L1872;
                }
                HEAP16[$str_i455 >> 1] = -1;
                _fread($24 | 0, 1, 2, HEAP32[1316053] | 0);
                $156 = HEAP16[$str_i455 >> 1] | 0;
                $conv2_i_i459 = $156 & 255;
                $158 = ($156 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i467 = ($158 & 65535) << 8 | $conv2_i_i459;
                } else {
                  $retval_0_in_i_i467 = $conv2_i_i459 << 8 | $158 & 65535;
                }
                if (($retval_0_in_i_i467 & 65535) << 16 >> 16 == $41 << 16 >> 16) {
                  $c_3 = (HEAP8[((_strstr(5263468, 5586588) | 0) != 0 ? 5586568 : 5586548) + $wbi_2 | 0] << 24 >> 24) - 46 | 0;
                  $163 = $41;
                  $162 = $40;
                } else {
                  $c_3 = (HEAP8[$wbi_2 + 5586528 | 0] << 24 >> 24) - 48 | 0;
                  $163 = 0;
                  $162 = 0;
                }
                _fseek(HEAP32[1316053] | 0, ($c_3 << 3) + 78 | 0, 1);
                HEAP16[$str_i470 >> 1] = -1;
                _fread($25 | 0, 1, 2, HEAP32[1316053] | 0);
                $167 = HEAP16[$str_i470 >> 1] | 0;
                $conv2_i_i474 = $167 & 255;
                $169 = ($167 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i482 = ($169 & 65535) << 8 | $conv2_i_i474;
                } else {
                  $retval_0_in_i_i482 = $conv2_i_i474 << 8 | $169 & 65535;
                }
                HEAPF32[1390312] = +(($163 ^ $retval_0_in_i_i482 & 65535) & 65535 | 0);
                HEAP16[$str_i470 >> 1] = -1;
                _fread($25 | 0, 1, 2, HEAP32[1316053] | 0);
                $173 = HEAP16[$str_i470 >> 1] | 0;
                $conv2_i_i474_1 = $173 & 255;
                $175 = ($173 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i482_1 = ($175 & 65535) << 8 | $conv2_i_i474_1;
                } else {
                  $retval_0_in_i_i482_1 = $conv2_i_i474_1 << 8 | $175 & 65535;
                }
                HEAPF32[1390311] = +(($162 ^ $retval_0_in_i_i482_1 & 65535) & 65535 | 0);
                HEAP16[$str_i470 >> 1] = -1;
                _fread($25 | 0, 1, 2, HEAP32[1316053] | 0);
                $245 = HEAP16[$str_i470 >> 1] | 0;
                $conv2_i_i474_2 = $245 & 255;
                $247 = ($245 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i482_2 = ($247 & 65535) << 8 | $conv2_i_i474_2;
                } else {
                  $retval_0_in_i_i482_2 = $conv2_i_i474_2 << 8 | $247 & 65535;
                }
                HEAPF32[1390313] = +(($163 ^ $retval_0_in_i_i482_2 & 65535) & 65535 | 0);
                HEAP16[$str_i470 >> 1] = -1;
                _fread($25 | 0, 1, 2, HEAP32[1316053] | 0);
                $251 = HEAP16[$str_i470 >> 1] | 0;
                $conv2_i_i474_3 = $251 & 255;
                $253 = ($251 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i482_3 = ($253 & 65535) << 8 | $conv2_i_i474_3;
                } else {
                  $retval_0_in_i_i482_3 = $conv2_i_i474_3 << 8 | $253 & 65535;
                }
                HEAPF32[1390314] = +(($162 ^ $retval_0_in_i_i482_3 & 65535) & 65535 | 0);
                if (($wbi_2 | 0) != 0) {
                  $wbi_2535 = $wbi_2;
                  $177 = $163;
                  $176 = $162;
                  break;
                }
                HEAPF32[1390311] = -1.0;
                $wbi_2535 = 0;
                $177 = $163;
                $176 = $162;
              }
            } while (0);
            if ($retval_0_i_i84 << 16 >> 16 == 4265) {
              $wbi_2534 = $wbi_2535;
              $179 = $177;
              $178 = $176;
              label = 1415;
              break;
            } else {
              $wbi_4 = $wbi_2535;
              $194 = $177;
              $193 = $176;
              break;
            }
          } else {
            $wbi_4 = $wbi_2;
            $194 = $41;
            $193 = $40;
          }
        } while (0);
        if ((label | 0) == 1415) {
          label = 0;
          if (($retval_0_i_i105 | 0) > 66) {
            $wbi_3 = (HEAP8[$wbi_2534 + 5586496 | 0] << 24 >> 24) - 48 | 0;
          } else {
            $wbi_3 = $wbi_2534;
          }
          _fseek(HEAP32[1316053] | 0, $wbi_3 << 3 | 2 | 0, 1);
          HEAP16[$str_i485 >> 1] = -1;
          _fread($26 | 0, 1, 2, HEAP32[1316053] | 0);
          $184 = HEAP16[$str_i485 >> 1] | 0;
          $conv2_i_i489 = $184 & 255;
          $186 = ($184 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i497 = ($186 & 65535) << 8 | $conv2_i_i489;
          } else {
            $retval_0_in_i_i497 = $conv2_i_i489 << 8 | $186 & 65535;
          }
          HEAPF32[1390311] = +(($retval_0_in_i_i497 & 65535) >>> 0);
          HEAP16[$str_i485 >> 1] = -1;
          _fread($26 | 0, 1, 2, HEAP32[1316053] | 0);
          $190 = HEAP16[$str_i485 >> 1] | 0;
          $conv2_i_i489_1 = $190 & 255;
          $192 = ($190 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i497_1 = ($192 & 65535) << 8 | $conv2_i_i489_1;
          } else {
            $retval_0_in_i_i497_1 = $conv2_i_i489_1 << 8 | $192 & 65535;
          }
          HEAPF32[1390312] = +(($retval_0_in_i_i497_1 & 65535) >>> 0);
          HEAP16[$str_i485 >> 1] = -1;
          _fread($26 | 0, 1, 2, HEAP32[1316053] | 0);
          $271 = HEAP16[$str_i485 >> 1] | 0;
          $conv2_i_i489_2 = $271 & 255;
          $273 = ($271 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i497_2 = ($273 & 65535) << 8 | $conv2_i_i489_2;
          } else {
            $retval_0_in_i_i497_2 = $conv2_i_i489_2 << 8 | $273 & 65535;
          }
          HEAPF32[1390314] = +(($retval_0_in_i_i497_2 & 65535) >>> 0);
          HEAP16[$str_i485 >> 1] = -1;
          _fread($26 | 0, 1, 2, HEAP32[1316053] | 0);
          $277 = HEAP16[$str_i485 >> 1] | 0;
          $conv2_i_i489_3 = $277 & 255;
          $279 = ($277 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i497_3 = ($279 & 65535) << 8 | $conv2_i_i489_3;
          } else {
            $retval_0_in_i_i497_3 = $conv2_i_i489_3 << 8 | $279 & 65535;
          }
          HEAPF32[1390313] = +(($retval_0_in_i_i497_3 & 65535) >>> 0);
          $wbi_4 = $wbi_3;
          $194 = $179;
          $193 = $178;
        }
        if (($retval_0_i_i84 << 16 >> 16 | 0) == 20521) {
          $conv252 = +($retval_0_i_i105 >> 16 | 0);
          HEAPF32[1350791] = $conv252;
          if (($retval_0_i_i105 & 65535 | 0) != 2) {
            $wbi_4537 = $wbi_4;
            $214 = $194;
            $213 = $193;
            break;
          }
          HEAPF32[1350791] = $conv252 * .03125;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 22547) {
          HEAPF32[1350793] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i105, +HEAPF32[tempDoublePtr >> 2]);
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 22548) {
          HEAPF32[1390260] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i105, +HEAPF32[tempDoublePtr >> 2]);
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 22551) {
          HEAP32[1311232] = $retval_0_i_i105;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 22580) {
          HEAP32[1310892] = $retval_0_i_i105;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 22542) {
          HEAP32[1310894] = $retval_0_i_i105;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 6158) {
          HEAP32[$str_i128 >> 2] = -1;
          _fread($19 | 0, 1, 4, HEAP32[1316053] | 0);
          $212 = HEAP32[$str_i128 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i147 = $212;
          } else {
            $retval_0_i_i147 = _llvm_bswap_i32($212 | 0) | 0;
          }
          HEAP32[1310894] = $retval_0_i_i147;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 4144) {
          if ((98368 >>> ($wbi_4 >>> 0) & 1 | 0) == 0) {
            $wbi_4537 = $wbi_4;
            $214 = $194;
            $213 = $193;
            break;
          }
          _ciff_block_1030();
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else if (($retval_0_i_i84 << 16 >> 16 | 0) == 4145) {
          HEAP16[$str_i500 >> 1] = -1;
          _fread($16 | 0, 1, 2, HEAP32[1316053] | 0);
          HEAP16[$str_i515 >> 1] = -1;
          _fread($17 | 0, 1, 2, HEAP32[1316053] | 0);
          $198 = HEAP16[$str_i515 >> 1] | 0;
          $conv2_i_i519 = $198 & 255;
          $200 = ($198 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i527 = ($200 & 65535) << 8 | $conv2_i_i519;
          } else {
            $retval_0_in_i_i527 = $conv2_i_i519 << 8 | $200 & 65535;
          }
          HEAP16[2622498] = $retval_0_in_i_i527 & 65535;
          HEAP16[$str_i254 >> 1] = -1;
          _fread($18 | 0, 1, 2, HEAP32[1316053] | 0);
          $204 = HEAP16[$str_i254 >> 1] | 0;
          $conv2_i_i258 = $204 & 255;
          $206 = ($204 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i266 = ($206 & 65535) << 8 | $conv2_i_i258;
          } else {
            $retval_0_in_i_i266 = $conv2_i_i258 << 8 | $206 & 65535;
          }
          HEAP16[2622502] = $retval_0_in_i_i266 & 65535;
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        } else {
          $wbi_4537 = $wbi_4;
          $214 = $194;
          $213 = $193;
          break;
        }
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, $add10 | 0, 0);
    if (($dec554 | 0) == 0) {
      break;
    } else {
      $wbi_0553 = $wbi_4537;
      $dec554_in = $dec554;
      $41 = $214;
      $40 = $213;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_rollei() {
  var $line = 0, $t = 0, $arraydecay = 0, $tm_mday = 0, $tm_mon = 0, $tm_year = 0, $tm_hour = 0, $tm_min = 0, $tm_sec = 0, $call3 = 0, $val_0 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 172 | 0;
  $line = __stackBase__ | 0;
  $t = __stackBase__ + 128 | 0;
  _fseek(HEAP32[1316053] | 0, 0, 0);
  _memset($t | 0, 0, 44);
  $arraydecay = $line | 0;
  $tm_mday = $t + 12 | 0;
  $tm_mon = $t + 16 | 0;
  $tm_year = $t + 20 | 0;
  $tm_hour = $t + 8 | 0;
  $tm_min = $t + 4 | 0;
  $tm_sec = $t | 0;
  while (1) {
    _fgets($arraydecay | 0, 128, HEAP32[1316053] | 0);
    $call3 = _strchr($arraydecay | 0, 61) | 0;
    if (($call3 | 0) == 0) {
      $val_0 = $line + (_strlen($arraydecay) | 0) | 0;
    } else {
      HEAP8[$call3] = 0;
      $val_0 = $call3 + 1 | 0;
    }
    if ((_strcmp($arraydecay | 0, 5586492) | 0) == 0) {
      _sscanf($val_0 | 0, 5579132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $tm_mday, HEAP32[tempInt + 4 >> 2] = $tm_mon, HEAP32[tempInt + 8 >> 2] = $tm_year, tempInt) | 0);
    }
    if ((_strcmp($arraydecay | 0, 5586488) | 0) == 0) {
      _sscanf($val_0 | 0, 5586476, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $tm_hour, HEAP32[tempInt + 4 >> 2] = $tm_min, HEAP32[tempInt + 8 >> 2] = $tm_sec, tempInt) | 0);
    }
    if ((_strcmp($arraydecay | 0, 5586472) | 0) == 0) {
      HEAP32[1311013] = _atoi($val_0 | 0) | 0;
    }
    if ((_strcmp($arraydecay | 0, 5586468) | 0) == 0) {
      HEAP16[2622498] = _atoi($val_0 | 0) & 65535;
    }
    if ((_strcmp($arraydecay | 0, 5586464) | 0) == 0) {
      HEAP16[2622502] = _atoi($val_0 | 0) & 65535;
    }
    if ((_strcmp($arraydecay | 0, 5586460) | 0) == 0) {
      HEAP16[2622024] = _atoi($val_0 | 0) & 65535;
    }
    if ((_strcmp($arraydecay | 0, 5586456) | 0) == 0) {
      HEAP16[2622034] = _atoi($val_0 | 0) & 65535;
    }
    if ((_strncmp($arraydecay | 0, 5586448, 4) | 0) == 0) {
      break;
    }
  }
  $3 = HEAP32[1311013] | 0;
  HEAP32[1357153] = Math_imul((HEAPU16[2622024] | 0) << 1, HEAPU16[2622034] | 0) + $3 | 0;
  HEAP32[$tm_year >> 2] = (HEAP32[$tm_year >> 2] | 0) - 1900 | 0;
  HEAP32[$tm_mon >> 2] = (HEAP32[$tm_mon >> 2] | 0) - 1 | 0;
  if ((_mktime($t | 0) | 0) <= 0) {
    HEAP8[5263724] = HEAP8[5586416] | 0;
    HEAP8[5263725 | 0] = HEAP8[5586417 | 0] | 0;
    HEAP8[5263726 | 0] = HEAP8[5586418 | 0] | 0;
    HEAP8[5263727 | 0] = HEAP8[5586419 | 0] | 0;
    HEAP8[5263728 | 0] = HEAP8[5586420 | 0] | 0;
    HEAP8[5263729 | 0] = HEAP8[5586421 | 0] | 0;
    HEAP8[5263730 | 0] = HEAP8[5586422 | 0] | 0;
    _memcpy(5263468, 5586404, 9);
    HEAP32[1310740] = 56;
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1310894] = _mktime($t | 0) | 0;
  HEAP8[5263724] = HEAP8[5586416] | 0;
  HEAP8[5263725 | 0] = HEAP8[5586417 | 0] | 0;
  HEAP8[5263726 | 0] = HEAP8[5586418 | 0] | 0;
  HEAP8[5263727 | 0] = HEAP8[5586419 | 0] | 0;
  HEAP8[5263728 | 0] = HEAP8[5586420 | 0] | 0;
  HEAP8[5263729 | 0] = HEAP8[5586421 | 0] | 0;
  HEAP8[5263730 | 0] = HEAP8[5586422 | 0] | 0;
  _memcpy(5263468, 5586404, 9);
  HEAP32[1310740] = 56;
  STACKTOP = __stackBase__;
  return;
}
function _parse_sinar_ia() {
  var $str_i127 = 0, $str_i112 = 0, $str_i91 = 0, $str_i76 = 0, $str_i67 = 0, $str_i46 = 0, $str_i25 = 0, $str_i4 = 0, $str_i = 0, $4 = 0, $retval_0_i_i = 0, $5 = 0, $8 = 0, $retval_0_i_i23 = 0, $9 = 0, $10 = 0, $arraydecay = 0, $dec144_in = 0, $dec144 = 0, $13 = 0, $retval_0_i_i44 = 0, $call22 = 0, $add_ptr = 0, $22 = 0, $conv2_i_i71 = 0, $24 = 0, $retval_0_in_i_i = 0, $29 = 0, $conv2_i_i80 = 0, $31 = 0, $retval_0_in_i_i88 = 0, $38 = 0, $conv2_i_i116 = 0, $40 = 0, $retval_0_in_i_i124 = 0, $45 = 0, $conv2_i_i131 = 0, $47 = 0, $retval_0_in_i_i139 = 0, $retval_0_i_i140 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  $str_i127 = __stackBase__ | 0;
  $str_i112 = __stackBase__ + 4 | 0;
  $str_i91 = __stackBase__ + 8 | 0;
  $str_i76 = __stackBase__ + 12 | 0;
  $str_i67 = __stackBase__ + 16 | 0;
  $str_i46 = __stackBase__ + 20 | 0;
  $str_i25 = __stackBase__ + 24 | 0;
  $str_i4 = __stackBase__ + 28 | 0;
  $str_i = __stackBase__ + 32 | 0;
  HEAP16[2631518] = 18761;
  _fseek(HEAP32[1316053] | 0, 4, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  $5 = HEAP32[1316053] | 0;
  HEAP32[$str_i4 >> 2] = -1;
  _fread($str_i4 | 0, 1, 4, $5 | 0);
  $8 = HEAP32[$str_i4 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i23 = $8;
  } else {
    $retval_0_i_i23 = _llvm_bswap_i32($8 | 0) | 0;
  }
  _fseek($5 | 0, $retval_0_i_i23 | 0, 0);
  L2050 : do {
    if (($retval_0_i_i | 0) != 0) {
      $9 = $str_i25;
      $10 = $str_i46;
      $arraydecay = __stackBase__ + 36 | 0;
      $dec144_in = $retval_0_i_i;
      while (1) {
        $dec144 = $dec144_in - 1 | 0;
        HEAP32[$str_i25 >> 2] = -1;
        _fread($9 | 0, 1, 4, HEAP32[1316053] | 0);
        $13 = HEAP32[$str_i25 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i44 = $13;
        } else {
          $retval_0_i_i44 = _llvm_bswap_i32($13 | 0) | 0;
        }
        HEAP32[$str_i46 >> 2] = -1;
        _fread($10 | 0, 1, 4, HEAP32[1316053] | 0);
        _fread($arraydecay | 0, 8, 1, HEAP32[1316053] | 0);
        if ((_strcmp($arraydecay | 0, 5586396) | 0) == 0) {
          HEAP32[1315884] = $retval_0_i_i44;
        }
        if ((_strcmp($arraydecay | 0, 5586388) | 0) == 0) {
          HEAP32[1311013] = $retval_0_i_i44;
        }
        if ((_strcmp($arraydecay | 0, 5586380) | 0) == 0) {
          HEAP32[1357153] = $retval_0_i_i44;
        }
        if (($dec144 | 0) == 0) {
          break L2050;
        } else {
          $dec144_in = $dec144;
        }
      }
    }
  } while (0);
  _fseek(HEAP32[1316053] | 0, (HEAP32[1315884] | 0) + 20 | 0, 0);
  _fread(5263724, 64, 1, HEAP32[1316053] | 0);
  HEAP8[5263787] = 0;
  $call22 = _strchr(5263724, 32) | 0;
  if (($call22 | 0) != 0) {
    $add_ptr = $call22 + 1 | 0;
    _strcpy(5263468, $add_ptr | 0);
    HEAP8[$call22] = 0;
  }
  HEAP16[$str_i67 >> 1] = -1;
  _fread($str_i67 | 0, 1, 2, HEAP32[1316053] | 0);
  $22 = HEAP16[$str_i67 >> 1] | 0;
  $conv2_i_i71 = $22 & 255;
  $24 = ($22 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($24 & 65535) << 8 | $conv2_i_i71;
  } else {
    $retval_0_in_i_i = $conv2_i_i71 << 8 | $24 & 65535;
  }
  HEAP16[2622498] = $retval_0_in_i_i & 65535;
  HEAP16[$str_i76 >> 1] = -1;
  _fread($str_i76 | 0, 1, 2, HEAP32[1316053] | 0);
  $29 = HEAP16[$str_i76 >> 1] | 0;
  $conv2_i_i80 = $29 & 255;
  $31 = ($29 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i88 = ($31 & 65535) << 8 | $conv2_i_i80;
  } else {
    $retval_0_in_i_i88 = $conv2_i_i80 << 8 | $31 & 65535;
  }
  HEAP16[2622502] = $retval_0_in_i_i88 & 65535;
  HEAP32[1315947] = 4;
  HEAP32[$str_i91 >> 2] = -1;
  _fread($str_i91 | 0, 1, 4, HEAP32[1316053] | 0);
  HEAP16[$str_i112 >> 1] = -1;
  _fread($str_i112 | 0, 1, 2, HEAP32[1316053] | 0);
  $38 = HEAP16[$str_i112 >> 1] | 0;
  $conv2_i_i116 = $38 & 255;
  $40 = ($38 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i124 = ($40 & 65535) << 8 | $conv2_i_i116;
  } else {
    $retval_0_in_i_i124 = $conv2_i_i116 << 8 | $40 & 65535;
  }
  HEAP16[2622024] = $retval_0_in_i_i124 & 65535;
  HEAP16[$str_i127 >> 1] = -1;
  _fread($str_i127 | 0, 1, 2, HEAP32[1316053] | 0);
  $45 = HEAP16[$str_i127 >> 1] | 0;
  $conv2_i_i131 = $45 & 255;
  $47 = ($45 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i139 = ($47 & 65535) << 8 | $conv2_i_i131;
    $retval_0_i_i140 = $retval_0_in_i_i139 & 65535;
    HEAP16[2622034] = $retval_0_i_i140;
    HEAP32[1310740] = 68;
    HEAP32[1315898] = 16383;
    STACKTOP = __stackBase__;
    return;
  } else {
    $retval_0_in_i_i139 = $conv2_i_i131 << 8 | $47 & 65535;
    $retval_0_i_i140 = $retval_0_in_i_i139 & 65535;
    HEAP16[2622034] = $retval_0_i_i140;
    HEAP32[1310740] = 68;
    HEAP32[1315898] = 16383;
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_phase_one($base) {
  $base = $base | 0;
  var $str_i132_i196 = 0, $str_i132_i = 0, $str_i175 = 0, $str_i154 = 0, $str_i133 = 0, $str_i112 = 0, $str_i91 = 0, $str_i70 = 0, $str_i49 = 0, $str_i28 = 0, $str_i = 0, $romm_cam = 0, $4 = 0, $retval_0_i_i = 0, $8 = 0, $retval_0_i_i47 = 0, $9 = 0, $12 = 0, $retval_0_i_i68 = 0, $16 = 0, $retval_0_i_i89 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $arrayidx11_i = 0, $arrayidx11_1_i = 0, $arrayidx11_2_i = 0, $arrayidx11_116_i = 0, $arrayidx11_1_1_i = 0, $arrayidx11_2_1_i = 0, $arrayidx11_219_i = 0, $arrayidx11_1_2_i = 0, $arrayidx11_2_2_i = 0, $dec236_in = 0, $dec236 = 0, $27 = 0, $retval_0_i_i131 = 0, $31 = 0, $retval_0_i_i173 = 0, $34 = 0, $retval_0_i_i194 = 0, $call12 = 0, $add13 = 0, $37 = 0, $39 = 0, $i_0232 = 0, $43 = 0, $retval_0_i_i151_i = 0, $inc = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $retval_0_i_i151_i210 = 0, $57 = 0, $call65 = 0, $conv76 = 0, $retval_0_i_i151_i210_1 = 0, $67 = 0, $retval_0_i_i151_i210_2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  $str_i132_i196 = __stackBase__ | 0;
  $str_i132_i = __stackBase__ + 4 | 0;
  $str_i175 = __stackBase__ + 8 | 0;
  $str_i154 = __stackBase__ + 12 | 0;
  $str_i133 = __stackBase__ + 16 | 0;
  $str_i112 = __stackBase__ + 20 | 0;
  $str_i91 = __stackBase__ + 24 | 0;
  $str_i70 = __stackBase__ + 28 | 0;
  $str_i49 = __stackBase__ + 32 | 0;
  $str_i28 = __stackBase__ + 36 | 0;
  $str_i = __stackBase__ + 40 | 0;
  $romm_cam = __stackBase__ + 44 | 0;
  HEAP32[1311446] = 0;
  HEAP32[1311447] = 0;
  HEAP32[1311448] = 0;
  HEAP32[1311449] = 0;
  HEAP32[1311450] = 0;
  HEAP32[1311451] = 0;
  HEAP32[1311452] = 0;
  _fseek(HEAP32[1316053] | 0, $base | 0, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  HEAP16[2631518] = $retval_0_i_i & 65535;
  HEAP32[$str_i28 >> 2] = -1;
  _fread($str_i28 | 0, 1, 4, HEAP32[1316053] | 0);
  $8 = HEAP32[$str_i28 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i47 = $8;
  } else {
    $retval_0_i_i47 = _llvm_bswap_i32($8 | 0) | 0;
  }
  if (($retval_0_i_i47 & -256 | 0) != 1382119168) {
    STACKTOP = __stackBase__;
    return;
  }
  $9 = HEAP32[1316053] | 0;
  HEAP32[$str_i49 >> 2] = -1;
  _fread($str_i49 | 0, 1, 4, $9 | 0);
  $12 = HEAP32[$str_i49 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i68 = $12;
  } else {
    $retval_0_i_i68 = _llvm_bswap_i32($12 | 0) | 0;
  }
  _fseek($9 | 0, $retval_0_i_i68 + $base | 0, 0);
  HEAP32[$str_i70 >> 2] = -1;
  _fread($str_i70 | 0, 1, 4, HEAP32[1316053] | 0);
  $16 = HEAP32[$str_i70 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i89 = $16;
  } else {
    $retval_0_i_i89 = _llvm_bswap_i32($16 | 0) | 0;
  }
  HEAP32[$str_i91 >> 2] = -1;
  _fread($str_i91 | 0, 1, 4, HEAP32[1316053] | 0);
  L2103 : do {
    if (($retval_0_i_i89 | 0) != 0) {
      $19 = $str_i112;
      $20 = $str_i133;
      $21 = $str_i154;
      $22 = $str_i175;
      $23 = $str_i132_i196;
      $24 = $str_i132_i;
      $arrayidx11_i = $romm_cam | 0;
      $arrayidx11_1_i = $romm_cam + 12 | 0;
      $arrayidx11_2_i = $romm_cam + 24 | 0;
      $arrayidx11_116_i = $romm_cam + 4 | 0;
      $arrayidx11_1_1_i = $romm_cam + 16 | 0;
      $arrayidx11_2_1_i = $romm_cam + 28 | 0;
      $arrayidx11_219_i = $romm_cam + 8 | 0;
      $arrayidx11_1_2_i = $romm_cam + 20 | 0;
      $arrayidx11_2_2_i = $romm_cam + 32 | 0;
      $dec236_in = $retval_0_i_i89;
      while (1) {
        $dec236 = $dec236_in - 1 | 0;
        HEAP32[$str_i112 >> 2] = -1;
        _fread($19 | 0, 1, 4, HEAP32[1316053] | 0);
        $27 = HEAP32[$str_i112 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i131 = $27;
        } else {
          $retval_0_i_i131 = _llvm_bswap_i32($27 | 0) | 0;
        }
        HEAP32[$str_i133 >> 2] = -1;
        _fread($20 | 0, 1, 4, HEAP32[1316053] | 0);
        HEAP32[$str_i154 >> 2] = -1;
        _fread($21 | 0, 1, 4, HEAP32[1316053] | 0);
        $31 = HEAP32[$str_i154 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i173 = $31;
        } else {
          $retval_0_i_i173 = _llvm_bswap_i32($31 | 0) | 0;
        }
        HEAP32[$str_i175 >> 2] = -1;
        _fread($22 | 0, 1, 4, HEAP32[1316053] | 0);
        $34 = HEAP32[$str_i175 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i194 = $34;
        } else {
          $retval_0_i_i194 = _llvm_bswap_i32($34 | 0) | 0;
        }
        $call12 = _ftell(HEAP32[1316053] | 0) | 0;
        $add13 = $retval_0_i_i194 + $base | 0;
        _fseek(HEAP32[1316053] | 0, $add13 | 0, 0);
        do {
          if (($retval_0_i_i131 | 0) == 263) {
            HEAP32[$str_i132_i196 >> 2] = -1;
            $37 = HEAP32[1316053] | 0;
            _fread($23 | 0, 1, 4, $37 | 0);
            $39 = HEAP32[$str_i132_i196 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i210 = $39;
            } else {
              $retval_0_i_i151_i210 = _llvm_bswap_i32($39 | 0) | 0;
            }
            HEAPF32[1390311] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i210, +HEAPF32[tempDoublePtr >> 2]);
            HEAP32[$str_i132_i196 >> 2] = -1;
            _fread($23 | 0, 1, 4, HEAP32[1316053] | 0);
            $57 = HEAP32[$str_i132_i196 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i210_1 = $57;
            } else {
              $retval_0_i_i151_i210_1 = _llvm_bswap_i32($57 | 0) | 0;
            }
            HEAPF32[1390312] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i210_1, +HEAPF32[tempDoublePtr >> 2]);
            HEAP32[$str_i132_i196 >> 2] = -1;
            _fread($23 | 0, 1, 4, HEAP32[1316053] | 0);
            $67 = HEAP32[$str_i132_i196 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i151_i210_2 = $67;
            } else {
              $retval_0_i_i151_i210_2 = _llvm_bswap_i32($67 | 0) | 0;
            }
            HEAPF32[1390313] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i210_2, +HEAPF32[tempDoublePtr >> 2]);
          } else if (($retval_0_i_i131 | 0) == 256) {
            HEAP32[1350792] = (HEAP8[5586372 + ($retval_0_i_i194 & 3) | 0] << 24 >> 24) - 48 | 0;
          } else if (($retval_0_i_i131 | 0) == 262) {
            $i_0232 = 0;
            while (1) {
              HEAP32[$str_i132_i >> 2] = -1;
              _fread($24 | 0, 1, 4, HEAP32[1316053] | 0);
              $43 = HEAP32[$str_i132_i >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i151_i = $43;
              } else {
                $retval_0_i_i151_i = _llvm_bswap_i32($43 | 0) | 0;
              }
              HEAPF32[$romm_cam + ($i_0232 << 2) >> 2] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i, +HEAPF32[tempDoublePtr >> 2]);
              $inc = $i_0232 + 1 | 0;
              if (($inc | 0) == 9) {
                break;
              } else {
                $i_0232 = $inc;
              }
            }
            $45 = +HEAPF32[$arrayidx11_i >> 2];
            $46 = +HEAPF32[$arrayidx11_1_i >> 2];
            $47 = +HEAPF32[$arrayidx11_2_i >> 2];
            $48 = +HEAPF32[$arrayidx11_116_i >> 2];
            $49 = +HEAPF32[$arrayidx11_1_1_i >> 2];
            $50 = +HEAPF32[$arrayidx11_2_1_i >> 2];
            $51 = +HEAPF32[$arrayidx11_219_i >> 2];
            $52 = +HEAPF32[$arrayidx11_1_2_i >> 2];
            $53 = +HEAPF32[$arrayidx11_2_2_i >> 2];
            HEAPF32[1390241] = $45 * 2.0341930389404297 + 0.0 + $46 * -0.7274199724197388 + $47 * -0.30676600337028503;
            HEAPF32[1390242] = $48 * 2.0341930389404297 + 0.0 + $49 * -0.7274199724197388 + $50 * -0.30676600337028503;
            HEAPF32[1390243] = $51 * 2.0341930389404297 + 0.0 + $52 * -0.7274199724197388 + $53 * -0.30676600337028503;
            HEAPF32[1390245] = $45 * -0.22881099581718445 + 0.0 + $46 * 1.2317290306091309 + $47 * -0.0029219998978078365;
            HEAPF32[1390246] = $48 * -0.22881099581718445 + 0.0 + $49 * 1.2317290306091309 + $50 * -0.0029219998978078365;
            HEAPF32[1390247] = $51 * -0.22881099581718445 + 0.0 + $52 * 1.2317290306091309 + $53 * -0.0029219998978078365;
            HEAPF32[1390249] = $45 * -0.008565000258386135 + 0.0 + $46 * -0.15327300131320953 + $47 * 1.1618390083312988;
            HEAPF32[1390250] = $48 * -0.008565000258386135 + 0.0 + $49 * -0.15327300131320953 + $50 * 1.1618390083312988;
            HEAPF32[1390251] = $51 * -0.008565000258386135 + 0.0 + $52 * -0.15327300131320953 + $53 * 1.1618390083312988;
          } else if (($retval_0_i_i131 | 0) == 264) {
            HEAP16[2622498] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 265) {
            HEAP16[2622502] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 266) {
            HEAP16[2631898] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 267) {
            HEAP16[2621786] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 268) {
            HEAP16[2621484] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 269) {
            HEAP16[2699404] = $retval_0_i_i194 & 65535;
          } else if (($retval_0_i_i131 | 0) == 270) {
            HEAP32[1311446] = $retval_0_i_i194;
          } else if (($retval_0_i_i131 | 0) == 271) {
            HEAP32[1357153] = $add13;
          } else if (($retval_0_i_i131 | 0) == 272) {
            HEAP32[1315884] = $add13;
            HEAP32[1315885] = $retval_0_i_i173;
          } else if (($retval_0_i_i131 | 0) == 274) {
            HEAP32[1311447] = $call12 - 4 | 0;
          } else if (($retval_0_i_i131 | 0) == 528) {
            HEAPF32[1311452] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i194, +HEAPF32[tempDoublePtr >> 2]);
          } else if (($retval_0_i_i131 | 0) == 538) {
            HEAP32[1311451] = $retval_0_i_i194;
          } else if (($retval_0_i_i131 | 0) == 540) {
            HEAP32[1311019] = $add13;
          } else if (($retval_0_i_i131 | 0) == 541) {
            HEAP32[1311448] = $retval_0_i_i194;
          } else if (($retval_0_i_i131 | 0) == 546) {
            HEAP32[1311450] = $retval_0_i_i194;
          } else if (($retval_0_i_i131 | 0) == 547) {
            HEAP32[1311449] = $add13;
          } else if (($retval_0_i_i131 | 0) == 769) {
            HEAP8[5263531] = 0;
            _fread(5263468, 1, 63, HEAP32[1316053] | 0);
            $call65 = _strstr(5263468, 5586364) | 0;
            if (($call65 | 0) == 0) {
              break;
            }
            HEAP8[$call65] = 0;
          }
        } while (0);
        _fseek(HEAP32[1316053] | 0, $call12 | 0, 0);
        if (($dec236 | 0) == 0) {
          break L2103;
        } else {
          $dec236_in = $dec236;
        }
      }
    }
  } while (0);
  HEAP32[1315947] = (HEAP32[1311446] | 0) < 3 ? 64 : 84;
  HEAP32[1315898] = 65535;
  _memcpy(5263724, 5586352, 10);
  if (HEAP8[5263468] << 24 >> 24 != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  $conv76 = HEAPU16[2622502] | 0;
  if (($conv76 | 0) == 2060) {
    _memcpy(5263468, 5586340, 11);
    STACKTOP = __stackBase__;
    return;
  } else if (($conv76 | 0) == 2682) {
    HEAP8[5263468] = HEAP8[5586332] | 0;
    HEAP8[5263469 | 0] = HEAP8[5586333 | 0] | 0;
    HEAP8[5263470 | 0] = HEAP8[5586334 | 0] | 0;
    HEAP8[5263471 | 0] = HEAP8[5586335 | 0] | 0;
    HEAP8[5263472 | 0] = HEAP8[5586336 | 0] | 0;
    STACKTOP = __stackBase__;
    return;
  } else if (($conv76 | 0) == 4128) {
    HEAP8[5263468] = HEAP8[5586280] | 0;
    HEAP8[5263469 | 0] = HEAP8[5586281 | 0] | 0;
    HEAP8[5263470 | 0] = HEAP8[5586282 | 0] | 0;
    HEAP8[5263471 | 0] = HEAP8[5586283 | 0] | 0;
    HEAP8[5263472 | 0] = HEAP8[5586284 | 0] | 0;
    STACKTOP = __stackBase__;
    return;
  } else if (($conv76 | 0) == 5488) {
    HEAP8[5263468] = HEAP8[5586272] | 0;
    HEAP8[5263469 | 0] = HEAP8[5586273 | 0] | 0;
    HEAP8[5263470 | 0] = HEAP8[5586274 | 0] | 0;
    HEAP8[5263471 | 0] = HEAP8[5586275 | 0] | 0;
    HEAP8[5263472 | 0] = HEAP8[5586276 | 0] | 0;
    STACKTOP = __stackBase__;
    return;
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_fuji($offset) {
  $offset = $offset | 0;
  var $str_i150 = 0, $str_i129 = 0, $str_i108 = 0, $str_i93 = 0, $str_i78 = 0, $str_i63 = 0, $str_i48 = 0, $str_i33 = 0, $str_i18 = 0, $str_i9 = 0, $str_i = 0, $4 = 0, $retval_0_i_i = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $dec174_in = 0, $dec174 = 0, $17 = 0, $conv2_i_i13 = 0, $19 = 0, $retval_0_in_i_i = 0, $retval_0_i_i17 = 0, $23 = 0, $conv2_i_i22 = 0, $25 = 0, $retval_0_in_i_i30 = 0, $conv4 = 0, $call5 = 0, $28 = 0, $30 = 0, $conv2_i_i97 = 0, $32 = 0, $35 = 0, $conv2_i_i37 = 0, $37 = 0, $retval_0_in_i_i45 = 0, $41 = 0, $conv2_i_i52 = 0, $43 = 0, $retval_0_in_i_i60 = 0, $47 = 0, $conv2_i_i67 = 0, $49 = 0, $retval_0_in_i_i75 = 0, $53 = 0, $conv2_i_i82 = 0, $55 = 0, $retval_0_in_i_i90 = 0, $retval_0_i_i91 = 0, $retval_0_in_i_i105 = 0, $63 = 0, $conv2_i_i97_1 = 0, $65 = 0, $66 = 0, $69 = 0, $retval_0_i_i127 = 0, $70 = 0, $72 = 0, $retval_0_i_i148 = 0, $75 = 0, $retval_0_i_i169 = 0, $77 = 0, $retval_0_in_i_i105_1 = 0, $83 = 0, $conv2_i_i97_2 = 0, $85 = 0, $retval_0_in_i_i105_2 = 0, $89 = 0, $conv2_i_i97_3 = 0, $91 = 0, $retval_0_in_i_i105_3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  $str_i150 = __stackBase__ | 0;
  $str_i129 = __stackBase__ + 4 | 0;
  $str_i108 = __stackBase__ + 8 | 0;
  $str_i93 = __stackBase__ + 12 | 0;
  $str_i78 = __stackBase__ + 16 | 0;
  $str_i63 = __stackBase__ + 20 | 0;
  $str_i48 = __stackBase__ + 24 | 0;
  $str_i33 = __stackBase__ + 28 | 0;
  $str_i18 = __stackBase__ + 32 | 0;
  $str_i9 = __stackBase__ + 36 | 0;
  $str_i = __stackBase__ + 40 | 0;
  _fseek(HEAP32[1316053] | 0, $offset | 0, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  if ($retval_0_i_i >>> 0 > 255) {
    STACKTOP = __stackBase__;
    return;
  }
  L2174 : do {
    if (($retval_0_i_i | 0) != 0) {
      $5 = $str_i9;
      $6 = $str_i18;
      $7 = $str_i33;
      $8 = $str_i48;
      $9 = $str_i63;
      $10 = $str_i78;
      $11 = $str_i108;
      $12 = $str_i129;
      $13 = $str_i150;
      $14 = $str_i93;
      $dec174_in = $retval_0_i_i;
      while (1) {
        $dec174 = $dec174_in - 1 | 0;
        HEAP16[$str_i9 >> 1] = -1;
        _fread($5 | 0, 1, 2, HEAP32[1316053] | 0);
        $17 = HEAP16[$str_i9 >> 1] | 0;
        $conv2_i_i13 = $17 & 255;
        $19 = ($17 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i = ($19 & 65535) << 8 | $conv2_i_i13;
        } else {
          $retval_0_in_i_i = $conv2_i_i13 << 8 | $19 & 65535;
        }
        $retval_0_i_i17 = $retval_0_in_i_i & 65535;
        HEAP16[$str_i18 >> 1] = -1;
        _fread($6 | 0, 1, 2, HEAP32[1316053] | 0);
        $23 = HEAP16[$str_i18 >> 1] | 0;
        $conv2_i_i22 = $23 & 255;
        $25 = ($23 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i30 = ($25 & 65535) << 8 | $conv2_i_i22;
        } else {
          $retval_0_in_i_i30 = $conv2_i_i22 << 8 | $25 & 65535;
        }
        $conv4 = $retval_0_in_i_i30 & 65535;
        $call5 = _ftell(HEAP32[1316053] | 0) | 0;
        do {
          if (($retval_0_i_i17 << 16 >> 16 | 0) == 12272) {
            HEAP16[$str_i93 >> 1] = -1;
            $28 = HEAP32[1316053] | 0;
            _fread($14 | 0, 1, 2, $28 | 0);
            $30 = HEAP16[$str_i93 >> 1] | 0;
            $conv2_i_i97 = $30 & 255;
            $32 = ($30 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i105 = ($32 & 65535) << 8 | $conv2_i_i97;
            } else {
              $retval_0_in_i_i105 = $conv2_i_i97 << 8 | $32 & 65535;
            }
            HEAPF32[1390312] = +(($retval_0_in_i_i105 & 65535) >>> 0);
            HEAP16[$str_i93 >> 1] = -1;
            _fread($14 | 0, 1, 2, HEAP32[1316053] | 0);
            $63 = HEAP16[$str_i93 >> 1] | 0;
            $conv2_i_i97_1 = $63 & 255;
            $65 = ($63 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i105_1 = ($65 & 65535) << 8 | $conv2_i_i97_1;
            } else {
              $retval_0_in_i_i105_1 = $conv2_i_i97_1 << 8 | $65 & 65535;
            }
            HEAPF32[1390311] = +(($retval_0_in_i_i105_1 & 65535) >>> 0);
            HEAP16[$str_i93 >> 1] = -1;
            _fread($14 | 0, 1, 2, HEAP32[1316053] | 0);
            $83 = HEAP16[$str_i93 >> 1] | 0;
            $conv2_i_i97_2 = $83 & 255;
            $85 = ($83 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i105_2 = ($85 & 65535) << 8 | $conv2_i_i97_2;
            } else {
              $retval_0_in_i_i105_2 = $conv2_i_i97_2 << 8 | $85 & 65535;
            }
            HEAPF32[1390314] = +(($retval_0_in_i_i105_2 & 65535) >>> 0);
            HEAP16[$str_i93 >> 1] = -1;
            _fread($14 | 0, 1, 2, HEAP32[1316053] | 0);
            $89 = HEAP16[$str_i93 >> 1] | 0;
            $conv2_i_i97_3 = $89 & 255;
            $91 = ($89 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i105_3 = ($91 & 65535) << 8 | $conv2_i_i97_3;
            } else {
              $retval_0_in_i_i105_3 = $conv2_i_i97_3 << 8 | $91 & 65535;
            }
            HEAPF32[1390313] = +(($retval_0_in_i_i105_3 & 65535) >>> 0);
          } else if (($retval_0_i_i17 << 16 >> 16 | 0) == 256) {
            HEAP16[$str_i33 >> 1] = -1;
            _fread($7 | 0, 1, 2, HEAP32[1316053] | 0);
            $35 = HEAP16[$str_i33 >> 1] | 0;
            $conv2_i_i37 = $35 & 255;
            $37 = ($35 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i45 = ($37 & 65535) << 8 | $conv2_i_i37;
            } else {
              $retval_0_in_i_i45 = $conv2_i_i37 << 8 | $37 & 65535;
            }
            HEAP16[2622502] = $retval_0_in_i_i45 & 65535;
            HEAP16[$str_i48 >> 1] = -1;
            _fread($8 | 0, 1, 2, HEAP32[1316053] | 0);
            $41 = HEAP16[$str_i48 >> 1] | 0;
            $conv2_i_i52 = $41 & 255;
            $43 = ($41 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i60 = ($43 & 65535) << 8 | $conv2_i_i52;
            } else {
              $retval_0_in_i_i60 = $conv2_i_i52 << 8 | $43 & 65535;
            }
            HEAP16[2622498] = $retval_0_in_i_i60 & 65535;
          } else if (($retval_0_i_i17 << 16 >> 16 | 0) == 289) {
            HEAP16[$str_i63 >> 1] = -1;
            _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
            $47 = HEAP16[$str_i63 >> 1] | 0;
            $conv2_i_i67 = $47 & 255;
            $49 = ($47 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i75 = ($49 & 65535) << 8 | $conv2_i_i67;
            } else {
              $retval_0_in_i_i75 = $conv2_i_i67 << 8 | $49 & 65535;
            }
            HEAP16[2699404] = $retval_0_in_i_i75 & 65535;
            HEAP16[$str_i78 >> 1] = -1;
            _fread($10 | 0, 1, 2, HEAP32[1316053] | 0);
            $53 = HEAP16[$str_i78 >> 1] | 0;
            $conv2_i_i82 = $53 & 255;
            $55 = ($53 & 65535) >>> 8;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_in_i_i90 = ($55 & 65535) << 8 | $conv2_i_i82;
            } else {
              $retval_0_in_i_i90 = $conv2_i_i82 << 8 | $55 & 65535;
            }
            $retval_0_i_i91 = $retval_0_in_i_i90 & 65535;
            HEAP16[2621484] = $retval_0_i_i91;
            if ($retval_0_i_i91 << 16 >> 16 != 4284) {
              break;
            }
            HEAP16[2621484] = 4287;
          } else if (($retval_0_i_i17 << 16 >> 16 | 0) == 304) {
            HEAP32[1349756] = _fgetc(HEAP32[1316053] | 0) >> 7;
            HEAP16[2699510] = ((_fgetc(HEAP32[1316053] | 0) | 0) >>> 3 & 1 ^ 1) & 65535;
          } else if (($retval_0_i_i17 << 16 >> 16 | 0) == (-16384 | 0)) {
            $66 = HEAP16[2631518] | 0;
            HEAP16[2631518] = 18761;
            HEAP32[$str_i108 >> 2] = -1;
            _fread($11 | 0, 1, 4, HEAP32[1316053] | 0);
            $69 = HEAP32[$str_i108 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i127 = $69;
            } else {
              $retval_0_i_i127 = _llvm_bswap_i32($69 | 0) | 0;
            }
            HEAP16[2621484] = $retval_0_i_i127 & 65535;
            if (($retval_0_i_i127 & 65535) >>> 0 > 1e4) {
              HEAP32[$str_i129 >> 2] = -1;
              $70 = HEAP32[1316053] | 0;
              _fread($12 | 0, 1, 4, $70 | 0);
              $72 = HEAP32[$str_i129 >> 2] | 0;
              if (HEAP16[2631518] << 16 >> 16 == 18761) {
                $retval_0_i_i148 = $72;
              } else {
                $retval_0_i_i148 = _llvm_bswap_i32($72 | 0) | 0;
              }
              HEAP16[2621484] = $retval_0_i_i148 & 65535;
            }
            HEAP32[$str_i150 >> 2] = -1;
            _fread($13 | 0, 1, 4, HEAP32[1316053] | 0);
            $75 = HEAP32[$str_i150 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i169 = $75;
            } else {
              $retval_0_i_i169 = _llvm_bswap_i32($75 | 0) | 0;
            }
            HEAP16[2699404] = $retval_0_i_i169 & 65535;
            HEAP16[2631518] = $66;
          }
        } while (0);
        _fseek(HEAP32[1316053] | 0, $call5 + $conv4 | 0, 0);
        if (($dec174 | 0) == 0) {
          break L2174;
        } else {
          $dec174_in = $dec174;
        }
      }
    }
  } while (0);
  $77 = HEAP32[1349756] | 0;
  HEAP16[2699404] = (HEAPU16[2699404] | 0) << $77 & 65535;
  HEAP16[2621484] = (HEAPU16[2621484] | 0) >>> ($77 >>> 0) & 65535;
  STACKTOP = __stackBase__;
  return;
}
function _parse_jpeg($offset) {
  $offset = $offset | 0;
  var $str_i60 = 0, $str_i51 = 0, $str_i36 = 0, $str_i21 = 0, $str_i6 = 0, $str_i = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call6 = 0, $13 = 0, $conv2_i_i = 0, $15 = 0, $retval_0_in_i_i = 0, $sub = 0, $call9 = 0, $18 = 0, $19 = 0, $21 = 0, $conv2_i_i10 = 0, $23 = 0, $retval_0_in_i_i18 = 0, $27 = 0, $conv2_i_i25 = 0, $29 = 0, $retval_0_in_i_i33 = 0, $33 = 0, $conv2_i_i40 = 0, $35 = 0, $retval_0_in_i_i48 = 0, $39 = 0, $retval_0_i_i59 = 0, $42 = 0, $retval_0_i_i79 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $str_i60 = __stackBase__ | 0;
  $str_i51 = __stackBase__ + 4 | 0;
  $str_i36 = __stackBase__ + 8 | 0;
  $str_i21 = __stackBase__ + 12 | 0;
  $str_i6 = __stackBase__ + 16 | 0;
  $str_i = __stackBase__ + 20 | 0;
  _fseek(HEAP32[1316053] | 0, $offset | 0, 0);
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 255) {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 216) {
    $retval_0 = 0;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  if ((_fgetc(HEAP32[1316053] | 0) | 0) != 255) {
    $retval_0 = 1;
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  $4 = $str_i;
  $5 = $str_i36;
  $6 = $str_i51;
  $7 = $str_i60;
  $8 = $str_i6;
  $9 = $str_i21;
  while (1) {
    $call6 = _fgetc(HEAP32[1316053] | 0) | 0;
    if (($call6 | 0) == 218) {
      $retval_0 = 1;
      label = 1693;
      break;
    }
    HEAP16[2631518] = 19789;
    HEAP16[$str_i >> 1] = -1;
    _fread($4 | 0, 1, 2, HEAP32[1316053] | 0);
    $13 = HEAP16[$str_i >> 1] | 0;
    $conv2_i_i = $13 & 255;
    $15 = ($13 & 65535) >>> 8;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_in_i_i = ($15 & 65535) << 8 | $conv2_i_i;
    } else {
      $retval_0_in_i_i = $conv2_i_i << 8 | $15 & 65535;
    }
    $sub = ($retval_0_in_i_i & 65535) - 2 | 0;
    $call9 = _ftell(HEAP32[1316053] | 0) | 0;
    if (($call6 | 0) == 195 | ($call6 | 0) == 192) {
      $18 = HEAP32[1316053] | 0;
      _fgetc($18 | 0);
      HEAP16[$str_i6 >> 1] = -1;
      $19 = HEAP32[1316053] | 0;
      _fread($8 | 0, 1, 2, $19 | 0);
      $21 = HEAP16[$str_i6 >> 1] | 0;
      $conv2_i_i10 = $21 & 255;
      $23 = ($21 & 65535) >>> 8;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_in_i_i18 = ($23 & 65535) << 8 | $conv2_i_i10;
      } else {
        $retval_0_in_i_i18 = $conv2_i_i10 << 8 | $23 & 65535;
      }
      HEAP16[2622502] = $retval_0_in_i_i18 & 65535;
      HEAP16[$str_i21 >> 1] = -1;
      _fread($9 | 0, 1, 2, HEAP32[1316053] | 0);
      $27 = HEAP16[$str_i21 >> 1] | 0;
      $conv2_i_i25 = $27 & 255;
      $29 = ($27 & 65535) >>> 8;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_in_i_i33 = ($29 & 65535) << 8 | $conv2_i_i25;
      } else {
        $retval_0_in_i_i33 = $conv2_i_i25 << 8 | $29 & 65535;
      }
      HEAP16[2622498] = $retval_0_in_i_i33 & 65535;
    }
    HEAP16[$str_i36 >> 1] = -1;
    _fread($5 | 0, 1, 2, HEAP32[1316053] | 0);
    $33 = HEAP16[$str_i36 >> 1] | 0;
    $conv2_i_i40 = $33 & 255;
    $35 = ($33 & 65535) >>> 8;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_in_i_i48 = ($35 & 65535) << 8 | $conv2_i_i40;
    } else {
      $retval_0_in_i_i48 = $conv2_i_i40 << 8 | $35 & 65535;
    }
    HEAP16[2631518] = $retval_0_in_i_i48 & 65535;
    HEAP32[$str_i51 >> 2] = -1;
    _fread($6 | 0, 1, 4, HEAP32[1316053] | 0);
    $39 = HEAP32[$str_i51 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i59 = $39;
    } else {
      $retval_0_i_i59 = _llvm_bswap_i32($39 | 0) | 0;
    }
    HEAP32[$str_i60 >> 2] = -1;
    _fread($7 | 0, 1, 4, HEAP32[1316053] | 0);
    $42 = HEAP32[$str_i60 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i79 = $42;
    } else {
      $retval_0_i_i79 = _llvm_bswap_i32($42 | 0) | 0;
    }
    if (($retval_0_i_i79 | 0) == 1212498256) {
      _parse_ciff($retval_0_i_i59 + $call9 | 0, $sub - $retval_0_i_i59 | 0);
    }
    if ((_parse_tiff($call9 + 6 | 0) | 0) != 0) {
      _apply_tiff();
    }
    _fseek(HEAP32[1316053] | 0, $call9 + $sub | 0, 0);
    if ((_fgetc(HEAP32[1316053] | 0) | 0) != 255) {
      $retval_0 = 1;
      label = 1694;
      break;
    }
  }
  if ((label | 0) == 1693) {
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  } else if ((label | 0) == 1694) {
    STACKTOP = __stackBase__;
    return $retval_0 | 0;
  }
  return 0;
}
function _parse_riff() {
  var $str_i42 = 0, $str_i33 = 0, $str_i12 = 0, $str_i = 0, $date = 0, $month = 0, $t = 0, $arraydecay = 0, $4 = 0, $retval_0_i_i = 0, $add = 0, $11 = 0, $12 = 0, $15 = 0, $conv2_i_i37 = 0, $17 = 0, $retval_0_in_i_i = 0, $21 = 0, $conv2_i_i46 = 0, $23 = 0, $retval_0_in_i_i54 = 0, $conv22 = 0, $25 = 0, $arraydecay40 = 0, $arraydecay43 = 0, $tm_year = 0, $i_0 = 0, $30 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 192 | 0;
  $str_i42 = __stackBase__ | 0;
  $str_i33 = __stackBase__ + 4 | 0;
  $str_i12 = __stackBase__ + 8 | 0;
  $str_i = __stackBase__ + 12 | 0;
  $date = __stackBase__ + 20 | 0;
  $month = __stackBase__ + 84 | 0;
  $t = __stackBase__ + 148 | 0;
  HEAP16[2631518] = 18761;
  $arraydecay = __stackBase__ + 16 | 0;
  _fread($arraydecay | 0, 4, 1, HEAP32[1316053] | 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  $add = (_ftell(HEAP32[1316053] | 0) | 0) + $retval_0_i_i | 0;
  do {
    if ((_memcmp($arraydecay, 5586264, 4) | 0) != 0) {
      if ((_memcmp($arraydecay, 5586256, 4) | 0) == 0) {
        break;
      }
      if ((_memcmp($arraydecay, 5586248, 4) | 0) != 0) {
        if (!((_memcmp($arraydecay, 5586240, 4) | 0) == 0 & $retval_0_i_i >>> 0 < 64)) {
          $30 = HEAP32[1316053] | 0;
          _fseek($30 | 0, $retval_0_i_i | 0, 1);
          STACKTOP = __stackBase__;
          return;
        }
        $arraydecay40 = $date | 0;
        _fread($arraydecay40 | 0, 64, 1, HEAP32[1316053] | 0);
        HEAP8[$date + $retval_0_i_i | 0] = 0;
        _memset($t | 0, 0, 44);
        $arraydecay43 = $month | 0;
        $tm_year = $t + 20 | 0;
        if ((_sscanf($arraydecay40 | 0, 5586216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $arraydecay43, HEAP32[tempInt + 4 >> 2] = $t + 12 | 0, HEAP32[tempInt + 8 >> 2] = $t + 8 | 0, HEAP32[tempInt + 12 >> 2] = $t + 4 | 0, HEAP32[tempInt + 16 >> 2] = $t | 0, HEAP32[tempInt + 20 >> 2] = $tm_year, tempInt) | 0) | 0) == 6) {
          $i_0 = 0;
        } else {
          STACKTOP = __stackBase__;
          return;
        }
        while (1) {
          if ($i_0 >>> 0 >= 12) {
            break;
          }
          if ((_strcasecmp(5245892 + ($i_0 << 2) | 0, $arraydecay43 | 0) | 0) == 0) {
            break;
          } else {
            $i_0 = $i_0 + 1 | 0;
          }
        }
        HEAP32[$t + 16 >> 2] = $i_0;
        HEAP32[$tm_year >> 2] = (HEAP32[$tm_year >> 2] | 0) - 1900 | 0;
        if ((_mktime($t | 0) | 0) <= 0) {
          STACKTOP = __stackBase__;
          return;
        }
        HEAP32[1310894] = _mktime($t | 0) | 0;
        STACKTOP = __stackBase__;
        return;
      }
      if (((_ftell(HEAP32[1316053] | 0) | 0) + 7 | 0) >>> 0 >= $add >>> 0) {
        STACKTOP = __stackBase__;
        return;
      }
      $11 = $str_i33;
      $12 = $str_i42;
      while (1) {
        HEAP16[$str_i33 >> 1] = -1;
        _fread($11 | 0, 1, 2, HEAP32[1316053] | 0);
        $15 = HEAP16[$str_i33 >> 1] | 0;
        $conv2_i_i37 = $15 & 255;
        $17 = ($15 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i = ($17 & 65535) << 8 | $conv2_i_i37;
        } else {
          $retval_0_in_i_i = $conv2_i_i37 << 8 | $17 & 65535;
        }
        HEAP16[$str_i42 >> 1] = -1;
        _fread($12 | 0, 1, 2, HEAP32[1316053] | 0);
        $21 = HEAP16[$str_i42 >> 1] | 0;
        $conv2_i_i46 = $21 & 255;
        $23 = ($21 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i54 = ($23 & 65535) << 8 | $conv2_i_i46;
        } else {
          $retval_0_in_i_i54 = $conv2_i_i46 << 8 | $23 & 65535;
        }
        if ((($retval_0_in_i_i & 65535) + 1 & 131070 | 0) == 20 & ($retval_0_in_i_i54 & 65535) << 16 >> 16 == 20) {
          _get_timestamp(0);
        } else {
          $conv22 = $retval_0_in_i_i54 & 65535;
          $25 = HEAP32[1316053] | 0;
          _fseek($25 | 0, $conv22 | 0, 1);
        }
        if (((_ftell(HEAP32[1316053] | 0) | 0) + 7 | 0) >>> 0 >= $add >>> 0) {
          break;
        }
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  HEAP32[$str_i12 >> 2] = -1;
  _fread($str_i12 | 0, 1, 4, HEAP32[1316053] | 0);
  if (((_ftell(HEAP32[1316053] | 0) | 0) + 7 | 0) >>> 0 >= $add >>> 0) {
    STACKTOP = __stackBase__;
    return;
  }
  while (1) {
    _parse_riff();
    if (((_ftell(HEAP32[1316053] | 0) | 0) + 7 | 0) >>> 0 >= $add >>> 0) {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_smal($offset, $fsize) {
  $offset = $offset | 0;
  $fsize = $fsize | 0;
  var $str_i35 = 0, $str_i26 = 0, $str_i5 = 0, $str_i = 0, $call1 = 0, $cmp = 0, $2 = 0, $6 = 0, $retval_0_i_i = 0, $7 = 0, $8 = 0, $10 = 0, $retval_0_i_i24 = 0, $14 = 0, $conv2_i_i30 = 0, $16 = 0, $retval_0_in_i_i = 0, $retval_0_i_i34 = 0, $21 = 0, $conv2_i_i39 = 0, $23 = 0, $retval_0_in_i_i47 = 0, $retval_0_i_i48 = 0, $conv14 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $str_i35 = __stackBase__ | 0;
  $str_i26 = __stackBase__ + 4 | 0;
  $str_i5 = __stackBase__ + 8 | 0;
  $str_i = __stackBase__ + 12 | 0;
  _fseek(HEAP32[1316053] | 0, $offset + 2 | 0, 0);
  HEAP16[2631518] = 18761;
  $call1 = _fgetc(HEAP32[1316053] | 0) | 0;
  $cmp = ($call1 | 0) == 6;
  if ($cmp) {
    $2 = HEAP32[1316053] | 0;
    _fseek($2 | 0, 5, 1);
  }
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $6 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $6;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($6 | 0) | 0;
  }
  if (($retval_0_i_i | 0) != ($fsize | 0)) {
    STACKTOP = __stackBase__;
    return;
  }
  if (($call1 | 0) > 6) {
    $7 = $str_i5;
    HEAP32[$str_i5 >> 2] = -1;
    $8 = HEAP32[1316053] | 0;
    _fread($7 | 0, 1, 4, $8 | 0);
    $10 = HEAP32[$str_i5 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i24 = $10;
    } else {
      $retval_0_i_i24 = _llvm_bswap_i32($10 | 0) | 0;
    }
    HEAP32[1357153] = $retval_0_i_i24;
  }
  HEAP16[$str_i26 >> 1] = -1;
  _fread($str_i26 | 0, 1, 2, HEAP32[1316053] | 0);
  $14 = HEAP16[$str_i26 >> 1] | 0;
  $conv2_i_i30 = $14 & 255;
  $16 = ($14 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($16 & 65535) << 8 | $conv2_i_i30;
  } else {
    $retval_0_in_i_i = $conv2_i_i30 << 8 | $16 & 65535;
  }
  $retval_0_i_i34 = $retval_0_in_i_i & 65535;
  HEAP16[2699404] = $retval_0_i_i34;
  HEAP16[2622502] = $retval_0_i_i34;
  HEAP16[$str_i35 >> 1] = -1;
  _fread($str_i35 | 0, 1, 2, HEAP32[1316053] | 0);
  $21 = HEAP16[$str_i35 >> 1] | 0;
  $conv2_i_i39 = $21 & 255;
  $23 = ($21 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i47 = ($23 & 65535) << 8 | $conv2_i_i39;
  } else {
    $retval_0_in_i_i47 = $conv2_i_i39 << 8 | $23 & 65535;
  }
  $retval_0_i_i48 = $retval_0_in_i_i47 & 65535;
  HEAP16[2621484] = $retval_0_i_i48;
  HEAP16[2622498] = $retval_0_i_i48;
  HEAP8[5263724] = HEAP8[5586208] | 0;
  HEAP8[5263725 | 0] = HEAP8[5586209 | 0] | 0;
  HEAP8[5263726 | 0] = HEAP8[5586210 | 0] | 0;
  HEAP8[5263727 | 0] = HEAP8[5586211 | 0] | 0;
  HEAP8[5263728 | 0] = HEAP8[5586212 | 0] | 0;
  $conv14 = HEAPU16[2699404] | 0;
  _sprintf(5263468, 5586196, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $call1, HEAP32[tempInt + 4 >> 2] = $retval_0_in_i_i47 & 65535, HEAP32[tempInt + 8 >> 2] = $conv14, tempInt) | 0);
  if ($cmp) {
    HEAP32[1315947] = 74;
    STACKTOP = __stackBase__;
    return;
  }
  if (($call1 | 0) != 9) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1315947] = 12;
  STACKTOP = __stackBase__;
  return;
}
function _parse_cine() {
  var $str_i331 = 0, $str_i310 = 0, $str_i289 = 0, $str_i268 = 0, $str_i132_i251 = 0, $str_i132_i = 0, $str_i230 = 0, $str_i209 = 0, $str_i188 = 0, $str_i173 = 0, $str_i158 = 0, $str_i137 = 0, $str_i116 = 0, $str_i95 = 0, $str_i74 = 0, $str_i53 = 0, $str_i32 = 0, $str_i11 = 0, $str_i2 = 0, $str_i = 0, $4 = 0, $conv2_i_i = 0, $6 = 0, $retval_0_in_i_i = 0, $12 = 0, $retval_0_i_i10 = 0, $17 = 0, $retval_0_i_i30 = 0, $21 = 0, $retval_0_i_i51 = 0, $25 = 0, $retval_0_i_i72 = 0, $29 = 0, $retval_0_i_i93 = 0, $33 = 0, $retval_0_i_i114 = 0, $38 = 0, $retval_0_i_i135 = 0, $42 = 0, $retval_0_i_i156 = 0, $48 = 0, $conv2_i_i177 = 0, $50 = 0, $retval_0_in_i_i185 = 0, $conv17 = 0, $56 = 0, $retval_0_i_i207 = 0, $61 = 0, $retval_0_i_i228 = 0, $and = 0, $66 = 0, $retval_0_i_i249 = 0, $rem = 0, $70 = 0, $retval_0_i_i151_i = 0, $75 = 0, $retval_0_i_i151_i265 = 0, $80 = 0, $retval_0_i_i287 = 0, $85 = 0, $retval_0_i_i308 = 0, $87 = 0, $89 = 0, $mul50 = 0, $93 = 0, $retval_0_i_i329 = 0, $add55 = 0, $94 = 0, $95 = 0, $call_i333 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  $str_i331 = __stackBase__ | 0;
  $str_i310 = __stackBase__ + 4 | 0;
  $str_i289 = __stackBase__ + 8 | 0;
  $str_i268 = __stackBase__ + 12 | 0;
  $str_i132_i251 = __stackBase__ + 16 | 0;
  $str_i132_i = __stackBase__ + 20 | 0;
  $str_i230 = __stackBase__ + 24 | 0;
  $str_i209 = __stackBase__ + 28 | 0;
  $str_i188 = __stackBase__ + 32 | 0;
  $str_i173 = __stackBase__ + 36 | 0;
  $str_i158 = __stackBase__ + 40 | 0;
  $str_i137 = __stackBase__ + 44 | 0;
  $str_i116 = __stackBase__ + 48 | 0;
  $str_i95 = __stackBase__ + 52 | 0;
  $str_i74 = __stackBase__ + 56 | 0;
  $str_i53 = __stackBase__ + 60 | 0;
  $str_i32 = __stackBase__ + 64 | 0;
  $str_i11 = __stackBase__ + 68 | 0;
  $str_i2 = __stackBase__ + 72 | 0;
  $str_i = __stackBase__ + 76 | 0;
  HEAP16[2631518] = 18761;
  _fseek(HEAP32[1316053] | 0, 4, 0);
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $4 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $4 & 255;
  $6 = ($4 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($6 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $6 & 65535;
  }
  HEAP32[1316049] = ($retval_0_in_i_i & 65535) << 16 >> 16 == 2 & 1;
  _fseek(HEAP32[1316053] | 0, 14, 1);
  HEAP32[$str_i2 >> 2] = -1;
  _fread($str_i2 | 0, 1, 4, HEAP32[1316053] | 0);
  $12 = HEAP32[$str_i2 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i10 = $12;
  } else {
    $retval_0_i_i10 = _llvm_bswap_i32($12 | 0) | 0;
  }
  HEAP32[1316049] = Math_imul(HEAP32[1316049] | 0, $retval_0_i_i10);
  HEAP32[$str_i11 >> 2] = -1;
  _fread($str_i11 | 0, 1, 4, HEAP32[1316053] | 0);
  $17 = HEAP32[$str_i11 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i30 = $17;
  } else {
    $retval_0_i_i30 = _llvm_bswap_i32($17 | 0) | 0;
  }
  HEAP32[$str_i32 >> 2] = -1;
  _fread($str_i32 | 0, 1, 4, HEAP32[1316053] | 0);
  $21 = HEAP32[$str_i32 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i51 = $21;
  } else {
    $retval_0_i_i51 = _llvm_bswap_i32($21 | 0) | 0;
  }
  HEAP32[$str_i53 >> 2] = -1;
  _fread($str_i53 | 0, 1, 4, HEAP32[1316053] | 0);
  $25 = HEAP32[$str_i53 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i72 = $25;
  } else {
    $retval_0_i_i72 = _llvm_bswap_i32($25 | 0) | 0;
  }
  HEAP32[$str_i74 >> 2] = -1;
  _fread($str_i74 | 0, 1, 4, HEAP32[1316053] | 0);
  $29 = HEAP32[$str_i74 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i93 = $29;
  } else {
    $retval_0_i_i93 = _llvm_bswap_i32($29 | 0) | 0;
  }
  HEAP32[1310894] = $retval_0_i_i93;
  HEAP32[$str_i95 >> 2] = -1;
  _fread($str_i95 | 0, 1, 4, HEAP32[1316053] | 0);
  $33 = HEAP32[$str_i95 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i114 = $33;
  } else {
    $retval_0_i_i114 = _llvm_bswap_i32($33 | 0) | 0;
  }
  if (($retval_0_i_i114 | 0) != 0) {
    HEAP32[1310894] = $retval_0_i_i114;
  }
  _fseek(HEAP32[1316053] | 0, $retval_0_i_i30 + 4 | 0, 0);
  HEAP32[$str_i116 >> 2] = -1;
  _fread($str_i116 | 0, 1, 4, HEAP32[1316053] | 0);
  $38 = HEAP32[$str_i116 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i135 = $38;
  } else {
    $retval_0_i_i135 = _llvm_bswap_i32($38 | 0) | 0;
  }
  HEAP16[2622498] = $retval_0_i_i135 & 65535;
  HEAP32[$str_i137 >> 2] = -1;
  _fread($str_i137 | 0, 1, 4, HEAP32[1316053] | 0);
  $42 = HEAP32[$str_i137 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i156 = $42;
  } else {
    $retval_0_i_i156 = _llvm_bswap_i32($42 | 0) | 0;
  }
  HEAP16[2622502] = $retval_0_i_i156 & 65535;
  HEAP16[$str_i158 >> 1] = -1;
  _fread($str_i158 | 0, 1, 2, HEAP32[1316053] | 0);
  HEAP16[$str_i173 >> 1] = -1;
  _fread($str_i173 | 0, 1, 2, HEAP32[1316053] | 0);
  $48 = HEAP16[$str_i173 >> 1] | 0;
  $conv2_i_i177 = $48 & 255;
  $50 = ($48 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i185 = ($50 & 65535) << 8 | $conv2_i_i177;
  } else {
    $retval_0_in_i_i185 = $conv2_i_i177 << 8 | $50 & 65535;
  }
  $conv17 = $retval_0_in_i_i185 & 65535;
  if (($conv17 | 0) == 8) {
    HEAP32[1315947] = 24;
  } else if (($conv17 | 0) == 16) {
    HEAP32[1315947] = 4;
  }
  _fseek(HEAP32[1316053] | 0, $retval_0_i_i51 + 792 | 0, 0);
  HEAP8[5263724] = HEAP8[5586188] | 0;
  HEAP8[5263725 | 0] = HEAP8[5586189 | 0] | 0;
  HEAP8[5263726 | 0] = HEAP8[5586190 | 0] | 0;
  HEAP8[5263727 | 0] = HEAP8[5586191 | 0] | 0;
  HEAP8[5263728 | 0] = HEAP8[5586192 | 0] | 0;
  HEAP32[$str_i188 >> 2] = -1;
  _fread($str_i188 | 0, 1, 4, HEAP32[1316053] | 0);
  $56 = HEAP32[$str_i188 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i207 = $56;
  } else {
    $retval_0_i_i207 = _llvm_bswap_i32($56 | 0) | 0;
  }
  _sprintf(5263468, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $retval_0_i_i207, tempInt) | 0);
  _fseek(HEAP32[1316053] | 0, 12, 1);
  HEAP32[$str_i209 >> 2] = -1;
  _fread($str_i209 | 0, 1, 4, HEAP32[1316053] | 0);
  $61 = HEAP32[$str_i209 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i228 = $61;
  } else {
    $retval_0_i_i228 = _llvm_bswap_i32($61 | 0) | 0;
  }
  $and = $retval_0_i_i228 & 16777215;
  if (($and | 0) == 4) {
    HEAP32[1356938] = 1229539657;
  } else if (($and | 0) == 3) {
    HEAP32[1356938] = -1802201964;
  } else {
    HEAP32[1316049] = 0;
  }
  _fseek(HEAP32[1316053] | 0, 72, 1);
  HEAP32[$str_i230 >> 2] = -1;
  _fread($str_i230 | 0, 1, 4, HEAP32[1316053] | 0);
  $66 = HEAP32[$str_i230 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i249 = $66;
  } else {
    $retval_0_i_i249 = _llvm_bswap_i32($66 | 0) | 0;
  }
  $rem = (($retval_0_i_i249 + 3600 | 0) >>> 0) % 360;
  if (($rem | 0) == 180) {
    HEAP32[1350792] = 1;
  } else if (($rem | 0) == 90) {
    HEAP32[1350792] = 7;
  } else if (($rem | 0) == 270) {
    HEAP32[1350792] = 4;
  } else if (($rem | 0) == 0) {
    HEAP32[1350792] = 2;
  }
  HEAP32[$str_i132_i >> 2] = -1;
  _fread($str_i132_i | 0, 1, 4, HEAP32[1316053] | 0);
  $70 = HEAP32[$str_i132_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i151_i = $70;
  } else {
    $retval_0_i_i151_i = _llvm_bswap_i32($70 | 0) | 0;
  }
  HEAPF32[1390311] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i, +HEAPF32[tempDoublePtr >> 2]);
  HEAP32[$str_i132_i251 >> 2] = -1;
  _fread($str_i132_i251 | 0, 1, 4, HEAP32[1316053] | 0);
  $75 = HEAP32[$str_i132_i251 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i151_i265 = $75;
  } else {
    $retval_0_i_i151_i265 = _llvm_bswap_i32($75 | 0) | 0;
  }
  HEAPF32[1390313] = (HEAP32[tempDoublePtr >> 2] = $retval_0_i_i151_i265, +HEAPF32[tempDoublePtr >> 2]);
  HEAP32[$str_i268 >> 2] = -1;
  _fread($str_i268 | 0, 1, 4, HEAP32[1316053] | 0);
  $80 = HEAP32[$str_i268 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i287 = $80;
  } else {
    $retval_0_i_i287 = _llvm_bswap_i32($80 | 0) | 0;
  }
  HEAP32[1315898] = -1 << $retval_0_i_i287 ^ -1;
  _fseek(HEAP32[1316053] | 0, 668, 1);
  HEAP32[$str_i289 >> 2] = -1;
  _fread($str_i289 | 0, 1, 4, HEAP32[1316053] | 0);
  $85 = HEAP32[$str_i289 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i308 = $85;
  } else {
    $retval_0_i_i308 = _llvm_bswap_i32($85 | 0) | 0;
  }
  HEAPF32[1311229] = +($retval_0_i_i308 >>> 0 >>> 0) / 1.0e9;
  _fseek(HEAP32[1316053] | 0, $retval_0_i_i72 | 0, 0);
  $87 = HEAP32[1311231] | 0;
  if ($87 >>> 0 < (HEAP32[1316049] | 0) >>> 0) {
    $89 = HEAP32[1316053] | 0;
    $mul50 = $87 << 3;
    _fseek($89 | 0, $mul50 | 0, 1);
  }
  HEAP32[$str_i310 >> 2] = -1;
  _fread($str_i310 | 0, 1, 4, HEAP32[1316053] | 0);
  $93 = HEAP32[$str_i310 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i329 = $93;
    $add55 = $retval_0_i_i329 + 8 | 0;
    HEAP32[1357153] = $add55;
    $94 = $str_i331;
    HEAP32[$str_i331 >> 2] = -1;
    $95 = HEAP32[1316053] | 0;
    $call_i333 = _fread($94 | 0, 1, 4, $95 | 0) | 0;
    STACKTOP = __stackBase__;
    return;
  }
  $retval_0_i_i329 = _llvm_bswap_i32($93 | 0) | 0;
  $add55 = $retval_0_i_i329 + 8 | 0;
  HEAP32[1357153] = $add55;
  $94 = $str_i331;
  HEAP32[$str_i331 >> 2] = -1;
  $95 = HEAP32[1316053] | 0;
  $call_i333 = _fread($94 | 0, 1, 4, $95 | 0) | 0;
  STACKTOP = __stackBase__;
  return;
}
function _parse_redcine() {
  var $str_i148 = 0, $str_i127 = 0, $str_i106 = 0, $str_i85 = 0, $str_i64 = 0, $str_i43 = 0, $str_i22 = 0, $str_i1 = 0, $str_i = 0, $4 = 0, $retval_0_i_i = 0, $8 = 0, $retval_0_i_i20 = 0, $10 = 0, $and = 0, $14 = 0, $retval_0_i_i41 = 0, $15 = 0, $16 = 0, $18 = 0, $retval_0_i_i62 = 0, $22 = 0, $23 = 0, $26 = 0, $retval_0_i_i83 = 0, $29 = 0, $retval_0_i_i104 = 0, $30 = 0, $37 = 0, $retval_0_i_i125 = 0, $42 = 0, $retval_0_i_i146 = 0, $48 = 0, $retval_0_i_i167 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  $str_i148 = __stackBase__ | 0;
  $str_i127 = __stackBase__ + 4 | 0;
  $str_i106 = __stackBase__ + 8 | 0;
  $str_i85 = __stackBase__ + 12 | 0;
  $str_i64 = __stackBase__ + 16 | 0;
  $str_i43 = __stackBase__ + 20 | 0;
  $str_i22 = __stackBase__ + 24 | 0;
  $str_i1 = __stackBase__ + 28 | 0;
  $str_i = __stackBase__ + 32 | 0;
  HEAP16[2631518] = 19789;
  HEAP32[1316049] = 0;
  _fseek(HEAP32[1316053] | 0, 52, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  HEAP16[2621484] = $retval_0_i_i & 65535;
  HEAP32[$str_i1 >> 2] = -1;
  _fread($str_i1 | 0, 1, 4, HEAP32[1316053] | 0);
  $8 = HEAP32[$str_i1 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i20 = $8;
  } else {
    $retval_0_i_i20 = _llvm_bswap_i32($8 | 0) | 0;
  }
  HEAP16[2699404] = $retval_0_i_i20 & 65535;
  _fseek(HEAP32[1316053] | 0, 0, 2);
  $10 = HEAP32[1316053] | 0;
  $and = _ftell($10 | 0) & 511;
  _fseek($10 | 0, -$and | 0, 1);
  HEAP32[$str_i22 >> 2] = -1;
  _fread($str_i22 | 0, 1, 4, HEAP32[1316053] | 0);
  $14 = HEAP32[$str_i22 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i41 = $14;
  } else {
    $retval_0_i_i41 = _llvm_bswap_i32($14 | 0) | 0;
  }
  do {
    if (($retval_0_i_i41 | 0) == ($and | 0)) {
      $15 = $str_i43;
      HEAP32[$str_i43 >> 2] = -1;
      $16 = HEAP32[1316053] | 0;
      _fread($15 | 0, 1, 4, $16 | 0);
      $18 = HEAP32[$str_i43 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i62 = $18;
      } else {
        $retval_0_i_i62 = _llvm_bswap_i32($18 | 0) | 0;
      }
      if (($retval_0_i_i62 | 0) != 1380273986) {
        break;
      }
      HEAP32[$str_i106 >> 2] = -1;
      _fread($str_i106 | 0, 1, 4, HEAP32[1316053] | 0);
      $37 = HEAP32[$str_i106 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i125 = $37;
      } else {
        $retval_0_i_i125 = _llvm_bswap_i32($37 | 0) | 0;
      }
      _fseek(HEAP32[1316053] | 0, 12, 1);
      HEAP32[$str_i127 >> 2] = -1;
      _fread($str_i127 | 0, 1, 4, HEAP32[1316053] | 0);
      $42 = HEAP32[$str_i127 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i146 = $42;
      } else {
        $retval_0_i_i146 = _llvm_bswap_i32($42 | 0) | 0;
      }
      HEAP32[1316049] = $retval_0_i_i146;
      _fseek(HEAP32[1316053] | 0, ($retval_0_i_i125 + 8 | 0) + (HEAP32[1311231] << 2) | 0, 0);
      HEAP32[$str_i148 >> 2] = -1;
      _fread($str_i148 | 0, 1, 4, HEAP32[1316053] | 0);
      $48 = HEAP32[$str_i148 >> 2] | 0;
      if (HEAP16[2631518] << 16 >> 16 == 18761) {
        $retval_0_i_i167 = $48;
      } else {
        $retval_0_i_i167 = _llvm_bswap_i32($48 | 0) | 0;
      }
      HEAP32[1357153] = $retval_0_i_i167;
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2] | 0, 5586120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[1316054] | 0, tempInt) | 0);
  _fseek(HEAP32[1316053] | 0, 0, 0);
  $22 = $str_i64;
  $23 = $str_i85;
  while (1) {
    HEAP32[$str_i64 >> 2] = -1;
    _fread($22 | 0, 1, 4, HEAP32[1316053] | 0);
    $26 = HEAP32[$str_i64 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i83 = $26;
    } else {
      $retval_0_i_i83 = _llvm_bswap_i32($26 | 0) | 0;
    }
    if (($retval_0_i_i83 | 0) == -1) {
      break;
    }
    HEAP32[$str_i85 >> 2] = -1;
    _fread($23 | 0, 1, 4, HEAP32[1316053] | 0);
    $29 = HEAP32[$str_i85 >> 2] | 0;
    if (HEAP16[2631518] << 16 >> 16 == 18761) {
      $retval_0_i_i104 = $29;
    } else {
      $retval_0_i_i104 = _llvm_bswap_i32($29 | 0) | 0;
    }
    do {
      if (($retval_0_i_i104 | 0) == 1380271190) {
        $30 = HEAP32[1316049] | 0;
        HEAP32[1316049] = $30 + 1 | 0;
        if (($30 | 0) != (HEAP32[1311231] | 0)) {
          break;
        }
        HEAP32[1357153] = (_ftell(HEAP32[1316053] | 0) | 0) - 8 | 0;
      }
    } while (0);
    _fseek(HEAP32[1316053] | 0, $retval_0_i_i83 - 8 | 0, 1);
  }
  STACKTOP = __stackBase__;
  return;
}
function _parse_foveon() {
  var $str_i_i320 = 0, $str_i_i = 0, $str_i298 = 0, $str_i277 = 0, $str_i256 = 0, $str_i235 = 0, $str_i214 = 0, $str_i193 = 0, $str_i172 = 0, $str_i151 = 0, $str_i130 = 0, $str_i109 = 0, $str_i88 = 0, $str_i67 = 0, $str_i46 = 0, $str_i25 = 0, $str_i = 0, $poff = 0, $name = 0, $value = 0, $4 = 0, $retval_0_i_i = 0, $6 = 0, $9 = 0, $retval_0_i_i44 = 0, $13 = 0, $retval_0_i_i65 = 0, $19 = 0, $entries_0_ph = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $arraydecay = 0, $29 = 0, $arraydecay88 = 0, $30 = 0, $31 = 0, $dec357_in = 0, $img_0356 = 0, $dec357 = 0, $34 = 0, $retval_0_i_i128 = 0, $37 = 0, $retval_0_i_i149 = 0, $40 = 0, $retval_0_i_i170 = 0, $call11 = 0, $45 = 0, $retval_0_i_i191 = 0, $46 = 0, $47 = 0, $49 = 0, $retval_0_i_i212 = 0, $52 = 0, $retval_0_i_i233 = 0, $55 = 0, $retval_0_i_i254 = 0, $add33 = 0, $sub = 0, $inc = 0, $66 = 0, $retval_0_i_i296 = 0, $_call63 = 0, $add66 = 0, $70 = 0, $i_0349 = 0, $73 = 0, $retval_0_i_i317 = 0, $inc78 = 0, $75 = 0, $i_1353 = 0, $i_0_i = 0, $80 = 0, $conv2_i_i_i = 0, $82 = 0, $retval_0_in_i_i_i = 0, $conv_i = 0, $arrayidx_i = 0, $arrayidx5_pre_phi_i = 0, $i_0_i322 = 0, $88 = 0, $conv2_i_i_i329 = 0, $90 = 0, $retval_0_in_i_i_i338 = 0, $conv_i339 = 0, $arrayidx_i340 = 0, $arrayidx5_pre_phi_i344 = 0, $inc152 = 0, $img_1 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2244 | 0;
  $str_i_i320 = __stackBase__ | 0;
  $str_i_i = __stackBase__ + 4 | 0;
  $str_i298 = __stackBase__ + 8 | 0;
  $str_i277 = __stackBase__ + 12 | 0;
  $str_i256 = __stackBase__ + 16 | 0;
  $str_i235 = __stackBase__ + 20 | 0;
  $str_i214 = __stackBase__ + 24 | 0;
  $str_i193 = __stackBase__ + 28 | 0;
  $str_i172 = __stackBase__ + 32 | 0;
  $str_i151 = __stackBase__ + 36 | 0;
  $str_i130 = __stackBase__ + 40 | 0;
  $str_i109 = __stackBase__ + 44 | 0;
  $str_i88 = __stackBase__ + 48 | 0;
  $str_i67 = __stackBase__ + 52 | 0;
  $str_i46 = __stackBase__ + 56 | 0;
  $str_i25 = __stackBase__ + 60 | 0;
  $str_i = __stackBase__ + 64 | 0;
  $poff = __stackBase__ + 68 | 0;
  $name = __stackBase__ + 2116 | 0;
  $value = __stackBase__ + 2180 | 0;
  HEAP16[2631518] = 18761;
  _fseek(HEAP32[1316053] | 0, 36, 0);
  HEAP32[$str_i >> 2] = -1;
  _fread($str_i | 0, 1, 4, HEAP32[1316053] | 0);
  $4 = HEAP32[$str_i >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i = $4;
  } else {
    $retval_0_i_i = _llvm_bswap_i32($4 | 0) | 0;
  }
  HEAP32[1350792] = $retval_0_i_i;
  _fseek(HEAP32[1316053] | 0, -4 | 0, 2);
  $6 = HEAP32[1316053] | 0;
  HEAP32[$str_i25 >> 2] = -1;
  _fread($str_i25 | 0, 1, 4, $6 | 0);
  $9 = HEAP32[$str_i25 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i44 = $9;
  } else {
    $retval_0_i_i44 = _llvm_bswap_i32($9 | 0) | 0;
  }
  _fseek($6 | 0, $retval_0_i_i44 | 0, 0);
  HEAP32[$str_i46 >> 2] = -1;
  _fread($str_i46 | 0, 1, 4, HEAP32[1316053] | 0);
  $13 = HEAP32[$str_i46 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i65 = $13;
  } else {
    $retval_0_i_i65 = _llvm_bswap_i32($13 | 0) | 0;
  }
  if (($retval_0_i_i65 | 0) != 1682130259) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[$str_i67 >> 2] = -1;
  _fread($str_i67 | 0, 1, 4, HEAP32[1316053] | 0);
  HEAP32[$str_i88 >> 2] = -1;
  _fread($str_i88 | 0, 1, 4, HEAP32[1316053] | 0);
  $19 = HEAP32[$str_i88 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $entries_0_ph = $19;
  } else {
    $entries_0_ph = _llvm_bswap_i32($19 | 0) | 0;
  }
  L2503 : do {
    if (($entries_0_ph | 0) != 0) {
      $20 = $str_i109;
      $21 = $str_i130;
      $22 = $str_i151;
      $23 = $str_i172;
      $24 = $str_i193;
      $25 = $str_i214;
      $26 = $str_i235;
      $27 = $str_i256;
      $28 = $str_i277;
      $arraydecay = $name | 0;
      $29 = $str_i_i;
      $arraydecay88 = $value | 0;
      $30 = $str_i_i320;
      $31 = $str_i298;
      $img_0356 = 0;
      $dec357_in = $entries_0_ph;
      while (1) {
        $dec357 = $dec357_in - 1 | 0;
        HEAP32[$str_i109 >> 2] = -1;
        _fread($20 | 0, 1, 4, HEAP32[1316053] | 0);
        $34 = HEAP32[$str_i109 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i128 = $34;
        } else {
          $retval_0_i_i128 = _llvm_bswap_i32($34 | 0) | 0;
        }
        HEAP32[$str_i130 >> 2] = -1;
        _fread($21 | 0, 1, 4, HEAP32[1316053] | 0);
        $37 = HEAP32[$str_i130 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i149 = $37;
        } else {
          $retval_0_i_i149 = _llvm_bswap_i32($37 | 0) | 0;
        }
        HEAP32[$str_i151 >> 2] = -1;
        _fread($22 | 0, 1, 4, HEAP32[1316053] | 0);
        $40 = HEAP32[$str_i151 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i170 = $40;
        } else {
          $retval_0_i_i170 = _llvm_bswap_i32($40 | 0) | 0;
        }
        $call11 = _ftell(HEAP32[1316053] | 0) | 0;
        _fseek(HEAP32[1316053] | 0, $retval_0_i_i128 | 0, 0);
        HEAP32[$str_i172 >> 2] = -1;
        _fread($23 | 0, 1, 4, HEAP32[1316053] | 0);
        $45 = HEAP32[$str_i172 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i191 = $45;
        } else {
          $retval_0_i_i191 = _llvm_bswap_i32($45 | 0) | 0;
        }
        if (($retval_0_i_i191 | 0) != ($retval_0_i_i170 << 24 | 541279571 | 0)) {
          break;
        }
        L2520 : do {
          if (($retval_0_i_i170 | 0) == 1195461961 | ($retval_0_i_i170 | 0) == 843140425) {
            $46 = HEAP32[1316053] | 0;
            _fseek($46 | 0, 8, 1);
            HEAP32[$str_i193 >> 2] = -1;
            $47 = HEAP32[1316053] | 0;
            _fread($24 | 0, 1, 4, $47 | 0);
            $49 = HEAP32[$str_i193 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i212 = $49;
            } else {
              $retval_0_i_i212 = _llvm_bswap_i32($49 | 0) | 0;
            }
            HEAP32[$str_i214 >> 2] = -1;
            _fread($25 | 0, 1, 4, HEAP32[1316053] | 0);
            $52 = HEAP32[$str_i214 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i233 = $52;
            } else {
              $retval_0_i_i233 = _llvm_bswap_i32($52 | 0) | 0;
            }
            HEAP32[$str_i235 >> 2] = -1;
            _fread($26 | 0, 1, 4, HEAP32[1316053] | 0);
            $55 = HEAP32[$str_i235 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i254 = $55;
            } else {
              $retval_0_i_i254 = _llvm_bswap_i32($55 | 0) | 0;
            }
            do {
              if (($retval_0_i_i233 | 0) > (HEAPU16[2622498] | 0 | 0)) {
                if (($retval_0_i_i254 | 0) <= (HEAPU16[2622502] | 0 | 0)) {
                  break;
                }
                do {
                  if (($retval_0_i_i212 | 0) == 6) {
                    label = 1875;
                  } else if (($retval_0_i_i212 | 0) == 5) {
                    HEAP32[1315948] = 1;
                    label = 1875;
                    break;
                  } else if (($retval_0_i_i212 | 0) == 30) {
                    HEAP32[1315947] = 90;
                    break;
                  } else {
                    HEAP32[1315947] = 0;
                    break;
                  }
                } while (0);
                if ((label | 0) == 1875) {
                  label = 0;
                  HEAP32[1315947] = 6;
                }
                HEAP16[2622498] = $retval_0_i_i233 & 65535;
                HEAP16[2622502] = $retval_0_i_i254 & 65535;
                HEAP32[1357153] = $retval_0_i_i128 + 28 | 0;
              }
            } while (0);
            $add33 = $retval_0_i_i128 + 28 | 0;
            _fseek(HEAP32[1316053] | 0, $add33 | 0, 0);
            do {
              if ((_fgetc(HEAP32[1316053] | 0) | 0) == 255) {
                if ((_fgetc(HEAP32[1316053] | 0) | 0) != 216) {
                  break;
                }
                $sub = $retval_0_i_i149 - 28 | 0;
                if ((HEAP32[1311016] | 0) >>> 0 >= $sub >>> 0) {
                  break;
                }
                HEAP32[1311013] = $add33;
                HEAP32[1311016] = $sub;
                HEAP32[1310740] = 60;
              }
            } while (0);
            $inc = $img_0356 + 1 | 0;
            if (($inc | 0) != 2 | (HEAP32[1311016] | 0) != 0) {
              $img_1 = $inc;
              break;
            }
            HEAP32[1311013] = $retval_0_i_i128 + 24 | 0;
            HEAP16[2622024] = $retval_0_i_i233 & 65535;
            HEAP16[2622034] = $retval_0_i_i254 & 65535;
            HEAP32[1310740] = 48;
            $img_1 = 2;
          } else if (($retval_0_i_i170 | 0) == 1347375696) {
            HEAP32[$str_i256 >> 2] = -1;
            _fread($27 | 0, 1, 4, HEAP32[1316053] | 0);
            HEAP32[$str_i277 >> 2] = -1;
            _fread($28 | 0, 1, 4, HEAP32[1316053] | 0);
            $66 = HEAP32[$str_i277 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i296 = $66;
            } else {
              $retval_0_i_i296 = _llvm_bswap_i32($66 | 0) | 0;
            }
            _fseek(HEAP32[1316053] | 0, 12, 1);
            $_call63 = $retval_0_i_i296 >>> 0 > 256 ? 256 : $retval_0_i_i296;
            L2552 : do {
              if (($_call63 << 1 | 0) > 0) {
                $add66 = ($retval_0_i_i128 + 24 | 0) + ($retval_0_i_i296 << 3) | 0;
                $70 = $retval_0_i_i296 >>> 0 < 256 ? -2 - ($retval_0_i_i296 << 1 ^ -2) | 0 : 512;
                $i_0349 = 0;
                while (1) {
                  HEAP32[$str_i298 >> 2] = -1;
                  _fread($31 | 0, 1, 4, HEAP32[1316053] | 0);
                  $73 = HEAP32[$str_i298 >> 2] | 0;
                  if (HEAP16[2631518] << 16 >> 16 == 18761) {
                    $retval_0_i_i317 = $73;
                  } else {
                    $retval_0_i_i317 = _llvm_bswap_i32($73 | 0) | 0;
                  }
                  HEAP32[$poff + ($i_0349 << 2) >> 2] = $add66 + ($retval_0_i_i317 << 1) | 0;
                  $inc78 = $i_0349 + 1 | 0;
                  if (($inc78 | 0) == ($70 | 0)) {
                    break L2552;
                  } else {
                    $i_0349 = $inc78;
                  }
                }
              }
            } while (0);
            if (($_call63 | 0) <= 0) {
              $img_1 = $img_0356;
              break;
            }
            $75 = $retval_0_i_i296 >>> 0 < 256 ? $retval_0_i_i296 : 256;
            $i_1353 = 0;
            while (1) {
              _fseek(HEAP32[1316053] | 0, HEAP32[$poff + ($i_1353 << 3) >> 2] | 0, 0);
              $i_0_i = 0;
              while (1) {
                if (($i_0_i | 0) >= 63) {
                  label = 1897;
                  break;
                }
                HEAP16[$str_i_i >> 1] = -1;
                _fread($29 | 0, 1, 2, HEAP32[1316053] | 0);
                $80 = HEAP16[$str_i_i >> 1] | 0;
                $conv2_i_i_i = $80 & 255;
                $82 = ($80 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i = ($82 & 65535) << 8 | $conv2_i_i_i;
                } else {
                  $retval_0_in_i_i_i = $conv2_i_i_i << 8 | $82 & 65535;
                }
                $conv_i = $retval_0_in_i_i_i & 255;
                $arrayidx_i = $name + $i_0_i | 0;
                HEAP8[$arrayidx_i] = $conv_i;
                if ($conv_i << 24 >> 24 == 0) {
                  $arrayidx5_pre_phi_i = $arrayidx_i;
                  break;
                } else {
                  $i_0_i = $i_0_i + 1 | 0;
                }
              }
              if ((label | 0) == 1897) {
                label = 0;
                $arrayidx5_pre_phi_i = $name + $i_0_i | 0;
              }
              HEAP8[$arrayidx5_pre_phi_i] = 0;
              _fseek(HEAP32[1316053] | 0, HEAP32[$poff + ($i_1353 << 3) + 4 >> 2] | 0, 0);
              $i_0_i322 = 0;
              while (1) {
                if (($i_0_i322 | 0) >= 63) {
                  label = 1904;
                  break;
                }
                HEAP16[$str_i_i320 >> 1] = -1;
                _fread($30 | 0, 1, 2, HEAP32[1316053] | 0);
                $88 = HEAP16[$str_i_i320 >> 1] | 0;
                $conv2_i_i_i329 = $88 & 255;
                $90 = ($88 & 65535) >>> 8;
                if (HEAP16[2631518] << 16 >> 16 == 18761) {
                  $retval_0_in_i_i_i338 = ($90 & 65535) << 8 | $conv2_i_i_i329;
                } else {
                  $retval_0_in_i_i_i338 = $conv2_i_i_i329 << 8 | $90 & 65535;
                }
                $conv_i339 = $retval_0_in_i_i_i338 & 255;
                $arrayidx_i340 = $value + $i_0_i322 | 0;
                HEAP8[$arrayidx_i340] = $conv_i339;
                if ($conv_i339 << 24 >> 24 == 0) {
                  $arrayidx5_pre_phi_i344 = $arrayidx_i340;
                  break;
                } else {
                  $i_0_i322 = $i_0_i322 + 1 | 0;
                }
              }
              if ((label | 0) == 1904) {
                label = 0;
                $arrayidx5_pre_phi_i344 = $value + $i_0_i322 | 0;
              }
              HEAP8[$arrayidx5_pre_phi_i344] = 0;
              if ((_strcmp($arraydecay | 0, 5586116) | 0) == 0) {
                HEAPF32[1316048] = +(_atoi($arraydecay88 | 0) | 0);
              }
              if ((_strcmp($arraydecay | 0, 5586104) | 0) == 0) {
                _strcpy(5263724, $arraydecay88 | 0);
              }
              if ((_strcmp($arraydecay | 0, 5586092) | 0) == 0) {
                _strcpy(5263468, $arraydecay88 | 0);
              }
              if ((_strcmp($arraydecay | 0, 5586084) | 0) == 0) {
                _strcpy(5263404, $arraydecay88 | 0);
              }
              if ((_strcmp($arraydecay | 0, 5586076) | 0) == 0) {
                HEAP32[1310894] = _atoi($arraydecay88 | 0) | 0;
              }
              if ((_strcmp($arraydecay | 0, 5586068) | 0) == 0) {
                HEAPF32[1311229] = +(_atoi($arraydecay88 | 0) | 0) / 1.0e6;
              }
              if ((_strcmp($arraydecay | 0, 5586056) | 0) == 0) {
                HEAPF32[1390397] = +_strtod($arraydecay88, 0);
              }
              if ((_strcmp($arraydecay | 0, 5586048) | 0) == 0) {
                HEAPF32[1350791] = +_strtod($arraydecay88, 0);
              }
              $inc152 = $i_1353 + 1 | 0;
              if (($inc152 | 0) == ($75 | 0)) {
                $img_1 = $img_0356;
                break L2520;
              } else {
                $i_1353 = $inc152;
              }
            }
          } else if (($retval_0_i_i170 | 0) == 1179468099) {
            HEAP32[1315884] = $retval_0_i_i128 + 8 | 0;
            HEAP32[1315885] = $retval_0_i_i149 - 28 | 0;
            $img_1 = $img_0356;
          } else {
            $img_1 = $img_0356;
          }
        } while (0);
        _fseek(HEAP32[1316053] | 0, $call11 | 0, 0);
        if (($dec357 | 0) == 0) {
          break L2503;
        } else {
          $img_0356 = $img_1;
          $dec357_in = $dec357;
        }
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  HEAP32[1316050] = 1;
  STACKTOP = __stackBase__;
  return;
}
function _adobe_coeff($make, $model) {
  $make = $make | 0;
  $model = $model | 0;
  var $cam_xyz = 0, $arraydecay = 0, $i_0 = 0, $0 = 0, $1 = 0, $2 = 0, $div = 0.0, $arrayidx32 = 0, $div_1 = 0.0, $arrayidx32_1 = 0, $div_2 = 0.0, $arrayidx32_2 = 0, $div_3 = 0.0, $arrayidx32_3 = 0, $div_4 = 0.0, $arrayidx32_4 = 0, $div_5 = 0.0, $arrayidx32_5 = 0, $div_6 = 0.0, $arrayidx32_6 = 0, $div_7 = 0.0, $arrayidx32_7 = 0, $div_8 = 0.0, $arrayidx32_8 = 0, $div_9 = 0.0, $arrayidx32_9 = 0, $div_10 = 0.0, $arrayidx32_10 = 0, $div_11 = 0.0, $arrayidx32_11 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 228 | 0;
  $cam_xyz = __stackBase__ | 0;
  $arraydecay = __stackBase__ + 96 | 0;
  _sprintf($arraydecay | 0, 5579300, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $make, HEAP32[tempInt + 4 >> 2] = $model, tempInt) | 0);
  $i_0 = 0;
  while (1) {
    if ($i_0 >>> 0 >= 368) {
      label = 1944;
      break;
    }
    $0 = HEAP32[5561592 + ($i_0 << 5) >> 2] | 0;
    if ((_strncmp($arraydecay | 0, $0 | 0, _strlen($0) | 0) | 0) == 0) {
      break;
    } else {
      $i_0 = $i_0 + 1 | 0;
    }
  }
  if ((label | 0) == 1944) {
    STACKTOP = __stackBase__;
    return;
  }
  $1 = HEAP16[5561596 + ($i_0 << 5) >> 1] | 0;
  if ($1 << 16 >> 16 != 0) {
    HEAP32[1390380] = $1 & 65535;
  }
  $2 = HEAP16[5561598 + ($i_0 << 5) >> 1] | 0;
  if ($2 << 16 >> 16 != 0) {
    HEAP32[1315898] = $2 & 65535;
  }
  if (($i_0 | 0) == 39) {
    STACKTOP = __stackBase__;
    return;
  }
  $div = +(HEAP16[5561600 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32 = $cam_xyz | 0;
  HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx32 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_1 = +(HEAP16[5561602 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_1 = $cam_xyz + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx32_1 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_2 = +(HEAP16[5561604 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_2 = $cam_xyz + 16 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx32_2 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_3 = +(HEAP16[5561606 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_3 = $cam_xyz + 24 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_3, HEAP32[$arrayidx32_3 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_4 = +(HEAP16[5561608 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_4 = $cam_xyz + 32 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_4, HEAP32[$arrayidx32_4 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_5 = +(HEAP16[5561610 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_5 = $cam_xyz + 40 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_5, HEAP32[$arrayidx32_5 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_6 = +(HEAP16[5561612 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_6 = $cam_xyz + 48 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_6, HEAP32[$arrayidx32_6 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_7 = +(HEAP16[5561614 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_7 = $cam_xyz + 56 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_7, HEAP32[$arrayidx32_7 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_8 = +(HEAP16[5561616 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_8 = $cam_xyz + 64 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_8, HEAP32[$arrayidx32_8 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_9 = +(HEAP16[5561618 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_9 = $cam_xyz + 72 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_9, HEAP32[$arrayidx32_9 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_10 = +(HEAP16[5561620 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_10 = $cam_xyz + 80 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_10, HEAP32[$arrayidx32_10 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_10 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  $div_11 = +(HEAP16[5561622 + ($i_0 << 5) >> 1] << 16 >> 16 | 0) / 1.0e4;
  $arrayidx32_11 = $cam_xyz + 88 | 0;
  HEAPF64[tempDoublePtr >> 3] = $div_11, HEAP32[$arrayidx32_11 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx32_11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  _cam_xyz_coeff($cam_xyz | 0);
  STACKTOP = __stackBase__;
  return;
}
function _guess_byte_order($words) {
  $words = $words | 0;
  var $test = 0, $1 = 0.0, $2 = 0.0, $dec18 = 0, $t_017 = 0, $arraydecay2 = 0, $xor = 0, $conv = 0, $conv12 = 0, $conv15 = 0, $conv22 = 0, $conv25 = 0.0, $add = 0.0, $conv25_1 = 0.0, $add_1 = 0.0, $8 = 0.0, $9 = 0.0, $cmp31 = 0, $conv33 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $test = __stackBase__ | 0;
  _fread($test | 0, 2, 2, HEAP32[1316053] | 0);
  if (($words | 0) == 2) {
    $9 = 0.0;
    $8 = 0.0;
    $cmp31 = $9 < $8;
    $conv33 = $cmp31 ? 19789 : 18761;
    STACKTOP = __stackBase__;
    return $conv33 | 0;
  }
  $t_017 = 2;
  $dec18 = $words - 3 | 0;
  $2 = 0.0;
  $1 = 0.0;
  while (1) {
    $arraydecay2 = $test + ($t_017 << 1) | 0;
    _fread($arraydecay2 | 0, 2, 1, HEAP32[1316053] | 0);
    $xor = $t_017 ^ 2;
    $conv = HEAPU8[$test + ($xor << 1) | 0] | 0;
    $conv12 = HEAPU8[$test + ($xor << 1) + 1 | 0] | 0;
    $conv15 = HEAPU8[$arraydecay2] | 0;
    $conv22 = HEAPU8[$test + ($t_017 << 1) + 1 | 0] | 0;
    $conv25 = +(($conv << 8 | $conv12) - ($conv15 << 8 | $conv22) | 0);
    $add = $2 + $conv25 * $conv25;
    $conv25_1 = +(($conv12 << 8 | $conv) - ($conv22 << 8 | $conv15) | 0);
    $add_1 = $1 + $conv25_1 * $conv25_1;
    if (($dec18 | 0) == 0) {
      $9 = $add;
      $8 = $add_1;
      break;
    } else {
      $t_017 = $t_017 + 1 & 3;
      $dec18 = $dec18 - 1 | 0;
      $2 = $add;
      $1 = $add_1;
    }
  }
  $cmp31 = $9 < $8;
  $conv33 = $cmp31 ? 19789 : 18761;
  STACKTOP = __stackBase__;
  return $conv33 | 0;
}
function _find_green($bps, $bite, $off0, $off1) {
  $bps = $bps | 0;
  $bite = $bite | 0;
  $off0 = $off0 | 0;
  $off1 = $off1 | 0;
  var $img = 0, $sum = 0, $0 = 0, $sub19 = 0, $sh_prom24$0 = 0, $sh_prom$0 = 0, $cmp1037 = 0, $2 = 0, $3 = 0, $col_049 = 0, $vbits_048 = 0, $bitbuf_147$0 = 0, $bitbuf_147$1 = 0, $sub = 0, $vbits_142 = 0, $bitbuf_241$0 = 0, $bitbuf_241$1 = 0, $i_039 = 0, $bitbuf_338$0 = 0, $bitbuf_338$1 = 0, $or$0 = 0, $or$1 = 0, $add = 0, $bitbuf_3_lcssa$0 = 0, $bitbuf_3_lcssa$1 = 0, $add17 = 0, $5 = 0, $vbits_1_lcssa = 0, $bitbuf_2_lcssa$0 = 0, $bitbuf_2_lcssa$1 = 0, $inc = 0, $bitbuf_1_lcssa$0 = 0, $bitbuf_1_lcssa$1 = 0, $7 = 0, $8 = 0, $9 = 0, $c_136 = 0, $add41 = 0, $10 = 0, $sub45 = 0, $shr54 = 0, $and = 0, $arrayidx66 = 0, $add67 = 0.0, $12 = 0, $sub75 = 0, $shr84 = 0, $arrayidx98 = 0, $add99 = 0.0, $arrayidx103_phi_trans_insert = 0, $_pre55 = 0.0, $arrayidx104_phi_trans_insert = 0, $14 = 0.0, $15 = 0.0, $div = 0.0, $call105 = 0.0, $mul = 0.0, $conv106 = 0.0, $16 = 0, $col_049_1 = 0, $vbits_048_1 = 0, $bitbuf_147_1$0 = 0, $bitbuf_147_1$1 = 0, $sub_1 = 0, $vbits_142_1 = 0, $bitbuf_241_1$0 = 0, $bitbuf_241_1$1 = 0, $i_039_1 = 0, $bitbuf_338_1$0 = 0, $bitbuf_338_1$1 = 0, $or_1$0 = 0, $or_1$1 = 0, $add_1 = 0, $bitbuf_3_lcssa_1$0 = 0, $bitbuf_3_lcssa_1$1 = 0, $add17_1 = 0, $18 = 0, $vbits_1_lcssa_1 = 0, $bitbuf_2_lcssa_1$0 = 0, $bitbuf_2_lcssa_1$1 = 0, $inc_1 = 0, $19 = 0, $sub3434 = 0, __stackBase__ = 0, $shl$0 = 0, $shl$1 = 0, $shl22$0 = 0, $shl22$1 = 0, $shr$0 = 0, $shr$1 = 0, $shl_1$0 = 0, $shl_1$1 = 0, $shl22_1$0 = 0, $shl22_1$1 = 0, $shr_1$0 = 0, $shr_1$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8272 | 0;
  $img = __stackBase__ | 0;
  $sum = __stackBase__ + 8256 | 0;
  $0 = $sum;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $sub19 = 64 - $bps | 0;
  $sh_prom24$0 = $sub19;
  $sh_prom$0 = $bite;
  $cmp1037 = ($bite | 0) > 0;
  _fseek(HEAP32[1316053] | 0, $off0 | 0, 0);
  $2 = HEAP16[2621484] | 0;
  L2637 : do {
    if ($2 << 16 >> 16 == 0) {
      $bitbuf_1_lcssa$1 = 0;
      $bitbuf_1_lcssa$0 = 0;
    } else {
      $bitbuf_147$1 = 0;
      $bitbuf_147$0 = 0;
      $vbits_048 = 0;
      $col_049 = 0;
      $3 = $2;
      while (1) {
        $sub = $vbits_048 - $bps | 0;
        if (($sub | 0) < 0) {
          $bitbuf_241$1 = $bitbuf_147$1;
          $bitbuf_241$0 = $bitbuf_147$0;
          $vbits_142 = $sub;
          while (1) {
            Runtime_bitshift64($bitbuf_241$0 | 0, $bitbuf_241$1 | 0, 0, $sh_prom$0 | 0);
            $shl$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            L2643 : do {
              if ($cmp1037) {
                $bitbuf_338$1 = $shl$1;
                $bitbuf_338$0 = $shl$0;
                $i_039 = 0;
                while (1) {
                  $or$0 = _fgetc(HEAP32[1316053] | 0) << $i_039 | $bitbuf_338$0;
                  $or$1 = 0 | $bitbuf_338$1;
                  $add = $i_039 + 8 | 0;
                  if (($add | 0) < ($bite | 0)) {
                    $bitbuf_338$1 = $or$1;
                    $bitbuf_338$0 = $or$0;
                    $i_039 = $add;
                  } else {
                    $bitbuf_3_lcssa$1 = $or$1;
                    $bitbuf_3_lcssa$0 = $or$0;
                    break L2643;
                  }
                }
              } else {
                $bitbuf_3_lcssa$1 = $shl$1;
                $bitbuf_3_lcssa$0 = $shl$0;
              }
            } while (0);
            $add17 = $vbits_142 + $bite | 0;
            if (($add17 | 0) < 0) {
              $bitbuf_241$1 = $bitbuf_3_lcssa$1;
              $bitbuf_241$0 = $bitbuf_3_lcssa$0;
              $vbits_142 = $add17;
            } else {
              break;
            }
          }
          $bitbuf_2_lcssa$1 = $bitbuf_3_lcssa$1;
          $bitbuf_2_lcssa$0 = $bitbuf_3_lcssa$0;
          $vbits_1_lcssa = $add17;
          $5 = HEAP16[2621484] | 0;
        } else {
          $bitbuf_2_lcssa$1 = $bitbuf_147$1;
          $bitbuf_2_lcssa$0 = $bitbuf_147$0;
          $vbits_1_lcssa = $sub;
          $5 = $3;
        }
        Runtime_bitshift64($bitbuf_2_lcssa$0 | 0, $bitbuf_2_lcssa$1 | 0, 0, $sub19 - $vbits_1_lcssa | 0);
        $shl22$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl22$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        Runtime_bitshift64($shl22$0 | 0, $shl22$1 | 0, 2, $sh_prom24$0 | 0);
        $shr$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        HEAP16[$img + ($col_049 << 1) >> 1] = $shr$0 & 65535;
        $inc = $col_049 + 1 | 0;
        if (($inc | 0) < ($5 & 65535 | 0)) {
          $bitbuf_147$1 = $bitbuf_2_lcssa$1;
          $bitbuf_147$0 = $bitbuf_2_lcssa$0;
          $vbits_048 = $vbits_1_lcssa;
          $col_049 = $inc;
          $3 = $5;
        } else {
          $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
          $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
          break L2637;
        }
      }
    }
  } while (0);
  _fseek(HEAP32[1316053] | 0, $off1 | 0, 0);
  $7 = HEAP16[2621484] | 0;
  L2650 : do {
    if ($7 << 16 >> 16 == 0) {
      $19 = 0;
    } else {
      $bitbuf_147_1$1 = $bitbuf_1_lcssa$1;
      $bitbuf_147_1$0 = $bitbuf_1_lcssa$0;
      $vbits_048_1 = 0;
      $col_049_1 = 0;
      $16 = $7;
      while (1) {
        $sub_1 = $vbits_048_1 - $bps | 0;
        if (($sub_1 | 0) < 0) {
          $bitbuf_241_1$1 = $bitbuf_147_1$1;
          $bitbuf_241_1$0 = $bitbuf_147_1$0;
          $vbits_142_1 = $sub_1;
          while (1) {
            Runtime_bitshift64($bitbuf_241_1$0 | 0, $bitbuf_241_1$1 | 0, 0, $sh_prom$0 | 0);
            $shl_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
            L2656 : do {
              if ($cmp1037) {
                $bitbuf_338_1$1 = $shl_1$1;
                $bitbuf_338_1$0 = $shl_1$0;
                $i_039_1 = 0;
                while (1) {
                  $or_1$0 = _fgetc(HEAP32[1316053] | 0) << $i_039_1 | $bitbuf_338_1$0;
                  $or_1$1 = 0 | $bitbuf_338_1$1;
                  $add_1 = $i_039_1 + 8 | 0;
                  if (($add_1 | 0) < ($bite | 0)) {
                    $bitbuf_338_1$1 = $or_1$1;
                    $bitbuf_338_1$0 = $or_1$0;
                    $i_039_1 = $add_1;
                  } else {
                    $bitbuf_3_lcssa_1$1 = $or_1$1;
                    $bitbuf_3_lcssa_1$0 = $or_1$0;
                    break L2656;
                  }
                }
              } else {
                $bitbuf_3_lcssa_1$1 = $shl_1$1;
                $bitbuf_3_lcssa_1$0 = $shl_1$0;
              }
            } while (0);
            $add17_1 = $vbits_142_1 + $bite | 0;
            if (($add17_1 | 0) < 0) {
              $bitbuf_241_1$1 = $bitbuf_3_lcssa_1$1;
              $bitbuf_241_1$0 = $bitbuf_3_lcssa_1$0;
              $vbits_142_1 = $add17_1;
            } else {
              break;
            }
          }
          $bitbuf_2_lcssa_1$1 = $bitbuf_3_lcssa_1$1;
          $bitbuf_2_lcssa_1$0 = $bitbuf_3_lcssa_1$0;
          $vbits_1_lcssa_1 = $add17_1;
          $18 = HEAP16[2621484] | 0;
        } else {
          $bitbuf_2_lcssa_1$1 = $bitbuf_147_1$1;
          $bitbuf_2_lcssa_1$0 = $bitbuf_147_1$0;
          $vbits_1_lcssa_1 = $sub_1;
          $18 = $16;
        }
        Runtime_bitshift64($bitbuf_2_lcssa_1$0 | 0, $bitbuf_2_lcssa_1$1 | 0, 0, $sub19 - $vbits_1_lcssa_1 | 0);
        $shl22_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shl22_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        Runtime_bitshift64($shl22_1$0 | 0, $shl22_1$1 | 0, 2, $sh_prom24$0 | 0);
        $shr_1$0 = HEAP32[tempDoublePtr >> 2] | 0, $shr_1$1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        HEAP16[$img + 4128 + ($col_049_1 << 1) >> 1] = $shr_1$0 & 65535;
        $inc_1 = $col_049_1 + 1 | 0;
        if (($inc_1 | 0) < ($18 & 65535 | 0)) {
          $bitbuf_147_1$1 = $bitbuf_2_lcssa_1$1;
          $bitbuf_147_1$0 = $bitbuf_2_lcssa_1$0;
          $vbits_048_1 = $vbits_1_lcssa_1;
          $col_049_1 = $inc_1;
          $16 = $18;
        } else {
          $19 = $18;
          break L2650;
        }
      }
    }
  } while (0);
  $sub3434 = ($19 & 65535) - 1 | 0;
  if (($sub3434 | 0) <= 0) {
    $15 = 0.0;
    $14 = 0.0;
    $div = $15 / $14;
    $call105 = +Math_log($div);
    $mul = $call105 * 100.0;
    $conv106 = $mul;
    STACKTOP = __stackBase__;
    return +$conv106;
  }
  $c_136 = 0;
  $9 = HEAP16[$img >> 1] | 0;
  $8 = HEAP16[$img + 4128 >> 1] | 0;
  while (1) {
    $add41 = $c_136 + 1 | 0;
    $10 = HEAP16[$img + 4128 + ($add41 << 1) >> 1] | 0;
    $sub45 = ($9 & 65535) - ($10 & 65535) | 0;
    $shr54 = $sub45 >> 31;
    $and = $c_136 & 1;
    $arrayidx66 = $sum + ($and << 3) | 0;
    $add67 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx66 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx66 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + +(($shr54 ^ $sub45) - $shr54 | 0);
    HEAPF64[tempDoublePtr >> 3] = $add67, HEAP32[$arrayidx66 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx66 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $12 = HEAP16[$img + ($add41 << 1) >> 1] | 0;
    $sub75 = ($8 & 65535) - ($12 & 65535) | 0;
    $shr84 = $sub75 >> 31;
    $arrayidx98 = $sum + (($and ^ 1) << 3) | 0;
    $add99 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + +(($shr84 ^ $sub75) - $shr84 | 0);
    HEAPF64[tempDoublePtr >> 3] = $add99, HEAP32[$arrayidx98 >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[$arrayidx98 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    if (($add41 | 0) < ($sub3434 | 0)) {
      $c_136 = $add41;
      $9 = $12;
      $8 = $10;
    } else {
      break;
    }
  }
  $arrayidx103_phi_trans_insert = $sum | 0;
  $_pre55 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx103_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx103_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $arrayidx104_phi_trans_insert = $sum + 8 | 0;
  $15 = $_pre55;
  $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx104_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx104_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  $div = $15 / $14;
  $call105 = +Math_log($div);
  $mul = $call105 * 100.0;
  $conv106 = $mul;
  STACKTOP = __stackBase__;
  return +$conv106;
}
function _identify() {
  var $str_i681 = 0, $str_i666 = 0, $str_i645 = 0, $str_i630 = 0, $str_i615 = 0, $str_i577 = 0, $str_i556 = 0, $tail_i = 0, $t_i = 0, $histo_i = 0, $str_i493 = 0, $str_i472 = 0, $str_i457 = 0, $str_i442 = 0, $str_i421 = 0, $str_i400 = 0, $str_i385 = 0, $str_i370 = 0, $str_i355 = 0, $str_i340 = 0, $str_i319 = 0, $str_i298 = 0, $str_i277 = 0, $str_i256 = 0, $str_i235 = 0, $str_i214 = 0, $str_i199 = 0, $str_i179 = 0, $str_i = 0, $head = 0, $jh = 0, $i_1761 = 0, $inc35 = 0, $3 = 0, $conv2_i_i = 0, $5 = 0, $retval_0_in_i_i = 0, $10 = 0, $retval_0_i_i187 = 0, $arraydecay = 0, $call41 = 0, $add_ptr1_i = 0, $c_0_i = 0, $c_0_i190 = 0, $cp_0 = 0, $15 = 0, $20 = 0, $conv2_i_i203 = 0, $22 = 0, $retval_0_in_i_i211 = 0, $add = 0, $26 = 0, $27 = 0, $28 = 0, $c_2756 = 0, $31 = 0, $retval_0_i_i233 = 0, $inc112 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $retval_0_i_i254 = 0, $40 = 0, $retval_0_i_i275 = 0, $45 = 0, $retval_0_i_i296 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $retval_0_i_i317 = 0, $add151 = 0, $60 = 0, $retval_0_i_i338 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $conv2_i_i344 = 0, $72 = 0, $retval_0_in_i_i352 = 0, $79 = 0, $conv2_i_i374 = 0, $81 = 0, $retval_0_in_i_i382 = 0, $86 = 0, $conv2_i_i389 = 0, $88 = 0, $retval_0_in_i_i397 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $retval_0_i_i419 = 0, $98 = 0, $retval_0_i_i440 = 0, $102 = 0, $conv2_i_i446 = 0, $104 = 0, $retval_0_in_i_i454 = 0, $109 = 0, $conv2_i_i461 = 0, $111 = 0, $retval_0_in_i_i469 = 0, $mul202 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $retval_0_i_i491 = 0, $123 = 0, $retval_0_i_i512 = 0, $i_2758 = 0, $arraydecay262 = 0, $arraydecay265 = 0, $inc273 = 0, $zero_fsize_0 = 0, $i_3755 = 0, $129 = 0, $inc319 = 0, $call324 = 0, $call327 = 0, $call330 = 0, $cp_1 = 0, $incdec_ptr752 = 0, $incdec_ptr754 = 0, $incdec_ptr = 0, $incdec_ptr342749 = 0, $incdec_ptr342751 = 0, $incdec_ptr342 = 0, $call348 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $lnot = 0, $155 = 0, $156 = 0, $158 = 0, $conv510 = 0, $sub512 = 0, $159 = 0, $sub516 = 0, $160 = 0, $row_0_i = 0, $storemerge747 = 0, $_pr714 = 0, $163 = 0, $168 = 0, $169 = 0, $cmp756 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $189 = 0, $i_05_i = 0, $arrayidx_i = 0, $inc2_i = 0, $i_1_i = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $arrayidx_i540 = 0, $arrayidx2_i = 0, $arrayidx4_i = 0, $arrayidx7_i541 = 0, $arrayidx10_i = 0, $arrayidx13_i = 0, $arrayidx16_i = 0, $arrayidx19_i = 0, $i_0_i = 0, $conv1191 = 0, $conv1193 = 0, $i_4 = 0, $213 = 0, $214 = 0, $215 = 0, $nz_05_i = 0, $i_04_i = 0, $nz_0_inc_i = 0, $inc2_i553 = 0, $$etemp$1 = 0, $st$2$0 = 0, $st$3$1 = 0, $221 = 0, $_pr729 = 0, $222 = 0, $conv1264 = 0, $226 = 0, $tobool1398 = 0, $sub1435 = 0, $sub1456 = 0, $storemerge134 = 0, $storemerge133 = 0, $230 = 0, $232 = 0, $call1553 = 0, $237 = 0, $238 = 0, $239 = 0, $241 = 0, $retval_0_i_i575 = 0, $245 = 0, $retval_0_i_i596 = 0, $247 = 0, $248 = 0, $250 = 0, $254 = 0, $255 = 0, $256 = 0, $$etemp$5 = 0, $st$6$0 = 0, $st$7$1 = 0, $257 = 0, $storemerge = 0, $$etemp$9 = 0, $st$10$0 = 0, $st$11$1 = 0, $$etemp$13 = 0, $st$14$0 = 0, $st$15$1 = 0, $conv1723 = 0, $260 = 0, $conv1727 = 0, $add1736 = 0, $_add1736 = 0, $261 = 0, $262 = 0, $i_5748 = 0, $add1770 = 0, $add1776 = 0, $269 = 0, $270 = 0, $inc1780 = 0, $276 = 0, $cmp1821 = 0, $tobool1877 = 0, $inc1914 = 0, $279 = 0, $280 = 0, $mul1964 = 0, $281 = 0, $cmp1_i = 0, $cmp2056 = 0, $_824 = 0, $_825 = 0.0, $288 = 0, $289 = 0, $296 = 0, $conv2_i_i619 = 0, $298 = 0, $retval_0_in_i_i627 = 0, $303 = 0, $conv2_i_i634 = 0, $305 = 0, $retval_0_in_i_i642 = 0, $312 = 0, $conv2_i_i670 = 0, $314 = 0, $retval_0_in_i_i678 = 0, $cond2132 = 0, $316 = 0, $317 = 0, $318 = 0, $sub2150 = 0, $319 = 0, $320 = 0, $322 = 0, $conv2_i_i685 = 0, $324 = 0, $retval_0_in_i_i693 = 0, $tobool2160 = 0, $conv2164 = 0, $conv2422 = 0, $conv2423 = 0, $332 = 0, $339 = 0, $shr2458 = 0, $add2469 = 0, $conv2473 = 0, $342 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $cond2520 = 0, $361 = 0, $364 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1692 | 0;
  $str_i681 = __stackBase__ | 0;
  $str_i666 = __stackBase__ + 4 | 0;
  $str_i645 = __stackBase__ + 8 | 0;
  $str_i630 = __stackBase__ + 12 | 0;
  $str_i615 = __stackBase__ + 16 | 0;
  $str_i577 = __stackBase__ + 20 | 0;
  $str_i556 = __stackBase__ + 24 | 0;
  $tail_i = __stackBase__ + 28 | 0;
  $t_i = __stackBase__ + 452 | 0;
  $histo_i = __stackBase__ + 464 | 0;
  $str_i493 = __stackBase__ + 1488 | 0;
  $str_i472 = __stackBase__ + 1492 | 0;
  $str_i457 = __stackBase__ + 1496 | 0;
  $str_i442 = __stackBase__ + 1500 | 0;
  $str_i421 = __stackBase__ + 1504 | 0;
  $str_i400 = __stackBase__ + 1508 | 0;
  $str_i385 = __stackBase__ + 1512 | 0;
  $str_i370 = __stackBase__ + 1516 | 0;
  $str_i355 = __stackBase__ + 1520 | 0;
  $str_i340 = __stackBase__ + 1524 | 0;
  $str_i319 = __stackBase__ + 1528 | 0;
  $str_i298 = __stackBase__ + 1532 | 0;
  $str_i277 = __stackBase__ + 1536 | 0;
  $str_i256 = __stackBase__ + 1540 | 0;
  $str_i235 = __stackBase__ + 1544 | 0;
  $str_i214 = __stackBase__ + 1548 | 0;
  $str_i199 = __stackBase__ + 1552 | 0;
  $str_i179 = __stackBase__ + 1556 | 0;
  $str_i = __stackBase__ + 1560 | 0;
  $head = __stackBase__ + 1564 | 0;
  $jh = __stackBase__ + 1596 | 0;
  HEAP32[1356938] = -1;
  HEAP32[1350792] = -1;
  HEAP32[1311009] = -1;
  HEAP16[2780160] = 0;
  HEAP32[1349756] = 0;
  HEAP16[2699510] = 0;
  HEAP16[2622498] = 0;
  HEAP16[2622502] = 0;
  HEAP16[2631898] = 0;
  HEAP16[2621786] = 0;
  HEAP16[2621484] = 0;
  HEAP16[2699404] = 0;
  HEAP32[1315898] = 0;
  HEAP8[5263404] = 0;
  HEAP8[5263468] = 0;
  HEAP8[5263724] = 0;
  HEAP8[5561524] = 0;
  HEAP8[5428100] = 0;
  HEAP8[5561016] = 0;
  HEAP32[1310892] = 0;
  HEAPF32[1350791] = 0.0;
  HEAPF32[1390397] = 0.0;
  HEAPF32[1311229] = 0.0;
  HEAPF32[1316048] = 0.0;
  HEAP32[1310898] = 0;
  _memset(5243596, 0, 440);
  _memset(5398832, 0, 128);
  HEAP32[1390256] = 0;
  HEAP32[1390257] = 0;
  HEAP32[1390258] = 0;
  HEAP32[1390259] = 0;
  _memset(5242972, 0, 128);
  _memset(5263596, 0, 128);
  HEAP16[2622034] = 0;
  HEAP16[2622024] = 0;
  HEAP32[1311016] = 0;
  HEAP32[1311013] = 0;
  HEAP32[1311015] = 0;
  HEAP32[1315947] = 0;
  HEAP32[1310740] = 60;
  HEAP32[1311010] = 0;
  HEAP32[1311011] = 0;
  HEAP32[1315885] = 0;
  HEAP32[1357153] = 0;
  HEAP32[1315948] = 0;
  HEAP32[1357024] = 0;
  HEAP32[1310721] = 0;
  HEAP32[1316033] = 0;
  HEAP32[1316050] = 0;
  HEAP32[1390380] = 0;
  HEAP32[1310897] = 0;
  HEAP32[1311232] = 0;
  HEAP32[1310894] = 0;
  HEAP32[1310720] = 0;
  HEAP32[1357154] = 0;
  HEAP32[1311402] = 0;
  HEAP32[1315883] = 0;
  HEAP32[1311252] = 1;
  HEAP32[1316049] = 1;
  HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[1310896] = 0;
  HEAP32[1310895] = 0;
  HEAPF32[1390311] = 0.0;
  HEAPF32[1311403] = 1.0;
  HEAPF32[1390241] = 0.0;
  HEAPF32[1390245] = 0.0;
  HEAPF32[1390249] = 0.0;
  HEAPF32[1311233] = 1.0;
  HEAPF32[1311237] = 0.0;
  HEAPF32[1311241] = 0.0;
  HEAPF32[1390312] = 1.0;
  HEAPF32[1311404] = 1.0;
  HEAPF32[1390242] = 0.0;
  HEAPF32[1390246] = 0.0;
  HEAPF32[1390250] = 0.0;
  HEAPF32[1311234] = 0.0;
  HEAPF32[1311238] = 1.0;
  HEAPF32[1311242] = 0.0;
  HEAPF32[1390313] = 0.0;
  HEAPF32[1311405] = 1.0;
  HEAPF32[1390243] = 0.0;
  HEAPF32[1390247] = 0.0;
  HEAPF32[1390251] = 0.0;
  HEAPF32[1311235] = 0.0;
  HEAPF32[1311239] = 0.0;
  HEAPF32[1311243] = 1.0;
  HEAPF32[1390314] = 0.0;
  HEAPF32[1311406] = 0.0;
  HEAPF32[1390244] = 0.0;
  HEAPF32[1390248] = 0.0;
  HEAPF32[1390252] = 0.0;
  HEAPF32[1311236] = 0.0;
  HEAPF32[1311240] = 0.0;
  HEAPF32[1311244] = 0.0;
  HEAP32[1390240] = 3;
  $i_1761 = 0;
  while (1) {
    HEAP16[5428620 + ($i_1761 << 1) >> 1] = $i_1761 & 65535;
    $inc35 = $i_1761 + 1 | 0;
    if (($inc35 | 0) == 65536) {
      break;
    } else {
      $i_1761 = $inc35;
    }
  }
  HEAP16[$str_i >> 1] = -1;
  _fread($str_i | 0, 1, 2, HEAP32[1316053] | 0);
  $3 = HEAP16[$str_i >> 1] | 0;
  $conv2_i_i = $3 & 255;
  $5 = ($3 & 65535) >>> 8;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_in_i_i = ($5 & 65535) << 8 | $conv2_i_i;
  } else {
    $retval_0_in_i_i = $conv2_i_i << 8 | $5 & 65535;
  }
  HEAP16[2631518] = $retval_0_in_i_i & 65535;
  HEAP32[$str_i179 >> 2] = -1;
  _fread($str_i179 | 0, 1, 4, HEAP32[1316053] | 0);
  $10 = HEAP32[$str_i179 >> 2] | 0;
  if (HEAP16[2631518] << 16 >> 16 == 18761) {
    $retval_0_i_i187 = $10;
  } else {
    $retval_0_i_i187 = _llvm_bswap_i32($10 | 0) | 0;
  }
  _fseek(HEAP32[1316053] | 0, 0, 0);
  $arraydecay = $head | 0;
  _fread($arraydecay | 0, 1, 32, HEAP32[1316053] | 0);
  _fseek(HEAP32[1316053] | 0, 0, 2);
  $call41 = _ftell(HEAP32[1316053] | 0) | 0;
  $add_ptr1_i = $head + 28 | 0;
  $c_0_i = $arraydecay;
  while (1) {
    if ($c_0_i >>> 0 > $add_ptr1_i >>> 0) {
      $c_0_i190 = $arraydecay;
      label = 1983;
      break;
    }
    if ((_memcmp($c_0_i, 5574200, 4) | 0) == 0) {
      label = 1982;
      break;
    } else {
      $c_0_i = $c_0_i + 1 | 0;
    }
  }
  do {
    if ((label | 0) == 1982) {
      if (($c_0_i | 0) == 0) {
        $c_0_i190 = $arraydecay;
        label = 1983;
        break;
      } else {
        $cp_0 = $c_0_i;
        label = 1986;
        break;
      }
    }
  } while (0);
  L2686 : do {
    if ((label | 0) == 1983) {
      while (1) {
        label = 0;
        if ($c_0_i190 >>> 0 > $add_ptr1_i >>> 0) {
          break;
        }
        if ((_memcmp($c_0_i190, 5574428, 4) | 0) == 0) {
          label = 1985;
          break;
        } else {
          $c_0_i190 = $c_0_i190 + 1 | 0;
          label = 1983;
        }
      }
      if ((label | 0) == 1985) {
        if (($c_0_i190 | 0) != 0) {
          $cp_0 = $c_0_i190;
          label = 1986;
          break;
        }
      }
      $15 = HEAP16[2631518] | 0;
      if (($15 << 16 >> 16 | 0) == 18761 | ($15 << 16 >> 16 | 0) == 19789) {
        if ((_memcmp($head + 6 | 0, 5579228, 8) | 0) == 0) {
          HEAP32[1357153] = $retval_0_i_i187;
          _parse_ciff($retval_0_i_i187, $call41 - $retval_0_i_i187 | 0);
          $zero_fsize_0 = 0;
          break;
        }
        if ((_parse_tiff(0) | 0) == 0) {
          $zero_fsize_0 = 0;
          break;
        }
        _apply_tiff();
        $zero_fsize_0 = 0;
        break;
      }
      do {
        if ((_memcmp($arraydecay, 5579220, 4) | 0) == 0) {
          if ((_memcmp($head + 6 | 0, 5579212, 4) | 0) != 0) {
            break;
          }
          _fseek(HEAP32[1316053] | 0, 4, 0);
          HEAP16[$str_i199 >> 1] = -1;
          _fread($str_i199 | 0, 1, 2, HEAP32[1316053] | 0);
          $20 = HEAP16[$str_i199 >> 1] | 0;
          $conv2_i_i203 = $20 & 255;
          $22 = ($20 & 65535) >>> 8;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_in_i_i211 = ($22 & 65535) << 8 | $conv2_i_i203;
          } else {
            $retval_0_in_i_i211 = $conv2_i_i203 << 8 | $22 & 65535;
          }
          $add = ($retval_0_in_i_i211 & 65535) + 4 | 0;
          HEAP32[1357153] = $add;
          _fseek(HEAP32[1316053] | 0, $add | 0, 0);
          if ((_fgetc(HEAP32[1316053] | 0) | 0) != 255) {
            _parse_tiff(12);
          }
          HEAP32[1311013] = 0;
          $zero_fsize_0 = 0;
          break L2686;
        }
      } while (0);
      if ((_memcmp($head + 25 | 0, 5579204, 7) | 0) == 0) {
        HEAP8[5263724] = HEAP8[5579196] | 0;
        HEAP8[5263725 | 0] = HEAP8[5579197 | 0] | 0;
        HEAP8[5263726 | 0] = HEAP8[5579198 | 0] | 0;
        HEAP8[5263727 | 0] = HEAP8[5579199 | 0] | 0;
        HEAP8[5263728 | 0] = HEAP8[5579200 | 0] | 0;
        HEAP8[5263729 | 0] = HEAP8[5579201 | 0] | 0;
        HEAP8[5263730 | 0] = HEAP8[5579202 | 0] | 0;
        _memcpy(5263468, 5579184, 10);
        $26 = HEAP32[1316053] | 0;
        _fseek($26 | 0, 33, 0);
        _get_timestamp(1);
        $27 = HEAP32[1316053] | 0;
        _fseek($27 | 0, 60, 0);
        $28 = $str_i214;
        $c_2756 = 0;
        while (1) {
          HEAP32[$str_i214 >> 2] = -1;
          _fread($28 | 0, 1, 4, HEAP32[1316053] | 0);
          $31 = HEAP32[$str_i214 >> 2] | 0;
          if (HEAP16[2631518] << 16 >> 16 == 18761) {
            $retval_0_i_i233 = $31;
          } else {
            $retval_0_i_i233 = _llvm_bswap_i32($31 | 0) | 0;
          }
          HEAPF32[5561244 + (($c_2756 >> 1 ^ $c_2756) << 2) >> 2] = +($retval_0_i_i233 >>> 0 >>> 0);
          $inc112 = $c_2756 + 1 | 0;
          if (($inc112 | 0) == 4) {
            $zero_fsize_0 = 0;
            break L2686;
          } else {
            $c_2756 = $inc112;
          }
        }
      }
      if ((_strcmp($arraydecay | 0, 5579180) | 0) == 0) {
        _memcpy(5263724, 5579168, 9);
        _memcpy(5263468, 5579152, 16);
        $zero_fsize_0 = 0;
        break;
      }
      if ((_strcmp($arraydecay | 0, 5579144) | 0) == 0) {
        HEAP8[5263724] = HEAP8[5579120] | 0;
        HEAP8[5263725 | 0] = HEAP8[5579121 | 0] | 0;
        HEAP8[5263726 | 0] = HEAP8[5579122 | 0] | 0;
        HEAP8[5263727 | 0] = HEAP8[5579123 | 0] | 0;
        HEAP8[5263728 | 0] = HEAP8[5579124 | 0] | 0;
        HEAP8[5263729 | 0] = HEAP8[5579125 | 0] | 0;
        _memcpy(5263468, 5579104, 14);
        HEAP32[1315947] = 32;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_strcmp($arraydecay | 0, 5579096) | 0) == 0) {
        HEAP8[5263724] = HEAP8[5579120] | 0;
        HEAP8[5263725 | 0] = HEAP8[5579121 | 0] | 0;
        HEAP8[5263726 | 0] = HEAP8[5579122 | 0] | 0;
        HEAP8[5263727 | 0] = HEAP8[5579123 | 0] | 0;
        HEAP8[5263728 | 0] = HEAP8[5579124 | 0] | 0;
        HEAP8[5263729 | 0] = HEAP8[5579125 | 0] | 0;
        _memcpy(5263468, 5579080, 14);
        HEAP32[1315947] = 58;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5573436, 8) | 0) == 0) {
        $32 = HEAP32[1316053] | 0;
        _fseek($32 | 0, 84, 0);
        $33 = $str_i235;
        HEAP32[$str_i235 >> 2] = -1;
        $34 = HEAP32[1316053] | 0;
        _fread($33 | 0, 1, 4, $34 | 0);
        $36 = HEAP32[$str_i235 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i254 = $36;
        } else {
          $retval_0_i_i254 = _llvm_bswap_i32($36 | 0) | 0;
        }
        HEAP32[1311013] = $retval_0_i_i254;
        HEAP32[$str_i256 >> 2] = -1;
        _fread($str_i256 | 0, 1, 4, HEAP32[1316053] | 0);
        $40 = HEAP32[$str_i256 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i275 = $40;
        } else {
          $retval_0_i_i275 = _llvm_bswap_i32($40 | 0) | 0;
        }
        HEAP32[1311016] = $retval_0_i_i275;
        _fseek(HEAP32[1316053] | 0, 92, 0);
        HEAP32[$str_i277 >> 2] = -1;
        _fread($str_i277 | 0, 1, 4, HEAP32[1316053] | 0);
        $45 = HEAP32[$str_i277 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i296 = $45;
        } else {
          $retval_0_i_i296 = _llvm_bswap_i32($45 | 0) | 0;
        }
        _parse_fuji($retval_0_i_i296);
        do {
          if ((HEAP32[1311013] | 0) > 120) {
            $47 = HEAP32[1316053] | 0;
            _fseek($47 | 0, 120, 0);
            $48 = $str_i298;
            HEAP32[$str_i298 >> 2] = -1;
            $49 = HEAP32[1316053] | 0;
            _fread($48 | 0, 1, 4, $49 | 0);
            $51 = HEAP32[$str_i298 >> 2] | 0;
            if (HEAP16[2631518] << 16 >> 16 == 18761) {
              $retval_0_i_i317 = $51;
            } else {
              $retval_0_i_i317 = _llvm_bswap_i32($51 | 0) | 0;
            }
            $add151 = (HEAP32[1316049] | 0) + (($retval_0_i_i317 | 0) != 0 & 1) | 0;
            HEAP32[1316049] = $add151;
            if (!(($add151 | 0) == 2 & (HEAP32[1311231] | 0) != 0)) {
              break;
            }
            _parse_fuji($retval_0_i_i317);
          }
        } while (0);
        HEAP32[1315947] = 4;
        _fseek(HEAP32[1316053] | 0, (-((HEAP32[1311231] | 0) != 0 & 1) & 28) + 100 | 0, 0);
        HEAP32[$str_i319 >> 2] = -1;
        _fread($str_i319 | 0, 1, 4, HEAP32[1316053] | 0);
        $60 = HEAP32[$str_i319 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i338 = $60;
        } else {
          $retval_0_i_i338 = _llvm_bswap_i32($60 | 0) | 0;
        }
        HEAP32[1357153] = $retval_0_i_i338;
        _parse_tiff($retval_0_i_i338);
        _parse_tiff((HEAP32[1311013] | 0) + 12 | 0);
        _apply_tiff();
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5586264, 4) | 0) == 0) {
        $62 = HEAP32[1316053] | 0;
        _fseek($62 | 0, 0, 0);
        _parse_riff();
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5579072, 6) | 0) == 0) {
        $63 = HEAP32[1316053] | 0;
        _fseek($63 | 0, 6, 0);
        $64 = HEAP32[1316053] | 0;
        _fread(5263724, 1, 8, $64 | 0);
        $65 = HEAP32[1316053] | 0;
        _fread(5263468, 1, 8, $65 | 0);
        $66 = HEAP32[1316053] | 0;
        _fread(5263404, 1, 16, $66 | 0);
        $67 = $str_i340;
        HEAP16[$str_i340 >> 1] = -1;
        $68 = HEAP32[1316053] | 0;
        _fread($67 | 0, 1, 2, $68 | 0);
        $70 = HEAP16[$str_i340 >> 1] | 0;
        $conv2_i_i344 = $70 & 255;
        $72 = ($70 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i352 = ($72 & 65535) << 8 | $conv2_i_i344;
        } else {
          $retval_0_in_i_i352 = $conv2_i_i344 << 8 | $72 & 65535;
        }
        HEAP32[1357153] = $retval_0_in_i_i352 & 65535;
        HEAP16[$str_i355 >> 1] = -1;
        _fread($str_i355 | 0, 1, 2, HEAP32[1316053] | 0);
        HEAP16[$str_i370 >> 1] = -1;
        _fread($str_i370 | 0, 1, 2, HEAP32[1316053] | 0);
        $79 = HEAP16[$str_i370 >> 1] | 0;
        $conv2_i_i374 = $79 & 255;
        $81 = ($79 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i382 = ($81 & 65535) << 8 | $conv2_i_i374;
        } else {
          $retval_0_in_i_i382 = $conv2_i_i374 << 8 | $81 & 65535;
        }
        HEAP16[2622498] = $retval_0_in_i_i382 & 65535;
        HEAP16[$str_i385 >> 1] = -1;
        _fread($str_i385 | 0, 1, 2, HEAP32[1316053] | 0);
        $86 = HEAP16[$str_i385 >> 1] | 0;
        $conv2_i_i389 = $86 & 255;
        $88 = ($86 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i397 = ($88 & 65535) << 8 | $conv2_i_i389;
        } else {
          $retval_0_in_i_i397 = $conv2_i_i389 << 8 | $88 & 65535;
        }
        HEAP16[2622502] = $retval_0_in_i_i397 & 65535;
        HEAP32[1315947] = 66;
        HEAP32[1356938] = 1633771873;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5579060, 8) | 0) == 0) {
        HEAP8[5263724] = HEAP8[5579052] | 0;
        HEAP8[5263725 | 0] = HEAP8[5579053 | 0] | 0;
        HEAP8[5263726 | 0] = HEAP8[5579054 | 0] | 0;
        HEAP8[5263727 | 0] = HEAP8[5579055 | 0] | 0;
        HEAP8[5263728 | 0] = HEAP8[5579056 | 0] | 0;
        HEAP8[5263729 | 0] = HEAP8[5579057 | 0] | 0;
        HEAP8[5263468] = HEAP8[5579048] | 0;
        HEAP8[5263469 | 0] = HEAP8[5579049 | 0] | 0;
        HEAP8[5263470 | 0] = HEAP8[5579050 | 0] | 0;
        HEAP16[2631518] = 18761;
        $90 = HEAP32[1316053] | 0;
        _fseek($90 | 0, 300, 0);
        $91 = $str_i400;
        HEAP32[$str_i400 >> 2] = -1;
        $92 = HEAP32[1316053] | 0;
        _fread($91 | 0, 1, 4, $92 | 0);
        $94 = HEAP32[$str_i400 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i419 = $94;
        } else {
          $retval_0_i_i419 = _llvm_bswap_i32($94 | 0) | 0;
        }
        HEAP32[1357153] = $retval_0_i_i419;
        HEAP32[$str_i421 >> 2] = -1;
        _fread($str_i421 | 0, 1, 4, HEAP32[1316053] | 0);
        $98 = HEAP32[$str_i421 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i440 = $98;
        } else {
          $retval_0_i_i440 = _llvm_bswap_i32($98 | 0) | 0;
        }
        HEAP16[$str_i442 >> 1] = -1;
        _fread($str_i442 | 0, 1, 2, HEAP32[1316053] | 0);
        $102 = HEAP16[$str_i442 >> 1] | 0;
        $conv2_i_i446 = $102 & 255;
        $104 = ($102 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i454 = ($104 & 65535) << 8 | $conv2_i_i446;
        } else {
          $retval_0_in_i_i454 = $conv2_i_i446 << 8 | $104 & 65535;
        }
        HEAP16[2621484] = $retval_0_in_i_i454 & 65535;
        HEAP16[$str_i457 >> 1] = -1;
        _fread($str_i457 | 0, 1, 2, HEAP32[1316053] | 0);
        $109 = HEAP16[$str_i457 >> 1] | 0;
        $conv2_i_i461 = $109 & 255;
        $111 = ($109 & 65535) >>> 8;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_in_i_i469 = ($111 & 65535) << 8 | $conv2_i_i461;
        } else {
          $retval_0_in_i_i469 = $conv2_i_i461 << 8 | $111 & 65535;
        }
        HEAP16[2699404] = $retval_0_in_i_i469 & 65535;
        $mul202 = Math_imul(((HEAPU16[2621484] | 0) * 5 & -1) >>> 2, $retval_0_in_i_i469 & 65535);
        HEAP32[1357153] = ((HEAP32[1357153] | 0) + $retval_0_i_i440 | 0) - $mul202 | 0;
        HEAP32[1315947] = 66;
        HEAP32[1356938] = 1633771873;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5579040, 4) | 0) == 0) {
        HEAP16[2631518] = 18761;
        $115 = HEAP32[1316053] | 0;
        _fseek($115 | 0, 20, 0);
        $116 = $str_i472;
        HEAP32[$str_i472 >> 2] = -1;
        $117 = HEAP32[1316053] | 0;
        _fread($116 | 0, 1, 4, $117 | 0);
        $119 = HEAP32[$str_i472 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i491 = $119;
        } else {
          $retval_0_i_i491 = _llvm_bswap_i32($119 | 0) | 0;
        }
        HEAP16[2621484] = $retval_0_i_i491 & 65535;
        HEAP32[$str_i493 >> 2] = -1;
        _fread($str_i493 | 0, 1, 4, HEAP32[1316053] | 0);
        $123 = HEAP32[$str_i493 >> 2] | 0;
        if (HEAP16[2631518] << 16 >> 16 == 18761) {
          $retval_0_i_i512 = $123;
        } else {
          $retval_0_i_i512 = _llvm_bswap_i32($123 | 0) | 0;
        }
        HEAP16[2699404] = $retval_0_i_i512 & 65535;
        HEAP8[5263724] = HEAP8[5579040] | 0;
        HEAP8[5263725 | 0] = HEAP8[5579041 | 0] | 0;
        HEAP8[5263726 | 0] = HEAP8[5579042 | 0] | 0;
        HEAP8[5263727 | 0] = HEAP8[5579043 | 0] | 0;
        HEAP8[5263728 | 0] = HEAP8[5579044 | 0] | 0;
        _fseek(HEAP32[1316053] | 0, 668, 0);
        _fread(5263468, 1, 64, HEAP32[1316053] | 0);
        HEAP32[1357153] = 4096;
        HEAP32[1315947] = 36;
        HEAP32[1315948] = 88;
        HEAP32[1356938] = 1633771873;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($head + 4 | 0, 5579032, 4) | 0) == 0) {
        tempBigInt = 4474194;
        HEAP8[5263724] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263725] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263726] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263727] = tempBigInt & 255;
        tempBigInt = 4542031;
        HEAP8[5263468] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263469] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263470] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[5263471] = tempBigInt & 255;
        _parse_redcine();
        HEAP32[1315947] = 44;
        _gamma_curve(.4166666666666667, 12.92, 1, 4095);
        HEAP32[1356938] = 1229539657;
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5578988, 9) | 0) == 0) {
        _parse_rollei();
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5578980, 4) | 0) == 0) {
        _parse_sinar_ia();
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5578972, 4) | 0) == 0) {
        _parse_minolta(0);
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5578964, 4) | 0) == 0) {
        _parse_foveon();
        $zero_fsize_0 = 0;
        break;
      }
      if ((_memcmp($arraydecay, 5578960, 2) | 0) == 0) {
        _parse_cine();
        $zero_fsize_0 = 0;
        break;
      } else {
        $i_2758 = 0;
      }
      while (1) {
        do {
          if (($call41 | 0) == (HEAP32[5264220 + ($i_2758 * 36 & -1) >> 2] | 0)) {
            $arraydecay262 = 5264224 + ($i_2758 * 36 & -1) | 0;
            _strcpy(5263724, $arraydecay262 | 0);
            $arraydecay265 = 5264236 + ($i_2758 * 36 & -1) | 0;
            _strcpy(5263468, $arraydecay265 | 0);
            if (($i_2758 - 46 | 0) >>> 0 >= 39) {
              break;
            }
            _parse_external_jpeg();
          }
        } while (0);
        $inc273 = $i_2758 + 1 | 0;
        if (($inc273 | 0) == 88) {
          $zero_fsize_0 = $call41;
          break L2686;
        } else {
          $i_2758 = $inc273;
        }
      }
    }
  } while (0);
  do {
    if ((label | 0) == 1986) {
      _parse_phase_one($cp_0 - $head | 0);
      if (($cp_0 | 0) == ($arraydecay | 0)) {
        $zero_fsize_0 = 0;
        break;
      }
      if ((_parse_tiff(0) | 0) == 0) {
        $zero_fsize_0 = 0;
        break;
      }
      _apply_tiff();
      $zero_fsize_0 = 0;
    }
  } while (0);
  do {
    if (HEAP8[5263724] << 24 >> 24 == 0) {
      _parse_smal(0, $call41);
      if (HEAP8[5263724] << 24 >> 24 != 0) {
        $i_3755 = 0;
        break;
      }
      HEAP32[1316049] = 0;
      _parse_jpeg(0);
      $i_3755 = 0;
      break;
    } else {
      $i_3755 = 0;
    }
  } while (0);
  while (1) {
    $129 = HEAP32[5267664 + ($i_3755 << 2) >> 2] | 0;
    if ((_strstr(5263724, $129 | 0) | 0) != 0) {
      _strcpy(5263724, $129 | 0);
    }
    $inc319 = $i_3755 + 1 | 0;
    if (($inc319 | 0) == 17) {
      break;
    } else {
      $i_3755 = $inc319;
    }
  }
  L2831 : do {
    if ((_strncmp(5263724, 5586764, 5) | 0) == 0) {
      $call324 = _strstr(5263468, 5578944) | 0;
      do {
        if (($call324 | 0) == 0) {
          $call327 = _strstr(5263468, 5578928) | 0;
          if (($call327 | 0) != 0) {
            $cp_1 = $call327;
            break;
          }
          $call330 = _strstr(5263468, 5578912) | 0;
          if (($call330 | 0) == 0) {
            break L2831;
          } else {
            $cp_1 = $call330;
          }
        } else {
          $cp_1 = $call324;
        }
      } while (0);
      HEAP8[$cp_1] = 0;
    }
  } while (0);
  $incdec_ptr752 = 5263724 + ((_strlen(5263724) | 0) - 1 | 0) | 0;
  L2838 : do {
    if (HEAP8[$incdec_ptr752] << 24 >> 24 == 32) {
      $incdec_ptr754 = $incdec_ptr752;
      while (1) {
        HEAP8[$incdec_ptr754] = 0;
        $incdec_ptr = $incdec_ptr754 - 1 | 0;
        if (HEAP8[$incdec_ptr] << 24 >> 24 == 32) {
          $incdec_ptr754 = $incdec_ptr;
        } else {
          break L2838;
        }
      }
    }
  } while (0);
  $incdec_ptr342749 = 5263468 + ((_strlen(5263468) | 0) - 1 | 0) | 0;
  L2842 : do {
    if (HEAP8[$incdec_ptr342749] << 24 >> 24 == 32) {
      $incdec_ptr342751 = $incdec_ptr342749;
      while (1) {
        HEAP8[$incdec_ptr342751] = 0;
        $incdec_ptr342 = $incdec_ptr342751 - 1 | 0;
        if (HEAP8[$incdec_ptr342] << 24 >> 24 == 32) {
          $incdec_ptr342751 = $incdec_ptr342;
        } else {
          break L2842;
        }
      }
    }
  } while (0);
  $call348 = _strlen(5263724) | 0;
  do {
    if ((_strncasecmp(5263468, 5263724, $call348 | 0) | 0) == 0) {
      if (HEAP8[$call348 + 5263468 | 0] << 24 >> 24 != 32) {
        break;
      }
      _memmove(5263468, 5263468 + ($call348 + 1 | 0) | 0, 63 - $call348 | 0);
    }
  } while (0);
  if ((_strncmp(5263468, 5578868, 8) | 0) == 0) {
    _strcpy(5263468, 5263476);
  }
  if ((_strncmp(5263468, 5578852, 15) | 0) == 0) {
    _strcpy(5263468, 5263483);
  }
  HEAP8[5263467] = 0;
  HEAP8[5263531] = 0;
  HEAP8[5263787] = 0;
  HEAP8[5561587] = 0;
  HEAP8[5428611] = 0;
  $135 = HEAP32[1316049] | 0;
  do {
    if (($135 | 0) != 0) {
      $136 = HEAP16[2699404] | 0;
      if ($136 << 16 >> 16 == 0) {
        $137 = HEAP16[2622502] | 0;
        HEAP16[2699404] = $137;
        $138 = $137;
      } else {
        $138 = $136;
      }
      $139 = HEAP16[2621484] | 0;
      if ($139 << 16 >> 16 == 0) {
        $140 = HEAP16[2622498] | 0;
        HEAP16[2621484] = $140;
        $141 = $140;
      } else {
        $141 = $139;
      }
      L2864 : do {
        if ($138 << 16 >> 16 == 2624 & $141 << 16 >> 16 == 3936) {
          HEAP16[2699404] = 2616;
          HEAP16[2621484] = 3896;
          $143 = 3896;
          $142 = 2616;
        } else {
          if ($138 << 16 >> 16 == 3136 & $141 << 16 >> 16 == 4864) {
            HEAP16[2699404] = 3124;
            HEAP16[2621484] = 4688;
            HEAP32[1356938] = 370546198;
            $143 = 4688;
            $142 = 3124;
            break;
          }
          do {
            if ($141 << 16 >> 16 == 4352) {
              if ((_strcmp(5263468, 5578848) | 0) != 0) {
                if ((_strcmp(5263468, 5578844) | 0) != 0) {
                  break;
                }
              }
              HEAP16[2621484] = 4309;
              HEAP32[1356938] = 370546198;
              $143 = 4309;
              $142 = $138;
              break L2864;
            }
          } while (0);
          if (($141 & 65535) > 4959) {
            if ((_strncmp(5263468, 5578840, 3) | 0) == 0) {
              HEAP16[2631898] = 10;
              HEAP16[2621484] = 4950;
              HEAP32[1356938] = 370546198;
              $143 = 4950;
              $142 = $138;
              break;
            }
            if ($141 << 16 >> 16 != 7424) {
              $143 = $141;
              $142 = $138;
              break;
            }
            if ((_strcmp(5263468, 5578828) | 0) != 0) {
              $143 = 7424;
              $142 = $138;
              break;
            }
            HEAP16[2699404] = 5502;
            HEAP16[2621484] = 7328;
            HEAP32[1356938] = 1633771873;
            HEAP16[2621786] = 29;
            HEAP16[2631898] = 48;
            $143 = 7328;
            $142 = 5502;
            break;
          } else {
            if ($141 << 16 >> 16 == 4736) {
              if ((_strcmp(5263468, 5578836) | 0) != 0) {
                $143 = 4736;
                $142 = $138;
                break;
              }
              HEAP16[2699404] = 3122;
              HEAP16[2621484] = 4684;
              HEAP32[1356938] = 370546198;
              HEAP16[2621786] = 2;
              $143 = 4684;
              $142 = 3122;
              break;
            } else {
              if (!($138 << 16 >> 16 == 3014 & $141 << 16 >> 16 == 4096)) {
                $143 = $141;
                $142 = $138;
                break;
              }
              HEAP16[2621484] = 4014;
              $143 = 4014;
              $142 = $138;
              break;
            }
          }
        }
      } while (0);
      do {
        if ((HEAP32[1357024] | 0) == 0) {
          $lnot = (_strcmp(5263724, 5587636) | 0) == 0;
          if ($lnot) {
            HEAP32[1315947] = (_memcmp($head + 6 | 0, 5579228, 8) | 0) != 0 ? 46 : 42;
          }
          do {
            if ((_strcmp(5263724, 5587652) | 0) == 0) {
              if ((HEAP32[1315947] | 0) == 0) {
                HEAP32[1315947] = 36;
              }
              if (HEAP8[5263468] << 24 >> 24 != 69) {
                break;
              }
              HEAP32[1315948] = HEAP32[1315948] | ((HEAP32[1357153] | 0) == 0 & 1) << 2 | 2;
            }
          } while (0);
          if ((_strcmp(5263724, 5579268) | 0) == 0) {
            HEAP32[1315947] = 36;
            HEAP32[1315898] = 3967;
          }
          L2916 : do {
            if ((HEAP32[1316050] | 0) == 0) {
              $158 = HEAP32[1311011] | 0;
              if ($lnot & ($158 | 0) == 15) {
                $conv510 = $143 & 65535;
                do {
                  if (($conv510 | 0) == 3872) {
                    $159 = $143;
                    label = 2149;
                  } else if (($conv510 | 0) == 3344) {
                    $sub512 = $143 - 66 & 65535;
                    HEAP16[2621484] = $sub512;
                    $159 = $sub512;
                    label = 2149;
                    break;
                  } else {
                    $160 = $143;
                  }
                } while (0);
                if ((label | 0) == 2149) {
                  $sub516 = $159 - 6 & 65535;
                  HEAP16[2621484] = $sub516;
                  $160 = $sub516;
                }
                if (($142 & 65535) > ($160 & 65535)) {
                  HEAP16[2621484] = $142;
                  HEAP16[2699404] = $160;
                }
                HEAP32[1356938] = 0;
                HEAP32[1315947] = 20;
                label = 2692;
                break;
              }
              if ((_strcmp(5263468, 5578812) | 0) == 0) {
                HEAP16[2699404] = 613;
                HEAP16[2621484] = 854;
                HEAP16[2622498] = 896;
                HEAPF64[tempDoublePtr >> 3] = .9665605095541401, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                HEAP32[1390240] = 4;
                HEAP32[1356938] = -505093660;
                HEAP32[1315947] = 10;
                label = 2692;
                break;
              }
              do {
                if ((_strcmp(5263468, 5578796) | 0) == 0) {
                  label = 2157;
                } else {
                  if ((_strcmp(5263468, 5578776) | 0) == 0) {
                    label = 2157;
                    break;
                  }
                  if ((_strcmp(5263468, 5578748) | 0) == 0) {
                    HEAP16[2699404] = 968;
                    HEAP16[2621484] = 1290;
                    HEAP16[2622498] = 1320;
                    $storemerge747 = 458115870;
                    break;
                  }
                  if ((_strcmp(5263468, 5578732) | 0) == 0) {
                    HEAP16[2699404] = 1024;
                    HEAP16[2621484] = 1552;
                    HEAP32[1390240] = 4;
                    HEAP32[1356938] = 508251675;
                    $_pr714 = HEAP16[2622498] | 0;
                    HEAP32[1311011] = 10;
                    HEAP32[1315947] = 36;
                    HEAP32[1315948] = 40;
                    if (($_pr714 & 65535) <= 1600) {
                      label = 2692;
                      break L2916;
                    }
                  } else {
                    do {
                      if ((_strcmp(5263468, 5578716) | 0) == 0) {
                        HEAP16[2699404] = 1752;
                        HEAP16[2621484] = 2344;
                        HEAP16[2622502] = 1766;
                        HEAP16[2622498] = 2400;
                        HEAP16[2621786] = 12;
                        HEAP16[2631898] = 12;
                      } else {
                        if ((_strcmp(5263468, 5578700) | 0) == 0) {
                          HEAP16[2699404] = 1960;
                          HEAP16[2621484] = 2616;
                          HEAP16[2622502] = 1968;
                          HEAP16[2622498] = 2664;
                          HEAP16[2621786] = 4;
                          HEAP16[2631898] = 4;
                          break;
                        }
                        if ((_strcmp(5263468, 5578684) | 0) == 0) {
                          HEAP16[2699404] = 1984;
                          HEAP16[2621484] = 2620;
                          HEAP16[2622502] = 1992;
                          HEAP16[2622498] = 2672;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 10;
                          break;
                        }
                        if ((_strcmp(5263468, 5578668) | 0) == 0) {
                          $row_0_i = 0;
                          while (1) {
                            if ($row_0_i >>> 0 >= 100) {
                              break;
                            }
                            _fseek(HEAP32[1316053] | 0, ($row_0_i * 3340 & -1) + 3284 | 0, 0);
                            if ((_fgetc(HEAP32[1316053] | 0) | 0) > 15) {
                              label = 2170;
                              break;
                            } else {
                              $row_0_i = $row_0_i + 1 | 0;
                            }
                          }
                          if ((label | 0) == 2170) {
                            HEAP8[5263478] = HEAP8[5578660] | 0;
                            HEAP8[5263479 | 0] = HEAP8[5578661 | 0] | 0;
                            HEAP8[5263480 | 0] = HEAP8[5578662 | 0] | 0;
                            HEAP8[5263481 | 0] = HEAP8[5578663 | 0] | 0;
                            HEAP8[5263482 | 0] = HEAP8[5578664 | 0] | 0;
                            HEAP8[5263483 | 0] = HEAP8[5578665 | 0] | 0;
                          }
                          HEAP16[2699404] = 1960;
                          HEAP16[2621484] = 2616;
                          HEAP16[2622502] = 1968;
                          HEAP16[2622498] = 2672;
                          HEAP16[2621786] = 8;
                          HEAP16[2631898] = 12;
                          break;
                        }
                        if ((_strcmp(5263468, 5578644) | 0) == 0) {
                          HEAP16[2699404] = 2328;
                          HEAP16[2621484] = 3112;
                          HEAP16[2622502] = 2340;
                          HEAP16[2622498] = 3152;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 36;
                          break;
                        }
                        if ((_strcmp(5263468, 5578628) | 0) == 0) {
                          HEAP16[2699404] = 2328;
                          HEAP16[2621484] = 3096;
                          HEAP16[2622502] = 2346;
                          HEAP16[2622498] = 3152;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 12;
                          break;
                        }
                        if ((_strcmp(5263468, 5578608) | 0) == 0) {
                          HEAP16[2699404] = 2472;
                          HEAP16[2621484] = 3298;
                          HEAP16[2622502] = 2480;
                          HEAP16[2622498] = 3336;
                          HEAP16[2621786] = 5;
                          HEAP16[2631898] = 6;
                          break;
                        }
                        if ((_strcmp(5263468, 5578568) | 0) == 0) {
                          HEAP16[2699404] = 2472;
                          HEAP16[2621484] = 3288;
                          HEAP16[2622502] = 2484;
                          HEAP16[2622498] = 3344;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 12;
                          break;
                        }
                        if ((_strcmp(5263468, 5578552) | 0) == 0) {
                          HEAP16[2699404] = 2760;
                          HEAP16[2621484] = 3672;
                          HEAP16[2622502] = 2772;
                          HEAP16[2622498] = 3736;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 12;
                          break;
                        }
                        if ((_strcmp(5263468, 5578536) | 0) == 0) {
                          HEAP16[2699404] = 3024;
                          HEAP16[2621484] = 4032;
                          HEAP16[2622502] = 3048;
                          HEAP16[2622498] = 4104;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 48;
                          break;
                        }
                        if ((_strcmp(5263468, 5578520) | 0) == 0) {
                          HEAP16[2699404] = 2128;
                          HEAP16[2621484] = 2840;
                          HEAP16[2622502] = 2136;
                          HEAP16[2622498] = 2888;
                          HEAP16[2621786] = 8;
                          HEAP16[2631898] = 44;
                          break;
                        }
                        if ((_strcmp(5263468, 5578500) | 0) == 0) {
                          HEAP16[2699404] = 2760;
                          HEAP16[2621484] = 3684;
                          HEAP16[2622502] = 2772;
                          HEAP16[2622498] = 3720;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 6;
                          HEAP32[1315947] = 36;
                          HEAP32[1315948] = 40;
                          HEAP32[1310720] = 1;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578480) | 0) == 0) {
                          HEAP16[2699404] = 2742;
                          HEAP16[2621484] = 3664;
                          HEAP16[2622502] = 2778;
                          HEAP16[2622498] = 3728;
                          HEAP16[2621786] = 18;
                          HEAP16[2631898] = 16;
                          HEAP32[1356938] = 1229539657;
                          HEAP32[1315947] = 36;
                          HEAP32[1315948] = 40;
                          HEAP32[1310720] = 1;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578460) | 0) == 0) {
                          HEAP16[2699404] = 3024;
                          HEAP16[2621484] = 4032;
                          HEAP16[2622502] = 3048;
                          HEAP16[2622498] = 4080;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 24;
                          HEAP32[1315947] = 36;
                          HEAP32[1315948] = 40;
                          HEAP32[1310720] = 1;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578440) | 0) == 0) {
                          HEAP16[2699404] = 3043;
                          HEAP16[2621484] = 4072;
                          HEAP16[2622502] = 3060;
                          HEAP16[2622498] = 4168;
                          HEAP16[2621786] = 16;
                          HEAP32[1315899] = 16;
                          HEAP32[1315901] = 3059;
                          HEAP16[2631898] = 92;
                          HEAP32[1315902] = 92;
                          HEAP32[1315947] = 36;
                          HEAP32[1315948] = 8;
                          HEAP32[1310720] = 1;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578420) | 0) == 0) {
                          HEAP16[2699404] = 3254;
                          HEAP16[2621484] = 4366;
                          HEAP16[2622502] = 3276;
                          HEAP16[2622498] = 4464;
                          HEAP16[2621786] = 10;
                          HEAP16[2631898] = 25;
                          HEAP32[1356938] = 370546198;
                          HEAP32[1315947] = 36;
                          HEAP32[1315948] = 40;
                          HEAP32[1310720] = 1;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578400) | 0) == 0) {
                          HEAP16[2621484] = 1896;
                          HEAP32[1390240] = 4;
                          HEAP32[1356938] = -1263225676;
                          label = 2692;
                          break L2916;
                        }
                        $163 = HEAP16[2622498] | 0;
                        if ($lnot & $163 << 16 >> 16 == 2144) {
                          HEAP16[2699404] = 1550;
                          HEAP16[2621484] = 2088;
                          HEAP16[2621786] = 8;
                          HEAP16[2631898] = 4;
                          if ((_strcmp(5263468, 5578364) | 0) != 0) {
                            label = 2692;
                            break L2916;
                          }
                          HEAP32[1390240] = 4;
                          HEAP32[1356938] = -1263225676;
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 2224) {
                          HEAP16[2699404] = 1448;
                          HEAP16[2621484] = 2176;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 48;
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 2376) {
                          HEAP16[2699404] = 1720;
                          HEAP16[2621484] = 2312;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 12;
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 2672) {
                          HEAP16[2699404] = 1960;
                          HEAP16[2621484] = 2616;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 12;
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 3152) {
                          HEAP16[2699404] = 2056;
                          HEAP16[2621484] = 3088;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 64;
                          if ((HEAP32[1310892] | 0) != -2147483280) {
                            label = 2692;
                            break L2916;
                          }
                          _adobe_coeff(5587636, 5578352);
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 3160) {
                          HEAP16[2699404] = 2328;
                          HEAP16[2621484] = 3112;
                          HEAP16[2621786] = 12;
                          HEAP16[2631898] = 44;
                          label = 2692;
                          break L2916;
                        }
                        if ($lnot & $163 << 16 >> 16 == 3344) {
                          HEAP16[2699404] = 2472;
                          HEAP16[2621484] = 3288;
                          HEAP16[2621786] = 6;
                          HEAP16[2631898] = 4;
                          label = 2692;
                          break L2916;
                        }
                        if ((_strcmp(5263468, 5578340) | 0) == 0) {
                          HEAP32[1356938] = 1633771873;
                          HEAP32[1390380] = HEAPU16[2714510] | 0;
                          label = 2692;
                          break L2916;
                        }
                        do {
                          if ($lnot & $163 << 16 >> 16 == 3516) {
                            HEAP16[2621786] = 14;
                            HEAP16[2631898] = 42;
                            if ((HEAP32[1310892] | 0) != -2147483255) {
                              break;
                            }
                            _adobe_coeff(5587636, 5578328);
                          } else {
                            if ($lnot & $163 << 16 >> 16 == 3596) {
                              HEAP16[2621786] = 12;
                              HEAP16[2631898] = 74;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 3744) {
                              HEAP16[2699404] = 2760;
                              HEAP16[2621484] = 3684;
                              HEAP16[2621786] = 16;
                              HEAP16[2631898] = 8;
                              if ((HEAP32[1310892] | 0) >>> 0 <= 41025536) {
                                label = 2692;
                                break L2916;
                              }
                              HEAP16[2621786] = 12;
                              HEAP16[2631898] = 52;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 3944) {
                              HEAP16[2699404] = 2602;
                              HEAP16[2621484] = 3908;
                              HEAP16[2621786] = 18;
                              HEAP16[2631898] = 30;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 3948) {
                              HEAP16[2621786] = 18;
                              HEAP16[2631898] = 42;
                              HEAP16[2699404] = $142 - 2 & 65535;
                              $168 = HEAP32[1310892] | 0;
                              if (($168 | 0) == -2147483082) {
                                _adobe_coeff(5587636, 5578316);
                                $169 = HEAP32[1310892] | 0;
                              } else {
                                $169 = $168;
                              }
                              if (($169 | 0) != -2147483052) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578304);
                              break;
                            }
                            $cmp756 = $163 << 16 >> 16 == 3984;
                            if ($lnot & $cmp756) {
                              HEAP16[2621786] = 20;
                              HEAP16[2631898] = 76;
                              HEAP16[2699404] = $142 - 2 & 65535;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4104) {
                              HEAP16[2699404] = 3024;
                              HEAP16[2621484] = 4032;
                              HEAP16[2621786] = 12;
                              HEAP16[2631898] = 48;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4152) {
                              HEAP16[2621786] = 12;
                              HEAP16[2631898] = 192;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4160) {
                              HEAP16[2699404] = 3048;
                              HEAP16[2621484] = 4048;
                              HEAP16[2621786] = 11;
                              HEAP16[2631898] = 104;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4176) {
                              HEAP16[2699404] = 3045;
                              HEAP16[2621484] = 4072;
                              HEAP16[2631898] = 96;
                              HEAP16[2621786] = 17;
                              HEAP32[1315899] = 17;
                              HEAP32[1315901] = HEAPU16[2622502] | 0;
                              HEAP32[1315902] = 80;
                              HEAP32[1356938] = 1229539657;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4312) {
                              HEAP16[2621786] = 18;
                              HEAP16[2631898] = 22;
                              HEAP16[2699404] = $142 - 2 & 65535;
                              if ((HEAP32[1310892] | 0) != -2147483274) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578292);
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4352) {
                              HEAP16[2621786] = 18;
                              HEAP16[2631898] = 62;
                              if ((HEAP32[1310892] | 0) != -2147483e3) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578280);
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4476) {
                              HEAP16[2621786] = 34;
                              HEAP16[2631898] = 90;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4480) {
                              HEAP16[2699404] = 3326;
                              HEAP16[2621484] = 4432;
                              HEAP16[2621786] = 10;
                              HEAP16[2631898] = 12;
                              HEAP32[1356938] = 1229539657;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4496) {
                              HEAP16[2699404] = 3316;
                              HEAP16[2621484] = 4404;
                              HEAP16[2621786] = 50;
                              HEAP16[2631898] = 80;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 4832) {
                              $173 = HEAP32[1310892] | 0;
                              HEAP16[2621786] = ($173 | 0) == -2147483039 ? 51 : 26;
                              HEAP16[2631898] = 62;
                              if (($173 | 0) != -2147483054) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578268);
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5108) {
                              HEAP16[2621786] = 13;
                              HEAP16[2631898] = 98;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5120) {
                              HEAP16[2621786] = 45;
                              HEAP16[2699404] = $142 - 45 & 65535;
                              HEAP16[2631898] = 142;
                              HEAP16[2621484] = 4916;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5280) {
                              HEAP16[2621786] = 52;
                              HEAP16[2631898] = 72;
                              if ((HEAP32[1310892] | 0) != -2147482879) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578256);
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5344) {
                              HEAP16[2621786] = 51;
                              HEAP16[2631898] = 142;
                              $175 = HEAP32[1310892] | 0;
                              if (($175 | 0) == -2147483031) {
                                HEAP16[2621786] = 100;
                                HEAP16[2631898] = 126;
                                HEAP16[2699404] = $142 - 2 & 65535;
                                _adobe_coeff(5587636, 5578204);
                                $176 = HEAP32[1310892] | 0;
                              } else {
                                $176 = $175;
                              }
                              if (($176 | 0) == -2147483024) {
                                _adobe_coeff(5587636, 5578192);
                                $177 = HEAP32[1310892] | 0;
                              } else {
                                $177 = $176;
                              }
                              if (($177 | 0) != -2147483002) {
                                break;
                              }
                              _adobe_coeff(5587636, 5578180);
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5360) {
                              HEAP16[2621786] = 51;
                              HEAP16[2631898] = 158;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5568) {
                              HEAP16[2621786] = 38;
                              HEAP16[2631898] = 72;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5712) {
                              HEAP16[2699404] = 3752;
                              HEAP16[2621484] = 5640;
                              HEAP16[2621786] = 20;
                              HEAP16[2631898] = 62;
                              label = 2692;
                              break L2916;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5792) {
                              HEAP16[2621786] = 51;
                              HEAP16[2631898] = 158;
                              break;
                            }
                            if ($lnot & $163 << 16 >> 16 == 5920) {
                              HEAP16[2699404] = 3870;
                              HEAP16[2621484] = 5796;
                              HEAP16[2621786] = 80;
                              HEAP16[2631898] = 122;
                              label = 2692;
                              break L2916;
                            }
                            if ((_strcmp(5263468, 5578176) | 0) == 0) {
                              HEAPF32[1390311] = +HEAPF32[1390311] * .4857685009487666;
                              HEAPF32[1390313] = +HEAPF32[1390313] * .807570977917981;
                              label = 2692;
                              break L2916;
                            }
                            if ((_strcmp(5263468, 5578172) | 0) == 0) {
                              HEAP16[2621484] = $143 - 4 & 65535;
                              HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                              label = 2692;
                              break L2916;
                            }
                            do {
                              if ((_strcmp(5263468, 5578164) | 0) != 0) {
                                if ((_strcmp(5263468, 5578160) | 0) == 0) {
                                  break;
                                }
                                if ((_strcmp(5263468, 5578156) | 0) == 0) {
                                  break;
                                }
                                if ((_strcmp(5263468, 5578148) | 0) == 0) {
                                  break;
                                }
                                do {
                                  if ((_strcmp(5263468, 5578144) | 0) != 0) {
                                    if ((_strcmp(5263468, 5578080) | 0) == 0) {
                                      break;
                                    }
                                    if ((_strcmp(5263468, 5578072) | 0) == 0) {
                                      break;
                                    }
                                    if ((_strcmp(5263468, 5578064) | 0) == 0) {
                                      HEAP16[2621484] = $143 - 28 & 65535;
                                      HEAP16[2631898] = 6;
                                      label = 2692;
                                      break L2916;
                                    }
                                    do {
                                      if ((_strcmp(5263468, 5578056) | 0) != 0) {
                                        if ((_strcmp(5263468, 5578052) | 0) == 0) {
                                          break;
                                        }
                                        do {
                                          if ((_strcmp(5263468, 5578044) | 0) != 0) {
                                            if ((_strcmp(5263468, 5578036) | 0) == 0) {
                                              break;
                                            }
                                            do {
                                              if ((_strcmp(5263468, 5578028) | 0) != 0) {
                                                if ((_strcmp(5263468, 5578020) | 0) == 0) {
                                                  break;
                                                }
                                                if ((_strcmp(5263468, 5578012) | 0) == 0) {
                                                  break;
                                                }
                                                if ((_strcmp(5263468, 5578004) | 0) == 0) {
                                                  HEAP16[2621484] = $143 - 52 & 65535;
                                                  HEAP16[2631898] = 2;
                                                  label = 2692;
                                                  break L2916;
                                                }
                                                do {
                                                  if ((_strncmp(5263468, 5578e3, 3) | 0) != 0) {
                                                    if ((_strncmp(5263468, 5577996, 3) | 0) == 0) {
                                                      break;
                                                    }
                                                    if ((_strncmp(5263468, 5577992, 3) | 0) == 0) {
                                                      break;
                                                    }
                                                    if ((_strcmp(5263468, 5577984) | 0) == 0) {
                                                      if ((HEAP32[1315948] | 0) == 0) {
                                                        label = 2692;
                                                        break L2916;
                                                      }
                                                      HEAP16[2621484] = $143 + 3 & 65535;
                                                      HEAP16[2622498] = $143 + 6 & 65535;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strcmp(5263468, 5577976) | 0) == 0) {
                                                      HEAP16[2631898] = 1;
                                                      HEAP16[2621484] = $143 - 4 & 65535;
                                                      HEAP32[1356938] = -1802201964;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strncmp(5263468, 5577972, 3) | 0) == 0) {
                                                      HEAP16[2631898] = 6;
                                                      HEAP16[2621484] = $143 - 14 & 65535;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strncmp(5263468, 5577968, 3) | 0) == 0) {
                                                      if ($143 << 16 >> 16 == 3264) {
                                                        HEAP16[2621484] = 3232;
                                                        label = 2692;
                                                        break L2916;
                                                      } else {
                                                        HEAP16[2621484] = $143 - 8 & 65535;
                                                        label = 2692;
                                                        break L2916;
                                                      }
                                                    }
                                                    if ((_strncmp(5263468, 5577960, 4) | 0) == 0) {
                                                      HEAP16[2621484] = $143 - 32 & 65535;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strcmp(5263724, 5587652) | 0) == 0 & $163 << 16 >> 16 == 4032) {
                                                      _adobe_coeff(5587652, 5577944);
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strncmp(5263468, 5577896, 9) | 0) == 0) {
                                                      HEAP32[1315948] = 24;
                                                      HEAP32[1356938] = -1802201964;
                                                      if (!(HEAP8[5263477] << 24 >> 24 == 55 & +HEAPF32[1316048] >= 400.0)) {
                                                        label = 2692;
                                                        break L2916;
                                                      }
                                                      HEAP32[1390380] = 255;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if ((_strncmp(5263468, 5577892, 2) | 0) == 0) {
                                                      HEAP16[2699404] = $142 - 2 & 65535;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    if (($zero_fsize_0 | 0) == 1581060) {
                                                      HEAP16[2699404] = 963;
                                                      HEAP16[2621484] = 1287;
                                                      HEAP16[2622498] = 1632;
                                                      HEAP32[1315898] = 1012;
                                                      HEAP32[1390240] = 4;
                                                      HEAP32[1356938] = 505290270;
                                                      HEAP32[1311252] = 0;
                                                      HEAP32[1311233] = HEAP32[1311217] | 0;
                                                      HEAP32[1311234] = HEAP32[5244872 >> 2] | 0;
                                                      HEAP32[1311235] = HEAP32[5244876 >> 2] | 0;
                                                      HEAP32[1311236] = HEAP32[5244880 >> 2] | 0;
                                                      HEAP32[1311237] = HEAP32[1311221] | 0;
                                                      HEAP32[5244952 >> 2] = HEAP32[5244888 >> 2] | 0;
                                                      HEAP32[5244956 >> 2] = HEAP32[5244892 >> 2] | 0;
                                                      HEAP32[5244960 >> 2] = HEAP32[5244896 >> 2] | 0;
                                                      HEAP32[1311241] = HEAP32[1311225] | 0;
                                                      HEAP32[5244968 >> 2] = HEAP32[5244904 >> 2] | 0;
                                                      HEAP32[5244972 >> 2] = HEAP32[5244908 >> 2] | 0;
                                                      HEAP32[5244976 >> 2] = HEAP32[5244912 >> 2] | 0;
                                                      HEAPF32[1311403] = 1.2085000276565552;
                                                      HEAPF32[1311404] = 1.0943000316619873;
                                                      HEAPF32[1311406] = 1.1102999448776245;
                                                    } else if (($zero_fsize_0 | 0) == 2465792) {
                                                      HEAP16[2699404] = 1203;
                                                      HEAP16[2621484] = 1616;
                                                      HEAP16[2622498] = 2048;
                                                      HEAP32[1390240] = 4;
                                                      HEAP32[1356938] = 1263225675;
                                                      _adobe_coeff(5587652, 5577884);
                                                    } else if (($zero_fsize_0 | 0) == 4771840) {
                                                      HEAP16[2699404] = 1540;
                                                      HEAP16[2621484] = 2064;
                                                      HEAP32[1390240] = 4;
                                                      HEAP32[1356938] = -505290271;
                                                      HEAP32[1315947] = 36;
                                                      HEAP32[1315948] = 6;
                                                      L3190 : do {
                                                        if ((HEAP32[1310894] | 0) == 0) {
                                                          _memset($histo_i | 0, 0, 1024);
                                                          $189 = HEAP32[1316053] | 0;
                                                          _fseek($189 | 0, -2e3 | 0, 2);
                                                          $i_05_i = 0;
                                                          while (1) {
                                                            $arrayidx_i = $histo_i + (_fgetc(HEAP32[1316053] | 0) << 2) | 0;
                                                            HEAP32[$arrayidx_i >> 2] = (HEAP32[$arrayidx_i >> 2] | 0) + 1 | 0;
                                                            $inc2_i = $i_05_i + 1 | 0;
                                                            if (($inc2_i | 0) == 2e3) {
                                                              $i_1_i = 0;
                                                              break;
                                                            } else {
                                                              $i_05_i = $inc2_i;
                                                            }
                                                          }
                                                          while (1) {
                                                            if (($i_1_i | 0) >= 4) {
                                                              break;
                                                            }
                                                            if ((HEAP32[$histo_i + ((HEAPU8[$i_1_i + 5263244 | 0] | 0) << 2) >> 2] | 0) < 200) {
                                                              break L3190;
                                                            } else {
                                                              $i_1_i = $i_1_i + 1 | 0;
                                                            }
                                                          }
                                                          HEAP8[5263468] = HEAP8[5577876] | 0;
                                                          HEAP8[5263469 | 0] = HEAP8[5577877 | 0] | 0;
                                                          HEAP8[5263470 | 0] = HEAP8[5577878 | 0] | 0;
                                                          HEAP8[5263471 | 0] = HEAP8[5577879 | 0] | 0;
                                                          HEAP8[5263472 | 0] = HEAP8[5577880 | 0] | 0;
                                                        }
                                                      } while (0);
                                                      if ((_strcmp(5263468, 5577876) | 0) == 0) {
                                                        label = 2692;
                                                        break L2916;
                                                      }
                                                      HEAP32[1356938] = -1263225676;
                                                      HEAP32[1311252] = 0;
                                                      $194 = HEAP32[1390240] | 0;
                                                      $195 = $194 << 2;
                                                      if (($194 | 0) > 0) {
                                                        _memcpy(5244932, 5244868, $195);
                                                        _memcpy(5244948, 5244868 + ($194 << 2) | 0, $195);
                                                        _memcpy(5244964, 5244868 + ($194 << 1 << 2) | 0, $195);
                                                      }
                                                      HEAPF32[1311403] = 1.1959999799728394;
                                                      HEAPF32[1311404] = 1.246000051498413;
                                                      HEAPF32[1311405] = 1.0180000066757202;
                                                      label = 2692;
                                                      break L2916;
                                                    } else {
                                                      L3204 : do {
                                                        if ((_strcmp(5263468, 5577868) | 0) == 0) {
                                                          L3206 : do {
                                                            if ((HEAP32[1310894] | 0) == 0) {
                                                              $198 = $t_i | 0;
                                                              $199 = HEAP32[1316053] | 0;
                                                              _fseek($199 | 0, 0, 0);
                                                              $arrayidx_i540 = $t_i + 2 | 0;
                                                              $arrayidx2_i = $t_i + 4 | 0;
                                                              $arrayidx4_i = $t_i + 7 | 0;
                                                              $arrayidx7_i541 = $t_i + 9 | 0;
                                                              $arrayidx10_i = $t_i + 1 | 0;
                                                              $arrayidx13_i = $t_i + 6 | 0;
                                                              $arrayidx16_i = $t_i + 8 | 0;
                                                              $arrayidx19_i = $t_i + 11 | 0;
                                                              $i_0_i = 0;
                                                              while (1) {
                                                                if (($i_0_i | 0) >= 1024) {
                                                                  break L3206;
                                                                }
                                                                _fread($198 | 0, 1, 12, HEAP32[1316053] | 0);
                                                                if ((HEAP8[$arrayidx10_i] & 3 & (HEAP8[$arrayidx2_i] & HEAP8[$arrayidx_i540] & HEAP8[$arrayidx4_i] & HEAP8[$arrayidx7_i541] & 255) >>> 4 & (HEAPU8[$arrayidx13_i] | 0) & (HEAPU8[$arrayidx16_i] | 0) & (HEAPU8[$arrayidx19_i] | 0) | 0) == 3) {
                                                                  $i_0_i = $i_0_i + 1 | 0;
                                                                } else {
                                                                  break L3204;
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          HEAP16[2699404] = 1206;
                                                          HEAP16[2621484] = 1616;
                                                          HEAP32[1315948] = 30;
                                                          label = 2692;
                                                          break L2916;
                                                        } else {
                                                          if ((_strcmp(5263468, 5577860) | 0) == 0) {
                                                            break;
                                                          }
                                                          if (($zero_fsize_0 | 0) == 4775936) {
                                                            HEAP16[2699404] = 1542;
                                                            HEAP16[2621484] = 2064;
                                                            HEAP32[1315947] = 36;
                                                            HEAP32[1315948] = 30;
                                                            if ((HEAP32[1310894] | 0) == 0) {
                                                              _nikon_3700();
                                                            }
                                                            do {
                                                              if (HEAP8[5263468] << 24 >> 24 == 69) {
                                                                if ((_atoi(5263469) | 0) >= 3700) {
                                                                  break;
                                                                }
                                                                HEAP32[1356938] = 1229539657;
                                                              }
                                                            } while (0);
                                                            if ((_strcmp(5263468, 5577848) | 0) == 0) {
                                                              HEAP32[1350792] = 1;
                                                              HEAP32[1356938] = 370546198;
                                                            }
                                                            if (HEAP8[5263724] << 24 >> 24 != 79) {
                                                              label = 2692;
                                                              break L2916;
                                                            }
                                                            $conv1191 = ~~+_find_green(12, 32, 1188864, 3576832);
                                                            $conv1193 = ~~+_find_green(12, 32, 2383920, 2387016);
                                                            if (((($conv1191 | 0) > -1 ? $conv1191 : -$conv1191 | 0) | 0) < ((($conv1193 | 0) > -1 ? $conv1193 : -$conv1193 | 0) | 0)) {
                                                              HEAP32[1315948] = 24;
                                                              $i_4 = $conv1193;
                                                            } else {
                                                              $i_4 = $conv1191;
                                                            }
                                                            if (($i_4 | 0) >= 0) {
                                                              label = 2692;
                                                              break L2916;
                                                            }
                                                            HEAP32[1356938] = 1633771873;
                                                            label = 2692;
                                                            break L2916;
                                                          } else if (($zero_fsize_0 | 0) == 5869568) {
                                                            HEAP16[2699404] = 1710;
                                                            HEAP16[2621484] = 2288;
                                                            HEAP32[1356938] = 370546198;
                                                            do {
                                                              if ((HEAP32[1310894] | 0) == 0) {
                                                                $213 = $tail_i | 0;
                                                                $214 = HEAP32[1316053] | 0;
                                                                _fseek($214 | 0, -424 | 0, 2);
                                                                $215 = HEAP32[1316053] | 0;
                                                                _fread($213 | 0, 1, 424, $215 | 0);
                                                                $i_04_i = 0;
                                                                $nz_05_i = 0;
                                                                while (1) {
                                                                  $nz_0_inc_i = (HEAP8[$tail_i + $i_04_i | 0] << 24 >> 24 != 0 & 1) + $nz_05_i | 0;
                                                                  $inc2_i553 = $i_04_i + 1 | 0;
                                                                  if (($inc2_i553 | 0) == 424) {
                                                                    break;
                                                                  } else {
                                                                    $i_04_i = $inc2_i553;
                                                                    $nz_05_i = $nz_0_inc_i;
                                                                  }
                                                                }
                                                                if (($nz_0_inc_i | 0) <= 20) {
                                                                  break;
                                                                }
                                                                $$etemp$1 = 5263724;
                                                                $st$2$0 = $$etemp$1 | 0;
                                                                tempBigInt = 1869506893;
                                                                HEAP8[$st$2$0] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$2$0 + 1 | 0] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$2$0 + 2 | 0] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$2$0 + 3 | 0] = tempBigInt & 255;
                                                                $st$3$1 = $$etemp$1 + 4 | 0;
                                                                tempBigInt = 6386796;
                                                                HEAP8[$st$3$1] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$3$1 + 1 | 0] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$3$1 + 2 | 0] = tempBigInt & 255;
                                                                tempBigInt = tempBigInt >> 8;
                                                                HEAP8[$st$3$1 + 3 | 0] = tempBigInt & 255;
                                                                _memcpy(5263468, 5577836, 10);
                                                              }
                                                            } while (0);
                                                            HEAP32[1315947] = 36;
                                                            HEAP32[1315948] = -(HEAP8[5263724] << 24 >> 24 == 77 & 1) & 24 | 6;
                                                            label = 2692;
                                                            break L2916;
                                                          } else {
                                                            if ((_strcmp(5263468, 5577828) | 0) == 0) {
                                                              HEAP16[2699404] = 1708;
                                                              HEAP16[2621484] = 2288;
                                                              HEAP32[1390240] = 4;
                                                              HEAP32[1356938] = -1263225676;
                                                              label = 2692;
                                                              break L2916;
                                                            }
                                                            if (($zero_fsize_0 | 0) == 7438336) {
                                                              HEAP16[2699404] = 1924;
                                                              HEAP16[2621484] = 2576;
                                                              HEAP32[1390240] = 4;
                                                              HEAP32[1356938] = -1263225676;
                                                              label = 2692;
                                                              break L2916;
                                                            } else if (($zero_fsize_0 | 0) == 8998912) {
                                                              HEAP16[2699404] = 2118;
                                                              HEAP16[2621484] = 2832;
                                                              HEAP32[1315898] = 3971;
                                                              HEAP32[1315947] = 36;
                                                              HEAP32[1315948] = 30;
                                                              label = 2692;
                                                              break L2916;
                                                            } else {
                                                              if ((_strcmp(5263724, 5573436) | 0) == 0) {
                                                                do {
                                                                  if ((_strcmp(5263475, 5577820) | 0) == 0) {
                                                                    HEAP8[5263468] = HEAP8[5577820] | 0;
                                                                    HEAP8[5263469 | 0] = HEAP8[5577821 | 0] | 0;
                                                                    HEAP8[5263470 | 0] = HEAP8[5577822 | 0] | 0;
                                                                    HEAP8[5263471 | 0] = HEAP8[5577823 | 0] | 0;
                                                                    HEAP8[5263472 | 0] = HEAP8[5577824 | 0] | 0;
                                                                    HEAP8[5263473 | 0] = HEAP8[5577825 | 0] | 0;
                                                                    HEAP16[2699404] = 2144;
                                                                    HEAP16[2621484] = 2880;
                                                                    HEAP32[1350792] = 6;
                                                                    $222 = 2144;
                                                                    $_pr729 = 2880;
                                                                  } else {
                                                                    if ((HEAP32[1315947] | 0) == 36) {
                                                                      $222 = $142;
                                                                      $_pr729 = $143;
                                                                      break;
                                                                    }
                                                                    if (($135 | 0) == 2) {
                                                                      $221 = (HEAP32[1311231] | 0) != 0 ? 12032 : 15872;
                                                                    } else {
                                                                      $221 = 15872;
                                                                    }
                                                                    HEAP32[1315898] = $221;
                                                                    $222 = $142;
                                                                    $_pr729 = $143;
                                                                  }
                                                                } while (0);
                                                                HEAP16[2621786] = (HEAPU16[2622502] | 0) - ($222 & 65535) >> 2 << 1 & 65535;
                                                                $conv1264 = $163 & 65535;
                                                                HEAP16[2631898] = $conv1264 - ($_pr729 & 65535) >> 2 << 1 & 65535;
                                                                if (($_pr729 << 16 >> 16 | 0) == 2848) {
                                                                  HEAP32[1356938] = 370546198;
                                                                } else if (($_pr729 << 16 >> 16 | 0) == 3328) {
                                                                  HEAP16[2621484] = 3262;
                                                                  HEAP16[2631898] = 34;
                                                                } else if (($_pr729 << 16 >> 16 | 0) == 4952) {
                                                                  HEAP16[2631898] = 0;
                                                                  HEAP32[1356938] = 2;
                                                                }
                                                                if ((HEAP32[1349756] | 0) == 0) {
                                                                  label = 2692;
                                                                  break L2916;
                                                                }
                                                                HEAP16[2622498] = Math_imul($conv1264, $135) & 65535;
                                                                label = 2692;
                                                                break L2916;
                                                              }
                                                              if ((_strcmp(5263468, 5577772) | 0) == 0) {
                                                                HEAP16[2699404] = 986;
                                                                HEAP16[2621484] = 1534;
                                                                HEAP32[1357153] = 513;
                                                                HEAP32[1356938] = 1633771873;
                                                                HEAP32[1315947] = 22;
                                                                label = 2692;
                                                                break L2916;
                                                              }
                                                              if ((_strcmp(5263468, 5577764) | 0) == 0) {
                                                                HEAP16[2699404] = 1712;
                                                                HEAP16[2621484] = 2312;
                                                                HEAP16[2622498] = 2336;
                                                              } else {
                                                                L3270 : do {
                                                                  if ((_strcmp(5263468, 5577756) | 0) == 0) {
                                                                    label = 2412;
                                                                  } else {
                                                                    if ((_strcasecmp(5263724, 5579292) | 0) == 0) {
                                                                      HEAP32[1315947] = 4;
                                                                      HEAP32[1315898] = 4095;
                                                                      if ((_strncmp(5263468, 5577744, 8) | 0) == 0) {
                                                                        if ((_strcmp(5263468, 5586704) | 0) == 0) {
                                                                          HEAP32[1356938] = 1229539657;
                                                                        }
                                                                        HEAP32[1311011] = 12;
                                                                        HEAP32[1315947] = 36;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      do {
                                                                        if ((_strncmp(5263468, 5577736, 5) | 0) != 0) {
                                                                          if ((_strncmp(5263468, 5577728, 5) | 0) == 0) {
                                                                            break;
                                                                          }
                                                                          if ((_strncmp(5263468, 5577720, 6) | 0) == 0) {
                                                                            break;
                                                                          }
                                                                          if ((_strncmp(5263468, 5577696, 8) | 0) != 0) {
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          $226 = HEAP8[5263476] | 0;
                                                                          if (($226 << 24 >> 24 | 0) == 52) {
                                                                            HEAP16[2699404] = 1716;
                                                                            HEAP16[2621484] = 2304;
                                                                            break L3270;
                                                                          } else if (($226 << 24 >> 24 | 0) == 53) {
                                                                            label = 2412;
                                                                            break L3270;
                                                                          } else if (($226 << 24 >> 24 | 0) == 54) {
                                                                            HEAP16[2699404] = 2136;
                                                                            HEAP16[2621484] = 2848;
                                                                            break L3270;
                                                                          } else {
                                                                            break L3270;
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      _sprintf(5263488, 5577708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263468 + (HEAP8[5263468] << 24 >> 24 == 77 & 1 | 6) | 0, tempInt) | 0);
                                                                      _adobe_coeff(5263724, 5263488);
                                                                      HEAP32[1315947] = 36;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577688) | 0) == 0) {
                                                                      HEAP32[1315947] = 4;
                                                                      HEAP32[1357154] = -1;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577660) | 0) == 0) {
                                                                      HEAP16[2699404] = $142 - 2 & 65535;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577652) | 0) == 0) {
                                                                      if (($zero_fsize_0 | 0) == 3178560) {
                                                                        HEAP16[2699404] = 1540;
                                                                        HEAP16[2621484] = 2064;
                                                                        HEAP32[1315947] = 24;
                                                                        HEAPF32[1390311] = +HEAPF32[1390311] * 4.0;
                                                                        HEAPF32[1390313] = +HEAPF32[1390313] * 4.0;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      } else {
                                                                        HEAP16[2699404] = 1544;
                                                                        HEAP16[2621484] = 2068;
                                                                        HEAP16[2622498] = 3136;
                                                                        HEAP32[1315947] = 36;
                                                                        HEAP32[1315898] = 3964;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                    }
                                                                    if (($zero_fsize_0 | 0) == 6114240) {
                                                                      HEAP16[2699404] = 1737;
                                                                      HEAP16[2621484] = 2324;
                                                                      HEAP16[2622498] = 3520;
                                                                      HEAP32[1315947] = 36;
                                                                      HEAP32[1315898] = 3962;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577640) | 0) == 0) {
                                                                      HEAP16[2699404] = 2302;
                                                                      HEAP16[2621484] = 3072;
                                                                      HEAP32[1315947] = 36;
                                                                      HEAP32[1315948] = 30;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577632) | 0) == 0) {
                                                                      HEAP16[2699404] = 2448;
                                                                      HEAP16[2621484] = 3264;
                                                                      HEAP16[2631518] = 18761;
                                                                      HEAP32[1356938] = 1633771873;
                                                                      HEAP32[1315947] = 4;
                                                                      HEAP32[1315898] = 64512;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strncmp(5263468, 5577628, 3) | 0) == 0) {
                                                                      HEAP16[2699404] = 2448;
                                                                      HEAP16[2621484] = 3264;
                                                                      HEAP16[2622498] = ($zero_fsize_0 | 0) / 4896 & -1 & 65535;
                                                                      HEAP16[2631518] = 19789;
                                                                      HEAP32[1315947] = 4;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    $tobool1398 = (_strcmp(5263724, 5587660) | 0) == 0;
                                                                    if ($tobool1398 & $163 << 16 >> 16 == 4704) {
                                                                      HEAP16[2621786] = 8;
                                                                      HEAP16[2699404] = $142 - 8 & 65535;
                                                                      HEAP16[2631898] = 8;
                                                                      HEAP16[2621484] = $143 - 16 & 65535;
                                                                      HEAP32[1315948] = 32;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ($tobool1398 & $163 << 16 >> 16 == 5632) {
                                                                      HEAP16[2631518] = 18761;
                                                                      HEAP16[2699404] = 3694;
                                                                      HEAP16[2621786] = 2;
                                                                      HEAP16[2631898] = $158 + 32 & 65535;
                                                                      HEAP16[2621484] = 5542 - $158 & 65535;
                                                                      if (($158 | 0) != 12) {
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      HEAP32[1315948] = 80;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577624) | 0) == 0) {
                                                                      HEAP16[2631518] = 18761;
                                                                      HEAP16[2699404] = $142 - 20 & 65535;
                                                                      HEAP16[2621786] = 2;
                                                                      $sub1435 = $143 - 6 & 65535;
                                                                      HEAP16[2621484] = $sub1435;
                                                                      if (($sub1435 & 65535) <= 3682) {
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      HEAP16[2699404] = $142 - 30 & 65535;
                                                                      HEAP16[2621484] = $143 - 52 & 65535;
                                                                      HEAP16[2621786] = 8;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if ((_strcmp(5263468, 5577616) | 0) == 0) {
                                                                      HEAP16[2631518] = 18761;
                                                                      HEAP16[2699404] = $142 - 3 & 65535;
                                                                      HEAP16[2621786] = 2;
                                                                      $sub1456 = $143 - 10 & 65535;
                                                                      HEAP16[2621484] = $sub1456;
                                                                      if (($sub1456 & 65535) <= 3718) {
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      HEAP16[2699404] = $142 - 31 & 65535;
                                                                      HEAP16[2621484] = $143 - 66 & 65535;
                                                                      HEAP16[2621786] = 8;
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    if (($zero_fsize_0 | 0) == 24e6) {
                                                                      $storemerge133 = 4e3;
                                                                      $storemerge134 = 3e3;
                                                                    } else if (($zero_fsize_0 | 0) == 20487168) {
                                                                      $storemerge133 = 3648;
                                                                      $storemerge134 = 2808;
                                                                    } else {
                                                                      if ((_strcmp(5263468, 5577600) | 0) == 0) {
                                                                        HEAP16[2699404] = 3045;
                                                                        HEAP16[2621484] = 4070;
                                                                        HEAP16[2621786] = 3;
                                                                        HEAP16[2631518] = 18761;
                                                                        HEAP32[1356938] = 1229539657;
                                                                        HEAP32[1315947] = 4;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577588) | 0) == 0) {
                                                                        HEAP16[2699404] = 484;
                                                                        HEAP16[2621484] = 644;
                                                                        HEAP32[1315947] = 24;
                                                                        HEAP32[1350792] = 2;
                                                                        HEAP32[1356938] = 370546198;
                                                                        HEAP32[1390380] = 16;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577556) | 0) == 0) {
                                                                        $230 = HEAP16[2622502] | 0;
                                                                        HEAP16[2621786] = 2;
                                                                        HEAP16[2699404] = $230 - 2 & 65535;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577548) | 0) == 0) {
                                                                        HEAP16[2699404] = 1200;
                                                                        HEAP16[2621484] = 1600;
                                                                        HEAP32[1315947] = 4;
                                                                        HEAP32[1356938] = 1229539657;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577540) | 0) == 0) {
                                                                        HEAP16[2699404] = 480;
                                                                        HEAP16[2621484] = 640;
                                                                        HEAP32[1315947] = 24;
                                                                        _gamma_curve(.45, 4.5, 1, 255);
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577532) | 0) == 0) {
                                                                        HEAP16[2699404] = 768;
                                                                        HEAP16[2621484] = 1024;
                                                                        HEAP32[1315947] = 24;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577524) | 0) == 0) {
                                                                        HEAP16[2699404] = 1040;
                                                                        HEAP16[2621484] = 1392;
                                                                        HEAP32[1315947] = 24;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577516) | 0) == 0) {
                                                                        HEAP16[2699404] = 1200;
                                                                        HEAP16[2621484] = 1600;
                                                                        HEAP32[1315947] = 24;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577508) | 0) == 0) {
                                                                        HEAP16[2699404] = 1958;
                                                                        HEAP16[2621484] = 2588;
                                                                        HEAP32[1315947] = ($zero_fsize_0 | 0) < 75e5 ? 24 : 4;
                                                                        HEAP32[1357153] = Math_imul($zero_fsize_0 >> 22, -5067304) + $zero_fsize_0 | 0;
                                                                        HEAP32[1315898] = 65520;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577500) | 0) == 0) {
                                                                        HEAP16[2699404] = 2469;
                                                                        HEAP16[2621484] = 3272;
                                                                        HEAP32[1315947] = 4;
                                                                        HEAP32[1315898] = 65520;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577488) | 0) == 0) {
                                                                        HEAP16[2699404] = 1024;
                                                                        HEAP16[2621484] = 1375;
                                                                        HEAP16[2622498] = 1376;
                                                                        HEAP32[1356938] = 1229539657;
                                                                        HEAP32[1315898] = 1023;
                                                                        HEAP32[1315947] = ($zero_fsize_0 | 0) < 2e6 ? 24 : 4;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577480) | 0) == 0) {
                                                                        HEAP16[2699404] = 1207;
                                                                        HEAP16[2621484] = 1608;
                                                                        HEAP16[2631518] = 18761;
                                                                        HEAP32[1356938] = 370546198;
                                                                        HEAP32[1357153] = 3212;
                                                                        HEAP32[1315898] = 1023;
                                                                        HEAP32[1315947] = 4;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577448) | 0) == 0) {
                                                                        HEAP16[2699404] = 3e3;
                                                                        HEAP16[2621484] = 2208;
                                                                        HEAP32[1356938] = 1633771873;
                                                                        HEAP32[1315947] = ($zero_fsize_0 | 0) < 1e7 ? 24 : 4;
                                                                        HEAP32[1315898] = 65472;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263468, 5577440) | 0) == 0) {
                                                                        HEAP16[2699404] = 1536;
                                                                        HEAP16[2621484] = 2048;
                                                                        HEAP16[2622498] = 2048;
                                                                        HEAP32[1356938] = 1633771873;
                                                                        HEAP32[1315947] = 4;
                                                                        HEAP32[1315898] = 1023;
                                                                        $232 = HEAP32[1316053] | 0;
                                                                        _fseek($232 | 0, 3145728, 0);
                                                                        $call1553 = _guess_byte_order(65536) | 0;
                                                                        HEAP16[2631518] = $call1553;
                                                                        if ($call1553 << 16 >> 16 != 19789) {
                                                                          label = 2692;
                                                                          break L2916;
                                                                        }
                                                                        HEAP16[2621786] = 16;
                                                                        HEAP16[2699404] = (HEAP16[2699404] | 0) - 16 & 65535;
                                                                        HEAP16[2631898] = 28;
                                                                        HEAP16[2621484] = (HEAP16[2621484] | 0) - 28 & 65535;
                                                                        HEAP32[1315898] = 62912;
                                                                        tempBigInt = 4674377;
                                                                        HEAP8[5263724] = tempBigInt & 255;
                                                                        tempBigInt = tempBigInt >> 8;
                                                                        HEAP8[5263725] = tempBigInt & 255;
                                                                        tempBigInt = tempBigInt >> 8;
                                                                        HEAP8[5263726] = tempBigInt & 255;
                                                                        tempBigInt = tempBigInt >> 8;
                                                                        HEAP8[5263727] = tempBigInt & 255;
                                                                        HEAP8[5263468] = 0;
                                                                        label = 2693;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263724, 5586772) | 0) == 0) {
                                                                        if ((HEAP32[1315947] | 0) == 46) {
                                                                          HEAP32[1315947] = 96;
                                                                        }
                                                                        if (($163 << 16 >> 16 | 0) == 7262) {
                                                                          HEAP16[2699404] = 5444;
                                                                          HEAP16[2621484] = 7248;
                                                                          HEAP16[2621786] = 4;
                                                                          HEAP16[2631898] = 7;
                                                                          HEAP32[1356938] = 1633771873;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        } else if (($163 << 16 >> 16 | 0) == 7410) {
                                                                          HEAP16[2699404] = 5502;
                                                                          HEAP16[2621484] = 7328;
                                                                          HEAP16[2621786] = 4;
                                                                          HEAP16[2631898] = 41;
                                                                          HEAP32[1356938] = 1633771873;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        } else if (($163 << 16 >> 16 | 0) == 9044) {
                                                                          HEAP16[2699404] = 6716;
                                                                          HEAP16[2621484] = 8964;
                                                                          HEAP16[2621786] = 8;
                                                                          HEAP16[2631898] = 40;
                                                                          HEAP32[1315948] = 256;
                                                                          HEAP32[1390380] = (HEAP32[1390380] | 0) + 256 | 0;
                                                                          HEAP32[1315898] = 33025;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        } else if (($163 << 16 >> 16 | 0) == 4090) {
                                                                          HEAP8[5263468] = HEAP8[5577432] | 0;
                                                                          HEAP8[5263469 | 0] = HEAP8[5577433 | 0] | 0;
                                                                          HEAP8[5263470 | 0] = HEAP8[5577434 | 0] | 0;
                                                                          HEAP8[5263471 | 0] = HEAP8[5577435 | 0] | 0;
                                                                          HEAP8[5263472 | 0] = HEAP8[5577436 | 0] | 0;
                                                                          HEAP16[2621786] = 6;
                                                                          HEAP16[2699404] = $142 - 6 & 65535;
                                                                          HEAP16[2631898] = 3;
                                                                          HEAP16[2621484] = $143 - 10 & 65535;
                                                                          HEAP32[1356938] = 1633771873;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        } else {
                                                                          label = 2692;
                                                                          break L2916;
                                                                        }
                                                                      }
                                                                      if ((_strcmp(5263724, 5579868) | 0) == 0) {
                                                                        if ((_memcmp($arraydecay, 5577424, 4) | 0) == 0) {
                                                                          $237 = HEAP32[1316053] | 0;
                                                                          _fseek($237 | 0, 14, 0);
                                                                          $238 = $str_i556;
                                                                          HEAP32[$str_i556 >> 2] = -1;
                                                                          $239 = HEAP32[1316053] | 0;
                                                                          _fread($238 | 0, 1, 4, $239 | 0);
                                                                          $241 = HEAP32[$str_i556 >> 2] | 0;
                                                                          if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                            $retval_0_i_i575 = $241;
                                                                          } else {
                                                                            $retval_0_i_i575 = _llvm_bswap_i32($241 | 0) | 0;
                                                                          }
                                                                          HEAP16[2699404] = $retval_0_i_i575 & 65535;
                                                                          HEAP32[$str_i577 >> 2] = -1;
                                                                          _fread($str_i577 | 0, 1, 4, HEAP32[1316053] | 0);
                                                                          $245 = HEAP32[$str_i577 >> 2] | 0;
                                                                          if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                            $retval_0_i_i596 = $245;
                                                                          } else {
                                                                            $retval_0_i_i596 = _llvm_bswap_i32($245 | 0) | 0;
                                                                          }
                                                                          HEAP16[2621484] = $retval_0_i_i596 & 65535;
                                                                          HEAP32[1356938] = 1633771873;
                                                                          HEAP32[1357153] = 68;
                                                                        }
                                                                        if ((HEAP32[1315947] | 0) == 0) {
                                                                          HEAP32[1315947] = 4;
                                                                        }
                                                                        HEAP32[1315898] = 16383;
                                                                        label = 2692;
                                                                        break L2916;
                                                                      }
                                                                      if ((_strcmp(5263724, 5586832) | 0) == 0) {
                                                                        HEAP32[1315898] = 16383;
                                                                        $247 = HEAP32[1316053] | 0;
                                                                        $248 = HEAP32[1357153] | 0;
                                                                        _fseek($247 | 0, $248 | 0, 0);
                                                                        do {
                                                                          if ((_ljpeg_start($jh, 1) | 0) != 0) {
                                                                            if ((HEAP32[$jh >> 2] | 0) != 15) {
                                                                              break;
                                                                            }
                                                                            HEAP32[1315898] = 8191;
                                                                          }
                                                                        } while (0);
                                                                        $250 = HEAP32[1310897] | 0;
                                                                        do {
                                                                          if ($250 >>> 0 > 1) {
                                                                            HEAP32[1356938] = 0;
                                                                            label = 2500;
                                                                            break;
                                                                          } else {
                                                                            if ((HEAP32[1310896] | 0) >>> 0 < (HEAPU16[2622502] | 0) >>> 0) {
                                                                              label = 2500;
                                                                              break;
                                                                            } else {
                                                                              break;
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if ((label | 0) == 2500) {
                                                                          HEAP32[1315947] = 14;
                                                                          HEAP16[2622498] = HEAP32[1310895] & 65535;
                                                                        }
                                                                        $254 = HEAP16[2621484] | 0;
                                                                        $255 = HEAP16[2699404] | 0;
                                                                        if (($255 | $254) << 16 >> 16 == 2048) {
                                                                          if (($250 | 0) == 1) {
                                                                            HEAP32[1356938] = 1;
                                                                            HEAP8[5561016] = HEAP8[5577416] | 0;
                                                                            HEAP8[5561017 | 0] = HEAP8[5577417 | 0] | 0;
                                                                            HEAP8[5561018 | 0] = HEAP8[5577418 | 0] | 0;
                                                                            HEAP8[5561019 | 0] = HEAP8[5577419 | 0] | 0;
                                                                            HEAP8[5561020 | 0] = HEAP8[5577420 | 0] | 0;
                                                                            _memcpy(5263468, 5577404, 11);
                                                                            HEAP16[2621786] = 8;
                                                                            HEAP16[2631898] = 18;
                                                                            HEAP16[2699404] = 2032;
                                                                            HEAP16[2621484] = 2016;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          } else {
                                                                            HEAP8[5263468] = HEAP8[5587516] | 0;
                                                                            HEAP8[5263469 | 0] = HEAP8[5587517 | 0] | 0;
                                                                            HEAP8[5263470 | 0] = HEAP8[5587518 | 0] | 0;
                                                                            HEAP8[5263471 | 0] = HEAP8[5587519 | 0] | 0;
                                                                            HEAP8[5263472 | 0] = HEAP8[5587520 | 0] | 0;
                                                                            HEAP16[2621786] = 10;
                                                                            HEAP16[2631898] = 16;
                                                                            HEAP16[2699404] = 2028;
                                                                            HEAP16[2621484] = 2022;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                        }
                                                                        if ((($255 & 65535) + ($254 & 65535) | 0) != 5204) {
                                                                          if (($254 << 16 >> 16 | 0) == 2116) {
                                                                            $$etemp$9 = 5263468;
                                                                            $st$10$0 = $$etemp$9 | 0;
                                                                            tempBigInt = 1701601622;
                                                                            HEAP8[$st$10$0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$10$0 + 1 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$10$0 + 2 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$10$0 + 3 | 0] = tempBigInt & 255;
                                                                            $st$11$1 = $$etemp$9 + 4 | 0;
                                                                            tempBigInt = 3547247;
                                                                            HEAP8[$st$11$1] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$11$1 + 1 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$11$1 + 2 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$11$1 + 3 | 0] = tempBigInt & 255;
                                                                            HEAP16[2621786] = 30;
                                                                            HEAP16[2699404] = $255 - 60 & 65535;
                                                                            HEAP16[2631898] = 55;
                                                                            HEAP16[2621484] = 2006;
                                                                            HEAP32[1356938] = 1229539657;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          } else if (($254 << 16 >> 16 | 0) == 3171) {
                                                                            $$etemp$13 = 5263468;
                                                                            $st$14$0 = $$etemp$13 | 0;
                                                                            tempBigInt = 1701601622;
                                                                            HEAP8[$st$14$0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$14$0 + 1 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$14$0 + 2 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$14$0 + 3 | 0] = tempBigInt & 255;
                                                                            $st$15$1 = $$etemp$13 + 4 | 0;
                                                                            tempBigInt = 3547247;
                                                                            HEAP8[$st$15$1] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$15$1 + 1 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$15$1 + 2 | 0] = tempBigInt & 255;
                                                                            tempBigInt = tempBigInt >> 8;
                                                                            HEAP8[$st$15$1 + 3 | 0] = tempBigInt & 255;
                                                                            HEAP16[2621786] = 24;
                                                                            HEAP16[2699404] = $255 - 48 & 65535;
                                                                            HEAP16[2631898] = 24;
                                                                            HEAP16[2621484] = 3123;
                                                                            HEAP32[1356938] = 370546198;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          } else {
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                        }
                                                                        $256 = HEAP8[5263468] | 0;
                                                                        if ($256 << 24 >> 24 == 0) {
                                                                          $$etemp$5 = 5263468;
                                                                          $st$6$0 = $$etemp$5 | 0;
                                                                          tempBigInt = 1953390915;
                                                                          HEAP8[$st$6$0] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$6$0 + 1 | 0] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$6$0 + 2 | 0] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$6$0 + 3 | 0] = tempBigInt & 255;
                                                                          $st$7$1 = $$etemp$5 + 4 | 0;
                                                                          tempBigInt = 6648417;
                                                                          HEAP8[$st$7$1] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$7$1 + 1 | 0] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$7$1 + 2 | 0] = tempBigInt & 255;
                                                                          tempBigInt = tempBigInt >> 8;
                                                                          HEAP8[$st$7$1 + 3 | 0] = tempBigInt & 255;
                                                                          $257 = 67;
                                                                        } else {
                                                                          $257 = $256;
                                                                        }
                                                                        if (($254 & 65535) > ($255 & 65535)) {
                                                                          HEAP16[2621786] = 6;
                                                                          HEAP16[2631898] = 32;
                                                                          HEAP16[2699404] = 2048;
                                                                          HEAP16[2621484] = 3072;
                                                                          $storemerge = 1633771873;
                                                                        } else {
                                                                          HEAP16[2631898] = 6;
                                                                          HEAP16[2621786] = 32;
                                                                          HEAP16[2621484] = 2048;
                                                                          HEAP16[2699404] = 3072;
                                                                          $storemerge = 370546198;
                                                                        }
                                                                        HEAP32[1356938] = $storemerge;
                                                                        if (+HEAPF32[1390311] == 0.0 | $257 << 24 >> 24 == 86) {
                                                                          HEAP32[1356938] = 0;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        } else {
                                                                          HEAP32[1316049] = $250;
                                                                          label = 2692;
                                                                          break L2916;
                                                                        }
                                                                      }
                                                                      do {
                                                                        if ((_strcmp(5263724, 5573420) | 0) != 0) {
                                                                          if ((_strcmp(5263724, 5573448) | 0) == 0) {
                                                                            break;
                                                                          }
                                                                          if ((_strcmp(5263468, 5577388) | 0) == 0) {
                                                                            HEAP16[2699404] = 1718;
                                                                            HEAP16[2621484] = 2304;
                                                                            HEAP32[1356938] = 370546198;
                                                                            HEAP32[1315947] = 36;
                                                                            HEAP32[1315948] = 30;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263724, 5573468) | 0) == 0) {
                                                                            HEAP16[2699404] = ($142 & 1) + $142 & 65535;
                                                                            HEAP32[1356938] = HEAP32[1357022] | 0;
                                                                            if (($143 << 16 >> 16 | 0) == 4100) {
                                                                              HEAP16[2621484] = 4096;
                                                                              $276 = 4096;
                                                                            } else if (($143 << 16 >> 16 | 0) == 4080) {
                                                                              HEAP16[2621484] = 4056;
                                                                              $276 = 4056;
                                                                            } else {
                                                                              $276 = $143;
                                                                            }
                                                                            $cmp1821 = (HEAP32[1315947] | 0) == 4;
                                                                            if ($cmp1821) {
                                                                              HEAP32[1315948] = 4;
                                                                            }
                                                                            HEAP32[1311011] = 12;
                                                                            do {
                                                                              if ((_strcmp(5263468, 5577380) | 0) != 0) {
                                                                                if ((_strcmp(5263468, 5577352) | 0) == 0) {
                                                                                  break;
                                                                                }
                                                                                if ((_strcmp(5263468, 5577344) | 0) == 0) {
                                                                                  HEAP16[2621484] = $276 - 30 & 65535;
                                                                                  if (!$cmp1821) {
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  HEAP32[1315898] = 3961;
                                                                                  label = 2692;
                                                                                  break L2916;
                                                                                }
                                                                                if ((_strcmp(5263468, 5577336) | 0) == 0) {
                                                                                  HEAP32[1311013] = 10721280;
                                                                                  HEAP32[1311016] = $call41 - 10721280 | 0;
                                                                                  HEAP16[2622034] = 480;
                                                                                  HEAP16[2622024] = 640;
                                                                                  label = 2692;
                                                                                  break L2916;
                                                                                }
                                                                                if ((_strcmp(5263468, 5577328) | 0) != 0) {
                                                                                  label = 2692;
                                                                                  break L2916;
                                                                                }
                                                                                HEAP32[1315947] = 36;
                                                                                HEAP32[1315948] = 24;
                                                                                label = 2692;
                                                                                break L2916;
                                                                              }
                                                                            } while (0);
                                                                            HEAP16[2621484] = $276 - 20 & 65535;
                                                                            if (!$cmp1821) {
                                                                              label = 2692;
                                                                              break L2916;
                                                                            }
                                                                            HEAP32[1315898] = 4035;
                                                                            HEAP32[1390256] = 0;
                                                                            HEAP32[1390257] = 0;
                                                                            HEAP32[1390258] = 0;
                                                                            HEAP32[1390259] = 0;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5579184) | 0) == 0) {
                                                                            HEAP16[2699404] = 2047;
                                                                            HEAP16[2621484] = 3072;
                                                                            HEAP32[1356938] = 1633771873;
                                                                            HEAP32[1357153] = 6656;
                                                                            HEAP32[1315947] = 36;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5577316) | 0) == 0) {
                                                                            HEAP16[2621484] = 3288;
                                                                            HEAP16[2631898] = 5;
                                                                            HEAP32[1315906] = -17;
                                                                            HEAP32[1357153] = 862144;
                                                                            HEAP32[1315947] = 26;
                                                                            HEAP32[1356938] = -1667457892;
                                                                            HEAP32[1390240] = 4;
                                                                            HEAP8[5561016] = HEAP8[5577308] | 0;
                                                                            HEAP8[5561017 | 0] = HEAP8[5577309 | 0] | 0;
                                                                            HEAP8[5561018 | 0] = HEAP8[5577310 | 0] | 0;
                                                                            HEAP8[5561019 | 0] = HEAP8[5577311 | 0] | 0;
                                                                            HEAP8[5561020 | 0] = HEAP8[5577312 | 0] | 0;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5577300) | 0) == 0) {
                                                                            HEAP16[2621484] = 3109;
                                                                            HEAP16[2631898] = 59;
                                                                            HEAP32[1315900] = 9;
                                                                            HEAP32[1357153] = 787392;
                                                                            HEAP32[1315947] = 26;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          $tobool1877 = (_strcmp(5263724, 5573460) | 0) == 0;
                                                                          if ($tobool1877 & $cmp756) {
                                                                            _adobe_coeff(5573460, 5577292);
                                                                            HEAP16[2621484] = 3925;
                                                                            HEAP16[2631518] = 19789;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ($tobool1877 & $163 << 16 >> 16 == 5504) {
                                                                            HEAP16[2621484] = $143 - 8 & 65535;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ($tobool1877 & $163 << 16 >> 16 == 6048) {
                                                                            HEAP16[2621484] = $143 - 24 & 65535;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5586872) | 0) == 0) {
                                                                            if ($143 << 16 >> 16 == 3880) {
                                                                              HEAP16[2699404] = $142 - 1 & 65535;
                                                                              $inc1914 = $163 + 1 & 65535;
                                                                              HEAP16[2622498] = $inc1914;
                                                                              HEAP16[2621484] = $inc1914;
                                                                            } else {
                                                                              HEAP16[2631518] = 19789;
                                                                              HEAP32[1315948] = 2;
                                                                            }
                                                                            HEAP32[1356938] = 1633771873;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5577280) | 0) == 0) {
                                                                            HEAP16[2699404] = $142 - 4 & 65535;
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          if ((_strcmp(5263468, 5577272) | 0) == 0) {
                                                                            HEAP16[2621786] = 4;
                                                                            HEAP16[2699404] = $142 - 4 & 65535;
                                                                            HEAP16[2631898] = 32;
                                                                            HEAP16[2621484] = $143 - 32 & 65535;
                                                                            _gamma_curve(0.0, 7.0, 1, 255);
                                                                            label = 2692;
                                                                            break L2916;
                                                                          }
                                                                          do {
                                                                            if ((_strcmp(5263468, 5577240) | 0) == 0) {
                                                                              HEAP16[2699404] = 480;
                                                                              HEAP16[2621484] = 640;
                                                                              if (($zero_fsize_0 | 0) < 614400) {
                                                                                break;
                                                                              }
                                                                              if (+_find_green(16, 16, 3840, 5120) < 25.0) {
                                                                                break;
                                                                              }
                                                                              _memcpy(5263468, 5577228, 9);
                                                                              HEAP16[2699404] = (HEAP16[2699404] | 0) - 3 & 65535;
                                                                              HEAP32[1357153] = 3840;
                                                                              HEAP16[2631518] = 18761;
                                                                              HEAP32[1315947] = 4;
                                                                              label = 2692;
                                                                              break L2916;
                                                                            } else {
                                                                              if ((_strcmp(5263468, 5577220) | 0) == 0) {
                                                                                HEAP16[2699404] = 2134;
                                                                                HEAP16[2621484] = 2848;
                                                                                break;
                                                                              }
                                                                              do {
                                                                                if ((_strcmp(5263468, 5577212) | 0) == 0) {
                                                                                  HEAP16[2699404] = 2152;
                                                                                  HEAP16[2622502] = 2152;
                                                                                  HEAP16[2621484] = 2864;
                                                                                  HEAP16[2622498] = 2864;
                                                                                  $280 = 2152;
                                                                                  $279 = 2864;
                                                                                } else {
                                                                                  if ((_strcmp(5263468, 5577204) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1744;
                                                                                    HEAP16[2621484] = 2336;
                                                                                    HEAP16[2622502] = 1779;
                                                                                    HEAP16[2622498] = 2338;
                                                                                    HEAP16[2621786] = 33;
                                                                                    HEAP16[2631898] = 1;
                                                                                    $280 = 1779;
                                                                                    $279 = 2338;
                                                                                    break;
                                                                                  }
                                                                                  if ((_strncasecmp(5263468, 5577192, 9) | 0) == 0) {
                                                                                    HEAP32[1357153] = (HEAP32[1357153] | 0) < 86016 ? 86016 : 94208;
                                                                                    HEAP32[1315947] = 36;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcasecmp(5263724, 5586764) | 0) == 0) {
                                                                                    if ((HEAP32[1356938] | 0) == -1) {
                                                                                      HEAP32[1356938] = 1633771873;
                                                                                    }
                                                                                    do {
                                                                                      if ((_strncmp(5263468, 5577184, 6) | 0) == 0) {
                                                                                        HEAP16[2621484] = $143 - 4 & 65535;
                                                                                        HEAP16[2631898] = 2;
                                                                                      } else {
                                                                                        if ((_strcmp(5263468, 5577172) | 0) == 0) {
                                                                                          HEAP16[2621484] = $143 - 4 & 65535;
                                                                                          HEAP16[2631898] = 2;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strcmp(5263468, 5577164) | 0) == 0) {
                                                                                          HEAP16[2621484] = $143 - 4 & 65535;
                                                                                          HEAP16[2631898] = 2;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strcmp(5263468, 5577156) | 0) == 0) {
                                                                                          HEAP16[2621484] = $143 - 4 & 65535;
                                                                                          HEAP16[2631898] = 2;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strncmp(5263468, 5577124, 7) | 0) == 0) {
                                                                                          HEAP8[5263474] = 0;
                                                                                          HEAP16[2621484] = $143 - 4 & 65535;
                                                                                          HEAP16[2631898] = 2;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strcmp(5263468, 5577116) | 0) == 0) {
                                                                                          HEAP16[2621484] = $143 - 4 & 65535;
                                                                                          HEAP16[2631898] = 2;
                                                                                          HEAP32[1390240] = 1;
                                                                                          HEAP32[1356938] = 0;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strcmp(5263468, 5577108) | 0) == 0) {
                                                                                          HEAP32[1390380] = 214;
                                                                                          HEAP32[1390240] = 1;
                                                                                          HEAP32[1356938] = 0;
                                                                                          break;
                                                                                        }
                                                                                        if ((_strcmp(5263468, 5577100) | 0) != 0) {
                                                                                          break;
                                                                                        }
                                                                                        HEAP32[1390240] = 1;
                                                                                        HEAP32[1356938] = 0;
                                                                                      }
                                                                                    } while (0);
                                                                                    if ((_strcmp(5263472, 5577096) | 0) == 0) {
                                                                                      HEAP8[5561016] = HEAP8[5577088] | 0;
                                                                                      HEAP8[5561017 | 0] = HEAP8[5577089 | 0] | 0;
                                                                                      HEAP8[5561018 | 0] = HEAP8[5577090 | 0] | 0;
                                                                                      HEAP8[5561019 | 0] = HEAP8[5577091 | 0] | 0;
                                                                                      HEAP8[5561020 | 0] = HEAP8[5577092 | 0] | 0;
                                                                                    }
                                                                                    if ((_strstr(5263468, 5577080) | 0) != 0) {
                                                                                      HEAP8[5263468] = HEAP8[5577080] | 0;
                                                                                      HEAP8[5263469 | 0] = HEAP8[5577081 | 0] | 0;
                                                                                      HEAP8[5263470 | 0] = HEAP8[5577082 | 0] | 0;
                                                                                      HEAP8[5263471 | 0] = HEAP8[5577083 | 0] | 0;
                                                                                      HEAP8[5263472 | 0] = HEAP8[5577084 | 0] | 0;
                                                                                      HEAP32[1357153] = 15424;
                                                                                    }
                                                                                    if ((_strncmp(5263468, 5579988, 3) | 0) == 0) {
                                                                                      HEAP16[2699404] = 242;
                                                                                      HEAP16[2622502] = 242;
                                                                                      $cmp2056 = ($call41 | 0) < 1e5;
                                                                                      $_824 = $cmp2056 ? 257 : 513;
                                                                                      $_825 = $cmp2056 ? 1.2958500669344042 : .6384335885869012;
                                                                                      HEAP16[2622498] = $cmp2056 ? 256 : 512;
                                                                                      HEAP16[2621484] = $cmp2056 ? 249 : 501;
                                                                                      HEAPF64[tempDoublePtr >> 3] = $_825, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                                                                                      HEAP32[1357153] = $_824 + (HEAP32[1357153] | 0) | 0;
                                                                                      HEAP32[1390240] = 4;
                                                                                      HEAP32[1356938] = -1920103027;
                                                                                      HEAP32[1311252] = 0;
                                                                                      HEAP32[1311233] = HEAP32[1311193] | 0;
                                                                                      HEAP32[1311234] = HEAP32[5244776 >> 2] | 0;
                                                                                      HEAP32[1311235] = HEAP32[5244780 >> 2] | 0;
                                                                                      HEAP32[1311236] = HEAP32[5244784 >> 2] | 0;
                                                                                      HEAP32[1311237] = HEAP32[1311197] | 0;
                                                                                      HEAP32[5244952 >> 2] = HEAP32[5244792 >> 2] | 0;
                                                                                      HEAP32[5244956 >> 2] = HEAP32[5244796 >> 2] | 0;
                                                                                      HEAP32[5244960 >> 2] = HEAP32[5244800 >> 2] | 0;
                                                                                      HEAP32[1311241] = HEAP32[1311201] | 0;
                                                                                      HEAP32[5244968 >> 2] = HEAP32[5244808 >> 2] | 0;
                                                                                      HEAP32[5244972 >> 2] = HEAP32[5244812 >> 2] | 0;
                                                                                      HEAP32[5244976 >> 2] = HEAP32[5244816 >> 2] | 0;
                                                                                      HEAPF32[1311404] = 1.1790000200271606;
                                                                                      HEAPF32[1311405] = 1.2089999914169312;
                                                                                      HEAPF32[1311406] = 1.0360000133514404;
                                                                                      HEAP32[1315947] = 24;
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    if ((_strcmp(5263468, 5577076) | 0) == 0) {
                                                                                      HEAP8[5263468] = HEAP8[5577068] | 0;
                                                                                      HEAP8[5263469 | 0] = HEAP8[5577069 | 0] | 0;
                                                                                      HEAP8[5263470 | 0] = HEAP8[5577070 | 0] | 0;
                                                                                      HEAP8[5263471 | 0] = HEAP8[5577071 | 0] | 0;
                                                                                      HEAP8[5263472 | 0] = HEAP8[5577072 | 0] | 0;
                                                                                      HEAP16[2699404] = 512;
                                                                                      HEAP16[2621484] = 768;
                                                                                      HEAP32[1357153] = 1152;
                                                                                      HEAP32[1315947] = 58;
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    if ((_strstr(5263468, 5577060) | 0) != 0) {
                                                                                      HEAP8[5263468] = HEAP8[5577060] | 0;
                                                                                      HEAP8[5263469 | 0] = HEAP8[5577061 | 0] | 0;
                                                                                      HEAP8[5263470 | 0] = HEAP8[5577062 | 0] | 0;
                                                                                      HEAP8[5263471 | 0] = HEAP8[5577063 | 0] | 0;
                                                                                      HEAP8[5263472 | 0] = HEAP8[5577064 | 0] | 0;
                                                                                      HEAP16[2699404] = 512;
                                                                                      HEAP16[2621484] = 768;
                                                                                      HEAP32[1357153] = 19712;
                                                                                      HEAP32[1315947] = 58;
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    if ((_strstr(5263468, 5577032) | 0) != 0) {
                                                                                      HEAP8[5263468] = HEAP8[5577032] | 0;
                                                                                      HEAP8[5263469 | 0] = HEAP8[5577033 | 0] | 0;
                                                                                      HEAP8[5263470 | 0] = HEAP8[5577034 | 0] | 0;
                                                                                      HEAP8[5263471 | 0] = HEAP8[5577035 | 0] | 0;
                                                                                      HEAP8[5263472 | 0] = HEAP8[5577036 | 0] | 0;
                                                                                      HEAP8[5263473 | 0] = HEAP8[5577037 | 0] | 0;
                                                                                      HEAP16[2699404] = 976;
                                                                                      HEAP16[2621484] = 848;
                                                                                      HEAPF64[tempDoublePtr >> 3] = 1.5345911949685533, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                                                                                      HEAP32[1315947] = (HEAP32[1311010] | 0) == 7 ? 18 : 80;
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    if ((_strcmp(5263468, 5577024) | 0) != 0) {
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    HEAP16[2622034] = 128;
                                                                                    HEAP16[2622024] = 192;
                                                                                    HEAP32[1311013] = 6144;
                                                                                    HEAP32[1311014] = 360;
                                                                                    HEAP32[1310740] = 50;
                                                                                    HEAP16[2699404] = 1024;
                                                                                    HEAP16[2621484] = 1536;
                                                                                    HEAP32[1357153] = 79872;
                                                                                    HEAP32[1315947] = 24;
                                                                                    HEAP32[1390380] = 17;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5579152) | 0) == 0) {
                                                                                    HEAP16[2699404] = 512;
                                                                                    HEAP16[2621484] = 768;
                                                                                    HEAP32[1357153] = 3632;
                                                                                    HEAP32[1315947] = 58;
                                                                                    HEAP32[1356938] = 1633771873;
                                                                                    HEAP32[1311252] = 0;
                                                                                    $288 = HEAP32[1390240] | 0;
                                                                                    $289 = $288 << 2;
                                                                                    if (($288 | 0) <= 0) {
                                                                                      label = 2692;
                                                                                      break L2916;
                                                                                    }
                                                                                    _memcpy(5244932, 5244820, $289);
                                                                                    _memcpy(5244948, 5244820 + ($288 << 2) | 0, $289);
                                                                                    _memcpy(5244964, 5244820 + ($288 << 1 << 2) | 0, $289);
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strncmp(5263468, 5577012, 9) | 0) == 0) {
                                                                                    if (HEAP8[$head + 5 | 0] << 24 >> 24 != 0) {
                                                                                      tempBigInt = 3158066;
                                                                                      HEAP8[5263478] = tempBigInt & 255;
                                                                                      tempBigInt = tempBigInt >> 8;
                                                                                      HEAP8[5263479 | 0] = tempBigInt & 255;
                                                                                      tempBigInt = tempBigInt >> 8;
                                                                                      HEAP8[5263480 | 0] = tempBigInt & 255;
                                                                                      tempBigInt = tempBigInt >> 8;
                                                                                      HEAP8[5263481 | 0] = tempBigInt & 255;
                                                                                    }
                                                                                    _fseek(HEAP32[1316053] | 0, 544, 0);
                                                                                    HEAP16[$str_i615 >> 1] = -1;
                                                                                    _fread($str_i615 | 0, 1, 2, HEAP32[1316053] | 0);
                                                                                    $296 = HEAP16[$str_i615 >> 1] | 0;
                                                                                    $conv2_i_i619 = $296 & 255;
                                                                                    $298 = ($296 & 65535) >>> 8;
                                                                                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                                      $retval_0_in_i_i627 = ($298 & 65535) << 8 | $conv2_i_i619;
                                                                                    } else {
                                                                                      $retval_0_in_i_i627 = $conv2_i_i619 << 8 | $298 & 65535;
                                                                                    }
                                                                                    HEAP16[2699404] = $retval_0_in_i_i627 & 65535;
                                                                                    HEAP16[$str_i630 >> 1] = -1;
                                                                                    _fread($str_i630 | 0, 1, 2, HEAP32[1316053] | 0);
                                                                                    $303 = HEAP16[$str_i630 >> 1] | 0;
                                                                                    $conv2_i_i634 = $303 & 255;
                                                                                    $305 = ($303 & 65535) >>> 8;
                                                                                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                                      $retval_0_in_i_i642 = ($305 & 65535) << 8 | $conv2_i_i634;
                                                                                    } else {
                                                                                      $retval_0_in_i_i642 = $conv2_i_i634 << 8 | $305 & 65535;
                                                                                    }
                                                                                    HEAP16[2621484] = $retval_0_in_i_i642 & 65535;
                                                                                    HEAP32[$str_i645 >> 2] = -1;
                                                                                    _fread($str_i645 | 0, 1, 4, HEAP32[1316053] | 0);
                                                                                    HEAP16[$str_i666 >> 1] = -1;
                                                                                    _fread($str_i666 | 0, 1, 2, HEAP32[1316053] | 0);
                                                                                    $312 = HEAP16[$str_i666 >> 1] | 0;
                                                                                    $conv2_i_i670 = $312 & 255;
                                                                                    $314 = ($312 & 65535) >>> 8;
                                                                                    if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                                      $retval_0_in_i_i678 = ($314 & 65535) << 8 | $conv2_i_i670;
                                                                                    } else {
                                                                                      $retval_0_in_i_i678 = $conv2_i_i670 << 8 | $314 & 65535;
                                                                                    }
                                                                                    $cond2132 = ($retval_0_in_i_i678 & 65535) << 16 >> 16 == 30 ? 738 : 736;
                                                                                    HEAP32[1357153] = $cond2132;
                                                                                    $316 = HEAP16[2699404] | 0;
                                                                                    $317 = HEAP16[2621484] | 0;
                                                                                    if (($316 & 65535) > ($317 & 65535)) {
                                                                                      HEAP16[2621484] = $316;
                                                                                      HEAP16[2699404] = $317;
                                                                                      $318 = HEAP32[1316053] | 0;
                                                                                      $sub2150 = $cond2132 - 6 | 0;
                                                                                      _fseek($318 | 0, $sub2150 | 0, 0);
                                                                                      $319 = $str_i681;
                                                                                      HEAP16[$str_i681 >> 1] = -1;
                                                                                      $320 = HEAP32[1316053] | 0;
                                                                                      _fread($319 | 0, 1, 2, $320 | 0);
                                                                                      $322 = HEAP16[$str_i681 >> 1] | 0;
                                                                                      $conv2_i_i685 = $322 & 255;
                                                                                      $324 = ($322 & 65535) >>> 8;
                                                                                      if (HEAP16[2631518] << 16 >> 16 == 18761) {
                                                                                        $retval_0_in_i_i693 = ($324 & 65535) << 8 | $conv2_i_i685;
                                                                                      } else {
                                                                                        $retval_0_in_i_i693 = $conv2_i_i685 << 8 | $324 & 65535;
                                                                                      }
                                                                                      HEAP32[1350792] = ($retval_0_in_i_i693 & 3 | 0) != 3 ? 5 : 6;
                                                                                    }
                                                                                    HEAP32[1356938] = 1633771873;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  $tobool2160 = (_strcmp(5263724, 5586416) | 0) != 0;
                                                                                  if (!($tobool2160 | (HEAP32[1315947] | 0) != 0)) {
                                                                                    $conv2164 = $163 & 65535;
                                                                                    if (($conv2164 | 0) == 1316) {
                                                                                      HEAP16[2699404] = 1030;
                                                                                      HEAP16[2621484] = 1300;
                                                                                      HEAP16[2621786] = 1;
                                                                                      HEAP16[2631898] = 6;
                                                                                    } else if (($conv2164 | 0) == 2568) {
                                                                                      HEAP16[2699404] = 1960;
                                                                                      HEAP16[2621484] = 2560;
                                                                                      HEAP16[2621786] = 2;
                                                                                      HEAP16[2631898] = 8;
                                                                                    }
                                                                                    HEAP32[1356938] = 370546198;
                                                                                    HEAP32[1315947] = 70;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5577e3) | 0) == 0) {
                                                                                    HEAP16[2699404] = 768;
                                                                                    HEAP16[2621484] = 1024;
                                                                                    HEAP32[1357153] = 1024;
                                                                                    HEAP32[1356938] = 1229539657;
                                                                                    HEAP32[1315947] = 24;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576988) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1208;
                                                                                    HEAP16[2621484] = 1632;
                                                                                    HEAP32[1357153] = 3264;
                                                                                    HEAP32[1315947] = 24;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if (($zero_fsize_0 | 0) == 3217760) {
                                                                                    HEAP16[2699404] = 1546;
                                                                                    HEAP16[2621484] = 2070;
                                                                                    HEAP16[2622498] = 2080;
                                                                                    HEAP32[1315947] = 24;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576980) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1700;
                                                                                    HEAP16[2621484] = 2260;
                                                                                    HEAP32[1315947] = 4;
                                                                                    HEAP32[1315898] = 65535;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576972) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1924;
                                                                                    HEAP16[2621484] = 2576;
                                                                                    HEAP16[2622498] = 3232;
                                                                                    HEAP32[1311011] = 10;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576964) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1720;
                                                                                    HEAP16[2621484] = 2312;
                                                                                    HEAP16[2622498] = 3520;
                                                                                    HEAP16[2631898] = 2;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576956) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1926;
                                                                                    HEAP16[2621484] = 2580;
                                                                                    HEAP16[2622498] = 3904;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576920) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1208;
                                                                                    HEAP16[2621484] = 1620;
                                                                                    HEAP16[2622498] = 2432;
                                                                                    HEAP32[1350792] = 3;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576912) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1544;
                                                                                    HEAP16[2621484] = 2058;
                                                                                    HEAP16[2622498] = 3136;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576904) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1931;
                                                                                    HEAP16[2621484] = 2570;
                                                                                    HEAP16[2622498] = 3904;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576896) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1937;
                                                                                    HEAP16[2621484] = 2577;
                                                                                    HEAP16[2622498] = 3904;
                                                                                    HEAP32[1356938] = 370546198;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576888) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1960;
                                                                                    HEAP16[2621484] = 2570;
                                                                                    HEAP16[2622498] = 3904;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576880) | 0) == 0) {
                                                                                    HEAP16[2699404] = 2145;
                                                                                    HEAP16[2621484] = 2833;
                                                                                    HEAP16[2622498] = 3584;
                                                                                    HEAP32[1356938] = 370546198;
                                                                                    HEAP32[1311011] = 10;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576872) | 0) == 0) {
                                                                                    HEAP16[2699404] = 2321;
                                                                                    HEAP16[2621484] = 3089;
                                                                                    HEAP16[2622498] = 4672;
                                                                                    HEAP32[1315898] = 4095;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576864) | 0) == 0) {
                                                                                    HEAP16[2699404] = 2319;
                                                                                    HEAP16[2621484] = 3087;
                                                                                    HEAP16[2622498] = 4672;
                                                                                    HEAP32[1315898] = 4095;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576856) | 0) == 0) {
                                                                                    HEAP16[2699404] = 2468;
                                                                                    HEAP16[2621484] = 3279;
                                                                                    HEAP16[2622498] = 4928;
                                                                                    HEAP32[1315898] = 4095;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576848) | 0) == 0) {
                                                                                    HEAP16[2699404] = 2467;
                                                                                    HEAP16[2621484] = 3281;
                                                                                    HEAP16[2622502] = 2502;
                                                                                    HEAP16[2622498] = 4992;
                                                                                    HEAP32[1315898] = 4095;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if (($zero_fsize_0 | 0) == 15499264) {
                                                                                    HEAP16[2699404] = 2752;
                                                                                    HEAP16[2621484] = 3672;
                                                                                    HEAP16[2622498] = 5632;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576812) | 0) == 0) {
                                                                                    HEAP16[2699404] = 3044;
                                                                                    HEAP16[2621484] = 4072;
                                                                                    HEAP16[2622498] = 4096;
                                                                                    HEAP32[1315948] = 80;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576804) | 0) == 0) {
                                                                                    HEAP16[2699404] = 1928;
                                                                                    HEAP16[2621484] = 2568;
                                                                                    HEAP16[2622498] = 3852;
                                                                                    HEAP32[1315898] = 4095;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if (($zero_fsize_0 | 0) == 9313536) {
                                                                                    HEAP16[2699404] = 2142;
                                                                                    HEAP16[2621484] = 2844;
                                                                                    HEAP16[2622498] = 4288;
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  if ((_strcmp(5263468, 5576796) | 0) != 0) {
                                                                                    label = 2692;
                                                                                    break L2916;
                                                                                  }
                                                                                  HEAP16[2699404] = 2318;
                                                                                  HEAP16[2621484] = 3082;
                                                                                  HEAP16[2622498] = 4672;
                                                                                  label = 2692;
                                                                                  break L2916;
                                                                                }
                                                                              } while (0);
                                                                              HEAP16[2631518] = 18761;
                                                                              $mul1964 = Math_imul($279, $280);
                                                                              HEAP32[1357153] = $zero_fsize_0 - $mul1964 | 0;
                                                                              do {
                                                                                if (($zero_fsize_0 | 0) == ($mul1964 | 0)) {
                                                                                  _gamma_curve(0.0, 3.875, 1, 255);
                                                                                } else {
                                                                                  $281 = HEAP32[1316053] | 0;
                                                                                  _fseek($281 | 0, 168, 0);
                                                                                  if ((_fread(5428620, 2, 256, HEAP32[1316053] | 0) | 0) >>> 0 < 256) {
                                                                                    _derror();
                                                                                  }
                                                                                  $cmp1_i = HEAP16[2631518] << 16 >> 16 == 18761;
                                                                                  if ($cmp1_i ^ (_htons(4660) | 0) == 4660) {
                                                                                    break;
                                                                                  }
                                                                                  _swab(5428620, 5428620, 512);
                                                                                }
                                                                              } while (0);
                                                                              HEAP32[1315947] = 24;
                                                                              label = 2692;
                                                                              break L2916;
                                                                            }
                                                                          } while (0);
                                                                          HEAP32[1356938] = 0;
                                                                          HEAP32[1315947] = 52;
                                                                          _gamma_curve(0.0, 3.875, 1, 255);
                                                                          label = 2692;
                                                                          break L2916;
                                                                        }
                                                                      } while (0);
                                                                      $conv1723 = $163 & 65535;
                                                                      $260 = HEAP16[2622502] | 0;
                                                                      $conv1727 = $260 & 65535;
                                                                      do {
                                                                        if ((($call41 - (HEAP32[1357153] | 0) | 0) / (($conv1723 << 3 >>> 0) / 7 >>> 0 | 0) & -1 | 0) == ($conv1727 | 0)) {
                                                                          HEAP32[1315947] = 40;
                                                                        } else {
                                                                          if ((HEAP32[1315947] | 0) != 0) {
                                                                            break;
                                                                          }
                                                                          HEAP32[1315947] = 4;
                                                                          HEAP32[1315948] = 4;
                                                                        }
                                                                      } while (0);
                                                                      HEAP32[1310720] = 1;
                                                                      $add1736 = $142 + 12 & 65535;
                                                                      $_add1736 = ($add1736 & 65535) > ($260 & 65535) ? $260 : $add1736;
                                                                      HEAP16[2699404] = $_add1736;
                                                                      $i_5748 = 0;
                                                                      $262 = $143;
                                                                      $261 = $_add1736;
                                                                      while (1) {
                                                                        do {
                                                                          if (($conv1723 | 0) == (HEAP16[5267388 + ($i_5748 * 12 & -1) >> 1] << 16 >> 16 | 0)) {
                                                                            if (($conv1727 | 0) != (HEAP16[5267390 + ($i_5748 * 12 & -1) >> 1] << 16 >> 16 | 0)) {
                                                                              $270 = $262;
                                                                              $269 = $261;
                                                                              break;
                                                                            }
                                                                            HEAP16[2631898] = HEAP16[5267392 + ($i_5748 * 12 & -1) >> 1] | 0;
                                                                            HEAP16[2621786] = HEAP16[5267394 + ($i_5748 * 12 & -1) >> 1] | 0;
                                                                            $add1770 = $262 + (HEAP16[5267396 + ($i_5748 * 12 & -1) >> 1] | 0) & 65535;
                                                                            HEAP16[2621484] = $add1770;
                                                                            $add1776 = $261 + (HEAP16[5267398 + ($i_5748 * 12 & -1) >> 1] | 0) & 65535;
                                                                            HEAP16[2699404] = $add1776;
                                                                            $270 = $add1770;
                                                                            $269 = $add1776;
                                                                          } else {
                                                                            $270 = $262;
                                                                            $269 = $261;
                                                                          }
                                                                        } while (0);
                                                                        $inc1780 = $i_5748 + 1 | 0;
                                                                        if (($inc1780 | 0) == 23) {
                                                                          break;
                                                                        } else {
                                                                          $i_5748 = $inc1780;
                                                                          $262 = $270;
                                                                          $261 = $269;
                                                                        }
                                                                      }
                                                                      HEAP32[1356938] = Math_imul(HEAPU8[5577396 + ((HEAP16[2631898] & 1 ^ (HEAP32[1356938] | 0) + 3 ^ (HEAPU16[2621786] | 0) << 1) & 3) | 0] | 0, 16843009);
                                                                      label = 2692;
                                                                      break L2916;
                                                                    }
                                                                    HEAP16[2699404] = $storemerge134;
                                                                    HEAP16[2621484] = $storemerge133;
                                                                    HEAP8[5263468] = HEAP8[5577608] | 0;
                                                                    HEAP8[5263469 | 0] = HEAP8[5577609 | 0] | 0;
                                                                    HEAP8[5263470 | 0] = HEAP8[5577610 | 0] | 0;
                                                                    HEAP8[5263471 | 0] = HEAP8[5577611 | 0] | 0;
                                                                    HEAP8[5263472 | 0] = HEAP8[5577612 | 0] | 0;
                                                                    HEAP8[5263473 | 0] = HEAP8[5577613 | 0] | 0;
                                                                    HEAP16[2631518] = 19789;
                                                                    HEAP32[1315947] = 4;
                                                                    HEAP32[1315948] = 6;
                                                                    HEAP32[1315898] = 991;
                                                                    label = 2692;
                                                                    break L2916;
                                                                  }
                                                                } while (0);
                                                                if ((label | 0) == 2412) {
                                                                  HEAP16[2699404] = 1956;
                                                                  HEAP16[2621484] = 2607;
                                                                  HEAP16[2622498] = 2624;
                                                                }
                                                                HEAP32[1357153] = (HEAP32[1357153] | 0) + 14 | 0;
                                                                HEAP32[1356938] = 1633771873;
                                                              }
                                                              HEAP32[1315947] = 4;
                                                              HEAP32[1315898] = 991;
                                                              HEAP16[2631518] = 19789;
                                                              label = 2692;
                                                              break L2916;
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      HEAP8[5263468] = HEAP8[5577860] | 0;
                                                      HEAP8[5263469 | 0] = HEAP8[5577861 | 0] | 0;
                                                      HEAP8[5263470 | 0] = HEAP8[5577862 | 0] | 0;
                                                      HEAP8[5263471 | 0] = HEAP8[5577863 | 0] | 0;
                                                      HEAP8[5263472 | 0] = HEAP8[5577864 | 0] | 0;
                                                      HEAP8[5263473 | 0] = HEAP8[5577865 | 0] | 0;
                                                      HEAP16[2699404] = 1204;
                                                      HEAP16[2621484] = 1616;
                                                      HEAP32[1390240] = 4;
                                                      HEAP32[1356938] = 1263225675;
                                                      label = 2692;
                                                      break L2916;
                                                    }
                                                    HEAP32[1311011] = 10;
                                                    HEAP32[1315947] = 36;
                                                    HEAP32[1315948] = 6;
                                                    label = 2692;
                                                    break L2916;
                                                  }
                                                } while (0);
                                                HEAP16[2621484] = $143 - 1 & 65535;
                                                label = 2692;
                                                break L2916;
                                              }
                                            } while (0);
                                            HEAP16[2621484] = $143 - 46 & 65535;
                                            label = 2692;
                                            break L2916;
                                          }
                                        } while (0);
                                        HEAP16[2621484] = $143 - 44 & 65535;
                                        label = 2692;
                                        break L2916;
                                      }
                                    } while (0);
                                    HEAP16[2621484] = $143 - 42 & 65535;
                                    label = 2692;
                                    break L2916;
                                  }
                                } while (0);
                                HEAP16[2621484] = $143 - 4 & 65535;
                                HEAP16[2631898] = 2;
                                label = 2692;
                                break L2916;
                              }
                            } while (0);
                            HEAP16[2699404] = $142 - 3 & 65535;
                            HEAP16[2621484] = $143 - 4 & 65535;
                            label = 2692;
                            break L2916;
                          }
                        } while (0);
                        HEAP16[2699404] = (HEAP16[2699404] | 0) - (HEAP16[2621786] | 0) & 65535;
                        HEAP16[2621484] = (HEAP16[2621484] | 0) - (HEAP16[2631898] | 0) & 65535;
                        label = 2692;
                        break L2916;
                      }
                    } while (0);
                    HEAP32[1311011] = 10;
                    HEAP32[1315947] = 36;
                    HEAP32[1315948] = 40;
                  }
                  HEAP32[1310720] = 1;
                  label = 2692;
                  break L2916;
                }
              } while (0);
              if ((label | 0) == 2157) {
                HEAP16[2699404] = 773;
                HEAP16[2621484] = 960;
                HEAP16[2622498] = 992;
                HEAPF64[tempDoublePtr >> 3] = 1.0893617021276596, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                $storemerge747 = 508436046;
              }
              HEAP32[1390240] = 4;
              HEAP32[1356938] = $storemerge747;
              HEAP32[1311011] = 10;
              HEAP32[1315947] = 36;
              HEAP32[1315948] = 40;
              label = 2692;
              break;
            } else {
              if (($142 & 65535) << 1 >>> 0 < ($143 & 65535) >>> 0) {
                HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              }
              if (($142 & 65535) > ($143 & 65535)) {
                HEAPF64[tempDoublePtr >> 3] = 2.0, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              }
              HEAP32[1356938] = 0;
              HEAP32[1311252] = 0;
              $155 = HEAP32[1390240] | 0;
              $156 = $155 << 2;
              if (($155 | 0) <= 0) {
                label = 2692;
                break;
              }
              _memcpy(5244932, 5244724, $156);
              _memcpy(5244948, 5244724 + ($155 << 2) | 0, $156);
              _memcpy(5244964, 5244724 + ($155 << 1 << 2) | 0, $156);
              label = 2692;
              break;
            }
          } while (0);
          do {
            if ((label | 0) == 2692) {
              if (HEAP8[5263468] << 24 >> 24 == 0) {
                label = 2693;
                break;
              } else {
                break;
              }
            }
          } while (0);
          if ((label | 0) == 2693) {
            $conv2422 = HEAPU16[2621484] | 0;
            $conv2423 = HEAPU16[2699404] | 0;
            _sprintf(5263468, 5576788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv2422, HEAP32[tempInt + 4 >> 2] = $conv2423, tempInt) | 0);
          }
          if ((HEAP32[1356938] | 0) == -1) {
            HEAP32[1356938] = -1802201964;
          }
          do {
            if ((HEAP32[1311252] | 0) != 0) {
              _adobe_coeff(5263724, 5263468);
              if (!((HEAP32[1315947] | 0) == 58 & (HEAP32[1311252] | 0) != 0)) {
                break;
              }
              _adobe_coeff(5579120, 5576776);
            }
          } while (0);
          $332 = HEAP32[1311013] | 0;
          if (($332 | 0) == 0 | HEAP16[2622034] << 16 >> 16 != 0) {
            break;
          }
          _fseek(HEAP32[1316053] | 0, $332 | 0, 0);
          if ((_ljpeg_start($jh, 1) | 0) == 0) {
            break;
          }
          HEAP16[2622024] = HEAP32[$jh + 8 >> 2] & 65535;
          HEAP16[2622034] = HEAP32[$jh + 4 >> 2] & 65535;
        } else {
          $145 = HEAP32[1356938] | 0;
          do {
            if (($145 | 0) == -1) {
              HEAP32[1356938] = 0;
              $148 = HEAP32[1310897] | 0;
              label = 2126;
              break;
            } else {
              $147 = HEAP32[1310897] | 0;
              if (($145 | 0) == 0) {
                $148 = $147;
                label = 2126;
                break;
              }
              HEAP32[1316049] = $147;
              break;
            }
          } while (0);
          if ((label | 0) == 2126) {
            HEAP32[1390240] = $148;
          }
          $149 = HEAP32[1311010] | 0;
          if (($149 | 0) == 1) {
            HEAP32[1315947] = 76;
            break;
          } else if (($149 | 0) == 7) {
            HEAP32[1315947] = 2;
            break;
          } else {
            break;
          }
        }
      } while (0);
      do {
        if (HEAP16[2699510] << 16 >> 16 == 0) {
          $342 = HEAP16[2699404] | 0;
          if ((HEAPU16[2622502] | 0) < ($342 & 65535)) {
            HEAP16[2622502] = $342;
          }
          $344 = HEAP16[2621484] | 0;
          if ((HEAPU16[2622498] | 0) >= ($344 & 65535)) {
            $345 = $342;
            break;
          }
          HEAP16[2622498] = $344;
          $345 = $342;
        } else {
          $339 = HEAP32[1349756] | 0;
          $shr2458 = (HEAPU16[2621484] | 0) >>> ((($339 | 0) == 0 & 1) >>> 0);
          HEAP16[2699510] = $shr2458 & 65535;
          if (($shr2458 & 1 | 0) == 0) {
            HEAP32[1356938] = 1229539657;
          }
          $add2469 = ($shr2458 & 65535) + ((HEAPU16[2699404] | 0) >>> ($339 >>> 0)) | 0;
          HEAP16[2621484] = $add2469 & 65535;
          $conv2473 = $add2469 + 65535 & 65535;
          HEAP16[2699404] = $conv2473;
          HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[1311425] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[1311426] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          $345 = $conv2473;
        }
      } while (0);
      $346 = HEAP32[1311011] | 0;
      if (($346 | 0) == 0) {
        HEAP32[1311011] = 12;
        $347 = 12;
      } else {
        $347 = $346;
      }
      if ((HEAP32[1315898] | 0) == 0) {
        HEAP32[1315898] = (1 << $347) - 1 | 0;
      }
      $349 = HEAP32[1315947] | 0;
      if (($349 | 0) == 0 | ($345 & 65535) < 22) {
        HEAP32[1316049] = 0;
      }
      if (($349 | 0) == 44) {
        $350 = HEAP32[_stderr >> 2] | 0;
        $351 = HEAP32[1316054] | 0;
        _fprintf($350 | 0, 5576740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $351, HEAP32[tempInt + 4 >> 2] = 5576728, tempInt) | 0);
        HEAP32[1316049] = 0;
        $352 = HEAP32[1315947] | 0;
      } else {
        $352 = $349;
      }
      if (($352 | 0) == 18 | ($352 | 0) == 92) {
        $353 = HEAP32[_stderr >> 2] | 0;
        $354 = HEAP32[1316054] | 0;
        _fprintf($353 | 0, 5576740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $354, HEAP32[tempInt + 4 >> 2] = 5576720, tempInt) | 0);
        HEAP32[1316049] = 0;
      }
      if (HEAP8[5561016] << 24 >> 24 == 0) {
        $cond2520 = (HEAP32[1390240] | 0) == 3 ? 5576712 : 5576704;
        HEAP8[5561016] = HEAP8[$cond2520] | 0;
        HEAP8[5561017 | 0] = HEAP8[$cond2520 + 1 | 0] | 0;
        HEAP8[5561018 | 0] = HEAP8[$cond2520 + 2 | 0] | 0;
        HEAP8[5561019 | 0] = HEAP8[$cond2520 + 3 | 0] | 0;
        HEAP8[5561020 | 0] = HEAP8[$cond2520 + 4 | 0] | 0;
      }
      if (HEAP16[2622502] << 16 >> 16 == 0) {
        HEAP16[2622502] = HEAP16[2699404] | 0;
      }
      if (HEAP16[2622498] << 16 >> 16 == 0) {
        HEAP16[2622498] = HEAP16[2621484] | 0;
      }
      $361 = HEAP32[1356938] | 0;
      if (!(($361 | 0) != 0 & (HEAP32[1390240] | 0) == 3)) {
        break;
      }
      HEAP32[1356938] = ($361 >>> 2 & 572662306 | $361 << 2 & -2004318072) & $361 << 1 | $361;
    }
  } while (0);
  if ((HEAP32[1350792] | 0) != -1) {
    STACKTOP = __stackBase__;
    return;
  }
  $364 = HEAP32[1311009] | 0;
  HEAP32[1350792] = $364;
  if (($364 | 0) != -1) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1350792] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _convert_to_rgb() {
  var $out = 0, $out_cam = 0, $inverse = 0, $pbody = 0, $0 = 0, $1 = 0.0, $6 = 0, $7 = 0, $or = 0, $call_i = 0, $11 = 0, $12 = 0, $15 = 0, $arrayidx8 = 0, $i_0105 = 0, $cond14 = 0, $18 = 0, $20 = 0, $mul18 = 0, $inc = 0, $arrayidx30_phi_trans_insert = 0, $_pre132 = 0, $_pre133 = 0, $_pre134 = 0, $phitmp160 = 0, $phitmp161 = 0, $add29 = 0, $shl = 0, $34 = 0, $pcurve_sroa_1_12_add_ptr48_cast = 0, $36 = 0, $pcurve_sroa_1_12_add_ptr48_cast_1 = 0, $38 = 0, $pcurve_sroa_1_12_add_ptr48_cast_2 = 0, $arrayidx69_phi_trans_insert = 0, $_pre135 = 0.0, $arrayidx69_1_phi_trans_insert = 0, $_pre136 = 0.0, $arrayidx69_2_phi_trans_insert = 0, $_pre137 = 0.0, $_pre138 = 0, $arrayidx69_1123_phi_trans_insert = 0, $_pre139 = 0.0, $arrayidx69_1_1_phi_trans_insert = 0, $_pre140 = 0.0, $arrayidx69_2_1_phi_trans_insert = 0, $_pre141 = 0.0, $_pre142 = 0, $arrayidx69_2126_phi_trans_insert = 0, $_pre143 = 0.0, $arrayidx69_1_2_phi_trans_insert = 0, $_pre144 = 0.0, $arrayidx69_2_2_phi_trans_insert = 0, $_pre145 = 0.0, $_pre146 = 0, $i_2102 = 0, $add82 = 0, $arrayidx67 = 0, $41 = 0.0, $arrayidx67_1 = 0, $42 = 0.0, $arrayidx67_2 = 0, $43 = 0.0, $inc89 = 0, $48 = 0, $i_398 = 0, $call97 = 0, $inc100 = 0, $51 = 0, $59 = 0, $cmp11794 = 0, $60 = 0, $arrayidx127 = 0, $61 = 0, $arrayidx129 = 0, $_pre147 = 0.0, $arrayidx129_1_phi_trans_insert = 0, $_pre148 = 0.0, $arrayidx129_2_phi_trans_insert = 0, $_pre149 = 0.0, $j_195 = 0, $inc143 = 0, $65 = 0, $67 = 0, $cond152 = 0, $69 = 0, $70 = 0, $arrayidx171 = 0, $arrayidx172 = 0, $arrayidx173 = 0, $72 = 0, $73 = 0, $img_091 = 0, $row_089 = 0, $and16_i = 0, $rem11_i = 0, $img_185 = 0, $col_084 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $c_078 = 0, $arrayidx180 = 0, $add185 = 0.0, $add193 = 0.0, $add201 = 0.0, $inc203 = 0, $phitmp158 = 0, $85 = 0, $cond234 = 0, $conv210_1 = 0, $88 = 0, $retval_0_i = 0, $94 = 0, $c_281 = 0, $arrayidx254 = 0, $inc257 = 0, $inc260 = 0, $add_ptr261 = 0, $97 = 0, $98 = 0, $99 = 0, $img_1_lcssa = 0, $inc264 = 0, $cond234_1 = 0, $conv210_2 = 0, $cond234_2 = 0, $105 = 0, $arrayidx129_1108 = 0, $_pre150 = 0.0, $arrayidx129_1_1_phi_trans_insert = 0, $_pre151 = 0.0, $arrayidx129_2_1_phi_trans_insert = 0, $_pre152 = 0.0, $j_195_1 = 0, $inc143_1 = 0, $109 = 0, $arrayidx129_2114 = 0, $_pre153 = 0.0, $arrayidx129_1_2_phi_trans_insert = 0, $_pre154 = 0.0, $arrayidx129_2_2_phi_trans_insert = 0, $_pre155 = 0.0, $j_195_2 = 0, $inc143_2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  $out = __stackBase__ | 0;
  $out_cam = __stackBase__ + 12 | 0;
  $inverse = __stackBase__ + 60 | 0;
  $pbody = __stackBase__ + 132 | 0;
  $0 = $pbody;
  _memcpy($0, 5560724, 124);
  $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1349743] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398976 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _gamma_curve($1, (HEAP32[tempDoublePtr >> 2] = HEAP32[1349745] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398984 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), 0, 0);
  _memcpy($out_cam, 5244932, 48);
  $6 = HEAP32[1315757] | 0;
  if ((HEAP32[1390240] | 0) == 1 | (HEAP32[1357023] | 0) != 0 | ($6 | 0) < 1) {
    $7 = 1;
  } else {
    $7 = ($6 | 0) > 5;
  }
  $or = HEAP32[1311252] | $7 & 1;
  HEAP32[1311252] = $or;
  L3767 : do {
    if (($or | 0) == 0) {
      $call_i = _malloc(1024) | 0;
      if (($call_i | 0) == 0) {
        HEAP32[1315760] = 0;
        $11 = HEAP32[_stderr >> 2] | 0;
        $12 = HEAP32[1316054] | 0;
        _fprintf($11 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $12, HEAP32[tempInt + 4 >> 2] = 5576580, tempInt) | 0);
        _longjmp(5428048, 1);
      }
      if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
        _memset($call_i | 0, 0, 1024);
      }
      HEAP32[1315760] = $call_i;
      _memcpy($call_i, 5560628, 80);
      if ((HEAP32[1315757] | 0) == 5) {
        $15 = HEAP32[1315760] | 0;
        HEAP32[$15 + 16 >> 2] = HEAP32[$15 + 20 >> 2] | 0;
      }
      $arrayidx8 = $pbody | 0;
      HEAP32[HEAP32[1315760] >> 2] = 252;
      $i_0105 = 0;
      while (1) {
        if (($i_0105 | 0) == 0) {
          $cond14 = 1952807028;
        } else {
          $cond14 = ($i_0105 | 0) > 1 ? 1482250784 : 1684370275;
        }
        $18 = HEAP32[1315760] | 0;
        HEAP32[$18 + ((HEAP32[$18 >> 2] | 0) >>> 2 << 2) >> 2] = $cond14;
        $20 = HEAP32[1315760] | 0;
        $mul18 = $i_0105 * 3 & -1;
        HEAP32[$pbody + ($mul18 + 2 << 2) >> 2] = HEAP32[$20 >> 2] | 0;
        HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + ((HEAP32[$pbody + ($mul18 + 3 << 2) >> 2] | 0) + 3 & -4) | 0;
        $inc = $i_0105 + 1 | 0;
        if ($inc >>> 0 < (HEAP32[$arrayidx8 >> 2] | 0) >>> 0) {
          $i_0105 = $inc;
        } else {
          break;
        }
      }
      $arrayidx30_phi_trans_insert = $pbody + 20 | 0;
      $_pre132 = HEAP32[$pbody + 56 >> 2] | 0;
      $_pre133 = HEAP32[$pbody + 68 >> 2] | 0;
      $_pre134 = HEAP32[$pbody + 80 >> 2] | 0;
      $phitmp160 = ((HEAP32[$arrayidx30_phi_trans_insert >> 2] | 0) >>> 2) + 2 | 0;
      $phitmp161 = (HEAP32[$pbody + 32 >> 2] | 0) + 8 | 0;
      _memcpy((HEAP32[1315760] | 0) + 128 | 0, $0, 124);
      $add29 = (_strlen(HEAP32[5560868 + ((HEAP32[1315757] | 0) - 1 << 2) >> 2] | 0) | 0) + 1 | 0;
      HEAP32[(HEAP32[1315760] | 0) + ($phitmp160 << 2) >> 2] = $add29;
      _memcpy((HEAP32[1315760] | 0) + $phitmp161 | 0, 5560544, 12);
      $shl = (~~(256.0 / (HEAP32[tempDoublePtr >> 2] = HEAP32[1349753] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5399016 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]) + .5) & 65535) << 16;
      $34 = HEAP32[1315760] | 0;
      _memcpy($34 + $_pre132 | 0, 5560708, 12);
      $pcurve_sroa_1_12_add_ptr48_cast = $34 + ($_pre132 + 12 | 0) | 0;
      tempBigInt = $shl;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 3 | 0] = tempBigInt & 255;
      $36 = HEAP32[1315760] | 0;
      _memcpy($36 + $_pre133 | 0, 5560708, 12);
      $pcurve_sroa_1_12_add_ptr48_cast_1 = $36 + ($_pre133 + 12 | 0) | 0;
      tempBigInt = $shl;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 3 | 0] = tempBigInt & 255;
      $38 = HEAP32[1315760] | 0;
      _memcpy($38 + $_pre134 | 0, 5560708, 12);
      $pcurve_sroa_1_12_add_ptr48_cast_2 = $38 + ($_pre134 + 12 | 0) | 0;
      tempBigInt = $shl;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 3 | 0] = tempBigInt & 255;
      _pseudoinverse(HEAP32[5560848 + ((HEAP32[1315757] | 0) - 1 << 2) >> 2] | 0, $inverse | 0, 3);
      $arrayidx69_phi_trans_insert = $inverse | 0;
      $_pre135 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_1_phi_trans_insert = $inverse + 8 | 0;
      $_pre136 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_2_phi_trans_insert = $inverse + 16 | 0;
      $_pre137 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $_pre138 = HEAP32[$pbody + 92 >> 2] | 0;
      $arrayidx69_1123_phi_trans_insert = $inverse + 24 | 0;
      $_pre139 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1123_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1123_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_1_1_phi_trans_insert = $inverse + 32 | 0;
      $_pre140 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_2_1_phi_trans_insert = $inverse + 40 | 0;
      $_pre141 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $_pre142 = HEAP32[$pbody + 104 >> 2] | 0;
      $arrayidx69_2126_phi_trans_insert = $inverse + 48 | 0;
      $_pre143 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2126_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2126_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_1_2_phi_trans_insert = $inverse + 56 | 0;
      $_pre144 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx69_2_2_phi_trans_insert = $inverse + 64 | 0;
      $_pre145 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $_pre146 = HEAP32[$pbody + 116 >> 2] | 0;
      $i_2102 = 0;
      while (1) {
        $add82 = $i_2102 + 2 | 0;
        $arrayidx67 = 5560328 + ($i_2102 * 24 & -1) | 0;
        $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx67_1 = 5560336 + ($i_2102 * 24 & -1) | 0;
        $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67_1 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67_1 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        $arrayidx67_2 = 5560344 + ($i_2102 * 24 & -1) | 0;
        $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67_2 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67_2 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
        HEAP32[(HEAP32[1315760] | 0) + ($add82 + ($_pre138 >>> 2) << 2) >> 2] = ~~(($41 * $_pre135 + 0.0 + $42 * $_pre136 + $43 * $_pre137) * 65536.0 + .5);
        HEAP32[(HEAP32[1315760] | 0) + ($add82 + ($_pre142 >>> 2) << 2) >> 2] = ~~(($41 * $_pre139 + 0.0 + $42 * $_pre140 + $43 * $_pre141) * 65536.0 + .5);
        HEAP32[(HEAP32[1315760] | 0) + ($add82 + ($_pre146 >>> 2) << 2) >> 2] = ~~(($41 * $_pre143 + 0.0 + $42 * $_pre144 + $43 * $_pre145) * 65536.0 + .5);
        $inc89 = $i_2102 + 1 | 0;
        if (($inc89 | 0) == 3) {
          break;
        } else {
          $i_2102 = $inc89;
        }
      }
      $i_398 = 0;
      $48 = HEAP32[1315760] | 0;
      while (1) {
        $call97 = _htonl(HEAP32[$48 + ($i_398 << 2) >> 2] | 0) | 0;
        HEAP32[(HEAP32[1315760] | 0) + ($i_398 << 2) >> 2] = $call97;
        $inc100 = $i_398 + 1 | 0;
        $51 = HEAP32[1315760] | 0;
        if (($inc100 | 0) == 256) {
          break;
        } else {
          $i_398 = $inc100;
          $48 = $51;
        }
      }
      _memcpy($51 + ((HEAP32[$pbody + 8 >> 2] | 0) + 8 | 0) | 0, 5576556, 24);
      _strcpy((HEAP32[1315760] | 0) + ((HEAP32[$arrayidx30_phi_trans_insert >> 2] | 0) + 12 | 0) | 0, HEAP32[5560868 + ((HEAP32[1315757] | 0) - 1 << 2) >> 2] | 0);
      $59 = HEAP32[1390240] | 0;
      $cmp11794 = ($59 | 0) > 0;
      $60 = HEAP32[1315757] | 0;
      $arrayidx127 = 5560848 + ($60 - 1 << 2) | 0;
      if (!$cmp11794) {
        $65 = $60;
        break;
      }
      $61 = HEAP32[$arrayidx127 >> 2] | 0;
      $arrayidx129 = $61 | 0;
      $_pre147 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_1_phi_trans_insert = $61 + 8 | 0;
      $_pre148 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_2_phi_trans_insert = $61 + 16 | 0;
      $_pre149 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $j_195 = 0;
      while (1) {
        HEAPF32[$out_cam + ($j_195 << 2) >> 2] = $_pre147 * +HEAPF32[5244932 + ($j_195 << 2) >> 2] + 0.0 + $_pre148 * +HEAPF32[5244948 + ($j_195 << 2) >> 2] + $_pre149 * +HEAPF32[5244964 + ($j_195 << 2) >> 2];
        $inc143 = $j_195 + 1 | 0;
        if (($inc143 | 0) == ($59 | 0)) {
          break;
        } else {
          $j_195 = $inc143;
        }
      }
      if (!$cmp11794) {
        $65 = $60;
        break;
      }
      $105 = HEAP32[$arrayidx127 >> 2] | 0;
      $arrayidx129_1108 = $105 + 24 | 0;
      $_pre150 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1108 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1108 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_1_1_phi_trans_insert = $105 + 32 | 0;
      $_pre151 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_2_1_phi_trans_insert = $105 + 40 | 0;
      $_pre152 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2_1_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2_1_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $j_195_1 = 0;
      while (1) {
        HEAPF32[$out_cam + 16 + ($j_195_1 << 2) >> 2] = $_pre150 * +HEAPF32[5244932 + ($j_195_1 << 2) >> 2] + 0.0 + $_pre151 * +HEAPF32[5244948 + ($j_195_1 << 2) >> 2] + $_pre152 * +HEAPF32[5244964 + ($j_195_1 << 2) >> 2];
        $inc143_1 = $j_195_1 + 1 | 0;
        if (($inc143_1 | 0) == ($59 | 0)) {
          break;
        } else {
          $j_195_1 = $inc143_1;
        }
      }
      if (!$cmp11794) {
        $65 = $60;
        break;
      }
      $109 = HEAP32[$arrayidx127 >> 2] | 0;
      $arrayidx129_2114 = $109 + 48 | 0;
      $_pre153 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2114 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2114 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_1_2_phi_trans_insert = $109 + 56 | 0;
      $_pre154 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $arrayidx129_2_2_phi_trans_insert = $109 + 64 | 0;
      $_pre155 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2_2_phi_trans_insert >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2_2_phi_trans_insert + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $j_195_2 = 0;
      while (1) {
        HEAPF32[$out_cam + 32 + ($j_195_2 << 2) >> 2] = $_pre153 * +HEAPF32[5244932 + ($j_195_2 << 2) >> 2] + 0.0 + $_pre154 * +HEAPF32[5244948 + ($j_195_2 << 2) >> 2] + $_pre155 * +HEAPF32[5244964 + ($j_195_2 << 2) >> 2];
        $inc143_2 = $j_195_2 + 1 | 0;
        if (($inc143_2 | 0) == ($59 | 0)) {
          $65 = $60;
          break L3767;
        } else {
          $j_195_2 = $inc143_2;
        }
      }
    } else {
      $65 = $6;
    }
  } while (0);
  if ((HEAP32[1310884] | 0) != 0) {
    $67 = HEAP32[_stderr >> 2] | 0;
    $cond152 = (HEAP32[1311252] | 0) != 0 ? 5576532 : 5576500;
    $69 = HEAP32[5560868 + ($65 - 1 << 2) >> 2] | 0;
    _fprintf($67 | 0, $cond152 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $69, tempInt) | 0);
  }
  _memset(5267732, 0, 131072);
  $70 = HEAP16[2699404] | 0;
  L3805 : do {
    if ($70 << 16 >> 16 != 0) {
      $arrayidx171 = $out + 8 | 0;
      $arrayidx172 = $out + 4 | 0;
      $arrayidx173 = $out | 0;
      $row_089 = 0;
      $img_091 = HEAP32[1316051] | 0;
      $73 = $70;
      $72 = HEAP16[2621484] | 0;
      while (1) {
        if ($72 << 16 >> 16 == 0) {
          $img_1_lcssa = $img_091;
          $99 = $73;
          $98 = 0;
        } else {
          $and16_i = $row_089 << 1 & 14;
          $rem11_i = ($row_089 + 6 | 0) % 6;
          $col_084 = 0;
          $img_185 = $img_091;
          while (1) {
            do {
              if ((HEAP32[1311252] | 0) == 0) {
                HEAPF32[$arrayidx171 >> 2] = 0.0;
                HEAPF32[$arrayidx172 >> 2] = 0.0;
                HEAPF32[$arrayidx173 >> 2] = 0.0;
                $75 = HEAP32[1390240] | 0;
                do {
                  if (($75 | 0) > 0) {
                    $c_078 = 0;
                    $78 = 0.0;
                    $77 = 0.0;
                    $76 = 0.0;
                    while (1) {
                      $arrayidx180 = $img_185 + ($c_078 << 1) | 0;
                      $add185 = $78 + +HEAPF32[$out_cam + ($c_078 << 2) >> 2] * +(HEAPU16[$arrayidx180 >> 1] | 0 | 0);
                      HEAPF32[$arrayidx173 >> 2] = $add185;
                      $add193 = $77 + +HEAPF32[$out_cam + 16 + ($c_078 << 2) >> 2] * +(HEAPU16[$arrayidx180 >> 1] | 0 | 0);
                      HEAPF32[$arrayidx172 >> 2] = $add193;
                      $add201 = $76 + +HEAPF32[$out_cam + 32 + ($c_078 << 2) >> 2] * +(HEAPU16[$arrayidx180 >> 1] | 0 | 0);
                      HEAPF32[$arrayidx171 >> 2] = $add201;
                      $inc203 = $c_078 + 1 | 0;
                      if (($inc203 | 0) < ($75 | 0)) {
                        $c_078 = $inc203;
                        $78 = $add185;
                        $77 = $add193;
                        $76 = $add201;
                      } else {
                        break;
                      }
                    }
                    $phitmp158 = ~~$add185;
                    if (($phitmp158 | 0) < 0) {
                      $cond234 = 0;
                      break;
                    } else {
                      $85 = $phitmp158;
                      label = 2766;
                      break;
                    }
                  } else {
                    $85 = 0;
                    label = 2766;
                  }
                } while (0);
                if ((label | 0) == 2766) {
                  label = 0;
                  $cond234 = ($85 | 0) < 65535 ? $85 & 65535 : -1;
                }
                HEAP16[$img_185 >> 1] = $cond234;
                $conv210_1 = ~~+HEAPF32[$arrayidx172 >> 2];
                if (($conv210_1 | 0) < 0) {
                  $cond234_1 = 0;
                } else {
                  $cond234_1 = ($conv210_1 | 0) < 65535 ? $conv210_1 & 65535 : -1;
                }
                HEAP16[$img_185 + 2 >> 1] = $cond234_1;
                $conv210_2 = ~~+HEAPF32[$arrayidx171 >> 2];
                if (($conv210_2 | 0) < 0) {
                  $cond234_2 = 0;
                } else {
                  $cond234_2 = ($conv210_2 | 0) < 65535 ? $conv210_2 & 65535 : -1;
                }
                HEAP16[$img_185 + 4 >> 1] = $cond234_2;
              } else {
                if ((HEAP32[1357023] | 0) == 0) {
                  break;
                }
                $88 = HEAP32[1356938] | 0;
                if (($88 | 0) == 2) {
                  $retval_0_i = HEAP8[($col_084 + 6 | 0) % 6 + (5427756 + ($rem11_i * 6 & -1)) | 0] << 24 >> 24;
                } else if (($88 | 0) == 1) {
                  $retval_0_i = HEAP8[((HEAPU16[2631898] | 0) + $col_084 & 15) + (5427792 + (((HEAPU16[2621786] | 0) + $row_089 & 15) << 4)) | 0] << 24 >> 24;
                } else {
                  $retval_0_i = $88 >>> (($col_084 & 1 | $and16_i) << 1 >>> 0) & 3;
                }
                HEAP16[$img_185 >> 1] = HEAP16[$img_185 + ($retval_0_i << 1) >> 1] | 0;
              }
            } while (0);
            $94 = HEAP32[1390240] | 0;
            L3836 : do {
              if (($94 | 0) > 0) {
                $c_281 = 0;
                while (1) {
                  $arrayidx254 = 5267732 + ($c_281 << 15) + ((HEAPU16[$img_185 + ($c_281 << 1) >> 1] | 0) >>> 3 << 2) | 0;
                  HEAP32[$arrayidx254 >> 2] = (HEAP32[$arrayidx254 >> 2] | 0) + 1 | 0;
                  $inc257 = $c_281 + 1 | 0;
                  if (($inc257 | 0) < ($94 | 0)) {
                    $c_281 = $inc257;
                  } else {
                    break L3836;
                  }
                }
              }
            } while (0);
            $inc260 = $col_084 + 1 | 0;
            $add_ptr261 = $img_185 + 8 | 0;
            $97 = HEAP16[2621484] | 0;
            if (($inc260 | 0) < ($97 & 65535 | 0)) {
              $col_084 = $inc260;
              $img_185 = $add_ptr261;
            } else {
              break;
            }
          }
          $img_1_lcssa = $add_ptr261;
          $99 = HEAP16[2699404] | 0;
          $98 = $97;
        }
        $inc264 = $row_089 + 1 | 0;
        if (($inc264 | 0) < ($99 & 65535 | 0)) {
          $row_089 = $inc264;
          $img_091 = $img_1_lcssa;
          $73 = $99;
          $72 = $98;
        } else {
          break L3805;
        }
      }
    }
  } while (0);
  if ((HEAP32[1390240] | 0) == 4 & (HEAP32[1315757] | 0) != 0) {
    HEAP32[1390240] = 3;
  }
  if (!((HEAP32[1357023] | 0) != 0 & (HEAP32[1356938] | 0) != 0)) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[1390240] = 1;
  STACKTOP = __stackBase__;
  return;
}
function _fuji_rotate() {
  var $0 = 0, $2 = 0, $4 = 0, $conv4 = 0, $shr = 0, $conv8 = 0, $conv10 = 0, $conv16 = 0, $conv17 = 0, $conv18 = 0, $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $9 = 0, $10 = 0, $11 = 0, $cmp2443 = 0, $row_046 = 0, $mul92 = 0, $col_044 = 0, $conv33 = 0.0, $conv34 = 0, $conv38 = 0.0, $conv39 = 0, $14 = 0, $conv44 = 0, $sub51 = 0.0, $sub53 = 0.0, $15 = 0, $add_ptr_sum = 0, $sub64 = 0.0, $add_ptr56_sum = 0, $sub72 = 0.0, $add93 = 0, $17 = 0, $i_042 = 0, $idxprom = 0, $inc = 0, $inc97 = 0, $inc100 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = HEAP16[2699510] | 0;
  if ($0 << 16 >> 16 == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[1310884] | 0) == 0) {
    $4 = $0;
  } else {
    $2 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5576468, 29, 1, $2 | 0);
    $4 = HEAP16[2699510] | 0;
  }
  $conv4 = HEAPU16[2622460] | 0;
  $shr = (($4 & 65535) - 1 | 0) + $conv4 >> $conv4;
  HEAP16[2699510] = $shr & 65535;
  $conv8 = $shr & 65535;
  $conv10 = ~~(+($conv8 | 0) / .7071067811865476);
  $conv16 = ~~(+((HEAPU16[2699404] | 0) - $conv8 | 0) / .7071067811865476);
  $conv17 = $conv10 & 65535;
  $conv18 = $conv16 & 65535;
  $mul = Math_imul($conv18, $conv17);
  do {
    if (($mul | 0) == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = $mul << 3;
      if ($mul >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 8 ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $9 = HEAP32[_stderr >> 2] | 0;
    $10 = HEAP32[1316054] | 0;
    _fprintf($9 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = 5576428, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $11 = $call_i;
  L3867 : do {
    if ($conv16 << 16 >> 16 != 0) {
      $cmp2443 = $conv10 << 16 >> 16 == 0;
      $row_046 = 0;
      while (1) {
        L3871 : do {
          if (!$cmp2443) {
            $mul92 = Math_imul($row_046, $conv17);
            $col_044 = 0;
            while (1) {
              $conv33 = +($row_046 - $col_044 | 0) * .7071067811865476 + +(HEAPU16[2699510] | 0 | 0);
              $conv34 = ~~$conv33;
              $conv38 = +($col_044 + $row_046 | 0) * .7071067811865476;
              $conv39 = ~~$conv38;
              L3875 : do {
                if ($conv34 >>> 0 <= ((HEAPU16[2699404] | 0) - 2 | 0) >>> 0) {
                  $14 = HEAP16[2621484] | 0;
                  $conv44 = $14 & 65535;
                  if ($conv39 >>> 0 > ($conv44 - 2 | 0) >>> 0) {
                    break;
                  }
                  $sub51 = $conv33 - +($conv34 >>> 0 >>> 0);
                  $sub53 = $conv38 - +($conv39 >>> 0 >>> 0);
                  $15 = HEAP32[1316051] | 0;
                  $add_ptr_sum = Math_imul($conv44, $conv34) + $conv39 | 0;
                  if ((HEAP32[1390240] | 0) <= 0) {
                    break;
                  }
                  $sub64 = 1.0 - $sub53;
                  $add_ptr56_sum = $add_ptr_sum + 1 | 0;
                  $sub72 = 1.0 - $sub51;
                  $add93 = $col_044 + $mul92 | 0;
                  $i_042 = 0;
                  $17 = $14;
                  while (1) {
                    $idxprom = $17 & 65535;
                    HEAP16[$11 + ($add93 << 3) + ($i_042 << 1) >> 1] = ~~($sub72 * ($sub64 * +(HEAPU16[$15 + ($add_ptr_sum << 3) + ($i_042 << 1) >> 1] | 0 | 0) + $sub53 * +(HEAPU16[$15 + ($add_ptr56_sum << 3) + ($i_042 << 1) >> 1] | 0 | 0)) + $sub51 * ($sub64 * +(HEAPU16[$15 + ($idxprom + $add_ptr_sum << 3) + ($i_042 << 1) >> 1] | 0 | 0) + $sub53 * +(HEAPU16[$15 + ($add_ptr56_sum + $idxprom << 3) + ($i_042 << 1) >> 1] | 0 | 0)));
                    $inc = $i_042 + 1 | 0;
                    if (($inc | 0) >= (HEAP32[1390240] | 0)) {
                      break L3875;
                    }
                    $i_042 = $inc;
                    $17 = HEAP16[2621484] | 0;
                  }
                }
              } while (0);
              $inc97 = $col_044 + 1 | 0;
              if (($inc97 | 0) < ($conv17 | 0)) {
                $col_044 = $inc97;
              } else {
                break L3871;
              }
            }
          }
        } while (0);
        $inc100 = $row_046 + 1 | 0;
        if (($inc100 | 0) < ($conv18 | 0)) {
          $row_046 = $inc100;
        } else {
          break L3867;
        }
      }
    }
  } while (0);
  _free(HEAP32[1316051] | 0);
  HEAP16[2621484] = $conv10;
  HEAP16[2699404] = $conv16;
  HEAP32[1316051] = $11;
  HEAP16[2699510] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _stretch() {
  var $0 = 0.0, $2 = 0, $4 = 0.0, $conv6 = 0, $conv8 = 0, $mul = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $9 = 0, $10 = 0, $11 = 0, $_pre98 = 0, $12 = 0, $13 = 0, $rc_087 = 0.0, $row_085 = 0, $conv13 = 0, $sub = 0.0, $conv15 = 0, $mul16 = 0, $14 = 0, $arraydecay = 0, $pix1_1_ph = 0, $sub37 = 0.0, $16 = 0, $17 = 0, $col_083 = 0, $pix1_182 = 0, $pix0_081 = 0, $18 = 0, $c_078 = 0, $conv45 = 0, $inc = 0, $21 = 0, $_pre105 = 0, $22 = 0, $23 = 0, $inc52 = 0, $24 = 0, $25 = 0, $inc57 = 0, $conv64 = 0, $conv66 = 0, $mul67 = 0, $mul_i54 = 0, $req_0_i62 = 0, $call_i63 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $rc_197 = 0.0, $col_196 = 0, $conv74 = 0, $sub76 = 0.0, $35 = 0, $arraydecay78 = 0, $pix1_3_ph = 0, $36 = 0, $sub98 = 0.0, $37 = 0, $38 = 0, $39 = 0, $row_194 = 0, $pix1_393 = 0, $pix0_192 = 0, $add109 = 0, $c_189 = 0, $inc113 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $inc116 = 0, $mul118 = 0, $46 = 0, $inc125 = 0, $img_0 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
  if ($0 == 1.0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[1310884] | 0) == 0) {
    $4 = $0;
  } else {
    $2 = HEAP32[_stderr >> 2] | 0;
    _fwrite(5576400, 24, 1, $2 | 0);
    $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
  }
  if ($4 < 1.0) {
    $conv6 = ~~(+(HEAPU16[2699404] | 0 | 0) / $4 + .5);
    $conv8 = $conv6 & 65535;
    $mul = Math_imul($conv8, HEAPU16[2621484] | 0);
    do {
      if (($mul | 0) == 0) {
        $req_0_i = 0;
      } else {
        $mul_i = $mul << 3;
        if ($mul >>> 0 <= 65535) {
          $req_0_i = $mul_i;
          break;
        }
        $req_0_i = (($mul_i >>> 0) / ($mul >>> 0) >>> 0 | 0) == 8 ? $mul_i : -1;
      }
    } while (0);
    $call_i = _malloc($req_0_i) | 0;
    if (($call_i | 0) == 0) {
      $9 = HEAP32[_stderr >> 2] | 0;
      $10 = HEAP32[1316054] | 0;
      _fprintf($9 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = 5576388, tempInt) | 0);
      _longjmp(5428048, 1);
    }
    if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
      _memset($call_i | 0, 0, $req_0_i | 0);
    }
    $11 = $call_i;
    L3905 : do {
      if ($conv6 << 16 >> 16 != 0) {
        $_pre98 = HEAP16[2621484] | 0;
        $row_085 = 0;
        $rc_087 = 0.0;
        $13 = $_pre98;
        $12 = $_pre98;
        while (1) {
          $conv13 = ~~$rc_087;
          $sub = $rc_087 - +($conv13 | 0);
          $conv15 = $13 & 65535;
          $mul16 = Math_imul($conv15, $conv13);
          $14 = HEAP32[1316051] | 0;
          $arraydecay = $14 + ($mul16 << 3) | 0;
          if (($conv13 + 1 | 0) < (HEAPU16[2699404] | 0 | 0)) {
            $pix1_1_ph = $14 + ($mul16 << 3) + ($conv15 << 2 << 1) | 0;
          } else {
            $pix1_1_ph = $arraydecay;
          }
          L3912 : do {
            if ($13 << 16 >> 16 == 0) {
              $25 = 0;
              $24 = $12;
            } else {
              $sub37 = 1.0 - $sub;
              $pix0_081 = $arraydecay;
              $pix1_182 = $pix1_1_ph;
              $col_083 = 0;
              $17 = HEAP32[1390240] | 0;
              $16 = $12;
              while (1) {
                L3916 : do {
                  if (($17 | 0) > 0) {
                    $c_078 = 0;
                    $18 = $16;
                    while (1) {
                      $conv45 = ~~($sub37 * +(HEAPU16[$pix0_081 + ($c_078 << 1) >> 1] | 0 | 0) + $sub * +(HEAPU16[$pix1_182 + ($c_078 << 1) >> 1] | 0 | 0) + .5);
                      HEAP16[$11 + (Math_imul($18 & 65535, $row_085) + $col_083 << 3) + ($c_078 << 1) >> 1] = $conv45;
                      $inc = $c_078 + 1 | 0;
                      $21 = HEAP32[1390240] | 0;
                      $_pre105 = HEAP16[2621484] | 0;
                      if (($inc | 0) < ($21 | 0)) {
                        $c_078 = $inc;
                        $18 = $_pre105;
                      } else {
                        $23 = $21;
                        $22 = $_pre105;
                        break L3916;
                      }
                    }
                  } else {
                    $23 = $17;
                    $22 = $16;
                  }
                } while (0);
                $inc52 = $col_083 + 1 | 0;
                if (($inc52 | 0) < ($22 & 65535 | 0)) {
                  $pix0_081 = $pix0_081 + 8 | 0;
                  $pix1_182 = $pix1_182 + 8 | 0;
                  $col_083 = $inc52;
                  $17 = $23;
                  $16 = $22;
                } else {
                  $25 = $22;
                  $24 = $22;
                  break L3912;
                }
              }
            }
          } while (0);
          $inc57 = $row_085 + 1 | 0;
          if (($inc57 | 0) >= ($conv8 | 0)) {
            break L3905;
          }
          $row_085 = $inc57;
          $rc_087 = $rc_087 + (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $13 = $25;
          $12 = $24;
        }
      }
    } while (0);
    HEAP16[2699404] = $conv6;
    $img_0 = $11;
  } else {
    $conv64 = ~~($4 * +(HEAPU16[2621484] | 0 | 0) + .5);
    $conv66 = $conv64 & 65535;
    $mul67 = Math_imul($conv66, HEAPU16[2699404] | 0);
    do {
      if (($mul67 | 0) == 0) {
        $req_0_i62 = 0;
      } else {
        $mul_i54 = $mul67 << 3;
        if ($mul67 >>> 0 <= 65535) {
          $req_0_i62 = $mul_i54;
          break;
        }
        $req_0_i62 = (($mul_i54 >>> 0) / ($mul67 >>> 0) >>> 0 | 0) == 8 ? $mul_i54 : -1;
      }
    } while (0);
    $call_i63 = _malloc($req_0_i62) | 0;
    if (($call_i63 | 0) == 0) {
      $31 = HEAP32[_stderr >> 2] | 0;
      $32 = HEAP32[1316054] | 0;
      _fprintf($31 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $32, HEAP32[tempInt + 4 >> 2] = 5576388, tempInt) | 0);
      _longjmp(5428048, 1);
    }
    if ((HEAP32[$call_i63 - 4 >> 2] & 3 | 0) != 0) {
      _memset($call_i63 | 0, 0, $req_0_i62 | 0);
    }
    $33 = $call_i63;
    L3934 : do {
      if ($conv64 << 16 >> 16 != 0) {
        $col_196 = 0;
        $rc_197 = 0.0;
        $34 = HEAP16[2621484] | 0;
        while (1) {
          $conv74 = ~~$rc_197;
          $sub76 = $rc_197 - +($conv74 | 0);
          $35 = HEAP32[1316051] | 0;
          $arraydecay78 = $35 + ($conv74 << 3) | 0;
          if (($conv74 + 1 | 0) < ($34 & 65535 | 0)) {
            $pix1_3_ph = $35 + ($conv74 << 3) + 8 | 0;
          } else {
            $pix1_3_ph = $arraydecay78;
          }
          $36 = HEAP16[2699404] | 0;
          L3941 : do {
            if ($36 << 16 >> 16 == 0) {
              $46 = $34;
            } else {
              $sub98 = 1.0 - $sub76;
              $pix0_192 = $arraydecay78;
              $pix1_393 = $pix1_3_ph;
              $row_194 = 0;
              $39 = HEAP32[1390240] | 0;
              $38 = $34;
              $37 = $36;
              while (1) {
                if (($39 | 0) > 0) {
                  $add109 = Math_imul($row_194, $conv66) + $col_196 | 0;
                  $c_189 = 0;
                  while (1) {
                    HEAP16[$33 + ($add109 << 3) + ($c_189 << 1) >> 1] = ~~($sub98 * +(HEAPU16[$pix0_192 + ($c_189 << 1) >> 1] | 0 | 0) + $sub76 * +(HEAPU16[$pix1_393 + ($c_189 << 1) >> 1] | 0 | 0) + .5);
                    $inc113 = $c_189 + 1 | 0;
                    $42 = HEAP32[1390240] | 0;
                    if (($inc113 | 0) < ($42 | 0)) {
                      $c_189 = $inc113;
                    } else {
                      break;
                    }
                  }
                  $45 = $42;
                  $44 = HEAP16[2621484] | 0;
                  $43 = HEAP16[2699404] | 0;
                } else {
                  $45 = $39;
                  $44 = $38;
                  $43 = $37;
                }
                $inc116 = $row_194 + 1 | 0;
                $mul118 = ($44 & 65535) << 2;
                if (($inc116 | 0) < ($43 & 65535 | 0)) {
                  $pix0_192 = $pix0_192 + ($mul118 << 1) | 0;
                  $pix1_393 = $pix1_393 + ($mul118 << 1) | 0;
                  $row_194 = $inc116;
                  $39 = $45;
                  $38 = $44;
                  $37 = $43;
                } else {
                  $46 = $44;
                  break L3941;
                }
              }
            }
          } while (0);
          $inc125 = $col_196 + 1 | 0;
          if (($inc125 | 0) >= ($conv66 | 0)) {
            break L3934;
          }
          $col_196 = $inc125;
          $rc_197 = $rc_197 + 1.0 / (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
          $34 = $46;
        }
      }
    } while (0);
    HEAP16[2621484] = $conv64;
    $img_0 = $33;
  }
  _free(HEAP32[1316051] | 0);
  HEAP32[1316051] = $img_0;
  STACKTOP = __stackBase__;
  return;
}
function _tiff_head($th, $full) {
  $th = $th | 0;
  $full = $full | 0;
  var $tobool = 0, $ntag = 0, $1 = 0, $2 = 0, $conv_i = 0, $conv2 = 0, $4 = 0, $conv_i364 = 0, $conv4 = 0, $6 = 0, $conv_i429 = 0, $7 = 0, $8 = 0, $9 = 0, $conv_i413 = 0, $val29_i419 = 0, $16 = 0, $conv_i403 = 0, $val29_i407 = 0, $cmp17 = 0, $18 = 0, $conv_i392 = 0, $val29_i396 = 0, $19 = 0, $conv_i385 = 0, $20 = 0, $conv_i378 = 0, $21 = 0, $conv_i371 = 0, $22 = 0, $psize_0 = 0, $24 = 0, $conv_i357 = 0, $25 = 0, $26 = 0, $conv_i344 = 0, $val29_i348 = 0, $conv43 = 0, $28 = 0, $conv_i337 = 0, $mul = 0, $mul47 = 0, $div = 0, $33 = 0, $conv_i330 = 0, $sub52 = 0, $36 = 0, $conv_i317 = 0, $val29_i321 = 0, $psize_1 = 0, $arrayidx55 = 0, $37 = 0, $conv_i310 = 0, $arrayidx61 = 0, $38 = 0, $conv_i303 = 0, $39 = 0, $conv_i293 = 0, $val29_i297 = 0, $40 = 0, $conv_i283 = 0, $val29_i287 = 0, $41 = 0, $conv_i276 = 0, $42 = 0, $conv_i269 = 0, $43 = 0, $conv_i262 = 0, $nexif = 0, $44 = 0, $conv_i255 = 0, $45 = 0, $conv_i248 = 0, $arrayidx89 = 0, $46 = 0, $47 = 0, $conv_i241 = 0, $arrayidx95 = 0, $48 = 0, $conv_i234 = 0, $conv100 = 0, $50 = 0, $conv_i228 = 0, $val29_i = 0, $arrayidx103 = 0, $51 = 0, $conv_i221 = 0, $ngps = 0, $53 = 0, $conv_i214 = 0, $54 = 0, $55 = 0, $conv_i202 = 0, $val12_i206 = 0, $c13_i207 = 0, $56 = 0, $57 = 0, $conv_i183 = 0, $val12_i187 = 0, $c13_i188 = 0, $58 = 0, $conv_i176 = 0, $59 = 0, $60 = 0, $conv_i157 = 0, $val12_i161 = 0, $c13_i162 = 0, $61 = 0, $conv_i150 = 0, $62 = 0, $63 = 0, $conv_i144 = 0, $val12_i = 0, $c13_i = 0, $64 = 0, $conv_i137 = 0, $65 = 0, $conv_i130 = 0, $66 = 0, $conv_i123 = 0, $67 = 0, $conv_i116 = 0, $arrayidx159 = 0, $arrayidx161 = 0, $arrayidx168_1 = 0, $arrayidx168_3 = 0, $arrayidx168_5 = 0, $69 = 0.0, $mul175 = 0.0, $conv176 = 0, $70 = 0.0, $mul180 = 0.0, $conv181 = 0, $71 = 0.0, $mul185 = 0.0, $conv186 = 0, $arraydecay = 0, $call188 = 0, $arraydecay190 = 0, $call191 = 0, $arraydecay193 = 0, $call194 = 0, $arraydecay196 = 0, $call198 = 0, $arraydecay200 = 0, $tm_year = 0, $72 = 0, $add201 = 0, $tm_mon = 0, $73 = 0, $add202 = 0, $tm_mday = 0, $74 = 0, $tm_hour = 0, $75 = 0, $tm_min = 0, $76 = 0, $tm_sec = 0, $77 = 0, $call203 = 0, $arraydecay205 = 0, $call206 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _memset($th | 0, 0, 1376);
  HEAP16[$th >> 1] = (_htonl(1296910665) | 0) >>> 16 & 65535;
  HEAP16[$th + 2 >> 1] = 42;
  HEAP32[$th + 4 >> 2] = 10;
  $tobool = ($full | 0) != 0;
  $ntag = $th + 10 | 0;
  $1 = $ntag + 2 | 0;
  if ($tobool) {
    $2 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $2 + 1 & 65535;
    $conv_i = $2 & 65535;
    HEAP16[$1 + ($conv_i * 12 & -1) >> 1] = 254;
    HEAP16[$1 + ($conv_i * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i * 12 & -1) + 8 >> 2] = 0;
    $conv2 = HEAPU16[2621484] | 0;
    $4 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $4 + 1 & 65535;
    $conv_i364 = $4 & 65535;
    HEAP16[$1 + ($conv_i364 * 12 & -1) >> 1] = 256;
    HEAP16[$1 + ($conv_i364 * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i364 * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i364 * 12 & -1) + 8 >> 2] = $conv2;
    $conv4 = HEAPU16[2699404] | 0;
    $6 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $6 + 1 & 65535;
    $conv_i429 = $6 & 65535;
    HEAP16[$1 + ($conv_i429 * 12 & -1) >> 1] = 257;
    HEAP16[$1 + ($conv_i429 * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i429 * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i429 * 12 & -1) + 8 >> 2] = $conv4;
    $7 = HEAP32[1390240] | 0;
    $8 = HEAP32[1315758] | 0;
    $9 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $9 + 1 & 65535;
    $conv_i413 = $9 & 65535;
    HEAP16[$1 + ($conv_i413 * 12 & -1) >> 1] = 258;
    HEAP16[$1 + ($conv_i413 * 12 & -1) + 2 >> 1] = 3;
    HEAP32[$1 + ($conv_i413 * 12 & -1) + 4 >> 2] = $7;
    if (($7 | 0) < 3) {
      $val29_i419 = $1 + ($conv_i413 * 12 & -1) + 8 | 0;
      HEAP16[$val29_i419 >> 1] = $8 & 65535;
      HEAP16[$val29_i419 + 2 >> 1] = $8 >>> 16 & 65535;
    } else {
      HEAP32[$1 + ($conv_i413 * 12 & -1) + 8 >> 2] = $8;
    }
    if ((HEAP32[1390240] | 0) > 2) {
      HEAP32[$th + 12 + (((HEAPU16[$ntag >> 1] | 0) - 1 | 0) * 12 & -1) + 8 >> 2] = 468;
    }
    HEAP16[$th + 468 >> 1] = HEAP32[1315758] & 65535;
    HEAP16[$th + 470 >> 1] = HEAP32[1315758] & 65535;
    HEAP16[$th + 472 >> 1] = HEAP32[1315758] & 65535;
    HEAP16[$th + 474 >> 1] = HEAP32[1315758] & 65535;
    $16 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $16 + 1 & 65535;
    $conv_i403 = $16 & 65535;
    HEAP16[$1 + ($conv_i403 * 12 & -1) >> 1] = 259;
    HEAP16[$1 + ($conv_i403 * 12 & -1) + 2 >> 1] = 3;
    HEAP32[$1 + ($conv_i403 * 12 & -1) + 4 >> 2] = 1;
    $val29_i407 = $1 + ($conv_i403 * 12 & -1) + 8 | 0;
    HEAP16[$val29_i407 >> 1] = 1;
    HEAP16[$val29_i407 + 2 >> 1] = 0;
    $cmp17 = (HEAP32[1390240] | 0) > 1;
    $18 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $18 + 1 & 65535;
    $conv_i392 = $18 & 65535;
    HEAP16[$1 + ($conv_i392 * 12 & -1) >> 1] = 262;
    HEAP16[$1 + ($conv_i392 * 12 & -1) + 2 >> 1] = 3;
    HEAP32[$1 + ($conv_i392 * 12 & -1) + 4 >> 2] = 1;
    $val29_i396 = $1 + ($conv_i392 * 12 & -1) + 8 | 0;
    HEAP16[$val29_i396 >> 1] = $cmp17 ? 2 : 1;
    HEAP16[$val29_i396 + 2 >> 1] = 0;
  }
  $19 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $19 + 1 & 65535;
  $conv_i385 = $19 & 65535;
  HEAP16[$1 + ($conv_i385 * 12 & -1) >> 1] = 270;
  HEAP16[$1 + ($conv_i385 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i385 * 12 & -1) + 4 >> 2] = 512;
  HEAP32[$1 + ($conv_i385 * 12 & -1) + 8 >> 2] = 620;
  $20 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $20 + 1 & 65535;
  $conv_i378 = $20 & 65535;
  HEAP16[$1 + ($conv_i378 * 12 & -1) >> 1] = 271;
  HEAP16[$1 + ($conv_i378 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i378 * 12 & -1) + 4 >> 2] = 64;
  HEAP32[$1 + ($conv_i378 * 12 & -1) + 8 >> 2] = 1132;
  $21 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $21 + 1 & 65535;
  $conv_i371 = $21 & 65535;
  HEAP16[$1 + ($conv_i371 * 12 & -1) >> 1] = 272;
  HEAP16[$1 + ($conv_i371 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i371 * 12 & -1) + 4 >> 2] = 64;
  HEAP32[$1 + ($conv_i371 * 12 & -1) + 8 >> 2] = 1196;
  if ($tobool) {
    $22 = HEAP32[1315760] | 0;
    if (($22 | 0) == 0) {
      $psize_0 = 0;
    } else {
      $psize_0 = _htonl(HEAP32[$22 >> 2] | 0) | 0;
    }
    $24 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $24 + 1 & 65535;
    $conv_i357 = $24 & 65535;
    HEAP16[$1 + ($conv_i357 * 12 & -1) >> 1] = 273;
    HEAP16[$1 + ($conv_i357 * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i357 * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i357 * 12 & -1) + 8 >> 2] = $psize_0 + 1376 | 0;
    $25 = HEAP32[1390240] | 0;
    $26 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $26 + 1 & 65535;
    $conv_i344 = $26 & 65535;
    HEAP16[$1 + ($conv_i344 * 12 & -1) >> 1] = 277;
    HEAP16[$1 + ($conv_i344 * 12 & -1) + 2 >> 1] = 3;
    HEAP32[$1 + ($conv_i344 * 12 & -1) + 4 >> 2] = 1;
    $val29_i348 = $1 + ($conv_i344 * 12 & -1) + 8 | 0;
    HEAP16[$val29_i348 >> 1] = $25 & 65535;
    HEAP16[$val29_i348 + 2 >> 1] = $25 >>> 16 & 65535;
    $conv43 = HEAPU16[2699404] | 0;
    $28 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $28 + 1 & 65535;
    $conv_i337 = $28 & 65535;
    HEAP16[$1 + ($conv_i337 * 12 & -1) >> 1] = 278;
    HEAP16[$1 + ($conv_i337 * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i337 * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i337 * 12 & -1) + 8 >> 2] = $conv43;
    $mul = Math_imul(HEAPU16[2621484] | 0, HEAPU16[2699404] | 0);
    $mul47 = Math_imul($mul, HEAP32[1390240] | 0);
    $div = (Math_imul($mul47, HEAP32[1315758] | 0) | 0) / 8 & -1;
    $33 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $33 + 1 & 65535;
    $conv_i330 = $33 & 65535;
    HEAP16[$1 + ($conv_i330 * 12 & -1) >> 1] = 279;
    HEAP16[$1 + ($conv_i330 * 12 & -1) + 2 >> 1] = 4;
    HEAP32[$1 + ($conv_i330 * 12 & -1) + 4 >> 2] = 1;
    HEAP32[$1 + ($conv_i330 * 12 & -1) + 8 >> 2] = $div;
    $psize_1 = $psize_0;
  } else {
    $sub52 = (HEAP8[5576376 + (HEAP32[1350792] | 0) | 0] << 24 >> 24) - 48 | 0;
    $36 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $36 + 1 & 65535;
    $conv_i317 = $36 & 65535;
    HEAP16[$1 + ($conv_i317 * 12 & -1) >> 1] = 274;
    HEAP16[$1 + ($conv_i317 * 12 & -1) + 2 >> 1] = 3;
    HEAP32[$1 + ($conv_i317 * 12 & -1) + 4 >> 2] = 1;
    $val29_i321 = $1 + ($conv_i317 * 12 & -1) + 8 | 0;
    HEAP16[$val29_i321 >> 1] = $sub52 & 65535;
    HEAP16[$val29_i321 + 2 >> 1] = $sub52 >>> 16 & 65535;
    $psize_1 = 0;
  }
  $arrayidx55 = $th + 476 | 0;
  $37 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $37 + 1 & 65535;
  $conv_i310 = $37 & 65535;
  HEAP16[$1 + ($conv_i310 * 12 & -1) >> 1] = 282;
  HEAP16[$1 + ($conv_i310 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$1 + ($conv_i310 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$1 + ($conv_i310 * 12 & -1) + 8 >> 2] = 476;
  $arrayidx61 = $th + 484 | 0;
  $38 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $38 + 1 & 65535;
  $conv_i303 = $38 & 65535;
  HEAP16[$1 + ($conv_i303 * 12 & -1) >> 1] = 283;
  HEAP16[$1 + ($conv_i303 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$1 + ($conv_i303 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$1 + ($conv_i303 * 12 & -1) + 8 >> 2] = 484;
  $39 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $39 + 1 & 65535;
  $conv_i293 = $39 & 65535;
  HEAP16[$1 + ($conv_i293 * 12 & -1) >> 1] = 284;
  HEAP16[$1 + ($conv_i293 * 12 & -1) + 2 >> 1] = 3;
  HEAP32[$1 + ($conv_i293 * 12 & -1) + 4 >> 2] = 1;
  $val29_i297 = $1 + ($conv_i293 * 12 & -1) + 8 | 0;
  HEAP16[$val29_i297 >> 1] = 1;
  HEAP16[$val29_i297 + 2 >> 1] = 0;
  $40 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $40 + 1 & 65535;
  $conv_i283 = $40 & 65535;
  HEAP16[$1 + ($conv_i283 * 12 & -1) >> 1] = 296;
  HEAP16[$1 + ($conv_i283 * 12 & -1) + 2 >> 1] = 3;
  HEAP32[$1 + ($conv_i283 * 12 & -1) + 4 >> 2] = 1;
  $val29_i287 = $1 + ($conv_i283 * 12 & -1) + 8 | 0;
  HEAP16[$val29_i287 >> 1] = 2;
  HEAP16[$val29_i287 + 2 >> 1] = 0;
  $41 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $41 + 1 & 65535;
  $conv_i276 = $41 & 65535;
  HEAP16[$1 + ($conv_i276 * 12 & -1) >> 1] = 305;
  HEAP16[$1 + ($conv_i276 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i276 * 12 & -1) + 4 >> 2] = 32;
  HEAP32[$1 + ($conv_i276 * 12 & -1) + 8 >> 2] = 1260;
  $42 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $42 + 1 & 65535;
  $conv_i269 = $42 & 65535;
  HEAP16[$1 + ($conv_i269 * 12 & -1) >> 1] = 306;
  HEAP16[$1 + ($conv_i269 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i269 * 12 & -1) + 4 >> 2] = 20;
  HEAP32[$1 + ($conv_i269 * 12 & -1) + 8 >> 2] = 1292;
  $43 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $43 + 1 & 65535;
  $conv_i262 = $43 & 65535;
  HEAP16[$1 + ($conv_i262 * 12 & -1) >> 1] = 315;
  HEAP16[$1 + ($conv_i262 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$1 + ($conv_i262 * 12 & -1) + 4 >> 2] = 64;
  HEAP32[$1 + ($conv_i262 * 12 & -1) + 8 >> 2] = 1312;
  $nexif = $th + 294 | 0;
  $44 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $44 + 1 & 65535;
  $conv_i255 = $44 & 65535;
  HEAP16[$1 + ($conv_i255 * 12 & -1) >> 1] = -30871;
  HEAP16[$1 + ($conv_i255 * 12 & -1) + 2 >> 1] = 4;
  HEAP32[$1 + ($conv_i255 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$1 + ($conv_i255 * 12 & -1) + 8 >> 2] = 294;
  if (($psize_1 | 0) != 0) {
    $45 = HEAP16[$ntag >> 1] | 0;
    HEAP16[$ntag >> 1] = $45 + 1 & 65535;
    $conv_i248 = $45 & 65535;
    HEAP16[$1 + ($conv_i248 * 12 & -1) >> 1] = -30861;
    HEAP16[$1 + ($conv_i248 * 12 & -1) + 2 >> 1] = 7;
    HEAP32[$1 + ($conv_i248 * 12 & -1) + 4 >> 2] = $psize_1;
    HEAP32[$1 + ($conv_i248 * 12 & -1) + 8 >> 2] = 1376;
  }
  $arrayidx89 = $th + 492 | 0;
  $46 = $nexif + 2 | 0;
  $47 = HEAP16[$nexif >> 1] | 0;
  HEAP16[$nexif >> 1] = $47 + 1 & 65535;
  $conv_i241 = $47 & 65535;
  HEAP16[$46 + ($conv_i241 * 12 & -1) >> 1] = -32102;
  HEAP16[$46 + ($conv_i241 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$46 + ($conv_i241 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$46 + ($conv_i241 * 12 & -1) + 8 >> 2] = 492;
  $arrayidx95 = $th + 500 | 0;
  $48 = HEAP16[$nexif >> 1] | 0;
  HEAP16[$nexif >> 1] = $48 + 1 & 65535;
  $conv_i234 = $48 & 65535;
  HEAP16[$46 + ($conv_i234 * 12 & -1) >> 1] = -32099;
  HEAP16[$46 + ($conv_i234 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$46 + ($conv_i234 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$46 + ($conv_i234 * 12 & -1) + 8 >> 2] = 500;
  $conv100 = ~~+HEAPF32[1316048];
  $50 = HEAP16[$nexif >> 1] | 0;
  HEAP16[$nexif >> 1] = $50 + 1 & 65535;
  $conv_i228 = $50 & 65535;
  HEAP16[$46 + ($conv_i228 * 12 & -1) >> 1] = -30681;
  HEAP16[$46 + ($conv_i228 * 12 & -1) + 2 >> 1] = 3;
  HEAP32[$46 + ($conv_i228 * 12 & -1) + 4 >> 2] = 1;
  $val29_i = $46 + ($conv_i228 * 12 & -1) + 8 | 0;
  HEAP16[$val29_i >> 1] = $conv100 & 65535;
  HEAP16[$val29_i + 2 >> 1] = $conv100 >>> 16 & 65535;
  $arrayidx103 = $th + 508 | 0;
  $51 = HEAP16[$nexif >> 1] | 0;
  HEAP16[$nexif >> 1] = $51 + 1 & 65535;
  $conv_i221 = $51 & 65535;
  HEAP16[$46 + ($conv_i221 * 12 & -1) >> 1] = -28150;
  HEAP16[$46 + ($conv_i221 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$46 + ($conv_i221 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$46 + ($conv_i221 * 12 & -1) + 8 >> 2] = 508;
  if ((HEAP32[1349709] | 0) == 0) {
    HEAP32[$arrayidx61 >> 2] = 300;
    HEAP32[$arrayidx55 >> 2] = 300;
    $arrayidx159 = $th + 488 | 0;
    HEAP32[$arrayidx159 >> 2] = 1;
    $arrayidx161 = $th + 480 | 0;
    HEAP32[$arrayidx161 >> 2] = 1;
    HEAP32[$arrayidx89 >> 2] = 1e6;
    $arrayidx168_1 = $th + 496 | 0;
    HEAP32[$arrayidx168_1 >> 2] = 1e6;
    HEAP32[$arrayidx95 >> 2] = 1e6;
    $arrayidx168_3 = $th + 504 | 0;
    HEAP32[$arrayidx168_3 >> 2] = 1e6;
    HEAP32[$arrayidx103 >> 2] = 1e6;
    $arrayidx168_5 = $th + 512 | 0;
    HEAP32[$arrayidx168_5 >> 2] = 1e6;
    $69 = +HEAPF32[1311229];
    $mul175 = $69 * 1.0e6;
    $conv176 = ~~$mul175;
    HEAP32[$arrayidx89 >> 2] = $conv176;
    $70 = +HEAPF32[1390397];
    $mul180 = $70 * 1.0e6;
    $conv181 = ~~$mul180;
    HEAP32[$arrayidx95 >> 2] = $conv181;
    $71 = +HEAPF32[1350791];
    $mul185 = $71 * 1.0e6;
    $conv186 = ~~$mul185;
    HEAP32[$arrayidx103 >> 2] = $conv186;
    $arraydecay = $th + 620 | 0;
    $call188 = _strncpy($arraydecay | 0, 5428100, 512) | 0;
    $arraydecay190 = $th + 1132 | 0;
    $call191 = _strncpy($arraydecay190 | 0, 5263724, 64) | 0;
    $arraydecay193 = $th + 1196 | 0;
    $call194 = _strncpy($arraydecay193 | 0, 5263468, 64) | 0;
    $arraydecay196 = $th + 1260 | 0;
    _memcpy($arraydecay196, 5576364, 12);
    $call198 = _localtime(5243576) | 0;
    $arraydecay200 = $th + 1292 | 0;
    $tm_year = $call198 + 20 | 0;
    $72 = HEAP32[$tm_year >> 2] | 0;
    $add201 = $72 + 1900 | 0;
    $tm_mon = $call198 + 16 | 0;
    $73 = HEAP32[$tm_mon >> 2] | 0;
    $add202 = $73 + 1 | 0;
    $tm_mday = $call198 + 12 | 0;
    $74 = HEAP32[$tm_mday >> 2] | 0;
    $tm_hour = $call198 + 8 | 0;
    $75 = HEAP32[$tm_hour >> 2] | 0;
    $tm_min = $call198 + 4 | 0;
    $76 = HEAP32[$tm_min >> 2] | 0;
    $tm_sec = $call198 | 0;
    $77 = HEAP32[$tm_sec >> 2] | 0;
    $call203 = _sprintf($arraydecay200 | 0, 5576332, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $add201, HEAP32[tempInt + 4 >> 2] = $add202, HEAP32[tempInt + 8 >> 2] = $74, HEAP32[tempInt + 12 >> 2] = $75, HEAP32[tempInt + 16 >> 2] = $76, HEAP32[tempInt + 20 >> 2] = $77, tempInt) | 0) | 0;
    $arraydecay205 = $th + 1312 | 0;
    $call206 = _strncpy($arraydecay205 | 0, 5561524, 64) | 0;
    STACKTOP = __stackBase__;
    return;
  }
  $ngps = $th + 346 | 0;
  $53 = HEAP16[$ntag >> 1] | 0;
  HEAP16[$ntag >> 1] = $53 + 1 & 65535;
  $conv_i214 = $53 & 65535;
  HEAP16[$1 + ($conv_i214 * 12 & -1) >> 1] = -30683;
  HEAP16[$1 + ($conv_i214 * 12 & -1) + 2 >> 1] = 4;
  HEAP32[$1 + ($conv_i214 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$1 + ($conv_i214 * 12 & -1) + 8 >> 2] = 346;
  $54 = $ngps + 2 | 0;
  $55 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $55 + 1 & 65535;
  $conv_i202 = $55 & 65535;
  HEAP16[$54 + ($conv_i202 * 12 & -1) >> 1] = 0;
  HEAP16[$54 + ($conv_i202 * 12 & -1) + 2 >> 1] = 1;
  HEAP32[$54 + ($conv_i202 * 12 & -1) + 4 >> 2] = 4;
  $val12_i206 = $54 + ($conv_i202 * 12 & -1) + 8 | 0;
  $c13_i207 = $val12_i206;
  HEAP8[$val12_i206] = 2;
  HEAP8[$c13_i207 + 1 | 0] = 2;
  HEAP8[$c13_i207 + 2 | 0] = 0;
  HEAP8[$c13_i207 + 3 | 0] = 0;
  $56 = HEAP32[1349737] | 0;
  $57 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $57 + 1 & 65535;
  $conv_i183 = $57 & 65535;
  HEAP16[$54 + ($conv_i183 * 12 & -1) >> 1] = 1;
  HEAP16[$54 + ($conv_i183 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$54 + ($conv_i183 * 12 & -1) + 4 >> 2] = 2;
  $val12_i187 = $54 + ($conv_i183 * 12 & -1) + 8 | 0;
  $c13_i188 = $val12_i187;
  HEAP8[$val12_i187] = $56 & 255;
  HEAP8[$c13_i188 + 1 | 0] = $56 >>> 8 & 255;
  HEAP8[$c13_i188 + 2 | 0] = $56 >>> 16 & 255;
  HEAP8[$c13_i188 + 3 | 0] = $56 >>> 24 & 255;
  $58 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $58 + 1 & 65535;
  $conv_i176 = $58 & 65535;
  HEAP16[$54 + ($conv_i176 * 12 & -1) >> 1] = 2;
  HEAP16[$54 + ($conv_i176 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$54 + ($conv_i176 * 12 & -1) + 4 >> 2] = 3;
  HEAP32[$54 + ($conv_i176 * 12 & -1) + 8 >> 2] = 516;
  $59 = HEAP32[1349738] | 0;
  $60 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $60 + 1 & 65535;
  $conv_i157 = $60 & 65535;
  HEAP16[$54 + ($conv_i157 * 12 & -1) >> 1] = 3;
  HEAP16[$54 + ($conv_i157 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$54 + ($conv_i157 * 12 & -1) + 4 >> 2] = 2;
  $val12_i161 = $54 + ($conv_i157 * 12 & -1) + 8 | 0;
  $c13_i162 = $val12_i161;
  HEAP8[$val12_i161] = $59 & 255;
  HEAP8[$c13_i162 + 1 | 0] = $59 >>> 8 & 255;
  HEAP8[$c13_i162 + 2 | 0] = $59 >>> 16 & 255;
  HEAP8[$c13_i162 + 3 | 0] = $59 >>> 24 & 255;
  $61 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $61 + 1 & 65535;
  $conv_i150 = $61 & 65535;
  HEAP16[$54 + ($conv_i150 * 12 & -1) >> 1] = 4;
  HEAP16[$54 + ($conv_i150 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$54 + ($conv_i150 * 12 & -1) + 4 >> 2] = 3;
  HEAP32[$54 + ($conv_i150 * 12 & -1) + 8 >> 2] = 540;
  $62 = HEAP32[1349739] | 0;
  $63 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $63 + 1 & 65535;
  $conv_i144 = $63 & 65535;
  HEAP16[$54 + ($conv_i144 * 12 & -1) >> 1] = 5;
  HEAP16[$54 + ($conv_i144 * 12 & -1) + 2 >> 1] = 1;
  HEAP32[$54 + ($conv_i144 * 12 & -1) + 4 >> 2] = 1;
  $val12_i = $54 + ($conv_i144 * 12 & -1) + 8 | 0;
  $c13_i = $val12_i;
  HEAP8[$val12_i] = $62 & 255;
  HEAP8[$c13_i + 1 | 0] = $62 >>> 8 & 255;
  HEAP8[$c13_i + 2 | 0] = $62 >>> 16 & 255;
  HEAP8[$c13_i + 3 | 0] = $62 >>> 24 & 255;
  $64 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $64 + 1 & 65535;
  $conv_i137 = $64 & 65535;
  HEAP16[$54 + ($conv_i137 * 12 & -1) >> 1] = 6;
  HEAP16[$54 + ($conv_i137 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$54 + ($conv_i137 * 12 & -1) + 4 >> 2] = 1;
  HEAP32[$54 + ($conv_i137 * 12 & -1) + 8 >> 2] = 588;
  $65 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $65 + 1 & 65535;
  $conv_i130 = $65 & 65535;
  HEAP16[$54 + ($conv_i130 * 12 & -1) >> 1] = 7;
  HEAP16[$54 + ($conv_i130 * 12 & -1) + 2 >> 1] = 5;
  HEAP32[$54 + ($conv_i130 * 12 & -1) + 4 >> 2] = 3;
  HEAP32[$54 + ($conv_i130 * 12 & -1) + 8 >> 2] = 564;
  $66 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $66 + 1 & 65535;
  $conv_i123 = $66 & 65535;
  HEAP16[$54 + ($conv_i123 * 12 & -1) >> 1] = 18;
  HEAP16[$54 + ($conv_i123 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$54 + ($conv_i123 * 12 & -1) + 4 >> 2] = 12;
  HEAP32[$54 + ($conv_i123 * 12 & -1) + 8 >> 2] = 596;
  $67 = HEAP16[$ngps >> 1] | 0;
  HEAP16[$ngps >> 1] = $67 + 1 & 65535;
  $conv_i116 = $67 & 65535;
  HEAP16[$54 + ($conv_i116 * 12 & -1) >> 1] = 29;
  HEAP16[$54 + ($conv_i116 * 12 & -1) + 2 >> 1] = 2;
  HEAP32[$54 + ($conv_i116 * 12 & -1) + 4 >> 2] = 12;
  HEAP32[$54 + ($conv_i116 * 12 & -1) + 8 >> 2] = 608;
  _memcpy($th + 516 | 0, 5398832, 104);
  HEAP32[$arrayidx61 >> 2] = 300;
  HEAP32[$arrayidx55 >> 2] = 300;
  $arrayidx159 = $th + 488 | 0;
  HEAP32[$arrayidx159 >> 2] = 1;
  $arrayidx161 = $th + 480 | 0;
  HEAP32[$arrayidx161 >> 2] = 1;
  HEAP32[$arrayidx89 >> 2] = 1e6;
  $arrayidx168_1 = $th + 496 | 0;
  HEAP32[$arrayidx168_1 >> 2] = 1e6;
  HEAP32[$arrayidx95 >> 2] = 1e6;
  $arrayidx168_3 = $th + 504 | 0;
  HEAP32[$arrayidx168_3 >> 2] = 1e6;
  HEAP32[$arrayidx103 >> 2] = 1e6;
  $arrayidx168_5 = $th + 512 | 0;
  HEAP32[$arrayidx168_5 >> 2] = 1e6;
  $69 = +HEAPF32[1311229];
  $mul175 = $69 * 1.0e6;
  $conv176 = ~~$mul175;
  HEAP32[$arrayidx89 >> 2] = $conv176;
  $70 = +HEAPF32[1390397];
  $mul180 = $70 * 1.0e6;
  $conv181 = ~~$mul180;
  HEAP32[$arrayidx95 >> 2] = $conv181;
  $71 = +HEAPF32[1350791];
  $mul185 = $71 * 1.0e6;
  $conv186 = ~~$mul185;
  HEAP32[$arrayidx103 >> 2] = $conv186;
  $arraydecay = $th + 620 | 0;
  $call188 = _strncpy($arraydecay | 0, 5428100, 512) | 0;
  $arraydecay190 = $th + 1132 | 0;
  $call191 = _strncpy($arraydecay190 | 0, 5263724, 64) | 0;
  $arraydecay193 = $th + 1196 | 0;
  $call194 = _strncpy($arraydecay193 | 0, 5263468, 64) | 0;
  $arraydecay196 = $th + 1260 | 0;
  _memcpy($arraydecay196, 5576364, 12);
  $call198 = _localtime(5243576) | 0;
  $arraydecay200 = $th + 1292 | 0;
  $tm_year = $call198 + 20 | 0;
  $72 = HEAP32[$tm_year >> 2] | 0;
  $add201 = $72 + 1900 | 0;
  $tm_mon = $call198 + 16 | 0;
  $73 = HEAP32[$tm_mon >> 2] | 0;
  $add202 = $73 + 1 | 0;
  $tm_mday = $call198 + 12 | 0;
  $74 = HEAP32[$tm_mday >> 2] | 0;
  $tm_hour = $call198 + 8 | 0;
  $75 = HEAP32[$tm_hour >> 2] | 0;
  $tm_min = $call198 + 4 | 0;
  $76 = HEAP32[$tm_min >> 2] | 0;
  $tm_sec = $call198 | 0;
  $77 = HEAP32[$tm_sec >> 2] | 0;
  $call203 = _sprintf($arraydecay200 | 0, 5576332, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $add201, HEAP32[tempInt + 4 >> 2] = $add202, HEAP32[tempInt + 8 >> 2] = $74, HEAP32[tempInt + 12 >> 2] = $75, HEAP32[tempInt + 16 >> 2] = $76, HEAP32[tempInt + 20 >> 2] = $77, tempInt) | 0) | 0;
  $arraydecay205 = $th + 1312 | 0;
  $call206 = _strncpy($arraydecay205 | 0, 5561524, 64) | 0;
  STACKTOP = __stackBase__;
  return;
}
function _jpeg_thumb() {
  var $exif = 0, $th = 0, $call = 0, $1 = 0, $2 = 0, $7 = 0, $add_ptr8 = 0, $11 = 0, $sub = 0, $12 = 0, $call9 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1388 | 0;
  $exif = __stackBase__ | 0;
  $th = __stackBase__ + 12 | 0;
  $call = _malloc(HEAP32[1311016] | 0) | 0;
  if (($call | 0) == 0) {
    $1 = HEAP32[_stderr >> 2] | 0;
    $2 = HEAP32[1316054] | 0;
    _fprintf($1 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $2, HEAP32[tempInt + 4 >> 2] = 5576316, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  _fread($call | 0, 1, HEAP32[1311016] | 0, HEAP32[1316053] | 0);
  _fputc(255, HEAP32[1315761] | 0);
  _fputc(216, HEAP32[1315761] | 0);
  if ((_strcmp($call + 6 | 0, 5579212) | 0) == 0) {
    $add_ptr8 = $call + 2 | 0;
    $11 = HEAP32[1311016] | 0;
    $sub = $11 - 2 | 0;
    $12 = HEAP32[1315761] | 0;
    $call9 = _fwrite($add_ptr8 | 0, 1, $sub | 0, $12 | 0) | 0;
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
  $7 = $exif;
  _memcpy($7, 5576304, 10);
  HEAP16[$exif + 2 >> 1] = _htons(1384) & 65535;
  _fwrite($7 | 0, 1, 10, HEAP32[1315761] | 0);
  _tiff_head($th, 0);
  _fwrite($th | 0, 1, 1376, HEAP32[1315761] | 0);
  $add_ptr8 = $call + 2 | 0;
  $11 = HEAP32[1311016] | 0;
  $sub = $11 - 2 | 0;
  $12 = HEAP32[1315761] | 0;
  $call9 = _fwrite($add_ptr8 | 0, 1, $sub | 0, $12 | 0) | 0;
  _free($call);
  STACKTOP = __stackBase__;
  return;
}
function _write_ppm_tiff() {
  var $th = 0, $conv4 = 0, $perc_0 = 0, $7 = 0, $white_0128 = 0, $c_0127 = 0, $val_0 = 0, $total_0 = 0, $dec = 0, $add = 0, $dec_white_0 = 0, $inc = 0, $white_2 = 0, $9 = 0.0, $12 = 0, $13 = 0, $15 = 0, $conv42 = 0, $div44 = 0, $mul_i = 0, $req_0_i = 0, $call_i = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $call51 = 0, $30 = 0, $31 = 0, $conv57 = 0, $conv58 = 0, $sub60 = 0, $add64 = 0, $conv65 = 0, $conv66 = 0, $sub68 = 0, $38 = 0, $tobool3_i = 0, $row_addr_1_i = 0, $tobool9_i = 0, $conv15_i_pre = 0, $add16_i = 0, $and_i37 = 0, $and_i37_lobit = 0, $40 = 0, $row_addr_1_i44 = 0, $col_addr_1_i52 = 0, $mul_i54 = 0, $row_addr_1_i67 = 0, $col_addr_1_i76 = 0, $mul_i78 = 0, $43 = 0, $conv76 = 0, $tobool_i82 = 0, $row_col_i83 = 0, $col_row_i84 = 0, $row_addr_1_i91 = 0, $col_addr_1_i100 = 0, $sub78 = 0, $sub74 = 0, $46 = 0, $row_0125 = 0, $soff_0124 = 0, $47 = 0, $48 = 0, $soff_1120 = 0, $col_0116 = 0, $49 = 0, $cmp93112 = 0, $50 = 0, $c_1113 = 0, $conv100 = 0, $inc105 = 0, $54 = 0, $55 = 0, $c_2110 = 0, $58 = 0, $inc120 = 0, $59 = 0, $inc124 = 0, $add125 = 0, $61 = 0, $_lcssa = 0, $soff_1_lcssa = 0, $div140 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1376 | 0;
  $th = __stackBase__ | 0;
  $conv4 = ~~(+(Math_imul(HEAPU16[2699404] | 0, HEAPU16[2621484] | 0) | 0) * .01);
  if (HEAP16[2699510] << 16 >> 16 == 0) {
    $perc_0 = $conv4;
  } else {
    $perc_0 = ($conv4 | 0) / 2 & -1;
  }
  L3993 : do {
    if ((HEAP32[1349701] & -3 | HEAP32[1315762] | 0) == 0) {
      $7 = HEAP32[1390240] | 0;
      if (($7 | 0) > 0) {
        $c_0127 = 0;
        $white_0128 = 0;
      } else {
        $white_2 = 0;
        break;
      }
      while (1) {
        $total_0 = 0;
        $val_0 = 8192;
        while (1) {
          $dec = $val_0 - 1 | 0;
          if (($dec | 0) <= 32) {
            break;
          }
          $add = (HEAP32[5267732 + ($c_0127 << 15) + ($dec << 2) >> 2] | 0) + $total_0 | 0;
          if (($add | 0) > ($perc_0 | 0)) {
            break;
          } else {
            $total_0 = $add;
            $val_0 = $dec;
          }
        }
        $dec_white_0 = ($white_0128 | 0) < ($dec | 0) ? $dec : $white_0128;
        $inc = $c_0127 + 1 | 0;
        if (($inc | 0) < ($7 | 0)) {
          $c_0127 = $inc;
          $white_0128 = $dec_white_0;
        } else {
          $white_2 = $dec_white_0;
          break L3993;
        }
      }
    } else {
      $white_2 = 8192;
    }
  } while (0);
  $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1349743] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398976 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
  _gamma_curve($9, (HEAP32[tempDoublePtr >> 2] = HEAP32[1349745] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398984 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]), 2, ~~(+($white_2 << 3 | 0) / +HEAPF32[1390315]));
  $12 = HEAP16[2699404] | 0;
  HEAP16[2632104] = $12;
  $13 = HEAP16[2621484] | 0;
  HEAP16[2632094] = $13;
  if ((HEAP32[1350792] & 4 | 0) == 0) {
    $15 = $13;
  } else {
    HEAP16[2621484] = $12;
    HEAP16[2699404] = $13;
    $15 = $12;
  }
  $conv42 = $15 & 65535;
  $div44 = (Math_imul(HEAP32[1315758] | 0, HEAP32[1390240] | 0) | 0) / 8 & -1;
  do {
    if ($15 << 16 >> 16 == 0) {
      $req_0_i = 0;
    } else {
      $mul_i = Math_imul($div44, $conv42);
      if ($div44 >>> 0 <= 65535) {
        $req_0_i = $mul_i;
        break;
      }
      $req_0_i = (($mul_i >>> 0) / ($conv42 >>> 0) >>> 0 | 0) == ($div44 | 0) ? $mul_i : -1;
    }
  } while (0);
  $call_i = _malloc($req_0_i) | 0;
  if (($call_i | 0) == 0) {
    $20 = HEAP32[_stderr >> 2] | 0;
    $21 = HEAP32[1316054] | 0;
    _fprintf($20 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $21, HEAP32[tempInt + 4 >> 2] = 5576284, tempInt) | 0);
    _longjmp(5428048, 1);
  }
  if ((HEAP32[$call_i - 4 >> 2] & 3 | 0) != 0) {
    _memset($call_i | 0, 0, $req_0_i | 0);
  }
  $22 = $call_i;
  do {
    if ((HEAP32[1315756] | 0) == 0) {
      $30 = HEAP32[1390240] | 0;
      $31 = HEAP32[1315761] | 0;
      if (($30 | 0) > 3) {
        $conv57 = HEAPU16[2621484] | 0;
        $conv58 = HEAPU16[2699404] | 0;
        $sub60 = (1 << HEAP32[1315758]) - 1 | 0;
        _fprintf($31 | 0, 5576220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $conv57, HEAP32[tempInt + 4 >> 2] = $conv58, HEAP32[tempInt + 8 >> 2] = $30, HEAP32[tempInt + 12 >> 2] = $sub60, HEAP32[tempInt + 16 >> 2] = 5561016, tempInt) | 0);
        break;
      } else {
        $add64 = (($30 | 0) / 2 & -1) + 5 | 0;
        $conv65 = HEAPU16[2621484] | 0;
        $conv66 = HEAPU16[2699404] | 0;
        $sub68 = (1 << HEAP32[1315758]) - 1 | 0;
        _fprintf($31 | 0, 5576188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $add64, HEAP32[tempInt + 4 >> 2] = $conv65, HEAP32[tempInt + 8 >> 2] = $conv66, HEAP32[tempInt + 12 >> 2] = $sub68, tempInt) | 0);
        break;
      }
    } else {
      _tiff_head($th, 1);
      _fwrite($th | 0, 1376, 1, HEAP32[1315761] | 0);
      $26 = HEAP32[1315760] | 0;
      if (($26 | 0) == 0) {
        break;
      }
      $call51 = _htonl(HEAP32[$26 >> 2] | 0) | 0;
      _fwrite($26 | 0, $call51 | 0, 1, HEAP32[1315761] | 0);
    }
  } while (0);
  $38 = HEAP32[1350792] | 0;
  $tobool3_i = ($38 & 2 | 0) == 0;
  if ($tobool3_i) {
    $row_addr_1_i = 0;
  } else {
    $row_addr_1_i = (HEAPU16[2632104] | 0) - 1 | 0;
  }
  $tobool9_i = ($38 & 1 | 0) == 0;
  $conv15_i_pre = HEAPU16[2632094] | 0;
  $add16_i = ($tobool9_i ? 0 : $conv15_i_pre - 1 | 0) + Math_imul($conv15_i_pre, $row_addr_1_i) | 0;
  $and_i37 = $38 & 4;
  $and_i37_lobit = $and_i37 >>> 2;
  $40 = $and_i37_lobit ^ 1;
  if ($tobool3_i) {
    $row_addr_1_i44 = $and_i37_lobit;
  } else {
    $row_addr_1_i44 = (HEAPU16[2632104] | 0) + ($and_i37_lobit ^ -1) | 0;
  }
  if ($tobool9_i) {
    $col_addr_1_i52 = $40;
  } else {
    $col_addr_1_i52 = $conv15_i_pre + ($and_i37_lobit | -2) | 0;
  }
  $mul_i54 = Math_imul($conv15_i_pre, $row_addr_1_i44);
  if ($tobool3_i) {
    $row_addr_1_i67 = $40;
  } else {
    $row_addr_1_i67 = (HEAPU16[2632104] | 0) + ($and_i37_lobit | -2) | 0;
  }
  if ($tobool9_i) {
    $col_addr_1_i76 = $and_i37_lobit;
  } else {
    $col_addr_1_i76 = $conv15_i_pre + ($and_i37_lobit ^ -1) | 0;
  }
  $mul_i78 = Math_imul($conv15_i_pre, $row_addr_1_i67);
  $43 = HEAP16[2621484] | 0;
  $conv76 = $43 & 65535;
  $tobool_i82 = ($and_i37 | 0) == 0;
  $row_col_i83 = $tobool_i82 ? 0 : $conv76;
  $col_row_i84 = $tobool_i82 ? $conv76 : 0;
  if ($tobool3_i) {
    $row_addr_1_i91 = $row_col_i83;
  } else {
    $row_addr_1_i91 = (HEAPU16[2632104] | 0) + ($row_col_i83 ^ -1) | 0;
  }
  if ($tobool9_i) {
    $col_addr_1_i100 = $col_row_i84;
  } else {
    $col_addr_1_i100 = $conv15_i_pre + ($col_row_i84 ^ -1) | 0;
  }
  if (HEAP16[2699404] << 16 >> 16 == 0) {
    _free($call_i);
    STACKTOP = __stackBase__;
    return;
  }
  $sub78 = (($col_addr_1_i76 + $mul_i78 | 0) - Math_imul($conv15_i_pre, $row_addr_1_i91) | 0) - $col_addr_1_i100 | 0;
  $sub74 = ($mul_i54 - $add16_i | 0) + $col_addr_1_i52 | 0;
  $soff_0124 = $add16_i;
  $row_0125 = 1;
  $46 = $43;
  while (1) {
    $47 = HEAP32[1315758] | 0;
    L4049 : do {
      if ($46 << 16 >> 16 == 0) {
        $soff_1_lcssa = $soff_0124;
        $_lcssa = $47;
      } else {
        $col_0116 = 0;
        $soff_1120 = $soff_0124;
        $48 = $47;
        while (1) {
          $49 = HEAP32[1390240] | 0;
          $cmp93112 = ($49 | 0) > 0;
          L4052 : do {
            if (($48 | 0) == 8) {
              if ($cmp93112) {
                $c_1113 = 0;
                $50 = $49;
              } else {
                break;
              }
              while (1) {
                $conv100 = (HEAPU16[5428620 + ((HEAPU16[(HEAP32[1316051] | 0) + ($soff_1120 << 3) + ($c_1113 << 1) >> 1] | 0) << 1) >> 1] | 0) >>> 8 & 255;
                HEAP8[$call_i + (Math_imul($50, $col_0116) + $c_1113 | 0) | 0] = $conv100;
                $inc105 = $c_1113 + 1 | 0;
                $54 = HEAP32[1390240] | 0;
                if (($inc105 | 0) < ($54 | 0)) {
                  $c_1113 = $inc105;
                  $50 = $54;
                } else {
                  break L4052;
                }
              }
            } else {
              if ($cmp93112) {
                $c_2110 = 0;
                $55 = $49;
              } else {
                break;
              }
              while (1) {
                $58 = HEAP16[5428620 + ((HEAPU16[(HEAP32[1316051] | 0) + ($soff_1120 << 3) + ($c_2110 << 1) >> 1] | 0) << 1) >> 1] | 0;
                HEAP16[$22 + (Math_imul($55, $col_0116) + $c_2110 << 1) >> 1] = $58;
                $inc120 = $c_2110 + 1 | 0;
                $59 = HEAP32[1390240] | 0;
                if (($inc120 | 0) < ($59 | 0)) {
                  $c_2110 = $inc120;
                  $55 = $59;
                } else {
                  break L4052;
                }
              }
            }
          } while (0);
          $inc124 = $col_0116 + 1 | 0;
          $add125 = $sub74 + $soff_1120 | 0;
          $61 = HEAP32[1315758] | 0;
          if (($inc124 | 0) < (HEAPU16[2621484] | 0 | 0)) {
            $col_0116 = $inc124;
            $soff_1120 = $add125;
            $48 = $61;
          } else {
            $soff_1_lcssa = $add125;
            $_lcssa = $61;
            break L4049;
          }
        }
      }
    } while (0);
    do {
      if (!(($_lcssa | 0) != 16 | (HEAP32[1315756] | 0) != 0)) {
        if ((_htons(21930) | 0) == 21930) {
          break;
        }
        _swab($call_i | 0, $call_i | 0, Math_imul(HEAP32[1390240] << 1, HEAPU16[2621484] | 0) | 0);
      }
    } while (0);
    $div140 = (Math_imul(HEAP32[1315758] | 0, HEAP32[1390240] | 0) | 0) / 8 & -1;
    _fwrite($call_i | 0, $div140 | 0, HEAPU16[2621484] | 0 | 0, HEAP32[1315761] | 0);
    if (($row_0125 | 0) >= (HEAPU16[2699404] | 0 | 0)) {
      break;
    }
    $soff_0124 = $sub78 + $soff_1_lcssa | 0;
    $row_0125 = $row_0125 + 1 | 0;
    $46 = HEAP16[2621484] | 0;
  }
  _free($call_i);
  STACKTOP = __stackBase__;
  return;
}
function _main($argc, $argv) {
  $argc = $argc | 0;
  $argv = $argv | 0;
  var $ut = 0, $call = 0, $cmp = 0, $call1 = 0, $puts = 0, $0 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call19 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call25 = 0, $call26 = 0, $call27 = 0, $call28 = 0, $call29 = 0, $call30 = 0, $call31 = 0, $call32 = 0, $call33 = 0, $call34 = 0, $call35 = 0, $call36 = 0, $call37 = 0, $putchar = 0, $arrayidx39 = 0, $arrayidx40280 = 0, $1 = 0, $2 = 0, $conv281 = 0, $sub282 = 0, $or283 = 0, $cmp42284 = 0, $3 = 0, $4 = 0, $arg_0297 = 0, $dark_frame_0296 = 0, $bpfile_0295 = 0, $read_from_stdin_0294 = 0, $write_to_stdout_0293 = 0, $use_fuji_rotate_0292 = 0, $user_flip_0291 = 0, $user_sat_0290 = 0, $user_black_0289 = 0, $user_qual_0288 = 0, $identify_only_0287 = 0, $thumbnail_only_0286 = 0, $timestamp_only_0285 = 0, $inc = 0, $arrayidx45 = 0, $5 = 0, $conv46 = 0, $memchr = 0, $tobool = 0, $sub_ptr_lhs_cast = 0, $sub_ptr_sub = 0, $arrayidx50 = 0, $6 = 0, $conv51 = 0, $sub52 = 0, $i_0 = 0, $cmp53 = 0, $add = 0, $arrayidx56 = 0, $7 = 0, $8 = 0, $conv58 = 0, $isdigittmp = 0, $isdigit = 0, $inc65 = 0, $9 = 0, $call63 = 0, $_pre321 = 0, $inc82 = 0, $arrayidx83 = 0, $10 = 0, $call_i145 = 0.0, $conv85 = 0.0, $inc82_1 = 0, $arrayidx83_1 = 0, $11 = 0, $call_i145_1 = 0.0, $conv85_1 = 0.0, $inc82_2 = 0, $arrayidx83_2 = 0, $12 = 0, $call_i145_2 = 0.0, $conv85_2 = 0.0, $arrayidx83_3 = 0, $13 = 0, $call_i145_3 = 0.0, $conv85_3 = 0.0, $14 = 0, $inc173 = 0, $arrayidx174 = 0, $15 = 0, $call175 = 0, $inc173_1 = 0, $arrayidx174_1 = 0, $16 = 0, $call175_1 = 0, $inc173_2 = 0, $arrayidx174_2 = 0, $17 = 0, $call175_2 = 0, $arrayidx174_3 = 0, $18 = 0, $call175_3 = 0, $19 = 0, $inc68 = 0, $arrayidx69 = 0, $20 = 0, $call_i = 0.0, $conv71 = 0.0, $inc73 = 0, $arrayidx74 = 0, $21 = 0, $call_i144 = 0.0, $conv76 = 0.0, $inc91 = 0, $arrayidx92 = 0, $22 = 0, $call_i146 = 0.0, $div = 0.0, $inc94 = 0, $arrayidx95 = 0, $23 = 0, $call_i147 = 0.0, $div97 = 0.0, $inc99 = 0, $arrayidx100 = 0, $24 = 0, $call_i148 = 0.0, $inc102 = 0, $arrayidx103 = 0, $25 = 0, $call_i149 = 0.0, $26 = 0.0, $tobool105 = 0, $div107 = 0.0, $inc110 = 0, $arrayidx111 = 0, $27 = 0, $call112 = 0, $inc114 = 0, $arrayidx115 = 0, $28 = 0, $call116 = 0, $inc118 = 0, $arrayidx119 = 0, $29 = 0, $call120 = 0, $inc122 = 0, $arrayidx123 = 0, $30 = 0, $call124 = 0, $inc126 = 0, $arrayidx127 = 0, $31 = 0, $call128 = 0, $inc130 = 0, $arrayidx131 = 0, $32 = 0, $call132 = 0, $arrayidx134 = 0, $33 = 0, $call135 = 0, $ispos = 0, $neg = 0, $call136 = 0, $inc137 = 0, $34 = 0, $call139 = 0, $lnot = 0, $lnot_ext = 0, $arrayidx142 = 0, $35 = 0, $36 = 0, $conv144 = 0, $isdigittmp214 = 0, $isdigit215 = 0, $arrayidx148 = 0, $37 = 0, $tobool149 = 0, $inc151 = 0, $call153 = 0, $timestamp_only_0_be = 0, $thumbnail_only_0_be = 0, $identify_only_0_be = 0, $user_qual_0_be = 0, $user_black_0_be = 0, $user_sat_0_be = 0, $user_flip_0_be = 0, $use_fuji_rotate_0_be = 0, $write_to_stdout_0_be = 0, $read_from_stdin_0_be = 0, $bpfile_0_be = 0, $dark_frame_0_be = 0, $arg_0_be = 0, $arrayidx40 = 0, $38 = 0, $39 = 0, $conv = 0, $sub = 0, $or = 0, $cmp42 = 0, $inc156 = 0, $arrayidx157 = 0, $40 = 0, $inc159 = 0, $arrayidx160 = 0, $41 = 0, $arg_3 = 0, $cmp184 = 0, $conv185 = 0, $42 = 0, $inc188 = 0, $43 = 0, $inc190 = 0, $44 = 0, $inc192 = 0, $45 = 0, $call199 = 0, $arg_0_lcssa = 0, $dark_frame_0_lcssa = 0, $bpfile_0_lcssa = 0, $read_from_stdin_0_lcssa = 0, $write_to_stdout_0_lcssa = 0, $use_fuji_rotate_0_lcssa = 0, $user_flip_0_lcssa = 0, $user_sat_0_lcssa = 0, $user_black_0_lcssa = 0, $user_qual_0_lcssa = 0, $identify_only_0_lcssa = 0, $thumbnail_only_0_lcssa = 0, $timestamp_only_0_lcssa = 0, $46 = 0, $cmp201 = 0, $47 = 0, $cmp205 = 0, $48 = 0, $49 = 0, $tobool210 = 0, $call212 = 0, $tobool213 = 0, $cmp219245 = 0, $cmp246 = 0, $tobool255 = 0, $tobool274 = 0, $tobool302 = 0, $tobool433 = 0, $tobool588 = 0, $tobool635 = 0, $cmp642 = 0, $cmp669 = 0, $cmp682 = 0, $tobool262 = 0, $modtime = 0, $actime = 0, $50 = 0, $51 = 0, $arg_4246 = 0, $52 = 0, $call222 = 0, $tobool223 = 0, $53 = 0, $call225 = 0, $cmp226 = 0, $54 = 0, $call229 = 0, $55 = 0, $call231 = 0, $cmp232 = 0, $56 = 0, $call235 = 0, $arrayidx238 = 0, $57 = 0, $call239 = 0, $tobool240 = 0, $58 = 0, $59 = 0, $lnot244 = 0, $lnot_ext245 = 0, $_pre322 = 0, $60 = 0, $add250 = 0, $rem = 0, $61 = 0, $lnot258 = 0, $lnot_ext259 = 0, $62 = 0, $63 = 0, $call261 = 0, $64 = 0, $65 = 0, $call264 = 0, $66 = 0, $tobool266 = 0, $67 = 0, $68 = 0, $call268 = 0, $_pre320 = 0, $69 = 0, $70 = 0, $call270 = 0, $_pre323 = 0, $71 = 0, $lnot277 = 0, $lnot_ext278 = 0, $72 = 0, $73 = 0, $call280 = 0, $74 = 0, $tobool282 = 0, $75 = 0, $76 = 0, $77 = 0, $call285 = 0, $78 = 0, $79 = 0, $status_1 = 0, $cmp289 = 0, $80 = 0, $and = 0, $add294 = 0, $81 = 0, $and297 = 0, $add299 = 0, $82 = 0, $tobool304 = 0, $or_cond = 0, $or_cond_not = 0, $83 = 0, $tobool307 = 0, $or_cond141 = 0, $84 = 0, $call309 = 0, $call310 = 0, $call311 = 0, $call312 = 0, $85 = 0, $tobool313 = 0, $call315 = 0, $86 = 0, $tobool317 = 0, $call319 = 0, $87 = 0, $shr = 0, $call326 = 0, $88 = 0, $shr_1 = 0, $and324_1 = 0, $call326_1 = 0, $89 = 0, $shr_2 = 0, $and324_2 = 0, $call326_2 = 0, $90 = 0, $and324_3 = 0, $call326_3 = 0, $91 = 0.0, $conv331 = 0, $call332 = 0, $call333 = 0, $92 = 0.0, $cmp334 = 0, $cmp337 = 0, $or_cond1 = 0, $call340 = 0, $93 = 0.0, $div341 = 0.0, $94 = 0.0, $conv343 = 0.0, $call344 = 0, $95 = 0.0, $conv345 = 0.0, $call346 = 0, $96 = 0.0, $conv347 = 0.0, $call348 = 0, $97 = 0, $tobool349 = 0, $cond350 = 0, $call351 = 0, $98 = 0, $call352 = 0, $99 = 0.0, $cmp353 = 0, $call356 = 0, $100 = 0, $tobool358 = 0, $101 = 0, $conv360 = 0, $102 = 0, $conv361 = 0, $call362 = 0, $103 = 0, $conv364 = 0, $104 = 0, $conv365 = 0, $call366 = 0, $105 = 0, $106 = 0, $call370 = 0, $_pr = 0, $tobool373 = 0, $107 = 0, $tobool376 = 0, $108 = 0, $109 = 0, $110 = 0, $tobool377_not = 0, $111 = 0.0, $tobool380 = 0, $112 = 0.0, $cmp381 = 0, $or_cond2 = 0, $113 = 0.0, $cmp384 = 0, $114 = 0, $conv388 = 0, $115 = 0, $conv389 = 0, $conv390 = 0, $add391 = 0, $shr393 = 0, $conv394 = 0, $116 = 0, $conv395 = 0, $conv396 = 0, $add397 = 0, $shr399 = 0, $conv400 = 0, $117 = 0, $tobool403 = 0, $118 = 0, $cmp405 = 0, $119 = 0, $120 = 0, $conv409 = 0, $mul = 0, $121 = 0, $div410 = 0, $cmp411 = 0, $conv417 = 0, $122 = 0, $123 = 0, $conv421 = 0, $add423 = 0, $shr425 = 0, $conv426 = 0, $conv427 = 0, $add429 = 0, $shr431 = 0, $conv432 = 0, $124 = 0, $tobool435 = 0, $conv437 = 0, $sub438 = 0, $add440 = 0, $shr442 = 0, $conv443 = 0, $conv444 = 0, $conv445 = 0.0, $div447 = 0.0, $conv448 = 0, $conv449 = 0, $conv450 = 0, $sub451 = 0, $conv452 = 0.0, $div454 = 0.0, $conv455 = 0, $125 = 0.0, $cmp457 = 0, $conv460 = 0, $conv461 = 0.0, $div462 = 0.0, $add463 = 0.0, $conv464 = 0, $126 = 0, $cmp466 = 0, $conv469 = 0, $conv470 = 0.0, $mul471 = 0.0, $add472 = 0.0, $conv473 = 0, $127 = 0, $128 = 0, $129 = 0, $and477 = 0, $tobool478 = 0, $call495 = 0, $130 = 0, $conv496 = 0, $131 = 0, $conv497 = 0, $call498 = 0, $132 = 0, $call499 = 0, $133 = 0, $tobool500 = 0, $call502 = 0, $i_2236 = 0, $shr507 = 0, $and508 = 0, $134 = 0, $135 = 0, $conv_i = 0, $add_i = 0, $and_i = 0, $136 = 0, $conv1_i = 0, $add2_i = 0, $and3_i = 0, $arrayidx4_i = 0, $137 = 0, $conv5_i = 0, $add9_i219 = 0, $rem_i = 0, $add10_i = 0, $rem11_i = 0, $arrayidx13_i = 0, $138 = 0, $conv14_i = 0, $shl_i = 0, $and16_i = 0, $add18_i = 0, $shl19_i = 0, $shr_i = 0, $and20_i = 0, $retval_0_i = 0, $arrayidx510 = 0, $139 = 0, $conv511 = 0, $140 = 0, $call512 = 0, $inc514 = 0, $exitcond = 0, $call517 = 0, $141 = 0, $cmp519237 = 0, $c_2238 = 0, $arrayidx522 = 0, $142 = 0.0, $conv523 = 0.0, $call524 = 0, $inc526 = 0, $143 = 0, $cmp519 = 0, $144 = 0.0, $cmp528 = 0, $call531 = 0, $145 = 0.0, $conv537 = 0.0, $call538 = 0, $146 = 0.0, $conv537_1 = 0.0, $call538_1 = 0, $147 = 0.0, $conv537_2 = 0.0, $call538_2 = 0, $148 = 0.0, $conv537_3 = 0.0, $call538_3 = 0, $149 = 0, $call543 = 0, $150 = 0, $call545 = 0, $status_2 = 0, $151 = 0, $call547 = 0, $152 = 0, $tobool549 = 0, $153 = 0.0, $cmp552 = 0, $or_cond142 = 0, $154 = 0, $tobool556 = 0, $call558 = 0, $tobool_i = 0, $_pre324 = 0, $155 = 0, $156 = 0, $call_i151 = 0, $157 = 0, $tobool560 = 0, $158 = 0, $cmp562 = 0, $or_cond3 = 0, $159 = 0, $conv565 = 0, $add566 = 0, $160 = 0, $conv567 = 0, $mul568 = 0, $cmp_i = 0, $mul_i = 0, $tobool_i152 = 0, $div_i = 0, $cmp1_i = 0, $mul__i = 0, $req_0_i = 0, $call_i154 = 0, $cmp4_i = 0, $head_i = 0, $161 = 0, $162 = 0, $and6_i = 0, $cmp7_i = 0, $163 = 0, $164 = 0, $call_i158 = 0, $165 = 0, $166 = 0, $conv571 = 0, $167 = 0, $conv572 = 0, $mul573 = 0, $cmp_i161 = 0, $mul_i162 = 0, $tobool_i164 = 0, $div_i166 = 0, $cmp1_i167 = 0, $mul__i168 = 0, $req_0_i170 = 0, $call_i171 = 0, $cmp4_i172 = 0, $head_i174 = 0, $168 = 0, $169 = 0, $and6_i175 = 0, $cmp7_i176 = 0, $170 = 0, $171 = 0, $call_i182 = 0, $172 = 0, $173 = 0, $tobool576 = 0, $174 = 0, $175 = 0, $call578 = 0, $176 = 0, $177 = 0, $cmp580 = 0, $178 = 0, $179 = 0, $call583 = 0, $180 = 0, $181 = 0, $call585 = 0, $182 = 0, $tobool586 = 0, $or_cond143 = 0, $183 = 0, $184 = 0, $conv590 = 0, $185 = 0, $conv591 = 0, $mul592 = 0, $186 = 0, $call593 = 0, $187 = 0, $callee_knr_cast = 0, $188 = 0, $cmp596 = 0, $_pre325 = 0, $_pre326 = 0, $189 = 0, $190 = 0, $conv599 = 0, $191 = 0, $conv600 = 0, $mul601 = 0, $192 = 0, $div602 = 0, $cmp603 = 0, $conv609 = 0, $193 = 0, $194 = 0, $conv613 = 0, $195 = 0, $conv614 = 0, $add615 = 0, $shr617 = 0, $conv618 = 0, $conv619 = 0, $add621 = 0, $shr623 = 0, $conv624 = 0, $196 = 0, $tobool625 = 0, $conv627 = 0, $conv628 = 0, $mul629 = 0, $cmp_i185 = 0, $mul_i186 = 0, $tobool_i188 = 0, $div_i190 = 0, $cmp1_i191 = 0, $mul__i192 = 0, $req_0_i194 = 0, $call_i195 = 0, $cmp4_i196 = 0, $head_i198 = 0, $197 = 0, $198 = 0, $and6_i199 = 0, $cmp7_i200 = 0, $199 = 0, $200 = 0, $call_i206 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $tobool632 = 0, $205 = 0, $lnot639 = 0, $lnot_ext640 = 0, $add641140 = 0, $206 = 0, $207 = 0, $cmp651 = 0, $_i_3 = 0, $208 = 0, $cmp651_1 = 0, $_i_3_1 = 0, $209 = 0, $cmp651_2 = 0, $_i_3_2 = 0, $sub664 = 0, $sub664_1 = 0, $sub664_2 = 0, $sub664_3 = 0, $210 = 0, $add668 = 0, $user_black_0_add668 = 0, $add678 = 0, $add678_1 = 0, $add678_2 = 0, $add678_3 = 0, $user_qual_0_add641140 = 0, $211 = 0, $tobool686 = 0, $212 = 0, $tobool688 = 0, $213 = 0, $cmp690 = 0, $or_cond4 = 0, $214 = 0, $conv694225 = 0, $215 = 0, $conv695226 = 0, $mul696227 = 0, $mul697228 = 0, $cmp698229 = 0, $216 = 0, $217 = 0, $i_5230 = 0, $218 = 0, $arrayidx702 = 0, $219 = 0, $cmp704 = 0, $_pre318 = 0, $_pre319 = 0, $220 = 0, $221 = 0, $inc711 = 0, $conv694 = 0, $conv695 = 0, $mul696 = 0, $mul697 = 0, $cmp698 = 0, $cmp716 = 0, $222 = 0, $tobool721 = 0, $223 = 0, $tobool723 = 0, $or_cond5 = 0, $cmp725 = 0, $cmp729 = 0, $224 = 0, $cmp732 = 0, $or_cond6 = 0, $cmp735 = 0, $or_cond7 = 0, $cmp739 = 0, $225 = 0, $tobool747 = 0, $226 = 0, $conv750231 = 0, $227 = 0, $conv751232 = 0, $mul752233 = 0, $cmp753234 = 0, $i_6235 = 0, $228 = 0, $arrayidx757 = 0, $229 = 0, $conv758 = 0, $arrayidx760 = 0, $230 = 0, $conv761 = 0, $add762 = 0, $shr763 = 0, $conv764 = 0, $inc768 = 0, $231 = 0, $conv750 = 0, $232 = 0, $conv751 = 0, $mul752 = 0, $cmp753 = 0, $233 = 0, $tobool771 = 0, $234 = 0, $cmp773 = 0, $or_cond8 = 0, $_pre = 0, $235 = 0, $tobool777 = 0, $236 = 0, $cmp779 = 0, $or_cond9 = 0, $_pre316 = 0, $_pre317 = 0, $237 = 0, $238 = 0, $tobool783 = 0, $cmp785 = 0, $or_cond10 = 0, $_pr218 = 0, $239 = 0, $status_3 = 0, $cmp795 = 0, $240 = 0, $tobool799 = 0, $cmp801 = 0, $or_cond11 = 0, $241 = 0, $mul805 = 0, $add_ptr_sum = 0, $add_ptr806 = 0, $write_ext_0 = 0, $242 = 0, $call809 = 0, $add810 = 0, $call811 = 0, $tobool_i209 = 0, $243 = 0, $244 = 0, $call_i211 = 0, $245 = 0, $call816 = 0, $call817 = 0, $tobool818 = 0, $246 = 0, $tobool821 = 0, $call823 = 0, $add_ptr824 = 0, $247 = 0, $sub825 = 0, $call826 = 0, $248 = 0, $call827 = 0, $strlen = 0, $endptr = 0, $call833 = 0, $call834 = 0, $tobool835 = 0, $249 = 0, $tobool839 = 0, $250 = 0, $call841 = 0, $251 = 0, $callee_knr_cast843 = 0, $252 = 0, $call844 = 0, $253 = 0, $254 = 0, $cmp845 = 0, $call848 = 0, $status_4 = 0, $ofname_0 = 0, $255 = 0, $tobool850 = 0, $tobool853 = 0, $256 = 0, $tobool856 = 0, $257 = 0, $258 = 0, $tobool859 = 0, $259 = 0, $260 = 0, $tobool862 = 0, $261 = 0, $inc864 = 0, $262 = 0, $cmp865 = 0, $dec = 0, $status_5 = 0, $arg_5 = 0, $inc872 = 0, $cmp219 = 0, $retval_0 = 0, label = 0, __stackBase__ = 0, mySetjmpIds = 0, setjmpTable = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  mySetjmpIds = {};
  setjmpTable = {
    "60": (function(value) {
      label = 253;
      $call222 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (label | 0) {
     case 2:
      $ut = __stackBase__ | 0;
      $call = _putenv(5576180) | 0;
      $cmp = ($argc | 0) == 1;
      if ($cmp) {
        label = 3;
        break;
      } else {
        label = 4;
        break;
      }
     case 3:
      $call1 = _printf(5576148, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5576140, tempInt) | 0) | 0;
      $puts = _puts(5244080) | 0;
      $0 = HEAP32[$argv >> 2] | 0;
      $call3 = _printf(5576104, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt) | 0) | 0;
      $call4 = _puts(5576068) | 0;
      $call5 = _puts(5576020) | 0;
      $call6 = _puts(5575976) | 0;
      $call7 = _puts(5575928) | 0;
      $call8 = _puts(5575876) | 0;
      $call9 = _puts(5575828) | 0;
      $call10 = _puts(5575780) | 0;
      $call11 = _puts(5575728) | 0;
      $call12 = _puts(5575676) | 0;
      $call13 = _puts(5575636) | 0;
      $call14 = _puts(5575584) | 0;
      $call15 = _puts(5575544) | 0;
      $call16 = _puts(5575492) | 0;
      $call17 = _puts(5575444) | 0;
      $call18 = _puts(5575404) | 0;
      $call19 = _puts(5575368) | 0;
      $call20 = _puts(5575320) | 0;
      $call21 = _puts(5575252) | 0;
      $call22 = _puts(5575196) | 0;
      $call23 = _puts(5575132) | 0;
      $call24 = _puts(5575076) | 0;
      $call25 = _puts(5575020) | 0;
      $call26 = _puts(5574972) | 0;
      $call27 = _puts(5574920) | 0;
      $call28 = _puts(5574872) | 0;
      $call29 = _puts(5574816) | 0;
      $call30 = _puts(5574776) | 0;
      $call31 = _puts(5574716) | 0;
      $call32 = _puts(5574672) | 0;
      $call33 = _puts(5574620) | 0;
      $call34 = _puts(5574560) | 0;
      $call35 = _puts(5574520) | 0;
      $call36 = _puts(5574472) | 0;
      $call37 = _puts(5574436) | 0;
      $putchar = _putchar(10) | 0;
      $retval_0 = 1;
      label = 252;
      break;
     case 4:
      $arrayidx39 = $argv + ($argc << 2) | 0;
      HEAP32[$arrayidx39 >> 2] = 5586740;
      $arrayidx40280 = $argv + 4 | 0;
      $1 = HEAP32[$arrayidx40280 >> 2] | 0;
      $2 = HEAP8[$1] | 0;
      $conv281 = $2 << 24 >> 24;
      $sub282 = $conv281 - 2 | 0;
      $or283 = $sub282 | 2;
      $cmp42284 = ($or283 | 0) == 43;
      if ($cmp42284) {
        $timestamp_only_0285 = 0;
        $thumbnail_only_0286 = 0;
        $identify_only_0287 = 0;
        $user_qual_0288 = -1;
        $user_black_0289 = -1;
        $user_sat_0290 = -1;
        $user_flip_0291 = -1;
        $use_fuji_rotate_0292 = 1;
        $write_to_stdout_0293 = 0;
        $read_from_stdin_0294 = 0;
        $bpfile_0295 = 0;
        $dark_frame_0296 = 0;
        $arg_0297 = 1;
        $4 = $1;
        $3 = $2;
        label = 5;
        break;
      } else {
        $timestamp_only_0_lcssa = 0;
        $thumbnail_only_0_lcssa = 0;
        $identify_only_0_lcssa = 0;
        $user_qual_0_lcssa = -1;
        $user_black_0_lcssa = -1;
        $user_sat_0_lcssa = -1;
        $user_flip_0_lcssa = -1;
        $use_fuji_rotate_0_lcssa = 1;
        $write_to_stdout_0_lcssa = 0;
        $read_from_stdin_0_lcssa = 0;
        $bpfile_0_lcssa = 0;
        $dark_frame_0_lcssa = 0;
        $arg_0_lcssa = 1;
        label = 51;
        break;
      }
     case 5:
      $inc = $arg_0297 + 1 | 0;
      $arrayidx45 = $4 + 1 | 0;
      $5 = HEAP8[$arrayidx45] | 0;
      $conv46 = $5 << 24 >> 24;
      $memchr = _memchr(5574412, $conv46 | 0, 13) | 0;
      $tobool = ($memchr | 0) == 0;
      if ($tobool) {
        label = 10;
        break;
      } else {
        label = 6;
        break;
      }
     case 6:
      $sub_ptr_lhs_cast = $memchr;
      $sub_ptr_sub = $sub_ptr_lhs_cast - 5574412 | 0;
      $arrayidx50 = $sub_ptr_sub + 5574396 | 0;
      $6 = HEAP8[$arrayidx50] | 0;
      $conv51 = $6 << 24 >> 24;
      $sub52 = $conv51 - 48 | 0;
      $i_0 = 0;
      label = 7;
      break;
     case 7:
      $cmp53 = ($i_0 | 0) < ($sub52 | 0);
      if ($cmp53) {
        label = 8;
        break;
      } else {
        label = 10;
        break;
      }
     case 8:
      $add = $i_0 + $inc | 0;
      $arrayidx56 = $argv + ($add << 2) | 0;
      $7 = HEAP32[$arrayidx56 >> 2] | 0;
      $8 = HEAP8[$7] | 0;
      $conv58 = $8 << 24 >> 24;
      $isdigittmp = $conv58 - 48 | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      $inc65 = $i_0 + 1 | 0;
      if ($isdigit) {
        $i_0 = $inc65;
        label = 7;
        break;
      } else {
        label = 9;
        break;
      }
     case 9:
      $9 = HEAP32[_stderr >> 2] | 0;
      $call63 = _fprintf($9 | 0, 5574364, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv46, tempInt) | 0) | 0;
      $retval_0 = 1;
      label = 252;
      break;
     case 10:
      if (($conv46 | 0) == 100) {
        label = 11;
        break;
      } else if (($conv46 | 0) == 114) {
        label = 12;
        break;
      } else if (($conv46 | 0) == 65) {
        label = 13;
        break;
      } else if (($conv46 | 0) == 110) {
        label = 14;
        break;
      } else if (($conv46 | 0) == 98) {
        label = 15;
        break;
      } else if (($conv46 | 0) == 67) {
        label = 16;
        break;
      } else if (($conv46 | 0) == 103) {
        label = 17;
        break;
      } else if (($conv46 | 0) == 107) {
        label = 19;
        break;
      } else if (($conv46 | 0) == 83) {
        label = 20;
        break;
      } else if (($conv46 | 0) == 116) {
        label = 21;
        break;
      } else if (($conv46 | 0) == 113) {
        label = 22;
        break;
      } else if (($conv46 | 0) == 109) {
        label = 23;
        break;
      } else if (($conv46 | 0) == 72) {
        label = 24;
        break;
      } else if (($conv46 | 0) == 115) {
        label = 25;
        break;
      } else if (($conv46 | 0) == 111) {
        label = 26;
        break;
      } else if (($conv46 | 0) == 122) {
        $arg_0_be = $inc;
        $dark_frame_0_be = $dark_frame_0296;
        $bpfile_0_be = $bpfile_0295;
        $read_from_stdin_0_be = $read_from_stdin_0294;
        $write_to_stdout_0_be = $write_to_stdout_0293;
        $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
        $user_flip_0_be = $user_flip_0291;
        $user_sat_0_be = $user_sat_0290;
        $user_black_0_be = $user_black_0289;
        $user_qual_0_be = $user_qual_0288;
        $identify_only_0_be = $identify_only_0287;
        $thumbnail_only_0_be = $thumbnail_only_0286;
        $timestamp_only_0_be = 1;
        label = 29;
        break;
      } else if (($conv46 | 0) == 80) {
        label = 30;
        break;
      } else if (($conv46 | 0) == 75) {
        label = 31;
        break;
      } else if (($conv46 | 0) == 101) {
        label = 32;
        break;
      } else if (($conv46 | 0) == 105) {
        label = 33;
        break;
      } else if (($conv46 | 0) == 99) {
        label = 34;
        break;
      } else if (($conv46 | 0) == 118) {
        label = 35;
        break;
      } else if (($conv46 | 0) == 104) {
        label = 36;
        break;
      } else if (($conv46 | 0) == 102) {
        label = 37;
        break;
      } else if (($conv46 | 0) == 97) {
        $arg_3 = $inc;
        label = 38;
        break;
      } else if (($conv46 | 0) == 119) {
        label = 39;
        break;
      } else if (($conv46 | 0) == 77) {
        label = 40;
        break;
      } else if (($conv46 | 0) == 73) {
        label = 41;
        break;
      } else if (($conv46 | 0) == 69) {
        label = 42;
        break;
      } else if (($conv46 | 0) == 68) {
        label = 43;
        break;
      } else if (($conv46 | 0) == 106) {
        label = 45;
        break;
      } else if (($conv46 | 0) == 87) {
        label = 46;
        break;
      } else if (($conv46 | 0) == 84) {
        label = 47;
        break;
      } else if (($conv46 | 0) == 52) {
        label = 48;
        break;
      } else if (($conv46 | 0) == 54) {
        label = 49;
        break;
      } else {
        label = 50;
        break;
      }
     case 11:
      $_pre321 = HEAP32[1357023] | 0;
      $44 = $_pre321;
      label = 44;
      break;
     case 12:
      $inc82 = $arg_0297 + 2 | 0;
      $arrayidx83 = $argv + ($inc << 2) | 0;
      $10 = HEAP32[$arrayidx83 >> 2] | 0;
      $call_i145 = +_strtod($10, 0);
      $conv85 = $call_i145;
      HEAPF32[1310885] = $conv85;
      $inc82_1 = $arg_0297 + 3 | 0;
      $arrayidx83_1 = $argv + ($inc82 << 2) | 0;
      $11 = HEAP32[$arrayidx83_1 >> 2] | 0;
      $call_i145_1 = +_strtod($11, 0);
      $conv85_1 = $call_i145_1;
      HEAPF32[1310886] = $conv85_1;
      $inc82_2 = $arg_0297 + 4 | 0;
      $arrayidx83_2 = $argv + ($inc82_1 << 2) | 0;
      $12 = HEAP32[$arrayidx83_2 >> 2] | 0;
      $call_i145_2 = +_strtod($12, 0);
      $conv85_2 = $call_i145_2;
      HEAPF32[1310887] = $conv85_2;
      $arrayidx83_3 = $argv + ($inc82_2 << 2) | 0;
      $13 = HEAP32[$arrayidx83_3 >> 2] | 0;
      $call_i145_3 = +_strtod($13, 0);
      $conv85_3 = $call_i145_3;
      HEAPF32[1310888] = $conv85_3;
      $14 = $arg_0297 + 5 | 0;
      $arg_0_be = $14;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 13:
      $inc173 = $arg_0297 + 2 | 0;
      $arrayidx174 = $argv + ($inc << 2) | 0;
      $15 = HEAP32[$arrayidx174 >> 2] | 0;
      $call175 = _atoi($15 | 0) | 0;
      HEAP32[1349704] = $call175;
      $inc173_1 = $arg_0297 + 3 | 0;
      $arrayidx174_1 = $argv + ($inc173 << 2) | 0;
      $16 = HEAP32[$arrayidx174_1 >> 2] | 0;
      $call175_1 = _atoi($16 | 0) | 0;
      HEAP32[1349705] = $call175_1;
      $inc173_2 = $arg_0297 + 4 | 0;
      $arrayidx174_2 = $argv + ($inc173_1 << 2) | 0;
      $17 = HEAP32[$arrayidx174_2 >> 2] | 0;
      $call175_2 = _atoi($17 | 0) | 0;
      HEAP32[1349706] = $call175_2;
      $arrayidx174_3 = $argv + ($inc173_2 << 2) | 0;
      $18 = HEAP32[$arrayidx174_3 >> 2] | 0;
      $call175_3 = _atoi($18 | 0) | 0;
      HEAP32[1349707] = $call175_3;
      $19 = $arg_0297 + 5 | 0;
      $arg_3 = $19;
      label = 38;
      break;
     case 14:
      $inc68 = $arg_0297 + 2 | 0;
      $arrayidx69 = $argv + ($inc << 2) | 0;
      $20 = HEAP32[$arrayidx69 >> 2] | 0;
      $call_i = +_strtod($20, 0);
      $conv71 = $call_i;
      HEAPF32[1311018] = $conv71;
      $arg_0_be = $inc68;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 15:
      $inc73 = $arg_0297 + 2 | 0;
      $arrayidx74 = $argv + ($inc << 2) | 0;
      $21 = HEAP32[$arrayidx74 >> 2] | 0;
      $call_i144 = +_strtod($21, 0);
      $conv76 = $call_i144;
      HEAPF32[1390315] = $conv76;
      $arg_0_be = $inc73;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 16:
      $inc91 = $arg_0297 + 2 | 0;
      $arrayidx92 = $argv + ($inc << 2) | 0;
      $22 = HEAP32[$arrayidx92 >> 2] | 0;
      $call_i146 = +_strtod($22, 0);
      $div = 1.0 / $call_i146;
      HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[1393342] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5573372 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $inc94 = $arg_0297 + 3 | 0;
      $arrayidx95 = $argv + ($inc91 << 2) | 0;
      $23 = HEAP32[$arrayidx95 >> 2] | 0;
      $call_i147 = +_strtod($23, 0);
      $div97 = 1.0 / $call_i147;
      HEAPF64[tempDoublePtr >> 3] = $div97, HEAP32[1393346] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5573388 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $arg_0_be = $inc94;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 17:
      $inc99 = $arg_0297 + 2 | 0;
      $arrayidx100 = $argv + ($inc << 2) | 0;
      $24 = HEAP32[$arrayidx100 >> 2] | 0;
      $call_i148 = +_strtod($24, 0);
      HEAPF64[tempDoublePtr >> 3] = $call_i148, HEAP32[1349743] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398976 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $inc102 = $arg_0297 + 3 | 0;
      $arrayidx103 = $argv + ($inc99 << 2) | 0;
      $25 = HEAP32[$arrayidx103 >> 2] | 0;
      $call_i149 = +_strtod($25, 0);
      HEAPF64[tempDoublePtr >> 3] = $call_i149, HEAP32[1349745] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398984 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1349743] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398976 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $tobool105 = $26 != 0.0;
      if ($tobool105) {
        label = 18;
        break;
      } else {
        $arg_0_be = $inc102;
        $dark_frame_0_be = $dark_frame_0296;
        $bpfile_0_be = $bpfile_0295;
        $read_from_stdin_0_be = $read_from_stdin_0294;
        $write_to_stdout_0_be = $write_to_stdout_0293;
        $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
        $user_flip_0_be = $user_flip_0291;
        $user_sat_0_be = $user_sat_0290;
        $user_black_0_be = $user_black_0289;
        $user_qual_0_be = $user_qual_0288;
        $identify_only_0_be = $identify_only_0287;
        $thumbnail_only_0_be = $thumbnail_only_0286;
        $timestamp_only_0_be = $timestamp_only_0285;
        label = 29;
        break;
      }
     case 18:
      $div107 = 1.0 / $26;
      HEAPF64[tempDoublePtr >> 3] = $div107, HEAP32[1349743] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398976 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      $arg_0_be = $inc102;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 19:
      $inc110 = $arg_0297 + 2 | 0;
      $arrayidx111 = $argv + ($inc << 2) | 0;
      $27 = HEAP32[$arrayidx111 >> 2] | 0;
      $call112 = _atoi($27 | 0) | 0;
      $arg_0_be = $inc110;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $call112;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 20:
      $inc114 = $arg_0297 + 2 | 0;
      $arrayidx115 = $argv + ($inc << 2) | 0;
      $28 = HEAP32[$arrayidx115 >> 2] | 0;
      $call116 = _atoi($28 | 0) | 0;
      $arg_0_be = $inc114;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $call116;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 21:
      $inc118 = $arg_0297 + 2 | 0;
      $arrayidx119 = $argv + ($inc << 2) | 0;
      $29 = HEAP32[$arrayidx119 >> 2] | 0;
      $call120 = _atoi($29 | 0) | 0;
      $arg_0_be = $inc118;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $call120;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 22:
      $inc122 = $arg_0297 + 2 | 0;
      $arrayidx123 = $argv + ($inc << 2) | 0;
      $30 = HEAP32[$arrayidx123 >> 2] | 0;
      $call124 = _atoi($30 | 0) | 0;
      $arg_0_be = $inc122;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $call124;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 23:
      $inc126 = $arg_0297 + 2 | 0;
      $arrayidx127 = $argv + ($inc << 2) | 0;
      $31 = HEAP32[$arrayidx127 >> 2] | 0;
      $call128 = _atoi($31 | 0) | 0;
      HEAP32[1315897] = $call128;
      $arg_0_be = $inc126;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 24:
      $inc130 = $arg_0297 + 2 | 0;
      $arrayidx131 = $argv + ($inc << 2) | 0;
      $32 = HEAP32[$arrayidx131 >> 2] | 0;
      $call132 = _atoi($32 | 0) | 0;
      HEAP32[1349701] = $call132;
      $arg_0_be = $inc130;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 25:
      $arrayidx134 = $argv + ($inc << 2) | 0;
      $33 = HEAP32[$arrayidx134 >> 2] | 0;
      $call135 = _atoi($33 | 0) | 0;
      $ispos = ($call135 | 0) > -1;
      $neg = -$call135 | 0;
      $call136 = $ispos ? $call135 : $neg;
      HEAP32[1311231] = $call136;
      $inc137 = $arg_0297 + 2 | 0;
      $34 = HEAP32[$arrayidx134 >> 2] | 0;
      $call139 = _strcmp($34 | 0, 5574360) | 0;
      $lnot = ($call139 | 0) == 0;
      $lnot_ext = $lnot & 1;
      HEAP32[1315844] = $lnot_ext;
      $arg_0_be = $inc137;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 26:
      $arrayidx142 = $argv + ($inc << 2) | 0;
      $35 = HEAP32[$arrayidx142 >> 2] | 0;
      $36 = HEAP8[$35] | 0;
      $conv144 = $36 << 24 >> 24;
      $isdigittmp214 = $conv144 - 48 | 0;
      $isdigit215 = $isdigittmp214 >>> 0 < 10;
      if ($isdigit215) {
        label = 27;
        break;
      } else {
        $arg_0_be = $inc;
        $dark_frame_0_be = $dark_frame_0296;
        $bpfile_0_be = $bpfile_0295;
        $read_from_stdin_0_be = $read_from_stdin_0294;
        $write_to_stdout_0_be = $write_to_stdout_0293;
        $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
        $user_flip_0_be = $user_flip_0291;
        $user_sat_0_be = $user_sat_0290;
        $user_black_0_be = $user_black_0289;
        $user_qual_0_be = $user_qual_0288;
        $identify_only_0_be = $identify_only_0287;
        $thumbnail_only_0_be = $thumbnail_only_0286;
        $timestamp_only_0_be = $timestamp_only_0285;
        label = 29;
        break;
      }
     case 27:
      $arrayidx148 = $35 + 1 | 0;
      $37 = HEAP8[$arrayidx148] | 0;
      $tobool149 = $37 << 24 >> 24 == 0;
      if ($tobool149) {
        label = 28;
        break;
      } else {
        $arg_0_be = $inc;
        $dark_frame_0_be = $dark_frame_0296;
        $bpfile_0_be = $bpfile_0295;
        $read_from_stdin_0_be = $read_from_stdin_0294;
        $write_to_stdout_0_be = $write_to_stdout_0293;
        $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
        $user_flip_0_be = $user_flip_0291;
        $user_sat_0_be = $user_sat_0290;
        $user_black_0_be = $user_black_0289;
        $user_qual_0_be = $user_qual_0288;
        $identify_only_0_be = $identify_only_0287;
        $thumbnail_only_0_be = $thumbnail_only_0286;
        $timestamp_only_0_be = $timestamp_only_0285;
        label = 29;
        break;
      }
     case 28:
      $inc151 = $arg_0297 + 2 | 0;
      $call153 = _atoi($35 | 0) | 0;
      HEAP32[1315757] = $call153;
      $arg_0_be = $inc151;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 29:
      $arrayidx40 = $argv + ($arg_0_be << 2) | 0;
      $38 = HEAP32[$arrayidx40 >> 2] | 0;
      $39 = HEAP8[$38] | 0;
      $conv = $39 << 24 >> 24;
      $sub = $conv - 2 | 0;
      $or = $sub | 2;
      $cmp42 = ($or | 0) == 43;
      if ($cmp42) {
        $timestamp_only_0285 = $timestamp_only_0_be;
        $thumbnail_only_0286 = $thumbnail_only_0_be;
        $identify_only_0287 = $identify_only_0_be;
        $user_qual_0288 = $user_qual_0_be;
        $user_black_0289 = $user_black_0_be;
        $user_sat_0290 = $user_sat_0_be;
        $user_flip_0291 = $user_flip_0_be;
        $use_fuji_rotate_0292 = $use_fuji_rotate_0_be;
        $write_to_stdout_0293 = $write_to_stdout_0_be;
        $read_from_stdin_0294 = $read_from_stdin_0_be;
        $bpfile_0295 = $bpfile_0_be;
        $dark_frame_0296 = $dark_frame_0_be;
        $arg_0297 = $arg_0_be;
        $4 = $38;
        $3 = $39;
        label = 5;
        break;
      } else {
        $timestamp_only_0_lcssa = $timestamp_only_0_be;
        $thumbnail_only_0_lcssa = $thumbnail_only_0_be;
        $identify_only_0_lcssa = $identify_only_0_be;
        $user_qual_0_lcssa = $user_qual_0_be;
        $user_black_0_lcssa = $user_black_0_be;
        $user_sat_0_lcssa = $user_sat_0_be;
        $user_flip_0_lcssa = $user_flip_0_be;
        $use_fuji_rotate_0_lcssa = $use_fuji_rotate_0_be;
        $write_to_stdout_0_lcssa = $write_to_stdout_0_be;
        $read_from_stdin_0_lcssa = $read_from_stdin_0_be;
        $bpfile_0_lcssa = $bpfile_0_be;
        $dark_frame_0_lcssa = $dark_frame_0_be;
        $arg_0_lcssa = $arg_0_be;
        label = 51;
        break;
      }
     case 30:
      $inc156 = $arg_0297 + 2 | 0;
      $arrayidx157 = $argv + ($inc << 2) | 0;
      $40 = HEAP32[$arrayidx157 >> 2] | 0;
      $arg_0_be = $inc156;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $40;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 31:
      $inc159 = $arg_0297 + 2 | 0;
      $arrayidx160 = $argv + ($inc << 2) | 0;
      $41 = HEAP32[$arrayidx160 >> 2] | 0;
      $arg_0_be = $inc159;
      $dark_frame_0_be = $41;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 32:
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = 1;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 33:
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = 1;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 34:
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = 1;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 35:
      HEAP32[1310884] = 1;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 36:
      HEAP32[1349703] = 1;
      label = 37;
      break;
     case 37:
      HEAP32[1350790] = 1;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 38:
      HEAP32[1310891] = 1;
      $arg_0_be = $arg_3;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 39:
      HEAP32[1310889] = 1;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 40:
      $cmp184 = $3 << 24 >> 24 == 43;
      $conv185 = $cmp184 & 1;
      HEAP32[1310890] = $conv185;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 41:
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = 1;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 42:
      $42 = HEAP32[1357023] | 0;
      $inc188 = $42 + 1 | 0;
      HEAP32[1357023] = $inc188;
      label = 43;
      break;
     case 43:
      $43 = HEAP32[1357023] | 0;
      $inc190 = $43 + 1 | 0;
      HEAP32[1357023] = $inc190;
      $44 = $inc190;
      label = 44;
      break;
     case 44:
      $inc192 = $44 + 1 | 0;
      HEAP32[1357023] = $inc192;
      label = 45;
      break;
     case 45:
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = 0;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 46:
      HEAP32[1315762] = 1;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 47:
      HEAP32[1315756] = 1;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 48:
      HEAP32[1315762] = 1;
      HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[1349745] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398984 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      HEAPF64[tempDoublePtr >> 3] = 1.0, HEAP32[1349743] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[5398976 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      label = 49;
      break;
     case 49:
      HEAP32[1315758] = 16;
      $arg_0_be = $inc;
      $dark_frame_0_be = $dark_frame_0296;
      $bpfile_0_be = $bpfile_0295;
      $read_from_stdin_0_be = $read_from_stdin_0294;
      $write_to_stdout_0_be = $write_to_stdout_0293;
      $use_fuji_rotate_0_be = $use_fuji_rotate_0292;
      $user_flip_0_be = $user_flip_0291;
      $user_sat_0_be = $user_sat_0290;
      $user_black_0_be = $user_black_0289;
      $user_qual_0_be = $user_qual_0288;
      $identify_only_0_be = $identify_only_0287;
      $thumbnail_only_0_be = $thumbnail_only_0286;
      $timestamp_only_0_be = $timestamp_only_0285;
      label = 29;
      break;
     case 50:
      $45 = HEAP32[_stderr >> 2] | 0;
      $call199 = _fprintf($45 | 0, 5574336, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv46, tempInt) | 0) | 0;
      $retval_0 = 1;
      label = 252;
      break;
     case 51:
      $46 = HEAP32[1310890] | 0;
      $cmp201 = ($46 | 0) < 0;
      if ($cmp201) {
        label = 52;
        break;
      } else {
        label = 53;
        break;
      }
     case 52:
      $47 = HEAP32[1310889] | 0;
      HEAP32[1310890] = $47;
      label = 53;
      break;
     case 53:
      $cmp205 = ($arg_0_lcssa | 0) == ($argc | 0);
      if ($cmp205) {
        label = 54;
        break;
      } else {
        label = 55;
        break;
      }
     case 54:
      $48 = HEAP32[_stderr >> 2] | 0;
      $49 = _fwrite(5574312, 21, 1, $48 | 0) | 0;
      $retval_0 = 1;
      label = 252;
      break;
     case 55:
      $tobool210 = ($write_to_stdout_0_lcssa | 0) != 0;
      if ($tobool210) {
        label = 56;
        break;
      } else {
        label = 57;
        break;
      }
     case 56:
      $call212 = _isatty(1) | 0;
      $tobool213 = ($call212 | 0) == 0;
      if ($tobool213) {
        label = 57;
        break;
      } else {
        label = 59;
        break;
      }
     case 57:
      $cmp219245 = ($arg_0_lcssa | 0) < ($argc | 0);
      if ($cmp219245) {
        label = 58;
        break;
      } else {
        $retval_0 = 0;
        label = 252;
        break;
      }
     case 58:
      $cmp246 = ($user_flip_0_lcssa | 0) > -1;
      $tobool255 = ($timestamp_only_0_lcssa | 0) == 0;
      $tobool274 = ($thumbnail_only_0_lcssa | 0) != 0;
      $tobool302 = ($identify_only_0_lcssa | 0) != 0;
      $tobool433 = ($use_fuji_rotate_0_lcssa | 0) == 0;
      $tobool588 = ($read_from_stdin_0_lcssa | 0) == 0;
      $tobool635 = ($dark_frame_0_lcssa | 0) == 0;
      $cmp642 = ($user_qual_0_lcssa | 0) > -1;
      $cmp669 = ($user_black_0_lcssa | 0) > -1;
      $cmp682 = ($user_sat_0_lcssa | 0) > 0;
      $tobool262 = ($identify_only_0_lcssa | 0) == 0;
      $modtime = $ut + 4 | 0;
      $actime = $ut | 0;
      $arg_4246 = $arg_0_lcssa;
      label = 60;
      break;
     case 59:
      $50 = HEAP32[_stderr >> 2] | 0;
      $51 = _fwrite(5574268, 41, 1, $50 | 0) | 0;
      $retval_0 = 1;
      label = 252;
      break;
     case 60:
      HEAP32[1311250] = 0;
      HEAP32[1316051] = 0;
      HEAP32[1315760] = 0;
      HEAP32[1315886] = 0;
      $52 = HEAP32[_stdout >> 2] | 0;
      HEAP32[1315761] = $52;
      $call222 = (tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label, HEAP32[1357012] = tempInt, 0);
      label = 253;
      break;
     case 253:
      $tobool223 = ($call222 | 0) == 0;
      if ($tobool223) {
        label = 65;
        break;
      } else {
        label = 61;
        break;
      }
     case 61:
      $53 = HEAP32[1316053] | 0;
      $call225 = _fileno($53 | 0) | 0;
      $cmp226 = ($call225 | 0) > 2;
      if ($cmp226) {
        label = 62;
        break;
      } else {
        label = 63;
        break;
      }
     case 62:
      $54 = HEAP32[1316053] | 0;
      $call229 = _fclose($54 | 0) | 0;
      label = 63;
      break;
     case 63:
      $55 = HEAP32[1315761] | 0;
      $call231 = _fileno($55 | 0) | 0;
      $cmp232 = ($call231 | 0) > 2;
      if ($cmp232) {
        label = 64;
        break;
      } else {
        $ofname_0 = 0;
        $status_4 = 1;
        label = 239;
        break;
      }
     case 64:
      $56 = HEAP32[1315761] | 0;
      $call235 = _fclose($56 | 0) | 0;
      $ofname_0 = 0;
      $status_4 = 1;
      label = 239;
      break;
     case 65:
      $arrayidx238 = $argv + ($arg_4246 << 2) | 0;
      $57 = HEAP32[$arrayidx238 >> 2] | 0;
      HEAP32[1316054] = $57;
      $call239 = _fopen($57 | 0, 5579128) | 0;
      HEAP32[1316053] = $call239;
      $tobool240 = ($call239 | 0) == 0;
      if ($tobool240) {
        label = 66;
        break;
      } else {
        label = 67;
        break;
      }
     case 66:
      $58 = HEAP32[1316054] | 0;
      _perror($58 | 0);
      $arg_5 = $arg_4246;
      $status_5 = 1;
      label = 251;
      break;
     case 67:
      _identify();
      $59 = HEAP32[1316049] | 0;
      $lnot244 = ($59 | 0) == 0;
      $lnot_ext245 = $lnot244 & 1;
      if ($cmp246) {
        label = 69;
        break;
      } else {
        label = 68;
        break;
      }
     case 68:
      $_pre322 = HEAP32[1350792] | 0;
      $60 = $_pre322;
      label = 70;
      break;
     case 69:
      HEAP32[1350792] = $user_flip_0_lcssa;
      $60 = $user_flip_0_lcssa;
      label = 70;
      break;
     case 70:
      $add250 = $60 + 3600 | 0;
      $rem = ($add250 | 0) % 360;
      if (($rem | 0) == 270) {
        label = 71;
        break;
      } else if (($rem | 0) == 180) {
        label = 72;
        break;
      } else if (($rem | 0) == 90) {
        label = 73;
        break;
      } else {
        label = 74;
        break;
      }
     case 71:
      HEAP32[1350792] = 5;
      label = 74;
      break;
     case 72:
      HEAP32[1350792] = 3;
      label = 74;
      break;
     case 73:
      HEAP32[1350792] = 6;
      label = 74;
      break;
     case 74:
      if ($tobool255) {
        label = 82;
        break;
      } else {
        label = 75;
        break;
      }
     case 75:
      $61 = HEAP32[1310894] | 0;
      $lnot258 = ($61 | 0) == 0;
      $lnot_ext259 = $lnot258 & 1;
      if ($lnot258) {
        label = 76;
        break;
      } else {
        label = 77;
        break;
      }
     case 76:
      $62 = HEAP32[_stderr >> 2] | 0;
      $63 = HEAP32[1316054] | 0;
      $call261 = _fprintf($62 | 0, 5574244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $63, tempInt) | 0) | 0;
      $status_2 = $lnot_ext259;
      label = 139;
      break;
     case 77:
      if ($tobool262) {
        label = 79;
        break;
      } else {
        label = 78;
        break;
      }
     case 78:
      $64 = HEAP32[1311232] | 0;
      $65 = HEAP32[1316054] | 0;
      $call264 = _printf(5574228, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $61, HEAP32[tempInt + 4 >> 2] = $64, HEAP32[tempInt + 8 >> 2] = $65, tempInt) | 0) | 0;
      $status_2 = $lnot_ext259;
      label = 139;
      break;
     case 79:
      $66 = HEAP32[1310884] | 0;
      $tobool266 = ($66 | 0) == 0;
      if ($tobool266) {
        $69 = $61;
        label = 81;
        break;
      } else {
        label = 80;
        break;
      }
     case 80:
      $67 = HEAP32[_stderr >> 2] | 0;
      $68 = HEAP32[1316054] | 0;
      $call268 = _fprintf($67 | 0, 5574208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $68, HEAP32[tempInt + 4 >> 2] = $61, tempInt) | 0) | 0;
      $_pre320 = HEAP32[1310894] | 0;
      $69 = $_pre320;
      label = 81;
      break;
     case 81:
      HEAP32[$modtime >> 2] = $69;
      HEAP32[$actime >> 2] = $69;
      $70 = HEAP32[1316054] | 0;
      $call270 = _utime($70 | 0, $ut | 0) | 0;
      $status_2 = $lnot_ext259;
      label = 139;
      break;
     case 82:
      HEAP32[1310741] = 82;
      if ($tobool274) {
        label = 84;
        break;
      } else {
        label = 83;
        break;
      }
     case 83:
      $_pre323 = HEAP32[1315947] | 0;
      $status_1 = $lnot_ext245;
      $79 = $_pre323;
      label = 89;
      break;
     case 84:
      $71 = HEAP32[1311013] | 0;
      $lnot277 = ($71 | 0) == 0;
      $lnot_ext278 = $lnot277 & 1;
      if ($lnot277) {
        label = 85;
        break;
      } else {
        label = 86;
        break;
      }
     case 85:
      $72 = HEAP32[_stderr >> 2] | 0;
      $73 = HEAP32[1316054] | 0;
      $call280 = _fprintf($72 | 0, 5574176, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $73, tempInt) | 0) | 0;
      $status_2 = $lnot_ext278;
      label = 139;
      break;
     case 86:
      $74 = HEAP32[1311015] | 0;
      $tobool282 = ($74 | 0) == 0;
      if ($tobool282) {
        label = 88;
        break;
      } else {
        label = 87;
        break;
      }
     case 87:
      HEAP32[1315947] = $74;
      HEAP32[1357153] = $71;
      $75 = HEAP16[2622034] | 0;
      HEAP16[2699404] = $75;
      $76 = HEAP16[2622024] | 0;
      HEAP16[2621484] = $76;
      HEAP32[1356938] = 0;
      $status_1 = $lnot_ext278;
      $79 = $74;
      label = 89;
      break;
     case 88:
      $77 = HEAP32[1316053] | 0;
      $call285 = _fseek($77 | 0, $71 | 0, 0) | 0;
      $78 = HEAP32[1310740] | 0;
      HEAP32[1310741] = $78;
      $status_3 = $lnot_ext278;
      $239 = $78;
      label = 220;
      break;
     case 89:
      $cmp289 = ($79 | 0) == 8;
      if ($cmp289) {
        label = 90;
        break;
      } else {
        label = 91;
        break;
      }
     case 90:
      $80 = HEAP16[2699404] | 0;
      $and = $80 & 1;
      $add294 = $and + $80 & 65535;
      HEAP16[2699404] = $add294;
      $81 = HEAP16[2621484] | 0;
      $and297 = $81 & 1;
      $add299 = $and297 + $81 & 65535;
      HEAP16[2621484] = $add299;
      label = 91;
      break;
     case 91:
      $82 = HEAP32[1310884] | 0;
      $tobool304 = ($82 | 0) != 0;
      $or_cond = $tobool302 & $tobool304;
      $or_cond_not = $or_cond ^ 1;
      $83 = HEAP8[5263724] | 0;
      $tobool307 = $83 << 24 >> 24 == 0;
      $or_cond141 = $tobool307 | $or_cond_not;
      if ($or_cond141) {
        label = 103;
        break;
      } else {
        label = 92;
        break;
      }
     case 92:
      $84 = HEAP32[1316054] | 0;
      $call309 = _printf(5574160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $84, tempInt) | 0) | 0;
      $call310 = _ctime(5243576) | 0;
      $call311 = _printf(5574144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call310, tempInt) | 0) | 0;
      $call312 = _printf(5574128, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 5263724, HEAP32[tempInt + 4 >> 2] = 5263468, tempInt) | 0) | 0;
      $85 = HEAP8[5561524] | 0;
      $tobool313 = $85 << 24 >> 24 == 0;
      if ($tobool313) {
        label = 94;
        break;
      } else {
        label = 93;
        break;
      }
     case 93:
      $call315 = _printf(5574116, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5561524, tempInt) | 0) | 0;
      label = 94;
      break;
     case 94:
      $86 = HEAP32[1357024] | 0;
      $tobool317 = ($86 | 0) == 0;
      if ($tobool317) {
        label = 96;
        break;
      } else {
        label = 95;
        break;
      }
     case 95:
      $call319 = _printf(5574100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $87 = HEAP32[1357024] | 0;
      $shr = $87 >>> 24;
      $call326 = _printf(5574092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr, HEAP32[tempInt + 4 >> 2] = 46, tempInt) | 0) | 0;
      $88 = HEAP32[1357024] | 0;
      $shr_1 = $88 >>> 16;
      $and324_1 = $shr_1 & 255;
      $call326_1 = _printf(5574092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_1, HEAP32[tempInt + 4 >> 2] = 46, tempInt) | 0) | 0;
      $89 = HEAP32[1357024] | 0;
      $shr_2 = $89 >>> 8;
      $and324_2 = $shr_2 & 255;
      $call326_2 = _printf(5574092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_2, HEAP32[tempInt + 4 >> 2] = 46, tempInt) | 0) | 0;
      $90 = HEAP32[1357024] | 0;
      $and324_3 = $90 & 255;
      $call326_3 = _printf(5574092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_3, HEAP32[tempInt + 4 >> 2] = 10, tempInt) | 0) | 0;
      label = 96;
      break;
     case 96:
      $91 = +HEAPF32[1316048];
      $conv331 = ~~$91;
      $call332 = _printf(5574076, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv331, tempInt) | 0) | 0;
      $call333 = _printf(5574064, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $92 = +HEAPF32[1311229];
      $cmp334 = $92 > 0.0;
      $cmp337 = $92 < 1.0;
      $or_cond1 = $cmp334 & $cmp337;
      if ($or_cond1) {
        label = 97;
        break;
      } else {
        $94 = $92;
        label = 98;
        break;
      }
     case 97:
      $call340 = _printf(5574060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $93 = +HEAPF32[1311229];
      $div341 = 1.0 / $93;
      HEAPF32[1311229] = $div341;
      $94 = $div341;
      label = 98;
      break;
     case 98:
      $conv343 = $94;
      $call344 = _printf(5574044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv343, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $95 = +HEAPF32[1390397];
      $conv345 = $95;
      $call346 = _printf(5574024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv345, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $96 = +HEAPF32[1350791];
      $conv347 = $96;
      $call348 = _printf(5574e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv347, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $97 = HEAP32[1311402] | 0;
      $tobool349 = ($97 | 0) != 0;
      $cond350 = $tobool349 ? 5573968 : 5573964;
      $call351 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $cond350, tempInt) | 0) | 0;
      $98 = HEAP32[1316049] | 0;
      $call352 = _printf(5573936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $98, tempInt) | 0) | 0;
      $99 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $cmp353 = $99 != 1.0;
      if ($cmp353) {
        label = 99;
        break;
      } else {
        label = 100;
        break;
      }
     case 99:
      $call356 = _printf(5573908, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $99, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      label = 100;
      break;
     case 100:
      $100 = HEAP32[1311013] | 0;
      $tobool358 = ($100 | 0) == 0;
      if ($tobool358) {
        label = 102;
        break;
      } else {
        label = 101;
        break;
      }
     case 101:
      $101 = HEAP16[2622024] | 0;
      $conv360 = $101 & 65535;
      $102 = HEAP16[2622034] | 0;
      $conv361 = $102 & 65535;
      $call362 = _printf(5573884, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv360, HEAP32[tempInt + 4 >> 2] = $conv361, tempInt) | 0) | 0;
      label = 102;
      break;
     case 102:
      $103 = HEAP16[2622498] | 0;
      $conv364 = $103 & 65535;
      $104 = HEAP16[2622502] | 0;
      $conv365 = $104 & 65535;
      $call366 = _printf(5573860, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv364, HEAP32[tempInt + 4 >> 2] = $conv365, tempInt) | 0) | 0;
      label = 105;
      break;
     case 103:
      if ($lnot244) {
        label = 104;
        break;
      } else {
        label = 106;
        break;
      }
     case 104:
      $105 = HEAP32[_stderr >> 2] | 0;
      $106 = HEAP32[1316054] | 0;
      $call370 = _fprintf($105 | 0, 5573832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $106, tempInt) | 0) | 0;
      label = 105;
      break;
     case 105:
      $_pr = HEAP32[1316049] | 0;
      $tobool373 = ($_pr | 0) == 0;
      if ($tobool373) {
        $status_2 = $status_1;
        label = 139;
        break;
      } else {
        label = 106;
        break;
      }
     case 106:
      $107 = HEAP32[1356938] | 0;
      $tobool376 = ($107 | 0) == 0;
      if ($tobool376) {
        $114 = 0;
        label = 111;
        break;
      } else {
        label = 107;
        break;
      }
     case 107:
      $108 = HEAP32[1349703] | 0;
      $109 = $108 | $identify_only_0_lcssa;
      $110 = ($109 | 0) == 0;
      if ($110) {
        label = 109;
        break;
      } else {
        label = 108;
        break;
      }
     case 108:
      $tobool377_not = ($108 | 0) != 0;
      $114 = $tobool377_not;
      label = 111;
      break;
     case 109:
      $111 = +HEAPF32[1311018];
      $tobool380 = $111 != 0.0;
      $112 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1393342] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573372 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $cmp381 = $112 != 1.0;
      $or_cond2 = $tobool380 | $cmp381;
      if ($or_cond2) {
        $114 = 1;
        label = 111;
        break;
      } else {
        label = 110;
        break;
      }
     case 110:
      $113 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1393346] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573388 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $cmp384 = $113 != 1.0;
      $114 = $cmp384;
      label = 111;
      break;
     case 111:
      $conv388 = $114 & 1;
      HEAP16[2622460] = $conv388;
      $115 = HEAP16[2699404] | 0;
      $conv389 = $115 & 65535;
      $conv390 = $114 & 1;
      $add391 = $conv389 + $conv390 | 0;
      $shr393 = $add391 >>> ($conv390 >>> 0);
      $conv394 = $shr393 & 65535;
      HEAP16[2632104] = $conv394;
      $116 = HEAP16[2621484] | 0;
      $conv395 = $116 & 65535;
      $conv396 = $114 & 1;
      $add397 = $conv396 + $conv395 | 0;
      $shr399 = $add397 >>> ($conv396 >>> 0);
      $conv400 = $shr399 & 65535;
      HEAP16[2632094] = $conv400;
      if ($tobool302) {
        label = 112;
        break;
      } else {
        label = 140;
        break;
      }
     case 112:
      $117 = HEAP32[1310884] | 0;
      $tobool403 = ($117 | 0) == 0;
      if ($tobool403) {
        label = 138;
        break;
      } else {
        label = 113;
        break;
      }
     case 113:
      $118 = HEAP32[1357023] | 0;
      $cmp405 = ($118 | 0) == 3;
      if ($cmp405) {
        label = 114;
        break;
      } else {
        $123 = $115;
        $122 = $116;
        label = 117;
        break;
      }
     case 114:
      HEAP16[2699510] = 0;
      HEAP16[2631898] = 0;
      HEAP16[2621786] = 0;
      $119 = HEAP16[2622502] | 0;
      HEAP16[2699404] = $119;
      $120 = HEAP16[2622498] | 0;
      $conv409 = $120 & 65535;
      $mul = $conv409 << 3;
      $121 = HEAP32[1311011] | 0;
      $div410 = ($mul >>> 0) / ($121 >>> 0) >>> 0;
      $cmp411 = $conv395 >>> 0 > $div410 >>> 0;
      if ($cmp411) {
        label = 116;
        break;
      } else {
        label = 115;
        break;
      }
     case 115:
      $conv417 = $div410 & 65535;
      HEAP16[2621484] = $conv417;
      $123 = $119;
      $122 = $conv417;
      label = 117;
      break;
     case 116:
      HEAP16[2621484] = $120;
      $123 = $119;
      $122 = $120;
      label = 117;
      break;
     case 117:
      $conv421 = $123 & 65535;
      $add423 = $conv396 + $conv421 | 0;
      $shr425 = $add423 >>> ($conv396 >>> 0);
      $conv426 = $shr425 & 65535;
      HEAP16[2632104] = $conv426;
      $conv427 = $122 & 65535;
      $add429 = $conv396 + $conv427 | 0;
      $shr431 = $add429 >>> ($conv396 >>> 0);
      $conv432 = $shr431 & 65535;
      HEAP16[2632094] = $conv432;
      if ($tobool433) {
        $128 = $conv426;
        $127 = $conv432;
        label = 124;
        break;
      } else {
        label = 118;
        break;
      }
     case 118:
      $124 = HEAP16[2699510] | 0;
      $tobool435 = $124 << 16 >> 16 == 0;
      if ($tobool435) {
        label = 120;
        break;
      } else {
        label = 119;
        break;
      }
     case 119:
      $conv437 = $124 & 65535;
      $sub438 = $conv437 - 1 | 0;
      $add440 = $sub438 + $conv396 | 0;
      $shr442 = $add440 >> $conv396;
      $conv443 = $shr442 & 65535;
      HEAP16[2699510] = $conv443;
      $conv444 = $shr442 & 65535;
      $conv445 = +($conv444 | 0);
      $div447 = $conv445 / .7071067811865476;
      $conv448 = ~~$div447;
      HEAP16[2632094] = $conv448;
      $conv449 = $shr425 & 65535;
      $conv450 = $shr442 & 65535;
      $sub451 = $conv449 - $conv450 | 0;
      $conv452 = +($sub451 | 0);
      $div454 = $conv452 / .7071067811865476;
      $conv455 = ~~$div454;
      HEAP16[2632104] = $conv455;
      $128 = $conv455;
      $127 = $conv448;
      label = 124;
      break;
     case 120:
      $125 = (HEAP32[tempDoublePtr >> 2] = HEAP32[1311425] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[1311426] | 0, +HEAPF64[tempDoublePtr >> 3]);
      $cmp457 = $125 < 1.0;
      if ($cmp457) {
        label = 121;
        break;
      } else {
        $126 = $conv426;
        label = 122;
        break;
      }
     case 121:
      $conv460 = $shr425 & 65535;
      $conv461 = +($conv460 | 0);
      $div462 = $conv461 / $125;
      $add463 = $div462 + .5;
      $conv464 = ~~$add463;
      HEAP16[2632104] = $conv464;
      $126 = $conv464;
      label = 122;
      break;
     case 122:
      $cmp466 = $125 > 1.0;
      if ($cmp466) {
        label = 123;
        break;
      } else {
        $128 = $126;
        $127 = $conv432;
        label = 124;
        break;
      }
     case 123:
      $conv469 = $shr431 & 65535;
      $conv470 = +($conv469 | 0);
      $mul471 = $125 * $conv470;
      $add472 = $mul471 + .5;
      $conv473 = ~~$add472;
      HEAP16[2632094] = $conv473;
      $128 = $126;
      $127 = $conv473;
      label = 124;
      break;
     case 124:
      $129 = HEAP32[1350792] | 0;
      $and477 = $129 & 4;
      $tobool478 = ($and477 | 0) == 0;
      if ($tobool478) {
        label = 126;
        break;
      } else {
        label = 125;
        break;
      }
     case 125:
      HEAP16[2632094] = $128;
      HEAP16[2632104] = $127;
      label = 126;
      break;
     case 126:
      $call495 = _printf(5573808, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv427, HEAP32[tempInt + 4 >> 2] = $conv421, tempInt) | 0) | 0;
      $130 = HEAP16[2632094] | 0;
      $conv496 = $130 & 65535;
      $131 = HEAP16[2632104] | 0;
      $conv497 = $131 & 65535;
      $call498 = _printf(5573784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv496, HEAP32[tempInt + 4 >> 2] = $conv497, tempInt) | 0) | 0;
      $132 = HEAP32[1390240] | 0;
      $call499 = _printf(5573768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $132, tempInt) | 0) | 0;
      $133 = HEAP32[1356938] | 0;
      $tobool500 = ($133 | 0) == 0;
      if ($tobool500) {
        label = 133;
        break;
      } else {
        label = 127;
        break;
      }
     case 127:
      $call502 = _printf(5573748, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $i_2236 = 0;
      label = 128;
      break;
     case 128:
      $shr507 = $i_2236 >> 1;
      $and508 = $i_2236 & 1;
      $134 = HEAP32[1356938] | 0;
      if (($134 | 0) == 1) {
        label = 129;
        break;
      } else if (($134 | 0) == 2) {
        label = 130;
        break;
      } else {
        label = 131;
        break;
      }
     case 129:
      $135 = HEAP16[2631898] | 0;
      $conv_i = $135 & 65535;
      $add_i = $conv_i + $and508 | 0;
      $and_i = $add_i & 15;
      $136 = HEAP16[2621786] | 0;
      $conv1_i = $136 & 65535;
      $add2_i = $conv1_i + $shr507 | 0;
      $and3_i = $add2_i & 15;
      $arrayidx4_i = 5427792 + ($and3_i << 4) + $and_i | 0;
      $137 = HEAP8[$arrayidx4_i] | 0;
      $conv5_i = $137 << 24 >> 24;
      $retval_0_i = $conv5_i;
      label = 132;
      break;
     case 130:
      $add9_i219 = $and508 | 6;
      $rem_i = ($add9_i219 >>> 0) % 6;
      $add10_i = $shr507 + 6 | 0;
      $rem11_i = ($add10_i | 0) % 6;
      $arrayidx13_i = 5427756 + ($rem11_i * 6 & -1) + $rem_i | 0;
      $138 = HEAP8[$arrayidx13_i] | 0;
      $conv14_i = $138 << 24 >> 24;
      $retval_0_i = $conv14_i;
      label = 132;
      break;
     case 131:
      $shl_i = $shr507 << 1;
      $and16_i = $shl_i & 14;
      $add18_i = $and16_i | $and508;
      $shl19_i = $add18_i << 1;
      $shr_i = $134 >>> ($shl19_i >>> 0);
      $and20_i = $shr_i & 3;
      $retval_0_i = $and20_i;
      label = 132;
      break;
     case 132:
      $arrayidx510 = $retval_0_i + 5561016 | 0;
      $139 = HEAP8[$arrayidx510] | 0;
      $conv511 = $139 << 24 >> 24;
      $140 = HEAP32[_stdout >> 2] | 0;
      $call512 = _fputc($conv511 | 0, $140 | 0) | 0;
      $inc514 = $i_2236 + 1 | 0;
      $exitcond = ($inc514 | 0) == 16;
      if ($exitcond) {
        label = 133;
        break;
      } else {
        $i_2236 = $inc514;
        label = 128;
        break;
      }
     case 133:
      $call517 = _printf(5573724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $141 = HEAP32[1390240] | 0;
      $cmp519237 = ($141 | 0) > 0;
      if ($cmp519237) {
        $c_2238 = 0;
        label = 134;
        break;
      } else {
        label = 135;
        break;
      }
     case 134:
      $arrayidx522 = 5245612 + ($c_2238 << 2) | 0;
      $142 = +HEAPF32[$arrayidx522 >> 2];
      $conv523 = $142;
      $call524 = _printf(5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv523, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $inc526 = $c_2238 + 1 | 0;
      $143 = HEAP32[1390240] | 0;
      $cmp519 = ($inc526 | 0) < ($143 | 0);
      if ($cmp519) {
        $c_2238 = $inc526;
        label = 134;
        break;
      } else {
        label = 135;
        break;
      }
     case 135:
      $144 = +HEAPF32[1390311];
      $cmp528 = $144 > 0.0;
      if ($cmp528) {
        label = 136;
        break;
      } else {
        label = 137;
        break;
      }
     case 136:
      $call531 = _printf(5573700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
      $145 = +HEAPF32[1390311];
      $conv537 = $145;
      $call538 = _printf(5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $146 = +HEAPF32[1390312];
      $conv537_1 = $146;
      $call538_1 = _printf(5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_1, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $147 = +HEAPF32[1390313];
      $conv537_2 = $147;
      $call538_2 = _printf(5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_2, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      $148 = +HEAPF32[1390314];
      $conv537_3 = $148;
      $call538_3 = _printf(5578008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_3, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0, tempInt) | 0) | 0;
      label = 137;
      break;
     case 137:
      $149 = HEAP32[_stdout >> 2] | 0;
      $call543 = _fputc(10, $149 | 0) | 0;
      $status_2 = $status_1;
      label = 139;
      break;
     case 138:
      $150 = HEAP32[1316054] | 0;
      $call545 = _printf(5573676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $150, HEAP32[tempInt + 4 >> 2] = 5263724, HEAP32[tempInt + 8 >> 2] = 5263468, tempInt) | 0) | 0;
      $status_2 = $status_1;
      label = 139;
      break;
     case 139:
      $151 = HEAP32[1316053] | 0;
      $call547 = _fclose($151 | 0) | 0;
      $arg_5 = $arg_4246;
      $status_5 = $status_2;
      label = 251;
      break;
     case 140:
      $152 = HEAP32[1310890] | 0;
      $tobool549 = ($152 | 0) != 0;
      $153 = +HEAPF32[1390241];
      $cmp552 = $153 > .25;
      $or_cond142 = $tobool549 & $cmp552;
      if ($or_cond142) {
        label = 141;
        break;
      } else {
        label = 142;
        break;
      }
     case 141:
      _memcpy(5244932, 5560964, 48);
      HEAP32[1311252] = 0;
      label = 142;
      break;
     case 142:
      $154 = HEAP32[1315885] | 0;
      $tobool556 = ($154 | 0) == 0;
      if ($tobool556) {
        $157 = $107;
        label = 146;
        break;
      } else {
        label = 143;
        break;
      }
     case 143:
      $call558 = _malloc($154) | 0;
      HEAP32[1315886] = $call558;
      $tobool_i = ($call558 | 0) == 0;
      if ($tobool_i) {
        label = 145;
        break;
      } else {
        label = 144;
        break;
      }
     case 144:
      $_pre324 = HEAP32[1356938] | 0;
      $157 = $_pre324;
      label = 146;
      break;
     case 145:
      $155 = HEAP32[_stderr >> 2] | 0;
      $156 = HEAP32[1316054] | 0;
      $call_i151 = _fprintf($155 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $156, HEAP32[tempInt + 4 >> 2] = 5573668, tempInt) | 0) | 0;
      _longjmp(5428048, 1);
     case 146:
      $tobool560 = ($157 | 0) != 0;
      $158 = HEAP32[1390240] | 0;
      $cmp562 = ($158 | 0) == 1;
      $or_cond3 = $tobool560 | $cmp562;
      if ($or_cond3) {
        label = 147;
        break;
      } else {
        label = 155;
        break;
      }
     case 147:
      $159 = HEAP16[2622502] | 0;
      $conv565 = $159 & 65535;
      $add566 = $conv565 + 7 | 0;
      $160 = HEAP16[2622498] | 0;
      $conv567 = $160 & 65535;
      $mul568 = Math_imul($add566, $conv567);
      $cmp_i = ($mul568 | 0) == 0;
      if ($cmp_i) {
        $req_0_i = 0;
        label = 150;
        break;
      } else {
        label = 148;
        break;
      }
     case 148:
      $mul_i = $mul568 << 1;
      $tobool_i152 = $mul568 >>> 0 > 65535;
      if ($tobool_i152) {
        label = 149;
        break;
      } else {
        $req_0_i = $mul_i;
        label = 150;
        break;
      }
     case 149:
      $div_i = ($mul_i >>> 0) / ($mul568 >>> 0) >>> 0;
      $cmp1_i = ($div_i | 0) == 2;
      $mul__i = $cmp1_i ? $mul_i : -1;
      $req_0_i = $mul__i;
      label = 150;
      break;
     case 150:
      $call_i154 = _malloc($req_0_i) | 0;
      $cmp4_i = ($call_i154 | 0) == 0;
      if ($cmp4_i) {
        label = 153;
        break;
      } else {
        label = 151;
        break;
      }
     case 151:
      $head_i = $call_i154 - 4 | 0;
      $161 = $head_i;
      $162 = HEAP32[$161 >> 2] | 0;
      $and6_i = $162 & 3;
      $cmp7_i = ($and6_i | 0) == 0;
      if ($cmp7_i) {
        label = 154;
        break;
      } else {
        label = 152;
        break;
      }
     case 152:
      _memset($call_i154 | 0, 0, $req_0_i | 0);
      label = 154;
      break;
     case 153:
      HEAP32[1311250] = 0;
      $163 = HEAP32[_stderr >> 2] | 0;
      $164 = HEAP32[1316054] | 0;
      $call_i158 = _fprintf($163 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $164, HEAP32[tempInt + 4 >> 2] = 5573668, tempInt) | 0) | 0;
      _longjmp(5428048, 1);
     case 154:
      $165 = $call_i154;
      HEAP32[1311250] = $165;
      label = 163;
      break;
     case 155:
      $166 = HEAP16[2632104] | 0;
      $conv571 = $166 & 65535;
      $167 = HEAP16[2632094] | 0;
      $conv572 = $167 & 65535;
      $mul573 = Math_imul($conv572, $conv571);
      $cmp_i161 = ($mul573 | 0) == 0;
      if ($cmp_i161) {
        $req_0_i170 = 0;
        label = 158;
        break;
      } else {
        label = 156;
        break;
      }
     case 156:
      $mul_i162 = $mul573 << 3;
      $tobool_i164 = $mul573 >>> 0 > 65535;
      if ($tobool_i164) {
        label = 157;
        break;
      } else {
        $req_0_i170 = $mul_i162;
        label = 158;
        break;
      }
     case 157:
      $div_i166 = ($mul_i162 >>> 0) / ($mul573 >>> 0) >>> 0;
      $cmp1_i167 = ($div_i166 | 0) == 8;
      $mul__i168 = $cmp1_i167 ? $mul_i162 : -1;
      $req_0_i170 = $mul__i168;
      label = 158;
      break;
     case 158:
      $call_i171 = _malloc($req_0_i170) | 0;
      $cmp4_i172 = ($call_i171 | 0) == 0;
      if ($cmp4_i172) {
        label = 161;
        break;
      } else {
        label = 159;
        break;
      }
     case 159:
      $head_i174 = $call_i171 - 4 | 0;
      $168 = $head_i174;
      $169 = HEAP32[$168 >> 2] | 0;
      $and6_i175 = $169 & 3;
      $cmp7_i176 = ($and6_i175 | 0) == 0;
      if ($cmp7_i176) {
        label = 162;
        break;
      } else {
        label = 160;
        break;
      }
     case 160:
      _memset($call_i171 | 0, 0, $req_0_i170 | 0);
      label = 162;
      break;
     case 161:
      HEAP32[1316051] = 0;
      $170 = HEAP32[_stderr >> 2] | 0;
      $171 = HEAP32[1316054] | 0;
      $call_i182 = _fprintf($170 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $171, HEAP32[tempInt + 4 >> 2] = 5573668, tempInt) | 0) | 0;
      _longjmp(5428048, 1);
     case 162:
      $172 = $call_i171;
      HEAP32[1316051] = $172;
      label = 163;
      break;
     case 163:
      $173 = HEAP32[1310884] | 0;
      $tobool576 = ($173 | 0) == 0;
      if ($tobool576) {
        label = 165;
        break;
      } else {
        label = 164;
        break;
      }
     case 164:
      $174 = HEAP32[_stderr >> 2] | 0;
      $175 = HEAP32[1316054] | 0;
      $call578 = _fprintf($174 | 0, 5573632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5263724, HEAP32[tempInt + 4 >> 2] = 5263468, HEAP32[tempInt + 8 >> 2] = $175, tempInt) | 0) | 0;
      label = 165;
      break;
     case 165:
      $176 = HEAP32[1311231] | 0;
      $177 = HEAP32[1316049] | 0;
      $cmp580 = $176 >>> 0 < $177 >>> 0;
      if ($cmp580) {
        label = 167;
        break;
      } else {
        label = 166;
        break;
      }
     case 166:
      $178 = HEAP32[_stderr >> 2] | 0;
      $179 = HEAP32[1316054] | 0;
      $call583 = _fprintf($178 | 0, 5573564, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $179, HEAP32[tempInt + 4 >> 2] = $176, tempInt) | 0) | 0;
      label = 167;
      break;
     case 167:
      $180 = HEAP32[1316053] | 0;
      $181 = HEAP32[1357153] | 0;
      $call585 = _fseek($180 | 0, $181 | 0, 0) | 0;
      $182 = HEAP32[1311250] | 0;
      $tobool586 = ($182 | 0) == 0;
      $or_cond143 = $tobool586 | $tobool588;
      if ($or_cond143) {
        label = 169;
        break;
      } else {
        label = 168;
        break;
      }
     case 168:
      $183 = $182;
      $184 = HEAP16[2622502] | 0;
      $conv590 = $184 & 65535;
      $185 = HEAP16[2622498] | 0;
      $conv591 = $185 & 65535;
      $mul592 = Math_imul($conv591, $conv590);
      $186 = HEAP32[_stdin >> 2] | 0;
      $call593 = _fread($183 | 0, 2, $mul592 | 0, $186 | 0) | 0;
      label = 170;
      break;
     case 169:
      $187 = HEAP32[1315947] | 0;
      $callee_knr_cast = $187;
      FUNCTION_TABLE_v[$callee_knr_cast & 127]();
      label = 170;
      break;
     case 170:
      $188 = HEAP32[1357023] | 0;
      $cmp596 = ($188 | 0) == 3;
      if ($cmp596) {
        label = 172;
        break;
      } else {
        label = 171;
        break;
      }
     case 171:
      $_pre325 = HEAP16[2699404] | 0;
      $_pre326 = HEAP16[2621484] | 0;
      $194 = $_pre325;
      $193 = $_pre326;
      label = 175;
      break;
     case 172:
      HEAP16[2699510] = 0;
      HEAP16[2631898] = 0;
      HEAP16[2621786] = 0;
      $189 = HEAP16[2622502] | 0;
      HEAP16[2699404] = $189;
      $190 = HEAP16[2621484] | 0;
      $conv599 = $190 & 65535;
      $191 = HEAP16[2622498] | 0;
      $conv600 = $191 & 65535;
      $mul601 = $conv600 << 3;
      $192 = HEAP32[1311011] | 0;
      $div602 = ($mul601 >>> 0) / ($192 >>> 0) >>> 0;
      $cmp603 = $conv599 >>> 0 > $div602 >>> 0;
      if ($cmp603) {
        label = 174;
        break;
      } else {
        label = 173;
        break;
      }
     case 173:
      $conv609 = $div602 & 65535;
      HEAP16[2621484] = $conv609;
      $194 = $189;
      $193 = $conv609;
      label = 175;
      break;
     case 174:
      HEAP16[2621484] = $191;
      $194 = $189;
      $193 = $191;
      label = 175;
      break;
     case 175:
      $conv613 = $194 & 65535;
      $195 = HEAP16[2622460] | 0;
      $conv614 = $195 & 65535;
      $add615 = $conv614 + $conv613 | 0;
      $shr617 = $add615 >>> ($conv614 >>> 0);
      $conv618 = $shr617 & 65535;
      HEAP16[2632104] = $conv618;
      $conv619 = $193 & 65535;
      $add621 = $conv614 + $conv619 | 0;
      $shr623 = $add621 >>> ($conv614 >>> 0);
      $conv624 = $shr623 & 65535;
      HEAP16[2632094] = $conv624;
      $196 = HEAP32[1311250] | 0;
      $tobool625 = ($196 | 0) == 0;
      if ($tobool625) {
        label = 184;
        break;
      } else {
        label = 176;
        break;
      }
     case 176:
      $conv627 = $shr617 & 65535;
      $conv628 = $shr623 & 65535;
      $mul629 = Math_imul($conv627, $conv628);
      $cmp_i185 = ($mul629 | 0) == 0;
      if ($cmp_i185) {
        $req_0_i194 = 0;
        label = 179;
        break;
      } else {
        label = 177;
        break;
      }
     case 177:
      $mul_i186 = $mul629 << 3;
      $tobool_i188 = $mul629 >>> 0 > 65535;
      if ($tobool_i188) {
        label = 178;
        break;
      } else {
        $req_0_i194 = $mul_i186;
        label = 179;
        break;
      }
     case 178:
      $div_i190 = ($mul_i186 >>> 0) / ($mul629 >>> 0) >>> 0;
      $cmp1_i191 = ($div_i190 | 0) == 8;
      $mul__i192 = $cmp1_i191 ? $mul_i186 : -1;
      $req_0_i194 = $mul__i192;
      label = 179;
      break;
     case 179:
      $call_i195 = _malloc($req_0_i194) | 0;
      $cmp4_i196 = ($call_i195 | 0) == 0;
      if ($cmp4_i196) {
        label = 182;
        break;
      } else {
        label = 180;
        break;
      }
     case 180:
      $head_i198 = $call_i195 - 4 | 0;
      $197 = $head_i198;
      $198 = HEAP32[$197 >> 2] | 0;
      $and6_i199 = $198 & 3;
      $cmp7_i200 = ($and6_i199 | 0) == 0;
      if ($cmp7_i200) {
        label = 183;
        break;
      } else {
        label = 181;
        break;
      }
     case 181:
      _memset($call_i195 | 0, 0, $req_0_i194 | 0);
      label = 183;
      break;
     case 182:
      HEAP32[1316051] = 0;
      $199 = HEAP32[_stderr >> 2] | 0;
      $200 = HEAP32[1316054] | 0;
      $call_i206 = _fprintf($199 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $200, HEAP32[tempInt + 4 >> 2] = 5573668, tempInt) | 0) | 0;
      _longjmp(5428048, 1);
     case 183:
      $201 = $call_i195;
      HEAP32[1316051] = $201;
      _crop_masked_pixels();
      $202 = HEAP32[1311250] | 0;
      $203 = $202;
      _free($203);
      label = 184;
      break;
     case 184:
      $204 = HEAP32[1310720] | 0;
      $tobool632 = ($204 | 0) == 0;
      if ($tobool632) {
        label = 186;
        break;
      } else {
        label = 185;
        break;
      }
     case 185:
      _remove_zeroes();
      label = 186;
      break;
     case 186:
      _bad_pixels($bpfile_0_lcssa);
      if ($tobool635) {
        label = 188;
        break;
      } else {
        label = 187;
        break;
      }
     case 187:
      _subtract($dark_frame_0_lcssa);
      label = 188;
      break;
     case 188:
      $205 = HEAP16[2699510] | 0;
      $lnot639 = $205 << 16 >> 16 == 0;
      $lnot_ext640 = $lnot639 & 1;
      $add641140 = $lnot_ext640 | 2;
      $206 = HEAP32[1390259] | 0;
      $207 = HEAP32[1390256] | 0;
      $cmp651 = $206 >>> 0 > $207 >>> 0;
      $_i_3 = $cmp651 ? $207 : $206;
      $208 = HEAP32[1390257] | 0;
      $cmp651_1 = $_i_3 >>> 0 > $208 >>> 0;
      $_i_3_1 = $cmp651_1 ? $208 : $_i_3;
      $209 = HEAP32[1390258] | 0;
      $cmp651_2 = $_i_3_1 >>> 0 > $209 >>> 0;
      $_i_3_2 = $cmp651_2 ? $209 : $_i_3_1;
      $sub664 = $207 - $_i_3_2 | 0;
      $sub664_1 = $208 - $_i_3_2 | 0;
      $sub664_2 = $209 - $_i_3_2 | 0;
      $sub664_3 = $206 - $_i_3_2 | 0;
      $210 = HEAP32[1390380] | 0;
      $add668 = $210 + $_i_3_2 | 0;
      $user_black_0_add668 = $cmp669 ? $user_black_0_lcssa : $add668;
      HEAP32[1390380] = $user_black_0_add668;
      $add678 = $sub664 + $user_black_0_add668 | 0;
      HEAP32[1390256] = $add678;
      $add678_1 = $sub664_1 + $user_black_0_add668 | 0;
      HEAP32[1390257] = $add678_1;
      $add678_2 = $sub664_2 + $user_black_0_add668 | 0;
      HEAP32[1390258] = $add678_2;
      $add678_3 = $sub664_3 + $user_black_0_add668 | 0;
      HEAP32[1390259] = $add678_3;
      $user_qual_0_add641140 = $cmp642 ? $user_qual_0_lcssa : $add641140;
      if ($cmp682) {
        label = 189;
        break;
      } else {
        label = 190;
        break;
      }
     case 189:
      HEAP32[1315898] = $user_sat_0_lcssa;
      label = 190;
      break;
     case 190:
      $211 = HEAP32[1316050] | 0;
      $tobool686 = ($211 | 0) == 0;
      $212 = HEAP32[1357023] | 0;
      if ($tobool686) {
        label = 197;
        break;
      } else {
        label = 191;
        break;
      }
     case 191:
      $tobool688 = ($212 | 0) != 0;
      $213 = HEAP32[1315947] | 0;
      $cmp690 = ($213 | 0) == 90;
      $or_cond4 = $tobool688 | $cmp690;
      if ($or_cond4) {
        label = 192;
        break;
      } else {
        label = 196;
        break;
      }
     case 192:
      $214 = HEAP16[2699404] | 0;
      $conv694225 = $214 & 65535;
      $215 = HEAP16[2621484] | 0;
      $conv695226 = $215 & 65535;
      $mul696227 = $conv694225 << 2;
      $mul697228 = Math_imul($mul696227, $conv695226);
      $cmp698229 = ($mul697228 | 0) > 0;
      if ($cmp698229) {
        $i_5230 = 0;
        $217 = $214;
        $216 = $215;
        label = 193;
        break;
      } else {
        label = 199;
        break;
      }
     case 193:
      $218 = HEAP32[1316051] | 0;
      $arrayidx702 = $218 + ($i_5230 << 1) | 0;
      $219 = HEAP16[$arrayidx702 >> 1] | 0;
      $cmp704 = $219 << 16 >> 16 < 0;
      if ($cmp704) {
        label = 194;
        break;
      } else {
        $221 = $217;
        $220 = $216;
        label = 195;
        break;
      }
     case 194:
      HEAP16[$arrayidx702 >> 1] = 0;
      $_pre318 = HEAP16[2699404] | 0;
      $_pre319 = HEAP16[2621484] | 0;
      $221 = $_pre318;
      $220 = $_pre319;
      label = 195;
      break;
     case 195:
      $inc711 = $i_5230 + 1 | 0;
      $conv694 = $221 & 65535;
      $conv695 = $220 & 65535;
      $mul696 = $conv694 << 2;
      $mul697 = Math_imul($mul696, $conv695);
      $cmp698 = ($inc711 | 0) < ($mul697 | 0);
      if ($cmp698) {
        $i_5230 = $inc711;
        $217 = $221;
        $216 = $220;
        label = 193;
        break;
      } else {
        label = 199;
        break;
      }
     case 196:
      _foveon_interpolate();
      label = 199;
      break;
     case 197:
      $cmp716 = ($212 | 0) < 2;
      if ($cmp716) {
        label = 198;
        break;
      } else {
        label = 199;
        break;
      }
     case 198:
      _scale_colors();
      label = 199;
      break;
     case 199:
      _pre_interpolate();
      $222 = HEAP32[1356938] | 0;
      $tobool721 = ($222 | 0) == 0;
      $223 = HEAP32[1357023] | 0;
      $tobool723 = ($223 | 0) != 0;
      $or_cond5 = $tobool721 | $tobool723;
      if ($or_cond5) {
        label = 207;
        break;
      } else {
        label = 200;
        break;
      }
     case 200:
      $cmp725 = ($user_qual_0_add641140 | 0) == 0;
      if ($cmp725) {
        label = 201;
        break;
      } else {
        label = 202;
        break;
      }
     case 201:
      _lin_interpolate();
      label = 207;
      break;
     case 202:
      $cmp729 = ($user_qual_0_add641140 | 0) == 1;
      $224 = HEAP32[1390240] | 0;
      $cmp732 = ($224 | 0) > 3;
      $or_cond6 = $cmp729 | $cmp732;
      $cmp735 = $222 >>> 0 < 1e3;
      $or_cond7 = $or_cond6 | $cmp735;
      if ($or_cond7) {
        label = 203;
        break;
      } else {
        label = 204;
        break;
      }
     case 203:
      _vng_interpolate();
      label = 207;
      break;
     case 204:
      $cmp739 = ($user_qual_0_add641140 | 0) == 2;
      if ($cmp739) {
        label = 205;
        break;
      } else {
        label = 206;
        break;
      }
     case 205:
      _ppg_interpolate();
      label = 207;
      break;
     case 206:
      _ahd_interpolate();
      label = 207;
      break;
     case 207:
      $225 = HEAP32[1315883] | 0;
      $tobool747 = ($225 | 0) == 0;
      if ($tobool747) {
        label = 210;
        break;
      } else {
        label = 208;
        break;
      }
     case 208:
      HEAP32[1390240] = 3;
      $226 = HEAP16[2699404] | 0;
      $conv750231 = $226 & 65535;
      $227 = HEAP16[2621484] | 0;
      $conv751232 = $227 & 65535;
      $mul752233 = Math_imul($conv751232, $conv750231);
      $cmp753234 = ($mul752233 | 0) == 0;
      if ($cmp753234) {
        label = 210;
        break;
      } else {
        $i_6235 = 0;
        label = 209;
        break;
      }
     case 209:
      $228 = HEAP32[1316051] | 0;
      $arrayidx757 = $228 + ($i_6235 << 3) + 2 | 0;
      $229 = HEAP16[$arrayidx757 >> 1] | 0;
      $conv758 = $229 & 65535;
      $arrayidx760 = $228 + ($i_6235 << 3) + 6 | 0;
      $230 = HEAP16[$arrayidx760 >> 1] | 0;
      $conv761 = $230 & 65535;
      $add762 = $conv761 + $conv758 | 0;
      $shr763 = $add762 >>> 1;
      $conv764 = $shr763 & 65535;
      HEAP16[$arrayidx757 >> 1] = $conv764;
      $inc768 = $i_6235 + 1 | 0;
      $231 = HEAP16[2699404] | 0;
      $conv750 = $231 & 65535;
      $232 = HEAP16[2621484] | 0;
      $conv751 = $232 & 65535;
      $mul752 = Math_imul($conv751, $conv750);
      $cmp753 = ($inc768 | 0) < ($mul752 | 0);
      if ($cmp753) {
        $i_6235 = $inc768;
        label = 209;
        break;
      } else {
        label = 210;
        break;
      }
     case 210:
      $233 = HEAP32[1316050] | 0;
      $tobool771 = ($233 | 0) == 0;
      $234 = HEAP32[1390240] | 0;
      $cmp773 = ($234 | 0) == 3;
      $or_cond8 = $tobool771 & $cmp773;
      if ($or_cond8) {
        label = 211;
        break;
      } else {
        $235 = $233;
        label = 212;
        break;
      }
     case 211:
      _median_filter();
      $_pre = HEAP32[1316050] | 0;
      $235 = $_pre;
      label = 212;
      break;
     case 212:
      $tobool777 = ($235 | 0) == 0;
      $236 = HEAP32[1349701] | 0;
      $cmp779 = ($236 | 0) == 2;
      $or_cond9 = $tobool777 & $cmp779;
      if ($or_cond9) {
        label = 213;
        break;
      } else {
        $238 = $235;
        $237 = $236;
        label = 214;
        break;
      }
     case 213:
      _blend_highlights();
      $_pre316 = HEAP32[1316050] | 0;
      $_pre317 = HEAP32[1349701] | 0;
      $238 = $_pre316;
      $237 = $_pre317;
      label = 214;
      break;
     case 214:
      $tobool783 = ($238 | 0) == 0;
      $cmp785 = ($237 | 0) > 2;
      $or_cond10 = $tobool783 & $cmp785;
      if ($or_cond10) {
        label = 215;
        break;
      } else {
        label = 216;
        break;
      }
     case 215:
      _recover_highlights();
      label = 216;
      break;
     case 216:
      if ($tobool433) {
        label = 218;
        break;
      } else {
        label = 217;
        break;
      }
     case 217:
      _fuji_rotate();
      _convert_to_rgb();
      _stretch();
      label = 219;
      break;
     case 218:
      _convert_to_rgb();
      label = 219;
      break;
     case 219:
      $_pr218 = HEAP32[1310741] | 0;
      $status_3 = $status_1;
      $239 = $_pr218;
      label = 220;
      break;
     case 220:
      $cmp795 = ($239 | 0) == 60;
      if ($cmp795) {
        $write_ext_0 = 5586672;
        label = 223;
        break;
      } else {
        label = 221;
        break;
      }
     case 221:
      $240 = HEAP32[1315756] | 0;
      $tobool799 = ($240 | 0) != 0;
      $cmp801 = ($239 | 0) == 82;
      $or_cond11 = $tobool799 & $cmp801;
      if ($or_cond11) {
        $write_ext_0 = 5573556;
        label = 223;
        break;
      } else {
        label = 222;
        break;
      }
     case 222:
      $241 = HEAP32[1390240] | 0;
      $mul805 = $241 * 5 & -1;
      $add_ptr_sum = $mul805 - 5 | 0;
      $add_ptr806 = $add_ptr_sum + 5573536 | 0;
      $write_ext_0 = $add_ptr806;
      label = 223;
      break;
     case 223:
      $242 = HEAP32[1316054] | 0;
      $call809 = _strlen($242) | 0;
      $add810 = $call809 + 64 | 0;
      $call811 = _malloc($add810) | 0;
      $tobool_i209 = ($call811 | 0) == 0;
      if ($tobool_i209) {
        label = 224;
        break;
      } else {
        label = 225;
        break;
      }
     case 224:
      $243 = HEAP32[_stderr >> 2] | 0;
      $244 = HEAP32[1316054] | 0;
      $call_i211 = _fprintf($243 | 0, 5587688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $244, HEAP32[tempInt + 4 >> 2] = 5573668, tempInt) | 0) | 0;
      _longjmp(5428048, 1);
     case 225:
      if ($tobool210) {
        label = 226;
        break;
      } else {
        label = 227;
        break;
      }
     case 226:
      _memcpy($call811, 5573520, 16);
      label = 235;
      break;
     case 227:
      $245 = HEAP32[1316054] | 0;
      $call816 = _strcpy($call811 | 0, $245 | 0) | 0;
      $call817 = _strrchr($call811 | 0, 46) | 0;
      $tobool818 = ($call817 | 0) == 0;
      if ($tobool818) {
        label = 229;
        break;
      } else {
        label = 228;
        break;
      }
     case 228:
      HEAP8[$call817] = 0;
      label = 229;
      break;
     case 229:
      $246 = HEAP32[1315844] | 0;
      $tobool821 = ($246 | 0) == 0;
      if ($tobool821) {
        label = 231;
        break;
      } else {
        label = 230;
        break;
      }
     case 230:
      $call823 = _strlen($call811) | 0;
      $add_ptr824 = $call811 + $call823 | 0;
      $247 = HEAP32[1316049] | 0;
      $sub825 = $247 - 1 | 0;
      $call826 = _snprintf(0, 0, 5587220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sub825, tempInt) | 0) | 0;
      $248 = HEAP32[1311231] | 0;
      $call827 = _sprintf($add_ptr824 | 0, 5573512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call826, HEAP32[tempInt + 4 >> 2] = $248, tempInt) | 0) | 0;
      label = 231;
      break;
     case 231:
      if ($tobool274) {
        label = 232;
        break;
      } else {
        label = 233;
        break;
      }
     case 232:
      $strlen = _strlen($call811) | 0;
      $endptr = $call811 + $strlen | 0;
      HEAP8[$endptr] = HEAP8[5573504] | 0;
      HEAP8[$endptr + 1 | 0] = HEAP8[5573505 | 0] | 0;
      HEAP8[$endptr + 2 | 0] = HEAP8[5573506 | 0] | 0;
      HEAP8[$endptr + 3 | 0] = HEAP8[5573507 | 0] | 0;
      HEAP8[$endptr + 4 | 0] = HEAP8[5573508 | 0] | 0;
      HEAP8[$endptr + 5 | 0] = HEAP8[5573509 | 0] | 0;
      HEAP8[$endptr + 6 | 0] = HEAP8[5573510 | 0] | 0;
      label = 233;
      break;
     case 233:
      $call833 = _strcat($call811 | 0, $write_ext_0 | 0) | 0;
      $call834 = _fopen($call811 | 0, 5573500) | 0;
      HEAP32[1315761] = $call834;
      $tobool835 = ($call834 | 0) == 0;
      if ($tobool835) {
        label = 234;
        break;
      } else {
        label = 235;
        break;
      }
     case 234:
      _perror($call811 | 0);
      $ofname_0 = $call811;
      $status_4 = 1;
      label = 239;
      break;
     case 235:
      $249 = HEAP32[1310884] | 0;
      $tobool839 = ($249 | 0) == 0;
      if ($tobool839) {
        label = 237;
        break;
      } else {
        label = 236;
        break;
      }
     case 236:
      $250 = HEAP32[_stderr >> 2] | 0;
      $call841 = _fprintf($250 | 0, 5573476, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call811, tempInt) | 0) | 0;
      label = 237;
      break;
     case 237:
      $251 = HEAP32[1310741] | 0;
      $callee_knr_cast843 = $251;
      FUNCTION_TABLE_v[$callee_knr_cast843 & 127]();
      $252 = HEAP32[1316053] | 0;
      $call844 = _fclose($252 | 0) | 0;
      $253 = HEAP32[1315761] | 0;
      $254 = HEAP32[_stdout >> 2] | 0;
      $cmp845 = ($253 | 0) == ($254 | 0);
      if ($cmp845) {
        $ofname_0 = $call811;
        $status_4 = $status_3;
        label = 239;
        break;
      } else {
        label = 238;
        break;
      }
     case 238:
      $call848 = _fclose($253 | 0) | 0;
      $ofname_0 = $call811;
      $status_4 = $status_3;
      label = 239;
      break;
     case 239:
      $255 = HEAP32[1315886] | 0;
      $tobool850 = ($255 | 0) == 0;
      if ($tobool850) {
        label = 241;
        break;
      } else {
        label = 240;
        break;
      }
     case 240:
      _free($255);
      label = 241;
      break;
     case 241:
      $tobool853 = ($ofname_0 | 0) == 0;
      if ($tobool853) {
        label = 243;
        break;
      } else {
        label = 242;
        break;
      }
     case 242:
      _free($ofname_0);
      label = 243;
      break;
     case 243:
      $256 = HEAP32[1315760] | 0;
      $tobool856 = ($256 | 0) == 0;
      if ($tobool856) {
        label = 245;
        break;
      } else {
        label = 244;
        break;
      }
     case 244:
      $257 = $256;
      _free($257);
      label = 245;
      break;
     case 245:
      $258 = HEAP32[1316051] | 0;
      $tobool859 = ($258 | 0) == 0;
      if ($tobool859) {
        label = 247;
        break;
      } else {
        label = 246;
        break;
      }
     case 246:
      $259 = $258;
      _free($259);
      label = 247;
      break;
     case 247:
      $260 = HEAP32[1315844] | 0;
      $tobool862 = ($260 | 0) == 0;
      if ($tobool862) {
        $arg_5 = $arg_4246;
        $status_5 = $status_4;
        label = 251;
        break;
      } else {
        label = 248;
        break;
      }
     case 248:
      $261 = HEAP32[1311231] | 0;
      $inc864 = $261 + 1 | 0;
      HEAP32[1311231] = $inc864;
      $262 = HEAP32[1316049] | 0;
      $cmp865 = $inc864 >>> 0 < $262 >>> 0;
      if ($cmp865) {
        label = 249;
        break;
      } else {
        label = 250;
        break;
      }
     case 249:
      $dec = $arg_4246 - 1 | 0;
      $arg_5 = $dec;
      $status_5 = $status_4;
      label = 251;
      break;
     case 250:
      HEAP32[1311231] = 0;
      $arg_5 = $arg_4246;
      $status_5 = $status_4;
      label = 251;
      break;
     case 251:
      $inc872 = $arg_5 + 1 | 0;
      $cmp219 = ($inc872 | 0) < ($argc | 0);
      if ($cmp219) {
        $arg_4246 = $inc872;
        label = 60;
        break;
      } else {
        $retval_0 = $status_5;
        label = 252;
        break;
      }
     case 252:
      STACKTOP = __stackBase__;
      return $retval_0 | 0;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in mySetjmpIds)) throw e;
    setjmpTable[setjmpLabels[e.id]](e.value);
  }
  return 0;
}
function _malloc($bytes) {
  $bytes = $bytes | 0;
  var $cond = 0, $shr = 0, $0 = 0, $shr3 = 0, $add8 = 0, $shl = 0, $1 = 0, $2 = 0, $3 = 0, $fd9 = 0, $4 = 0, $bk = 0, $shl22 = 0, $9 = 0, $shl37 = 0, $and41 = 0, $sub44 = 0, $and46 = 0, $shr47 = 0, $and49 = 0, $shr51 = 0, $and53 = 0, $shr55 = 0, $and57 = 0, $shr59 = 0, $and61 = 0, $add64 = 0, $shl65 = 0, $13 = 0, $14 = 0, $15 = 0, $fd69 = 0, $16 = 0, $bk78 = 0, $shl90 = 0, $sub91 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $shr101 = 0, $shl102 = 0, $25 = 0, $26 = 0, $shl105 = 0, $27 = 0, $28 = 0, $_pre_phi = 0, $F104_0 = 0, $32 = 0, $sub2_i = 0, $and3_i = 0, $shr4_i = 0, $and6_i = 0, $shr7_i = 0, $and9_i = 0, $shr11_i = 0, $and13_i = 0, $shr15_i = 0, $and17_i = 0, $33 = 0, $rsize_0_i = 0, $v_0_i = 0, $t_0_i = 0, $35 = 0, $36 = 0, $cond6_i = 0, $sub31_i = 0, $cmp32_i = 0, $38 = 0, $39 = 0, $add_ptr_i = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $bk47_i = 0, $fd50_i = 0, $arrayidx61_i = 0, $47 = 0, $arrayidx65_i = 0, $48 = 0, $RP_0_i = 0, $R_0_i = 0, $arrayidx71_i = 0, $49 = 0, $arrayidx75_i = 0, $50 = 0, $R_1_i = 0, $index_i = 0, $arrayidx94_i = 0, $arrayidx113_i = 0, $61 = 0, $64 = 0, $add177_i = 0, $67 = 0, $70 = 0, $71 = 0, $shr194_i = 0, $shl195_i = 0, $72 = 0, $73 = 0, $shl198_i = 0, $74 = 0, $75 = 0, $_pre_phi_i = 0, $F197_0_i = 0, $add_ptr225_i = 0, $add143 = 0, $and144 = 0, $79 = 0, $sub_i105 = 0, $shr_i106 = 0, $and_i110 = 0, $shl_i111 = 0, $and8_i = 0, $shl9_i = 0, $and12_i = 0, $add17_i = 0, $idx_0_i = 0, $80 = 0, $cond_i = 0, $rst_0_i = 0, $sizebits_0_i = 0, $t_0_i119 = 0, $rsize_0_i120 = 0, $v_0_i121 = 0, $and32_i = 0, $sub33_i = 0, $rsize_1_i = 0, $v_1_i = 0, $82 = 0, $83 = 0, $rst_1_i = 0, $t_1_i = 0, $rsize_2_i = 0, $v_2_i = 0, $shl59_i = 0, $and63_i = 0, $sub69_i = 0, $and72_i = 0, $shr74_i = 0, $and76_i = 0, $shr78_i = 0, $and80_i = 0, $shr82_i = 0, $and84_i = 0, $shr86_i = 0, $and88_i = 0, $t_2_ph_i = 0, $v_324_i = 0, $rsize_323_i = 0, $t_222_i = 0, $sub100_i = 0, $cmp101_i = 0, $sub100_rsize_3_i = 0, $t_2_v_3_i = 0, $86 = 0, $87 = 0, $v_3_lcssa_i = 0, $rsize_3_lcssa_i = 0, $89 = 0, $90 = 0, $add_ptr_i126 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bk135_i = 0, $fd138_i = 0, $arrayidx150_i = 0, $98 = 0, $arrayidx154_i131 = 0, $99 = 0, $RP_0_i134 = 0, $R_0_i135 = 0, $arrayidx160_i = 0, $100 = 0, $arrayidx164_i = 0, $101 = 0, $R_1_i137 = 0, $index_i138 = 0, $arrayidx183_i = 0, $arrayidx203_i = 0, $112 = 0, $115 = 0, $add267_i = 0, $118 = 0, $shr282_i = 0, $shl287_i = 0, $121 = 0, $122 = 0, $shl290_i = 0, $123 = 0, $124 = 0, $_pre_phi_i145 = 0, $F289_0_i = 0, $129 = 0, $shr317_i = 0, $and330_i = 0, $shl332_i = 0, $and335_i = 0, $shl337_i = 0, $and340_i = 0, $add345_i = 0, $I315_0_i = 0, $arrayidx354_i = 0, $132 = 0, $shl361_i = 0, $cond382_i = 0, $T_0_i = 0, $K372_0_i = 0, $arrayidx393_i = 0, $139 = 0, $fd412_i = 0, $145 = 0, $147 = 0, $add_ptr436_i = 0, $nb_0 = 0, $153 = 0, $sub159 = 0, $154 = 0, $155 = 0, $159 = 0, $162 = 0, $sub187 = 0, $163 = 0, $164 = 0, $call_i_i = 0, $add_i147 = 0, $169 = 0, $sub_i148 = 0, $add9_i = 0, $neg_i149 = 0, $and11_i = 0, $170 = 0, $171 = 0, $add17_i150 = 0, $173 = 0, $174 = 0, $sp_0_i_i = 0, $base_i_i = 0, $175 = 0, $size_i_i = 0, $177 = 0, $call34_i = 0, $178 = 0, $179 = 0, $sub38_i = 0, $ssize_0_i = 0, $180 = 0, $add51_i = 0, $181 = 0, $call65_i = 0, $cmp66_i158 = 0, $and77_i = 0, $call80_i = 0, $cmp82_i = 0, $ssize_1_i = 0, $br_0_i = 0, $tsize_0_i = 0, $tbase_0_i = 0, $sub109_i = 0, $185 = 0, $and101_i = 0, $ssize_2_i = 0, $tsize_0748284_i = 0, $tsize_1_i = 0, $call128_i = 0, $call129_i = 0, $sub_ptr_sub_i = 0, $cmp138_i164 = 0, $call128_tbase_1_i = 0, $tbase_291_i = 0, $tsize_290_i = 0, $add147_i = 0, $189 = 0, $190 = 0, $i_02_i_i = 0, $shl_i_i = 0, $192 = 0, $inc_i_i = 0, $195 = 0, $cond_i_i = 0, $sub5_i_i = 0, $sp_0104_i = 0, $201 = 0, $size185_i = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $add212_i = 0, $208 = 0, $209 = 0, $cond_i27_i = 0, $sub5_i29_i = 0, $add_ptr224_i = 0, $sp_1100_i = 0, $base223_i = 0, $217 = 0, $size242_i = 0, $220 = 0, $cond_i42_i = 0, $222 = 0, $cond15_i_i = 0, $add_ptr16_i_i = 0, $224 = 0, $add_ptr4_sum_i49_i = 0, $add_ptr17_i_i = 0, $225 = 0, $sub18_i_i = 0, $add_i_i = 0, $add26_i_i = 0, $add_ptr16_sum_i_i = 0, $234 = 0, $and37_i_i = 0, $shr_i54_i = 0, $236 = 0, $238 = 0, $239 = 0, $fd59_i_i = 0, $fd68_pre_phi_i_i = 0, $247 = 0, $249 = 0, $251 = 0, $253 = 0, $bk82_i_i = 0, $fd85_i_i = 0, $add_ptr16_sum56_i_i = 0, $258 = 0, $259 = 0, $arrayidx99_i_i = 0, $260 = 0, $RP_0_i_i = 0, $R_0_i_i = 0, $arrayidx103_i_i = 0, $261 = 0, $arrayidx107_i_i = 0, $262 = 0, $R_1_i_i = 0, $265 = 0, $arrayidx123_i_i = 0, $arrayidx143_i_i = 0, $add_ptr16_sum2627_i_i = 0, $275 = 0, $279 = 0, $qsize_0_i_i = 0, $oldfirst_0_i_i = 0, $head208_i_i = 0, $shr214_i_i = 0, $shl221_i_i = 0, $285 = 0, $286 = 0, $shl226_i_i = 0, $287 = 0, $288 = 0, $_pre_phi_i67_i = 0, $F224_0_i_i = 0, $293 = 0, $shr253_i_i = 0, $and264_i_i = 0, $shl265_i_i = 0, $and268_i_i = 0, $shl270_i_i = 0, $and273_i_i = 0, $add278_i_i = 0, $I252_0_i_i = 0, $arrayidx287_i_i = 0, $296 = 0, $shl294_i_i = 0, $cond315_i_i = 0, $T_0_i68_i = 0, $K305_0_i_i = 0, $arrayidx325_i_i = 0, $303 = 0, $fd344_i_i = 0, $309 = 0, $311 = 0, $316 = 0, $sp_0_i_i_i = 0, $317 = 0, $318 = 0, $add_ptr_i_i_i = 0, $320 = 0, $cond_i17_i = 0, $add_ptr7_i_i = 0, $cond13_i_i = 0, $add_ptr14_i_i = 0, $323 = 0, $cond_i_i_i = 0, $sub5_i_i_i = 0, $330 = 0, $add_ptr2415_i_i = 0, $332 = 0, $sub_ptr_sub_i_i = 0, $335 = 0, $shr_i_i = 0, $shl_i20_i = 0, $337 = 0, $338 = 0, $shl39_i_i = 0, $339 = 0, $340 = 0, $_pre_phi_i_i = 0, $F_0_i_i = 0, $343 = 0, $shr58_i_i = 0, $and69_i_i = 0, $shl70_i_i = 0, $and73_i_i = 0, $shl75_i_i = 0, $and78_i_i = 0, $add83_i_i = 0, $I57_0_i_i = 0, $arrayidx91_i_i = 0, $345 = 0, $shl95_i_i = 0, $cond115_i_i = 0, $T_0_i_i = 0, $K105_0_i_i = 0, $arrayidx126_i_i = 0, $348 = 0, $fd145_i_i = 0, $351 = 0, $353 = 0, $355 = 0, $sub253_i = 0, $356 = 0, $357 = 0, $mem_0 = 0, label = 0;
  do {
    if ($bytes >>> 0 < 245) {
      if ($bytes >>> 0 < 11) {
        $cond = 16;
      } else {
        $cond = $bytes + 11 & -8;
      }
      $shr = $cond >>> 3;
      $0 = HEAP32[1396929] | 0;
      $shr3 = $0 >>> ($shr >>> 0);
      if (($shr3 & 3 | 0) != 0) {
        $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
        $shl = $add8 << 1;
        $1 = 5587756 + ($shl << 2) | 0;
        $2 = 5587756 + ($shl + 2 << 2) | 0;
        $3 = HEAP32[$2 >> 2] | 0;
        $fd9 = $3 + 8 | 0;
        $4 = HEAP32[$fd9 >> 2] | 0;
        do {
          if (($1 | 0) == ($4 | 0)) {
            HEAP32[1396929] = $0 & (1 << $add8 ^ -1);
          } else {
            if ($4 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
              _abort();
              return 0;
            }
            $bk = $4 + 12 | 0;
            if ((HEAP32[$bk >> 2] | 0) == ($3 | 0)) {
              HEAP32[$bk >> 2] = $1;
              HEAP32[$2 >> 2] = $4;
              break;
            } else {
              _abort();
              return 0;
            }
          }
        } while (0);
        $shl22 = $add8 << 3;
        HEAP32[$3 + 4 >> 2] = $shl22 | 3;
        $9 = $3 + ($shl22 | 4) | 0;
        HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1;
        $mem_0 = $fd9;
        return $mem_0 | 0;
      }
      if ($cond >>> 0 <= (HEAP32[1396931] | 0) >>> 0) {
        $nb_0 = $cond;
        break;
      }
      if (($shr3 | 0) != 0) {
        $shl37 = 2 << $shr;
        $and41 = $shr3 << $shr & ($shl37 | -$shl37);
        $sub44 = ($and41 & -$and41) - 1 | 0;
        $and46 = $sub44 >>> 12 & 16;
        $shr47 = $sub44 >>> ($and46 >>> 0);
        $and49 = $shr47 >>> 5 & 8;
        $shr51 = $shr47 >>> ($and49 >>> 0);
        $and53 = $shr51 >>> 2 & 4;
        $shr55 = $shr51 >>> ($and53 >>> 0);
        $and57 = $shr55 >>> 1 & 2;
        $shr59 = $shr55 >>> ($and57 >>> 0);
        $and61 = $shr59 >>> 1 & 1;
        $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> ($and61 >>> 0)) | 0;
        $shl65 = $add64 << 1;
        $13 = 5587756 + ($shl65 << 2) | 0;
        $14 = 5587756 + ($shl65 + 2 << 2) | 0;
        $15 = HEAP32[$14 >> 2] | 0;
        $fd69 = $15 + 8 | 0;
        $16 = HEAP32[$fd69 >> 2] | 0;
        do {
          if (($13 | 0) == ($16 | 0)) {
            HEAP32[1396929] = $0 & (1 << $add64 ^ -1);
          } else {
            if ($16 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
              _abort();
              return 0;
            }
            $bk78 = $16 + 12 | 0;
            if ((HEAP32[$bk78 >> 2] | 0) == ($15 | 0)) {
              HEAP32[$bk78 >> 2] = $13;
              HEAP32[$14 >> 2] = $16;
              break;
            } else {
              _abort();
              return 0;
            }
          }
        } while (0);
        $shl90 = $add64 << 3;
        $sub91 = $shl90 - $cond | 0;
        HEAP32[$15 + 4 >> 2] = $cond | 3;
        $20 = $15;
        $21 = $20 + $cond | 0;
        HEAP32[$20 + ($cond | 4) >> 2] = $sub91 | 1;
        HEAP32[$20 + $shl90 >> 2] = $sub91;
        $23 = HEAP32[1396931] | 0;
        if (($23 | 0) != 0) {
          $24 = HEAP32[1396934] | 0;
          $shr101 = $23 >>> 3;
          $shl102 = $shr101 << 1;
          $25 = 5587756 + ($shl102 << 2) | 0;
          $26 = HEAP32[1396929] | 0;
          $shl105 = 1 << $shr101;
          do {
            if (($26 & $shl105 | 0) == 0) {
              HEAP32[1396929] = $26 | $shl105;
              $F104_0 = $25;
              $_pre_phi = 5587756 + ($shl102 + 2 << 2) | 0;
            } else {
              $27 = 5587756 + ($shl102 + 2 << 2) | 0;
              $28 = HEAP32[$27 >> 2] | 0;
              if ($28 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
                $F104_0 = $28;
                $_pre_phi = $27;
                break;
              }
              _abort();
              return 0;
            }
          } while (0);
          HEAP32[$_pre_phi >> 2] = $24;
          HEAP32[$F104_0 + 12 >> 2] = $24;
          HEAP32[$24 + 8 >> 2] = $F104_0;
          HEAP32[$24 + 12 >> 2] = $25;
        }
        HEAP32[1396931] = $sub91;
        HEAP32[1396934] = $21;
        $mem_0 = $fd69;
        return $mem_0 | 0;
      }
      $32 = HEAP32[1396930] | 0;
      if (($32 | 0) == 0) {
        $nb_0 = $cond;
        break;
      }
      $sub2_i = ($32 & -$32) - 1 | 0;
      $and3_i = $sub2_i >>> 12 & 16;
      $shr4_i = $sub2_i >>> ($and3_i >>> 0);
      $and6_i = $shr4_i >>> 5 & 8;
      $shr7_i = $shr4_i >>> ($and6_i >>> 0);
      $and9_i = $shr7_i >>> 2 & 4;
      $shr11_i = $shr7_i >>> ($and9_i >>> 0);
      $and13_i = $shr11_i >>> 1 & 2;
      $shr15_i = $shr11_i >>> ($and13_i >>> 0);
      $and17_i = $shr15_i >>> 1 & 1;
      $33 = HEAP32[5588020 + (($and6_i | $and3_i | $and9_i | $and13_i | $and17_i) + ($shr15_i >>> ($and17_i >>> 0)) << 2) >> 2] | 0;
      $t_0_i = $33;
      $v_0_i = $33;
      $rsize_0_i = (HEAP32[$33 + 4 >> 2] & -8) - $cond | 0;
      while (1) {
        $35 = HEAP32[$t_0_i + 16 >> 2] | 0;
        if (($35 | 0) == 0) {
          $36 = HEAP32[$t_0_i + 20 >> 2] | 0;
          if (($36 | 0) == 0) {
            break;
          } else {
            $cond6_i = $36;
          }
        } else {
          $cond6_i = $35;
        }
        $sub31_i = (HEAP32[$cond6_i + 4 >> 2] & -8) - $cond | 0;
        $cmp32_i = $sub31_i >>> 0 < $rsize_0_i >>> 0;
        $t_0_i = $cond6_i;
        $v_0_i = $cmp32_i ? $cond6_i : $v_0_i;
        $rsize_0_i = $cmp32_i ? $sub31_i : $rsize_0_i;
      }
      $38 = $v_0_i;
      $39 = HEAP32[1396933] | 0;
      if ($38 >>> 0 < $39 >>> 0) {
        _abort();
        return 0;
      }
      $add_ptr_i = $38 + $cond | 0;
      $40 = $add_ptr_i;
      if ($38 >>> 0 >= $add_ptr_i >>> 0) {
        _abort();
        return 0;
      }
      $41 = HEAP32[$v_0_i + 24 >> 2] | 0;
      $42 = HEAP32[$v_0_i + 12 >> 2] | 0;
      L4123 : do {
        if (($42 | 0) == ($v_0_i | 0)) {
          $arrayidx61_i = $v_0_i + 20 | 0;
          $47 = HEAP32[$arrayidx61_i >> 2] | 0;
          do {
            if (($47 | 0) == 0) {
              $arrayidx65_i = $v_0_i + 16 | 0;
              $48 = HEAP32[$arrayidx65_i >> 2] | 0;
              if (($48 | 0) == 0) {
                $R_1_i = 0;
                break L4123;
              } else {
                $R_0_i = $48;
                $RP_0_i = $arrayidx65_i;
                break;
              }
            } else {
              $R_0_i = $47;
              $RP_0_i = $arrayidx61_i;
            }
          } while (0);
          while (1) {
            $arrayidx71_i = $R_0_i + 20 | 0;
            $49 = HEAP32[$arrayidx71_i >> 2] | 0;
            if (($49 | 0) != 0) {
              $R_0_i = $49;
              $RP_0_i = $arrayidx71_i;
              continue;
            }
            $arrayidx75_i = $R_0_i + 16 | 0;
            $50 = HEAP32[$arrayidx75_i >> 2] | 0;
            if (($50 | 0) == 0) {
              break;
            } else {
              $R_0_i = $50;
              $RP_0_i = $arrayidx75_i;
            }
          }
          if ($RP_0_i >>> 0 < $39 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$RP_0_i >> 2] = 0;
            $R_1_i = $R_0_i;
            break;
          }
        } else {
          $43 = HEAP32[$v_0_i + 8 >> 2] | 0;
          if ($43 >>> 0 < $39 >>> 0) {
            _abort();
            return 0;
          }
          $bk47_i = $43 + 12 | 0;
          if ((HEAP32[$bk47_i >> 2] | 0) != ($v_0_i | 0)) {
            _abort();
            return 0;
          }
          $fd50_i = $42 + 8 | 0;
          if ((HEAP32[$fd50_i >> 2] | 0) == ($v_0_i | 0)) {
            HEAP32[$bk47_i >> 2] = $42;
            HEAP32[$fd50_i >> 2] = $43;
            $R_1_i = $42;
            break;
          } else {
            _abort();
            return 0;
          }
        }
      } while (0);
      L4145 : do {
        if (($41 | 0) != 0) {
          $index_i = $v_0_i + 28 | 0;
          $arrayidx94_i = 5588020 + (HEAP32[$index_i >> 2] << 2) | 0;
          do {
            if (($v_0_i | 0) == (HEAP32[$arrayidx94_i >> 2] | 0)) {
              HEAP32[$arrayidx94_i >> 2] = $R_1_i;
              if (($R_1_i | 0) != 0) {
                break;
              }
              HEAP32[1396930] = HEAP32[1396930] & (1 << HEAP32[$index_i >> 2] ^ -1);
              break L4145;
            } else {
              if ($41 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
                return 0;
              }
              $arrayidx113_i = $41 + 16 | 0;
              if ((HEAP32[$arrayidx113_i >> 2] | 0) == ($v_0_i | 0)) {
                HEAP32[$arrayidx113_i >> 2] = $R_1_i;
              } else {
                HEAP32[$41 + 20 >> 2] = $R_1_i;
              }
              if (($R_1_i | 0) == 0) {
                break L4145;
              }
            }
          } while (0);
          if ($R_1_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
            return 0;
          }
          HEAP32[$R_1_i + 24 >> 2] = $41;
          $61 = HEAP32[$v_0_i + 16 >> 2] | 0;
          do {
            if (($61 | 0) != 0) {
              if ($61 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
                return 0;
              } else {
                HEAP32[$R_1_i + 16 >> 2] = $61;
                HEAP32[$61 + 24 >> 2] = $R_1_i;
                break;
              }
            }
          } while (0);
          $64 = HEAP32[$v_0_i + 20 >> 2] | 0;
          if (($64 | 0) == 0) {
            break;
          }
          if ($64 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$R_1_i + 20 >> 2] = $64;
            HEAP32[$64 + 24 >> 2] = $R_1_i;
            break;
          }
        }
      } while (0);
      if ($rsize_0_i >>> 0 < 16) {
        $add177_i = $rsize_0_i + $cond | 0;
        HEAP32[$v_0_i + 4 >> 2] = $add177_i | 3;
        $67 = $38 + ($add177_i + 4 | 0) | 0;
        HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
      } else {
        HEAP32[$v_0_i + 4 >> 2] = $cond | 3;
        HEAP32[$38 + ($cond | 4) >> 2] = $rsize_0_i | 1;
        HEAP32[$38 + ($rsize_0_i + $cond | 0) >> 2] = $rsize_0_i;
        $70 = HEAP32[1396931] | 0;
        if (($70 | 0) != 0) {
          $71 = HEAP32[1396934] | 0;
          $shr194_i = $70 >>> 3;
          $shl195_i = $shr194_i << 1;
          $72 = 5587756 + ($shl195_i << 2) | 0;
          $73 = HEAP32[1396929] | 0;
          $shl198_i = 1 << $shr194_i;
          do {
            if (($73 & $shl198_i | 0) == 0) {
              HEAP32[1396929] = $73 | $shl198_i;
              $F197_0_i = $72;
              $_pre_phi_i = 5587756 + ($shl195_i + 2 << 2) | 0;
            } else {
              $74 = 5587756 + ($shl195_i + 2 << 2) | 0;
              $75 = HEAP32[$74 >> 2] | 0;
              if ($75 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
                $F197_0_i = $75;
                $_pre_phi_i = $74;
                break;
              }
              _abort();
              return 0;
            }
          } while (0);
          HEAP32[$_pre_phi_i >> 2] = $71;
          HEAP32[$F197_0_i + 12 >> 2] = $71;
          HEAP32[$71 + 8 >> 2] = $F197_0_i;
          HEAP32[$71 + 12 >> 2] = $72;
        }
        HEAP32[1396931] = $rsize_0_i;
        HEAP32[1396934] = $40;
      }
      $add_ptr225_i = $v_0_i + 8 | 0;
      if (($add_ptr225_i | 0) == 0) {
        $nb_0 = $cond;
        break;
      } else {
        $mem_0 = $add_ptr225_i;
      }
      return $mem_0 | 0;
    } else {
      if ($bytes >>> 0 > 4294967231) {
        $nb_0 = -1;
        break;
      }
      $add143 = $bytes + 11 | 0;
      $and144 = $add143 & -8;
      $79 = HEAP32[1396930] | 0;
      if (($79 | 0) == 0) {
        $nb_0 = $and144;
        break;
      }
      $sub_i105 = -$and144 | 0;
      $shr_i106 = $add143 >>> 8;
      do {
        if (($shr_i106 | 0) == 0) {
          $idx_0_i = 0;
        } else {
          if ($and144 >>> 0 > 16777215) {
            $idx_0_i = 31;
            break;
          }
          $and_i110 = ($shr_i106 + 1048320 | 0) >>> 16 & 8;
          $shl_i111 = $shr_i106 << $and_i110;
          $and8_i = ($shl_i111 + 520192 | 0) >>> 16 & 4;
          $shl9_i = $shl_i111 << $and8_i;
          $and12_i = ($shl9_i + 245760 | 0) >>> 16 & 2;
          $add17_i = (14 - ($and8_i | $and_i110 | $and12_i) | 0) + ($shl9_i << $and12_i >>> 15) | 0;
          $idx_0_i = $and144 >>> (($add17_i + 7 | 0) >>> 0) & 1 | $add17_i << 1;
        }
      } while (0);
      $80 = HEAP32[5588020 + ($idx_0_i << 2) >> 2] | 0;
      L4193 : do {
        if (($80 | 0) == 0) {
          $v_2_i = 0;
          $rsize_2_i = $sub_i105;
          $t_1_i = 0;
        } else {
          if (($idx_0_i | 0) == 31) {
            $cond_i = 0;
          } else {
            $cond_i = 25 - ($idx_0_i >>> 1) | 0;
          }
          $v_0_i121 = 0;
          $rsize_0_i120 = $sub_i105;
          $t_0_i119 = $80;
          $sizebits_0_i = $and144 << $cond_i;
          $rst_0_i = 0;
          while (1) {
            $and32_i = HEAP32[$t_0_i119 + 4 >> 2] & -8;
            $sub33_i = $and32_i - $and144 | 0;
            if ($sub33_i >>> 0 < $rsize_0_i120 >>> 0) {
              if (($and32_i | 0) == ($and144 | 0)) {
                $v_2_i = $t_0_i119;
                $rsize_2_i = $sub33_i;
                $t_1_i = $t_0_i119;
                break L4193;
              } else {
                $v_1_i = $t_0_i119;
                $rsize_1_i = $sub33_i;
              }
            } else {
              $v_1_i = $v_0_i121;
              $rsize_1_i = $rsize_0_i120;
            }
            $82 = HEAP32[$t_0_i119 + 20 >> 2] | 0;
            $83 = HEAP32[$t_0_i119 + 16 + ($sizebits_0_i >>> 31 << 2) >> 2] | 0;
            $rst_1_i = ($82 | 0) == 0 | ($82 | 0) == ($83 | 0) ? $rst_0_i : $82;
            if (($83 | 0) == 0) {
              $v_2_i = $v_1_i;
              $rsize_2_i = $rsize_1_i;
              $t_1_i = $rst_1_i;
              break L4193;
            } else {
              $v_0_i121 = $v_1_i;
              $rsize_0_i120 = $rsize_1_i;
              $t_0_i119 = $83;
              $sizebits_0_i = $sizebits_0_i << 1;
              $rst_0_i = $rst_1_i;
            }
          }
        }
      } while (0);
      if (($t_1_i | 0) == 0 & ($v_2_i | 0) == 0) {
        $shl59_i = 2 << $idx_0_i;
        $and63_i = $79 & ($shl59_i | -$shl59_i);
        if (($and63_i | 0) == 0) {
          $nb_0 = $and144;
          break;
        }
        $sub69_i = ($and63_i & -$and63_i) - 1 | 0;
        $and72_i = $sub69_i >>> 12 & 16;
        $shr74_i = $sub69_i >>> ($and72_i >>> 0);
        $and76_i = $shr74_i >>> 5 & 8;
        $shr78_i = $shr74_i >>> ($and76_i >>> 0);
        $and80_i = $shr78_i >>> 2 & 4;
        $shr82_i = $shr78_i >>> ($and80_i >>> 0);
        $and84_i = $shr82_i >>> 1 & 2;
        $shr86_i = $shr82_i >>> ($and84_i >>> 0);
        $and88_i = $shr86_i >>> 1 & 1;
        $t_2_ph_i = HEAP32[5588020 + (($and76_i | $and72_i | $and80_i | $and84_i | $and88_i) + ($shr86_i >>> ($and88_i >>> 0)) << 2) >> 2] | 0;
      } else {
        $t_2_ph_i = $t_1_i;
      }
      L4208 : do {
        if (($t_2_ph_i | 0) == 0) {
          $rsize_3_lcssa_i = $rsize_2_i;
          $v_3_lcssa_i = $v_2_i;
        } else {
          $t_222_i = $t_2_ph_i;
          $rsize_323_i = $rsize_2_i;
          $v_324_i = $v_2_i;
          while (1) {
            $sub100_i = (HEAP32[$t_222_i + 4 >> 2] & -8) - $and144 | 0;
            $cmp101_i = $sub100_i >>> 0 < $rsize_323_i >>> 0;
            $sub100_rsize_3_i = $cmp101_i ? $sub100_i : $rsize_323_i;
            $t_2_v_3_i = $cmp101_i ? $t_222_i : $v_324_i;
            $86 = HEAP32[$t_222_i + 16 >> 2] | 0;
            if (($86 | 0) != 0) {
              $t_222_i = $86;
              $rsize_323_i = $sub100_rsize_3_i;
              $v_324_i = $t_2_v_3_i;
              continue;
            }
            $87 = HEAP32[$t_222_i + 20 >> 2] | 0;
            if (($87 | 0) == 0) {
              $rsize_3_lcssa_i = $sub100_rsize_3_i;
              $v_3_lcssa_i = $t_2_v_3_i;
              break L4208;
            } else {
              $t_222_i = $87;
              $rsize_323_i = $sub100_rsize_3_i;
              $v_324_i = $t_2_v_3_i;
            }
          }
        }
      } while (0);
      if (($v_3_lcssa_i | 0) == 0) {
        $nb_0 = $and144;
        break;
      }
      if ($rsize_3_lcssa_i >>> 0 >= ((HEAP32[1396931] | 0) - $and144 | 0) >>> 0) {
        $nb_0 = $and144;
        break;
      }
      $89 = $v_3_lcssa_i;
      $90 = HEAP32[1396933] | 0;
      if ($89 >>> 0 < $90 >>> 0) {
        _abort();
        return 0;
      }
      $add_ptr_i126 = $89 + $and144 | 0;
      $91 = $add_ptr_i126;
      if ($89 >>> 0 >= $add_ptr_i126 >>> 0) {
        _abort();
        return 0;
      }
      $92 = HEAP32[$v_3_lcssa_i + 24 >> 2] | 0;
      $93 = HEAP32[$v_3_lcssa_i + 12 >> 2] | 0;
      L4221 : do {
        if (($93 | 0) == ($v_3_lcssa_i | 0)) {
          $arrayidx150_i = $v_3_lcssa_i + 20 | 0;
          $98 = HEAP32[$arrayidx150_i >> 2] | 0;
          do {
            if (($98 | 0) == 0) {
              $arrayidx154_i131 = $v_3_lcssa_i + 16 | 0;
              $99 = HEAP32[$arrayidx154_i131 >> 2] | 0;
              if (($99 | 0) == 0) {
                $R_1_i137 = 0;
                break L4221;
              } else {
                $R_0_i135 = $99;
                $RP_0_i134 = $arrayidx154_i131;
                break;
              }
            } else {
              $R_0_i135 = $98;
              $RP_0_i134 = $arrayidx150_i;
            }
          } while (0);
          while (1) {
            $arrayidx160_i = $R_0_i135 + 20 | 0;
            $100 = HEAP32[$arrayidx160_i >> 2] | 0;
            if (($100 | 0) != 0) {
              $R_0_i135 = $100;
              $RP_0_i134 = $arrayidx160_i;
              continue;
            }
            $arrayidx164_i = $R_0_i135 + 16 | 0;
            $101 = HEAP32[$arrayidx164_i >> 2] | 0;
            if (($101 | 0) == 0) {
              break;
            } else {
              $R_0_i135 = $101;
              $RP_0_i134 = $arrayidx164_i;
            }
          }
          if ($RP_0_i134 >>> 0 < $90 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$RP_0_i134 >> 2] = 0;
            $R_1_i137 = $R_0_i135;
            break;
          }
        } else {
          $94 = HEAP32[$v_3_lcssa_i + 8 >> 2] | 0;
          if ($94 >>> 0 < $90 >>> 0) {
            _abort();
            return 0;
          }
          $bk135_i = $94 + 12 | 0;
          if ((HEAP32[$bk135_i >> 2] | 0) != ($v_3_lcssa_i | 0)) {
            _abort();
            return 0;
          }
          $fd138_i = $93 + 8 | 0;
          if ((HEAP32[$fd138_i >> 2] | 0) == ($v_3_lcssa_i | 0)) {
            HEAP32[$bk135_i >> 2] = $93;
            HEAP32[$fd138_i >> 2] = $94;
            $R_1_i137 = $93;
            break;
          } else {
            _abort();
            return 0;
          }
        }
      } while (0);
      L4243 : do {
        if (($92 | 0) != 0) {
          $index_i138 = $v_3_lcssa_i + 28 | 0;
          $arrayidx183_i = 5588020 + (HEAP32[$index_i138 >> 2] << 2) | 0;
          do {
            if (($v_3_lcssa_i | 0) == (HEAP32[$arrayidx183_i >> 2] | 0)) {
              HEAP32[$arrayidx183_i >> 2] = $R_1_i137;
              if (($R_1_i137 | 0) != 0) {
                break;
              }
              HEAP32[1396930] = HEAP32[1396930] & (1 << HEAP32[$index_i138 >> 2] ^ -1);
              break L4243;
            } else {
              if ($92 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
                return 0;
              }
              $arrayidx203_i = $92 + 16 | 0;
              if ((HEAP32[$arrayidx203_i >> 2] | 0) == ($v_3_lcssa_i | 0)) {
                HEAP32[$arrayidx203_i >> 2] = $R_1_i137;
              } else {
                HEAP32[$92 + 20 >> 2] = $R_1_i137;
              }
              if (($R_1_i137 | 0) == 0) {
                break L4243;
              }
            }
          } while (0);
          if ($R_1_i137 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
            return 0;
          }
          HEAP32[$R_1_i137 + 24 >> 2] = $92;
          $112 = HEAP32[$v_3_lcssa_i + 16 >> 2] | 0;
          do {
            if (($112 | 0) != 0) {
              if ($112 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
                return 0;
              } else {
                HEAP32[$R_1_i137 + 16 >> 2] = $112;
                HEAP32[$112 + 24 >> 2] = $R_1_i137;
                break;
              }
            }
          } while (0);
          $115 = HEAP32[$v_3_lcssa_i + 20 >> 2] | 0;
          if (($115 | 0) == 0) {
            break;
          }
          if ($115 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$R_1_i137 + 20 >> 2] = $115;
            HEAP32[$115 + 24 >> 2] = $R_1_i137;
            break;
          }
        }
      } while (0);
      do {
        if ($rsize_3_lcssa_i >>> 0 < 16) {
          $add267_i = $rsize_3_lcssa_i + $and144 | 0;
          HEAP32[$v_3_lcssa_i + 4 >> 2] = $add267_i | 3;
          $118 = $89 + ($add267_i + 4 | 0) | 0;
          HEAP32[$118 >> 2] = HEAP32[$118 >> 2] | 1;
        } else {
          HEAP32[$v_3_lcssa_i + 4 >> 2] = $and144 | 3;
          HEAP32[$89 + ($and144 | 4) >> 2] = $rsize_3_lcssa_i | 1;
          HEAP32[$89 + ($rsize_3_lcssa_i + $and144 | 0) >> 2] = $rsize_3_lcssa_i;
          $shr282_i = $rsize_3_lcssa_i >>> 3;
          if ($rsize_3_lcssa_i >>> 0 < 256) {
            $shl287_i = $shr282_i << 1;
            $121 = 5587756 + ($shl287_i << 2) | 0;
            $122 = HEAP32[1396929] | 0;
            $shl290_i = 1 << $shr282_i;
            do {
              if (($122 & $shl290_i | 0) == 0) {
                HEAP32[1396929] = $122 | $shl290_i;
                $F289_0_i = $121;
                $_pre_phi_i145 = 5587756 + ($shl287_i + 2 << 2) | 0;
              } else {
                $123 = 5587756 + ($shl287_i + 2 << 2) | 0;
                $124 = HEAP32[$123 >> 2] | 0;
                if ($124 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
                  $F289_0_i = $124;
                  $_pre_phi_i145 = $123;
                  break;
                }
                _abort();
                return 0;
              }
            } while (0);
            HEAP32[$_pre_phi_i145 >> 2] = $91;
            HEAP32[$F289_0_i + 12 >> 2] = $91;
            HEAP32[$89 + ($and144 + 8 | 0) >> 2] = $F289_0_i;
            HEAP32[$89 + ($and144 + 12 | 0) >> 2] = $121;
            break;
          }
          $129 = $add_ptr_i126;
          $shr317_i = $rsize_3_lcssa_i >>> 8;
          do {
            if (($shr317_i | 0) == 0) {
              $I315_0_i = 0;
            } else {
              if ($rsize_3_lcssa_i >>> 0 > 16777215) {
                $I315_0_i = 31;
                break;
              }
              $and330_i = ($shr317_i + 1048320 | 0) >>> 16 & 8;
              $shl332_i = $shr317_i << $and330_i;
              $and335_i = ($shl332_i + 520192 | 0) >>> 16 & 4;
              $shl337_i = $shl332_i << $and335_i;
              $and340_i = ($shl337_i + 245760 | 0) >>> 16 & 2;
              $add345_i = (14 - ($and335_i | $and330_i | $and340_i) | 0) + ($shl337_i << $and340_i >>> 15) | 0;
              $I315_0_i = $rsize_3_lcssa_i >>> (($add345_i + 7 | 0) >>> 0) & 1 | $add345_i << 1;
            }
          } while (0);
          $arrayidx354_i = 5588020 + ($I315_0_i << 2) | 0;
          HEAP32[$89 + ($and144 + 28 | 0) >> 2] = $I315_0_i;
          HEAP32[$89 + ($and144 + 20 | 0) >> 2] = 0;
          HEAP32[$89 + ($and144 + 16 | 0) >> 2] = 0;
          $132 = HEAP32[1396930] | 0;
          $shl361_i = 1 << $I315_0_i;
          if (($132 & $shl361_i | 0) == 0) {
            HEAP32[1396930] = $132 | $shl361_i;
            HEAP32[$arrayidx354_i >> 2] = $129;
            HEAP32[$89 + ($and144 + 24 | 0) >> 2] = $arrayidx354_i;
            HEAP32[$89 + ($and144 + 12 | 0) >> 2] = $129;
            HEAP32[$89 + ($and144 + 8 | 0) >> 2] = $129;
            break;
          }
          if (($I315_0_i | 0) == 31) {
            $cond382_i = 0;
          } else {
            $cond382_i = 25 - ($I315_0_i >>> 1) | 0;
          }
          $K372_0_i = $rsize_3_lcssa_i << $cond382_i;
          $T_0_i = HEAP32[$arrayidx354_i >> 2] | 0;
          while (1) {
            if ((HEAP32[$T_0_i + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
              break;
            }
            $arrayidx393_i = $T_0_i + 16 + ($K372_0_i >>> 31 << 2) | 0;
            $139 = HEAP32[$arrayidx393_i >> 2] | 0;
            if (($139 | 0) == 0) {
              label = 3099;
              break;
            } else {
              $K372_0_i = $K372_0_i << 1;
              $T_0_i = $139;
            }
          }
          if ((label | 0) == 3099) {
            if ($arrayidx393_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[$arrayidx393_i >> 2] = $129;
              HEAP32[$89 + ($and144 + 24 | 0) >> 2] = $T_0_i;
              HEAP32[$89 + ($and144 + 12 | 0) >> 2] = $129;
              HEAP32[$89 + ($and144 + 8 | 0) >> 2] = $129;
              break;
            }
          }
          $fd412_i = $T_0_i + 8 | 0;
          $145 = HEAP32[$fd412_i >> 2] | 0;
          $147 = HEAP32[1396933] | 0;
          if ($T_0_i >>> 0 < $147 >>> 0) {
            _abort();
            return 0;
          }
          if ($145 >>> 0 < $147 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$145 + 12 >> 2] = $129;
            HEAP32[$fd412_i >> 2] = $129;
            HEAP32[$89 + ($and144 + 8 | 0) >> 2] = $145;
            HEAP32[$89 + ($and144 + 12 | 0) >> 2] = $T_0_i;
            HEAP32[$89 + ($and144 + 24 | 0) >> 2] = 0;
            break;
          }
        }
      } while (0);
      $add_ptr436_i = $v_3_lcssa_i + 8 | 0;
      if (($add_ptr436_i | 0) == 0) {
        $nb_0 = $and144;
        break;
      } else {
        $mem_0 = $add_ptr436_i;
      }
      return $mem_0 | 0;
    }
  } while (0);
  $153 = HEAP32[1396931] | 0;
  if ($nb_0 >>> 0 <= $153 >>> 0) {
    $sub159 = $153 - $nb_0 | 0;
    $154 = HEAP32[1396934] | 0;
    if ($sub159 >>> 0 > 15) {
      $155 = $154;
      HEAP32[1396934] = $155 + $nb_0 | 0;
      HEAP32[1396931] = $sub159;
      HEAP32[$155 + ($nb_0 + 4 | 0) >> 2] = $sub159 | 1;
      HEAP32[$155 + $153 >> 2] = $sub159;
      HEAP32[$154 + 4 >> 2] = $nb_0 | 3;
    } else {
      HEAP32[1396931] = 0;
      HEAP32[1396934] = 0;
      HEAP32[$154 + 4 >> 2] = $153 | 3;
      $159 = $154 + ($153 + 4 | 0) | 0;
      HEAP32[$159 >> 2] = HEAP32[$159 >> 2] | 1;
    }
    $mem_0 = $154 + 8 | 0;
    return $mem_0 | 0;
  }
  $162 = HEAP32[1396932] | 0;
  if ($nb_0 >>> 0 < $162 >>> 0) {
    $sub187 = $162 - $nb_0 | 0;
    HEAP32[1396932] = $sub187;
    $163 = HEAP32[1396935] | 0;
    $164 = $163;
    HEAP32[1396935] = $164 + $nb_0 | 0;
    HEAP32[$164 + ($nb_0 + 4 | 0) >> 2] = $sub187 | 1;
    HEAP32[$163 + 4 >> 2] = $nb_0 | 3;
    $mem_0 = $163 + 8 | 0;
    return $mem_0 | 0;
  }
  do {
    if ((HEAP32[1315845] | 0) == 0) {
      $call_i_i = _sysconf(8) | 0;
      if (($call_i_i - 1 & $call_i_i | 0) == 0) {
        HEAP32[1315847] = $call_i_i;
        HEAP32[1315846] = $call_i_i;
        HEAP32[1315848] = -1;
        HEAP32[1315849] = 2097152;
        HEAP32[1315850] = 0;
        HEAP32[1397040] = 0;
        HEAP32[1315845] = _time(0) & -16 ^ 1431655768;
        break;
      } else {
        _abort();
        return 0;
      }
    }
  } while (0);
  $add_i147 = $nb_0 + 48 | 0;
  $169 = HEAP32[1315847] | 0;
  $sub_i148 = $nb_0 + 47 | 0;
  $add9_i = $169 + $sub_i148 | 0;
  $neg_i149 = -$169 | 0;
  $and11_i = $add9_i & $neg_i149;
  if ($and11_i >>> 0 <= $nb_0 >>> 0) {
    $mem_0 = 0;
    return $mem_0 | 0;
  }
  $170 = HEAP32[1397039] | 0;
  do {
    if (($170 | 0) != 0) {
      $171 = HEAP32[1397037] | 0;
      $add17_i150 = $171 + $and11_i | 0;
      if ($add17_i150 >>> 0 <= $171 >>> 0 | $add17_i150 >>> 0 > $170 >>> 0) {
        $mem_0 = 0;
      } else {
        break;
      }
      return $mem_0 | 0;
    }
  } while (0);
  L4335 : do {
    if ((HEAP32[1397040] & 4 | 0) == 0) {
      $173 = HEAP32[1396935] | 0;
      L4337 : do {
        if (($173 | 0) == 0) {
          label = 3129;
        } else {
          $174 = $173;
          $sp_0_i_i = 5588164;
          while (1) {
            $base_i_i = $sp_0_i_i | 0;
            $175 = HEAP32[$base_i_i >> 2] | 0;
            if ($175 >>> 0 <= $174 >>> 0) {
              $size_i_i = $sp_0_i_i + 4 | 0;
              if (($175 + (HEAP32[$size_i_i >> 2] | 0) | 0) >>> 0 > $174 >>> 0) {
                break;
              }
            }
            $177 = HEAP32[$sp_0_i_i + 8 >> 2] | 0;
            if (($177 | 0) == 0) {
              label = 3129;
              break L4337;
            } else {
              $sp_0_i_i = $177;
            }
          }
          if (($sp_0_i_i | 0) == 0) {
            label = 3129;
            break;
          }
          $and77_i = $add9_i - (HEAP32[1396932] | 0) & $neg_i149;
          if ($and77_i >>> 0 >= 2147483647) {
            $tsize_0748284_i = 0;
            break;
          }
          $call80_i = _sbrk($and77_i | 0) | 0;
          $cmp82_i = ($call80_i | 0) == ((HEAP32[$base_i_i >> 2] | 0) + (HEAP32[$size_i_i >> 2] | 0) | 0);
          $tbase_0_i = $cmp82_i ? $call80_i : -1;
          $tsize_0_i = $cmp82_i ? $and77_i : 0;
          $br_0_i = $call80_i;
          $ssize_1_i = $and77_i;
          label = 3138;
          break;
        }
      } while (0);
      do {
        if ((label | 0) == 3129) {
          $call34_i = _sbrk(0) | 0;
          if (($call34_i | 0) == -1) {
            $tsize_0748284_i = 0;
            break;
          }
          $178 = $call34_i;
          $179 = HEAP32[1315846] | 0;
          $sub38_i = $179 - 1 | 0;
          if (($sub38_i & $178 | 0) == 0) {
            $ssize_0_i = $and11_i;
          } else {
            $ssize_0_i = ($and11_i - $178 | 0) + ($sub38_i + $178 & -$179) | 0;
          }
          $180 = HEAP32[1397037] | 0;
          $add51_i = $180 + $ssize_0_i | 0;
          if (!($ssize_0_i >>> 0 > $nb_0 >>> 0 & $ssize_0_i >>> 0 < 2147483647)) {
            $tsize_0748284_i = 0;
            break;
          }
          $181 = HEAP32[1397039] | 0;
          if (($181 | 0) != 0) {
            if ($add51_i >>> 0 <= $180 >>> 0 | $add51_i >>> 0 > $181 >>> 0) {
              $tsize_0748284_i = 0;
              break;
            }
          }
          $call65_i = _sbrk($ssize_0_i | 0) | 0;
          $cmp66_i158 = ($call65_i | 0) == ($call34_i | 0);
          $tbase_0_i = $cmp66_i158 ? $call34_i : -1;
          $tsize_0_i = $cmp66_i158 ? $ssize_0_i : 0;
          $br_0_i = $call65_i;
          $ssize_1_i = $ssize_0_i;
          label = 3138;
          break;
        }
      } while (0);
      L4357 : do {
        if ((label | 0) == 3138) {
          $sub109_i = -$ssize_1_i | 0;
          if (($tbase_0_i | 0) != -1) {
            $tsize_290_i = $tsize_0_i;
            $tbase_291_i = $tbase_0_i;
            label = 3149;
            break L4335;
          }
          do {
            if (($br_0_i | 0) != -1 & $ssize_1_i >>> 0 < 2147483647 & $ssize_1_i >>> 0 < $add_i147 >>> 0) {
              $185 = HEAP32[1315847] | 0;
              $and101_i = ($sub_i148 - $ssize_1_i | 0) + $185 & -$185;
              if ($and101_i >>> 0 >= 2147483647) {
                $ssize_2_i = $ssize_1_i;
                break;
              }
              if ((_sbrk($and101_i | 0) | 0) == -1) {
                _sbrk($sub109_i | 0);
                $tsize_0748284_i = $tsize_0_i;
                break L4357;
              } else {
                $ssize_2_i = $and101_i + $ssize_1_i | 0;
                break;
              }
            } else {
              $ssize_2_i = $ssize_1_i;
            }
          } while (0);
          if (($br_0_i | 0) == -1) {
            $tsize_0748284_i = $tsize_0_i;
          } else {
            $tsize_290_i = $ssize_2_i;
            $tbase_291_i = $br_0_i;
            label = 3149;
            break L4335;
          }
        }
      } while (0);
      HEAP32[1397040] = HEAP32[1397040] | 4;
      $tsize_1_i = $tsize_0748284_i;
      label = 3146;
      break;
    } else {
      $tsize_1_i = 0;
      label = 3146;
    }
  } while (0);
  do {
    if ((label | 0) == 3146) {
      if ($and11_i >>> 0 >= 2147483647) {
        break;
      }
      $call128_i = _sbrk($and11_i | 0) | 0;
      $call129_i = _sbrk(0) | 0;
      if (!(($call129_i | 0) != -1 & ($call128_i | 0) != -1 & $call128_i >>> 0 < $call129_i >>> 0)) {
        break;
      }
      $sub_ptr_sub_i = $call129_i - $call128_i | 0;
      $cmp138_i164 = $sub_ptr_sub_i >>> 0 > ($nb_0 + 40 | 0) >>> 0;
      $call128_tbase_1_i = $cmp138_i164 ? $call128_i : -1;
      if (($call128_tbase_1_i | 0) == -1) {
        break;
      } else {
        $tsize_290_i = $cmp138_i164 ? $sub_ptr_sub_i : $tsize_1_i;
        $tbase_291_i = $call128_tbase_1_i;
        label = 3149;
        break;
      }
    }
  } while (0);
  do {
    if ((label | 0) == 3149) {
      $add147_i = (HEAP32[1397037] | 0) + $tsize_290_i | 0;
      HEAP32[1397037] = $add147_i;
      if ($add147_i >>> 0 > (HEAP32[1397038] | 0) >>> 0) {
        HEAP32[1397038] = $add147_i;
      }
      $189 = HEAP32[1396935] | 0;
      L4377 : do {
        if (($189 | 0) == 0) {
          $190 = HEAP32[1396933] | 0;
          if (($190 | 0) == 0 | $tbase_291_i >>> 0 < $190 >>> 0) {
            HEAP32[1396933] = $tbase_291_i;
          }
          HEAP32[1397041] = $tbase_291_i;
          HEAP32[1397042] = $tsize_290_i;
          HEAP32[1397044] = 0;
          HEAP32[1396938] = HEAP32[1315845] | 0;
          HEAP32[1396937] = -1;
          $i_02_i_i = 0;
          while (1) {
            $shl_i_i = $i_02_i_i << 1;
            $192 = 5587756 + ($shl_i_i << 2) | 0;
            HEAP32[5587756 + ($shl_i_i + 3 << 2) >> 2] = $192;
            HEAP32[5587756 + ($shl_i_i + 2 << 2) >> 2] = $192;
            $inc_i_i = $i_02_i_i + 1 | 0;
            if (($inc_i_i | 0) == 32) {
              break;
            } else {
              $i_02_i_i = $inc_i_i;
            }
          }
          $195 = $tbase_291_i + 8 | 0;
          if (($195 & 7 | 0) == 0) {
            $cond_i_i = 0;
          } else {
            $cond_i_i = -$195 & 7;
          }
          $sub5_i_i = ($tsize_290_i - 40 | 0) - $cond_i_i | 0;
          HEAP32[1396935] = $tbase_291_i + $cond_i_i | 0;
          HEAP32[1396932] = $sub5_i_i;
          HEAP32[$tbase_291_i + ($cond_i_i + 4 | 0) >> 2] = $sub5_i_i | 1;
          HEAP32[$tbase_291_i + ($tsize_290_i - 36 | 0) >> 2] = 40;
          HEAP32[1396936] = HEAP32[1315849] | 0;
        } else {
          $sp_0104_i = 5588164;
          while (1) {
            $201 = HEAP32[$sp_0104_i >> 2] | 0;
            $size185_i = $sp_0104_i + 4 | 0;
            $202 = HEAP32[$size185_i >> 2] | 0;
            if (($tbase_291_i | 0) == ($201 + $202 | 0)) {
              label = 3161;
              break;
            }
            $203 = HEAP32[$sp_0104_i + 8 >> 2] | 0;
            if (($203 | 0) == 0) {
              break;
            } else {
              $sp_0104_i = $203;
            }
          }
          do {
            if ((label | 0) == 3161) {
              if ((HEAP32[$sp_0104_i + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              $205 = $189;
              if (!($205 >>> 0 >= $201 >>> 0 & $205 >>> 0 < $tbase_291_i >>> 0)) {
                break;
              }
              HEAP32[$size185_i >> 2] = $202 + $tsize_290_i | 0;
              $206 = HEAP32[1396935] | 0;
              $add212_i = (HEAP32[1396932] | 0) + $tsize_290_i | 0;
              $208 = $206;
              $209 = $206 + 8 | 0;
              if (($209 & 7 | 0) == 0) {
                $cond_i27_i = 0;
              } else {
                $cond_i27_i = -$209 & 7;
              }
              $sub5_i29_i = $add212_i - $cond_i27_i | 0;
              HEAP32[1396935] = $208 + $cond_i27_i | 0;
              HEAP32[1396932] = $sub5_i29_i;
              HEAP32[$208 + ($cond_i27_i + 4 | 0) >> 2] = $sub5_i29_i | 1;
              HEAP32[$208 + ($add212_i + 4 | 0) >> 2] = 40;
              HEAP32[1396936] = HEAP32[1315849] | 0;
              break L4377;
            }
          } while (0);
          if ($tbase_291_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            HEAP32[1396933] = $tbase_291_i;
          }
          $add_ptr224_i = $tbase_291_i + $tsize_290_i | 0;
          $sp_1100_i = 5588164;
          while (1) {
            $base223_i = $sp_1100_i | 0;
            if ((HEAP32[$base223_i >> 2] | 0) == ($add_ptr224_i | 0)) {
              label = 3171;
              break;
            }
            $217 = HEAP32[$sp_1100_i + 8 >> 2] | 0;
            if (($217 | 0) == 0) {
              break;
            } else {
              $sp_1100_i = $217;
            }
          }
          do {
            if ((label | 0) == 3171) {
              if ((HEAP32[$sp_1100_i + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              HEAP32[$base223_i >> 2] = $tbase_291_i;
              $size242_i = $sp_1100_i + 4 | 0;
              HEAP32[$size242_i >> 2] = (HEAP32[$size242_i >> 2] | 0) + $tsize_290_i | 0;
              $220 = $tbase_291_i + 8 | 0;
              if (($220 & 7 | 0) == 0) {
                $cond_i42_i = 0;
              } else {
                $cond_i42_i = -$220 & 7;
              }
              $222 = $tbase_291_i + ($tsize_290_i + 8 | 0) | 0;
              if (($222 & 7 | 0) == 0) {
                $cond15_i_i = 0;
              } else {
                $cond15_i_i = -$222 & 7;
              }
              $add_ptr16_i_i = $tbase_291_i + ($cond15_i_i + $tsize_290_i | 0) | 0;
              $224 = $add_ptr16_i_i;
              $add_ptr4_sum_i49_i = $cond_i42_i + $nb_0 | 0;
              $add_ptr17_i_i = $tbase_291_i + $add_ptr4_sum_i49_i | 0;
              $225 = $add_ptr17_i_i;
              $sub18_i_i = ($add_ptr16_i_i - ($tbase_291_i + $cond_i42_i | 0) | 0) - $nb_0 | 0;
              HEAP32[$tbase_291_i + ($cond_i42_i + 4 | 0) >> 2] = $nb_0 | 3;
              do {
                if (($224 | 0) == (HEAP32[1396935] | 0)) {
                  $add_i_i = (HEAP32[1396932] | 0) + $sub18_i_i | 0;
                  HEAP32[1396932] = $add_i_i;
                  HEAP32[1396935] = $225;
                  HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 4 | 0) >> 2] = $add_i_i | 1;
                } else {
                  if (($224 | 0) == (HEAP32[1396934] | 0)) {
                    $add26_i_i = (HEAP32[1396931] | 0) + $sub18_i_i | 0;
                    HEAP32[1396931] = $add26_i_i;
                    HEAP32[1396934] = $225;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 4 | 0) >> 2] = $add26_i_i | 1;
                    HEAP32[$tbase_291_i + ($add26_i_i + $add_ptr4_sum_i49_i | 0) >> 2] = $add26_i_i;
                    break;
                  }
                  $add_ptr16_sum_i_i = $tsize_290_i + 4 | 0;
                  $234 = HEAP32[$tbase_291_i + ($add_ptr16_sum_i_i + $cond15_i_i | 0) >> 2] | 0;
                  if (($234 & 3 | 0) == 1) {
                    $and37_i_i = $234 & -8;
                    $shr_i54_i = $234 >>> 3;
                    L4412 : do {
                      if ($234 >>> 0 < 256) {
                        $236 = HEAP32[$tbase_291_i + (($cond15_i_i | 8) + $tsize_290_i | 0) >> 2] | 0;
                        $238 = HEAP32[$tbase_291_i + (($tsize_290_i + 12 | 0) + $cond15_i_i | 0) >> 2] | 0;
                        $239 = 5587756 + ($shr_i54_i << 1 << 2) | 0;
                        do {
                          if (($236 | 0) != ($239 | 0)) {
                            if ($236 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            }
                            if ((HEAP32[$236 + 12 >> 2] | 0) == ($224 | 0)) {
                              break;
                            }
                            _abort();
                            return 0;
                          }
                        } while (0);
                        if (($238 | 0) == ($236 | 0)) {
                          HEAP32[1396929] = HEAP32[1396929] & (1 << $shr_i54_i ^ -1);
                          break;
                        }
                        do {
                          if (($238 | 0) == ($239 | 0)) {
                            $fd68_pre_phi_i_i = $238 + 8 | 0;
                          } else {
                            if ($238 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            }
                            $fd59_i_i = $238 + 8 | 0;
                            if ((HEAP32[$fd59_i_i >> 2] | 0) == ($224 | 0)) {
                              $fd68_pre_phi_i_i = $fd59_i_i;
                              break;
                            }
                            _abort();
                            return 0;
                          }
                        } while (0);
                        HEAP32[$236 + 12 >> 2] = $238;
                        HEAP32[$fd68_pre_phi_i_i >> 2] = $236;
                      } else {
                        $247 = $add_ptr16_i_i;
                        $249 = HEAP32[$tbase_291_i + (($cond15_i_i | 24) + $tsize_290_i | 0) >> 2] | 0;
                        $251 = HEAP32[$tbase_291_i + (($tsize_290_i + 12 | 0) + $cond15_i_i | 0) >> 2] | 0;
                        L4433 : do {
                          if (($251 | 0) == ($247 | 0)) {
                            $add_ptr16_sum56_i_i = $cond15_i_i | 16;
                            $258 = $tbase_291_i + ($add_ptr16_sum_i_i + $add_ptr16_sum56_i_i | 0) | 0;
                            $259 = HEAP32[$258 >> 2] | 0;
                            do {
                              if (($259 | 0) == 0) {
                                $arrayidx99_i_i = $tbase_291_i + ($add_ptr16_sum56_i_i + $tsize_290_i | 0) | 0;
                                $260 = HEAP32[$arrayidx99_i_i >> 2] | 0;
                                if (($260 | 0) == 0) {
                                  $R_1_i_i = 0;
                                  break L4433;
                                } else {
                                  $R_0_i_i = $260;
                                  $RP_0_i_i = $arrayidx99_i_i;
                                  break;
                                }
                              } else {
                                $R_0_i_i = $259;
                                $RP_0_i_i = $258;
                              }
                            } while (0);
                            while (1) {
                              $arrayidx103_i_i = $R_0_i_i + 20 | 0;
                              $261 = HEAP32[$arrayidx103_i_i >> 2] | 0;
                              if (($261 | 0) != 0) {
                                $R_0_i_i = $261;
                                $RP_0_i_i = $arrayidx103_i_i;
                                continue;
                              }
                              $arrayidx107_i_i = $R_0_i_i + 16 | 0;
                              $262 = HEAP32[$arrayidx107_i_i >> 2] | 0;
                              if (($262 | 0) == 0) {
                                break;
                              } else {
                                $R_0_i_i = $262;
                                $RP_0_i_i = $arrayidx107_i_i;
                              }
                            }
                            if ($RP_0_i_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            } else {
                              HEAP32[$RP_0_i_i >> 2] = 0;
                              $R_1_i_i = $R_0_i_i;
                              break;
                            }
                          } else {
                            $253 = HEAP32[$tbase_291_i + (($cond15_i_i | 8) + $tsize_290_i | 0) >> 2] | 0;
                            if ($253 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            }
                            $bk82_i_i = $253 + 12 | 0;
                            if ((HEAP32[$bk82_i_i >> 2] | 0) != ($247 | 0)) {
                              _abort();
                              return 0;
                            }
                            $fd85_i_i = $251 + 8 | 0;
                            if ((HEAP32[$fd85_i_i >> 2] | 0) == ($247 | 0)) {
                              HEAP32[$bk82_i_i >> 2] = $251;
                              HEAP32[$fd85_i_i >> 2] = $253;
                              $R_1_i_i = $251;
                              break;
                            } else {
                              _abort();
                              return 0;
                            }
                          }
                        } while (0);
                        if (($249 | 0) == 0) {
                          break;
                        }
                        $265 = $tbase_291_i + (($tsize_290_i + 28 | 0) + $cond15_i_i | 0) | 0;
                        $arrayidx123_i_i = 5588020 + (HEAP32[$265 >> 2] << 2) | 0;
                        do {
                          if (($247 | 0) == (HEAP32[$arrayidx123_i_i >> 2] | 0)) {
                            HEAP32[$arrayidx123_i_i >> 2] = $R_1_i_i;
                            if (($R_1_i_i | 0) != 0) {
                              break;
                            }
                            HEAP32[1396930] = HEAP32[1396930] & (1 << HEAP32[$265 >> 2] ^ -1);
                            break L4412;
                          } else {
                            if ($249 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            }
                            $arrayidx143_i_i = $249 + 16 | 0;
                            if ((HEAP32[$arrayidx143_i_i >> 2] | 0) == ($247 | 0)) {
                              HEAP32[$arrayidx143_i_i >> 2] = $R_1_i_i;
                            } else {
                              HEAP32[$249 + 20 >> 2] = $R_1_i_i;
                            }
                            if (($R_1_i_i | 0) == 0) {
                              break L4412;
                            }
                          }
                        } while (0);
                        if ($R_1_i_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                          _abort();
                          return 0;
                        }
                        HEAP32[$R_1_i_i + 24 >> 2] = $249;
                        $add_ptr16_sum2627_i_i = $cond15_i_i | 16;
                        $275 = HEAP32[$tbase_291_i + ($add_ptr16_sum2627_i_i + $tsize_290_i | 0) >> 2] | 0;
                        do {
                          if (($275 | 0) != 0) {
                            if ($275 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                              _abort();
                              return 0;
                            } else {
                              HEAP32[$R_1_i_i + 16 >> 2] = $275;
                              HEAP32[$275 + 24 >> 2] = $R_1_i_i;
                              break;
                            }
                          }
                        } while (0);
                        $279 = HEAP32[$tbase_291_i + ($add_ptr16_sum_i_i + $add_ptr16_sum2627_i_i | 0) >> 2] | 0;
                        if (($279 | 0) == 0) {
                          break;
                        }
                        if ($279 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                          _abort();
                          return 0;
                        } else {
                          HEAP32[$R_1_i_i + 20 >> 2] = $279;
                          HEAP32[$279 + 24 >> 2] = $R_1_i_i;
                          break;
                        }
                      }
                    } while (0);
                    $oldfirst_0_i_i = $tbase_291_i + (($and37_i_i | $cond15_i_i) + $tsize_290_i | 0) | 0;
                    $qsize_0_i_i = $and37_i_i + $sub18_i_i | 0;
                  } else {
                    $oldfirst_0_i_i = $224;
                    $qsize_0_i_i = $sub18_i_i;
                  }
                  $head208_i_i = $oldfirst_0_i_i + 4 | 0;
                  HEAP32[$head208_i_i >> 2] = HEAP32[$head208_i_i >> 2] & -2;
                  HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 4 | 0) >> 2] = $qsize_0_i_i | 1;
                  HEAP32[$tbase_291_i + ($qsize_0_i_i + $add_ptr4_sum_i49_i | 0) >> 2] = $qsize_0_i_i;
                  $shr214_i_i = $qsize_0_i_i >>> 3;
                  if ($qsize_0_i_i >>> 0 < 256) {
                    $shl221_i_i = $shr214_i_i << 1;
                    $285 = 5587756 + ($shl221_i_i << 2) | 0;
                    $286 = HEAP32[1396929] | 0;
                    $shl226_i_i = 1 << $shr214_i_i;
                    do {
                      if (($286 & $shl226_i_i | 0) == 0) {
                        HEAP32[1396929] = $286 | $shl226_i_i;
                        $F224_0_i_i = $285;
                        $_pre_phi_i67_i = 5587756 + ($shl221_i_i + 2 << 2) | 0;
                      } else {
                        $287 = 5587756 + ($shl221_i_i + 2 << 2) | 0;
                        $288 = HEAP32[$287 >> 2] | 0;
                        if ($288 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
                          $F224_0_i_i = $288;
                          $_pre_phi_i67_i = $287;
                          break;
                        }
                        _abort();
                        return 0;
                      }
                    } while (0);
                    HEAP32[$_pre_phi_i67_i >> 2] = $225;
                    HEAP32[$F224_0_i_i + 12 >> 2] = $225;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 8 | 0) >> 2] = $F224_0_i_i;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 12 | 0) >> 2] = $285;
                    break;
                  }
                  $293 = $add_ptr17_i_i;
                  $shr253_i_i = $qsize_0_i_i >>> 8;
                  do {
                    if (($shr253_i_i | 0) == 0) {
                      $I252_0_i_i = 0;
                    } else {
                      if ($qsize_0_i_i >>> 0 > 16777215) {
                        $I252_0_i_i = 31;
                        break;
                      }
                      $and264_i_i = ($shr253_i_i + 1048320 | 0) >>> 16 & 8;
                      $shl265_i_i = $shr253_i_i << $and264_i_i;
                      $and268_i_i = ($shl265_i_i + 520192 | 0) >>> 16 & 4;
                      $shl270_i_i = $shl265_i_i << $and268_i_i;
                      $and273_i_i = ($shl270_i_i + 245760 | 0) >>> 16 & 2;
                      $add278_i_i = (14 - ($and268_i_i | $and264_i_i | $and273_i_i) | 0) + ($shl270_i_i << $and273_i_i >>> 15) | 0;
                      $I252_0_i_i = $qsize_0_i_i >>> (($add278_i_i + 7 | 0) >>> 0) & 1 | $add278_i_i << 1;
                    }
                  } while (0);
                  $arrayidx287_i_i = 5588020 + ($I252_0_i_i << 2) | 0;
                  HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 28 | 0) >> 2] = $I252_0_i_i;
                  HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 20 | 0) >> 2] = 0;
                  HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 16 | 0) >> 2] = 0;
                  $296 = HEAP32[1396930] | 0;
                  $shl294_i_i = 1 << $I252_0_i_i;
                  if (($296 & $shl294_i_i | 0) == 0) {
                    HEAP32[1396930] = $296 | $shl294_i_i;
                    HEAP32[$arrayidx287_i_i >> 2] = $293;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 24 | 0) >> 2] = $arrayidx287_i_i;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 12 | 0) >> 2] = $293;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 8 | 0) >> 2] = $293;
                    break;
                  }
                  if (($I252_0_i_i | 0) == 31) {
                    $cond315_i_i = 0;
                  } else {
                    $cond315_i_i = 25 - ($I252_0_i_i >>> 1) | 0;
                  }
                  $K305_0_i_i = $qsize_0_i_i << $cond315_i_i;
                  $T_0_i68_i = HEAP32[$arrayidx287_i_i >> 2] | 0;
                  while (1) {
                    if ((HEAP32[$T_0_i68_i + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
                      break;
                    }
                    $arrayidx325_i_i = $T_0_i68_i + 16 + ($K305_0_i_i >>> 31 << 2) | 0;
                    $303 = HEAP32[$arrayidx325_i_i >> 2] | 0;
                    if (($303 | 0) == 0) {
                      label = 3244;
                      break;
                    } else {
                      $K305_0_i_i = $K305_0_i_i << 1;
                      $T_0_i68_i = $303;
                    }
                  }
                  if ((label | 0) == 3244) {
                    if ($arrayidx325_i_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                      _abort();
                      return 0;
                    } else {
                      HEAP32[$arrayidx325_i_i >> 2] = $293;
                      HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 24 | 0) >> 2] = $T_0_i68_i;
                      HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 12 | 0) >> 2] = $293;
                      HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 8 | 0) >> 2] = $293;
                      break;
                    }
                  }
                  $fd344_i_i = $T_0_i68_i + 8 | 0;
                  $309 = HEAP32[$fd344_i_i >> 2] | 0;
                  $311 = HEAP32[1396933] | 0;
                  if ($T_0_i68_i >>> 0 < $311 >>> 0) {
                    _abort();
                    return 0;
                  }
                  if ($309 >>> 0 < $311 >>> 0) {
                    _abort();
                    return 0;
                  } else {
                    HEAP32[$309 + 12 >> 2] = $293;
                    HEAP32[$fd344_i_i >> 2] = $293;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 8 | 0) >> 2] = $309;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 12 | 0) >> 2] = $T_0_i68_i;
                    HEAP32[$tbase_291_i + ($add_ptr4_sum_i49_i + 24 | 0) >> 2] = 0;
                    break;
                  }
                }
              } while (0);
              $mem_0 = $tbase_291_i + ($cond_i42_i | 8) | 0;
              return $mem_0 | 0;
            }
          } while (0);
          $316 = $189;
          $sp_0_i_i_i = 5588164;
          while (1) {
            $317 = HEAP32[$sp_0_i_i_i >> 2] | 0;
            if ($317 >>> 0 <= $316 >>> 0) {
              $318 = HEAP32[$sp_0_i_i_i + 4 >> 2] | 0;
              $add_ptr_i_i_i = $317 + $318 | 0;
              if ($add_ptr_i_i_i >>> 0 > $316 >>> 0) {
                break;
              }
            }
            $sp_0_i_i_i = HEAP32[$sp_0_i_i_i + 8 >> 2] | 0;
          }
          $320 = $317 + ($318 - 39 | 0) | 0;
          if (($320 & 7 | 0) == 0) {
            $cond_i17_i = 0;
          } else {
            $cond_i17_i = -$320 & 7;
          }
          $add_ptr7_i_i = $317 + (($318 - 47 | 0) + $cond_i17_i | 0) | 0;
          $cond13_i_i = $add_ptr7_i_i >>> 0 < ($189 + 16 | 0) >>> 0 ? $316 : $add_ptr7_i_i;
          $add_ptr14_i_i = $cond13_i_i + 8 | 0;
          $323 = $tbase_291_i + 8 | 0;
          if (($323 & 7 | 0) == 0) {
            $cond_i_i_i = 0;
          } else {
            $cond_i_i_i = -$323 & 7;
          }
          $sub5_i_i_i = ($tsize_290_i - 40 | 0) - $cond_i_i_i | 0;
          HEAP32[1396935] = $tbase_291_i + $cond_i_i_i | 0;
          HEAP32[1396932] = $sub5_i_i_i;
          HEAP32[$tbase_291_i + ($cond_i_i_i + 4 | 0) >> 2] = $sub5_i_i_i | 1;
          HEAP32[$tbase_291_i + ($tsize_290_i - 36 | 0) >> 2] = 40;
          HEAP32[1396936] = HEAP32[1315849] | 0;
          HEAP32[$cond13_i_i + 4 >> 2] = 27;
          HEAP32[$add_ptr14_i_i >> 2] = HEAP32[1397041] | 0;
          HEAP32[$add_ptr14_i_i + 4 >> 2] = HEAP32[5588168 >> 2] | 0;
          HEAP32[$add_ptr14_i_i + 8 >> 2] = HEAP32[5588172 >> 2] | 0;
          HEAP32[$add_ptr14_i_i + 12 >> 2] = HEAP32[5588176 >> 2] | 0;
          HEAP32[1397041] = $tbase_291_i;
          HEAP32[1397042] = $tsize_290_i;
          HEAP32[1397044] = 0;
          HEAP32[1397043] = $add_ptr14_i_i;
          $330 = $cond13_i_i + 28 | 0;
          HEAP32[$330 >> 2] = 7;
          L4531 : do {
            if (($cond13_i_i + 32 | 0) >>> 0 < $add_ptr_i_i_i >>> 0) {
              $add_ptr2415_i_i = $330;
              while (1) {
                $332 = $add_ptr2415_i_i + 4 | 0;
                HEAP32[$332 >> 2] = 7;
                if (($add_ptr2415_i_i + 8 | 0) >>> 0 < $add_ptr_i_i_i >>> 0) {
                  $add_ptr2415_i_i = $332;
                } else {
                  break L4531;
                }
              }
            }
          } while (0);
          if (($cond13_i_i | 0) == ($316 | 0)) {
            break;
          }
          $sub_ptr_sub_i_i = $cond13_i_i - $189 | 0;
          $335 = $316 + ($sub_ptr_sub_i_i + 4 | 0) | 0;
          HEAP32[$335 >> 2] = HEAP32[$335 >> 2] & -2;
          HEAP32[$189 + 4 >> 2] = $sub_ptr_sub_i_i | 1;
          HEAP32[$316 + $sub_ptr_sub_i_i >> 2] = $sub_ptr_sub_i_i;
          $shr_i_i = $sub_ptr_sub_i_i >>> 3;
          if ($sub_ptr_sub_i_i >>> 0 < 256) {
            $shl_i20_i = $shr_i_i << 1;
            $337 = 5587756 + ($shl_i20_i << 2) | 0;
            $338 = HEAP32[1396929] | 0;
            $shl39_i_i = 1 << $shr_i_i;
            do {
              if (($338 & $shl39_i_i | 0) == 0) {
                HEAP32[1396929] = $338 | $shl39_i_i;
                $F_0_i_i = $337;
                $_pre_phi_i_i = 5587756 + ($shl_i20_i + 2 << 2) | 0;
              } else {
                $339 = 5587756 + ($shl_i20_i + 2 << 2) | 0;
                $340 = HEAP32[$339 >> 2] | 0;
                if ($340 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
                  $F_0_i_i = $340;
                  $_pre_phi_i_i = $339;
                  break;
                }
                _abort();
                return 0;
              }
            } while (0);
            HEAP32[$_pre_phi_i_i >> 2] = $189;
            HEAP32[$F_0_i_i + 12 >> 2] = $189;
            HEAP32[$189 + 8 >> 2] = $F_0_i_i;
            HEAP32[$189 + 12 >> 2] = $337;
            break;
          }
          $343 = $189;
          $shr58_i_i = $sub_ptr_sub_i_i >>> 8;
          do {
            if (($shr58_i_i | 0) == 0) {
              $I57_0_i_i = 0;
            } else {
              if ($sub_ptr_sub_i_i >>> 0 > 16777215) {
                $I57_0_i_i = 31;
                break;
              }
              $and69_i_i = ($shr58_i_i + 1048320 | 0) >>> 16 & 8;
              $shl70_i_i = $shr58_i_i << $and69_i_i;
              $and73_i_i = ($shl70_i_i + 520192 | 0) >>> 16 & 4;
              $shl75_i_i = $shl70_i_i << $and73_i_i;
              $and78_i_i = ($shl75_i_i + 245760 | 0) >>> 16 & 2;
              $add83_i_i = (14 - ($and73_i_i | $and69_i_i | $and78_i_i) | 0) + ($shl75_i_i << $and78_i_i >>> 15) | 0;
              $I57_0_i_i = $sub_ptr_sub_i_i >>> (($add83_i_i + 7 | 0) >>> 0) & 1 | $add83_i_i << 1;
            }
          } while (0);
          $arrayidx91_i_i = 5588020 + ($I57_0_i_i << 2) | 0;
          HEAP32[$189 + 28 >> 2] = $I57_0_i_i;
          HEAP32[$189 + 20 >> 2] = 0;
          HEAP32[$189 + 16 >> 2] = 0;
          $345 = HEAP32[1396930] | 0;
          $shl95_i_i = 1 << $I57_0_i_i;
          if (($345 & $shl95_i_i | 0) == 0) {
            HEAP32[1396930] = $345 | $shl95_i_i;
            HEAP32[$arrayidx91_i_i >> 2] = $343;
            HEAP32[$189 + 24 >> 2] = $arrayidx91_i_i;
            HEAP32[$189 + 12 >> 2] = $189;
            HEAP32[$189 + 8 >> 2] = $189;
            break;
          }
          if (($I57_0_i_i | 0) == 31) {
            $cond115_i_i = 0;
          } else {
            $cond115_i_i = 25 - ($I57_0_i_i >>> 1) | 0;
          }
          $K105_0_i_i = $sub_ptr_sub_i_i << $cond115_i_i;
          $T_0_i_i = HEAP32[$arrayidx91_i_i >> 2] | 0;
          while (1) {
            if ((HEAP32[$T_0_i_i + 4 >> 2] & -8 | 0) == ($sub_ptr_sub_i_i | 0)) {
              break;
            }
            $arrayidx126_i_i = $T_0_i_i + 16 + ($K105_0_i_i >>> 31 << 2) | 0;
            $348 = HEAP32[$arrayidx126_i_i >> 2] | 0;
            if (($348 | 0) == 0) {
              label = 3279;
              break;
            } else {
              $K105_0_i_i = $K105_0_i_i << 1;
              $T_0_i_i = $348;
            }
          }
          if ((label | 0) == 3279) {
            if ($arrayidx126_i_i >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[$arrayidx126_i_i >> 2] = $343;
              HEAP32[$189 + 24 >> 2] = $T_0_i_i;
              HEAP32[$189 + 12 >> 2] = $189;
              HEAP32[$189 + 8 >> 2] = $189;
              break;
            }
          }
          $fd145_i_i = $T_0_i_i + 8 | 0;
          $351 = HEAP32[$fd145_i_i >> 2] | 0;
          $353 = HEAP32[1396933] | 0;
          if ($T_0_i_i >>> 0 < $353 >>> 0) {
            _abort();
            return 0;
          }
          if ($351 >>> 0 < $353 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[$351 + 12 >> 2] = $343;
            HEAP32[$fd145_i_i >> 2] = $343;
            HEAP32[$189 + 8 >> 2] = $351;
            HEAP32[$189 + 12 >> 2] = $T_0_i_i;
            HEAP32[$189 + 24 >> 2] = 0;
            break;
          }
        }
      } while (0);
      $355 = HEAP32[1396932] | 0;
      if ($355 >>> 0 <= $nb_0 >>> 0) {
        break;
      }
      $sub253_i = $355 - $nb_0 | 0;
      HEAP32[1396932] = $sub253_i;
      $356 = HEAP32[1396935] | 0;
      $357 = $356;
      HEAP32[1396935] = $357 + $nb_0 | 0;
      HEAP32[$357 + ($nb_0 + 4 | 0) >> 2] = $sub253_i | 1;
      HEAP32[$356 + 4 >> 2] = $nb_0 | 3;
      $mem_0 = $356 + 8 | 0;
      return $mem_0 | 0;
    }
  } while (0);
  HEAP32[___errno_location() >> 2] = 12;
  $mem_0 = 0;
  return $mem_0 | 0;
}
function _free($mem) {
  $mem = $mem | 0;
  var $add_ptr = 0, $0 = 0, $1 = 0, $3 = 0, $and = 0, $and5 = 0, $add_ptr6 = 0, $4 = 0, $5 = 0, $add_ptr_sum231 = 0, $add_ptr16 = 0, $6 = 0, $add17 = 0, $shr = 0, $9 = 0, $11 = 0, $12 = 0, $fd56 = 0, $fd67_pre_phi = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $bk82 = 0, $fd86 = 0, $28 = 0, $29 = 0, $arrayidx103 = 0, $30 = 0, $RP_0 = 0, $R_0 = 0, $arrayidx108 = 0, $31 = 0, $arrayidx113 = 0, $32 = 0, $R_1 = 0, $34 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $44 = 0, $48 = 0, $51 = 0, $psize_0 = 0, $p_0 = 0, $55 = 0, $56 = 0, $57 = 0, $add243 = 0, $add258 = 0, $add266 = 0, $shr267 = 0, $66 = 0, $68 = 0, $69 = 0, $fd310 = 0, $fd321_pre_phi = 0, $77 = 0, $79 = 0, $81 = 0, $83 = 0, $bk342 = 0, $fd346 = 0, $88 = 0, $89 = 0, $arrayidx366 = 0, $90 = 0, $RP359_0 = 0, $R331_0 = 0, $arrayidx373 = 0, $91 = 0, $arrayidx378 = 0, $92 = 0, $R331_1 = 0, $95 = 0, $arrayidx399 = 0, $arrayidx418 = 0, $105 = 0, $109 = 0, $psize_1 = 0, $shr497 = 0, $shl504 = 0, $113 = 0, $114 = 0, $shl507 = 0, $115 = 0, $116 = 0, $_pre_phi = 0, $F506_0 = 0, $119 = 0, $shr531 = 0, $and541 = 0, $shl542 = 0, $and545 = 0, $shl547 = 0, $and550 = 0, $add555 = 0, $I530_0 = 0, $arrayidx563 = 0, $121 = 0, $shl569 = 0, $cond = 0, $T_0 = 0, $K579_0 = 0, $arrayidx595 = 0, $124 = 0, $fd613 = 0, $127 = 0, $129 = 0, $dec = 0, $sp_0_in_i = 0, $sp_0_i = 0, label = 0;
  if (($mem | 0) == 0) {
    return;
  }
  $add_ptr = $mem - 8 | 0;
  $0 = $add_ptr;
  $1 = HEAP32[1396933] | 0;
  if ($add_ptr >>> 0 < $1 >>> 0) {
    _abort();
  }
  $3 = HEAP32[$mem - 4 >> 2] | 0;
  $and = $3 & 3;
  if (($and | 0) == 1) {
    _abort();
  }
  $and5 = $3 & -8;
  $add_ptr6 = $mem + ($and5 - 8 | 0) | 0;
  $4 = $add_ptr6;
  L10 : do {
    if (($3 & 1 | 0) == 0) {
      $5 = HEAP32[$add_ptr >> 2] | 0;
      if (($and | 0) == 0) {
        return;
      }
      $add_ptr_sum231 = -8 - $5 | 0;
      $add_ptr16 = $mem + $add_ptr_sum231 | 0;
      $6 = $add_ptr16;
      $add17 = $5 + $and5 | 0;
      if ($add_ptr16 >>> 0 < $1 >>> 0) {
        _abort();
      }
      if (($6 | 0) == (HEAP32[1396934] | 0)) {
        $51 = $mem + ($and5 - 4 | 0) | 0;
        if ((HEAP32[$51 >> 2] & 3 | 0) != 3) {
          $p_0 = $6;
          $psize_0 = $add17;
          break;
        }
        HEAP32[1396931] = $add17;
        HEAP32[$51 >> 2] = HEAP32[$51 >> 2] & -2;
        HEAP32[$mem + ($add_ptr_sum231 + 4 | 0) >> 2] = $add17 | 1;
        HEAP32[$add_ptr6 >> 2] = $add17;
        return;
      }
      $shr = $5 >>> 3;
      if ($5 >>> 0 < 256) {
        $9 = HEAP32[$mem + ($add_ptr_sum231 + 8 | 0) >> 2] | 0;
        $11 = HEAP32[$mem + ($add_ptr_sum231 + 12 | 0) >> 2] | 0;
        $12 = 5587756 + ($shr << 1 << 2) | 0;
        do {
          if (($9 | 0) != ($12 | 0)) {
            if ($9 >>> 0 < $1 >>> 0) {
              _abort();
            }
            if ((HEAP32[$9 + 12 >> 2] | 0) == ($6 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        if (($11 | 0) == ($9 | 0)) {
          HEAP32[1396929] = HEAP32[1396929] & (1 << $shr ^ -1);
          $p_0 = $6;
          $psize_0 = $add17;
          break;
        }
        do {
          if (($11 | 0) == ($12 | 0)) {
            $fd67_pre_phi = $11 + 8 | 0;
          } else {
            if ($11 >>> 0 < $1 >>> 0) {
              _abort();
            }
            $fd56 = $11 + 8 | 0;
            if ((HEAP32[$fd56 >> 2] | 0) == ($6 | 0)) {
              $fd67_pre_phi = $fd56;
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[$9 + 12 >> 2] = $11;
        HEAP32[$fd67_pre_phi >> 2] = $9;
        $p_0 = $6;
        $psize_0 = $add17;
        break;
      }
      $18 = $add_ptr16;
      $20 = HEAP32[$mem + ($add_ptr_sum231 + 24 | 0) >> 2] | 0;
      $22 = HEAP32[$mem + ($add_ptr_sum231 + 12 | 0) >> 2] | 0;
      L44 : do {
        if (($22 | 0) == ($18 | 0)) {
          $28 = $mem + ($add_ptr_sum231 + 20 | 0) | 0;
          $29 = HEAP32[$28 >> 2] | 0;
          do {
            if (($29 | 0) == 0) {
              $arrayidx103 = $mem + ($add_ptr_sum231 + 16 | 0) | 0;
              $30 = HEAP32[$arrayidx103 >> 2] | 0;
              if (($30 | 0) == 0) {
                $R_1 = 0;
                break L44;
              } else {
                $R_0 = $30;
                $RP_0 = $arrayidx103;
                break;
              }
            } else {
              $R_0 = $29;
              $RP_0 = $28;
            }
          } while (0);
          while (1) {
            $arrayidx108 = $R_0 + 20 | 0;
            $31 = HEAP32[$arrayidx108 >> 2] | 0;
            if (($31 | 0) != 0) {
              $R_0 = $31;
              $RP_0 = $arrayidx108;
              continue;
            }
            $arrayidx113 = $R_0 + 16 | 0;
            $32 = HEAP32[$arrayidx113 >> 2] | 0;
            if (($32 | 0) == 0) {
              break;
            } else {
              $R_0 = $32;
              $RP_0 = $arrayidx113;
            }
          }
          if ($RP_0 >>> 0 < $1 >>> 0) {
            _abort();
          } else {
            HEAP32[$RP_0 >> 2] = 0;
            $R_1 = $R_0;
            break;
          }
        } else {
          $24 = HEAP32[$mem + ($add_ptr_sum231 + 8 | 0) >> 2] | 0;
          if ($24 >>> 0 < $1 >>> 0) {
            _abort();
          }
          $bk82 = $24 + 12 | 0;
          if ((HEAP32[$bk82 >> 2] | 0) != ($18 | 0)) {
            _abort();
          }
          $fd86 = $22 + 8 | 0;
          if ((HEAP32[$fd86 >> 2] | 0) == ($18 | 0)) {
            HEAP32[$bk82 >> 2] = $22;
            HEAP32[$fd86 >> 2] = $24;
            $R_1 = $22;
            break;
          } else {
            _abort();
          }
        }
      } while (0);
      if (($20 | 0) == 0) {
        $p_0 = $6;
        $psize_0 = $add17;
        break;
      }
      $34 = $mem + ($add_ptr_sum231 + 28 | 0) | 0;
      $arrayidx130 = 5588020 + (HEAP32[$34 >> 2] << 2) | 0;
      do {
        if (($18 | 0) == (HEAP32[$arrayidx130 >> 2] | 0)) {
          HEAP32[$arrayidx130 >> 2] = $R_1;
          if (($R_1 | 0) != 0) {
            break;
          }
          HEAP32[1396930] = HEAP32[1396930] & (1 << HEAP32[$34 >> 2] ^ -1);
          $p_0 = $6;
          $psize_0 = $add17;
          break L10;
        } else {
          if ($20 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
          }
          $arrayidx149 = $20 + 16 | 0;
          if ((HEAP32[$arrayidx149 >> 2] | 0) == ($18 | 0)) {
            HEAP32[$arrayidx149 >> 2] = $R_1;
          } else {
            HEAP32[$20 + 20 >> 2] = $R_1;
          }
          if (($R_1 | 0) == 0) {
            $p_0 = $6;
            $psize_0 = $add17;
            break L10;
          }
        }
      } while (0);
      if ($R_1 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
        _abort();
      }
      HEAP32[$R_1 + 24 >> 2] = $20;
      $44 = HEAP32[$mem + ($add_ptr_sum231 + 16 | 0) >> 2] | 0;
      do {
        if (($44 | 0) != 0) {
          if ($44 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
          } else {
            HEAP32[$R_1 + 16 >> 2] = $44;
            HEAP32[$44 + 24 >> 2] = $R_1;
            break;
          }
        }
      } while (0);
      $48 = HEAP32[$mem + ($add_ptr_sum231 + 20 | 0) >> 2] | 0;
      if (($48 | 0) == 0) {
        $p_0 = $6;
        $psize_0 = $add17;
        break;
      }
      if ($48 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
        _abort();
      } else {
        HEAP32[$R_1 + 20 >> 2] = $48;
        HEAP32[$48 + 24 >> 2] = $R_1;
        $p_0 = $6;
        $psize_0 = $add17;
        break;
      }
    } else {
      $p_0 = $0;
      $psize_0 = $and5;
    }
  } while (0);
  $55 = $p_0;
  if ($55 >>> 0 >= $add_ptr6 >>> 0) {
    _abort();
  }
  $56 = $mem + ($and5 - 4 | 0) | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  if (($57 & 1 | 0) == 0) {
    _abort();
  }
  do {
    if (($57 & 2 | 0) == 0) {
      if (($4 | 0) == (HEAP32[1396935] | 0)) {
        $add243 = (HEAP32[1396932] | 0) + $psize_0 | 0;
        HEAP32[1396932] = $add243;
        HEAP32[1396935] = $p_0;
        HEAP32[$p_0 + 4 >> 2] = $add243 | 1;
        if (($p_0 | 0) == (HEAP32[1396934] | 0)) {
          HEAP32[1396934] = 0;
          HEAP32[1396931] = 0;
        }
        if ($add243 >>> 0 <= (HEAP32[1396936] | 0) >>> 0) {
          return;
        }
        _sys_trim(0);
        return;
      }
      if (($4 | 0) == (HEAP32[1396934] | 0)) {
        $add258 = (HEAP32[1396931] | 0) + $psize_0 | 0;
        HEAP32[1396931] = $add258;
        HEAP32[1396934] = $p_0;
        HEAP32[$p_0 + 4 >> 2] = $add258 | 1;
        HEAP32[$55 + $add258 >> 2] = $add258;
        return;
      }
      $add266 = ($57 & -8) + $psize_0 | 0;
      $shr267 = $57 >>> 3;
      L115 : do {
        if ($57 >>> 0 < 256) {
          $66 = HEAP32[$mem + $and5 >> 2] | 0;
          $68 = HEAP32[$mem + ($and5 | 4) >> 2] | 0;
          $69 = 5587756 + ($shr267 << 1 << 2) | 0;
          do {
            if (($66 | 0) != ($69 | 0)) {
              if ($66 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              }
              if ((HEAP32[$66 + 12 >> 2] | 0) == ($4 | 0)) {
                break;
              }
              _abort();
            }
          } while (0);
          if (($68 | 0) == ($66 | 0)) {
            HEAP32[1396929] = HEAP32[1396929] & (1 << $shr267 ^ -1);
            break;
          }
          do {
            if (($68 | 0) == ($69 | 0)) {
              $fd321_pre_phi = $68 + 8 | 0;
            } else {
              if ($68 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              }
              $fd310 = $68 + 8 | 0;
              if ((HEAP32[$fd310 >> 2] | 0) == ($4 | 0)) {
                $fd321_pre_phi = $fd310;
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[$66 + 12 >> 2] = $68;
          HEAP32[$fd321_pre_phi >> 2] = $66;
        } else {
          $77 = $add_ptr6;
          $79 = HEAP32[$mem + ($and5 + 16 | 0) >> 2] | 0;
          $81 = HEAP32[$mem + ($and5 | 4) >> 2] | 0;
          L136 : do {
            if (($81 | 0) == ($77 | 0)) {
              $88 = $mem + ($and5 + 12 | 0) | 0;
              $89 = HEAP32[$88 >> 2] | 0;
              do {
                if (($89 | 0) == 0) {
                  $arrayidx366 = $mem + ($and5 + 8 | 0) | 0;
                  $90 = HEAP32[$arrayidx366 >> 2] | 0;
                  if (($90 | 0) == 0) {
                    $R331_1 = 0;
                    break L136;
                  } else {
                    $R331_0 = $90;
                    $RP359_0 = $arrayidx366;
                    break;
                  }
                } else {
                  $R331_0 = $89;
                  $RP359_0 = $88;
                }
              } while (0);
              while (1) {
                $arrayidx373 = $R331_0 + 20 | 0;
                $91 = HEAP32[$arrayidx373 >> 2] | 0;
                if (($91 | 0) != 0) {
                  $R331_0 = $91;
                  $RP359_0 = $arrayidx373;
                  continue;
                }
                $arrayidx378 = $R331_0 + 16 | 0;
                $92 = HEAP32[$arrayidx378 >> 2] | 0;
                if (($92 | 0) == 0) {
                  break;
                } else {
                  $R331_0 = $92;
                  $RP359_0 = $arrayidx378;
                }
              }
              if ($RP359_0 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              } else {
                HEAP32[$RP359_0 >> 2] = 0;
                $R331_1 = $R331_0;
                break;
              }
            } else {
              $83 = HEAP32[$mem + $and5 >> 2] | 0;
              if ($83 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              }
              $bk342 = $83 + 12 | 0;
              if ((HEAP32[$bk342 >> 2] | 0) != ($77 | 0)) {
                _abort();
              }
              $fd346 = $81 + 8 | 0;
              if ((HEAP32[$fd346 >> 2] | 0) == ($77 | 0)) {
                HEAP32[$bk342 >> 2] = $81;
                HEAP32[$fd346 >> 2] = $83;
                $R331_1 = $81;
                break;
              } else {
                _abort();
              }
            }
          } while (0);
          if (($79 | 0) == 0) {
            break;
          }
          $95 = $mem + ($and5 + 20 | 0) | 0;
          $arrayidx399 = 5588020 + (HEAP32[$95 >> 2] << 2) | 0;
          do {
            if (($77 | 0) == (HEAP32[$arrayidx399 >> 2] | 0)) {
              HEAP32[$arrayidx399 >> 2] = $R331_1;
              if (($R331_1 | 0) != 0) {
                break;
              }
              HEAP32[1396930] = HEAP32[1396930] & (1 << HEAP32[$95 >> 2] ^ -1);
              break L115;
            } else {
              if ($79 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              }
              $arrayidx418 = $79 + 16 | 0;
              if ((HEAP32[$arrayidx418 >> 2] | 0) == ($77 | 0)) {
                HEAP32[$arrayidx418 >> 2] = $R331_1;
              } else {
                HEAP32[$79 + 20 >> 2] = $R331_1;
              }
              if (($R331_1 | 0) == 0) {
                break L115;
              }
            }
          } while (0);
          if ($R331_1 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
          }
          HEAP32[$R331_1 + 24 >> 2] = $79;
          $105 = HEAP32[$mem + ($and5 + 8 | 0) >> 2] | 0;
          do {
            if (($105 | 0) != 0) {
              if ($105 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
                _abort();
              } else {
                HEAP32[$R331_1 + 16 >> 2] = $105;
                HEAP32[$105 + 24 >> 2] = $R331_1;
                break;
              }
            }
          } while (0);
          $109 = HEAP32[$mem + ($and5 + 12 | 0) >> 2] | 0;
          if (($109 | 0) == 0) {
            break;
          }
          if ($109 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
            _abort();
          } else {
            HEAP32[$R331_1 + 20 >> 2] = $109;
            HEAP32[$109 + 24 >> 2] = $R331_1;
            break;
          }
        }
      } while (0);
      HEAP32[$p_0 + 4 >> 2] = $add266 | 1;
      HEAP32[$55 + $add266 >> 2] = $add266;
      if (($p_0 | 0) != (HEAP32[1396934] | 0)) {
        $psize_1 = $add266;
        break;
      }
      HEAP32[1396931] = $add266;
      return;
    } else {
      HEAP32[$56 >> 2] = $57 & -2;
      HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
      HEAP32[$55 + $psize_0 >> 2] = $psize_0;
      $psize_1 = $psize_0;
    }
  } while (0);
  $shr497 = $psize_1 >>> 3;
  if ($psize_1 >>> 0 < 256) {
    $shl504 = $shr497 << 1;
    $113 = 5587756 + ($shl504 << 2) | 0;
    $114 = HEAP32[1396929] | 0;
    $shl507 = 1 << $shr497;
    do {
      if (($114 & $shl507 | 0) == 0) {
        HEAP32[1396929] = $114 | $shl507;
        $F506_0 = $113;
        $_pre_phi = 5587756 + ($shl504 + 2 << 2) | 0;
      } else {
        $115 = 5587756 + ($shl504 + 2 << 2) | 0;
        $116 = HEAP32[$115 >> 2] | 0;
        if ($116 >>> 0 >= (HEAP32[1396933] | 0) >>> 0) {
          $F506_0 = $116;
          $_pre_phi = $115;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[$_pre_phi >> 2] = $p_0;
    HEAP32[$F506_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0 + 8 >> 2] = $F506_0;
    HEAP32[$p_0 + 12 >> 2] = $113;
    return;
  }
  $119 = $p_0;
  $shr531 = $psize_1 >>> 8;
  do {
    if (($shr531 | 0) == 0) {
      $I530_0 = 0;
    } else {
      if ($psize_1 >>> 0 > 16777215) {
        $I530_0 = 31;
        break;
      }
      $and541 = ($shr531 + 1048320 | 0) >>> 16 & 8;
      $shl542 = $shr531 << $and541;
      $and545 = ($shl542 + 520192 | 0) >>> 16 & 4;
      $shl547 = $shl542 << $and545;
      $and550 = ($shl547 + 245760 | 0) >>> 16 & 2;
      $add555 = (14 - ($and545 | $and541 | $and550) | 0) + ($shl547 << $and550 >>> 15) | 0;
      $I530_0 = $psize_1 >>> (($add555 + 7 | 0) >>> 0) & 1 | $add555 << 1;
    }
  } while (0);
  $arrayidx563 = 5588020 + ($I530_0 << 2) | 0;
  HEAP32[$p_0 + 28 >> 2] = $I530_0;
  HEAP32[$p_0 + 20 >> 2] = 0;
  HEAP32[$p_0 + 16 >> 2] = 0;
  $121 = HEAP32[1396930] | 0;
  $shl569 = 1 << $I530_0;
  do {
    if (($121 & $shl569 | 0) == 0) {
      HEAP32[1396930] = $121 | $shl569;
      HEAP32[$arrayidx563 >> 2] = $119;
      HEAP32[$p_0 + 24 >> 2] = $arrayidx563;
      HEAP32[$p_0 + 12 >> 2] = $p_0;
      HEAP32[$p_0 + 8 >> 2] = $p_0;
    } else {
      if (($I530_0 | 0) == 31) {
        $cond = 0;
      } else {
        $cond = 25 - ($I530_0 >>> 1) | 0;
      }
      $K579_0 = $psize_1 << $cond;
      $T_0 = HEAP32[$arrayidx563 >> 2] | 0;
      while (1) {
        if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
          break;
        }
        $arrayidx595 = $T_0 + 16 + ($K579_0 >>> 31 << 2) | 0;
        $124 = HEAP32[$arrayidx595 >> 2] | 0;
        if (($124 | 0) == 0) {
          label = 131;
          break;
        } else {
          $K579_0 = $K579_0 << 1;
          $T_0 = $124;
        }
      }
      if ((label | 0) == 131) {
        if ($arrayidx595 >>> 0 < (HEAP32[1396933] | 0) >>> 0) {
          _abort();
        } else {
          HEAP32[$arrayidx595 >> 2] = $119;
          HEAP32[$p_0 + 24 >> 2] = $T_0;
          HEAP32[$p_0 + 12 >> 2] = $p_0;
          HEAP32[$p_0 + 8 >> 2] = $p_0;
          break;
        }
      }
      $fd613 = $T_0 + 8 | 0;
      $127 = HEAP32[$fd613 >> 2] | 0;
      $129 = HEAP32[1396933] | 0;
      if ($T_0 >>> 0 < $129 >>> 0) {
        _abort();
      }
      if ($127 >>> 0 < $129 >>> 0) {
        _abort();
      } else {
        HEAP32[$127 + 12 >> 2] = $119;
        HEAP32[$fd613 >> 2] = $119;
        HEAP32[$p_0 + 8 >> 2] = $127;
        HEAP32[$p_0 + 12 >> 2] = $T_0;
        HEAP32[$p_0 + 24 >> 2] = 0;
        break;
      }
    }
  } while (0);
  $dec = (HEAP32[1396937] | 0) - 1 | 0;
  HEAP32[1396937] = $dec;
  if (($dec | 0) == 0) {
    $sp_0_in_i = 5588172;
  } else {
    return;
  }
  while (1) {
    $sp_0_i = HEAP32[$sp_0_in_i >> 2] | 0;
    if (($sp_0_i | 0) == 0) {
      break;
    } else {
      $sp_0_in_i = $sp_0_i + 8 | 0;
    }
  }
  HEAP32[1396937] = -1;
  return;
}
function _strtod($string, $endPtr) {
  $string = $string | 0;
  $endPtr = $endPtr | 0;
  var $p_0 = 0, $add_ptr = 0, $1 = 0, $sign_0 = 0, $p_2 = 0, $p_3 = 0, $mantSize_0 = 0, $decPt_0 = 0, $2 = 0, $decPt_1 = 0, $add_ptr22 = 0, $cmp23 = 0, $mantSize_1 = 0, $cmp28 = 0, $fracExp_0 = 0, $mantSize_2 = 0, $p_4_lcssa91 = 0, $mantSize_3_lcssa90 = 0, $frac1_0_lcssa89 = 0.0, $frac1_081 = 0, $mantSize_380 = 0, $p_479 = 0, $4 = 0, $add_ptr43 = 0, $p_5 = 0, $c_0_in = 0, $add51 = 0, $sub53 = 0, $frac2_076 = 0, $mantSize_475 = 0, $p_674 = 0, $6 = 0, $add_ptr60 = 0, $p_7 = 0, $c_1_in = 0, $add69 = 0, $sub71 = 0, $frac1_0_lcssa88 = 0.0, $frac2_0_lcssa = 0.0, $add76 = 0.0, $add_ptr86 = 0, $8 = 0, $expSign_0_ph = 0, $p_9_ph = 0, $9 = 0, $10 = 0, $exp_070 = 0, $p_969 = 0, $add108 = 0, $add_ptr109 = 0, $11 = 0, $expSign_1 = 0, $p_10 = 0, $exp_1 = 0, $exp_2 = 0, $exp_3 = 0, $exp_565 = 0, $d_064 = 0, $dblExp_063 = 0.0, $dblExp_1 = 0.0, $shr = 0, $dblExp_0_lcssa = 0.0, $fraction_0 = 0.0, $p_11 = 0, $retval_0 = 0.0, label = 0;
  $p_0 = $string;
  while (1) {
    $add_ptr = $p_0 + 1 | 0;
    if ((_isspace(HEAP8[$p_0] << 24 >> 24 | 0) | 0) == 0) {
      break;
    } else {
      $p_0 = $add_ptr;
    }
  }
  $1 = HEAP8[$p_0] | 0;
  if (($1 << 24 >> 24 | 0) == 45) {
    $p_2 = $add_ptr;
    $sign_0 = 1;
  } else if (($1 << 24 >> 24 | 0) == 43) {
    $p_2 = $add_ptr;
    $sign_0 = 0;
  } else {
    $p_2 = $p_0;
    $sign_0 = 0;
  }
  $decPt_0 = -1;
  $mantSize_0 = 0;
  $p_3 = $p_2;
  while (1) {
    $2 = HEAP8[$p_3] | 0;
    if ((($2 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      $decPt_1 = $decPt_0;
    } else {
      if ($2 << 24 >> 24 != 46 | ($decPt_0 | 0) > -1) {
        break;
      } else {
        $decPt_1 = $mantSize_0;
      }
    }
    $decPt_0 = $decPt_1;
    $mantSize_0 = $mantSize_0 + 1 | 0;
    $p_3 = $p_3 + 1 | 0;
  }
  $add_ptr22 = $p_3 + (-$mantSize_0 | 0) | 0;
  $cmp23 = ($decPt_0 | 0) < 0;
  $mantSize_1 = (($cmp23 ^ 1) << 31 >> 31) + $mantSize_0 | 0;
  $cmp28 = ($mantSize_1 | 0) > 18;
  $fracExp_0 = ($cmp28 ? -18 : -$mantSize_1 | 0) + ($cmp23 ? $mantSize_0 : $decPt_0) | 0;
  $mantSize_2 = $cmp28 ? 18 : $mantSize_1;
  do {
    if (($mantSize_2 | 0) == 0) {
      $p_11 = $string;
      $fraction_0 = 0.0;
    } else {
      do {
        if (($mantSize_2 | 0) > 9) {
          $p_479 = $add_ptr22;
          $mantSize_380 = $mantSize_2;
          $frac1_081 = 0;
          while (1) {
            $4 = HEAP8[$p_479] | 0;
            $add_ptr43 = $p_479 + 1 | 0;
            if ($4 << 24 >> 24 == 46) {
              $c_0_in = HEAP8[$add_ptr43] | 0;
              $p_5 = $p_479 + 2 | 0;
            } else {
              $c_0_in = $4;
              $p_5 = $add_ptr43;
            }
            $add51 = (($frac1_081 * 10 & -1) - 48 | 0) + ($c_0_in << 24 >> 24) | 0;
            $sub53 = $mantSize_380 - 1 | 0;
            if (($sub53 | 0) > 9) {
              $p_479 = $p_5;
              $mantSize_380 = $sub53;
              $frac1_081 = $add51;
            } else {
              break;
            }
          }
          $frac1_0_lcssa89 = +($add51 | 0) * 1.0e9;
          $mantSize_3_lcssa90 = 9;
          $p_4_lcssa91 = $p_5;
          label = 187;
          break;
        } else {
          if (($mantSize_2 | 0) > 0) {
            $frac1_0_lcssa89 = 0.0;
            $mantSize_3_lcssa90 = $mantSize_2;
            $p_4_lcssa91 = $add_ptr22;
            label = 187;
            break;
          } else {
            $frac2_0_lcssa = 0.0;
            $frac1_0_lcssa88 = 0.0;
            break;
          }
        }
      } while (0);
      if ((label | 0) == 187) {
        $p_674 = $p_4_lcssa91;
        $mantSize_475 = $mantSize_3_lcssa90;
        $frac2_076 = 0;
        while (1) {
          $6 = HEAP8[$p_674] | 0;
          $add_ptr60 = $p_674 + 1 | 0;
          if ($6 << 24 >> 24 == 46) {
            $c_1_in = HEAP8[$add_ptr60] | 0;
            $p_7 = $p_674 + 2 | 0;
          } else {
            $c_1_in = $6;
            $p_7 = $add_ptr60;
          }
          $add69 = (($frac2_076 * 10 & -1) - 48 | 0) + ($c_1_in << 24 >> 24) | 0;
          $sub71 = $mantSize_475 - 1 | 0;
          if (($sub71 | 0) > 0) {
            $p_674 = $p_7;
            $mantSize_475 = $sub71;
            $frac2_076 = $add69;
          } else {
            break;
          }
        }
        $frac2_0_lcssa = +($add69 | 0);
        $frac1_0_lcssa88 = $frac1_0_lcssa89;
      }
      $add76 = $frac1_0_lcssa88 + $frac2_0_lcssa;
      L263 : do {
        if (($2 << 24 >> 24 | 0) == 69 | ($2 << 24 >> 24 | 0) == 101) {
          $add_ptr86 = $p_3 + 1 | 0;
          $8 = HEAP8[$add_ptr86] | 0;
          if (($8 << 24 >> 24 | 0) == 45) {
            $p_9_ph = $p_3 + 2 | 0;
            $expSign_0_ph = 1;
          } else if (($8 << 24 >> 24 | 0) == 43) {
            $p_9_ph = $p_3 + 2 | 0;
            $expSign_0_ph = 0;
          } else {
            $p_9_ph = $add_ptr86;
            $expSign_0_ph = 0;
          }
          $9 = HEAP8[$p_9_ph] | 0;
          if ((($9 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
            $p_969 = $p_9_ph;
            $exp_070 = 0;
            $10 = $9;
          } else {
            $exp_1 = 0;
            $p_10 = $p_9_ph;
            $expSign_1 = $expSign_0_ph;
            break;
          }
          while (1) {
            $add108 = (($exp_070 * 10 & -1) - 48 | 0) + ($10 << 24 >> 24) | 0;
            $add_ptr109 = $p_969 + 1 | 0;
            $11 = HEAP8[$add_ptr109] | 0;
            if ((($11 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
              $p_969 = $add_ptr109;
              $exp_070 = $add108;
              $10 = $11;
            } else {
              $exp_1 = $add108;
              $p_10 = $add_ptr109;
              $expSign_1 = $expSign_0_ph;
              break L263;
            }
          }
        } else {
          $exp_1 = 0;
          $p_10 = $p_3;
          $expSign_1 = 0;
        }
      } while (0);
      $exp_2 = $fracExp_0 + (($expSign_1 | 0) == 0 ? $exp_1 : -$exp_1 | 0) | 0;
      $exp_3 = ($exp_2 | 0) < 0 ? -$exp_2 | 0 : $exp_2;
      do {
        if (($exp_3 | 0) > 511) {
          HEAP32[___errno_location() >> 2] = 34;
          $dblExp_063 = 1.0;
          $d_064 = 5245628;
          $exp_565 = 511;
          label = 204;
          break;
        } else {
          if (($exp_3 | 0) == 0) {
            $dblExp_0_lcssa = 1.0;
            break;
          } else {
            $dblExp_063 = 1.0;
            $d_064 = 5245628;
            $exp_565 = $exp_3;
            label = 204;
            break;
          }
        }
      } while (0);
      L275 : do {
        if ((label | 0) == 204) {
          while (1) {
            label = 0;
            if (($exp_565 & 1 | 0) == 0) {
              $dblExp_1 = $dblExp_063;
            } else {
              $dblExp_1 = $dblExp_063 * (HEAP32[tempDoublePtr >> 2] = HEAP32[$d_064 >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$d_064 + 4 >> 2] | 0, +HEAPF64[tempDoublePtr >> 3]);
            }
            $shr = $exp_565 >> 1;
            if (($shr | 0) == 0) {
              $dblExp_0_lcssa = $dblExp_1;
              break L275;
            } else {
              $dblExp_063 = $dblExp_1;
              $d_064 = $d_064 + 8 | 0;
              $exp_565 = $shr;
              label = 204;
            }
          }
        }
      } while (0);
      if (($exp_2 | 0) > -1) {
        $p_11 = $p_10;
        $fraction_0 = $add76 * $dblExp_0_lcssa;
        break;
      } else {
        $p_11 = $p_10;
        $fraction_0 = $add76 / $dblExp_0_lcssa;
        break;
      }
    }
  } while (0);
  if (($endPtr | 0) != 0) {
    HEAP32[$endPtr >> 2] = $p_11;
  }
  if (($sign_0 | 0) == 0) {
    $retval_0 = $fraction_0;
    return +$retval_0;
  }
  $retval_0 = 0.0 - $fraction_0;
  return +$retval_0;
}
function _sys_trim($pad) {
  $pad = $pad | 0;
  var $call_i = 0, $1 = 0, $2 = 0, $3 = 0, $mul = 0, $4 = 0, $sp_0_i = 0, $5 = 0, $7 = 0, $retval_0_i = 0, $call20 = 0, $size = 0, $call24 = 0, $call25 = 0, $sub_ptr_sub = 0, $13 = 0, $sub41 = 0, $15 = 0, $16 = 0, $cond_i = 0, $sub5_i = 0, $released_2 = 0, $cond = 0;
  do {
    if ((HEAP32[1315845] | 0) == 0) {
      $call_i = _sysconf(8) | 0;
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[1315847] = $call_i;
        HEAP32[1315846] = $call_i;
        HEAP32[1315848] = -1;
        HEAP32[1315849] = 2097152;
        HEAP32[1315850] = 0;
        HEAP32[1397040] = 0;
        HEAP32[1315845] = _time(0) & -16 ^ 1431655768;
        break;
      } else {
        _abort();
        return 0;
      }
    }
  } while (0);
  if ($pad >>> 0 >= 4294967232) {
    $released_2 = 0;
    $cond = $released_2 & 1;
    return $cond | 0;
  }
  $1 = HEAP32[1396935] | 0;
  if (($1 | 0) == 0) {
    $released_2 = 0;
    $cond = $released_2 & 1;
    return $cond | 0;
  }
  $2 = HEAP32[1396932] | 0;
  do {
    if ($2 >>> 0 > ($pad + 40 | 0) >>> 0) {
      $3 = HEAP32[1315847] | 0;
      $mul = Math_imul(((((((-40 - $pad | 0) - 1 | 0) + $2 | 0) + $3 | 0) >>> 0) / ($3 >>> 0) >>> 0) - 1 | 0, $3);
      $4 = $1;
      $sp_0_i = 5588164;
      while (1) {
        $5 = HEAP32[$sp_0_i >> 2] | 0;
        if ($5 >>> 0 <= $4 >>> 0) {
          if (($5 + (HEAP32[$sp_0_i + 4 >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
            $retval_0_i = $sp_0_i;
            break;
          }
        }
        $7 = HEAP32[$sp_0_i + 8 >> 2] | 0;
        if (($7 | 0) == 0) {
          $retval_0_i = 0;
          break;
        } else {
          $sp_0_i = $7;
        }
      }
      if ((HEAP32[$retval_0_i + 12 >> 2] & 8 | 0) != 0) {
        break;
      }
      $call20 = _sbrk(0) | 0;
      $size = $retval_0_i + 4 | 0;
      if (($call20 | 0) != ((HEAP32[$retval_0_i >> 2] | 0) + (HEAP32[$size >> 2] | 0) | 0)) {
        break;
      }
      $call24 = _sbrk(-($mul >>> 0 > 2147483646 ? -2147483648 - $3 | 0 : $mul) | 0) | 0;
      $call25 = _sbrk(0) | 0;
      if (!(($call24 | 0) != -1 & $call25 >>> 0 < $call20 >>> 0)) {
        break;
      }
      $sub_ptr_sub = $call20 - $call25 | 0;
      if (($call20 | 0) == ($call25 | 0)) {
        break;
      }
      HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) - $sub_ptr_sub | 0;
      HEAP32[1397037] = (HEAP32[1397037] | 0) - $sub_ptr_sub | 0;
      $13 = HEAP32[1396935] | 0;
      $sub41 = (HEAP32[1396932] | 0) - $sub_ptr_sub | 0;
      $15 = $13;
      $16 = $13 + 8 | 0;
      if (($16 & 7 | 0) == 0) {
        $cond_i = 0;
      } else {
        $cond_i = -$16 & 7;
      }
      $sub5_i = $sub41 - $cond_i | 0;
      HEAP32[1396935] = $15 + $cond_i | 0;
      HEAP32[1396932] = $sub5_i;
      HEAP32[$15 + ($cond_i + 4 | 0) >> 2] = $sub5_i | 1;
      HEAP32[$15 + ($sub41 + 4 | 0) >> 2] = 40;
      HEAP32[1396936] = HEAP32[1315849] | 0;
      $released_2 = ($call20 | 0) != ($call25 | 0);
      $cond = $released_2 & 1;
      return $cond | 0;
    }
  } while (0);
  if ((HEAP32[1396932] | 0) >>> 0 <= (HEAP32[1396936] | 0) >>> 0) {
    $released_2 = 0;
    $cond = $released_2 & 1;
    return $cond | 0;
  }
  HEAP32[1396936] = -1;
  $released_2 = 0;
  $cond = $released_2 & 1;
  return $cond | 0;
}
function _memcmp(p1, p2, num) {
  p1 = p1 | 0;
  p2 = p2 | 0;
  num = num | 0;
  var i = 0, v1 = 0, v2 = 0;
  while ((i | 0) < (num | 0)) {
    v1 = HEAPU8[p1 + i | 0] | 0;
    v2 = HEAPU8[p2 + i | 0] | 0;
    if ((v1 | 0) != (v2 | 0)) return ((v1 | 0) > (v2 | 0) ? 1 : -1) | 0;
    i = i + 1 | 0;
  }
  return 0;
}
function _strlen(ptr) {
  ptr = ptr | 0;
  var curr = 0;
  curr = ptr;
  while (HEAP8[curr] | 0 != 0) {
    curr = curr + 1 | 0;
  }
  return curr - ptr | 0;
}
function _memcpy(dest, src, num) {
  dest = dest | 0;
  src = src | 0;
  num = num | 0;
  var ret = 0;
  ret = dest | 0;
  if ((dest & 3) == (src & 3)) {
    while (dest & 3) {
      if ((num | 0) == 0) return ret | 0;
      HEAP8[dest] = HEAP8[src] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
      num = num - 1 | 0;
    }
    while ((num | 0) >= 4) {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
      num = num - 4 | 0;
    }
  }
  while ((num | 0) > 0) {
    HEAP8[dest] = HEAP8[src] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
    num = num - 1 | 0;
  }
  return ret | 0;
}
function _memset(ptr, value, num) {
  ptr = ptr | 0;
  value = value | 0;
  num = num | 0;
  var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
  stop = ptr + num | 0;
  if ((num | 0) >= 20) {
    value = value & 255;
    unaligned = ptr & 3;
    value4 = value | value << 8 | value << 16 | value << 24;
    stop4 = stop & ~3;
    if (unaligned) {
      unaligned = ptr + 4 - unaligned | 0;
      while ((ptr | 0) < (unaligned | 0)) {
        HEAP8[ptr] = value;
        ptr = ptr + 1 | 0;
      }
    }
    while ((ptr | 0) < (stop4 | 0)) {
      HEAP32[ptr >> 2] = value4;
      ptr = ptr + 4 | 0;
    }
  }
  while ((ptr | 0) < (stop | 0)) {
    HEAP8[ptr] = value;
    ptr = ptr + 1 | 0;
  }
}
function _memmove(dest, src, num) {
  dest = dest | 0;
  src = src | 0;
  num = num | 0;
  if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
    src = src + num | 0;
    dest = dest + num | 0;
    while ((num | 0) > 0) {
      dest = dest - 1 | 0;
      src = src - 1 | 0;
      num = num - 1 | 0;
      HEAP8[dest] = HEAP8[src] | 0;
    }
  } else {
    _memcpy(dest, src, num);
  }
}
function dynCall_vi(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  FUNCTION_TABLE_vi[index & 127](a1 | 0);
}
function dynCall_ii(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}
function dynCall_iii(index, a1, a2) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  return FUNCTION_TABLE_iii[index & 127](a1 | 0, a2 | 0) | 0;
}
function dynCall_v(index) {
  index = index | 0;
  FUNCTION_TABLE_v[index & 127]();
}
function b0(p0) {
  p0 = p0 | 0;
  abort(0);
}
function b1(p0) {
  p0 = p0 | 0;
  abort(1);
  return 0;
}
function b2(p0, p1) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  abort(2);
  return 0;
}
function b3() {
  abort(3);
}
// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_vi = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_v = [b3,b3,_lossless_dng_load_raw,b3,_unpacked_load_raw,b3,_foveon_sd_load_raw,b3,_kodak_ycbcr_load_raw,b3,_canon_600_load_raw
  ,b3,_smal_v9_load_raw,b3,_leaf_hdr_load_raw,b3,_nikon_load_raw,b3,_kodak_jpeg_load_raw,b3,_canon_sraw_load_raw
  ,b3,_minolta_rd175_load_raw,b3,_eight_bit_load_raw,b3,_sony_load_raw,b3,_kodak_thumb_load_raw,b3,_sinar_4shot_load_raw
  ,b3,_quicktake_100_load_raw,b3,_kodak_262_load_raw,b3,_packed_load_raw,b3,_sony_arw2_load_raw,b3,_panasonic_load_raw
  ,b3,_canon_load_raw,b3,_redcine_load_raw,b3,_lossless_jpeg_load_raw,b3,_foveon_thumb,b3,_layer_thumb
  ,b3,_kodak_yrgb_load_raw,b3,_kodak_65000_load_raw,b3,_rollei_thumb,b3,_kodak_radc_load_raw,b3,_jpeg_thumb
  ,b3,_olympus_load_raw,b3,_phase_one_load_raw,b3,_nokia_load_raw,b3,_ppm_thumb,b3,_rollei_load_raw
  ,b3,_imacon_full_load_raw,b3,_smal_v6_load_raw,b3,_packed_dng_load_raw,b3,_ppm16_thumb,b3,_kodak_dc120_load_raw
  ,b3,_write_ppm_tiff,b3,_phase_one_load_raw_c,b3,_pentax_load_raw,b3,_kodak_rgb_load_raw,b3,_foveon_dp_load_raw
  ,b3,_lossy_dng_load_raw,b3,_sony_arw_load_raw,b3,_hasselblad_load_raw,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  return { _memcmp: _memcmp, _strlen: _strlen, _free: _free, _main: _main, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
({ Math: Math, Int8Array: Int8Array, Int16Array: Int16Array, Int32Array: Int32Array, Uint8Array: Uint8Array, Uint16Array: Uint16Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array }, { abort: abort, assert: assert, asmPrintInt: asmPrintInt, asmPrintFloat: asmPrintFloat, copyTempDouble: copyTempDouble, copyTempFloat: copyTempFloat, Runtime_bitshift64: Runtime_bitshift64, min: Math_min, i64Math_add: i64Math_add, i64Math_subtract: i64Math_subtract, i64Math_multiply: i64Math_multiply, i64Math_divide: i64Math_divide, i64Math_modulo: i64Math_modulo, _strncasecmp: _strncasecmp, _lseek: _lseek, __scanString: __scanString, _fclose: _fclose, __isFloat: __isFloat, _strtol: _strtol, _fputc: _fputc, _swab: _swab, _fwrite: _fwrite, _mktime: _mktime, _tmpnam: _tmpnam, _isspace: _isspace, _localtime: _localtime, _read: _read, _perror: _perror, _utime: _utime, _fileno: _fileno, _strstr: _strstr, _ctime: _ctime, _fsync: _fsync, _fscanf: _fscanf, _strcmp: _strcmp, _memchr: _memchr, _strncmp: _strncmp, _tmpfile: _tmpfile, _snprintf: _snprintf, _fgetc: _fgetc, _strcat: _strcat, _cosh: _cosh, _fgets: _fgets, _close: _close, _strchr: _strchr, ___setErrNo: ___setErrNo, _ftell: _ftell, _sprintf: _sprintf, _llvm_lifetime_end: _llvm_lifetime_end, _asctime: _asctime, _strrchr: _strrchr, _getcwd: _getcwd, _localtime_r: _localtime_r, _asctime_r: _asctime_r, _cos: _cos, _putchar: _putchar, _puts: _puts, _strcpy: _strcpy, _isupper: _isupper, _tzset: _tzset, _sinh: _sinh, _floorf: _floorf, _ldexp: _ldexp, _printf: _printf, _pread: _pread, _fopen: _fopen, _open: _open, _sqrtf: _sqrtf, _strncpy: _strncpy, _log: _log, _putenv: _putenv, _fputs: _fputs, _exp2: _exp2, _htonl: _htonl, _isatty: _isatty, __formatString: __formatString, _atoi: _atoi, _llvm_pow_f64: _llvm_pow_f64, _sbrk: _sbrk, _tanh: _tanh, ___errno_location: ___errno_location, _strerror: _strerror, _llvm_lifetime_start: _llvm_lifetime_start, _llvm_bswap_i32: _llvm_bswap_i32, __parseInt: __parseInt, _ungetc: _ungetc, _sscanf: _sscanf, _sysconf: _sysconf, _fread: _fread, _abort: _abort, _fprintf: _fprintf, ___buildEnvironment: ___buildEnvironment, _feof: _feof, _htons: _htons, _floor: _floor, _fseek: _fseek, _sqrt: _sqrt, _write: _write, _longjmp: _longjmp, _tolower: _tolower, _strcasecmp: _strcasecmp, _pwrite: _pwrite, _strerror_r: _strerror_r, _exp: _exp, _time: _time, STACKTOP: STACKTOP, STACK_MAX: STACK_MAX, tempDoublePtr: tempDoublePtr, ABORT: ABORT, NaN: NaN, Infinity: Infinity, _stderr: _stderr, _stdout: _stdout, _stdin: _stdin }, buffer);
var _memcmp = Module["_memcmp"] = asm._memcmp;
var _strlen = Module["_strlen"] = asm._strlen;
var _free = Module["_free"] = asm._free;
var _main = Module["_main"] = asm._main;
var _memmove = Module["_memmove"] = asm._memmove;
var _memset = Module["_memset"] = asm._memset;
var _malloc = Module["_malloc"] = asm._malloc;
var _memcpy = Module["_memcpy"] = asm._memcpy;
var dynCall_vi = Module["dynCall_vi"] = asm.dynCall_vi;
var dynCall_ii = Module["dynCall_ii"] = asm.dynCall_ii;
var dynCall_iii = Module["dynCall_iii"] = asm.dynCall_iii;
var dynCall_v = Module["dynCall_v"] = asm.dynCall_v;
Runtime.stackAlloc = function(size) { return asm.stackAlloc(size) };
Runtime.stackSave = function() { return asm.stackSave() };
Runtime.stackRestore = function(top) { asm.stackRestore(top) };
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    add: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);
  var ret;
  ret = Module['_main'](argc, argv, 0);
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
initRuntime();
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
if (shouldRunNow) {
  var ret = run();
}
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}

    root.run = run;
    root.FS = FS;
}());
