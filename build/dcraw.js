
(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 345184;

assert(STATICTOP < TOTAL_MEMORY);



































var _stdout;
var _stdin;
var _stderr;


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate(4, "i8", ALLOC_NONE, 5242880);
allocate(4, "i8", ALLOC_NONE, 5242884);
allocate([13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63], "i8", ALLOC_NONE, 5242888);
allocate(4, "i8", ALLOC_NONE, 5242960);
allocate(4, "i8", ALLOC_NONE, 5242964);
allocate(128, "i8", ALLOC_NONE, 5242968);
allocate([232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59], "i8", ALLOC_NONE, 5243096);
allocate([254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16] /* \FE\FE\00\FF\00\01\F */, "i8", ALLOC_NONE, 5243128);
allocate(4, "i8", ALLOC_NONE, 5243512);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255] /* \FF\FF\FF\00\FF\01\0 */, "i8", ALLOC_NONE, 5243516);
allocate(4, "i8", ALLOC_NONE, 5243532);
allocate(16, "i8", ALLOC_NONE, 5243536);
allocate(4, "i8", ALLOC_NONE, 5243552);
allocate(4, "i8", ALLOC_NONE, 5243556);
allocate(4, "i8", ALLOC_NONE, 5243560);
allocate(4, "i8", ALLOC_NONE, 5243564);
allocate(4, "i8", ALLOC_NONE, 5243568);
allocate(4, "i8", ALLOC_NONE, 5243572);
allocate(4, "i8", ALLOC_NONE, 5243576);
allocate(4, "i8", ALLOC_NONE, 5243580);
allocate(4, "i8", ALLOC_NONE, 5243584);
allocate(440, "i8", ALLOC_NONE, 5243588);
allocate(4, "i8", ALLOC_NONE, 5244028);
allocate(4, "i8", ALLOC_NONE, 5244032);
allocate(4, "i8", ALLOC_NONE, 5244036);
allocate(4, "i8", ALLOC_NONE, 5244040);
allocate(4, "i8", ALLOC_NONE, 5244044);
allocate(4, "i8", ALLOC_NONE, 5244048);
allocate(4, "i8", ALLOC_NONE, 5244052);
allocate(4, "i8", ALLOC_NONE, 5244056);
allocate(4, "i8", ALLOC_NONE, 5244060);
allocate(4, "i8", ALLOC_NONE, 5244064);
allocate(4, "i8", ALLOC_NONE, 5244068);
allocate([10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,0] /* \0Aby Dave Coffin, d */, "i8", ALLOC_NONE, 5244072);
allocate(4, "i8", ALLOC_NONE, 5244116);
allocate(4, "i8", ALLOC_NONE, 5244120);
allocate(4, "i8", ALLOC_NONE, 5244124);
allocate(512, "i8", ALLOC_NONE, 5244128);
allocate(4, "i8", ALLOC_NONE, 5244640);
allocate([17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2], "i8", ALLOC_NONE, 5244644);
allocate([7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15,0,0,0,0,0], "i8", ALLOC_NONE, 5244680);
allocate([15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191], "i8", ALLOC_NONE, 5244720);
allocate(4, "i8", ALLOC_NONE, 5244912);
allocate(4, "i8", ALLOC_NONE, 5244916);
allocate(4, "i8", ALLOC_NONE, 5244920);
allocate(4, "i8", ALLOC_NONE, 5244924);
allocate([56,48,2,64,50,56,58,191,111,16,157,190,110,77,106,190,76,169,157,63,6,127,63,187,55,84,12,188,153,243,28,190,36,183,148,63], "i8", ALLOC_NONE, 5244928);
allocate(48, "i8", ALLOC_NONE, 5244964);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255], "i8", ALLOC_NONE, 5245012);
allocate(4, "i8", ALLOC_NONE, 5245028);
allocate(4, "i8", ALLOC_NONE, 5245032);
allocate(4, "i8", ALLOC_NONE, 5245036);
allocate(4, "i8", ALLOC_NONE, 5245040);
allocate([253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0], "i8", ALLOC_NONE, 5245044);
allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0], "i8", ALLOC_NONE, 5245092);
allocate([0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3], "i8", ALLOC_NONE, 5245124);
allocate(4, "i8", ALLOC_NONE, 5245636);
allocate(16, "i8", ALLOC_NONE, 5245640);
allocate(8, "i8", ALLOC_NONE, 5245656);
allocate([8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0], "i8", ALLOC_NONE, 5245664);
allocate([255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2], "i8", ALLOC_NONE, 5245704);
allocate(4, "i8", ALLOC_NONE, 5245728);
allocate(8, "i8", ALLOC_NONE, 5245732);
allocate(28, "i8", ALLOC_NONE, 5245740);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5245768);
allocate([74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0], "i8", ALLOC_NONE, 5245800);
allocate(156, "i8", ALLOC_NONE, 5245848);
allocate([193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47], "i8", ALLOC_NONE, 5246004);
allocate([37,250,0,0,40,250,0,0,39,250,0,0,41,250,0,0,255,255,255,255,255,255,255,255,42,250,0,0], "i8", ALLOC_NONE, 5246516);
allocate(4, "i8", ALLOC_NONE, 5246544);
allocate(16384, "i8", ALLOC_NONE, 5246548);
allocate(4, "i8", ALLOC_NONE, 5262932);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5262936);
allocate(4, "i8", ALLOC_NONE, 5262940);
allocate(4, "i8", ALLOC_NONE, 5262944);
allocate(4, "i8", ALLOC_NONE, 5262948);
allocate(4, "i8", ALLOC_NONE, 5262952);
allocate(4, "i8", ALLOC_NONE, 5262956);
allocate([0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0], "i8", ALLOC_NONE, 5262960);
allocate([0,85,170,255] /* \00U\AA\FF */, "i8", ALLOC_NONE, 5263152);
allocate([0,0,0,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5263156);
allocate(24, "i8", ALLOC_NONE, 5263284);
allocate(64, "i8", ALLOC_NONE, 5263308);
allocate(64, "i8", ALLOC_NONE, 5263372);
allocate(4, "i8", ALLOC_NONE, 5263436);
allocate(4, "i8", ALLOC_NONE, 5263440);
allocate(4, "i8", ALLOC_NONE, 5263444);
allocate(4, "i8", ALLOC_NONE, 5263448);
allocate([1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2] /* \01\02\04\05\07\08\0 */, "i8", ALLOC_NONE, 5263452);
allocate(4, "i8", ALLOC_NONE, 5263492);
allocate(4, "i8", ALLOC_NONE, 5263496);
allocate(128, "i8", ALLOC_NONE, 5263500);
allocate(64, "i8", ALLOC_NONE, 5263628);
allocate(4, "i8", ALLOC_NONE, 5263692);
allocate(4, "i8", ALLOC_NONE, 5263696);
allocate(4, "i8", ALLOC_NONE, 5263700);
allocate([48,49,50,0,49,48,50,0], "i8", ALLOC_NONE, 5263704);
allocate([1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37] /* \01\01\02\03\03\04\0 */, "i8", ALLOC_NONE, 5263712);
allocate([0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63], "i8", ALLOC_NONE, 5263972);
allocate([16,0,16,0,16,0], "i8", ALLOC_NONE, 5263996);
allocate([162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0], "i8", ALLOC_NONE, 5264004);
allocate([0,0,0,0,124,2,0,0,168,1,0,0,212,0,0,0], "i8", ALLOC_NONE, 5264020);
allocate(4, "i8", ALLOC_NONE, 5264036);
allocate([0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9], "i8", ALLOC_NONE, 5264040);
allocate(4, "i8", ALLOC_NONE, 5264092);
allocate(4, "i8", ALLOC_NONE, 5264096);
allocate(4, "i8", ALLOC_NONE, 5264100);
allocate(4, "i8", ALLOC_NONE, 5264104);
allocate(4, "i8", ALLOC_NONE, 5264108);
allocate(4, "i8", ALLOC_NONE, 5264112);
allocate(4, "i8", ALLOC_NONE, 5264116);
allocate(4, "i8", ALLOC_NONE, 5264120);
allocate([0,244,0,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,83,84,32,77,105,99,114,111,0,0,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,4,12,0,67,114,101,97,116,105,118,101,0,0,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,96,17,0,77,105,110,111,108,116,97,0,0,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,70,111,99,117,108,117,115,0,0,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,71,101,110,101,114,105,99,0,0,0,0,0,54,52,48,120,52,56,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,137,246,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,21,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,43,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,128,71,59,0,77,105,99,114,111,110,0,0,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,101,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,202,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,82,111,118,101,114,83,104,111,116,0,0,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,255,99,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,96,133,101,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,64,76,100,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,16,174,140,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,104,10,141,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,224,204,157,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,16,111,158,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,88,135,197,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,16,151,238,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,80,215,80,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,240,168,117,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,240,4,236,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,240,9,237,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,64,162,28,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,240,234,35,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,224,183,78,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,160,90,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,24,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,160,37,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,44,0,78,73,75,79,78,0,0,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,208,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,144,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,113,0,78,73,75,79,78,0,0,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,80,137,0,78,73,75,79,78,0,0,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,1,32,40,30,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,1,96,25,49,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,1,128,226,94,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,98,92,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,233,114,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,160,63,117,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,212,44,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,130,75,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,23,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,99,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,78,118,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,70,119,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,118,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,81,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,214,187,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,149,190,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,236,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,1,0,96,29,1,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,96,82,113,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,1,0,29,142,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,135,167,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,64,128,48,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,0,226,73,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,192,75,93,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,1,0,80,163,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,1,0,216,243,0,65,71,70,65,80,72,79,84,79,0,0,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,1,0,163,245,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,110,247,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,156,56,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,54,110,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,0,192,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,2,252,1,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,88,165,2,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5264124);
allocate([58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255], "i8", ALLOC_NONE, 5267292);
allocate(68, "i8", ALLOC_NONE, 5267568);
allocate(131072, "i8", ALLOC_NONE, 5267636);
allocate(4, "i8", ALLOC_NONE, 5398708);
allocate(4, "i8", ALLOC_NONE, 5398712);
allocate(4, "i8", ALLOC_NONE, 5398716);
allocate([255,255,255,255], "i8", ALLOC_NONE, 5398720);
allocate([255,255,255,255], "i8", ALLOC_NONE, 5398724);
allocate(4, "i8", ALLOC_NONE, 5398728);
allocate(4, "i8", ALLOC_NONE, 5398732);
allocate(128, "i8", ALLOC_NONE, 5398736);
allocate(4, "i8", ALLOC_NONE, 5398864);
allocate(4, "i8", ALLOC_NONE, 5398868);
allocate(4, "i8", ALLOC_NONE, 5398872);
allocate(8, "i8", ALLOC_NONE, 5398876);
allocate([0,0,0,0,0,0,18,64], "i8", ALLOC_NONE, 5398884);
allocate([205,204,204,204,204,204,220,63], "i8", ALLOC_NONE, 5398892);
allocate(4, "i8", ALLOC_NONE, 5398900);
allocate(4, "i8", ALLOC_NONE, 5398904);
allocate(4, "i8", ALLOC_NONE, 5398908);
allocate([255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0], "i8", ALLOC_NONE, 5398912);
allocate(4096, "i8", ALLOC_NONE, 5398944);
allocate(4, "i8", ALLOC_NONE, 5403040);
allocate(4, "i8", ALLOC_NONE, 5403044);
allocate(4, "i8", ALLOC_NONE, 5403048);
allocate(4, "i8", ALLOC_NONE, 5403052);
allocate(24576, "i8", ALLOC_NONE, 5403056);
allocate(4, "i8", ALLOC_NONE, 5427632);
allocate([1,1,0,1,1,2,1,1,2,1,1,0,2,0,1,0,2,1,1,1,2,1,1,0,1,1,0,1,1,2,0,2,1,2,0,1], "i8", ALLOC_NONE, 5427636);
allocate([2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3], "i8", ALLOC_NONE, 5427672);
allocate(40, "i8", ALLOC_NONE, 5427928);
allocate(4, "i8", ALLOC_NONE, 5427968);
allocate(4, "i8", ALLOC_NONE, 5427972);
allocate(4, "i8", ALLOC_NONE, 5427976);
allocate(512, "i8", ALLOC_NONE, 5427980);
allocate(4, "i8", ALLOC_NONE, 5428492);
allocate(4, "i8", ALLOC_NONE, 5428496);
allocate(131072, "i8", ALLOC_NONE, 5428500);
allocate([0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255], "i8", ALLOC_NONE, 5559572);
allocate([0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255], "i8", ALLOC_NONE, 5560112);
allocate(6, "i8", ALLOC_NONE, 5560200);
allocate([64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63], "i8", ALLOC_NONE, 5560208);
allocate([27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63], "i8", ALLOC_NONE, 5560280);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5560352);
allocate([81,243,0,0,0,0,1,0,204,22,1,0], "i8", ALLOC_NONE, 5560424);
allocate([74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63], "i8", ALLOC_NONE, 5560436);
allocate([0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0], "i8", ALLOC_NONE, 5560508);
allocate([118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1], "i8", ALLOC_NONE, 5560588);
allocate([10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0], "i8", ALLOC_NONE, 5560604);
allocate(20, "i8", ALLOC_NONE, 5560728);
allocate(20, "i8", ALLOC_NONE, 5560748);
allocate([217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63], "i8", ALLOC_NONE, 5560768);
allocate(4, "i8", ALLOC_NONE, 5560840);
allocate(48, "i8", ALLOC_NONE, 5560844);
allocate([16,4,243,69], "i8", ALLOC_NONE, 5560892);
allocate(5, "i8", ALLOC_NONE, 5560896);
allocate(16, "i8", ALLOC_NONE, 5560904);
allocate(4, "i8", ALLOC_NONE, 5560920);
allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2], "i8", ALLOC_NONE, 5560924);
allocate([117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4], "i8", ALLOC_NONE, 5560964);
allocate([66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249], "i8", ALLOC_NONE, 5560980);
allocate(16, "i8", ALLOC_NONE, 5561124);
allocate([0,0,128,63], "i8", ALLOC_NONE, 5561140);
allocate([0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,215,179,221,63,215,179,221,191,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561144);
allocate([0,0,128,63,215,179,93,63,0,0,0,191,0,0,0,0,0,0,128,63,215,179,93,191,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561272);
allocate(4, "i8", ALLOC_NONE, 5561400);
allocate(64, "i8", ALLOC_NONE, 5561404);
allocate(4, "i8", ALLOC_NONE, 5561468);
allocate([0,0,0,0,0,0,0,0,174,44,78,241,165,251,151,246,186,38,193,9,53,251,247,8,180,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,235,233,231,242,102,9,74,31,97,254,254,27,147,5,30,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,38,127,245,224,250,85,233,8,51,252,11,122,246,3,12,71,34,0,0,0,0,0,0,0,0,0,0,0,0,160,15,44,24,195,250,134,252,0,228,153,56,121,11,176,245,156,12,35,33,0,0,0,0,0,0,0,0,0,0,0,0,128,60,66,26,133,253,61,252,65,239,172,48,236,7,116,252,114,8,36,22,0,0,0,0,0,0,0,0,0,0,0,0,240,60,108,18,91,2,194,252,138,225,114,60,176,9,40,250,145,7,251,25,0,0,0,0,0,0,0,0,0,0,0,0,108,14,203,24,33,254,52,252,151,223,82,62,176,9,80,248,83,8,225,29,0,0,0,0,0,0,0,0,0,0,0,0,130,60,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,0,0,0,0,0,0,16,53,188,26,28,252,168,252,220,240,241,45,92,9,175,253,236,6,54,24,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,55,55,236,154,250,106,230,41,57,247,7,169,249,32,7,161,25,0,0,0,0,0,0,0,0,0,0,0,0,255,15,199,25,231,253,133,252,121,224,167,61,120,9,65,248,186,8,38,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,24,209,254,24,252,56,225,5,61,92,9,78,249,112,7,134,27,0,0,0,0,0,0,0,0,0,0,0,0,96,63,183,23,21,253,168,252,27,226,5,60,137,9,23,248,249,9,147,28,0,0,0,0,0,0,0,0,0,0,0,0,147,61,56,19,104,2,175,253,163,230,140,54,224,10,18,249,106,12,93,27,0,0,0,0,0,0,0,0,0,0,0,0,247,47,63,26,30,252,99,252,200,238,138,48,163,8,137,252,81,8,163,23,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,130,23,151,253,59,252,59,222,9,62,159,11,6,250,183,6,218,29,0,0,0,0,0,0,0,0,0,0,0,0,142,14,142,27,35,250,34,252,36,224,184,60,252,10,2,251,134,5,116,30,0,0,0,0,0,0,0,0,0,0,0,0,13,57,152,22,250,254,203,252,141,226,216,58,112,10,66,248,121,10,3,29,0,0,0,0,0,0,0,0,0,0,0,0,121,52,155,18,200,2,122,253,91,229,63,56,80,10,127,248,204,12,161,25,0,0,0,0,0,0,0,0,0,0,0,0,215,61,29,27,116,251,167,252,15,241,77,45,230,9,96,254,4,6,151,23,0,0,0,0,0,0,0,0,0,0,0,0,16,53,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,0,0,0,0,0,0,77,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,67,14,115,26,141,251,47,252,118,225,19,59,112,11,36,251,157,5,109,29,0,0,0,0,0,0,0,0,0,0,0,0,16,53,44,25,120,252,131,252,45,238,20,48,231,9,121,252,224,7,72,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,176,59,227,22,45,255,94,252,193,223,145,62,49,9,60,249,95,7,24,29,0,0,0,0,0,0,0,0,0,0,0,0,128,14,117,25,166,253,157,252,12,224,54,62,74,9,174,249,235,6,209,29,0,0,0,0,0,0,0,0,0,0,0,0,176,59,126,23,36,255,229,252,243,239,238,46,57,9,207,253,32,7,155,22,0,0,0,0,0,0,0,0,0,0,0,0,176,59,147,24,228,253,48,252,98,223,17,63,7,9,78,249,66,7,158,28,0,0,0,0,0,0,0,0,0,0,0,0,128,14,96,24,46,254,202,252,12,224,209,61,196,9,247,248,146,7,106,31,0,0,0,0,0,0,0,0,0,0,0,0,128,14,120,24,186,253,44,253,136,223,76,62,200,9,48,249,127,7,216,33,0,0,0,0,0,0,0,0,0,0,0,0,32,14,22,17,47,14,49,249,160,226,108,59,168,9,180,244,48,14,225,31,0,0,0,0,0,0,0,0,0,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,0,0,0,0,0,0,32,14,150,26,77,255,4,252,95,224,31,64,151,6,61,243,140,16,10,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,235,118,38,240,6,108,13,172,2,99,15,92,234,151,38,56,24,132,250,167,43,217,0,0,0,0,0,0,0,0,0,63,237,3,37,160,7,110,11,75,6,254,15,117,235,180,39,59,23,238,249,131,42,35,2,0,0,0,0,0,0,0,0,85,43,190,240,252,251,73,236,204,48,63,11,21,252,214,6,185,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,47,47,237,211,251,180,249,136,38,1,8,158,255,82,3,119,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,51,131,234,32,251,28,250,130,38,143,7,242,254,59,4,14,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,29,3,247,201,253,40,240,192,44,159,11,34,255,204,2,85,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,28,25,251,237,251,8,240,219,47,0,8,148,252,154,7,173,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,237,251,36,124,8,135,18,139,251,248,16,230,235,180,38,189,23,226,249,43,43,45,2,0,0,0,0,0,0,0,0,127,35,123,245,231,251,197,229,46,56,233,9,13,247,3,11,110,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,35,35,245,207,251,83,230,109,55,45,10,4,247,28,11,240,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,38,200,244,91,252,172,232,37,54,253,8,170,249,24,9,44,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,38,65,241,153,252,67,226,215,57,0,12,88,250,25,5,61,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,28,163,247,170,253,11,234,198,51,65,10,118,250,160,6,111,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,39,62,242,25,252,37,226,13,59,170,10,3,253,49,3,155,28,0,0,0,0,0,0,0,0,0,0,34,0,0,0,197,239,90,38,249,5,99,15,231,255,170,17,111,234,142,38,210,25,66,247,121,42,62,5,0,0,0,0,0,0,0,0,157,236,168,38,187,8,34,18,37,252,198,16,214,235,27,39,227,22,22,249,222,43,65,2,0,0,0,0,0,0,0,0,70,41,188,241,151,251,104,230,70,57,214,7,107,247,21,10,246,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,33,73,246,84,252,43,229,151,55,84,11,242,246,13,11,53,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,31,227,246,69,252,230,229,94,55,191,10,227,247,37,10,105,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,34,245,245,161,252,52,231,154,55,240,8,20,250,124,8,169,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,34,78,246,227,252,132,225,43,60,13,10,114,250,204,7,170,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,38,30,241,192,252,53,228,127,56,90,11,123,252,221,3,209,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,48,104,236,231,251,115,249,174,38,30,8,173,255,84,3,75,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,52,248,232,1,251,44,251,126,37,139,7,76,255,233,3,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,31,251,245,132,253,199,244,201,41,209,9,180,0,155,2,115,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,31,173,245,114,253,57,241,222,43,114,11,50,255,178,2,98,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,25,253,254,10,254,170,232,230,50,237,12,204,254,34,4,106,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,48,111,237,33,251,194,247,195,41,93,6,100,254,87,6,62,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,48,201,238,38,251,136,245,36,40,101,9,146,252,167,8,126,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,60,254,230,200,249,11,235,142,51,120,8,236,250,32,7,211,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,59,207,231,234,249,227,239,84,47,218,7,136,252,103,6,100,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,55,68,235,35,249,57,232,136,56,81,6,113,247,33,12,228,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,51,47,235,146,250,238,241,138,45,152,7,180,249,47,11,21,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,36,244,65,252,235,245,175,41,119,7,241,251,190,7,78,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,56,150,234,246,249,14,251,71,38,188,5,240,251,120,7,226,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,54,177,235,90,250,152,237,182,48,195,8,250,250,236,7,228,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,234,9,250,57,248,223,41,249,4,122,251,137,7,253,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,54,44,236,89,250,131,250,125,39,17,5,12,255,68,7,103,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,45,172,240,152,251,152,236,154,50,223,7,204,249,88,10,38,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,42,223,240,181,251,217,236,162,53,151,4,37,249,167,14,24,18,0,0,0,0,0,0,0,0,0,0,128,0,255,15,62,38,246,242,165,253,239,246,238,39,51,8,168,254,249,4,191,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,78,57,239,89,254,156,240,226,59,145,15,232,254,6,19,72,38,0,0,0,0,0,0,0,0,0,0,0,0,30,15,97,30,5,5,227,251,192,219,159,64,100,11,163,241,47,22,148,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,26,170,248,36,253,19,223,140,62,4,10,64,253,80,2,233,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,43,208,240,160,251,176,227,64,59,160,8,5,250,229,8,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,35,34,246,202,251,219,226,223,58,14,10,26,248,136,9,191,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,233,15,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,45,253,238,215,251,132,230,199,53,242,11,70,250,192,7,157,23,0,0,0,0,0,0,0,0,0,0,0,2,255,63,137,44,110,238,224,250,32,236,207,49,53,10,186,252,32,6,53,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,128,0,0,0,204,48,174,237,134,250,135,228,63,60,111,6,29,250,63,8,17,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,46,252,237,242,250,33,221,72,66,196,7,184,247,181,10,70,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,34,84,245,5,252,220,227,221,58,228,8,90,249,30,9,70,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,49,233,236,135,250,51,229,148,58,170,7,106,247,222,10,179,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,39,78,242,224,250,15,228,203,58,190,8,45,248,95,9,81,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,83,201,213,95,250,228,246,103,41,207,7,33,1,107,3,23,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,104,15,152,48,142,240,97,251,157,251,202,37,172,6,173,255,78,6,246,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,47,151,238,211,251,86,236,74,50,96,9,229,252,188,6,248,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,27,121,250,64,253,188,235,197,53,144,5,32,251,182,10,150,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,54,89,232,221,252,47,254,191,38,130,2,73,8,82,0,11,5,0,0,0,0,0,0,0,0,0,0,8,0,0,0,115,68,37,237,50,246,244,2,98,33,119,255,225,23,113,6,202,8,0,0,0,0,0,0,0,0,0,0,8,0,0,0,140,80,108,226,15,245,153,255,89,39,116,254,223,13,23,255,172,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,42,196,248,124,253,255,249,75,43,228,1,39,9,116,2,168,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,38,116,245,84,252,82,246,187,47,206,0,193,7,122,2,7,4,0,0,0,0,0,0,0,0,0,0,178,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,65,92,65,216,179,243,250,247,229,45,240,254,26,10,23,254,125,13,0,0,0,0,0,0,0,0,0,0,176,0,0,0,39,51,169,231,154,0,189,47,235,255,167,247,127,3,250,17,210,8,0,0,0,0,0,0,0,0,0,0,173,0,0,0,68,71,49,231,77,245,233,252,185,43,247,253,127,14,127,255,242,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,45,4,233,182,3,84,37,54,7,250,250,5,252,77,24,168,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,64,91,231,125,250,8,239,99,54,67,1,237,8,18,1,110,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,30,56,12,248,252,116,222,74,64,247,7,105,246,166,15,54,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,64,84,232,66,250,29,242,237,50,217,1,241,9,122,0,84,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,82,132,223,154,244,109,252,11,43,91,255,149,13,76,255,114,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,37,14,243,201,252,213,235,151,49,208,10,194,250,51,7,156,23,0,0,0,0,0,0,0,0,0,0,0,0,124,15,15,41,4,241,178,251,222,228,251,56,254,9,55,250,0,7,102,24,0,0,0,0,0,0,0,0,0,0,0,0,255,15,5,50,202,237,160,250,200,226,163,59,56,9,166,249,146,8,224,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,44,25,242,179,251,203,240,115,46,209,8,66,251,94,9,44,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,49,147,237,92,251,169,250,227,35,22,10,18,1,92,3,59,17,0,0,0,0,0,0,0,0,0,0,0,0,237,15,229,45,48,240,227,250,181,248,76,41,209,5,118,255,169,5,170,17,0,0,0,0,0,0,0,0,0,0,0,0,241,14,1,44,66,239,32,252,170,237,55,48,87,10,190,251,243,5,71,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,29,19,10,173,250,15,222,77,65,223,7,128,241,53,23,73,23,0,0,0,0,0,0,0,0,0,0,110,0,0,0,55,65,79,241,153,247,155,0,210,37,163,0,105,13,183,3,40,19,0,0,0,0,0,0,0,0,0,0,0,0,125,15,23,35,130,244,61,252,100,230,140,56,189,8,134,246,71,11,78,31,0,0,0,0,0,0,0,0,0,0,0,0,125,15,104,44,202,240,38,251,135,230,22,56,35,9,85,246,240,11,117,28,0,0,0,0,0,0,0,0,0,0,0,0,125,15,184,35,39,245,26,252,236,229,220,56,233,8,90,246,203,11,64,30,0,0,0,0,0,0,0,0,0,0,0,0,139,15,58,36,13,246,113,251,228,223,195,63,151,7,31,247,160,10,148,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,73,246,38,252,80,224,175,60,211,10,71,251,44,5,63,30,0,0,0,0,0,0,0,0,0,0,0,0,143,15,137,35,90,245,227,251,119,224,146,60,202,10,58,252,213,3,83,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,251,15,44,40,45,243,194,251,235,224,146,61,12,9,195,252,114,3,244,25,0,0,0,0,0,0,0,0,0,0,0,0,251,15,255,39,224,243,181,251,155,224,111,61,147,9,97,252,157,3,215,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,34,35,252,247,251,36,243,99,45,138,6,107,253,106,12,96,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,23,91,252,242,252,233,220,79,65,50,9,134,250,175,5,64,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,29,138,247,98,252,226,226,232,60,142,7,183,246,248,10,158,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,30,59,247,49,252,102,220,90,67,83,7,137,245,239,11,73,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,65,138,237,163,247,69,226,97,61,180,7,226,244,166,13,49,37,0,0,0,0,0,0,0,0,0,0,0,0,188,15,175,32,56,247,5,253,202,221,63,64,118,9,9,250,14,6,117,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,22,123,252,153,253,110,222,233,64,232,7,97,244,24,16,174,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,39,47,245,25,251,147,223,28,62,248,9,227,252,168,2,236,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,30,137,247,211,252,49,235,94,51,104,9,248,250,179,9,32,31,0,0,0,0,0,0,0,0,0,0,0,0,185,15,101,27,128,250,133,253,108,235,102,50,80,10,66,250,241,10,211,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,35,56,248,53,253,239,222,174,63,207,8,127,245,145,12,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,28,62,248,120,253,107,224,195,60,158,10,134,247,208,9,33,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,34,154,246,74,253,246,236,59,49,237,9,108,253,229,5,163,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,34,17,246,113,252,191,220,32,66,103,8,207,250,189,4,1,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,27,124,249,218,252,54,224,132,61,239,9,150,252,82,3,217,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,127,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,230,61,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,7,62,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,30,196,247,213,253,251,236,195,48,121,10,104,251,21,8,77,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,33,150,246,141,252,161,220,44,66,123,8,46,250,83,5,72,33,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,126,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,86,51,200,239,196,249,209,237,86,48,234,8,23,249,136,10,55,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,118,38,219,247,5,252,50,243,101,43,122,8,250,252,86,8,113,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,133,36,85,244,23,252,17,225,150,61,218,8,206,247,120,10,183,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,235,214,44,64,9,161,21,143,255,76,12,151,236,37,39,150,22,10,3,68,35,211,0,0,0,0,0,0,0,0,0,162,30,240,246,32,252,38,224,102,61,39,10,182,251,62,5,136,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,33,233,245,244,251,141,224,223,60,83,10,229,250,127,5,186,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,31,246,246,111,252,253,222,146,61,78,11,94,250,240,5,186,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,37,217,242,110,252,158,237,40,49,64,9,187,252,200,3,169,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,44,161,241,169,251,159,243,231,43,154,8,233,252,100,5,103,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,43,83,239,0,252,72,248,198,39,40,8,242,253,239,4,117,17,0,0,0,0,0,0,0,0,0,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,35,149,245,159,252,14,238,36,48,248,9,69,253,250,6,116,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,41,204,243,7,251,65,232,214,55,109,7,139,249,2,9,93,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,0,0,0,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,0,0,0,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,0,0,0,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,0,0,0,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,0,0,0,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,0,0,0,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,0,0,0,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,0,0,0,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,0,0,0,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,0,0,0,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,0,0,0,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,0,0,0,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,0,0,0,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,0,0,0,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,0,0,0,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,0,0,0,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,0,0,0,0,143,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,0,0,0,0,143,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,0,0,0,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,143,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,0,0,0,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,0,0,0,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,0,0,0,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,0,0,0,0,144,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,0,0,0,0,143,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0].concat([0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,0,0,0,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,0,0,0,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,255,255,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,0,0,0,0,0,2,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,0,0,0,0,200,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,0,0,0,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,126,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,0,0,0,0,128,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,0,0,0,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0]), "i8", ALLOC_NONE, 5561472);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5573248);
allocate([65,79,67,0] /* AOC\00 */, "i8", ALLOC_NONE, 5573280);
allocate([69,80,83,79,78,0] /* EPSON\00 */, "i8", ALLOC_NONE, 5573284);
allocate([82,105,99,111,104,0] /* Ricoh\00 */, "i8", ALLOC_NONE, 5573292);
allocate([76,69,73,67,65,0] /* LEICA\00 */, "i8", ALLOC_NONE, 5573300);
allocate([79,76,89,77,80,0] /* OLYMP\00 */, "i8", ALLOC_NONE, 5573308);
allocate([70,85,74,73,70,73,76,77,0] /* FUJIFILM\00 */, "i8", ALLOC_NONE, 5573316);
allocate([80,97,110,97,115,111,110,105,99,0] /* Panasonic\00 */, "i8", ALLOC_NONE, 5573328);
allocate([83,79,78,89,0] /* SONY\00 */, "i8", ALLOC_NONE, 5573340);
allocate([79,76,89,77,80,85,83,0] /* OLYMPUS\00 */, "i8", ALLOC_NONE, 5573348);
allocate([87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0] /* Writing data to %s . */, "i8", ALLOC_NONE, 5573356);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5573380);
allocate([46,116,104,117,109,98,0] /* .thumb\00 */, "i8", ALLOC_NONE, 5573384);
allocate([95,37,48,42,100,0] /* _%0_d\00 */, "i8", ALLOC_NONE, 5573392);
allocate([115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* standard output\00 */, "i8", ALLOC_NONE, 5573400);
allocate([46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0] /* .pgm\00.ppm\00.ppm\0 */, "i8", ALLOC_NONE, 5573416);
allocate([46,116,105,102,102,0] /* .tiff\00 */, "i8", ALLOC_NONE, 5573436);
allocate([37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0] /* %s: \22-s %d\22 requ */, "i8", ALLOC_NONE, 5573444);
allocate([78,105,107,111,110,0] /* Nikon\00 */, "i8", ALLOC_NONE, 5573488);
allocate([80,54,10,37,100,32,37,100,10,50,53,53,10,0] /* P6\0A%d %d\0A255\0A\ */, "i8", ALLOC_NONE, 5573496);
allocate([76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Loading %s %s image  */, "i8", ALLOC_NONE, 5573512);
allocate([109,97,105,110,40,41,0] /* main()\00 */, "i8", ALLOC_NONE, 5573548);
allocate([37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0] /* %s is a %s %s image. */, "i8", ALLOC_NONE, 5573556);
allocate([10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ACamera multiplier */, "i8", ALLOC_NONE, 5573580);
allocate([10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ADaylight multipli */, "i8", ALLOC_NONE, 5573604);
allocate([10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0] /* \0AFilter pattern: \ */, "i8", ALLOC_NONE, 5573628);
allocate([82,97,119,32,99,111,108,111,114,115,58,32,37,100,0] /* Raw colors: %d\00 */, "i8", ALLOC_NONE, 5573648);
allocate([79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0] /* Output size: %4d x % */, "i8", ALLOC_NONE, 5573664);
allocate([73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Image size:  %4d x % */, "i8", ALLOC_NONE, 5573688);
allocate([67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0] /* Cannot decode file % */, "i8", ALLOC_NONE, 5573712);
allocate([77,76,89,0] /* MLY\00 */, "i8", ALLOC_NONE, 5573736);
allocate([70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0] /* Full size:   %4d x % */, "i8", ALLOC_NONE, 5573740);
allocate([84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Thumb size:  %4d x % */, "i8", ALLOC_NONE, 5573764);
allocate([80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0] /* Pixel Aspect Ratio:  */, "i8", ALLOC_NONE, 5573788);
allocate([78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0] /* Number of raw images */, "i8", ALLOC_NONE, 5573816);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5573844);
allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NONE, 5573848);
allocate([69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0] /* Embedded ICC profile */, "i8", ALLOC_NONE, 5573852);
allocate([70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0] /* Focal length: %0.1f  */, "i8", ALLOC_NONE, 5573880);
allocate([65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0] /* Aperture: f/%0.1f\0A */, "i8", ALLOC_NONE, 5573904);
allocate([37,48,46,49,102,32,115,101,99,10,0] /* %0.1f sec\0A\00 */, "i8", ALLOC_NONE, 5573924);
allocate([75,67,0] /* KC\00 */, "i8", ALLOC_NONE, 5573936);
allocate([49,47,0] /* 1/\00 */, "i8", ALLOC_NONE, 5573940);
allocate([83,104,117,116,116,101,114,58,32,0] /* Shutter: \00 */, "i8", ALLOC_NONE, 5573944);
allocate([73,83,79,32,115,112,101,101,100,58,32,37,100,10,0] /* ISO speed: %d\0A\00 */, "i8", ALLOC_NONE, 5573956);
allocate([37,100,37,99,0] /* %d%c\00 */, "i8", ALLOC_NONE, 5573972);
allocate([68,78,71,32,86,101,114,115,105,111,110,58,32,0] /* DNG Version: \00 */, "i8", ALLOC_NONE, 5573980);
allocate([79,119,110,101,114,58,32,37,115,10,0] /* Owner: %s\0A\00 */, "i8", ALLOC_NONE, 5573996);
allocate([67,97,109,101,114,97,58,32,37,115,32,37,115,10,0] /* Camera: %s %s\0A\00 */, "i8", ALLOC_NONE, 5574008);
allocate([84,105,109,101,115,116,97,109,112,58,32,37,115,0] /* Timestamp: %s\00 */, "i8", ALLOC_NONE, 5574024);
allocate([10,70,105,108,101,110,97,109,101,58,32,37,115,10,0] /* \0AFilename: %s\0A\0 */, "i8", ALLOC_NONE, 5574040);
allocate([37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0] /* %s has no thumbnail. */, "i8", ALLOC_NONE, 5574056);
allocate([77,77,77,77,0] /* MMMM\00 */, "i8", ALLOC_NONE, 5574080);
allocate([37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0] /* %s time set to %d.\0 */, "i8", ALLOC_NONE, 5574088);
allocate([37,49,48,108,100,37,49,48,100,32,37,115,10,0] /* %10ld%10d %s\0A\00 */, "i8", ALLOC_NONE, 5574108);
allocate([37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0] /* %s has no timestamp. */, "i8", ALLOC_NONE, 5574124);
allocate([87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0] /* Will not write an im */, "i8", ALLOC_NONE, 5574148);
allocate([78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0] /* No files to process. */, "i8", ALLOC_NONE, 5574192);
allocate([85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0] /* Unknown option \22-% */, "i8", ALLOC_NONE, 5574216);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5574240);
allocate([78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0] /* Non-numeric argument */, "i8", ALLOC_NONE, 5574244);
allocate([49,49,52,49,49,49,49,49,49,52,50,50,0] /* 114111111422\00 */, "i8", ALLOC_NONE, 5574276);
allocate([110,98,114,107,83,116,113,109,72,65,67,103,0] /* nbrkStqmHACg\00 */, "i8", ALLOC_NONE, 5574292);
allocate([73,73,73,73,0] /* IIII\00 */, "i8", ALLOC_NONE, 5574308);
allocate([45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0] /* -T        Write TIFF */, "i8", ALLOC_NONE, 5574316);
allocate([45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0] /* -4        Linear 16- */, "i8", ALLOC_NONE, 5574352);
allocate([45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0] /* -6        Write 16-b */, "i8", ALLOC_NONE, 5574400);
allocate([45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0] /* -s [0..N-1] Select o */, "i8", ALLOC_NONE, 5574440);
allocate([45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0] /* -m _num_  Apply a 3x */, "i8", ALLOC_NONE, 5574500);
allocate([45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0] /* -f        Interpolat */, "i8", ALLOC_NONE, 5574552);
allocate([45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0] /* -h        Half-size  */, "i8", ALLOC_NONE, 5574596);
allocate([45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0] /* -q [0-3]  Set the in */, "i8", ALLOC_NONE, 5574656);
allocate([45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0] /* -g _p ts_ Set custom */, "i8", ALLOC_NONE, 5574696);
allocate([45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0] /* -b _num_  Adjust bri */, "i8", ALLOC_NONE, 5574752);
allocate([86,69,82,0] /* VER\00 */, "i8", ALLOC_NONE, 5574796);
allocate([45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0] /* -W        Don't auto */, "i8", ALLOC_NONE, 5574800);
allocate([45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0] /* -j        Don't stre */, "i8", ALLOC_NONE, 5574852);
allocate([45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0] /* -D        Document m */, "i8", ALLOC_NONE, 5574900);
allocate([45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0] /* -d        Document m */, "i8", ALLOC_NONE, 5574956);
allocate([45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0] /* -o [0-5]  Output col */, "i8", ALLOC_NONE, 5575012);
allocate([45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0] /* -t [0-7]  Flip image */, "i8", ALLOC_NONE, 5575076);
allocate([45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0] /* -H [0-9]  Highlight  */, "i8", ALLOC_NONE, 5575132);
allocate([45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0] /* -n _num_  Set thresh */, "i8", ALLOC_NONE, 5575200);
allocate([45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0] /* -S _num_  Set the sa */, "i8", ALLOC_NONE, 5575248);
allocate([45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0] /* -k _num_  Set the da */, "i8", ALLOC_NONE, 5575284);
allocate([75,68,75,0] /* KDK\00 */, "i8", ALLOC_NONE, 5575320);
allocate([45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0] /* -K _file_ Subtract d */, "i8", ALLOC_NONE, 5575324);
allocate([45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0] /* -P _file_ Fix the de */, "i8", ALLOC_NONE, 5575372);
allocate([45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0] /* -C _r b_  Correct ch */, "i8", ALLOC_NONE, 5575424);
allocate([43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0] /* +M/-M     Use/don't  */, "i8", ALLOC_NONE, 5575464);
allocate([45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -r _r g b g_ Set cus */, "i8", ALLOC_NONE, 5575516);
allocate([45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -A _x y w h_ Average */, "i8", ALLOC_NONE, 5575556);
allocate([45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -a        Average th */, "i8", ALLOC_NONE, 5575608);
allocate([45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0] /* -w        Use camera */, "i8", ALLOC_NONE, 5575660);
allocate([45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0] /* -z        Change fil */, "i8", ALLOC_NONE, 5575708);
allocate([45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0] /* -i -v     Identify f */, "i8", ALLOC_NONE, 5575756);
allocate([78,111,107,105,97,0] /* Nokia\00 */, "i8", ALLOC_NONE, 5575800);
allocate([45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0] /* -i        Identify f */, "i8", ALLOC_NONE, 5575808);
allocate([45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0] /* -e        Extract em */, "i8", ALLOC_NONE, 5575856);
allocate([45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* -c        Write imag */, "i8", ALLOC_NONE, 5575900);
allocate([45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0] /* -v        Print verb */, "i8", ALLOC_NONE, 5575948);
allocate([10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0] /* \0AUsage:  %s [OPTIO */, "i8", ALLOC_NONE, 5575984);
allocate([57,46,49,55,0] /* 9.17\00 */, "i8", ALLOC_NONE, 5576020);
allocate([10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0] /* \0ARaw photo decoder */, "i8", ALLOC_NONE, 5576028);
allocate([84,90,61,85,84,67,0] /* TZ=UTC\00 */, "i8", ALLOC_NONE, 5576060);
allocate([80,37,100,10,37,100,32,37,100,10,37,100,10,0] /* P%d\0A%d %d\0A%d\0A\ */, "i8", ALLOC_NONE, 5576068);
allocate([49,49,49,50,52,56,49,49,50,52,56,52,56,56,0] /* 11124811248488\00 */, "i8", ALLOC_NONE, 5576084);
allocate([80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0] /* P7\0AWIDTH %d\0AHEIG */, "i8", ALLOC_NONE, 5576100);
allocate([119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0] /* write_ppm_tiff()\00 */, "i8", ALLOC_NONE, 5576164);
allocate([255,225,32,32,69,120,105,102,0,0,0] /* \FF\E1  Exif\00\00\0 */, "i8", ALLOC_NONE, 5576184);
allocate([106,112,101,103,95,116,104,117,109,98,40,41,0] /* jpeg_thumb()\00 */, "i8", ALLOC_NONE, 5576196);
allocate([37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0] /* %04d:%02d:%02d %02d: */, "i8", ALLOC_NONE, 5576212);
allocate([100,99,114,97,119,32,118,57,46,49,55,0] /* dcraw v9.17\00 */, "i8", ALLOC_NONE, 5576244);
allocate([49,50,52,51,53,56,54,55,0] /* 12435867\00 */, "i8", ALLOC_NONE, 5576256);
allocate([115,116,114,101,116,99,104,40,41,0] /* stretch()\00 */, "i8", ALLOC_NONE, 5576268);
allocate([83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0] /* Stretching the image */, "i8", ALLOC_NONE, 5576280);
allocate([102,117,106,105,95,114,111,116,97,116,101,40,41,0] /* fuji_rotate()\00 */, "i8", ALLOC_NONE, 5576308);
allocate([114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0] /* recover_highlights() */, "i8", ALLOC_NONE, 5576324);
allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0] /* Rotating image 45 de */, "i8", ALLOC_NONE, 5576348);
allocate([67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10,0] /* Converting to %s col */, "i8", ALLOC_NONE, 5576380);
allocate([66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0] /* Building histograms. */, "i8", ALLOC_NONE, 5576412);
allocate([97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0] /* auto-generated by dc */, "i8", ALLOC_NONE, 5576436);
allocate([99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0] /* convert_to_rgb()\00 */, "i8", ALLOC_NONE, 5576460);
allocate([88,89,90,0] /* XYZ\00 */, "i8", ALLOC_NONE, 5576480);
allocate([80,114,111,80,104,111,116,111,32,68,54,53,0] /* ProPhoto D65\00 */, "i8", ALLOC_NONE, 5576484);
allocate([87,105,100,101,71,97,109,117,116,32,68,54,53,0] /* WideGamut D65\00 */, "i8", ALLOC_NONE, 5576500);
allocate([65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0] /* Adobe RGB (1998)\00 */, "i8", ALLOC_NONE, 5576516);
allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_NONE, 5576536);
allocate([82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Rebuilding highlight */, "i8", ALLOC_NONE, 5576544);
allocate([112,112,109,95,116,104,117,109,98,40,41,0] /* ppm_thumb()\00 */, "i8", ALLOC_NONE, 5576572);
allocate([71,77,67,89,0] /* GMCY\00 */, "i8", ALLOC_NONE, 5576584);
allocate([82,71,66,71,0] /* RGBG\00 */, "i8", ALLOC_NONE, 5576592);
allocate([108,105,98,106,112,101,103,0] /* libjpeg\00 */, "i8", ALLOC_NONE, 5576600);
allocate([108,105,98,106,97,115,112,101,114,0] /* libjasper\00 */, "i8", ALLOC_NONE, 5576608);
allocate([37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0] /* %s: You must link dc */, "i8", ALLOC_NONE, 5576620);
allocate([81,117,105,99,107,116,97,107,101,0] /* Quicktake\00 */, "i8", ALLOC_NONE, 5576656);
allocate([37,100,120,37,100,0] /* %dx%d\00 */, "i8", ALLOC_NONE, 5576668);
allocate([69,88,45,80,55,48,48,0] /* EX-P700\00 */, "i8", ALLOC_NONE, 5576676);
allocate([69,88,45,80,53,48,53,0] /* EX-P505\00 */, "i8", ALLOC_NONE, 5576684);
allocate([69,88,45,90,82,49,48,48,0] /* EX-ZR100\00 */, "i8", ALLOC_NONE, 5576692);
allocate([66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Blending highlights. */, "i8", ALLOC_NONE, 5576704);
allocate([69,88,45,90,56,0] /* EX-Z8\00 */, "i8", ALLOC_NONE, 5576728);
allocate([69,88,45,90,56,53,48,0] /* EX-Z850\00 */, "i8", ALLOC_NONE, 5576736);
allocate([69,88,45,90,55,53,48,0] /* EX-Z750\00 */, "i8", ALLOC_NONE, 5576744);
allocate([69,88,45,90,55,53,0] /* EX-Z75\00 */, "i8", ALLOC_NONE, 5576752);
allocate([69,88,45,90,54,48,0] /* EX-Z60\00 */, "i8", ALLOC_NONE, 5576760);
allocate([69,88,45,90,53,53,0] /* EX-Z55\00 */, "i8", ALLOC_NONE, 5576768);
allocate([69,88,45,90,53,48,48,0] /* EX-Z500\00 */, "i8", ALLOC_NONE, 5576776);
allocate([69,88,45,90,53,48,0] /* EX-Z50\00 */, "i8", ALLOC_NONE, 5576784);
allocate([69,88,45,83,49,48,48,0] /* EX-S100\00 */, "i8", ALLOC_NONE, 5576792);
allocate([69,88,45,83,50,48,0] /* EX-S20\00 */, "i8", ALLOC_NONE, 5576800);
allocate([77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0] /* Median filter pass % */, "i8", ALLOC_NONE, 5576808);
allocate([81,86,45,82,53,49,0] /* QV-R51\00 */, "i8", ALLOC_NONE, 5576836);
allocate([81,86,45,82,52,49,0] /* QV-R41\00 */, "i8", ALLOC_NONE, 5576844);
allocate([81,86,45,53,55,48,48,0] /* QV-5700\00 */, "i8", ALLOC_NONE, 5576852);
allocate([81,86,45,52,48,48,48,0] /* QV-4000\00 */, "i8", ALLOC_NONE, 5576860);
allocate([81,86,45,50,48,48,48,85,88,0] /* QV-2000UX\00 */, "i8", ALLOC_NONE, 5576868);
allocate([80,67,45,67,65,77,32,54,48,48,0] /* PC-CAM 600\00 */, "i8", ALLOC_NONE, 5576880);
allocate([81,117,105,99,107,84,97,107,101,0] /* QuickTake\00 */, "i8", ALLOC_NONE, 5576892);
allocate([68,67,83,50,48,48,0] /* DCS200\00 */, "i8", ALLOC_NONE, 5576904);
allocate([68,67,49,50,48,0] /* DC120\00 */, "i8", ALLOC_NONE, 5576912);
allocate([97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* ahd_interpolate()\00 */, "i8", ALLOC_NONE, 5576920);
allocate([68,67,53,48,0] /* DC50\00 */, "i8", ALLOC_NONE, 5576940);
allocate([68,67,52,48,0] /* DC40\00 */, "i8", ALLOC_NONE, 5576948);
allocate([52,48,0] /* 40\00 */, "i8", ALLOC_NONE, 5576956);
allocate([68,67,50,53,0] /* DC25\00 */, "i8", ALLOC_NONE, 5576960);
allocate([77,89,67,89,0] /* MYCY\00 */, "i8", ALLOC_NONE, 5576968);
allocate([50,48,88,0] /* 20X\00 */, "i8", ALLOC_NONE, 5576976);
allocate([68,67,83,55,54,48,77,0] /* DCS760M\00 */, "i8", ALLOC_NONE, 5576980);
allocate([68,67,83,54,54,48,77,0] /* DCS660M\00 */, "i8", ALLOC_NONE, 5576988);
allocate([68,67,83,52,54,48,65,0] /* DCS460A\00 */, "i8", ALLOC_NONE, 5576996);
allocate([68,67,83,52,54,48,32,0] /* DCS460 \00 */, "i8", ALLOC_NONE, 5577004);
allocate([65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* AHD interpolation... */, "i8", ALLOC_NONE, 5577012);
allocate([68,67,83,52,50,48,0] /* DCS420\00 */, "i8", ALLOC_NONE, 5577036);
allocate([69,79,83,68,67,83,49,0] /* EOSDCS1\00 */, "i8", ALLOC_NONE, 5577044);
allocate([69,79,83,68,67,83,51,66,0] /* EOSDCS3B\00 */, "i8", ALLOC_NONE, 5577052);
allocate([78,67,50,48,48,48,0] /* NC2000\00 */, "i8", ALLOC_NONE, 5577064);
allocate([69,97,115,121,83,104,97,114,101,0] /* EasyShare\00 */, "i8", ALLOC_NONE, 5577072);
allocate([67,51,51,48,0] /* C330\00 */, "i8", ALLOC_NONE, 5577084);
allocate([67,54,48,51,0] /* C603\00 */, "i8", ALLOC_NONE, 5577092);
allocate([67,54,48,51,121,0] /* C603y\00 */, "i8", ALLOC_NONE, 5577100);
allocate([75,65,73,45,48,51,52,48,0] /* KAI-0340\00 */, "i8", ALLOC_NONE, 5577108);
allocate([67,54,48,51,118,0] /* C603v\00 */, "i8", ALLOC_NONE, 5577120);
allocate([80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* PPG interpolation... */, "i8", ALLOC_NONE, 5577128);
allocate([80,73,88,76,0] /* PIXL\00 */, "i8", ALLOC_NONE, 5577152);
allocate([68,83,76,82,45,65,51,53,48,0] /* DSLR-A350\00 */, "i8", ALLOC_NONE, 5577160);
allocate([68,83,67,45,82,49,0] /* DSC-R1\00 */, "i8", ALLOC_NONE, 5577172);
allocate([68,83,67,45,86,51,0] /* DSC-V3\00 */, "i8", ALLOC_NONE, 5577180);
allocate([82,71,66,69,0] /* RGBE\00 */, "i8", ALLOC_NONE, 5577188);
allocate([68,83,67,45,70,56,50,56,0] /* DSC-F828\00 */, "i8", ALLOC_NONE, 5577196);
allocate([88,90,45,50,0] /* XZ-2\00 */, "i8", ALLOC_NONE, 5577208);
allocate([83,80,53,53,48,85,90,0] /* SP550UZ\00 */, "i8", ALLOC_NONE, 5577216);
allocate([69,45,51,51,48,0] /* E-330\00 */, "i8", ALLOC_NONE, 5577224);
allocate([69,45,53,48,48,0] /* E-500\00 */, "i8", ALLOC_NONE, 5577232);
allocate([118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* vng_interpolate()\00 */, "i8", ALLOC_NONE, 5577240);
allocate([69,45,51,48,48,0] /* E-300\00 */, "i8", ALLOC_NONE, 5577260);
allocate([67,55,55,48,85,90,0] /* C770UZ\00 */, "i8", ALLOC_NONE, 5577268);
allocate([148,97,73,22,0] /* \94aI\16\00 */, "i8", ALLOC_NONE, 5577276);
allocate([67,97,116,99,104,76,105,103,104,116,0] /* CatchLight\00 */, "i8", ALLOC_NONE, 5577284);
allocate([82,66,84,71,0] /* RBTG\00 */, "i8", ALLOC_NONE, 5577296);
allocate([56,66,80,83,0] /* 8BPS\00 */, "i8", ALLOC_NONE, 5577304);
allocate([86,57,54,67,0] /* V96C\00 */, "i8", ALLOC_NONE, 5577312);
allocate([51,51,50,48,65,70,0] /* 3320AF\00 */, "i8", ALLOC_NONE, 5577320);
allocate([65,55,56,50,0] /* A782\00 */, "i8", ALLOC_NONE, 5577328);
allocate([86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* VNG interpolation... */, "i8", ALLOC_NONE, 5577336);
allocate([50,48,49,48,0] /* 2010\00 */, "i8", ALLOC_NONE, 5577360);
allocate([88,67,68,45,83,88,57,49,48,67,82,0] /* XCD-SX910CR\00 */, "i8", ALLOC_NONE, 5577368);
allocate([70,45,56,49,48,67,0] /* F-810C\00 */, "i8", ALLOC_NONE, 5577380);
allocate([70,45,53,49,48,67,0] /* F-510C\00 */, "i8", ALLOC_NONE, 5577388);
allocate([70,45,50,48,49,67,0] /* F-201C\00 */, "i8", ALLOC_NONE, 5577396);
allocate([70,45,49,52,53,67,0] /* F-145C\00 */, "i8", ALLOC_NONE, 5577404);
allocate([70,45,48,56,48,67,0] /* F-080C\00 */, "i8", ALLOC_NONE, 5577412);
allocate([54,52,48,120,52,56,48,0] /* 640x480\00 */, "i8", ALLOC_NONE, 5577420);
allocate([53,51,49,67,0] /* 531C\00 */, "i8", ALLOC_NONE, 5577428);
allocate([78,57,53,0] /* N95\00 */, "i8", ALLOC_NONE, 5577436);
allocate([66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Bilinear interpolati */, "i8", ALLOC_NONE, 5577440);
allocate([83,84,86,54,56,48,32,86,71,65,0] /* STV680 VGA\00 */, "i8", ALLOC_NONE, 5577468);
allocate([69,88,50,70,0] /* EX2F\00 */, "i8", ALLOC_NONE, 5577480);
allocate([87,66,53,53,48,0] /* WB550\00 */, "i8", ALLOC_NONE, 5577488);
allocate([87,66,50,48,48,48,0] /* WB2000\00 */, "i8", ALLOC_NONE, 5577496);
allocate([69,88,49,0] /* EX1\00 */, "i8", ALLOC_NONE, 5577504);
allocate([83,56,53,0] /* S85\00 */, "i8", ALLOC_NONE, 5577508);
allocate([68,67,45,56,51,51,109,0] /* DC-833m\00 */, "i8", ALLOC_NONE, 5577512);
allocate([79,112,116,105,111,32,55,53,48,90,0] /* Optio 750Z\00 */, "i8", ALLOC_NONE, 5577520);
allocate([79,112,116,105,111,32,83,0] /* Optio S\00 */, "i8", ALLOC_NONE, 5577532);
allocate([42,105,115,116,32,68,83,0] /* _ist DS\00 */, "i8", ALLOC_NONE, 5577540);
allocate([112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* pre_interpolate()\00 */, "i8", ALLOC_NONE, 5577548);
allocate([42,105,115,116,32,68,0] /* _ist D\00 */, "i8", ALLOC_NONE, 5577568);
allocate([68,105,77,65,71,69,32,71,0] /* DiMAGE G\00 */, "i8", ALLOC_NONE, 5577576);
allocate([68,89,78,65,88,32,37,45,49,48,115,0] /* DYNAX %-10s\00 */, "i8", ALLOC_NONE, 5577588);
allocate([77,65,88,88,85,77,0] /* MAXXUM\00 */, "i8", ALLOC_NONE, 5577600);
allocate([68,89,78,65,88,0] /* DYNAX\00 */, "i8", ALLOC_NONE, 5577608);
allocate([65,76,80,72,65,0] /* ALPHA\00 */, "i8", ALLOC_NONE, 5577616);
allocate([68,105,77,65,71,69,32,65,0] /* DiMAGE A\00 */, "i8", ALLOC_NONE, 5577624);
allocate([75,68,45,53,49,48,90,0] /* KD-510Z\00 */, "i8", ALLOC_NONE, 5577636);
allocate([75,68,45,52,48,48,90,0] /* KD-400Z\00 */, "i8", ALLOC_NONE, 5577644);
allocate([82,68,49,55,53,0] /* RD175\00 */, "i8", ALLOC_NONE, 5577652);
allocate([115,99,97,108,101,95,99,111,108,111,114,115,40,41,0] /* scale_colors()\00 */, "i8", ALLOC_NONE, 5577660);
allocate([112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0] /* packed_dng_load_raw( */, "i8", ALLOC_NONE, 5577676);
allocate([83,50,80,114,111,0] /* S2Pro\00 */, "i8", ALLOC_NONE, 5577700);
allocate([69,52,53,48,48,0] /* E4500\00 */, "i8", ALLOC_NONE, 5577708);
allocate([68,105,77,65,71,69,32,90,50,0] /* DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5577716);
allocate([79,112,116,105,111,32,51,51,87,82,0] /* Optio 33WR\00 */, "i8", ALLOC_NONE, 5577728);
allocate([69,50,53,48,48,0] /* E2500\00 */, "i8", ALLOC_NONE, 5577740);
allocate([69,50,49,48,48,0] /* E2100\00 */, "i8", ALLOC_NONE, 5577748);
allocate([69,57,57,53,0] /* E995\00 */, "i8", ALLOC_NONE, 5577756);
allocate([69,57,53,48,0] /* E950\00 */, "i8", ALLOC_NONE, 5577764);
allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_NONE, 5577772);
allocate([67,79,79,76,80,73,88,32,80,0] /* COOLPIX P\00 */, "i8", ALLOC_NONE, 5577776);
allocate([67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0] /* Correcting chromatic */, "i8", ALLOC_NONE, 5577788);
allocate([67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* COOLPIX P7700\00 */, "i8", ALLOC_NONE, 5577824);
allocate([68,51,48,48,0] /* D300\00 */, "i8", ALLOC_NONE, 5577840);
allocate([68,50,88,0] /* D2X\00 */, "i8", ALLOC_NONE, 5577848);
allocate([68,50,72,0] /* D2H\00 */, "i8", ALLOC_NONE, 5577852);
allocate([68,50,48,48,0] /* D200\00 */, "i8", ALLOC_NONE, 5577856);
allocate([68,49,48,48,0] /* D100\00 */, "i8", ALLOC_NONE, 5577864);
allocate([68,55,48,0] /* D70\00 */, "i8", ALLOC_NONE, 5577872);
allocate([68,53,48,0] /* D50\00 */, "i8", ALLOC_NONE, 5577876);
allocate([68,52,48,0] /* D40\00 */, "i8", ALLOC_NONE, 5577880);
allocate([68,52,0] /* D4\00 */, "i8", ALLOC_NONE, 5577884);
allocate([32,37,102,0] /*  %f\00 */, "i8", ALLOC_NONE, 5577888);
allocate([68,56,48,48,0] /* D800\00 */, "i8", ALLOC_NONE, 5577892);
allocate([68,54,48,48,0] /* D600\00 */, "i8", ALLOC_NONE, 5577900);
allocate([68,51,50,48,48,0] /* D3200\00 */, "i8", ALLOC_NONE, 5577908);
allocate([68,55,48,48,48,0] /* D7000\00 */, "i8", ALLOC_NONE, 5577916);
allocate([68,53,49,48,48,0] /* D5100\00 */, "i8", ALLOC_NONE, 5577924);
allocate([68,57,48,0] /* D90\00 */, "i8", ALLOC_NONE, 5577932);
allocate([68,53,48,48,48,0] /* D5000\00 */, "i8", ALLOC_NONE, 5577936);
allocate([68,51,49,48,48,0] /* D3100\00 */, "i8", ALLOC_NONE, 5577944);
allocate([68,55,48,48,0] /* D700\00 */, "i8", ALLOC_NONE, 5577952);
allocate([68,51,83,0] /* D3S\00 */, "i8", ALLOC_NONE, 5577960);
allocate([83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0] /* Scaling with darknes */, "i8", ALLOC_NONE, 5577964);
allocate([68,51,0] /* D3\00 */, "i8", ALLOC_NONE, 5578024);
allocate([68,51,48,48,48,0] /* D3000\00 */, "i8", ALLOC_NONE, 5578028);
allocate([68,56,48,0] /* D80\00 */, "i8", ALLOC_NONE, 5578036);
allocate([68,54,48,0] /* D60\00 */, "i8", ALLOC_NONE, 5578040);
allocate([68,52,48,88,0] /* D40X\00 */, "i8", ALLOC_NONE, 5578044);
allocate([68,49,88,0] /* D1X\00 */, "i8", ALLOC_NONE, 5578052);
allocate([68,49,0] /* D1\00 */, "i8", ALLOC_NONE, 5578056);
allocate([69,79,83,32,54,48,48,68,0] /* EOS 600D\00 */, "i8", ALLOC_NONE, 5578060);
allocate([69,79,83,32,53,53,48,68,0] /* EOS 550D\00 */, "i8", ALLOC_NONE, 5578072);
allocate([69,79,83,45,49,68,32,88,0] /* EOS-1D X\00 */, "i8", ALLOC_NONE, 5578084);
allocate([37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0] /* %s: Cannot use camer */, "i8", ALLOC_NONE, 5578096);
allocate([69,79,83,32,54,53,48,68,0] /* EOS 650D\00 */, "i8", ALLOC_NONE, 5578136);
allocate([69,79,83,32,53,48,48,68,0] /* EOS 500D\00 */, "i8", ALLOC_NONE, 5578148);
allocate([69,79,83,32,49,49,48,48,68,0] /* EOS 1100D\00 */, "i8", ALLOC_NONE, 5578160);
allocate([69,79,83,32,52,53,48,68,0] /* EOS 450D\00 */, "i8", ALLOC_NONE, 5578172);
allocate([69,79,83,32,49,48,48,48,68,0] /* EOS 1000D\00 */, "i8", ALLOC_NONE, 5578184);
allocate([69,79,83,32,52,48,48,68,0] /* EOS 400D\00 */, "i8", ALLOC_NONE, 5578196);
allocate([69,79,83,32,51,53,48,68,0] /* EOS 350D\00 */, "i8", ALLOC_NONE, 5578208);
allocate([69,79,83,32,68,50,48,48,48,67,0] /* EOS D2000C\00 */, "i8", ALLOC_NONE, 5578220);
allocate([69,79,83,32,51,48,48,68,0] /* EOS 300D\00 */, "i8", ALLOC_NONE, 5578232);
allocate([80,111,119,101,114,83,104,111,116,32,71,49,0] /* PowerShot G1\00 */, "i8", ALLOC_NONE, 5578244);
allocate([119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0] /* wavelet_denoise()\00 */, "i8", ALLOC_NONE, 5578260);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0] /* PowerShot Pro90 IS\0 */, "i8", ALLOC_NONE, 5578280);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0] /* PowerShot SX30 IS\00 */, "i8", ALLOC_NONE, 5578300);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0] /* PowerShot SX220 HS\0 */, "i8", ALLOC_NONE, 5578320);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0] /* PowerShot SX20 IS\00 */, "i8", ALLOC_NONE, 5578340);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0] /* PowerShot SX120 IS\0 */, "i8", ALLOC_NONE, 5578360);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* PowerShot SX110 IS\0 */, "i8", ALLOC_NONE, 5578380);
allocate([80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* PowerShot S3 IS\00 */, "i8", ALLOC_NONE, 5578400);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* PowerShot A650\00 */, "i8", ALLOC_NONE, 5578416);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* PowerShot A640\00 */, "i8", ALLOC_NONE, 5578432);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* PowerShot A630\00 */, "i8", ALLOC_NONE, 5578448);
allocate([87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0] /* Wavelet denoising... */, "i8", ALLOC_NONE, 5578464);
allocate([80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0] /* PowerShot A720 IS\00 */, "i8", ALLOC_NONE, 5578488);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* PowerShot A470\00 */, "i8", ALLOC_NONE, 5578508);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* PowerShot A620\00 */, "i8", ALLOC_NONE, 5578524);
allocate([83,50,32,73,83,0] /* S2 IS\00 */, "i8", ALLOC_NONE, 5578540);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* PowerShot A610\00 */, "i8", ALLOC_NONE, 5578548);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* PowerShot A530\00 */, "i8", ALLOC_NONE, 5578564);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,54,48,0] /* PowerShot A460\00 */, "i8", ALLOC_NONE, 5578580);
allocate([80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0] /* PowerShot SD300\00 */, "i8", ALLOC_NONE, 5578596);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* PowerShot Pro70\00 */, "i8", ALLOC_NONE, 5578612);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* PowerShot A50\00 */, "i8", ALLOC_NONE, 5578628);
allocate([115,117,98,116,114,97,99,116,40,41,0] /* subtract()\00 */, "i8", ALLOC_NONE, 5578644);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0] /* PowerShot A5 Zoom\00 */, "i8", ALLOC_NONE, 5578656);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,0] /* PowerShot A5\00 */, "i8", ALLOC_NONE, 5578676);
allocate([80,111,119,101,114,83,104,111,116,32,54,48,48,0] /* PowerShot 600\00 */, "i8", ALLOC_NONE, 5578692);
allocate([54,52,53,68,0] /* 645D\00 */, "i8", ALLOC_NONE, 5578708);
allocate([75,45,55,0] /* K-7\00 */, "i8", ALLOC_NONE, 5578716);
allocate([75,45,53,0] /* K-5\00 */, "i8", ALLOC_NONE, 5578720);
allocate([75,45,120,0] /* K-x\00 */, "i8", ALLOC_NONE, 5578724);
allocate([75,45,114,0] /* K-r\00 */, "i8", ALLOC_NONE, 5578728);
allocate([68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0] /* Digital Camera \00 */, "i8", ALLOC_NONE, 5578732);
allocate([70,105,110,101,80,105,120,32,0] /* FinePix \00 */, "i8", ALLOC_NONE, 5578748);
allocate([37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0] /* %s has the wrong dim */, "i8", ALLOC_NONE, 5578760);
allocate([70,73,76,69,32,86,69,82,83,73,79,78,0] /* FILE VERSION\00 */, "i8", ALLOC_NONE, 5578792);
allocate([32,68,105,103,105,116,97,108,32,67,97,109,101,114,97,0] /*  Digital Camera\00 */, "i8", ALLOC_NONE, 5578808);
allocate([32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0] /*  DIGITAL CAMERA\00 */, "i8", ALLOC_NONE, 5578824);
allocate([67,73,0] /* CI\00 */, "i8", ALLOC_NONE, 5578840);
allocate([70,79,86,98,0] /* FOVb\00 */, "i8", ALLOC_NONE, 5578844);
allocate([0,77,82,77,0] /* \00MRM\00 */, "i8", ALLOC_NONE, 5578852);
allocate([80,87,65,68,0] /* PWAD\00 */, "i8", ALLOC_NONE, 5578860);
allocate([68,83,67,45,73,109,97,103,101,0] /* DSC-Image\00 */, "i8", ALLOC_NONE, 5578868);
allocate([37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0] /* %s is not a valid PG */, "i8", ALLOC_NONE, 5578880);
allocate([82,69,68,49,0] /* RED1\00 */, "i8", ALLOC_NONE, 5578912);
allocate([65,82,82,73,0] /* ARRI\00 */, "i8", ALLOC_NONE, 5578920);
allocate([88,50,0] /* X2\00 */, "i8", ALLOC_NONE, 5578928);
allocate([78,79,75,73,65,0] /* NOKIA\00 */, "i8", ALLOC_NONE, 5578932);
allocate([78,79,75,73,65,82,65,87,0] /* NOKIARAW\00 */, "i8", ALLOC_NONE, 5578940);
allocate([0,1,0,1,0,64,0] /* \00\01\00\01\00@\00 */, "i8", ALLOC_NONE, 5578952);
allocate([81,117,105,99,107,84,97,107,101,32,49,53,48,0] /* QuickTake 150\00 */, "i8", ALLOC_NONE, 5578960);
allocate([113,107,116,110,0] /* qktn\00 */, "i8", ALLOC_NONE, 5578976);
allocate([81,117,105,99,107,84,97,107,101,32,49,48,48,0] /* QuickTake 100\00 */, "i8", ALLOC_NONE, 5578984);
allocate([65,112,112,108,101,0] /* Apple\00 */, "i8", ALLOC_NONE, 5579000);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5579008);
allocate([37,100,46,37,100,46,37,100,0] /* %d.%d.%d\00 */, "i8", ALLOC_NONE, 5579012);
allocate([113,107,116,107,0] /* qktk\00 */, "i8", ALLOC_NONE, 5579024);
allocate([70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0] /* Fotoman Pixtura\00 */, "i8", ALLOC_NONE, 5579032);
allocate([76,111,103,105,116,101,99,104,0] /* Logitech\00 */, "i8", ALLOC_NONE, 5579048);
allocate([80,88,78,0] /* PXN\00 */, "i8", ALLOC_NONE, 5579060);
allocate([78,32,68,105,103,105,116,97,108,0] /* N Digital\00 */, "i8", ALLOC_NONE, 5579064);
allocate([67,111,110,116,97,120,0] /* Contax\00 */, "i8", ALLOC_NONE, 5579076);
allocate([65,82,69,67,79,89,75,0] /* ARECOYK\00 */, "i8", ALLOC_NONE, 5579084);
allocate([69,120,105,102,0] /* Exif\00 */, "i8", ALLOC_NONE, 5579092);
allocate([255,216,255,225,0] /* \FF\D8\FF\E1\00 */, "i8", ALLOC_NONE, 5579100);
allocate([72,69,65,80,67,67,68,82,0] /* HEAPCCDR\00 */, "i8", ALLOC_NONE, 5579108);
allocate([32,37,100,44,37,100,0] /*  %d,%d\00 */, "i8", ALLOC_NONE, 5579120);
allocate([77,79,84,79,82,79,76,65,0] /* MOTOROLA\00 */, "i8", ALLOC_NONE, 5579128);
allocate([77,97,109,105,121,97,0] /* Mamiya\00 */, "i8", ALLOC_NONE, 5579140);
allocate([67,65,83,73,79,0] /* CASIO\00 */, "i8", ALLOC_NONE, 5579148);
allocate([75,111,110,105,99,97,0] /* Konica\00 */, "i8", ALLOC_NONE, 5579156);
allocate([77,105,110,111,108,116,97,0] /* Minolta\00 */, "i8", ALLOC_NONE, 5579164);
allocate([77,73,78,79,76,84,65,0] /* MINOLTA\00 */, "i8", ALLOC_NONE, 5579172);
allocate([37,115,32,37,115,0] /* %s %s\00 */, "i8", ALLOC_NONE, 5579180);
allocate([83,79,78,89,32,83,76,84,45,65,57,57,0] /* SONY SLT-A99\00 */, "i8", ALLOC_NONE, 5579188);
allocate([83,79,78,89,32,83,76,84,45,65,55,55,0] /* SONY SLT-A77\00 */, "i8", ALLOC_NONE, 5579204);
allocate([83,79,78,89,32,83,76,84,45,65,54,53,0] /* SONY SLT-A65\00 */, "i8", ALLOC_NONE, 5579220);
allocate([70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0] /* Fixed dead pixels at */, "i8", ALLOC_NONE, 5579236);
allocate([83,79,78,89,32,83,76,84,45,65,53,55,0] /* SONY SLT-A57\00 */, "i8", ALLOC_NONE, 5579260);
allocate([83,79,78,89,32,83,76,84,45,65,53,53,0] /* SONY SLT-A55\00 */, "i8", ALLOC_NONE, 5579276);
allocate([83,79,78,89,32,83,76,84,45,65,51,55,0] /* SONY SLT-A37\00 */, "i8", ALLOC_NONE, 5579292);
allocate([83,79,78,89,32,83,76,84,45,65,51,53,0] /* SONY SLT-A35\00 */, "i8", ALLOC_NONE, 5579308);
allocate([83,79,78,89,32,83,76,84,45,65,51,51,0] /* SONY SLT-A33\00 */, "i8", ALLOC_NONE, 5579324);
allocate([83,79,78,89,32,78,69,88,0] /* SONY NEX\00 */, "i8", ALLOC_NONE, 5579340);
allocate([83,79,78,89,32,78,69,88,45,55,0] /* SONY NEX-7\00 */, "i8", ALLOC_NONE, 5579352);
allocate([83,79,78,89,32,78,69,88,45,54,0] /* SONY NEX-6\00 */, "i8", ALLOC_NONE, 5579364);
allocate([83,79,78,89,32,78,69,88,45,53,0] /* SONY NEX-5\00 */, "i8", ALLOC_NONE, 5579376);
allocate([83,79,78,89,32,78,69,88,45,51,0] /* SONY NEX-3\00 */, "i8", ALLOC_NONE, 5579388);
allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_NONE, 5579400);
allocate([83,79,78,89,32,78,69,88,45,53,82,0] /* SONY NEX-5R\00 */, "i8", ALLOC_NONE, 5579412);
allocate([83,79,78,89,32,78,69,88,45,53,78,0] /* SONY NEX-5N\00 */, "i8", ALLOC_NONE, 5579424);
allocate([83,79,78,89,32,68,83,76,82,45,65,57,48,48,0] /* SONY DSLR-A900\00 */, "i8", ALLOC_NONE, 5579436);
allocate([83,79,78,89,32,68,83,76,82,45,65,56,53,48,0] /* SONY DSLR-A850\00 */, "i8", ALLOC_NONE, 5579452);
allocate([83,79,78,89,32,68,83,76,82,45,65,55,48,48,0] /* SONY DSLR-A700\00 */, "i8", ALLOC_NONE, 5579468);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,0] /* SONY DSLR-A5\00 */, "i8", ALLOC_NONE, 5579484);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,56,48,0] /* SONY DSLR-A580\00 */, "i8", ALLOC_NONE, 5579500);
allocate([83,79,78,89,32,68,83,76,82,45,65,52,53,48,0] /* SONY DSLR-A450\00 */, "i8", ALLOC_NONE, 5579516);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,57,48,0] /* SONY DSLR-A390\00 */, "i8", ALLOC_NONE, 5579532);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,56,48,0] /* SONY DSLR-A380\00 */, "i8", ALLOC_NONE, 5579548);
allocate([47,46,98,97,100,112,105,120,101,108,115,0] /* /.badpixels\00 */, "i8", ALLOC_NONE, 5579564);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,53,48,0] /* SONY DSLR-A350\00 */, "i8", ALLOC_NONE, 5579576);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,51,48,0] /* SONY DSLR-A330\00 */, "i8", ALLOC_NONE, 5579592);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,48,48,0] /* SONY DSLR-A300\00 */, "i8", ALLOC_NONE, 5579608);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,0] /* SONY DSLR-A2\00 */, "i8", ALLOC_NONE, 5579624);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,57,48,0] /* SONY DSLR-A290\00 */, "i8", ALLOC_NONE, 5579640);
allocate([83,79,78,89,32,68,83,76,82,45,65,49,48,48,0] /* SONY DSLR-A100\00 */, "i8", ALLOC_NONE, 5579656);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,0] /* SONY DSC-RX1\00 */, "i8", ALLOC_NONE, 5579672);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,48,48,0] /* SONY DSC-RX100\00 */, "i8", ALLOC_NONE, 5579688);
allocate([83,79,78,89,32,68,83,67,45,86,51,0] /* SONY DSC-V3\00 */, "i8", ALLOC_NONE, 5579704);
allocate([83,79,78,89,32,68,83,67,45,82,49,0] /* SONY DSC-R1\00 */, "i8", ALLOC_NONE, 5579716);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5579728);
allocate([83,79,78,89,32,68,83,67,45,70,56,50,56,0] /* SONY DSC-F828\00 */, "i8", ALLOC_NONE, 5579732);
allocate([83,105,110,97,114,0] /* Sinar\00 */, "i8", ALLOC_NONE, 5579748);
allocate([83,65,77,83,85,78,71,32,83,56,53,0] /* SAMSUNG S85\00 */, "i8", ALLOC_NONE, 5579756);
allocate([83,65,77,83,85,78,71,32,71,88,45,49,0] /* SAMSUNG GX-1\00 */, "i8", ALLOC_NONE, 5579768);
allocate([83,65,77,83,85,78,71,32,87,66,50,48,48,48,0] /* SAMSUNG WB2000\00 */, "i8", ALLOC_NONE, 5579784);
allocate([83,65,77,83,85,78,71,32,78,88,0] /* SAMSUNG NX\00 */, "i8", ALLOC_NONE, 5579800);
allocate([83,65,77,83,85,78,71,32,78,88,49,48,48,48,0] /* SAMSUNG NX1000\00 */, "i8", ALLOC_NONE, 5579812);
allocate([83,65,77,83,85,78,71,32,78,88,50,0] /* SAMSUNG NX2\00 */, "i8", ALLOC_NONE, 5579828);
allocate([83,65,77,83,85,78,71,32,69,88,50,70,0] /* SAMSUNG EX2F\00 */, "i8", ALLOC_NONE, 5579840);
allocate([83,65,77,83,85,78,71,32,69,88,49,0] /* SAMSUNG EX1\00 */, "i8", ALLOC_NONE, 5579856);
allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_NONE, 5579868);
allocate([82,69,68,32,79,78,69,0] /* RED ONE\00 */, "i8", ALLOC_NONE, 5579872);
allocate([80,104,97,115,101,32,79,110,101,32,80,54,53,0] /* Phase One P65\00 */, "i8", ALLOC_NONE, 5579880);
allocate([80,104,97,115,101,32,79,110,101,32,80,52,48,0] /* Phase One P40\00 */, "i8", ALLOC_NONE, 5579896);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,52,53,0] /* Phase One P 45\00 */, "i8", ALLOC_NONE, 5579912);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,51,48,0] /* Phase One P 30\00 */, "i8", ALLOC_NONE, 5579928);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,50,0] /* Phase One P 2\00 */, "i8", ALLOC_NONE, 5579944);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,53,0] /* Phase One H 25\00 */, "i8", ALLOC_NONE, 5579960);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,48,0] /* Phase One H 20\00 */, "i8", ALLOC_NONE, 5579976);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0] /* Panasonic DMC-GX1\00 */, "i8", ALLOC_NONE, 5579992);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0] /* Panasonic DMC-GH3\00 */, "i8", ALLOC_NONE, 5580012);
allocate([102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* foveon_interpolate() */, "i8", ALLOC_NONE, 5580032);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0] /* Panasonic DMC-GH2\00 */, "i8", ALLOC_NONE, 5580056);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0] /* Panasonic DMC-GH1\00 */, "i8", ALLOC_NONE, 5580076);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0] /* Panasonic DMC-GF5\00 */, "i8", ALLOC_NONE, 5580096);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0] /* Panasonic DMC-GF3\00 */, "i8", ALLOC_NONE, 5580116);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0] /* Panasonic DMC-GF2\00 */, "i8", ALLOC_NONE, 5580136);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0] /* Panasonic DMC-GF1\00 */, "i8", ALLOC_NONE, 5580156);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0] /* Panasonic DMC-G5\00 */, "i8", ALLOC_NONE, 5580176);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0] /* Panasonic DMC-G3\00 */, "i8", ALLOC_NONE, 5580196);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0] /* Panasonic DMC-G2\00 */, "i8", ALLOC_NONE, 5580216);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0] /* Panasonic DMC-G1\00 */, "i8", ALLOC_NONE, 5580236);
allocate([66,97,100,80,105,120,101,108,115,0] /* BadPixels\00 */, "i8", ALLOC_NONE, 5580256);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0] /* Panasonic DMC-G10\00 */, "i8", ALLOC_NONE, 5580268);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0] /* Panasonic DMC-FX150\ */, "i8", ALLOC_NONE, 5580288);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,52,0] /* LEICA V-LUX 4\00 */, "i8", ALLOC_NONE, 5580308);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0] /* Panasonic DMC-FZ200\ */, "i8", ALLOC_NONE, 5580324);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,51,0] /* LEICA V-LUX 3\00 */, "i8", ALLOC_NONE, 5580344);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0] /* Panasonic DMC-FZ150\ */, "i8", ALLOC_NONE, 5580360);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,50,0] /* LEICA V-LUX 2\00 */, "i8", ALLOC_NONE, 5580380);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0] /* Panasonic DMC-FZ100\ */, "i8", ALLOC_NONE, 5580396);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,54,0] /* LEICA D-LUX 6\00 */, "i8", ALLOC_NONE, 5580416);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0] /* Panasonic DMC-LX7\00 */, "i8", ALLOC_NONE, 5580432);
allocate([83,112,97,116,105,97,108,71,97,105,110,0] /* SpatialGain\00 */, "i8", ALLOC_NONE, 5580452);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,53,0] /* LEICA D-LUX 5\00 */, "i8", ALLOC_NONE, 5580464);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0] /* Panasonic DMC-LX5\00 */, "i8", ALLOC_NONE, 5580480);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,52,0] /* LEICA D-LUX 4\00 */, "i8", ALLOC_NONE, 5580500);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0] /* Panasonic DMC-LX3\00 */, "i8", ALLOC_NONE, 5580516);
allocate([76,69,73,67,65,32,68,45,76,85,88,51,0] /* LEICA D-LUX3\00 */, "i8", ALLOC_NONE, 5580536);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0] /* Panasonic DMC-LX2\00 */, "i8", ALLOC_NONE, 5580552);
allocate([76,69,73,67,65,32,68,45,76,85,88,50,0] /* LEICA D-LUX2\00 */, "i8", ALLOC_NONE, 5580572);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0] /* Panasonic DMC-LX1\00 */, "i8", ALLOC_NONE, 5580588);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,50,0] /* LEICA DIGILUX 2\00 */, "i8", ALLOC_NONE, 5580608);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0] /* Panasonic DMC-LC1\00 */, "i8", ALLOC_NONE, 5580624);
allocate([37,115,82,71,66,78,101,117,116,114,97,108,0] /* %sRGBNeutral\00 */, "i8", ALLOC_NONE, 5580644);
allocate([108,106,112,101,103,95,115,116,97,114,116,40,41,0] /* ljpeg_start()\00 */, "i8", ALLOC_NONE, 5580660);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,51,0] /* LEICA DIGILUX 3\00 */, "i8", ALLOC_NONE, 5580676);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0] /* Panasonic DMC-L1\00 */, "i8", ALLOC_NONE, 5580692);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0] /* Panasonic DMC-L10\00 */, "i8", ALLOC_NONE, 5580712);
allocate([76,69,73,67,65,32,86,45,76,85,88,49,0] /* LEICA V-LUX1\00 */, "i8", ALLOC_NONE, 5580732);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0] /* Panasonic DMC-FZ50\0 */, "i8", ALLOC_NONE, 5580748);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0] /* Panasonic DMC-FZ4\00 */, "i8", ALLOC_NONE, 5580768);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0] /* Panasonic DMC-FZ3\00 */, "i8", ALLOC_NONE, 5580788);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0] /* Panasonic DMC-FZ30\0 */, "i8", ALLOC_NONE, 5580808);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0] /* Panasonic DMC-FZ28\0 */, "i8", ALLOC_NONE, 5580828);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0] /* Panasonic DMC-FZ18\0 */, "i8", ALLOC_NONE, 5580848);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0] /* WhiteBalanceCorrecti */, "i8", ALLOC_NONE, 5580868);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0] /* Panasonic DMC-FZ8\00 */, "i8", ALLOC_NONE, 5580892);
allocate([80,69,78,84,65,88,32,54,52,53,68,0] /* PENTAX 645D\00 */, "i8", ALLOC_NONE, 5580912);
allocate([80,69,78,84,65,88,32,75,45,55,0] /* PENTAX K-7\00 */, "i8", ALLOC_NONE, 5580924);
allocate([80,69,78,84,65,88,32,75,45,53,0] /* PENTAX K-5\00 */, "i8", ALLOC_NONE, 5580936);
allocate([80,69,78,84,65,88,32,75,45,53,32,73,73,0] /* PENTAX K-5 II\00 */, "i8", ALLOC_NONE, 5580948);
allocate([80,69,78,84,65,88,32,75,45,114,0] /* PENTAX K-r\00 */, "i8", ALLOC_NONE, 5580964);
allocate([80,69,78,84,65,88,32,75,45,120,0] /* PENTAX K-x\00 */, "i8", ALLOC_NONE, 5580976);
allocate([80,69,78,84,65,88,32,75,45,109,0] /* PENTAX K-m\00 */, "i8", ALLOC_NONE, 5580988);
allocate([80,69,78,84,65,88,32,75,50,48,48,48,0] /* PENTAX K2000\00 */, "i8", ALLOC_NONE, 5581000);
allocate([80,69,78,84,65,88,32,75,50,48,48,68,0] /* PENTAX K200D\00 */, "i8", ALLOC_NONE, 5581016);
allocate([37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0] /* %s: Invalid white ba */, "i8", ALLOC_NONE, 5581032);
allocate([80,69,78,84,65,88,32,75,50,48,68,0] /* PENTAX K20D\00 */, "i8", ALLOC_NONE, 5581064);
allocate([80,69,78,84,65,88,32,75,49,0] /* PENTAX K1\00 */, "i8", ALLOC_NONE, 5581076);
allocate([80,69,78,84,65,88,32,75,49,48,68,0] /* PENTAX K10D\00 */, "i8", ALLOC_NONE, 5581088);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,0] /* PENTAX _ist D\00 */, "i8", ALLOC_NONE, 5581100);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,0] /* PENTAX _ist DS\00 */, "i8", ALLOC_NONE, 5581116);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,50,0] /* PENTAX _ist DS2\00 */, "i8", ALLOC_NONE, 5581132);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,0] /* PENTAX _ist DL\00 */, "i8", ALLOC_NONE, 5581148);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,50,0] /* PENTAX _ist DL2\00 */, "i8", ALLOC_NONE, 5581164);
allocate([79,76,89,77,80,85,83,32,88,90,45,50,0] /* OLYMPUS XZ-2\00 */, "i8", ALLOC_NONE, 5581180);
allocate([79,76,89,77,80,85,83,32,88,90,45,49,0] /* OLYMPUS XZ-1\00 */, "i8", ALLOC_NONE, 5581196);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0] /* WhiteBalanceIllumina */, "i8", ALLOC_NONE, 5581212);
allocate([79,76,89,77,80,85,83,32,83,80,53,55,48,85,90,0] /* OLYMPUS SP570UZ\00 */, "i8", ALLOC_NONE, 5581236);
allocate([79,76,89,77,80,85,83,32,83,80,53,54,48,85,90,0] /* OLYMPUS SP560UZ\00 */, "i8", ALLOC_NONE, 5581252);
allocate([79,76,89,77,80,85,83,32,83,80,53,53,48,85,90,0] /* OLYMPUS SP550UZ\00 */, "i8", ALLOC_NONE, 5581268);
allocate([79,76,89,77,80,85,83,32,83,80,53,49,48,85,90,0] /* OLYMPUS SP510UZ\00 */, "i8", ALLOC_NONE, 5581284);
allocate([79,76,89,77,80,85,83,32,83,80,53,48,48,85,90,0] /* OLYMPUS SP500UZ\00 */, "i8", ALLOC_NONE, 5581300);
allocate([79,76,89,77,80,85,83,32,83,80,51,0] /* OLYMPUS SP3\00 */, "i8", ALLOC_NONE, 5581316);
allocate([79,76,89,77,80,85,83,32,83,80,51,53,48,0] /* OLYMPUS SP350\00 */, "i8", ALLOC_NONE, 5581328);
allocate([79,76,89,77,80,85,83,32,69,45,77,53,0] /* OLYMPUS E-M5\00 */, "i8", ALLOC_NONE, 5581344);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,50,0] /* OLYMPUS E-PM2\00 */, "i8", ALLOC_NONE, 5581360);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,49,0] /* OLYMPUS E-PM1\00 */, "i8", ALLOC_NONE, 5581376);
allocate([68,97,114,107,83,104,105,101,108,100,84,111,112,0] /* DarkShieldTop\00 */, "i8", ALLOC_NONE, 5581392);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,53,0] /* OLYMPUS E-PL5\00 */, "i8", ALLOC_NONE, 5581408);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,51,0] /* OLYMPUS E-PL3\00 */, "i8", ALLOC_NONE, 5581424);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,50,0] /* OLYMPUS E-PL2\00 */, "i8", ALLOC_NONE, 5581440);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,0] /* OLYMPUS E-PL1\00 */, "i8", ALLOC_NONE, 5581456);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,115,0] /* OLYMPUS E-PL1s\00 */, "i8", ALLOC_NONE, 5581472);
allocate([79,76,89,77,80,85,83,32,69,45,80,51,0] /* OLYMPUS E-P3\00 */, "i8", ALLOC_NONE, 5581488);
allocate([79,76,89,77,80,85,83,32,69,45,80,50,0] /* OLYMPUS E-P2\00 */, "i8", ALLOC_NONE, 5581504);
allocate([79,76,89,77,80,85,83,32,69,45,80,49,0] /* OLYMPUS E-P1\00 */, "i8", ALLOC_NONE, 5581520);
allocate([79,76,89,77,80,85,83,32,69,45,54,50,48,0] /* OLYMPUS E-620\00 */, "i8", ALLOC_NONE, 5581536);
allocate([79,76,89,77,80,85,83,32,69,45,54,48,48,0] /* OLYMPUS E-600\00 */, "i8", ALLOC_NONE, 5581552);
allocate([68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0] /* DarkShieldBottom\00 */, "i8", ALLOC_NONE, 5581568);
allocate([79,76,89,77,80,85,83,32,69,45,53,0] /* OLYMPUS E-5\00 */, "i8", ALLOC_NONE, 5581588);
allocate([79,76,89,77,80,85,83,32,69,45,53,50,48,0] /* OLYMPUS E-520\00 */, "i8", ALLOC_NONE, 5581600);
allocate([79,76,89,77,80,85,83,32,69,45,53,49,48,0] /* OLYMPUS E-510\00 */, "i8", ALLOC_NONE, 5581616);
allocate([79,76,89,77,80,85,83,32,69,45,53,48,48,0] /* OLYMPUS E-500\00 */, "i8", ALLOC_NONE, 5581632);
allocate([79,76,89,77,80,85,83,32,69,45,52,53,48,0] /* OLYMPUS E-450\00 */, "i8", ALLOC_NONE, 5581648);
allocate([79,76,89,77,80,85,83,32,69,45,52,50,48,0] /* OLYMPUS E-420\00 */, "i8", ALLOC_NONE, 5581664);
allocate([79,76,89,77,80,85,83,32,69,45,52,49,48,0] /* OLYMPUS E-410\00 */, "i8", ALLOC_NONE, 5581680);
allocate([79,76,89,77,80,85,83,32,69,45,52,48,48,0] /* OLYMPUS E-400\00 */, "i8", ALLOC_NONE, 5581696);
allocate([79,76,89,77,80,85,83,32,69,45,51,0] /* OLYMPUS E-3\00 */, "i8", ALLOC_NONE, 5581712);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,0] /* OLYMPUS E-30\00 */, "i8", ALLOC_NONE, 5581724);
allocate([68,97,114,107,68,114,105,102,116,0] /* DarkDrift\00 */, "i8", ALLOC_NONE, 5581740);
allocate([79,76,89,77,80,85,83,32,69,45,51,51,48,0] /* OLYMPUS E-330\00 */, "i8", ALLOC_NONE, 5581752);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,48,0] /* OLYMPUS E-300\00 */, "i8", ALLOC_NONE, 5581768);
allocate([79,76,89,77,80,85,83,32,69,45,50,48,0] /* OLYMPUS E-20\00 */, "i8", ALLOC_NONE, 5581784);
allocate([79,76,89,77,80,85,83,32,69,45,49,0] /* OLYMPUS E-1\00 */, "i8", ALLOC_NONE, 5581800);
allocate([79,76,89,77,80,85,83,32,69,45,49,48,0] /* OLYMPUS E-10\00 */, "i8", ALLOC_NONE, 5581812);
allocate([79,76,89,77,80,85,83,32,67,56,48,0] /* OLYMPUS C80\00 */, "i8", ALLOC_NONE, 5581828);
allocate([79,76,89,77,80,85,83,32,67,55,48,0] /* OLYMPUS C70\00 */, "i8", ALLOC_NONE, 5581840);
allocate([79,76,89,77,80,85,83,32,67,55,48,55,48,0] /* OLYMPUS C7070\00 */, "i8", ALLOC_NONE, 5581852);
allocate([79,76,89,77,80,85,83,32,67,53,48,54,48,0] /* OLYMPUS C5060\00 */, "i8", ALLOC_NONE, 5581868);
allocate([79,76,89,77,80,85,83,32,67,53,48,53,48,0] /* OLYMPUS C5050\00 */, "i8", ALLOC_NONE, 5581884);
allocate([67,111,108,117,109,110,70,105,108,116,101,114,0] /* ColumnFilter\00 */, "i8", ALLOC_NONE, 5581900);
allocate([78,73,75,79,78,32,49,32,0] /* NIKON 1 \00 */, "i8", ALLOC_NONE, 5581916);
allocate([78,73,75,79,78,32,49,32,86,50,0] /* NIKON 1 V2\00 */, "i8", ALLOC_NONE, 5581928);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* NIKON COOLPIX P7700\ */, "i8", ALLOC_NONE, 5581940);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0] /* NIKON COOLPIX P7100\ */, "i8", ALLOC_NONE, 5581960);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0] /* NIKON COOLPIX P7000\ */, "i8", ALLOC_NONE, 5581980);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0] /* NIKON COOLPIX P6000\ */, "i8", ALLOC_NONE, 5582000);
allocate([78,73,75,79,78,32,69,56,56,48,48,0] /* NIKON E8800\00 */, "i8", ALLOC_NONE, 5582020);
allocate([78,73,75,79,78,32,69,56,55,48,48,0] /* NIKON E8700\00 */, "i8", ALLOC_NONE, 5582032);
allocate([78,73,75,79,78,32,69,56,52,48,48,0] /* NIKON E8400\00 */, "i8", ALLOC_NONE, 5582044);
allocate([78,73,75,79,78,32,69,53,55,48,48,0] /* NIKON E5700\00 */, "i8", ALLOC_NONE, 5582056);
allocate([67,111,108,111,114,68,81,67,97,109,82,71,66,0] /* ColorDQCamRGB\00 */, "i8", ALLOC_NONE, 5582068);
allocate([78,73,75,79,78,32,69,53,52,48,48,0] /* NIKON E5400\00 */, "i8", ALLOC_NONE, 5582084);
allocate([78,73,75,79,78,32,69,53,48,48,48,0] /* NIKON E5000\00 */, "i8", ALLOC_NONE, 5582096);
allocate([78,73,75,79,78,32,69,52,53,48,48,0] /* NIKON E4500\00 */, "i8", ALLOC_NONE, 5582108);
allocate([78,73,75,79,78,32,69,52,51,48,48,0] /* NIKON E4300\00 */, "i8", ALLOC_NONE, 5582120);
allocate([78,73,75,79,78,32,69,51,50,48,48,0] /* NIKON E3200\00 */, "i8", ALLOC_NONE, 5582132);
allocate([78,73,75,79,78,32,69,50,53,48,48,0] /* NIKON E2500\00 */, "i8", ALLOC_NONE, 5582144);
allocate([78,73,75,79,78,32,69,50,49,48,48,0] /* NIKON E2100\00 */, "i8", ALLOC_NONE, 5582156);
allocate([78,73,75,79,78,32,69,57,57,53,0] /* NIKON E995\00 */, "i8", ALLOC_NONE, 5582168);
allocate([78,73,75,79,78,32,69,57,53,48,0] /* NIKON E950\00 */, "i8", ALLOC_NONE, 5582180);
allocate([78,73,75,79,78,32,68,57,48,0] /* NIKON D90\00 */, "i8", ALLOC_NONE, 5582192);
allocate([67,111,108,111,114,68,81,0] /* ColorDQ\00 */, "i8", ALLOC_NONE, 5582204);
allocate([78,73,75,79,78,32,68,56,48,0] /* NIKON D80\00 */, "i8", ALLOC_NONE, 5582212);
allocate([78,73,75,79,78,32,68,56,48,48,0] /* NIKON D800\00 */, "i8", ALLOC_NONE, 5582224);
allocate([78,73,75,79,78,32,68,55,48,0] /* NIKON D70\00 */, "i8", ALLOC_NONE, 5582236);
allocate([78,73,75,79,78,32,68,55,48,48,0] /* NIKON D700\00 */, "i8", ALLOC_NONE, 5582248);
allocate([78,73,75,79,78,32,68,55,48,48,48,0] /* NIKON D7000\00 */, "i8", ALLOC_NONE, 5582260);
allocate([78,73,75,79,78,32,68,54,48,0] /* NIKON D60\00 */, "i8", ALLOC_NONE, 5582272);
allocate([78,73,75,79,78,32,68,54,48,48,0] /* NIKON D600\00 */, "i8", ALLOC_NONE, 5582284);
allocate([78,73,75,79,78,32,68,53,48,0] /* NIKON D50\00 */, "i8", ALLOC_NONE, 5582296);
allocate([78,73,75,79,78,32,68,53,49,48,48,0] /* NIKON D5100\00 */, "i8", ALLOC_NONE, 5582308);
allocate([78,73,75,79,78,32,68,53,48,48,48,0] /* NIKON D5000\00 */, "i8", ALLOC_NONE, 5582320);
allocate([73,110,99,108,117,100,101,66,108,111,99,107,115,0] /* IncludeBlocks\00 */, "i8", ALLOC_NONE, 5582332);
allocate([109,97,107,101,95,100,101,99,111,100,101,114,40,41,0] /* make_decoder()\00 */, "i8", ALLOC_NONE, 5582348);
allocate([78,73,75,79,78,32,68,52,0] /* NIKON D4\00 */, "i8", ALLOC_NONE, 5582364);
allocate([78,73,75,79,78,32,68,52,48,0] /* NIKON D40\00 */, "i8", ALLOC_NONE, 5582376);
allocate([78,73,75,79,78,32,68,52,48,88,0] /* NIKON D40X\00 */, "i8", ALLOC_NONE, 5582388);
allocate([78,73,75,79,78,32,68,51,0] /* NIKON D3\00 */, "i8", ALLOC_NONE, 5582400);
allocate([78,73,75,79,78,32,68,51,83,0] /* NIKON D3S\00 */, "i8", ALLOC_NONE, 5582412);
allocate([78,73,75,79,78,32,68,51,88,0] /* NIKON D3X\00 */, "i8", ALLOC_NONE, 5582424);
allocate([78,73,75,79,78,32,68,51,48,48,0] /* NIKON D300\00 */, "i8", ALLOC_NONE, 5582436);
allocate([78,73,75,79,78,32,68,51,50,48,48,0] /* NIKON D3200\00 */, "i8", ALLOC_NONE, 5582448);
allocate([78,73,75,79,78,32,68,51,49,48,48,0] /* NIKON D3100\00 */, "i8", ALLOC_NONE, 5582460);
allocate([78,73,75,79,78,32,68,51,48,48,48,0] /* NIKON D3000\00 */, "i8", ALLOC_NONE, 5582472);
allocate([67,104,114,111,109,97,68,81,0] /* ChromaDQ\00 */, "i8", ALLOC_NONE, 5582484);
allocate([78,73,75,79,78,32,68,50,88,0] /* NIKON D2X\00 */, "i8", ALLOC_NONE, 5582496);
allocate([78,73,75,79,78,32,68,50,72,0] /* NIKON D2H\00 */, "i8", ALLOC_NONE, 5582508);
allocate([78,73,75,79,78,32,68,50,48,48,0] /* NIKON D200\00 */, "i8", ALLOC_NONE, 5582520);
allocate([78,73,75,79,78,32,68,49,0] /* NIKON D1\00 */, "i8", ALLOC_NONE, 5582532);
allocate([78,73,75,79,78,32,68,49,88,0] /* NIKON D1X\00 */, "i8", ALLOC_NONE, 5582544);
allocate([78,73,75,79,78,32,68,49,72,0] /* NIKON D1H\00 */, "i8", ALLOC_NONE, 5582556);
allocate([78,73,75,79,78,32,68,49,48,48,0] /* NIKON D100\00 */, "i8", ALLOC_NONE, 5582568);
allocate([77,79,84,79,82,79,76,65,32,80,73,88,76,0] /* MOTOROLA PIXL\00 */, "i8", ALLOC_NONE, 5582580);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,55,0] /* MINOLTA DYNAX 7\00 */, "i8", ALLOC_NONE, 5582596);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,53,0] /* MINOLTA DYNAX 5\00 */, "i8", ALLOC_NONE, 5582612);
allocate([65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0] /* ActiveImageArea\00 */, "i8", ALLOC_NONE, 5582628);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0] /* Minolta DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5582644);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0] /* Minolta DiMAGE A2\00 */, "i8", ALLOC_NONE, 5582664);
allocate([77,73,78,79,76,84,65,32,68,105,77,65,71,69,32,65,50,48,48,0] /* MINOLTA DiMAGE A200\ */, "i8", ALLOC_NONE, 5582684);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0] /* Minolta DiMAGE A1\00 */, "i8", ALLOC_NONE, 5582704);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0] /* Minolta DiMAGE 7\00 */, "i8", ALLOC_NONE, 5582724);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0] /* Minolta DiMAGE 7Hi\0 */, "i8", ALLOC_NONE, 5582744);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0] /* Minolta DiMAGE 5\00 */, "i8", ALLOC_NONE, 5582764);
allocate([77,105,99,114,111,110,32,50,48,49,48,0] /* Micron 2010\00 */, "i8", ALLOC_NONE, 5582784);
allocate([77,97,109,105,121,97,32,90,68,0] /* Mamiya ZD\00 */, "i8", ALLOC_NONE, 5582796);
allocate([76,101,97,102,32,65,112,116,117,115,32,55,53,0] /* Leaf Aptus 75\00 */, "i8", ALLOC_NONE, 5582808);
allocate([75,101,101,112,73,109,97,103,101,65,114,101,97,0] /* KeepImageArea\00 */, "i8", ALLOC_NONE, 5582824);
allocate([76,101,97,102,32,65,112,116,117,115,32,54,53,0] /* Leaf Aptus 65\00 */, "i8", ALLOC_NONE, 5582840);
allocate([76,101,97,102,32,65,112,116,117,115,32,53,52,83,0] /* Leaf Aptus 54S\00 */, "i8", ALLOC_NONE, 5582856);
allocate([76,101,97,102,32,86,97,108,101,111,32,54,0] /* Leaf Valeo 6\00 */, "i8", ALLOC_NONE, 5582872);
allocate([76,101,97,102,32,67,77,111,115,116,0] /* Leaf CMost\00 */, "i8", ALLOC_NONE, 5582888);
allocate([75,79,68,65,75,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0] /* KODAK EASYSHARE Z101 */, "i8", ALLOC_NONE, 5582900);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0] /* KODAK EasyShare Z990 */, "i8", ALLOC_NONE, 5582924);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0] /* KODAK EasyShare Z981 */, "i8", ALLOC_NONE, 5582948);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0] /* KODAK EasyShare Z980 */, "i8", ALLOC_NONE, 5582972);
allocate([75,79,68,65,75,32,80,56,56,48,0] /* KODAK P880\00 */, "i8", ALLOC_NONE, 5582996);
allocate([75,79,68,65,75,32,80,56,53,48,0] /* KODAK P850\00 */, "i8", ALLOC_NONE, 5583008);
allocate([83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0] /* SaturationLevel\00 */, "i8", ALLOC_NONE, 5583020);
allocate([75,79,68,65,75,32,80,55,49,50,0] /* KODAK P712\00 */, "i8", ALLOC_NONE, 5583036);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,0] /* Kodak ProBack\00 */, "i8", ALLOC_NONE, 5583048);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0] /* Kodak ProBack645\00 */, "i8", ALLOC_NONE, 5583064);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0] /* Kodak DCS Pro 14\00 */, "i8", ALLOC_NONE, 5583084);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0] /* Kodak DCS Pro 14nx\0 */, "i8", ALLOC_NONE, 5583104);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0] /* Kodak DCS Pro SLR\00 */, "i8", ALLOC_NONE, 5583124);
allocate([75,111,100,97,107,32,68,67,83,55,54,48,67,0] /* Kodak DCS760C\00 */, "i8", ALLOC_NONE, 5583144);
allocate([75,111,100,97,107,32,68,67,83,55,50,48,88,0] /* Kodak DCS720X\00 */, "i8", ALLOC_NONE, 5583160);
allocate([75,111,100,97,107,32,68,67,83,54,54,48,67,0] /* Kodak DCS660C\00 */, "i8", ALLOC_NONE, 5583176);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,88,0] /* Kodak DCS620X\00 */, "i8", ALLOC_NONE, 5583192);
allocate([80,111,115,116,80,111,108,121,77,97,116,114,105,120,0] /* PostPolyMatrix\00 */, "i8", ALLOC_NONE, 5583208);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,67,0] /* Kodak DCS620C\00 */, "i8", ALLOC_NONE, 5583224);
allocate([75,111,100,97,107,32,68,67,83,53,54,48,67,0] /* Kodak DCS560C\00 */, "i8", ALLOC_NONE, 5583240);
allocate([75,111,100,97,107,32,68,67,83,53,50,48,67,0] /* Kodak DCS520C\00 */, "i8", ALLOC_NONE, 5583256);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,51,66,0] /* KODAK EOSDCS3B\00 */, "i8", ALLOC_NONE, 5583272);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,49,0] /* KODAK EOSDCS1\00 */, "i8", ALLOC_NONE, 5583288);
allocate([75,79,68,65,75,32,68,67,83,52,54,48,0] /* KODAK DCS460\00 */, "i8", ALLOC_NONE, 5583304);
allocate([75,79,68,65,75,32,68,67,83,52,50,48,0] /* KODAK DCS420\00 */, "i8", ALLOC_NONE, 5583320);
allocate([75,111,100,97,107,32,68,67,83,51,51,48,67,0] /* Kodak DCS330C\00 */, "i8", ALLOC_NONE, 5583336);
allocate([75,111,100,97,107,32,68,67,83,51,49,53,67,0] /* Kodak DCS315C\00 */, "i8", ALLOC_NONE, 5583352);
allocate([75,79,68,65,75,32,78,67,50,48,48,48,0] /* KODAK NC2000\00 */, "i8", ALLOC_NONE, 5583368);
allocate([68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0] /* DarkShieldColRange\0 */, "i8", ALLOC_NONE, 5583384);
allocate([73,109,97,99,111,110,32,73,120,112,114,101,115,115,0] /* Imacon Ixpress\00 */, "i8", ALLOC_NONE, 5583404);
allocate([70,85,74,73,70,73,76,77,32,88,45,83,49,0] /* FUJIFILM X-S1\00 */, "i8", ALLOC_NONE, 5583420);
allocate([70,85,74,73,70,73,76,77,32,88,70,49,0] /* FUJIFILM XF1\00 */, "i8", ALLOC_NONE, 5583436);
allocate([70,85,74,73,70,73,76,77,32,88,45,69,49,0] /* FUJIFILM X-E1\00 */, "i8", ALLOC_NONE, 5583452);
allocate([70,85,74,73,70,73,76,77,32,88,45,80,114,111,49,0] /* FUJIFILM X-Pro1\00 */, "i8", ALLOC_NONE, 5583468);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,0] /* FUJIFILM X10\00 */, "i8", ALLOC_NONE, 5583484);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,48,0] /* FUJIFILM X100\00 */, "i8", ALLOC_NONE, 5583500);
allocate([70,85,74,73,70,73,76,77,32,72,83,51,0] /* FUJIFILM HS3\00 */, "i8", ALLOC_NONE, 5583516);
allocate([70,85,74,73,70,73,76,77,32,72,83,50,48,69,88,82,0] /* FUJIFILM HS20EXR\00 */, "i8", ALLOC_NONE, 5583532);
allocate([70,85,74,73,70,73,76,77,32,72,83,49,48,32,72,83,49,49,0] /* FUJIFILM HS10 HS11\0 */, "i8", ALLOC_NONE, 5583552);
allocate([70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Foveon interpolation */, "i8", ALLOC_NONE, 5583572);
allocate([70,85,74,73,70,73,76,77,32,73,83,32,80,114,111,0] /* FUJIFILM IS Pro\00 */, "i8", ALLOC_NONE, 5583600);
allocate([70,85,74,73,70,73,76,77,32,73,83,45,49,0] /* FUJIFILM IS-1\00 */, "i8", ALLOC_NONE, 5583616);
allocate([70,85,74,73,70,73,76,77,32,83,57,54,48,48,0] /* FUJIFILM S9600\00 */, "i8", ALLOC_NONE, 5583632);
allocate([70,85,74,73,70,73,76,77,32,83,57,49,48,48,0] /* FUJIFILM S9100\00 */, "i8", ALLOC_NONE, 5583648);
allocate([70,85,74,73,70,73,76,77,32,83,57,53,48,48,0] /* FUJIFILM S9500\00 */, "i8", ALLOC_NONE, 5583664);
allocate([70,85,74,73,70,73,76,77,32,83,57,48,48,48,0] /* FUJIFILM S9000\00 */, "i8", ALLOC_NONE, 5583680);
allocate([70,85,74,73,70,73,76,77,32,83,55,48,48,48,0] /* FUJIFILM S7000\00 */, "i8", ALLOC_NONE, 5583696);
allocate([70,85,74,73,70,73,76,77,32,83,54,0] /* FUJIFILM S6\00 */, "i8", ALLOC_NONE, 5583712);
allocate([70,85,74,73,70,73,76,77,32,83,53,54,48,48,0] /* FUJIFILM S5600\00 */, "i8", ALLOC_NONE, 5583724);
allocate([70,85,74,73,70,73,76,77,32,83,53,50,48,48,0] /* FUJIFILM S5200\00 */, "i8", ALLOC_NONE, 5583740);
allocate([102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0] /* foveon_make_curve()\ */, "i8", ALLOC_NONE, 5583756);
allocate([70,85,74,73,70,73,76,77,32,83,53,53,48,48,0] /* FUJIFILM S5500\00 */, "i8", ALLOC_NONE, 5583776);
allocate([70,85,74,73,70,73,76,77,32,83,53,49,48,48,0] /* FUJIFILM S5100\00 */, "i8", ALLOC_NONE, 5583792);
allocate([70,85,74,73,70,73,76,77,32,83,53,48,48,48,0] /* FUJIFILM S5000\00 */, "i8", ALLOC_NONE, 5583808);
allocate([70,85,74,73,70,73,76,77,32,83,53,80,114,111,0] /* FUJIFILM S5Pro\00 */, "i8", ALLOC_NONE, 5583824);
allocate([70,85,74,73,70,73,76,77,32,83,51,80,114,111,0] /* FUJIFILM S3Pro\00 */, "i8", ALLOC_NONE, 5583840);
allocate([70,85,74,73,70,73,76,77,32,83,50,80,114,111,0] /* FUJIFILM S2Pro\00 */, "i8", ALLOC_NONE, 5583856);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,80,114,111,0] /* FUJIFILM S20Pro\00 */, "i8", ALLOC_NONE, 5583872);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,48,69,88,82,0] /* FUJIFILM S200EXR\00 */, "i8", ALLOC_NONE, 5583888);
allocate([70,85,74,73,70,73,76,77,32,83,49,48,48,70,83,0] /* FUJIFILM S100FS\00 */, "i8", ALLOC_NONE, 5583908);
allocate([70,85,74,73,70,73,76,77,32,70,56,0] /* FUJIFILM F8\00 */, "i8", ALLOC_NONE, 5583924);
allocate([37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0] /* %s: \22%s\22 matrix  */, "i8", ALLOC_NONE, 5583936);
allocate([70,85,74,73,70,73,76,77,32,70,55,0] /* FUJIFILM F7\00 */, "i8", ALLOC_NONE, 5583964);
allocate([70,85,74,73,70,73,76,77,32,70,55,55,0] /* FUJIFILM F77\00 */, "i8", ALLOC_NONE, 5583976);
allocate([70,85,74,73,70,73,76,77,32,70,54,0] /* FUJIFILM F6\00 */, "i8", ALLOC_NONE, 5583992);
allocate([70,85,74,73,70,73,76,77,32,70,53,0] /* FUJIFILM F5\00 */, "i8", ALLOC_NONE, 5584004);
allocate([70,85,74,73,70,73,76,77,32,69,57,48,48,0] /* FUJIFILM E900\00 */, "i8", ALLOC_NONE, 5584016);
allocate([70,85,74,73,70,73,76,77,32,69,53,53,48,0] /* FUJIFILM E550\00 */, "i8", ALLOC_NONE, 5584032);
allocate([69,80,83,79,78,32,82,45,68,49,0] /* EPSON R-D1\00 */, "i8", ALLOC_NONE, 5584048);
allocate([67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0] /* Contax N Digital\00 */, "i8", ALLOC_NONE, 5584060);
allocate([67,73,78,69,32,54,54,48,0] /* CINE 660\00 */, "i8", ALLOC_NONE, 5584080);
allocate([67,73,78,69,32,54,53,48,0] /* CINE 650\00 */, "i8", ALLOC_NONE, 5584092);
allocate([102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0] /* foveon_camf_matrix() */, "i8", ALLOC_NONE, 5584104);
allocate([67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0] /* Corrupt data near 0x */, "i8", ALLOC_NONE, 5584128);
allocate([67,65,83,73,79,32,69,88,45,90,49,48,0] /* CASIO EX-Z10\00 */, "i8", ALLOC_NONE, 5584156);
allocate([67,65,83,73,79,32,69,88,45,90,55,53,48,0] /* CASIO EX-Z750\00 */, "i8", ALLOC_NONE, 5584172);
allocate([67,65,83,73,79,32,69,88,45,83,50,48,0] /* CASIO EX-S20\00 */, "i8", ALLOC_NONE, 5584188);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0] /* Canon PowerShot SX22 */, "i8", ALLOC_NONE, 5584204);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* Canon PowerShot SX11 */, "i8", ALLOC_NONE, 5584228);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* Canon PowerShot S3 I */, "i8", ALLOC_NONE, 5584256);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0] /* Canon PowerShot A720 */, "i8", ALLOC_NONE, 5584280);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* Canon PowerShot A650 */, "i8", ALLOC_NONE, 5584304);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* Canon PowerShot A640 */, "i8", ALLOC_NONE, 5584328);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* Canon PowerShot A630 */, "i8", ALLOC_NONE, 5584352);
allocate([67,77,98,0] /* CMb\00 */, "i8", ALLOC_NONE, 5584376);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* Canon PowerShot A620 */, "i8", ALLOC_NONE, 5584380);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* Canon PowerShot A610 */, "i8", ALLOC_NONE, 5584404);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* Canon PowerShot A470 */, "i8", ALLOC_NONE, 5584428);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0] /* Canon PowerShot SX50 */, "i8", ALLOC_NONE, 5584452);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0] /* Canon PowerShot SX1  */, "i8", ALLOC_NONE, 5584476);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0] /* Canon PowerShot S110 */, "i8", ALLOC_NONE, 5584500);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0] /* Canon PowerShot S100 */, "i8", ALLOC_NONE, 5584524);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0] /* Canon PowerShot S95\ */, "i8", ALLOC_NONE, 5584548);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0] /* Canon PowerShot S90\ */, "i8", ALLOC_NONE, 5584568);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0] /* Canon PowerShot S70\ */, "i8", ALLOC_NONE, 5584588);
allocate([37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0] /* %s has unknown CAMF  */, "i8", ALLOC_NONE, 5584608);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0] /* Canon PowerShot S60\ */, "i8", ALLOC_NONE, 5584640);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0] /* Canon PowerShot S50\ */, "i8", ALLOC_NONE, 5584660);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0] /* Canon PowerShot S45\ */, "i8", ALLOC_NONE, 5584680);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0] /* Canon PowerShot S40\ */, "i8", ALLOC_NONE, 5584700);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0] /* Canon PowerShot S30\ */, "i8", ALLOC_NONE, 5584720);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0] /* Canon PowerShot Pro9 */, "i8", ALLOC_NONE, 5584740);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* Canon PowerShot Pro7 */, "i8", ALLOC_NONE, 5584764);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0] /* Canon PowerShot Pro1 */, "i8", ALLOC_NONE, 5584788);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0] /* Canon PowerShot G9\0 */, "i8", ALLOC_NONE, 5584812);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0] /* Canon PowerShot G6\0 */, "i8", ALLOC_NONE, 5584832);
allocate([102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0] /* foveon_load_camf()\0 */, "i8", ALLOC_NONE, 5584852);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0] /* Canon PowerShot G5\0 */, "i8", ALLOC_NONE, 5584872);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0] /* Canon PowerShot G3\0 */, "i8", ALLOC_NONE, 5584892);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0] /* Canon PowerShot G2\0 */, "i8", ALLOC_NONE, 5584912);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0] /* Canon PowerShot G1\0 */, "i8", ALLOC_NONE, 5584932);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0] /* Canon PowerShot G1 X */, "i8", ALLOC_NONE, 5584952);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0] /* Canon PowerShot G15\ */, "i8", ALLOC_NONE, 5584976);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0] /* Canon PowerShot G12\ */, "i8", ALLOC_NONE, 5584996);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0] /* Canon PowerShot G11\ */, "i8", ALLOC_NONE, 5585016);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0] /* Canon PowerShot G10\ */, "i8", ALLOC_NONE, 5585036);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0] /* Canon PowerShot A5\0 */, "i8", ALLOC_NONE, 5585056);
allocate([102,111,118,101,111,110,95,116,104,117,109,98,40,41,0] /* foveon_thumb()\00 */, "i8", ALLOC_NONE, 5585076);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* Canon PowerShot A50\ */, "i8", ALLOC_NONE, 5585092);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* Canon PowerShot A530 */, "i8", ALLOC_NONE, 5585112);
allocate([67,97,110,111,110,32,69,79,83,0] /* Canon EOS\00 */, "i8", ALLOC_NONE, 5585136);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,0] /* Canon EOS-1D\00 */, "i8", ALLOC_NONE, 5585148);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,88,0] /* Canon EOS-1D X\00 */, "i8", ALLOC_NONE, 5585164);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,83,0] /* Canon EOS-1DS\00 */, "i8", ALLOC_NONE, 5585180);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585196);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585220);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585244);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0] /* Canon EOS-1D Mark IV */, "i8", ALLOC_NONE, 5585268);
allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0] /* %s: decoder table ov */, "i8", ALLOC_NONE, 5585292);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585320);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585344);
allocate([67,97,110,111,110,32,69,79,83,32,77,0] /* Canon EOS M\00 */, "i8", ALLOC_NONE, 5585368);
allocate([67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0] /* Canon EOS 1100D\00 */, "i8", ALLOC_NONE, 5585380);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0] /* Canon EOS 1000D\00 */, "i8", ALLOC_NONE, 5585396);
allocate([67,97,110,111,110,32,69,79,83,32,54,53,48,68,0] /* Canon EOS 650D\00 */, "i8", ALLOC_NONE, 5585412);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,48,68,0] /* Canon EOS 600D\00 */, "i8", ALLOC_NONE, 5585428);
allocate([67,97,110,111,110,32,69,79,83,32,53,53,48,68,0] /* Canon EOS 550D\00 */, "i8", ALLOC_NONE, 5585444);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,48,68,0] /* Canon EOS 500D\00 */, "i8", ALLOC_NONE, 5585460);
allocate([67,97,110,111,110,32,69,79,83,32,52,53,48,68,0] /* Canon EOS 450D\00 */, "i8", ALLOC_NONE, 5585476);
allocate([115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0] /* sony_arw2_load_raw() */, "i8", ALLOC_NONE, 5585492);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,48,68,0] /* Canon EOS 400D\00 */, "i8", ALLOC_NONE, 5585516);
allocate([67,97,110,111,110,32,69,79,83,32,51,53,48,68,0] /* Canon EOS 350D\00 */, "i8", ALLOC_NONE, 5585532);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,48,68,0] /* Canon EOS 300D\00 */, "i8", ALLOC_NONE, 5585548);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,68,0] /* Canon EOS 60D\00 */, "i8", ALLOC_NONE, 5585564);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,68,0] /* Canon EOS 50D\00 */, "i8", ALLOC_NONE, 5585580);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,68,0] /* Canon EOS 40D\00 */, "i8", ALLOC_NONE, 5585596);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,68,0] /* Canon EOS 30D\00 */, "i8", ALLOC_NONE, 5585612);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,0] /* Canon EOS 20D\00 */, "i8", ALLOC_NONE, 5585628);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,97,0] /* Canon EOS 20Da\00 */, "i8", ALLOC_NONE, 5585644);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,68,0] /* Canon EOS 10D\00 */, "i8", ALLOC_NONE, 5585660);
allocate([107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_262_load_raw() */, "i8", ALLOC_NONE, 5585676);
allocate([67,97,110,111,110,32,69,79,83,32,55,68,0] /* Canon EOS 7D\00 */, "i8", ALLOC_NONE, 5585700);
allocate([67,97,110,111,110,32,69,79,83,32,54,68,0] /* Canon EOS 6D\00 */, "i8", ALLOC_NONE, 5585716);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,0] /* Canon EOS 5D\00 */, "i8", ALLOC_NONE, 5585732);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585748);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585772);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,0] /* Canon EOS D60\00 */, "i8", ALLOC_NONE, 5585796);
allocate([67,97,110,111,110,32,69,79,83,32,68,51,48,0] /* Canon EOS D30\00 */, "i8", ALLOC_NONE, 5585812);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0] /* Canon EOS D6000\00 */, "i8", ALLOC_NONE, 5585828);
allocate([67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0] /* Canon EOS D2000\00 */, "i8", ALLOC_NONE, 5585844);
allocate([65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0] /* Apple QuickTake\00 */, "i8", ALLOC_NONE, 5585860);
allocate([107,111,100,97,107,95,121,114,103,98,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_yrgb_load_raw( */, "i8", ALLOC_NONE, 5585876);
allocate([65,71,70,65,80,72,79,84,79,32,68,67,45,56,51,51,109,0] /* AGFAPHOTO DC-833m\00 */, "i8", ALLOC_NONE, 5585900);
allocate([70,76,69,78,71,84,72,0] /* FLENGTH\00 */, "i8", ALLOC_NONE, 5585920);
allocate([65,80,69,82,84,85,82,69,0] /* APERTURE\00 */, "i8", ALLOC_NONE, 5585928);
allocate([69,88,80,84,73,77,69,0] /* EXPTIME\00 */, "i8", ALLOC_NONE, 5585940);
allocate([84,73,77,69,0] /* TIME\00 */, "i8", ALLOC_NONE, 5585948);
allocate([87,66,95,68,69,83,67,0] /* WB_DESC\00 */, "i8", ALLOC_NONE, 5585956);
allocate([67,65,77,77,79,68,69,76,0] /* CAMMODEL\00 */, "i8", ALLOC_NONE, 5585964);
allocate([67,65,77,77,65,78,85,70,0] /* CAMMANUF\00 */, "i8", ALLOC_NONE, 5585976);
allocate([73,83,79,0] /* ISO\00 */, "i8", ALLOC_NONE, 5585988);
allocate([37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0] /* %s: Tail is missing, */, "i8", ALLOC_NONE, 5585992);
allocate([101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0] /* eight_bit_load_raw() */, "i8", ALLOC_NONE, 5586036);
allocate([67,73,78,69,0] /* CINE\00 */, "i8", ALLOC_NONE, 5586060);
allocate([118,37,100,32,37,100,120,37,100,0] /* v%d %dx%d\00 */, "i8", ALLOC_NONE, 5586068);
allocate([83,77,97,76,0] /* SMaL\00 */, "i8", ALLOC_NONE, 5586080);
allocate([37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0] /* %_s %s %d %d:%d:%d % */, "i8", ALLOC_NONE, 5586088);
allocate([73,68,73,84,0] /* IDIT\00 */, "i8", ALLOC_NONE, 5586112);
allocate([110,99,116,103,0] /* nctg\00 */, "i8", ALLOC_NONE, 5586120);
allocate([76,73,83,84,0] /* LIST\00 */, "i8", ALLOC_NONE, 5586128);
allocate([82,73,70,70,0] /* RIFF\00 */, "i8", ALLOC_NONE, 5586136);
allocate([72,32,50,53,0] /* H 25\00 */, "i8", ALLOC_NONE, 5586144);
allocate([72,32,50,48,0] /* H 20\00 */, "i8", ALLOC_NONE, 5586152);
allocate([110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0] /* nokia_load_raw()\00 */, "i8", ALLOC_NONE, 5586160);
allocate([85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0] /* Unexpected end of fi */, "i8", ALLOC_NONE, 5586180);
allocate([72,32,49,48,0] /* H 10\00 */, "i8", ALLOC_NONE, 5586204);
allocate([76,105,103,104,116,80,104,97,115,101,0] /* LightPhase\00 */, "i8", ALLOC_NONE, 5586212);
allocate([80,104,97,115,101,32,79,110,101,0] /* Phase One\00 */, "i8", ALLOC_NONE, 5586224);
allocate([32,99,97,109,101,114,97,0] /*  camera\00 */, "i8", ALLOC_NONE, 5586236);
allocate([48,54,53,51,0] /* 0653\00 */, "i8", ALLOC_NONE, 5586244);
allocate([82,65,87,48,0] /* RAW0\00 */, "i8", ALLOC_NONE, 5586252);
allocate([84,72,85,77,66,0] /* THUMB\00 */, "i8", ALLOC_NONE, 5586260);
allocate([77,69,84,65,0] /* META\00 */, "i8", ALLOC_NONE, 5586268);
allocate([100,53,51,48,102,108,101,120,0] /* d530flex\00 */, "i8", ALLOC_NONE, 5586276);
allocate([82,111,108,108,101,105,0] /* Rollei\00 */, "i8", ALLOC_NONE, 5586288);
allocate([115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0] /* sinar_4shot_load_raw */, "i8", ALLOC_NONE, 5586296);
allocate([69,79,72,68,0] /* EOHD\00 */, "i8", ALLOC_NONE, 5586320);
allocate([84,89,32,0] /* TY \00 */, "i8", ALLOC_NONE, 5586328);
allocate([84,88,32,0] /* TX \00 */, "i8", ALLOC_NONE, 5586332);
allocate([89,32,32,0] /* Y  \00 */, "i8", ALLOC_NONE, 5586336);
allocate([88,32,32,0] /* X  \00 */, "i8", ALLOC_NONE, 5586340);
allocate([72,68,82,0] /* HDR\00 */, "i8", ALLOC_NONE, 5586344);
allocate([37,100,58,37,100,58,37,100,0] /* %d:%d:%d\00 */, "i8", ALLOC_NONE, 5586348);
allocate([84,73,77,0] /* TIM\00 */, "i8", ALLOC_NONE, 5586360);
allocate([68,65,84,0] /* DAT\00 */, "i8", ALLOC_NONE, 5586364);
allocate([48,49,51,52,53,54,55,48,50,56,0] /* 0134567028\00 */, "i8", ALLOC_NONE, 5586368);
allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0] /* leaf_hdr_load_raw()\ */, "i8", ALLOC_NONE, 5586380);
allocate([48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0] /* 023457000000006000\0 */, "i8", ALLOC_NONE, 5586400);
allocate([48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0] /* 01345:000000006008\0 */, "i8", ALLOC_NONE, 5586420);
allocate([48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0] /* 012346000000000000\0 */, "i8", ALLOC_NONE, 5586440);
allocate([80,114,111,49,0] /* Pro1\00 */, "i8", ALLOC_NONE, 5586460);
allocate([70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0] /* Failed to read metad */, "i8", ALLOC_NONE, 5586468);
allocate([82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Reading metadata fro */, "i8", ALLOC_NONE, 5586504);
allocate([46,74,80,71,0] /* .JPG\00 */, "i8", ALLOC_NONE, 5586536);
allocate([46,106,112,103,0] /* .jpg\00 */, "i8", ALLOC_NONE, 5586544);
allocate([112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0] /* parse_external_jpeg( */, "i8", ALLOC_NONE, 5586552);
allocate([68,105,77,65,71,69,32,65,50,48,48,0] /* DiMAGE A200\00 */, "i8", ALLOC_NONE, 5586576);
allocate([112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0] /* phase_one_load_raw_c */, "i8", ALLOC_NONE, 5586588);
allocate([68,69,66,85,71,32,82,65,87,0] /* DEBUG RAW\00 */, "i8", ALLOC_NONE, 5586612);
allocate([75,111,100,97,107,0] /* Kodak\00 */, "i8", ALLOC_NONE, 5586624);
allocate([75,79,68,65,75,0] /* KODAK\00 */, "i8", ALLOC_NONE, 5586632);
allocate([72,97,115,115,101,108,98,108,97,100,0] /* Hasselblad\00 */, "i8", ALLOC_NONE, 5586640);
allocate([37,102,32,37,102,32,37,102,0] /* %f %f %f\00 */, "i8", ALLOC_NONE, 5586652);
allocate([78,101,117,116,114,97,108,32,0] /* Neutral \00 */, "i8", ALLOC_NONE, 5586664);
allocate([73,120,112,114,101,115,115,32,37,100,45,77,112,0] /* Ixpress %d-Mp\00 */, "i8", ALLOC_NONE, 5586676);
allocate([73,109,97,99,111,110,0] /* Imacon\00 */, "i8", ALLOC_NONE, 5586692);
allocate([76,101,97,102,0] /* Leaf\00 */, "i8", ALLOC_NONE, 5586700);
allocate([112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0] /* phase_one_correct()\ */, "i8", ALLOC_NONE, 5586708);
allocate([77,65,84,82,73,88,0] /* MATRIX\00 */, "i8", ALLOC_NONE, 5586728);
allocate([3,4,5,0] /* \03\04\05\00 */, "i8", ALLOC_NONE, 5586736);
allocate([68,83,76,82,45,65,49,48,48,0] /* DSLR-A100\00 */, "i8", ALLOC_NONE, 5586740);
allocate([68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0] /* Digital Photo Profes */, "i8", ALLOC_NONE, 5586752);
allocate([78,105,107,111,110,32,83,99,97,110,0] /* Nikon Scan\00 */, "i8", ALLOC_NONE, 5586780);
allocate([66,105,98,98,108,101,0] /* Bibble\00 */, "i8", ALLOC_NONE, 5586792);
allocate([85,70,82,97,119,0] /* UFRaw\00 */, "i8", ALLOC_NONE, 5586800);
allocate([100,99,114,97,119,0] /* dcraw\00 */, "i8", ALLOC_NONE, 5586808);
allocate([80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0] /* Phase One correction */, "i8", ALLOC_NONE, 5586816);
allocate([65,100,111,98,101,0] /* Adobe\00 */, "i8", ALLOC_NONE, 5586844);
allocate([53,48,49,51,50,52,54,55,0] /* 50132467\00 */, "i8", ALLOC_NONE, 5586852);
allocate([148,97,22,73,0] /* \94a\16I\00 */, "i8", ALLOC_NONE, 5586864);
allocate([82,111,119,115,95,100,97,116,97,0] /* Rows_data\00 */, "i8", ALLOC_NONE, 5586872);
allocate([78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0] /* NeutObj_neutrals\00 */, "i8", ALLOC_NONE, 5586884);
allocate([73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0] /* ImgProf_rotation_ang */, "i8", ALLOC_NONE, 5586904);
allocate([67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0] /* CaptProf_mosaic_patt */, "i8", ALLOC_NONE, 5586928);
allocate([67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0] /* CaptProf_raw_data_ro */, "i8", ALLOC_NONE, 5586952);
allocate([67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0] /* CaptProf_number_of_p */, "i8", ALLOC_NONE, 5586980);
allocate([37,102,0] /* %f\00 */, "i8", ALLOC_NONE, 5587008);
allocate([112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0] /* phase_one_flat_field */, "i8", ALLOC_NONE, 5587012);
allocate([67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0] /* CaptProf_color_matri */, "i8", ALLOC_NONE, 5587036);
allocate([105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0] /* icc_camera_to_tone_m */, "i8", ALLOC_NONE, 5587060);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5587088);
allocate([83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0] /* ShootObj_back_type\0 */, "i8", ALLOC_NONE, 5587092);
allocate([105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0] /* icc_camera_profile\0 */, "i8", ALLOC_NONE, 5587112);
allocate([74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0] /* JPEG_preview_data\00 */, "i8", ALLOC_NONE, 5587132);
allocate([65,70,105,45,73,73,32,49,50,0] /* AFi-II 12\00 */, "i8", ALLOC_NONE, 5587152);
allocate([65,70,105,32,55,0] /* AFi 7\00 */, "i8", ALLOC_NONE, 5587164);
allocate([65,70,105,32,54,0] /* AFi 6\00 */, "i8", ALLOC_NONE, 5587172);
allocate([65,70,105,32,53,0] /* AFi 5\00 */, "i8", ALLOC_NONE, 5587180);
allocate([114,111,108,108,101,105,95,116,104,117,109,98,40,41,0] /* rollei_thumb()\00 */, "i8", ALLOC_NONE, 5587188);
allocate([65,112,116,117,115,32,55,53,83,0] /* Aptus 75S\00 */, "i8", ALLOC_NONE, 5587204);
allocate([65,112,116,117,115,32,54,53,83,0] /* Aptus 65S\00 */, "i8", ALLOC_NONE, 5587216);
allocate([65,112,116,117,115,32,53,52,83,0] /* Aptus 54S\00 */, "i8", ALLOC_NONE, 5587228);
allocate([65,112,116,117,115,32,54,53,0] /* Aptus 65\00 */, "i8", ALLOC_NONE, 5587240);
allocate([65,112,116,117,115,32,55,53,0] /* Aptus 75\00 */, "i8", ALLOC_NONE, 5587252);
allocate([65,112,116,117,115,32,50,50,0] /* Aptus 22\00 */, "i8", ALLOC_NONE, 5587264);
allocate([65,112,116,117,115,32,49,55,0] /* Aptus 17\00 */, "i8", ALLOC_NONE, 5587276);
allocate([86,97,108,101,111,32,49,55,0] /* Valeo 17\00 */, "i8", ALLOC_NONE, 5587288);
allocate([86,97,108,101,111,32,49,49,112,0] /* Valeo 11p\00 */, "i8", ALLOC_NONE, 5587300);
allocate([86,97,108,101,111,32,50,50,0] /* Valeo 22\00 */, "i8", ALLOC_NONE, 5587312);
allocate([80,37,100,10,37,100,32,37,100,10,50,53,53,10,0] /* P%d\0A%d %d\0A255\0A */, "i8", ALLOC_NONE, 5587324);
allocate([86,97,108,101,111,32,49,49,0] /* Valeo 11\00 */, "i8", ALLOC_NONE, 5587340);
allocate([86,97,108,101,111,32,54,0] /* Valeo 6\00 */, "i8", ALLOC_NONE, 5587352);
allocate([67,77,111,115,116,0] /* CMost\00 */, "i8", ALLOC_NONE, 5587360);
allocate([67,97,110,116,97,114,101,0] /* Cantare\00 */, "i8", ALLOC_NONE, 5587368);
allocate([86,111,108,97,114,101,0] /* Volare\00 */, "i8", ALLOC_NONE, 5587376);
allocate([68,67,66,50,0] /* DCB2\00 */, "i8", ALLOC_NONE, 5587384);
allocate(1, "i8", ALLOC_NONE, 5587392);
allocate([69,65,83,84,77,65,78,0] /* EASTMAN\00 */, "i8", ALLOC_NONE, 5587396);
allocate([37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0] /* %d:%d:%d %d:%d:%d\00 */, "i8", ALLOC_NONE, 5587404);
allocate([54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0] /* 66666_666;6A;:;55\00 */, "i8", ALLOC_NONE, 5587424);
allocate([108,97,121,101,114,95,116,104,117,109,98,40,41,0] /* layer_thumb()\00 */, "i8", ALLOC_NONE, 5587444);
allocate([48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0] /* 012347800000005896\0 */, "i8", ALLOC_NONE, 5587460);
allocate([80,69,78,84,65,88,0] /* PENTAX\00 */, "i8", ALLOC_NONE, 5587480);
allocate([48,49,48,48,0] /* 0100\00 */, "i8", ALLOC_NONE, 5587488);
allocate([78,82,87,32,0] /* NRW \00 */, "i8", ALLOC_NONE, 5587496);
allocate([48,54,53,0] /* 065\00 */, "i8", ALLOC_NONE, 5587504);
allocate([67,97,110,111,110,0] /* Canon\00 */, "i8", ALLOC_NONE, 5587508);
allocate([75,79,78,73,67,65,0] /* KONICA\00 */, "i8", ALLOC_NONE, 5587516);
allocate([78,73,75,79,78,0] /* NIKON\00 */, "i8", ALLOC_NONE, 5587524);
allocate([83,65,77,83,85,78,71,0] /* SAMSUNG\00 */, "i8", ALLOC_NONE, 5587532);
allocate([81,86,67,0] /* QVC\00 */, "i8", ALLOC_NONE, 5587540);
allocate([112,112,109,49,54,95,116,104,117,109,98,40,41,0] /* ppm16_thumb()\00 */, "i8", ALLOC_NONE, 5587544);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 5587560);
allocate([37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0] /* %s: Out of memory in */, "i8", ALLOC_NONE, 5587568);
allocate(468, "i8", ALLOC_NONE, 5587596);
HEAP32[((5245848)>>2)]=((5587392)|0);
HEAP32[((5245852)>>2)]=((5587384)|0);
HEAP32[((5245856)>>2)]=((5587376)|0);
HEAP32[((5245860)>>2)]=((5587368)|0);
HEAP32[((5245864)>>2)]=((5587360)|0);
HEAP32[((5245868)>>2)]=((5587352)|0);
HEAP32[((5245872)>>2)]=((5587340)|0);
HEAP32[((5245876)>>2)]=((5587312)|0);
HEAP32[((5245880)>>2)]=((5587300)|0);
HEAP32[((5245884)>>2)]=((5587288)|0);
HEAP32[((5245888)>>2)]=((5587392)|0);
HEAP32[((5245892)>>2)]=((5587276)|0);
HEAP32[((5245896)>>2)]=((5587264)|0);
HEAP32[((5245900)>>2)]=((5587252)|0);
HEAP32[((5245904)>>2)]=((5587240)|0);
HEAP32[((5245908)>>2)]=((5587228)|0);
HEAP32[((5245912)>>2)]=((5587216)|0);
HEAP32[((5245916)>>2)]=((5587204)|0);
HEAP32[((5245920)>>2)]=((5587180)|0);
HEAP32[((5245924)>>2)]=((5587172)|0);
HEAP32[((5245928)>>2)]=((5587164)|0);
HEAP32[((5245932)>>2)]=((5587392)|0);
HEAP32[((5245936)>>2)]=((5587392)|0);
HEAP32[((5245940)>>2)]=((5587392)|0);
HEAP32[((5245944)>>2)]=((5587392)|0);
HEAP32[((5245948)>>2)]=((5587392)|0);
HEAP32[((5245952)>>2)]=((5587392)|0);
HEAP32[((5245956)>>2)]=((5587392)|0);
HEAP32[((5245960)>>2)]=((5587392)|0);
HEAP32[((5245964)>>2)]=((5587392)|0);
HEAP32[((5245968)>>2)]=((5587392)|0);
HEAP32[((5245972)>>2)]=((5587392)|0);
HEAP32[((5245976)>>2)]=((5587392)|0);
HEAP32[((5245980)>>2)]=((5587392)|0);
HEAP32[((5245984)>>2)]=((5587392)|0);
HEAP32[((5245988)>>2)]=((5587392)|0);
HEAP32[((5245992)>>2)]=((5587392)|0);
HEAP32[((5245996)>>2)]=((5587392)|0);
HEAP32[((5246000)>>2)]=((5587152)|0);
HEAP32[((5267568)>>2)]=((5587508)|0);
HEAP32[((5267572)>>2)]=((5587524)|0);
HEAP32[((5267576)>>2)]=((5573284)|0);
HEAP32[((5267580)>>2)]=((5586632)|0);
HEAP32[((5267584)>>2)]=((5586624)|0);
HEAP32[((5267588)>>2)]=((5573348)|0);
HEAP32[((5267592)>>2)]=((5587480)|0);
HEAP32[((5267596)>>2)]=((5579172)|0);
HEAP32[((5267600)>>2)]=((5579164)|0);
HEAP32[((5267604)>>2)]=((5579156)|0);
HEAP32[((5267608)>>2)]=((5579148)|0);
HEAP32[((5267612)>>2)]=((5579748)|0);
HEAP32[((5267616)>>2)]=((5586224)|0);
HEAP32[((5267620)>>2)]=((5587532)|0);
HEAP32[((5267624)>>2)]=((5579140)|0);
HEAP32[((5267628)>>2)]=((5579128)|0);
HEAP32[((5267632)>>2)]=((5573300)|0);
HEAP32[((5560728)>>2)]=((5560352)|0);
HEAP32[((5560732)>>2)]=((5560768)|0);
HEAP32[((5560736)>>2)]=((5560280)|0);
HEAP32[((5560740)>>2)]=((5560436)|0);
HEAP32[((5560744)>>2)]=((5242888)|0);
HEAP32[((5560748)>>2)]=((5576536)|0);
HEAP32[((5560752)>>2)]=((5576516)|0);
HEAP32[((5560756)>>2)]=((5576500)|0);
HEAP32[((5560760)>>2)]=((5576484)|0);
HEAP32[((5560764)>>2)]=((5576480)|0);
HEAP32[((5561472)>>2)]=((5585900)|0);
HEAP32[((5561504)>>2)]=((5585860)|0);
HEAP32[((5561536)>>2)]=((5585844)|0);
HEAP32[((5561568)>>2)]=((5585828)|0);
HEAP32[((5561600)>>2)]=((5585812)|0);
HEAP32[((5561632)>>2)]=((5585796)|0);
HEAP32[((5561664)>>2)]=((5585772)|0);
HEAP32[((5561696)>>2)]=((5585748)|0);
HEAP32[((5561728)>>2)]=((5585732)|0);
HEAP32[((5561760)>>2)]=((5585716)|0);
HEAP32[((5561792)>>2)]=((5585700)|0);
HEAP32[((5561824)>>2)]=((5585660)|0);
HEAP32[((5561856)>>2)]=((5585644)|0);
HEAP32[((5561888)>>2)]=((5585628)|0);
HEAP32[((5561920)>>2)]=((5585612)|0);
HEAP32[((5561952)>>2)]=((5585596)|0);
HEAP32[((5561984)>>2)]=((5585580)|0);
HEAP32[((5562016)>>2)]=((5585564)|0);
HEAP32[((5562048)>>2)]=((5585548)|0);
HEAP32[((5562080)>>2)]=((5585532)|0);
HEAP32[((5562112)>>2)]=((5585516)|0);
HEAP32[((5562144)>>2)]=((5585476)|0);
HEAP32[((5562176)>>2)]=((5585460)|0);
HEAP32[((5562208)>>2)]=((5585444)|0);
HEAP32[((5562240)>>2)]=((5585428)|0);
HEAP32[((5562272)>>2)]=((5585412)|0);
HEAP32[((5562304)>>2)]=((5585396)|0);
HEAP32[((5562336)>>2)]=((5585380)|0);
HEAP32[((5562368)>>2)]=((5585368)|0);
HEAP32[((5562400)>>2)]=((5585344)|0);
HEAP32[((5562432)>>2)]=((5585320)|0);
HEAP32[((5562464)>>2)]=((5585268)|0);
HEAP32[((5562496)>>2)]=((5585244)|0);
HEAP32[((5562528)>>2)]=((5585220)|0);
HEAP32[((5562560)>>2)]=((5585196)|0);
HEAP32[((5562592)>>2)]=((5585180)|0);
HEAP32[((5562624)>>2)]=((5585164)|0);
HEAP32[((5562656)>>2)]=((5585148)|0);
HEAP32[((5562688)>>2)]=((5585136)|0);
HEAP32[((5562720)>>2)]=((5585112)|0);
HEAP32[((5562752)>>2)]=((5585092)|0);
HEAP32[((5562784)>>2)]=((5585056)|0);
HEAP32[((5562816)>>2)]=((5585036)|0);
HEAP32[((5562848)>>2)]=((5585016)|0);
HEAP32[((5562880)>>2)]=((5584996)|0);
HEAP32[((5562912)>>2)]=((5584976)|0);
HEAP32[((5562944)>>2)]=((5584952)|0);
HEAP32[((5562976)>>2)]=((5584932)|0);
HEAP32[((5563008)>>2)]=((5584912)|0);
HEAP32[((5563040)>>2)]=((5584892)|0);
HEAP32[((5563072)>>2)]=((5584872)|0);
HEAP32[((5563104)>>2)]=((5584832)|0);
HEAP32[((5563136)>>2)]=((5584812)|0);
HEAP32[((5563168)>>2)]=((5584788)|0);
HEAP32[((5563200)>>2)]=((5584764)|0);
HEAP32[((5563232)>>2)]=((5584740)|0);
HEAP32[((5563264)>>2)]=((5584720)|0);
HEAP32[((5563296)>>2)]=((5584700)|0);
HEAP32[((5563328)>>2)]=((5584680)|0);
HEAP32[((5563360)>>2)]=((5584660)|0);
HEAP32[((5563392)>>2)]=((5584640)|0);
HEAP32[((5563424)>>2)]=((5584588)|0);
HEAP32[((5563456)>>2)]=((5584568)|0);
HEAP32[((5563488)>>2)]=((5584548)|0);
HEAP32[((5563520)>>2)]=((5584524)|0);
HEAP32[((5563552)>>2)]=((5584500)|0);
HEAP32[((5563584)>>2)]=((5584476)|0);
HEAP32[((5563616)>>2)]=((5584452)|0);
HEAP32[((5563648)>>2)]=((5584428)|0);
HEAP32[((5563680)>>2)]=((5584404)|0);
HEAP32[((5563712)>>2)]=((5584380)|0);
HEAP32[((5563744)>>2)]=((5584352)|0);
HEAP32[((5563776)>>2)]=((5584328)|0);
HEAP32[((5563808)>>2)]=((5584304)|0);
HEAP32[((5563840)>>2)]=((5584280)|0);
HEAP32[((5563872)>>2)]=((5584256)|0);
HEAP32[((5563904)>>2)]=((5584228)|0);
HEAP32[((5563936)>>2)]=((5584204)|0);
HEAP32[((5563968)>>2)]=((5584188)|0);
HEAP32[((5564000)>>2)]=((5584172)|0);
HEAP32[((5564032)>>2)]=((5584156)|0);
HEAP32[((5564064)>>2)]=((5584092)|0);
HEAP32[((5564096)>>2)]=((5584080)|0);
HEAP32[((5564128)>>2)]=((5586060)|0);
HEAP32[((5564160)>>2)]=((5584060)|0);
HEAP32[((5564192)>>2)]=((5584048)|0);
HEAP32[((5564224)>>2)]=((5584032)|0);
HEAP32[((5564256)>>2)]=((5584016)|0);
HEAP32[((5564288)>>2)]=((5584004)|0);
HEAP32[((5564320)>>2)]=((5583992)|0);
HEAP32[((5564352)>>2)]=((5583976)|0);
HEAP32[((5564384)>>2)]=((5583964)|0);
HEAP32[((5564416)>>2)]=((5583924)|0);
HEAP32[((5564448)>>2)]=((5583908)|0);
HEAP32[((5564480)>>2)]=((5583888)|0);
HEAP32[((5564512)>>2)]=((5583872)|0);
HEAP32[((5564544)>>2)]=((5583856)|0);
HEAP32[((5564576)>>2)]=((5583840)|0);
HEAP32[((5564608)>>2)]=((5583824)|0);
HEAP32[((5564640)>>2)]=((5583808)|0);
HEAP32[((5564672)>>2)]=((5583792)|0);
HEAP32[((5564704)>>2)]=((5583776)|0);
HEAP32[((5564736)>>2)]=((5583740)|0);
HEAP32[((5564768)>>2)]=((5583724)|0);
HEAP32[((5564800)>>2)]=((5583712)|0);
HEAP32[((5564832)>>2)]=((5583696)|0);
HEAP32[((5564864)>>2)]=((5583680)|0);
HEAP32[((5564896)>>2)]=((5583664)|0);
HEAP32[((5564928)>>2)]=((5583648)|0);
HEAP32[((5564960)>>2)]=((5583632)|0);
HEAP32[((5564992)>>2)]=((5583616)|0);
HEAP32[((5565024)>>2)]=((5583600)|0);
HEAP32[((5565056)>>2)]=((5583552)|0);
HEAP32[((5565088)>>2)]=((5583532)|0);
HEAP32[((5565120)>>2)]=((5583516)|0);
HEAP32[((5565152)>>2)]=((5583500)|0);
HEAP32[((5565184)>>2)]=((5583484)|0);
HEAP32[((5565216)>>2)]=((5583468)|0);
HEAP32[((5565248)>>2)]=((5583452)|0);
HEAP32[((5565280)>>2)]=((5583436)|0);
HEAP32[((5565312)>>2)]=((5583420)|0);
HEAP32[((5565344)>>2)]=((5583404)|0);
HEAP32[((5565376)>>2)]=((5583368)|0);
HEAP32[((5565408)>>2)]=((5583352)|0);
HEAP32[((5565440)>>2)]=((5583336)|0);
HEAP32[((5565472)>>2)]=((5583320)|0);
HEAP32[((5565504)>>2)]=((5583304)|0);
HEAP32[((5565536)>>2)]=((5583288)|0);
HEAP32[((5565568)>>2)]=((5583272)|0);
HEAP32[((5565600)>>2)]=((5583256)|0);
HEAP32[((5565632)>>2)]=((5583240)|0);
HEAP32[((5565664)>>2)]=((5583224)|0);
HEAP32[((5565696)>>2)]=((5583192)|0);
HEAP32[((5565728)>>2)]=((5583176)|0);
HEAP32[((5565760)>>2)]=((5583160)|0);
HEAP32[((5565792)>>2)]=((5583144)|0);
HEAP32[((5565824)>>2)]=((5583124)|0);
HEAP32[((5565856)>>2)]=((5583104)|0);
HEAP32[((5565888)>>2)]=((5583084)|0);
HEAP32[((5565920)>>2)]=((5583064)|0);
HEAP32[((5565952)>>2)]=((5583048)|0);
HEAP32[((5565984)>>2)]=((5583036)|0);
HEAP32[((5566016)>>2)]=((5583008)|0);
HEAP32[((5566048)>>2)]=((5582996)|0);
HEAP32[((5566080)>>2)]=((5582972)|0);
HEAP32[((5566112)>>2)]=((5582948)|0);
HEAP32[((5566144)>>2)]=((5582924)|0);
HEAP32[((5566176)>>2)]=((5582900)|0);
HEAP32[((5566208)>>2)]=((5582888)|0);
HEAP32[((5566240)>>2)]=((5582872)|0);
HEAP32[((5566272)>>2)]=((5582856)|0);
HEAP32[((5566304)>>2)]=((5582840)|0);
HEAP32[((5566336)>>2)]=((5582808)|0);
HEAP32[((5566368)>>2)]=((5586700)|0);
HEAP32[((5566400)>>2)]=((5582796)|0);
HEAP32[((5566432)>>2)]=((5582784)|0);
HEAP32[((5566464)>>2)]=((5582764)|0);
HEAP32[((5566496)>>2)]=((5582744)|0);
HEAP32[((5566528)>>2)]=((5582724)|0);
HEAP32[((5566560)>>2)]=((5582704)|0);
HEAP32[((5566592)>>2)]=((5582684)|0);
HEAP32[((5566624)>>2)]=((5582664)|0);
HEAP32[((5566656)>>2)]=((5582644)|0);
HEAP32[((5566688)>>2)]=((5582612)|0);
HEAP32[((5566720)>>2)]=((5582596)|0);
HEAP32[((5566752)>>2)]=((5582580)|0);
HEAP32[((5566784)>>2)]=((5582568)|0);
HEAP32[((5566816)>>2)]=((5582556)|0);
HEAP32[((5566848)>>2)]=((5582544)|0);
HEAP32[((5566880)>>2)]=((5582532)|0);
HEAP32[((5566912)>>2)]=((5582520)|0);
HEAP32[((5566944)>>2)]=((5582508)|0);
HEAP32[((5566976)>>2)]=((5582496)|0);
HEAP32[((5567008)>>2)]=((5582472)|0);
HEAP32[((5567040)>>2)]=((5582460)|0);
HEAP32[((5567072)>>2)]=((5582448)|0);
HEAP32[((5567104)>>2)]=((5582436)|0);
HEAP32[((5567136)>>2)]=((5582424)|0);
HEAP32[((5567168)>>2)]=((5582412)|0);
HEAP32[((5567200)>>2)]=((5582400)|0);
HEAP32[((5567232)>>2)]=((5582388)|0);
HEAP32[((5567264)>>2)]=((5582376)|0);
HEAP32[((5567296)>>2)]=((5582364)|0);
HEAP32[((5567328)>>2)]=((5582320)|0);
HEAP32[((5567360)>>2)]=((5582308)|0);
HEAP32[((5567392)>>2)]=((5582296)|0);
HEAP32[((5567424)>>2)]=((5582284)|0);
HEAP32[((5567456)>>2)]=((5582272)|0);
HEAP32[((5567488)>>2)]=((5582260)|0);
HEAP32[((5567520)>>2)]=((5582248)|0);
HEAP32[((5567552)>>2)]=((5582236)|0);
HEAP32[((5567584)>>2)]=((5582224)|0);
HEAP32[((5567616)>>2)]=((5582212)|0);
HEAP32[((5567648)>>2)]=((5582192)|0);
HEAP32[((5567680)>>2)]=((5582180)|0);
HEAP32[((5567712)>>2)]=((5582168)|0);
HEAP32[((5567744)>>2)]=((5582156)|0);
HEAP32[((5567776)>>2)]=((5582144)|0);
HEAP32[((5567808)>>2)]=((5582132)|0);
HEAP32[((5567840)>>2)]=((5582120)|0);
HEAP32[((5567872)>>2)]=((5582108)|0);
HEAP32[((5567904)>>2)]=((5582096)|0);
HEAP32[((5567936)>>2)]=((5582084)|0);
HEAP32[((5567968)>>2)]=((5582056)|0);
HEAP32[((5568000)>>2)]=((5582044)|0);
HEAP32[((5568032)>>2)]=((5582032)|0);
HEAP32[((5568064)>>2)]=((5582020)|0);
HEAP32[((5568096)>>2)]=((5582000)|0);
HEAP32[((5568128)>>2)]=((5581980)|0);
HEAP32[((5568160)>>2)]=((5581960)|0);
HEAP32[((5568192)>>2)]=((5581940)|0);
HEAP32[((5568224)>>2)]=((5581928)|0);
HEAP32[((5568256)>>2)]=((5581916)|0);
HEAP32[((5568288)>>2)]=((5581884)|0);
HEAP32[((5568320)>>2)]=((5581868)|0);
HEAP32[((5568352)>>2)]=((5581852)|0);
HEAP32[((5568384)>>2)]=((5581840)|0);
HEAP32[((5568416)>>2)]=((5581828)|0);
HEAP32[((5568448)>>2)]=((5581812)|0);
HEAP32[((5568480)>>2)]=((5581800)|0);
HEAP32[((5568512)>>2)]=((5581784)|0);
HEAP32[((5568544)>>2)]=((5581768)|0);
HEAP32[((5568576)>>2)]=((5581752)|0);
HEAP32[((5568608)>>2)]=((5581724)|0);
HEAP32[((5568640)>>2)]=((5581712)|0);
HEAP32[((5568672)>>2)]=((5581696)|0);
HEAP32[((5568704)>>2)]=((5581680)|0);
HEAP32[((5568736)>>2)]=((5581664)|0);
HEAP32[((5568768)>>2)]=((5581648)|0);
HEAP32[((5568800)>>2)]=((5581632)|0);
HEAP32[((5568832)>>2)]=((5581616)|0);
HEAP32[((5568864)>>2)]=((5581600)|0);
HEAP32[((5568896)>>2)]=((5581588)|0);
HEAP32[((5568928)>>2)]=((5581552)|0);
HEAP32[((5568960)>>2)]=((5581536)|0);
HEAP32[((5568992)>>2)]=((5581520)|0);
HEAP32[((5569024)>>2)]=((5581504)|0);
HEAP32[((5569056)>>2)]=((5581488)|0);
HEAP32[((5569088)>>2)]=((5581472)|0);
HEAP32[((5569120)>>2)]=((5581456)|0);
HEAP32[((5569152)>>2)]=((5581440)|0);
HEAP32[((5569184)>>2)]=((5581424)|0);
HEAP32[((5569216)>>2)]=((5581408)|0);
HEAP32[((5569248)>>2)]=((5581376)|0);
HEAP32[((5569280)>>2)]=((5581360)|0);
HEAP32[((5569312)>>2)]=((5581344)|0);
HEAP32[((5569344)>>2)]=((5581328)|0);
HEAP32[((5569376)>>2)]=((5581316)|0);
HEAP32[((5569408)>>2)]=((5581300)|0);
HEAP32[((5569440)>>2)]=((5581284)|0);
HEAP32[((5569472)>>2)]=((5581268)|0);
HEAP32[((5569504)>>2)]=((5581252)|0);
HEAP32[((5569536)>>2)]=((5581236)|0);
HEAP32[((5569568)>>2)]=((5581196)|0);
HEAP32[((5569600)>>2)]=((5581180)|0);
HEAP32[((5569632)>>2)]=((5581164)|0);
HEAP32[((5569664)>>2)]=((5581148)|0);
HEAP32[((5569696)>>2)]=((5581132)|0);
HEAP32[((5569728)>>2)]=((5581116)|0);
HEAP32[((5569760)>>2)]=((5581100)|0);
HEAP32[((5569792)>>2)]=((5581088)|0);
HEAP32[((5569824)>>2)]=((5581076)|0);
HEAP32[((5569856)>>2)]=((5581064)|0);
HEAP32[((5569888)>>2)]=((5581016)|0);
HEAP32[((5569920)>>2)]=((5581000)|0);
HEAP32[((5569952)>>2)]=((5580988)|0);
HEAP32[((5569984)>>2)]=((5580976)|0);
HEAP32[((5570016)>>2)]=((5580964)|0);
HEAP32[((5570048)>>2)]=((5580948)|0);
HEAP32[((5570080)>>2)]=((5580936)|0);
HEAP32[((5570112)>>2)]=((5580924)|0);
HEAP32[((5570144)>>2)]=((5580912)|0);
HEAP32[((5570176)>>2)]=((5580892)|0);
HEAP32[((5570208)>>2)]=((5580848)|0);
HEAP32[((5570240)>>2)]=((5580828)|0);
HEAP32[((5570272)>>2)]=((5580808)|0);
HEAP32[((5570304)>>2)]=((5580788)|0);
HEAP32[((5570336)>>2)]=((5580768)|0);
HEAP32[((5570368)>>2)]=((5580748)|0);
HEAP32[((5570400)>>2)]=((5580732)|0);
HEAP32[((5570432)>>2)]=((5580712)|0);
HEAP32[((5570464)>>2)]=((5580692)|0);
HEAP32[((5570496)>>2)]=((5580676)|0);
HEAP32[((5570528)>>2)]=((5580624)|0);
HEAP32[((5570560)>>2)]=((5580608)|0);
HEAP32[((5570592)>>2)]=((5580588)|0);
HEAP32[((5570624)>>2)]=((5580572)|0);
HEAP32[((5570656)>>2)]=((5580552)|0);
HEAP32[((5570688)>>2)]=((5580536)|0);
HEAP32[((5570720)>>2)]=((5580516)|0);
HEAP32[((5570752)>>2)]=((5580500)|0);
HEAP32[((5570784)>>2)]=((5580480)|0);
HEAP32[((5570816)>>2)]=((5580464)|0);
HEAP32[((5570848)>>2)]=((5580432)|0);
HEAP32[((5570880)>>2)]=((5580416)|0);
HEAP32[((5570912)>>2)]=((5580396)|0);
HEAP32[((5570944)>>2)]=((5580380)|0);
HEAP32[((5570976)>>2)]=((5580360)|0);
HEAP32[((5571008)>>2)]=((5580344)|0);
HEAP32[((5571040)>>2)]=((5580324)|0);
HEAP32[((5571072)>>2)]=((5580308)|0);
HEAP32[((5571104)>>2)]=((5580288)|0);
HEAP32[((5571136)>>2)]=((5580268)|0);
HEAP32[((5571168)>>2)]=((5580236)|0);
HEAP32[((5571200)>>2)]=((5580216)|0);
HEAP32[((5571232)>>2)]=((5580196)|0);
HEAP32[((5571264)>>2)]=((5580176)|0);
HEAP32[((5571296)>>2)]=((5580156)|0);
HEAP32[((5571328)>>2)]=((5580136)|0);
HEAP32[((5571360)>>2)]=((5580116)|0);
HEAP32[((5571392)>>2)]=((5580096)|0);
HEAP32[((5571424)>>2)]=((5580076)|0);
HEAP32[((5571456)>>2)]=((5580056)|0);
HEAP32[((5571488)>>2)]=((5580012)|0);
HEAP32[((5571520)>>2)]=((5579992)|0);
HEAP32[((5571552)>>2)]=((5579976)|0);
HEAP32[((5571584)>>2)]=((5579960)|0);
HEAP32[((5571616)>>2)]=((5579944)|0);
HEAP32[((5571648)>>2)]=((5579928)|0);
HEAP32[((5571680)>>2)]=((5579912)|0);
HEAP32[((5571712)>>2)]=((5579896)|0);
HEAP32[((5571744)>>2)]=((5579880)|0);
HEAP32[((5571776)>>2)]=((5579872)|0);
HEAP32[((5571808)>>2)]=((5579856)|0);
HEAP32[((5571840)>>2)]=((5579840)|0);
HEAP32[((5571872)>>2)]=((5579828)|0);
HEAP32[((5571904)>>2)]=((5579812)|0);
HEAP32[((5571936)>>2)]=((5579800)|0);
HEAP32[((5571968)>>2)]=((5579784)|0);
HEAP32[((5572000)>>2)]=((5579768)|0);
HEAP32[((5572032)>>2)]=((5579756)|0);
HEAP32[((5572064)>>2)]=((5579748)|0);
HEAP32[((5572096)>>2)]=((5579732)|0);
HEAP32[((5572128)>>2)]=((5579716)|0);
HEAP32[((5572160)>>2)]=((5579704)|0);
HEAP32[((5572192)>>2)]=((5579688)|0);
HEAP32[((5572224)>>2)]=((5579672)|0);
HEAP32[((5572256)>>2)]=((5579656)|0);
HEAP32[((5572288)>>2)]=((5579640)|0);
HEAP32[((5572320)>>2)]=((5579624)|0);
HEAP32[((5572352)>>2)]=((5579608)|0);
HEAP32[((5572384)>>2)]=((5579592)|0);
HEAP32[((5572416)>>2)]=((5579576)|0);
HEAP32[((5572448)>>2)]=((5579548)|0);
HEAP32[((5572480)>>2)]=((5579532)|0);
HEAP32[((5572512)>>2)]=((5579516)|0);
HEAP32[((5572544)>>2)]=((5579500)|0);
HEAP32[((5572576)>>2)]=((5579484)|0);
HEAP32[((5572608)>>2)]=((5579468)|0);
HEAP32[((5572640)>>2)]=((5579452)|0);
HEAP32[((5572672)>>2)]=((5579436)|0);
HEAP32[((5572704)>>2)]=((5579424)|0);
HEAP32[((5572736)>>2)]=((5579412)|0);
HEAP32[((5572768)>>2)]=((5579388)|0);
HEAP32[((5572800)>>2)]=((5579376)|0);
HEAP32[((5572832)>>2)]=((5579388)|0);
HEAP32[((5572864)>>2)]=((5579376)|0);
HEAP32[((5572896)>>2)]=((5579364)|0);
HEAP32[((5572928)>>2)]=((5579352)|0);
HEAP32[((5572960)>>2)]=((5579340)|0);
HEAP32[((5572992)>>2)]=((5579324)|0);
HEAP32[((5573024)>>2)]=((5579308)|0);
HEAP32[((5573056)>>2)]=((5579292)|0);
HEAP32[((5573088)>>2)]=((5579276)|0);
HEAP32[((5573120)>>2)]=((5579260)|0);
HEAP32[((5573152)>>2)]=((5579220)|0);
HEAP32[((5573184)>>2)]=((5579204)|0);
HEAP32[((5573216)>>2)]=((5579188)|0);
var _llvm_dbg_declare; // stub for _llvm_dbg_declare

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }var _ftello;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }var _ntohs;

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }var _getc_unlocked;

  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[((src)+(i))];
        var second = HEAP8[((src)+(i + 1))];
        HEAP8[((dest)+(i))]=second
        HEAP8[((dest)+(i + 1))]=first
      }
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  var _getc;


  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((argPtr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[((argPtr)+(j))]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[((s)+(index++))]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }


  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc;

  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }


  
  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  var _cos=Math.cos;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  var _exp=Math.exp;

  var _floor=Math.floor;

  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else if (size < FS.currentPath.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < FS.currentPath.length; i++) {
          HEAP8[((buf)+(i))]=FS.currentPath.charCodeAt(i)
        }
        HEAP8[((buf)+(i))]=0
        return buf;
      }
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[((s)+(i))]=byte_
      }
      HEAP8[((s)+(i))]=0
      return s;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      if (s) {
        _puts(s);
        _putc(':'.charCodeAt(0));
        _putc(' '.charCodeAt(0));
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }


  var _llvm_pow_f64=Math.pow;

  var _log=Math.log;

  var _sqrt=Math.sqrt;

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (FS.streams[stream]) {
        var stack = [];
        var get = function() { var ret = _fgetc(stream); stack.push(ret); return ret };
        var unget = function(c) { return _ungetc(stack.pop(), stream) };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[((s)+(i))]=result.charCodeAt(i);
      }
      HEAP8[((s)+(i))]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAPU8[((px)+(i))]);
        var y = _tolower(HEAPU8[((py)+(i))]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  var _fseeko;

  
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }function _atof(ptr) {
      return _strtod(ptr, null);
    }


  var _ntohl;

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }


  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if (FS.streams[fildes].isTerminal) return 1;
      ___setErrNo(ERRNO_CODES.ENOTTY);
      return 0;
    }
var _setjmp; // stub for _setjmp

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }

  
  var ___utimbuf_struct_layout={__size__:8,actime:0,modtime:4};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[(((times)+(offset))>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }

  
  
  var ___tm_formatted=allocate(4*26, "i8", ALLOC_STACK);
  
  function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[((buf)+(index))]=chr.charCodeAt(0)
      });
      HEAP8[((buf)+(25))]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }


  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }
var _llvm_dbg_value; // stub for _llvm_dbg_value

  var _sqrtf=Math.sqrt;

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  var _floorf=Math.floor;

  function _exp2(x) {
      return Math.pow(2, x);
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  var _llvm_memset_p0i8_i64;

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_lossless_dng_load_raw,0,_unpacked_load_raw,0,_foveon_sd_load_raw,0,_kodak_ycbcr_load_raw,0,_canon_600_load_raw,0,_smal_v9_load_raw,0,_leaf_hdr_load_raw,0,_nikon_load_raw,0,_kodak_jpeg_load_raw,0,_canon_sraw_load_raw,0,_minolta_rd175_load_raw,0,_sony_arw_load_raw,0,_sony_load_raw,0,_kodak_thumb_load_raw,0,_sinar_4shot_load_raw,0,_quicktake_100_load_raw,0,_kodak_262_load_raw,0,_packed_load_raw,0,_sony_arw2_load_raw,0,_panasonic_load_raw,0,_canon_load_raw,0,_redcine_load_raw,0,_lossless_jpeg_load_raw,0,_foveon_thumb,0,_layer_thumb,0,_kodak_yrgb_load_raw,0,_kodak_65000_load_raw,0,_rollei_thumb,0,_kodak_radc_load_raw,0,_jpeg_thumb,0,_olympus_load_raw,0,_phase_one_load_raw,0,_nokia_load_raw,0,_ppm_thumb,0,_rollei_load_raw,0,_imacon_full_load_raw,0,_smal_v6_load_raw,0,_packed_dng_load_raw,0,_ppm16_thumb,0,_kodak_dc120_load_raw,0,_eight_bit_load_raw,0,_write_ppm_tiff,0,_phase_one_load_raw_c,0,_pentax_load_raw,0,_kodak_rgb_load_raw,0,_foveon_dp_load_raw,0,_lossy_dng_load_raw,0,_hasselblad_load_raw,0];

function _int_to_float($i) {
  return HEAP32[tempDoublePtr >> 2] = $i, HEAPF32[tempDoublePtr >> 2];
}
function _fcol($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5427632 >> 2];
    if (($1 | 0) == 1) {
      label = 3;
      break;
    } else if (($1 | 0) == 2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $3 = HEAP16[5263700 >> 1];
    var $4 = $3 & 65535;
    var $5 = $4 + $col | 0;
    var $6 = $5 & 15;
    var $7 = HEAP16[5243564 >> 1];
    var $8 = $7 & 65535;
    var $9 = $8 + $row | 0;
    var $10 = $9 & 15;
    var $11 = 5427672 + ($10 << 4) + $6 | 0;
    var $12 = HEAP8[$11];
    var $13 = $12 << 24 >> 24;
    var $_0 = $13;
    label = 6;
    break;
   case 4:
    var $15 = $col + 6 | 0;
    var $16 = ($15 | 0) % 6;
    var $17 = $row + 6 | 0;
    var $18 = ($17 | 0) % 6;
    var $19 = 5427636 + $18 * 6 + $16 | 0;
    var $20 = HEAP8[$19];
    var $21 = $20 << 24 >> 24;
    var $_0 = $21;
    label = 6;
    break;
   case 5:
    var $23 = $row << 1;
    var $24 = $23 & 14;
    var $25 = $col & 1;
    var $26 = $24 | $25;
    var $27 = $26 << 1;
    var $28 = $1 >>> ($27 >>> 0);
    var $29 = $28 & 3;
    var $_0 = $29;
    label = 6;
    break;
   case 6:
    var $_0;
    return $_0;
  }
}
function _sget2($s) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5262944 >> 1];
    var $2 = $1 << 16 >> 16 == 18761;
    var $3 = HEAP8[$s];
    var $4 = $3 & 255;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $6 = $s + 1 | 0;
    var $7 = HEAP8[$6];
    var $8 = $7 & 255;
    var $9 = $8 << 8;
    var $10 = $9 | $4;
    var $_0_in = $10;
    label = 5;
    break;
   case 4:
    var $12 = $4 << 8;
    var $13 = $s + 1 | 0;
    var $14 = HEAP8[$13];
    var $15 = $14 & 255;
    var $16 = $15 | $12;
    var $_0_in = $16;
    label = 5;
    break;
   case 5:
    var $_0_in;
    var $_0 = $_0_in & 65535;
    return $_0;
  }
}
function _sget4($s) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5262944 >> 1];
    var $2 = $1 << 16 >> 16 == 18761;
    var $3 = HEAP8[$s];
    var $4 = $3 & 255;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $6 = $s + 1 | 0;
    var $7 = HEAP8[$6];
    var $8 = $7 & 255;
    var $9 = $8 << 8;
    var $10 = $9 | $4;
    var $11 = $s + 2 | 0;
    var $12 = HEAP8[$11];
    var $13 = $12 & 255;
    var $14 = $13 << 16;
    var $15 = $10 | $14;
    var $16 = $s + 3 | 0;
    var $17 = HEAP8[$16];
    var $18 = $17 & 255;
    var $19 = $18 << 24;
    var $20 = $15 | $19;
    var $_0 = $20;
    label = 5;
    break;
   case 4:
    var $22 = $4 << 24;
    var $23 = $s + 1 | 0;
    var $24 = HEAP8[$23];
    var $25 = $24 & 255;
    var $26 = $25 << 16;
    var $27 = $26 | $22;
    var $28 = $s + 2 | 0;
    var $29 = HEAP8[$28];
    var $30 = $29 & 255;
    var $31 = $30 << 8;
    var $32 = $27 | $31;
    var $33 = $s + 3 | 0;
    var $34 = HEAP8[$33];
    var $35 = $34 & 255;
    var $36 = $32 | $35;
    var $_0 = $36;
    label = 5;
    break;
   case 5:
    var $_0;
    return $_0;
  }
}
function _canon_600_fixed_wb() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $lo_0 = 3;
    label = 3;
    break;
   case 3:
    var $lo_0;
    var $2 = ($lo_0 | 0) == 3;
    if ($2) {
      var $lo_0 = 2;
      label = 3;
      break;
    } else {
      var $hi_0 = 0;
      label = 4;
      break;
    }
   case 4:
    var $hi_0;
    var $3 = ($hi_0 | 0) < 3;
    if ($3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $5 = $hi_0 + 1 | 0;
    var $hi_0 = $5;
    label = 4;
    break;
   case 6:
    var $7 = ($lo_0 | 0) == ($hi_0 | 0);
    if ($7) {
      var $frac_0 = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $9 = 5560924 + $lo_0 * 10 | 0;
    var $10 = HEAP16[$9 >> 1];
    var $11 = $10 << 16 >> 16;
    var $12 = 1311 - $11 | 0;
    var $13 = $12 | 0;
    var $14 = 5560924 + $hi_0 * 10 | 0;
    var $15 = HEAP16[$14 >> 1];
    var $16 = $15 << 16 >> 16;
    var $17 = $16 - $11 | 0;
    var $18 = $17 | 0;
    var $19 = $13 / $18;
    var $frac_0 = $19;
    label = 8;
    break;
   case 8:
    var $frac_0;
    var $21 = 1 - $frac_0;
    var $22 = 5560926 + $hi_0 * 10 | 0;
    var $23 = HEAP16[$22 >> 1];
    var $24 = $23 << 16 >> 16;
    var $25 = $frac_0 * $24;
    var $26 = 5560926 + $lo_0 * 10 | 0;
    var $27 = HEAP16[$26 >> 1];
    var $28 = $27 << 16 >> 16;
    var $29 = $21 * $28;
    var $30 = $25 + $29;
    var $31 = 1 / $30;
    HEAPF32[5245640 >> 2] = $31;
    var $32 = 5560928 + $hi_0 * 10 | 0;
    var $33 = HEAP16[$32 >> 1];
    var $34 = $33 << 16 >> 16;
    var $35 = $frac_0 * $34;
    var $36 = 5560928 + $lo_0 * 10 | 0;
    var $37 = HEAP16[$36 >> 1];
    var $38 = $37 << 16 >> 16;
    var $39 = $21 * $38;
    var $40 = $35 + $39;
    var $41 = 1 / $40;
    HEAPF32[5245644 >> 2] = $41;
    var $42 = 5560930 + $hi_0 * 10 | 0;
    var $43 = HEAP16[$42 >> 1];
    var $44 = $43 << 16 >> 16;
    var $45 = $frac_0 * $44;
    var $46 = 5560930 + $lo_0 * 10 | 0;
    var $47 = HEAP16[$46 >> 1];
    var $48 = $47 << 16 >> 16;
    var $49 = $21 * $48;
    var $50 = $45 + $49;
    var $51 = 1 / $50;
    HEAPF32[5245648 >> 2] = $51;
    var $52 = 5560932 + $hi_0 * 10 | 0;
    var $53 = HEAP16[$52 >> 1];
    var $54 = $53 << 16 >> 16;
    var $55 = $frac_0 * $54;
    var $56 = 5560932 + $lo_0 * 10 | 0;
    var $57 = HEAP16[$56 >> 1];
    var $58 = $57 << 16 >> 16;
    var $59 = $21 * $58;
    var $60 = $55 + $59;
    var $61 = 1 / $60;
    HEAPF32[5245652 >> 2] = $61;
    return;
  }
}
_canon_600_fixed_wb["X"] = 1;
function _canon_600_color($ratio, $mar) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAPF32[5403052 >> 2];
    var $2 = $1 != 0;
    var $3 = $ratio + 4 | 0;
    var $4 = HEAP32[$3 >> 2];
    if ($2) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $6 = ($4 | 0) < -104;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$3 >> 2] = -104;
    var $21 = -104;
    var $clipped_23 = 1;
    label = 13;
    break;
   case 5:
    var $8 = ($4 | 0) > 12;
    if ($8) {
      label = 6;
      break;
    } else {
      var $clipped_2 = 0;
      var $18 = $4;
      label = 12;
      break;
    }
   case 6:
    HEAP32[$3 >> 2] = 12;
    var $clipped_2 = 1;
    var $18 = 12;
    label = 12;
    break;
   case 7:
    var $_off = $4 + 264 | 0;
    var $11 = $_off >>> 0 > 725;
    if ($11) {
      var $_0 = 2;
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $13 = ($4 | 0) < -50;
    if ($13) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[$3 >> 2] = -50;
    var $clipped_2 = 1;
    var $18 = -50;
    label = 12;
    break;
   case 10:
    var $15 = ($4 | 0) > 307;
    if ($15) {
      label = 11;
      break;
    } else {
      var $clipped_2 = 0;
      var $18 = $4;
      label = 12;
      break;
    }
   case 11:
    HEAP32[$3 >> 2] = 307;
    var $clipped_2 = 1;
    var $18 = 307;
    label = 12;
    break;
   case 12:
    var $18;
    var $clipped_2;
    var $19 = ($18 | 0) < 197;
    var $or_cond = $2 | $19;
    if ($or_cond) {
      var $21 = $18;
      var $clipped_23 = $clipped_2;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $clipped_23;
    var $21;
    var $22 = $21 * 398 & -1;
    var $23 = $22 >> 10;
    var $24 = -38 - $23 | 0;
    var $30 = $24;
    var $clipped_22 = $clipped_23;
    label = 15;
    break;
   case 14:
    var $26 = $18 * 48 & -1;
    var $27 = $26 >> 10;
    var $28 = $27 - 123 | 0;
    var $30 = $28;
    var $clipped_22 = $clipped_2;
    label = 15;
    break;
   case 15:
    var $clipped_22;
    var $30;
    var $31 = $30 - $mar | 0;
    var $32 = HEAP32[$ratio >> 2];
    var $33 = $30 + 20 | 0;
    var $notlhs = ($31 | 0) <= ($32 | 0);
    var $notrhs = ($33 | 0) >= ($32 | 0);
    var $or_cond28_not = $notrhs & $notlhs;
    var $34 = ($clipped_22 | 0) == 0;
    var $or_cond29 = $or_cond28_not & $34;
    if ($or_cond29) {
      var $_0 = 0;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $36 = $30 - $32 | 0;
    var $ispos = ($36 | 0) > -1;
    var $neg = -$36 | 0;
    var $37 = $ispos ? $36 : $neg;
    var $38 = $mar << 2;
    var $39 = ($37 | 0) < ($38 | 0);
    if ($39) {
      label = 17;
      break;
    } else {
      var $_0 = 2;
      label = 18;
      break;
    }
   case 17:
    var $41 = ($36 | 0) < -20;
    var $_ = $41 ? -20 : $36;
    var $42 = ($_ | 0) > ($mar | 0);
    var $miss_1 = $42 ? $mar : $_;
    var $43 = $30 - $miss_1 | 0;
    HEAP32[$ratio >> 2] = $43;
    var $_0 = 1;
    label = 18;
    break;
   case 18:
    var $_0;
    return $_0;
  }
}
_canon_600_color["X"] = 1;
function _my_memmem($haystack, $needle) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $haystack + 28 | 0;
    var $c_0 = $haystack;
    label = 3;
    break;
   case 3:
    var $c_0;
    var $3 = $c_0 >>> 0 > $1 >>> 0;
    if ($3) {
      var $_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = _memcmp($c_0, $needle, 4);
    var $6 = ($5 | 0) == 0;
    var $7 = $c_0 + 1 | 0;
    if ($6) {
      var $_0 = $c_0;
      label = 5;
      break;
    } else {
      var $c_0 = $7;
      label = 3;
      break;
    }
   case 5:
    var $_0;
    return $_0;
  }
}
function _derror() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5428496 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $4 = HEAP32[_stderr >> 2];
    var $5 = HEAP32[5264120 >> 2];
    var $6 = _fprintf($4, 5587560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $5, tempInt));
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _feof($7);
    var $9 = ($8 | 0) == 0;
    var $10 = HEAP32[_stderr >> 2];
    if ($9) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $12 = _fwrite(5586180, 23, 1, $10);
    label = 6;
    break;
   case 5:
    var $14 = HEAP32[5264116 >> 2];
    var $15 = _ftell($14);
    var $16$0 = $15;
    var $16$1 = ($15 | 0) < 0 ? -1 : 0;
    var $$etemp$0 = 5584128;
    var $17 = _fprintf($10, $$etemp$0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $16$0, HEAP32[tempInt + 4 >> 2] = $16$1, tempInt));
    label = 6;
    break;
   case 6:
    var $19 = HEAP32[5428496 >> 2];
    var $20 = $19 + 1 | 0;
    HEAP32[5428496 >> 2] = $20;
    STACKTOP = __stackBase__;
    return;
  }
}
function _get2() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $str = __stackBase__;
  HEAP16[$str >> 1] = -1;
  var $1 = $str;
  _fread($1, 1, 2, HEAP32[5264116 >> 2]);
  var $4 = _sget2($1);
  STACKTOP = __stackBase__;
  return $4;
}
function _get4() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $str = __stackBase__;
  HEAP32[$str >> 2] = -1;
  var $1 = $str;
  _fread($1, 1, 4, HEAP32[5264116 >> 2]);
  var $4 = _sget4($1);
  STACKTOP = __stackBase__;
  return $4;
}
function _getint($type) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($type | 0) == 3;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $3 = _get2();
    var $4 = $3 & 65535;
    var $8 = $4;
    label = 5;
    break;
   case 4:
    var $6 = _get4();
    var $8 = $6;
    label = 5;
    break;
   case 5:
    var $8;
    return $8;
  }
}
function _getreal($type) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $u = __stackBase__;
    if (($type | 0) == 3) {
      label = 3;
      break;
    } else if (($type | 0) == 4) {
      label = 4;
      break;
    } else if (($type | 0) == 5) {
      label = 5;
      break;
    } else if (($type | 0) == 8) {
      label = 6;
      break;
    } else if (($type | 0) == 9) {
      label = 7;
      break;
    } else if (($type | 0) == 10) {
      label = 8;
      break;
    } else if (($type | 0) == 11) {
      label = 9;
      break;
    } else if (($type | 0) == 12) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    var $2 = _get2();
    var $3 = $2 & 65535;
    var $_0 = $3;
    label = 12;
    break;
   case 4:
    var $5 = _get4();
    var $6 = $5 >>> 0;
    var $_0 = $6;
    label = 12;
    break;
   case 5:
    var $8 = _get4();
    var $9 = $8 >>> 0;
    var $10 = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $9, HEAP32[$10 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$10 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $11 = _get4();
    var $12 = $11 >>> 0;
    var $13 = $9 / $12;
    var $_0 = $13;
    label = 12;
    break;
   case 6:
    var $15 = _get2();
    var $16 = $15 << 16 >> 16;
    var $_0 = $16;
    label = 12;
    break;
   case 7:
    var $18 = _get4();
    var $19 = $18 | 0;
    var $_0 = $19;
    label = 12;
    break;
   case 8:
    var $21 = _get4();
    var $22 = $21 | 0;
    var $23 = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $22, HEAP32[$23 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $24 = _get4();
    var $25 = $24 | 0;
    var $26 = $22 / $25;
    var $_0 = $26;
    label = 12;
    break;
   case 9:
    var $28 = _get4();
    var $29 = _int_to_float($28);
    var $30 = $29;
    var $_0 = $30;
    label = 12;
    break;
   case 10:
    var $32 = HEAP16[5262944 >> 1];
    var $33 = $32 << 16 >> 16 == 18761;
    var $34 = _htons(4660);
    var $35 = ($34 | 0) == 4660;
    var $tmp = $33 ^ $35;
    var $36 = $tmp & 1;
    var $37 = $36 ^ 1;
    var $38 = -$37 | 0;
    var $39 = $38 & 7;
    var $40 = $u;
    var $41 = HEAP32[5264116 >> 2];
    var $42 = _fgetc($41);
    var $43 = $42 & 255;
    var $44 = $40 + $39 | 0;
    HEAP8[$44] = $43;
    var $45 = HEAP32[5264116 >> 2];
    var $46 = _fgetc($45);
    var $47 = $46 & 255;
    var $48 = $39 ^ 1;
    var $49 = $40 + $48 | 0;
    HEAP8[$49] = $47;
    var $50 = HEAP32[5264116 >> 2];
    var $51 = _fgetc($50);
    var $52 = $51 & 255;
    var $53 = $39 ^ 2;
    var $54 = $40 + $53 | 0;
    HEAP8[$54] = $52;
    var $55 = HEAP32[5264116 >> 2];
    var $56 = _fgetc($55);
    var $57 = $56 & 255;
    var $58 = $39 ^ 3;
    var $59 = $40 + $58 | 0;
    HEAP8[$59] = $57;
    var $60 = HEAP32[5264116 >> 2];
    var $61 = _fgetc($60);
    var $62 = $61 & 255;
    var $63 = $39 ^ 4;
    var $64 = $40 + $63 | 0;
    HEAP8[$64] = $62;
    var $65 = HEAP32[5264116 >> 2];
    var $66 = _fgetc($65);
    var $67 = $66 & 255;
    var $68 = $39 ^ 5;
    var $69 = $40 + $68 | 0;
    HEAP8[$69] = $67;
    var $70 = HEAP32[5264116 >> 2];
    var $71 = _fgetc($70);
    var $72 = $71 & 255;
    var $73 = $39 ^ 6;
    var $74 = $40 + $73 | 0;
    HEAP8[$74] = $72;
    var $75 = HEAP32[5264116 >> 2];
    var $76 = _fgetc($75);
    var $77 = $76 & 255;
    var $78 = $39 ^ 7;
    var $79 = $40 + $78 | 0;
    HEAP8[$79] = $77;
    var $80 = $u | 0;
    var $81 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$80 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$80 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $_0 = $81;
    label = 12;
    break;
   case 11:
    var $83 = HEAP32[5264116 >> 2];
    var $84 = _fgetc($83);
    var $85 = $84 | 0;
    var $_0 = $85;
    label = 12;
    break;
   case 12:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_getreal["X"] = 1;
function _read_shorts($pixel, $count) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $pixel;
    var $2 = HEAP32[5264116 >> 2];
    var $3 = _fread($1, 2, $count, $2);
    var $4 = $3 >>> 0 < $count >>> 0;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _derror();
    label = 4;
    break;
   case 4:
    var $7 = HEAP16[5262944 >> 1];
    var $8 = $7 << 16 >> 16 == 18761;
    var $9 = _htons(4660);
    var $10 = ($9 | 0) == 4660;
    var $tmp = $8 ^ $10;
    if ($tmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $12 = $count << 1;
    _swab($1, $1, $12);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _canon_600_auto_wb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $count = __stackBase__;
    var $test = __stackBase__ + 8;
    var $total = __stackBase__ + 40;
    var $ratio = __stackBase__ + 104;
    var $1 = $count;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$7$0 = $1 | 0;
    HEAP32[$st$7$0 >> 2] = $$etemp$0$0;
    var $st$7$1 = $1 + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $$etemp$0$1;
    var $2 = $total;
    for (var $$dest = $2 >> 2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $3 = HEAPF32[5560920 >> 2];
    var $4 = $3;
    var $5 = $4 + .5;
    var $6 = $5 & -1;
    var $7 = ($6 | 0) < 10;
    if ($7) {
      var $mar_0 = 150;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $9 = ($6 | 0) > 12;
    if ($9) {
      var $mar_0 = 20;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $11 = $6 * -20 & -1;
    var $12 = $11 + 280 | 0;
    var $mar_0 = $12;
    label = 5;
    break;
   case 5:
    var $mar_0;
    var $14 = HEAPF32[5403052 >> 2];
    var $15 = $14 != 0;
    var $mar_1 = $15 ? 80 : $mar_0;
    var $16 = HEAP16[5398712 >> 1];
    var $17 = $16 & 65535;
    var $18 = $17 - 14 | 0;
    var $19 = ($18 | 0) > 14;
    if ($19) {
      label = 6;
      break;
    } else {
      var $123 = 0;
      var $122 = 0;
      label = 22;
      break;
    }
   case 6:
    var $20 = $test + 4 | 0;
    var $21 = $test | 0;
    var $22 = $ratio | 0;
    var $23 = $test + 12 | 0;
    var $24 = $test + 8 | 0;
    var $25 = $ratio + 4 | 0;
    var $26 = $test + 20 | 0;
    var $27 = $test + 16 | 0;
    var $28 = $ratio + 8 | 0;
    var $29 = $test + 28 | 0;
    var $30 = $test + 24 | 0;
    var $31 = $ratio + 12 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_083 = 14;
    label = 7;
    break;
   case 7:
    var $row_083;
    var $32 = ($_pre & 65535) > 10;
    if ($32) {
      label = 8;
      break;
    } else {
      label = 20;
      break;
    }
   case 8:
    var $_pre6 = HEAP32[5427632 >> 2];
    var $_pre7 = HEAP16[5244916 >> 1];
    var $_pre8 = HEAP16[5264092 >> 1];
    var $_pre9 = HEAP32[5264108 >> 2];
    var $col_082 = 10;
    label = 9;
    break;
   case 9:
    var $col_082;
    var $33 = $_pre7 & 65535;
    var $34 = $_pre8 & 65535;
    var $i_065 = 0;
    label = 10;
    break;
   case 10:
    var $i_065;
    var $36 = $i_065 >> 1;
    var $37 = $36 + $row_083 | 0;
    var $38 = $37 << 1;
    var $39 = $38 & 14;
    var $40 = $i_065 & 1;
    var $41 = $40 | $col_082;
    var $42 = $39 | $40;
    var $43 = $42 << 1;
    var $44 = $_pre6 >>> ($43 >>> 0);
    var $45 = $44 & 3;
    var $46 = $37 >> $33;
    var $47 = $46 * $34 & -1;
    var $48 = $41 >> $33;
    var $49 = $47 + $48 | 0;
    var $50 = $_pre9 + ($49 << 3) + ($45 << 1) | 0;
    var $51 = HEAP16[$50 >> 1];
    var $52 = $51 & 65535;
    var $53 = $i_065 & 4;
    var $54 = $45 | $53;
    var $55 = $test + ($54 << 2) | 0;
    HEAP32[$55 >> 2] = $52;
    var $56 = $i_065 + 1 | 0;
    var $exitcond = ($56 | 0) == 8;
    if ($exitcond) {
      var $i_1 = 0;
      label = 11;
      break;
    } else {
      var $i_065 = $56;
      label = 10;
      break;
    }
   case 11:
    var $i_1;
    var $57 = ($i_1 | 0) < 8;
    if ($57) {
      label = 12;
      break;
    } else {
      var $i_2 = 0;
      label = 13;
      break;
    }
   case 12:
    var $59 = $test + ($i_1 << 2) | 0;
    var $60 = HEAP32[$59 >> 2];
    var $_off = $60 - 150 | 0;
    var $61 = $_off >>> 0 > 1350;
    var $62 = $i_1 + 1 | 0;
    if ($61) {
      label = 19;
      break;
    } else {
      var $i_1 = $62;
      label = 11;
      break;
    }
   case 13:
    var $i_2;
    var $63 = ($i_2 | 0) < 4;
    if ($63) {
      label = 14;
      break;
    } else {
      label = 25;
      break;
    }
   case 14:
    var $65 = $test + ($i_2 << 2) | 0;
    var $66 = HEAP32[$65 >> 2];
    var $67 = $i_2 + 4 | 0;
    var $68 = $test + ($67 << 2) | 0;
    var $69 = HEAP32[$68 >> 2];
    var $70 = $66 - $69 | 0;
    var $ispos = ($70 | 0) > -1;
    var $neg = -$70 | 0;
    var $71 = $ispos ? $70 : $neg;
    var $72 = ($71 | 0) > 50;
    var $73 = $i_2 + 1 | 0;
    if ($72) {
      label = 19;
      break;
    } else {
      var $i_2 = $73;
      label = 13;
      break;
    }
   case 15:
    var $74 = ($173 | 0) == 0;
    if ($74) {
      var $85 = $163;
      var $84 = $168;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $75 = HEAP32[$22 >> 2];
    var $76 = $75 + 1024 | 0;
    var $77 = $76 * $164 & -1;
    var $78 = $77 >> 10;
    HEAP32[$20 >> 2] = $78;
    var $79 = HEAP32[$25 >> 2];
    var $80 = $79 + 1024 | 0;
    var $81 = $80 * $169 & -1;
    var $82 = $81 >> 10;
    HEAP32[$23 >> 2] = $82;
    var $85 = $78;
    var $84 = $82;
    label = 17;
    break;
   case 17:
    var $84;
    var $85;
    var $86 = ($184 | 0) == 0;
    if ($86) {
      var $89 = $174;
      var $88 = $179;
      label = 18;
      break;
    } else {
      label = 26;
      break;
    }
   case 18:
    var $88;
    var $89;
    var $90 = $total + ($185 << 5) | 0;
    var $91 = HEAP32[$90 >> 2];
    var $92 = $91 + $164 | 0;
    HEAP32[$90 >> 2] = $92;
    var $93 = $total + ($185 << 5) + 4 | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = $94 + $85 | 0;
    HEAP32[$93 >> 2] = $95;
    var $96 = $total + ($185 << 5) + 8 | 0;
    var $97 = HEAP32[$96 >> 2];
    var $98 = $97 + $169 | 0;
    HEAP32[$96 >> 2] = $98;
    var $99 = $total + ($185 << 5) + 12 | 0;
    var $100 = HEAP32[$99 >> 2];
    var $101 = $100 + $84 | 0;
    HEAP32[$99 >> 2] = $101;
    var $102 = $total + ($185 << 5) + 16 | 0;
    var $103 = HEAP32[$102 >> 2];
    var $104 = $103 + $175 | 0;
    HEAP32[$102 >> 2] = $104;
    var $105 = $total + ($185 << 5) + 20 | 0;
    var $106 = HEAP32[$105 >> 2];
    var $107 = $106 + $89 | 0;
    HEAP32[$105 >> 2] = $107;
    var $108 = $total + ($185 << 5) + 24 | 0;
    var $109 = HEAP32[$108 >> 2];
    var $110 = $109 + $180 | 0;
    HEAP32[$108 >> 2] = $110;
    var $111 = $total + ($185 << 5) + 28 | 0;
    var $112 = HEAP32[$111 >> 2];
    var $113 = $112 + $88 | 0;
    HEAP32[$111 >> 2] = $113;
    var $114 = $count + ($185 << 2) | 0;
    var $115 = HEAP32[$114 >> 2];
    var $116 = $115 + 1 | 0;
    HEAP32[$114 >> 2] = $116;
    label = 19;
    break;
   case 19:
    var $117 = $col_082 + 2 | 0;
    var $118 = $_pre & 65535;
    var $119 = ($117 | 0) < ($118 | 0);
    if ($119) {
      var $col_082 = $117;
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $120 = $row_083 + 4 | 0;
    var $121 = ($120 | 0) < ($18 | 0);
    if ($121) {
      var $row_083 = $120;
      label = 7;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_phi_trans_insert = $count | 0;
    var $_pre3 = HEAP32[$_phi_trans_insert >> 2];
    var $_phi_trans_insert4 = $count + 4 | 0;
    var $_pre5 = HEAP32[$_phi_trans_insert4 >> 2];
    var $123 = $_pre3;
    var $122 = $_pre5;
    label = 22;
    break;
   case 22:
    var $122;
    var $123;
    var $124 = $122 | $123;
    var $125 = ($124 | 0) == 0;
    if ($125) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $126 = $123 * 200 & -1;
    var $127 = ($126 | 0) < ($122 | 0);
    var $128 = $127 & 1;
    var $129 = $total + ($128 << 5) | 0;
    var $130 = HEAP32[$129 >> 2];
    var $131 = $total + ($128 << 5) + 16 | 0;
    var $132 = HEAP32[$131 >> 2];
    var $133 = $132 + $130 | 0;
    var $134 = $133 | 0;
    var $135 = 1 / $134;
    var $136 = $135;
    HEAPF32[5245640 >> 2] = $136;
    var $137 = $total + ($128 << 5) + 4 | 0;
    var $138 = HEAP32[$137 >> 2];
    var $139 = $total + ($128 << 5) + 20 | 0;
    var $140 = HEAP32[$139 >> 2];
    var $141 = $140 + $138 | 0;
    var $142 = $141 | 0;
    var $143 = 1 / $142;
    var $144 = $143;
    HEAPF32[5245644 >> 2] = $144;
    var $145 = $total + ($128 << 5) + 8 | 0;
    var $146 = HEAP32[$145 >> 2];
    var $147 = $total + ($128 << 5) + 24 | 0;
    var $148 = HEAP32[$147 >> 2];
    var $149 = $148 + $146 | 0;
    var $150 = $149 | 0;
    var $151 = 1 / $150;
    var $152 = $151;
    HEAPF32[5245648 >> 2] = $152;
    var $153 = $total + ($128 << 5) + 12 | 0;
    var $154 = HEAP32[$153 >> 2];
    var $155 = $total + ($128 << 5) + 28 | 0;
    var $156 = HEAP32[$155 >> 2];
    var $157 = $156 + $154 | 0;
    var $158 = $157 | 0;
    var $159 = 1 / $158;
    var $160 = $159;
    HEAPF32[5245652 >> 2] = $160;
    label = 24;
    break;
   case 24:
    STACKTOP = __stackBase__;
    return;
   case 25:
    var $163 = HEAP32[$20 >> 2];
    var $164 = HEAP32[$21 >> 2];
    var $165 = $163 - $164 | 0;
    var $166 = $165 << 10;
    var $167 = ($166 | 0) / ($164 | 0) & -1;
    HEAP32[$22 >> 2] = $167;
    var $168 = HEAP32[$23 >> 2];
    var $169 = HEAP32[$24 >> 2];
    var $170 = $168 - $169 | 0;
    var $171 = $170 << 10;
    var $172 = ($171 | 0) / ($169 | 0) & -1;
    HEAP32[$25 >> 2] = $172;
    var $173 = _canon_600_color($22, $mar_1);
    var $174 = HEAP32[$26 >> 2];
    var $175 = HEAP32[$27 >> 2];
    var $176 = $174 - $175 | 0;
    var $177 = $176 << 10;
    var $178 = ($177 | 0) / ($175 | 0) & -1;
    HEAP32[$28 >> 2] = $178;
    var $179 = HEAP32[$29 >> 2];
    var $180 = HEAP32[$30 >> 2];
    var $181 = $179 - $180 | 0;
    var $182 = $181 << 10;
    var $183 = ($182 | 0) / ($180 | 0) & -1;
    HEAP32[$31 >> 2] = $183;
    var $184 = _canon_600_color($28, $mar_1);
    var $185 = $184 | $173;
    var $186 = ($185 | 0) > 1;
    if ($186) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 26:
    var $187 = HEAP32[$28 >> 2];
    var $188 = $187 + 1024 | 0;
    var $189 = $188 * $175 & -1;
    var $190 = $189 >> 10;
    HEAP32[$26 >> 2] = $190;
    var $191 = HEAP32[$31 >> 2];
    var $192 = $191 + 1024 | 0;
    var $193 = $192 * $180 & -1;
    var $194 = $193 >> 10;
    HEAP32[$29 >> 2] = $194;
    var $89 = $190;
    var $88 = $194;
    label = 18;
    break;
  }
}
_canon_600_auto_wb["X"] = 1;
function _merror($ptr, $where) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($ptr | 0) == 0;
    if ($1) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    STACKTOP = __stackBase__;
    return;
   case 4:
    var $4 = HEAP32[_stderr >> 2];
    var $5 = HEAP32[5264120 >> 2];
    var $6 = _fprintf($4, 5587568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = $where, tempInt));
    _longjmp(5427928, 1);
  }
}
function _canon_600_coeff() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAPF32[5245644 >> 2];
    var $2 = HEAPF32[5245648 >> 2];
    var $3 = $1 / $2;
    var $4 = HEAPF32[5245652 >> 2];
    var $5 = $4 / $2;
    var $6 = $3 <= 1;
    var $7 = $3;
    var $8 = $7 > 1.28;
    var $or_cond13 = $6 | $8;
    if ($or_cond13) {
      var $t_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $10 = $5;
    var $11 = $10 < .8789;
    if ($11) {
      label = 4;
      break;
    } else {
      var $t_0 = 0;
      label = 5;
      break;
    }
   case 4:
    var $t_0 = 1;
    label = 5;
    break;
   case 5:
    var $t_0;
    var $14 = $7 > 1.28;
    var $15 = $3 <= 2;
    var $or_cond = $14 & $15;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      var $t_1 = $t_0;
      label = 9;
      break;
    }
   case 6:
    var $17 = $5;
    var $18 = $17 < .8789;
    if ($18) {
      var $t_1 = 3;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $20 = $5 > 2;
    if ($20) {
      var $t_1 = $t_0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $t_1 = 4;
    label = 9;
    break;
   case 9:
    var $t_1;
    var $22 = HEAPF32[5403052 >> 2];
    var $23 = $22 != 0;
    var $t_2 = $23 ? 5 : $t_1;
    HEAP32[5245040 >> 2] = 0;
    var $24 = HEAP32[5560840 >> 2];
    var $25 = ($24 | 0) > 0;
    if ($25) {
      var $c_014 = 0;
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    var $c_014;
    var $26 = 5560980 + $t_2 * 24 + ($c_014 << 1) | 0;
    var $27 = HEAP16[$26 >> 1];
    var $28 = $27 << 16 >> 16;
    var $29 = $28 * .0009765625;
    var $30 = $29;
    var $31 = 5244964 + ($c_014 << 2) | 0;
    HEAPF32[$31 >> 2] = $30;
    var $32 = $c_014 + 1 | 0;
    var $exitcond = ($32 | 0) == ($24 | 0);
    if ($exitcond) {
      var $c_014_1 = 0;
      label = 11;
      break;
    } else {
      var $c_014 = $32;
      label = 10;
      break;
    }
   case 11:
    var $c_014_1;
    var $33 = $c_014_1 + 4 | 0;
    var $34 = 5560980 + $t_2 * 24 + ($33 << 1) | 0;
    var $35 = HEAP16[$34 >> 1];
    var $36 = $35 << 16 >> 16;
    var $37 = $36 * .0009765625;
    var $38 = $37;
    var $39 = 5244980 + ($c_014_1 << 2) | 0;
    HEAPF32[$39 >> 2] = $38;
    var $40 = $c_014_1 + 1 | 0;
    var $exitcond_1 = ($40 | 0) == ($24 | 0);
    if ($exitcond_1) {
      var $c_014_2 = 0;
      label = 12;
      break;
    } else {
      var $c_014_1 = $40;
      label = 11;
      break;
    }
   case 12:
    var $c_014_2;
    var $41 = $c_014_2 + 8 | 0;
    var $42 = 5560980 + $t_2 * 24 + ($41 << 1) | 0;
    var $43 = HEAP16[$42 >> 1];
    var $44 = $43 << 16 >> 16;
    var $45 = $44 * .0009765625;
    var $46 = $45;
    var $47 = 5244996 + ($c_014_2 << 2) | 0;
    HEAPF32[$47 >> 2] = $46;
    var $48 = $c_014_2 + 1 | 0;
    var $exitcond_2 = ($48 | 0) == ($24 | 0);
    if ($exitcond_2) {
      label = 13;
      break;
    } else {
      var $c_014_2 = $48;
      label = 12;
      break;
    }
   case 13:
    return;
  }
}
_canon_600_coeff["X"] = 1;
function _canon_600_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1120 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $data | 0;
    var $4 = $data + 1120 | 0;
    var $irow_030 = 0;
    var $row_031 = 0;
    label = 4;
    break;
   case 4:
    var $row_031;
    var $irow_030;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fread($3, 1, 1120, $6);
    var $8 = $7 >>> 0 < 1120;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $10 = HEAP16[5245028 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 * $row_031 & -1;
    var $13 = HEAP32[5245032 >> 2];
    var $14 = $13 + ($12 << 1) | 0;
    var $dp_028 = $3;
    var $pix_029 = $14;
    label = 7;
    break;
   case 7:
    var $pix_029;
    var $dp_028;
    var $16 = HEAP8[$dp_028];
    var $17 = $16 & 255;
    var $18 = $17 << 2;
    var $19 = $dp_028 + 1 | 0;
    var $20 = HEAP8[$19];
    var $21 = $20 & 255;
    var $22 = ($21 & 65535) >>> 6;
    var $23 = $22 | $18;
    HEAP16[$pix_029 >> 1] = $23;
    var $24 = $dp_028 + 2 | 0;
    var $25 = HEAP8[$24];
    var $26 = $25 & 255;
    var $27 = $26 << 2;
    var $28 = HEAP8[$19];
    var $29 = $28 & 255;
    var $30 = ($29 & 65535) >>> 4;
    var $31 = $30 & 3;
    var $32 = $31 | $27;
    var $33 = $pix_029 + 2 | 0;
    HEAP16[$33 >> 1] = $32;
    var $34 = $dp_028 + 3 | 0;
    var $35 = HEAP8[$34];
    var $36 = $35 & 255;
    var $37 = $36 << 2;
    var $38 = HEAP8[$19];
    var $39 = $38 & 255;
    var $40 = ($39 & 65535) >>> 2;
    var $41 = $40 & 3;
    var $42 = $41 | $37;
    var $43 = $pix_029 + 4 | 0;
    HEAP16[$43 >> 1] = $42;
    var $44 = $dp_028 + 4 | 0;
    var $45 = HEAP8[$44];
    var $46 = $45 & 255;
    var $47 = $46 << 2;
    var $48 = HEAP8[$19];
    var $49 = $48 & 255;
    var $50 = $49 & 3;
    var $51 = $50 | $47;
    var $52 = $pix_029 + 6 | 0;
    HEAP16[$52 >> 1] = $51;
    var $53 = $dp_028 + 5 | 0;
    var $54 = HEAP8[$53];
    var $55 = $54 & 255;
    var $56 = $55 << 2;
    var $57 = $dp_028 + 9 | 0;
    var $58 = HEAP8[$57];
    var $59 = $58 & 255;
    var $60 = $59 & 3;
    var $61 = $60 | $56;
    var $62 = $pix_029 + 8 | 0;
    HEAP16[$62 >> 1] = $61;
    var $63 = $dp_028 + 6 | 0;
    var $64 = HEAP8[$63];
    var $65 = $64 & 255;
    var $66 = $65 << 2;
    var $67 = HEAP8[$57];
    var $68 = $67 & 255;
    var $69 = ($68 & 65535) >>> 2;
    var $70 = $69 & 3;
    var $71 = $70 | $66;
    var $72 = $pix_029 + 10 | 0;
    HEAP16[$72 >> 1] = $71;
    var $73 = $dp_028 + 7 | 0;
    var $74 = HEAP8[$73];
    var $75 = $74 & 255;
    var $76 = $75 << 2;
    var $77 = HEAP8[$57];
    var $78 = $77 & 255;
    var $79 = ($78 & 65535) >>> 4;
    var $80 = $79 & 3;
    var $81 = $80 | $76;
    var $82 = $pix_029 + 12 | 0;
    HEAP16[$82 >> 1] = $81;
    var $83 = $dp_028 + 8 | 0;
    var $84 = HEAP8[$83];
    var $85 = $84 & 255;
    var $86 = $85 << 2;
    var $87 = HEAP8[$57];
    var $88 = $87 & 255;
    var $89 = ($88 & 65535) >>> 6;
    var $90 = $89 | $86;
    var $91 = $pix_029 + 14 | 0;
    HEAP16[$91 >> 1] = $90;
    var $92 = $dp_028 + 10 | 0;
    var $93 = $pix_029 + 16 | 0;
    var $94 = $92 >>> 0 < $4 >>> 0;
    if ($94) {
      var $dp_028 = $92;
      var $pix_029 = $93;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $95 = $row_031 + 2 | 0;
    var $96 = HEAP16[5398712 >> 1];
    var $97 = $96 & 65535;
    var $98 = ($95 | 0) > ($97 | 0);
    var $_ = $98 ? 1 : $95;
    var $99 = $irow_030 + 1 | 0;
    var $100 = ($99 | 0) < ($97 | 0);
    if ($100) {
      var $irow_030 = $99;
      var $row_031 = $_;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
_canon_600_load_raw["X"] = 1;
function _canon_600_correct() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_015 = 0;
    var $3 = $_pre;
    label = 4;
    break;
   case 4:
    var $3;
    var $row_015;
    var $4 = $3 << 16 >> 16 == 0;
    if ($4) {
      var $34 = 0;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $5 = $row_015 << 1;
    var $6 = $5 & 14;
    var $7 = $row_015 & 3;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $_pre5 = HEAP32[5561400 >> 2];
    var $col_014 = 0;
    label = 6;
    break;
   case 6:
    var $col_014;
    var $9 = $col_014 & 1;
    var $10 = $9 | $6;
    var $11 = $10 << 1;
    var $12 = $_pre1 >>> ($11 >>> 0);
    var $13 = $12 & 3;
    var $14 = $_pre2 & 65535;
    var $15 = $row_015 >> $14;
    var $16 = $_pre3 & 65535;
    var $17 = $15 * $16 & -1;
    var $18 = $col_014 >> $14;
    var $19 = $17 + $18 | 0;
    var $20 = $_pre4 + ($19 << 3) + ($13 << 1) | 0;
    var $21 = HEAP16[$20 >> 1];
    var $22 = $21 & 65535;
    var $23 = $22 - $_pre5 | 0;
    var $24 = ($23 | 0) < 0;
    var $_ = $24 ? 0 : $23;
    var $25 = 5560964 + ($7 << 2) + ($9 << 1) | 0;
    var $26 = HEAP16[$25 >> 1];
    var $27 = $26 << 16 >> 16;
    var $28 = $_ * $27 & -1;
    var $29 = $28 >>> 9;
    var $30 = $29 & 65535;
    HEAP16[$20 >> 1] = $30;
    var $31 = $col_014 + 1 | 0;
    var $32 = $_pre & 65535;
    var $33 = ($31 | 0) < ($32 | 0);
    if ($33) {
      var $col_014 = $31;
      label = 6;
      break;
    } else {
      var $34 = $_pre;
      label = 7;
      break;
    }
   case 7:
    var $34;
    var $35 = $row_015 + 1 | 0;
    var $36 = $1 & 65535;
    var $37 = ($35 | 0) < ($36 | 0);
    if ($37) {
      var $row_015 = $35;
      var $3 = $34;
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _canon_600_fixed_wb();
    _canon_600_auto_wb();
    _canon_600_coeff();
    var $38 = HEAP32[5561400 >> 2];
    var $39 = 1023 - $38 | 0;
    var $40 = $39 * 1109 & -1;
    var $41 = $40 >>> 9;
    HEAP32[5263496 >> 2] = $41;
    HEAP32[5561400 >> 2] = 0;
    return;
  }
}
_canon_600_correct["X"] = 1;
function _canon_s2is() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $row_0 = 0;
    label = 3;
    break;
   case 3:
    var $row_0;
    var $2 = $row_0 >>> 0 < 100;
    if ($2) {
      label = 4;
      break;
    } else {
      var $_0 = 0;
      label = 5;
      break;
    }
   case 4:
    var $4 = HEAP32[5264116 >> 2];
    var $5 = $row_0 * 3340 & -1;
    var $6 = $5 + 3284 | 0;
    var $7 = _fseek($4, $6, 0);
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fgetc($8);
    var $10 = ($9 | 0) > 15;
    var $11 = $row_0 + 1 | 0;
    if ($10) {
      var $_0 = 1;
      label = 5;
      break;
    } else {
      var $row_0 = $11;
      label = 3;
      break;
    }
   case 5:
    var $_0;
    return $_0;
  }
}
function _getbithuff($nbits, $huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($nbits | 0) == -1;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5398868 >> 2] = 0;
    HEAP32[5398864 >> 2] = 0;
    HEAP32[5398872 >> 2] = 0;
    var $_0 = 0;
    label = 17;
    break;
   case 4:
    var $4 = ($nbits | 0) == 0;
    var $5 = HEAP32[5398864 >> 2];
    var $6 = ($5 | 0) < 0;
    var $or_cond = $4 | $6;
    if ($or_cond) {
      var $_0 = 0;
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $7 = HEAP32[5398868 >> 2];
    var $8 = ($7 | 0) == 0;
    var $9 = ($5 | 0) < ($nbits | 0);
    var $or_cond1518 = $8 & $9;
    if ($or_cond1518) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    var $10 = HEAP32[5264116 >> 2];
    var $11 = _fgetc($10);
    var $12 = ($11 | 0) == -1;
    if ($12) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_b = HEAP8[5242884];
    var $14 = ($11 | 0) == 255;
    var $or_cond16 = $_b & $14;
    if ($or_cond16) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    HEAP32[5398868 >> 2] = 0;
    var $15 = HEAP32[5398872 >> 2];
    var $25 = $15;
    var $24 = 0;
    label = 11;
    break;
   case 9:
    var $16 = HEAP32[5398872 >> 2];
    var $33 = $16;
    label = 12;
    break;
   case 10:
    var $18 = HEAP32[5264116 >> 2];
    var $19 = _fgetc($18);
    var $20 = ($19 | 0) != 0;
    var $21 = $20 & 1;
    HEAP32[5398868 >> 2] = $21;
    var $22 = HEAP32[5398872 >> 2];
    if ($20) {
      var $33 = $22;
      label = 12;
      break;
    } else {
      var $25 = $22;
      var $24 = $21;
      label = 11;
      break;
    }
   case 11:
    var $24;
    var $25;
    var $26 = $25 << 8;
    var $27 = $11 & 255;
    var $28 = $26 | $27;
    HEAP32[5398872 >> 2] = $28;
    var $29 = HEAP32[5398864 >> 2];
    var $30 = $29 + 8 | 0;
    HEAP32[5398864 >> 2] = $30;
    var $31 = ($24 | 0) == 0;
    var $32 = ($30 | 0) < ($nbits | 0);
    var $or_cond15 = $31 & $32;
    if ($or_cond15) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 12:
    var $33;
    var $34 = HEAP32[5398864 >> 2];
    var $35 = 32 - $34 | 0;
    var $36 = $33 << $35;
    var $37 = 32 - $nbits | 0;
    var $38 = $36 >>> ($37 >>> 0);
    var $39 = ($huff | 0) == 0;
    if ($39) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $41 = $huff + ($38 << 1) | 0;
    var $42 = HEAP16[$41 >> 1];
    var $43 = $42 & 65535;
    var $44 = $43 >>> 8;
    var $45 = $34 - $44 | 0;
    HEAP32[5398864 >> 2] = $45;
    var $46 = $43 & 255;
    var $c_2 = $46;
    var $50 = $45;
    label = 15;
    break;
   case 14:
    var $48 = $34 - $nbits | 0;
    HEAP32[5398864 >> 2] = $48;
    var $c_2 = $38;
    var $50 = $48;
    label = 15;
    break;
   case 15:
    var $50;
    var $c_2;
    var $51 = ($50 | 0) < 0;
    if ($51) {
      label = 16;
      break;
    } else {
      var $_0 = $c_2;
      label = 17;
      break;
    }
   case 16:
    _derror();
    var $_0 = $c_2;
    label = 17;
    break;
   case 17:
    var $_0;
    return $_0;
  }
}
_getbithuff["X"] = 1;
function _make_decoder_ref($source) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[$source >> 2];
    var $2 = $1 + 16 | 0;
    HEAP32[$source >> 2] = $2;
    var $max_0 = 16;
    label = 3;
    break;
   case 3:
    var $max_0;
    var $4 = ($max_0 | 0) == 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_sum21 = $max_0 - 1 | 0;
    var $6 = $1 + $_sum21 | 0;
    var $7 = HEAP8[$6];
    var $8 = $7 << 24 >> 24 == 0;
    if ($8) {
      var $max_0 = $_sum21;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $9 = 1 << $max_0;
    var $10 = $9 + 1 | 0;
    var $11 = _calloc($10, 2);
    var $12 = $11;
    _merror($11, 5582348);
    var $13 = $max_0 & 65535;
    HEAP16[$12 >> 1] = $13;
    var $14 = ($max_0 | 0) < 1;
    if ($14) {
      label = 14;
      break;
    } else {
      var $h_029 = 1;
      var $len_030 = 1;
      label = 6;
      break;
    }
   case 6:
    var $len_030;
    var $h_029;
    var $_sum = $len_030 - 1 | 0;
    var $15 = $1 + $_sum | 0;
    var $16 = HEAP8[$15];
    var $17 = $16 << 24 >> 24 == 0;
    if ($17) {
      var $h_1_lcssa = $h_029;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $18 = $max_0 - $len_030 | 0;
    var $19 = 1 << $18;
    var $20 = ($19 | 0) > 0;
    var $21 = $len_030 << 8;
    var $h_125 = $h_029;
    var $i_026 = 0;
    label = 8;
    break;
   case 8:
    var $i_026;
    var $h_125;
    if ($20) {
      var $h_222 = $h_125;
      var $j_023 = 0;
      label = 9;
      break;
    } else {
      var $h_2_lcssa = $h_125;
      label = 12;
      break;
    }
   case 9:
    var $j_023;
    var $h_222;
    var $22 = ($h_222 | 0) > ($9 | 0);
    if ($22) {
      var $h_3 = $h_222;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $24 = HEAP32[$source >> 2];
    var $25 = HEAP8[$24];
    var $26 = $25 & 255;
    var $27 = $26 | $21;
    var $28 = $27 & 65535;
    var $29 = $h_222 + 1 | 0;
    var $30 = $12 + ($h_222 << 1) | 0;
    HEAP16[$30 >> 1] = $28;
    var $h_3 = $29;
    label = 11;
    break;
   case 11:
    var $h_3;
    var $32 = $j_023 + 1 | 0;
    var $exitcond = ($32 | 0) == ($19 | 0);
    if ($exitcond) {
      var $h_2_lcssa = $h_3;
      label = 12;
      break;
    } else {
      var $h_222 = $h_3;
      var $j_023 = $32;
      label = 9;
      break;
    }
   case 12:
    var $h_2_lcssa;
    var $33 = $i_026 + 1 | 0;
    var $34 = HEAP32[$source >> 2];
    var $35 = $34 + 1 | 0;
    HEAP32[$source >> 2] = $35;
    var $36 = HEAP8[$15];
    var $37 = $36 & 255;
    var $38 = ($33 | 0) < ($37 | 0);
    if ($38) {
      var $h_125 = $h_2_lcssa;
      var $i_026 = $33;
      label = 8;
      break;
    } else {
      var $h_1_lcssa = $h_2_lcssa;
      label = 13;
      break;
    }
   case 13:
    var $h_1_lcssa;
    var $39 = $len_030 + 1 | 0;
    var $40 = ($39 | 0) > ($max_0 | 0);
    if ($40) {
      label = 14;
      break;
    } else {
      var $h_029 = $h_1_lcssa;
      var $len_030 = $39;
      label = 6;
      break;
    }
   case 14:
    return $12;
  }
}
_make_decoder_ref["X"] = 1;
function _make_decoder($source) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $1 = __stackBase__;
  HEAP32[$1 >> 2] = $source;
  var $2 = _make_decoder_ref($1);
  STACKTOP = __stackBase__;
  return $2;
}
function _crw_init_tables($table, $huff) {
  var $_table = $table >>> 0 > 2 ? 2 : $table;
  var $3 = _make_decoder(5560112 + $_table * 29 | 0);
  HEAP32[$huff >> 2] = $3;
  var $5 = _make_decoder(5559572 + $_table * 180 | 0);
  HEAP32[$huff + 4 >> 2] = $5;
  return;
}
function _canon_has_lowbits() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16384 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $test = __stackBase__;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 0, 0);
    var $3 = $test | 0;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($3, 1, 16384, $4);
    var $ret_04 = 1;
    var $i_05 = 540;
    label = 3;
    break;
   case 3:
    var $i_05;
    var $ret_04;
    var $7 = $test + $i_05 | 0;
    var $8 = HEAP8[$7];
    var $9 = $8 << 24 >> 24 == -1;
    var $10 = $i_05 + 1 | 0;
    if ($9) {
      label = 4;
      break;
    } else {
      var $ret_1 = $ret_04;
      var $_pre_phi = $10;
      label = 5;
      break;
    }
   case 4:
    var $12 = $test + $10 | 0;
    var $13 = HEAP8[$12];
    var $14 = $13 << 24 >> 24 == 0;
    if ($14) {
      var $ret_1 = 0;
      var $_pre_phi = $10;
      label = 5;
      break;
    } else {
      var $_0 = 1;
      label = 6;
      break;
    }
   case 5:
    var $_pre_phi;
    var $ret_1;
    var $15 = $_pre_phi >>> 0 < 16383;
    if ($15) {
      var $ret_04 = $ret_1;
      var $i_05 = $_pre_phi;
      label = 3;
      break;
    } else {
      var $_0 = $ret_1;
      label = 6;
      break;
    }
   case 6:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _canon_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 272 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $diffbuf = __stackBase__ + 8;
    var $base = __stackBase__ + 264;
    var $1 = HEAP32[5244032 >> 2];
    var $2 = $huff | 0;
    _crw_init_tables($1, $2);
    var $3 = _canon_has_lowbits();
    var $4 = ($3 | 0) != 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP32[5263496 >> 2] = 1023;
    label = 4;
    break;
   case 4:
    var $7 = HEAP32[5264116 >> 2];
    var $8 = HEAP16[5245036 >> 1];
    var $9 = $8 & 65535;
    var $10 = $9 * $3 & -1;
    var $11 = HEAP16[5245028 >> 1];
    var $12 = $11 & 65535;
    var $13 = $10 * $12 & -1;
    var $14 = ($13 | 0) / 4 & -1;
    var $15 = $14 + 540 | 0;
    var $16 = _fseek($7, $15, 0);
    HEAP8[5242884] = 1;
    var $17 = _getbithuff(-1, 0);
    var $18 = HEAP16[5245036 >> 1];
    var $19 = $18 << 16 >> 16 == 0;
    if ($19) {
      label = 30;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $20 = $18 & 65535;
    var $21 = $diffbuf;
    var $22 = $diffbuf | 0;
    var $23 = $base + 4 | 0;
    var $24 = $base | 0;
    var $row_060 = 0;
    var $carry_061 = 0;
    var $pnum_062 = 0;
    var $25 = $20;
    label = 6;
    break;
   case 6:
    var $25;
    var $pnum_062;
    var $carry_061;
    var $row_060;
    var $26 = HEAP32[5245032 >> 2];
    var $27 = HEAP16[5245028 >> 1];
    var $28 = $27 & 65535;
    var $29 = $28 * $row_060 & -1;
    var $30 = $26 + ($29 << 1) | 0;
    var $31 = $25 - $row_060 | 0;
    var $32 = ($31 | 0) > 8;
    var $_ = $32 ? 8 : $31;
    var $33 = $28 * $_ & -1;
    var $34 = $33 >> 6;
    var $35 = ($34 | 0) > 0;
    if ($35) {
      label = 7;
      break;
    } else {
      var $carry_1_lcssa = $carry_061;
      var $pnum_1_lcssa = $pnum_062;
      label = 25;
      break;
    }
   case 7:
    var $36 = $34 << 6;
    var $block_048 = 0;
    var $carry_149 = $carry_061;
    var $pnum_150 = $pnum_062;
    label = 8;
    break;
   case 8:
    var $pnum_150;
    var $carry_149;
    var $block_048;
    for (var $$dest = $21 >> 2, $$stop = $$dest + 64; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_045 = 0;
    label = 9;
    break;
   case 9:
    var $i_045;
    var $39 = ($i_045 | 0) > 0;
    var $40 = $39 & 1;
    var $41 = $huff + ($40 << 2) | 0;
    var $42 = HEAP32[$41 >> 2];
    var $43 = HEAP16[$42 >> 1];
    var $44 = $43 & 65535;
    var $45 = $42 + 2 | 0;
    var $46 = _getbithuff($44, $45);
    var $47 = ($46 | 0) != 0;
    var $48 = ($i_045 | 0) == 0;
    var $or_cond = $47 | $48;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    var $50 = ($46 | 0) == 255;
    if ($50) {
      var $i_1 = $i_045;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $52 = $46 >> 4;
    var $53 = $52 + $i_045 | 0;
    var $54 = $46 & 15;
    var $55 = ($54 | 0) == 0;
    if ($55) {
      var $i_1 = $53;
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $57 = _getbithuff($54, 0);
    var $58 = $54 - 1 | 0;
    var $59 = 1 << $58;
    var $60 = $57 & $59;
    var $61 = ($60 | 0) == 0;
    if ($61) {
      label = 13;
      break;
    } else {
      var $diff_0 = $57;
      label = 14;
      break;
    }
   case 13:
    var $_neg = -1 << $54;
    var $_neg43 = $_neg + 1 | 0;
    var $63 = $_neg43 + $57 | 0;
    var $diff_0 = $63;
    label = 14;
    break;
   case 14:
    var $diff_0;
    var $65 = ($53 | 0) < 64;
    if ($65) {
      label = 15;
      break;
    } else {
      var $i_1 = $53;
      label = 16;
      break;
    }
   case 15:
    var $67 = $diffbuf + ($53 << 2) | 0;
    HEAP32[$67 >> 2] = $diff_0;
    var $i_1 = $53;
    label = 16;
    break;
   case 16:
    var $i_1;
    var $69 = $i_1 + 1 | 0;
    var $70 = ($69 | 0) < 64;
    if ($70) {
      var $i_045 = $69;
      label = 9;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $71 = HEAP32[$22 >> 2];
    var $72 = $71 + $carry_149 | 0;
    HEAP32[$22 >> 2] = $72;
    var $73 = $block_048 << 6;
    var $74 = $73 + $29 | 0;
    var $i_246 = 0;
    var $pnum_247 = $pnum_150;
    label = 18;
    break;
   case 18:
    var $pnum_247;
    var $i_246;
    var $75 = $pnum_247 + 1 | 0;
    var $76 = HEAP16[5245028 >> 1];
    var $77 = $76 & 65535;
    var $78 = ($pnum_247 | 0) % ($77 | 0);
    var $79 = ($78 | 0) == 0;
    if ($79) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    HEAP32[$23 >> 2] = 512;
    HEAP32[$24 >> 2] = 512;
    label = 20;
    break;
   case 20:
    var $81 = $diffbuf + ($i_246 << 2) | 0;
    var $82 = HEAP32[$81 >> 2];
    var $83 = $i_246 & 1;
    var $84 = $base + ($83 << 2) | 0;
    var $85 = HEAP32[$84 >> 2];
    var $86 = $85 + $82 | 0;
    HEAP32[$84 >> 2] = $86;
    var $87 = $86 & 65535;
    var $_sum = $74 + $i_246 | 0;
    var $88 = $26 + ($_sum << 1) | 0;
    HEAP16[$88 >> 1] = $87;
    var $89 = $86 & 64512;
    var $90 = ($89 | 0) == 0;
    if ($90) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _derror();
    label = 22;
    break;
   case 22:
    var $93 = $i_246 + 1 | 0;
    var $exitcond = ($93 | 0) == 64;
    if ($exitcond) {
      label = 23;
      break;
    } else {
      var $i_246 = $93;
      var $pnum_247 = $75;
      label = 18;
      break;
    }
   case 23:
    var $95 = $pnum_150 + 64 | 0;
    var $96 = $block_048 + 1 | 0;
    var $exitcond68 = ($96 | 0) == ($34 | 0);
    if ($exitcond68) {
      label = 24;
      break;
    } else {
      var $block_048 = $96;
      var $carry_149 = $72;
      var $pnum_150 = $95;
      label = 8;
      break;
    }
   case 24:
    var $97 = $pnum_062 + $36 | 0;
    var $carry_1_lcssa = $72;
    var $pnum_1_lcssa = $97;
    label = 25;
    break;
   case 25:
    var $pnum_1_lcssa;
    var $carry_1_lcssa;
    if ($4) {
      label = 26;
      break;
    } else {
      label = 29;
      break;
    }
   case 26:
    var $100 = HEAP32[5264116 >> 2];
    var $101 = _ftell($100);
    var $102 = HEAP32[5264116 >> 2];
    var $103 = HEAP16[5245028 >> 1];
    var $104 = $103 & 65535;
    var $105 = $104 * $row_060 & -1;
    var $106 = ($105 | 0) / 4 & -1;
    var $107 = $106 + 26 | 0;
    var $108 = _fseek($102, $107, 0);
    var $109 = HEAP16[5245028 >> 1];
    var $110 = $109 << 16 >> 16 == 0;
    var $111 = HEAP32[5264116 >> 2];
    if ($110) {
      var $_lcssa = $111;
      label = 28;
      break;
    } else {
      var $i_354 = 0;
      var $prow_055 = $30;
      var $112 = $111;
      label = 27;
      break;
    }
   case 27:
    var $112;
    var $prow_055;
    var $i_354;
    var $113 = _fgetc($112);
    var $114 = HEAP16[$prow_055 >> 1];
    var $115 = $114 & 65535;
    var $116 = $115 << 2;
    var $117 = $113 & 3;
    var $118 = $116 | $117;
    var $119 = HEAP16[5245028 >> 1];
    var $120 = $119 << 16 >> 16 == 2672;
    var $121 = $118 >>> 0 < 512;
    var $or_cond42 = $120 & $121;
    var $122 = $118 + 2 | 0;
    var $val_0 = $or_cond42 ? $122 : $118;
    var $123 = $val_0 & 65535;
    HEAP16[$prow_055 >> 1] = $123;
    var $124 = $prow_055 + 2 | 0;
    var $125 = HEAP16[$124 >> 1];
    var $126 = $125 & 65535;
    var $127 = $126 << 2;
    var $128 = $113 >>> 2;
    var $129 = $128 & 3;
    var $130 = $127 | $129;
    var $131 = $130 >>> 0 < 512;
    var $or_cond42_1 = $120 & $131;
    var $132 = $130 + 2 | 0;
    var $val_0_1 = $or_cond42_1 ? $132 : $130;
    var $133 = $val_0_1 & 65535;
    HEAP16[$124 >> 1] = $133;
    var $134 = $prow_055 + 4 | 0;
    var $135 = HEAP16[$134 >> 1];
    var $136 = $135 & 65535;
    var $137 = $136 << 2;
    var $138 = $113 >>> 4;
    var $139 = $138 & 3;
    var $140 = $137 | $139;
    var $141 = $140 >>> 0 < 512;
    var $or_cond42_2 = $120 & $141;
    var $142 = $140 + 2 | 0;
    var $val_0_2 = $or_cond42_2 ? $142 : $140;
    var $143 = $val_0_2 & 65535;
    HEAP16[$134 >> 1] = $143;
    var $144 = $prow_055 + 6 | 0;
    var $145 = HEAP16[$144 >> 1];
    var $146 = $145 & 65535;
    var $147 = $146 << 2;
    var $148 = $113 >>> 6;
    var $149 = $148 & 3;
    var $150 = $147 | $149;
    var $151 = $150 >>> 0 < 512;
    var $or_cond42_3 = $120 & $151;
    var $152 = $150 + 2 | 0;
    var $val_0_3 = $or_cond42_3 ? $152 : $150;
    var $153 = $val_0_3 & 65535;
    HEAP16[$144 >> 1] = $153;
    var $scevgep = $prow_055 + 8 | 0;
    var $154 = $i_354 + 1 | 0;
    var $155 = $119 & 65535;
    var $156 = $155 << 1;
    var $157 = ($154 | 0) < ($156 | 0);
    var $158 = HEAP32[5264116 >> 2];
    if ($157) {
      var $i_354 = $154;
      var $prow_055 = $scevgep;
      var $112 = $158;
      label = 27;
      break;
    } else {
      var $_lcssa = $158;
      label = 28;
      break;
    }
   case 28:
    var $_lcssa;
    var $159 = _fseek($_lcssa, $101, 0);
    label = 29;
    break;
   case 29:
    var $160 = $row_060 + 8 | 0;
    var $161 = HEAP16[5245036 >> 1];
    var $162 = $161 & 65535;
    var $163 = ($160 | 0) < ($162 | 0);
    if ($163) {
      var $row_060 = $160;
      var $carry_061 = $carry_1_lcssa;
      var $pnum_062 = $pnum_1_lcssa;
      var $25 = $162;
      label = 6;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $164 = HEAP32[$2 >> 2];
    var $165 = $164;
    _free($165);
    var $166 = $huff + 4 | 0;
    var $167 = HEAP32[$166 >> 2];
    var $168 = $167;
    _free($168);
    STACKTOP = __stackBase__;
    return;
  }
}
_canon_load_raw["X"] = 1;
function _ljpeg_start($jh, $info_only) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65540 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $dp = __stackBase__ + 65536;
    var $1 = $jh;
    for (var $$dest = $1 >> 2, $$stop = $$dest + 24; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $2 = $jh + 24 | 0;
    HEAP32[$2 >> 2] = 2147483647;
    var $3 = $data | 0;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($3, 2, 1, $4);
    var $6 = $data + 1 | 0;
    var $7 = HEAP8[$6];
    var $8 = $7 << 24 >> 24 == -40;
    if ($8) {
      label = 3;
      break;
    } else {
      var $_0 = 0;
      label = 26;
      break;
    }
   case 3:
    var $9 = $data + 2 | 0;
    var $10 = $data + 3 | 0;
    var $11 = $data + 7 | 0;
    var $12 = $jh + 16 | 0;
    var $13 = $jh | 0;
    var $14 = $jh + 4 | 0;
    var $15 = $data + 4 | 0;
    var $16 = $jh + 8 | 0;
    var $17 = $data + 5 | 0;
    var $18 = $jh + 12 | 0;
    var $19 = ($info_only | 0) == 0;
    label = 4;
    break;
   case 4:
    var $20 = HEAP32[5264116 >> 2];
    var $21 = _fread($3, 2, 2, $20);
    var $22 = HEAP8[$3];
    var $23 = $22 & 255;
    var $24 = $23 << 8;
    var $25 = HEAP8[$6];
    var $26 = $25 & 255;
    var $27 = $24 | $26;
    var $28 = HEAP8[$9];
    var $29 = $28 & 255;
    var $30 = $29 << 8;
    var $31 = HEAP8[$10];
    var $32 = $31 & 255;
    var $33 = $30 | $32;
    var $34 = $33 - 2 | 0;
    var $35 = $27 >>> 0 < 65281;
    if ($35) {
      var $_0 = 0;
      label = 26;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $37 = HEAP32[5264116 >> 2];
    var $38 = _fread($3, 1, $34, $37);
    if (($27 | 0) == 65472) {
      label = 6;
      break;
    } else if (($27 | 0) == 65475) {
      label = 7;
      break;
    } else if (($27 | 0) == 65476) {
      label = 10;
      break;
    } else if (($27 | 0) == 65498) {
      label = 14;
      break;
    } else if (($27 | 0) == 65501) {
      label = 15;
      break;
    } else {
      label = 4;
      break;
    }
   case 6:
    var $_pre = HEAP32[$12 >> 2];
    var $48 = $_pre;
    label = 8;
    break;
   case 7:
    var $40 = HEAP8[$11];
    var $41 = $40 & 255;
    var $42 = $41 >>> 4;
    var $43 = $41 & 15;
    var $44 = $42 * $43 & -1;
    var $45 = $44 + 3 | 0;
    var $46 = $45 & 3;
    HEAP32[$12 >> 2] = $46;
    var $48 = $46;
    label = 8;
    break;
   case 8:
    var $48;
    var $49 = HEAP8[$3];
    var $50 = $49 & 255;
    HEAP32[$13 >> 2] = $50;
    var $51 = HEAP8[$6];
    var $52 = $51 & 255;
    var $53 = $52 << 8;
    var $54 = HEAP8[$9];
    var $55 = $54 & 255;
    var $56 = $53 | $55;
    HEAP32[$14 >> 2] = $56;
    var $57 = HEAP8[$10];
    var $58 = $57 & 255;
    var $59 = $58 << 8;
    var $60 = HEAP8[$15];
    var $61 = $60 & 255;
    var $62 = $59 | $61;
    HEAP32[$16 >> 2] = $62;
    var $63 = HEAP8[$17];
    var $64 = $63 & 255;
    var $65 = $64 + $48 | 0;
    HEAP32[$18 >> 2] = $65;
    var $66 = ($34 | 0) != 9;
    var $67 = HEAP32[5427976 >> 2];
    var $68 = ($67 | 0) != 0;
    var $or_cond = $66 | $68;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $70 = HEAP32[5264116 >> 2];
    var $71 = _fgetc($70);
    label = 16;
    break;
   case 10:
    if ($19) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 11:
    HEAP32[$dp >> 2] = $3;
    var $74 = $data + $34 | 0;
    var $75 = ($34 | 0) > 0;
    if ($75) {
      var $76 = $3;
      label = 12;
      break;
    } else {
      label = 16;
      break;
    }
   case 12:
    var $76;
    var $77 = $76 + 1 | 0;
    HEAP32[$dp >> 2] = $77;
    var $78 = HEAP8[$76];
    var $79 = $78 & 255;
    var $80 = ($78 & 255) < 4;
    if ($80) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $82 = _make_decoder_ref($dp);
    var $83 = $jh + 52 + ($79 << 2) | 0;
    HEAP32[$83 >> 2] = $82;
    var $84 = $jh + 76 + ($79 << 2) | 0;
    HEAP32[$84 >> 2] = $82;
    var $85 = HEAP32[$dp >> 2];
    var $86 = $85 >>> 0 < $74 >>> 0;
    if ($86) {
      var $76 = $85;
      label = 12;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    var $87 = HEAP8[$3];
    var $88 = $87 & 255;
    var $89 = $88 << 1;
    var $90 = $89 | 1;
    var $91 = $data + $90 | 0;
    var $92 = HEAP8[$91];
    var $93 = $92 & 255;
    var $94 = $jh + 20 | 0;
    HEAP32[$94 >> 2] = $93;
    var $95 = $89 + 3 | 0;
    var $96 = $data + $95 | 0;
    var $97 = HEAP8[$96];
    var $98 = $97 & 255;
    var $99 = $98 & 15;
    var $100 = HEAP32[$13 >> 2];
    var $101 = $100 - $99 | 0;
    HEAP32[$13 >> 2] = $101;
    label = 17;
    break;
   case 15:
    var $103 = HEAP8[$3];
    var $104 = $103 & 255;
    var $105 = $104 << 8;
    var $106 = HEAP8[$6];
    var $107 = $106 & 255;
    var $108 = $105 | $107;
    HEAP32[$2 >> 2] = $108;
    label = 4;
    break;
   case 16:
    var $109 = ($27 | 0) == 65498;
    if ($109) {
      label = 17;
      break;
    } else {
      label = 4;
      break;
    }
   case 17:
    if ($19) {
      label = 18;
      break;
    } else {
      var $_0 = 1;
      label = 26;
      break;
    }
   case 18:
    var $110 = $jh + 56 | 0;
    var $111 = HEAP32[$110 >> 2];
    var $112 = ($111 | 0) == 0;
    if ($112) {
      label = 20;
      break;
    } else {
      var $113 = $111;
      label = 19;
      break;
    }
   case 19:
    var $113;
    var $114 = $jh + 60 | 0;
    var $115 = HEAP32[$114 >> 2];
    var $116 = ($115 | 0) == 0;
    if ($116) {
      label = 27;
      break;
    } else {
      var $134 = $115;
      label = 28;
      break;
    }
   case 20:
    var $118 = $jh + 52 | 0;
    var $119 = HEAP32[$118 >> 2];
    HEAP32[$110 >> 2] = $119;
    var $113 = $119;
    label = 19;
    break;
   case 21:
    var $120 = $jh + 52 | 0;
    var $c_247 = 1;
    label = 23;
    break;
   case 22:
    HEAP32[$114 >> 2] = $113;
    HEAP32[$135 >> 2] = $113;
    HEAP32[$140 >> 2] = $113;
    HEAP32[$145 >> 2] = $113;
    var $121 = ($149 | 0) > 0;
    if ($121) {
      label = 21;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $c_247;
    var $123 = HEAP32[$120 >> 2];
    var $124 = $jh + 52 + ($c_247 << 2) | 0;
    HEAP32[$124 >> 2] = $123;
    var $125 = HEAP32[$12 >> 2];
    var $126 = ($c_247 | 0) < ($125 | 0);
    if ($126) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $phitmp = $c_247 + 1 | 0;
    var $c_247 = $phitmp;
    label = 23;
    break;
   case 25:
    var $127 = HEAP32[$16 >> 2];
    var $128 = HEAP32[$18 >> 2];
    var $129 = $128 * $127 & -1;
    var $130 = _calloc($129, 4);
    var $131 = $130;
    var $132 = $jh + 92 | 0;
    HEAP32[$132 >> 2] = $131;
    _merror($130, 5580660);
    HEAP8[5242884] = 1;
    var $_0 = 1;
    label = 26;
    break;
   case 26:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   case 27:
    HEAP32[$114 >> 2] = $113;
    var $134 = $113;
    label = 28;
    break;
   case 28:
    var $134;
    var $135 = $jh + 64 | 0;
    var $136 = HEAP32[$135 >> 2];
    var $137 = ($136 | 0) == 0;
    if ($137) {
      label = 29;
      break;
    } else {
      var $139 = $136;
      label = 30;
      break;
    }
   case 29:
    HEAP32[$135 >> 2] = $134;
    var $139 = $134;
    label = 30;
    break;
   case 30:
    var $139;
    var $140 = $jh + 68 | 0;
    var $141 = HEAP32[$140 >> 2];
    var $142 = ($141 | 0) == 0;
    if ($142) {
      label = 31;
      break;
    } else {
      var $144 = $141;
      label = 32;
      break;
    }
   case 31:
    HEAP32[$140 >> 2] = $139;
    var $144 = $139;
    label = 32;
    break;
   case 32:
    var $144;
    var $145 = $jh + 72 | 0;
    var $146 = HEAP32[$145 >> 2];
    var $147 = ($146 | 0) == 0;
    if ($147) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$145 >> 2] = $144;
    label = 34;
    break;
   case 34:
    var $149 = HEAP32[$12 >> 2];
    var $150 = ($149 | 0) == 0;
    if ($150) {
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
  }
}
_ljpeg_start["X"] = 1;
function _ljpeg_end($jh) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $jh + 76 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $2;
    _free($5);
    label = 4;
    break;
   case 4:
    var $7 = $jh + 80 | 0;
    var $8 = HEAP32[$7 >> 2];
    var $9 = ($8 | 0) == 0;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $11 = $8;
    _free($11);
    label = 6;
    break;
   case 6:
    var $13 = $jh + 84 | 0;
    var $14 = HEAP32[$13 >> 2];
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $17 = $14;
    _free($17);
    label = 8;
    break;
   case 8:
    var $19 = $jh + 88 | 0;
    var $20 = HEAP32[$19 >> 2];
    var $21 = ($20 | 0) == 0;
    if ($21) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $23 = $20;
    _free($23);
    label = 10;
    break;
   case 10:
    var $25 = $jh + 92 | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26;
    _free($27);
    return;
  }
}
function _ljpeg_diff($huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[$huff >> 1];
    var $2 = $1 & 65535;
    var $3 = $huff + 2 | 0;
    var $4 = _getbithuff($2, $3);
    var $5 = ($4 | 0) == 16;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $7 = HEAP32[5427976 >> 2];
    var $8 = ($7 | 0) == 0;
    var $9 = $7 >>> 0 > 16842751;
    var $or_cond = $8 | $9;
    if ($or_cond) {
      var $_0 = -32768;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $11 = _getbithuff($4, 0);
    var $12 = $4 - 1 | 0;
    var $13 = 1 << $12;
    var $14 = $11 & $13;
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 5;
      break;
    } else {
      var $_0 = $11;
      label = 6;
      break;
    }
   case 5:
    var $_neg = -1 << $4;
    var $_neg9 = $_neg + 1 | 0;
    var $17 = $_neg9 + $11 | 0;
    var $_0 = $17;
    label = 6;
    break;
   case 6:
    var $_0;
    return $_0;
  }
}
function _ljpeg_row($jrow, $jh) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $jh + 8 | 0;
    var $2 = HEAP32[$1 >> 2];
    var $3 = $2 * $jrow & -1;
    var $4 = $jh + 24 | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6 = ($3 | 0) % ($5 | 0);
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 3;
      break;
    } else {
      var $42 = $2;
      label = 9;
      break;
    }
   case 3:
    var $9 = $jh | 0;
    var $10 = HEAP32[$9 >> 2];
    var $11 = $10 - 1 | 0;
    var $12 = 1 << $11;
    var $13 = $jh + 28 | 0;
    HEAP32[$13 >> 2] = $12;
    var $14 = $jh + 32 | 0;
    HEAP32[$14 >> 2] = $12;
    var $15 = $jh + 36 | 0;
    HEAP32[$15 >> 2] = $12;
    var $16 = $jh + 40 | 0;
    HEAP32[$16 >> 2] = $12;
    var $17 = $jh + 44 | 0;
    HEAP32[$17 >> 2] = $12;
    var $18 = $jh + 48 | 0;
    HEAP32[$18 >> 2] = $12;
    var $19 = ($jrow | 0) == 0;
    if ($19) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _fseek($21, -2, 1);
    var $mark_0 = 0;
    label = 5;
    break;
   case 5:
    var $mark_0;
    var $24 = $mark_0 << 8;
    var $25 = $24 & 16776960;
    var $26 = HEAP32[5264116 >> 2];
    var $27 = _fgetc($26);
    var $28 = $25 + $27 | 0;
    var $29 = ($27 | 0) == -1;
    if ($29) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $31 = $28 & 65520;
    var $32 = ($31 | 0) == 65488;
    if ($32) {
      label = 7;
      break;
    } else {
      var $mark_0 = $28;
      label = 5;
      break;
    }
   case 7:
    var $33 = _getbithuff(-1, 0);
    var $_pre = HEAP32[$1 >> 2];
    var $42 = $_pre;
    label = 9;
    break;
   case 8:
    var $34 = $48 ^ 1;
    var $35 = -$34 | 0;
    var $36 = $47 & $35;
    var $37 = $44 + ($36 << 1) | 0;
    var $38 = $jh + 16 | 0;
    var $39 = $jh | 0;
    var $40 = ($jrow | 0) == 0;
    var $41 = $jh + 20 | 0;
    var $col_059 = 0;
    var $spred_061 = 0;
    var $row_sroa_0_0 = $51;
    var $row_sroa_1_0 = $37;
    var $54 = $46;
    var $53 = $42;
    label = 10;
    break;
   case 9:
    var $42;
    var $43 = $jh + 92 | 0;
    var $44 = HEAP32[$43 >> 2];
    var $45 = $jh + 12 | 0;
    var $46 = HEAP32[$45 >> 2];
    var $47 = $46 * $42 & -1;
    var $48 = $jrow & 1;
    var $49 = -$48 | 0;
    var $50 = $47 & $49;
    var $51 = $44 + ($50 << 1) | 0;
    var $52 = ($42 | 0) > 0;
    if ($52) {
      label = 8;
      break;
    } else {
      label = 33;
      break;
    }
   case 10:
    var $53;
    var $54;
    var $row_sroa_1_0;
    var $row_sroa_0_0;
    var $spred_061;
    var $col_059;
    var $55 = ($54 | 0) > 0;
    if ($55) {
      label = 11;
      break;
    } else {
      var $spred_1_lcssa = $spred_061;
      var $row_sroa_0_1 = $row_sroa_0_0;
      var $row_sroa_1_1 = $row_sroa_1_0;
      var $151 = $54;
      var $150 = $53;
      label = 32;
      break;
    }
   case 11:
    var $56 = ($col_059 | 0) == 0;
    var $or_cond50 = $40 | $56;
    var $c_252 = 0;
    var $spred_155 = $spred_061;
    var $59 = $row_sroa_0_0;
    var $58 = $row_sroa_1_0;
    label = 12;
    break;
   case 12:
    var $58;
    var $59;
    var $spred_155;
    var $c_252;
    var $60 = $jh + 52 + ($c_252 << 2) | 0;
    var $61 = HEAP32[$60 >> 2];
    var $62 = _ljpeg_diff($61);
    var $63 = HEAP32[$38 >> 2];
    var $64 = ($63 | 0) == 0;
    var $65 = ($c_252 | 0) > ($63 | 0);
    var $or_cond = $64 | $65;
    if ($or_cond) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $67 = $c_252 | $col_059;
    var $68 = ($67 | 0) == 0;
    if ($68) {
      label = 14;
      break;
    } else {
      var $pred_0 = $spred_155;
      label = 17;
      break;
    }
   case 14:
    if ($56) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $71 = HEAP32[$45 >> 2];
    var $72 = -$71 | 0;
    var $73 = $59 + ($72 << 1) | 0;
    var $74 = HEAP16[$73 >> 1];
    var $75 = $74 & 65535;
    var $pred_0 = $75;
    label = 17;
    break;
   case 16:
    var $76 = $jh + 28 + ($c_252 << 2) | 0;
    var $77 = HEAP32[$76 >> 2];
    var $78 = $77 + $62 | 0;
    HEAP32[$76 >> 2] = $78;
    var $pred_1 = $77;
    label = 26;
    break;
   case 17:
    var $pred_0;
    if ($or_cond50) {
      var $pred_1 = $pred_0;
      label = 26;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $81 = HEAP32[$41 >> 2];
    if (($81 | 0) == 2) {
      label = 19;
      break;
    } else if (($81 | 0) == 3) {
      label = 20;
      break;
    } else if (($81 | 0) == 4) {
      label = 21;
      break;
    } else if (($81 | 0) == 5) {
      label = 22;
      break;
    } else if (($81 | 0) == 6) {
      label = 23;
      break;
    } else if (($81 | 0) == 7) {
      label = 24;
      break;
    } else if (($81 | 0) == 1) {
      var $pred_1 = $pred_0;
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 19:
    var $83 = HEAP16[$58 >> 1];
    var $84 = $83 & 65535;
    var $pred_1 = $84;
    label = 26;
    break;
   case 20:
    var $86 = HEAP32[$45 >> 2];
    var $87 = -$86 | 0;
    var $88 = $58 + ($87 << 1) | 0;
    var $89 = HEAP16[$88 >> 1];
    var $90 = $89 & 65535;
    var $pred_1 = $90;
    label = 26;
    break;
   case 21:
    var $92 = HEAP16[$58 >> 1];
    var $93 = $92 & 65535;
    var $94 = $93 + $pred_0 | 0;
    var $95 = HEAP32[$45 >> 2];
    var $96 = -$95 | 0;
    var $97 = $58 + ($96 << 1) | 0;
    var $98 = HEAP16[$97 >> 1];
    var $99 = $98 & 65535;
    var $100 = $94 - $99 | 0;
    var $pred_1 = $100;
    label = 26;
    break;
   case 22:
    var $102 = HEAP16[$58 >> 1];
    var $103 = $102 & 65535;
    var $104 = HEAP32[$45 >> 2];
    var $105 = -$104 | 0;
    var $106 = $58 + ($105 << 1) | 0;
    var $107 = HEAP16[$106 >> 1];
    var $108 = $107 & 65535;
    var $109 = $103 - $108 | 0;
    var $110 = $109 >> 1;
    var $111 = $110 + $pred_0 | 0;
    var $pred_1 = $111;
    label = 26;
    break;
   case 23:
    var $113 = HEAP16[$58 >> 1];
    var $114 = $113 & 65535;
    var $115 = HEAP32[$45 >> 2];
    var $116 = -$115 | 0;
    var $117 = $58 + ($116 << 1) | 0;
    var $118 = HEAP16[$117 >> 1];
    var $119 = $118 & 65535;
    var $120 = $pred_0 - $119 | 0;
    var $121 = $120 >> 1;
    var $122 = $121 + $114 | 0;
    var $pred_1 = $122;
    label = 26;
    break;
   case 24:
    var $124 = HEAP16[$58 >> 1];
    var $125 = $124 & 65535;
    var $126 = $125 + $pred_0 | 0;
    var $127 = $126 >> 1;
    var $pred_1 = $127;
    label = 26;
    break;
   case 25:
    var $pred_1 = 0;
    label = 26;
    break;
   case 26:
    var $pred_1;
    var $130 = $pred_1 + $62 | 0;
    var $131 = $130 & 65535;
    HEAP16[$59 >> 1] = $131;
    var $132 = $130 & 65535;
    var $133 = HEAP32[$39 >> 2];
    var $134 = $132 >>> ($133 >>> 0);
    var $135 = ($134 | 0) == 0;
    if ($135) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    _derror();
    label = 28;
    break;
   case 28:
    var $138 = HEAP32[$38 >> 2];
    var $139 = ($c_252 | 0) > ($138 | 0);
    if ($139) {
      var $spred_2 = $spred_155;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $141 = HEAP16[$59 >> 1];
    var $142 = $141 & 65535;
    var $spred_2 = $142;
    label = 30;
    break;
   case 30:
    var $spred_2;
    var $144 = $59 + 2 | 0;
    var $145 = $58 + 2 | 0;
    var $146 = $c_252 + 1 | 0;
    var $147 = HEAP32[$45 >> 2];
    var $148 = ($146 | 0) < ($147 | 0);
    if ($148) {
      var $c_252 = $146;
      var $spred_155 = $spred_2;
      var $59 = $144;
      var $58 = $145;
      label = 12;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $_pre1 = HEAP32[$1 >> 2];
    var $spred_1_lcssa = $spred_2;
    var $row_sroa_0_1 = $144;
    var $row_sroa_1_1 = $145;
    var $151 = $147;
    var $150 = $_pre1;
    label = 32;
    break;
   case 32:
    var $150;
    var $151;
    var $row_sroa_1_1;
    var $row_sroa_0_1;
    var $spred_1_lcssa;
    var $152 = $col_059 + 1 | 0;
    var $153 = ($152 | 0) < ($150 | 0);
    if ($153) {
      var $col_059 = $152;
      var $spred_061 = $spred_1_lcssa;
      var $row_sroa_0_0 = $row_sroa_0_1;
      var $row_sroa_1_0 = $row_sroa_1_1;
      var $54 = $151;
      var $53 = $150;
      label = 10;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    return $51;
  }
}
_ljpeg_row["X"] = 1;
function _lossless_jpeg_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $1 = _ljpeg_start($jh, 0);
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $4 = $jh + 8 | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $jh + 12 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $7 * $5 & -1;
    var $9 = $jh + 4 | 0;
    var $10 = HEAP32[$9 >> 2];
    var $11 = ($10 | 0) > 0;
    if ($11) {
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 4:
    var $12 = ($8 | 0) > 0;
    var $jrow_028 = 0;
    var $row_029 = 0;
    var $col_030 = 0;
    label = 5;
    break;
   case 5:
    var $col_030;
    var $row_029;
    var $jrow_028;
    var $14 = _ljpeg_row($jrow_028, $jh);
    var $15 = HEAP32[5263696 >> 2];
    var $16 = $15 & 1;
    var $17 = ($16 | 0) == 0;
    if ($17) {
      var $row_2_ph = $row_029;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $19 = $jrow_028 & 1;
    var $20 = ($19 | 0) == 0;
    if ($20) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $22 = HEAP16[5398712 >> 1];
    var $23 = $22 & 65535;
    var $24 = $23 - 1 | 0;
    var $_neg = ($jrow_028 | 0) / -2 & -1;
    var $25 = $24 + $_neg | 0;
    var $row_2_ph = $25;
    label = 9;
    break;
   case 8:
    var $27 = ($jrow_028 | 0) / 2 & -1;
    var $row_2_ph = $27;
    label = 9;
    break;
   case 9:
    var $row_2_ph;
    if ($12) {
      label = 10;
      break;
    } else {
      var $row_2_lcssa = $row_2_ph;
      var $col_1_lcssa = $col_030;
      label = 19;
      break;
    }
   case 10:
    var $28 = $jrow_028 * $8 & -1;
    var $jcol_023 = 0;
    var $row_224 = $row_2_ph;
    var $col_125 = $col_030;
    var $rp_026 = $14;
    label = 11;
    break;
   case 11:
    var $rp_026;
    var $col_125;
    var $row_224;
    var $jcol_023;
    var $29 = $rp_026 + 2 | 0;
    var $30 = HEAP16[$rp_026 >> 1];
    var $31 = $30 & 65535;
    var $32 = 5428500 + ($31 << 1) | 0;
    var $33 = HEAP16[$32 >> 1];
    var $34 = HEAP16[5560200 >> 1];
    var $35 = $34 << 16 >> 16 == 0;
    if ($35) {
      var $col_2 = $col_125;
      var $row_3 = $row_224;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $37 = $jcol_023 + $28 | 0;
    var $38 = HEAP16[5560202 >> 1];
    var $39 = $38 & 65535;
    var $40 = HEAP32[$9 >> 2];
    var $41 = $39 * $40 & -1;
    var $42 = ($37 | 0) / ($41 | 0) & -1;
    var $43 = $34 & 65535;
    var $44 = ($42 | 0) >= ($43 | 0);
    var $_ = $44 ? $43 : $42;
    var $45 = $_ * $41 & -1;
    var $46 = $37 - $45 | 0;
    var $47 = $44 ? 2 : 1;
    var $48 = 5560200 + ($47 << 1) | 0;
    var $49 = HEAP16[$48 >> 1];
    var $50 = $49 & 65535;
    var $51 = ($46 | 0) / ($50 | 0) & -1;
    var $52 = ($46 | 0) % ($50 | 0);
    var $53 = $_ * $39 & -1;
    var $54 = $52 + $53 | 0;
    var $col_2 = $54;
    var $row_3 = $51;
    label = 13;
    break;
   case 13:
    var $row_3;
    var $col_2;
    var $55 = HEAP16[5245028 >> 1];
    var $56 = $55 & 65535;
    var $57 = $55 << 16 >> 16 == 3984;
    if ($57) {
      label = 14;
      break;
    } else {
      var $col_3 = $col_2;
      var $row_4 = $row_3;
      label = 16;
      break;
    }
   case 14:
    var $59 = $col_2 - 2 | 0;
    var $60 = ($59 | 0) < 0;
    if ($60) {
      label = 15;
      break;
    } else {
      var $col_3 = $59;
      var $row_4 = $row_3;
      label = 16;
      break;
    }
   case 15:
    var $62 = $row_3 - 1 | 0;
    var $63 = $56 + $59 | 0;
    var $col_3 = $63;
    var $row_4 = $62;
    label = 16;
    break;
   case 16:
    var $row_4;
    var $col_3;
    var $65 = ($row_4 | 0) > -1;
    if ($65) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $67 = $56 * $row_4 & -1;
    var $68 = $67 + $col_3 | 0;
    var $69 = HEAP32[5245032 >> 2];
    var $70 = $69 + ($68 << 1) | 0;
    HEAP16[$70 >> 1] = $33;
    label = 18;
    break;
   case 18:
    var $72 = $col_3 + 1 | 0;
    var $73 = ($72 | 0) < ($56 | 0);
    var $74 = $73 & 1;
    var $75 = $74 ^ 1;
    var $row_4_ = $75 + $row_4 | 0;
    var $_22 = $73 ? $72 : 0;
    var $76 = $jcol_023 + 1 | 0;
    var $exitcond = ($76 | 0) == ($8 | 0);
    if ($exitcond) {
      var $row_2_lcssa = $row_4_;
      var $col_1_lcssa = $_22;
      label = 19;
      break;
    } else {
      var $jcol_023 = $76;
      var $row_224 = $row_4_;
      var $col_125 = $_22;
      var $rp_026 = $29;
      label = 11;
      break;
    }
   case 19:
    var $col_1_lcssa;
    var $row_2_lcssa;
    var $77 = $jrow_028 + 1 | 0;
    var $78 = HEAP32[$9 >> 2];
    var $79 = ($77 | 0) < ($78 | 0);
    if ($79) {
      var $jrow_028 = $77;
      var $row_029 = $row_2_lcssa;
      var $col_030 = $col_1_lcssa;
      label = 5;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _ljpeg_end($jh);
    label = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_lossless_jpeg_load_raw["X"] = 1;
function _adobe_copy_pixel($row, $col, $rp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264100 >> 2];
    var $2 = ($1 | 0) == 2;
    var $3 = HEAP32[5244920 >> 2];
    var $4 = ($3 | 0) != 0;
    var $or_cond = $2 & $4;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $6 = HEAP32[$rp >> 2];
    var $7 = $6 + 2 | 0;
    HEAP32[$rp >> 2] = $7;
    label = 4;
    break;
   case 4:
    var $9 = HEAP32[5245032 >> 2];
    var $10 = ($9 | 0) == 0;
    if ($10) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $12 = HEAP16[5245036 >> 1];
    var $13 = $12 & 65535;
    var $14 = $13 >>> 0 > $row >>> 0;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $16 = HEAP16[5245028 >> 1];
    var $17 = $16 & 65535;
    var $18 = $17 >>> 0 > $col >>> 0;
    if ($18) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $20 = HEAP32[$rp >> 2];
    var $21 = HEAP16[$20 >> 1];
    var $22 = $21 & 65535;
    var $23 = 5428500 + ($22 << 1) | 0;
    var $24 = HEAP16[$23 >> 1];
    var $25 = $17 * $row & -1;
    var $26 = $25 + $col | 0;
    var $27 = $9 + ($26 << 1) | 0;
    HEAP16[$27 >> 1] = $24;
    label = 8;
    break;
   case 8:
    var $28 = HEAP32[$rp >> 2];
    var $29 = $28 + ($1 << 1) | 0;
    var $storemerge = $29;
    label = 15;
    break;
   case 9:
    var $31 = HEAP16[5398712 >> 1];
    var $32 = $31 & 65535;
    var $33 = $32 >>> 0 > $row >>> 0;
    if ($33) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre3 = HEAP32[5243580 >> 2];
    var $51 = $_pre3;
    label = 14;
    break;
   case 11:
    var $35 = HEAP16[5242964 >> 1];
    var $36 = $35 & 65535;
    var $37 = $36 >>> 0 <= $col >>> 0;
    var $38 = HEAP32[5243580 >> 2];
    var $39 = ($38 | 0) == 0;
    var $or_cond21 = $37 | $39;
    if ($or_cond21) {
      var $51 = $38;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre = HEAP32[5264108 >> 2];
    var $c_019 = 0;
    label = 13;
    break;
   case 13:
    var $c_019;
    var $40 = HEAP32[$rp >> 2];
    var $41 = $40 + ($c_019 << 1) | 0;
    var $42 = HEAP16[$41 >> 1];
    var $43 = $42 & 65535;
    var $44 = 5428500 + ($43 << 1) | 0;
    var $45 = HEAP16[$44 >> 1];
    var $46 = $36 * $row & -1;
    var $47 = $46 + $col | 0;
    var $48 = $_pre + ($47 << 3) + ($c_019 << 1) | 0;
    HEAP16[$48 >> 1] = $45;
    var $49 = $c_019 + 1 | 0;
    var $50 = $49 >>> 0 < $38 >>> 0;
    if ($50) {
      var $c_019 = $49;
      label = 13;
      break;
    } else {
      var $51 = $38;
      label = 14;
      break;
    }
   case 14:
    var $51;
    var $52 = HEAP32[$rp >> 2];
    var $53 = $52 + ($51 << 1) | 0;
    var $storemerge = $53;
    label = 15;
    break;
   case 15:
    var $storemerge;
    var $55 = $storemerge - 2 | 0;
    var $storemerge4 = $or_cond ? $55 : $storemerge;
    HEAP32[$rp >> 2] = $storemerge4;
    return;
  }
}
_adobe_copy_pixel["X"] = 1;
function _canon_sraw_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $v = __stackBase__ + 96;
    var $1 = $v;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    var $2 = _ljpeg_start($jh, 0);
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 51;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $jh + 8 | 0;
    var $6 = HEAP32[$5 >> 2];
    var $7 = $6 >> 1;
    HEAP32[$5 >> 2] = $7;
    var $8 = $jh + 12 | 0;
    var $9 = HEAP32[$8 >> 2];
    var $10 = $7 * $9 & -1;
    var $11 = HEAP16[5560200 >> 1];
    var $slice_0160 = 1;
    var $ecol_0161 = 0;
    var $jrow_0162 = 0;
    var $jcol_0163 = 0;
    var $rp_0164 = 0;
    var $14 = $11;
    var $13 = $9;
    label = 4;
    break;
   case 4:
    var $13;
    var $14;
    var $rp_0164;
    var $jcol_0163;
    var $jrow_0162;
    var $ecol_0161;
    var $slice_0160;
    var $15 = HEAP16[5560202 >> 1];
    var $16 = $15 & 65535;
    var $17 = $16 << 1;
    var $18 = ($17 | 0) / ($13 | 0) & -1;
    var $19 = $18 + $ecol_0161 | 0;
    var $20 = $14 << 16 >> 16 == 0;
    var $_pre17 = HEAP16[5245028 >> 1];
    if ($20) {
      var $25 = $_pre17;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $22 = $_pre17 & 65535;
    var $23 = $22 - 1 | 0;
    var $24 = ($19 | 0) > ($23 | 0);
    if ($24) {
      var $25 = $_pre17;
      label = 6;
      break;
    } else {
      var $ecol_1 = $19;
      label = 7;
      break;
    }
   case 6:
    var $25;
    var $26 = $25 & 65535;
    var $27 = $26 & 65534;
    var $ecol_1 = $27;
    label = 7;
    break;
   case 7:
    var $ecol_1;
    var $28 = HEAP16[5398712 >> 1];
    var $29 = $28 << 16 >> 16 == 0;
    if ($29) {
      var $jrow_1_lcssa = $jrow_0162;
      var $jcol_1_lcssa = $jcol_0163;
      var $rp_1_lcssa = $rp_0164;
      var $89 = $13;
      var $88 = $14;
      label = 20;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $30 = ($ecol_0161 | 0) < ($ecol_1 | 0);
    var $_pre4 = HEAP16[5242964 >> 1];
    var $row_0150 = 0;
    var $jrow_1151 = $jrow_0162;
    var $jcol_1152 = $jcol_0163;
    var $rp_1153 = $rp_0164;
    var $33 = $_pre4;
    var $32 = $13;
    var $31 = $28;
    label = 9;
    break;
   case 9:
    var $31;
    var $32;
    var $33;
    var $rp_1153;
    var $jcol_1152;
    var $jrow_1151;
    var $row_0150;
    var $34 = HEAP32[5264108 >> 2];
    var $35 = $33 & 65535;
    var $36 = $35 * $row_0150 & -1;
    if ($30) {
      var $col_0139 = $ecol_0161;
      var $jrow_2141 = $jrow_1151;
      var $jcol_2142 = $jcol_1152;
      var $rp_2143 = $rp_1153;
      var $37 = $33;
      label = 10;
      break;
    } else {
      var $jrow_2_lcssa = $jrow_1151;
      var $jcol_2_lcssa = $jcol_1152;
      var $rp_2_lcssa = $rp_1153;
      var $82 = $33;
      var $81 = $32;
      var $80 = $31;
      label = 18;
      break;
    }
   case 10:
    var $37;
    var $rp_2143;
    var $jcol_2142;
    var $jrow_2141;
    var $col_0139;
    var $38 = ($jcol_2142 | 0) % ($10 | 0);
    var $39 = ($38 | 0) == 0;
    if ($39) {
      label = 11;
      break;
    } else {
      var $rp_3 = $rp_2143;
      var $jrow_3 = $jrow_2141;
      var $44 = $37;
      label = 12;
      break;
    }
   case 11:
    var $41 = $jrow_2141 + 1 | 0;
    var $42 = _ljpeg_row($jrow_2141, $jh);
    var $_pre5 = HEAP16[5242964 >> 1];
    var $rp_3 = $42;
    var $jrow_3 = $41;
    var $44 = $_pre5;
    label = 12;
    break;
   case 12:
    var $44;
    var $jrow_3;
    var $rp_3;
    var $45 = $44 & 65535;
    var $46 = ($col_0139 | 0) < ($45 | 0);
    if ($46) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $47 = HEAP32[$8 >> 2];
    var $48 = $47 - 2 | 0;
    var $49 = ($48 | 0) > 0;
    var $50 = $col_0139 + $36 | 0;
    if ($49) {
      var $c_0135 = 0;
      label = 14;
      break;
    } else {
      var $_lcssa134 = $47;
      var $_sum_pre_phi = $50;
      label = 15;
      break;
    }
   case 14:
    var $c_0135;
    var $51 = $c_0135 + $38 | 0;
    var $52 = $rp_3 + ($51 << 1) | 0;
    var $53 = HEAP16[$52 >> 1];
    var $54 = $c_0135 >> 1;
    var $55 = $45 * $54 & -1;
    var $56 = $c_0135 & 1;
    var $57 = $50 + $56 | 0;
    var $_sum109 = $57 + $55 | 0;
    var $58 = $34 + ($_sum109 << 3) | 0;
    HEAP16[$58 >> 1] = $53;
    var $59 = $c_0135 + 1 | 0;
    var $60 = HEAP32[$8 >> 2];
    var $61 = $60 - 2 | 0;
    var $62 = ($59 | 0) < ($61 | 0);
    if ($62) {
      var $c_0135 = $59;
      label = 14;
      break;
    } else {
      var $_lcssa134 = $60;
      var $_sum_pre_phi = $50;
      label = 15;
      break;
    }
   case 15:
    var $_sum_pre_phi;
    var $_lcssa134;
    var $63 = $38 - 2 | 0;
    var $64 = $63 + $_lcssa134 | 0;
    var $65 = $rp_3 + ($64 << 1) | 0;
    var $66 = HEAP16[$65 >> 1];
    var $67 = $66 - 16384 & 65535;
    var $68 = $34 + ($_sum_pre_phi << 3) + 2 | 0;
    HEAP16[$68 >> 1] = $67;
    var $69 = HEAP32[$8 >> 2];
    var $70 = $38 - 1 | 0;
    var $71 = $70 + $69 | 0;
    var $72 = $rp_3 + ($71 << 1) | 0;
    var $73 = HEAP16[$72 >> 1];
    var $74 = $73 - 16384 & 65535;
    var $75 = $34 + ($_sum_pre_phi << 3) + 4 | 0;
    HEAP16[$75 >> 1] = $74;
    label = 16;
    break;
   case 16:
    var $76 = $col_0139 + 2 | 0;
    var $77 = HEAP32[$8 >> 2];
    var $78 = $77 + $38 | 0;
    var $79 = ($76 | 0) < ($ecol_1 | 0);
    if ($79) {
      var $col_0139 = $76;
      var $jrow_2141 = $jrow_3;
      var $jcol_2142 = $78;
      var $rp_2143 = $rp_3;
      var $37 = $44;
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $_pre15 = HEAP16[5398712 >> 1];
    var $jrow_2_lcssa = $jrow_3;
    var $jcol_2_lcssa = $78;
    var $rp_2_lcssa = $rp_3;
    var $82 = $44;
    var $81 = $77;
    var $80 = $_pre15;
    label = 18;
    break;
   case 18:
    var $80;
    var $81;
    var $82;
    var $rp_2_lcssa;
    var $jcol_2_lcssa;
    var $jrow_2_lcssa;
    var $83 = $81 >> 1;
    var $84 = $row_0150 - 1 | 0;
    var $85 = $84 + $83 | 0;
    var $86 = $80 & 65535;
    var $87 = ($85 | 0) < ($86 | 0);
    if ($87) {
      var $row_0150 = $85;
      var $jrow_1151 = $jrow_2_lcssa;
      var $jcol_1152 = $jcol_2_lcssa;
      var $rp_1153 = $rp_2_lcssa;
      var $33 = $82;
      var $32 = $81;
      var $31 = $80;
      label = 9;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre = HEAP16[5560200 >> 1];
    var $jrow_1_lcssa = $jrow_2_lcssa;
    var $jcol_1_lcssa = $jcol_2_lcssa;
    var $rp_1_lcssa = $rp_2_lcssa;
    var $89 = $81;
    var $88 = $_pre;
    label = 20;
    break;
   case 20:
    var $88;
    var $89;
    var $rp_1_lcssa;
    var $jcol_1_lcssa;
    var $jrow_1_lcssa;
    var $90 = $88 & 65535;
    var $91 = ($slice_0160 | 0) > ($90 | 0);
    if ($91) {
      var $cp_0 = 5263308;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $phitmp18 = $slice_0160 + 1 | 0;
    var $slice_0160 = $phitmp18;
    var $ecol_0161 = $ecol_1;
    var $jrow_0162 = $jrow_1_lcssa;
    var $jcol_0163 = $jcol_1_lcssa;
    var $rp_0164 = $rp_1_lcssa;
    var $14 = $88;
    var $13 = $89;
    label = 4;
    break;
   case 22:
    var $cp_0;
    var $92 = HEAP8[$cp_0];
    var $93 = $92 << 24 >> 24 == 0;
    if ($93) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $95 = $92 << 24 >> 24;
    var $isdigittmp = $95 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    var $96 = $cp_0 + 1 | 0;
    if ($isdigit) {
      label = 24;
      break;
    } else {
      var $cp_0 = $96;
      label = 22;
      break;
    }
   case 24:
    var $97 = $v | 0;
    var $98 = $v + 4 | 0;
    var $99 = $v + 8 | 0;
    var $100 = _sscanf($cp_0, 5579012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $97, HEAP32[tempInt + 4 >> 2] = $98, HEAP32[tempInt + 8 >> 2] = $99, tempInt));
    var $101 = $jh + 16 | 0;
    var $102 = HEAP32[5243560 >> 2];
    var $103 = $102 >>> 0 > 2147484288;
    if ($103) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $_pre12 = HEAP32[$101 >> 2];
    var $118 = $_pre12;
    label = 27;
    break;
   case 26:
    var $105 = HEAP32[$97 >> 2];
    var $106 = HEAP32[$98 >> 2];
    var $107 = $105 * 1e3 & -1;
    var $108 = HEAP32[$101 >> 2];
    var $109 = $107 + $106 | 0;
    var $110 = $108 << 2;
    var $111 = HEAP32[$99 >> 2];
    var $112 = $109 * 1e3 & -1;
    var $113 = $110 + 4 | 0;
    var $114 = $112 + $111 | 0;
    var $115 = ($102 | 0) == -2147483112;
    var $116 = ($114 | 0) > 1000006;
    var $or_cond110 = $115 & $116;
    if ($or_cond110) {
      var $118 = $108;
      label = 27;
      break;
    } else {
      var $hue_0 = $113;
      var $121 = $108;
      label = 28;
      break;
    }
   case 27:
    var $118;
    var $119 = $118 << 1;
    var $hue_0 = $119;
    var $121 = $118;
    label = 28;
    break;
   case 28:
    var $121;
    var $hue_0;
    var $122 = HEAP32[5264108 >> 2];
    var $123 = $122 | 0;
    var $124 = HEAP16[5398712 >> 1];
    var $125 = $124 << 16 >> 16 == 0;
    if ($125) {
      var $ip_0_lcssa = $122;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $_pr_pre = HEAP16[5242964 >> 1];
    var $ip_0124 = $122;
    var $row_1128 = 0;
    var $_pr = $_pr_pre;
    var $128 = $121;
    label = 31;
    break;
   case 30:
    var $ip_0_lcssa;
    var $126 = $ip_0_lcssa | 0;
    var $127 = ($122 | 0) < ($ip_0_lcssa | 0);
    if ($127) {
      var $rp_4113 = $123;
      label = 42;
      break;
    } else {
      label = 50;
      break;
    }
   case 31:
    var $128;
    var $_pr;
    var $row_1128;
    var $ip_0124;
    var $129 = $128 >> 1;
    var $130 = $129 & $row_1128;
    var $131 = ($130 | 0) == 0;
    if ($131) {
      var $167 = $_pr;
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $132 = $_pr << 16 >> 16 == 0;
    if ($132) {
      var $_lcssa = 0;
      var $_pr2 = 0;
      label = 40;
      break;
    } else {
      var $col_1118 = 0;
      label = 33;
      break;
    }
   case 33:
    var $col_1118;
    var $133 = $124 & 65535;
    var $134 = $133 - 1 | 0;
    var $135 = ($row_1128 | 0) == ($134 | 0);
    var $136 = $_pr_pre & 65535;
    var $137 = $col_1118 - $136 | 0;
    var $138 = $ip_0124 + ($137 << 3) + 2 | 0;
    var $139 = HEAP16[$138 >> 1];
    if ($135) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $140 = $ip_0124 + ($col_1118 << 3) + 2 | 0;
    HEAP16[$140 >> 1] = $139;
    var $141 = $ip_0124 + ($137 << 3) + 4 | 0;
    var $142 = HEAP16[$141 >> 1];
    var $143 = $ip_0124 + ($col_1118 << 3) + 4 | 0;
    HEAP16[$143 >> 1] = $142;
    label = 56;
    break;
   case 35:
    var $145 = $139 << 16 >> 16;
    var $146 = $136 + $col_1118 | 0;
    var $147 = $ip_0124 + ($146 << 3) + 2 | 0;
    var $148 = HEAP16[$147 >> 1];
    var $149 = $148 << 16 >> 16;
    var $150 = $145 + 1 | 0;
    var $151 = $150 + $149 | 0;
    var $152 = $151 >>> 1;
    var $153 = $152 & 65535;
    var $154 = $ip_0124 + ($col_1118 << 3) + 2 | 0;
    HEAP16[$154 >> 1] = $153;
    var $155 = $ip_0124 + ($137 << 3) + 4 | 0;
    var $156 = HEAP16[$155 >> 1];
    var $157 = $156 << 16 >> 16;
    var $158 = $136 + $col_1118 | 0;
    var $159 = $ip_0124 + ($158 << 3) + 4 | 0;
    var $160 = HEAP16[$159 >> 1];
    var $161 = $160 << 16 >> 16;
    var $162 = $157 + 1 | 0;
    var $163 = $162 + $161 | 0;
    var $164 = $163 >>> 1;
    var $165 = $164 & 65535;
    var $166 = $ip_0124 + ($col_1118 << 3) + 4 | 0;
    HEAP16[$166 >> 1] = $165;
    label = 56;
    break;
   case 36:
    var $167;
    var $168 = $167 & 65535;
    var $169 = ($167 & 65535) > 1;
    if ($169) {
      var $col_2122 = 1;
      label = 37;
      break;
    } else {
      var $_lcssa = $168;
      var $_pr2 = $167;
      label = 40;
      break;
    }
   case 37:
    var $col_2122;
    var $170 = $col_2122 - 1 | 0;
    var $171 = $col_2122 + 1 | 0;
    var $172 = $168 - 1 | 0;
    var $173 = ($col_2122 | 0) == ($172 | 0);
    var $174 = $ip_0124 + ($170 << 3) + 2 | 0;
    var $175 = HEAP16[$174 >> 1];
    if ($173) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $176 = $ip_0124 + ($col_2122 << 3) + 2 | 0;
    HEAP16[$176 >> 1] = $175;
    var $177 = $ip_0124 + ($170 << 3) + 4 | 0;
    var $178 = HEAP16[$177 >> 1];
    var $179 = $ip_0124 + ($col_2122 << 3) + 4 | 0;
    HEAP16[$179 >> 1] = $178;
    label = 57;
    break;
   case 39:
    var $181 = $175 << 16 >> 16;
    var $182 = $ip_0124 + ($171 << 3) + 2 | 0;
    var $183 = HEAP16[$182 >> 1];
    var $184 = $183 << 16 >> 16;
    var $185 = $181 + 1 | 0;
    var $186 = $185 + $184 | 0;
    var $187 = $186 >>> 1;
    var $188 = $187 & 65535;
    var $189 = $ip_0124 + ($col_2122 << 3) + 2 | 0;
    HEAP16[$189 >> 1] = $188;
    var $190 = $ip_0124 + ($170 << 3) + 4 | 0;
    var $191 = HEAP16[$190 >> 1];
    var $192 = $191 << 16 >> 16;
    var $193 = $ip_0124 + ($171 << 3) + 4 | 0;
    var $194 = HEAP16[$193 >> 1];
    var $195 = $194 << 16 >> 16;
    var $196 = $192 + 1 | 0;
    var $197 = $196 + $195 | 0;
    var $198 = $197 >>> 1;
    var $199 = $198 & 65535;
    var $200 = $ip_0124 + ($col_2122 << 3) + 4 | 0;
    HEAP16[$200 >> 1] = $199;
    label = 57;
    break;
   case 40:
    var $_pr2;
    var $_lcssa;
    var $201 = $row_1128 + 1 | 0;
    var $202 = $ip_0124 + ($_lcssa << 3) | 0;
    var $203 = $124 & 65535;
    var $204 = ($201 | 0) < ($203 | 0);
    if ($204) {
      label = 41;
      break;
    } else {
      var $ip_0_lcssa = $202;
      label = 30;
      break;
    }
   case 41:
    var $_pre14 = HEAP32[$101 >> 2];
    var $ip_0124 = $202;
    var $row_1128 = $201;
    var $_pr = $_pr2;
    var $128 = $_pre14;
    label = 31;
    break;
   case 42:
    var $rp_4113;
    if (($102 | 0) == -2147483001 | ($102 | 0) == -2147483007 | ($102 | 0) == -2147483039 | ($102 | 0) == -2147483056 | ($102 | 0) == -2147483112) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $206 = $rp_4113 + 2 | 0;
    var $207 = HEAP16[$206 >> 1];
    var $208 = $207 << 16 >> 16;
    var $209 = $208 << 2;
    var $210 = $209 + $hue_0 | 0;
    var $211 = $210 & 65535;
    HEAP16[$206 >> 1] = $211;
    var $212 = $rp_4113 + 4 | 0;
    var $213 = HEAP16[$212 >> 1];
    var $214 = $213 << 16 >> 16;
    var $215 = $214 << 2;
    var $216 = $215 + $hue_0 | 0;
    var $217 = $216 & 65535;
    HEAP16[$212 >> 1] = $217;
    var $218 = HEAP16[$rp_4113 >> 1];
    var $219 = $218 << 16 >> 16;
    var $sext19 = $210 << 16;
    var $220 = $sext19 >> 16;
    var $221 = $220 * 50 & -1;
    var $sext = $216 << 16;
    var $222 = $sext >> 16;
    var $223 = $222 * 22929 & -1;
    var $224 = $223 + $221 | 0;
    var $225 = $224 >> 14;
    var $226 = $225 + $219 | 0;
    var $227 = $220 * -5640 & -1;
    var $sext20 = $216 << 16;
    var $228 = $sext20 >> 16;
    var $229 = $228 * -11751 & -1;
    var $230 = $229 + $227 | 0;
    var $231 = $230 >> 14;
    var $232 = $231 + $219 | 0;
    var $233 = $220 * 29040 & -1;
    var $234 = $228 * -101 & -1;
    var $235 = $234 + $233 | 0;
    var $236 = $235 >> 14;
    var $237 = $236 + $219 | 0;
    var $pix_sroa_0_0 = $226;
    var $pix_sroa_1_0 = $232;
    var $pix_sroa_2_0 = $237;
    label = 47;
    break;
   case 44:
    var $239 = $102 >>> 0 < 2147484184;
    var $240 = HEAP16[$rp_4113 >> 1];
    if ($239) {
      label = 45;
      break;
    } else {
      var $243 = $240;
      label = 46;
      break;
    }
   case 45:
    var $242 = $240 - 512 & 65535;
    HEAP16[$rp_4113 >> 1] = $242;
    var $243 = $242;
    label = 46;
    break;
   case 46:
    var $243;
    var $244 = $243 << 16 >> 16;
    var $245 = $rp_4113 + 4 | 0;
    var $246 = HEAP16[$245 >> 1];
    var $247 = $246 << 16 >> 16;
    var $248 = $247 + $244 | 0;
    var $249 = $rp_4113 + 2 | 0;
    var $250 = HEAP16[$249 >> 1];
    var $251 = $250 << 16 >> 16;
    var $252 = $251 + $244 | 0;
    var $253 = $251 * -778 & -1;
    var $254 = $247 << 11;
    var $255 = $253 - $254 | 0;
    var $256 = $255 >> 12;
    var $257 = $256 + $244 | 0;
    var $pix_sroa_0_0 = $248;
    var $pix_sroa_1_0 = $257;
    var $pix_sroa_2_0 = $252;
    label = 47;
    break;
   case 47:
    var $pix_sroa_2_0;
    var $pix_sroa_1_0;
    var $pix_sroa_0_0;
    var $258 = HEAP16[5244124 >> 1];
    var $259 = $258 & 65535;
    var $260 = $259 * $pix_sroa_0_0 & -1;
    var $261 = $260 >> 10;
    var $phitmp = ($261 | 0) < 0;
    if ($phitmp) {
      var $264 = 0;
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $263 = ($261 | 0) < 65535;
    var $phitmp108 = $261 & 65535;
    var $phitmp108_ = $263 ? $phitmp108 : -1;
    var $264 = $phitmp108_;
    label = 49;
    break;
   case 49:
    var $264;
    HEAP16[$rp_4113 >> 1] = $264;
    var $265 = HEAP16[5244120 >> 1];
    var $266 = $265 & 65535;
    var $267 = $266 * $pix_sroa_1_0 & -1;
    var $268 = $267 >> 10;
    var $phitmp_1 = ($268 | 0) < 0;
    if ($phitmp_1) {
      var $272 = 0;
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 50:
    _ljpeg_end($jh);
    HEAP32[5263496 >> 2] = 16383;
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return;
   case 52:
    var $271 = ($268 | 0) < 65535;
    var $phitmp108_1 = $268 & 65535;
    var $phitmp108__1 = $271 ? $phitmp108_1 : -1;
    var $272 = $phitmp108__1;
    label = 53;
    break;
   case 53:
    var $272;
    var $273 = $rp_4113 + 2 | 0;
    HEAP16[$273 >> 1] = $272;
    var $274 = HEAP16[5244116 >> 1];
    var $275 = $274 & 65535;
    var $276 = $275 * $pix_sroa_2_0 & -1;
    var $277 = $276 >> 10;
    var $phitmp_2 = ($277 | 0) < 0;
    if ($phitmp_2) {
      var $281 = 0;
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $279 = ($277 | 0) < 65535;
    var $phitmp108_2 = $277 & 65535;
    var $phitmp108__2 = $279 ? $phitmp108_2 : -1;
    var $281 = $phitmp108__2;
    label = 55;
    break;
   case 55:
    var $281;
    var $282 = $rp_4113 + 4 | 0;
    HEAP16[$282 >> 1] = $281;
    var $283 = $rp_4113 + 8 | 0;
    var $284 = $283 >>> 0 < $126 >>> 0;
    if ($284) {
      var $rp_4113 = $283;
      label = 42;
      break;
    } else {
      label = 50;
      break;
    }
   case 56:
    var $286 = $col_1118 + 2 | 0;
    var $287 = ($286 | 0) < ($136 | 0);
    if ($287) {
      var $col_1118 = $286;
      label = 33;
      break;
    } else {
      var $167 = $_pr_pre;
      label = 36;
      break;
    }
   case 57:
    var $289 = $col_2122 + 2 | 0;
    var $290 = ($289 | 0) < ($168 | 0);
    if ($290) {
      var $col_2122 = $289;
      label = 37;
      break;
    } else {
      var $_lcssa = $168;
      var $_pr2 = $167;
      label = 40;
      break;
    }
  }
}
_canon_sraw_load_raw["X"] = 1;
function _lossless_dng_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $rp = __stackBase__ + 96;
    var $1 = HEAP16[5245036 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $jh + 8 | 0;
    var $4 = $jh + 4 | 0;
    var $5 = $jh + 12 | 0;
    var $trow_022 = 0;
    var $tcol_023 = 0;
    label = 4;
    break;
   case 4:
    var $tcol_023;
    var $trow_022;
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _ftell($7);
    var $9 = HEAP32[5243576 >> 2];
    var $10 = $9 >>> 0 < 2147483647;
    if ($10) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _get4();
    var $14 = _fseek($12, $13, 0);
    label = 6;
    break;
   case 6:
    var $16 = _ljpeg_start($jh, 0);
    var $17 = ($16 | 0) == 0;
    if ($17) {
      label = 21;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $19 = HEAP32[$3 >> 2];
    var $20 = HEAP32[5427632 >> 2];
    var $21 = ($20 | 0) == 0;
    if ($21) {
      var $jwide_0 = $19;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $23 = HEAP32[$5 >> 2];
    var $24 = $23 * $19 & -1;
    var $jwide_0 = $24;
    label = 9;
    break;
   case 9:
    var $jwide_0;
    var $26 = HEAP32[5264100 >> 2];
    var $27 = Math.floor(($jwide_0 >>> 0) / ($26 >>> 0));
    var $28 = HEAP32[$4 >> 2];
    var $29 = ($28 | 0) == 0;
    if ($29) {
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $30 = ($27 | 0) == 0;
    var $jrow_016 = 0;
    var $row_017 = 0;
    var $col_018 = 0;
    label = 11;
    break;
   case 11:
    var $col_018;
    var $row_017;
    var $jrow_016;
    var $32 = _ljpeg_row($jrow_016, $jh);
    HEAP32[$rp >> 2] = $32;
    if ($30) {
      var $row_1_lcssa = $row_017;
      var $col_1_lcssa = $col_018;
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre = HEAP32[5243572 >> 2];
    var $jcol_012 = 0;
    var $row_113 = $row_017;
    var $col_114 = $col_018;
    label = 13;
    break;
   case 13:
    var $col_114;
    var $row_113;
    var $jcol_012;
    var $33 = $row_113 + $trow_022 | 0;
    var $34 = $col_114 + $tcol_023 | 0;
    _adobe_copy_pixel($33, $34, $rp);
    var $35 = $col_114 + 1 | 0;
    var $36 = $35 >>> 0 < $_pre >>> 0;
    if ($36) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $38 = HEAP16[5245028 >> 1];
    var $39 = $38 & 65535;
    var $40 = $35 >>> 0 < $39 >>> 0;
    if ($40) {
      var $col_2 = $35;
      var $row_2 = $row_113;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $42 = $row_113 + 1 | 0;
    var $col_2 = 0;
    var $row_2 = $42;
    label = 16;
    break;
   case 16:
    var $row_2;
    var $col_2;
    var $44 = $jcol_012 + 1 | 0;
    var $45 = $44 >>> 0 < $27 >>> 0;
    if ($45) {
      var $jcol_012 = $44;
      var $row_113 = $row_2;
      var $col_114 = $col_2;
      label = 13;
      break;
    } else {
      var $row_1_lcssa = $row_2;
      var $col_1_lcssa = $col_2;
      label = 17;
      break;
    }
   case 17:
    var $col_1_lcssa;
    var $row_1_lcssa;
    var $46 = $jrow_016 + 1 | 0;
    var $47 = HEAP32[$4 >> 2];
    var $48 = $46 >>> 0 < $47 >>> 0;
    if ($48) {
      var $jrow_016 = $46;
      var $row_017 = $row_1_lcssa;
      var $col_018 = $col_1_lcssa;
      label = 11;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $49 = HEAP32[5264116 >> 2];
    var $50 = $8 + 4 | 0;
    var $51 = _fseek($49, $50, 0);
    var $52 = HEAP32[5243572 >> 2];
    var $53 = $52 + $tcol_023 | 0;
    var $54 = HEAP16[5245028 >> 1];
    var $55 = $54 & 65535;
    var $56 = $53 >>> 0 < $55 >>> 0;
    if ($56) {
      var $tcol_1 = $53;
      var $trow_1 = $trow_022;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $58 = HEAP32[5243576 >> 2];
    var $59 = $58 + $trow_022 | 0;
    var $tcol_1 = 0;
    var $trow_1 = $59;
    label = 20;
    break;
   case 20:
    var $trow_1;
    var $tcol_1;
    _ljpeg_end($jh);
    var $61 = HEAP16[5245036 >> 1];
    var $62 = $61 & 65535;
    var $63 = $trow_1 >>> 0 < $62 >>> 0;
    if ($63) {
      var $trow_022 = $trow_1;
      var $tcol_023 = $tcol_1;
      label = 4;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_lossless_dng_load_raw["X"] = 1;
function _packed_dng_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $rp = __stackBase__;
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = HEAP32[5243580 >> 2];
    var $4 = $2 * $3 & -1;
    var $5 = _calloc($4, 2);
    var $6 = $5;
    _merror($5, 5577676);
    var $7 = HEAP16[5245036 >> 1];
    var $8 = $7 << 16 >> 16 == 0;
    if ($8) {
      label = 10;
      break;
    } else {
      var $row_014 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_014;
    var $9 = HEAP32[5244036 >> 2];
    var $10 = ($9 | 0) == 16;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $12 = HEAP16[5245028 >> 1];
    var $13 = $12 & 65535;
    var $14 = HEAP32[5243580 >> 2];
    var $15 = $13 * $14 & -1;
    _read_shorts($6, $15);
    var $_pr = HEAP16[5245028 >> 1];
    var $33 = $_pr;
    label = 7;
    break;
   case 5:
    var $17 = _getbithuff(-1, 0);
    var $18 = HEAP16[5245028 >> 1];
    var $19 = $18 & 65535;
    var $20 = HEAP32[5243580 >> 2];
    var $21 = $19 * $20 & -1;
    var $22 = ($21 | 0) == 0;
    if ($22) {
      var $33 = $18;
      label = 7;
      break;
    } else {
      var $col_011 = 0;
      label = 6;
      break;
    }
   case 6:
    var $col_011;
    var $23 = HEAP32[5244036 >> 2];
    var $24 = _getbithuff($23, 0);
    var $25 = $24 & 65535;
    var $26 = $6 + ($col_011 << 1) | 0;
    HEAP16[$26 >> 1] = $25;
    var $27 = $col_011 + 1 | 0;
    var $28 = HEAP16[5245028 >> 1];
    var $29 = $28 & 65535;
    var $30 = HEAP32[5243580 >> 2];
    var $31 = $29 * $30 & -1;
    var $32 = $27 >>> 0 < $31 >>> 0;
    if ($32) {
      var $col_011 = $27;
      label = 6;
      break;
    } else {
      var $33 = $28;
      label = 7;
      break;
    }
   case 7:
    var $33;
    HEAP32[$rp >> 2] = $6;
    var $34 = $33 << 16 >> 16 == 0;
    if ($34) {
      label = 9;
      break;
    } else {
      var $col_112 = 0;
      label = 8;
      break;
    }
   case 8:
    var $col_112;
    _adobe_copy_pixel($row_014, $col_112, $rp);
    var $35 = $col_112 + 1 | 0;
    var $36 = $33 & 65535;
    var $37 = ($35 | 0) < ($36 | 0);
    if ($37) {
      var $col_112 = $35;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $38 = $row_014 + 1 | 0;
    var $39 = HEAP16[5245036 >> 1];
    var $40 = $39 & 65535;
    var $41 = ($38 | 0) < ($40 | 0);
    if ($41) {
      var $row_014 = $38;
      label = 3;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _free($5);
    STACKTOP = __stackBase__;
    return;
  }
}
_packed_dng_load_raw["X"] = 1;
function _pentax_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8264 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bit = __stackBase__;
    var $huff = __stackBase__ + 60;
    var $vpred = __stackBase__ + 8256;
    var $tmpcast = $vpred;
    var $hpred = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$7$0 = $vpred | 0;
    HEAP32[$st$7$0 >> 2] = $$etemp$0$0;
    var $st$7$1 = $vpred + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $$etemp$0$1;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[5263440 >> 2];
    var $3 = _fseek($1, $2, 0);
    var $4 = _get2();
    var $5 = $4 & 65535;
    var $6 = $5 + 12 | 0;
    var $7 = $6 & 15;
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fseek($8, 12, 1);
    var $10 = ($7 | 0) == 0;
    if ($10) {
      label = 8;
      break;
    } else {
      var $c_041 = 0;
      label = 3;
      break;
    }
   case 3:
    var $c_041;
    var $11 = _get2();
    var $12 = $bit + ($c_041 << 1) | 0;
    HEAP16[$12 >> 1] = $11;
    var $13 = $c_041 + 1 | 0;
    var $14 = ($13 | 0) < ($7 | 0);
    if ($14) {
      var $c_041 = $13;
      label = 3;
      break;
    } else {
      var $c_139 = 0;
      label = 4;
      break;
    }
   case 4:
    var $c_139;
    var $15 = HEAP32[5264116 >> 2];
    var $16 = _fgetc($15);
    var $17 = $16 & 65535;
    var $18 = $bit + 30 + ($c_139 << 1) | 0;
    HEAP16[$18 >> 1] = $17;
    var $19 = $c_139 + 1 | 0;
    var $20 = ($19 | 0) < ($7 | 0);
    if ($20) {
      var $c_139 = $19;
      label = 4;
      break;
    } else {
      var $c_234 = 0;
      label = 5;
      break;
    }
   case 5:
    var $c_234;
    var $21 = $bit + ($c_234 << 1) | 0;
    var $22 = HEAP16[$21 >> 1];
    var $23 = $22 & 65535;
    var $24 = $bit + 30 + ($c_234 << 1) | 0;
    var $25 = HEAP16[$24 >> 1];
    var $26 = $25 & 65535;
    var $27 = 4096 >>> ($26 >>> 0);
    var $28 = $23 + 4095 | 0;
    var $29 = $28 + $27 | 0;
    var $30 = $29 & 4095;
    var $31 = $23 >>> 0 > $30 >>> 0;
    if ($31) {
      label = 7;
      break;
    } else {
      var $i_029 = $23;
      label = 6;
      break;
    }
   case 6:
    var $i_029;
    var $32 = $26 << 8;
    var $33 = $32 | $c_234;
    var $34 = $33 & 65535;
    var $35 = $i_029 + 1 | 0;
    var $36 = $huff + ($35 << 1) | 0;
    HEAP16[$36 >> 1] = $34;
    var $37 = ($35 | 0) > ($30 | 0);
    if ($37) {
      label = 7;
      break;
    } else {
      var $i_029 = $35;
      label = 6;
      break;
    }
   case 7:
    var $38 = $c_234 + 1 | 0;
    var $39 = ($38 | 0) < ($7 | 0);
    if ($39) {
      var $c_234 = $38;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $40 = $huff | 0;
    HEAP16[$40 >> 1] = 12;
    var $41 = HEAP32[5264116 >> 2];
    var $42 = HEAP32[5428492 >> 2];
    var $43 = _fseek($41, $42, 0);
    var $44 = _getbithuff(-1, 0);
    var $45 = HEAP16[5245036 >> 1];
    var $46 = $45 << 16 >> 16 == 0;
    if ($46) {
      label = 20;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_026 = 0;
    var $48 = $_pre;
    var $47 = $45;
    label = 10;
    break;
   case 10:
    var $47;
    var $48;
    var $row_026;
    var $49 = $48 << 16 >> 16 == 0;
    if ($49) {
      var $87 = 0;
      var $86 = $47;
      label = 19;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $50 = $row_026 & 1;
    var $col_025 = 0;
    label = 12;
    break;
   case 12:
    var $col_025;
    var $52 = _ljpeg_diff($40);
    var $53 = ($col_025 | 0) < 2;
    if ($53) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $55 = $tmpcast + ($50 << 2) + ($col_025 << 1) | 0;
    var $56 = HEAP16[$55 >> 1];
    var $57 = $56 & 65535;
    var $58 = $57 + $52 | 0;
    var $59 = $58 & 65535;
    HEAP16[$55 >> 1] = $59;
    var $60 = $hpred + ($col_025 << 1) | 0;
    HEAP16[$60 >> 1] = $59;
    var $_pre3 = $col_025 & 1;
    var $_pre4 = $hpred + ($_pre3 << 1) | 0;
    var $_pre_phi5 = $_pre4;
    label = 15;
    break;
   case 14:
    var $62 = $col_025 & 1;
    var $63 = $hpred + ($62 << 1) | 0;
    var $64 = HEAP16[$63 >> 1];
    var $65 = $64 & 65535;
    var $66 = $65 + $52 | 0;
    var $67 = $66 & 65535;
    HEAP16[$63 >> 1] = $67;
    var $_pre_phi5 = $63;
    label = 15;
    break;
   case 15:
    var $_pre_phi5;
    var $69 = HEAP16[$_pre_phi5 >> 1];
    var $70 = HEAP16[5245028 >> 1];
    var $71 = $70 & 65535;
    var $72 = $71 * $row_026 & -1;
    var $73 = $72 + $col_025 | 0;
    var $74 = HEAP32[5245032 >> 2];
    var $75 = $74 + ($73 << 1) | 0;
    HEAP16[$75 >> 1] = $69;
    var $76 = $69 & 65535;
    var $77 = HEAP32[5244036 >> 2];
    var $78 = $76 >>> ($77 >>> 0);
    var $79 = ($78 | 0) == 0;
    if ($79) {
      var $82 = $70;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $82 = $_pre2;
    label = 17;
    break;
   case 17:
    var $82;
    var $83 = $col_025 + 1 | 0;
    var $84 = $82 & 65535;
    var $85 = ($83 | 0) < ($84 | 0);
    if ($85) {
      var $col_025 = $83;
      label = 12;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $_pre1 = HEAP16[5245036 >> 1];
    var $87 = $82;
    var $86 = $_pre1;
    label = 19;
    break;
   case 19:
    var $86;
    var $87;
    var $88 = $row_026 + 1 | 0;
    var $89 = $86 & 65535;
    var $90 = ($88 | 0) < ($89 | 0);
    if ($90) {
      var $row_026 = $88;
      var $48 = $87;
      var $47 = $86;
      label = 10;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
  }
}
_pentax_load_raw["X"] = 1;
function _nikon_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vpred = __stackBase__;
    var $hpred = __stackBase__ + 8;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[5263440 >> 2];
    var $3 = _fseek($1, $2, 0);
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fgetc($4);
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fgetc($6);
    var $8 = $5 & 65535;
    var $9 = ($8 | 0) == 73;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $11 = $7 & 65535;
    var $12 = ($11 | 0) == 88;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $14 = HEAP32[5264116 >> 2];
    var $15 = _fseek($14, 2110, 1);
    label = 5;
    break;
   case 5:
    var $17 = ($8 | 0) == 70;
    var $_ = $17 ? 2 : 0;
    var $18 = HEAP32[5244036 >> 2];
    var $19 = ($18 | 0) == 14;
    var $20 = $_ + 3 | 0;
    var $tree_1 = $19 ? $20 : $_;
    var $21 = $vpred | 0;
    _read_shorts($21, 4);
    var $22 = HEAP32[5244036 >> 2];
    var $23 = 1 << $22;
    var $24 = $23 & 32767;
    var $25 = _get2();
    var $26 = $25 & 65535;
    var $27 = ($25 & 65535) > 1;
    if ($27) {
      label = 6;
      break;
    } else {
      var $step_0 = 0;
      label = 7;
      break;
    }
   case 6:
    var $29 = $26 - 1 | 0;
    var $30 = ($24 | 0) / ($29 | 0) & -1;
    var $step_0 = $30;
    label = 7;
    break;
   case 7:
    var $step_0;
    if (($8 | 0) == 68) {
      label = 8;
      break;
    } else if (($8 | 0) == 70) {
      var $split_0_ph = 0;
      var $max_0_ph = $24;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 8:
    var $33 = $7 & 65535;
    var $34 = ($33 | 0) == 32;
    var $35 = ($step_0 | 0) > 0;
    var $or_cond = $34 & $35;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    var $36 = $25 << 16 >> 16 == 0;
    if ($36) {
      label = 10;
      break;
    } else {
      var $i_079 = 0;
      label = 11;
      break;
    }
   case 10:
    var $37 = ($24 | 0) == 0;
    if ($37) {
      label = 13;
      break;
    } else {
      var $i_175 = 0;
      label = 12;
      break;
    }
   case 11:
    var $i_079;
    var $38 = _get2();
    var $39 = $i_079 * $step_0 & -1;
    var $40 = 5428500 + ($39 << 1) | 0;
    HEAP16[$40 >> 1] = $38;
    var $41 = $i_079 + 1 | 0;
    var $42 = ($41 | 0) < ($26 | 0);
    if ($42) {
      var $i_079 = $41;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 12:
    var $i_175;
    var $43 = ($i_175 | 0) % ($step_0 | 0);
    var $44 = $i_175 - $43 | 0;
    var $45 = 5428500 + ($44 << 1) | 0;
    var $46 = HEAP16[$45 >> 1];
    var $47 = $46 & 65535;
    var $48 = $step_0 - $43 | 0;
    var $49 = $47 * $48 & -1;
    var $50 = $44 + $step_0 | 0;
    var $51 = 5428500 + ($50 << 1) | 0;
    var $52 = HEAP16[$51 >> 1];
    var $53 = $52 & 65535;
    var $54 = $53 * $43 & -1;
    var $55 = $54 + $49 | 0;
    var $56 = ($55 | 0) / ($step_0 | 0) & -1;
    var $57 = $56 & 65535;
    var $58 = 5428500 + ($i_175 << 1) | 0;
    HEAP16[$58 >> 1] = $57;
    var $59 = $i_175 + 1 | 0;
    var $60 = ($59 | 0) < ($24 | 0);
    if ($60) {
      var $i_175 = $59;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $61 = HEAP32[5264116 >> 2];
    var $62 = HEAP32[5263440 >> 2];
    var $63 = $62 + 562 | 0;
    var $64 = _fseek($61, $63, 0);
    var $65 = _get2();
    var $66 = $65 & 65535;
    var $split_0_ph = $66;
    var $max_0_ph = $24;
    label = 17;
    break;
   case 14:
    var $68 = ($25 & 65535) < 16386;
    if ($68) {
      label = 16;
      break;
    } else {
      var $split_0_ph = 0;
      var $max_0_ph = $24;
      label = 17;
      break;
    }
   case 15:
    var $_old = ($25 & 65535) < 16386;
    if ($_old) {
      label = 16;
      break;
    } else {
      var $split_0_ph = 0;
      var $max_0_ph = $24;
      label = 17;
      break;
    }
   case 16:
    _read_shorts(5428500, $26);
    var $split_0_ph = 0;
    var $max_0_ph = $26;
    label = 17;
    break;
   case 17:
    var $max_0_ph;
    var $split_0_ph;
    var $max_0 = $max_0_ph;
    label = 18;
    break;
   case 18:
    var $max_0;
    var $72 = $max_0 - 2 | 0;
    var $73 = 5428500 + ($72 << 1) | 0;
    var $74 = HEAP16[$73 >> 1];
    var $75 = $max_0 - 1 | 0;
    var $76 = 5428500 + ($75 << 1) | 0;
    var $77 = HEAP16[$76 >> 1];
    var $78 = $74 << 16 >> 16 == $77 << 16 >> 16;
    if ($78) {
      var $max_0 = $75;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $80 = 5262960 + ($tree_1 << 5) | 0;
    var $81 = _make_decoder($80);
    var $82 = HEAP32[5264116 >> 2];
    var $83 = HEAP32[5428492 >> 2];
    var $84 = _fseek($82, $83, 0);
    var $85 = _getbithuff(-1, 0);
    var $86 = HEAP16[5398712 >> 1];
    var $87 = $86 << 16 >> 16 == 0;
    if ($87) {
      var $huff_0_lcssa = $81;
      label = 36;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $88 = ($split_0_ph | 0) != 0;
    var $89 = $tree_1 + 1 | 0;
    var $90 = 5262960 + ($89 << 5) | 0;
    var $min_066 = 0;
    var $max_167 = $max_0;
    var $row_068 = 0;
    var $huff_070 = $81;
    label = 21;
    break;
   case 21:
    var $huff_070;
    var $row_068;
    var $max_167;
    var $min_066;
    var $92 = ($row_068 | 0) == ($split_0_ph | 0);
    var $or_cond63 = $88 & $92;
    if ($or_cond63) {
      label = 22;
      break;
    } else {
      var $huff_1 = $huff_070;
      var $max_2 = $max_167;
      var $min_1 = $min_066;
      label = 23;
      break;
    }
   case 22:
    var $94 = $huff_070;
    _free($94);
    var $95 = _make_decoder($90);
    var $96 = $max_167 + 32 | 0;
    var $huff_1 = $95;
    var $max_2 = $96;
    var $min_1 = 16;
    label = 23;
    break;
   case 23:
    var $min_1;
    var $max_2;
    var $huff_1;
    var $97 = HEAP16[5245028 >> 1];
    var $98 = $97 << 16 >> 16 == 0;
    if ($98) {
      label = 35;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $99 = $huff_1 + 2 | 0;
    var $100 = $row_068 & 1;
    var $col_065 = 0;
    label = 25;
    break;
   case 25:
    var $col_065;
    var $102 = HEAP16[$huff_1 >> 1];
    var $103 = $102 & 65535;
    var $104 = _getbithuff($103, $99);
    var $105 = $104 & 15;
    var $106 = $104 >> 4;
    var $107 = $105 - $106 | 0;
    var $108 = _getbithuff($107, 0);
    var $109 = $108 << 1;
    var $110 = $109 | 1;
    var $111 = $110 << $106;
    var $112 = $111 >>> 1;
    var $113 = $105 - 1 | 0;
    var $114 = 1 << $113;
    var $115 = $112 & $114;
    var $116 = ($115 | 0) == 0;
    if ($116) {
      label = 26;
      break;
    } else {
      var $diff_0 = $112;
      label = 27;
      break;
    }
   case 26:
    var $118 = ($106 | 0) == 0;
    var $119 = $118 & 1;
    var $_neg = -1 << $105;
    var $120 = $119 + $_neg | 0;
    var $121 = $120 + $112 | 0;
    var $diff_0 = $121;
    label = 27;
    break;
   case 27:
    var $diff_0;
    var $123 = ($col_065 | 0) < 2;
    if ($123) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $125 = $vpred + ($100 << 2) + ($col_065 << 1) | 0;
    var $126 = HEAP16[$125 >> 1];
    var $127 = $126 & 65535;
    var $128 = $127 + $diff_0 | 0;
    var $129 = $128 & 65535;
    HEAP16[$125 >> 1] = $129;
    var $130 = $hpred + ($col_065 << 1) | 0;
    HEAP16[$130 >> 1] = $129;
    var $_pre = $col_065 & 1;
    var $_pre2 = $hpred + ($_pre << 1) | 0;
    var $_pre_phi3 = $_pre2;
    label = 30;
    break;
   case 29:
    var $132 = $col_065 & 1;
    var $133 = $hpred + ($132 << 1) | 0;
    var $134 = HEAP16[$133 >> 1];
    var $135 = $134 & 65535;
    var $136 = $135 + $diff_0 | 0;
    var $137 = $136 & 65535;
    HEAP16[$133 >> 1] = $137;
    var $_pre_phi3 = $133;
    label = 30;
    break;
   case 30:
    var $_pre_phi3;
    var $139 = HEAP16[$_pre_phi3 >> 1];
    var $140 = $139 & 65535;
    var $141 = $140 + $min_1 | 0;
    var $142 = $141 & 65535;
    var $143 = ($142 | 0) < ($max_2 | 0);
    if ($143) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _derror();
    label = 32;
    break;
   case 32:
    var $phitmp = $139 << 16 >> 16 < 0;
    if ($phitmp) {
      var $150 = 0;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $147 = $139 << 16 >> 16 < 16383;
    var $148 = $139 << 16 >> 16;
    var $_64 = $147 ? $148 : 16383;
    var $150 = $_64;
    label = 34;
    break;
   case 34:
    var $150;
    var $151 = 5428500 + ($150 << 1) | 0;
    var $152 = HEAP16[$151 >> 1];
    var $153 = HEAP16[5245028 >> 1];
    var $154 = $153 & 65535;
    var $155 = $154 * $row_068 & -1;
    var $156 = $155 + $col_065 | 0;
    var $157 = HEAP32[5245032 >> 2];
    var $158 = $157 + ($156 << 1) | 0;
    HEAP16[$158 >> 1] = $152;
    var $159 = $col_065 + 1 | 0;
    var $160 = ($159 | 0) < ($154 | 0);
    if ($160) {
      var $col_065 = $159;
      label = 25;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $161 = $row_068 + 1 | 0;
    var $162 = HEAP16[5398712 >> 1];
    var $163 = $162 & 65535;
    var $164 = ($161 | 0) < ($163 | 0);
    if ($164) {
      var $min_066 = $min_1;
      var $max_167 = $max_2;
      var $row_068 = $161;
      var $huff_070 = $huff_1;
      label = 21;
      break;
    } else {
      var $huff_0_lcssa = $huff_1;
      label = 36;
      break;
    }
   case 36:
    var $huff_0_lcssa;
    var $165 = $huff_0_lcssa;
    _free($165);
    STACKTOP = __stackBase__;
    return;
  }
}
_nikon_load_raw["X"] = 1;
function _nikon_e995() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1024 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $histo = __stackBase__;
    var $1 = $histo;
    for (var $$dest = $1 >> 2, $$stop = $$dest + 256; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $2 = HEAP32[5264116 >> 2];
    var $3 = _fseek($2, -2e3, 2);
    var $i_05 = 0;
    label = 3;
    break;
   case 3:
    var $i_05;
    var $5 = HEAP32[5264116 >> 2];
    var $6 = _fgetc($5);
    var $7 = $histo + ($6 << 2) | 0;
    var $8 = HEAP32[$7 >> 2];
    var $9 = $8 + 1 | 0;
    HEAP32[$7 >> 2] = $9;
    var $10 = $i_05 + 1 | 0;
    var $exitcond = ($10 | 0) == 2e3;
    if ($exitcond) {
      var $i_1 = 0;
      label = 4;
      break;
    } else {
      var $i_05 = $10;
      label = 3;
      break;
    }
   case 4:
    var $i_1;
    var $11 = ($i_1 | 0) < 4;
    if ($11) {
      label = 5;
      break;
    } else {
      var $_0 = 1;
      label = 6;
      break;
    }
   case 5:
    var $13 = $i_1 + 5263152 | 0;
    var $14 = HEAP8[$13];
    var $15 = $14 & 255;
    var $16 = $histo + ($15 << 2) | 0;
    var $17 = HEAP32[$16 >> 2];
    var $18 = ($17 | 0) < 200;
    var $19 = $i_1 + 1 | 0;
    if ($18) {
      var $_0 = 0;
      label = 6;
      break;
    } else {
      var $i_1 = $19;
      label = 4;
      break;
    }
   case 6:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _nikon_e2100() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $t = __stackBase__;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 0, 0);
    var $3 = $t | 0;
    var $4 = $t + 2 | 0;
    var $5 = $t + 4 | 0;
    var $6 = $t + 7 | 0;
    var $7 = $t + 9 | 0;
    var $8 = $t + 1 | 0;
    var $9 = $t + 6 | 0;
    var $10 = $t + 8 | 0;
    var $11 = $t + 11 | 0;
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $13 = ($i_0 | 0) < 1024;
    if ($13) {
      label = 4;
      break;
    } else {
      var $_0 = 1;
      label = 5;
      break;
    }
   case 4:
    var $15 = HEAP32[5264116 >> 2];
    var $16 = _fread($3, 1, 12, $15);
    var $17 = HEAP8[$4];
    var $18 = HEAP8[$5];
    var $19 = $18 & $17;
    var $20 = HEAP8[$6];
    var $21 = $19 & $20;
    var $22 = HEAP8[$7];
    var $23 = $21 & $22;
    var $24 = $23 & 255;
    var $25 = $24 >>> 4;
    var $26 = HEAP8[$8];
    var $27 = $26 & 255;
    var $28 = HEAP8[$9];
    var $29 = $28 & 255;
    var $30 = HEAP8[$10];
    var $31 = $30 & 255;
    var $32 = HEAP8[$11];
    var $33 = $32 & 255;
    var $34 = $27 & 3;
    var $35 = $34 & $25;
    var $36 = $35 & $29;
    var $37 = $36 & $31;
    var $38 = $37 & $33;
    var $39 = ($38 | 0) == 3;
    var $40 = $i_0 + 1 | 0;
    if ($39) {
      var $i_0 = $40;
      label = 3;
      break;
    } else {
      var $_0 = 0;
      label = 5;
      break;
    }
   case 5:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _nikon_3700() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dp = __stackBase__;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 3072, 0);
    var $3 = $dp | 0;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($3, 1, 24, $4);
    var $6 = $dp + 8 | 0;
    var $7 = HEAP8[$6];
    var $8 = $7 & 255;
    var $9 = $8 << 4;
    var $10 = $9 & 48;
    var $11 = $dp + 20 | 0;
    var $12 = HEAP8[$11];
    var $13 = $12 & 255;
    var $14 = $13 & 3;
    var $15 = $10 | $14;
    if (($15 | 0) == 0) {
      label = 3;
      break;
    } else if (($15 | 0) == 3) {
      label = 4;
      break;
    } else if (($15 | 0) == 50) {
      label = 5;
      break;
    } else if (($15 | 0) == 51) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $16 = _strcpy(5263628, 5263160);
    var $17 = _strcpy(5263372, 5263172);
    label = 7;
    break;
   case 4:
    var $19 = _strcpy(5263628, 5263192);
    var $20 = _strcpy(5263372, 5263204);
    label = 7;
    break;
   case 5:
    var $21 = _strcpy(5263628, 5263224);
    var $22 = _strcpy(5263372, 5263236);
    label = 7;
    break;
   case 6:
    var $24 = _strcpy(5263628, 5263256);
    var $25 = _strcpy(5263372, 5263268);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _minolta_z2() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 424 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tail = __stackBase__;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, -424, 2);
    var $3 = $tail | 0;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($3, 1, 424, $4);
    var $i_04 = 0;
    var $nz_05 = 0;
    label = 3;
    break;
   case 3:
    var $nz_05;
    var $i_04;
    var $7 = $tail + $i_04 | 0;
    var $8 = HEAP8[$7];
    var $not_ = $8 << 24 >> 24 != 0;
    var $9 = $not_ & 1;
    var $nz_0_ = $9 + $nz_05 | 0;
    var $10 = $i_04 + 1 | 0;
    var $exitcond = ($10 | 0) == 424;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_04 = $10;
      var $nz_05 = $nz_0_;
      label = 3;
      break;
    }
   case 4:
    var $12 = ($nz_0_ | 0) > 20;
    var $13 = $12 & 1;
    STACKTOP = __stackBase__;
    return $13;
  }
}
function _ppm_thumb() {
  var __stackBase__ = STACKTOP;
  var $6 = (HEAPU16[5244040 >> 1] * 3 & -1) * HEAPU16[5244060 >> 1] & -1;
  HEAP32[5244056 >> 2] = $6;
  var $7 = _malloc($6);
  _merror($7, 5576572);
  var $12 = HEAPU16[5244060 >> 1];
  _fprintf(HEAP32[5262952 >> 2], 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAPU16[5244040 >> 1], HEAP32[tempInt + 4 >> 2] = $12, tempInt));
  _fread($7, 1, HEAP32[5244056 >> 2], HEAP32[5264116 >> 2]);
  _fwrite($7, 1, HEAP32[5244056 >> 2], HEAP32[5262952 >> 2]);
  _free($7);
  STACKTOP = __stackBase__;
  return;
}
function _ppm16_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5244040 >> 1];
    var $2 = $1 & 65535;
    var $3 = HEAP16[5244060 >> 1];
    var $4 = $3 & 65535;
    var $5 = $2 * 3 & -1;
    var $6 = $5 * $4 & -1;
    HEAP32[5244056 >> 2] = $6;
    var $7 = _calloc($6, 2);
    _merror($7, 5587544);
    var $8 = $7;
    var $9 = HEAP32[5244056 >> 2];
    _read_shorts($8, $9);
    var $10 = HEAP32[5244056 >> 2];
    var $11 = ($10 | 0) == 0;
    if ($11) {
      label = 4;
      break;
    } else {
      var $i_09 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_09;
    var $12 = $8 + ($i_09 << 1) | 0;
    var $13 = HEAP16[$12 >> 1];
    var $14 = ($13 & 65535) >>> 8;
    var $15 = $14 & 255;
    var $16 = $7 + $i_09 | 0;
    HEAP8[$16] = $15;
    var $17 = $i_09 + 1 | 0;
    var $18 = $17 >>> 0 < $10 >>> 0;
    if ($18) {
      var $i_09 = $17;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $19 = HEAP32[5262952 >> 2];
    var $20 = HEAP16[5244040 >> 1];
    var $21 = $20 & 65535;
    var $22 = HEAP16[5244060 >> 1];
    var $23 = $22 & 65535;
    var $24 = _fprintf($19, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $21, HEAP32[tempInt + 4 >> 2] = $23, tempInt));
    var $25 = HEAP32[5244056 >> 2];
    var $26 = HEAP32[5262952 >> 2];
    var $27 = _fwrite($7, 1, $25, $26);
    _free($7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _layer_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5244048 >> 2];
    var $2 = $1 >>> 5;
    var $3 = $2 & 7;
    HEAP32[5560840 >> 2] = $3;
    var $4 = HEAP16[5244040 >> 1];
    var $5 = $4 & 65535;
    var $6 = HEAP16[5244060 >> 1];
    var $7 = $6 & 65535;
    var $8 = $7 * $5 & -1;
    HEAP32[5244056 >> 2] = $8;
    var $9 = _calloc($3, $8);
    _merror($9, 5587444);
    var $10 = HEAP32[5262952 >> 2];
    var $11 = HEAP32[5560840 >> 2];
    var $12 = $11 >> 1;
    var $13 = $12 + 5 | 0;
    var $14 = HEAP16[5244040 >> 1];
    var $15 = $14 & 65535;
    var $16 = HEAP16[5244060 >> 1];
    var $17 = $16 & 65535;
    var $18 = _fprintf($10, 5587324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = $15, HEAP32[tempInt + 8 >> 2] = $17, tempInt));
    var $19 = HEAP32[5244056 >> 2];
    var $20 = HEAP32[5560840 >> 2];
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _fread($9, $19, $20, $21);
    var $23 = HEAP32[5244056 >> 2];
    var $24 = ($23 | 0) == 0;
    if ($24) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[5560840 >> 2];
    var $i_08 = 0;
    var $26 = $_pre;
    var $25 = $23;
    label = 4;
    break;
   case 4:
    var $25;
    var $26;
    var $i_08;
    var $27 = ($26 | 0) > 0;
    if ($27) {
      var $c_07 = 0;
      var $28 = $25;
      label = 5;
      break;
    } else {
      var $46 = $26;
      var $45 = $25;
      label = 6;
      break;
    }
   case 5:
    var $28;
    var $c_07;
    var $29 = HEAP32[5244048 >> 2];
    var $30 = $29 >>> 8;
    var $31 = 5263704 + ($30 << 2) + $c_07 | 0;
    var $32 = HEAP8[$31];
    var $33 = $32 << 24 >> 24;
    var $34 = $33 - 48 | 0;
    var $35 = $34 * $28 & -1;
    var $36 = $35 + $i_08 | 0;
    var $37 = $9 + $36 | 0;
    var $38 = HEAP8[$37];
    var $39 = $38 << 24 >> 24;
    var $40 = HEAP32[5262952 >> 2];
    var $41 = _fputc($39, $40);
    var $42 = $c_07 + 1 | 0;
    var $43 = HEAP32[5560840 >> 2];
    var $44 = ($42 | 0) < ($43 | 0);
    var $_pre2 = HEAP32[5244056 >> 2];
    if ($44) {
      var $c_07 = $42;
      var $28 = $_pre2;
      label = 5;
      break;
    } else {
      var $46 = $43;
      var $45 = $_pre2;
      label = 6;
      break;
    }
   case 6:
    var $45;
    var $46;
    var $47 = $i_08 + 1 | 0;
    var $48 = $47 >>> 0 < $45 >>> 0;
    if ($48) {
      var $i_08 = $47;
      var $26 = $46;
      var $25 = $45;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _free($9);
    STACKTOP = __stackBase__;
    return;
  }
}
_layer_thumb["X"] = 1;
function _rollei_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5244040 >> 1];
    var $2 = $1 & 65535;
    var $3 = HEAP16[5244060 >> 1];
    var $4 = $3 & 65535;
    var $5 = $4 * $2 & -1;
    HEAP32[5244056 >> 2] = $5;
    var $6 = _calloc($5, 2);
    var $7 = $6;
    _merror($6, 5587188);
    var $8 = HEAP32[5262952 >> 2];
    var $9 = HEAP16[5244040 >> 1];
    var $10 = $9 & 65535;
    var $11 = HEAP16[5244060 >> 1];
    var $12 = $11 & 65535;
    var $13 = _fprintf($8, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = $12, tempInt));
    var $14 = HEAP32[5244056 >> 2];
    _read_shorts($7, $14);
    var $15 = HEAP32[5244056 >> 2];
    var $16 = ($15 | 0) == 0;
    if ($16) {
      label = 4;
      break;
    } else {
      var $i_010 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_010;
    var $17 = $7 + ($i_010 << 1) | 0;
    var $18 = HEAP16[$17 >> 1];
    var $19 = $18 & 65535;
    var $20 = $19 << 3;
    var $21 = HEAP32[5262952 >> 2];
    var $22 = _fputc($20, $21);
    var $23 = HEAP16[$17 >> 1];
    var $24 = $23 & 65535;
    var $25 = $24 >>> 5;
    var $26 = $25 << 2;
    var $27 = HEAP32[5262952 >> 2];
    var $28 = _fputc($26, $27);
    var $29 = HEAP16[$17 >> 1];
    var $30 = $29 & 65535;
    var $31 = $30 >>> 11;
    var $32 = $31 << 3;
    var $33 = HEAP32[5262952 >> 2];
    var $34 = _fputc($32, $33);
    var $35 = $i_010 + 1 | 0;
    var $36 = HEAP32[5244056 >> 2];
    var $37 = $35 >>> 0 < $36 >>> 0;
    if ($37) {
      var $i_010 = $35;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _free($6);
    STACKTOP = __stackBase__;
    return;
  }
}
function _raw($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5245036 >> 1];
    var $2 = $1 & 65535;
    var $3 = $2 >>> 0 > $row >>> 0;
    if ($3) {
      label = 3;
      break;
    } else {
      var $16 = 0;
      label = 5;
      break;
    }
   case 3:
    var $5 = HEAP16[5245028 >> 1];
    var $6 = $5 & 65535;
    var $7 = $6 >>> 0 > $col >>> 0;
    if ($7) {
      label = 4;
      break;
    } else {
      var $16 = 0;
      label = 5;
      break;
    }
   case 4:
    var $9 = $6 * $row & -1;
    var $10 = $9 + $col | 0;
    var $11 = HEAP32[5245032 >> 2];
    var $12 = $11 + ($10 << 1) | 0;
    var $13 = HEAP16[$12 >> 1];
    var $14 = $13 & 65535;
    var $16 = $14;
    label = 5;
    break;
   case 5:
    var $16;
    return $16;
  }
}
function _rollei_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $1 = HEAP16[5245028 >> 1];
    var $2 = HEAP16[5245036 >> 1];
    var $3 = $pixel | 0;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($3, 1, 10, $4);
    var $6 = ($5 | 0) == 10;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $7 = $1 & 65535;
    var $8 = $7 * 5 & -1;
    var $9 = $2 & 65535;
    var $10 = $8 * $9 & -1;
    var $11 = $10 >>> 3;
    var $12 = $pixel + 1 | 0;
    var $13 = $pixel + 2 | 0;
    var $14 = $pixel + 3 | 0;
    var $15 = $pixel + 4 | 0;
    var $16 = $pixel + 5 | 0;
    var $17 = $pixel + 6 | 0;
    var $18 = $pixel + 7 | 0;
    var $19 = $pixel + 8 | 0;
    var $20 = $pixel + 9 | 0;
    var $iten_025 = 0;
    var $isix_026 = $11;
    var $buffer_027 = 0;
    label = 4;
    break;
   case 4:
    var $buffer_027;
    var $isix_026;
    var $iten_025;
    var $21 = $iten_025 + 1 | 0;
    var $22 = HEAP8[$3];
    var $23 = $22 & 255;
    var $24 = $23 << 8;
    var $25 = HEAP8[$12];
    var $26 = $25 & 255;
    var $27 = $24 | $26;
    var $28 = $23 >>> 2;
    var $29 = $buffer_027 << 6;
    var $30 = $28 | $29;
    var $31 = $iten_025 + 2 | 0;
    var $32 = HEAP8[$13];
    var $33 = $32 & 255;
    var $34 = $33 << 8;
    var $35 = HEAP8[$14];
    var $36 = $35 & 255;
    var $37 = $34 | $36;
    var $38 = $33 >>> 2;
    var $39 = $30 << 6;
    var $40 = $38 | $39;
    var $41 = $iten_025 + 3 | 0;
    var $42 = HEAP8[$15];
    var $43 = $42 & 255;
    var $44 = $43 << 8;
    var $45 = HEAP8[$16];
    var $46 = $45 & 255;
    var $47 = $44 | $46;
    var $48 = $43 >>> 2;
    var $49 = $40 << 6;
    var $50 = $48 | $49;
    var $51 = $iten_025 + 4 | 0;
    var $52 = HEAP8[$17];
    var $53 = $52 & 255;
    var $54 = $53 << 8;
    var $55 = HEAP8[$18];
    var $56 = $55 & 255;
    var $57 = $54 | $56;
    var $58 = $53 >>> 2;
    var $59 = $50 << 6;
    var $60 = $58 | $59;
    var $61 = HEAP8[$19];
    var $62 = $61 & 255;
    var $63 = $62 << 8;
    var $64 = HEAP8[$20];
    var $65 = $64 & 255;
    var $66 = $63 | $65;
    var $67 = $62 >>> 2;
    var $68 = $60 << 6;
    var $69 = $67 | $68;
    var $70 = $iten_025 + 5 | 0;
    var $71 = $isix_026 + 1 | 0;
    var $72 = $40 >>> 2;
    var $73 = $isix_026 + 2 | 0;
    var $74 = $60 >>> 4;
    var $75 = $isix_026 + 3 | 0;
    var $_tr = $27 & 65535;
    var $76 = $_tr & 1023;
    var $77 = HEAP32[5245032 >> 2];
    var $78 = $77 + ($iten_025 << 1) | 0;
    HEAP16[$78 >> 1] = $76;
    var $_tr_1 = $37 & 65535;
    var $79 = $_tr_1 & 1023;
    var $80 = $77 + ($21 << 1) | 0;
    HEAP16[$80 >> 1] = $79;
    var $_tr_2 = $47 & 65535;
    var $81 = $_tr_2 & 1023;
    var $82 = $77 + ($31 << 1) | 0;
    HEAP16[$82 >> 1] = $81;
    var $_tr_3 = $57 & 65535;
    var $83 = $_tr_3 & 1023;
    var $84 = $77 + ($41 << 1) | 0;
    HEAP16[$84 >> 1] = $83;
    var $_tr_4 = $66 & 65535;
    var $85 = $_tr_4 & 1023;
    var $86 = $77 + ($51 << 1) | 0;
    HEAP16[$86 >> 1] = $85;
    var $_tr1 = $72 & 65535;
    var $87 = $_tr1 & 1023;
    var $88 = $77 + ($isix_026 << 1) | 0;
    HEAP16[$88 >> 1] = $87;
    var $_tr_6 = $74 & 65535;
    var $89 = $_tr_6 & 1023;
    var $90 = $77 + ($71 << 1) | 0;
    HEAP16[$90 >> 1] = $89;
    var $_tr_7 = $69 & 65535;
    var $91 = $_tr_7 & 1023;
    var $92 = $77 + ($73 << 1) | 0;
    HEAP16[$92 >> 1] = $91;
    var $93 = HEAP32[5264116 >> 2];
    var $94 = _fread($3, 1, 10, $93);
    var $95 = ($94 | 0) == 10;
    if ($95) {
      var $iten_025 = $70;
      var $isix_026 = $75;
      var $buffer_027 = $69;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[5263496 >> 2] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
}
_rollei_load_raw["X"] = 1;
function _phase_one_flat_field($is_float, $nc) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head = __stackBase__;
    var $mult = __stackBase__ + 16;
    var $1 = $head | 0;
    _read_shorts($1, 8);
    var $2 = $head + 4 | 0;
    var $3 = HEAP16[$2 >> 1];
    var $4 = $head + 8 | 0;
    var $5 = HEAP16[$4 >> 1];
    var $div = Math.floor(($3 & 65535) / ($5 & 65535));
    var $6 = $div & 65535;
    var $7 = $6 * $nc & -1;
    var $8 = _calloc($7, 4);
    var $9 = $8;
    _merror($8, 5587012);
    var $10 = $head + 6 | 0;
    var $11 = HEAP16[$10 >> 1];
    var $12 = $head + 10 | 0;
    var $13 = HEAP16[$12 >> 1];
    var $div76106 = Math.floor(($11 & 65535) / ($13 & 65535));
    var $14 = $div76106 << 16 >> 16 == 0;
    if ($14) {
      label = 36;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $15 = $div << 16 >> 16 == 0;
    var $16 = $head + 2 | 0;
    var $17 = ($div & 65535) > 1;
    var $18 = ($nc | 0) == 0;
    var $19 = ($nc | 0) > 2;
    var $20 = ($is_float | 0) == 0;
    var $y_0107 = 0;
    label = 4;
    break;
   case 4:
    var $y_0107;
    if ($15) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $21 = ($y_0107 | 0) == 0;
    var $x_080 = 0;
    label = 6;
    break;
   case 6:
    var $x_080;
    if ($18) {
      label = 14;
      break;
    } else {
      var $c_078 = 0;
      label = 7;
      break;
    }
   case 7:
    var $c_078;
    if ($20) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $23 = _getreal(11);
    var $30 = $23;
    label = 10;
    break;
   case 9:
    var $25 = _get2();
    var $26 = $25 & 65535;
    var $27 = $26 | 0;
    var $28 = $27 * 30517578125e-15;
    var $30 = $28;
    label = 10;
    break;
   case 10:
    var $30;
    var $31 = $30;
    var $32 = $c_078 * $6 & -1;
    var $33 = $32 + $x_080 | 0;
    var $34 = $9 + ($33 << 2) | 0;
    if ($21) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAPF32[$34 >> 2] = $31;
    label = 13;
    break;
   case 12:
    var $37 = HEAPF32[$34 >> 2];
    var $38 = $31 - $37;
    var $39 = HEAP16[$12 >> 1];
    var $40 = $39 & 65535;
    var $41 = $40 | 0;
    var $42 = $38 / $41;
    var $43 = $c_078 | 1;
    var $44 = $43 * $6 & -1;
    var $45 = $44 + $x_080 | 0;
    var $46 = $9 + ($45 << 2) | 0;
    HEAPF32[$46 >> 2] = $42;
    label = 13;
    break;
   case 13:
    var $48 = $c_078 + 2 | 0;
    var $49 = $48 >>> 0 < $nc >>> 0;
    if ($49) {
      var $c_078 = $48;
      label = 7;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $50 = $x_080 + 1 | 0;
    var $exitcond = ($50 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 15;
      break;
    } else {
      var $x_080 = $50;
      label = 6;
      break;
    }
   case 15:
    var $51 = ($y_0107 | 0) == 0;
    if ($51) {
      label = 35;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $53 = HEAP16[$16 >> 1];
    var $54 = $53 & 65535;
    var $55 = HEAP16[$12 >> 1];
    var $56 = $55 & 65535;
    var $57 = $56 * $y_0107 & -1;
    var $58 = $57 + $54 | 0;
    var $59 = $58 - $56 | 0;
    var $60 = HEAP16[5245036 >> 1];
    var $61 = $60 & 65535;
    var $62 = $59 >>> 0 < $61 >>> 0;
    var $63 = $59 >>> 0 < $58 >>> 0;
    var $or_cond103 = $62 & $63;
    if ($or_cond103) {
      var $row_0104 = $59;
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 17:
    var $row_0104;
    if ($17) {
      var $x_196 = 1;
      label = 18;
      break;
    } else {
      label = 30;
      break;
    }
   case 18:
    var $x_196;
    var $_pre = HEAP16[$4 >> 1];
    if ($18) {
      var $81 = $_pre;
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $64 = $_pre & 65535;
    var $65 = $64 | 0;
    var $c_183 = 0;
    label = 20;
    break;
   case 20:
    var $c_183;
    var $67 = $c_183 * $6 & -1;
    var $68 = $67 + $x_196 | 0;
    var $69 = $68 - 1 | 0;
    var $70 = $9 + ($69 << 2) | 0;
    var $71 = HEAPF32[$70 >> 2];
    var $72 = $mult + ($c_183 << 2) | 0;
    HEAPF32[$72 >> 2] = $71;
    var $73 = $9 + ($68 << 2) | 0;
    var $74 = HEAPF32[$73 >> 2];
    var $75 = $74 - $71;
    var $76 = $75 / $65;
    var $77 = $c_183 | 1;
    var $78 = $mult + ($77 << 2) | 0;
    HEAPF32[$78 >> 2] = $76;
    var $79 = $c_183 + 2 | 0;
    var $80 = $79 >>> 0 < $nc >>> 0;
    if ($80) {
      var $c_183 = $79;
      label = 20;
      break;
    } else {
      var $81 = $_pre;
      label = 21;
      break;
    }
   case 21:
    var $81;
    var $82 = HEAP16[$1 >> 1];
    var $83 = $82 & 65535;
    var $84 = $81 & 65535;
    var $85 = $84 * $x_196 & -1;
    var $86 = $85 + $83 | 0;
    var $87 = $86 - $84 | 0;
    var $88 = HEAP16[5245028 >> 1];
    var $89 = $88 & 65535;
    var $90 = $87 >>> 0 < $89 >>> 0;
    var $91 = $87 >>> 0 < $86 >>> 0;
    var $or_cond7790 = $90 & $91;
    if ($or_cond7790) {
      var $col_091 = $87;
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 22:
    var $col_091;
    if ($19) {
      label = 23;
      break;
    } else {
      var $109 = 0;
      label = 25;
      break;
    }
   case 23:
    var $93 = HEAP32[5427632 >> 2];
    var $94 = HEAP16[5243564 >> 1];
    var $95 = $94 & 65535;
    var $96 = $row_0104 - $95 | 0;
    var $97 = $96 << 1;
    var $98 = $97 & 14;
    var $99 = HEAP16[5263700 >> 1];
    var $100 = $99 & 65535;
    var $101 = $col_091 - $100 | 0;
    var $102 = $101 & 1;
    var $103 = $98 | $102;
    var $104 = $103 << 1;
    var $105 = $93 >>> ($104 >>> 0);
    var $106 = $105 & 1;
    var $107 = ($106 | 0) == 0;
    if ($107) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    var $108 = $105 & 3;
    var $109 = $108;
    label = 25;
    break;
   case 25:
    var $109;
    var $110 = $89 * $row_0104 & -1;
    var $111 = $110 + $col_091 | 0;
    var $112 = HEAP32[5245032 >> 2];
    var $113 = $112 + ($111 << 1) | 0;
    var $114 = HEAP16[$113 >> 1];
    var $115 = $114 & 65535;
    var $116 = $115 | 0;
    var $117 = $mult + ($109 << 2) | 0;
    var $118 = HEAPF32[$117 >> 2];
    var $119 = $118 * $116;
    var $120 = $119 >= 0 ? Math.floor($119) : Math.ceil($119);
    var $121 = $120 >>> 0 < 65535;
    var $122 = $120 & 65535;
    var $phitmp = $121 ? $122 : -1;
    HEAP16[$113 >> 1] = $phitmp;
    label = 26;
    break;
   case 26:
    if ($18) {
      label = 28;
      break;
    } else {
      var $c_287 = 0;
      label = 27;
      break;
    }
   case 27:
    var $c_287;
    var $123 = $c_287 | 1;
    var $124 = $mult + ($123 << 2) | 0;
    var $125 = HEAPF32[$124 >> 2];
    var $126 = $mult + ($c_287 << 2) | 0;
    var $127 = HEAPF32[$126 >> 2];
    var $128 = $125 + $127;
    HEAPF32[$126 >> 2] = $128;
    var $129 = $c_287 + 2 | 0;
    var $130 = $129 >>> 0 < $nc >>> 0;
    if ($130) {
      var $c_287 = $129;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $131 = $col_091 + 1 | 0;
    var $132 = $131 >>> 0 < $89 >>> 0;
    var $133 = $131 >>> 0 < $86 >>> 0;
    var $or_cond77 = $132 & $133;
    if ($or_cond77) {
      var $col_091 = $131;
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $134 = $x_196 + 1 | 0;
    var $exitcond109 = ($134 | 0) == ($6 | 0);
    if ($exitcond109) {
      label = 30;
      break;
    } else {
      var $x_196 = $134;
      label = 18;
      break;
    }
   case 30:
    if ($15) {
      label = 34;
      break;
    } else {
      var $x_2101 = 0;
      label = 31;
      break;
    }
   case 31:
    var $x_2101;
    if ($18) {
      label = 33;
      break;
    } else {
      var $c_398 = 0;
      label = 32;
      break;
    }
   case 32:
    var $c_398;
    var $135 = $c_398 | 1;
    var $136 = $135 * $6 & -1;
    var $137 = $136 + $x_2101 | 0;
    var $138 = $9 + ($137 << 2) | 0;
    var $139 = HEAPF32[$138 >> 2];
    var $140 = $c_398 * $6 & -1;
    var $141 = $140 + $x_2101 | 0;
    var $142 = $9 + ($141 << 2) | 0;
    var $143 = HEAPF32[$142 >> 2];
    var $144 = $139 + $143;
    HEAPF32[$142 >> 2] = $144;
    var $145 = $c_398 + 2 | 0;
    var $146 = $145 >>> 0 < $nc >>> 0;
    if ($146) {
      var $c_398 = $145;
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $147 = $x_2101 + 1 | 0;
    var $exitcond110 = ($147 | 0) == ($6 | 0);
    if ($exitcond110) {
      label = 34;
      break;
    } else {
      var $x_2101 = $147;
      label = 31;
      break;
    }
   case 34:
    var $148 = $row_0104 + 1 | 0;
    var $149 = $148 >>> 0 < $61 >>> 0;
    var $150 = $148 >>> 0 < $58 >>> 0;
    var $or_cond = $149 & $150;
    if ($or_cond) {
      var $row_0104 = $148;
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $151 = $y_0107 + 1 | 0;
    var $152 = HEAP16[$10 >> 1];
    var $153 = HEAP16[$12 >> 1];
    var $div76 = Math.floor(($152 & 65535) / ($153 & 65535));
    var $154 = $div76 & 65535;
    var $155 = $151 >>> 0 < $154 >>> 0;
    if ($155) {
      var $y_0107 = $151;
      label = 4;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    _free($8);
    STACKTOP = __stackBase__;
    return;
  }
}
_phase_one_flat_field["X"] = 1;
function _phase_one_correct() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $val = __stackBase__;
    var $dev = __stackBase__ + 16;
    var $mult = __stackBase__ + 32;
    var $_b = HEAP8[5398716];
    var $1 = $_b ^ 1;
    var $2 = HEAP32[5263444 >> 2];
    var $3 = ($2 | 0) != 0;
    var $or_cond = $3 & $1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 64;
      break;
    }
   case 3:
    var $_b1 = HEAP8[5243532];
    if ($_b1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $6 = HEAP32[_stderr >> 2];
    var $7 = _fwrite(5586816, 24, 1, $6);
    label = 5;
    break;
   case 5:
    var $9 = HEAP32[5264116 >> 2];
    var $10 = HEAP32[5263440 >> 2];
    var $11 = _fseek($9, $10, 0);
    var $12 = _get2();
    HEAP16[5262944 >> 1] = $12;
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fseek($13, 6, 1);
    var $15 = HEAP32[5264116 >> 2];
    var $16 = HEAP32[5263440 >> 2];
    var $17 = _get4();
    var $18 = $17 + $16 | 0;
    var $19 = _fseek($15, $18, 0);
    var $20 = _get4();
    var $21 = _get4();
    var $22 = ($20 | 0) == 0;
    if ($22) {
      label = 64;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $23 = $val | 0;
    var $24 = $val + 4 | 0;
    var $25 = $val + 8 | 0;
    var $26 = $val + 12 | 0;
    var $27 = $dev | 0;
    var $28 = $dev + 4 | 0;
    var $29 = $dev + 8 | 0;
    var $30 = $dev + 12 | 0;
    var $mindiff_0220 = 2147483647;
    var $off_412_0221 = 0;
    var $_in = $20;
    label = 7;
    break;
   case 7:
    var $_in;
    var $off_412_0221;
    var $mindiff_0220;
    var $32 = $_in - 1 | 0;
    var $33 = _get4();
    var $34 = _get4();
    var $35 = _get4();
    var $36 = HEAP32[5264116 >> 2];
    var $37 = _ftell($36);
    var $38 = HEAP32[5264116 >> 2];
    var $39 = HEAP32[5263440 >> 2];
    var $40 = $39 + $35 | 0;
    var $41 = _fseek($38, $40, 0);
    if (($33 | 0) == 1024) {
      label = 8;
      break;
    } else if (($33 | 0) == 1049) {
      label = 9;
      break;
    } else if (($33 | 0) == 1050) {
      label = 13;
      break;
    } else if (($33 | 0) == 1025) {
      label = 37;
      break;
    } else if (($33 | 0) == 1046 | ($33 | 0) == 1040) {
      label = 38;
      break;
    } else if (($33 | 0) == 1035) {
      label = 39;
      break;
    } else if (($33 | 0) == 1042) {
      label = 40;
      break;
    } else {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    }
   case 8:
    var $42 = $34 - 8 | 0;
    var $43 = ($42 | 0) > -1;
    if ($43) {
      var $123 = $42;
      label = 24;
      break;
    } else {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    }
   case 9:
    var $45 = _get4();
    var $46 = _getreal(11);
    var $47 = _getreal(11);
    var $48 = $47;
    var $49 = _getreal(11);
    var $50 = _getreal(11);
    var $51 = $50;
    var $52 = _getreal(11);
    var $53 = _getreal(11);
    var $54 = $53;
    var $55 = _getreal(11);
    var $56 = $55;
    var $57 = _getreal(11);
    var $58 = $57;
    var $59 = HEAPF32[5245764 >> 2];
    var $60 = $59 - $58;
    var $61 = $60 * $56;
    var $62 = $61 + 1;
    var $63 = $51 + $62;
    var $i_1210 = 0;
    label = 10;
    break;
   case 10:
    var $i_1210;
    var $65 = $i_1210 | 0;
    var $66 = $65 * $54;
    var $67 = $66 + $63;
    var $68 = $65 * $67;
    var $69 = $48 + $68;
    var $70 = $69 < 65535;
    var $71 = $70 ? $69 : 65535;
    var $72 = $71 < 0;
    if ($72) {
      var $75 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $phitmp154 = $71 >= 0 ? Math.floor($71) : Math.ceil($71);
    var $75 = $phitmp154;
    label = 12;
    break;
   case 12:
    var $75;
    var $76 = 5428500 + ($i_1210 << 1) | 0;
    HEAP16[$76 >> 1] = $75;
    var $77 = $i_1210 + 1 | 0;
    var $exitcond233 = ($77 | 0) == 65536;
    if ($exitcond233) {
      label = 18;
      break;
    } else {
      var $i_1210 = $77;
      label = 10;
      break;
    }
   case 13:
    var $78 = _getreal(11);
    var $79 = $78;
    var $80 = _getreal(11);
    var $81 = $80;
    var $82 = _getreal(11);
    var $83 = $82;
    var $84 = _getreal(11);
    var $85 = $84;
    var $i_3207 = 0;
    label = 14;
    break;
   case 14:
    var $i_3207;
    var $87 = $i_3207 | 0;
    var $88 = 0;
    var $89 = $88 + $85;
    var $90 = $87 * $89;
    var $91 = $90 + $83;
    var $92 = $87 * $91;
    var $93 = $92 + $81;
    var $94 = $87 * $93;
    var $95 = $94 + $79;
    var $96 = $87 + $95;
    var $97 = $96 < 65535;
    if ($97) {
      label = 15;
      break;
    } else {
      var $100 = -1;
      label = 17;
      break;
    }
   case 15:
    var $phitmp152 = $96 < 0;
    var $not_phitmp152 = $phitmp152 ^ 1;
    var $_mux = $not_phitmp152 << 31 >> 31;
    if ($phitmp152) {
      var $100 = $_mux;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $phitmp153 = $96 >= 0 ? Math.floor($96) : Math.ceil($96);
    var $100 = $phitmp153;
    label = 17;
    break;
   case 17:
    var $100;
    var $101 = 5428500 + ($i_3207 << 1) | 0;
    HEAP16[$101 >> 1] = $100;
    var $102 = $i_3207 + 1 | 0;
    var $exitcond = ($102 | 0) == 65536;
    if ($exitcond) {
      label = 18;
      break;
    } else {
      var $i_3207 = $102;
      label = 14;
      break;
    }
   case 18:
    var $103 = HEAP16[5245036 >> 1];
    var $104 = $103 << 16 >> 16 == 0;
    if ($104) {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $105 = $33 & 1;
    var $106 = -$105 | 0;
    var $_pre35 = HEAP16[5245028 >> 1];
    var $row_0217 = 0;
    label = 20;
    break;
   case 20:
    var $row_0217;
    var $107 = HEAP32[5245756 >> 2];
    var $108 = $107 & $106;
    var $109 = $_pre35 & 65535;
    var $110 = $108 >>> 0 < $109 >>> 0;
    if ($110) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $_pre39 = HEAP32[5245032 >> 2];
    var $col_0211 = $108;
    label = 22;
    break;
   case 22:
    var $col_0211;
    var $111 = $109 * $row_0217 & -1;
    var $112 = $111 + $col_0211 | 0;
    var $113 = $_pre39 + ($112 << 1) | 0;
    var $114 = HEAP16[$113 >> 1];
    var $115 = $114 & 65535;
    var $116 = 5428500 + ($115 << 1) | 0;
    var $117 = HEAP16[$116 >> 1];
    HEAP16[$113 >> 1] = $117;
    var $118 = $col_0211 + 1 | 0;
    var $119 = $118 >>> 0 < $109 >>> 0;
    if ($119) {
      var $col_0211 = $118;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $120 = $row_0217 + 1 | 0;
    var $121 = $103 & 65535;
    var $122 = $120 >>> 0 < $121 >>> 0;
    if ($122) {
      var $row_0217 = $120;
      label = 20;
      break;
    } else {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    }
   case 24:
    var $123;
    var $124 = _get2();
    var $125 = $124 & 65535;
    var $126 = _get2();
    var $127 = $126 & 65535;
    var $128 = _get2();
    var $129 = _get2();
    var $130 = HEAP16[5245028 >> 1];
    var $131 = ($124 & 65535) < ($130 & 65535);
    if ($131) {
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 25:
    if ($128 << 16 >> 16 == 131) {
      label = 26;
      break;
    } else if ($128 << 16 >> 16 == 129) {
      label = 32;
      break;
    } else {
      label = 36;
      break;
    }
   case 26:
    var $133 = HEAP16[5245036 >> 1];
    var $134 = $133 << 16 >> 16 == 0;
    if ($134) {
      label = 36;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $135 = $125 - 2 | 0;
    var $136 = $125 + 2 | 0;
    var $137 = $125 - 1 | 0;
    var $138 = $125 + 1 | 0;
    var $_pre36 = HEAP32[5427632 >> 2];
    var $_pre37 = HEAP16[5243564 >> 1];
    var $_pre38 = HEAP16[5263700 >> 1];
    var $row_1194 = 0;
    label = 28;
    break;
   case 28:
    var $row_1194;
    var $140 = $_pre37 & 65535;
    var $141 = $row_1194 - $140 | 0;
    var $142 = $141 << 1;
    var $143 = $142 & 14;
    var $144 = $_pre38 & 65535;
    var $145 = $125 - $144 | 0;
    var $146 = $145 & 1;
    var $147 = $143 | $146;
    var $148 = $147 << 1;
    var $149 = $_pre36 >>> ($148 >>> 0);
    var $150 = $149 & 3;
    var $151 = ($150 | 0) == 1;
    if ($151) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $153 = $row_1194 - 1 | 0;
    var $154 = _raw($153, $137);
    HEAP32[$23 >> 2] = $154;
    var $155 = _raw($153, $138);
    HEAP32[$24 >> 2] = $155;
    var $156 = $155 + $154 | 0;
    var $157 = $row_1194 + 1 | 0;
    var $158 = _raw($157, $137);
    HEAP32[$25 >> 2] = $158;
    var $159 = $158 + $156 | 0;
    var $160 = _raw($157, $138);
    HEAP32[$26 >> 2] = $160;
    var $161 = $160 + $159 | 0;
    var $162 = $154 << 2;
    var $163 = $162 - $161 | 0;
    var $ispos = ($163 | 0) > -1;
    var $neg = -$163 | 0;
    var $164 = $ispos ? $163 : $neg;
    HEAP32[$27 >> 2] = $164;
    var $165 = $155 << 2;
    var $166 = $165 - $161 | 0;
    var $ispos_1 = ($166 | 0) > -1;
    var $neg_1 = -$166 | 0;
    var $167 = $ispos_1 ? $166 : $neg_1;
    HEAP32[$28 >> 2] = $167;
    var $168 = ($164 | 0) < ($167 | 0);
    var $i_5_max_0_1 = $168 & 1;
    var $169 = $158 << 2;
    var $170 = $169 - $161 | 0;
    var $ispos_2 = ($170 | 0) > -1;
    var $neg_2 = -$170 | 0;
    var $171 = $ispos_2 ? $170 : $neg_2;
    HEAP32[$29 >> 2] = $171;
    var $172 = $dev + ($i_5_max_0_1 << 2) | 0;
    var $173 = HEAP32[$172 >> 2];
    var $174 = ($173 | 0) < ($171 | 0);
    var $i_5_max_0_2 = $174 ? 2 : $i_5_max_0_1;
    var $175 = $160 << 2;
    var $176 = $175 - $161 | 0;
    var $ispos_3 = ($176 | 0) > -1;
    var $neg_3 = -$176 | 0;
    var $177 = $ispos_3 ? $176 : $neg_3;
    HEAP32[$30 >> 2] = $177;
    var $178 = $dev + ($i_5_max_0_2 << 2) | 0;
    var $179 = HEAP32[$178 >> 2];
    var $180 = ($179 | 0) < ($177 | 0);
    var $i_5_max_0_3 = $180 ? 3 : $i_5_max_0_2;
    var $181 = $val + ($i_5_max_0_3 << 2) | 0;
    var $182 = HEAP32[$181 >> 2];
    var $183 = $161 - $182 | 0;
    var $184 = $183 | 0;
    var $185 = $184 / 3;
    var $186 = $185 + .5;
    var $187 = $186 >= 0 ? Math.floor($186) : Math.ceil($186);
    var $188 = $130 & 65535;
    var $189 = $188 * $row_1194 & -1;
    var $190 = $189 + $125 | 0;
    var $191 = HEAP32[5245032 >> 2];
    var $192 = $191 + ($190 << 1) | 0;
    HEAP16[$192 >> 1] = $187;
    var $_pre_phi = $157;
    label = 31;
    break;
   case 30:
    var $193 = $row_1194 - 2 | 0;
    var $194 = _raw($193, $135);
    var $195 = _raw($193, $136);
    var $196 = $195 + $194 | 0;
    var $197 = $row_1194 + 2 | 0;
    var $198 = _raw($197, $135);
    var $199 = $198 + $196 | 0;
    var $200 = _raw($197, $136);
    var $201 = $200 + $199 | 0;
    var $202 = $201 | 0;
    var $203 = $202 * .0732233;
    var $204 = $203 + .5;
    var $205 = _raw($row_1194, $135);
    var $206 = _raw($row_1194, $136);
    var $207 = $206 + $205 | 0;
    var $208 = $207 | 0;
    var $209 = $208 * .3535534;
    var $210 = $204 + $209;
    var $211 = $210 >= 0 ? Math.floor($210) : Math.ceil($210);
    var $212 = $130 & 65535;
    var $213 = $212 * $row_1194 & -1;
    var $214 = $213 + $125 | 0;
    var $215 = HEAP32[5245032 >> 2];
    var $216 = $215 + ($214 << 1) | 0;
    HEAP16[$216 >> 1] = $211;
    var $_pre40 = $row_1194 + 1 | 0;
    var $_pre_phi = $_pre40;
    label = 31;
    break;
   case 31:
    var $_pre_phi;
    var $218 = $133 & 65535;
    var $219 = $_pre_phi >>> 0 < $218 >>> 0;
    if ($219) {
      var $row_1194 = $_pre_phi;
      label = 28;
      break;
    } else {
      label = 36;
      break;
    }
   case 32:
    var $221 = HEAP16[5245036 >> 1];
    var $222 = ($126 & 65535) < ($221 & 65535);
    if ($222) {
      label = 33;
      break;
    } else {
      label = 36;
      break;
    }
   case 33:
    var $223 = HEAP32[5427632 >> 2];
    var $224 = HEAP16[5243564 >> 1];
    var $225 = $224 & 65535;
    var $226 = $127 - $225 | 0;
    var $227 = $226 << 1;
    var $228 = $227 & 14;
    var $229 = HEAP16[5263700 >> 1];
    var $230 = $229 & 65535;
    var $231 = $125 - $230 | 0;
    var $232 = $231 & 1;
    var $233 = $228 | $232;
    var $234 = $233 << 1;
    var $235 = $223 >>> ($234 >>> 0);
    var $236 = $235 & 3;
    var $237 = ($236 | 0) != 1;
    var $238 = $237 & 1;
    var $239 = $238 << 2;
    var $240 = $239 | 8;
    var $i_7177 = $239;
    var $sum_2178 = 0;
    label = 34;
    break;
   case 34:
    var $sum_2178;
    var $i_7177;
    var $242 = 5245704 + ($i_7177 << 1) | 0;
    var $243 = HEAP8[$242];
    var $244 = $243 << 24 >> 24;
    var $245 = $244 + $127 | 0;
    var $246 = 5245705 + ($i_7177 << 1) | 0;
    var $247 = HEAP8[$246];
    var $248 = $247 << 24 >> 24;
    var $249 = $248 + $125 | 0;
    var $250 = _raw($245, $249);
    var $251 = $250 + $sum_2178 | 0;
    var $252 = $i_7177 + 1 | 0;
    var $253 = ($252 | 0) < ($240 | 0);
    if ($253) {
      var $i_7177 = $252;
      var $sum_2178 = $251;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $phitmp226 = $251 + 4 | 0;
    var $phitmp227 = $phitmp226 >>> 3;
    var $phitmp228 = $phitmp227 & 65535;
    var $255 = $130 & 65535;
    var $256 = $255 * $127 & -1;
    var $257 = $256 + $125 | 0;
    var $258 = HEAP32[5245032 >> 2];
    var $259 = $258 + ($257 << 1) | 0;
    HEAP16[$259 >> 1] = $phitmp228;
    label = 36;
    break;
   case 36:
    var $260 = $123 - 8 | 0;
    var $261 = ($260 | 0) > -1;
    if ($261) {
      var $123 = $260;
      label = 24;
      break;
    } else {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    }
   case 37:
    _phase_one_flat_field(1, 2);
    var $off_412_1 = $off_412_0221;
    var $mindiff_1 = $mindiff_0220;
    label = 42;
    break;
   case 38:
    _phase_one_flat_field(0, 2);
    var $off_412_1 = $off_412_0221;
    var $mindiff_1 = $mindiff_0220;
    label = 42;
    break;
   case 39:
    _phase_one_flat_field(0, 4);
    var $off_412_1 = $off_412_0221;
    var $mindiff_1 = $mindiff_0220;
    label = 42;
    break;
   case 40:
    var $266 = HEAP32[5264116 >> 2];
    var $267 = _fseek($266, 36, 1);
    var $268 = _get2();
    var $269 = $268 & 65535;
    var $270 = HEAP32[5245760 >> 2];
    var $271 = $269 - $270 | 0;
    var $ispos155 = ($271 | 0) > -1;
    var $neg156 = -$271 | 0;
    var $272 = $ispos155 ? $271 : $neg156;
    var $273 = ($mindiff_0220 | 0) > ($272 | 0);
    if ($273) {
      label = 41;
      break;
    } else {
      var $off_412_1 = $off_412_0221;
      var $mindiff_1 = $mindiff_0220;
      label = 42;
      break;
    }
   case 41:
    var $275 = HEAP32[5264116 >> 2];
    var $276 = _ftell($275);
    var $277 = $276 - 38 | 0;
    var $off_412_1 = $277;
    var $mindiff_1 = $272;
    label = 42;
    break;
   case 42:
    var $mindiff_1;
    var $off_412_1;
    var $278 = HEAP32[5264116 >> 2];
    var $279 = _fseek($278, $37, 0);
    var $280 = ($32 | 0) == 0;
    if ($280) {
      label = 43;
      break;
    } else {
      var $mindiff_0220 = $mindiff_1;
      var $off_412_0221 = $off_412_1;
      var $_in = $32;
      label = 7;
      break;
    }
   case 43:
    var $281 = ($off_412_1 | 0) == 0;
    if ($281) {
      label = 64;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    var $282 = ($299 | 0) != 0;
    if ($282) {
      var $j_1172_1 = 0;
      label = 67;
      break;
    } else {
      label = 48;
      break;
    }
   case 45:
    var $283 = HEAP32[5264116 >> 2];
    var $284 = _fseek($283, $off_412_1, 0);
    var $285 = _get4();
    var $286 = _get4();
    var $287 = $286 & 32767;
    var $288 = _get4();
    var $289 = $288 & 32767;
    var $290 = _get4();
    var $291 = $290 & 32767;
    var $292 = _get4();
    var $293 = $292 & 32767;
    var $294 = _get4();
    var $295 = _get4();
    var $296 = _get4();
    var $297 = _get4();
    var $298 = $291 * $287 & -1;
    var $299 = $293 * $289 & -1;
    var $300 = $299 + $298 | 0;
    var $301 = _calloc($300, 6);
    var $302 = $301;
    _merror($301, 5586708);
    var $303 = $302 + ($300 << 2) | 0;
    var $304 = $303;
    var $305 = _get2();
    var $306 = ($298 | 0) != 0;
    if ($306) {
      var $j_1172 = 0;
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 46:
    var $j_1172;
    var $307 = _getreal(11);
    var $308 = $307;
    var $309 = $302 + ($j_1172 << 2) | 0;
    HEAPF32[$309 >> 2] = $308;
    var $310 = $j_1172 + 1 | 0;
    var $311 = ($310 | 0) < ($298 | 0);
    if ($311) {
      var $j_1172 = $310;
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 47:
    if ($282) {
      var $j_2165_1 = 0;
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 48:
    if ($306) {
      var $j_2165 = 0;
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 49:
    var $312 = $291 | 0;
    var $313 = $mult | 0;
    var $314 = $mult + 4 | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_2161 = 0;
    var $319 = $_pre;
    label = 51;
    break;
   case 50:
    var $j_2165;
    var $315 = _get2();
    var $316 = $304 + ($j_2165 << 1) | 0;
    HEAP16[$316 >> 1] = $315;
    var $317 = $j_2165 + 1 | 0;
    var $318 = ($317 | 0) < ($298 | 0);
    if ($318) {
      var $j_2165 = $317;
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 51:
    var $319;
    var $row_2161;
    var $320 = $319 << 16 >> 16 == 0;
    if ($320) {
      var $403 = 0;
      label = 62;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $321 = $319 & 65535;
    var $322 = $row_2161 >>> 0;
    var $_pre34 = HEAP32[5245032 >> 2];
    var $col_1159 = 0;
    var $324 = $321;
    label = 53;
    break;
   case 53:
    var $324;
    var $col_1159;
    var $325 = $col_1159 >>> 0;
    var $326 = $325 * $312;
    var $327 = $324 | 0;
    var $328 = $326 / $327;
    var $329 = $328 & -1;
    var $330 = $329 | 0;
    var $331 = $324 * $row_2161 & -1;
    var $332 = $331 + $col_1159 | 0;
    var $333 = $_pre34 + ($332 << 1) | 0;
    var $334 = HEAP16[$333 >> 1];
    var $335 = $334 & 65535;
    var $336 = $335 | 0;
    var $337 = $336 * .5;
    var $338 = $337;
    var $339 = $329 + 2 | 0;
    var $i_11157 = $329;
    label = 54;
    break;
   case 54:
    var $i_11157;
    var $340 = $287 * $i_11157 & -1;
    var $k_0 = 0;
    var $j_3 = 0;
    label = 55;
    break;
   case 55:
    var $j_3;
    var $k_0;
    var $342 = ($j_3 | 0) < ($287 | 0);
    if ($342) {
      label = 56;
      break;
    } else {
      var $k_1 = $k_0;
      label = 57;
      break;
    }
   case 56:
    var $344 = $340 + $j_3 | 0;
    var $345 = $304 + ($344 << 1) | 0;
    var $346 = HEAP16[$345 >> 1];
    var $347 = $346 & 65535;
    var $348 = $347 | 0;
    var $349 = $338 < $348;
    var $350 = $j_3 + 1 | 0;
    if ($349) {
      var $k_1 = $344;
      label = 57;
      break;
    } else {
      var $k_0 = $344;
      var $j_3 = $350;
      label = 55;
      break;
    }
   case 57:
    var $k_1;
    var $352 = ($j_3 | 0) == 0;
    var $353 = ($j_3 | 0) == ($287 | 0);
    var $or_cond234 = $352 | $353;
    if ($or_cond234) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $_pre42 = $k_1 - 1 | 0;
    var $368 = 0;
    var $_pre_phi43 = $_pre42;
    label = 60;
    break;
   case 59:
    var $355 = $304 + ($k_1 << 1) | 0;
    var $356 = HEAP16[$355 >> 1];
    var $357 = $356 & 65535;
    var $358 = $357 | 0;
    var $359 = $358 - $338;
    var $360 = $k_1 - 1 | 0;
    var $361 = $304 + ($360 << 1) | 0;
    var $362 = HEAP16[$361 >> 1];
    var $363 = $362 & 65535;
    var $364 = $357 - $363 | 0;
    var $365 = $364 | 0;
    var $366 = $359 / $365;
    var $368 = $366;
    var $_pre_phi43 = $360;
    label = 60;
    break;
   case 60:
    var $_pre_phi43;
    var $368;
    var $369 = $302 + ($_pre_phi43 << 2) | 0;
    var $370 = HEAPF32[$369 >> 2];
    var $371 = $368 * $370;
    var $372 = $302 + ($k_1 << 2) | 0;
    var $373 = HEAPF32[$372 >> 2];
    var $374 = 1 - $368;
    var $375 = $374 * $373;
    var $376 = $371 + $375;
    var $377 = $i_11157 - $329 | 0;
    var $378 = $mult + ($377 << 2) | 0;
    HEAPF32[$378 >> 2] = $376;
    var $379 = $i_11157 + 1 | 0;
    var $380 = ($379 | 0) < ($339 | 0);
    if ($380) {
      var $i_11157 = $379;
      label = 54;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    var $382 = $328 - $330;
    var $383 = HEAPF32[$313 >> 2];
    var $384 = 1 - $382;
    var $385 = $384 * $383;
    var $386 = HEAPF32[$314 >> 2];
    var $387 = $382 * $386;
    var $388 = $385 + $387;
    var $389 = $322 * $388;
    var $390 = $338 + $389;
    var $391 = $390 * 2;
    var $392 = $391 & -1;
    var $393 = ($392 | 0) < 65535;
    var $394 = $393 ? $392 : 65535;
    var $395 = ($394 | 0) < 0;
    var $phitmp = $394 & 65535;
    var $396 = $395 ? 0 : $phitmp;
    var $397 = $_pre & 65535;
    var $398 = $397 * $row_2161 & -1;
    var $399 = $398 + $col_1159 | 0;
    var $400 = $_pre34 + ($399 << 1) | 0;
    HEAP16[$400 >> 1] = $396;
    var $401 = $col_1159 + 1 | 0;
    var $402 = $401 >>> 0 < $397 >>> 0;
    if ($402) {
      var $col_1159 = $401;
      var $324 = $397;
      label = 53;
      break;
    } else {
      var $403 = $_pre;
      label = 62;
      break;
    }
   case 62:
    var $403;
    var $404 = $row_2161 + 1 | 0;
    var $405 = $411 & 65535;
    var $406 = $404 >>> 0 < $405 >>> 0;
    if ($406) {
      var $row_2161 = $404;
      var $319 = $403;
      label = 51;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    _free($301);
    label = 64;
    break;
   case 64:
    STACKTOP = __stackBase__;
    return;
   case 65:
    var $j_2165_1;
    var $407 = _get2();
    var $_sum = $298 + $j_2165_1 | 0;
    var $408 = $304 + ($_sum << 1) | 0;
    HEAP16[$408 >> 1] = $407;
    var $409 = $j_2165_1 + 1 | 0;
    var $410 = ($409 | 0) < ($299 | 0);
    if ($410) {
      var $j_2165_1 = $409;
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $411 = HEAP16[5245036 >> 1];
    var $412 = $411 << 16 >> 16 == 0;
    if ($412) {
      label = 63;
      break;
    } else {
      label = 49;
      break;
    }
   case 67:
    var $j_1172_1;
    var $413 = _getreal(11);
    var $414 = $413;
    var $_sum44 = $298 + $j_1172_1 | 0;
    var $415 = $302 + ($_sum44 << 2) | 0;
    HEAPF32[$415 >> 2] = $414;
    var $416 = $j_1172_1 + 1 | 0;
    var $417 = ($416 | 0) < ($299 | 0);
    if ($417) {
      var $j_1172_1 = $416;
      label = 67;
      break;
    } else {
      label = 48;
      break;
    }
  }
}
_phase_one_correct["X"] = 1;
function _phase_one_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[5245744 >> 2];
    var $3 = _fseek($1, $2, 0);
    var $4 = _get2();
    var $5 = _get2();
    var $6 = HEAP32[5245740 >> 2];
    var $7 = ($6 | 0) == 1;
    var $8 = HEAP32[5264116 >> 2];
    var $9 = HEAP32[5428492 >> 2];
    var $10 = _fseek($8, $9, 0);
    var $11 = HEAP32[5245032 >> 2];
    var $12 = HEAP16[5245028 >> 1];
    var $13 = $12 & 65535;
    var $14 = HEAP16[5245036 >> 1];
    var $15 = $14 & 65535;
    var $16 = $15 * $13 & -1;
    _read_shorts($11, $16);
    var $17 = HEAP32[5245740 >> 2];
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $19 = HEAP16[5245028 >> 1];
    var $20 = $19 & 65535;
    var $21 = HEAP16[5245036 >> 1];
    var $22 = $21 & 65535;
    var $23 = $22 * $20 & -1;
    var $24 = ($23 | 0) == 0;
    if ($24) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $25 = $7 ? 21845 : 4948;
    var $26 = $25 ^ -1;
    var $_pre = HEAP32[5245032 >> 2];
    var $i_011 = 0;
    label = 5;
    break;
   case 5:
    var $i_011;
    var $28 = $_pre + ($i_011 << 1) | 0;
    var $29 = HEAP16[$28 >> 1];
    var $30 = $29 ^ $4;
    var $31 = $30 & 65535;
    var $32 = $i_011 | 1;
    var $33 = $_pre + ($32 << 1) | 0;
    var $34 = HEAP16[$33 >> 1];
    var $35 = $34 ^ $5;
    var $36 = $35 & 65535;
    var $37 = $31 & $25;
    var $38 = $36 & $26;
    var $39 = $38 | $37;
    var $40 = $39 & 65535;
    HEAP16[$28 >> 1] = $40;
    var $41 = $36 & $25;
    var $42 = $31 & $26;
    var $43 = $41 | $42;
    var $44 = $43 & 65535;
    HEAP16[$33 >> 1] = $44;
    var $45 = $i_011 + 2 | 0;
    var $46 = ($45 | 0) < ($23 | 0);
    if ($46) {
      var $i_011 = $45;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    return;
  }
}
_phase_one_load_raw["X"] = 1;
function _ph1_bithuff($nbits, $huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    if (($nbits | 0) == -1) {
      label = 3;
      break;
    } else if (($nbits | 0) == 0) {
      var $_0 = 0;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5245728 >> 2] = 0;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$3$0 = 5245732;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = 5245736;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    var $_0 = 0;
    label = 9;
    break;
   case 4:
    var $3 = HEAP32[5245728 >> 2];
    var $4 = ($3 | 0) < ($nbits | 0);
    var $st$2$0 = 5245732;
    var $5$0 = HEAP32[$st$2$0 >> 2];
    var $st$2$1 = 5245736;
    var $5$1 = HEAP32[$st$2$1 >> 2];
    if ($4) {
      label = 5;
      break;
    } else {
      var $14 = $3;
      var $13$1 = $5$1;
      var $13$0 = $5$0;
      label = 6;
      break;
    }
   case 5:
    var $7$0 = 0;
    var $7$1 = $5$0;
    var $8 = _get4();
    var $9$0 = $8;
    var $9$1 = 0;
    var $10$0 = $9$0 | $7$0;
    var $10$1 = $9$1 | $7$1;
    var $st$7$0 = 5245732;
    HEAP32[$st$7$0 >> 2] = $10$0;
    var $st$7$1 = 5245736;
    HEAP32[$st$7$1 >> 2] = $10$1;
    var $11 = HEAP32[5245728 >> 2];
    var $12 = $11 + 32 | 0;
    HEAP32[5245728 >> 2] = $12;
    var $14 = $12;
    var $13$1 = $10$1;
    var $13$0 = $10$0;
    label = 6;
    break;
   case 6:
    var $13$0;
    var $13$1;
    var $14;
    var $15 = 64 - $14 | 0;
    var $16$0 = $15;
    Runtime.bitshift64($13$0, $13$1, 0, $16$0);
    var $17$0 = HEAP32[tempDoublePtr >> 2], $17$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $18 = 64 - $nbits | 0;
    var $19$0 = $18;
    Runtime.bitshift64($17$0, $17$1, 2, $19$0);
    var $20$0 = HEAP32[tempDoublePtr >> 2];
    var $21$0 = $20$0;
    var $21 = $21$0;
    var $22 = ($huff | 0) == 0;
    if ($22) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $24 = $huff + ($21 << 1) | 0;
    var $25 = HEAP16[$24 >> 1];
    var $26 = $25 & 65535;
    var $27 = $26 >>> 8;
    var $28 = $14 - $27 | 0;
    HEAP32[5245728 >> 2] = $28;
    var $29 = $26 & 255;
    var $_0 = $29;
    label = 9;
    break;
   case 8:
    var $31 = $14 - $nbits | 0;
    HEAP32[5245728 >> 2] = $31;
    var $_0 = $21;
    label = 9;
    break;
   case 9:
    var $_0;
    return $_0;
  }
}
_ph1_bithuff["X"] = 1;
function _phase_one_load_raw_c() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $len = __stackBase__;
    var $pred = __stackBase__ + 8;
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = HEAP16[5245036 >> 1];
    var $4 = $3 & 65535;
    var $5 = $4 << 2;
    var $6 = $5 + $2 | 0;
    var $7 = _calloc($6, 2);
    var $8 = $7;
    _merror($7, 5586588);
    var $9 = HEAP16[5245028 >> 1];
    var $10 = $9 & 65535;
    var $11 = $8 + ($10 << 1) | 0;
    var $12 = $11;
    var $13 = HEAP32[5264116 >> 2];
    var $14 = HEAP32[5244068 >> 2];
    var $15 = _fseek($13, $14, 0);
    var $16 = HEAP16[5245036 >> 1];
    var $17 = $16 & 65535;
    var $18 = $16 << 16 >> 16 == 0;
    if ($18) {
      var $_lcssa = $17;
      label = 4;
      break;
    } else {
      var $row_065 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_065;
    var $19 = _get4();
    var $20 = $12 + ($row_065 << 2) | 0;
    HEAP32[$20 >> 2] = $19;
    var $21 = $row_065 + 1 | 0;
    var $22 = HEAP16[5245036 >> 1];
    var $23 = $22 & 65535;
    var $24 = ($21 | 0) < ($23 | 0);
    if ($24) {
      var $row_065 = $21;
      label = 3;
      break;
    } else {
      var $_lcssa = $23;
      label = 4;
      break;
    }
   case 4:
    var $_lcssa;
    var $25 = $11;
    var $26 = HEAP32[5264116 >> 2];
    var $27 = HEAP32[5245752 >> 2];
    var $28 = _fseek($26, $27, 0);
    var $29 = HEAP32[5245752 >> 2];
    var $30 = ($29 | 0) == 0;
    if ($30) {
      var $i_064 = 0;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $32 = $25 + ($_lcssa << 2) | 0;
    var $33 = HEAP16[5245036 >> 1];
    var $34 = $33 & 65535;
    var $35 = $34 << 1;
    _read_shorts($32, $35);
    var $i_064 = 0;
    label = 8;
    break;
   case 6:
    var $36 = HEAP16[5245036 >> 1];
    var $37 = $36 << 16 >> 16 == 0;
    if ($37) {
      label = 33;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $38 = $pred + 4 | 0;
    var $39 = $pred | 0;
    var $40 = $len + 4 | 0;
    var $41 = $len | 0;
    var $row_159 = 0;
    label = 9;
    break;
   case 8:
    var $i_064;
    var $42 = $i_064 * $i_064 & -1;
    var $43 = $42 | 0;
    var $44 = $43 / 3.969;
    var $45 = $44 + .5;
    var $46 = $45 >= 0 ? Math.floor($45) : Math.ceil($45);
    var $47 = 5428500 + ($i_064 << 1) | 0;
    HEAP16[$47 >> 1] = $46;
    var $48 = $i_064 + 1 | 0;
    var $exitcond = ($48 | 0) == 256;
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $i_064 = $48;
      label = 8;
      break;
    }
   case 9:
    var $row_159;
    var $50 = HEAP32[5264116 >> 2];
    var $51 = HEAP32[5428492 >> 2];
    var $52 = $12 + ($row_159 << 2) | 0;
    var $53 = HEAP32[$52 >> 2];
    var $54 = $53 + $51 | 0;
    var $55 = _fseek($50, $54, 0);
    var $56 = _ph1_bithuff(-1, 0);
    HEAP32[$38 >> 2] = 0;
    HEAP32[$39 >> 2] = 0;
    var $57 = HEAP16[5245028 >> 1];
    var $58 = $57 << 16 >> 16 == 0;
    if ($58) {
      label = 32;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $59 = $57 & 65535;
    var $col_055 = 0;
    var $61 = $59;
    label = 11;
    break;
   case 11:
    var $61;
    var $col_055;
    var $62 = $61 & 65528;
    var $63 = ($col_055 | 0) < ($62 | 0);
    if ($63) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$40 >> 2] = 14;
    HEAP32[$41 >> 2] = 14;
    label = 18;
    break;
   case 13:
    var $66 = $col_055 & 7;
    var $67 = ($66 | 0) == 0;
    if ($67) {
      var $j_0 = 0;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    var $j_0;
    var $68 = ($j_0 | 0) < 5;
    if ($68) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    var $70 = _ph1_bithuff(1, 0);
    var $71 = ($70 | 0) == 0;
    var $72 = $j_0 + 1 | 0;
    if ($71) {
      var $j_0 = $72;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $73 = ($j_0 | 0) == 0;
    if ($73) {
      var $j_0_1 = 0;
      label = 34;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $74 = $j_0 << 1;
    var $75 = $74 - 2 | 0;
    var $76 = _ph1_bithuff(1, 0);
    var $77 = $75 + $76 | 0;
    var $78 = 5245664 + ($77 << 2) | 0;
    var $79 = HEAP32[$78 >> 2];
    HEAP32[$41 >> 2] = $79;
    var $j_0_1 = 0;
    label = 34;
    break;
   case 18:
    var $80 = $col_055 & 1;
    var $81 = $len + ($80 << 2) | 0;
    var $82 = HEAP32[$81 >> 2];
    var $83 = ($82 | 0) == 14;
    if ($83) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $85 = _ph1_bithuff(16, 0);
    var $86 = $pred + ($80 << 2) | 0;
    HEAP32[$86 >> 2] = $85;
    var $87 = $85 & 65535;
    var $88 = $8 + ($col_055 << 1) | 0;
    HEAP16[$88 >> 1] = $87;
    var $100 = $85;
    label = 21;
    break;
   case 20:
    var $90 = _ph1_bithuff($82, 0);
    var $91 = $82 - 1 | 0;
    var $_neg = -1 << $91;
    var $92 = $pred + ($80 << 2) | 0;
    var $93 = HEAP32[$92 >> 2];
    var $94 = $_neg + 1 | 0;
    var $95 = $94 + $90 | 0;
    var $96 = $95 + $93 | 0;
    HEAP32[$92 >> 2] = $96;
    var $97 = $96 & 65535;
    var $98 = $8 + ($col_055 << 1) | 0;
    HEAP16[$98 >> 1] = $97;
    var $100 = $96;
    label = 21;
    break;
   case 21:
    var $100;
    var $101 = $100 >>> 0 > 65535;
    if ($101) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _derror();
    label = 23;
    break;
   case 23:
    var $104 = HEAP32[5245740 >> 2];
    var $105 = ($104 | 0) == 5;
    if ($105) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    var $107 = $8 + ($col_055 << 1) | 0;
    var $108 = HEAP16[$107 >> 1];
    var $109 = ($108 & 65535) < 256;
    if ($109) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $111 = $108 & 65535;
    var $112 = 5428500 + ($111 << 1) | 0;
    var $113 = HEAP16[$112 >> 1];
    HEAP16[$107 >> 1] = $113;
    label = 26;
    break;
   case 26:
    var $115 = $col_055 + 1 | 0;
    var $116 = HEAP16[5245028 >> 1];
    var $117 = $116 & 65535;
    var $118 = ($115 | 0) < ($117 | 0);
    if ($118) {
      var $col_055 = $115;
      var $61 = $117;
      label = 11;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $119 = $116 << 16 >> 16 == 0;
    if ($119) {
      label = 32;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $_sum = $row_159 + $_lcssa | 0;
    var $col_156 = 0;
    label = 29;
    break;
   case 29:
    var $col_156;
    var $120 = $8 + ($col_156 << 1) | 0;
    var $121 = HEAP16[$120 >> 1];
    var $122 = $121 & 65535;
    var $123 = $122 << 2;
    var $124 = HEAP32[5245748 >> 2];
    var $125 = $123 - $124 | 0;
    var $126 = HEAP32[5245756 >> 2];
    var $127 = ($col_156 | 0) >= ($126 | 0);
    var $128 = $127 & 1;
    var $129 = $25 + ($_sum << 2) + ($128 << 1) | 0;
    var $130 = HEAP16[$129 >> 1];
    var $131 = $130 << 16 >> 16;
    var $132 = $131 + $125 | 0;
    var $133 = ($132 | 0) > 0;
    if ($133) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $135 = $132 & 65535;
    var $136 = $117 * $row_159 & -1;
    var $137 = $136 + $col_156 | 0;
    var $138 = HEAP32[5245032 >> 2];
    var $139 = $138 + ($137 << 1) | 0;
    HEAP16[$139 >> 1] = $135;
    label = 31;
    break;
   case 31:
    var $141 = $col_156 + 1 | 0;
    var $142 = ($141 | 0) < ($117 | 0);
    if ($142) {
      var $col_156 = $141;
      label = 29;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $143 = $row_159 + 1 | 0;
    var $144 = HEAP16[5245036 >> 1];
    var $145 = $144 & 65535;
    var $146 = ($143 | 0) < ($145 | 0);
    if ($146) {
      var $row_159 = $143;
      label = 9;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    _free($7);
    var $147 = HEAP32[5245748 >> 2];
    var $148 = 65532 - $147 | 0;
    HEAP32[5263496 >> 2] = $148;
    STACKTOP = __stackBase__;
    return;
   case 34:
    var $j_0_1;
    var $149 = ($j_0_1 | 0) < 5;
    if ($149) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    var $151 = _ph1_bithuff(1, 0);
    var $152 = ($151 | 0) == 0;
    var $153 = $j_0_1 + 1 | 0;
    if ($152) {
      var $j_0_1 = $153;
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $154 = ($j_0_1 | 0) == 0;
    if ($154) {
      label = 18;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $155 = $j_0_1 << 1;
    var $156 = $155 - 2 | 0;
    var $157 = _ph1_bithuff(1, 0);
    var $158 = $156 + $157 | 0;
    var $159 = 5245664 + ($158 << 2) | 0;
    var $160 = HEAP32[$159 >> 2];
    HEAP32[$40 >> 2] = $160;
    label = 18;
    break;
  }
}
_phase_one_load_raw_c["X"] = 1;
function _hasselblad_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $1 = _ljpeg_start($jh, 0);
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP16[5262944 >> 1] = 18761;
    var $4 = _ph1_bithuff(-1, 0);
    var $5 = HEAP16[5245036 >> 1];
    var $6 = $5 << 16 >> 16 == 0;
    if ($6) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = $jh + 52 | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_021 = 0;
    var $9 = $_pre;
    var $8 = $5;
    label = 5;
    break;
   case 5:
    var $8;
    var $9;
    var $row_021;
    var $10 = HEAP32[5263696 >> 2];
    var $11 = $10 + 32768 | 0;
    var $12 = $9 << 16 >> 16 == 0;
    if ($12) {
      var $46 = 0;
      var $45 = $8;
      label = 10;
      break;
    } else {
      var $col_020 = 0;
      var $pred_sroa_1_0 = $11;
      var $pred_sroa_0_0 = $11;
      label = 6;
      break;
    }
   case 6:
    var $pred_sroa_0_0;
    var $pred_sroa_1_0;
    var $col_020;
    var $13 = HEAP32[$7 >> 2];
    var $14 = HEAP16[$13 >> 1];
    var $15 = $14 & 65535;
    var $16 = $13 + 2 | 0;
    var $17 = _ph1_bithuff($15, $16);
    var $18 = HEAP32[$7 >> 2];
    var $19 = HEAP16[$18 >> 1];
    var $20 = $19 & 65535;
    var $21 = $18 + 2 | 0;
    var $22 = _ph1_bithuff($20, $21);
    var $23 = _ph1_bithuff($17, 0);
    var $24 = $17 - 1 | 0;
    var $25 = 1 << $24;
    var $26 = $25 & $23;
    var $27 = ($26 | 0) == 0;
    if ($27) {
      label = 7;
      break;
    } else {
      var $diff_0 = $23;
      label = 8;
      break;
    }
   case 7:
    var $_neg = -1 << $17;
    var $_neg17 = $23 + 1 | 0;
    var $29 = $_neg17 + $_neg | 0;
    var $diff_0 = $29;
    label = 8;
    break;
   case 8:
    var $diff_0;
    var $31 = ($diff_0 | 0) == 65535;
    var $_diff_0 = $31 ? -32768 : $diff_0;
    var $32 = $_diff_0 + $pred_sroa_0_0 | 0;
    var $33 = $32 & 65535;
    var $34 = HEAP16[5245028 >> 1];
    var $35 = $34 & 65535;
    var $36 = $35 * $row_021 & -1;
    var $37 = $col_020 + $36 | 0;
    var $38 = HEAP32[5245032 >> 2];
    var $39 = $38 + ($37 << 1) | 0;
    HEAP16[$39 >> 1] = $33;
    var $40 = _ph1_bithuff($22, 0);
    var $41 = $22 - 1 | 0;
    var $42 = 1 << $41;
    var $43 = $42 & $40;
    var $44 = ($43 | 0) == 0;
    if ($44) {
      label = 13;
      break;
    } else {
      var $diff_0_1 = $40;
      label = 14;
      break;
    }
   case 9:
    var $_pre3 = HEAP16[5245036 >> 1];
    var $46 = $57;
    var $45 = $_pre3;
    label = 10;
    break;
   case 10:
    var $45;
    var $46;
    var $47 = $row_021 + 1 | 0;
    var $48 = $45 & 65535;
    var $49 = ($47 | 0) < ($48 | 0);
    if ($49) {
      var $row_021 = $47;
      var $9 = $46;
      var $8 = $45;
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _ljpeg_end($jh);
    HEAP32[5263496 >> 2] = 65535;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   case 13:
    var $_neg_1 = -1 << $22;
    var $_neg17_1 = $40 + 1 | 0;
    var $52 = $_neg17_1 + $_neg_1 | 0;
    var $diff_0_1 = $52;
    label = 14;
    break;
   case 14:
    var $diff_0_1;
    var $54 = ($diff_0_1 | 0) == 65535;
    var $_diff_0_1 = $54 ? -32768 : $diff_0_1;
    var $55 = $_diff_0_1 + $pred_sroa_1_0 | 0;
    var $56 = $55 & 65535;
    var $57 = HEAP16[5245028 >> 1];
    var $58 = $57 & 65535;
    var $59 = $58 * $row_021 & -1;
    var $60 = $col_020 | 1;
    var $61 = $60 + $59 | 0;
    var $62 = HEAP32[5245032 >> 2];
    var $63 = $62 + ($61 << 1) | 0;
    HEAP16[$63 >> 1] = $56;
    var $64 = $col_020 + 2 | 0;
    var $65 = ($64 | 0) < ($58 | 0);
    if ($65) {
      var $col_020 = $64;
      var $pred_sroa_1_0 = $55;
      var $pred_sroa_0_0 = $32;
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
  }
}
_hasselblad_load_raw["X"] = 1;
function _leaf_hdr_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5427632 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      var $pixel_1_ph = 0;
      label = 4;
      break;
    }
   case 3:
    var $4 = HEAP16[5245028 >> 1];
    var $5 = $4 & 65535;
    var $6 = _calloc($5, 2);
    var $7 = $6;
    _merror($6, 5586380);
    var $pixel_1_ph = $7;
    label = 4;
    break;
   case 4:
    var $pixel_1_ph;
    var $8 = HEAP32[5243580 >> 2];
    var $9 = ($8 | 0) == 0;
    if ($9) {
      var $pixel_1_lcssa = $pixel_1_ph;
      label = 21;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_pre = HEAP16[5245036 >> 1];
    var $tile_024 = 0;
    var $c_025 = 0;
    var $pixel_127 = $pixel_1_ph;
    var $11 = $_pre;
    var $10 = $8;
    label = 6;
    break;
   case 6:
    var $10;
    var $11;
    var $pixel_127;
    var $c_025;
    var $tile_024;
    var $12 = $11 << 16 >> 16 == 0;
    if ($12) {
      var $tile_1_lcssa = $tile_024;
      var $pixel_2_lcssa = $pixel_127;
      var $67 = 0;
      var $66 = $10;
      label = 20;
      break;
    } else {
      var $tile_117 = $tile_024;
      var $r_018 = 0;
      var $pixel_220 = $pixel_127;
      label = 7;
      break;
    }
   case 7:
    var $pixel_220;
    var $r_018;
    var $tile_117;
    var $13 = HEAP32[5243576 >> 2];
    var $14 = ($r_018 >>> 0) % ($13 >>> 0);
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 8;
      break;
    } else {
      var $tile_2 = $tile_117;
      label = 9;
      break;
    }
   case 8:
    var $17 = HEAP32[5264116 >> 2];
    var $18 = HEAP32[5428492 >> 2];
    var $19 = $tile_117 + 1 | 0;
    var $20 = $tile_117 << 2;
    var $21 = $18 + $20 | 0;
    var $22 = _fseek($17, $21, 0);
    var $23 = HEAP32[5264116 >> 2];
    var $24 = _get4();
    var $25 = _fseek($23, $24, 0);
    var $tile_2 = $19;
    label = 9;
    break;
   case 9:
    var $tile_2;
    var $26 = HEAP32[5427632 >> 2];
    var $27 = ($26 | 0) == 0;
    var $28 = HEAP32[5244920 >> 2];
    var $29 = ($c_025 | 0) == ($28 | 0);
    var $or_cond = $27 | $29;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      var $pixel_4 = $pixel_220;
      label = 18;
      break;
    }
   case 10:
    if ($27) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $_pre7 = HEAP16[5245028 >> 1];
    var $pixel_3 = $pixel_220;
    var $38 = $_pre7;
    label = 13;
    break;
   case 12:
    var $32 = HEAP32[5245032 >> 2];
    var $33 = HEAP16[5245028 >> 1];
    var $34 = $33 & 65535;
    var $35 = $34 * $r_018 & -1;
    var $36 = $32 + ($35 << 1) | 0;
    var $pixel_3 = $36;
    var $38 = $33;
    label = 13;
    break;
   case 13:
    var $38;
    var $pixel_3;
    var $39 = $38 & 65535;
    _read_shorts($pixel_3, $39);
    var $40 = HEAP32[5427632 >> 2];
    var $41 = ($40 | 0) == 0;
    if ($41) {
      label = 14;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 14:
    var $43 = HEAP16[5243564 >> 1];
    var $44 = $43 & 65535;
    var $45 = $r_018 - $44 | 0;
    var $46 = HEAP16[5398712 >> 1];
    var $47 = $46 & 65535;
    var $48 = $45 >>> 0 < $47 >>> 0;
    if ($48) {
      label = 15;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 15:
    var $49 = HEAP16[5242964 >> 1];
    var $50 = $49 << 16 >> 16 == 0;
    if ($50) {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $51 = $49 & 65535;
    var $_pre1 = HEAP16[5263700 >> 1];
    var $_pre2 = HEAP32[5264108 >> 2];
    var $col_015 = 0;
    label = 17;
    break;
   case 17:
    var $col_015;
    var $53 = $_pre1 & 65535;
    var $54 = $53 + $col_015 | 0;
    var $55 = $pixel_3 + ($54 << 1) | 0;
    var $56 = HEAP16[$55 >> 1];
    var $57 = $51 * $45 & -1;
    var $58 = $57 + $col_015 | 0;
    var $59 = $_pre2 + ($58 << 3) + ($c_025 << 1) | 0;
    HEAP16[$59 >> 1] = $56;
    var $60 = $col_015 + 1 | 0;
    var $61 = $60 >>> 0 < $51 >>> 0;
    if ($61) {
      var $col_015 = $60;
      label = 17;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 18:
    var $pixel_4;
    var $62 = $r_018 + 1 | 0;
    var $63 = HEAP16[5245036 >> 1];
    var $64 = $63 & 65535;
    var $65 = $62 >>> 0 < $64 >>> 0;
    if ($65) {
      var $tile_117 = $tile_2;
      var $r_018 = $62;
      var $pixel_220 = $pixel_4;
      label = 7;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre6 = HEAP32[5243580 >> 2];
    var $tile_1_lcssa = $tile_2;
    var $pixel_2_lcssa = $pixel_4;
    var $67 = $63;
    var $66 = $_pre6;
    label = 20;
    break;
   case 20:
    var $66;
    var $67;
    var $pixel_2_lcssa;
    var $tile_1_lcssa;
    var $68 = $c_025 + 1 | 0;
    var $69 = $68 >>> 0 < $66 >>> 0;
    if ($69) {
      var $tile_024 = $tile_1_lcssa;
      var $c_025 = $68;
      var $pixel_127 = $pixel_2_lcssa;
      var $11 = $67;
      var $10 = $66;
      label = 6;
      break;
    } else {
      var $pixel_1_lcssa = $pixel_2_lcssa;
      label = 21;
      break;
    }
   case 21:
    var $pixel_1_lcssa;
    var $70 = HEAP32[5427632 >> 2];
    var $71 = ($70 | 0) == 0;
    if ($71) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAP32[5263496 >> 2] = 65535;
    HEAP32[5245040 >> 2] = 1;
    var $73 = $pixel_1_lcssa;
    _free($73);
    label = 23;
    break;
   case 23:
    return;
  }
}
_leaf_hdr_load_raw["X"] = 1;
function _unpacked_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263496 >> 2];
    var $bits_0 = 0;
    label = 3;
    break;
   case 3:
    var $bits_0;
    var $3 = $bits_0 + 1 | 0;
    var $4 = 1 << $3;
    var $5 = $4 >>> 0 < $1 >>> 0;
    if ($5) {
      var $bits_0 = $3;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = HEAP32[5245032 >> 2];
    var $8 = HEAP16[5245028 >> 1];
    var $9 = $8 & 65535;
    var $10 = HEAP16[5245036 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 * $9 & -1;
    _read_shorts($7, $12);
    var $13 = HEAP16[5245036 >> 1];
    var $14 = $13 << 16 >> 16 == 0;
    if ($14) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_09 = 0;
    var $17 = $_pre;
    var $16 = $13;
    var $15 = $_pre;
    label = 6;
    break;
   case 6:
    var $15;
    var $16;
    var $17;
    var $row_09;
    var $18 = $17 << 16 >> 16 == 0;
    if ($18) {
      var $56 = 0;
      var $55 = $16;
      var $54 = $15;
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $19 = $17 & 65535;
    var $col_08 = 0;
    var $21 = $19;
    var $20 = $15;
    label = 8;
    break;
   case 8:
    var $20;
    var $21;
    var $col_08;
    var $22 = HEAP32[5263696 >> 2];
    var $23 = $21 * $row_09 & -1;
    var $24 = $23 + $col_08 | 0;
    var $25 = HEAP32[5245032 >> 2];
    var $26 = $25 + ($24 << 1) | 0;
    var $27 = HEAP16[$26 >> 1];
    var $28 = $27 & 65535;
    var $29 = $28 >>> ($22 >>> 0);
    var $30 = $29 & 65535;
    HEAP16[$26 >> 1] = $30;
    var $31 = $29 & 65535;
    var $32 = $31 >>> ($3 >>> 0);
    var $33 = ($32 | 0) == 0;
    if ($33) {
      var $50 = $20;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $35 = HEAP16[5243564 >> 1];
    var $36 = $35 & 65535;
    var $37 = $row_09 - $36 | 0;
    var $38 = HEAP16[5398712 >> 1];
    var $39 = $38 & 65535;
    var $40 = $37 >>> 0 < $39 >>> 0;
    if ($40) {
      label = 10;
      break;
    } else {
      var $50 = $20;
      label = 12;
      break;
    }
   case 10:
    var $42 = HEAP16[5263700 >> 1];
    var $43 = $42 & 65535;
    var $44 = $col_08 - $43 | 0;
    var $45 = HEAP16[5242964 >> 1];
    var $46 = $45 & 65535;
    var $47 = $44 >>> 0 < $46 >>> 0;
    if ($47) {
      label = 11;
      break;
    } else {
      var $50 = $20;
      label = 12;
      break;
    }
   case 11:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $50 = $_pre2;
    label = 12;
    break;
   case 12:
    var $50;
    var $51 = $col_08 + 1 | 0;
    var $52 = $50 & 65535;
    var $53 = ($51 | 0) < ($52 | 0);
    if ($53) {
      var $col_08 = $51;
      var $21 = $52;
      var $20 = $50;
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre1 = HEAP16[5245036 >> 1];
    var $56 = $50;
    var $55 = $_pre1;
    var $54 = $50;
    label = 14;
    break;
   case 14:
    var $54;
    var $55;
    var $56;
    var $57 = $row_09 + 1 | 0;
    var $58 = $55 & 65535;
    var $59 = ($57 | 0) < ($58 | 0);
    if ($59) {
      var $row_09 = $57;
      var $17 = $56;
      var $16 = $55;
      var $15 = $54;
      label = 6;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    return;
  }
}
_unpacked_load_raw["X"] = 1;
function _sinar_4shot_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5244920 >> 2];
    var $_b = HEAP8[5398716];
    var $2 = $_b & 1;
    var $3 = $2 | $1;
    var $4 = ($3 | 0) == 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $6 = ($1 | 0) == 0;
    var $7 = $1 - 1 | 0;
    var $_ = $6 ? 0 : $7;
    var $8 = $_ >>> 0 > 3;
    var $9 = HEAP32[5264116 >> 2];
    var $10 = HEAP32[5428492 >> 2];
    var $__op = $_ << 2;
    var $11 = $8 ? 12 : $__op;
    var $12 = $10 + $11 | 0;
    var $13 = _fseek($9, $12, 0);
    var $14 = HEAP32[5264116 >> 2];
    var $15 = _get4();
    var $16 = _fseek($14, $15, 0);
    _unpacked_load_raw();
    label = 15;
    break;
   case 4:
    var $18 = HEAP32[5245032 >> 2];
    var $19 = $18;
    _free($19);
    HEAP32[5245032 >> 2] = 0;
    var $20 = HEAP32[5264108 >> 2];
    var $21 = $20;
    _free($21);
    var $22 = HEAP16[5398712 >> 1];
    HEAP16[5264112 >> 1] = $22;
    var $23 = $22 & 65535;
    var $24 = HEAP16[5242964 >> 1];
    HEAP16[5264092 >> 1] = $24;
    var $25 = $24 & 65535;
    var $26 = $25 * $23 & -1;
    var $27 = _calloc($26, 8);
    var $28 = $27;
    HEAP32[5264108 >> 2] = $28;
    _merror($27, 5586296);
    var $29 = HEAP16[5245028 >> 1];
    var $30 = $29 & 65535;
    var $31 = _calloc($30, 2);
    var $32 = $31;
    _merror($31, 5586296);
    var $shot_224 = 0;
    label = 5;
    break;
   case 5:
    var $shot_224;
    var $34 = HEAP32[5264116 >> 2];
    var $35 = HEAP32[5428492 >> 2];
    var $36 = $shot_224 << 2;
    var $37 = $35 + $36 | 0;
    var $38 = _fseek($34, $37, 0);
    var $39 = HEAP32[5264116 >> 2];
    var $40 = _get4();
    var $41 = _fseek($39, $40, 0);
    var $42 = HEAP16[5245036 >> 1];
    var $43 = $42 << 16 >> 16 == 0;
    if ($43) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $44 = $shot_224 >>> 1;
    var $45 = $44 & 1;
    var $46 = $shot_224 & 1;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_022 = 0;
    var $48 = $_pre;
    label = 7;
    break;
   case 7:
    var $48;
    var $row_022;
    var $49 = $48 & 65535;
    _read_shorts($32, $49);
    var $50 = HEAP16[5243564 >> 1];
    var $51 = $50 & 65535;
    var $52 = $row_022 - $51 | 0;
    var $53 = $52 - $45 | 0;
    var $54 = HEAP16[5398712 >> 1];
    var $55 = $54 & 65535;
    var $56 = $53 >>> 0 >= $55 >>> 0;
    var $57 = HEAP16[5245028 >> 1];
    var $58 = $57 << 16 >> 16 == 0;
    var $or_cond = $56 | $58;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $59 = $row_022 << 1;
    var $60 = $59 & 14;
    var $_pre1 = HEAP16[5263700 >> 1];
    var $_pre2 = HEAP16[5242964 >> 1];
    var $col_021 = 0;
    label = 9;
    break;
   case 9:
    var $col_021;
    var $62 = $_pre1 & 65535;
    var $63 = $col_021 - $62 | 0;
    var $64 = $63 - $46 | 0;
    var $65 = $_pre2 & 65535;
    var $66 = $64 >>> 0 < $65 >>> 0;
    if ($66) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $68 = $32 + ($col_021 << 1) | 0;
    var $69 = HEAP16[$68 >> 1];
    var $70 = HEAP32[5427632 >> 2];
    var $71 = $col_021 & 1;
    var $72 = $71 | $60;
    var $73 = $72 << 1;
    var $74 = $70 >>> ($73 >>> 0);
    var $75 = $74 & 3;
    var $76 = $65 * $53 & -1;
    var $77 = $76 + $64 | 0;
    var $78 = HEAP32[5264108 >> 2];
    var $79 = $78 + ($77 << 3) + ($75 << 1) | 0;
    HEAP16[$79 >> 1] = $69;
    label = 11;
    break;
   case 11:
    var $81 = $col_021 + 1 | 0;
    var $82 = $57 & 65535;
    var $83 = $81 >>> 0 < $82 >>> 0;
    if ($83) {
      var $col_021 = $81;
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $84 = $row_022 + 1 | 0;
    var $85 = HEAP16[5245036 >> 1];
    var $86 = $85 & 65535;
    var $87 = $84 >>> 0 < $86 >>> 0;
    if ($87) {
      var $row_022 = $84;
      var $48 = $57;
      label = 7;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $88 = $shot_224 + 1 | 0;
    var $exitcond = ($88 | 0) == 4;
    if ($exitcond) {
      label = 14;
      break;
    } else {
      var $shot_224 = $88;
      label = 5;
      break;
    }
   case 14:
    _free($31);
    HEAP32[5427632 >> 2] = 0;
    HEAP16[5244916 >> 1] = 0;
    label = 15;
    break;
   case 15:
    return;
  }
}
_sinar_4shot_load_raw["X"] = 1;
function _imacon_full_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_05 = 0;
    var $4 = $_pre;
    var $3 = $1;
    label = 4;
    break;
   case 4:
    var $3;
    var $4;
    var $row_05;
    var $5 = $4 << 16 >> 16 == 0;
    if ($5) {
      var $18 = 0;
      var $17 = $3;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $6 = $4 & 65535;
    var $col_04 = 0;
    var $8 = $6;
    label = 6;
    break;
   case 6:
    var $8;
    var $col_04;
    var $9 = $8 * $row_05 & -1;
    var $10 = $9 + $col_04 | 0;
    var $11 = HEAP32[5264108 >> 2];
    var $12 = $11 + ($10 << 3) | 0;
    _read_shorts($12, 3);
    var $13 = $col_04 + 1 | 0;
    var $14 = HEAP16[5242964 >> 1];
    var $15 = $14 & 65535;
    var $16 = ($13 | 0) < ($15 | 0);
    if ($16) {
      var $col_04 = $13;
      var $8 = $15;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $18 = $14;
    var $17 = $_pre1;
    label = 8;
    break;
   case 8:
    var $17;
    var $18;
    var $19 = $row_05 + 1 | 0;
    var $20 = $17 & 65535;
    var $21 = ($19 | 0) < ($20 | 0);
    if ($21) {
      var $row_05 = $19;
      var $4 = $18;
      var $3 = $17;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    return;
  }
}
function _packed_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = $2 << 3;
    var $4 = HEAP16[5242964 >> 1];
    var $5 = $4 & 65535;
    var $6 = HEAP32[5244036 >> 2];
    var $7 = $5 * $6 & -1;
    var $8 = $3 >>> 0 < $7 >>> 0;
    if ($8) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $10 = Math.floor(($3 >>> 0) / ($6 >>> 0));
    var $bwide_0 = $2;
    var $pwide_0 = $10;
    label = 5;
    break;
   case 4:
    var $12 = $6 * $2 & -1;
    var $13 = $12 >>> 3;
    var $bwide_0 = $13;
    var $pwide_0 = $2;
    label = 5;
    break;
   case 5:
    var $pwide_0;
    var $bwide_0;
    var $15 = $bwide_0 << 3;
    var $16 = $6 * $pwide_0 & -1;
    var $17 = HEAP32[5263696 >> 2];
    var $18 = $17 & 1;
    var $19 = ($18 | 0) == 0;
    if ($19) {
      var $bwide_1 = $bwide_0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $21 = $bwide_0 << 4;
    var $22 = ($21 | 0) / 15 & -1;
    var $bwide_1 = $22;
    label = 7;
    break;
   case 7:
    var $bwide_1;
    var $24 = $17 & 24;
    var $25 = $24 + 8 | 0;
    var $26 = HEAP16[5245036 >> 1];
    var $27 = $26 & 65535;
    var $28 = $27 + 1 | 0;
    var $29 = $28 >>> 1;
    var $30 = $26 << 16 >> 16 == 0;
    if ($30) {
      label = 29;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $31 = ($pwide_0 | 0) > 0;
    var $32 = $16 - $15 | 0;
    var $33$0 = $25;
    var $34 = -$bwide_1 | 0;
    var $35 = $29 * $34 & -1;
    var $36 = $35 & -2048;
    var $irow_041 = 0;
    var $vbits_042 = 0;
    var $bitbuf_043$1 = 0;
    var $bitbuf_043$0 = 0;
    var $38 = $17;
    label = 9;
    break;
   case 9:
    var $38;
    var $bitbuf_043$0;
    var $bitbuf_043$1;
    var $vbits_042;
    var $irow_041;
    var $39 = $38 & 2;
    var $40 = ($39 | 0) == 0;
    if ($40) {
      var $vbits_1 = $vbits_042;
      var $row_0 = $irow_041;
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $42 = ($irow_041 | 0) % ($29 | 0);
    var $43 = $42 << 1;
    var $44 = ($irow_041 | 0) / ($29 | 0) & -1;
    var $45 = $43 + $44 | 0;
    var $46 = ($45 | 0) == 1;
    if ($46) {
      label = 11;
      break;
    } else {
      var $vbits_1 = $vbits_042;
      var $row_0 = $45;
      label = 15;
      break;
    }
   case 11:
    var $48 = $38 & 4;
    var $49 = ($48 | 0) == 0;
    if ($49) {
      var $vbits_1 = $vbits_042;
      var $row_0 = 1;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $51 = HEAP32[5244032 >> 2];
    var $52 = ($51 | 0) == 0;
    var $53 = HEAP32[5264116 >> 2];
    if ($52) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $55 = HEAP32[5428492 >> 2];
    var $56 = $55 - $36 | 0;
    var $57 = _fseek($53, $56, 0);
    var $vbits_1 = 0;
    var $row_0 = 1;
    label = 15;
    break;
   case 14:
    var $59 = _fseek($53, 0, 2);
    var $60 = HEAP32[5264116 >> 2];
    var $61 = _ftell($60);
    var $62 = $61 >> 3;
    var $63 = $62 << 2;
    var $64 = _fseek($60, $63, 0);
    var $vbits_1 = 0;
    var $row_0 = 1;
    label = 15;
    break;
   case 15:
    var $row_0;
    var $vbits_1;
    if ($31) {
      var $col_033 = 0;
      var $vbits_234 = $vbits_1;
      var $bitbuf_135$1 = $bitbuf_043$1;
      var $bitbuf_135$0 = $bitbuf_043$0;
      label = 16;
      break;
    } else {
      var $vbits_2_lcssa = $vbits_1;
      var $bitbuf_1_lcssa$1 = $bitbuf_043$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_043$0;
      label = 27;
      break;
    }
   case 16:
    var $bitbuf_135$0;
    var $bitbuf_135$1;
    var $vbits_234;
    var $col_033;
    var $66 = HEAP32[5244036 >> 2];
    var $67 = $vbits_234 - $66 | 0;
    var $68 = ($67 | 0) < 0;
    if ($68) {
      var $vbits_326 = $67;
      var $bitbuf_227$1 = $bitbuf_135$1;
      var $bitbuf_227$0 = $bitbuf_135$0;
      label = 17;
      break;
    } else {
      var $vbits_3_lcssa = $67;
      var $bitbuf_2_lcssa$1 = $bitbuf_135$1;
      var $bitbuf_2_lcssa$0 = $bitbuf_135$0;
      var $80 = $66;
      label = 21;
      break;
    }
   case 17:
    var $bitbuf_227$0;
    var $bitbuf_227$1;
    var $vbits_326;
    Runtime.bitshift64($bitbuf_227$0, $bitbuf_227$1, 0, $33$0);
    var $69$0 = HEAP32[tempDoublePtr >> 2], $69$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_024 = 0;
    var $bitbuf_325$1 = $69$1;
    var $bitbuf_325$0 = $69$0;
    label = 18;
    break;
   case 18:
    var $bitbuf_325$0;
    var $bitbuf_325$1;
    var $i_024;
    var $71 = HEAP32[5264116 >> 2];
    var $72 = _fgetc($71);
    var $73 = $72 << $i_024;
    var $74$0 = $73;
    var $74$1 = 0;
    var $75$0 = $74$0 | $bitbuf_325$0;
    var $75$1 = $74$1 | $bitbuf_325$1;
    var $76 = $i_024 + 8 | 0;
    var $77 = ($76 | 0) < ($25 | 0);
    if ($77) {
      var $i_024 = $76;
      var $bitbuf_325$1 = $75$1;
      var $bitbuf_325$0 = $75$0;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $78 = $vbits_326 + $25 | 0;
    var $79 = ($78 | 0) < 0;
    if ($79) {
      var $vbits_326 = $78;
      var $bitbuf_227$1 = $75$1;
      var $bitbuf_227$0 = $75$0;
      label = 17;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $_pre = HEAP32[5244036 >> 2];
    var $vbits_3_lcssa = $78;
    var $bitbuf_2_lcssa$1 = $75$1;
    var $bitbuf_2_lcssa$0 = $75$0;
    var $80 = $_pre;
    label = 21;
    break;
   case 21:
    var $80;
    var $bitbuf_2_lcssa$0;
    var $bitbuf_2_lcssa$1;
    var $vbits_3_lcssa;
    var $81 = 64 - $80 | 0;
    var $82 = $81 - $vbits_3_lcssa | 0;
    var $83$0 = $82;
    Runtime.bitshift64($bitbuf_2_lcssa$0, $bitbuf_2_lcssa$1, 0, $83$0);
    var $84$0 = HEAP32[tempDoublePtr >> 2], $84$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $85$0 = $81;
    Runtime.bitshift64($84$0, $84$1, 2, $85$0);
    var $86$0 = HEAP32[tempDoublePtr >> 2];
    var $87$0 = $86$0;
    var $87 = $87$0 & 65535;
    var $88 = HEAP16[5245028 >> 1];
    var $89 = $88 & 65535;
    var $90 = $89 * $row_0 & -1;
    var $91 = HEAP32[5263696 >> 2];
    var $92 = $91 >>> 6;
    var $93 = $92 ^ $col_033;
    var $94 = $93 + $90 | 0;
    var $95 = HEAP32[5245032 >> 2];
    var $96 = $95 + ($94 << 1) | 0;
    HEAP16[$96 >> 1] = $87;
    var $97 = $91 & 1;
    var $98 = ($97 | 0) == 0;
    if ($98) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $100 = ($col_033 | 0) % 10;
    var $101 = ($100 | 0) == 9;
    if ($101) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 23:
    var $103 = HEAP32[5264116 >> 2];
    var $104 = _fgetc($103);
    var $105 = ($104 | 0) == 0;
    if ($105) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $107 = HEAP16[5242964 >> 1];
    var $108 = $107 & 65535;
    var $109 = HEAP16[5263700 >> 1];
    var $110 = $109 & 65535;
    var $111 = $110 + $108 | 0;
    var $112 = ($col_033 | 0) < ($111 | 0);
    if ($112) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _derror();
    label = 26;
    break;
   case 26:
    var $115 = $col_033 + 1 | 0;
    var $exitcond = ($115 | 0) == ($pwide_0 | 0);
    if ($exitcond) {
      var $vbits_2_lcssa = $vbits_3_lcssa;
      var $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
      label = 27;
      break;
    } else {
      var $col_033 = $115;
      var $vbits_234 = $vbits_3_lcssa;
      var $bitbuf_135$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_135$0 = $bitbuf_2_lcssa$0;
      label = 16;
      break;
    }
   case 27:
    var $bitbuf_1_lcssa$0;
    var $bitbuf_1_lcssa$1;
    var $vbits_2_lcssa;
    var $116 = $irow_041 + 1 | 0;
    var $117 = HEAP16[5245036 >> 1];
    var $118 = $117 & 65535;
    var $119 = ($116 | 0) < ($118 | 0);
    if ($119) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $120 = $32 + $vbits_2_lcssa | 0;
    var $_pre1 = HEAP32[5263696 >> 2];
    var $irow_041 = $116;
    var $vbits_042 = $120;
    var $bitbuf_043$1 = $bitbuf_1_lcssa$1;
    var $bitbuf_043$0 = $bitbuf_1_lcssa$0;
    var $38 = $_pre1;
    label = 9;
    break;
   case 29:
    return;
  }
}
_packed_load_raw["X"] = 1;
function _nokia_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5262944 >> 1];
    var $2 = $1 << 16 >> 16 == 18761;
    var $3 = $2 & 1;
    var $4 = -$3 | 0;
    var $5 = $4 & 3;
    var $6 = HEAP16[5245028 >> 1];
    var $7 = $6 & 65535;
    var $8 = $7 * 5 & -1;
    var $9 = $8 >>> 2;
    var $10 = $9 << 1;
    var $11 = _malloc($10);
    _merror($11, 5586160);
    var $12 = HEAP16[5245036 >> 1];
    var $13 = $12 << 16 >> 16 == 0;
    if ($13) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $14 = $11 + $9 | 0;
    var $15 = ($9 | 0) == 0;
    var $row_029 = 0;
    label = 4;
    break;
   case 4:
    var $row_029;
    var $17 = HEAP32[5264116 >> 2];
    var $18 = _fread($14, 1, $9, $17);
    var $19 = $18 >>> 0 < $9 >>> 0;
    if ($19) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    if ($15) {
      label = 8;
      break;
    } else {
      var $c_024 = 0;
      label = 7;
      break;
    }
   case 7:
    var $c_024;
    var $21 = $c_024 ^ $5;
    var $22 = $21 + $9 | 0;
    var $23 = $11 + $22 | 0;
    var $24 = HEAP8[$23];
    var $25 = $11 + $c_024 | 0;
    HEAP8[$25] = $24;
    var $26 = $c_024 + 1 | 0;
    var $27 = ($26 | 0) < ($9 | 0);
    if ($27) {
      var $c_024 = $26;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $28 = HEAP16[5245028 >> 1];
    var $29 = $28 << 16 >> 16 == 0;
    if ($29) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP32[5245032 >> 2];
    var $dp_027 = $11;
    var $col_028 = 0;
    label = 10;
    break;
   case 10:
    var $col_028;
    var $dp_027;
    var $31 = $dp_027 + 4 | 0;
    var $32 = HEAP8[$dp_027];
    var $33 = $32 & 255;
    var $34 = $33 << 2;
    var $35 = HEAP8[$31];
    var $36 = $35 & 255;
    var $37 = $36 & 3;
    var $38 = $37 | $34;
    var $39 = $28 & 65535;
    var $40 = $39 * $row_029 & -1;
    var $41 = $col_028 + $40 | 0;
    var $42 = $_pre + ($41 << 1) | 0;
    HEAP16[$42 >> 1] = $38;
    var $43 = $dp_027 + 1 | 0;
    var $44 = HEAP8[$43];
    var $45 = $44 & 255;
    var $46 = $45 << 2;
    var $47 = HEAP8[$31];
    var $48 = $47 & 255;
    var $49 = ($48 & 65535) >>> 2;
    var $50 = $49 & 3;
    var $51 = $50 | $46;
    var $52 = $col_028 | 1;
    var $53 = $52 + $40 | 0;
    var $54 = $_pre + ($53 << 1) | 0;
    HEAP16[$54 >> 1] = $51;
    var $55 = $dp_027 + 2 | 0;
    var $56 = HEAP8[$55];
    var $57 = $56 & 255;
    var $58 = $57 << 2;
    var $59 = HEAP8[$31];
    var $60 = $59 & 255;
    var $61 = ($60 & 65535) >>> 4;
    var $62 = $61 & 3;
    var $63 = $62 | $58;
    var $64 = $col_028 | 2;
    var $65 = $64 + $40 | 0;
    var $66 = $_pre + ($65 << 1) | 0;
    HEAP16[$66 >> 1] = $63;
    var $67 = $dp_027 + 3 | 0;
    var $68 = HEAP8[$67];
    var $69 = $68 & 255;
    var $70 = $69 << 2;
    var $71 = HEAP8[$31];
    var $72 = $71 & 255;
    var $73 = ($72 & 65535) >>> 6;
    var $74 = $73 | $70;
    var $75 = $col_028 | 3;
    var $76 = $75 + $40 | 0;
    var $77 = $_pre + ($76 << 1) | 0;
    HEAP16[$77 >> 1] = $74;
    var $78 = $dp_027 + 5 | 0;
    var $79 = $col_028 + 4 | 0;
    var $80 = ($79 | 0) < ($39 | 0);
    if ($80) {
      var $dp_027 = $78;
      var $col_028 = $79;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $81 = $row_029 + 1 | 0;
    var $82 = HEAP16[5245036 >> 1];
    var $83 = $82 & 65535;
    var $84 = ($81 | 0) < ($83 | 0);
    if ($84) {
      var $row_029 = $81;
      label = 4;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _free($11);
    HEAP32[5263496 >> 2] = 1023;
    return;
  }
}
_nokia_load_raw["X"] = 1;
function _pana_bits($nbits) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($nbits | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5246544 >> 2] = 0;
    var $_0 = 0;
    label = 7;
    break;
   case 4:
    var $4 = HEAP32[5246544 >> 2];
    var $5 = ($4 | 0) == 0;
    if ($5) {
      label = 5;
      break;
    } else {
      var $16 = $4;
      label = 6;
      break;
    }
   case 5:
    var $7 = HEAP32[5263696 >> 2];
    var $8 = $7 + 5246548 | 0;
    var $9 = 16384 - $7 | 0;
    var $10 = HEAP32[5264116 >> 2];
    var $11 = _fread($8, 1, $9, $10);
    var $12 = HEAP32[5263696 >> 2];
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fread(5246548, 1, $12, $13);
    var $_pre = HEAP32[5246544 >> 2];
    var $16 = $_pre;
    label = 6;
    break;
   case 6:
    var $16;
    var $17 = $16 - $nbits | 0;
    var $18 = $17 & 131071;
    HEAP32[5246544 >> 2] = $18;
    var $19 = $18 >>> 3;
    var $20 = $19 ^ 16368;
    var $21 = $20 + 5246548 | 0;
    var $22 = HEAP8[$21];
    var $23 = $22 & 255;
    var $24 = $20 + 1 | 0;
    var $25 = $24 + 5246548 | 0;
    var $26 = HEAP8[$25];
    var $27 = $26 & 255;
    var $28 = $27 << 8;
    var $29 = $28 | $23;
    var $30 = $17 & 7;
    var $31 = $29 >>> ($30 >>> 0);
    var $32 = -1 << $nbits;
    var $33 = $32 ^ -1;
    var $34 = $31 & $33;
    var $_0 = $34;
    label = 7;
    break;
   case 7:
    var $_0;
    return $_0;
  }
}
function _panasonic_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pred = __stackBase__;
    var $nonz = __stackBase__ + 8;
    var $1 = _pana_bits(0);
    var $2 = HEAP16[5398712 >> 1];
    var $3 = $2 << 16 >> 16 == 0;
    if ($3) {
      label = 22;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $4 = $nonz + 4 | 0;
    var $5 = $nonz | 0;
    var $6 = $pred + 4 | 0;
    var $7 = $pred | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_022 = 0;
    var $sh_024 = 0;
    var $9 = $_pre;
    var $8 = $2;
    label = 4;
    break;
   case 4:
    var $8;
    var $9;
    var $sh_024;
    var $row_022;
    var $10 = $9 << 16 >> 16 == 0;
    if ($10) {
      var $sh_1_lcssa = $sh_024;
      var $74 = 0;
      var $73 = $8;
      label = 21;
      break;
    } else {
      var $col_020 = 0;
      var $sh_121 = $sh_024;
      label = 5;
      break;
    }
   case 5:
    var $sh_121;
    var $col_020;
    var $11 = ($col_020 | 0) % 14;
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[$4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$7 >> 2] = 0;
    var $sh_2 = $sh_121;
    label = 9;
    break;
   case 7:
    var $14 = ($11 | 0) % 3;
    var $15 = ($14 | 0) == 2;
    if ($15) {
      label = 8;
      break;
    } else {
      var $sh_2 = $sh_121;
      label = 9;
      break;
    }
   case 8:
    var $17 = _pana_bits(2);
    var $18 = 3 - $17 | 0;
    var $19 = 4 >>> ($18 >>> 0);
    var $sh_2 = $19;
    label = 9;
    break;
   case 9:
    var $sh_2;
    var $21 = $11 & 1;
    var $22 = $nonz + ($21 << 2) | 0;
    var $23 = HEAP32[$22 >> 2];
    var $24 = ($23 | 0) == 0;
    var $25 = _pana_bits(8);
    if ($24) {
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $27 = ($25 | 0) == 0;
    if ($27) {
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $29 = 128 << $sh_2;
    var $30 = $pred + ($21 << 2) | 0;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31 - $29 | 0;
    var $33 = ($32 | 0) < 0;
    var $34 = ($sh_2 | 0) == 4;
    var $or_cond = $33 | $34;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $storemerge = $32;
      label = 13;
      break;
    }
   case 12:
    var $36 = -1 << $sh_2;
    var $37 = $36 ^ -1;
    var $38 = $32 & $37;
    var $storemerge = $38;
    label = 13;
    break;
   case 13:
    var $storemerge;
    var $40 = $25 << $sh_2;
    var $41 = $storemerge + $40 | 0;
    HEAP32[$30 >> 2] = $41;
    label = 16;
    break;
   case 14:
    HEAP32[$22 >> 2] = $25;
    var $43 = ($25 | 0) != 0;
    var $44 = ($11 | 0) > 11;
    var $or_cond19 = $43 | $44;
    if ($or_cond19) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $46 = $25 << 4;
    var $47 = _pana_bits(4);
    var $48 = $47 | $46;
    var $49 = $pred + ($21 << 2) | 0;
    HEAP32[$49 >> 2] = $48;
    label = 16;
    break;
   case 16:
    var $51 = $col_020 & 1;
    var $52 = $pred + ($51 << 2) | 0;
    var $53 = HEAP32[$52 >> 2];
    var $54 = $53 & 65535;
    var $55 = HEAP16[5245028 >> 1];
    var $56 = $55 & 65535;
    var $57 = $56 * $row_022 & -1;
    var $58 = $57 + $col_020 | 0;
    var $59 = HEAP32[5245032 >> 2];
    var $60 = $59 + ($58 << 1) | 0;
    HEAP16[$60 >> 1] = $54;
    var $61 = $53 & 65535;
    var $62 = $61 >>> 0 > 4098;
    if ($62) {
      label = 17;
      break;
    } else {
      var $69 = $55;
      label = 19;
      break;
    }
   case 17:
    var $64 = HEAP16[5242964 >> 1];
    var $65 = $64 & 65535;
    var $66 = ($col_020 | 0) < ($65 | 0);
    if ($66) {
      label = 18;
      break;
    } else {
      var $69 = $55;
      label = 19;
      break;
    }
   case 18:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $69 = $_pre2;
    label = 19;
    break;
   case 19:
    var $69;
    var $70 = $col_020 + 1 | 0;
    var $71 = $69 & 65535;
    var $72 = ($70 | 0) < ($71 | 0);
    if ($72) {
      var $col_020 = $70;
      var $sh_121 = $sh_2;
      label = 5;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $sh_1_lcssa = $sh_2;
    var $74 = $69;
    var $73 = $_pre1;
    label = 21;
    break;
   case 21:
    var $73;
    var $74;
    var $sh_1_lcssa;
    var $75 = $row_022 + 1 | 0;
    var $76 = $73 & 65535;
    var $77 = ($75 | 0) < ($76 | 0);
    if ($77) {
      var $row_022 = $75;
      var $sh_024 = $sh_1_lcssa;
      var $9 = $74;
      var $8 = $73;
      label = 4;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_panasonic_load_raw["X"] = 1;
function _olympus_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8216 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $acarry = __stackBase__ + 8192;
    var $1 = $huff | 0;
    HEAP16[$1 >> 1] = 3084;
    var $i_090 = 12;
    var $n_091 = 0;
    var $5 = 11;
    label = 5;
    break;
   case 3:
    var $2 = $n_091 + $6 | 0;
    var $n_1_lcssa = $2;
    label = 4;
    break;
   case 4:
    var $n_1_lcssa;
    var $3 = $5 - 1 | 0;
    var $4 = ($5 | 0) == 0;
    if ($4) {
      label = 8;
      break;
    } else {
      var $i_090 = $5;
      var $n_091 = $n_1_lcssa;
      var $5 = $3;
      label = 5;
      break;
    }
   case 5:
    var $5;
    var $n_091;
    var $i_090;
    var $6 = 2048 >>> ($5 >>> 0);
    var $7 = ($6 | 0) > 0;
    if ($7) {
      label = 6;
      break;
    } else {
      var $n_1_lcssa = $n_091;
      label = 4;
      break;
    }
   case 6:
    var $8 = $i_090 << 8;
    var $9 = $8 | $5;
    var $10 = $9 & 65535;
    var $c_087 = 0;
    var $n_188 = $n_091;
    label = 7;
    break;
   case 7:
    var $n_188;
    var $c_087;
    var $12 = $n_188 + 1 | 0;
    var $13 = $huff + ($12 << 1) | 0;
    HEAP16[$13 >> 1] = $10;
    var $14 = $c_087 + 1 | 0;
    var $exitcond = ($14 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      var $c_087 = $14;
      var $n_188 = $12;
      label = 7;
      break;
    }
   case 8:
    var $16 = HEAP32[5264116 >> 2];
    var $17 = _fseek($16, 7, 1);
    var $18 = _getbithuff(-1, 0);
    var $19 = HEAP16[5398712 >> 1];
    var $20 = $19 << 16 >> 16 == 0;
    if ($20) {
      label = 35;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $21 = $acarry;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_082 = 0;
    var $24 = $_pre;
    var $23 = $19;
    label = 10;
    break;
   case 10:
    var $23;
    var $24;
    var $row_082;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$21 + 4 >> 2] = 0;
    HEAP32[$21 + 8 >> 2] = 0;
    HEAP32[$21 + 12 >> 2] = 0;
    HEAP32[$21 + 16 >> 2] = 0;
    HEAP32[$21 + 20 >> 2] = 0;
    var $25 = $24 << 16 >> 16 == 0;
    if ($25) {
      var $161 = 0;
      var $160 = $23;
      label = 34;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $26 = ($row_082 | 0) < 2;
    var $27 = $row_082 - 2 | 0;
    var $col_080 = 0;
    label = 12;
    break;
   case 12:
    var $col_080;
    var $29 = $col_080 & 1;
    var $30 = $acarry + $29 * 12 | 0;
    var $31 = $acarry + $29 * 12 + 8 | 0;
    var $32 = HEAP32[$31 >> 2];
    var $33 = ($32 | 0) < 3;
    var $34 = $33 & 1;
    var $35 = $34 << 1;
    var $36 = $35 + 2 | 0;
    var $37 = HEAP32[$30 >> 2];
    var $38 = $37 & 65535;
    var $nbits_0 = $36;
    label = 13;
    break;
   case 13:
    var $nbits_0;
    var $40 = $nbits_0 + $35 | 0;
    var $41 = $38 >>> ($40 >>> 0);
    var $42 = ($41 | 0) == 0;
    var $43 = $nbits_0 + 1 | 0;
    if ($42) {
      label = 14;
      break;
    } else {
      var $nbits_0 = $43;
      label = 13;
      break;
    }
   case 14:
    var $45 = _getbithuff(3, 0);
    var $46 = $45 & 3;
    var $47 = $45 << 29;
    var $48 = $47 >> 31;
    var $49 = _getbithuff(12, $1);
    var $50 = ($49 | 0) == 12;
    if ($50) {
      label = 15;
      break;
    } else {
      var $high_0 = $49;
      label = 16;
      break;
    }
   case 15:
    var $52 = 16 - $nbits_0 | 0;
    var $53 = _getbithuff($52, 0);
    var $54 = $53 >>> 1;
    var $high_0 = $54;
    label = 16;
    break;
   case 16:
    var $high_0;
    var $56 = $high_0 << $nbits_0;
    var $57 = _getbithuff($nbits_0, 0);
    var $58 = $56 | $57;
    HEAP32[$30 >> 2] = $58;
    var $59 = $58 ^ $48;
    var $60 = $acarry + $29 * 12 + 4 | 0;
    var $61 = HEAP32[$60 >> 2];
    var $62 = $59 + $61 | 0;
    var $63 = $62 * 3 & -1;
    var $64 = $63 + $61 | 0;
    var $65 = $64 >> 5;
    HEAP32[$60 >> 2] = $65;
    var $66 = ($58 | 0) > 16;
    var $67 = $32 + 1 | 0;
    var $_ = $66 ? 0 : $67;
    HEAP32[$31 >> 2] = $_;
    var $68 = HEAP16[5242964 >> 1];
    var $69 = $68 & 65535;
    var $70 = ($col_080 | 0) < ($69 | 0);
    if ($70) {
      label = 17;
      break;
    } else {
      label = 32;
      break;
    }
   case 17:
    var $72 = ($col_080 | 0) < 2;
    var $or_cond = $26 & $72;
    var $_pre4 = HEAP16[5245028 >> 1];
    if ($or_cond) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $_pre5 = HEAP32[5245032 >> 2];
    var $pred_0 = 0;
    var $144 = $_pre4;
    var $143 = $_pre5;
    label = 30;
    break;
   case 19:
    var $74 = $_pre4 & 65535;
    if ($26) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $76 = $74 * $row_082 & -1;
    var $77 = $col_080 - 2 | 0;
    var $78 = $77 + $76 | 0;
    var $79 = HEAP32[5245032 >> 2];
    var $80 = $79 + ($78 << 1) | 0;
    var $81 = HEAP16[$80 >> 1];
    var $82 = $81 & 65535;
    var $pred_0 = $82;
    var $144 = $_pre4;
    var $143 = $79;
    label = 30;
    break;
   case 21:
    if ($72) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $85 = $74 * $27 & -1;
    var $86 = $85 + $col_080 | 0;
    var $87 = HEAP32[5245032 >> 2];
    var $88 = $87 + ($86 << 1) | 0;
    var $89 = HEAP16[$88 >> 1];
    var $90 = $89 & 65535;
    var $pred_0 = $90;
    var $144 = $_pre4;
    var $143 = $87;
    label = 30;
    break;
   case 23:
    var $92 = $74 * $row_082 & -1;
    var $93 = $col_080 - 2 | 0;
    var $94 = $92 + $93 | 0;
    var $95 = HEAP32[5245032 >> 2];
    var $96 = $95 + ($94 << 1) | 0;
    var $97 = HEAP16[$96 >> 1];
    var $98 = $97 & 65535;
    var $99 = $74 * $27 & -1;
    var $100 = $99 + $col_080 | 0;
    var $101 = $95 + ($100 << 1) | 0;
    var $102 = HEAP16[$101 >> 1];
    var $103 = $102 & 65535;
    var $104 = $99 + $93 | 0;
    var $105 = $95 + ($104 << 1) | 0;
    var $106 = HEAP16[$105 >> 1];
    var $107 = $106 & 65535;
    var $108 = ($97 & 65535) < ($106 & 65535);
    var $109 = ($106 & 65535) < ($102 & 65535);
    var $or_cond78 = $108 & $109;
    if ($or_cond78) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $111 = ($102 & 65535) < ($106 & 65535);
    var $112 = ($106 & 65535) < ($97 & 65535);
    var $or_cond79 = $111 & $112;
    if ($or_cond79) {
      label = 25;
      break;
    } else {
      label = 29;
      break;
    }
   case 25:
    var $114 = $98 - $107 | 0;
    var $115 = $114 >> 31;
    var $116 = $115 ^ $114;
    var $117 = $116 - $115 | 0;
    var $118 = ($117 | 0) > 32;
    if ($118) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $120 = $103 - $107 | 0;
    var $121 = $120 >> 31;
    var $122 = $121 ^ $120;
    var $123 = $122 - $121 | 0;
    var $124 = ($123 | 0) > 32;
    if ($124) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $126 = $103 + $98 | 0;
    var $127 = $126 - $107 | 0;
    var $pred_0 = $127;
    var $144 = $_pre4;
    var $143 = $95;
    label = 30;
    break;
   case 28:
    var $129 = $103 + $98 | 0;
    var $130 = $129 >>> 1;
    var $pred_0 = $130;
    var $144 = $_pre4;
    var $143 = $95;
    label = 30;
    break;
   case 29:
    var $132 = $98 - $107 | 0;
    var $133 = $132 >> 31;
    var $134 = $133 ^ $132;
    var $135 = $134 - $133 | 0;
    var $136 = $103 - $107 | 0;
    var $137 = $136 >> 31;
    var $138 = $137 ^ $136;
    var $139 = $138 - $137 | 0;
    var $140 = ($135 | 0) > ($139 | 0);
    var $141 = $140 ? $98 : $103;
    var $pred_0 = $141;
    var $144 = $_pre4;
    var $143 = $95;
    label = 30;
    break;
   case 30:
    var $143;
    var $144;
    var $pred_0;
    var $145 = $62 << 2;
    var $146 = $145 | $46;
    var $147 = $pred_0 + $146 | 0;
    var $148 = $147 & 65535;
    var $149 = $144 & 65535;
    var $150 = $149 * $row_082 & -1;
    var $151 = $150 + $col_080 | 0;
    var $152 = $143 + ($151 << 1) | 0;
    HEAP16[$152 >> 1] = $148;
    var $153 = $147 & 61440;
    var $154 = ($153 | 0) == 0;
    if ($154) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _derror();
    label = 32;
    break;
   case 32:
    var $156 = $col_080 + 1 | 0;
    var $157 = HEAP16[5245028 >> 1];
    var $158 = $157 & 65535;
    var $159 = ($156 | 0) < ($158 | 0);
    if ($159) {
      var $col_080 = $156;
      label = 12;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $161 = $157;
    var $160 = $_pre1;
    label = 34;
    break;
   case 34:
    var $160;
    var $161;
    var $162 = $row_082 + 1 | 0;
    var $163 = $160 & 65535;
    var $164 = ($162 | 0) < ($163 | 0);
    if ($164) {
      var $row_082 = $162;
      var $24 = $161;
      var $23 = $160;
      label = 10;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    STACKTOP = __stackBase__;
    return;
  }
}
_olympus_load_raw["X"] = 1;
function _minolta_rd175_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 768 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $1 = $pixel | 0;
    var $2 = $pixel + 1 | 0;
    var $3 = $pixel + 765 | 0;
    var $irow_028 = 0;
    label = 3;
    break;
   case 3:
    var $irow_028;
    var $5 = HEAP32[5264116 >> 2];
    var $6 = _fread($1, 1, 768, $5);
    var $7 = $6 >>> 0 < 768;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _derror();
    label = 5;
    break;
   case 5:
    var $10 = Math.floor(($irow_028 >>> 0) / 82);
    var $11 = ($irow_028 >>> 0) % 82;
    var $12 = $11 * 12 & -1;
    var $13 = $irow_028 >>> 0 < 984;
    if ($13) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $15 = $10 | 1;
    var $20 = $15;
    label = 8;
    break;
   case 7:
    var $17 = $10 << 1;
    var $18 = $17 - 24 | 0;
    var $20 = $18;
    label = 8;
    break;
   case 8:
    var $20;
    var $21 = $20 + $12 | 0;
    if (($irow_028 | 0) == 1476) {
      label = 9;
      break;
    } else if (($irow_028 | 0) == 1480) {
      label = 10;
      break;
    } else if (($irow_028 | 0) == 1478) {
      label = 11;
      break;
    } else if (($irow_028 | 0) == 1477 | ($irow_028 | 0) == 1479) {
      label = 22;
      break;
    } else {
      var $row_0 = $21;
      var $box_0 = $10;
      label = 12;
      break;
    }
   case 9:
    var $row_0 = 984;
    var $box_0 = $10;
    label = 12;
    break;
   case 10:
    var $row_0 = 985;
    var $box_0 = $10;
    label = 12;
    break;
   case 11:
    var $row_0 = 985;
    var $box_0 = 1;
    label = 12;
    break;
   case 12:
    var $box_0;
    var $row_0;
    var $26 = $box_0 >>> 0 > 11;
    var $27 = $box_0 & 1;
    var $28 = ($27 | 0) == 0;
    var $or_cond = $26 | $28;
    if ($or_cond) {
      label = 20;
      break;
    } else {
      var $row_124 = $row_0;
      var $col_026 = 0;
      label = 13;
      break;
    }
   case 13:
    var $col_026;
    var $row_124;
    var $29 = ($col_026 | 0) == 1;
    var $30 = $col_026 + 1 | 0;
    if ($29) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $31 = $row_124 ^ 1;
    var $row_124 = $31;
    var $col_026 = $30;
    label = 13;
    break;
   case 15:
    var $33 = $30 & 2;
    var $34 = ($33 | 0) == 0;
    var $35 = $col_026 >>> 1;
    if ($34) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $37 = $35 - 1 | 0;
    var $38 = $pixel + $37 | 0;
    var $39 = HEAP8[$38];
    var $40 = $39 & 255;
    var $41 = $35 + 1 | 0;
    var $42 = $pixel + $41 | 0;
    var $43 = HEAP8[$42];
    var $44 = $43 & 255;
    var $45 = $44 + $40 & 65535;
    var $52 = $45;
    label = 18;
    break;
   case 17:
    var $47 = $pixel + $35 | 0;
    var $48 = HEAP8[$47];
    var $49 = $48 & 255;
    var $50 = $49 << 1;
    var $52 = $50;
    label = 18;
    break;
   case 18:
    var $52;
    var $53 = HEAP16[5245028 >> 1];
    var $54 = $53 & 65535;
    var $55 = $54 * $row_124 & -1;
    var $56 = $55 + $col_026 | 0;
    var $57 = HEAP32[5245032 >> 2];
    var $58 = $57 + ($56 << 1) | 0;
    HEAP16[$58 >> 1] = $52;
    var $59 = $row_124 ^ 1;
    var $exitcond = ($30 | 0) == 1533;
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $row_124 = $59;
      var $col_026 = $30;
      label = 13;
      break;
    }
   case 19:
    var $61 = HEAP8[$2];
    var $62 = $61 & 255;
    var $63 = $62 << 1;
    var $64 = $54 * $59 & -1;
    var $65 = $64 + 1 | 0;
    var $66 = $57 + ($65 << 1) | 0;
    HEAP16[$66 >> 1] = $63;
    var $67 = HEAP8[$3];
    var $68 = $67 & 255;
    var $69 = $68 << 1;
    var $70 = $64 + 1533 | 0;
    var $71 = $57 + ($70 << 1) | 0;
    HEAP16[$71 >> 1] = $69;
    label = 22;
    break;
   case 20:
    var $73 = $row_0 & 1;
    var $_pre = HEAP16[5245028 >> 1];
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_127 = $73;
    label = 21;
    break;
   case 21:
    var $col_127;
    var $75 = $col_127 >>> 1;
    var $76 = $pixel + $75 | 0;
    var $77 = HEAP8[$76];
    var $78 = $77 & 255;
    var $79 = $78 << 1;
    var $80 = $_pre & 65535;
    var $81 = $80 * $row_0 & -1;
    var $82 = $81 + $col_127 | 0;
    var $83 = $_pre1 + ($82 << 1) | 0;
    HEAP16[$83 >> 1] = $79;
    var $84 = $col_127 + 2 | 0;
    var $85 = $84 >>> 0 < 1534;
    if ($85) {
      var $col_127 = $84;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $86 = $irow_028 + 1 | 0;
    var $exitcond29 = ($86 | 0) == 1481;
    if ($exitcond29) {
      label = 23;
      break;
    } else {
      var $irow_028 = $86;
      label = 3;
      break;
    }
   case 23:
    HEAP32[5263496 >> 2] = 510;
    STACKTOP = __stackBase__;
    return;
  }
}
_minolta_rd175_load_raw["X"] = 1;
function _quicktake_100_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 311696 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $1 = _getbithuff(-1, 0);
    var $2 = $pixel | 0;
    _memset($2, -128, 311696);
    var $3 = HEAP16[5398712 >> 1];
    var $4 = $3 & 65535;
    var $5 = $4 + 2 | 0;
    var $6 = $5 >>> 0 > 2;
    if ($6) {
      label = 3;
      break;
    } else {
      var $rb_0147 = 0;
      var $64 = $3;
      label = 14;
      break;
    }
   case 3:
    var $_pre5 = HEAP16[5242964 >> 1];
    var $row_0153 = 2;
    var $val_0155 = 0;
    var $8 = $_pre5;
    var $7 = $3;
    label = 4;
    break;
   case 4:
    var $7;
    var $8;
    var $val_0155;
    var $row_0153;
    var $9 = $row_0153 & 1;
    var $10 = $9 | 2;
    var $11 = $8 & 65535;
    var $12 = $11 + 2 | 0;
    var $13 = $10 >>> 0 < $12 >>> 0;
    if ($13) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_pre13 = $row_0153 + 1 | 0;
    var $col_0_lcssa = $10;
    var $val_1_lcssa = $val_0155;
    var $58 = $8;
    var $57 = $7;
    var $_pre_phi14 = $_pre13;
    label = 13;
    break;
   case 6:
    var $14 = $row_0153 - 1 | 0;
    var $15 = $9 ^ 1;
    var $16 = $row_0153 + 1 | 0;
    var $17 = $pixel + $16 * 644 + $15 | 0;
    var $18 = ($row_0153 | 0) == 2;
    var $col_0148 = $10;
    label = 7;
    break;
   case 7:
    var $col_0148;
    var $19 = $col_0148 - 1 | 0;
    var $20 = $pixel + $14 * 644 + $19 | 0;
    var $21 = HEAP8[$20];
    var $22 = $21 & 255;
    var $23 = $col_0148 + 1 | 0;
    var $24 = $pixel + $14 * 644 + $23 | 0;
    var $25 = HEAP8[$24];
    var $26 = $25 & 255;
    var $27 = $26 << 1;
    var $28 = $27 + $22 | 0;
    var $29 = $col_0148 - 2 | 0;
    var $30 = $pixel + $row_0153 * 644 + $29 | 0;
    var $31 = HEAP8[$30];
    var $32 = $31 & 255;
    var $33 = $28 + $32 | 0;
    var $34 = $33 >>> 2;
    var $35 = _getbithuff(4, 0);
    var $36 = 5245092 + ($35 << 1) | 0;
    var $37 = HEAP16[$36 >> 1];
    var $38 = $37 << 16 >> 16;
    var $39 = $34 + $38 | 0;
    var $40 = ($39 | 0) < 255;
    var $41 = $40 ? $39 : 255;
    var $42 = ($41 | 0) < 0;
    var $_ = $42 ? 0 : $41;
    var $43 = $_ & 255;
    var $44 = $pixel + $row_0153 * 644 + $col_0148 | 0;
    HEAP8[$44] = $43;
    var $45 = ($col_0148 | 0) < 4;
    if ($45) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP8[$17] = $43;
    HEAP8[$30] = $43;
    label = 9;
    break;
   case 9:
    if ($18) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $49 = $col_0148 + 3 | 0;
    var $50 = $pixel + $14 * 644 + $49 | 0;
    HEAP8[$50] = $43;
    HEAP8[$24] = $43;
    label = 11;
    break;
   case 11:
    var $52 = $col_0148 + 2 | 0;
    var $53 = HEAP16[5242964 >> 1];
    var $54 = $53 & 65535;
    var $55 = $54 + 2 | 0;
    var $56 = ($52 | 0) < ($55 | 0);
    if ($56) {
      var $col_0148 = $52;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre6 = HEAP16[5398712 >> 1];
    var $col_0_lcssa = $52;
    var $val_1_lcssa = $_;
    var $58 = $53;
    var $57 = $_pre6;
    var $_pre_phi14 = $16;
    label = 13;
    break;
   case 13:
    var $_pre_phi14;
    var $57;
    var $58;
    var $val_1_lcssa;
    var $col_0_lcssa;
    var $59 = $val_1_lcssa & 255;
    var $60 = $pixel + $row_0153 * 644 + $col_0_lcssa | 0;
    HEAP8[$60] = $59;
    var $61 = $57 & 65535;
    var $62 = $61 + 2 | 0;
    var $63 = ($_pre_phi14 | 0) < ($62 | 0);
    if ($63) {
      var $row_0153 = $_pre_phi14;
      var $val_0155 = $val_1_lcssa;
      var $8 = $58;
      var $7 = $57;
      label = 4;
      break;
    } else {
      var $rb_0147 = 0;
      var $64 = $57;
      label = 14;
      break;
    }
   case 14:
    var $64;
    var $rb_0147;
    var $row_1141 = $rb_0147 + 2 | 0;
    var $65 = $64 & 65535;
    var $66 = $65 + 2 | 0;
    var $67 = ($row_1141 | 0) < ($66 | 0);
    if ($67) {
      label = 15;
      break;
    } else {
      var $_pr = $64;
      label = 34;
      break;
    }
   case 15:
    var $_pre3 = HEAP16[5242964 >> 1];
    var $row_1_in142 = $rb_0147;
    var $row_1143 = $row_1141;
    var $80 = $_pre3;
    var $79 = $64;
    label = 20;
    break;
   case 16:
    var $68 = $_pr & 65535;
    var $69 = $68 + 2 | 0;
    var $70 = $69 >>> 0 > 2;
    if ($70) {
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 17:
    var $71 = HEAP16[5242964 >> 1];
    var $72 = $71 & 65535;
    var $73 = $72 + 2 | 0;
    var $row_2134 = 2;
    label = 37;
    break;
   case 18:
    var $_pre4 = HEAP16[5398712 >> 1];
    var $75 = $148;
    var $74 = $_pre4;
    label = 19;
    break;
   case 19:
    var $74;
    var $75;
    var $row_1 = $row_1143 + 2 | 0;
    var $76 = $74 & 65535;
    var $77 = $76 + 2 | 0;
    var $78 = ($row_1 | 0) < ($77 | 0);
    if ($78) {
      var $row_1_in142 = $row_1143;
      var $row_1143 = $row_1;
      var $80 = $75;
      var $79 = $74;
      label = 20;
      break;
    } else {
      var $_pr = $74;
      label = 34;
      break;
    }
   case 20:
    var $79;
    var $80;
    var $row_1143;
    var $row_1_in142;
    var $81 = $row_1143 & 1;
    var $82 = $81 ^ 3;
    var $83 = $80 & 65535;
    var $84 = $83 + 2 | 0;
    var $85 = $82 >>> 0 < $84 >>> 0;
    if ($85) {
      label = 21;
      break;
    } else {
      var $75 = $80;
      var $74 = $79;
      label = 19;
      break;
    }
   case 21:
    var $86 = ($row_1143 | 0) < 4;
    var $87 = $row_1_in142 + 4 | 0;
    var $col_1137 = $82;
    label = 22;
    break;
   case 22:
    var $col_1137;
    var $89 = ($col_1137 | 0) < 4;
    var $or_cond = $86 | $89;
    var $_phi_trans_insert = $pixel + $row_1_in142 * 644 + $col_1137 | 0;
    var $_pre9 = HEAP8[$_phi_trans_insert];
    if ($or_cond) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $_pre10 = $col_1137 - 2 | 0;
    var $_pre11 = $pixel + $row_1143 * 644 + $_pre10 | 0;
    var $sharp_0 = 2;
    var $124 = $_pre9;
    var $_pre_phi = $_pre10;
    var $_pre_phi12 = $_pre11;
    label = 29;
    break;
   case 24:
    var $91 = $_pre9 & 255;
    var $92 = $col_1137 - 2 | 0;
    var $93 = $pixel + $row_1143 * 644 + $92 | 0;
    var $94 = HEAP8[$93];
    var $95 = $94 & 255;
    var $96 = $91 - $95 | 0;
    var $97 = $96 >> 31;
    var $98 = $97 ^ $96;
    var $_neg = $96 >>> 31;
    var $99 = $pixel + $row_1_in142 * 644 + $92 | 0;
    var $100 = HEAP8[$99];
    var $101 = $100 & 255;
    var $102 = $91 - $101 | 0;
    var $103 = $102 >> 31;
    var $104 = $103 ^ $102;
    var $_neg123 = $102 >>> 31;
    var $105 = $95 - $101 | 0;
    var $106 = $105 >> 31;
    var $107 = $106 ^ $105;
    var $108 = $107 - $106 | 0;
    var $109 = $98 + $_neg | 0;
    var $110 = $109 + $_neg123 | 0;
    var $111 = $110 + $104 | 0;
    var $112 = $111 + $108 | 0;
    var $113 = ($112 | 0) < 4;
    if ($113) {
      var $sharp_0 = 0;
      var $124 = $_pre9;
      var $_pre_phi = $92;
      var $_pre_phi12 = $93;
      label = 29;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $115 = ($112 | 0) < 8;
    if ($115) {
      var $sharp_0 = 1;
      var $124 = $_pre9;
      var $_pre_phi = $92;
      var $_pre_phi12 = $93;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $117 = ($112 | 0) < 16;
    if ($117) {
      var $sharp_0 = 2;
      var $124 = $_pre9;
      var $_pre_phi = $92;
      var $_pre_phi12 = $93;
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $119 = ($112 | 0) < 32;
    if ($119) {
      var $sharp_0 = 3;
      var $124 = $_pre9;
      var $_pre_phi = $92;
      var $_pre_phi12 = $93;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $121 = ($112 | 0) < 48;
    var $122 = $121 ? 4 : 5;
    var $sharp_0 = $122;
    var $124 = $_pre9;
    var $_pre_phi = $92;
    var $_pre_phi12 = $93;
    label = 29;
    break;
   case 29:
    var $_pre_phi12;
    var $_pre_phi;
    var $124;
    var $sharp_0;
    var $125 = $124 & 255;
    var $126 = HEAP8[$_pre_phi12];
    var $127 = $126 & 255;
    var $128 = $127 + $125 | 0;
    var $129 = $128 >>> 1;
    var $130 = _getbithuff(2, 0);
    var $131 = 5245044 + ($sharp_0 << 3) + ($130 << 1) | 0;
    var $132 = HEAP16[$131 >> 1];
    var $133 = $132 << 16 >> 16;
    var $134 = $129 + $133 | 0;
    var $135 = ($134 | 0) < 255;
    var $136 = $135 ? $134 : 255;
    var $137 = ($136 | 0) < 0;
    var $phitmp122 = $136 & 255;
    var $138 = $137 ? 0 : $phitmp122;
    var $139 = $pixel + $row_1143 * 644 + $col_1137 | 0;
    HEAP8[$139] = $138;
    if ($86) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $141 = $col_1137 + 2 | 0;
    var $142 = $pixel + $row_1_in142 * 644 + $141 | 0;
    HEAP8[$142] = $138;
    label = 31;
    break;
   case 31:
    if ($89) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $145 = $pixel + $87 * 644 + $_pre_phi | 0;
    HEAP8[$145] = $138;
    label = 33;
    break;
   case 33:
    var $147 = $col_1137 + 2 | 0;
    var $148 = HEAP16[5242964 >> 1];
    var $149 = $148 & 65535;
    var $150 = $149 + 2 | 0;
    var $151 = ($147 | 0) < ($150 | 0);
    if ($151) {
      var $col_1137 = $147;
      label = 22;
      break;
    } else {
      label = 18;
      break;
    }
   case 34:
    var $_pr;
    var $152 = $rb_0147 + 1 | 0;
    var $exitcond = ($152 | 0) == 2;
    if ($exitcond) {
      label = 16;
      break;
    } else {
      var $rb_0147 = $152;
      var $64 = $_pr;
      label = 14;
      break;
    }
   case 35:
    var $153 = $_pr << 16 >> 16 == 0;
    if ($153) {
      label = 44;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_3126 = 0;
    var $182 = $_pre;
    label = 40;
    break;
   case 37:
    var $row_2134;
    var $155 = $row_2134 & 1;
    var $156 = $155 ^ 3;
    var $157 = $156 >>> 0 < $73 >>> 0;
    if ($157) {
      var $col_2129 = $156;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $col_2129;
    var $158 = $col_2129 - 1 | 0;
    var $159 = $pixel + $row_2134 * 644 + $158 | 0;
    var $160 = HEAP8[$159];
    var $161 = $160 & 255;
    var $162 = $pixel + $row_2134 * 644 + $col_2129 | 0;
    var $163 = HEAP8[$162];
    var $164 = $163 & 255;
    var $165 = $164 << 2;
    var $166 = $165 + $161 | 0;
    var $167 = $col_2129 + 1 | 0;
    var $168 = $pixel + $row_2134 * 644 + $167 | 0;
    var $169 = HEAP8[$168];
    var $170 = $169 & 255;
    var $171 = $166 + $170 | 0;
    var $172 = $171 >>> 1;
    var $173 = $172 - 256 | 0;
    var $174 = ($173 | 0) < 255;
    var $175 = $174 ? $173 : 255;
    var $176 = ($175 | 0) < 0;
    var $phitmp = $175 & 255;
    var $177 = $176 ? 0 : $phitmp;
    HEAP8[$162] = $177;
    var $178 = $col_2129 + 2 | 0;
    var $179 = ($178 | 0) < ($73 | 0);
    if ($179) {
      var $col_2129 = $178;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $180 = $row_2134 + 1 | 0;
    var $181 = ($180 | 0) < ($69 | 0);
    if ($181) {
      var $row_2134 = $180;
      label = 37;
      break;
    } else {
      label = 35;
      break;
    }
   case 40:
    var $182;
    var $row_3126;
    var $183 = $182 << 16 >> 16 == 0;
    if ($183) {
      var $199 = 0;
      label = 43;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $184 = $row_3126 + 2 | 0;
    var $_pre1 = HEAP16[5245028 >> 1];
    var $_pre2 = HEAP32[5245032 >> 2];
    var $col_3124 = 0;
    label = 42;
    break;
   case 42:
    var $col_3124;
    var $186 = $col_3124 + 2 | 0;
    var $187 = $pixel + $184 * 644 + $186 | 0;
    var $188 = HEAP8[$187];
    var $189 = $188 & 255;
    var $190 = 5245124 + ($189 << 1) | 0;
    var $191 = HEAP16[$190 >> 1];
    var $192 = $_pre1 & 65535;
    var $193 = $192 * $row_3126 & -1;
    var $194 = $193 + $col_3124 | 0;
    var $195 = $_pre2 + ($194 << 1) | 0;
    HEAP16[$195 >> 1] = $191;
    var $196 = $col_3124 + 1 | 0;
    var $197 = $_pre & 65535;
    var $198 = ($196 | 0) < ($197 | 0);
    if ($198) {
      var $col_3124 = $196;
      label = 42;
      break;
    } else {
      var $199 = $_pre;
      label = 43;
      break;
    }
   case 43:
    var $199;
    var $200 = $row_3126 + 1 | 0;
    var $201 = ($200 | 0) < ($68 | 0);
    if ($201) {
      var $row_3126 = $200;
      var $182 = $199;
      label = 40;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    HEAP32[5263496 >> 2] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
}
_quicktake_100_load_raw["X"] = 1;
function _kodak_jpeg_load_raw() {
  return;
}
function _lossy_dng_load_raw() {
  return;
}
function _kodak_radc_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 9736 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $last = __stackBase__ + 9728;
    var $1 = $last;
    var $mul = STACKTOP;
    STACKTOP = STACKTOP + 6 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $buf = STACKTOP;
    STACKTOP = STACKTOP + 6948 | 0;
    HEAP16[$1 >> 1] = HEAP16[5263996 >> 1];
    HEAP16[$1 + 2 >> 1] = HEAP16[5263998 >> 1];
    HEAP16[$1 + 4 >> 1] = HEAP16[5264e3 >> 1];
    var $i_0261 = 2;
    var $3 = 0;
    label = 3;
    break;
   case 3:
    var $3;
    var $i_0261;
    var $4 = 5263972 + ($i_0261 << 1) | 0;
    var $5 = HEAP16[$4 >> 1];
    var $6 = ($3 & 65535) > ($5 & 65535);
    if ($6) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = $i_0261 - 2 | 0;
    var $8 = 5263972 + ($7 << 1) | 0;
    var $9 = $3 & 65535;
    var $10 = $5 & 65535;
    var $11 = HEAP16[$8 >> 1];
    var $12 = $11 & 65535;
    var $13 = $i_0261 | 1;
    var $14 = 5263972 + ($13 << 1) | 0;
    var $15 = HEAP16[$14 >> 1];
    var $16 = $15 & 65535;
    var $17 = $i_0261 - 1 | 0;
    var $18 = 5263972 + ($17 << 1) | 0;
    var $19 = HEAP16[$18 >> 1];
    var $20 = $19 & 65535;
    var $21 = $16 - $20 | 0;
    var $22 = $21 | 0;
    var $23 = $20 | 0;
    var $c_0257 = $9;
    label = 5;
    break;
   case 5:
    var $c_0257;
    var $25 = $c_0257 - $12 | 0;
    var $26 = $25 | 0;
    var $27 = $10 - $12 | 0;
    var $28 = $27 | 0;
    var $29 = $26 / $28;
    var $30 = $29 * $22;
    var $31 = $23 + $30;
    var $32 = $31;
    var $33 = $32 + .5;
    var $34 = $33 >= 0 ? Math.floor($33) : Math.ceil($33);
    var $35 = 5428500 + ($c_0257 << 1) | 0;
    HEAP16[$35 >> 1] = $34;
    var $36 = $c_0257 + 1 | 0;
    var $37 = ($36 | 0) > ($10 | 0);
    if ($37) {
      label = 6;
      break;
    } else {
      var $c_0257 = $36;
      label = 5;
      break;
    }
   case 6:
    var $38 = $i_0261 + 2 | 0;
    var $39 = ($38 | 0) < 12;
    if ($39) {
      var $i_0261 = $38;
      var $3 = $5;
      label = 3;
      break;
    } else {
      var $i_1255 = 0;
      var $s_0256 = 0;
      label = 7;
      break;
    }
   case 7:
    var $s_0256;
    var $i_1255;
    var $40 = $i_1255 + 5263712 | 0;
    var $41 = HEAP8[$40];
    var $42 = $41 << 24 >> 24;
    var $43 = 256 >>> ($42 >>> 0);
    var $44 = ($43 | 0) > 0;
    if ($44) {
      label = 8;
      break;
    } else {
      var $s_1_lcssa = $s_0256;
      label = 11;
      break;
    }
   case 8:
    var $45 = $i_1255 | 1;
    var $46 = $45 + 5263712 | 0;
    var $47 = HEAP8[$46];
    var $48 = $47 & 255;
    var $49 = ($43 | 0) > 1;
    var $smax = $49 ? $43 : 1;
    var $c_1249 = 0;
    var $s_1250 = $s_0256;
    label = 9;
    break;
   case 9:
    var $s_1250;
    var $c_1249;
    var $51 = $42 << 8;
    var $52 = $48 | $51;
    var $53 = $52 & 65535;
    var $54 = $s_1250 + 1 | 0;
    var $55 = $huff + ($s_1250 << 1) | 0;
    HEAP16[$55 >> 1] = $53;
    var $56 = $c_1249 + 1 | 0;
    var $57 = ($56 | 0) < ($43 | 0);
    if ($57) {
      var $c_1249 = $56;
      var $s_1250 = $54;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $58 = $s_0256 + $smax | 0;
    var $s_1_lcssa = $58;
    label = 11;
    break;
   case 11:
    var $s_1_lcssa;
    var $60 = $i_1255 + 2 | 0;
    var $61 = $60 >>> 0 < 260;
    if ($61) {
      var $i_1255 = $60;
      var $s_0256 = $s_1_lcssa;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $63 = HEAP32[5264036 >> 2];
    var $64 = ($63 | 0) == 243;
    var $65 = $64 ? 2 : 3;
    var $66 = 8 - $65 | 0;
    var $67 = $66 << 8;
    var $68 = $65 - 1 | 0;
    var $69 = 1 << $68;
    var $70 = $69 | $67;
    var $c_2247 = 0;
    label = 13;
    break;
   case 13:
    var $c_2247;
    var $72 = $c_2247 >> $65;
    var $73 = $72 << $65;
    var $74 = $70 | $73;
    var $75 = $74 & 65535;
    var $76 = $huff + 9216 + ($c_2247 << 1) | 0;
    HEAP16[$76 >> 1] = $75;
    var $77 = $c_2247 + 1 | 0;
    var $exitcond271 = ($77 | 0) == 256;
    if ($exitcond271) {
      label = 14;
      break;
    } else {
      var $c_2247 = $77;
      label = 13;
      break;
    }
   case 14:
    var $79 = _getbithuff(-1, 0);
    var $i_2246 = 0;
    label = 18;
    break;
   case 15:
    var $80 = HEAP16[5398712 >> 1];
    var $81 = $80 << 16 >> 16 == 0;
    if ($81) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $_pre = HEAP16[5242964 >> 1];
    var $95 = 0;
    var $94 = $_pre;
    label = 21;
    break;
   case 17:
    var $82 = $huff + 9216 | 0;
    var $83 = $huff + 4608 | 0;
    var $84 = $huff + 5120 | 0;
    var $85 = $mul | 0;
    var $86 = $mul + 2 | 0;
    var $87 = $mul + 4 | 0;
    var $row_0245 = 0;
    label = 23;
    break;
   case 18:
    var $i_2246;
    var $89 = $buf + ($i_2246 << 1) | 0;
    HEAP16[$89 >> 1] = 2048;
    var $90 = $i_2246 + 1 | 0;
    var $exitcond270 = ($90 | 0) == 3474;
    if ($exitcond270) {
      label = 15;
      break;
    } else {
      var $i_2246 = $90;
      label = 18;
      break;
    }
   case 19:
    var $91 = HEAP16[5398712 >> 1];
    var $92 = $91 & 65535;
    var $93 = ($299 | 0) < ($92 | 0);
    if ($93) {
      var $row_0245 = $299;
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $phitmp = $91 & 65535;
    var $95 = $phitmp;
    var $94 = $262;
    label = 21;
    break;
   case 21:
    var $94;
    var $95;
    var $96 = $94 & 65535;
    var $97 = $96 * $95 & -1;
    var $98 = ($97 | 0) == 0;
    if ($98) {
      label = 69;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $_pre6 = HEAP32[5245032 >> 2];
    var $i_4187 = 0;
    label = 68;
    break;
   case 23:
    var $row_0245;
    var $99 = _getbithuff(6, 0);
    var $100 = $99 & 65535;
    HEAP16[$85 >> 1] = $100;
    var $101 = _getbithuff(6, 0);
    var $102 = $101 & 65535;
    HEAP16[$86 >> 1] = $102;
    var $103 = _getbithuff(6, 0);
    var $104 = $103 & 65535;
    HEAP16[$87 >> 1] = $104;
    var $105 = $row_0245 - 1 | 0;
    var $c_4235 = 0;
    var $107 = $100;
    label = 24;
    break;
   case 24:
    var $107;
    var $c_4235;
    var $108 = $last + ($c_4235 << 1) | 0;
    var $109 = HEAP16[$108 >> 1];
    var $110 = $109 << 16 >> 16;
    var $111 = 16777216 / ($110 | 0) & -1;
    var $112 = $111 + 2047 | 0;
    var $113 = $112 >> 12;
    var $114 = $107 << 16 >> 16;
    var $115 = $113 * $114 & -1;
    var $116 = ($115 | 0) > 65564;
    var $117 = $116 ? 10 : 12;
    var $118 = $117 - 1 | 0;
    var $119 = -1 << $118;
    var $120 = $119 ^ -1;
    var $121 = 12 - $117 | 0;
    var $122 = $115 << $121;
    var $i_3190 = 0;
    label = 25;
    break;
   case 25:
    var $i_3190;
    var $124 = $buf + $c_4235 * 2316 + ($i_3190 << 1) | 0;
    var $125 = HEAP16[$124 >> 1];
    var $126 = $125 << 16 >> 16;
    var $127 = $126 * $122 & -1;
    var $128 = $127 + $120 | 0;
    var $129 = $128 >> $117;
    var $130 = $129 & 65535;
    HEAP16[$124 >> 1] = $130;
    var $131 = $i_3190 + 1 | 0;
    var $exitcond = ($131 | 0) == 1158;
    if ($exitcond) {
      label = 26;
      break;
    } else {
      var $i_3190 = $131;
      label = 25;
      break;
    }
   case 26:
    HEAP16[$108 >> 1] = $107;
    var $133 = ($c_4235 | 0) != 0;
    var $134 = $133 & 1;
    var $135 = $134 ^ 1;
    var $136 = $107 << 7;
    var $137 = $buf + $c_4235 * 2316 + 1544 | 0;
    var $138 = $105 + $c_4235 | 0;
    var $139 = 2 - $c_4235 | 0;
    var $140 = $buf + $c_4235 * 2316 + ($135 << 1) | 0;
    var $141 = $140;
    var $142 = $137;
    var $143 = $135 << 1;
    var $144 = 772 - $143 | 0;
    var $145 = $138 + 2 | 0;
    var $_pre3 = HEAP16[5242964 >> 1];
    var $r_0233 = 0;
    var $149 = $_pre3;
    var $148 = $_pre3;
    var $147 = $_pre3;
    label = 27;
    break;
   case 27:
    var $147;
    var $148;
    var $149;
    var $r_0233;
    var $150 = $149 & 65535;
    var $151 = $150 >>> 1;
    var $152 = $buf + $c_4235 * 2316 + 1544 + ($151 << 1) | 0;
    HEAP16[$152 >> 1] = $136;
    var $153 = $buf + $c_4235 * 2316 + 772 + ($151 << 1) | 0;
    HEAP16[$153 >> 1] = $136;
    var $154 = ($151 | 0) == 0;
    if ($154) {
      var $264 = $149;
      var $263 = $148;
      var $262 = $147;
      label = 52;
      break;
    } else {
      var $tree_0223 = 1;
      var $col_0224 = $151;
      label = 29;
      break;
    }
   case 28:
    var $col_0_be;
    var $155 = ($col_0_be | 0) > 0;
    if ($155) {
      var $tree_0223 = $158;
      var $col_0224 = $col_0_be;
      label = 29;
      break;
    } else {
      label = 51;
      break;
    }
   case 29:
    var $col_0224;
    var $tree_0223;
    var $156 = $huff + ($tree_0223 << 9) | 0;
    var $157 = _getbithuff(8, $156);
    var $sext = $157 << 24;
    var $158 = $sext >> 24;
    var $159 = ($158 | 0) == 0;
    if ($159) {
      var $col_1 = $col_0224;
      label = 37;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $161 = $col_0224 - 2 | 0;
    var $162 = ($158 | 0) == 8;
    var $x_0199 = $col_0224 - 1 | 0;
    if ($162) {
      var $x_0200 = $x_0199;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $x_0200;
    var $163 = _getbithuff(8, $82);
    var $164 = $163 & 255;
    var $165 = $114 * $164 & -1;
    var $166 = $165 & 65535;
    var $167 = $buf + $c_4235 * 2316 + 772 + ($x_0200 << 1) | 0;
    HEAP16[$167 >> 1] = $166;
    var $x_0 = $x_0200 - 1 | 0;
    var $168 = ($x_0 | 0) < ($161 | 0);
    if ($168) {
      var $x_0200_1 = $x_0199;
      label = 74;
      break;
    } else {
      var $x_0200 = $x_0;
      label = 31;
      break;
    }
   case 32:
    var $169 = $158 + 10 | 0;
    var $170 = $huff + ($169 << 9) | 0;
    var $x_1_in193 = $col_0224;
    var $x_1194 = $x_0199;
    label = 33;
    break;
   case 33:
    var $x_1194;
    var $x_1_in193;
    var $172 = _getbithuff(8, $170);
    var $sext184 = $172 << 24;
    var $173 = $sext184 >> 20;
    if ($133) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $175 = $buf + $c_4235 * 2316 + ($x_1194 << 1) | 0;
    var $176 = HEAP16[$175 >> 1];
    var $177 = $176 << 16 >> 16;
    var $178 = $buf + $c_4235 * 2316 + 772 + ($x_1_in193 << 1) | 0;
    var $179 = HEAP16[$178 >> 1];
    var $180 = $179 << 16 >> 16;
    var $181 = $180 + $177 | 0;
    var $182 = ($181 | 0) / 2 & -1;
    var $198 = $182;
    label = 36;
    break;
   case 35:
    var $184 = $buf + ($x_1_in193 << 1) | 0;
    var $185 = HEAP16[$184 >> 1];
    var $186 = $185 << 16 >> 16;
    var $187 = $buf + ($x_1194 << 1) | 0;
    var $188 = HEAP16[$187 >> 1];
    var $189 = $188 << 16 >> 16;
    var $190 = $189 << 1;
    var $191 = $190 + $186 | 0;
    var $192 = $buf + 772 + ($x_1_in193 << 1) | 0;
    var $193 = HEAP16[$192 >> 1];
    var $194 = $193 << 16 >> 16;
    var $195 = $191 + $194 | 0;
    var $196 = ($195 | 0) / 4 & -1;
    var $198 = $196;
    label = 36;
    break;
   case 36:
    var $198;
    var $199 = $198 + $173 | 0;
    var $200 = $199 & 65535;
    var $201 = $buf + $c_4235 * 2316 + 772 + ($x_1194 << 1) | 0;
    HEAP16[$201 >> 1] = $200;
    var $x_1 = $x_1194 - 1 | 0;
    var $202 = ($x_1 | 0) < ($161 | 0);
    if ($202) {
      var $x_1_in193_1 = $col_0224;
      var $x_1194_1 = $x_0199;
      label = 70;
      break;
    } else {
      var $x_1_in193 = $x_1194;
      var $x_1194 = $x_1;
      label = 33;
      break;
    }
   case 37:
    var $col_1;
    var $203 = ($col_1 | 0) > 2;
    if ($203) {
      label = 38;
      break;
    } else {
      var $209 = 1;
      label = 39;
      break;
    }
   case 38:
    var $205 = _getbithuff(8, $83);
    var $sext183 = $205 << 24;
    var $206 = $sext183 >> 24;
    var $207 = $206 + 1 | 0;
    var $209 = $207;
    label = 39;
    break;
   case 39:
    var $209;
    var $210 = ($209 | 0) > 0;
    var $211 = ($col_1 | 0) > 0;
    var $or_cond185215 = $210 & $211;
    if ($or_cond185215) {
      label = 40;
      break;
    } else {
      var $col_2_lcssa = $col_1;
      label = 50;
      break;
    }
   case 40:
    var $212 = -$209 | 0;
    var $213 = $col_1 - 1 | 0;
    var $214 = $213 >>> 1;
    var $215 = $214 ^ -1;
    var $216 = $212 >>> 0 > $215 >>> 0;
    var $umax = $216 ? $212 : $215;
    var $217 = $umax >>> 0 > 4294967288;
    var $umax266 = $217 ? $umax : -8;
    var $218 = $umax266 << 1;
    var $219 = -$umax266 | 0;
    var $col_2216 = $col_1;
    var $rep_0217 = 0;
    label = 41;
    break;
   case 41:
    var $rep_0217;
    var $col_2216;
    var $220 = $col_2216 - 2 | 0;
    var $x_2205 = $col_2216 - 1 | 0;
    var $x_2_in206 = $col_2216;
    var $x_2207 = $x_2205;
    label = 42;
    break;
   case 42:
    var $x_2207;
    var $x_2_in206;
    if ($133) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $223 = $buf + $c_4235 * 2316 + ($x_2207 << 1) | 0;
    var $224 = HEAP16[$223 >> 1];
    var $225 = $224 << 16 >> 16;
    var $226 = $buf + $c_4235 * 2316 + 772 + ($x_2_in206 << 1) | 0;
    var $227 = HEAP16[$226 >> 1];
    var $228 = $227 << 16 >> 16;
    var $229 = $228 + $225 | 0;
    var $230 = ($229 | 0) / 2 & -1;
    var $246 = $230;
    label = 45;
    break;
   case 44:
    var $232 = $buf + ($x_2_in206 << 1) | 0;
    var $233 = HEAP16[$232 >> 1];
    var $234 = $233 << 16 >> 16;
    var $235 = $buf + ($x_2207 << 1) | 0;
    var $236 = HEAP16[$235 >> 1];
    var $237 = $236 << 16 >> 16;
    var $238 = $237 << 1;
    var $239 = $238 + $234 | 0;
    var $240 = $buf + 772 + ($x_2_in206 << 1) | 0;
    var $241 = HEAP16[$240 >> 1];
    var $242 = $241 << 16 >> 16;
    var $243 = $239 + $242 | 0;
    var $244 = ($243 | 0) / 4 & -1;
    var $246 = $244;
    label = 45;
    break;
   case 45:
    var $246;
    var $247 = $246 & 65535;
    var $248 = $buf + $c_4235 * 2316 + 772 + ($x_2207 << 1) | 0;
    HEAP16[$248 >> 1] = $247;
    var $x_2 = $x_2207 - 1 | 0;
    var $249 = ($x_2 | 0) < ($220 | 0);
    if ($249) {
      var $x_2_in206_1 = $col_2216;
      var $x_2207_1 = $x_2205;
      label = 75;
      break;
    } else {
      var $x_2_in206 = $x_2207;
      var $x_2207 = $x_2;
      label = 42;
      break;
    }
   case 46:
    var $250 = _getbithuff(8, $84);
    var $sext182 = $250 << 24;
    var $251 = $sext182 >> 20;
    var $x_3211 = $x_2205;
    label = 47;
    break;
   case 47:
    var $x_3211;
    var $253 = $buf + $c_4235 * 2316 + 772 + ($x_3211 << 1) | 0;
    var $254 = HEAP16[$253 >> 1];
    var $255 = $254 & 65535;
    var $256 = $255 + $251 | 0;
    var $257 = $256 & 65535;
    HEAP16[$253 >> 1] = $257;
    var $x_3 = $x_3211 - 1 | 0;
    var $258 = ($x_3 | 0) < ($220 | 0);
    if ($258) {
      var $x_3211_1 = $x_2205;
      label = 80;
      break;
    } else {
      var $x_3211 = $x_3;
      label = 47;
      break;
    }
   case 48:
    var $259 = $rep_0217 + 1 | 0;
    var $exitcond267 = ($259 | 0) == ($219 | 0);
    if ($exitcond267) {
      label = 49;
      break;
    } else {
      var $col_2216 = $220;
      var $rep_0217 = $259;
      label = 41;
      break;
    }
   case 49:
    var $260 = $col_1 + $218 | 0;
    var $col_2_lcssa = $260;
    label = 50;
    break;
   case 50:
    var $col_2_lcssa;
    var $261 = ($209 | 0) == 9;
    if ($261) {
      var $col_1 = $col_2_lcssa;
      label = 37;
      break;
    } else {
      var $col_0_be = $col_2_lcssa;
      label = 28;
      break;
    }
   case 51:
    var $_pr = HEAP16[5242964 >> 1];
    var $264 = $_pr;
    var $263 = $_pr;
    var $262 = $_pr;
    label = 52;
    break;
   case 52:
    var $262;
    var $263;
    var $264;
    var $265 = $r_0233 << 1;
    var $266 = $265 + $row_0245 | 0;
    var $267 = ($264 & 65535) > 1;
    if ($267) {
      label = 53;
      break;
    } else {
      var $453 = $264;
      label = 86;
      break;
    }
   case 53:
    var $_pre4 = HEAP16[5245028 >> 1];
    var $x_4229 = 0;
    label = 54;
    break;
   case 54:
    var $x_4229;
    var $269 = $buf + $c_4235 * 2316 + 772 + ($x_4229 << 1) | 0;
    var $270 = HEAP16[$269 >> 1];
    var $271 = $270 << 16 >> 16;
    var $272 = $271 << 4;
    var $273 = ($272 | 0) / ($114 | 0) & -1;
    var $274 = ($273 | 0) < 0;
    var $275 = $273 & 65535;
    var $276 = $274 ? 0 : $275;
    var $277 = $_pre4 & 65535;
    if ($133) {
      label = 55;
      break;
    } else {
      label = 56;
      break;
    }
   case 55:
    var $279 = $277 * $138 & -1;
    var $280 = $x_4229 << 1;
    var $281 = $139 + $280 | 0;
    var $282 = $281 + $279 | 0;
    var $283 = HEAP32[5245032 >> 2];
    var $284 = $283 + ($282 << 1) | 0;
    HEAP16[$284 >> 1] = $276;
    var $292 = $283;
    label = 57;
    break;
   case 56:
    var $286 = $277 * $266 & -1;
    var $287 = $x_4229 << 1;
    var $288 = $287 + $286 | 0;
    var $289 = HEAP32[5245032 >> 2];
    var $290 = $289 + ($288 << 1) | 0;
    HEAP16[$290 >> 1] = $276;
    var $292 = $289;
    label = 57;
    break;
   case 57:
    var $292;
    var $293 = $x_4229 + 1 | 0;
    var $294 = $264 & 65535;
    var $295 = $294 >>> 1;
    var $296 = ($293 | 0) < ($295 | 0);
    if ($296) {
      var $x_4229 = $293;
      label = 54;
      break;
    } else {
      label = 81;
      break;
    }
   case 58:
    var $298 = $c_4235 + 1 | 0;
    var $exitcond269 = ($298 | 0) == 3;
    if ($exitcond269) {
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $_phi_trans_insert = $mul + ($298 << 1) | 0;
    var $_pre7 = HEAP16[$_phi_trans_insert >> 1];
    var $c_4235 = $298;
    var $107 = $_pre7;
    label = 24;
    break;
   case 60:
    var $299 = $row_0245 + 4 | 0;
    var $y_5242 = $row_0245;
    var $300 = $262;
    label = 61;
    break;
   case 61:
    var $300;
    var $y_5242;
    var $301 = $300 << 16 >> 16 == 0;
    if ($301) {
      var $342 = 0;
      label = 67;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $302 = $300 & 65535;
    var $x_5237 = 0;
    var $304 = $302;
    label = 63;
    break;
   case 63:
    var $304;
    var $x_5237;
    var $305 = $x_5237 + $y_5242 | 0;
    var $306 = $305 & 1;
    var $307 = ($306 | 0) == 0;
    if ($307) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    var $_pre9 = $x_5237 + 1 | 0;
    var $_pre_phi = $_pre9;
    label = 66;
    break;
   case 65:
    var $309 = ($x_5237 | 0) != 0;
    var $310 = $x_5237 - 1 | 0;
    var $311 = $x_5237 + 1 | 0;
    var $312 = $309 ? $310 : $311;
    var $313 = ($311 | 0) < ($304 | 0);
    var $314 = $313 ? $311 : $310;
    var $315 = HEAP16[5245028 >> 1];
    var $316 = $315 & 65535;
    var $317 = $316 * $y_5242 & -1;
    var $318 = $317 + $x_5237 | 0;
    var $319 = HEAP32[5245032 >> 2];
    var $320 = $319 + ($318 << 1) | 0;
    var $321 = HEAP16[$320 >> 1];
    var $322 = $321 & 65535;
    var $323 = $322 << 1;
    var $324 = $323 - 4096 | 0;
    var $325 = $317 + $312 | 0;
    var $326 = $319 + ($325 << 1) | 0;
    var $327 = HEAP16[$326 >> 1];
    var $328 = $327 & 65535;
    var $329 = $317 + $314 | 0;
    var $330 = $319 + ($329 << 1) | 0;
    var $331 = HEAP16[$330 >> 1];
    var $332 = $331 & 65535;
    var $333 = $332 + $328 | 0;
    var $334 = $333 >>> 1;
    var $335 = $324 + $334 | 0;
    var $336 = ($335 | 0) < 0;
    var $337 = $335 & 65535;
    var $338 = $336 ? 0 : $337;
    HEAP16[$320 >> 1] = $338;
    var $_pre_phi = $311;
    label = 66;
    break;
   case 66:
    var $_pre_phi;
    var $340 = $262 & 65535;
    var $341 = ($_pre_phi | 0) < ($340 | 0);
    if ($341) {
      var $x_5237 = $_pre_phi;
      var $304 = $340;
      label = 63;
      break;
    } else {
      var $342 = $262;
      label = 67;
      break;
    }
   case 67:
    var $342;
    var $343 = $y_5242 + 1 | 0;
    var $344 = ($343 | 0) < ($299 | 0);
    if ($344) {
      var $y_5242 = $343;
      var $300 = $342;
      label = 61;
      break;
    } else {
      label = 19;
      break;
    }
   case 68:
    var $i_4187;
    var $345 = $_pre6 + ($i_4187 << 1) | 0;
    var $346 = HEAP16[$345 >> 1];
    var $347 = $346 & 65535;
    var $348 = 5428500 + ($347 << 1) | 0;
    var $349 = HEAP16[$348 >> 1];
    HEAP16[$345 >> 1] = $349;
    var $350 = $i_4187 + 1 | 0;
    var $351 = ($350 | 0) < ($97 | 0);
    if ($351) {
      var $i_4187 = $350;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    HEAP32[5263496 >> 2] = 16383;
    STACKTOP = __stackBase__;
    return;
   case 70:
    var $x_1194_1;
    var $x_1_in193_1;
    var $352 = _getbithuff(8, $170);
    var $sext184_1 = $352 << 24;
    var $353 = $sext184_1 >> 20;
    if ($133) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $355 = $buf + 772 + ($x_1_in193_1 << 1) | 0;
    var $356 = HEAP16[$355 >> 1];
    var $357 = $356 << 16 >> 16;
    var $358 = $buf + 772 + ($x_1194_1 << 1) | 0;
    var $359 = HEAP16[$358 >> 1];
    var $360 = $359 << 16 >> 16;
    var $361 = $360 << 1;
    var $362 = $361 + $357 | 0;
    var $363 = $buf + 1544 + ($x_1_in193_1 << 1) | 0;
    var $364 = HEAP16[$363 >> 1];
    var $365 = $364 << 16 >> 16;
    var $366 = $362 + $365 | 0;
    var $367 = ($366 | 0) / 4 & -1;
    var $378 = $367;
    label = 73;
    break;
   case 72:
    var $369 = $buf + $c_4235 * 2316 + 772 + ($x_1194_1 << 1) | 0;
    var $370 = HEAP16[$369 >> 1];
    var $371 = $370 << 16 >> 16;
    var $372 = $buf + $c_4235 * 2316 + 1544 + ($x_1_in193_1 << 1) | 0;
    var $373 = HEAP16[$372 >> 1];
    var $374 = $373 << 16 >> 16;
    var $375 = $374 + $371 | 0;
    var $376 = ($375 | 0) / 2 & -1;
    var $378 = $376;
    label = 73;
    break;
   case 73:
    var $378;
    var $379 = $378 + $353 | 0;
    var $380 = $379 & 65535;
    var $381 = $buf + $c_4235 * 2316 + 1544 + ($x_1194_1 << 1) | 0;
    HEAP16[$381 >> 1] = $380;
    var $x_1_1 = $x_1194_1 - 1 | 0;
    var $382 = ($x_1_1 | 0) < ($161 | 0);
    if ($382) {
      var $col_0_be = $161;
      label = 28;
      break;
    } else {
      var $x_1_in193_1 = $x_1194_1;
      var $x_1194_1 = $x_1_1;
      label = 70;
      break;
    }
   case 74:
    var $x_0200_1;
    var $383 = _getbithuff(8, $82);
    var $384 = $383 & 255;
    var $385 = $114 * $384 & -1;
    var $386 = $385 & 65535;
    var $387 = $buf + $c_4235 * 2316 + 1544 + ($x_0200_1 << 1) | 0;
    HEAP16[$387 >> 1] = $386;
    var $x_0_1 = $x_0200_1 - 1 | 0;
    var $388 = ($x_0_1 | 0) < ($161 | 0);
    if ($388) {
      var $col_0_be = $161;
      label = 28;
      break;
    } else {
      var $x_0200_1 = $x_0_1;
      label = 74;
      break;
    }
   case 75:
    var $x_2207_1;
    var $x_2_in206_1;
    if ($133) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $390 = $buf + 772 + ($x_2_in206_1 << 1) | 0;
    var $391 = HEAP16[$390 >> 1];
    var $392 = $391 << 16 >> 16;
    var $393 = $buf + 772 + ($x_2207_1 << 1) | 0;
    var $394 = HEAP16[$393 >> 1];
    var $395 = $394 << 16 >> 16;
    var $396 = $395 << 1;
    var $397 = $396 + $392 | 0;
    var $398 = $buf + 1544 + ($x_2_in206_1 << 1) | 0;
    var $399 = HEAP16[$398 >> 1];
    var $400 = $399 << 16 >> 16;
    var $401 = $397 + $400 | 0;
    var $402 = ($401 | 0) / 4 & -1;
    var $413 = $402;
    label = 78;
    break;
   case 77:
    var $404 = $buf + $c_4235 * 2316 + 772 + ($x_2207_1 << 1) | 0;
    var $405 = HEAP16[$404 >> 1];
    var $406 = $405 << 16 >> 16;
    var $407 = $buf + $c_4235 * 2316 + 1544 + ($x_2_in206_1 << 1) | 0;
    var $408 = HEAP16[$407 >> 1];
    var $409 = $408 << 16 >> 16;
    var $410 = $409 + $406 | 0;
    var $411 = ($410 | 0) / 2 & -1;
    var $413 = $411;
    label = 78;
    break;
   case 78:
    var $413;
    var $414 = $413 & 65535;
    var $415 = $buf + $c_4235 * 2316 + 1544 + ($x_2207_1 << 1) | 0;
    HEAP16[$415 >> 1] = $414;
    var $x_2_1 = $x_2207_1 - 1 | 0;
    var $416 = ($x_2_1 | 0) < ($220 | 0);
    if ($416) {
      label = 79;
      break;
    } else {
      var $x_2_in206_1 = $x_2207_1;
      var $x_2207_1 = $x_2_1;
      label = 75;
      break;
    }
   case 79:
    var $418 = $rep_0217 & 1;
    var $419 = ($418 | 0) == 0;
    if ($419) {
      label = 48;
      break;
    } else {
      label = 46;
      break;
    }
   case 80:
    var $x_3211_1;
    var $420 = $buf + $c_4235 * 2316 + 1544 + ($x_3211_1 << 1) | 0;
    var $421 = HEAP16[$420 >> 1];
    var $422 = $421 & 65535;
    var $423 = $422 + $251 | 0;
    var $424 = $423 & 65535;
    HEAP16[$420 >> 1] = $424;
    var $x_3_1 = $x_3211_1 - 1 | 0;
    var $425 = ($x_3_1 | 0) < ($220 | 0);
    if ($425) {
      label = 48;
      break;
    } else {
      var $x_3211_1 = $x_3_1;
      label = 80;
      break;
    }
   case 81:
    var $426 = $266 | 1;
    var $x_4229_1 = 0;
    label = 82;
    break;
   case 82:
    var $x_4229_1;
    var $428 = $buf + $c_4235 * 2316 + 1544 + ($x_4229_1 << 1) | 0;
    var $429 = HEAP16[$428 >> 1];
    var $430 = $429 << 16 >> 16;
    var $431 = $430 << 4;
    var $432 = ($431 | 0) / ($114 | 0) & -1;
    var $433 = ($432 | 0) < 0;
    var $434 = $432 & 65535;
    var $435 = $433 ? 0 : $434;
    if ($133) {
      label = 84;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $437 = $277 * $426 & -1;
    var $438 = $x_4229_1 << 1;
    var $439 = $438 | 1;
    var $440 = $439 + $437 | 0;
    var $441 = $292 + ($440 << 1) | 0;
    HEAP16[$441 >> 1] = $435;
    label = 85;
    break;
   case 84:
    var $443 = $277 * $145 & -1;
    var $444 = $x_4229_1 << 1;
    var $445 = $139 + $444 | 0;
    var $446 = $445 + $443 | 0;
    var $447 = $292 + ($446 << 1) | 0;
    HEAP16[$447 >> 1] = $435;
    label = 85;
    break;
   case 85:
    var $449 = $x_4229_1 + 1 | 0;
    var $450 = $263 & 65535;
    var $451 = $450 >>> 1;
    var $452 = ($449 | 0) < ($451 | 0);
    if ($452) {
      var $x_4229_1 = $449;
      label = 82;
      break;
    } else {
      var $453 = $263;
      label = 86;
      break;
    }
   case 86:
    var $453;
    _memcpy($141, $142, $144);
    var $454 = $r_0233 + 1 | 0;
    var $455 = ($454 | 0) > ($135 | 0);
    if ($455) {
      label = 58;
      break;
    } else {
      var $r_0233 = $454;
      var $149 = $453;
      var $148 = $263;
      var $147 = $262;
      label = 27;
      break;
    }
  }
}
_kodak_radc_load_raw["X"] = 1;
function _kodak_dc120_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 848 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $pixel | 0;
    var $row_010 = 0;
    label = 4;
    break;
   case 4:
    var $row_010;
    var $5 = HEAP32[5264116 >> 2];
    var $6 = _fread($3, 1, 848, $5);
    var $7 = $6 >>> 0 < 848;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $10 = $row_010 & 3;
    var $11 = 5264004 + ($10 << 2) | 0;
    var $12 = HEAP32[$11 >> 2];
    var $13 = $12 * $row_010 & -1;
    var $14 = 5264020 + ($10 << 2) | 0;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $13 + $15 | 0;
    var $17 = HEAP16[5242964 >> 1];
    var $18 = $17 << 16 >> 16 == 0;
    if ($18) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre = HEAP16[5245028 >> 1];
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_09 = 0;
    label = 8;
    break;
   case 8:
    var $col_09;
    var $19 = $16 + $col_09 | 0;
    var $20 = ($19 | 0) % 848;
    var $21 = $pixel + $20 | 0;
    var $22 = HEAP8[$21];
    var $23 = $22 & 255;
    var $24 = $_pre & 65535;
    var $25 = $24 * $row_010 & -1;
    var $26 = $25 + $col_09 | 0;
    var $27 = $_pre1 + ($26 << 1) | 0;
    HEAP16[$27 >> 1] = $23;
    var $28 = $col_09 + 1 | 0;
    var $29 = $17 & 65535;
    var $30 = ($28 | 0) < ($29 | 0);
    if ($30) {
      var $col_09 = $28;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $31 = $row_010 + 1 | 0;
    var $32 = HEAP16[5398712 >> 1];
    var $33 = $32 & 65535;
    var $34 = ($31 | 0) < ($33 | 0);
    if ($34) {
      var $row_010 = $31;
      label = 4;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    HEAP32[5263496 >> 2] = 255;
    STACKTOP = __stackBase__;
    return;
  }
}
function _eight_bit_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = _calloc($2, 1);
    _merror($3, 5586036);
    var $4 = HEAP16[5245036 >> 1];
    var $5 = $4 << 16 >> 16 == 0;
    if ($5) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_09 = 0;
    var $6 = $_pre;
    label = 4;
    break;
   case 4:
    var $6;
    var $row_09;
    var $7 = $6 & 65535;
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fread($3, 1, $7, $8);
    var $10 = HEAP16[5245028 >> 1];
    var $11 = $10 & 65535;
    var $12 = $9 >>> 0 < $11 >>> 0;
    if ($12) {
      label = 5;
      break;
    } else {
      var $14 = $10;
      label = 6;
      break;
    }
   case 5:
    _derror();
    var $_pr = HEAP16[5245028 >> 1];
    var $14 = $_pr;
    label = 6;
    break;
   case 6:
    var $14;
    var $15 = $14 << 16 >> 16 == 0;
    if ($15) {
      var $28 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $16 = $14 & 65535;
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_08 = 0;
    label = 8;
    break;
   case 8:
    var $col_08;
    var $18 = $3 + $col_08 | 0;
    var $19 = HEAP8[$18];
    var $20 = $19 & 255;
    var $21 = 5428500 + ($20 << 1) | 0;
    var $22 = HEAP16[$21 >> 1];
    var $23 = $16 * $row_09 & -1;
    var $24 = $23 + $col_08 | 0;
    var $25 = $_pre1 + ($24 << 1) | 0;
    HEAP16[$25 >> 1] = $22;
    var $26 = $col_08 + 1 | 0;
    var $27 = $26 >>> 0 < $16 >>> 0;
    if ($27) {
      var $col_08 = $26;
      label = 8;
      break;
    } else {
      var $28 = $14;
      label = 9;
      break;
    }
   case 9:
    var $28;
    var $29 = $row_09 + 1 | 0;
    var $30 = HEAP16[5245036 >> 1];
    var $31 = $30 & 65535;
    var $32 = $29 >>> 0 < $31 >>> 0;
    if ($32) {
      var $row_09 = $29;
      var $6 = $28;
      label = 4;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _free($3);
    var $33 = HEAP16[5429010 >> 1];
    var $34 = $33 & 65535;
    HEAP32[5263496 >> 2] = $34;
    return;
  }
}
_eight_bit_load_raw["X"] = 1;
function _kodak_yrgb_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = _calloc($2, 3);
    _merror($3, 5585876);
    var $4 = HEAP16[5398712 >> 1];
    var $5 = $4 << 16 >> 16 == 0;
    if ($5) {
      label = 12;
      break;
    } else {
      var $row_025 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_025;
    var $6 = $row_025 & 1;
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $9 = HEAP16[5245028 >> 1];
    var $10 = $9 & 65535;
    var $11 = HEAP32[5264116 >> 2];
    var $12 = _fread($3, $10, 3, $11);
    var $13 = $12 >>> 0 < 3;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $15 = HEAP16[5245028 >> 1];
    var $16 = $15 << 16 >> 16 == 0;
    if ($16) {
      label = 11;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $17 = -$6 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $col_024 = 0;
    label = 8;
    break;
   case 8:
    var $col_024;
    var $19 = $_pre & 65535;
    var $20 = $19 << 1;
    var $21 = $20 & $17;
    var $22 = $21 + $col_024 | 0;
    var $23 = $3 + $22 | 0;
    var $24 = HEAP8[$23];
    var $25 = $24 & 255;
    var $26 = $col_024 & -2;
    var $27 = $19 + $26 | 0;
    var $28 = $3 + $27 | 0;
    var $29 = HEAP8[$28];
    var $30 = $29 & 255;
    var $31 = $30 - 128 | 0;
    var $32 = $27 + 1 | 0;
    var $33 = $3 + $32 | 0;
    var $34 = HEAP8[$33];
    var $35 = $34 & 255;
    var $36 = $35 - 128 | 0;
    var $37 = $30 - 126 | 0;
    var $38 = $37 + $36 | 0;
    var $39 = $38 >> 2;
    var $40 = $25 - $39 | 0;
    var $41 = $40 + $31 | 0;
    var $42 = $36 + $40 | 0;
    var $phitmp = ($42 | 0) < 0;
    if ($phitmp) {
      var $45 = 0;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $44 = ($42 | 0) < 255;
    var $_ = $44 ? $42 : 255;
    var $45 = $_;
    label = 10;
    break;
   case 10:
    var $45;
    var $46 = 5428500 + ($45 << 1) | 0;
    var $47 = HEAP16[$46 >> 1];
    var $48 = $19 * $row_025 & -1;
    var $49 = $48 + $col_024 | 0;
    var $50 = HEAP32[5264108 >> 2];
    var $51 = $50 + ($49 << 3) | 0;
    HEAP16[$51 >> 1] = $47;
    var $phitmp_1 = ($40 | 0) < 0;
    if ($phitmp_1) {
      var $61 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    var $52 = $row_025 + 1 | 0;
    var $53 = HEAP16[5398712 >> 1];
    var $54 = $53 & 65535;
    var $55 = ($52 | 0) < ($54 | 0);
    if ($55) {
      var $row_025 = $52;
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _free($3);
    var $56 = HEAP16[5429010 >> 1];
    var $57 = $56 & 65535;
    HEAP32[5263496 >> 2] = $57;
    return;
   case 13:
    var $59 = ($40 | 0) < 255;
    var $__1 = $59 ? $40 : 255;
    var $61 = $__1;
    label = 14;
    break;
   case 14:
    var $61;
    var $62 = 5428500 + ($61 << 1) | 0;
    var $63 = HEAP16[$62 >> 1];
    var $64 = $50 + ($49 << 3) + 2 | 0;
    HEAP16[$64 >> 1] = $63;
    var $phitmp_2 = ($41 | 0) < 0;
    if ($phitmp_2) {
      var $68 = 0;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $66 = ($41 | 0) < 255;
    var $__2 = $66 ? $41 : 255;
    var $68 = $__2;
    label = 16;
    break;
   case 16:
    var $68;
    var $69 = 5428500 + ($68 << 1) | 0;
    var $70 = HEAP16[$69 >> 1];
    var $71 = $50 + ($49 << 3) + 4 | 0;
    HEAP16[$71 >> 1] = $70;
    var $72 = $col_024 + 1 | 0;
    var $73 = $15 & 65535;
    var $74 = ($72 | 0) < ($73 | 0);
    if ($74) {
      var $col_024 = $72;
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
  }
}
_kodak_yrgb_load_raw["X"] = 1;
function _kodak_262_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $1 = _make_decoder(5264040);
    var $2 = $huff | 0;
    HEAP32[$2 >> 2] = $1;
    var $3 = _make_decoder(5264066);
    var $4 = $huff + 4 | 0;
    HEAP32[$4 >> 2] = $3;
    var $5 = HEAP16[5245036 >> 1];
    var $6 = $5 & 65535;
    var $7 = $6 + 63 | 0;
    var $8 = $7 >>> 5;
    var $9 = HEAP16[5245028 >> 1];
    var $10 = $9 & 65535;
    var $11 = $10 << 5;
    var $12 = $8 << 2;
    var $13 = $12 + $11 | 0;
    var $14 = _malloc($13);
    _merror($14, 5585676);
    var $15 = HEAP16[5245028 >> 1];
    var $16 = $15 & 65535;
    var $17 = $16 << 5;
    var $18 = $14 + $17 | 0;
    var $19 = $18;
    HEAP16[5262944 >> 1] = 19789;
    var $20 = ($8 | 0) == 0;
    if ($20) {
      label = 3;
      break;
    } else {
      var $c_151 = 0;
      label = 4;
      break;
    }
   case 3:
    var $21 = HEAP16[5245036 >> 1];
    var $22 = $21 << 16 >> 16 == 0;
    if ($22) {
      label = 18;
      break;
    } else {
      var $row_046 = 0;
      var $pi_048 = 0;
      label = 5;
      break;
    }
   case 4:
    var $c_151;
    var $23 = _get4();
    var $24 = $19 + ($c_151 << 2) | 0;
    HEAP32[$24 >> 2] = $23;
    var $25 = $c_151 + 1 | 0;
    var $26 = ($25 | 0) < ($8 | 0);
    if ($26) {
      var $c_151 = $25;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 5:
    var $pi_048;
    var $row_046;
    var $27 = $row_046 & 31;
    var $28 = ($27 | 0) == 0;
    if ($28) {
      label = 6;
      break;
    } else {
      var $pi_2_ph = $pi_048;
      label = 7;
      break;
    }
   case 6:
    var $30 = HEAP32[5264116 >> 2];
    var $31 = $row_046 >> 5;
    var $32 = $19 + ($31 << 2) | 0;
    var $33 = HEAP32[$32 >> 2];
    var $34 = _fseek($30, $33, 0);
    var $35 = _getbithuff(-1, 0);
    var $pi_2_ph = 0;
    label = 7;
    break;
   case 7:
    var $pi_2_ph;
    var $36 = HEAP16[5245028 >> 1];
    var $37 = $36 << 16 >> 16 == 0;
    if ($37) {
      var $pi_2_lcssa = $pi_2_ph;
      label = 17;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $38 = $36 & 65535;
    var $col_043 = 0;
    var $pi_244 = $pi_2_ph;
    var $41 = $38;
    var $40 = $36;
    label = 9;
    break;
   case 9:
    var $40;
    var $41;
    var $pi_244;
    var $col_043;
    var $42 = $col_043 + $row_046 | 0;
    var $43 = $42 & 1;
    var $44 = ($43 | 0) == 0;
    if ($44) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $46 = $pi_244 - 2 | 0;
    var $47 = $40 & 65535;
    var $48 = $47 << 1;
    var $49 = $pi_244 - $48 | 0;
    var $58 = $49;
    var $57 = $46;
    var $_pre_phi = $46;
    label = 12;
    break;
   case 11:
    var $51 = $pi_244 - 1 | 0;
    var $52 = $51 - $41 | 0;
    var $53 = $40 & 65535;
    var $54 = $pi_244 + 1 | 0;
    var $55 = $54 - $53 | 0;
    var $_pre1 = $pi_244 - 2 | 0;
    var $58 = $55;
    var $57 = $52;
    var $_pre_phi = $_pre1;
    label = 12;
    break;
   case 12:
    var $_pre_phi;
    var $57;
    var $58;
    var $59 = ($col_043 | 0) > ($43 | 0);
    var $_ = $59 ? $57 : -1;
    var $60 = ($_ | 0) < 0;
    var $pi1_1 = $60 ? $58 : $_;
    var $61 = ($pi1_1 | 0) < 0;
    var $62 = ($col_043 | 0) > 1;
    var $or_cond = $61 & $62;
    var $pi1_2 = $or_cond ? $_pre_phi : $pi1_1;
    var $63 = ($pi1_2 | 0) < 0;
    if ($63) {
      var $75 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $65 = ($58 | 0) < 0;
    var $pi1_1_ = $65 ? $pi1_1 : $58;
    var $pi2_1 = $or_cond ? $_pre_phi : $pi1_1_;
    var $66 = $14 + $pi1_2 | 0;
    var $67 = HEAP8[$66];
    var $68 = $67 & 255;
    var $69 = $14 + $pi2_1 | 0;
    var $70 = HEAP8[$69];
    var $71 = $70 & 255;
    var $72 = $71 + $68 | 0;
    var $73 = $72 >>> 1;
    var $75 = $73;
    label = 14;
    break;
   case 14:
    var $75;
    var $76 = $huff + ($43 << 2) | 0;
    var $77 = HEAP32[$76 >> 2];
    var $78 = _ljpeg_diff($77);
    var $79 = $78 + $75 | 0;
    var $80 = $79 & 255;
    var $81 = $14 + $pi_244 | 0;
    HEAP8[$81] = $80;
    var $82 = $79 >>> 0 > 255;
    if ($82) {
      label = 15;
      break;
    } else {
      var $85 = $80;
      label = 16;
      break;
    }
   case 15:
    _derror();
    var $_pre = HEAP8[$81];
    var $85 = $_pre;
    label = 16;
    break;
   case 16:
    var $85;
    var $86 = $pi_244 + 1 | 0;
    var $87 = $85 & 255;
    var $88 = 5428500 + ($87 << 1) | 0;
    var $89 = HEAP16[$88 >> 1];
    var $90 = HEAP16[5245028 >> 1];
    var $91 = $90 & 65535;
    var $92 = $91 * $row_046 & -1;
    var $93 = $92 + $col_043 | 0;
    var $94 = HEAP32[5245032 >> 2];
    var $95 = $94 + ($93 << 1) | 0;
    HEAP16[$95 >> 1] = $89;
    var $96 = $col_043 + 1 | 0;
    var $97 = ($96 | 0) < ($91 | 0);
    if ($97) {
      var $col_043 = $96;
      var $pi_244 = $86;
      var $41 = $91;
      var $40 = $90;
      label = 9;
      break;
    } else {
      var $pi_2_lcssa = $86;
      label = 17;
      break;
    }
   case 17:
    var $pi_2_lcssa;
    var $98 = $row_046 + 1 | 0;
    var $99 = HEAP16[5245036 >> 1];
    var $100 = $99 & 65535;
    var $101 = ($98 | 0) < ($100 | 0);
    if ($101) {
      var $row_046 = $98;
      var $pi_048 = $pi_2_lcssa;
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _free($14);
    var $102 = $1;
    _free($102);
    var $103 = $3;
    _free($103);
    STACKTOP = __stackBase__;
    return;
  }
}
_kodak_262_load_raw["X"] = 1;
function _kodak_65000_decode($out, $bsize) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 780 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $blen = __stackBase__;
    var $raw = __stackBase__ + 768;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _ftell($1);
    var $3 = $bsize + 3 | 0;
    var $4 = $3 & -4;
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $6 = ($i_0 | 0) < ($4 | 0);
    if ($6) {
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fgetc($8);
    var $_tr = $9 & 255;
    var $10 = $_tr & 15;
    var $11 = $blen + $i_0 | 0;
    HEAP8[$11] = $10;
    var $12 = ($10 & 255) > 12;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $14 = $9 >>> 4;
    var $_tr42 = $14 & 255;
    var $15 = $_tr42 & 15;
    var $16 = $i_0 | 1;
    var $17 = $blen + $16 | 0;
    HEAP8[$17] = $15;
    var $18 = ($15 & 255) > 12;
    var $19 = $i_0 + 2 | 0;
    if ($18) {
      label = 6;
      break;
    } else {
      var $i_0 = $19;
      label = 3;
      break;
    }
   case 6:
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _fseek($21, $2, 0);
    var $23 = ($4 | 0) > 0;
    if ($23) {
      label = 7;
      break;
    } else {
      var $_0 = 1;
      label = 17;
      break;
    }
   case 7:
    var $24 = $raw | 0;
    var $25 = $raw + 4 | 0;
    var $26 = $raw + 8 | 0;
    var $27 = $raw + 2 | 0;
    var $28 = $raw + 6 | 0;
    var $29 = $raw + 10 | 0;
    var $i_145 = 0;
    label = 8;
    break;
   case 8:
    var $i_145;
    _read_shorts($24, 6);
    var $31 = HEAP16[$24 >> 1];
    var $32 = ($31 & 65535) >>> 12;
    var $33 = $32 << 8;
    var $34 = HEAP16[$25 >> 1];
    var $35 = ($34 & 65535) >>> 12;
    var $36 = $35 << 4;
    var $37 = $36 | $33;
    var $38 = HEAP16[$26 >> 1];
    var $39 = ($38 & 65535) >>> 12;
    var $40 = $37 | $39;
    var $41 = $out + ($i_145 << 1) | 0;
    HEAP16[$41 >> 1] = $40;
    var $42 = HEAP16[$27 >> 1];
    var $43 = ($42 & 65535) >>> 12;
    var $44 = $43 << 8;
    var $45 = HEAP16[$28 >> 1];
    var $46 = ($45 & 65535) >>> 12;
    var $47 = $46 << 4;
    var $48 = $47 | $44;
    var $49 = HEAP16[$29 >> 1];
    var $50 = ($49 & 65535) >>> 12;
    var $51 = $48 | $50;
    var $52 = $i_145 | 1;
    var $53 = $out + ($52 << 1) | 0;
    HEAP16[$53 >> 1] = $51;
    var $54 = $i_145 | 2;
    var $55 = $31 & 4095;
    var $56 = $out + ($54 << 1) | 0;
    HEAP16[$56 >> 1] = $55;
    var $57 = $42 & 4095;
    var $58 = $i_145 | 3;
    var $59 = $out + ($58 << 1) | 0;
    HEAP16[$59 >> 1] = $57;
    var $60 = $34 & 4095;
    var $61 = $54 + 2 | 0;
    var $62 = $out + ($61 << 1) | 0;
    HEAP16[$62 >> 1] = $60;
    var $63 = $45 & 4095;
    var $64 = $54 + 3 | 0;
    var $65 = $out + ($64 << 1) | 0;
    HEAP16[$65 >> 1] = $63;
    var $66 = $38 & 4095;
    var $67 = $i_145 | 6;
    var $68 = $out + ($67 << 1) | 0;
    HEAP16[$68 >> 1] = $66;
    var $69 = $49 & 4095;
    var $70 = $i_145 | 7;
    var $71 = $out + ($70 << 1) | 0;
    HEAP16[$71 >> 1] = $69;
    var $72 = $i_145 + 8 | 0;
    var $73 = ($72 | 0) < ($4 | 0);
    if ($73) {
      var $i_145 = $72;
      label = 8;
      break;
    } else {
      var $_0 = 1;
      label = 17;
      break;
    }
   case 9:
    var $75 = $3 & 4;
    var $76 = ($75 | 0) == 0;
    if ($76) {
      var $bits_1_ph = 0;
      var $bitbuf_1_ph$1 = 0;
      var $bitbuf_1_ph$0 = 0;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $78 = HEAP32[5264116 >> 2];
    var $79 = _fgetc($78);
    var $80 = $79 << 8;
    var $81$0 = $80;
    var $81$1 = ($80 | 0) < 0 ? -1 : 0;
    var $82 = HEAP32[5264116 >> 2];
    var $83 = _fgetc($82);
    var $84$0 = $83;
    var $84$1 = ($83 | 0) < 0 ? -1 : 0;
    var $85$0 = (i64Math.add($84$0, $84$1, $81$0, $81$1), HEAP32[tempDoublePtr >> 2]);
    var $85$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $bits_1_ph = 16;
    var $bitbuf_1_ph$1 = $85$1;
    var $bitbuf_1_ph$0 = $85$0;
    label = 11;
    break;
   case 11:
    var $bitbuf_1_ph$0;
    var $bitbuf_1_ph$1;
    var $bits_1_ph;
    var $86 = ($4 | 0) > 0;
    if ($86) {
      var $bitbuf_150$1 = $bitbuf_1_ph$1;
      var $bitbuf_150$0 = $bitbuf_1_ph$0;
      var $bits_151 = $bits_1_ph;
      var $i_252 = 0;
      label = 12;
      break;
    } else {
      var $_0 = 0;
      label = 17;
      break;
    }
   case 12:
    var $i_252;
    var $bits_151;
    var $bitbuf_150$0;
    var $bitbuf_150$1;
    var $87 = $blen + $i_252 | 0;
    var $88 = HEAP8[$87];
    var $89 = $88 & 255;
    var $90 = ($bits_151 | 0) < ($89 | 0);
    if ($90) {
      label = 13;
      break;
    } else {
      var $bits_2 = $bits_151;
      var $bitbuf_3$1 = $bitbuf_150$1;
      var $bitbuf_3$0 = $bitbuf_150$0;
      label = 14;
      break;
    }
   case 13:
    var $91 = HEAP32[5264116 >> 2];
    var $92 = _fgetc($91);
    var $93$0 = $92;
    var $93$1 = ($92 | 0) < 0 ? -1 : 0;
    var $94 = $bits_151 + 8 | 0;
    var $95$0 = $94;
    Runtime.bitshift64($93$0, $93$1, 0, $95$0);
    var $96$0 = HEAP32[tempDoublePtr >> 2], $96$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $97$0 = (i64Math.add($96$0, $96$1, $bitbuf_150$0, $bitbuf_150$1), HEAP32[tempDoublePtr >> 2]);
    var $97$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $98 = HEAP32[5264116 >> 2];
    var $99 = _fgetc($98);
    var $100$0 = $99;
    var $100$1 = ($99 | 0) < 0 ? -1 : 0;
    var $101$0 = $bits_151;
    Runtime.bitshift64($100$0, $100$1, 0, $101$0);
    var $102$0 = HEAP32[tempDoublePtr >> 2], $102$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $103$0 = (i64Math.add($102$0, $102$1, $97$0, $97$1), HEAP32[tempDoublePtr >> 2]);
    var $103$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $104 = HEAP32[5264116 >> 2];
    var $105 = _fgetc($104);
    var $106$0 = $105;
    var $106$1 = ($105 | 0) < 0 ? -1 : 0;
    var $107 = $bits_151 + 24 | 0;
    var $108$0 = $107;
    Runtime.bitshift64($106$0, $106$1, 0, $108$0);
    var $109$0 = HEAP32[tempDoublePtr >> 2], $109$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $110$0 = (i64Math.add($109$0, $109$1, $103$0, $103$1), HEAP32[tempDoublePtr >> 2]);
    var $110$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $111 = HEAP32[5264116 >> 2];
    var $112 = _fgetc($111);
    var $113$0 = $112;
    var $113$1 = ($112 | 0) < 0 ? -1 : 0;
    var $114 = $bits_151 + 16 | 0;
    var $115$0 = $114;
    Runtime.bitshift64($113$0, $113$1, 0, $115$0);
    var $116$0 = HEAP32[tempDoublePtr >> 2], $116$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $117$0 = (i64Math.add($116$0, $116$1, $110$0, $110$1), HEAP32[tempDoublePtr >> 2]);
    var $117$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $118 = $bits_151 + 32 | 0;
    var $bits_2 = $118;
    var $bitbuf_3$1 = $117$1;
    var $bitbuf_3$0 = $117$0;
    label = 14;
    break;
   case 14:
    var $bitbuf_3$0;
    var $bitbuf_3$1;
    var $bits_2;
    var $120 = 16 - $89 | 0;
    var $121 = 65535 >>> ($120 >>> 0);
    var $122$0 = $121;
    var $122$1 = 0;
    var $123$0 = $bitbuf_3$0 & $122$0;
    var $124$0 = $123$0;
    var $124 = $124$0;
    var $125$0 = $88 & 255;
    Runtime.bitshift64($bitbuf_3$0, $bitbuf_3$1, 1, $125$0);
    var $126$0 = HEAP32[tempDoublePtr >> 2], $126$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $127 = $bits_2 - $89 | 0;
    var $128 = $89 - 1 | 0;
    var $129 = 1 << $128;
    var $130 = $124 & $129;
    var $131 = ($130 | 0) == 0;
    if ($131) {
      label = 15;
      break;
    } else {
      var $diff_0 = $124;
      label = 16;
      break;
    }
   case 15:
    var $_neg = -1 << $89;
    var $_neg43 = $_neg + 1 | 0;
    var $133 = $_neg43 + $124 | 0;
    var $diff_0 = $133;
    label = 16;
    break;
   case 16:
    var $diff_0;
    var $135 = $diff_0 & 65535;
    var $136 = $out + ($i_252 << 1) | 0;
    HEAP16[$136 >> 1] = $135;
    var $137 = $i_252 + 1 | 0;
    var $exitcond = ($137 | 0) == ($4 | 0);
    if ($exitcond) {
      var $_0 = 0;
      label = 17;
      break;
    } else {
      var $bitbuf_150$1 = $126$1;
      var $bitbuf_150$0 = $126$0;
      var $bits_151 = $127;
      var $i_252 = $137;
      label = 12;
      break;
    }
   case 17:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_kodak_65000_decode["X"] = 1;
function _kodak_65000_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 520 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $pred = __stackBase__ + 512;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $pred + 4 | 0;
    var $4 = $pred | 0;
    var $5 = $buf | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_017 = 0;
    var $8 = $_pre;
    var $7 = $1;
    var $6 = $_pre;
    label = 4;
    break;
   case 4:
    var $6;
    var $7;
    var $8;
    var $row_017;
    var $9 = $8 << 16 >> 16 == 0;
    if ($9) {
      var $49 = 0;
      var $48 = $7;
      var $47 = $6;
      label = 14;
      break;
    } else {
      var $col_013 = 0;
      var $indvars_iv = -1;
      var $10 = $6;
      label = 5;
      break;
    }
   case 5:
    var $10;
    var $indvars_iv;
    var $col_013;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    var $11 = $10 & 65535;
    var $12 = $11 - $col_013 | 0;
    var $13 = ($12 | 0) > 256;
    var $_ = $13 ? 256 : $12;
    var $14 = _kodak_65000_decode($5, $_);
    var $15 = ($_ | 0) > 0;
    if ($15) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    var $16 = ($14 | 0) == 0;
    var $17 = $indvars_iv - $11 | 0;
    var $18 = ($17 | 0) > -257;
    var $_op = $17 ^ -1;
    var $19 = $18 ? $_op : 256;
    var $i_012 = 0;
    label = 7;
    break;
   case 7:
    var $i_012;
    var $21 = $buf + ($i_012 << 1) | 0;
    var $22 = HEAP16[$21 >> 1];
    var $23 = $22 << 16 >> 16;
    if ($16) {
      label = 8;
      break;
    } else {
      var $29 = $23;
      label = 9;
      break;
    }
   case 8:
    var $25 = $i_012 & 1;
    var $26 = $pred + ($25 << 2) | 0;
    var $27 = HEAP32[$26 >> 2];
    var $28 = $27 + $23 | 0;
    HEAP32[$26 >> 2] = $28;
    var $29 = $28;
    label = 9;
    break;
   case 9:
    var $29;
    var $30 = 5428500 + ($29 << 1) | 0;
    var $31 = HEAP16[$30 >> 1];
    var $32 = HEAP16[5245028 >> 1];
    var $33 = $32 & 65535;
    var $34 = $33 * $row_017 & -1;
    var $35 = $i_012 + $col_013 | 0;
    var $36 = $35 + $34 | 0;
    var $37 = HEAP32[5245032 >> 2];
    var $38 = $37 + ($36 << 1) | 0;
    HEAP16[$38 >> 1] = $31;
    var $39 = ($31 & 65535) > 4095;
    if ($39) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _derror();
    label = 11;
    break;
   case 11:
    var $42 = $i_012 + 1 | 0;
    var $exitcond = ($42 | 0) == ($19 | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $i_012 = $42;
      label = 7;
      break;
    }
   case 12:
    var $43 = $col_013 + 256 | 0;
    var $44 = HEAP16[5242964 >> 1];
    var $45 = $44 & 65535;
    var $46 = ($43 | 0) < ($45 | 0);
    var $indvars_iv_next = $indvars_iv + 256 | 0;
    if ($46) {
      var $col_013 = $43;
      var $indvars_iv = $indvars_iv_next;
      var $10 = $44;
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $49 = $44;
    var $48 = $_pre1;
    var $47 = $44;
    label = 14;
    break;
   case 14:
    var $47;
    var $48;
    var $49;
    var $50 = $row_017 + 1 | 0;
    var $51 = $48 & 65535;
    var $52 = ($50 | 0) < ($51 | 0);
    if ($52) {
      var $row_017 = $50;
      var $8 = $49;
      var $7 = $48;
      var $6 = $47;
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
_kodak_65000_load_raw["X"] = 1;
function _kodak_ycbcr_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $y = __stackBase__ + 768;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $buf | 0;
    var $4 = $y + 12 | 0;
    var $5 = $y + 4 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_052 = 0;
    var $7 = $_pre;
    var $6 = $1;
    label = 4;
    break;
   case 4:
    var $6;
    var $7;
    var $row_052;
    var $8 = $7 << 16 >> 16 == 0;
    if ($8) {
      var $66 = 0;
      var $65 = $6;
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $9 = $7 & 65535;
    var $col_049 = 0;
    var $11 = $9;
    label = 6;
    break;
   case 6:
    var $11;
    var $col_049;
    var $12 = $11 - $col_049 | 0;
    var $13 = ($12 | 0) > 128;
    var $_ = $13 ? 128 : $12;
    var $14 = $_ * 3 & -1;
    var $15 = _kodak_65000_decode($3, $14);
    HEAP32[$4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    var $16 = ($_ | 0) > 0;
    if ($16) {
      var $i_044 = 0;
      var $cb_045 = 0;
      var $cr_046 = 0;
      var $bp_047 = $3;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre10 = HEAP16[5242964 >> 1];
    var $61 = $_pre10;
    label = 15;
    break;
   case 8:
    var $bp_047;
    var $cr_046;
    var $cb_045;
    var $i_044;
    var $17 = $bp_047 + 8 | 0;
    var $18 = HEAP16[$17 >> 1];
    var $19 = $18 << 16 >> 16;
    var $20 = $19 + $cb_045 | 0;
    var $21 = $bp_047 + 10 | 0;
    var $22 = HEAP16[$21 >> 1];
    var $23 = $22 << 16 >> 16;
    var $24 = $23 + $cr_046 | 0;
    var $25 = $20 + 2 | 0;
    var $26 = $25 + $24 | 0;
    var $27 = $26 >> 2;
    var $28 = $20 - $27 | 0;
    var $29 = $24 - $27 | 0;
    var $30 = $i_044 + $col_049 | 0;
    var $31 = $30 | 1;
    var $j_042 = 0;
    var $bp_143 = $bp_047;
    label = 9;
    break;
   case 9:
    var $bp_143;
    var $j_042;
    var $33 = $j_042 + $row_052 | 0;
    var $34 = $y + ($j_042 << 3) + 4 | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = $bp_143 + 2 | 0;
    var $37 = HEAP16[$bp_143 >> 1];
    var $38 = $37 << 16 >> 16;
    var $39 = $38 + $35 | 0;
    var $40 = $y + ($j_042 << 3) | 0;
    HEAP32[$40 >> 2] = $39;
    var $41 = $39 >>> 0 > 1023;
    if ($41) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _derror();
    label = 11;
    break;
   case 11:
    var $43 = HEAP16[5242964 >> 1];
    var $44 = $43 & 65535;
    var $45 = $44 * $33 & -1;
    var $46 = $30 + $45 | 0;
    var $47 = HEAP32[5264108 >> 2];
    var $48 = $29 + $39 | 0;
    var $phitmp = ($48 | 0) < 0;
    if ($phitmp) {
      var $52 = 0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $50 = ($48 | 0) < 4095;
    var $_38 = $50 ? $48 : 4095;
    var $52 = $_38;
    label = 13;
    break;
   case 13:
    var $52;
    var $53 = 5428500 + ($52 << 1) | 0;
    var $54 = HEAP16[$53 >> 1];
    var $55 = $47 + ($46 << 3) | 0;
    HEAP16[$55 >> 1] = $54;
    var $56 = $39 - $27 | 0;
    var $phitmp_1 = ($56 | 0) < 0;
    if ($phitmp_1) {
      var $73 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $58 = $i_044 + 2 | 0;
    var $59 = $bp_047 + 12 | 0;
    var $60 = ($58 | 0) < ($_ | 0);
    if ($60) {
      var $i_044 = $58;
      var $cb_045 = $20;
      var $cr_046 = $24;
      var $bp_047 = $59;
      label = 8;
      break;
    } else {
      var $61 = $92;
      label = 15;
      break;
    }
   case 15:
    var $61;
    var $62 = $col_049 + 128 | 0;
    var $63 = $61 & 65535;
    var $64 = ($62 | 0) < ($63 | 0);
    if ($64) {
      var $col_049 = $62;
      var $11 = $63;
      label = 6;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $_pre5 = HEAP16[5398712 >> 1];
    var $66 = $61;
    var $65 = $_pre5;
    label = 17;
    break;
   case 17:
    var $65;
    var $66;
    var $67 = $row_052 + 2 | 0;
    var $68 = $65 & 65535;
    var $69 = ($67 | 0) < ($68 | 0);
    if ($69) {
      var $row_052 = $67;
      var $7 = $66;
      var $6 = $65;
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    STACKTOP = __stackBase__;
    return;
   case 19:
    var $71 = ($56 | 0) < 4095;
    var $_38_1 = $71 ? $56 : 4095;
    var $73 = $_38_1;
    label = 20;
    break;
   case 20:
    var $73;
    var $74 = 5428500 + ($73 << 1) | 0;
    var $75 = HEAP16[$74 >> 1];
    var $76 = $47 + ($46 << 3) + 2 | 0;
    HEAP16[$76 >> 1] = $75;
    var $77 = $28 + $39 | 0;
    var $phitmp_2 = ($77 | 0) < 0;
    if ($phitmp_2) {
      var $81 = 0;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $79 = ($77 | 0) < 4095;
    var $_38_2 = $79 ? $77 : 4095;
    var $81 = $_38_2;
    label = 22;
    break;
   case 22:
    var $81;
    var $82 = 5428500 + ($81 << 1) | 0;
    var $83 = HEAP16[$82 >> 1];
    var $84 = $47 + ($46 << 3) + 4 | 0;
    HEAP16[$84 >> 1] = $83;
    var $85 = HEAP16[$36 >> 1];
    var $86 = $85 << 16 >> 16;
    var $87 = $86 + $39 | 0;
    HEAP32[$34 >> 2] = $87;
    var $88 = $87 >>> 0 > 1023;
    if ($88) {
      label = 23;
      break;
    } else {
      var $92 = $43;
      var $91 = $47;
      label = 24;
      break;
    }
   case 23:
    _derror();
    var $_pre6 = HEAP16[5242964 >> 1];
    var $_pre7 = HEAP32[5264108 >> 2];
    var $92 = $_pre6;
    var $91 = $_pre7;
    label = 24;
    break;
   case 24:
    var $91;
    var $92;
    var $93 = $92 & 65535;
    var $94 = $93 * $33 & -1;
    var $95 = $31 + $94 | 0;
    var $96 = $29 + $87 | 0;
    var $phitmp_157 = ($96 | 0) < 0;
    if ($phitmp_157) {
      var $100 = 0;
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $98 = ($96 | 0) < 4095;
    var $_38_158 = $98 ? $96 : 4095;
    var $100 = $_38_158;
    label = 26;
    break;
   case 26:
    var $100;
    var $101 = 5428500 + ($100 << 1) | 0;
    var $102 = HEAP16[$101 >> 1];
    var $103 = $91 + ($95 << 3) | 0;
    HEAP16[$103 >> 1] = $102;
    var $104 = $87 - $27 | 0;
    var $phitmp_1_1 = ($104 | 0) < 0;
    if ($phitmp_1_1) {
      var $108 = 0;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $106 = ($104 | 0) < 4095;
    var $_38_1_1 = $106 ? $104 : 4095;
    var $108 = $_38_1_1;
    label = 28;
    break;
   case 28:
    var $108;
    var $109 = 5428500 + ($108 << 1) | 0;
    var $110 = HEAP16[$109 >> 1];
    var $111 = $91 + ($95 << 3) + 2 | 0;
    HEAP16[$111 >> 1] = $110;
    var $112 = $28 + $87 | 0;
    var $phitmp_2_1 = ($112 | 0) < 0;
    if ($phitmp_2_1) {
      var $116 = 0;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $114 = ($112 | 0) < 4095;
    var $_38_2_1 = $114 ? $112 : 4095;
    var $116 = $_38_2_1;
    label = 30;
    break;
   case 30:
    var $116;
    var $117 = 5428500 + ($116 << 1) | 0;
    var $118 = HEAP16[$117 >> 1];
    var $119 = $91 + ($95 << 3) + 4 | 0;
    HEAP16[$119 >> 1] = $118;
    var $120 = $j_042 + 1 | 0;
    var $exitcond = ($120 | 0) == 2;
    if ($exitcond) {
      label = 14;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $scevgep = $bp_143 + 4 | 0;
    var $j_042 = $120;
    var $bp_143 = $scevgep;
    label = 9;
    break;
  }
}
_kodak_ycbcr_load_raw["X"] = 1;
function _kodak_rgb_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1536 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $1 = HEAP32[5264108 >> 2];
    var $2 = $1 | 0;
    var $3 = HEAP32[5245032 >> 2];
    var $4 = ($3 | 0) == 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $6 = $3;
    _free($6);
    label = 4;
    break;
   case 4:
    HEAP32[5245032 >> 2] = 0;
    var $8 = HEAP16[5398712 >> 1];
    var $9 = $8 << 16 >> 16 == 0;
    if ($9) {
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $10 = $buf | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_021 = 0;
    var $ip_022 = $2;
    var $12 = $_pre;
    var $11 = $8;
    label = 6;
    break;
   case 6:
    var $11;
    var $12;
    var $ip_022;
    var $row_021;
    var $13 = $12 << 16 >> 16 == 0;
    if ($13) {
      var $ip_1_lcssa = $ip_022;
      var $49 = 0;
      var $48 = $11;
      label = 16;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $14 = $12 & 65535;
    var $col_017 = 0;
    var $ip_118 = $ip_022;
    var $16 = $14;
    var $indvars_iv = -1;
    label = 8;
    break;
   case 8:
    var $indvars_iv;
    var $16;
    var $ip_118;
    var $col_017;
    var $17 = $16 - $col_017 | 0;
    var $18 = ($17 | 0) > 256;
    var $_ = $18 ? 256 : $17;
    var $19 = $_ * 3 & -1;
    var $20 = _kodak_65000_decode($10, $19);
    var $21 = ($_ | 0) > 0;
    if ($21) {
      label = 9;
      break;
    } else {
      var $ip_2_lcssa = $ip_118;
      label = 14;
      break;
    }
   case 9:
    var $22 = $indvars_iv - $16 | 0;
    var $23 = ($22 | 0) > -257;
    var $smax = $23 ? $22 : -257;
    var $24 = $smax * -4 & -1;
    var $25 = $smax ^ -1;
    var $bp_013 = $10;
    var $i_014 = 0;
    var $ip_215 = $ip_118;
    var $rgb_sroa_0_0 = 0;
    var $rgb_sroa_1_0 = 0;
    var $rgb_sroa_2_0 = 0;
    label = 10;
    break;
   case 10:
    var $rgb_sroa_2_0;
    var $rgb_sroa_1_0;
    var $rgb_sroa_0_0;
    var $ip_215;
    var $i_014;
    var $bp_013;
    var $26 = $bp_013 + 2 | 0;
    var $27 = HEAP16[$bp_013 >> 1];
    var $28 = $27 << 16 >> 16;
    var $29 = $rgb_sroa_0_0 + $28 | 0;
    var $30 = $29 & 65535;
    HEAP16[$ip_215 >> 1] = $30;
    var $31 = $29 & 61440;
    var $32 = ($31 | 0) == 0;
    if ($32) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _derror();
    label = 12;
    break;
   case 12:
    var $35 = $bp_013 + 4 | 0;
    var $36 = HEAP16[$26 >> 1];
    var $37 = $36 << 16 >> 16;
    var $38 = $rgb_sroa_1_0 + $37 | 0;
    var $39 = $38 & 65535;
    var $40 = $ip_215 + 2 | 0;
    HEAP16[$40 >> 1] = $39;
    var $41 = $38 & 61440;
    var $42 = ($41 | 0) == 0;
    if ($42) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    var $scevgep24_sum = $24 - 4 | 0;
    var $scevgep25 = $ip_118 + ($scevgep24_sum << 1) | 0;
    var $ip_2_lcssa = $scevgep25;
    label = 14;
    break;
   case 14:
    var $ip_2_lcssa;
    var $44 = $col_017 + 256 | 0;
    var $45 = HEAP16[5242964 >> 1];
    var $46 = $45 & 65535;
    var $47 = ($44 | 0) < ($46 | 0);
    var $indvars_iv_next = $indvars_iv + 256 | 0;
    if ($47) {
      var $col_017 = $44;
      var $ip_118 = $ip_2_lcssa;
      var $16 = $46;
      var $indvars_iv = $indvars_iv_next;
      label = 8;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $ip_1_lcssa = $ip_2_lcssa;
    var $49 = $45;
    var $48 = $_pre1;
    label = 16;
    break;
   case 16:
    var $48;
    var $49;
    var $ip_1_lcssa;
    var $50 = $row_021 + 1 | 0;
    var $51 = $48 & 65535;
    var $52 = ($50 | 0) < ($51 | 0);
    if ($52) {
      var $row_021 = $50;
      var $ip_022 = $ip_1_lcssa;
      var $12 = $49;
      var $11 = $48;
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    STACKTOP = __stackBase__;
    return;
   case 18:
    _derror();
    label = 19;
    break;
   case 19:
    var $55 = HEAP16[$35 >> 1];
    var $56 = $55 << 16 >> 16;
    var $57 = $rgb_sroa_2_0 + $56 | 0;
    var $58 = $57 & 65535;
    var $59 = $ip_215 + 4 | 0;
    HEAP16[$59 >> 1] = $58;
    var $60 = $57 & 61440;
    var $61 = ($60 | 0) == 0;
    if ($61) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _derror();
    label = 21;
    break;
   case 21:
    var $scevgep = $bp_013 + 6 | 0;
    var $64 = $i_014 + 1 | 0;
    var $65 = $ip_215 + 8 | 0;
    var $exitcond = ($64 | 0) == ($25 | 0);
    if ($exitcond) {
      label = 13;
      break;
    } else {
      var $bp_013 = $scevgep;
      var $i_014 = $64;
      var $ip_215 = $65;
      var $rgb_sroa_0_0 = $29;
      var $rgb_sroa_1_0 = $38;
      var $rgb_sroa_2_0 = $57;
      label = 10;
      break;
    }
  }
}
_kodak_rgb_load_raw["X"] = 1;
function _kodak_thumb_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5244048 >> 2];
    var $2 = $1 >>> 5;
    HEAP32[5560840 >> 2] = $2;
    var $3 = HEAP16[5398712 >> 1];
    var $4 = $3 << 16 >> 16 == 0;
    if ($4) {
      var $24 = $1;
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre1 = HEAP16[5242964 >> 1];
    var $row_05 = 0;
    var $6 = $_pre1;
    var $5 = $3;
    label = 4;
    break;
   case 4:
    var $5;
    var $6;
    var $row_05;
    var $7 = $6 << 16 >> 16 == 0;
    if ($7) {
      var $20 = 0;
      var $19 = $5;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $8 = $6 & 65535;
    var $col_04 = 0;
    var $9 = $8;
    label = 6;
    break;
   case 6:
    var $9;
    var $col_04;
    var $10 = $9 * $row_05 & -1;
    var $11 = $10 + $col_04 | 0;
    var $12 = HEAP32[5264108 >> 2];
    var $13 = $12 + ($11 << 3) | 0;
    var $14 = HEAP32[5560840 >> 2];
    _read_shorts($13, $14);
    var $15 = $col_04 + 1 | 0;
    var $16 = HEAP16[5242964 >> 1];
    var $17 = $16 & 65535;
    var $18 = ($15 | 0) < ($17 | 0);
    if ($18) {
      var $col_04 = $15;
      var $9 = $17;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre2 = HEAP16[5398712 >> 1];
    var $20 = $16;
    var $19 = $_pre2;
    label = 8;
    break;
   case 8:
    var $19;
    var $20;
    var $21 = $row_05 + 1 | 0;
    var $22 = $19 & 65535;
    var $23 = ($21 | 0) < ($22 | 0);
    if ($23) {
      var $row_05 = $21;
      var $6 = $20;
      var $5 = $19;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP32[5244048 >> 2];
    var $24 = $_pre;
    label = 10;
    break;
   case 10:
    var $24;
    var $25 = $24 & 31;
    var $26 = 1 << $25;
    var $27 = $26 - 1 | 0;
    HEAP32[5263496 >> 2] = $27;
    return;
  }
}
function _sony_decrypt($data, $len, $start, $key) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($start | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $2 = ($len | 0) == 0;
    if ($2) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP32[5244640 >> 2];
    var $_058 = $len;
    var $_049 = $data;
    var $38 = $_pre;
    label = 10;
    break;
   case 5:
    var $4 = $key * 48828125 & -1;
    var $5 = $4 + 1 | 0;
    HEAP32[5244128 >> 2] = $5;
    var $6 = $5 * 48828125 & -1;
    var $7 = $6 + 1 | 0;
    HEAP32[5244132 >> 2] = $7;
    var $8 = $7 * 48828125 & -1;
    var $9 = $8 + 1 | 0;
    HEAP32[5244136 >> 2] = $9;
    var $10 = $9 * 97656250 & -1;
    var $11 = $10 + 2 | 0;
    var $12 = $9 ^ $5;
    var $13 = $12 >>> 31;
    var $14 = $13 | $11;
    HEAP32[5244140 >> 2] = $14;
    HEAP32[5244640 >> 2] = 4;
    var $20 = 4;
    var $19 = $5;
    var $18 = $9;
    var $17 = $14;
    var $16 = $7;
    label = 7;
    break;
   case 6:
    HEAP32[5244640 >> 2] = 0;
    var $storemerge711 = 0;
    label = 9;
    break;
   case 7:
    var $16;
    var $17;
    var $18;
    var $19;
    var $20;
    var $21 = $18 ^ $19;
    var $22 = $21 << 1;
    var $23 = $17 ^ $16;
    var $24 = $23 >>> 31;
    var $25 = $24 | $22;
    var $26 = 5244128 + ($20 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    var $27 = $20 + 1 | 0;
    var $exitcond = ($27 | 0) == 127;
    if ($exitcond) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $28 = $20 - 2 | 0;
    var $29 = 5244128 + ($28 << 2) | 0;
    var $_pre2 = HEAP32[$29 >> 2];
    var $20 = $27;
    var $19 = $16;
    var $18 = $17;
    var $17 = $25;
    var $16 = $_pre2;
    label = 7;
    break;
   case 9:
    var $storemerge711;
    var $31 = 5244128 + ($storemerge711 << 2) | 0;
    var $32 = HEAP32[$31 >> 2];
    var $33 = _htonl($32);
    var $34 = HEAP32[5244640 >> 2];
    var $35 = 5244128 + ($34 << 2) | 0;
    HEAP32[$35 >> 2] = $33;
    var $36 = $34 + 1 | 0;
    HEAP32[5244640 >> 2] = $36;
    var $37 = $36 >>> 0 < 127;
    if ($37) {
      var $storemerge711 = $36;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 10:
    var $38;
    var $_049;
    var $_058;
    var $39 = $_058 - 1 | 0;
    var $40 = $38 + 1 | 0;
    var $41 = $40 & 127;
    var $42 = 5244128 + ($41 << 2) | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $38 + 65 | 0;
    var $45 = $44 & 127;
    var $46 = 5244128 + ($45 << 2) | 0;
    var $47 = HEAP32[$46 >> 2];
    var $48 = $47 ^ $43;
    HEAP32[5244640 >> 2] = $40;
    var $49 = $38 & 127;
    var $50 = 5244128 + ($49 << 2) | 0;
    HEAP32[$50 >> 2] = $48;
    var $51 = $_049 + 4 | 0;
    var $52 = HEAP32[$_049 >> 2];
    var $53 = $52 ^ $48;
    HEAP32[$_049 >> 2] = $53;
    var $54 = ($39 | 0) == 0;
    if ($54) {
      label = 11;
      break;
    } else {
      var $_058 = $39;
      var $_049 = $51;
      var $38 = $40;
      label = 10;
      break;
    }
   case 11:
    return;
  }
}
_sony_decrypt["X"] = 1;
function _sony_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head13 = __stackBase__;
    var $head13_sub = $head13 | 0;
    var $tmpcast = $head13;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 200896, 0);
    var $3 = HEAP32[5264116 >> 2];
    var $4 = _fgetc($3);
    var $5 = $4 << 2;
    var $6 = $5 - 1 | 0;
    var $7 = _fseek($3, $6, 1);
    HEAP16[5262944 >> 1] = 19789;
    var $8 = _get4();
    var $9 = HEAP32[5264116 >> 2];
    var $10 = _fseek($9, 164600, 0);
    var $11 = $head13;
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _fread($11, 1, 40, $12);
    _sony_decrypt($head13_sub, 10, 1, $8);
    var $14 = $8 << 8;
    var $15 = $tmpcast + 25 | 0;
    var $16 = HEAP8[$15];
    var $17 = $16 & 255;
    var $18 = $17 | $14;
    var $19 = $18 << 8;
    var $20 = $head13 + 24 | 0;
    var $21 = $20;
    var $22 = HEAP8[$21];
    var $23 = $22 & 255;
    var $24 = $23 | $19;
    var $25 = $24 << 8;
    var $26 = $tmpcast + 23 | 0;
    var $27 = HEAP8[$26];
    var $28 = $27 & 255;
    var $29 = $28 | $25;
    var $30 = $29 << 8;
    var $31 = $tmpcast + 22 | 0;
    var $32 = HEAP8[$31];
    var $33 = $32 & 255;
    var $34 = $33 | $30;
    var $35 = HEAP32[5264116 >> 2];
    var $36 = HEAP32[5428492 >> 2];
    var $37 = _fseek($35, $36, 0);
    var $38 = HEAP16[5245036 >> 1];
    var $39 = $38 << 16 >> 16 == 0;
    if ($39) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_015 = 0;
    var $40 = $_pre;
    label = 4;
    break;
   case 4:
    var $40;
    var $row_015;
    var $41 = HEAP32[5245032 >> 2];
    var $42 = $40 & 65535;
    var $43 = $42 * $row_015 & -1;
    var $44 = $41 + ($43 << 1) | 0;
    var $45 = $44;
    var $46 = HEAP32[5264116 >> 2];
    var $47 = _fread($45, 2, $42, $46);
    var $48 = HEAP16[5245028 >> 1];
    var $49 = $48 & 65535;
    var $50 = $47 >>> 0 < $49 >>> 0;
    if ($50) {
      label = 5;
      break;
    } else {
      var $53 = $48;
      label = 6;
      break;
    }
   case 5:
    _derror();
    var $_pre1 = HEAP16[5245028 >> 1];
    var $53 = $_pre1;
    label = 6;
    break;
   case 6:
    var $53;
    var $54 = $44;
    var $55 = $53 & 65535;
    var $56 = $55 >>> 1;
    var $57 = ($row_015 | 0) == 0;
    var $58 = $57 & 1;
    _sony_decrypt($54, $56, $58, $34);
    var $59 = HEAP16[5245028 >> 1];
    var $60 = $59 << 16 >> 16 == 0;
    if ($60) {
      var $74 = 0;
      label = 10;
      break;
    } else {
      var $col_014 = 0;
      label = 7;
      break;
    }
   case 7:
    var $col_014;
    var $_sum = $col_014 + $43 | 0;
    var $61 = $41 + ($_sum << 1) | 0;
    var $62 = HEAP16[$61 >> 1];
    var $63 = $62 & 65535;
    var $64 = _htons($63);
    var $65 = $64 & 65535;
    HEAP16[$61 >> 1] = $65;
    var $66 = $64 & 49152;
    var $67 = ($66 | 0) == 0;
    if ($67) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _derror();
    label = 9;
    break;
   case 9:
    var $70 = $col_014 + 1 | 0;
    var $71 = HEAP16[5245028 >> 1];
    var $72 = $71 & 65535;
    var $73 = $70 >>> 0 < $72 >>> 0;
    if ($73) {
      var $col_014 = $70;
      label = 7;
      break;
    } else {
      var $74 = $71;
      label = 10;
      break;
    }
   case 10:
    var $74;
    var $75 = $row_015 + 1 | 0;
    var $76 = HEAP16[5245036 >> 1];
    var $77 = $76 & 65535;
    var $78 = $75 >>> 0 < $77 >>> 0;
    if ($78) {
      var $row_015 = $75;
      var $40 = $74;
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    HEAP32[5263496 >> 2] = 16368;
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_load_raw["X"] = 1;
function _sony_arw_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65536 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $n_022 = 0;
    var $i_023 = 0;
    label = 3;
    break;
   case 3:
    var $i_023;
    var $n_022;
    var $1 = 5244644 + ($i_023 << 1) | 0;
    var $2 = HEAP16[$1 >> 1];
    var $3 = $2 & 65535;
    var $4 = $3 >>> 8;
    var $5 = 32768 >>> ($4 >>> 0);
    var $6 = ($5 | 0) > 0;
    if ($6) {
      label = 4;
      break;
    } else {
      var $n_1_lcssa = $n_022;
      label = 7;
      break;
    }
   case 4:
    var $7 = ($5 | 0) > 1;
    var $smax = $7 ? $5 : 1;
    var $c_019 = 0;
    var $n_120 = $n_022;
    label = 5;
    break;
   case 5:
    var $n_120;
    var $c_019;
    var $9 = $n_120 + 1 | 0;
    var $10 = $huff + ($n_120 << 1) | 0;
    HEAP16[$10 >> 1] = $2;
    var $11 = $c_019 + 1 | 0;
    var $12 = ($11 | 0) < ($5 | 0);
    if ($12) {
      var $c_019 = $11;
      var $n_120 = $9;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $13 = $n_022 + $smax | 0;
    var $n_1_lcssa = $13;
    label = 7;
    break;
   case 7:
    var $n_1_lcssa;
    var $15 = $i_023 + 1 | 0;
    var $exitcond = ($15 | 0) == 18;
    if ($exitcond) {
      label = 8;
      break;
    } else {
      var $n_022 = $n_1_lcssa;
      var $i_023 = $15;
      label = 3;
      break;
    }
   case 8:
    var $17 = _getbithuff(-1, 0);
    var $18 = HEAP16[5245028 >> 1];
    var $19 = $18 << 16 >> 16 == 0;
    if ($19) {
      label = 19;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $20 = $18 & 65535;
    var $21 = $huff | 0;
    var $_pre = HEAP16[5245036 >> 1];
    var $sum_017 = 0;
    var $_in = $20;
    var $23 = $_pre;
    label = 11;
    break;
   case 10:
    var $22 = ($24 | 0) == 0;
    if ($22) {
      label = 19;
      break;
    } else {
      var $sum_017 = $38;
      var $_in = $24;
      var $23 = $55;
      label = 11;
      break;
    }
   case 11:
    var $23;
    var $_in;
    var $sum_017;
    var $24 = $_in - 1 | 0;
    var $25 = $23 & 65535;
    var $row_015 = 0;
    var $sum_116 = $sum_017;
    var $27 = $25;
    label = 12;
    break;
   case 12:
    var $27;
    var $sum_116;
    var $row_015;
    var $28 = ($row_015 | 0) == ($27 | 0);
    var $_row_0 = $28 ? 1 : $row_015;
    var $29 = _getbithuff(15, $21);
    var $30 = _getbithuff($29, 0);
    var $31 = $29 - 1 | 0;
    var $32 = 1 << $31;
    var $33 = $32 & $30;
    var $34 = ($33 | 0) == 0;
    if ($34) {
      label = 13;
      break;
    } else {
      var $diff_0 = $30;
      label = 14;
      break;
    }
   case 13:
    var $_neg = -1 << $29;
    var $_neg14 = $_neg + 1 | 0;
    var $36 = $_neg14 + $30 | 0;
    var $diff_0 = $36;
    label = 14;
    break;
   case 14:
    var $diff_0;
    var $38 = $diff_0 + $sum_116 | 0;
    var $39 = $38 >>> 0 > 4095;
    if ($39) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _derror();
    label = 16;
    break;
   case 16:
    var $42 = HEAP16[5398712 >> 1];
    var $43 = $42 & 65535;
    var $44 = ($_row_0 | 0) < ($43 | 0);
    if ($44) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $46 = $38 & 65535;
    var $47 = HEAP16[5245028 >> 1];
    var $48 = $47 & 65535;
    var $49 = $48 * $_row_0 & -1;
    var $50 = $49 + $24 | 0;
    var $51 = HEAP32[5245032 >> 2];
    var $52 = $51 + ($50 << 1) | 0;
    HEAP16[$52 >> 1] = $46;
    label = 18;
    break;
   case 18:
    var $54 = $_row_0 + 2 | 0;
    var $55 = HEAP16[5245036 >> 1];
    var $56 = $55 & 65535;
    var $57 = $56 + 1 | 0;
    var $58 = ($54 | 0) < ($57 | 0);
    if ($58) {
      var $row_015 = $54;
      var $sum_116 = $38;
      var $27 = $56;
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_arw_load_raw["X"] = 1;
function _sony_arw2_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pix = __stackBase__;
    var $1 = HEAP16[5245028 >> 1];
    var $2 = $1 & 65535;
    var $3 = _malloc($2);
    _merror($3, 5585492);
    var $4 = HEAP16[5398712 >> 1];
    var $5 = $4 << 16 >> 16 == 0;
    if ($5) {
      label = 20;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_038 = 0;
    var $6 = $_pre;
    label = 4;
    break;
   case 4:
    var $6;
    var $row_038;
    var $7 = $6 & 65535;
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fread($3, 1, $7, $8);
    var $10 = HEAP16[5245028 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 - 30 | 0;
    var $13 = ($12 | 0) > 0;
    if ($13) {
      var $col_036 = 0;
      var $dp_037 = $3;
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    var $dp_037;
    var $col_036;
    var $14 = _sget4($dp_037);
    var $15 = $14 & 2047;
    var $16 = $14 >>> 11;
    var $17 = $16 & 2047;
    var $18 = $14 >>> 22;
    var $19 = $18 & 15;
    var $20 = $14 >>> 26;
    var $21 = $20 & 15;
    var $22 = $15 - $17 | 0;
    var $sh_0 = 0;
    label = 6;
    break;
   case 6:
    var $sh_0;
    var $24 = ($sh_0 | 0) < 4;
    if ($24) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $26 = 128 << $sh_0;
    var $27 = ($26 | 0) > ($22 | 0);
    var $28 = $sh_0 + 1 | 0;
    if ($27) {
      label = 8;
      break;
    } else {
      var $sh_0 = $28;
      label = 6;
      break;
    }
   case 8:
    var $29 = $15 & 65535;
    var $30 = $17 & 65535;
    var $bit_032 = 30;
    var $i_033 = 0;
    label = 9;
    break;
   case 9:
    var $i_033;
    var $bit_032;
    var $32 = ($i_033 | 0) == ($19 | 0);
    if ($32) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $34 = $pix + ($19 << 1) | 0;
    HEAP16[$34 >> 1] = $29;
    var $bit_1 = $bit_032;
    label = 14;
    break;
   case 11:
    var $36 = ($i_033 | 0) == ($21 | 0);
    if ($36) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $38 = $pix + ($21 << 1) | 0;
    HEAP16[$38 >> 1] = $30;
    var $bit_1 = $bit_032;
    label = 14;
    break;
   case 13:
    var $40 = $bit_032 >> 3;
    var $41 = $dp_037 + $40 | 0;
    var $42 = _sget2($41);
    var $43 = $42 & 65535;
    var $44 = $bit_032 & 7;
    var $45 = $43 >>> ($44 >>> 0);
    var $46 = $45 & 127;
    var $47 = $46 << $sh_0;
    var $48 = $47 + $17 | 0;
    var $49 = $48 & 65535;
    var $50 = $pix + ($i_033 << 1) | 0;
    var $51 = $48 & 63488;
    var $52 = $51 >>> 0 > 2047;
    var $_ = $52 ? 2047 : $49;
    HEAP16[$50 >> 1] = $_;
    var $53 = $bit_032 + 7 | 0;
    var $bit_1 = $53;
    label = 14;
    break;
   case 14:
    var $bit_1;
    var $54 = $i_033 + 1 | 0;
    var $exitcond = ($54 | 0) == 16;
    if ($exitcond) {
      label = 15;
      break;
    } else {
      var $bit_032 = $bit_1;
      var $i_033 = $54;
      label = 9;
      break;
    }
   case 15:
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_134 = $col_036;
    var $i_135 = 0;
    label = 16;
    break;
   case 16:
    var $i_135;
    var $col_134;
    var $55 = $pix + ($i_135 << 1) | 0;
    var $56 = HEAP16[$55 >> 1];
    var $57 = $56 & 65535;
    var $58 = $57 << 1;
    var $59 = 5428500 + ($58 << 1) | 0;
    var $60 = HEAP16[$59 >> 1];
    var $61 = ($60 & 65535) >>> 2;
    var $62 = $11 * $row_038 & -1;
    var $63 = $62 + $col_134 | 0;
    var $64 = $_pre1 + ($63 << 1) | 0;
    HEAP16[$64 >> 1] = $61;
    var $65 = $i_135 + 1 | 0;
    var $exitcond43 = ($65 | 0) == 16;
    if ($exitcond43) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $66 = $col_134 + 2 | 0;
    var $col_134 = $66;
    var $i_135 = $65;
    label = 16;
    break;
   case 18:
    var $68 = $col_036 + 32 | 0;
    var $69 = $68 & 1;
    var $70 = ($69 | 0) != 0;
    var $71 = $70 ? 1 : 31;
    var $72 = $68 - $71 | 0;
    var $73 = $dp_037 + 16 | 0;
    var $74 = ($72 | 0) < ($12 | 0);
    if ($74) {
      var $col_036 = $72;
      var $dp_037 = $73;
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $75 = $row_038 + 1 | 0;
    var $76 = HEAP16[5398712 >> 1];
    var $77 = $76 & 65535;
    var $78 = ($75 | 0) < ($77 | 0);
    if ($78) {
      var $row_038 = $75;
      var $6 = $10;
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _free($3);
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_arw2_load_raw["X"] = 1;
function _redcine_load_raw() {
  return;
}
function _median4($p) {
  var $1 = HEAP32[$p >> 2];
  var $3 = HEAP32[$p + 4 >> 2];
  var $_min_0 = ($1 | 0) > ($3 | 0) ? $3 : $1;
  var $max_1 = ($1 | 0) < ($3 | 0) ? $3 : $1;
  var $8 = HEAP32[$p + 8 >> 2];
  var $_min_0_1 = ($_min_0 | 0) > ($8 | 0) ? $8 : $_min_0;
  var $max_1_1 = ($max_1 | 0) < ($8 | 0) ? $8 : $max_1;
  var $13 = HEAP32[$p + 12 >> 2];
  return $13 + ($8 + ($3 + $1)) - ((($max_1_1 | 0) < ($13 | 0) ? $13 : $max_1_1) + (($_min_0_1 | 0) > ($13 | 0) ? $13 : $_min_0_1)) >> 1;
}
function _smal_decode_segment($seg, $holes) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $hist = __stackBase__;
    var $sym = __stackBase__ + 40;
    var $pred = __stackBase__ + 52;
    var $tmpcast = $pred;
    var $1 = $hist | 0;
    _memcpy($1, 5244680, 39);
    HEAP16[$pred >> 1] = 0;
    var $2 = HEAP32[5264116 >> 2];
    var $3 = $seg + 4 | 0;
    var $4 = HEAP32[$3 >> 2];
    var $5 = $4 + 1 | 0;
    var $6 = _fseek($2, $5, 0);
    var $7 = _getbithuff(-1, 0);
    var $8 = $seg | 0;
    var $9 = HEAP32[$8 >> 2];
    var $10 = $seg + 8 | 0;
    var $11 = HEAP32[$10 >> 2];
    var $12 = $9 >>> 0 < $11 >>> 0;
    if ($12) {
      label = 3;
      break;
    } else {
      label = 33;
      break;
    }
   case 3:
    var $13 = $sym + 8 | 0;
    var $14 = $sym + 4 | 0;
    var $15 = $sym | 0;
    var $16 = $seg + 12 | 0;
    var $carry_0103 = 0;
    var $nbits_0104 = 8;
    var $pix_0105 = $9;
    var $high_0106 = 255;
    var $data_0107 = 0;
    var $range_0108 = 0;
    label = 4;
    break;
   case 4:
    var $range_0108;
    var $data_0107;
    var $high_0106;
    var $pix_0105;
    var $nbits_0104;
    var $carry_0103;
    var $carry_194 = $carry_0103;
    var $nbits_195 = $nbits_0104;
    var $s_096 = 0;
    var $high_1100 = $high_0106;
    var $data_1101 = $data_0107;
    var $range_1102 = $range_0108;
    label = 5;
    break;
   case 5:
    var $range_1102;
    var $data_1101;
    var $high_1100;
    var $s_096;
    var $nbits_195;
    var $carry_194;
    var $18 = $data_1101 & 65535;
    var $19 = $18 << $nbits_195;
    var $20 = _getbithuff($nbits_195, 0);
    var $21 = $20 | $19;
    var $22 = ($carry_194 | 0) < 0;
    if ($22) {
      label = 6;
      break;
    } else {
      var $nbits_2_ph = $nbits_195;
      var $carry_2_ph = $carry_194;
      label = 7;
      break;
    }
   case 6:
    var $24 = $carry_194 + 1 | 0;
    var $25 = $24 + $nbits_195 | 0;
    var $26 = ($25 | 0) < 1;
    var $27 = $nbits_195 + $carry_194 | 0;
    var $_ = $26 ? $27 : 0;
    var $nbits_2_ph = $25;
    var $carry_2_ph = $_;
    label = 7;
    break;
   case 7:
    var $carry_2_ph;
    var $nbits_2_ph;
    var $28 = $21 & 65535;
    var $nbits_2 = $nbits_2_ph;
    label = 8;
    break;
   case 8:
    var $nbits_2;
    var $30 = $nbits_2 - 1 | 0;
    var $31 = ($nbits_2 | 0) > 0;
    if ($31) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $33 = $28 >>> ($30 >>> 0);
    var $34 = $33 & 255;
    var $35 = ($34 | 0) == 255;
    if ($35) {
      label = 10;
      break;
    } else {
      var $nbits_2 = $30;
      label = 8;
      break;
    }
   case 10:
    var $37 = ($30 | 0) > 0;
    if ($37) {
      label = 11;
      break;
    } else {
      var $data_2_in = $21;
      label = 12;
      break;
    }
   case 11:
    var $39 = $nbits_2 - 2 | 0;
    var $40 = 1 << $39;
    var $41 = $40 + 65535 | 0;
    var $42 = $41 & $28;
    var $43 = $42 << 1;
    var $44 = $40 & $28;
    var $45 = $44 << 1;
    var $46 = $45 + $21 | 0;
    var $47 = -1 << $30;
    var $48 = $46 & $47;
    var $49 = $48 | $43;
    var $data_2_in = $49;
    label = 12;
    break;
   case 12:
    var $data_2_in;
    if ($31) {
      label = 13;
      break;
    } else {
      var $data_3_in = $data_2_in;
      var $carry_3 = $carry_2_ph;
      label = 14;
      break;
    }
   case 13:
    var $52 = _getbithuff(1, 0);
    var $53 = $52 + $data_2_in | 0;
    var $54 = $nbits_2 - 9 | 0;
    var $data_3_in = $53;
    var $carry_3 = $54;
    label = 14;
    break;
   case 14:
    var $carry_3;
    var $data_3_in;
    var $56 = $data_3_in & 65535;
    var $57 = $range_1102 & 65535;
    var $58 = $56 - $57 | 0;
    var $59 = $58 << 2;
    var $60 = $59 + 4 | 0;
    var $61 = $60 & 262140;
    var $62 = $61 - 1 | 0;
    var $63 = $high_1100 >> 4;
    var $64 = ($62 | 0) / ($63 | 0) & -1;
    var $bin_0 = 0;
    label = 15;
    break;
   case 15:
    var $bin_0;
    var $66 = $bin_0 + 5 | 0;
    var $67 = $hist + $s_096 * 13 + $66 | 0;
    var $68 = HEAP8[$67];
    var $69 = $68 & 255;
    var $70 = ($69 | 0) > ($64 | 0);
    var $71 = $bin_0 + 1 | 0;
    if ($70) {
      var $bin_0 = $71;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $73 = $69 * $63 & -1;
    var $74 = $73 >> 2;
    var $75 = ($bin_0 | 0) == 0;
    if ($75) {
      var $high_2 = $high_1100;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $77 = $bin_0 + 4 | 0;
    var $78 = $hist + $s_096 * 13 + $77 | 0;
    var $79 = HEAP8[$78];
    var $80 = $79 & 255;
    var $81 = $80 * $63 & -1;
    var $82 = $81 >> 2;
    var $high_2 = $82;
    label = 18;
    break;
   case 18:
    var $high_2;
    var $84 = $high_2 - $74 | 0;
    var $nbits_3 = 0;
    label = 19;
    break;
   case 19:
    var $nbits_3;
    var $86 = $84 << $nbits_3;
    var $87 = ($86 | 0) < 128;
    var $88 = $nbits_3 + 1 | 0;
    if ($87) {
      var $nbits_3 = $88;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $90 = $74 + $57 | 0;
    var $91 = $90 << $nbits_3;
    var $92 = $hist + $s_096 * 13 + 1 | 0;
    var $93 = HEAP8[$92];
    var $94 = $93 & 255;
    var $95 = $hist + $s_096 * 13 + 2 | 0;
    var $96 = HEAP8[$95];
    var $97 = $96 + 1 & 255;
    HEAP8[$95] = $97;
    var $98 = $hist + $s_096 * 13 + 3 | 0;
    var $99 = HEAP8[$98];
    var $100 = ($97 & 255) > ($99 & 255);
    if ($100) {
      label = 21;
      break;
    } else {
      var $next_0 = $94;
      label = 22;
      break;
    }
   case 21:
    var $102 = $94 + 1 | 0;
    var $103 = $hist + $s_096 * 13 | 0;
    var $104 = HEAP8[$103];
    var $105 = $104 & 255;
    var $106 = $105 & $102;
    var $107 = $106 + 4 | 0;
    var $108 = $hist + $s_096 * 13 + $107 | 0;
    var $109 = HEAP8[$108];
    var $110 = $109 & 255;
    var $111 = $106 + 5 | 0;
    var $112 = $hist + $s_096 * 13 + $111 | 0;
    var $113 = HEAP8[$112];
    var $114 = $113 & 255;
    var $115 = $110 - $114 | 0;
    var $116 = $115 >>> 2;
    var $117 = $116 & 255;
    HEAP8[$98] = $117;
    HEAP8[$95] = 1;
    var $next_0 = $106;
    label = 22;
    break;
   case 22:
    var $next_0;
    var $119 = $94 + 4 | 0;
    var $120 = $hist + $s_096 * 13 + $119 | 0;
    var $121 = HEAP8[$120];
    var $122 = $121 & 255;
    var $123 = $94 + 5 | 0;
    var $124 = $hist + $s_096 * 13 + $123 | 0;
    var $125 = HEAP8[$124];
    var $126 = $125 & 255;
    var $127 = $122 - $126 | 0;
    var $128 = ($127 | 0) > 1;
    if ($128) {
      label = 23;
      break;
    } else {
      label = 27;
      break;
    }
   case 23:
    var $130 = ($bin_0 | 0) < ($94 | 0);
    if ($130) {
      var $i_091 = $bin_0;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $i_091;
    var $131 = $i_091 + 5 | 0;
    var $132 = $hist + $s_096 * 13 + $131 | 0;
    var $133 = HEAP8[$132];
    var $134 = $133 - 1 & 255;
    HEAP8[$132] = $134;
    var $135 = $i_091 + 1 | 0;
    var $136 = HEAP8[$92];
    var $137 = $136 & 255;
    var $138 = ($135 | 0) < ($137 | 0);
    if ($138) {
      var $i_091 = $135;
      label = 24;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    var $140 = ($next_0 | 0) <= ($bin_0 | 0);
    var $141 = ($94 | 0) < ($bin_0 | 0);
    var $or_cond = $140 & $141;
    if ($or_cond) {
      var $i_188 = $94;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $i_188;
    var $142 = $i_188 + 5 | 0;
    var $143 = $hist + $s_096 * 13 + $142 | 0;
    var $144 = HEAP8[$143];
    var $145 = $144 + 1 & 255;
    HEAP8[$143] = $145;
    var $146 = $i_188 + 1 | 0;
    var $exitcond = ($146 | 0) == ($bin_0 | 0);
    if ($exitcond) {
      label = 27;
      break;
    } else {
      var $i_188 = $146;
      label = 26;
      break;
    }
   case 27:
    var $147 = $next_0 & 255;
    HEAP8[$92] = $147;
    var $148 = $sym + ($s_096 << 2) | 0;
    HEAP32[$148 >> 2] = $bin_0;
    var $149 = $s_096 + 1 | 0;
    var $exitcond113 = ($149 | 0) == 3;
    if ($exitcond113) {
      label = 28;
      break;
    } else {
      var $carry_194 = $carry_3;
      var $nbits_195 = $nbits_3;
      var $s_096 = $149;
      var $high_1100 = $86;
      var $data_1101 = $data_3_in;
      var $range_1102 = $91;
      label = 5;
      break;
    }
   case 28:
    var $151 = HEAP32[$13 >> 2];
    var $152 = $151 << 5;
    var $153 = HEAP32[$14 >> 2];
    var $154 = $153 << 2;
    var $155 = $154 | $152;
    var $156 = HEAP32[$15 >> 2];
    var $157 = $156 & 3;
    var $158 = $155 | $157;
    var $159 = $156 & 4;
    var $160 = ($159 | 0) == 0;
    if ($160) {
      var $diff_0 = $158;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $162 = $158 & 255;
    var $163 = ($162 | 0) == 0;
    var $164 = -$162 | 0;
    var $_82 = $163 ? 128 : $164;
    var $diff_0 = $_82;
    label = 30;
    break;
   case 30:
    var $diff_0;
    var $166 = HEAP32[5264116 >> 2];
    var $167 = _ftell($166);
    var $168 = $167 + 12 | 0;
    var $169 = HEAP32[$16 >> 2];
    var $170 = $168 >>> 0 < $169 >>> 0;
    var $diff_0_ = $170 ? $diff_0 : 0;
    var $171 = $pix_0105 & 1;
    var $172 = $tmpcast + $171 | 0;
    var $173 = HEAP8[$172];
    var $174 = $173 & 255;
    var $175 = $174 + $diff_0_ | 0;
    var $176 = $175 & 255;
    HEAP8[$172] = $176;
    var $177 = $175 & 65535;
    var $178 = $177 & 255;
    var $179 = HEAP32[5245032 >> 2];
    var $180 = $179 + ($pix_0105 << 1) | 0;
    HEAP16[$180 >> 1] = $178;
    var $181 = ($171 | 0) == 0;
    if ($181) {
      label = 31;
      break;
    } else {
      var $pix_1 = $pix_0105;
      label = 32;
      break;
    }
   case 31:
    var $183 = HEAP16[5245028 >> 1];
    var $184 = $183 & 65535;
    var $185 = ($pix_0105 | 0) / ($184 | 0) & -1;
    var $186 = HEAP16[5245036 >> 1];
    var $187 = $186 & 65535;
    var $188 = $185 - $187 | 0;
    var $189 = $188 & 7;
    var $190 = 1 << $189;
    var $191 = $190 & $holes;
    var $192 = ($191 | 0) == 0;
    var $193 = $pix_0105 + 2 | 0;
    var $pix_0_ = $192 ? $pix_0105 : $193;
    var $pix_1 = $pix_0_;
    label = 32;
    break;
   case 32:
    var $pix_1;
    var $195 = $pix_1 + 1 | 0;
    var $196 = HEAP32[$10 >> 2];
    var $197 = $195 >>> 0 < $196 >>> 0;
    if ($197) {
      var $carry_0103 = $carry_3;
      var $nbits_0104 = $nbits_3;
      var $pix_0105 = $195;
      var $high_0106 = $86;
      var $data_0107 = $data_3_in;
      var $range_0108 = $91;
      label = 4;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[5263496 >> 2] = 255;
    STACKTOP = __stackBase__;
    return;
  }
}
_smal_decode_segment["X"] = 1;
function _smal_v6_load_raw() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $seg = __stackBase__;
  _fseek(HEAP32[5264116 >> 2], 16, 0);
  HEAP32[$seg >> 2] = 0;
  var $6 = _get2() & 65535;
  HEAP32[$seg + 4 >> 2] = $6;
  HEAP32[$seg + 8 >> 2] = HEAPU16[5245036 >> 1] * HEAPU16[5245028 >> 1] & -1;
  HEAP32[$seg + 12 >> 2] = 2147483647;
  _smal_decode_segment($seg | 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _fill_holes($holes) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $val = __stackBase__;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 & 65535;
    var $3 = $2 - 2 | 0;
    var $4 = ($3 | 0) > 2;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 16;
      break;
    }
   case 3:
    var $5 = $val | 0;
    var $6 = $val + 4 | 0;
    var $7 = $val + 8 | 0;
    var $8 = $val + 12 | 0;
    var $_pre = HEAP16[5245036 >> 1];
    var $row_041 = 2;
    label = 4;
    break;
   case 4:
    var $row_041;
    var $10 = $_pre & 65535;
    var $11 = $row_041 - $10 | 0;
    var $12 = $11 & 7;
    var $13 = 1 << $12;
    var $14 = $13 & $holes;
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $16 = HEAP16[5242964 >> 1];
    var $17 = $16 & 65535;
    var $18 = $17 - 1 | 0;
    var $19 = ($18 | 0) > 1;
    if ($19) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $20 = $row_041 - 1 | 0;
    var $21 = $row_041 + 1 | 0;
    var $_pre1 = HEAP16[5245028 >> 1];
    var $_pre2 = HEAP32[5245032 >> 2];
    var $col_036 = 1;
    label = 7;
    break;
   case 7:
    var $col_036;
    var $23 = $_pre1 & 65535;
    var $24 = $23 * $20 & -1;
    var $25 = $col_036 - 1 | 0;
    var $26 = $24 + $25 | 0;
    var $27 = $_pre2 + ($26 << 1) | 0;
    var $28 = HEAP16[$27 >> 1];
    var $29 = $28 & 65535;
    HEAP32[$5 >> 2] = $29;
    var $30 = $col_036 + 1 | 0;
    var $31 = $24 + $30 | 0;
    var $32 = $_pre2 + ($31 << 1) | 0;
    var $33 = HEAP16[$32 >> 1];
    var $34 = $33 & 65535;
    HEAP32[$6 >> 2] = $34;
    var $35 = $23 * $21 & -1;
    var $36 = $35 + $25 | 0;
    var $37 = $_pre2 + ($36 << 1) | 0;
    var $38 = HEAP16[$37 >> 1];
    var $39 = $38 & 65535;
    HEAP32[$7 >> 2] = $39;
    var $40 = $35 + $30 | 0;
    var $41 = $_pre2 + ($40 << 1) | 0;
    var $42 = HEAP16[$41 >> 1];
    var $43 = $42 & 65535;
    HEAP32[$8 >> 2] = $43;
    var $44 = _median4($5);
    var $45 = $44 & 65535;
    var $46 = $23 * $row_041 & -1;
    var $47 = $46 + $col_036 | 0;
    var $48 = $_pre2 + ($47 << 1) | 0;
    HEAP16[$48 >> 1] = $45;
    var $49 = $col_036 + 4 | 0;
    var $50 = ($49 | 0) < ($18 | 0);
    if ($50) {
      var $col_036 = $49;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $51 = $17 - 2 | 0;
    var $52 = ($51 | 0) > 2;
    if ($52) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    var $53 = $row_041 - 2 | 0;
    var $54 = $row_041 + 2 | 0;
    var $col_138 = 2;
    label = 10;
    break;
   case 10:
    var $col_138;
    var $56 = $53 - $10 | 0;
    var $57 = $56 & 7;
    var $58 = 1 << $57;
    var $59 = $58 & $holes;
    var $60 = ($59 | 0) == 0;
    if ($60) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $62 = $54 - $10 | 0;
    var $63 = $62 & 7;
    var $64 = 1 << $63;
    var $65 = $64 & $holes;
    var $66 = ($65 | 0) == 0;
    if ($66) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $67 = HEAP16[5245028 >> 1];
    var $68 = $67 & 65535;
    var $69 = $68 * $row_041 & -1;
    var $70 = $col_138 - 2 | 0;
    var $71 = $70 + $69 | 0;
    var $72 = HEAP32[5245032 >> 2];
    var $73 = $72 + ($71 << 1) | 0;
    var $74 = HEAP16[$73 >> 1];
    var $75 = $74 & 65535;
    var $76 = $col_138 + 2 | 0;
    var $77 = $76 + $69 | 0;
    var $78 = $72 + ($77 << 1) | 0;
    var $79 = HEAP16[$78 >> 1];
    var $80 = $79 & 65535;
    var $81 = $80 + $75 | 0;
    var $82 = $81 >>> 1;
    var $83 = $82 & 65535;
    var $84 = $69 + $col_138 | 0;
    var $85 = $72 + ($84 << 1) | 0;
    HEAP16[$85 >> 1] = $83;
    label = 14;
    break;
   case 13:
    var $87 = HEAP16[5245028 >> 1];
    var $88 = $87 & 65535;
    var $89 = $88 * $row_041 & -1;
    var $90 = $col_138 - 2 | 0;
    var $91 = $90 + $89 | 0;
    var $92 = HEAP32[5245032 >> 2];
    var $93 = $92 + ($91 << 1) | 0;
    var $94 = HEAP16[$93 >> 1];
    var $95 = $94 & 65535;
    HEAP32[$5 >> 2] = $95;
    var $96 = $col_138 + 2 | 0;
    var $97 = $96 + $89 | 0;
    var $98 = $92 + ($97 << 1) | 0;
    var $99 = HEAP16[$98 >> 1];
    var $100 = $99 & 65535;
    HEAP32[$6 >> 2] = $100;
    var $101 = $88 * $53 & -1;
    var $102 = $101 + $col_138 | 0;
    var $103 = $92 + ($102 << 1) | 0;
    var $104 = HEAP16[$103 >> 1];
    var $105 = $104 & 65535;
    HEAP32[$7 >> 2] = $105;
    var $106 = $88 * $54 & -1;
    var $107 = $106 + $col_138 | 0;
    var $108 = $92 + ($107 << 1) | 0;
    var $109 = HEAP16[$108 >> 1];
    var $110 = $109 & 65535;
    HEAP32[$8 >> 2] = $110;
    var $111 = _median4($5);
    var $112 = $111 & 65535;
    var $113 = $89 + $col_138 | 0;
    var $114 = $92 + ($113 << 1) | 0;
    HEAP16[$114 >> 1] = $112;
    label = 14;
    break;
   case 14:
    var $116 = $col_138 + 4 | 0;
    var $117 = ($116 | 0) < ($51 | 0);
    if ($117) {
      var $col_138 = $116;
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $118 = $row_041 + 1 | 0;
    var $119 = ($118 | 0) < ($3 | 0);
    if ($119) {
      var $row_041 = $118;
      label = 4;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
_fill_holes["X"] = 1;
function _smal_v9_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2048 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $seg = __stackBase__;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 67, 0);
    var $3 = _get4();
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fgetc($4);
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fseek($6, $3, 0);
    var $_mask = $5 & 2147483647;
    var $8 = ($_mask | 0) == 0;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $9 = $5 << 1;
    var $i_013 = 0;
    label = 4;
    break;
   case 4:
    var $i_013;
    var $11 = _get4();
    var $12 = HEAP32[5428492 >> 2];
    var $13 = $i_013 & 1;
    var $14 = -$13 | 0;
    var $15 = $12 & $14;
    var $16 = $15 + $11 | 0;
    var $17 = $seg + ($i_013 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    var $18 = $i_013 + 1 | 0;
    var $exitcond17 = ($18 | 0) == ($9 | 0);
    if ($exitcond17) {
      label = 5;
      break;
    } else {
      var $i_013 = $18;
      label = 4;
      break;
    }
   case 5:
    var $19 = HEAP32[5264116 >> 2];
    var $20 = _fseek($19, 78, 0);
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _fgetc($21);
    var $23 = HEAP32[5264116 >> 2];
    var $24 = _fseek($23, 88, 0);
    var $25 = HEAP16[5245036 >> 1];
    var $26 = $25 & 65535;
    var $27 = HEAP16[5245028 >> 1];
    var $28 = $27 & 65535;
    var $29 = $28 * $26 & -1;
    var $30 = $seg + ($5 << 3) | 0;
    HEAP32[$30 >> 2] = $29;
    var $31 = _get4();
    var $32 = HEAP32[5428492 >> 2];
    var $33 = $32 + $31 | 0;
    var $34 = $seg + ($5 << 3) + 4 | 0;
    HEAP32[$34 >> 2] = $33;
    var $35 = ($5 | 0) == 0;
    if ($35) {
      label = 7;
      break;
    } else {
      var $i_112 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_112;
    var $36 = $seg + ($i_112 << 3) | 0;
    _smal_decode_segment($36, $22);
    var $37 = $i_112 + 1 | 0;
    var $exitcond = ($37 | 0) == ($5 | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      var $i_112 = $37;
      label = 6;
      break;
    }
   case 7:
    var $38 = ($22 | 0) == 0;
    if ($38) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _fill_holes($22);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
_smal_v9_load_raw["X"] = 1;
function _foveon_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pred = __stackBase__;
    var $1 = _get4();
    var $2 = HEAP32[5262952 >> 2];
    var $3 = HEAP16[5244040 >> 1];
    var $4 = $3 & 65535;
    var $5 = HEAP16[5244060 >> 1];
    var $6 = $5 & 65535;
    var $7 = _fprintf($2, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $4, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
    var $8 = ($1 | 0) == 0;
    if ($8) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $10 = HEAP16[5244040 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 * 3 & -1;
    var $13 = $1 >>> 0 < $12 >>> 0;
    if ($13) {
      label = 20;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $15 = _malloc($1);
    _merror($15, 5585076);
    var $16 = HEAP16[5244060 >> 1];
    var $17 = $16 << 16 >> 16 == 0;
    if ($17) {
      label = 6;
      break;
    } else {
      var $row_044 = 0;
      label = 5;
      break;
    }
   case 5:
    var $row_044;
    var $18 = HEAP32[5264116 >> 2];
    var $19 = _fread($15, 1, $1, $18);
    var $20 = HEAP16[5244040 >> 1];
    var $21 = $20 & 65535;
    var $22 = HEAP32[5262952 >> 2];
    var $23 = _fwrite($15, 3, $21, $22);
    var $24 = $row_044 + 1 | 0;
    var $25 = HEAP16[5244060 >> 1];
    var $26 = $25 & 65535;
    var $27 = $24 >>> 0 < $26 >>> 0;
    if ($27) {
      var $row_044 = $24;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _free($15);
    label = 20;
    break;
   case 7:
    _foveon_decoder(256, 0);
    var $29 = HEAP16[5244060 >> 1];
    var $30 = $29 << 16 >> 16 == 0;
    if ($30) {
      label = 20;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $31 = $pred;
    var $bitbuf_039 = 0;
    var $bit_040 = 1;
    var $row_141 = 0;
    label = 9;
    break;
   case 9:
    var $row_141;
    var $bit_040;
    var $bitbuf_039;
    HEAP16[$31 >> 1] = 0;
    HEAP16[$31 + 2 >> 1] = 0;
    HEAP16[$31 + 4 >> 1] = 0;
    var $33 = ($bit_040 | 0) == 0;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $35 = _get4();
    label = 11;
    break;
   case 11:
    var $36 = HEAP16[5244040 >> 1];
    var $37 = $36 << 16 >> 16 == 0;
    if ($37) {
      var $bitbuf_1_lcssa = $bitbuf_039;
      var $bit_1_lcssa = 0;
      label = 19;
      break;
    } else {
      var $col_032 = 0;
      var $bitbuf_133 = $bitbuf_039;
      var $bit_134 = 0;
      label = 12;
      break;
    }
   case 12:
    var $bit_134;
    var $bitbuf_133;
    var $col_032;
    var $bitbuf_228 = $bitbuf_133;
    var $bit_229 = $bit_134;
    var $c_030 = 0;
    label = 13;
    break;
   case 13:
    var $c_030;
    var $bit_229;
    var $bitbuf_228;
    var $38 = HEAP32[5403056 >> 2];
    var $39 = ($38 | 0) == 0;
    if ($39) {
      var $bitbuf_3_lcssa = $bitbuf_228;
      var $bit_3_lcssa = $bit_229;
      var $dindex_0_lcssa = 5403056;
      label = 17;
      break;
    } else {
      var $bitbuf_322 = $bitbuf_228;
      var $bit_323 = $bit_229;
      var $dindex_024 = 5403056;
      label = 14;
      break;
    }
   case 14:
    var $dindex_024;
    var $bit_323;
    var $bitbuf_322;
    var $40 = $bit_323 + 31 | 0;
    var $41 = $40 & 31;
    var $42 = ($41 | 0) == 31;
    if ($42) {
      label = 15;
      break;
    } else {
      var $bitbuf_5 = $bitbuf_322;
      label = 16;
      break;
    }
   case 15:
    var $43 = $bitbuf_322 << 8;
    var $44 = HEAP32[5264116 >> 2];
    var $45 = _fgetc($44);
    var $46 = $45 + $43 | 0;
    var $47 = $46 << 8;
    var $48 = HEAP32[5264116 >> 2];
    var $49 = _fgetc($48);
    var $50 = $49 + $47 | 0;
    var $51 = $50 << 8;
    var $52 = HEAP32[5264116 >> 2];
    var $53 = _fgetc($52);
    var $54 = $53 + $51 | 0;
    var $55 = $54 << 8;
    var $56 = HEAP32[5264116 >> 2];
    var $57 = _fgetc($56);
    var $58 = $57 + $55 | 0;
    var $bitbuf_5 = $58;
    label = 16;
    break;
   case 16:
    var $bitbuf_5;
    var $60 = $bitbuf_5 >>> ($41 >>> 0);
    var $61 = $60 & 1;
    var $62 = $dindex_024 + ($61 << 2) | 0;
    var $63 = HEAP32[$62 >> 2];
    var $64 = $63 | 0;
    var $65 = HEAP32[$64 >> 2];
    var $66 = ($65 | 0) == 0;
    if ($66) {
      var $bitbuf_3_lcssa = $bitbuf_5;
      var $bit_3_lcssa = $41;
      var $dindex_0_lcssa = $63;
      label = 17;
      break;
    } else {
      var $bitbuf_322 = $bitbuf_5;
      var $bit_323 = $41;
      var $dindex_024 = $63;
      label = 14;
      break;
    }
   case 17:
    var $dindex_0_lcssa;
    var $bit_3_lcssa;
    var $bitbuf_3_lcssa;
    var $67 = $dindex_0_lcssa + 8 | 0;
    var $68 = HEAP32[$67 >> 2];
    var $69 = $pred + ($c_030 << 1) | 0;
    var $70 = HEAP16[$69 >> 1];
    var $71 = $70 & 65535;
    var $72 = $71 + $68 | 0;
    var $73 = $72 & 65535;
    HEAP16[$69 >> 1] = $73;
    var $sext = $72 << 16;
    var $74 = $sext >> 16;
    var $75 = HEAP32[5262952 >> 2];
    var $76 = _fputc($74, $75);
    var $77 = $c_030 + 1 | 0;
    var $exitcond = ($77 | 0) == 3;
    if ($exitcond) {
      label = 18;
      break;
    } else {
      var $bitbuf_228 = $bitbuf_3_lcssa;
      var $bit_229 = $bit_3_lcssa;
      var $c_030 = $77;
      label = 13;
      break;
    }
   case 18:
    var $79 = $col_032 + 1 | 0;
    var $80 = HEAP16[5244040 >> 1];
    var $81 = $80 & 65535;
    var $82 = $79 >>> 0 < $81 >>> 0;
    if ($82) {
      var $col_032 = $79;
      var $bitbuf_133 = $bitbuf_3_lcssa;
      var $bit_134 = $bit_3_lcssa;
      label = 12;
      break;
    } else {
      var $bitbuf_1_lcssa = $bitbuf_3_lcssa;
      var $bit_1_lcssa = $bit_3_lcssa;
      label = 19;
      break;
    }
   case 19:
    var $bit_1_lcssa;
    var $bitbuf_1_lcssa;
    var $83 = $row_141 + 1 | 0;
    var $84 = HEAP16[5244060 >> 1];
    var $85 = $84 & 65535;
    var $86 = $83 >>> 0 < $85 >>> 0;
    if ($86) {
      var $bitbuf_039 = $bitbuf_1_lcssa;
      var $bit_040 = $bit_1_lcssa;
      var $row_141 = $83;
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_thumb["X"] = 1;
function _foveon_decoder($size, $code) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($size | 0) == 0;
    var $code_tr = $code;
    label = 3;
    break;
   case 3:
    var $code_tr;
    var $2 = ($code_tr | 0) != 0;
    if ($2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $_pre = HEAP32[5398908 >> 2];
    var $7 = $_pre;
    label = 8;
    break;
   case 5:
    if ($1) {
      label = 7;
      break;
    } else {
      var $i_018 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_018;
    var $3 = _get4();
    var $4 = 5398944 + ($i_018 << 2) | 0;
    HEAP32[$4 >> 2] = $3;
    var $5 = $i_018 + 1 | 0;
    var $exitcond = ($5 | 0) == ($size | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      var $i_018 = $5;
      label = 6;
      break;
    }
   case 7:
    for (var $$dest = 5403056 >> 2, $$stop = $$dest + 6144; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5398908 >> 2] = 5403056;
    var $7 = 5403056;
    label = 8;
    break;
   case 8:
    var $7;
    var $8 = $7 + 12 | 0;
    HEAP32[5398908 >> 2] = $8;
    var $9 = $8 >>> 0 > 5427632 >>> 0;
    if ($9) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $11 = HEAP32[_stderr >> 2];
    var $12 = HEAP32[5264120 >> 2];
    var $13 = _fprintf($11, 5585292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $12, tempInt));
    _longjmp(5427928, 2);
   case 10:
    if ($2) {
      var $i_1 = 0;
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    var $i_1;
    var $15 = $i_1 >>> 0 < $size >>> 0;
    if ($15) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $17 = 5398944 + ($i_1 << 2) | 0;
    var $18 = HEAP32[$17 >> 2];
    var $19 = ($18 | 0) == ($code_tr | 0);
    var $20 = $i_1 + 1 | 0;
    if ($19) {
      label = 13;
      break;
    } else {
      var $i_1 = $20;
      label = 11;
      break;
    }
   case 13:
    var $22 = $7 + 8 | 0;
    HEAP32[$22 >> 2] = $i_1;
    label = 16;
    break;
   case 14:
    var $24 = $code_tr >>> 0 > 3623878655;
    if ($24) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $25 = $code_tr + 134217728 | 0;
    var $26 = $25 & -134217728;
    var $27 = $code_tr << 1;
    var $28 = $27 & 134217726;
    var $29 = $26 | $28;
    var $30 = $7 | 0;
    HEAP32[$30 >> 2] = $8;
    _foveon_decoder($size, $29);
    var $31 = HEAP32[5398908 >> 2];
    var $32 = $7 + 4 | 0;
    HEAP32[$32 >> 2] = $31;
    var $33 = $29 | 1;
    var $code_tr = $33;
    label = 3;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_decoder["X"] = 1;
function _foveon_avg($pix, $range_val, $range_1_val, $cfilt) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($range_val | 0) > ($range_1_val | 0);
    if ($1) {
      var $min_0_lcssa = 3.4028234663852886e+38;
      var $max_0_lcssa = -3.4028234663852886e+38;
      var $sum_0_lcssa = 0;
      label = 4;
      break;
    } else {
      var $i_021 = $range_val;
      var $min_022 = 3.4028234663852886e+38;
      var $max_023 = -3.4028234663852886e+38;
      var $sum_024 = 0;
      label = 3;
      break;
    }
   case 3:
    var $sum_024;
    var $max_023;
    var $min_022;
    var $i_021;
    var $2 = $i_021 << 2;
    var $3 = $pix + ($2 << 1) | 0;
    var $4 = HEAP16[$3 >> 1];
    var $5 = $4 << 16 >> 16;
    var $6 = $4 << 16 >> 16;
    var $7 = $2 - 4 | 0;
    var $8 = $pix + ($7 << 1) | 0;
    var $9 = HEAP16[$8 >> 1];
    var $10 = $9 << 16 >> 16;
    var $11 = $5 - $10 | 0;
    var $12 = $11 | 0;
    var $13 = $12 * $cfilt;
    var $14 = $6 + $13;
    var $15 = $sum_024 + $14;
    var $16 = $min_022 > $14;
    var $min_1 = $16 ? $14 : $min_022;
    var $17 = $max_023 < $14;
    var $max_1 = $17 ? $14 : $max_023;
    var $18 = $i_021 + 1 | 0;
    var $19 = ($18 | 0) > ($range_1_val | 0);
    if ($19) {
      var $min_0_lcssa = $min_1;
      var $max_0_lcssa = $max_1;
      var $sum_0_lcssa = $15;
      label = 4;
      break;
    } else {
      var $i_021 = $18;
      var $min_022 = $min_1;
      var $max_023 = $max_1;
      var $sum_024 = $15;
      label = 3;
      break;
    }
   case 4:
    var $sum_0_lcssa;
    var $max_0_lcssa;
    var $min_0_lcssa;
    var $20 = $range_1_val - $range_val | 0;
    var $21 = ($20 | 0) == 1;
    if ($21) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $23 = $sum_0_lcssa * .5;
    var $_0 = $23;
    label = 7;
    break;
   case 6:
    var $25 = $sum_0_lcssa - $min_0_lcssa;
    var $26 = $25 - $max_0_lcssa;
    var $27 = $20 - 1 | 0;
    var $28 = $27 | 0;
    var $29 = $26 / $28;
    var $_0 = $29;
    label = 7;
    break;
   case 7:
    var $_0;
    return $_0;
  }
}
function _foveon_sd_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2060 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $diff = __stackBase__;
    var $pred = __stackBase__ + 2048;
    var $1 = $diff | 0;
    _read_shorts($1, 1024);
    var $2 = HEAP32[5263696 >> 2];
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _foveon_decoder(1024, 0);
    label = 4;
    break;
   case 4:
    var $5 = HEAP16[5398712 >> 1];
    var $6 = $5 << 16 >> 16 == 0;
    if ($6) {
      label = 22;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $7 = $pred;
    var $8 = $pred | 0;
    var $9 = $pred + 4 | 0;
    var $10 = $pred + 8 | 0;
    var $bitbuf_051 = 0;
    var $row_052 = 0;
    var $bit_054 = -1;
    label = 6;
    break;
   case 6:
    var $bit_054;
    var $row_052;
    var $bitbuf_051;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$7 + 8 >> 2] = 0;
    var $11 = HEAP32[5263696 >> 2];
    var $12 = $11 | $bit_054;
    var $13 = ($12 | 0) == 0;
    if ($13) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $15 = _atoi(5263374);
    var $16 = ($15 | 0) < 14;
    if ($16) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $18 = _get4();
    label = 9;
    break;
   case 9:
    var $19 = HEAP16[5242964 >> 1];
    var $20 = $19 << 16 >> 16 == 0;
    if ($20) {
      var $bitbuf_1_lcssa = $bitbuf_051;
      var $bit_1_lcssa = 0;
      label = 21;
      break;
    } else {
      var $bitbuf_143 = $bitbuf_051;
      var $col_044 = 0;
      var $bit_145 = 0;
      var $23 = 0;
      var $22 = 0;
      var $21 = 0;
      label = 10;
      break;
    }
   case 10:
    var $21;
    var $22;
    var $23;
    var $bit_145;
    var $col_044;
    var $bitbuf_143;
    var $24 = HEAP32[5263696 >> 2];
    var $25 = ($24 | 0) == 0;
    if ($25) {
      var $bitbuf_238 = $bitbuf_143;
      var $bit_239 = $bit_145;
      var $c_140 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $26 = _get4();
    var $27 = $26 & 1023;
    var $28 = $diff + ($27 << 1) | 0;
    var $29 = HEAP16[$28 >> 1];
    var $30 = $29 << 16 >> 16;
    var $31 = $23 + $30 | 0;
    HEAP32[$10 >> 2] = $31;
    var $32 = $26 >>> 10;
    var $33 = $32 & 1023;
    var $34 = $diff + ($33 << 1) | 0;
    var $35 = HEAP16[$34 >> 1];
    var $36 = $35 << 16 >> 16;
    var $37 = $22 + $36 | 0;
    HEAP32[$9 >> 2] = $37;
    var $38 = $26 >>> 20;
    var $39 = $38 & 1023;
    var $40 = $diff + ($39 << 1) | 0;
    var $41 = HEAP16[$40 >> 1];
    var $42 = $41 << 16 >> 16;
    var $43 = $21 + $42 | 0;
    HEAP32[$8 >> 2] = $43;
    var $bit_4 = $bit_145;
    var $bitbuf_6 = $26;
    var $89 = $43;
    var $88 = $37;
    var $87 = $31;
    label = 20;
    break;
   case 12:
    var $c_140;
    var $bit_239;
    var $bitbuf_238;
    var $44 = HEAP32[5403056 >> 2];
    var $45 = ($44 | 0) == 0;
    if ($45) {
      var $dindex_0_lcssa = 5403056;
      var $bitbuf_3_lcssa = $bitbuf_238;
      var $bit_3_lcssa = $bit_239;
      label = 16;
      break;
    } else {
      var $dindex_031 = 5403056;
      var $bitbuf_332 = $bitbuf_238;
      var $bit_333 = $bit_239;
      label = 13;
      break;
    }
   case 13:
    var $bit_333;
    var $bitbuf_332;
    var $dindex_031;
    var $46 = $bit_333 + 31 | 0;
    var $47 = $46 & 31;
    var $48 = ($47 | 0) == 31;
    if ($48) {
      label = 14;
      break;
    } else {
      var $bitbuf_5 = $bitbuf_332;
      label = 15;
      break;
    }
   case 14:
    var $49 = $bitbuf_332 << 8;
    var $50 = HEAP32[5264116 >> 2];
    var $51 = _fgetc($50);
    var $52 = $51 + $49 | 0;
    var $53 = $52 << 8;
    var $54 = HEAP32[5264116 >> 2];
    var $55 = _fgetc($54);
    var $56 = $55 + $53 | 0;
    var $57 = $56 << 8;
    var $58 = HEAP32[5264116 >> 2];
    var $59 = _fgetc($58);
    var $60 = $59 + $57 | 0;
    var $61 = $60 << 8;
    var $62 = HEAP32[5264116 >> 2];
    var $63 = _fgetc($62);
    var $64 = $63 + $61 | 0;
    var $bitbuf_5 = $64;
    label = 15;
    break;
   case 15:
    var $bitbuf_5;
    var $66 = $bitbuf_5 >>> ($47 >>> 0);
    var $67 = $66 & 1;
    var $68 = $dindex_031 + ($67 << 2) | 0;
    var $69 = HEAP32[$68 >> 2];
    var $70 = $69 | 0;
    var $71 = HEAP32[$70 >> 2];
    var $72 = ($71 | 0) == 0;
    if ($72) {
      var $dindex_0_lcssa = $69;
      var $bitbuf_3_lcssa = $bitbuf_5;
      var $bit_3_lcssa = $47;
      label = 16;
      break;
    } else {
      var $dindex_031 = $69;
      var $bitbuf_332 = $bitbuf_5;
      var $bit_333 = $47;
      label = 13;
      break;
    }
   case 16:
    var $bit_3_lcssa;
    var $bitbuf_3_lcssa;
    var $dindex_0_lcssa;
    var $73 = $dindex_0_lcssa + 8 | 0;
    var $74 = HEAP32[$73 >> 2];
    var $75 = $diff + ($74 << 1) | 0;
    var $76 = HEAP16[$75 >> 1];
    var $77 = $76 << 16 >> 16;
    var $78 = $pred + ($c_140 << 2) | 0;
    var $79 = HEAP32[$78 >> 2];
    var $80 = $79 + $77 | 0;
    HEAP32[$78 >> 2] = $80;
    var $81 = $80 >>> 0 > 65535;
    var $82 = $80 ^ -65536;
    var $83 = $82 >>> 0 > 65535;
    var $or_cond = $81 & $83;
    if ($or_cond) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _derror();
    label = 18;
    break;
   case 18:
    var $86 = $c_140 + 1 | 0;
    var $exitcond = ($86 | 0) == 3;
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $bitbuf_238 = $bitbuf_3_lcssa;
      var $bit_239 = $bit_3_lcssa;
      var $c_140 = $86;
      label = 12;
      break;
    }
   case 19:
    var $_pre = HEAP32[$8 >> 2];
    var $_pre1 = HEAP32[$9 >> 2];
    var $_pre2 = HEAP32[$10 >> 2];
    var $bit_4 = $bit_3_lcssa;
    var $bitbuf_6 = $bitbuf_3_lcssa;
    var $89 = $_pre;
    var $88 = $_pre1;
    var $87 = $_pre2;
    label = 20;
    break;
   case 20:
    var $87;
    var $88;
    var $89;
    var $bitbuf_6;
    var $bit_4;
    var $90 = $89 & 65535;
    var $91 = HEAP16[5242964 >> 1];
    var $92 = $91 & 65535;
    var $93 = $92 * $row_052 & -1;
    var $94 = $93 + $col_044 | 0;
    var $95 = HEAP32[5264108 >> 2];
    var $96 = $95 + ($94 << 3) | 0;
    HEAP16[$96 >> 1] = $90;
    var $97 = $88 & 65535;
    var $98 = $95 + ($94 << 3) + 2 | 0;
    HEAP16[$98 >> 1] = $97;
    var $99 = $87 & 65535;
    var $100 = $95 + ($94 << 3) + 4 | 0;
    HEAP16[$100 >> 1] = $99;
    var $101 = $col_044 + 1 | 0;
    var $102 = ($101 | 0) < ($92 | 0);
    if ($102) {
      var $bitbuf_143 = $bitbuf_6;
      var $col_044 = $101;
      var $bit_145 = $bit_4;
      var $23 = $87;
      var $22 = $88;
      var $21 = $89;
      label = 10;
      break;
    } else {
      var $bitbuf_1_lcssa = $bitbuf_6;
      var $bit_1_lcssa = $bit_4;
      label = 21;
      break;
    }
   case 21:
    var $bit_1_lcssa;
    var $bitbuf_1_lcssa;
    var $103 = $row_052 + 1 | 0;
    var $104 = HEAP16[5398712 >> 1];
    var $105 = $104 & 65535;
    var $106 = ($103 | 0) < ($105 | 0);
    if ($106) {
      var $bitbuf_051 = $bitbuf_1_lcssa;
      var $row_052 = $103;
      var $bit_054 = $bit_1_lcssa;
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_sd_load_raw["X"] = 1;
function _foveon_huff($huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[$huff >> 1] = 8;
    var $i_07 = 0;
    label = 3;
    break;
   case 3:
    var $i_07;
    var $2 = HEAP32[5264116 >> 2];
    var $3 = _fgetc($2);
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fgetc($4);
    var $6 = 256 >>> ($3 >>> 0);
    var $7 = ($6 | 0) > 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $8 = $3 << 8;
    var $9 = $8 | $i_07;
    var $10 = $9 & 65535;
    var $j_06 = 0;
    label = 5;
    break;
   case 5:
    var $j_06;
    var $12 = $j_06 + 1 | 0;
    var $13 = $12 + $5 | 0;
    var $14 = $huff + ($13 << 1) | 0;
    HEAP16[$14 >> 1] = $10;
    var $exitcond = ($12 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $j_06 = $12;
      label = 5;
      break;
    }
   case 6:
    var $15 = $i_07 + 1 | 0;
    var $exitcond8 = ($15 | 0) == 13;
    if ($exitcond8) {
      label = 7;
      break;
    } else {
      var $i_07 = $15;
      label = 3;
      break;
    }
   case 7:
    var $17 = _get2();
    return;
  }
}
function _foveon_dp_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 544 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $roff = __stackBase__;
    var $huff = __stackBase__ + 16;
    var $vpred = __stackBase__ + 532;
    var $hpred = __stackBase__ + 540;
    var $0 = HEAP32[5264116 >> 2];
    var $1 = _fseek($0, 8, 1);
    var $2 = $huff | 0;
    _foveon_huff($2);
    var $3 = $roff | 0;
    HEAP32[$3 >> 2] = 48;
    var $4 = _get4();
    var $5 = -48 - $4 | 0;
    var $6 = $5 & -16;
    var $7 = -$6 | 0;
    var $8 = $roff + 4 | 0;
    HEAP32[$8 >> 2] = $7;
    var $9 = _get4();
    var $10 = $6 - $9 | 0;
    var $11 = $10 & -16;
    var $12 = -$11 | 0;
    var $13 = $roff + 8 | 0;
    HEAP32[$13 >> 2] = $12;
    var $14 = _get4();
    var $15 = $11 - $14 | 0;
    var $16 = $15 & -16;
    var $17 = -$16 | 0;
    var $18 = $roff + 12 | 0;
    HEAP32[$18 >> 2] = $17;
    var $19 = $vpred + 6 | 0;
    var $20 = $vpred + 4 | 0;
    var $21 = $vpred + 2 | 0;
    var $22 = $vpred | 0;
    var $c_122 = 0;
    var $24 = 48;
    label = 3;
    break;
   case 3:
    var $24;
    var $c_122;
    var $25 = HEAP32[5264116 >> 2];
    var $26 = HEAP32[5428492 >> 2];
    var $27 = $24 + $26 | 0;
    var $28 = _fseek($25, $27, 0);
    var $29 = _getbithuff(-1, 0);
    HEAP16[$19 >> 1] = 512;
    HEAP16[$20 >> 1] = 512;
    HEAP16[$21 >> 1] = 512;
    HEAP16[$22 >> 1] = 512;
    var $30 = HEAP16[5398712 >> 1];
    var $31 = $30 << 16 >> 16 == 0;
    if ($31) {
      label = 13;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_018 = 0;
    var $33 = $_pre;
    var $32 = $30;
    label = 5;
    break;
   case 5:
    var $32;
    var $33;
    var $row_018;
    var $34 = $33 << 16 >> 16 == 0;
    if ($34) {
      var $64 = 0;
      var $63 = $32;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $35 = $row_018 & 1;
    var $col_017 = 0;
    label = 7;
    break;
   case 7:
    var $col_017;
    var $37 = _ljpeg_diff($2);
    var $38 = $col_017 >>> 0 < 2;
    if ($38) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $40 = $vpred + ($35 << 2) + ($col_017 << 1) | 0;
    var $41 = HEAP16[$40 >> 1];
    var $42 = $41 & 65535;
    var $43 = $42 + $37 | 0;
    var $44 = $43 & 65535;
    HEAP16[$40 >> 1] = $44;
    var $45 = $hpred + ($col_017 << 1) | 0;
    HEAP16[$45 >> 1] = $44;
    var $_pre3 = $col_017 & 1;
    var $_pre4 = $hpred + ($_pre3 << 1) | 0;
    var $_pre_phi5 = $_pre4;
    label = 10;
    break;
   case 9:
    var $47 = $col_017 & 1;
    var $48 = $hpred + ($47 << 1) | 0;
    var $49 = HEAP16[$48 >> 1];
    var $50 = $49 & 65535;
    var $51 = $50 + $37 | 0;
    var $52 = $51 & 65535;
    HEAP16[$48 >> 1] = $52;
    var $_pre_phi5 = $48;
    label = 10;
    break;
   case 10:
    var $_pre_phi5;
    var $54 = HEAP16[$_pre_phi5 >> 1];
    var $55 = HEAP16[5242964 >> 1];
    var $56 = $55 & 65535;
    var $57 = $56 * $row_018 & -1;
    var $58 = $57 + $col_017 | 0;
    var $59 = HEAP32[5264108 >> 2];
    var $60 = $59 + ($58 << 3) + ($c_122 << 1) | 0;
    HEAP16[$60 >> 1] = $54;
    var $61 = $col_017 + 1 | 0;
    var $62 = $61 >>> 0 < $56 >>> 0;
    if ($62) {
      var $col_017 = $61;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $64 = $55;
    var $63 = $_pre1;
    label = 12;
    break;
   case 12:
    var $63;
    var $64;
    var $65 = $row_018 + 1 | 0;
    var $66 = $63 & 65535;
    var $67 = $65 >>> 0 < $66 >>> 0;
    if ($67) {
      var $row_018 = $65;
      var $33 = $64;
      var $32 = $63;
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $68 = $c_122 + 1 | 0;
    var $exitcond = ($68 | 0) == 3;
    if ($exitcond) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $_phi_trans_insert = $roff + ($68 << 2) | 0;
    var $_pre2 = HEAP32[$_phi_trans_insert >> 2];
    var $c_122 = $68;
    var $24 = $_pre2;
    label = 3;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_dp_load_raw["X"] = 1;
function _foveon_load_camf() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 524 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $vpred = __stackBase__ + 516;
    var $tmpcast = $vpred;
    var $hpred = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    var $$etemp$0$0 = 33554944;
    var $$etemp$0$1 = 33554944;
    var $st$6$0 = $vpred | 0;
    HEAP32[$st$6$0 >> 2] = $$etemp$0$0;
    var $st$6$1 = $vpred + 4 | 0;
    HEAP32[$st$6$1 >> 2] = $$etemp$0$1;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[5263440 >> 2];
    var $3 = _fseek($1, $2, 0);
    var $4 = _get4();
    var $5 = _get4();
    var $6 = _get4();
    var $7 = _get4();
    var $8 = _get4();
    if (($4 | 0) == 2) {
      label = 3;
      break;
    } else if (($4 | 0) == 4) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 3:
    var $10 = HEAP32[5263448 >> 2];
    var $11 = HEAP32[5263444 >> 2];
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _fread($10, 1, $11, $12);
    var $14 = HEAP32[5263444 >> 2];
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 18;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP32[5263448 >> 2];
    var $high_021 = $8;
    var $i_022 = 0;
    label = 5;
    break;
   case 5:
    var $i_022;
    var $high_021;
    var $16 = $high_021 * 1597 & -1;
    var $17 = $16 + 51749 | 0;
    var $18 = ($17 >>> 0) % 244944;
    var $19$0 = $18;
    var $19$1 = 0;
    var $$etemp$1$0 = 301593171;
    var $$etemp$1$1 = 0;
    var $20$0 = (i64Math.multiply($19$0, $19$1, $$etemp$1$0, $$etemp$1$1), HEAP32[tempDoublePtr >> 2]);
    var $20$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $21$0 = $20$0 >>> 24 | $20$1 << 8;
    var $22$0 = $21$0;
    var $22 = $22$0;
    var $23 = $18 << 8;
    var $24 = $23 - $22 | 0;
    var $25 = $24 >>> 1;
    var $26 = $25 + $22 | 0;
    var $27 = $26 >>> 17;
    var $28 = $_pre + $i_022 | 0;
    var $29 = HEAP8[$28];
    var $30 = $29 & 255;
    var $31 = $27 ^ $30;
    var $32 = $31 & 255;
    HEAP8[$28] = $32;
    var $33 = $i_022 + 1 | 0;
    var $34 = $33 >>> 0 < $14 >>> 0;
    if ($34) {
      var $high_021 = $18;
      var $i_022 = $33;
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 6:
    var $36 = HEAP32[5263448 >> 2];
    _free($36);
    var $37 = $7 * 3 & -1;
    var $38 = $37 * $8 & -1;
    var $39 = $38 >>> 1;
    HEAP32[5263444 >> 2] = $39;
    var $40 = _malloc($39);
    HEAP32[5263448 >> 2] = $40;
    _merror($40, 5584852);
    var $41 = $huff | 0;
    _foveon_huff($41);
    var $42 = _get4();
    var $43 = _getbithuff(-1, 0);
    var $44 = ($8 | 0) == 0;
    if ($44) {
      label = 18;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $45 = ($7 | 0) == 0;
    var $46 = $hpred | 0;
    var $47 = $hpred + 2 | 0;
    var $j_027 = 0;
    var $row_028 = 0;
    label = 8;
    break;
   case 8:
    var $row_028;
    var $j_027;
    if ($45) {
      var $j_1_lcssa = $j_027;
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $48 = $row_028 & 1;
    var $j_123 = $j_027;
    var $col_024 = 0;
    label = 10;
    break;
   case 10:
    var $col_024;
    var $j_123;
    var $50 = _ljpeg_diff($41);
    var $51 = $col_024 >>> 0 < 2;
    if ($51) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $53 = $tmpcast + ($48 << 2) + ($col_024 << 1) | 0;
    var $54 = HEAP16[$53 >> 1];
    var $55 = $54 & 65535;
    var $56 = $55 + $50 | 0;
    var $57 = $56 & 65535;
    HEAP16[$53 >> 1] = $57;
    var $58 = $hpred + ($col_024 << 1) | 0;
    HEAP16[$58 >> 1] = $57;
    var $_pre2 = $col_024 & 1;
    var $_pre_phi = $_pre2;
    label = 13;
    break;
   case 12:
    var $60 = $col_024 & 1;
    var $61 = $hpred + ($60 << 1) | 0;
    var $62 = HEAP16[$61 >> 1];
    var $63 = $62 & 65535;
    var $64 = $63 + $50 | 0;
    var $65 = $64 & 65535;
    HEAP16[$61 >> 1] = $65;
    var $_pre_phi = $60;
    label = 13;
    break;
   case 13:
    var $_pre_phi;
    var $67 = ($_pre_phi | 0) == 0;
    if ($67) {
      var $j_2 = $j_123;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $69 = HEAP16[$46 >> 1];
    var $70 = ($69 & 65535) >>> 4;
    var $71 = $70 & 255;
    var $72 = $j_123 + 1 | 0;
    var $73 = HEAP32[5263448 >> 2];
    var $74 = $73 + $j_123 | 0;
    HEAP8[$74] = $71;
    var $75 = $69 & 65535;
    var $76 = $75 << 4;
    var $77 = HEAP16[$47 >> 1];
    var $78 = $77 & 65535;
    var $79 = $78 >>> 8;
    var $80 = $79 | $76;
    var $81 = $80 & 255;
    var $82 = $j_123 + 2 | 0;
    var $83 = $73 + $72 | 0;
    HEAP8[$83] = $81;
    var $84 = $77 & 255;
    var $85 = $j_123 + 3 | 0;
    var $86 = $73 + $82 | 0;
    HEAP8[$86] = $84;
    var $j_2 = $85;
    label = 15;
    break;
   case 15:
    var $j_2;
    var $88 = $col_024 + 1 | 0;
    var $exitcond = ($88 | 0) == ($7 | 0);
    if ($exitcond) {
      var $j_1_lcssa = $j_2;
      label = 16;
      break;
    } else {
      var $j_123 = $j_2;
      var $col_024 = $88;
      label = 10;
      break;
    }
   case 16:
    var $j_1_lcssa;
    var $89 = $row_028 + 1 | 0;
    var $exitcond29 = ($89 | 0) == ($8 | 0);
    if ($exitcond29) {
      label = 18;
      break;
    } else {
      var $j_027 = $j_1_lcssa;
      var $row_028 = $89;
      label = 8;
      break;
    }
   case 17:
    var $91 = HEAP32[_stderr >> 2];
    var $92 = HEAP32[5264120 >> 2];
    var $93 = _fprintf($91, 5584608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $92, HEAP32[tempInt + 4 >> 2] = $4, tempInt));
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_load_camf["X"] = 1;
function _foveon_camf_param($block, $param) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263444 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      var $_0 = 0;
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5263448 >> 2];
    var $idx_028 = 0;
    label = 4;
    break;
   case 4:
    var $idx_028;
    var $5 = $3 + $idx_028 | 0;
    var $6 = _strncmp($5, 5584376, 3);
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      var $_0 = 0;
      label = 12;
      break;
    }
   case 5:
    var $_sum = $idx_028 + 3 | 0;
    var $9 = $3 + $_sum | 0;
    var $10 = HEAP8[$9];
    var $11 = $10 << 24 >> 24 == 80;
    if ($11) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $_sum17 = $idx_028 + 12 | 0;
    var $13 = $3 + $_sum17 | 0;
    var $14 = _sget4($13);
    var $_sum18 = $14 + $idx_028 | 0;
    var $15 = $3 + $_sum18 | 0;
    var $16 = _strcmp($block, $15);
    var $17 = ($16 | 0) == 0;
    if ($17) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $_sum19 = $idx_028 + 16 | 0;
    var $19 = $3 + $_sum19 | 0;
    var $20 = _sget4($19);
    var $_sum20 = $20 + $idx_028 | 0;
    var $21 = $3 + $_sum20 | 0;
    var $22 = _sget4($21);
    var $_sum21 = $_sum20 + 4 | 0;
    var $23 = $3 + $_sum21 | 0;
    var $24 = _sget4($23);
    var $_sum22 = $24 + $idx_028 | 0;
    var $cp_0 = $21;
    var $num_0 = $22;
    label = 8;
    break;
   case 8:
    var $num_0;
    var $cp_0;
    var $26 = ($num_0 | 0) == 0;
    if ($26) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $28 = $num_0 - 1 | 0;
    var $29 = $cp_0 + 8 | 0;
    var $30 = _sget4($29);
    var $_sum24 = $30 + $_sum22 | 0;
    var $31 = $3 + $_sum24 | 0;
    var $32 = _strcmp($param, $31);
    var $33 = ($32 | 0) == 0;
    if ($33) {
      label = 10;
      break;
    } else {
      var $cp_0 = $29;
      var $num_0 = $28;
      label = 8;
      break;
    }
   case 10:
    var $35 = $cp_0 + 12 | 0;
    var $36 = _sget4($35);
    var $_sum25 = $36 + $_sum22 | 0;
    var $37 = $3 + $_sum25 | 0;
    var $_0 = $37;
    label = 12;
    break;
   case 11:
    var $_sum23 = $idx_028 + 8 | 0;
    var $38 = $3 + $_sum23 | 0;
    var $39 = _sget4($38);
    var $40 = $39 + $idx_028 | 0;
    var $41 = $40 >>> 0 < $1 >>> 0;
    if ($41) {
      var $idx_028 = $40;
      label = 4;
      break;
    } else {
      var $_0 = 0;
      label = 12;
      break;
    }
   case 12:
    var $_0;
    return $_0;
  }
}
_foveon_camf_param["X"] = 1;
function _foveon_camf_matrix($dim, $name) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263444 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP32[5263448 >> 2];
    var $idx_050 = 0;
    label = 4;
    break;
   case 4:
    var $idx_050;
    var $5 = $3 + $idx_050 | 0;
    var $6 = _strncmp($5, 5584376, 3);
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 5:
    var $_sum = $idx_050 + 3 | 0;
    var $9 = $3 + $_sum | 0;
    var $10 = HEAP8[$9];
    var $11 = $10 << 24 >> 24 == 77;
    if ($11) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    var $_sum34 = $idx_050 + 12 | 0;
    var $13 = $3 + $_sum34 | 0;
    var $14 = _sget4($13);
    var $_sum35 = $14 + $idx_050 | 0;
    var $15 = $3 + $_sum35 | 0;
    var $16 = _strcmp($name, $15);
    var $17 = ($16 | 0) == 0;
    if ($17) {
      label = 7;
      break;
    } else {
      label = 17;
      break;
    }
   case 7:
    var $19 = $dim + 8 | 0;
    HEAP32[$19 >> 2] = 1;
    var $20 = $dim + 4 | 0;
    HEAP32[$20 >> 2] = 1;
    HEAP32[$dim >> 2] = 1;
    var $_sum36 = $idx_050 + 16 | 0;
    var $21 = $3 + $_sum36 | 0;
    var $22 = _sget4($21);
    var $_sum37 = $22 + $idx_050 | 0;
    var $23 = $3 + $_sum37 | 0;
    var $24 = _sget4($23);
    var $_sum38 = $_sum37 + 4 | 0;
    var $25 = $3 + $_sum38 | 0;
    var $26 = _sget4($25);
    var $27 = $26 >>> 0 > 3;
    if ($27) {
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_sum39 = $_sum37 + 8 | 0;
    var $29 = $3 + $_sum39 | 0;
    var $30 = _sget4($29);
    var $_sum40 = $30 + $idx_050 | 0;
    var $31 = ($26 | 0) == 0;
    if ($31) {
      var $39 = 1;
      var $38 = 1;
      var $37 = 1;
      label = 11;
      break;
    } else {
      var $cp_046 = $23;
      var $_in = $26;
      label = 9;
      break;
    }
   case 9:
    var $_in;
    var $cp_046;
    var $32 = $_in - 1 | 0;
    var $33 = $cp_046 + 12 | 0;
    var $34 = _sget4($33);
    var $35 = $dim + ($32 << 2) | 0;
    HEAP32[$35 >> 2] = $34;
    var $36 = ($32 | 0) == 0;
    if ($36) {
      label = 10;
      break;
    } else {
      var $cp_046 = $33;
      var $_in = $32;
      label = 9;
      break;
    }
   case 10:
    var $_pre = HEAP32[$dim >> 2];
    var $_pre1 = HEAP32[$20 >> 2];
    var $_pre2 = HEAP32[$19 >> 2];
    var $phitmp = $_pre >>> 0;
    var $phitmp3 = $_pre1 >>> 0;
    var $phitmp4 = $_pre2 >>> 0;
    var $39 = $phitmp;
    var $38 = $phitmp3;
    var $37 = $phitmp4;
    label = 11;
    break;
   case 11:
    var $37;
    var $38;
    var $39;
    var $40 = $39 * $38;
    var $41 = $40 * $37;
    var $42 = $1 >>> 2;
    var $43 = $42 >>> 0;
    var $44 = $41 > $43;
    if ($44) {
      label = 18;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $46 = $41 >= 0 ? Math.floor($41) : Math.ceil($41);
    var $47 = $46 << 2;
    var $48 = _malloc($47);
    var $49 = $48;
    _merror($48, 5584104);
    var $50 = ($46 | 0) == 0;
    if ($50) {
      var $_0 = $48;
      label = 19;
      break;
    } else {
      var $i_144 = 0;
      label = 13;
      break;
    }
   case 13:
    var $i_144;
    if (($24 | 0) == 6 | ($24 | 0) == 0) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $52 = $i_144 << 2;
    var $_sum42 = $52 + $_sum40 | 0;
    var $53 = $3 + $_sum42 | 0;
    var $54 = _sget4($53);
    var $55 = $49 + ($i_144 << 2) | 0;
    HEAP32[$55 >> 2] = $54;
    label = 16;
    break;
   case 15:
    var $57 = $i_144 << 1;
    var $_sum41 = $57 + $_sum40 | 0;
    var $58 = $3 + $_sum41 | 0;
    var $59 = _sget4($58);
    var $60 = $59 & 65535;
    var $61 = $49 + ($i_144 << 2) | 0;
    HEAP32[$61 >> 2] = $60;
    label = 16;
    break;
   case 16:
    var $63 = $i_144 + 1 | 0;
    var $exitcond = ($63 | 0) == ($46 | 0);
    if ($exitcond) {
      var $_0 = $48;
      label = 19;
      break;
    } else {
      var $i_144 = $63;
      label = 13;
      break;
    }
   case 17:
    var $_sum43 = $idx_050 + 8 | 0;
    var $65 = $3 + $_sum43 | 0;
    var $66 = _sget4($65);
    var $67 = $66 + $idx_050 | 0;
    var $68 = $67 >>> 0 < $1 >>> 0;
    if ($68) {
      var $idx_050 = $67;
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $69 = HEAP32[_stderr >> 2];
    var $70 = HEAP32[5264120 >> 2];
    var $71 = _fprintf($69, 5583936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $70, HEAP32[tempInt + 4 >> 2] = $name, tempInt));
    var $_0 = 0;
    label = 19;
    break;
   case 19:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_foveon_camf_matrix["X"] = 1;
function _foveon_fixed($ptr, $size, $name) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dim = __stackBase__;
    var $1 = ($name | 0) == 0;
    if ($1) {
      var $_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $dim | 0;
    var $4 = _foveon_camf_matrix($3, $name);
    var $5 = ($4 | 0) == 0;
    if ($5) {
      var $_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = $size << 2;
    _memcpy($ptr, $4, $7);
    _free($4);
    var $_0 = 1;
    label = 5;
    break;
   case 5:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _foveon_apply_curve($curve, $i) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ispos = ($i | 0) > -1;
    var $neg = -$i | 0;
    var $1 = $ispos ? $i : $neg;
    var $2 = HEAP16[$curve >> 1];
    var $3 = $2 << 16 >> 16;
    var $4 = ($1 | 0) < ($3 | 0);
    if ($4) {
      label = 3;
      break;
    } else {
      var $_0 = 0;
      label = 6;
      break;
    }
   case 3:
    var $6 = ($i | 0) < 0;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $8 = 1 - $i | 0;
    var $9 = $curve + ($8 << 1) | 0;
    var $10 = HEAP16[$9 >> 1];
    var $11 = $10 << 16 >> 16;
    var $12 = -$11 | 0;
    var $_0 = $12;
    label = 6;
    break;
   case 5:
    var $14 = $i + 1 | 0;
    var $15 = $curve + ($14 << 1) | 0;
    var $16 = HEAP16[$15 >> 1];
    var $17 = $16 << 16 >> 16;
    var $_0 = $17;
    label = 6;
    break;
   case 6:
    var $_0;
    return $_0;
  }
}
function _foveon_make_curve($max, $mul, $filt) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $filt != 0;
    var $_0 = $1 ? $filt : .8;
    var $2 = $max * 12.566370614359172;
    var $3 = $2 / $_0;
    var $4 = $3 >= 0 ? Math.floor($3) : Math.ceil($3);
    var $5 = ($4 | 0) == -1;
    var $6 = $5 << 31 >> 31;
    var $size_0 = $6 + $4 | 0;
    var $7 = $size_0 + 1 | 0;
    var $8 = _calloc($7, 2);
    var $9 = $8;
    _merror($8, 5583756);
    var $10 = $size_0 & 65535;
    HEAP16[$9 >> 1] = $10;
    var $11 = ($size_0 | 0) == 0;
    if ($11) {
      label = 4;
      break;
    } else {
      var $i_019 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_019;
    var $12 = $i_019 >>> 0;
    var $13 = $_0 * $12;
    var $14 = $13 / $max;
    var $15 = $14 * .25;
    var $16 = Math.cos($15);
    var $17 = $16 + 1;
    var $18 = $17 * .5;
    var $19 = $13 / $mul;
    var $20 = _tanh($19);
    var $21 = $18 * $20;
    var $22 = $21 * $mul;
    var $23 = $22 + .5;
    var $24 = $23 & -1;
    var $25 = $i_019 + 1 | 0;
    var $26 = $9 + ($25 << 1) | 0;
    HEAP16[$26 >> 1] = $24;
    var $exitcond = ($25 | 0) == ($size_0 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_019 = $25;
      label = 3;
      break;
    }
   case 4:
    return $9;
  }
}
function _foveon_make_curves($curvep, $dq_val, $dq_1_val, $dq_2_val, $div_val, $div_1_val, $div_2_val, $filt) {
  var $1 = $dq_val / $div_val;
  var $2 = $1;
  var $4 = $dq_1_val / $div_1_val;
  var $6 = $dq_2_val / $div_2_val;
  var $max_1 = $1 > 0 ? $2 : 0;
  var $max_1_1 = $max_1 < $4 ? $4 : $max_1;
  var $max_1_2 = $max_1_1 < $6 ? $6 : $max_1_1;
  var $10 = $filt;
  var $11 = _foveon_make_curve($max_1_2, $2, $10);
  HEAP32[$curvep >> 2] = $11;
  var $12 = _foveon_make_curve($max_1_2, $4, $10);
  HEAP32[$curvep + 4 >> 2] = $12;
  var $14 = _foveon_make_curve($max_1_2, $6, $10);
  HEAP32[$curvep + 8 >> 2] = $14;
  return;
}
function _foveon_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 624 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $curve = __stackBase__;
    var $cfilt = __stackBase__ + 32;
    var $ddft = __stackBase__ + 36;
    var $ppm = __stackBase__ + 108;
    var $cam_xyz = __stackBase__ + 216;
    var $correct = __stackBase__ + 252;
    var $last = __stackBase__ + 288;
    var $trans = __stackBase__ + 324;
    var $chroma_dq = __stackBase__ + 360;
    var $color_dq = __stackBase__ + 372;
    var $div = __stackBase__ + 384;
    var $dscr = __stackBase__ + 396;
    var $dstb = __stackBase__ + 412;
    var $ipix = __stackBase__ + 428;
    var $satlev = __stackBase__ + 440;
    var $keep = __stackBase__ + 452;
    var $active = __stackBase__ + 468;
    var $dim = __stackBase__ + 484;
    var $str = __stackBase__ + 496;
    HEAPF32[$cfilt >> 2] = 0;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5583572, 24, 1, $2);
    label = 4;
    break;
   case 4:
    _foveon_load_camf();
    var $5 = $dscr;
    var $6 = _foveon_fixed($5, 4, 5583384);
    var $7 = $ppm;
    var $8 = _foveon_fixed($7, 27, 5583208);
    var $9 = $satlev;
    var $10 = _foveon_fixed($9, 3, 5583020);
    var $11 = $keep | 0;
    var $12 = $keep;
    var $13 = _foveon_fixed($12, 4, 5582824);
    var $14 = $active | 0;
    var $15 = $active;
    var $16 = _foveon_fixed($15, 4, 5582628);
    var $17 = $chroma_dq | 0;
    var $18 = $chroma_dq;
    var $19 = _foveon_fixed($18, 3, 5582484);
    var $20 = $color_dq | 0;
    var $21 = $color_dq;
    var $22 = _foveon_camf_param(5582332, 5582204);
    var $23 = ($22 | 0) != 0;
    var $24 = $23 ? 5582204 : 5582068;
    var $25 = _foveon_fixed($21, 3, $24);
    var $26 = _foveon_camf_param(5582332, 5581900);
    var $27 = ($26 | 0) == 0;
    if ($27) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $29 = $cfilt;
    var $30 = _foveon_fixed($29, 1, 5581900);
    label = 6;
    break;
   case 6:
    var $32 = $ddft;
    for (var $$dest = $32 >> 2, $$stop = $$dest + 18; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $33 = _foveon_camf_param(5582332, 5581740);
    var $34 = ($33 | 0) == 0;
    if ($34) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $36 = $ddft + 24 | 0;
    var $37 = $36;
    var $38 = _foveon_fixed($37, 12, 5581740);
    var $39 = ($38 | 0) == 0;
    if ($39) {
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 8:
    var $40 = $dstb | 0;
    var $41 = $dstb;
    var $42 = $dstb + 4 | 0;
    var $43 = $dstb + 12 | 0;
    var $44 = $dstb + 8 | 0;
    var $i_0956 = 0;
    label = 9;
    break;
   case 9:
    var $i_0956;
    var $46 = ($i_0956 | 0) != 0;
    var $47 = $46 ? 5581568 : 5581392;
    var $48 = _foveon_fixed($41, 4, $47);
    var $49 = HEAP32[$42 >> 2];
    var $50 = HEAP32[$43 >> 2];
    var $51 = ($49 | 0) > ($50 | 0);
    if ($51) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $_pre161 = HEAP32[$44 >> 2];
    var $_pre162 = HEAP32[$40 >> 2];
    var $_pre192 = $i_0956 + 1 | 0;
    var $_pre193 = $ddft + $_pre192 * 24 + 4 | 0;
    var $_pre195 = $ddft + $_pre192 * 24 + 12 | 0;
    var $_pre197 = $ddft + $_pre192 * 24 + 20 | 0;
    var $86 = $_pre161;
    var $85 = $_pre162;
    var $_pre_phi = $_pre192;
    var $_pre_phi194 = $_pre193;
    var $_pre_phi196 = $_pre195;
    var $_pre_phi198 = $_pre197;
    label = 16;
    break;
   case 11:
    var $52 = HEAP32[$40 >> 2];
    var $53 = HEAP32[$44 >> 2];
    var $54 = ($52 | 0) > ($53 | 0);
    var $55 = HEAP16[5242964 >> 1];
    var $56 = $55 & 65535;
    var $57 = HEAP32[5264108 >> 2];
    var $58 = $i_0956 + 1 | 0;
    var $59 = $ddft + $58 * 24 + 4 | 0;
    var $60 = $ddft + $58 * 24 + 12 | 0;
    var $61 = $ddft + $58 * 24 + 20 | 0;
    var $row_0949 = $49;
    label = 12;
    break;
   case 12:
    var $row_0949;
    if ($54) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $63 = $56 * $row_0949 & -1;
    var $_pre = HEAPF32[$59 >> 2];
    var $_pre133 = HEAPF32[$60 >> 2];
    var $_pre134 = HEAPF32[$61 >> 2];
    var $col_0945 = $52;
    var $67 = $_pre;
    var $66 = $_pre133;
    var $65 = $_pre134;
    label = 14;
    break;
   case 14:
    var $65;
    var $66;
    var $67;
    var $col_0945;
    var $68 = $63 + $col_0945 | 0;
    var $69 = $57 + ($68 << 3) | 0;
    var $70 = HEAP16[$69 >> 1];
    var $71 = $70 << 16 >> 16;
    var $72 = $67 + $71;
    HEAPF32[$59 >> 2] = $72;
    var $73 = $57 + ($68 << 3) + 2 | 0;
    var $74 = HEAP16[$73 >> 1];
    var $75 = $74 << 16 >> 16;
    var $76 = $66 + $75;
    HEAPF32[$60 >> 2] = $76;
    var $77 = $57 + ($68 << 3) + 4 | 0;
    var $78 = HEAP16[$77 >> 1];
    var $79 = $78 << 16 >> 16;
    var $80 = $65 + $79;
    HEAPF32[$61 >> 2] = $80;
    var $81 = $col_0945 + 1 | 0;
    var $82 = ($81 | 0) > ($53 | 0);
    if ($82) {
      label = 15;
      break;
    } else {
      var $col_0945 = $81;
      var $67 = $72;
      var $66 = $76;
      var $65 = $80;
      label = 14;
      break;
    }
   case 15:
    var $83 = $row_0949 + 1 | 0;
    var $84 = ($83 | 0) > ($50 | 0);
    if ($84) {
      var $86 = $53;
      var $85 = $52;
      var $_pre_phi = $58;
      var $_pre_phi194 = $59;
      var $_pre_phi196 = $60;
      var $_pre_phi198 = $61;
      label = 16;
      break;
    } else {
      var $row_0949 = $83;
      label = 12;
      break;
    }
   case 16:
    var $_pre_phi198;
    var $_pre_phi196;
    var $_pre_phi194;
    var $_pre_phi;
    var $85;
    var $86;
    var $87 = $50 + 1 | 0;
    var $88 = $87 - $49 | 0;
    var $89 = $86 + 1 | 0;
    var $90 = $89 - $85 | 0;
    var $91 = $90 * $88 & -1;
    var $92 = $91 | 0;
    var $93 = HEAPF32[$_pre_phi194 >> 2];
    var $94 = $93 / $92;
    HEAPF32[$_pre_phi194 >> 2] = $94;
    var $95 = HEAPF32[$_pre_phi196 >> 2];
    var $96 = $95 / $92;
    HEAPF32[$_pre_phi196 >> 2] = $96;
    var $97 = HEAPF32[$_pre_phi198 >> 2];
    var $98 = $97 / $92;
    HEAPF32[$_pre_phi198 >> 2] = $98;
    var $exitcond1049 = ($_pre_phi | 0) == 2;
    if ($exitcond1049) {
      label = 17;
      break;
    } else {
      var $i_0956 = $_pre_phi;
      label = 9;
      break;
    }
   case 17:
    var $99 = _foveon_camf_param(5581212, 5263308);
    var $100 = ($99 | 0) == 0;
    if ($100) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $102 = HEAP32[_stderr >> 2];
    var $103 = HEAP32[5264120 >> 2];
    var $104 = _fprintf($102, 5581032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $103, HEAP32[tempInt + 4 >> 2] = 5263308, tempInt));
    label = 152;
    break;
   case 19:
    var $106 = $cam_xyz;
    var $107 = _foveon_fixed($106, 9, $99);
    var $108 = $correct;
    var $109 = _foveon_camf_param(5580868, 5263308);
    var $110 = _foveon_fixed($108, 9, $109);
    var $111 = $last;
    for (var $$dest = $111 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $112 = $cam_xyz | 0;
    var $113 = HEAPF32[$112 >> 2];
    var $114 = $cam_xyz + 12 | 0;
    var $115 = HEAPF32[$114 >> 2];
    var $116 = $cam_xyz + 24 | 0;
    var $117 = HEAPF32[$116 >> 2];
    var $118 = $cam_xyz + 4 | 0;
    var $119 = HEAPF32[$118 >> 2];
    var $120 = $cam_xyz + 16 | 0;
    var $121 = HEAPF32[$120 >> 2];
    var $122 = $cam_xyz + 28 | 0;
    var $123 = HEAPF32[$122 >> 2];
    var $124 = $cam_xyz + 8 | 0;
    var $125 = HEAPF32[$124 >> 2];
    var $126 = $cam_xyz + 20 | 0;
    var $127 = HEAPF32[$126 >> 2];
    var $128 = $cam_xyz + 32 | 0;
    var $129 = HEAPF32[$128 >> 2];
    var $i_1942 = 0;
    var $_promoted938 = 0;
    var $_promoted938_1 = 0;
    var $_promoted938_2 = 0;
    label = 173;
    break;
   case 20:
    var $131 = $last + 16 | 0;
    var $132 = HEAPF32[$131 >> 2];
    var $133 = $last + 32 | 0;
    var $134 = HEAPF32[$133 >> 2];
    var $135 = $132 * $134;
    var $136 = $last + 20 | 0;
    var $137 = HEAPF32[$136 >> 2];
    var $138 = $last + 28 | 0;
    var $139 = HEAPF32[$138 >> 2];
    var $140 = $137 * $139;
    var $141 = $135 - $140;
    var $142 = $last + 24 | 0;
    var $143 = HEAPF32[$142 >> 2];
    var $144 = $137 * $143;
    var $145 = $last + 12 | 0;
    var $146 = HEAPF32[$145 >> 2];
    var $147 = $146 * $134;
    var $148 = $144 - $147;
    var $149 = $146 * $139;
    var $150 = $132 * $143;
    var $151 = $149 - $150;
    var $152 = $last + 8 | 0;
    var $153 = HEAPF32[$152 >> 2];
    var $154 = $139 * $153;
    var $155 = $last + 4 | 0;
    var $156 = HEAPF32[$155 >> 2];
    var $157 = $134 * $156;
    var $158 = $154 - $157;
    var $159 = $last | 0;
    var $160 = HEAPF32[$159 >> 2];
    var $161 = $134 * $160;
    var $162 = $143 * $153;
    var $163 = $161 - $162;
    var $164 = $143 * $156;
    var $165 = $139 * $160;
    var $166 = $164 - $165;
    var $167 = $156 * $137;
    var $168 = $153 * $132;
    var $169 = $167 - $168;
    var $170 = $153 * $146;
    var $171 = $160 * $137;
    var $172 = $170 - $171;
    var $173 = $160 * $132;
    var $174 = $156 * $146;
    var $175 = $173 - $174;
    var $176 = $141;
    var $177 = $176 * .3127;
    var $178 = $158;
    var $179 = $178 * .329;
    var $180 = $177 + $179;
    var $181 = $169;
    var $182 = $181 * .3583;
    var $183 = $180 + $182;
    var $184 = $183;
    var $185 = $div | 0;
    HEAPF32[$185 >> 2] = $184;
    var $186 = $148;
    var $187 = $186 * .3127;
    var $188 = $163;
    var $189 = $188 * .329;
    var $190 = $187 + $189;
    var $191 = $172;
    var $192 = $191 * .3583;
    var $193 = $190 + $192;
    var $194 = $193;
    var $195 = $div + 4 | 0;
    HEAPF32[$195 >> 2] = $194;
    var $196 = $151;
    var $197 = $196 * .3127;
    var $198 = $166;
    var $199 = $198 * .329;
    var $200 = $197 + $199;
    var $201 = $175;
    var $202 = $201 * .3583;
    var $203 = $200 + $202;
    var $204 = $203;
    var $205 = $div + 8 | 0;
    HEAPF32[$205 >> 2] = $204;
    var $206 = $str | 0;
    var $207 = _sprintf($206, 5580644, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263308, tempInt));
    var $208 = _foveon_camf_param(5582332, $206);
    var $209 = ($208 | 0) == 0;
    if ($209) {
      var $216 = $184;
      var $215 = $194;
      var $214 = $204;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $211 = $div;
    var $212 = _foveon_fixed($211, 3, $206);
    var $_pre169 = HEAPF32[$185 >> 2];
    var $_pre170 = HEAPF32[$195 >> 2];
    var $_pre171 = HEAPF32[$205 >> 2];
    var $216 = $_pre169;
    var $215 = $_pre170;
    var $214 = $_pre171;
    label = 22;
    break;
   case 22:
    var $214;
    var $215;
    var $216;
    var $217 = $216 > 0;
    var $num_1 = $217 ? $216 : 0;
    var $218 = $num_1 < $215;
    var $num_1_1 = $218 ? $215 : $num_1;
    var $219 = $num_1_1 < $214;
    var $num_1_2 = $219 ? $214 : $num_1_1;
    var $220 = $216 / $num_1_2;
    HEAPF32[$185 >> 2] = $220;
    var $221 = $215 / $num_1_2;
    HEAPF32[$195 >> 2] = $221;
    var $222 = $214 / $num_1_2;
    HEAPF32[$205 >> 2] = $222;
    var $223 = $trans;
    for (var $$dest = $223 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_3924 = 0;
    var $_promoted920 = 0;
    var $_promoted920_1 = 0;
    var $_promoted920_2 = 0;
    label = 171;
    break;
   case 23:
    var $225 = $curve | 0;
    var $226 = HEAPF32[$cfilt >> 2];
    var $_val5 = HEAPF32[$20 >> 2];
    var $_idx6 = $color_dq + 4 | 0;
    var $_idx6_val = HEAPF32[$_idx6 >> 2];
    var $_idx7 = $color_dq + 8 | 0;
    var $_idx7_val = HEAPF32[$_idx7 >> 2];
    _foveon_make_curves($225, $_val5, $_idx6_val, $_idx7_val, $220, $221, $222, $226);
    var $227 = HEAPF32[$17 >> 2];
    var $228 = $227 / 3;
    HEAPF32[$17 >> 2] = $228;
    var $229 = $chroma_dq + 4 | 0;
    var $230 = HEAPF32[$229 >> 2];
    var $231 = $230 / 3;
    HEAPF32[$229 >> 2] = $231;
    var $232 = $chroma_dq + 8 | 0;
    var $233 = HEAPF32[$232 >> 2];
    var $234 = $233 / 3;
    HEAPF32[$232 >> 2] = $234;
    var $235 = $curve + 12 | 0;
    _foveon_make_curves($235, $228, $231, $234, $220, $221, $222, $226);
    var $236 = $228 / $220;
    var $237 = $236;
    var $238 = $2071 + $237;
    var $239 = $231 / $221;
    var $240 = $239;
    var $241 = $238 + $240;
    var $242 = $234 / $222;
    var $243 = $242;
    var $244 = $241 + $243;
    var $245 = $226;
    var $246 = _foveon_make_curve($244, $244, $245);
    var $247 = $curve + 24 | 0;
    HEAP32[$247 >> 2] = $246;
    var $248 = $244 * 2;
    var $249 = _foveon_make_curve($248, $248, $245);
    var $250 = $curve + 28 | 0;
    HEAP32[$250 >> 2] = $249;
    var $251 = $dim | 0;
    var $252 = _foveon_camf_matrix($251, 5580452);
    var $253 = $252;
    var $254 = ($252 | 0) == 0;
    if ($254) {
      label = 152;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $256 = $dim + 4 | 0;
    var $257 = HEAP32[$256 >> 2];
    var $258 = _calloc($257, 12);
    var $259 = $258;
    var $260 = HEAP16[5242964 >> 1];
    var $261 = $260 & 65535;
    var $262 = $257 - 2 | 0;
    var $263 = $262 + $261 | 0;
    var $264 = $257 - 1 | 0;
    var $265 = Math.floor(($263 >>> 0) / ($264 >>> 0));
    var $266 = HEAP16[5398712 >> 1];
    var $267 = $266 & 65535;
    var $268 = _calloc($267, 12);
    var $269 = $268;
    var $270 = HEAP16[5398712 >> 1];
    var $271 = $270 << 16 >> 16 == 0;
    if ($271) {
      var $384 = 0;
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $272 = $dscr | 0;
    var $273 = $dscr + 8 | 0;
    var $274 = $ddft + 24 | 0;
    var $275 = $ddft + 48 | 0;
    var $276 = $ddft | 0;
    var $277 = $ddft + 28 | 0;
    var $278 = $ddft + 52 | 0;
    var $279 = $ddft + 4 | 0;
    var $280 = $ddft + 32 | 0;
    var $281 = $ddft + 56 | 0;
    var $282 = $ddft + 8 | 0;
    var $283 = $ddft + 36 | 0;
    var $284 = $ddft + 60 | 0;
    var $285 = $ddft + 12 | 0;
    var $286 = $ddft + 40 | 0;
    var $287 = $ddft + 64 | 0;
    var $288 = $ddft + 16 | 0;
    var $289 = $ddft + 44 | 0;
    var $290 = $ddft + 68 | 0;
    var $291 = $ddft + 20 | 0;
    var $_val21 = HEAP32[$272 >> 2];
    var $_idx22 = $dscr + 4 | 0;
    var $_idx22_val = HEAP32[$_idx22 >> 2];
    var $_val19 = HEAP32[$273 >> 2];
    var $_idx20 = $dscr + 12 | 0;
    var $_idx20_val = HEAP32[$_idx20 >> 2];
    var $292 = $ddft + 8 | 0;
    var $293 = $ddft + 12 | 0;
    var $294 = $ddft + 16 | 0;
    var $295 = $ddft + 20 | 0;
    var $_pre154 = HEAP16[5242964 >> 1];
    var $_pre155 = HEAP32[5264108 >> 2];
    var $row_1901 = 0;
    label = 26;
    break;
   case 26:
    var $row_1901;
    var $297 = $row_1901 | 0;
    var $298 = $270 & 65535;
    var $addconv685 = $298 - 1 | 0;
    var $299 = $addconv685 | 0;
    var $300 = $297 / $299;
    var $301 = HEAPF32[$274 >> 2];
    var $302 = $301;
    var $303 = HEAPF32[$275 >> 2];
    var $304 = $303 - $301;
    var $305 = $304;
    var $306 = $300 * $305;
    var $307 = $302 + $306;
    var $308 = $307;
    HEAPF32[$276 >> 2] = $308;
    var $309 = HEAPF32[$277 >> 2];
    var $310 = $309;
    var $311 = HEAPF32[$278 >> 2];
    var $312 = $311 - $309;
    var $313 = $312;
    var $314 = $300 * $313;
    var $315 = $310 + $314;
    var $316 = $315;
    HEAPF32[$279 >> 2] = $316;
    var $317 = HEAPF32[$280 >> 2];
    var $318 = $317;
    var $319 = HEAPF32[$281 >> 2];
    var $320 = $319 - $317;
    var $321 = $320;
    var $322 = $300 * $321;
    var $323 = $318 + $322;
    var $324 = $323;
    HEAPF32[$282 >> 2] = $324;
    var $325 = HEAPF32[$283 >> 2];
    var $326 = $325;
    var $327 = HEAPF32[$284 >> 2];
    var $328 = $327 - $325;
    var $329 = $328;
    var $330 = $300 * $329;
    var $331 = $326 + $330;
    var $332 = $331;
    HEAPF32[$285 >> 2] = $332;
    var $333 = HEAPF32[$286 >> 2];
    var $334 = $333;
    var $335 = HEAPF32[$287 >> 2];
    var $336 = $335 - $333;
    var $337 = $336;
    var $338 = $300 * $337;
    var $339 = $334 + $338;
    var $340 = $339;
    HEAPF32[$288 >> 2] = $340;
    var $341 = HEAPF32[$289 >> 2];
    var $342 = $341;
    var $343 = HEAPF32[$290 >> 2];
    var $344 = $343 - $341;
    var $345 = $344;
    var $346 = $300 * $345;
    var $347 = $342 + $346;
    var $348 = $347;
    HEAPF32[$291 >> 2] = $348;
    var $349 = $_pre154 & 65535;
    var $350 = $349 * $row_1901 & -1;
    var $351 = $_pre155 + ($350 << 3) | 0;
    var $352 = _foveon_avg($351, $_val21, $_idx22_val, $226);
    var $353 = _foveon_avg($351, $_val19, $_idx20_val, $226);
    var $354 = $353 * 3;
    var $355 = $352 + $354;
    var $356 = $355 - $308;
    var $357 = $356 * .25;
    var $358 = $357 - $316;
    var $359 = $269 + $row_1901 * 12 | 0;
    HEAPF32[$359 >> 2] = $358;
    var $360 = $_pre155 + ($350 << 3) + 2 | 0;
    var $361 = _foveon_avg($360, $_val21, $_idx22_val, $226);
    var $362 = _foveon_avg($360, $_val19, $_idx20_val, $226);
    var $363 = $362 * 3;
    var $364 = $361 + $363;
    var $365 = HEAPF32[$292 >> 2];
    var $366 = $364 - $365;
    var $367 = $366 * .25;
    var $368 = HEAPF32[$293 >> 2];
    var $369 = $367 - $368;
    var $370 = $269 + $row_1901 * 12 + 4 | 0;
    HEAPF32[$370 >> 2] = $369;
    var $371 = $_pre155 + ($350 << 3) + 4 | 0;
    var $372 = _foveon_avg($371, $_val21, $_idx22_val, $226);
    var $373 = _foveon_avg($371, $_val19, $_idx20_val, $226);
    var $374 = $373 * 3;
    var $375 = $372 + $374;
    var $376 = HEAPF32[$294 >> 2];
    var $377 = $375 - $376;
    var $378 = $377 * .25;
    var $379 = HEAPF32[$295 >> 2];
    var $380 = $378 - $379;
    var $381 = $269 + $row_1901 * 12 + 8 | 0;
    HEAPF32[$381 >> 2] = $380;
    var $382 = $row_1901 + 1 | 0;
    var $383 = ($382 | 0) < ($298 | 0);
    if ($383) {
      var $row_1901 = $382;
      label = 26;
      break;
    } else {
      var $384 = $270;
      label = 27;
      break;
    }
   case 27:
    var $384;
    var $385 = $268 + 96 | 0;
    for (var $$src = $385 >> 2, $$dest = $268 >> 2, $$stop = $$src + 24; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $386 = $384 & 65535;
    var $_sum = $386 - 11 | 0;
    var $387 = $269 + $_sum * 12 | 0;
    var $388 = $387;
    var $_sum683 = $386 - 22 | 0;
    var $389 = $269 + $_sum683 * 12 | 0;
    var $390 = $389;
    for (var $$src = $390 >> 2, $$dest = $388 >> 2, $$stop = $$src + 33; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    for (var $$src = $268 >> 2, $$dest = $111 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $391 = $386 - 1 | 0;
    var $392 = ($391 | 0) > 1;
    if ($392) {
      label = 28;
      break;
    } else {
      var $row_2_lcssa = 1;
      label = 35;
      break;
    }
   case 28:
    var $393 = $last + 12 | 0;
    var $394 = $393;
    var $395 = $last + 24 | 0;
    var $396 = $395;
    var $row_2895 = 1;
    label = 29;
    break;
   case 29:
    var $row_2895;
    var $397 = HEAPF32[$145 >> 2];
    var $398 = HEAPF32[$159 >> 2];
    var $399 = $397 > $398;
    var $400 = HEAPF32[$142 >> 2];
    if ($399) {
      label = 30;
      break;
    } else {
      label = 32;
      break;
    }
   case 30:
    var $402 = $397 > $400;
    if ($402) {
      label = 31;
      break;
    } else {
      label = 34;
      break;
    }
   case 31:
    var $404 = $398 > $400;
    var $_ = $404 ? $398 : $400;
    var $405 = $269 + $row_2895 * 12 | 0;
    HEAPF32[$405 >> 2] = $_;
    label = 34;
    break;
   case 32:
    var $407 = $397 < $400;
    if ($407) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $409 = $398 < $400;
    var $_686 = $409 ? $398 : $400;
    var $410 = $269 + $row_2895 * 12 | 0;
    HEAPF32[$410 >> 2] = $_686;
    label = 34;
    break;
   case 34:
    var $412 = HEAPF32[$131 >> 2];
    var $413 = HEAPF32[$155 >> 2];
    var $414 = $412 > $413;
    var $415 = HEAPF32[$138 >> 2];
    if ($414) {
      label = 160;
      break;
    } else {
      label = 158;
      break;
    }
   case 35:
    var $row_2_lcssa;
    var $416 = HEAPF32[$159 >> 2];
    var $417 = HEAPF32[$145 >> 2];
    var $418 = $416 + $417;
    var $419 = $418 * .5;
    var $420 = $269 + $row_2_lcssa * 12 | 0;
    HEAPF32[$420 >> 2] = $419;
    var $421 = HEAPF32[$155 >> 2];
    var $422 = HEAPF32[$131 >> 2];
    var $423 = $421 + $422;
    var $424 = $423 * .5;
    var $425 = $269 + $row_2_lcssa * 12 + 4 | 0;
    HEAPF32[$425 >> 2] = $424;
    var $426 = HEAPF32[$152 >> 2];
    var $427 = HEAPF32[$136 >> 2];
    var $428 = $426 + $427;
    var $429 = $428 * .5;
    var $430 = $269 + $row_2_lcssa * 12 + 8 | 0;
    HEAPF32[$430 >> 2] = $429;
    var $431 = $268 + 36 | 0;
    var $432 = $268 + 12 | 0;
    var $433 = $432;
    var $434 = HEAPF32[$433 >> 2];
    var $435 = $431;
    var $436 = HEAPF32[$435 >> 2];
    var $437 = $434 + $436;
    var $438 = $437 * .5;
    var $439 = $268;
    HEAPF32[$439 >> 2] = $438;
    var $440 = $268 + 16 | 0;
    var $441 = $440;
    var $442 = HEAPF32[$441 >> 2];
    var $443 = $268 + 40 | 0;
    var $444 = $443;
    var $445 = HEAPF32[$444 >> 2];
    var $446 = $442 + $445;
    var $447 = $446 * .5;
    var $448 = $268 + 4 | 0;
    var $449 = $448;
    HEAPF32[$449 >> 2] = $447;
    var $450 = $268 + 20 | 0;
    var $451 = $450;
    var $452 = HEAPF32[$451 >> 2];
    var $453 = $268 + 44 | 0;
    var $454 = $453;
    var $455 = HEAPF32[$454 >> 2];
    var $456 = $452 + $455;
    var $457 = $456 * .5;
    var $458 = $268 + 8 | 0;
    var $459 = $458;
    HEAPF32[$459 >> 2] = $457;
    var $460 = ($384 & 65535) > 1;
    if ($460) {
      var $row_3886 = 1;
      var $fsum_sroa_2_0 = $457;
      var $fsum_sroa_1_0 = $447;
      var $fsum_sroa_0_0 = $438;
      var $463 = $438;
      var $462 = $447;
      var $461 = $457;
      label = 36;
      break;
    } else {
      var $fsum_sroa_2_1 = $457;
      var $fsum_sroa_1_1 = $447;
      var $fsum_sroa_0_1 = $438;
      label = 37;
      break;
    }
   case 36:
    var $461;
    var $462;
    var $463;
    var $fsum_sroa_0_0;
    var $fsum_sroa_1_0;
    var $fsum_sroa_2_0;
    var $row_3886;
    var $464 = $269 + $row_3886 * 12 | 0;
    var $465 = HEAPF32[$464 >> 2];
    var $466 = $465 - $463;
    var $467 = $466 * .04081054404377937;
    var $468 = $463 + $467;
    HEAPF32[$464 >> 2] = $468;
    var $469 = $fsum_sroa_0_0 + $468;
    var $470 = $269 + $row_3886 * 12 + 4 | 0;
    var $471 = HEAPF32[$470 >> 2];
    var $472 = $471 - $462;
    var $473 = $472 * .04081054404377937;
    var $474 = $462 + $473;
    HEAPF32[$470 >> 2] = $474;
    var $475 = $fsum_sroa_1_0 + $474;
    var $476 = $269 + $row_3886 * 12 + 8 | 0;
    var $477 = HEAPF32[$476 >> 2];
    var $478 = $477 - $461;
    var $479 = $478 * .04081054404377937;
    var $480 = $461 + $479;
    HEAPF32[$476 >> 2] = $480;
    var $481 = $fsum_sroa_2_0 + $480;
    var $482 = $row_3886 + 1 | 0;
    var $483 = ($482 | 0) < ($386 | 0);
    if ($483) {
      var $row_3886 = $482;
      var $fsum_sroa_2_0 = $481;
      var $fsum_sroa_1_0 = $475;
      var $fsum_sroa_0_0 = $469;
      var $463 = $468;
      var $462 = $474;
      var $461 = $480;
      label = 36;
      break;
    } else {
      var $fsum_sroa_2_1 = $481;
      var $fsum_sroa_1_1 = $475;
      var $fsum_sroa_0_1 = $469;
      label = 37;
      break;
    }
   case 37:
    var $fsum_sroa_0_1;
    var $fsum_sroa_1_1;
    var $fsum_sroa_2_1;
    var $484 = $269 + $391 * 12 | 0;
    var $485 = $484;
    HEAP32[$111 >> 2] = HEAP32[$485 >> 2];
    HEAP32[$111 + 4 >> 2] = HEAP32[$485 + 4 >> 2];
    HEAP32[$111 + 8 >> 2] = HEAP32[$485 + 8 >> 2];
    var $486 = $386 | 0;
    var $487 = $fsum_sroa_0_1 / $486;
    var $488 = $fsum_sroa_1_1 / $486;
    var $489 = $fsum_sroa_2_1 / $486;
    var $490 = $384 << 16 >> 16 == 0;
    if ($490) {
      label = 61;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $_pre146 = HEAPF32[$159 >> 2];
    var $_pre147 = HEAPF32[$155 >> 2];
    var $_pre148 = HEAPF32[$152 >> 2];
    var $_in = $386;
    var $493 = $_pre146;
    var $492 = $_pre147;
    var $491 = $_pre148;
    label = 39;
    break;
   case 39:
    var $491;
    var $492;
    var $493;
    var $_in;
    var $494 = $_in - 1 | 0;
    var $495 = $269 + $494 * 12 | 0;
    var $496 = HEAPF32[$495 >> 2];
    var $497 = $496 - $487;
    var $498 = $497 - $493;
    var $499 = $498 * .04081054404377937;
    var $500 = $493 + $499;
    HEAPF32[$495 >> 2] = $500;
    HEAPF32[$159 >> 2] = $500;
    var $501 = $269 + $494 * 12 + 4 | 0;
    var $502 = HEAPF32[$501 >> 2];
    var $503 = $502 - $488;
    var $504 = $503 - $492;
    var $505 = $504 * .04081054404377937;
    var $506 = $492 + $505;
    HEAPF32[$501 >> 2] = $506;
    HEAPF32[$155 >> 2] = $506;
    var $507 = $269 + $494 * 12 + 8 | 0;
    var $508 = HEAPF32[$507 >> 2];
    var $509 = $508 - $489;
    var $510 = $509 - $491;
    var $511 = $510 * .04081054404377937;
    var $512 = $491 + $511;
    HEAPF32[$507 >> 2] = $512;
    HEAPF32[$152 >> 2] = $512;
    var $513 = ($494 | 0) == 0;
    if ($513) {
      label = 40;
      break;
    } else {
      var $_in = $494;
      var $493 = $500;
      var $492 = $506;
      var $491 = $512;
      label = 39;
      break;
    }
   case 40:
    var $514 = ($384 & 65535) > 2;
    if ($514) {
      label = 41;
      break;
    } else {
      var $total_sroa_3_1 = 0;
      var $total_sroa_2_1 = 0;
      var $total_sroa_1_1 = 0;
      var $total_sroa_0_1 = 0;
      label = 44;
      break;
    }
   case 41:
    var $515 = HEAP16[5242964 >> 1];
    var $516 = ($515 & 65535) > 2;
    var $517 = $515 & 65535;
    var $518 = HEAP32[5264108 >> 2];
    var $row_5875 = 2;
    var $total_sroa_3_0 = 0;
    var $total_sroa_2_0 = 0;
    var $total_sroa_1_0 = 0;
    var $total_sroa_0_0 = 0;
    label = 42;
    break;
   case 42:
    var $total_sroa_0_0;
    var $total_sroa_1_0;
    var $total_sroa_2_0;
    var $total_sroa_3_0;
    var $row_5875;
    if ($516) {
      label = 43;
      break;
    } else {
      var $total_sroa_3_3 = $total_sroa_3_0;
      var $total_sroa_2_3 = $total_sroa_2_0;
      var $total_sroa_1_3 = $total_sroa_1_0;
      var $total_sroa_0_3 = $total_sroa_0_0;
      label = 47;
      break;
    }
   case 43:
    var $519 = $517 * $row_5875 & -1;
    var $col_1873 = 2;
    var $total_sroa_3_2 = $total_sroa_3_0;
    var $total_sroa_2_2 = $total_sroa_2_0;
    var $total_sroa_1_2 = $total_sroa_1_0;
    var $total_sroa_0_2 = $total_sroa_0_0;
    label = 46;
    break;
   case 44:
    var $total_sroa_0_1;
    var $total_sroa_1_1;
    var $total_sroa_2_1;
    var $total_sroa_3_1;
    if ($490) {
      label = 61;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $520 = $total_sroa_3_1 | 0;
    var $521 = $520 * 100;
    var $522 = $487 * .5;
    var $523 = $522;
    var $524 = $total_sroa_0_1 | 0;
    var $525 = $524 / $521;
    var $526 = $523 + $525;
    var $527 = $488 * .5;
    var $528 = $527;
    var $529 = $total_sroa_1_1 | 0;
    var $530 = $529 / $521;
    var $531 = $528 + $530;
    var $532 = $489 * .5;
    var $533 = $532;
    var $534 = $total_sroa_2_1 | 0;
    var $535 = $534 / $521;
    var $536 = $533 + $535;
    var $row_6869 = 0;
    label = 50;
    break;
   case 46:
    var $total_sroa_0_2;
    var $total_sroa_1_2;
    var $total_sroa_2_2;
    var $total_sroa_3_2;
    var $col_1873;
    var $538 = $519 + $col_1873 | 0;
    var $539 = $518 + ($538 << 3) | 0;
    var $540 = HEAP16[$539 >> 1];
    var $541 = $540 << 16 >> 16;
    var $542 = $total_sroa_0_2 + $541 | 0;
    var $543 = $518 + ($538 << 3) + 2 | 0;
    var $544 = HEAP16[$543 >> 1];
    var $545 = $544 << 16 >> 16;
    var $546 = $total_sroa_1_2 + $545 | 0;
    var $547 = $518 + ($538 << 3) + 4 | 0;
    var $548 = HEAP16[$547 >> 1];
    var $549 = $548 << 16 >> 16;
    var $550 = $total_sroa_2_2 + $549 | 0;
    var $551 = $total_sroa_3_2 + 1 | 0;
    var $552 = $col_1873 + 4 | 0;
    var $553 = ($552 | 0) < ($517 | 0);
    if ($553) {
      var $col_1873 = $552;
      var $total_sroa_3_2 = $551;
      var $total_sroa_2_2 = $550;
      var $total_sroa_1_2 = $546;
      var $total_sroa_0_2 = $542;
      label = 46;
      break;
    } else {
      var $total_sroa_3_3 = $551;
      var $total_sroa_2_3 = $550;
      var $total_sroa_1_3 = $546;
      var $total_sroa_0_3 = $542;
      label = 47;
      break;
    }
   case 47:
    var $total_sroa_0_3;
    var $total_sroa_1_3;
    var $total_sroa_2_3;
    var $total_sroa_3_3;
    var $554 = $row_5875 + 4 | 0;
    var $555 = ($554 | 0) < ($386 | 0);
    if ($555) {
      var $row_5875 = $554;
      var $total_sroa_3_0 = $total_sroa_3_3;
      var $total_sroa_2_0 = $total_sroa_2_3;
      var $total_sroa_1_0 = $total_sroa_1_3;
      var $total_sroa_0_0 = $total_sroa_0_3;
      label = 42;
      break;
    } else {
      var $total_sroa_3_1 = $total_sroa_3_3;
      var $total_sroa_2_1 = $total_sroa_2_3;
      var $total_sroa_1_1 = $total_sroa_1_3;
      var $total_sroa_0_1 = $total_sroa_0_3;
      label = 44;
      break;
    }
   case 48:
    var $556;
    var $557 = $556 << 16 >> 16 == 0;
    if ($557) {
      label = 61;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $558 = $dim + 8 | 0;
    var $559 = $265 | 0;
    var $560 = $ddft + 24 | 0;
    var $561 = $ddft + 48 | 0;
    var $562 = $ddft | 0;
    var $563 = $ddft + 28 | 0;
    var $564 = $ddft + 52 | 0;
    var $565 = $ddft + 4 | 0;
    var $566 = $ddft + 32 | 0;
    var $567 = $ddft + 56 | 0;
    var $568 = $ddft + 8 | 0;
    var $569 = $ddft + 36 | 0;
    var $570 = $ddft + 60 | 0;
    var $571 = $ddft + 12 | 0;
    var $572 = $ddft + 40 | 0;
    var $573 = $ddft + 64 | 0;
    var $574 = $ddft + 16 | 0;
    var $575 = $ddft + 44 | 0;
    var $576 = $ddft + 68 | 0;
    var $577 = $ddft + 20 | 0;
    var $578 = $ipix | 0;
    var $579 = $ddft + 12 | 0;
    var $580 = $ddft + 8 | 0;
    var $581 = $ipix + 4 | 0;
    var $582 = $ddft + 20 | 0;
    var $583 = $ddft + 16 | 0;
    var $584 = $ipix + 8 | 0;
    var $_pre144 = HEAP16[5242964 >> 1];
    var $_pre145 = HEAP32[5264108 >> 2];
    var $row_7863 = 0;
    var $604 = $_pre144;
    var $603 = $257;
    label = 51;
    break;
   case 50:
    var $row_6869;
    var $585 = $269 + $row_6869 * 12 | 0;
    var $586 = HEAPF32[$585 >> 2];
    var $587 = $586;
    var $588 = $526 + $587;
    var $589 = $588;
    HEAPF32[$585 >> 2] = $589;
    var $590 = $269 + $row_6869 * 12 + 4 | 0;
    var $591 = HEAPF32[$590 >> 2];
    var $592 = $591;
    var $593 = $531 + $592;
    var $594 = $593;
    HEAPF32[$590 >> 2] = $594;
    var $595 = $269 + $row_6869 * 12 + 8 | 0;
    var $596 = HEAPF32[$595 >> 2];
    var $597 = $596;
    var $598 = $536 + $597;
    var $599 = $598;
    HEAPF32[$595 >> 2] = $599;
    var $600 = $row_6869 + 1 | 0;
    var $601 = ($600 | 0) < ($386 | 0);
    if ($601) {
      var $row_6869 = $600;
      label = 50;
      break;
    } else {
      var $556 = $384;
      label = 48;
      break;
    }
   case 51:
    var $603;
    var $604;
    var $row_7863;
    var $605 = $row_7863 | 0;
    var $606 = $556 & 65535;
    var $addconv684 = $606 - 1 | 0;
    var $607 = $addconv684 | 0;
    var $608 = $605 / $607;
    var $609 = HEAPF32[$560 >> 2];
    var $610 = $609;
    var $611 = HEAPF32[$561 >> 2];
    var $612 = $611 - $609;
    var $613 = $612;
    var $614 = $608 * $613;
    var $615 = $610 + $614;
    var $616 = $615;
    HEAPF32[$562 >> 2] = $616;
    var $617 = HEAPF32[$563 >> 2];
    var $618 = $617;
    var $619 = HEAPF32[$564 >> 2];
    var $620 = $619 - $617;
    var $621 = $620;
    var $622 = $608 * $621;
    var $623 = $618 + $622;
    var $624 = $623;
    HEAPF32[$565 >> 2] = $624;
    var $625 = HEAPF32[$566 >> 2];
    var $626 = $625;
    var $627 = HEAPF32[$567 >> 2];
    var $628 = $627 - $625;
    var $629 = $628;
    var $630 = $608 * $629;
    var $631 = $626 + $630;
    var $632 = $631;
    HEAPF32[$568 >> 2] = $632;
    var $633 = HEAPF32[$569 >> 2];
    var $634 = $633;
    var $635 = HEAPF32[$570 >> 2];
    var $636 = $635 - $633;
    var $637 = $636;
    var $638 = $608 * $637;
    var $639 = $634 + $638;
    var $640 = $639;
    HEAPF32[$571 >> 2] = $640;
    var $641 = HEAPF32[$572 >> 2];
    var $642 = $641;
    var $643 = HEAPF32[$573 >> 2];
    var $644 = $643 - $641;
    var $645 = $644;
    var $646 = $608 * $645;
    var $647 = $642 + $646;
    var $648 = $647;
    HEAPF32[$574 >> 2] = $648;
    var $649 = HEAPF32[$575 >> 2];
    var $650 = $649;
    var $651 = HEAPF32[$576 >> 2];
    var $652 = $651 - $649;
    var $653 = $652;
    var $654 = $608 * $653;
    var $655 = $650 + $654;
    var $656 = $655;
    HEAPF32[$577 >> 2] = $656;
    var $657 = $604 & 65535;
    var $658 = $657 * $row_7863 & -1;
    var $659 = $_pre145 + ($658 << 3) | 0;
    var $prev_sroa_0_0_copyload = HEAP16[$659 >> 1];
    var $prev_sroa_1_2__idx127 = $_pre145 + ($658 << 3) + 2 | 0;
    var $prev_sroa_1_2_copyload = HEAP16[$prev_sroa_1_2__idx127 >> 1];
    var $prev_sroa_2_4__idx128 = $_pre145 + ($658 << 3) + 4 | 0;
    var $prev_sroa_2_4_copyload = HEAP16[$prev_sroa_2_4__idx128 >> 1];
    var $660 = HEAP32[$558 >> 2];
    var $661 = $660 - 1 | 0;
    var $662 = $661 >>> 0;
    var $663 = $608 * $662;
    var $664 = $663;
    var $665 = $664 & -1;
    var $666 = ($665 | 0) == ($661 | 0);
    var $667 = $666 << 31 >> 31;
    var $irow_0 = $667 + $665 | 0;
    var $668 = $irow_0 | 0;
    var $669 = $664 - $668;
    var $670 = ($603 | 0) == 0;
    if ($670) {
      label = 54;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $671 = $603 * $irow_0 & -1;
    var $672 = 1 - $669;
    var $673 = $irow_0 + 1 | 0;
    var $674 = $603 * $673 & -1;
    var $i_8846 = 0;
    label = 53;
    break;
   case 53:
    var $i_8846;
    var $676 = $671 + $i_8846 | 0;
    var $677 = $674 + $i_8846 | 0;
    var $678 = $253 + $676 * 12 | 0;
    var $679 = HEAPF32[$678 >> 2];
    var $680 = $672 * $679;
    var $681 = $253 + $677 * 12 | 0;
    var $682 = HEAPF32[$681 >> 2];
    var $683 = $669 * $682;
    var $684 = $680 + $683;
    var $685 = $259 + $i_8846 * 12 | 0;
    HEAPF32[$685 >> 2] = $684;
    var $686 = $253 + $676 * 12 + 4 | 0;
    var $687 = HEAPF32[$686 >> 2];
    var $688 = $672 * $687;
    var $689 = $253 + $677 * 12 + 4 | 0;
    var $690 = HEAPF32[$689 >> 2];
    var $691 = $669 * $690;
    var $692 = $688 + $691;
    var $693 = $259 + $i_8846 * 12 + 4 | 0;
    HEAPF32[$693 >> 2] = $692;
    var $694 = $253 + $676 * 12 + 8 | 0;
    var $695 = HEAPF32[$694 >> 2];
    var $696 = $672 * $695;
    var $697 = $253 + $677 * 12 + 8 | 0;
    var $698 = HEAPF32[$697 >> 2];
    var $699 = $669 * $698;
    var $700 = $696 + $699;
    var $701 = $259 + $i_8846 * 12 + 8 | 0;
    HEAPF32[$701 >> 2] = $700;
    var $702 = $i_8846 + 1 | 0;
    var $703 = $702 >>> 0 < $603 >>> 0;
    if ($703) {
      var $i_8846 = $702;
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $704 = $604 << 16 >> 16 == 0;
    if ($704) {
      var $823 = 0;
      label = 59;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $705 = $269 + $row_7863 * 12 | 0;
    var $706 = $269 + $row_7863 * 12 + 4 | 0;
    var $707 = $269 + $row_7863 * 12 + 8 | 0;
    var $col_2859 = 0;
    var $pix_0860 = $659;
    var $prev_sroa_2_0 = $prev_sroa_2_4_copyload;
    var $prev_sroa_1_0 = $prev_sroa_1_2_copyload;
    var $prev_sroa_0_0 = $prev_sroa_0_0_copyload;
    label = 56;
    break;
   case 56:
    var $prev_sroa_0_0;
    var $prev_sroa_1_0;
    var $prev_sroa_2_0;
    var $pix_0860;
    var $col_2859;
    var $708 = $col_2859 | 0;
    var $709 = HEAP16[$pix_0860 >> 1];
    var $710 = $709 << 16 >> 16;
    var $711 = $prev_sroa_0_0 << 16 >> 16;
    var $712 = $710 - $711 | 0;
    var $713 = $709 << 16 >> 16;
    var $714 = $712 * $712 & -1;
    var $715 = $714 >>> 14;
    var $716 = $715 + $712 | 0;
    var $717 = $716 | 0;
    var $718 = HEAPF32[$cfilt >> 2];
    var $719 = $718 * $717;
    var $720 = HEAPF32[$565 >> 2];
    var $721 = $719 - $720;
    var $722 = $721;
    var $723 = HEAPF32[$562 >> 2];
    var $724 = $723;
    var $725 = $_pre144 & 65535;
    var $726 = $725 | 0;
    var $727 = $708 / $726;
    var $728 = $727;
    var $729 = $728 - .5;
    var $730 = $724 * $729;
    var $731 = $722 - $730;
    var $732 = HEAPF32[$705 >> 2];
    var $733 = $732;
    var $734 = $731 - $733;
    var $735 = Math.floor($734);
    var $736 = $713 + $735;
    var $737 = $736 & -1;
    HEAP32[$578 >> 2] = $737;
    var $738 = $pix_0860 + 2 | 0;
    var $739 = HEAP16[$738 >> 1];
    var $740 = $739 << 16 >> 16;
    var $741 = $prev_sroa_1_0 << 16 >> 16;
    var $742 = $740 - $741 | 0;
    var $743 = $739 << 16 >> 16;
    var $744 = $742 * $742 & -1;
    var $745 = $744 >>> 14;
    var $746 = $745 + $742 | 0;
    var $747 = $746 | 0;
    var $748 = $718 * $747;
    var $749 = HEAPF32[$579 >> 2];
    var $750 = $748 - $749;
    var $751 = $750;
    var $752 = HEAPF32[$580 >> 2];
    var $753 = $752;
    var $754 = $753 * $729;
    var $755 = $751 - $754;
    var $756 = HEAPF32[$706 >> 2];
    var $757 = $756;
    var $758 = $755 - $757;
    var $759 = Math.floor($758);
    var $760 = $743 + $759;
    var $761 = $760 & -1;
    HEAP32[$581 >> 2] = $761;
    var $762 = $pix_0860 + 4 | 0;
    var $763 = HEAP16[$762 >> 1];
    var $764 = $763 << 16 >> 16;
    var $765 = $prev_sroa_2_0 << 16 >> 16;
    var $766 = $764 - $765 | 0;
    var $767 = $763 << 16 >> 16;
    var $768 = $766 * $766 & -1;
    var $769 = $768 >>> 14;
    var $770 = $769 + $766 | 0;
    var $771 = $770 | 0;
    var $772 = $718 * $771;
    var $773 = HEAPF32[$582 >> 2];
    var $774 = $772 - $773;
    var $775 = $774;
    var $776 = HEAPF32[$583 >> 2];
    var $777 = $776;
    var $778 = $777 * $729;
    var $779 = $775 - $778;
    var $780 = HEAPF32[$707 >> 2];
    var $781 = $780;
    var $782 = $779 - $781;
    var $783 = Math.floor($782);
    var $784 = $767 + $783;
    var $785 = $784 & -1;
    HEAP32[$584 >> 2] = $785;
    var $786 = $737 * $737 & -1;
    var $787 = $786 >>> 14;
    var $788 = $787 * $737 & -1;
    var $789 = $788 >> 14;
    var $790 = $785 * $761 & -1;
    var $791 = $790 >> 14;
    var $792 = $761 * $761 & -1;
    var $793 = $792 >>> 14;
    var $794 = $793 * $761 & -1;
    var $795 = $794 >> 14;
    var $796 = $737 * $785 & -1;
    var $797 = $796 >> 14;
    var $798 = $785 * $785 & -1;
    var $799 = $798 >>> 14;
    var $800 = $799 * $785 & -1;
    var $801 = $800 >> 14;
    var $802 = $761 * $737 & -1;
    var $803 = $802 >> 14;
    var $804 = ($col_2859 | 0) / ($265 | 0) & -1;
    var $805 = ($col_2859 | 0) % ($265 | 0);
    var $806 = $265 - $805 | 0;
    var $807 = $806 | 0;
    var $808 = $804 + 1 | 0;
    var $809 = $805 | 0;
    var $810 = $787 | 0;
    var $811 = $793 | 0;
    var $812 = $799 | 0;
    var $813 = $803 | 0;
    var $814 = $797 | 0;
    var $815 = $791 | 0;
    var $816 = $789 | 0;
    var $817 = $795 | 0;
    var $818 = $801 | 0;
    var $c_25858 = 0;
    var $1909 = $737;
    label = 156;
    break;
   case 57:
    var $820 = $col_2859 + 1 | 0;
    var $821 = ($820 | 0) < ($725 | 0);
    if ($821) {
      label = 58;
      break;
    } else {
      var $823 = $_pre144;
      label = 59;
      break;
    }
   case 58:
    var $822 = $pix_0860 + 8 | 0;
    var $col_2859 = $820;
    var $pix_0860 = $822;
    var $prev_sroa_2_0 = $763;
    var $prev_sroa_1_0 = $739;
    var $prev_sroa_0_0 = $709;
    label = 56;
    break;
   case 59:
    var $823;
    var $824 = $row_7863 + 1 | 0;
    var $825 = ($824 | 0) < ($606 | 0);
    if ($825) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $_pre188 = HEAP32[$256 >> 2];
    var $row_7863 = $824;
    var $604 = $823;
    var $603 = $_pre188;
    label = 51;
    break;
   case 61:
    _free($268);
    _free($258);
    _free($252);
    var $826 = _foveon_camf_matrix($251, 5580256);
    var $827 = $826;
    var $828 = ($826 | 0) == 0;
    if ($828) {
      label = 74;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $829 = HEAP32[$251 >> 2];
    var $830 = ($829 | 0) == 0;
    if ($830) {
      label = 73;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $831 = HEAP32[$11 >> 2];
    var $832 = $keep + 4 | 0;
    var $833 = HEAP32[$832 >> 2];
    var $_pre143 = HEAP16[5398712 >> 1];
    var $i_10838 = 0;
    label = 64;
    break;
   case 64:
    var $i_10838;
    var $835 = $827 + ($i_10838 << 2) | 0;
    var $836 = HEAP32[$835 >> 2];
    var $837 = $836 >>> 8;
    var $838 = $837 & 4095;
    var $839 = $838 - $831 | 0;
    var $840 = $836 >>> 20;
    var $841 = $840 - $833 | 0;
    var $842 = $841 - 1 | 0;
    var $843 = $_pre143 & 65535;
    var $844 = $843 - 3 | 0;
    var $845 = $842 >>> 0 > $844 >>> 0;
    if ($845) {
      label = 72;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $847 = $839 - 1 | 0;
    var $848 = HEAP16[5242964 >> 1];
    var $849 = $848 & 65535;
    var $850 = $849 - 3 | 0;
    var $851 = $847 >>> 0 > $850 >>> 0;
    if ($851) {
      label = 72;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $853 = HEAP32[5264108 >> 2];
    var $j_4832 = 0;
    var $sum_0833 = 0;
    var $fsum_sroa_2_2 = 0;
    var $fsum_sroa_1_2 = 0;
    var $fsum_sroa_0_2 = 0;
    label = 67;
    break;
   case 67:
    var $fsum_sroa_0_2;
    var $fsum_sroa_1_2;
    var $fsum_sroa_2_2;
    var $sum_0833;
    var $j_4832;
    var $855 = 1 << $j_4832;
    var $856 = $836 & $855;
    var $857 = ($856 | 0) == 0;
    if ($857) {
      var $sum_1 = $sum_0833;
      var $fsum_sroa_2_3 = $fsum_sroa_2_2;
      var $fsum_sroa_1_3 = $fsum_sroa_1_2;
      var $fsum_sroa_0_3 = $fsum_sroa_0_2;
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $859 = $j_4832 << 1;
    var $860 = 5398912 + ($859 << 1) | 0;
    var $861 = HEAP16[$860 >> 1];
    var $862 = $861 << 16 >> 16;
    var $863 = $862 + $841 | 0;
    var $864 = $863 * $849 & -1;
    var $865 = $864 + $839 | 0;
    var $866 = $859 | 1;
    var $867 = 5398912 + ($866 << 1) | 0;
    var $868 = HEAP16[$867 >> 1];
    var $869 = $868 << 16 >> 16;
    var $870 = $865 + $869 | 0;
    var $871 = $853 + ($870 << 3) | 0;
    var $872 = HEAP16[$871 >> 1];
    var $873 = $872 << 16 >> 16;
    var $874 = $fsum_sroa_0_2 + $873;
    var $875 = $853 + ($870 << 3) + 2 | 0;
    var $876 = HEAP16[$875 >> 1];
    var $877 = $876 << 16 >> 16;
    var $878 = $fsum_sroa_1_2 + $877;
    var $879 = $853 + ($870 << 3) + 4 | 0;
    var $880 = HEAP16[$879 >> 1];
    var $881 = $880 << 16 >> 16;
    var $882 = $fsum_sroa_2_2 + $881;
    var $883 = $sum_0833 + 1 | 0;
    var $sum_1 = $883;
    var $fsum_sroa_2_3 = $882;
    var $fsum_sroa_1_3 = $878;
    var $fsum_sroa_0_3 = $874;
    label = 69;
    break;
   case 69:
    var $fsum_sroa_0_3;
    var $fsum_sroa_1_3;
    var $fsum_sroa_2_3;
    var $sum_1;
    var $885 = $j_4832 + 1 | 0;
    var $exitcond1001 = ($885 | 0) == 8;
    if ($exitcond1001) {
      label = 70;
      break;
    } else {
      var $j_4832 = $885;
      var $sum_0833 = $sum_1;
      var $fsum_sroa_2_2 = $fsum_sroa_2_3;
      var $fsum_sroa_1_2 = $fsum_sroa_1_3;
      var $fsum_sroa_0_2 = $fsum_sroa_0_3;
      label = 67;
      break;
    }
   case 70:
    var $887 = ($sum_1 | 0) == 0;
    if ($887) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $888 = $sum_1 | 0;
    var $889 = $fsum_sroa_0_3 / $888;
    var $890 = $889 & -1;
    var $891 = $849 * $841 & -1;
    var $892 = $891 + $839 | 0;
    var $893 = $853 + ($892 << 3) | 0;
    HEAP16[$893 >> 1] = $890;
    var $894 = $fsum_sroa_1_3 / $888;
    var $895 = $894 & -1;
    var $896 = $853 + ($892 << 3) + 2 | 0;
    HEAP16[$896 >> 1] = $895;
    var $897 = $fsum_sroa_2_3 / $888;
    var $898 = $897 & -1;
    var $899 = $853 + ($892 << 3) + 4 | 0;
    HEAP16[$899 >> 1] = $898;
    label = 72;
    break;
   case 72:
    var $901 = $i_10838 + 1 | 0;
    var $902 = $901 >>> 0 < $829 >>> 0;
    if ($902) {
      var $i_10838 = $901;
      label = 64;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    _free($826);
    label = 74;
    break;
   case 74:
    var $903 = HEAP16[5242964 >> 1];
    var $904 = $903 & 65535;
    var $905 = $904 * 5 & -1;
    var $906 = _calloc($905, 12);
    var $907 = $906;
    _merror($906, 5580032);
    var $908 = HEAP16[5242964 >> 1];
    var $909 = $908 & 65535;
    var $910 = $907 + $909 * 12 | 0;
    var $911 = $909 << 1;
    var $912 = $907 + $911 * 12 | 0;
    var $913 = $909 * 3 & -1;
    var $914 = $907 + $913 * 12 | 0;
    var $915 = $909 << 2;
    var $916 = $907 + $915 * 12 | 0;
    var $917 = HEAP16[5398712 >> 1];
    var $918 = $917 & 65535;
    var $919 = $918 - 2 | 0;
    var $920 = ($919 | 0) > 2;
    if ($920) {
      var $row_8826 = 2;
      var $smlast_0827 = -1;
      var $smred_p_0828 = 0;
      var $indvars_iv995 = 4;
      var $smrow_sroa_4_0 = $916;
      var $smrow_sroa_3_0 = $914;
      var $smrow_sroa_2_0 = $912;
      var $smrow_sroa_1_0 = $910;
      var $smrow_sroa_0_0 = $907;
      label = 75;
      break;
    } else {
      var $smrow_sroa_4_3 = $916;
      var $smrow_sroa_3_3 = $914;
      var $smrow_sroa_2_3 = $912;
      var $smrow_sroa_1_3 = $910;
      var $smrow_sroa_0_3 = $907;
      label = 84;
      break;
    }
   case 75:
    var $smrow_sroa_0_0;
    var $smrow_sroa_1_0;
    var $smrow_sroa_2_0;
    var $smrow_sroa_3_0;
    var $smrow_sroa_4_0;
    var $indvars_iv995;
    var $smred_p_0828;
    var $smlast_0827;
    var $row_8826;
    var $921 = $row_8826 + 2 | 0;
    var $922 = ($smlast_0827 | 0) < ($921 | 0);
    if ($922) {
      var $smlast_1815 = $smlast_0827;
      var $smrow_sroa_4_1 = $smrow_sroa_4_0;
      var $smrow_sroa_3_1 = $smrow_sroa_3_0;
      var $smrow_sroa_2_1 = $smrow_sroa_2_0;
      var $smrow_sroa_1_1 = $smrow_sroa_1_0;
      var $smrow_sroa_0_1 = $smrow_sroa_0_0;
      label = 77;
      break;
    } else {
      var $smlast_1_lcssa = $smlast_0827;
      var $smrow_sroa_4_2 = $smrow_sroa_4_0;
      var $smrow_sroa_3_2 = $smrow_sroa_3_0;
      var $smrow_sroa_2_2 = $smrow_sroa_2_0;
      var $smrow_sroa_1_2 = $smrow_sroa_1_0;
      var $smrow_sroa_0_2 = $smrow_sroa_0_0;
      label = 80;
      break;
    }
   case 76:
    var $exitcond997 = ($923 | 0) == ($indvars_iv995 | 0);
    if ($exitcond997) {
      var $smlast_1_lcssa = $indvars_iv995;
      var $smrow_sroa_4_2 = $smrow_sroa_0_1;
      var $smrow_sroa_3_2 = $smrow_sroa_4_1;
      var $smrow_sroa_2_2 = $smrow_sroa_3_1;
      var $smrow_sroa_1_2 = $smrow_sroa_2_1;
      var $smrow_sroa_0_2 = $smrow_sroa_1_1;
      label = 80;
      break;
    } else {
      var $smrow_sroa_1_1 = $smrow_sroa_2_1;
      var $smrow_sroa_2_1 = $smrow_sroa_3_1;
      var $smrow_sroa_3_1 = $smrow_sroa_4_1;
      var $smrow_sroa_4_1 = $smrow_sroa_0_1;
      var $smlast_1815 = $923;
      var $smrow_sroa_0_1 = $smrow_sroa_1_1;
      label = 77;
      break;
    }
   case 77:
    var $smrow_sroa_0_1;
    var $smrow_sroa_1_1;
    var $smrow_sroa_2_1;
    var $smrow_sroa_3_1;
    var $smrow_sroa_4_1;
    var $smlast_1815;
    var $923 = $smlast_1815 + 1 | 0;
    var $924 = $909 - 2 | 0;
    var $925 = ($924 | 0) > 2;
    if ($925) {
      label = 78;
      break;
    } else {
      label = 76;
      break;
    }
   case 78:
    var $926 = $909 * $923 & -1;
    var $927 = HEAP32[5264108 >> 2];
    var $928 = $926 + 2 | 0;
    var $929 = $927 + ($928 << 3) | 0;
    var $col_3810 = 2;
    var $pix_1811 = $929;
    label = 79;
    break;
   case 79:
    var $pix_1811;
    var $col_3810;
    var $931 = HEAP16[$pix_1811 >> 1];
    var $932 = $931 << 16 >> 16;
    var $933 = $932 * 6 & -1;
    var $934 = $pix_1811 - 8 | 0;
    var $935 = HEAP16[$934 >> 1];
    var $936 = $935 << 16 >> 16;
    var $937 = $pix_1811 + 8 | 0;
    var $938 = HEAP16[$937 >> 1];
    var $939 = $938 << 16 >> 16;
    var $940 = $939 + $936 | 0;
    var $941 = $940 << 2;
    var $942 = $pix_1811 - 16 | 0;
    var $943 = HEAP16[$942 >> 1];
    var $944 = $943 << 16 >> 16;
    var $945 = $pix_1811 + 16 | 0;
    var $946 = HEAP16[$945 >> 1];
    var $947 = $946 << 16 >> 16;
    var $948 = $933 + 8 | 0;
    var $949 = $948 + $944 | 0;
    var $950 = $949 + $941 | 0;
    var $951 = $950 + $947 | 0;
    var $952 = $951 >> 4;
    var $953 = $smrow_sroa_0_1 + $col_3810 * 12 | 0;
    HEAP32[$953 >> 2] = $952;
    var $954 = $col_3810 + 1 | 0;
    var $955 = ($954 | 0) < ($924 | 0);
    if ($955) {
      var $col_3810 = $954;
      var $pix_1811 = $937;
      label = 79;
      break;
    } else {
      label = 76;
      break;
    }
   case 80:
    var $smrow_sroa_0_2;
    var $smrow_sroa_1_2;
    var $smrow_sroa_2_2;
    var $smrow_sroa_3_2;
    var $smrow_sroa_4_2;
    var $smlast_1_lcssa;
    var $956 = $908 & 65535;
    var $957 = $956 - 2 | 0;
    var $958 = ($957 | 0) > 2;
    if ($958) {
      label = 81;
      break;
    } else {
      var $smred_p_1_lcssa = $smred_p_0828;
      label = 83;
      break;
    }
   case 81:
    var $959 = $956 * $row_8826 & -1;
    var $960 = HEAP32[5264108 >> 2];
    var $961 = $959 + 2 | 0;
    var $962 = $960 + ($961 << 3) | 0;
    var $col_4818 = 2;
    var $smred_p_1819 = $smred_p_0828;
    var $pix_2820 = $962;
    label = 82;
    break;
   case 82:
    var $pix_2820;
    var $smred_p_1819;
    var $col_4818;
    var $964 = $smrow_sroa_2_2 + $col_4818 * 12 | 0;
    var $965 = HEAP32[$964 >> 2];
    var $966 = $965 * 6 & -1;
    var $967 = $smrow_sroa_1_2 + $col_4818 * 12 | 0;
    var $968 = HEAP32[$967 >> 2];
    var $969 = $smrow_sroa_3_2 + $col_4818 * 12 | 0;
    var $970 = HEAP32[$969 >> 2];
    var $971 = $970 + $968 | 0;
    var $972 = $971 << 2;
    var $973 = $smrow_sroa_0_2 + $col_4818 * 12 | 0;
    var $974 = HEAP32[$973 >> 2];
    var $975 = $smrow_sroa_4_2 + $col_4818 * 12 | 0;
    var $976 = HEAP32[$975 >> 2];
    var $977 = $966 + 8 | 0;
    var $978 = $977 + $972 | 0;
    var $979 = $978 + $974 | 0;
    var $980 = $979 + $976 | 0;
    var $981 = $980 >> 4;
    var $982 = ($col_4818 | 0) == 2;
    var $_smred_p_1 = $982 ? $981 : $smred_p_1819;
    var $983 = HEAP16[$pix_2820 >> 1];
    var $984 = $983 << 16 >> 16;
    var $985 = $981 * 7 & -1;
    var $986 = $985 + $_smred_p_1 | 0;
    var $987 = $986 >> 3;
    var $988 = $984 - $987 | 0;
    var $989 = $988 >> 3;
    var $990 = $989 + $984 | 0;
    var $991 = ($990 | 0) > 32e3;
    var $992 = $990 & 65535;
    var $993 = $991 ? 32e3 : $992;
    HEAP16[$pix_2820 >> 1] = $993;
    var $994 = $pix_2820 + 8 | 0;
    var $995 = $col_4818 + 1 | 0;
    var $996 = ($995 | 0) < ($957 | 0);
    if ($996) {
      var $col_4818 = $995;
      var $smred_p_1819 = $981;
      var $pix_2820 = $994;
      label = 82;
      break;
    } else {
      var $smred_p_1_lcssa = $981;
      label = 83;
      break;
    }
   case 83:
    var $smred_p_1_lcssa;
    var $997 = $row_8826 + 1 | 0;
    var $998 = ($997 | 0) < ($919 | 0);
    var $indvars_iv_next996 = $indvars_iv995 + 1 | 0;
    if ($998) {
      var $row_8826 = $997;
      var $smlast_0827 = $smlast_1_lcssa;
      var $smred_p_0828 = $smred_p_1_lcssa;
      var $indvars_iv995 = $indvars_iv_next996;
      var $smrow_sroa_4_0 = $smrow_sroa_4_2;
      var $smrow_sroa_3_0 = $smrow_sroa_3_2;
      var $smrow_sroa_2_0 = $smrow_sroa_2_2;
      var $smrow_sroa_1_0 = $smrow_sroa_1_2;
      var $smrow_sroa_0_0 = $smrow_sroa_0_2;
      label = 75;
      break;
    } else {
      var $smrow_sroa_4_3 = $smrow_sroa_4_2;
      var $smrow_sroa_3_3 = $smrow_sroa_3_2;
      var $smrow_sroa_2_3 = $smrow_sroa_2_2;
      var $smrow_sroa_1_3 = $smrow_sroa_1_2;
      var $smrow_sroa_0_3 = $smrow_sroa_0_2;
      label = 84;
      break;
    }
   case 84:
    var $smrow_sroa_0_3;
    var $smrow_sroa_1_3;
    var $smrow_sroa_2_3;
    var $smrow_sroa_3_3;
    var $smrow_sroa_4_3;
    var $999 = $satlev | 0;
    var $1000 = HEAP32[$999 >> 2];
    var $1001 = $1000 | 0;
    var $1002 = HEAPF32[$185 >> 2];
    var $1003 = $1001 / $1002;
    var $1004 = $1003 & -1;
    var $1005 = ($1004 | 0) < 65535;
    var $_min_0 = $1005 ? $1004 : 65535;
    var $1006 = $satlev + 4 | 0;
    var $1007 = HEAP32[$1006 >> 2];
    var $1008 = $1007 | 0;
    var $1009 = HEAPF32[$195 >> 2];
    var $1010 = $1008 / $1009;
    var $1011 = $1010 & -1;
    var $1012 = ($_min_0 | 0) > ($1011 | 0);
    var $_min_0_1 = $1012 ? $1011 : $_min_0;
    var $1013 = $satlev + 8 | 0;
    var $1014 = HEAP32[$1013 >> 2];
    var $1015 = $1014 | 0;
    var $1016 = HEAPF32[$205 >> 2];
    var $1017 = $1015 / $1016;
    var $1018 = $1017 & -1;
    var $1019 = ($_min_0_1 | 0) > ($1018 | 0);
    var $_min_0_2 = $1019 ? $1018 : $_min_0_1;
    var $1020 = $_min_0_2 * 9 & -1;
    var $1021 = $1020 >> 4;
    var $1022 = HEAP32[5264108 >> 2];
    var $1023 = $1022 | 0;
    var $1024 = $909 * $918 & -1;
    var $1025 = $1022 + ($1024 << 3) | 0;
    var $1026 = ($1024 | 0) != 0;
    if ($1026) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    var $1027 = $1021 << 1;
    var $pix_3800 = $1023;
    label = 87;
    break;
   case 86:
    if ($920) {
      var $row_9792 = 2;
      var $smlast_2793 = -1;
      var $indvars_iv985 = 4;
      var $smrow_sroa_4_4 = $smrow_sroa_4_3;
      var $smrow_sroa_3_4 = $smrow_sroa_3_3;
      var $smrow_sroa_2_4 = $smrow_sroa_2_3;
      var $smrow_sroa_1_4 = $smrow_sroa_1_3;
      var $smrow_sroa_0_4 = $smrow_sroa_0_3;
      label = 94;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_3;
      var $smrow_sroa_1_11 = $smrow_sroa_1_3;
      var $smrow_sroa_0_11 = $smrow_sroa_0_3;
      label = 116;
      break;
    }
   case 87:
    var $pix_3800;
    var $1029 = HEAP16[$pix_3800 >> 1];
    var $1030 = $1029 << 16 >> 16;
    var $1031 = ($1030 | 0) > ($1021 | 0);
    if ($1031) {
      label = 88;
      break;
    } else {
      label = 93;
      break;
    }
   case 88:
    var $1033 = $pix_3800 + 2 | 0;
    var $1034 = HEAP16[$1033 >> 1];
    var $1035 = $1034 << 16 >> 16;
    var $1036 = ($1035 | 0) > ($1021 | 0);
    if ($1036) {
      label = 89;
      break;
    } else {
      label = 93;
      break;
    }
   case 89:
    var $1038 = $pix_3800 + 4 | 0;
    var $1039 = HEAP16[$1038 >> 1];
    var $1040 = $1039 << 16 >> 16;
    var $1041 = ($1040 | 0) > ($1021 | 0);
    if ($1041) {
      label = 90;
      break;
    } else {
      label = 93;
      break;
    }
   case 90:
    var $1042 = ($1030 | 0) > ($1035 | 0);
    var $_min_2 = $1042 ? $1035 : $1030;
    var $1043 = ($1030 | 0) < ($1035 | 0);
    var $max_1 = $1043 ? $1035 : $1030;
    var $1044 = ($_min_2 | 0) > ($1040 | 0);
    var $_min_2_1 = $1044 ? $1040 : $_min_2;
    var $1045 = ($max_1 | 0) < ($1040 | 0);
    var $max_1_1 = $1045 ? $1040 : $max_1;
    var $1046 = ($_min_2_1 | 0) < ($1027 | 0);
    if ($1046) {
      label = 92;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $1048 = $max_1_1 & 65535;
    HEAP16[$1038 >> 1] = $1048;
    HEAP16[$1033 >> 1] = $1048;
    HEAP16[$pix_3800 >> 1] = $1048;
    label = 93;
    break;
   case 92:
    var $1049 = $_min_2_1 - $1021 | 0;
    var $1050 = $1049 << 14;
    var $1051 = ($1050 | 0) / ($1021 | 0) & -1;
    var $1052 = 16384 - $1051 | 0;
    var $1053 = $1052 * $1052 & -1;
    var $1054 = $1053 >>> 14;
    var $1055 = 16384 - $1054 | 0;
    var $1056 = $1055 * $1055 & -1;
    var $1057 = $1056 >>> 14;
    var $1058 = $max_1_1 - $1030 | 0;
    var $1059 = $1058 * $1057 & -1;
    var $1060 = $1059 >>> 14;
    var $1061 = $1060 + $1030 | 0;
    var $1062 = $1061 & 65535;
    HEAP16[$pix_3800 >> 1] = $1062;
    var $1063 = $max_1_1 - $1035 | 0;
    var $1064 = $1063 * $1057 & -1;
    var $1065 = $1064 >>> 14;
    var $1066 = $1065 + $1035 | 0;
    var $1067 = $1066 & 65535;
    HEAP16[$1033 >> 1] = $1067;
    var $1068 = $max_1_1 - $1040 | 0;
    var $1069 = $1068 * $1057 & -1;
    var $1070 = $1069 >>> 14;
    var $1071 = $1070 + $1040 | 0;
    var $1072 = $1071 & 65535;
    HEAP16[$1038 >> 1] = $1072;
    label = 93;
    break;
   case 93:
    var $1074 = $pix_3800 + 8 | 0;
    var $1075 = $1074 >>> 0 < $1025 >>> 0;
    if ($1075) {
      var $pix_3800 = $1074;
      label = 87;
      break;
    } else {
      label = 86;
      break;
    }
   case 94:
    var $smrow_sroa_0_4;
    var $smrow_sroa_1_4;
    var $smrow_sroa_2_4;
    var $smrow_sroa_3_4;
    var $smrow_sroa_4_4;
    var $indvars_iv985;
    var $smlast_2793;
    var $row_9792;
    var $1076 = $row_9792 + 2 | 0;
    var $1077 = ($smlast_2793 | 0) < ($1076 | 0);
    if ($1077) {
      var $smlast_3782 = $smlast_2793;
      var $smrow_sroa_4_6 = $smrow_sroa_4_4;
      var $smrow_sroa_3_6 = $smrow_sroa_3_4;
      var $smrow_sroa_2_6 = $smrow_sroa_2_4;
      var $smrow_sroa_1_6 = $smrow_sroa_1_4;
      var $smrow_sroa_0_6 = $smrow_sroa_0_4;
      label = 97;
      break;
    } else {
      var $smlast_3_lcssa = $smlast_2793;
      var $smrow_sroa_4_7 = $smrow_sroa_4_4;
      var $smrow_sroa_3_7 = $smrow_sroa_3_4;
      var $smrow_sroa_2_7 = $smrow_sroa_2_4;
      var $smrow_sroa_1_7 = $smrow_sroa_1_4;
      var $smrow_sroa_0_7 = $smrow_sroa_0_4;
      label = 100;
      break;
    }
   case 95:
    var $smrow_sroa_0_5;
    var $smrow_sroa_1_5;
    var $smrow_sroa_2_5;
    var $smrow_sroa_3_5;
    var $smrow_sroa_4_5;
    if ($920) {
      var $row_10771 = 2;
      var $smlast_4772 = -1;
      var $indvars_iv = 4;
      var $smrow_sroa_4_8 = $smrow_sroa_4_5;
      var $smrow_sroa_3_8 = $smrow_sroa_3_5;
      var $smrow_sroa_2_8 = $smrow_sroa_2_5;
      var $smrow_sroa_1_8 = $smrow_sroa_1_5;
      var $smrow_sroa_0_8 = $smrow_sroa_0_5;
      label = 105;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_5;
      var $smrow_sroa_1_11 = $smrow_sroa_1_5;
      var $smrow_sroa_0_11 = $smrow_sroa_0_5;
      label = 116;
      break;
    }
   case 96:
    var $exitcond987 = ($1078 | 0) == ($indvars_iv985 | 0);
    if ($exitcond987) {
      var $smlast_3_lcssa = $indvars_iv985;
      var $smrow_sroa_4_7 = $smrow_sroa_0_6;
      var $smrow_sroa_3_7 = $smrow_sroa_4_6;
      var $smrow_sroa_2_7 = $smrow_sroa_3_6;
      var $smrow_sroa_1_7 = $smrow_sroa_2_6;
      var $smrow_sroa_0_7 = $smrow_sroa_1_6;
      label = 100;
      break;
    } else {
      var $smrow_sroa_1_6 = $smrow_sroa_2_6;
      var $smrow_sroa_2_6 = $smrow_sroa_3_6;
      var $smrow_sroa_3_6 = $smrow_sroa_4_6;
      var $smrow_sroa_4_6 = $smrow_sroa_0_6;
      var $smlast_3782 = $1078;
      var $smrow_sroa_0_6 = $smrow_sroa_1_6;
      label = 97;
      break;
    }
   case 97:
    var $smrow_sroa_0_6;
    var $smrow_sroa_1_6;
    var $smrow_sroa_2_6;
    var $smrow_sroa_3_6;
    var $smrow_sroa_4_6;
    var $smlast_3782;
    var $1078 = $smlast_3782 + 1 | 0;
    var $1079 = $909 - 2 | 0;
    var $1080 = ($1079 | 0) > 2;
    if ($1080) {
      label = 98;
      break;
    } else {
      label = 96;
      break;
    }
   case 98:
    var $1081 = $909 * $1078 & -1;
    var $1082 = $1081 + 2 | 0;
    var $1083 = $1022 + ($1082 << 3) | 0;
    var $col_5779 = 2;
    var $pix_4780 = $1083;
    label = 99;
    break;
   case 99:
    var $pix_4780;
    var $col_5779;
    var $1084 = $pix_4780 - 8 | 0;
    var $1085 = HEAP16[$1084 >> 1];
    var $1086 = $1085 << 16 >> 16;
    var $1087 = HEAP16[$pix_4780 >> 1];
    var $1088 = $1087 << 16 >> 16;
    var $1089 = $1088 << 1;
    var $1090 = $pix_4780 + 8 | 0;
    var $1091 = HEAP16[$1090 >> 1];
    var $1092 = $1091 << 16 >> 16;
    var $1093 = $1086 + 2 | 0;
    var $1094 = $1093 + $1089 | 0;
    var $1095 = $1094 + $1092 | 0;
    var $1096 = $1095 >> 2;
    var $1097 = $smrow_sroa_0_6 + $col_5779 * 12 | 0;
    HEAP32[$1097 >> 2] = $1096;
    var $1098 = $pix_4780 - 6 | 0;
    var $1099 = HEAP16[$1098 >> 1];
    var $1100 = $1099 << 16 >> 16;
    var $1101 = $pix_4780 + 2 | 0;
    var $1102 = HEAP16[$1101 >> 1];
    var $1103 = $1102 << 16 >> 16;
    var $1104 = $1103 << 1;
    var $1105 = $pix_4780 + 10 | 0;
    var $1106 = HEAP16[$1105 >> 1];
    var $1107 = $1106 << 16 >> 16;
    var $1108 = $1100 + 2 | 0;
    var $1109 = $1108 + $1104 | 0;
    var $1110 = $1109 + $1107 | 0;
    var $1111 = $1110 >> 2;
    var $1112 = $smrow_sroa_0_6 + $col_5779 * 12 + 4 | 0;
    HEAP32[$1112 >> 2] = $1111;
    var $1113 = $pix_4780 - 4 | 0;
    var $1114 = HEAP16[$1113 >> 1];
    var $1115 = $1114 << 16 >> 16;
    var $1116 = $pix_4780 + 4 | 0;
    var $1117 = HEAP16[$1116 >> 1];
    var $1118 = $1117 << 16 >> 16;
    var $1119 = $1118 << 1;
    var $1120 = $pix_4780 + 12 | 0;
    var $1121 = HEAP16[$1120 >> 1];
    var $1122 = $1121 << 16 >> 16;
    var $1123 = $1115 + 2 | 0;
    var $1124 = $1123 + $1119 | 0;
    var $1125 = $1124 + $1122 | 0;
    var $1126 = $1125 >> 2;
    var $1127 = $smrow_sroa_0_6 + $col_5779 * 12 + 8 | 0;
    HEAP32[$1127 >> 2] = $1126;
    var $1128 = $col_5779 + 1 | 0;
    var $1129 = ($1128 | 0) < ($1079 | 0);
    if ($1129) {
      var $col_5779 = $1128;
      var $pix_4780 = $1090;
      label = 99;
      break;
    } else {
      label = 96;
      break;
    }
   case 100:
    var $smrow_sroa_0_7;
    var $smrow_sroa_1_7;
    var $smrow_sroa_2_7;
    var $smrow_sroa_3_7;
    var $smrow_sroa_4_7;
    var $smlast_3_lcssa;
    var $1130 = $908 & 65535;
    var $1131 = $1130 - 2 | 0;
    var $1132 = ($1131 | 0) > 2;
    if ($1132) {
      label = 101;
      break;
    } else {
      label = 104;
      break;
    }
   case 101:
    var $1133 = $1130 * $row_9792 & -1;
    var $1134 = $1133 + 2 | 0;
    var $1135 = $1022 + ($1134 << 3) | 0;
    var $col_6788 = 2;
    var $pix_5789 = $1135;
    label = 102;
    break;
   case 102:
    var $pix_5789;
    var $col_6788;
    var $1137 = HEAP32[$250 >> 2];
    var $1138 = HEAP16[$pix_5789 >> 1];
    var $1139 = $1138 << 16 >> 16;
    var $1140 = $smrow_sroa_1_7 + $col_6788 * 12 | 0;
    var $1141 = HEAP32[$1140 >> 2];
    var $1142 = $smrow_sroa_2_7 + $col_6788 * 12 | 0;
    var $1143 = HEAP32[$1142 >> 2];
    var $1144 = $1143 << 1;
    var $1145 = $1144 + $1141 | 0;
    var $1146 = $smrow_sroa_3_7 + $col_6788 * 12 | 0;
    var $1147 = HEAP32[$1146 >> 2];
    var $1148 = $1145 + $1147 | 0;
    var $1149 = $1148 >> 2;
    var $1150 = $1139 - $1149 | 0;
    var $1151 = _foveon_apply_curve($1137, $1150);
    var $1152 = -$1151 | 0;
    var $1153 = $pix_5789 + 2 | 0;
    var $1154 = HEAP16[$1153 >> 1];
    var $1155 = $1154 << 16 >> 16;
    var $1156 = $smrow_sroa_1_7 + $col_6788 * 12 + 4 | 0;
    var $1157 = HEAP32[$1156 >> 2];
    var $1158 = $smrow_sroa_2_7 + $col_6788 * 12 + 4 | 0;
    var $1159 = HEAP32[$1158 >> 2];
    var $1160 = $1159 << 1;
    var $1161 = $1160 + $1157 | 0;
    var $1162 = $smrow_sroa_3_7 + $col_6788 * 12 + 4 | 0;
    var $1163 = HEAP32[$1162 >> 2];
    var $1164 = $1161 + $1163 | 0;
    var $1165 = $1164 >> 2;
    var $1166 = $1155 - $1165 | 0;
    var $1167 = _foveon_apply_curve($1137, $1166);
    var $1168 = -$1167 | 0;
    var $1169 = $pix_5789 + 4 | 0;
    var $1170 = HEAP16[$1169 >> 1];
    var $1171 = $1170 << 16 >> 16;
    var $1172 = $smrow_sroa_1_7 + $col_6788 * 12 + 8 | 0;
    var $1173 = HEAP32[$1172 >> 2];
    var $1174 = $smrow_sroa_2_7 + $col_6788 * 12 + 8 | 0;
    var $1175 = HEAP32[$1174 >> 2];
    var $1176 = $1175 << 1;
    var $1177 = $1176 + $1173 | 0;
    var $1178 = $smrow_sroa_3_7 + $col_6788 * 12 + 8 | 0;
    var $1179 = HEAP32[$1178 >> 2];
    var $1180 = $1177 + $1179 | 0;
    var $1181 = $1180 >> 2;
    var $1182 = $1171 - $1181 | 0;
    var $1183 = _foveon_apply_curve($1137, $1182);
    var $1184 = -$1183 | 0;
    var $sum = $1167 + $1151 | 0;
    var $1185 = -$sum | 0;
    var $1186 = $1185 - $1183 | 0;
    var $1187 = $1186 >>> 3;
    var $1188 = $1152 - $1187 | 0;
    var $1189 = $1138 & 65535;
    var $1190 = $1188 + $1189 | 0;
    var $1191 = $1190 & 65535;
    HEAP16[$pix_5789 >> 1] = $1191;
    var $1192 = $1168 - $1187 | 0;
    var $1193 = $1154 & 65535;
    var $1194 = $1192 + $1193 | 0;
    var $1195 = $1194 & 65535;
    HEAP16[$1153 >> 1] = $1195;
    var $1196 = $1184 - $1187 | 0;
    var $1197 = $1170 & 65535;
    var $1198 = $1196 + $1197 | 0;
    var $1199 = $1198 & 65535;
    HEAP16[$1169 >> 1] = $1199;
    var $1200 = $col_6788 + 1 | 0;
    var $1201 = ($1200 | 0) < ($1131 | 0);
    if ($1201) {
      label = 103;
      break;
    } else {
      label = 104;
      break;
    }
   case 103:
    var $1202 = $pix_5789 + 8 | 0;
    var $col_6788 = $1200;
    var $pix_5789 = $1202;
    label = 102;
    break;
   case 104:
    var $1203 = $row_9792 + 1 | 0;
    var $1204 = ($1203 | 0) < ($919 | 0);
    var $indvars_iv_next986 = $indvars_iv985 + 1 | 0;
    if ($1204) {
      var $row_9792 = $1203;
      var $smlast_2793 = $smlast_3_lcssa;
      var $indvars_iv985 = $indvars_iv_next986;
      var $smrow_sroa_4_4 = $smrow_sroa_4_7;
      var $smrow_sroa_3_4 = $smrow_sroa_3_7;
      var $smrow_sroa_2_4 = $smrow_sroa_2_7;
      var $smrow_sroa_1_4 = $smrow_sroa_1_7;
      var $smrow_sroa_0_4 = $smrow_sroa_0_7;
      label = 94;
      break;
    } else {
      var $smrow_sroa_4_5 = $smrow_sroa_4_7;
      var $smrow_sroa_3_5 = $smrow_sroa_3_7;
      var $smrow_sroa_2_5 = $smrow_sroa_2_7;
      var $smrow_sroa_1_5 = $smrow_sroa_1_7;
      var $smrow_sroa_0_5 = $smrow_sroa_0_7;
      label = 95;
      break;
    }
   case 105:
    var $smrow_sroa_0_8;
    var $smrow_sroa_1_8;
    var $smrow_sroa_2_8;
    var $smrow_sroa_3_8;
    var $smrow_sroa_4_8;
    var $indvars_iv;
    var $smlast_4772;
    var $row_10771;
    var $1205 = $row_10771 + 2 | 0;
    var $1206 = ($smlast_4772 | 0) < ($1205 | 0);
    if ($1206) {
      var $smlast_5757 = $smlast_4772;
      var $smrow_sroa_4_9 = $smrow_sroa_4_8;
      var $smrow_sroa_3_9 = $smrow_sroa_3_8;
      var $smrow_sroa_2_9 = $smrow_sroa_2_8;
      var $smrow_sroa_1_9 = $smrow_sroa_1_8;
      var $smrow_sroa_0_9 = $smrow_sroa_0_8;
      label = 107;
      break;
    } else {
      var $smlast_5_lcssa = $smlast_4772;
      var $smrow_sroa_4_10 = $smrow_sroa_4_8;
      var $smrow_sroa_3_10 = $smrow_sroa_3_8;
      var $smrow_sroa_2_10 = $smrow_sroa_2_8;
      var $smrow_sroa_1_10 = $smrow_sroa_1_8;
      var $smrow_sroa_0_10 = $smrow_sroa_0_8;
      label = 110;
      break;
    }
   case 106:
    var $exitcond976 = ($1207 | 0) == ($indvars_iv | 0);
    if ($exitcond976) {
      var $smlast_5_lcssa = $indvars_iv;
      var $smrow_sroa_4_10 = $smrow_sroa_0_9;
      var $smrow_sroa_3_10 = $smrow_sroa_4_9;
      var $smrow_sroa_2_10 = $smrow_sroa_3_9;
      var $smrow_sroa_1_10 = $smrow_sroa_2_9;
      var $smrow_sroa_0_10 = $smrow_sroa_1_9;
      label = 110;
      break;
    } else {
      var $smrow_sroa_1_9 = $smrow_sroa_2_9;
      var $smrow_sroa_2_9 = $smrow_sroa_3_9;
      var $smrow_sroa_3_9 = $smrow_sroa_4_9;
      var $smrow_sroa_4_9 = $smrow_sroa_0_9;
      var $smlast_5757 = $1207;
      var $smrow_sroa_0_9 = $smrow_sroa_1_9;
      label = 107;
      break;
    }
   case 107:
    var $smrow_sroa_0_9;
    var $smrow_sroa_1_9;
    var $smrow_sroa_2_9;
    var $smrow_sroa_3_9;
    var $smrow_sroa_4_9;
    var $smlast_5757;
    var $1207 = $smlast_5757 + 1 | 0;
    var $1208 = $909 - 2 | 0;
    var $1209 = ($1208 | 0) > 2;
    if ($1209) {
      label = 108;
      break;
    } else {
      label = 106;
      break;
    }
   case 108:
    var $1210 = $909 * $1207 & -1;
    var $1211 = $1210 + 2 | 0;
    var $1212 = $1022 + ($1211 << 3) | 0;
    var $col_7754 = 2;
    var $pix_6755 = $1212;
    label = 109;
    break;
   case 109:
    var $pix_6755;
    var $col_7754;
    var $1213 = $pix_6755 - 16 | 0;
    var $1214 = HEAP16[$1213 >> 1];
    var $1215 = $1214 << 16 >> 16;
    var $1216 = $pix_6755 - 8 | 0;
    var $1217 = HEAP16[$1216 >> 1];
    var $1218 = $1217 << 16 >> 16;
    var $1219 = HEAP16[$pix_6755 >> 1];
    var $1220 = $1219 << 16 >> 16;
    var $1221 = $pix_6755 + 8 | 0;
    var $1222 = HEAP16[$1221 >> 1];
    var $1223 = $1222 << 16 >> 16;
    var $1224 = $pix_6755 + 16 | 0;
    var $1225 = HEAP16[$1224 >> 1];
    var $1226 = $1225 << 16 >> 16;
    var $1227 = $1215 + 2 | 0;
    var $1228 = $1227 + $1218 | 0;
    var $1229 = $1228 + $1220 | 0;
    var $1230 = $1229 + $1223 | 0;
    var $1231 = $1230 + $1226 | 0;
    var $1232 = $1231 >> 2;
    var $1233 = $smrow_sroa_0_9 + $col_7754 * 12 | 0;
    HEAP32[$1233 >> 2] = $1232;
    var $1234 = $pix_6755 - 14 | 0;
    var $1235 = HEAP16[$1234 >> 1];
    var $1236 = $1235 << 16 >> 16;
    var $1237 = $pix_6755 - 6 | 0;
    var $1238 = HEAP16[$1237 >> 1];
    var $1239 = $1238 << 16 >> 16;
    var $1240 = $pix_6755 + 2 | 0;
    var $1241 = HEAP16[$1240 >> 1];
    var $1242 = $1241 << 16 >> 16;
    var $1243 = $pix_6755 + 10 | 0;
    var $1244 = HEAP16[$1243 >> 1];
    var $1245 = $1244 << 16 >> 16;
    var $1246 = $pix_6755 + 18 | 0;
    var $1247 = HEAP16[$1246 >> 1];
    var $1248 = $1247 << 16 >> 16;
    var $1249 = $1236 + 2 | 0;
    var $1250 = $1249 + $1239 | 0;
    var $1251 = $1250 + $1242 | 0;
    var $1252 = $1251 + $1245 | 0;
    var $1253 = $1252 + $1248 | 0;
    var $1254 = $1253 >> 2;
    var $1255 = $smrow_sroa_0_9 + $col_7754 * 12 + 4 | 0;
    HEAP32[$1255 >> 2] = $1254;
    var $1256 = $pix_6755 - 12 | 0;
    var $1257 = HEAP16[$1256 >> 1];
    var $1258 = $1257 << 16 >> 16;
    var $1259 = $pix_6755 - 4 | 0;
    var $1260 = HEAP16[$1259 >> 1];
    var $1261 = $1260 << 16 >> 16;
    var $1262 = $pix_6755 + 4 | 0;
    var $1263 = HEAP16[$1262 >> 1];
    var $1264 = $1263 << 16 >> 16;
    var $1265 = $pix_6755 + 12 | 0;
    var $1266 = HEAP16[$1265 >> 1];
    var $1267 = $1266 << 16 >> 16;
    var $1268 = $pix_6755 + 20 | 0;
    var $1269 = HEAP16[$1268 >> 1];
    var $1270 = $1269 << 16 >> 16;
    var $1271 = $1258 + 2 | 0;
    var $1272 = $1271 + $1261 | 0;
    var $1273 = $1272 + $1264 | 0;
    var $1274 = $1273 + $1267 | 0;
    var $1275 = $1274 + $1270 | 0;
    var $1276 = $1275 >> 2;
    var $1277 = $smrow_sroa_0_9 + $col_7754 * 12 + 8 | 0;
    HEAP32[$1277 >> 2] = $1276;
    var $1278 = $col_7754 + 1 | 0;
    var $1279 = ($1278 | 0) < ($1208 | 0);
    if ($1279) {
      var $col_7754 = $1278;
      var $pix_6755 = $1221;
      label = 109;
      break;
    } else {
      label = 106;
      break;
    }
   case 110:
    var $smrow_sroa_0_10;
    var $smrow_sroa_1_10;
    var $smrow_sroa_2_10;
    var $smrow_sroa_3_10;
    var $smrow_sroa_4_10;
    var $smlast_5_lcssa;
    var $1280 = $908 & 65535;
    var $1281 = $1280 - 2 | 0;
    var $1282 = ($1281 | 0) > 2;
    if ($1282) {
      label = 111;
      break;
    } else {
      label = 115;
      break;
    }
   case 111:
    var $1283 = $1280 * $row_10771 & -1;
    var $1284 = $1283 + 2 | 0;
    var $1285 = $1022 + ($1284 << 3) | 0;
    var $col_8765 = 2;
    var $pix_7766 = $1285;
    label = 155;
    break;
   case 112:
    var $1287 = $_sum_2 << 16;
    var $1288 = ($1287 | 0) / ($1902 | 0) & -1;
    var $1292 = $1288;
    label = 114;
    break;
   case 113:
    var $1290 = $_sum_2 * 174 & -1;
    var $1292 = $1290;
    label = 114;
    break;
   case 114:
    var $1292;
    var $1293 = HEAP32[$247 >> 2];
    var $1294 = $1864 * $1292 & -1;
    var $1295 = $1294 + 32768 | 0;
    var $1296 = $1295 >> 16;
    var $1297 = $1296 - $1884 | 0;
    var $1298 = _foveon_apply_curve($1293, $1297);
    var $1299 = $1866 & 65535;
    var $1300 = $1299 + $1298 | 0;
    var $1301 = $1300 & 65535;
    HEAP16[$pix_7766 >> 1] = $1301;
    var $1302 = HEAP32[$247 >> 2];
    var $1303 = $1880 * $1292 & -1;
    var $1304 = $1303 + 32768 | 0;
    var $1305 = $1304 >> 16;
    var $1306 = $1305 - $1885 | 0;
    var $1307 = _foveon_apply_curve($1302, $1306);
    var $1308 = $1883 & 65535;
    var $1309 = $1308 + $1307 | 0;
    var $1310 = $1309 & 65535;
    HEAP16[$1882 >> 1] = $1310;
    var $1311 = HEAP32[$247 >> 2];
    var $1312 = $1901 * $1292 & -1;
    var $1313 = $1312 + 32768 | 0;
    var $1314 = $1313 >> 16;
    var $1315 = $1314 - $1905 | 0;
    var $1316 = _foveon_apply_curve($1311, $1315);
    var $1317 = $1904 & 65535;
    var $1318 = $1317 + $1316 | 0;
    var $1319 = $1318 & 65535;
    HEAP16[$1903 >> 1] = $1319;
    var $1320 = $pix_7766 + 8 | 0;
    var $1321 = $col_8765 + 1 | 0;
    var $1322 = ($1321 | 0) < ($1281 | 0);
    if ($1322) {
      var $col_8765 = $1321;
      var $pix_7766 = $1320;
      label = 155;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    var $1323 = $row_10771 + 1 | 0;
    var $1324 = ($1323 | 0) < ($919 | 0);
    var $indvars_iv_next = $indvars_iv + 1 | 0;
    if ($1324) {
      var $row_10771 = $1323;
      var $smlast_4772 = $smlast_5_lcssa;
      var $indvars_iv = $indvars_iv_next;
      var $smrow_sroa_4_8 = $smrow_sroa_4_10;
      var $smrow_sroa_3_8 = $smrow_sroa_3_10;
      var $smrow_sroa_2_8 = $smrow_sroa_2_10;
      var $smrow_sroa_1_8 = $smrow_sroa_1_10;
      var $smrow_sroa_0_8 = $smrow_sroa_0_10;
      label = 105;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_10;
      var $smrow_sroa_1_11 = $smrow_sroa_1_10;
      var $smrow_sroa_0_11 = $smrow_sroa_0_10;
      label = 116;
      break;
    }
   case 116:
    var $smrow_sroa_0_11;
    var $smrow_sroa_1_11;
    var $smrow_sroa_2_11;
    if ($1026) {
      label = 117;
      break;
    } else {
      label = 119;
      break;
    }
   case 117:
    var $1325 = $ipix | 0;
    var $1326 = $curve + 4 | 0;
    var $1327 = $curve + 8 | 0;
    var $1328 = $ipix + 4 | 0;
    var $1329 = $ipix + 8 | 0;
    var $pix_8745 = $1023;
    label = 118;
    break;
   case 118:
    var $pix_8745;
    var $1331 = HEAP32[$225 >> 2];
    var $1332 = HEAP16[$pix_8745 >> 1];
    var $1333 = $1332 << 16 >> 16;
    var $1334 = _foveon_apply_curve($1331, $1333);
    var $1335 = $1332 & 65535;
    var $1336 = $1335 - $1334 | 0;
    var $1337 = $1336 & 65535;
    HEAP16[$pix_8745 >> 1] = $1337;
    var $1338 = HEAP32[$1326 >> 2];
    var $1339 = $pix_8745 + 2 | 0;
    var $1340 = HEAP16[$1339 >> 1];
    var $1341 = $1340 << 16 >> 16;
    var $1342 = _foveon_apply_curve($1338, $1341);
    var $1343 = $1340 & 65535;
    var $1344 = $1343 - $1342 | 0;
    var $1345 = $1344 & 65535;
    HEAP16[$1339 >> 1] = $1345;
    var $1346 = HEAP32[$1327 >> 2];
    var $1347 = $pix_8745 + 4 | 0;
    var $1348 = HEAP16[$1347 >> 1];
    var $1349 = $1348 << 16 >> 16;
    var $1350 = _foveon_apply_curve($1346, $1349);
    var $1351 = $1348 & 65535;
    var $1352 = $1351 - $1350 | 0;
    var $1353 = $1352 & 65535;
    HEAP16[$1347 >> 1] = $1353;
    var $sext = $1336 << 16;
    var $1354 = $sext >> 16;
    var $sext206 = $1344 << 16;
    var $1355 = $sext206 >> 16;
    var $sext207 = $1352 << 16;
    var $1356 = $sext207 >> 16;
    var $factor = $sext206 >> 15;
    var $1357 = $1356 + $1354 | 0;
    var $1358 = $1357 + $factor | 0;
    var $1359 = $1358 >> 2;
    var $1360 = HEAP32[$225 >> 2];
    var $1361 = $1354 - $1359 | 0;
    var $1362 = _foveon_apply_curve($1360, $1361);
    var $1363 = $1336 - $1362 | 0;
    var $1364 = $1363 & 65535;
    HEAP16[$pix_8745 >> 1] = $1364;
    var $1365 = HEAP32[$1326 >> 2];
    var $1366 = $1355 - $1359 | 0;
    var $1367 = _foveon_apply_curve($1365, $1366);
    var $1368 = $1344 - $1367 | 0;
    var $1369 = $1368 & 65535;
    HEAP16[$1339 >> 1] = $1369;
    var $1370 = HEAP32[$1327 >> 2];
    var $1371 = $1356 - $1359 | 0;
    var $1372 = _foveon_apply_curve($1370, $1371);
    var $1373 = $1352 - $1372 | 0;
    var $1374 = $1373 & 65535;
    HEAP16[$1347 >> 1] = $1374;
    var $1375 = HEAPF32[$2039 >> 2];
    var $1376 = $1364 << 16 >> 16;
    var $1377 = $1375 * $1376;
    var $1378 = $1377;
    var $1379 = $1378;
    var $1380 = HEAPF32[$2041 >> 2];
    var $1381 = $1369 << 16 >> 16;
    var $1382 = $1380 * $1381;
    var $1383 = $1382;
    var $1384 = $1379 + $1383;
    var $1385 = HEAPF32[$2044 >> 2];
    var $1386 = $1374 << 16 >> 16;
    var $1387 = $1385 * $1386;
    var $1388 = $1387;
    var $1389 = $1384 + $1388;
    var $1390 = $1389 < 0;
    var $dsum_2 = $1390 ? 0 : $1389;
    var $1391 = $dsum_2 > 24e3;
    var $dsum_3 = $1391 ? 24e3 : $dsum_2;
    var $1392 = $dsum_3 + .5;
    var $1393 = $1392 & -1;
    HEAP32[$1325 >> 2] = $1393;
    var $1394 = HEAPF32[$2048 >> 2];
    var $1395 = HEAP16[$pix_8745 >> 1];
    var $1396 = $1395 << 16 >> 16;
    var $1397 = $1394 * $1396;
    var $1398 = $1397;
    var $1399 = $1398;
    var $1400 = HEAPF32[$2050 >> 2];
    var $1401 = HEAP16[$1339 >> 1];
    var $1402 = $1401 << 16 >> 16;
    var $1403 = $1400 * $1402;
    var $1404 = $1403;
    var $1405 = $1399 + $1404;
    var $1406 = HEAPF32[$2053 >> 2];
    var $1407 = HEAP16[$1347 >> 1];
    var $1408 = $1407 << 16 >> 16;
    var $1409 = $1406 * $1408;
    var $1410 = $1409;
    var $1411 = $1405 + $1410;
    var $1412 = $1411 < 0;
    var $dsum_2_1 = $1412 ? 0 : $1411;
    var $1413 = $dsum_2_1 > 24e3;
    var $dsum_3_1 = $1413 ? 24e3 : $dsum_2_1;
    var $1414 = $dsum_3_1 + .5;
    var $1415 = $1414 & -1;
    HEAP32[$1328 >> 2] = $1415;
    var $1416 = HEAPF32[$2057 >> 2];
    var $1417 = HEAP16[$pix_8745 >> 1];
    var $1418 = $1417 << 16 >> 16;
    var $1419 = $1416 * $1418;
    var $1420 = $1419;
    var $1421 = $1420;
    var $1422 = HEAPF32[$2059 >> 2];
    var $1423 = HEAP16[$1339 >> 1];
    var $1424 = $1423 << 16 >> 16;
    var $1425 = $1422 * $1424;
    var $1426 = $1425;
    var $1427 = $1421 + $1426;
    var $1428 = HEAPF32[$2062 >> 2];
    var $1429 = HEAP16[$1347 >> 1];
    var $1430 = $1429 << 16 >> 16;
    var $1431 = $1428 * $1430;
    var $1432 = $1431;
    var $1433 = $1427 + $1432;
    var $1434 = $1433 < 0;
    var $dsum_2_2 = $1434 ? 0 : $1433;
    var $1435 = $dsum_2_2 > 24e3;
    var $dsum_3_2 = $1435 ? 24e3 : $dsum_2_2;
    var $1436 = $dsum_3_2 + .5;
    var $1437 = $1436 & -1;
    HEAP32[$1329 >> 2] = $1437;
    var $1438 = $1393 & 65535;
    HEAP16[$pix_8745 >> 1] = $1438;
    var $1439 = HEAP32[$1328 >> 2];
    var $1440 = $1439 & 65535;
    HEAP16[$1339 >> 1] = $1440;
    var $1441 = HEAP32[$1329 >> 2];
    var $1442 = $1441 & 65535;
    HEAP16[$1347 >> 1] = $1442;
    var $1443 = $pix_8745 + 8 | 0;
    var $1444 = $1443 >>> 0 < $1025 >>> 0;
    if ($1444) {
      var $pix_8745 = $1443;
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    var $1445 = $909 >>> 2;
    var $1446 = $918 >>> 2;
    var $1447 = $1445 * $1446 & -1;
    var $1448 = _calloc($1447, 6);
    var $1449 = $1448;
    _merror($1448, 5580032);
    var $1450 = HEAP16[5398712 >> 1];
    var $1451 = $1450 & 65535;
    var $1452 = $1451 >>> 2;
    var $1453 = ($1452 | 0) == 0;
    if ($1453) {
      label = 124;
      break;
    } else {
      label = 120;
      break;
    }
   case 120:
    var $1454 = $ipix + 8 | 0;
    var $1455 = $ipix + 4 | 0;
    var $1456 = $ipix | 0;
    var $_pre141 = HEAP16[5242964 >> 1];
    var $_in957 = $1452;
    label = 122;
    break;
   case 121:
    var $1457 = ($1458 | 0) == 0;
    if ($1457) {
      label = 124;
      break;
    } else {
      var $_in957 = $1458;
      label = 122;
      break;
    }
   case 122:
    var $_in957;
    var $1458 = $_in957 - 1 | 0;
    var $1459 = ($_pre141 & 65535) > 3;
    if ($1459) {
      label = 123;
      break;
    } else {
      label = 121;
      break;
    }
   case 123:
    var $1460 = $1458 << 2;
    var $1461 = $_in957 + 1 | 0;
    var $_pre142 = HEAP32[5264108 >> 2];
    var $col_9730 = 0;
    label = 127;
    break;
   case 124:
    var $1462 = ($1450 & 65535) > 3;
    if ($1462) {
      label = 126;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    var $_pre199 = $curve + 16 | 0;
    var $_pre201 = $curve + 20 | 0;
    var $_pre_phi200 = $_pre199;
    var $_pre_phi202 = $_pre201;
    label = 147;
    break;
   case 126:
    var $1463 = $ipix + 8 | 0;
    var $1464 = $ipix + 4 | 0;
    var $1465 = $ipix | 0;
    var $1466 = $smrow_sroa_2_11;
    var $1467 = $smrow_sroa_1_11;
    var $1468 = $curve + 16 | 0;
    var $1469 = $curve + 20 | 0;
    var $row_12717 = 0;
    label = 131;
    break;
   case 127:
    var $col_9730;
    HEAP32[$1454 >> 2] = 0;
    HEAP32[$1455 >> 2] = 0;
    HEAP32[$1456 >> 2] = 0;
    var $1471 = $_pre141 & 65535;
    var $1472 = $col_9730 << 2;
    var $1473 = $1472 | 3;
    var $1474 = $1472 | 1;
    var $1475 = $1472 | 2;
    var $i_18726 = 0;
    var $1789 = 0;
    var $1788 = 0;
    var $1787 = 0;
    label = 153;
    break;
   case 128:
    var $1476 = ($1461 | 0) > ($1452 | 0);
    if ($1476) {
      label = 129;
      break;
    } else {
      label = 130;
      break;
    }
   case 129:
    var $1477 = $1835 >>> 4;
    var $1478 = $1477 & 65535;
    var $1479 = $1471 >>> 2;
    var $1480 = $1479 * $1458 & -1;
    var $1481 = $1480 + $col_9730 | 0;
    var $1482 = $1449 + $1481 * 6 | 0;
    HEAP16[$1482 >> 1] = $1478;
    var $1483 = HEAP32[$1455 >> 2];
    var $1484 = $1483 >>> 4;
    var $1485 = $1484 & 65535;
    var $1486 = $_pre141 & 65535;
    var $1487 = $1486 >>> 2;
    var $1488 = $1487 * $1458 & -1;
    var $1489 = $1488 + $col_9730 | 0;
    var $1490 = $1449 + $1489 * 6 + 2 | 0;
    HEAP16[$1490 >> 1] = $1485;
    var $1491 = HEAP32[$1454 >> 2];
    var $1492 = $1491 >>> 4;
    var $1493 = $1492 & 65535;
    var $1494 = $_pre141 & 65535;
    var $1495 = $1494 >>> 2;
    var $1496 = $1495 * $1458 & -1;
    var $1497 = $1496 + $col_9730 | 0;
    var $1498 = $1449 + $1497 * 6 + 4 | 0;
    HEAP16[$1498 >> 1] = $1493;
    label = 154;
    break;
   case 130:
    var $1499 = $_pre141 & 65535;
    var $1500 = $1499 >>> 2;
    var $1501 = $1500 * $_in957 & -1;
    var $1502 = $1501 + $col_9730 | 0;
    var $1503 = $1449 + $1502 * 6 | 0;
    var $1504 = HEAP16[$1503 >> 1];
    var $1505 = $1504 << 16 >> 16;
    var $1506 = $1505 * 1840 & -1;
    var $1507 = $1835 * 141 & -1;
    var $1508 = $1507 + 2048 | 0;
    var $1509 = $1508 + $1506 | 0;
    var $1510 = $1509 >>> 12;
    var $1511 = $1510 & 65535;
    var $1512 = $1500 * $1458 & -1;
    var $1513 = $1512 + $col_9730 | 0;
    var $1514 = $1449 + $1513 * 6 | 0;
    HEAP16[$1514 >> 1] = $1511;
    var $1515 = $_pre141 & 65535;
    var $1516 = $1515 >>> 2;
    var $1517 = $1516 * $_in957 & -1;
    var $1518 = $1517 + $col_9730 | 0;
    var $1519 = $1449 + $1518 * 6 + 2 | 0;
    var $1520 = HEAP16[$1519 >> 1];
    var $1521 = $1520 << 16 >> 16;
    var $1522 = $1521 * 1840 & -1;
    var $1523 = HEAP32[$1455 >> 2];
    var $1524 = $1523 * 141 & -1;
    var $1525 = $1524 + 2048 | 0;
    var $1526 = $1525 + $1522 | 0;
    var $1527 = $1526 >>> 12;
    var $1528 = $1527 & 65535;
    var $1529 = $1516 * $1458 & -1;
    var $1530 = $1529 + $col_9730 | 0;
    var $1531 = $1449 + $1530 * 6 + 2 | 0;
    HEAP16[$1531 >> 1] = $1528;
    var $1532 = $_pre141 & 65535;
    var $1533 = $1532 >>> 2;
    var $1534 = $1533 * $_in957 & -1;
    var $1535 = $1534 + $col_9730 | 0;
    var $1536 = $1449 + $1535 * 6 + 4 | 0;
    var $1537 = HEAP16[$1536 >> 1];
    var $1538 = $1537 << 16 >> 16;
    var $1539 = $1538 * 1840 & -1;
    var $1540 = HEAP32[$1454 >> 2];
    var $1541 = $1540 * 141 & -1;
    var $1542 = $1541 + 2048 | 0;
    var $1543 = $1542 + $1539 | 0;
    var $1544 = $1543 >>> 12;
    var $1545 = $1544 & 65535;
    var $1546 = $1533 * $1458 & -1;
    var $1547 = $1546 + $col_9730 | 0;
    var $1548 = $1449 + $1547 * 6 + 4 | 0;
    HEAP16[$1548 >> 1] = $1545;
    label = 154;
    break;
   case 131:
    var $row_12717;
    HEAP32[$1463 >> 2] = 0;
    HEAP32[$1464 >> 2] = 0;
    HEAP32[$1465 >> 2] = 0;
    var $1550 = $row_12717 & 3;
    var $1551 = ($1550 | 0) == 0;
    var $1552 = HEAP16[5242964 >> 1];
    if ($1551) {
      label = 132;
      break;
    } else {
      var $1592 = $1552;
      label = 136;
      break;
    }
   case 132:
    var $1554 = $1552 & 65535;
    var $1555 = $1554 & 65532;
    var $1556 = ($1555 | 0) == 0;
    if ($1556) {
      var $1592 = $1552;
      label = 136;
      break;
    } else {
      label = 133;
      break;
    }
   case 133:
    var $1557 = ($row_12717 | 0) / 4 & -1;
    var $_in958 = $1555;
    var $1558 = 4096;
    label = 134;
    break;
   case 134:
    var $1558;
    var $_in958;
    var $1559 = $_in958 - 1 | 0;
    var $1560 = ($1559 | 0) / 4 & -1;
    var $1561 = $1554 >>> 2;
    var $1562 = $1561 * $1557 & -1;
    var $1563 = $1562 + $1560 | 0;
    var $1564 = $1449 + $1563 * 6 | 0;
    var $1565 = HEAP16[$1564 >> 1];
    var $1566 = $1565 << 16 >> 16;
    var $1567 = $1566 * 1485 & -1;
    var $1568 = $1558 + $1567 | 0;
    var $1569 = $1568 >> 13;
    HEAP32[$1465 >> 2] = $1569;
    var $1570 = $smrow_sroa_0_11 + $1559 * 12 | 0;
    HEAP32[$1570 >> 2] = $1569;
    var $1571 = $1449 + $1563 * 6 + 2 | 0;
    var $1572 = HEAP16[$1571 >> 1];
    var $1573 = $1572 << 16 >> 16;
    var $1574 = $1573 * 1485 & -1;
    var $1575 = HEAP32[$1464 >> 2];
    var $1576 = $1575 * 6707 & -1;
    var $1577 = $1576 + 4096 | 0;
    var $1578 = $1577 + $1574 | 0;
    var $1579 = $1578 >> 13;
    HEAP32[$1464 >> 2] = $1579;
    var $1580 = $smrow_sroa_0_11 + $1559 * 12 + 4 | 0;
    HEAP32[$1580 >> 2] = $1579;
    var $1581 = $1449 + $1563 * 6 + 4 | 0;
    var $1582 = HEAP16[$1581 >> 1];
    var $1583 = $1582 << 16 >> 16;
    var $1584 = $1583 * 1485 & -1;
    var $1585 = HEAP32[$1463 >> 2];
    var $1586 = $1585 * 6707 & -1;
    var $1587 = $1586 + 4096 | 0;
    var $1588 = $1587 + $1584 | 0;
    var $1589 = $1588 >> 13;
    HEAP32[$1463 >> 2] = $1589;
    var $1590 = $smrow_sroa_0_11 + $1559 * 12 + 8 | 0;
    HEAP32[$1590 >> 2] = $1589;
    var $1591 = ($1559 | 0) == 0;
    if ($1591) {
      var $1592 = $1552;
      label = 136;
      break;
    } else {
      label = 135;
      break;
    }
   case 135:
    var $_pre184 = HEAP32[$1465 >> 2];
    var $phitmp204 = $_pre184 * 6707 & -1;
    var $phitmp205 = $phitmp204 + 4096 | 0;
    var $_in958 = $1559;
    var $1558 = $phitmp205;
    label = 134;
    break;
   case 136:
    var $1592;
    HEAP32[$1463 >> 2] = 0;
    HEAP32[$1464 >> 2] = 0;
    HEAP32[$1465 >> 2] = 0;
    var $1593 = $1592 & 65535;
    var $1594 = $1593 & 65532;
    var $1595 = ($1594 | 0) == 0;
    if ($1595) {
      label = 139;
      break;
    } else {
      var $col_11698 = 0;
      var $1596 = 0;
      label = 137;
      break;
    }
   case 137:
    var $1596;
    var $col_11698;
    var $1597 = $smrow_sroa_0_11 + $col_11698 * 12 | 0;
    var $1598 = HEAP32[$1597 >> 2];
    var $1599 = $1598 * 1485 & -1;
    var $1600 = $1599 + 4096 | 0;
    var $1601 = $1600 + $1596 | 0;
    var $1602 = $1601 >> 13;
    HEAP32[$1465 >> 2] = $1602;
    var $1603 = $smrow_sroa_1_11 + $col_11698 * 12 | 0;
    HEAP32[$1603 >> 2] = $1602;
    var $1604 = $smrow_sroa_0_11 + $col_11698 * 12 + 4 | 0;
    var $1605 = HEAP32[$1604 >> 2];
    var $1606 = $1605 * 1485 & -1;
    var $1607 = HEAP32[$1464 >> 2];
    var $1608 = $1607 * 6707 & -1;
    var $1609 = $1606 + 4096 | 0;
    var $1610 = $1609 + $1608 | 0;
    var $1611 = $1610 >> 13;
    HEAP32[$1464 >> 2] = $1611;
    var $1612 = $smrow_sroa_1_11 + $col_11698 * 12 + 4 | 0;
    HEAP32[$1612 >> 2] = $1611;
    var $1613 = $smrow_sroa_0_11 + $col_11698 * 12 + 8 | 0;
    var $1614 = HEAP32[$1613 >> 2];
    var $1615 = $1614 * 1485 & -1;
    var $1616 = HEAP32[$1463 >> 2];
    var $1617 = $1616 * 6707 & -1;
    var $1618 = $1615 + 4096 | 0;
    var $1619 = $1618 + $1617 | 0;
    var $1620 = $1619 >> 13;
    HEAP32[$1463 >> 2] = $1620;
    var $1621 = $smrow_sroa_1_11 + $col_11698 * 12 + 8 | 0;
    HEAP32[$1621 >> 2] = $1620;
    var $1622 = $col_11698 + 1 | 0;
    var $1623 = ($1622 | 0) < ($1594 | 0);
    if ($1623) {
      label = 138;
      break;
    } else {
      label = 139;
      break;
    }
   case 138:
    var $_pre187 = HEAP32[$1465 >> 2];
    var $phitmp203 = $_pre187 * 6707 & -1;
    var $col_11698 = $1622;
    var $1596 = $phitmp203;
    label = 137;
    break;
   case 139:
    var $1624 = ($row_12717 | 0) == 0;
    if ($1624) {
      label = 141;
      break;
    } else {
      label = 140;
      break;
    }
   case 140:
    var $1625 = ($1592 & 65535) > 3;
    if ($1625) {
      var $col_12705 = 0;
      label = 142;
      break;
    } else {
      label = 146;
      break;
    }
   case 141:
    var $1627 = $1593 * 12 & -1;
    _memcpy($1466, $1467, $1627);
    label = 143;
    break;
   case 142:
    var $col_12705;
    var $1628 = $smrow_sroa_2_11 + $col_12705 * 12 | 0;
    var $1629 = HEAP32[$1628 >> 2];
    var $1630 = $1629 * 6707 & -1;
    var $1631 = $smrow_sroa_1_11 + $col_12705 * 12 | 0;
    var $1632 = HEAP32[$1631 >> 2];
    var $1633 = $1632 * 1485 & -1;
    var $1634 = $1630 + 4096 | 0;
    var $1635 = $1634 + $1633 | 0;
    var $1636 = $1635 >> 13;
    HEAP32[$1628 >> 2] = $1636;
    var $1637 = $smrow_sroa_2_11 + $col_12705 * 12 + 4 | 0;
    var $1638 = HEAP32[$1637 >> 2];
    var $1639 = $1638 * 6707 & -1;
    var $1640 = $smrow_sroa_1_11 + $col_12705 * 12 + 4 | 0;
    var $1641 = HEAP32[$1640 >> 2];
    var $1642 = $1641 * 1485 & -1;
    var $1643 = $1639 + 4096 | 0;
    var $1644 = $1643 + $1642 | 0;
    var $1645 = $1644 >> 13;
    HEAP32[$1637 >> 2] = $1645;
    var $1646 = $smrow_sroa_2_11 + $col_12705 * 12 + 8 | 0;
    var $1647 = HEAP32[$1646 >> 2];
    var $1648 = $1647 * 6707 & -1;
    var $1649 = $smrow_sroa_1_11 + $col_12705 * 12 + 8 | 0;
    var $1650 = HEAP32[$1649 >> 2];
    var $1651 = $1650 * 1485 & -1;
    var $1652 = $1648 + 4096 | 0;
    var $1653 = $1652 + $1651 | 0;
    var $1654 = $1653 >> 13;
    HEAP32[$1646 >> 2] = $1654;
    var $1655 = $col_12705 + 1 | 0;
    var $1656 = ($1655 | 0) < ($1594 | 0);
    if ($1656) {
      var $col_12705 = $1655;
      label = 142;
      break;
    } else {
      label = 143;
      break;
    }
   case 143:
    var $1657 = ($1592 & 65535) > 3;
    if ($1657) {
      label = 144;
      break;
    } else {
      label = 146;
      break;
    }
   case 144:
    var $_pre136 = HEAP32[$235 >> 2];
    var $_pre137 = HEAP32[$1468 >> 2];
    var $_pre138 = HEAP32[$1469 >> 2];
    var $_pre186 = HEAP32[5264108 >> 2];
    var $col_13714 = 0;
    label = 145;
    break;
   case 145:
    var $col_13714;
    var $1658 = $1593 * $row_12717 & -1;
    var $1659 = $1658 + $col_13714 | 0;
    var $1660 = $smrow_sroa_2_11 + $col_13714 * 12 | 0;
    var $1661 = HEAP32[$1660 >> 2];
    var $1662 = $1661 + 30 | 0;
    var $1663 = $_pre186 + ($1659 << 3) | 0;
    var $1664 = HEAP16[$1663 >> 1];
    var $1665 = $1664 & 65535;
    var $1666 = $1665 + 30 | 0;
    var $1667 = $smrow_sroa_2_11 + $col_13714 * 12 + 4 | 0;
    var $1668 = HEAP32[$1667 >> 2];
    var $1669 = $1668 + $1662 | 0;
    var $1670 = $_pre186 + ($1659 << 3) + 2 | 0;
    var $1671 = HEAP16[$1670 >> 1];
    var $1672 = $1671 & 65535;
    var $1673 = $1672 + $1666 | 0;
    var $1674 = $smrow_sroa_2_11 + $col_13714 * 12 + 8 | 0;
    var $1675 = HEAP32[$1674 >> 2];
    var $1676 = $1675 + $1669 | 0;
    var $1677 = $_pre186 + ($1659 << 3) + 4 | 0;
    var $1678 = HEAP16[$1677 >> 1];
    var $1679 = $1678 & 65535;
    var $1680 = $1679 + $1673 | 0;
    var $1681 = $1680 << 16;
    var $1682 = ($1681 | 0) / ($1676 | 0) & -1;
    var $1683 = $1661 * $1682 & -1;
    var $1684 = $1683 + 32768 | 0;
    var $1685 = $1684 >> 16;
    var $1686 = $1664 << 16 >> 16;
    var $1687 = $1685 - $1686 | 0;
    var $1688 = _foveon_apply_curve($_pre136, $1687);
    HEAP32[$1465 >> 2] = $1688;
    var $1689 = HEAP32[$1667 >> 2];
    var $1690 = $1689 * $1682 & -1;
    var $1691 = $1690 + 32768 | 0;
    var $1692 = $1691 >> 16;
    var $1693 = HEAP16[$1670 >> 1];
    var $1694 = $1693 << 16 >> 16;
    var $1695 = $1692 - $1694 | 0;
    var $1696 = _foveon_apply_curve($_pre137, $1695);
    HEAP32[$1464 >> 2] = $1696;
    var $1697 = $1696 + $1688 | 0;
    var $1698 = HEAP32[$1674 >> 2];
    var $1699 = $1698 * $1682 & -1;
    var $1700 = $1699 + 32768 | 0;
    var $1701 = $1700 >> 16;
    var $1702 = HEAP16[$1677 >> 1];
    var $1703 = $1702 << 16 >> 16;
    var $1704 = $1701 - $1703 | 0;
    var $1705 = _foveon_apply_curve($_pre138, $1704);
    HEAP32[$1463 >> 2] = $1705;
    var $1706 = $1705 + $1697 | 0;
    var $1707 = $1706 >> 3;
    var $1708 = HEAP16[$1663 >> 1];
    var $1709 = $1708 << 16 >> 16;
    var $1710 = $1688 - $1707 | 0;
    var $1711 = $1710 + $1709 | 0;
    var $1712 = ($1711 | 0) < 0;
    var $1713 = $1711 & 65535;
    var $1714 = $1712 ? 0 : $1713;
    HEAP16[$1663 >> 1] = $1714;
    var $1715 = HEAP16[$1670 >> 1];
    var $1716 = $1715 << 16 >> 16;
    var $1717 = HEAP32[$1464 >> 2];
    var $1718 = $1717 - $1707 | 0;
    var $1719 = $1718 + $1716 | 0;
    var $1720 = ($1719 | 0) < 0;
    var $1721 = $1719 & 65535;
    var $1722 = $1720 ? 0 : $1721;
    HEAP16[$1670 >> 1] = $1722;
    var $1723 = HEAP16[$1677 >> 1];
    var $1724 = $1723 << 16 >> 16;
    var $1725 = HEAP32[$1463 >> 2];
    var $1726 = $1725 - $1707 | 0;
    var $1727 = $1726 + $1724 | 0;
    var $1728 = ($1727 | 0) < 0;
    var $1729 = $1727 & 65535;
    var $1730 = $1728 ? 0 : $1729;
    HEAP16[$1677 >> 1] = $1730;
    var $1731 = $col_13714 + 1 | 0;
    var $1732 = ($1731 | 0) < ($1594 | 0);
    if ($1732) {
      var $col_13714 = $1731;
      label = 145;
      break;
    } else {
      label = 146;
      break;
    }
   case 146:
    var $1733 = $row_12717 + 1 | 0;
    var $1734 = $1451 & 65532;
    var $1735 = ($1733 | 0) < ($1734 | 0);
    if ($1735) {
      var $row_12717 = $1733;
      label = 131;
      break;
    } else {
      var $_pre_phi200 = $1468;
      var $_pre_phi202 = $1469;
      label = 147;
      break;
    }
   case 147:
    var $_pre_phi202;
    var $_pre_phi200;
    _free($1448);
    _free($906);
    var $1736 = HEAP32[$225 >> 2];
    var $1737 = $1736;
    _free($1737);
    var $1738 = $curve + 4 | 0;
    var $1739 = HEAP32[$1738 >> 2];
    var $1740 = $1739;
    _free($1740);
    var $1741 = $curve + 8 | 0;
    var $1742 = HEAP32[$1741 >> 2];
    var $1743 = $1742;
    _free($1743);
    var $1744 = HEAP32[$235 >> 2];
    var $1745 = $1744;
    _free($1745);
    var $1746 = HEAP32[$_pre_phi200 >> 2];
    var $1747 = $1746;
    _free($1747);
    var $1748 = HEAP32[$_pre_phi202 >> 2];
    var $1749 = $1748;
    _free($1749);
    var $1750 = HEAP32[$247 >> 2];
    var $1751 = $1750;
    _free($1751);
    var $1752 = HEAP32[$250 >> 2];
    var $1753 = $1752;
    _free($1753);
    var $1754 = $keep + 4 | 0;
    var $1755 = HEAP32[$1754 >> 2];
    var $1756 = $active + 4 | 0;
    var $1757 = HEAP32[$1756 >> 2];
    var $1758 = $1757 - $1755 | 0;
    HEAP32[$1756 >> 2] = $1758;
    var $1759 = $active + 12 | 0;
    var $1760 = HEAP32[$1759 >> 2];
    var $1761 = $1760 - 2 | 0;
    HEAP32[$1759 >> 2] = $1761;
    var $1762 = $active + 8 | 0;
    var $1763 = HEAP32[$1762 >> 2];
    var $1764 = HEAP32[$14 >> 2];
    var $1765 = $1763 - $1764 | 0;
    var $1766 = $1761 - $1758 | 0;
    var $1767 = ($1766 | 0) > 0;
    if ($1767) {
      label = 148;
      break;
    } else {
      var $row_13_lcssa = 0;
      label = 151;
      break;
    }
   case 148:
    var $1768 = $1765 << 3;
    var $1769 = ($1766 | 0) > 1;
    var $_pre139 = HEAP32[5264108 >> 2];
    var $_pre140 = HEAP16[5242964 >> 1];
    var $row_13692 = 0;
    label = 149;
    break;
   case 149:
    var $row_13692;
    var $1771 = $row_13692 * $1765 & -1;
    var $1772 = $_pre139 + ($1771 << 3) | 0;
    var $1773 = $1772;
    var $1774 = $1758 + $row_13692 | 0;
    var $1775 = $_pre140 & 65535;
    var $1776 = $1775 * $1774 & -1;
    var $1777 = $1776 + $1764 | 0;
    var $1778 = $_pre139 + ($1777 << 3) | 0;
    var $1779 = $1778;
    _memcpy($1773, $1779, $1768);
    var $1780 = $row_13692 + 1 | 0;
    var $1781 = ($1780 | 0) < ($1766 | 0);
    if ($1781) {
      var $row_13692 = $1780;
      label = 149;
      break;
    } else {
      label = 150;
      break;
    }
   case 150:
    var $1782 = $1766 & 65535;
    var $phitmp = $1769 ? $1782 : 1;
    var $row_13_lcssa = $phitmp;
    label = 151;
    break;
   case 151:
    var $row_13_lcssa;
    var $1784 = $1765 & 65535;
    HEAP16[5242964 >> 1] = $1784;
    HEAP16[5398712 >> 1] = $row_13_lcssa;
    label = 152;
    break;
   case 152:
    STACKTOP = __stackBase__;
    return;
   case 153:
    var $1787;
    var $1788;
    var $1789;
    var $i_18726;
    var $1790 = $i_18726 + $1460 | 0;
    var $1791 = $1471 * $1790 & -1;
    var $1792 = $1472 + $1791 | 0;
    var $1793 = $_pre142 + ($1792 << 3) | 0;
    var $1794 = HEAP16[$1793 >> 1];
    var $1795 = $1794 << 16 >> 16;
    var $1796 = $1789 + $1795 | 0;
    var $1797 = $_pre142 + ($1792 << 3) + 2 | 0;
    var $1798 = HEAP16[$1797 >> 1];
    var $1799 = $1798 << 16 >> 16;
    var $1800 = $1788 + $1799 | 0;
    var $1801 = $_pre142 + ($1792 << 3) + 4 | 0;
    var $1802 = HEAP16[$1801 >> 1];
    var $1803 = $1802 << 16 >> 16;
    var $1804 = $1787 + $1803 | 0;
    var $1805 = $1474 + $1791 | 0;
    var $1806 = $_pre142 + ($1805 << 3) | 0;
    var $1807 = HEAP16[$1806 >> 1];
    var $1808 = $1807 << 16 >> 16;
    var $1809 = $1796 + $1808 | 0;
    var $1810 = $_pre142 + ($1805 << 3) + 2 | 0;
    var $1811 = HEAP16[$1810 >> 1];
    var $1812 = $1811 << 16 >> 16;
    var $1813 = $1800 + $1812 | 0;
    var $1814 = $_pre142 + ($1805 << 3) + 4 | 0;
    var $1815 = HEAP16[$1814 >> 1];
    var $1816 = $1815 << 16 >> 16;
    var $1817 = $1804 + $1816 | 0;
    var $1818 = $1475 + $1791 | 0;
    var $1819 = $_pre142 + ($1818 << 3) | 0;
    var $1820 = HEAP16[$1819 >> 1];
    var $1821 = $1820 << 16 >> 16;
    var $1822 = $1809 + $1821 | 0;
    var $1823 = $_pre142 + ($1818 << 3) + 2 | 0;
    var $1824 = HEAP16[$1823 >> 1];
    var $1825 = $1824 << 16 >> 16;
    var $1826 = $1813 + $1825 | 0;
    var $1827 = $_pre142 + ($1818 << 3) + 4 | 0;
    var $1828 = HEAP16[$1827 >> 1];
    var $1829 = $1828 << 16 >> 16;
    var $1830 = $1817 + $1829 | 0;
    var $1831 = $1473 + $1791 | 0;
    var $1832 = $_pre142 + ($1831 << 3) | 0;
    var $1833 = HEAP16[$1832 >> 1];
    var $1834 = $1833 << 16 >> 16;
    var $1835 = $1822 + $1834 | 0;
    HEAP32[$1456 >> 2] = $1835;
    var $1836 = $_pre142 + ($1831 << 3) + 2 | 0;
    var $1837 = HEAP16[$1836 >> 1];
    var $1838 = $1837 << 16 >> 16;
    var $1839 = $1826 + $1838 | 0;
    HEAP32[$1455 >> 2] = $1839;
    var $1840 = $_pre142 + ($1831 << 3) + 4 | 0;
    var $1841 = HEAP16[$1840 >> 1];
    var $1842 = $1841 << 16 >> 16;
    var $1843 = $1830 + $1842 | 0;
    HEAP32[$1454 >> 2] = $1843;
    var $1844 = $i_18726 + 1 | 0;
    var $exitcond = ($1844 | 0) == 4;
    if ($exitcond) {
      label = 128;
      break;
    } else {
      var $i_18726 = $1844;
      var $1789 = $1835;
      var $1788 = $1839;
      var $1787 = $1843;
      label = 153;
      break;
    }
   case 154:
    var $1846 = $col_9730 + 1 | 0;
    var $1847 = $_pre141 & 65535;
    var $1848 = $1847 >>> 2;
    var $1849 = ($1846 | 0) < ($1848 | 0);
    if ($1849) {
      var $col_9730 = $1846;
      label = 127;
      break;
    } else {
      label = 121;
      break;
    }
   case 155:
    var $pix_7766;
    var $col_8765;
    var $1851 = $smrow_sroa_0_10 + $col_8765 * 12 | 0;
    var $1852 = HEAP32[$1851 >> 2];
    var $1853 = $smrow_sroa_1_10 + $col_8765 * 12 | 0;
    var $1854 = HEAP32[$1853 >> 2];
    var $1855 = $1852 + $1854 | 0;
    var $1856 = $smrow_sroa_2_10 + $col_8765 * 12 | 0;
    var $1857 = HEAP32[$1856 >> 2];
    var $1858 = $1855 + $1857 | 0;
    var $1859 = $smrow_sroa_3_10 + $col_8765 * 12 | 0;
    var $1860 = HEAP32[$1859 >> 2];
    var $1861 = $1858 + $1860 | 0;
    var $1862 = $smrow_sroa_4_10 + $col_8765 * 12 | 0;
    var $1863 = HEAP32[$1862 >> 2];
    var $1864 = $1861 + $1863 | 0;
    var $1865 = $1864 + 375 | 0;
    var $1866 = HEAP16[$pix_7766 >> 1];
    var $1867 = $smrow_sroa_0_10 + $col_8765 * 12 + 4 | 0;
    var $1868 = HEAP32[$1867 >> 2];
    var $1869 = $smrow_sroa_1_10 + $col_8765 * 12 + 4 | 0;
    var $1870 = HEAP32[$1869 >> 2];
    var $1871 = $1868 + $1870 | 0;
    var $1872 = $smrow_sroa_2_10 + $col_8765 * 12 + 4 | 0;
    var $1873 = HEAP32[$1872 >> 2];
    var $1874 = $1871 + $1873 | 0;
    var $1875 = $smrow_sroa_3_10 + $col_8765 * 12 + 4 | 0;
    var $1876 = HEAP32[$1875 >> 2];
    var $1877 = $1874 + $1876 | 0;
    var $1878 = $smrow_sroa_4_10 + $col_8765 * 12 + 4 | 0;
    var $1879 = HEAP32[$1878 >> 2];
    var $1880 = $1877 + $1879 | 0;
    var $1881 = $1865 + $1880 | 0;
    var $1882 = $pix_7766 + 2 | 0;
    var $1883 = HEAP16[$1882 >> 1];
    var $1884 = $1866 << 16 >> 16;
    var $1885 = $1883 << 16 >> 16;
    var $1886 = $1884 + 60 | 0;
    var $1887 = $1885 + $1886 | 0;
    var $1888 = $smrow_sroa_0_10 + $col_8765 * 12 + 8 | 0;
    var $1889 = HEAP32[$1888 >> 2];
    var $1890 = $smrow_sroa_1_10 + $col_8765 * 12 + 8 | 0;
    var $1891 = HEAP32[$1890 >> 2];
    var $1892 = $1889 + $1891 | 0;
    var $1893 = $smrow_sroa_2_10 + $col_8765 * 12 + 8 | 0;
    var $1894 = HEAP32[$1893 >> 2];
    var $1895 = $1892 + $1894 | 0;
    var $1896 = $smrow_sroa_3_10 + $col_8765 * 12 + 8 | 0;
    var $1897 = HEAP32[$1896 >> 2];
    var $1898 = $1895 + $1897 | 0;
    var $1899 = $smrow_sroa_4_10 + $col_8765 * 12 + 8 | 0;
    var $1900 = HEAP32[$1899 >> 2];
    var $1901 = $1898 + $1900 | 0;
    var $1902 = $1881 + $1901 | 0;
    var $1903 = $pix_7766 + 4 | 0;
    var $1904 = HEAP16[$1903 >> 1];
    var $1905 = $1904 << 16 >> 16;
    var $1906 = $1905 + $1887 | 0;
    var $1907 = ($1906 | 0) < 0;
    var $_sum_2 = $1907 ? 0 : $1906;
    var $1908 = ($1902 | 0) > 375;
    if ($1908) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 156:
    var $1909;
    var $c_25858;
    var $1910 = $ppm + $c_25858 * 36 | 0;
    var $1911 = HEAPF32[$1910 >> 2];
    var $1912 = $ppm + $c_25858 * 36 + 4 | 0;
    var $1913 = $1911 * $810;
    var $1914 = HEAPF32[$1912 >> 2];
    var $1915 = $ppm + $c_25858 * 36 + 8 | 0;
    var $1916 = $ppm + $c_25858 * 36 + 12 | 0;
    var $1917 = $1913;
    var $1918 = $1914 * $811;
    var $1919 = HEAPF32[$1915 >> 2];
    var $1920 = $ppm + $c_25858 * 36 + 16 | 0;
    var $1921 = HEAPF32[$1916 >> 2];
    var $1922 = $1917 + $1918;
    var $1923 = $1919 * $812;
    var $1924 = $ppm + $c_25858 * 36 + 20 | 0;
    var $1925 = HEAPF32[$1920 >> 2];
    var $1926 = $1921 * $813;
    var $1927 = $1922 + $1923;
    var $1928 = HEAPF32[$1924 >> 2];
    var $1929 = $1925 * $814;
    var $1930 = $1927 + $1926;
    var $1931 = $1928 * $815;
    var $1932 = $1930 + $1929;
    var $1933 = $1932 + $1931;
    var $1934 = $ppm + $c_25858 * 36 + 24 | 0;
    var $1935 = HEAPF32[$1934 >> 2];
    var $1936 = $1935 * $816;
    var $1937 = $1933 + $1936;
    var $1938 = $ppm + $c_25858 * 36 + 28 | 0;
    var $1939 = HEAPF32[$1938 >> 2];
    var $1940 = $1939 * $817;
    var $1941 = $1937 + $1940;
    var $1942 = $ppm + $c_25858 * 36 + 32 | 0;
    var $1943 = HEAPF32[$1942 >> 2];
    var $1944 = $1943 * $818;
    var $1945 = $1941 + $1944;
    var $1946 = $ipix + ($c_25858 << 2) | 0;
    var $1947 = $1909 | 0;
    var $floorf = Math.floor($1945);
    var $1948 = $floorf;
    var $1949 = $1947 + $1948;
    var $1950 = $259 + $804 * 12 + ($c_25858 << 2) | 0;
    var $1951 = HEAPF32[$1950 >> 2];
    var $1952 = $1951 * $807;
    var $1953 = $259 + $808 * 12 + ($c_25858 << 2) | 0;
    var $1954 = HEAPF32[$1953 >> 2];
    var $1955 = $1954 * $809;
    var $1956 = $1955 + $1952;
    var $1957 = $1956;
    var $1958 = $1949 * $1957;
    var $1959 = $1958 / $559;
    var $1960 = $div + ($c_25858 << 2) | 0;
    var $1961 = HEAPF32[$1960 >> 2];
    var $1962 = $1961;
    var $1963 = $1959 / $1962;
    var $1964 = Math.floor($1963);
    var $1965 = $1964 & -1;
    var $1966 = ($1965 | 0) > 32e3;
    var $_687 = $1966 ? 32e3 : $1965;
    HEAP32[$1946 >> 2] = $_687;
    var $1967 = $_687 & 65535;
    var $1968 = $pix_0860 + ($c_25858 << 1) | 0;
    HEAP16[$1968 >> 1] = $1967;
    var $1969 = $c_25858 + 1 | 0;
    var $exitcond1011 = ($1969 | 0) == 3;
    if ($exitcond1011) {
      label = 57;
      break;
    } else {
      label = 157;
      break;
    }
   case 157:
    var $_phi_trans_insert189 = $ipix + ($1969 << 2) | 0;
    var $_pre190 = HEAP32[$_phi_trans_insert189 >> 2];
    var $c_25858 = $1969;
    var $1909 = $_pre190;
    label = 156;
    break;
   case 158:
    var $1971 = $412 < $415;
    if ($1971) {
      label = 159;
      break;
    } else {
      label = 162;
      break;
    }
   case 159:
    var $1973 = $413 < $415;
    var $_686_1 = $1973 ? $413 : $415;
    var $1974 = $269 + $row_2895 * 12 + 4 | 0;
    HEAPF32[$1974 >> 2] = $_686_1;
    label = 162;
    break;
   case 160:
    var $1976 = $412 > $415;
    if ($1976) {
      label = 161;
      break;
    } else {
      label = 162;
      break;
    }
   case 161:
    var $1978 = $413 > $415;
    var $__1 = $1978 ? $413 : $415;
    var $1979 = $269 + $row_2895 * 12 + 4 | 0;
    HEAPF32[$1979 >> 2] = $__1;
    label = 162;
    break;
   case 162:
    var $1981 = HEAPF32[$136 >> 2];
    var $1982 = HEAPF32[$152 >> 2];
    var $1983 = $1981 > $1982;
    var $1984 = HEAPF32[$133 >> 2];
    if ($1983) {
      label = 165;
      break;
    } else {
      label = 163;
      break;
    }
   case 163:
    var $1986 = $1981 < $1984;
    if ($1986) {
      label = 164;
      break;
    } else {
      label = 167;
      break;
    }
   case 164:
    var $1988 = $1982 < $1984;
    var $_686_2 = $1988 ? $1982 : $1984;
    var $1989 = $269 + $row_2895 * 12 + 8 | 0;
    HEAPF32[$1989 >> 2] = $_686_2;
    label = 167;
    break;
   case 165:
    var $1991 = $1981 > $1984;
    if ($1991) {
      label = 166;
      break;
    } else {
      label = 167;
      break;
    }
   case 166:
    var $1993 = $1982 > $1984;
    var $__2 = $1993 ? $1982 : $1984;
    var $1994 = $269 + $row_2895 * 12 + 8 | 0;
    HEAPF32[$1994 >> 2] = $__2;
    label = 167;
    break;
   case 167:
    _memmove($111, $394, 24, 4, 0);
    var $1996 = $row_2895 + 1 | 0;
    var $1997 = $269 + $1996 * 12 | 0;
    var $1998 = $1997;
    HEAP32[$396 >> 2] = HEAP32[$1998 >> 2];
    HEAP32[$396 + 4 >> 2] = HEAP32[$1998 + 4 >> 2];
    HEAP32[$396 + 8 >> 2] = HEAP32[$1998 + 8 >> 2];
    var $1999 = ($1996 | 0) < ($391 | 0);
    if ($1999) {
      var $row_2895 = $1996;
      label = 29;
      break;
    } else {
      var $row_2_lcssa = $1996;
      label = 35;
      break;
    }
   case 168:
    var $_promoted908_2;
    var $_promoted908_1;
    var $_promoted908;
    var $i_5912;
    var $2001 = ($i_5912 | 0) == 0;
    var $2002 = $2001 ? 32 : -1;
    var $2003 = $trans + $i_5912 * 12 | 0;
    var $2004 = $2002 * $2075;
    var $2005 = $2004 / 30;
    var $2006 = $2005 + $_promoted908;
    var $2007 = ($i_5912 | 0) == 1;
    var $2008 = $2007 ? 32 : -1;
    var $2009 = $2008 * $2087;
    var $2010 = $2009 / 30;
    var $2011 = $2010 + $2006;
    var $2012 = ($i_5912 | 0) == 2;
    var $2013 = $2012 ? 32 : -1;
    var $2014 = $2013 * $2099;
    var $2015 = $2014 / 30;
    var $2016 = $2015 + $2011;
    HEAPF32[$2003 >> 2] = $2016;
    var $2017 = $trans + $i_5912 * 12 + 4 | 0;
    var $2018 = $2002 * $2079;
    var $2019 = $2018 / 30;
    var $2020 = $2019 + $_promoted908_1;
    var $2021 = $2008 * $2091;
    var $2022 = $2021 / 30;
    var $2023 = $2022 + $2020;
    var $2024 = $2013 * $2103;
    var $2025 = $2024 / 30;
    var $2026 = $2025 + $2023;
    HEAPF32[$2017 >> 2] = $2026;
    var $2027 = $trans + $i_5912 * 12 + 8 | 0;
    var $2028 = $2002 * $2083;
    var $2029 = $2028 / 30;
    var $2030 = $2029 + $_promoted908_2;
    var $2031 = $2008 * $2095;
    var $2032 = $2031 / 30;
    var $2033 = $2032 + $2030;
    var $2034 = $2013 * $2107;
    var $2035 = $2034 / 30;
    var $2036 = $2035 + $2033;
    HEAPF32[$2027 >> 2] = $2036;
    var $2037 = $i_5912 + 1 | 0;
    var $exitcond1030 = ($2037 | 0) == 3;
    if ($exitcond1030) {
      label = 23;
      break;
    } else {
      label = 169;
      break;
    }
   case 169:
    var $_phi_trans_insert178 = $trans + $2037 * 12 | 0;
    var $_promoted908_pre = HEAPF32[$_phi_trans_insert178 >> 2];
    var $_phi_trans_insert180 = $trans + $2037 * 12 + 4 | 0;
    var $_promoted908_1_pre = HEAPF32[$_phi_trans_insert180 >> 2];
    var $_phi_trans_insert182 = $trans + $2037 * 12 + 8 | 0;
    var $_promoted908_2_pre = HEAPF32[$_phi_trans_insert182 >> 2];
    var $i_5912 = $2037;
    var $_promoted908 = $_promoted908_pre;
    var $_promoted908_1 = $_promoted908_1_pre;
    var $_promoted908_2 = $_promoted908_2_pre;
    label = 168;
    break;
   case 170:
    var $2039 = $trans | 0;
    var $2040 = HEAPF32[$2039 >> 2];
    var $2041 = $trans + 4 | 0;
    var $2042 = HEAPF32[$2041 >> 2];
    var $2043 = $2040 + $2042;
    var $2044 = $trans + 8 | 0;
    var $2045 = HEAPF32[$2044 >> 2];
    var $2046 = $2043 + $2045;
    var $2047 = $2046;
    var $2048 = $trans + 12 | 0;
    var $2049 = HEAPF32[$2048 >> 2];
    var $2050 = $trans + 16 | 0;
    var $2051 = HEAPF32[$2050 >> 2];
    var $2052 = $2049 + $2051;
    var $2053 = $trans + 20 | 0;
    var $2054 = HEAPF32[$2053 >> 2];
    var $2055 = $2052 + $2054;
    var $2056 = $2055;
    var $2057 = $trans + 24 | 0;
    var $2058 = HEAPF32[$2057 >> 2];
    var $2059 = $trans + 28 | 0;
    var $2060 = HEAPF32[$2059 >> 2];
    var $2061 = $2058 + $2060;
    var $2062 = $trans + 32 | 0;
    var $2063 = HEAPF32[$2062 >> 2];
    var $2064 = $2061 + $2063;
    var $2065 = $2064;
    var $2066 = $2047 * 6;
    var $2067 = $2056 * 11;
    var $2068 = $2066 + $2067;
    var $2069 = $2065 * 3;
    var $2070 = $2068 + $2069;
    var $2071 = $2070 / 20;
    var $2072 = $2040;
    var $2073 = $2071 * $2072;
    var $2074 = $2073 / $2047;
    var $2075 = $2074;
    HEAPF32[$159 >> 2] = $2075;
    var $2076 = $2042;
    var $2077 = $2071 * $2076;
    var $2078 = $2077 / $2047;
    var $2079 = $2078;
    HEAPF32[$155 >> 2] = $2079;
    var $2080 = $2045;
    var $2081 = $2071 * $2080;
    var $2082 = $2081 / $2047;
    var $2083 = $2082;
    HEAPF32[$152 >> 2] = $2083;
    var $2084 = $2049;
    var $2085 = $2071 * $2084;
    var $2086 = $2085 / $2056;
    var $2087 = $2086;
    HEAPF32[$145 >> 2] = $2087;
    var $2088 = $2051;
    var $2089 = $2071 * $2088;
    var $2090 = $2089 / $2056;
    var $2091 = $2090;
    HEAPF32[$131 >> 2] = $2091;
    var $2092 = $2054;
    var $2093 = $2071 * $2092;
    var $2094 = $2093 / $2056;
    var $2095 = $2094;
    HEAPF32[$136 >> 2] = $2095;
    var $2096 = $2058;
    var $2097 = $2071 * $2096;
    var $2098 = $2097 / $2065;
    var $2099 = $2098;
    HEAPF32[$142 >> 2] = $2099;
    var $2100 = $2060;
    var $2101 = $2071 * $2100;
    var $2102 = $2101 / $2065;
    var $2103 = $2102;
    HEAPF32[$138 >> 2] = $2103;
    var $2104 = $2063;
    var $2105 = $2071 * $2104;
    var $2106 = $2105 / $2065;
    var $2107 = $2106;
    HEAPF32[$133 >> 2] = $2107;
    for (var $$dest = $223 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_5912 = 0;
    var $_promoted908 = 0;
    var $_promoted908_1 = 0;
    var $_promoted908_2 = 0;
    label = 168;
    break;
   case 171:
    var $_promoted920_2;
    var $_promoted920_1;
    var $_promoted920;
    var $i_3924;
    var $2109 = 5244964 + ($i_3924 << 4) | 0;
    var $2110 = $trans + $i_3924 * 12 | 0;
    var $2111 = HEAPF32[$2109 >> 2];
    var $2112 = $2111 * $160;
    var $2113 = $2112 * $220;
    var $2114 = $_promoted920 + $2113;
    var $2115 = 5244968 + ($i_3924 << 4) | 0;
    var $2116 = HEAPF32[$2115 >> 2];
    var $2117 = $2116 * $146;
    var $2118 = $2117 * $220;
    var $2119 = $2114 + $2118;
    var $2120 = 5244972 + ($i_3924 << 4) | 0;
    var $2121 = HEAPF32[$2120 >> 2];
    var $2122 = $2121 * $143;
    var $2123 = $2122 * $220;
    var $2124 = $2119 + $2123;
    HEAPF32[$2110 >> 2] = $2124;
    var $2125 = $trans + $i_3924 * 12 + 4 | 0;
    var $2126 = $2111 * $156;
    var $2127 = $2126 * $221;
    var $2128 = $_promoted920_1 + $2127;
    var $2129 = $2116 * $132;
    var $2130 = $2129 * $221;
    var $2131 = $2128 + $2130;
    var $2132 = $2121 * $139;
    var $2133 = $2132 * $221;
    var $2134 = $2131 + $2133;
    HEAPF32[$2125 >> 2] = $2134;
    var $2135 = $trans + $i_3924 * 12 + 8 | 0;
    var $2136 = $2111 * $153;
    var $2137 = $2136 * $222;
    var $2138 = $_promoted920_2 + $2137;
    var $2139 = $2116 * $137;
    var $2140 = $2139 * $222;
    var $2141 = $2138 + $2140;
    var $2142 = $2121 * $134;
    var $2143 = $2142 * $222;
    var $2144 = $2141 + $2143;
    HEAPF32[$2135 >> 2] = $2144;
    var $2145 = $i_3924 + 1 | 0;
    var $exitcond1037 = ($2145 | 0) == 3;
    if ($exitcond1037) {
      label = 170;
      break;
    } else {
      label = 172;
      break;
    }
   case 172:
    var $_phi_trans_insert172 = $trans + $2145 * 12 | 0;
    var $_promoted920_pre = HEAPF32[$_phi_trans_insert172 >> 2];
    var $_phi_trans_insert174 = $trans + $2145 * 12 + 4 | 0;
    var $_promoted920_1_pre = HEAPF32[$_phi_trans_insert174 >> 2];
    var $_phi_trans_insert176 = $trans + $2145 * 12 + 8 | 0;
    var $_promoted920_2_pre = HEAPF32[$_phi_trans_insert176 >> 2];
    var $i_3924 = $2145;
    var $_promoted920 = $_promoted920_pre;
    var $_promoted920_1 = $_promoted920_1_pre;
    var $_promoted920_2 = $_promoted920_2_pre;
    label = 171;
    break;
   case 173:
    var $_promoted938_2;
    var $_promoted938_1;
    var $_promoted938;
    var $i_1942;
    var $2147 = $correct + $i_1942 * 12 | 0;
    var $2148 = $last + $i_1942 * 12 | 0;
    var $2149 = HEAPF32[$2147 >> 2];
    var $2150 = $2149 * $113;
    var $2151 = $_promoted938 + $2150;
    var $2152 = $correct + $i_1942 * 12 + 4 | 0;
    var $2153 = HEAPF32[$2152 >> 2];
    var $2154 = $2153 * $115;
    var $2155 = $2151 + $2154;
    var $2156 = $correct + $i_1942 * 12 + 8 | 0;
    var $2157 = HEAPF32[$2156 >> 2];
    var $2158 = $2157 * $117;
    var $2159 = $2155 + $2158;
    HEAPF32[$2148 >> 2] = $2159;
    var $2160 = $last + $i_1942 * 12 + 4 | 0;
    var $2161 = $2149 * $119;
    var $2162 = $_promoted938_1 + $2161;
    var $2163 = $2153 * $121;
    var $2164 = $2162 + $2163;
    var $2165 = $2157 * $123;
    var $2166 = $2164 + $2165;
    HEAPF32[$2160 >> 2] = $2166;
    var $2167 = $last + $i_1942 * 12 + 8 | 0;
    var $2168 = $2149 * $125;
    var $2169 = $_promoted938_2 + $2168;
    var $2170 = $2153 * $127;
    var $2171 = $2169 + $2170;
    var $2172 = $2157 * $129;
    var $2173 = $2171 + $2172;
    HEAPF32[$2167 >> 2] = $2173;
    var $2174 = $i_1942 + 1 | 0;
    var $exitcond1046 = ($2174 | 0) == 3;
    if ($exitcond1046) {
      label = 20;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    var $_phi_trans_insert163 = $last + $2174 * 12 | 0;
    var $_promoted938_pre = HEAPF32[$_phi_trans_insert163 >> 2];
    var $_phi_trans_insert165 = $last + $2174 * 12 + 4 | 0;
    var $_promoted938_1_pre = HEAPF32[$_phi_trans_insert165 >> 2];
    var $_phi_trans_insert167 = $last + $2174 * 12 + 8 | 0;
    var $_promoted938_2_pre = HEAPF32[$_phi_trans_insert167 >> 2];
    var $i_1942 = $2174;
    var $_promoted938 = $_promoted938_pre;
    var $_promoted938_1 = $_promoted938_1_pre;
    var $_promoted938_2 = $_promoted938_2_pre;
    label = 173;
    break;
  }
}
_foveon_interpolate["X"] = 1;
function _remove_zeroes() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_048 = 0;
    var $3 = $_pre;
    label = 4;
    break;
   case 4:
    var $3;
    var $row_048;
    var $4 = $3 << 16 >> 16 == 0;
    if ($4) {
      var $65 = 0;
      label = 20;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $5 = $row_048 << 1;
    var $6 = $5 & 14;
    var $7 = $row_048 - 2 | 0;
    var $8 = $row_048 + 2 | 0;
    var $9 = $7 >>> 0 > $8 >>> 0;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_045 = 0;
    label = 6;
    break;
   case 6:
    var $col_045;
    var $11 = $col_045 & 1;
    var $12 = $11 | $6;
    var $13 = $12 << 1;
    var $14 = $_pre1 >>> ($13 >>> 0);
    var $15 = $14 & 3;
    var $16 = $_pre2 & 65535;
    var $17 = $row_048 >>> ($16 >>> 0);
    var $18 = $_pre3 & 65535;
    var $19 = $17 * $18 & -1;
    var $20 = $col_045 >>> ($16 >>> 0);
    var $21 = $19 + $20 | 0;
    var $22 = $_pre4 + ($21 << 3) + ($15 << 1) | 0;
    var $23 = HEAP16[$22 >> 1];
    var $_not = $23 << 16 >> 16 != 0;
    var $brmerge = $_not | $9;
    if ($brmerge) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $_pre5 = $_pre & 65535;
    var $_pre_phi = $_pre5;
    label = 19;
    break;
   case 8:
    var $24 = $col_045 - 2 | 0;
    var $25 = $col_045 + 2 | 0;
    var $26 = $24 >>> 0 > $25 >>> 0;
    var $27 = $1 & 65535;
    var $28 = $_pre & 65535;
    var $tot_037 = 0;
    var $n_038 = 0;
    var $r_039 = $7;
    label = 9;
    break;
   case 9:
    var $r_039;
    var $n_038;
    var $tot_037;
    if ($26) {
      var $tot_1_lcssa = $tot_037;
      var $n_1_lcssa = $n_038;
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $30 = $r_039 >>> 0 < $27 >>> 0;
    var $31 = $r_039 << 1;
    var $32 = $31 & 14;
    var $33 = $r_039 >>> ($16 >>> 0);
    var $34 = $33 * $18 & -1;
    var $tot_133 = $tot_037;
    var $n_134 = $n_038;
    var $c_035 = $24;
    label = 11;
    break;
   case 11:
    var $c_035;
    var $n_134;
    var $tot_133;
    var $36 = $c_035 >>> 0 < $28 >>> 0;
    var $or_cond = $30 & $36;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $n_2 = $n_134;
      var $tot_2 = $tot_133;
      label = 15;
      break;
    }
   case 12:
    var $38 = $c_035 & 1;
    var $39 = $38 | $32;
    var $40 = $39 << 1;
    var $41 = $_pre1 >>> ($40 >>> 0);
    var $42 = $41 & 3;
    var $43 = ($42 | 0) == ($15 | 0);
    if ($43) {
      label = 13;
      break;
    } else {
      var $n_2 = $n_134;
      var $tot_2 = $tot_133;
      label = 15;
      break;
    }
   case 13:
    var $45 = $c_035 >>> ($16 >>> 0);
    var $46 = $34 + $45 | 0;
    var $47 = $_pre4 + ($46 << 3) + ($15 << 1) | 0;
    var $48 = HEAP16[$47 >> 1];
    var $49 = $48 << 16 >> 16 == 0;
    if ($49) {
      var $n_2 = $n_134;
      var $tot_2 = $tot_133;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $51 = $48 & 65535;
    var $52 = $n_134 + 1 | 0;
    var $53 = $51 + $tot_133 | 0;
    var $n_2 = $52;
    var $tot_2 = $53;
    label = 15;
    break;
   case 15:
    var $tot_2;
    var $n_2;
    var $55 = $c_035 + 1 | 0;
    var $56 = $55 >>> 0 > $25 >>> 0;
    if ($56) {
      var $tot_1_lcssa = $tot_2;
      var $n_1_lcssa = $n_2;
      label = 16;
      break;
    } else {
      var $tot_133 = $tot_2;
      var $n_134 = $n_2;
      var $c_035 = $55;
      label = 11;
      break;
    }
   case 16:
    var $n_1_lcssa;
    var $tot_1_lcssa;
    var $57 = $r_039 + 1 | 0;
    var $58 = $57 >>> 0 > $8 >>> 0;
    if ($58) {
      label = 17;
      break;
    } else {
      var $tot_037 = $tot_1_lcssa;
      var $n_038 = $n_1_lcssa;
      var $r_039 = $57;
      label = 9;
      break;
    }
   case 17:
    var $59 = ($n_1_lcssa | 0) == 0;
    if ($59) {
      var $_pre_phi = $28;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $61 = Math.floor(($tot_1_lcssa >>> 0) / ($n_1_lcssa >>> 0));
    var $62 = $61 & 65535;
    HEAP16[$22 >> 1] = $62;
    var $_pre_phi = $28;
    label = 19;
    break;
   case 19:
    var $_pre_phi;
    var $63 = $col_045 + 1 | 0;
    var $64 = $63 >>> 0 < $_pre_phi >>> 0;
    if ($64) {
      var $col_045 = $63;
      label = 6;
      break;
    } else {
      var $65 = $_pre;
      label = 20;
      break;
    }
   case 20:
    var $65;
    var $66 = $row_048 + 1 | 0;
    var $67 = $1 & 65535;
    var $68 = $66 >>> 0 < $67 >>> 0;
    if ($68) {
      var $row_048 = $66;
      var $3 = $65;
      label = 4;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    return;
  }
}
_remove_zeroes["X"] = 1;
function _crop_masked_pixels() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mblack = __stackBase__;
    var $1 = HEAP32[5263692 >> 2];
    var $2 = ($1 | 0) == 64;
    var $3 = ($1 | 0) == 86;
    var $or_cond = $2 | $3;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _phase_one_correct();
    label = 4;
    break;
   case 4:
    var $6 = HEAP16[5398900 >> 1];
    var $7 = $6 << 16 >> 16 == 0;
    if ($7) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $8 = HEAP16[5245036 >> 1];
    var $9 = $8 & 65535;
    var $10 = HEAP16[5243564 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 << 1;
    var $13 = $9 - $12 | 0;
    var $14 = ($13 | 0) > 0;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 24;
      break;
    }
   case 6:
    var $_pre11 = HEAP32[5398904 >> 2];
    var $row_078 = 0;
    label = 9;
    break;
   case 7:
    var $15 = HEAP16[5398712 >> 1];
    var $16 = $15 << 16 >> 16 == 0;
    if ($16) {
      label = 24;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_170 = 0;
    var $79 = $_pre;
    label = 20;
    break;
   case 9:
    var $row_078;
    var $17 = $6 & 65535;
    var $18 = ($_pre11 | 0) != 0;
    var $19 = $18 & 1;
    var $20 = $19 ^ 1;
    var $21 = $17 << $20;
    var $22 = ($21 | 0) > 0;
    if ($22) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre19 = $row_078 + 1 | 0;
    var $_pre_phi = $_pre19;
    label = 19;
    break;
   case 11:
    var $23 = $row_078 >> 1;
    var $24 = $row_078 + 1 | 0;
    var $25 = $24 >> 1;
    var $col_073 = 0;
    label = 12;
    break;
   case 12:
    var $col_073;
    var $27 = $17 - 1 | 0;
    if ($18) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $29 = $23 - $col_073 | 0;
    var $30 = $col_073 + $25 | 0;
    var $c_0 = $30;
    var $_pn = $29;
    label = 15;
    break;
   case 14:
    var $32 = $col_073 >> 1;
    var $33 = $row_078 - $32 | 0;
    var $34 = $col_073 + 1 | 0;
    var $35 = $34 >> 1;
    var $36 = $35 + $row_078 | 0;
    var $c_0 = $36;
    var $_pn = $33;
    label = 15;
    break;
   case 15:
    var $_pn;
    var $c_0;
    var $r_0 = $_pn + $27 | 0;
    var $38 = HEAP16[5398712 >> 1];
    var $39 = $38 & 65535;
    var $40 = $r_0 >>> 0 < $39 >>> 0;
    if ($40) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    var $42 = HEAP16[5242964 >> 1];
    var $43 = $42 & 65535;
    var $44 = $c_0 >>> 0 < $43 >>> 0;
    if ($44) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $46 = $11 + $row_078 | 0;
    var $47 = HEAP16[5245028 >> 1];
    var $48 = $47 & 65535;
    var $49 = $46 * $48 & -1;
    var $50 = HEAP16[5263700 >> 1];
    var $51 = $50 & 65535;
    var $52 = $51 + $col_073 | 0;
    var $53 = $52 + $49 | 0;
    var $54 = HEAP32[5245032 >> 2];
    var $55 = $54 + ($53 << 1) | 0;
    var $56 = HEAP16[$55 >> 1];
    var $57 = HEAP32[5427632 >> 2];
    var $58 = $r_0 << 1;
    var $59 = $58 & 14;
    var $60 = $c_0 & 1;
    var $61 = $59 | $60;
    var $62 = $61 << 1;
    var $63 = $57 >>> ($62 >>> 0);
    var $64 = $63 & 3;
    var $65 = HEAP16[5244916 >> 1];
    var $66 = $65 & 65535;
    var $67 = $r_0 >>> ($66 >>> 0);
    var $68 = HEAP16[5264092 >> 1];
    var $69 = $68 & 65535;
    var $70 = $67 * $69 & -1;
    var $71 = $c_0 >>> ($66 >>> 0);
    var $72 = $70 + $71 | 0;
    var $73 = HEAP32[5264108 >> 2];
    var $74 = $73 + ($72 << 3) + ($64 << 1) | 0;
    HEAP16[$74 >> 1] = $56;
    label = 18;
    break;
   case 18:
    var $76 = $col_073 + 1 | 0;
    var $77 = ($76 | 0) < ($21 | 0);
    if ($77) {
      var $col_073 = $76;
      label = 12;
      break;
    } else {
      var $_pre_phi = $24;
      label = 19;
      break;
    }
   case 19:
    var $_pre_phi;
    var $78 = ($_pre_phi | 0) < ($13 | 0);
    if ($78) {
      var $row_078 = $_pre_phi;
      label = 9;
      break;
    } else {
      label = 24;
      break;
    }
   case 20:
    var $79;
    var $row_170;
    var $80 = $79 << 16 >> 16 == 0;
    if ($80) {
      var $101 = 0;
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre2 = HEAP16[5243564 >> 1];
    var $_pre3 = HEAP16[5245028 >> 1];
    var $_pre4 = HEAP16[5263700 >> 1];
    var $_pre5 = HEAP32[5245032 >> 2];
    var $_pre6 = HEAP16[5244916 >> 1];
    var $_pre7 = HEAP16[5264092 >> 1];
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_165 = 0;
    label = 22;
    break;
   case 22:
    var $col_165;
    var $81 = $_pre2 & 65535;
    var $82 = $81 + $row_170 | 0;
    var $83 = $_pre3 & 65535;
    var $84 = $82 * $83 & -1;
    var $85 = $_pre4 & 65535;
    var $86 = $85 + $col_165 | 0;
    var $87 = $86 + $84 | 0;
    var $88 = $_pre5 + ($87 << 1) | 0;
    var $89 = HEAP16[$88 >> 1];
    var $90 = _fcol($row_170, $col_165);
    var $91 = $_pre6 & 65535;
    var $92 = $row_170 >> $91;
    var $93 = $_pre7 & 65535;
    var $94 = $92 * $93 & -1;
    var $95 = $col_165 >> $91;
    var $96 = $94 + $95 | 0;
    var $97 = $_pre8 + ($96 << 3) + ($90 << 1) | 0;
    HEAP16[$97 >> 1] = $89;
    var $98 = $col_165 + 1 | 0;
    var $99 = $_pre & 65535;
    var $100 = ($98 | 0) < ($99 | 0);
    if ($100) {
      var $col_165 = $98;
      label = 22;
      break;
    } else {
      var $101 = $_pre;
      label = 23;
      break;
    }
   case 23:
    var $101;
    var $102 = $row_170 + 1 | 0;
    var $103 = $15 & 65535;
    var $104 = ($102 | 0) < ($103 | 0);
    if ($104) {
      var $row_170 = $102;
      var $79 = $101;
      label = 20;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $105 = HEAP32[5263512 >> 2];
    var $106 = ($105 | 0) == 0;
    if ($106) {
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 25:
    var $108 = HEAP32[5263692 >> 2];
    var $109 = ($108 | 0) == 42;
    var $110 = ($108 | 0) == 46;
    var $or_cond3 = $109 | $110;
    if ($or_cond3) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP32[5263520 >> 2] = 2;
    HEAP32[5263504 >> 2] = 2;
    HEAP32[5263512 >> 2] = -2;
    var $127 = -2;
    var $_pr9 = $108;
    label = 33;
    break;
   case 27:
    var $113 = ($108 | 0) == 10;
    var $114 = ($108 | 0) == 26;
    var $or_cond5 = $113 | $114;
    if ($or_cond5) {
      var $127 = 0;
      var $_pr9 = $108;
      label = 33;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $116 = ($108 | 0) == 82;
    if ($116) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $118 = _strncmp(5263372, 5579868, 3);
    var $119 = ($118 | 0) == 0;
    if ($119) {
      label = 36;
      break;
    } else {
      var $127 = 0;
      var $_pr9 = 82;
      label = 33;
      break;
    }
   case 30:
    var $_old6 = ($108 | 0) == 34;
    if ($_old6) {
      var $127 = 0;
      var $_pr9 = 34;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $122 = ($108 | 0) == 36;
    if ($122) {
      label = 32;
      break;
    } else {
      var $145 = $108;
      label = 34;
      break;
    }
   case 32:
    var $124 = HEAP32[5263696 >> 2];
    var $125 = $124 & 32;
    var $126 = ($125 | 0) == 0;
    if ($126) {
      label = 36;
      break;
    } else {
      var $127 = 0;
      var $_pr9 = 36;
      label = 33;
      break;
    }
   case 33:
    var $_pr9;
    var $127;
    var $128 = HEAP16[5243564 >> 1];
    var $129 = $128 & 65535;
    HEAP32[5263516 >> 2] = $129;
    HEAP32[5263500 >> 2] = $129;
    var $130 = HEAP16[5398712 >> 1];
    var $131 = $130 & 65535;
    var $132 = $131 + $129 | 0;
    HEAP32[5263524 >> 2] = $132;
    HEAP32[5263508 >> 2] = $132;
    var $133 = HEAP16[5263700 >> 1];
    var $134 = $133 & 65535;
    var $135 = $127 + $134 | 0;
    HEAP32[5263512 >> 2] = $135;
    var $136 = HEAP16[5242964 >> 1];
    var $137 = $136 & 65535;
    var $138 = $137 + $134 | 0;
    var $139 = HEAP32[5263520 >> 2];
    var $140 = $138 + $139 | 0;
    HEAP32[5263520 >> 2] = $140;
    var $141 = HEAP16[5245028 >> 1];
    var $142 = $141 & 65535;
    var $143 = HEAP32[5263528 >> 2];
    var $144 = $143 + $142 | 0;
    HEAP32[5263528 >> 2] = $144;
    var $145 = $_pr9;
    label = 34;
    break;
   case 34:
    var $145;
    var $146 = ($145 | 0) == 66;
    if ($146) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $148 = HEAP16[5243564 >> 1];
    var $149 = $148 & 65535;
    HEAP32[5263508 >> 2] = $149;
    var $150 = HEAP16[5242964 >> 1];
    var $151 = $150 & 65535;
    HEAP32[5263512 >> 2] = $151;
    label = 36;
    break;
   case 36:
    var $152 = $mblack;
    HEAP32[$152 >> 2] = 0;
    HEAP32[$152 + 4 >> 2] = 0;
    HEAP32[$152 + 8 >> 2] = 0;
    HEAP32[$152 + 12 >> 2] = 0;
    HEAP32[$152 + 16 >> 2] = 0;
    HEAP32[$152 + 20 >> 2] = 0;
    HEAP32[$152 + 24 >> 2] = 0;
    HEAP32[$152 + 28 >> 2] = 0;
    var $153 = HEAP32[5427632 >> 2];
    var $154 = HEAP16[5243564 >> 1];
    var $155 = $154 & 65535;
    var $156 = HEAP16[5263700 >> 1];
    var $157 = $156 & 65535;
    var $158 = HEAP16[5245028 >> 1];
    var $159 = $158 & 65535;
    var $160 = HEAP32[5245032 >> 2];
    var $m_062 = 0;
    var $zero_063 = 0;
    label = 37;
    break;
   case 37:
    var $zero_063;
    var $m_062;
    var $161 = 5263500 + ($m_062 << 4) | 0;
    var $162 = HEAP32[$161 >> 2];
    var $163 = 5263508 + ($m_062 << 4) | 0;
    var $164 = HEAP32[$163 >> 2];
    var $165 = ($162 | 0) < ($164 | 0);
    if ($165) {
      label = 38;
      break;
    } else {
      var $zero_1_lcssa = $zero_063;
      label = 43;
      break;
    }
   case 38:
    var $166 = 5263504 + ($m_062 << 4) | 0;
    var $167 = HEAP32[$166 >> 2];
    var $168 = 5263512 + ($m_062 << 4) | 0;
    var $169 = HEAP32[$168 >> 2];
    var $170 = ($167 | 0) < ($169 | 0);
    var $zero_156 = $zero_063;
    var $row_257 = $162;
    label = 39;
    break;
   case 39:
    var $row_257;
    var $zero_156;
    if ($170) {
      label = 40;
      break;
    } else {
      var $zero_2_lcssa = $zero_156;
      label = 42;
      break;
    }
   case 40:
    var $172 = $row_257 - $155 | 0;
    var $173 = $172 << 1;
    var $174 = $173 & 14;
    var $175 = $159 * $row_257 & -1;
    var $col_254 = $167;
    var $zero_255 = $zero_156;
    label = 41;
    break;
   case 41:
    var $zero_255;
    var $col_254;
    var $177 = $col_254 - $157 | 0;
    var $178 = $177 & 1;
    var $179 = $174 | $178;
    var $180 = $179 << 1;
    var $181 = $153 >>> ($180 >>> 0);
    var $182 = $181 & 3;
    var $183 = $175 + $col_254 | 0;
    var $184 = $160 + ($183 << 1) | 0;
    var $185 = HEAP16[$184 >> 1];
    var $186 = $185 & 65535;
    var $187 = $mblack + ($182 << 2) | 0;
    var $188 = HEAP32[$187 >> 2];
    var $189 = $188 + $186 | 0;
    HEAP32[$187 >> 2] = $189;
    var $190 = $182 | 4;
    var $191 = $mblack + ($190 << 2) | 0;
    var $192 = HEAP32[$191 >> 2];
    var $193 = $192 + 1 | 0;
    HEAP32[$191 >> 2] = $193;
    var $194 = $185 << 16 >> 16 == 0;
    var $195 = $194 & 1;
    var $196 = $195 + $zero_255 | 0;
    var $197 = $col_254 + 1 | 0;
    var $198 = ($197 | 0) < ($169 | 0);
    if ($198) {
      var $col_254 = $197;
      var $zero_255 = $196;
      label = 41;
      break;
    } else {
      var $zero_2_lcssa = $196;
      label = 42;
      break;
    }
   case 42:
    var $zero_2_lcssa;
    var $199 = $row_257 + 1 | 0;
    var $200 = ($199 | 0) < ($164 | 0);
    if ($200) {
      var $zero_156 = $zero_2_lcssa;
      var $row_257 = $199;
      label = 39;
      break;
    } else {
      var $zero_1_lcssa = $zero_2_lcssa;
      label = 43;
      break;
    }
   case 43:
    var $zero_1_lcssa;
    var $201 = $m_062 + 1 | 0;
    var $exitcond = ($201 | 0) == 8;
    if ($exitcond) {
      label = 44;
      break;
    } else {
      var $m_062 = $201;
      var $zero_063 = $zero_1_lcssa;
      label = 37;
      break;
    }
   case 44:
    var $203 = HEAP32[5263692 >> 2];
    var $204 = ($203 | 0) == 10;
    var $205 = HEAP16[5242964 >> 1];
    var $206 = ($205 & 65535) < ($158 & 65535);
    var $or_cond21 = $204 & $206;
    if ($or_cond21) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    var $208 = $mblack | 0;
    var $209 = HEAP32[$208 >> 2];
    var $210 = $mblack + 4 | 0;
    var $211 = HEAP32[$210 >> 2];
    var $212 = $211 + $209 | 0;
    var $213 = $mblack + 8 | 0;
    var $214 = HEAP32[$213 >> 2];
    var $215 = $212 + $214 | 0;
    var $216 = $mblack + 12 | 0;
    var $217 = HEAP32[$216 >> 2];
    var $218 = $215 + $217 | 0;
    var $219 = $mblack + 16 | 0;
    var $220 = HEAP32[$219 >> 2];
    var $221 = $mblack + 20 | 0;
    var $222 = HEAP32[$221 >> 2];
    var $223 = $222 + $220 | 0;
    var $224 = $mblack + 24 | 0;
    var $225 = HEAP32[$224 >> 2];
    var $226 = $223 + $225 | 0;
    var $227 = $mblack + 28 | 0;
    var $228 = HEAP32[$227 >> 2];
    var $229 = $226 + $228 | 0;
    var $230 = Math.floor(($218 >>> 0) / ($229 >>> 0));
    var $231 = $230 - 4 | 0;
    HEAP32[5561400 >> 2] = $231;
    _canon_600_correct();
    label = 51;
    break;
   case 46:
    var $232 = $mblack + 16 | 0;
    var $233 = HEAP32[$232 >> 2];
    var $234 = $zero_1_lcssa >>> 0 < $233 >>> 0;
    if ($234) {
      label = 47;
      break;
    } else {
      label = 51;
      break;
    }
   case 47:
    var $236 = $mblack + 20 | 0;
    var $237 = HEAP32[$236 >> 2];
    var $238 = ($237 | 0) == 0;
    if ($238) {
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $240 = $mblack + 24 | 0;
    var $241 = HEAP32[$240 >> 2];
    var $242 = ($241 | 0) == 0;
    if ($242) {
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $244 = $mblack + 28 | 0;
    var $245 = HEAP32[$244 >> 2];
    var $246 = ($245 | 0) == 0;
    if ($246) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $247 = $mblack | 0;
    var $248 = HEAP32[$247 >> 2];
    var $249 = Math.floor(($248 >>> 0) / ($233 >>> 0));
    HEAP32[5560904 >> 2] = $249;
    var $250 = $mblack + 4 | 0;
    var $251 = HEAP32[$250 >> 2];
    var $252 = Math.floor(($251 >>> 0) / ($237 >>> 0));
    HEAP32[5560908 >> 2] = $252;
    var $253 = $mblack + 8 | 0;
    var $254 = HEAP32[$253 >> 2];
    var $255 = Math.floor(($254 >>> 0) / ($241 >>> 0));
    HEAP32[5560912 >> 2] = $255;
    var $256 = $mblack + 12 | 0;
    var $257 = HEAP32[$256 >> 2];
    var $258 = Math.floor(($257 >>> 0) / ($245 >>> 0));
    HEAP32[5560916 >> 2] = $258;
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return;
  }
}
_crop_masked_pixels["X"] = 1;
function _bad_pixels($cfname) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 140 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $line = __stackBase__;
    var $time = __stackBase__ + 128;
    var $row = __stackBase__ + 132;
    var $col = __stackBase__ + 136;
    var $1 = HEAP32[5427632 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 43;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $4 = ($cfname | 0) == 0;
    if ($4) {
      var $len_0 = 32;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = _fopen($cfname, 5579728);
    var $fp_2 = $6;
    label = 14;
    break;
   case 5:
    var $len_0;
    var $7 = _malloc($len_0);
    var $8 = ($7 | 0) == 0;
    if ($8) {
      label = 43;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $10 = $len_0 - 16 | 0;
    var $11 = _getcwd($7, $10);
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _free($7);
    var $14 = ___errno_location();
    var $15 = HEAP32[$14 >> 2];
    var $16 = ($15 | 0) == 34;
    var $17 = $len_0 << 1;
    if ($16) {
      var $len_0 = $17;
      label = 5;
      break;
    } else {
      label = 43;
      break;
    }
   case 8:
    var $19 = _strlen($7);
    var $_sum = $19 - 1 | 0;
    var $20 = $7 + $_sum | 0;
    var $21 = HEAP8[$7];
    var $22 = $21 << 24 >> 24 == 47;
    if ($22) {
      label = 9;
      break;
    } else {
      var $fp_1 = 0;
      label = 13;
      break;
    }
   case 9:
    var $23 = HEAP8[$20];
    var $24 = $23 << 24 >> 24 == 47;
    var $25 = $7 + $19 | 0;
    var $_ = $24 ? $20 : $25;
    var $cp_061 = $_;
    label = 11;
    break;
   case 10:
    var $26 = HEAP8[$7];
    var $27 = $26 << 24 >> 24 == 47;
    if ($27) {
      var $cp_061 = $32;
      label = 11;
      break;
    } else {
      var $fp_1 = $29;
      label = 13;
      break;
    }
   case 11:
    var $cp_061;
    for (var $$src = 5579564, $$dest = $cp_061, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $29 = _fopen($7, 5579728);
    var $30 = ($29 | 0) != 0;
    var $31 = ($cp_061 | 0) == ($7 | 0);
    var $or_cond = $30 | $31;
    if ($or_cond) {
      var $fp_1 = $29;
      label = 13;
      break;
    } else {
      var $cp_1 = $cp_061;
      label = 12;
      break;
    }
   case 12:
    var $cp_1;
    var $32 = $cp_1 - 1 | 0;
    var $33 = HEAP8[$32];
    var $34 = $33 << 24 >> 24 == 47;
    if ($34) {
      label = 10;
      break;
    } else {
      var $cp_1 = $32;
      label = 12;
      break;
    }
   case 13:
    var $fp_1;
    _free($7);
    var $fp_2 = $fp_1;
    label = 14;
    break;
   case 14:
    var $fp_2;
    var $36 = ($fp_2 | 0) == 0;
    if ($36) {
      label = 43;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $37 = $line | 0;
    var $38 = _fgets($37, 128, $fp_2);
    var $39 = ($38 | 0) == 0;
    if ($39) {
      label = 42;
      break;
    } else {
      var $fixed_0_ph74 = 0;
      label = 16;
      break;
    }
   case 16:
    var $fixed_0_ph74;
    label = 17;
    break;
   case 17:
    var $41 = _strchr($37, 35);
    var $42 = ($41 | 0) == 0;
    if ($42) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    HEAP8[$41] = 0;
    label = 19;
    break;
   case 19:
    var $45 = _sscanf($37, 5579400, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $col, HEAP32[tempInt + 4 >> 2] = $row, HEAP32[tempInt + 8 >> 2] = $time, tempInt));
    var $46 = ($45 | 0) == 3;
    if ($46) {
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 20:
    var $48 = HEAP32[$col >> 2];
    var $49 = HEAP16[5242964 >> 1];
    var $50 = $49 & 65535;
    var $51 = $48 >>> 0 < $50 >>> 0;
    if ($51) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $53 = HEAP32[$row >> 2];
    var $54 = HEAP16[5398712 >> 1];
    var $55 = $54 & 65535;
    var $56 = $53 >>> 0 < $55 >>> 0;
    if ($56) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $58 = HEAP32[$time >> 2];
    var $59 = HEAP32[5243568 >> 2];
    var $60 = ($58 | 0) > ($59 | 0);
    if ($60) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $61 = _fgets($37, 128, $fp_2);
    var $62 = ($61 | 0) == 0;
    if ($62) {
      var $fixed_0_ph73 = $fixed_0_ph74;
      label = 40;
      break;
    } else {
      label = 17;
      break;
    }
   case 24:
    var $63 = HEAP16[5244916 >> 1];
    var $64 = $63 & 65535;
    var $65 = HEAP16[5264092 >> 1];
    var $66 = $65 & 65535;
    var $67 = HEAP32[5264108 >> 2];
    var $rad_054 = 1;
    var $tot_055 = 0;
    label = 25;
    break;
   case 25:
    var $tot_055;
    var $rad_054;
    var $69 = $53 - $rad_054 | 0;
    var $70 = $53 + $rad_054 | 0;
    var $71 = ($69 | 0) > ($70 | 0);
    if ($71) {
      var $tot_1_lcssa = $tot_055;
      var $n_1_lcssa = 0;
      label = 35;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $72 = $48 - $rad_054 | 0;
    var $73 = $48 + $rad_054 | 0;
    var $74 = ($72 | 0) > ($73 | 0);
    var $r_045 = $69;
    var $tot_147 = $tot_055;
    var $n_148 = 0;
    label = 27;
    break;
   case 27:
    var $n_148;
    var $tot_147;
    var $r_045;
    if ($74) {
      var $tot_2_lcssa = $tot_147;
      var $n_2_lcssa = $n_148;
      label = 34;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $76 = $r_045 >>> 0 < $55 >>> 0;
    var $77 = ($r_045 | 0) == ($53 | 0);
    var $78 = $r_045 >> $64;
    var $79 = $78 * $66 & -1;
    var $c_041 = $72;
    var $tot_242 = $tot_147;
    var $n_243 = $n_148;
    label = 29;
    break;
   case 29:
    var $n_243;
    var $tot_242;
    var $c_041;
    var $81 = $c_041 >>> 0 < $50 >>> 0;
    var $or_cond82 = $76 & $81;
    if ($or_cond82) {
      label = 30;
      break;
    } else {
      var $n_3 = $n_243;
      var $tot_3 = $tot_242;
      label = 33;
      break;
    }
   case 30:
    var $83 = ($c_041 | 0) == ($48 | 0);
    var $or_cond40 = $77 & $83;
    if ($or_cond40) {
      var $n_3 = $n_243;
      var $tot_3 = $tot_242;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $85 = _fcol($r_045, $c_041);
    var $86 = _fcol($53, $48);
    var $87 = ($85 | 0) == ($86 | 0);
    if ($87) {
      label = 32;
      break;
    } else {
      var $n_3 = $n_243;
      var $tot_3 = $tot_242;
      label = 33;
      break;
    }
   case 32:
    var $89 = $c_041 >> $64;
    var $90 = $79 + $89 | 0;
    var $91 = $67 + ($90 << 3) + ($85 << 1) | 0;
    var $92 = HEAP16[$91 >> 1];
    var $93 = $92 & 65535;
    var $94 = $93 + $tot_242 | 0;
    var $95 = $n_243 + 1 | 0;
    var $n_3 = $95;
    var $tot_3 = $94;
    label = 33;
    break;
   case 33:
    var $tot_3;
    var $n_3;
    var $97 = $c_041 + 1 | 0;
    var $98 = ($97 | 0) > ($73 | 0);
    if ($98) {
      var $tot_2_lcssa = $tot_3;
      var $n_2_lcssa = $n_3;
      label = 34;
      break;
    } else {
      var $c_041 = $97;
      var $tot_242 = $tot_3;
      var $n_243 = $n_3;
      label = 29;
      break;
    }
   case 34:
    var $n_2_lcssa;
    var $tot_2_lcssa;
    var $99 = $r_045 + 1 | 0;
    var $100 = ($99 | 0) > ($70 | 0);
    if ($100) {
      var $tot_1_lcssa = $tot_2_lcssa;
      var $n_1_lcssa = $n_2_lcssa;
      label = 35;
      break;
    } else {
      var $r_045 = $99;
      var $tot_147 = $tot_2_lcssa;
      var $n_148 = $n_2_lcssa;
      label = 27;
      break;
    }
   case 35:
    var $n_1_lcssa;
    var $tot_1_lcssa;
    var $101 = $rad_054 + 1 | 0;
    var $102 = ($101 | 0) < 3;
    var $103 = ($n_1_lcssa | 0) == 0;
    var $or_cond39 = $102 & $103;
    if ($or_cond39) {
      var $rad_054 = $101;
      var $tot_055 = $tot_1_lcssa;
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $104 = ($tot_1_lcssa | 0) / ($n_1_lcssa | 0) & -1;
    var $105 = $104 & 65535;
    var $106 = _fcol($53, $48);
    var $107 = $53 >> $64;
    var $108 = $107 * $66 & -1;
    var $109 = $48 >> $64;
    var $110 = $108 + $109 | 0;
    var $111 = $67 + ($110 << 3) + ($106 << 1) | 0;
    HEAP16[$111 >> 1] = $105;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 37;
      break;
    } else {
      label = 23;
      break;
    }
   case 37:
    var $113 = $fixed_0_ph74 + 1 | 0;
    var $114 = ($fixed_0_ph74 | 0) == 0;
    if ($114) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $116 = HEAP32[_stderr >> 2];
    var $117 = _fwrite(5579236, 21, 1, $116);
    label = 39;
    break;
   case 39:
    var $118 = HEAP32[_stderr >> 2];
    var $119 = HEAP32[$col >> 2];
    var $120 = HEAP32[$row >> 2];
    var $121 = _fprintf($118, 5579120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $119, HEAP32[tempInt + 4 >> 2] = $120, tempInt));
    var $122 = _fgets($37, 128, $fp_2);
    var $123 = ($122 | 0) == 0;
    if ($123) {
      var $fixed_0_ph73 = $113;
      label = 40;
      break;
    } else {
      var $fixed_0_ph74 = $113;
      label = 16;
      break;
    }
   case 40:
    var $fixed_0_ph73;
    var $124 = ($fixed_0_ph73 | 0) == 0;
    if ($124) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $126 = HEAP32[_stderr >> 2];
    var $127 = _fputc(10, $126);
    label = 42;
    break;
   case 42:
    var $128 = _fclose($fp_2);
    label = 43;
    break;
   case 43:
    STACKTOP = __stackBase__;
    return;
  }
}
_bad_pixels["X"] = 1;
function _subtract($fname) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dim = __stackBase__;
    var $1 = $dim;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    var $2 = _fopen($fname, 5579008);
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _perror($fname);
    label = 32;
    break;
   case 4:
    var $6 = _fgetc($2);
    var $7 = ($6 | 0) == 80;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $9 = _fgetc($2);
    var $10 = ($9 | 0) == 53;
    if ($10) {
      var $number_0_ph = 0;
      var $nd_0_ph = 0;
      var $error_0_ph48 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $number_0_ph = 0;
    var $nd_0_ph = 0;
    var $error_0_ph48 = 1;
    label = 7;
    break;
   case 7:
    var $error_0_ph48;
    var $nd_0_ph;
    var $number_0_ph;
    var $12 = ($error_0_ph48 | 0) != 0;
    var $_not = $12 ^ 1;
    var $13 = ($nd_0_ph | 0) < 3;
    var $or_cond = $13 & $_not;
    var $14 = $dim + ($nd_0_ph << 2) | 0;
    var $number_0_ph50 = $number_0_ph;
    label = 8;
    break;
   case 8:
    var $number_0_ph50;
    var $comment_0 = 0;
    label = 9;
    break;
   case 9:
    var $comment_0;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    var $17 = _fgetc($2);
    if (($17 | 0) == 35) {
      label = 11;
      break;
    } else if (($17 | 0) == -1) {
      label = 17;
      break;
    } else {
      var $comment_1 = $comment_0;
      label = 12;
      break;
    }
   case 11:
    var $comment_1 = 1;
    label = 12;
    break;
   case 12:
    var $comment_1;
    var $20 = ($17 | 0) == 10;
    var $_comment_1 = $20 ? 0 : $comment_1;
    var $21 = ($_comment_1 | 0) == 0;
    if ($21) {
      label = 13;
      break;
    } else {
      var $comment_0 = $_comment_1;
      label = 9;
      break;
    }
   case 13:
    var $isdigittmp = $17 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    var $number_0_ = $isdigit ? 1 : $number_0_ph50;
    var $23 = ($number_0_ | 0) == 0;
    if ($23) {
      var $number_0_ph50 = 0;
      label = 8;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    if ($isdigit) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $26 = HEAP32[$14 >> 2];
    var $27 = $26 * 10 & -1;
    var $28 = $isdigittmp + $27 | 0;
    HEAP32[$14 >> 2] = $28;
    var $number_0_ph50 = $number_0_;
    label = 8;
    break;
   case 16:
    var $30 = _isspace($17);
    var $31 = ($30 | 0) == 0;
    var $_error_0 = $31 ? 1 : $error_0_ph48;
    var $32 = $31 & 1;
    var $33 = $32 ^ 1;
    var $nd_0_ = $33 + $nd_0_ph | 0;
    var $number_0__ = $31 ? $number_0_ : 0;
    var $number_0_ph = $number_0__;
    var $nd_0_ph = $nd_0_;
    var $error_0_ph48 = $_error_0;
    label = 7;
    break;
   case 17:
    var $or_cond40 = $12 | $13;
    if ($or_cond40) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $35 = HEAP32[_stderr >> 2];
    var $36 = _fprintf($35, 5578880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt));
    var $37 = _fclose($2);
    label = 32;
    break;
   case 19:
    var $39 = $dim | 0;
    var $40 = HEAP32[$39 >> 2];
    var $41 = HEAP16[5242964 >> 1];
    var $42 = $41 & 65535;
    var $43 = ($40 | 0) == ($42 | 0);
    if ($43) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    var $45 = $dim + 4 | 0;
    var $46 = HEAP32[$45 >> 2];
    var $47 = HEAP16[5398712 >> 1];
    var $48 = $47 & 65535;
    var $49 = ($46 | 0) == ($48 | 0);
    if ($49) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    var $51 = $dim + 8 | 0;
    var $52 = HEAP32[$51 >> 2];
    var $53 = ($52 | 0) == 65535;
    if ($53) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $55 = HEAP32[_stderr >> 2];
    var $56 = _fprintf($55, 5578760, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt));
    var $57 = _fclose($2);
    label = 32;
    break;
   case 23:
    var $59 = _calloc($40, 2);
    var $60 = $59;
    _merror($59, 5578644);
    var $61 = HEAP16[5398712 >> 1];
    var $62 = $61 << 16 >> 16 == 0;
    if ($62) {
      label = 31;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_044 = 0;
    var $63 = $_pre;
    label = 25;
    break;
   case 25:
    var $63;
    var $row_044;
    var $64 = $63 & 65535;
    var $65 = _fread($59, 2, $64, $2);
    var $66 = HEAP16[5242964 >> 1];
    var $67 = $66 << 16 >> 16 == 0;
    if ($67) {
      var $134 = 0;
      label = 30;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $68 = $row_044 << 1;
    var $69 = $68 & 14;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_043 = 0;
    var $74 = $_pre1;
    var $73 = $_pre2;
    var $72 = $_pre3;
    var $71 = $_pre4;
    label = 27;
    break;
   case 27:
    var $71;
    var $72;
    var $73;
    var $74;
    var $col_043;
    var $75 = $col_043 & 1;
    var $76 = $75 | $69;
    var $77 = $76 << 1;
    var $78 = $74 >>> ($77 >>> 0);
    var $79 = $78 & 3;
    var $80 = $73 & 65535;
    var $81 = $row_044 >> $80;
    var $82 = $72 & 65535;
    var $83 = $81 * $82 & -1;
    var $84 = $col_043 >> $80;
    var $85 = $83 + $84 | 0;
    var $86 = $71 + ($85 << 3) + ($79 << 1) | 0;
    var $87 = HEAP16[$86 >> 1];
    var $88 = $87 & 65535;
    var $89 = $60 + ($col_043 << 1) | 0;
    var $90 = HEAP16[$89 >> 1];
    var $91 = $90 & 65535;
    var $92 = _htons($91);
    var $93 = $88 - $92 | 0;
    var $94 = ($93 | 0) > 0;
    if ($94) {
      label = 28;
      break;
    } else {
      var $116 = 0;
      label = 29;
      break;
    }
   case 28:
    var $96 = HEAP32[5427632 >> 2];
    var $97 = $96 >>> ($77 >>> 0);
    var $98 = $97 & 3;
    var $99 = HEAP16[5244916 >> 1];
    var $100 = $99 & 65535;
    var $101 = $row_044 >> $100;
    var $102 = HEAP16[5264092 >> 1];
    var $103 = $102 & 65535;
    var $104 = $101 * $103 & -1;
    var $105 = $col_043 >> $100;
    var $106 = $104 + $105 | 0;
    var $107 = HEAP32[5264108 >> 2];
    var $108 = $107 + ($106 << 3) + ($98 << 1) | 0;
    var $109 = HEAP16[$108 >> 1];
    var $110 = $109 & 65535;
    var $111 = HEAP16[$89 >> 1];
    var $112 = $111 & 65535;
    var $113 = _htons($112);
    var $114 = $110 - $113 | 0;
    var $phitmp = $114 & 65535;
    var $116 = $phitmp;
    label = 29;
    break;
   case 29:
    var $116;
    var $117 = HEAP32[5427632 >> 2];
    var $118 = $117 >>> ($77 >>> 0);
    var $119 = $118 & 3;
    var $120 = HEAP16[5244916 >> 1];
    var $121 = $120 & 65535;
    var $122 = $row_044 >> $121;
    var $123 = HEAP16[5264092 >> 1];
    var $124 = $123 & 65535;
    var $125 = $122 * $124 & -1;
    var $126 = $col_043 >> $121;
    var $127 = $125 + $126 | 0;
    var $128 = HEAP32[5264108 >> 2];
    var $129 = $128 + ($127 << 3) + ($119 << 1) | 0;
    HEAP16[$129 >> 1] = $116;
    var $130 = $col_043 + 1 | 0;
    var $131 = HEAP16[5242964 >> 1];
    var $132 = $131 & 65535;
    var $133 = ($130 | 0) < ($132 | 0);
    if ($133) {
      var $col_043 = $130;
      var $74 = $117;
      var $73 = $120;
      var $72 = $123;
      var $71 = $128;
      label = 27;
      break;
    } else {
      var $134 = $131;
      label = 30;
      break;
    }
   case 30:
    var $134;
    var $135 = $row_044 + 1 | 0;
    var $136 = HEAP16[5398712 >> 1];
    var $137 = $136 & 65535;
    var $138 = ($135 | 0) < ($137 | 0);
    if ($138) {
      var $row_044 = $135;
      var $63 = $134;
      label = 25;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _free($59);
    var $139 = _fclose($2);
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    HEAP32[5561400 >> 2] = 0;
    label = 32;
    break;
   case 32:
    STACKTOP = __stackBase__;
    return;
  }
}
_subtract["X"] = 1;
function _gamma_curve($pwr, $ts, $mode, $imax) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bnd = __stackBase__;
    var $1 = $bnd;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = 0;
    var $2 = $ts >= 1;
    var $3 = $2 & 1;
    var $4 = $bnd + ($3 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $5 = $ts != 0;
    if ($5) {
      label = 3;
      break;
    } else {
      var $g_sroa_2_1 = 0;
      var $g_sroa_3_0 = 0;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    }
   case 3:
    var $7 = $ts - 1;
    var $8 = $pwr - 1;
    var $9 = $8 * $7;
    var $10 = $9 > 0;
    if ($10) {
      var $g_sroa_2_1 = 0;
      var $g_sroa_3_0 = 0;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $11 = $bnd | 0;
    var $12 = $bnd + 8 | 0;
    var $13 = $pwr != 0;
    var $14 = -$pwr;
    var $i_059 = 0;
    label = 5;
    break;
   case 5:
    var $i_059;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$11 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$11 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$12 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$12 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $18 = $16 + $17;
    var $19 = $18 * .5;
    if ($13) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $21 = $19 / $ts;
    var $22 = Math.pow($21, $14);
    var $23 = $22 - 1;
    var $24 = $23 / $pwr;
    var $25 = 1 / $19;
    var $26 = $24 - $25;
    var $27 = $26 > -1;
    var $28 = $27 & 1;
    var $29 = $bnd + ($28 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $19, HEAP32[$29 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 7:
    var $31 = 1 / $19;
    var $32 = 1 - $31;
    var $33 = Math.exp($32);
    var $34 = $19 / $33;
    var $35 = $34 < $ts;
    var $36 = $35 & 1;
    var $37 = $bnd + ($36 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $19, HEAP32[$37 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$37 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $39 = $i_059 + 1 | 0;
    var $exitcond60 = ($39 | 0) == 48;
    if ($exitcond60) {
      label = 9;
      break;
    } else {
      var $i_059 = $39;
      label = 5;
      break;
    }
   case 9:
    var $41 = $19 / $ts;
    if ($13) {
      label = 10;
      break;
    } else {
      var $g_sroa_2_1 = $19;
      var $g_sroa_3_0 = $41;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    }
   case 10:
    var $43 = 1 / $pwr;
    var $44 = $43 - 1;
    var $45 = $19 * $44;
    var $g_sroa_2_1 = $19;
    var $g_sroa_3_0 = $41;
    var $g_sroa_4_0 = $45;
    label = 11;
    break;
   case 11:
    var $g_sroa_4_0;
    var $g_sroa_3_0;
    var $g_sroa_2_1;
    var $47 = $pwr != 0;
    var $48 = $g_sroa_3_0 * $g_sroa_3_0;
    var $49 = $48 * $ts;
    var $50 = $49 * .5;
    if ($47) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $52 = 1 - $g_sroa_3_0;
    var $53 = $g_sroa_4_0 * $52;
    var $54 = $50 - $53;
    var $55 = $pwr + 1;
    var $56 = Math.pow($g_sroa_3_0, $55);
    var $57 = 1 - $56;
    var $58 = $g_sroa_4_0 + 1;
    var $59 = $58 * $57;
    var $60 = $59 / $55;
    var $61 = $54 + $60;
    var $_pn = $61;
    label = 14;
    break;
   case 13:
    var $63 = $50 + 1;
    var $64 = $63 - $g_sroa_2_1;
    var $65 = $64 - $g_sroa_3_0;
    var $66 = $g_sroa_3_0 * $g_sroa_2_1;
    var $67 = Math.log($g_sroa_3_0);
    var $68 = $67 - 1;
    var $69 = $66 * $68;
    var $70 = $65 - $69;
    var $_pn = $70;
    label = 14;
    break;
   case 14:
    var $_pn;
    var $72 = ($mode | 0) == 0;
    if ($72) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $73 = $imax | 0;
    var $74 = ($mode | 0) == 1;
    var $75 = $g_sroa_4_0 + 1;
    var $76 = 1 / $pwr;
    var $i_157 = 0;
    label = 17;
    break;
   case 16:
    var $g_sroa_5_0_in = 1 / $_pn;
    var $g_sroa_5_0 = $g_sroa_5_0_in - 1;
    HEAPF64[tempDoublePtr >> 3] = $pwr, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $ts, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_5_0, HEAP32[5398876 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398880 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 31;
    break;
   case 17:
    var $i_157;
    var $79 = 5428500 + ($i_157 << 1) | 0;
    HEAP16[$79 >> 1] = -1;
    var $80 = $i_157 | 0;
    var $81 = $80 / $73;
    var $82 = $81 < 1;
    if ($82) {
      label = 18;
      break;
    } else {
      label = 30;
      break;
    }
   case 18:
    if ($74) {
      label = 24;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $85 = $81 < $g_sroa_3_0;
    if ($85) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $87 = $81 * $ts;
    var $111 = $87;
    label = 29;
    break;
   case 21:
    if ($47) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $90 = Math.pow($81, $pwr);
    var $91 = $75 * $90;
    var $92 = $91 - $g_sroa_4_0;
    var $111 = $92;
    label = 29;
    break;
   case 23:
    var $94 = Math.log($81);
    var $95 = $g_sroa_2_1 * $94;
    var $96 = $95 + 1;
    var $111 = $96;
    label = 29;
    break;
   case 24:
    var $98 = $81 < $g_sroa_2_1;
    if ($98) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $100 = $81 / $ts;
    var $111 = $100;
    label = 29;
    break;
   case 26:
    if ($47) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $103 = $g_sroa_4_0 + $81;
    var $104 = $103 / $75;
    var $105 = Math.pow($104, $76);
    var $111 = $105;
    label = 29;
    break;
   case 28:
    var $107 = $81 - 1;
    var $108 = $107 / $g_sroa_2_1;
    var $109 = Math.exp($108);
    var $111 = $109;
    label = 29;
    break;
   case 29:
    var $111;
    var $112 = $111 * 65536;
    var $113 = $112 >= 0 ? Math.floor($112) : Math.ceil($112);
    HEAP16[$79 >> 1] = $113;
    label = 30;
    break;
   case 30:
    var $115 = $i_157 + 1 | 0;
    var $exitcond = ($115 | 0) == 65536;
    if ($exitcond) {
      label = 31;
      break;
    } else {
      var $i_157 = $115;
      label = 17;
      break;
    }
   case 31:
    STACKTOP = __stackBase__;
    return;
  }
}
_gamma_curve["X"] = 1;
function _pseudoinverse($in, $out, $size) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $work = __stackBase__;
    var $1 = ($size | 0) > 0;
    var $i_075 = 0;
    label = 3;
    break;
   case 3:
    var $i_075;
    var $2 = $i_075 + 3 | 0;
    var $3 = $work + $i_075 * 48 | 0;
    var $4 = $work + $i_075 * 48 + 8 | 0;
    var $5 = $work + $i_075 * 48 + 16 | 0;
    var $6 = ($i_075 | 0) == 0;
    var $7 = $6 & 1;
    var $8 = $7 | 0;
    var $9 = $work + $i_075 * 48 + 24 | 0;
    var $10 = $3;
    HEAP32[$10 >> 2] = 0;
    HEAP32[$10 + 4 >> 2] = 0;
    HEAP32[$10 + 8 >> 2] = 0;
    HEAP32[$10 + 12 >> 2] = 0;
    HEAP32[$10 + 16 >> 2] = 0;
    HEAP32[$10 + 20 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $8, HEAP32[$9 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $11 = ($2 | 0) == 4;
    var $12 = $11 & 1;
    var $13 = $12 | 0;
    var $14 = $work + $i_075 * 48 + 32 | 0;
    HEAPF64[tempDoublePtr >> 3] = $13, HEAP32[$14 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$14 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $15 = ($2 | 0) == 5;
    var $16 = $15 & 1;
    var $17 = $16 | 0;
    var $18 = $work + $i_075 * 48 + 40 | 0;
    HEAPF64[tempDoublePtr >> 3] = $17, HEAP32[$18 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$18 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($1) {
      var $k_072 = 0;
      var $19 = 0;
      label = 4;
      break;
    } else {
      label = 19;
      break;
    }
   case 4:
    var $19;
    var $k_072;
    var $20 = $in + $k_072 * 24 + ($i_075 << 3) | 0;
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$20 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$20 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $22 = $in + $k_072 * 24 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = $21 * $23;
    var $25 = $19 + $24;
    var $26 = $k_072 + 1 | 0;
    var $exitcond82 = ($26 | 0) == ($size | 0);
    if ($exitcond82) {
      label = 14;
      break;
    } else {
      var $k_072 = $26;
      var $19 = $25;
      label = 4;
      break;
    }
   case 5:
    if ($1) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    var $27 = $work + 120 | 0;
    var $28 = $work + 24 | 0;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$28 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$28 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $30 = $work + 32 | 0;
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$30 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$30 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $32 = $work + 40 | 0;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$32 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$32 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $34 = $work + 72 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$34 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$34 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $36 = $work + 80 | 0;
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$36 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$36 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $38 = $work + 88 | 0;
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$38 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$38 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$27 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$27 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $41 = $work + 128 | 0;
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$41 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$41 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $43 = $work + 136 | 0;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$43 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$43 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $i_260 = 0;
    label = 13;
    break;
   case 7:
    var $i_167;
    var $45 = $work + $i_167 * 48 + ($i_167 << 3) | 0;
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$45 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$45 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $47 = $work + $i_167 * 48 | 0;
    var $48 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$47 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$47 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $49 = $48 / $46;
    HEAPF64[tempDoublePtr >> 3] = $49, HEAP32[$47 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$47 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $50 = $work + $i_167 * 48 + 8 | 0;
    var $51 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$50 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$50 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $52 = $51 / $46;
    HEAPF64[tempDoublePtr >> 3] = $52, HEAP32[$50 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$50 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $53 = $work + $i_167 * 48 + 16 | 0;
    var $54 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$53 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$53 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $55 = $54 / $46;
    HEAPF64[tempDoublePtr >> 3] = $55, HEAP32[$53 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$53 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $56 = $work + $i_167 * 48 + 24 | 0;
    var $57 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$56 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$56 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $58 = $57 / $46;
    HEAPF64[tempDoublePtr >> 3] = $58, HEAP32[$56 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$56 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $59 = $work + $i_167 * 48 + 32 | 0;
    var $60 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $61 = $60 / $46;
    HEAPF64[tempDoublePtr >> 3] = $61, HEAP32[$59 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$59 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $62 = $work + $i_167 * 48 + 40 | 0;
    var $63 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$62 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$62 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $64 = $63 / $46;
    HEAPF64[tempDoublePtr >> 3] = $64, HEAP32[$62 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$62 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_164 = 0;
    label = 8;
    break;
   case 8:
    var $k_164;
    var $66 = ($k_164 | 0) == ($i_167 | 0);
    if ($66) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $67 = $work + $k_164 * 48 + ($i_167 << 3) | 0;
    var $68 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$67 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$67 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $69 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$47 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$47 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $70 = $68 * $69;
    var $71 = $work + $k_164 * 48 | 0;
    var $72 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$71 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$71 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $73 = $72 - $70;
    HEAPF64[tempDoublePtr >> 3] = $73, HEAP32[$71 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$71 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $74 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$50 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$50 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $75 = $68 * $74;
    var $76 = $work + $k_164 * 48 + 8 | 0;
    var $77 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$76 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$76 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $78 = $77 - $75;
    HEAPF64[tempDoublePtr >> 3] = $78, HEAP32[$76 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$76 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $79 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$53 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$53 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $80 = $68 * $79;
    var $81 = $work + $k_164 * 48 + 16 | 0;
    var $82 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$81 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$81 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $83 = $82 - $80;
    HEAPF64[tempDoublePtr >> 3] = $83, HEAP32[$81 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $84 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$56 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$56 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $85 = $68 * $84;
    var $86 = $work + $k_164 * 48 + 24 | 0;
    var $87 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$86 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$86 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $88 = $87 - $85;
    HEAPF64[tempDoublePtr >> 3] = $88, HEAP32[$86 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$86 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $89 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$59 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$59 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $90 = $68 * $89;
    var $91 = $work + $k_164 * 48 + 32 | 0;
    var $92 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$91 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$91 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $93 = $92 - $90;
    HEAPF64[tempDoublePtr >> 3] = $93, HEAP32[$91 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$91 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $94 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$62 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$62 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $95 = $68 * $94;
    var $96 = $work + $k_164 * 48 + 40 | 0;
    var $97 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$96 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$96 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $98 = $97 - $95;
    HEAPF64[tempDoublePtr >> 3] = $98, HEAP32[$96 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$96 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 10;
    break;
   case 10:
    var $100 = $k_164 + 1 | 0;
    var $exitcond79 = ($100 | 0) == 3;
    if ($exitcond79) {
      label = 11;
      break;
    } else {
      var $k_164 = $100;
      label = 8;
      break;
    }
   case 11:
    var $102 = $i_167 + 1 | 0;
    var $exitcond80 = ($102 | 0) == 3;
    if ($exitcond80) {
      label = 5;
      break;
    } else {
      var $i_167 = $102;
      label = 7;
      break;
    }
   case 12:
    STACKTOP = __stackBase__;
    return;
   case 13:
    var $i_260;
    var $104 = $out + $i_260 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$104 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $105 = $in + $i_260 * 24 | 0;
    var $106 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$105 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$105 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $107 = $29 * $106;
    var $108 = $107;
    HEAPF64[tempDoublePtr >> 3] = $108, HEAP32[$104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$104 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $109 = $in + $i_260 * 24 + 8 | 0;
    var $110 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$109 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$109 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $111 = $31 * $110;
    var $112 = $108 + $111;
    HEAPF64[tempDoublePtr >> 3] = $112, HEAP32[$104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$104 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $113 = $in + $i_260 * 24 + 16 | 0;
    var $114 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$113 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$113 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $115 = $33 * $114;
    var $116 = $112 + $115;
    HEAPF64[tempDoublePtr >> 3] = $116, HEAP32[$104 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$104 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $117 = $out + $i_260 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$117 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$117 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $118 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$105 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$105 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $119 = $35 * $118;
    var $120 = $119;
    HEAPF64[tempDoublePtr >> 3] = $120, HEAP32[$117 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$117 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $121 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$109 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$109 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $122 = $37 * $121;
    var $123 = $120 + $122;
    HEAPF64[tempDoublePtr >> 3] = $123, HEAP32[$117 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$117 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $124 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$113 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$113 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $125 = $39 * $124;
    var $126 = $123 + $125;
    HEAPF64[tempDoublePtr >> 3] = $126, HEAP32[$117 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$117 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $127 = $out + $i_260 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$127 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$127 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $128 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$105 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$105 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $129 = $40 * $128;
    var $130 = $129;
    HEAPF64[tempDoublePtr >> 3] = $130, HEAP32[$127 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$127 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $131 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$109 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$109 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $132 = $42 * $131;
    var $133 = $130 + $132;
    HEAPF64[tempDoublePtr >> 3] = $133, HEAP32[$127 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$127 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $134 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$113 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$113 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $135 = $44 * $134;
    var $136 = $133 + $135;
    HEAPF64[tempDoublePtr >> 3] = $136, HEAP32[$127 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$127 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $137 = $i_260 + 1 | 0;
    var $exitcond = ($137 | 0) == ($size | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $i_260 = $137;
      label = 13;
      break;
    }
   case 14:
    HEAPF64[tempDoublePtr >> 3] = $25, HEAP32[$3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_072_1 = 0;
    var $139 = 0;
    label = 15;
    break;
   case 15:
    var $139;
    var $k_072_1;
    var $140 = $in + $k_072_1 * 24 + ($i_075 << 3) | 0;
    var $141 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$140 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$140 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $142 = $in + $k_072_1 * 24 + 8 | 0;
    var $143 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$142 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$142 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $144 = $141 * $143;
    var $145 = $139 + $144;
    var $146 = $k_072_1 + 1 | 0;
    var $exitcond82_1 = ($146 | 0) == ($size | 0);
    if ($exitcond82_1) {
      label = 16;
      break;
    } else {
      var $k_072_1 = $146;
      var $139 = $145;
      label = 15;
      break;
    }
   case 16:
    HEAPF64[tempDoublePtr >> 3] = $145, HEAP32[$4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_072_2 = 0;
    var $148 = 0;
    label = 17;
    break;
   case 17:
    var $148;
    var $k_072_2;
    var $149 = $in + $k_072_2 * 24 + ($i_075 << 3) | 0;
    var $150 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$149 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$149 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $151 = $in + $k_072_2 * 24 + 16 | 0;
    var $152 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$151 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$151 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $153 = $150 * $152;
    var $154 = $148 + $153;
    var $155 = $k_072_2 + 1 | 0;
    var $exitcond82_2 = ($155 | 0) == ($size | 0);
    if ($exitcond82_2) {
      label = 18;
      break;
    } else {
      var $k_072_2 = $155;
      var $148 = $154;
      label = 17;
      break;
    }
   case 18:
    HEAPF64[tempDoublePtr >> 3] = $154, HEAP32[$5 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 19;
    break;
   case 19:
    var $156 = $i_075 + 1 | 0;
    var $exitcond84 = ($156 | 0) == 3;
    if ($exitcond84) {
      var $i_167 = 0;
      label = 7;
      break;
    } else {
      var $i_075 = $156;
      label = 3;
      break;
    }
  }
}
_pseudoinverse["X"] = 1;
function _cam_xyz_coeff($cam_xyz) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 192 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam_rgb = __stackBase__;
    var $inverse = __stackBase__ + 96;
    var $1 = HEAP32[5560840 >> 2];
    var $2 = ($1 | 0) > 0;
    if ($2) {
      var $i_045 = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    var $i_139;
    var $3 = $cam_rgb + $i_139 * 24 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $5 = $4;
    var $6 = $cam_rgb + $i_139 * 24 + 8 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$6 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$6 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = $5 + $7;
    var $9 = $cam_rgb + $i_139 * 24 + 16 | 0;
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$9 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$9 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $11 = $8 + $10;
    var $12 = $4 / $11;
    HEAPF64[tempDoublePtr >> 3] = $12, HEAP32[$3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $13 = $7 / $11;
    HEAPF64[tempDoublePtr >> 3] = $13, HEAP32[$6 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $14 = $10 / $11;
    HEAPF64[tempDoublePtr >> 3] = $14, HEAP32[$9 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $15 = 1 / $11;
    var $16 = $15;
    var $17 = 5245640 + ($i_139 << 2) | 0;
    HEAPF32[$17 >> 2] = $16;
    var $18 = $i_139 + 1 | 0;
    var $19 = ($18 | 0) < ($1 | 0);
    if ($19) {
      var $i_139 = $18;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $20 = $cam_rgb | 0;
    var $21 = $inverse | 0;
    _pseudoinverse($20, $21, $1);
    HEAP32[5245040 >> 2] = 0;
    if ($2) {
      var $j_331 = 0;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $j_331;
    var $22 = $inverse + $j_331 * 24 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$22 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$22 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $24 = $23;
    var $25 = 5244964 + ($j_331 << 2) | 0;
    HEAPF32[$25 >> 2] = $24;
    var $26 = $j_331 + 1 | 0;
    var $exitcond = ($26 | 0) == ($1 | 0);
    if ($exitcond) {
      var $j_331_1 = 0;
      label = 6;
      break;
    } else {
      var $j_331 = $26;
      label = 5;
      break;
    }
   case 6:
    var $j_331_1;
    var $27 = $inverse + $j_331_1 * 24 + 8 | 0;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$27 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$27 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $29 = $28;
    var $30 = 5244980 + ($j_331_1 << 2) | 0;
    HEAPF32[$30 >> 2] = $29;
    var $31 = $j_331_1 + 1 | 0;
    var $exitcond_1 = ($31 | 0) == ($1 | 0);
    if ($exitcond_1) {
      var $j_331_2 = 0;
      label = 7;
      break;
    } else {
      var $j_331_1 = $31;
      label = 6;
      break;
    }
   case 7:
    var $j_331_2;
    var $32 = $inverse + $j_331_2 * 24 + 16 | 0;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$32 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$32 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $34 = $33;
    var $35 = 5244996 + ($j_331_2 << 2) | 0;
    HEAPF32[$35 >> 2] = $34;
    var $36 = $j_331_2 + 1 | 0;
    var $exitcond_2 = ($36 | 0) == ($1 | 0);
    if ($exitcond_2) {
      label = 9;
      break;
    } else {
      var $j_331_2 = $36;
      label = 7;
      break;
    }
   case 8:
    var $37 = $cam_rgb | 0;
    var $38 = $inverse | 0;
    _pseudoinverse($37, $38, $1);
    HEAP32[5245040 >> 2] = 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   case 10:
    var $i_045;
    var $39 = $cam_xyz + $i_045 * 24 | 0;
    var $40 = $cam_rgb + $i_045 * 24 | 0;
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$39 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$39 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $42 = $41 * .412453;
    var $43 = $42;
    var $44 = $cam_xyz + $i_045 * 24 + 8 | 0;
    var $45 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$44 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$44 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $46 = $45 * .212671;
    var $47 = $43 + $46;
    var $48 = $cam_xyz + $i_045 * 24 + 16 | 0;
    var $49 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$48 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$48 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $50 = $49 * .019334;
    var $51 = $47 + $50;
    HEAPF64[tempDoublePtr >> 3] = $51, HEAP32[$40 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$40 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $52 = $cam_rgb + $i_045 * 24 + 8 | 0;
    var $53 = $41 * .35758;
    var $54 = $53;
    var $55 = $45 * .71516;
    var $56 = $54 + $55;
    var $57 = $49 * .119193;
    var $58 = $56 + $57;
    HEAPF64[tempDoublePtr >> 3] = $58, HEAP32[$52 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $59 = $cam_rgb + $i_045 * 24 + 16 | 0;
    var $60 = $41 * .180423;
    var $61 = $60;
    var $62 = $45 * .072169;
    var $63 = $61 + $62;
    var $64 = $49 * .950227;
    var $65 = $63 + $64;
    HEAPF64[tempDoublePtr >> 3] = $65, HEAP32[$59 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$59 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $66 = $i_045 + 1 | 0;
    var $67 = ($66 | 0) < ($1 | 0);
    if ($67) {
      var $i_045 = $66;
      label = 10;
      break;
    } else {
      var $i_139 = 0;
      label = 3;
      break;
    }
  }
}
_cam_xyz_coeff["X"] = 1;
function _hat_transform($temp, $base, $st, $size, $sc) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($sc | 0) > 0;
    if ($1) {
      var $i_053 = 0;
      label = 5;
      break;
    } else {
      var $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_0_lcssa;
    var $2 = $i_0_lcssa + $sc | 0;
    var $3 = ($2 | 0) < ($size | 0);
    if ($3) {
      label = 4;
      break;
    } else {
      var $i_1_lcssa = $i_0_lcssa;
      label = 6;
      break;
    }
   case 4:
    var $4 = $size - $sc | 0;
    var $i_151 = $i_0_lcssa;
    var $25 = $2;
    label = 8;
    break;
   case 5:
    var $i_053;
    var $5 = $i_053 * $st & -1;
    var $6 = $base + ($5 << 2) | 0;
    var $7 = HEAPF32[$6 >> 2];
    var $8 = $7 * 2;
    var $9 = $sc - $i_053 | 0;
    var $10 = $9 * $st & -1;
    var $11 = $base + ($10 << 2) | 0;
    var $12 = HEAPF32[$11 >> 2];
    var $13 = $8 + $12;
    var $14 = $i_053 + $sc | 0;
    var $15 = $14 * $st & -1;
    var $16 = $base + ($15 << 2) | 0;
    var $17 = HEAPF32[$16 >> 2];
    var $18 = $13 + $17;
    var $19 = $temp + ($i_053 << 2) | 0;
    HEAPF32[$19 >> 2] = $18;
    var $20 = $i_053 + 1 | 0;
    var $exitcond58 = ($20 | 0) == ($sc | 0);
    if ($exitcond58) {
      var $i_0_lcssa = $sc;
      label = 3;
      break;
    } else {
      var $i_053 = $20;
      label = 5;
      break;
    }
   case 6:
    var $i_1_lcssa;
    var $21 = ($i_1_lcssa | 0) < ($size | 0);
    if ($21) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    var $22 = $size << 1;
    var $_neg = $22 - 2 | 0;
    var $23 = $_neg - $sc | 0;
    var $i_249 = $i_1_lcssa;
    label = 9;
    break;
   case 8:
    var $25;
    var $i_151;
    var $26 = $i_151 * $st & -1;
    var $27 = $base + ($26 << 2) | 0;
    var $28 = HEAPF32[$27 >> 2];
    var $29 = $28 * 2;
    var $30 = $i_151 - $sc | 0;
    var $31 = $30 * $st & -1;
    var $32 = $base + ($31 << 2) | 0;
    var $33 = HEAPF32[$32 >> 2];
    var $34 = $29 + $33;
    var $35 = $25 * $st & -1;
    var $36 = $base + ($35 << 2) | 0;
    var $37 = HEAPF32[$36 >> 2];
    var $38 = $34 + $37;
    var $39 = $temp + ($i_151 << 2) | 0;
    HEAPF32[$39 >> 2] = $38;
    var $40 = $i_151 + 1 | 0;
    var $41 = $40 + $sc | 0;
    var $exitcond57 = ($40 | 0) == ($4 | 0);
    if ($exitcond57) {
      var $i_1_lcssa = $4;
      label = 6;
      break;
    } else {
      var $i_151 = $40;
      var $25 = $41;
      label = 8;
      break;
    }
   case 9:
    var $i_249;
    var $43 = $i_249 * $st & -1;
    var $44 = $base + ($43 << 2) | 0;
    var $45 = HEAPF32[$44 >> 2];
    var $46 = $45 * 2;
    var $47 = $i_249 - $sc | 0;
    var $48 = $47 * $st & -1;
    var $49 = $base + ($48 << 2) | 0;
    var $50 = HEAPF32[$49 >> 2];
    var $51 = $46 + $50;
    var $52 = $23 - $i_249 | 0;
    var $53 = $52 * $st & -1;
    var $54 = $base + ($53 << 2) | 0;
    var $55 = HEAPF32[$54 >> 2];
    var $56 = $51 + $55;
    var $57 = $temp + ($i_249 << 2) | 0;
    HEAPF32[$57 >> 2] = $56;
    var $58 = $i_249 + 1 | 0;
    var $exitcond = ($58 | 0) == ($size | 0);
    if ($exitcond) {
      label = 10;
      break;
    } else {
      var $i_249 = $58;
      label = 9;
      break;
    }
   case 10:
    return;
  }
}
_hat_transform["X"] = 1;
function _wavelet_denoise() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mul = __stackBase__;
    var $blk = __stackBase__ + 8;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5578464, 21, 1, $2);
    label = 4;
    break;
   case 4:
    var $4 = HEAP32[5263496 >> 2];
    var $scale_0 = 1;
    label = 5;
    break;
   case 5:
    var $scale_0;
    var $6 = $4 << $scale_0;
    var $7 = $6 >>> 0 < 65536;
    var $8 = $scale_0 + 1 | 0;
    if ($7) {
      var $scale_0 = $8;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $10 = $scale_0 - 1 | 0;
    var $11 = $4 << $10;
    HEAP32[5263496 >> 2] = $11;
    var $12 = HEAP32[5561400 >> 2];
    var $13 = $12 << $10;
    HEAP32[5561400 >> 2] = $13;
    var $14 = HEAP32[5560904 >> 2];
    var $15 = $14 << $10;
    HEAP32[5560904 >> 2] = $15;
    var $16 = HEAP32[5560908 >> 2];
    var $17 = $16 << $10;
    HEAP32[5560908 >> 2] = $17;
    var $18 = HEAP32[5560912 >> 2];
    var $19 = $18 << $10;
    HEAP32[5560912 >> 2] = $19;
    var $20 = HEAP32[5560916 >> 2];
    var $21 = $20 << $10;
    HEAP32[5560916 >> 2] = $21;
    var $22 = HEAP16[5264112 >> 1];
    var $23 = $22 & 65535;
    var $24 = HEAP16[5264092 >> 1];
    var $25 = $24 & 65535;
    var $26 = $25 * $23 & -1;
    var $27 = $26 >>> 0 < 357892096;
    var $28 = $26 * 3 & -1;
    if ($27) {
      label = 7;
      break;
    } else {
      var $fimg_0 = 0;
      label = 8;
      break;
    }
   case 7:
    var $30 = $25 + $23 | 0;
    var $31 = $30 + $28 | 0;
    var $32 = $31 << 2;
    var $33 = _malloc($32);
    var $34 = $33;
    var $fimg_0 = $34;
    label = 8;
    break;
   case 8:
    var $fimg_0;
    var $35 = $fimg_0;
    _merror($35, 5578260);
    var $36 = $fimg_0 + ($28 << 2) | 0;
    var $37 = HEAP32[5560840 >> 2];
    var $38 = ($37 | 0) == 3;
    var $39 = HEAP32[5427632 >> 2];
    var $40 = ($39 | 0) != 0;
    var $or_cond = $38 & $40;
    var $41 = $or_cond & 1;
    var $nc_0 = $41 + $37 | 0;
    var $42 = ($nc_0 | 0) > 0;
    if ($42) {
      label = 9;
      break;
    } else {
      label = 44;
      break;
    }
   case 9:
    var $43 = ($26 | 0) == 0;
    var $c_1260 = 0;
    label = 10;
    break;
   case 10:
    var $c_1260;
    if ($43) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_pre10 = HEAP32[5264108 >> 2];
    var $i_0232 = 0;
    label = 12;
    break;
   case 12:
    var $i_0232;
    var $44 = $_pre10 + ($i_0232 << 3) + ($c_1260 << 1) | 0;
    var $45 = HEAP16[$44 >> 1];
    var $46 = $45 & 65535;
    var $47 = $46 << $10;
    var $48 = $47 | 0;
    var $49 = Math.sqrt($48);
    var $50 = $49 * 256;
    var $51 = $50;
    var $52 = $fimg_0 + ($i_0232 << 2) | 0;
    HEAPF32[$52 >> 2] = $51;
    var $53 = $i_0232 + 1 | 0;
    var $54 = ($53 | 0) < ($26 | 0);
    if ($54) {
      var $i_0232 = $53;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre = HEAP16[5264112 >> 1];
    var $lev_0255 = 0;
    var $hpass_0256 = 0;
    var $56 = $_pre;
    var $55 = $_pre;
    label = 14;
    break;
   case 14:
    var $55;
    var $56;
    var $hpass_0256;
    var $lev_0255;
    var $57 = $lev_0255 & 1;
    var $58 = $57 + 1 | 0;
    var $59 = $58 * $26 & -1;
    var $60 = $56 << 16 >> 16 == 0;
    if ($60) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $_pre11 = HEAP16[5264092 >> 1];
    var $86 = 0;
    var $85 = $55;
    var $84 = $_pre11;
    label = 21;
    break;
   case 16:
    var $61 = 1 << $lev_0255;
    var $_pre5 = HEAP16[5264092 >> 1];
    var $row_0239 = 0;
    var $63 = $_pre5;
    label = 17;
    break;
   case 17:
    var $63;
    var $row_0239;
    var $64 = $63 & 65535;
    var $65 = $64 * $row_0239 & -1;
    var $_sum206 = $65 + $hpass_0256 | 0;
    var $66 = $fimg_0 + ($_sum206 << 2) | 0;
    _hat_transform($36, $66, 1, $64, $61);
    var $67 = $63 << 16 >> 16 == 0;
    if ($67) {
      var $80 = 0;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $68 = $_pre5 & 65535;
    var $col_0234 = 0;
    var $70 = $64;
    label = 19;
    break;
   case 19:
    var $70;
    var $col_0234;
    var $_sum207 = $col_0234 + $28 | 0;
    var $71 = $fimg_0 + ($_sum207 << 2) | 0;
    var $72 = HEAPF32[$71 >> 2];
    var $73 = $72 * .25;
    var $74 = $70 * $row_0239 & -1;
    var $75 = $col_0234 + $59 | 0;
    var $76 = $75 + $74 | 0;
    var $77 = $fimg_0 + ($76 << 2) | 0;
    HEAPF32[$77 >> 2] = $73;
    var $78 = $col_0234 + 1 | 0;
    var $79 = ($78 | 0) < ($68 | 0);
    if ($79) {
      var $col_0234 = $78;
      var $70 = $68;
      label = 19;
      break;
    } else {
      var $80 = $_pre5;
      label = 20;
      break;
    }
   case 20:
    var $80;
    var $81 = $row_0239 + 1 | 0;
    var $82 = $_pre & 65535;
    var $83 = ($81 | 0) < ($82 | 0);
    if ($83) {
      var $row_0239 = $81;
      var $63 = $80;
      label = 17;
      break;
    } else {
      var $86 = $_pre;
      var $85 = $_pre;
      var $84 = $_pre5;
      label = 21;
      break;
    }
   case 21:
    var $84;
    var $85;
    var $86;
    var $87 = $84 << 16 >> 16 == 0;
    if ($87) {
      var $109 = $86;
      var $108 = $85;
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $88 = $84 & 65535;
    var $89 = 1 << $lev_0255;
    var $col_1247 = 0;
    var $91 = $85;
    label = 23;
    break;
   case 23:
    var $91;
    var $col_1247;
    var $_sum = $col_1247 + $59 | 0;
    var $92 = $fimg_0 + ($_sum << 2) | 0;
    var $93 = $91 & 65535;
    _hat_transform($36, $92, $88, $93, $89);
    var $94 = $91 << 16 >> 16 == 0;
    if ($94) {
      var $105 = 0;
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $95 = $_pre & 65535;
    var $row_1243 = 0;
    label = 25;
    break;
   case 25:
    var $row_1243;
    var $_sum205 = $row_1243 + $28 | 0;
    var $97 = $fimg_0 + ($_sum205 << 2) | 0;
    var $98 = HEAPF32[$97 >> 2];
    var $99 = $98 * .25;
    var $100 = $88 * $row_1243 & -1;
    var $101 = $_sum + $100 | 0;
    var $102 = $fimg_0 + ($101 << 2) | 0;
    HEAPF32[$102 >> 2] = $99;
    var $103 = $row_1243 + 1 | 0;
    var $104 = ($103 | 0) < ($95 | 0);
    if ($104) {
      var $row_1243 = $103;
      label = 25;
      break;
    } else {
      var $105 = $_pre;
      label = 26;
      break;
    }
   case 26:
    var $105;
    var $106 = $col_1247 + 1 | 0;
    var $107 = ($106 | 0) < ($88 | 0);
    if ($107) {
      var $col_1247 = $106;
      var $91 = $105;
      label = 23;
      break;
    } else {
      var $109 = $105;
      var $108 = $105;
      label = 27;
      break;
    }
   case 27:
    var $108;
    var $109;
    var $110 = HEAPF32[5244064 >> 2];
    var $111 = 5243096 + ($lev_0255 << 2) | 0;
    var $112 = HEAPF32[$111 >> 2];
    var $113 = $110 * $112;
    if ($43) {
      label = 37;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $114 = -$113;
    var $115 = ($hpass_0256 | 0) == 0;
    var $i_1250 = 0;
    label = 29;
    break;
   case 29:
    var $i_1250;
    var $117 = $i_1250 + $59 | 0;
    var $118 = $fimg_0 + ($117 << 2) | 0;
    var $119 = HEAPF32[$118 >> 2];
    var $120 = $i_1250 + $hpass_0256 | 0;
    var $121 = $fimg_0 + ($120 << 2) | 0;
    var $122 = HEAPF32[$121 >> 2];
    var $123 = $122 - $119;
    HEAPF32[$121 >> 2] = $123;
    var $124 = $123 < $114;
    if ($124) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $126 = $113 + $123;
    HEAPF32[$121 >> 2] = $126;
    var $133 = $126;
    label = 34;
    break;
   case 31:
    var $128 = $123 > $113;
    if ($128) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $130 = $123 - $113;
    HEAPF32[$121 >> 2] = $130;
    var $133 = $130;
    label = 34;
    break;
   case 33:
    HEAPF32[$121 >> 2] = 0;
    var $133 = 0;
    label = 34;
    break;
   case 34:
    var $133;
    if ($115) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $135 = $fimg_0 + ($i_1250 << 2) | 0;
    var $136 = HEAPF32[$135 >> 2];
    var $137 = $133 + $136;
    HEAPF32[$135 >> 2] = $137;
    label = 36;
    break;
   case 36:
    var $139 = $i_1250 + 1 | 0;
    var $140 = ($139 | 0) < ($26 | 0);
    if ($140) {
      var $i_1250 = $139;
      label = 29;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $141 = $lev_0255 + 1 | 0;
    var $exitcond267 = ($141 | 0) == 5;
    if ($exitcond267) {
      label = 38;
      break;
    } else {
      var $lev_0255 = $141;
      var $hpass_0256 = $59;
      var $56 = $109;
      var $55 = $108;
      label = 14;
      break;
    }
   case 38:
    if ($43) {
      label = 43;
      break;
    } else {
      var $i_2257 = 0;
      label = 39;
      break;
    }
   case 39:
    var $i_2257;
    var $142 = $fimg_0 + ($i_2257 << 2) | 0;
    var $143 = HEAPF32[$142 >> 2];
    var $144 = $i_2257 + $26 | 0;
    var $145 = $fimg_0 + ($144 << 2) | 0;
    var $146 = HEAPF32[$145 >> 2];
    var $147 = $143 + $146;
    var $148 = $147 * $147;
    var $149 = $148 * 152587890625e-16;
    var $150 = $149 < 65535;
    var $phitmp203 = $149 < 0;
    var $or_cond209 = $150 & $phitmp203;
    var $_not210 = $150 ^ 1;
    var $brmerge211 = $or_cond209 | $_not210;
    if ($brmerge211) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $not_or_cond209 = $or_cond209 ^ 1;
    var $_mux212 = $not_or_cond209 << 31 >> 31;
    var $153 = $_mux212;
    label = 42;
    break;
   case 41:
    var $phitmp204 = $149 >= 0 ? Math.floor($149) : Math.ceil($149);
    var $153 = $phitmp204;
    label = 42;
    break;
   case 42:
    var $153;
    var $154 = HEAP32[5264108 >> 2];
    var $155 = $154 + ($i_2257 << 3) + ($c_1260 << 1) | 0;
    HEAP16[$155 >> 1] = $153;
    var $156 = $i_2257 + 1 | 0;
    var $157 = ($156 | 0) < ($26 | 0);
    if ($157) {
      var $i_2257 = $156;
      label = 39;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $158 = $c_1260 + 1 | 0;
    var $exitcond268 = ($158 | 0) == ($nc_0 | 0);
    if ($exitcond268) {
      label = 44;
      break;
    } else {
      var $c_1260 = $158;
      label = 10;
      break;
    }
   case 44:
    if ($or_cond) {
      label = 46;
      break;
    } else {
      label = 65;
      break;
    }
   case 45:
    var $159 = $fimg_0 + ($195 << 2) | 0;
    var $160 = $159;
    var $161 = $193 + ($195 << 1) | 0;
    var $row_3224 = 1;
    var $wlast_0225 = -1;
    var $indvars_iv = 2;
    var $window_sroa_0_0 = $193;
    var $window_sroa_1_0 = $161;
    var $window_sroa_2_0 = $160;
    label = 48;
    break;
   case 46:
    var $162 = $39 >>> 4;
    var $163 = $162 & 2;
    var $164 = $163 | 1;
    var $165 = 5245640 + ($164 << 2) | 0;
    var $166 = HEAPF32[$165 >> 2];
    var $167 = $166;
    var $168 = $167 * .125;
    var $169 = $39 & 2;
    var $170 = $169 | 1;
    var $171 = 5245640 + ($170 << 2) | 0;
    var $172 = HEAPF32[$171 >> 2];
    var $173 = $172;
    var $174 = $168 / $173;
    var $175 = $174;
    var $176 = $mul | 0;
    HEAPF32[$176 >> 2] = $175;
    var $177 = 5560904 + ($170 << 2) | 0;
    var $178 = HEAP32[$177 >> 2];
    var $179 = $blk | 0;
    HEAP32[$179 >> 2] = $178;
    var $180 = $39 >>> 8;
    var $181 = $180 & 2;
    var $182 = $181 | 1;
    var $183 = 5245640 + ($182 << 2) | 0;
    var $184 = HEAPF32[$183 >> 2];
    var $185 = $184;
    var $186 = $185 * .125;
    var $187 = $186 / $167;
    var $188 = $187;
    var $189 = $mul + 4 | 0;
    HEAPF32[$189 >> 2] = $188;
    var $190 = 5560904 + ($164 << 2) | 0;
    var $191 = HEAP32[$190 >> 2];
    var $192 = $blk + 4 | 0;
    HEAP32[$192 >> 2] = $191;
    var $193 = $fimg_0;
    var $194 = HEAP16[5242964 >> 1];
    var $195 = $194 & 65535;
    var $196 = HEAP16[5398712 >> 1];
    var $197 = $196 & 65535;
    var $198 = $197 - 1 | 0;
    var $199 = ($198 | 0) > 1;
    if ($199) {
      label = 45;
      break;
    } else {
      label = 65;
      break;
    }
   case 47:
    var $200 = ($201 | 0) < ($198 | 0);
    var $indvars_iv_next = $indvars_iv + 1 | 0;
    if ($200) {
      var $row_3224 = $201;
      var $wlast_0225 = $wlast_1_lcssa;
      var $indvars_iv = $indvars_iv_next;
      var $window_sroa_0_0 = $window_sroa_0_2;
      var $window_sroa_1_0 = $window_sroa_1_2;
      var $window_sroa_2_0 = $window_sroa_2_2;
      label = 48;
      break;
    } else {
      label = 65;
      break;
    }
   case 48:
    var $window_sroa_2_0;
    var $window_sroa_1_0;
    var $window_sroa_0_0;
    var $indvars_iv;
    var $wlast_0225;
    var $row_3224;
    var $201 = $row_3224 + 1 | 0;
    var $202 = ($wlast_0225 | 0) < ($201 | 0);
    if ($202) {
      var $wlast_1215 = $wlast_0225;
      var $window_sroa_0_1 = $window_sroa_0_0;
      var $window_sroa_1_1 = $window_sroa_1_0;
      var $window_sroa_2_1 = $window_sroa_2_0;
      label = 50;
      break;
    } else {
      var $wlast_1_lcssa = $wlast_0225;
      var $window_sroa_0_2 = $window_sroa_0_0;
      var $window_sroa_1_2 = $window_sroa_1_0;
      var $window_sroa_2_2 = $window_sroa_2_0;
      label = 53;
      break;
    }
   case 49:
    var $exitcond = ($203 | 0) == ($indvars_iv | 0);
    if ($exitcond) {
      var $wlast_1_lcssa = $indvars_iv;
      var $window_sroa_0_2 = $window_sroa_1_1;
      var $window_sroa_1_2 = $window_sroa_2_1;
      var $window_sroa_2_2 = $window_sroa_0_1;
      label = 53;
      break;
    } else {
      var $window_sroa_0_1 = $window_sroa_1_1;
      var $window_sroa_1_1 = $window_sroa_2_1;
      var $wlast_1215 = $203;
      var $window_sroa_2_1 = $window_sroa_0_1;
      label = 50;
      break;
    }
   case 50:
    var $window_sroa_2_1;
    var $window_sroa_1_1;
    var $window_sroa_0_1;
    var $wlast_1215;
    var $203 = $wlast_1215 + 1 | 0;
    var $204 = $203 << 1;
    var $205 = $204 & 14;
    var $206 = $205 << 1;
    var $207 = $206 | 2;
    var $208 = $39 >>> ($207 >>> 0);
    var $209 = $208 & 1;
    var $210 = $209 >>> 0 < $195 >>> 0;
    if ($210) {
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 51:
    var $_pre6 = HEAP16[5244916 >> 1];
    var $_pre7 = HEAP16[5264092 >> 1];
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_2214 = $209;
    label = 52;
    break;
   case 52:
    var $col_2214;
    var $212 = $col_2214 & 1;
    var $213 = $212 | $205;
    var $214 = $213 << 1;
    var $215 = $39 >>> ($214 >>> 0);
    var $216 = $215 & 3;
    var $217 = $_pre6 & 65535;
    var $218 = $203 >> $217;
    var $219 = $_pre7 & 65535;
    var $220 = $218 * $219 & -1;
    var $221 = $col_2214 >> $217;
    var $222 = $220 + $221 | 0;
    var $223 = $_pre8 + ($222 << 3) + ($216 << 1) | 0;
    var $224 = HEAP16[$223 >> 1];
    var $225 = $window_sroa_0_1 + ($col_2214 << 1) | 0;
    HEAP16[$225 >> 1] = $224;
    var $226 = $col_2214 + 2 | 0;
    var $227 = ($226 | 0) < ($195 | 0);
    if ($227) {
      var $col_2214 = $226;
      label = 52;
      break;
    } else {
      label = 49;
      break;
    }
   case 53:
    var $window_sroa_2_2;
    var $window_sroa_1_2;
    var $window_sroa_0_2;
    var $wlast_1_lcssa;
    var $228 = HEAPF32[5244064 >> 2];
    var $229 = $228 * .001953125;
    var $230 = $row_3224 << 1;
    var $231 = $230 & 14;
    var $232 = $231 << 1;
    var $233 = $39 >>> ($232 >>> 0);
    var $234 = $233 & 1;
    var $235 = $234 + 1 | 0;
    var $236 = $194 & 65535;
    var $237 = $236 - 1 | 0;
    var $238 = ($235 | 0) < ($237 | 0);
    if ($238) {
      label = 54;
      break;
    } else {
      label = 47;
      break;
    }
   case 54:
    var $239 = $row_3224 & 1;
    var $240 = $239 ^ 1;
    var $241 = $blk + ($240 << 2) | 0;
    var $242 = HEAP32[$241 >> 2];
    var $243 = $242 << 2;
    var $244 = $mul + ($239 << 2) | 0;
    var $245 = HEAPF32[$244 >> 2];
    var $246 = $blk + ($239 << 2) | 0;
    var $247 = HEAP32[$246 >> 2];
    var $248 = -$229;
    var $col_3219 = $235;
    label = 55;
    break;
   case 55:
    var $col_3219;
    var $250 = $col_3219 - 1 | 0;
    var $251 = $window_sroa_0_2 + ($250 << 1) | 0;
    var $252 = HEAP16[$251 >> 1];
    var $253 = $252 & 65535;
    var $254 = $col_3219 + 1 | 0;
    var $255 = $window_sroa_0_2 + ($254 << 1) | 0;
    var $256 = HEAP16[$255 >> 1];
    var $257 = $256 & 65535;
    var $258 = $257 + $253 | 0;
    var $259 = $window_sroa_2_2 + ($250 << 1) | 0;
    var $260 = HEAP16[$259 >> 1];
    var $261 = $260 & 65535;
    var $262 = $258 + $261 | 0;
    var $263 = $window_sroa_2_2 + ($254 << 1) | 0;
    var $264 = HEAP16[$263 >> 1];
    var $265 = $264 & 65535;
    var $266 = $262 + $265 | 0;
    var $267 = $266 - $243 | 0;
    var $268 = $267 | 0;
    var $269 = $245 * $268;
    var $270 = $269;
    var $271 = $window_sroa_1_2 + ($col_3219 << 1) | 0;
    var $272 = HEAP16[$271 >> 1];
    var $273 = $272 & 65535;
    var $274 = $273 + $247 | 0;
    var $275 = $274 | 0;
    var $276 = $275 * .5;
    var $277 = $270 + $276;
    var $278 = $277;
    var $279 = $278 < 0;
    if ($279) {
      var $281 = 0;
      label = 57;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $phitmp = Math.sqrt($278);
    var $281 = $phitmp;
    label = 57;
    break;
   case 57:
    var $281;
    var $282 = $col_3219 & 1;
    var $283 = $282 | $231;
    var $284 = $283 << 1;
    var $285 = $39 >>> ($284 >>> 0);
    var $286 = $285 & 3;
    var $287 = HEAP16[5244916 >> 1];
    var $288 = $287 & 65535;
    var $289 = $row_3224 >> $288;
    var $290 = HEAP16[5264092 >> 1];
    var $291 = $290 & 65535;
    var $292 = $289 * $291 & -1;
    var $293 = $col_3219 >> $288;
    var $294 = $292 + $293 | 0;
    var $295 = HEAP32[5264108 >> 2];
    var $296 = $295 + ($294 << 3) + ($286 << 1) | 0;
    var $297 = HEAP16[$296 >> 1];
    var $298 = $297 & 65535;
    var $299 = Math.sqrt($298);
    var $300 = $281;
    var $301 = $299 - $300;
    var $302 = $301;
    var $303 = $302 < $248;
    if ($303) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $305 = $229 + $302;
    var $diff_0 = $305;
    label = 61;
    break;
   case 59:
    var $307 = $302 > $229;
    if ($307) {
      label = 60;
      break;
    } else {
      var $diff_0 = 0;
      label = 61;
      break;
    }
   case 60:
    var $309 = $302 - $229;
    var $diff_0 = $309;
    label = 61;
    break;
   case 61:
    var $diff_0;
    var $311 = $281 + $diff_0;
    var $312 = $311 * $311;
    var $313 = $312;
    var $314 = $313 + .5;
    var $315 = $314 < 65535;
    if ($315) {
      label = 62;
      break;
    } else {
      var $318 = -1;
      label = 64;
      break;
    }
   case 62:
    var $phitmp201 = $314 < 0;
    var $not_phitmp201 = $phitmp201 ^ 1;
    var $_mux = $not_phitmp201 << 31 >> 31;
    if ($phitmp201) {
      var $318 = $_mux;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $phitmp202 = $314 >= 0 ? Math.floor($314) : Math.ceil($314);
    var $318 = $phitmp202;
    label = 64;
    break;
   case 64:
    var $318;
    HEAP16[$296 >> 1] = $318;
    var $319 = $col_3219 + 2 | 0;
    var $320 = ($319 | 0) < ($237 | 0);
    if ($320) {
      var $col_3219 = $319;
      label = 55;
      break;
    } else {
      label = 47;
      break;
    }
   case 65:
    _free($35);
    STACKTOP = __stackBase__;
    return;
  }
}
_wavelet_denoise["X"] = 1;
function _scale_colors() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sum = __stackBase__;
    var $scale_mul = __stackBase__ + 32;
    var $1 = HEAPF32[5243536 >> 2];
    var $2 = $1 != 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5245640 >> 2] = HEAP32[5243536 >> 2];
    HEAP32[5245644 >> 2] = HEAP32[5243540 >> 2];
    HEAP32[5245648 >> 2] = HEAP32[5243544 >> 2];
    HEAP32[5245652 >> 2] = HEAP32[5243548 >> 2];
    label = 4;
    break;
   case 4:
    var $_b2 = HEAP8[5243556];
    if ($_b2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_b4 = HEAP8[5243552];
    var $6 = HEAPF32[5561124 >> 2];
    var $7 = $6 == -1;
    var $or_cond = $_b4 & $7;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 30;
      break;
    }
   case 6:
    var $9 = HEAP32[5398728 >> 2];
    var $10 = HEAP32[5398720 >> 2];
    var $11 = $10 + $9 | 0;
    var $12 = HEAP16[5398712 >> 1];
    var $13 = $12 & 65535;
    var $14 = $11 >>> 0 < $13 >>> 0;
    var $_ = $14 ? $11 : $13;
    var $15 = HEAP32[5398732 >> 2];
    var $16 = HEAP32[5398724 >> 2];
    var $17 = $16 + $15 | 0;
    var $18 = HEAP16[5242964 >> 1];
    var $19 = $18 & 65535;
    var $20 = $17 >>> 0 < $19 >>> 0;
    var $21 = $20 ? $17 : $19;
    var $22 = $9 >>> 0 < $_ >>> 0;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 30;
      break;
    }
   case 7:
    var $23 = $15 >>> 0 < $21 >>> 0;
    var $24 = $sum;
    var $25 = HEAP32[5427632 >> 2];
    var $26 = ($25 | 0) == 0;
    var $27 = HEAP32[5264108 >> 2];
    var $28 = HEAP32[5263496 >> 2];
    var $29 = $28 - 25 | 0;
    var $30 = HEAP16[5244916 >> 1];
    var $31 = $30 & 65535;
    var $32 = HEAP16[5264092 >> 1];
    var $33 = $32 & 65535;
    var $34 = $sum | 0;
    var $35 = $sum + 4 | 0;
    var $36 = $sum + 8 | 0;
    var $37 = $sum + 12 | 0;
    var $38 = $sum + 16 | 0;
    var $39 = $sum + 20 | 0;
    var $40 = $sum + 24 | 0;
    var $41 = $sum + 28 | 0;
    var $row_0180 = $9;
    var $dsum_sroa_0_0 = 0;
    var $dsum_sroa_1_0 = 0;
    var $dsum_sroa_2_0 = 0;
    var $dsum_sroa_3_0 = 0;
    var $dsum_sroa_4_0 = 0;
    var $dsum_sroa_5_0 = 0;
    var $dsum_sroa_6_0 = 0;
    var $dsum_sroa_7_0 = 0;
    label = 8;
    break;
   case 8:
    var $dsum_sroa_7_0;
    var $dsum_sroa_6_0;
    var $dsum_sroa_5_0;
    var $dsum_sroa_4_0;
    var $dsum_sroa_3_0;
    var $dsum_sroa_2_0;
    var $dsum_sroa_1_0;
    var $dsum_sroa_0_0;
    var $row_0180;
    var $43 = $row_0180 + 8 | 0;
    if ($23) {
      label = 9;
      break;
    } else {
      var $dsum_sroa_0_3 = $dsum_sroa_0_0;
      var $dsum_sroa_1_3 = $dsum_sroa_1_0;
      var $dsum_sroa_2_3 = $dsum_sroa_2_0;
      var $dsum_sroa_3_3 = $dsum_sroa_3_0;
      var $dsum_sroa_4_3 = $dsum_sroa_4_0;
      var $dsum_sroa_5_3 = $dsum_sroa_5_0;
      var $dsum_sroa_6_3 = $dsum_sroa_6_0;
      var $dsum_sroa_7_3 = $dsum_sroa_7_0;
      var $_pre_phi32 = $43;
      label = 26;
      break;
    }
   case 9:
    var $44 = $row_0180 >>> 0 < 4294967288;
    var $col_0174 = $15;
    var $dsum_sroa_0_1 = $dsum_sroa_0_0;
    var $dsum_sroa_1_1 = $dsum_sroa_1_0;
    var $dsum_sroa_2_1 = $dsum_sroa_2_0;
    var $dsum_sroa_3_1 = $dsum_sroa_3_0;
    var $dsum_sroa_4_1 = $dsum_sroa_4_0;
    var $dsum_sroa_5_1 = $dsum_sroa_5_0;
    var $dsum_sroa_6_1 = $dsum_sroa_6_0;
    var $dsum_sroa_7_1 = $dsum_sroa_7_0;
    label = 10;
    break;
   case 10:
    var $dsum_sroa_7_1;
    var $dsum_sroa_6_1;
    var $dsum_sroa_5_1;
    var $dsum_sroa_4_1;
    var $dsum_sroa_3_1;
    var $dsum_sroa_2_1;
    var $dsum_sroa_1_1;
    var $dsum_sroa_0_1;
    var $col_0174;
    HEAP32[$24 >> 2] = 0;
    HEAP32[$24 + 4 >> 2] = 0;
    HEAP32[$24 + 8 >> 2] = 0;
    HEAP32[$24 + 12 >> 2] = 0;
    HEAP32[$24 + 16 >> 2] = 0;
    HEAP32[$24 + 20 >> 2] = 0;
    HEAP32[$24 + 24 >> 2] = 0;
    HEAP32[$24 + 28 >> 2] = 0;
    var $46 = $col_0174 + 8 | 0;
    if ($44) {
      label = 11;
      break;
    } else {
      var $91 = 0;
      var $90 = 0;
      var $89 = 0;
      var $88 = 0;
      var $87 = 0;
      var $86 = 0;
      var $85 = 0;
      var $84 = 0;
      var $_pre30_pre_phi = $46;
      label = 24;
      break;
    }
   case 11:
    var $47 = $col_0174 >>> 0 < 4294967288;
    var $y_0171 = $row_0180;
    label = 12;
    break;
   case 12:
    var $y_0171;
    if ($47) {
      label = 13;
      break;
    } else {
      label = 22;
      break;
    }
   case 13:
    var $48 = $19 * $y_0171 & -1;
    var $49 = $y_0171 >>> ($31 >>> 0);
    var $50 = $49 * $33 & -1;
    var $x_0169 = $col_0174;
    label = 14;
    break;
   case 14:
    var $x_0169;
    var $51 = $48 + $x_0169 | 0;
    var $52 = $x_0169 >>> ($31 >>> 0);
    var $53 = $50 + $52 | 0;
    var $c_0 = 0;
    label = 15;
    break;
   case 15:
    var $c_0;
    var $55 = $c_0 >>> 0 < 4;
    if ($55) {
      label = 16;
      break;
    } else {
      label = 21;
      break;
    }
   case 16:
    if ($26) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $58 = _fcol($y_0171, $x_0169);
    var $59 = $27 + ($53 << 3) + ($58 << 1) | 0;
    var $val_0_in_in = $59;
    var $c_1 = $58;
    label = 19;
    break;
   case 18:
    var $61 = $27 + ($51 << 3) + ($c_0 << 1) | 0;
    var $val_0_in_in = $61;
    var $c_1 = $c_0;
    label = 19;
    break;
   case 19:
    var $c_1;
    var $val_0_in_in;
    var $val_0_in = HEAP16[$val_0_in_in >> 1];
    var $val_0 = $val_0_in & 65535;
    var $63 = $val_0 >>> 0 > $29 >>> 0;
    if ($63) {
      var $dsum_sroa_0_2 = $dsum_sroa_0_1;
      var $dsum_sroa_1_2 = $dsum_sroa_1_1;
      var $dsum_sroa_2_2 = $dsum_sroa_2_1;
      var $dsum_sroa_3_2 = $dsum_sroa_3_1;
      var $dsum_sroa_4_2 = $dsum_sroa_4_1;
      var $dsum_sroa_5_2 = $dsum_sroa_5_1;
      var $dsum_sroa_6_2 = $dsum_sroa_6_1;
      var $dsum_sroa_7_2 = $dsum_sroa_7_1;
      var $_pre_phi = $46;
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $65 = 5560904 + ($c_1 << 2) | 0;
    var $66 = HEAP32[$65 >> 2];
    var $67 = $val_0 - $66 | 0;
    var $68 = ($67 | 0) < 0;
    var $_134 = $68 ? 0 : $67;
    var $69 = $sum + ($c_1 << 2) | 0;
    var $70 = HEAP32[$69 >> 2];
    var $71 = $_134 + $70 | 0;
    HEAP32[$69 >> 2] = $71;
    var $72 = $c_1 + 4 | 0;
    var $73 = $sum + ($72 << 2) | 0;
    var $74 = HEAP32[$73 >> 2];
    var $75 = $74 + 1 | 0;
    HEAP32[$73 >> 2] = $75;
    var $76 = $c_1 + 1 | 0;
    if ($26) {
      var $c_0 = $76;
      label = 15;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $78 = $x_0169 + 1 | 0;
    var $79 = $78 >>> 0 < $46 >>> 0;
    var $80 = $78 >>> 0 < $21 >>> 0;
    var $or_cond133 = $79 & $80;
    if ($or_cond133) {
      var $x_0169 = $78;
      label = 14;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $81 = $y_0171 + 1 | 0;
    var $82 = $81 >>> 0 < $43 >>> 0;
    var $83 = $81 >>> 0 < $_ >>> 0;
    var $or_cond132 = $82 & $83;
    if ($or_cond132) {
      var $y_0171 = $81;
      label = 12;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $_pre = HEAP32[$34 >> 2];
    var $_pre13 = HEAP32[$35 >> 2];
    var $_pre14 = HEAP32[$36 >> 2];
    var $_pre15 = HEAP32[$37 >> 2];
    var $_pre16 = HEAP32[$38 >> 2];
    var $_pre17 = HEAP32[$39 >> 2];
    var $_pre18 = HEAP32[$40 >> 2];
    var $_pre19 = HEAP32[$41 >> 2];
    var $phitmp33 = $_pre >>> 0;
    var $phitmp34 = $_pre13 >>> 0;
    var $phitmp35 = $_pre14 >>> 0;
    var $phitmp36 = $_pre15 >>> 0;
    var $phitmp37 = $_pre16 >>> 0;
    var $phitmp38 = $_pre17 >>> 0;
    var $phitmp39 = $_pre18 >>> 0;
    var $phitmp40 = $_pre19 >>> 0;
    var $91 = $phitmp33;
    var $90 = $phitmp34;
    var $89 = $phitmp35;
    var $88 = $phitmp36;
    var $87 = $phitmp37;
    var $86 = $phitmp38;
    var $85 = $phitmp39;
    var $84 = $phitmp40;
    var $_pre30_pre_phi = $46;
    label = 24;
    break;
   case 24:
    var $_pre30_pre_phi;
    var $84;
    var $85;
    var $86;
    var $87;
    var $88;
    var $89;
    var $90;
    var $91;
    var $92 = $dsum_sroa_0_1 + $91;
    var $93 = $dsum_sroa_1_1 + $90;
    var $94 = $dsum_sroa_2_1 + $89;
    var $95 = $dsum_sroa_3_1 + $88;
    var $96 = $dsum_sroa_4_1 + $87;
    var $97 = $dsum_sroa_5_1 + $86;
    var $98 = $dsum_sroa_6_1 + $85;
    var $99 = $dsum_sroa_7_1 + $84;
    var $dsum_sroa_0_2 = $92;
    var $dsum_sroa_1_2 = $93;
    var $dsum_sroa_2_2 = $94;
    var $dsum_sroa_3_2 = $95;
    var $dsum_sroa_4_2 = $96;
    var $dsum_sroa_5_2 = $97;
    var $dsum_sroa_6_2 = $98;
    var $dsum_sroa_7_2 = $99;
    var $_pre_phi = $_pre30_pre_phi;
    label = 25;
    break;
   case 25:
    var $_pre_phi;
    var $dsum_sroa_7_2;
    var $dsum_sroa_6_2;
    var $dsum_sroa_5_2;
    var $dsum_sroa_4_2;
    var $dsum_sroa_3_2;
    var $dsum_sroa_2_2;
    var $dsum_sroa_1_2;
    var $dsum_sroa_0_2;
    var $100 = $_pre_phi >>> 0 < $21 >>> 0;
    if ($100) {
      var $col_0174 = $_pre_phi;
      var $dsum_sroa_0_1 = $dsum_sroa_0_2;
      var $dsum_sroa_1_1 = $dsum_sroa_1_2;
      var $dsum_sroa_2_1 = $dsum_sroa_2_2;
      var $dsum_sroa_3_1 = $dsum_sroa_3_2;
      var $dsum_sroa_4_1 = $dsum_sroa_4_2;
      var $dsum_sroa_5_1 = $dsum_sroa_5_2;
      var $dsum_sroa_6_1 = $dsum_sroa_6_2;
      var $dsum_sroa_7_1 = $dsum_sroa_7_2;
      label = 10;
      break;
    } else {
      var $dsum_sroa_0_3 = $dsum_sroa_0_2;
      var $dsum_sroa_1_3 = $dsum_sroa_1_2;
      var $dsum_sroa_2_3 = $dsum_sroa_2_2;
      var $dsum_sroa_3_3 = $dsum_sroa_3_2;
      var $dsum_sroa_4_3 = $dsum_sroa_4_2;
      var $dsum_sroa_5_3 = $dsum_sroa_5_2;
      var $dsum_sroa_6_3 = $dsum_sroa_6_2;
      var $dsum_sroa_7_3 = $dsum_sroa_7_2;
      var $_pre_phi32 = $43;
      label = 26;
      break;
    }
   case 26:
    var $_pre_phi32;
    var $dsum_sroa_7_3;
    var $dsum_sroa_6_3;
    var $dsum_sroa_5_3;
    var $dsum_sroa_4_3;
    var $dsum_sroa_3_3;
    var $dsum_sroa_2_3;
    var $dsum_sroa_1_3;
    var $dsum_sroa_0_3;
    var $101 = $_pre_phi32 >>> 0 < $_ >>> 0;
    if ($101) {
      var $row_0180 = $_pre_phi32;
      var $dsum_sroa_0_0 = $dsum_sroa_0_3;
      var $dsum_sroa_1_0 = $dsum_sroa_1_3;
      var $dsum_sroa_2_0 = $dsum_sroa_2_3;
      var $dsum_sroa_3_0 = $dsum_sroa_3_3;
      var $dsum_sroa_4_0 = $dsum_sroa_4_3;
      var $dsum_sroa_5_0 = $dsum_sroa_5_3;
      var $dsum_sroa_6_0 = $dsum_sroa_6_3;
      var $dsum_sroa_7_0 = $dsum_sroa_7_3;
      label = 8;
      break;
    } else {
      var $dsum_sroa_0_4 = $dsum_sroa_0_3;
      var $dsum_sroa_1_4 = $dsum_sroa_1_3;
      var $dsum_sroa_2_4 = $dsum_sroa_2_3;
      var $dsum_sroa_3_4 = $dsum_sroa_3_3;
      var $dsum_sroa_4_4 = $dsum_sroa_4_3;
      var $dsum_sroa_5_4 = $dsum_sroa_5_3;
      var $dsum_sroa_6_4 = $dsum_sroa_6_3;
      var $dsum_sroa_7_4 = $dsum_sroa_7_3;
      label = 27;
      break;
    }
   case 27:
    var $dsum_sroa_7_4;
    var $dsum_sroa_6_4;
    var $dsum_sroa_5_4;
    var $dsum_sroa_4_4;
    var $dsum_sroa_3_4;
    var $dsum_sroa_2_4;
    var $dsum_sroa_1_4;
    var $dsum_sroa_0_4;
    var $102 = $dsum_sroa_0_4 != 0;
    if ($102) {
      label = 28;
      break;
    } else {
      var $dsum_sroa_7_441 = $dsum_sroa_7_4;
      var $dsum_sroa_6_442 = $dsum_sroa_6_4;
      var $dsum_sroa_5_443 = $dsum_sroa_5_4;
      var $dsum_sroa_3_444 = $dsum_sroa_3_4;
      var $dsum_sroa_2_445 = $dsum_sroa_2_4;
      var $dsum_sroa_1_446 = $dsum_sroa_1_4;
      label = 29;
      break;
    }
   case 28:
    var $104 = $dsum_sroa_4_4 / $dsum_sroa_0_4;
    var $105 = $104;
    HEAPF32[5245640 >> 2] = $105;
    var $dsum_sroa_7_441 = $dsum_sroa_7_4;
    var $dsum_sroa_6_442 = $dsum_sroa_6_4;
    var $dsum_sroa_5_443 = $dsum_sroa_5_4;
    var $dsum_sroa_3_444 = $dsum_sroa_3_4;
    var $dsum_sroa_2_445 = $dsum_sroa_2_4;
    var $dsum_sroa_1_446 = $dsum_sroa_1_4;
    label = 29;
    break;
   case 29:
    var $dsum_sroa_1_446;
    var $dsum_sroa_2_445;
    var $dsum_sroa_3_444;
    var $dsum_sroa_5_443;
    var $dsum_sroa_6_442;
    var $dsum_sroa_7_441;
    var $107 = $dsum_sroa_1_446 != 0;
    if ($107) {
      label = 77;
      break;
    } else {
      var $dsum_sroa_2_44547 = $dsum_sroa_2_445;
      var $dsum_sroa_3_44448 = $dsum_sroa_3_444;
      var $dsum_sroa_6_44249 = $dsum_sroa_6_442;
      var $dsum_sroa_7_44150 = $dsum_sroa_7_441;
      label = 78;
      break;
    }
   case 30:
    var $_b3 = HEAP8[5243552];
    var $108 = HEAPF32[5561124 >> 2];
    var $109 = $108 != -1;
    var $or_cond4 = $_b3 & $109;
    if ($or_cond4) {
      label = 31;
      break;
    } else {
      label = 45;
      break;
    }
   case 31:
    var $111 = $sum;
    HEAP32[$111 >> 2] = 0;
    HEAP32[$111 + 4 >> 2] = 0;
    HEAP32[$111 + 8 >> 2] = 0;
    HEAP32[$111 + 12 >> 2] = 0;
    HEAP32[$111 + 16 >> 2] = 0;
    HEAP32[$111 + 20 >> 2] = 0;
    HEAP32[$111 + 24 >> 2] = 0;
    HEAP32[$111 + 28 >> 2] = 0;
    var $112 = HEAP32[5427632 >> 2];
    var $row_1161 = 0;
    label = 32;
    break;
   case 32:
    var $row_1161;
    var $113 = $row_1161 << 1;
    var $col_1160 = 0;
    label = 33;
    break;
   case 33:
    var $col_1160;
    var $115 = $col_1160 & 1;
    var $116 = $115 | $113;
    var $117 = $116 << 1;
    var $118 = $112 >>> ($117 >>> 0);
    var $119 = $118 & 3;
    var $120 = 5242968 + ($row_1161 << 4) + ($col_1160 << 1) | 0;
    var $121 = HEAP16[$120 >> 1];
    var $122 = $121 & 65535;
    var $123 = 5560904 + ($119 << 2) | 0;
    var $124 = HEAP32[$123 >> 2];
    var $125 = $122 - $124 | 0;
    var $126 = ($125 | 0) > 0;
    if ($126) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $128 = $sum + ($119 << 2) | 0;
    var $129 = HEAP32[$128 >> 2];
    var $130 = $129 + $125 | 0;
    HEAP32[$128 >> 2] = $130;
    label = 35;
    break;
   case 35:
    var $132 = $119 | 4;
    var $133 = $sum + ($132 << 2) | 0;
    var $134 = HEAP32[$133 >> 2];
    var $135 = $134 + 1 | 0;
    HEAP32[$133 >> 2] = $135;
    var $136 = $col_1160 + 1 | 0;
    var $exitcond189 = ($136 | 0) == 8;
    if ($exitcond189) {
      label = 36;
      break;
    } else {
      var $col_1160 = $136;
      label = 33;
      break;
    }
   case 36:
    var $138 = $row_1161 + 1 | 0;
    var $exitcond190 = ($138 | 0) == 8;
    if ($exitcond190) {
      label = 37;
      break;
    } else {
      var $row_1161 = $138;
      label = 32;
      break;
    }
   case 37:
    var $140 = $sum | 0;
    var $141 = HEAP32[$140 >> 2];
    var $142 = ($141 | 0) == 0;
    if ($142) {
      label = 42;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $144 = $sum + 4 | 0;
    var $145 = HEAP32[$144 >> 2];
    var $146 = ($145 | 0) == 0;
    if ($146) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $148 = $sum + 8 | 0;
    var $149 = HEAP32[$148 >> 2];
    var $150 = ($149 | 0) == 0;
    if ($150) {
      label = 42;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $152 = $sum + 12 | 0;
    var $153 = HEAP32[$152 >> 2];
    var $154 = ($153 | 0) == 0;
    if ($154) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $155 = $sum + 16 | 0;
    var $156 = HEAP32[$155 >> 2];
    var $157 = $156 >>> 0;
    var $158 = $141 >>> 0;
    var $159 = $157 / $158;
    HEAPF32[5245640 >> 2] = $159;
    var $160 = $sum + 20 | 0;
    var $161 = HEAP32[$160 >> 2];
    var $162 = $161 >>> 0;
    var $163 = $145 >>> 0;
    var $164 = $162 / $163;
    HEAPF32[5245644 >> 2] = $164;
    var $165 = $sum + 24 | 0;
    var $166 = HEAP32[$165 >> 2];
    var $167 = $166 >>> 0;
    var $168 = $149 >>> 0;
    var $169 = $167 / $168;
    HEAPF32[5245648 >> 2] = $169;
    var $170 = $sum + 28 | 0;
    var $171 = HEAP32[$170 >> 2];
    var $172 = $171 >>> 0;
    var $173 = $153 >>> 0;
    var $174 = $172 / $173;
    HEAPF32[5245652 >> 2] = $174;
    var $185 = $174;
    label = 46;
    break;
   case 42:
    var $176 = $108 != 0;
    var $177 = HEAPF32[5561132 >> 2];
    var $178 = $177 != 0;
    var $or_cond6 = $176 & $178;
    if ($or_cond6) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    HEAP32[5245640 >> 2] = HEAP32[5561124 >> 2];
    HEAP32[5245644 >> 2] = HEAP32[5561128 >> 2];
    HEAP32[5245648 >> 2] = HEAP32[5561132 >> 2];
    HEAP32[5245652 >> 2] = HEAP32[5561136 >> 2];
    label = 45;
    break;
   case 44:
    var $181 = HEAP32[_stderr >> 2];
    var $182 = HEAP32[5264120 >> 2];
    var $183 = _fprintf($181, 5578096, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $182, tempInt));
    label = 45;
    break;
   case 45:
    var $_pr = HEAPF32[5245652 >> 2];
    var $185 = $_pr;
    label = 46;
    break;
   case 46:
    var $185;
    var $186 = $185 == 0;
    if ($186) {
      label = 47;
      break;
    } else {
      var $192 = $185;
      label = 48;
      break;
    }
   case 47:
    var $188 = HEAP32[5560840 >> 2];
    var $189 = ($188 | 0) < 4;
    var $190 = HEAPF32[5245644 >> 2];
    var $191 = $189 ? $190 : 1;
    HEAPF32[5245652 >> 2] = $191;
    var $192 = $191;
    label = 48;
    break;
   case 48:
    var $192;
    var $193 = HEAP32[5561400 >> 2];
    var $194 = HEAP32[5263496 >> 2];
    var $195 = HEAPF32[5244064 >> 2];
    var $196 = $195 != 0;
    if ($196) {
      label = 49;
      break;
    } else {
      var $200 = $193;
      var $199 = $194;
      var $198 = $192;
      label = 50;
      break;
    }
   case 49:
    _wavelet_denoise();
    var $_pre20 = HEAP32[5561400 >> 2];
    var $_pre21 = HEAP32[5263496 >> 2];
    var $_pre22 = HEAPF32[5245652 >> 2];
    var $200 = $_pre20;
    var $199 = $_pre21;
    var $198 = $_pre22;
    label = 50;
    break;
   case 50:
    var $198;
    var $199;
    var $200;
    var $201 = $199 - $200 | 0;
    HEAP32[5263496 >> 2] = $201;
    var $202 = HEAPF32[5245640 >> 2];
    var $203 = $202;
    var $204 = $203 < 1.7976931348623157e+308;
    var $dmin_1 = $204 ? $203 : 1.7976931348623157e+308;
    var $205 = $202 > 0;
    var $dmax_1 = $205 ? $203 : 0;
    var $206 = HEAPF32[5245644 >> 2];
    var $207 = $206;
    var $208 = $dmin_1 > $207;
    var $dmin_1_1 = $208 ? $207 : $dmin_1;
    var $209 = $dmax_1 < $207;
    var $dmax_1_1 = $209 ? $207 : $dmax_1;
    var $210 = HEAPF32[5245648 >> 2];
    var $211 = $210;
    var $212 = $dmin_1_1 > $211;
    var $dmin_1_2 = $212 ? $211 : $dmin_1_1;
    var $213 = $dmax_1_1 < $211;
    var $dmax_1_2 = $213 ? $211 : $dmax_1_1;
    var $214 = $198;
    var $215 = $dmin_1_2 > $214;
    var $dmin_1_3 = $215 ? $214 : $dmin_1_2;
    var $216 = $dmax_1_2 < $214;
    var $dmax_1_3 = $216 ? $214 : $dmax_1_2;
    var $217 = HEAP32[5398708 >> 2];
    var $218 = ($217 | 0) == 0;
    var $dmin_0_dmax_0 = $218 ? $dmin_1_3 : $dmax_1_3;
    var $219 = $201 >>> 0;
    var $220 = $203 / $dmin_0_dmax_0;
    var $221 = $220;
    HEAPF32[5245640 >> 2] = $221;
    var $222 = $221;
    var $223 = $222 * 65535;
    var $224 = $223 / $219;
    var $225 = $224;
    var $226 = $scale_mul | 0;
    HEAPF32[$226 >> 2] = $225;
    var $227 = $207 / $dmin_0_dmax_0;
    var $228 = $227;
    HEAPF32[5245644 >> 2] = $228;
    var $229 = $228;
    var $230 = $229 * 65535;
    var $231 = $230 / $219;
    var $232 = $231;
    var $233 = $scale_mul + 4 | 0;
    HEAPF32[$233 >> 2] = $232;
    var $234 = $211 / $dmin_0_dmax_0;
    var $235 = $234;
    HEAPF32[5245648 >> 2] = $235;
    var $236 = $235;
    var $237 = $236 * 65535;
    var $238 = $237 / $219;
    var $239 = $238;
    var $240 = $scale_mul + 8 | 0;
    HEAPF32[$240 >> 2] = $239;
    var $241 = $214 / $dmin_0_dmax_0;
    var $242 = $241;
    HEAPF32[5245652 >> 2] = $242;
    var $243 = $242;
    var $244 = $243 * 65535;
    var $245 = $244 / $219;
    var $246 = $245;
    var $247 = $scale_mul + 12 | 0;
    HEAPF32[$247 >> 2] = $246;
    var $_b1 = HEAP8[5243532];
    if ($_b1) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    var $249 = HEAP32[_stderr >> 2];
    var $250 = _fprintf($249, 5577964, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $193, HEAP32[tempInt + 4 >> 2] = $194, tempInt));
    var $251 = HEAP32[_stderr >> 2];
    var $252 = HEAPF32[5245640 >> 2];
    var $253 = $252;
    var $254 = _fprintf($251, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $253, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $255 = HEAP32[_stderr >> 2];
    var $256 = HEAPF32[5245644 >> 2];
    var $257 = $256;
    var $258 = _fprintf($255, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $257, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $259 = HEAP32[_stderr >> 2];
    var $260 = HEAPF32[5245648 >> 2];
    var $261 = $260;
    var $262 = _fprintf($259, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $261, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $263 = HEAP32[_stderr >> 2];
    var $264 = HEAPF32[5245652 >> 2];
    var $265 = $264;
    var $266 = _fprintf($263, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $265, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $267 = HEAP32[_stderr >> 2];
    var $268 = _fputc(10, $267);
    label = 52;
    break;
   case 52:
    var $269 = HEAP16[5264112 >> 1];
    var $270 = $269 & 65535;
    var $271 = HEAP16[5264092 >> 1];
    var $272 = $271 & 65535;
    var $273 = $272 * $270 & -1;
    var $_mask = $273 & 1073741823;
    var $274 = ($_mask | 0) == 0;
    if ($274) {
      label = 57;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $275 = $273 << 2;
    var $_pre25 = HEAP32[5264108 >> 2];
    var $i_0147 = 0;
    label = 54;
    break;
   case 54:
    var $i_0147;
    var $277 = $_pre25 + ($i_0147 << 1) | 0;
    var $278 = HEAP16[$277 >> 1];
    var $279 = $278 << 16 >> 16 == 0;
    if ($279) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $281 = $278 & 65535;
    var $282 = $i_0147 & 3;
    var $283 = 5560904 + ($282 << 2) | 0;
    var $284 = HEAP32[$283 >> 2];
    var $285 = $281 - $284 | 0;
    var $286 = $scale_mul + ($282 << 2) | 0;
    var $287 = HEAPF32[$286 >> 2];
    var $288 = $285 | 0;
    var $289 = $287 * $288;
    var $290 = $289 & -1;
    var $291 = ($290 | 0) < 65535;
    var $292 = $291 ? $290 : 65535;
    var $293 = ($292 | 0) < 0;
    var $phitmp = $292 & 65535;
    var $294 = $293 ? 0 : $phitmp;
    HEAP16[$277 >> 1] = $294;
    label = 56;
    break;
   case 56:
    var $296 = $i_0147 + 1 | 0;
    var $exitcond184 = ($296 | 0) == ($275 | 0);
    if ($exitcond184) {
      label = 57;
      break;
    } else {
      var $i_0147 = $296;
      label = 54;
      break;
    }
   case 57:
    var $297 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573248 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573252 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $298 = $297 != 1;
    var $299 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573264 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573268 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $300 = $299 != 1;
    var $or_cond8 = $298 | $300;
    var $301 = HEAP32[5560840 >> 2];
    var $302 = ($301 | 0) == 3;
    var $or_cond10 = $or_cond8 & $302;
    if ($or_cond10) {
      label = 58;
      break;
    } else {
      label = 76;
      break;
    }
   case 58:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    var $305 = HEAP32[_stderr >> 2];
    var $306 = _fwrite(5577788, 35, 1, $305);
    label = 60;
    break;
   case 60:
    var $307 = $273 << 1;
    var $308 = ($273 | 0) == 0;
    var $c_8144 = 0;
    label = 61;
    break;
   case 61:
    var $c_8144;
    var $309 = 5573248 + ($c_8144 << 3) | 0;
    var $310 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$309 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$309 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $311 = $310 == 1;
    if ($311) {
      label = 75;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $313 = _malloc($307);
    var $314 = $313;
    _merror($313, 5577660);
    if ($308) {
      label = 65;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $_pre24 = HEAP32[5264108 >> 2];
    var $i_1135 = 0;
    label = 64;
    break;
   case 64:
    var $i_1135;
    var $315 = $_pre24 + ($i_1135 << 3) + ($c_8144 << 1) | 0;
    var $316 = HEAP16[$315 >> 1];
    var $317 = $314 + ($i_1135 << 1) | 0;
    HEAP16[$317 >> 1] = $316;
    var $318 = $i_1135 + 1 | 0;
    var $exitcond = ($318 | 0) == ($273 | 0);
    if ($exitcond) {
      label = 65;
      break;
    } else {
      var $i_1135 = $318;
      label = 64;
      break;
    }
   case 65:
    var $319 = HEAP16[5264112 >> 1];
    var $320 = $319 << 16 >> 16 == 0;
    if ($320) {
      label = 74;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $321 = $319 & 65535;
    var $_pre23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$309 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$309 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $row_2139 = 0;
    label = 67;
    break;
   case 67:
    var $row_2139;
    var $323 = $row_2139 >>> 0;
    var $324 = $321 | 0;
    var $325 = $324 * .5;
    var $326 = $323 - $325;
    var $327 = $326 * $_pre23;
    var $328 = $325 + $327;
    var $329 = $328;
    var $330 = $329 >= 0 ? Math.floor($329) : Math.ceil($329);
    var $331 = $321 - 2 | 0;
    var $332 = $330 >>> 0 > $331 >>> 0;
    if ($332) {
      label = 73;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $334 = $330 >>> 0;
    var $335 = $329 - $334;
    var $336 = HEAP16[5264092 >> 1];
    var $337 = $336 << 16 >> 16 == 0;
    if ($337) {
      label = 73;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $338 = $336 & 65535;
    var $339 = 1 - $335;
    var $col_2137 = 0;
    label = 70;
    break;
   case 70:
    var $col_2137;
    var $341 = $col_2137 >>> 0;
    var $342 = $338 | 0;
    var $343 = $342 * .5;
    var $344 = $341 - $343;
    var $345 = $344 * $_pre23;
    var $346 = $343 + $345;
    var $347 = $346;
    var $348 = $347 >= 0 ? Math.floor($347) : Math.ceil($347);
    var $349 = $338 - 2 | 0;
    var $350 = $348 >>> 0 > $349 >>> 0;
    if ($350) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $352 = $348 >>> 0;
    var $353 = $347 - $352;
    var $354 = $338 * $330 & -1;
    var $_sum = $348 + $354 | 0;
    var $355 = $314 + ($_sum << 1) | 0;
    var $356 = HEAP16[$355 >> 1];
    var $357 = $356 & 65535;
    var $358 = $357 | 0;
    var $359 = 1 - $353;
    var $360 = $359 * $358;
    var $_sum129 = $_sum + 1 | 0;
    var $361 = $314 + ($_sum129 << 1) | 0;
    var $362 = HEAP16[$361 >> 1];
    var $363 = $362 & 65535;
    var $364 = $363 | 0;
    var $365 = $353 * $364;
    var $366 = $360 + $365;
    var $367 = $339 * $366;
    var $_sum130 = $_sum + $338 | 0;
    var $368 = $314 + ($_sum130 << 1) | 0;
    var $369 = HEAP16[$368 >> 1];
    var $370 = $369 & 65535;
    var $371 = $370 | 0;
    var $372 = $359 * $371;
    var $373 = $338 + 1 | 0;
    var $_sum131 = $373 + $_sum | 0;
    var $374 = $314 + ($_sum131 << 1) | 0;
    var $375 = HEAP16[$374 >> 1];
    var $376 = $375 & 65535;
    var $377 = $376 | 0;
    var $378 = $353 * $377;
    var $379 = $372 + $378;
    var $380 = $335 * $379;
    var $381 = $367 + $380;
    var $382 = $381 >= 0 ? Math.floor($381) : Math.ceil($381);
    var $383 = $338 * $row_2139 & -1;
    var $384 = $383 + $col_2137 | 0;
    var $385 = HEAP32[5264108 >> 2];
    var $386 = $385 + ($384 << 3) + ($c_8144 << 1) | 0;
    HEAP16[$386 >> 1] = $382;
    label = 72;
    break;
   case 72:
    var $388 = $col_2137 + 1 | 0;
    var $389 = $388 >>> 0 < $338 >>> 0;
    if ($389) {
      var $col_2137 = $388;
      label = 70;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $390 = $row_2139 + 1 | 0;
    var $391 = $390 >>> 0 < $321 >>> 0;
    if ($391) {
      var $row_2139 = $390;
      label = 67;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    _free($313);
    label = 75;
    break;
   case 75:
    var $393 = $c_8144 + 2 | 0;
    var $394 = $393 >>> 0 < 4;
    if ($394) {
      var $c_8144 = $393;
      label = 61;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    STACKTOP = __stackBase__;
    return;
   case 77:
    var $396 = $dsum_sroa_5_443 / $dsum_sroa_1_446;
    var $397 = $396;
    HEAPF32[5245644 >> 2] = $397;
    var $dsum_sroa_2_44547 = $dsum_sroa_2_445;
    var $dsum_sroa_3_44448 = $dsum_sroa_3_444;
    var $dsum_sroa_6_44249 = $dsum_sroa_6_442;
    var $dsum_sroa_7_44150 = $dsum_sroa_7_441;
    label = 78;
    break;
   case 78:
    var $dsum_sroa_7_44150;
    var $dsum_sroa_6_44249;
    var $dsum_sroa_3_44448;
    var $dsum_sroa_2_44547;
    var $399 = $dsum_sroa_2_44547 != 0;
    if ($399) {
      label = 79;
      break;
    } else {
      label = 80;
      break;
    }
   case 79:
    var $401 = $dsum_sroa_6_44249 / $dsum_sroa_2_44547;
    var $402 = $401;
    HEAPF32[5245648 >> 2] = $402;
    label = 80;
    break;
   case 80:
    var $404 = $dsum_sroa_3_44448 != 0;
    if ($404) {
      label = 81;
      break;
    } else {
      label = 30;
      break;
    }
   case 81:
    var $406 = $dsum_sroa_7_44150 / $dsum_sroa_3_44448;
    var $407 = $406;
    HEAPF32[5245652 >> 2] = $407;
    label = 30;
    break;
  }
}
_scale_colors["X"] = 1;
function _pre_interpolate() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5244916 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b1 = HEAP8[5398716];
    if ($_b1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP16[5264112 >> 1];
    HEAP16[5398712 >> 1] = $5;
    var $6 = HEAP16[5264092 >> 1];
    HEAP16[5242964 >> 1] = $6;
    label = 12;
    break;
   case 5:
    var $8 = HEAP16[5398712 >> 1];
    var $9 = $8 & 65535;
    var $10 = HEAP16[5242964 >> 1];
    var $11 = $10 & 65535;
    var $12 = $11 * $9 & -1;
    var $13 = _calloc($12, 8);
    var $14 = $13;
    _merror($13, 5577548);
    var $15 = HEAP16[5398712 >> 1];
    var $16 = $15 << 16 >> 16 == 0;
    if ($16) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $_pre4 = HEAP16[5242964 >> 1];
    var $row_029 = 0;
    var $17 = $_pre4;
    label = 7;
    break;
   case 7:
    var $17;
    var $row_029;
    var $18 = $17 << 16 >> 16 == 0;
    if ($18) {
      var $36 = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $19 = $17 & 65535;
    var $20 = $row_029 >> 1;
    var $_pre5 = HEAP16[5264092 >> 1];
    var $_pre6 = HEAP32[5264108 >> 2];
    var $col_026 = 0;
    var $22 = $19;
    label = 9;
    break;
   case 9:
    var $22;
    var $col_026;
    var $23 = _fcol($row_029, $col_026);
    var $24 = $_pre5 & 65535;
    var $25 = $24 * $20 & -1;
    var $26 = $col_026 >> 1;
    var $27 = $25 + $26 | 0;
    var $28 = $_pre6 + ($27 << 3) + ($23 << 1) | 0;
    var $29 = HEAP16[$28 >> 1];
    var $30 = $22 * $row_029 & -1;
    var $31 = $30 + $col_026 | 0;
    var $32 = $14 + ($31 << 3) + ($23 << 1) | 0;
    HEAP16[$32 >> 1] = $29;
    var $33 = $col_026 + 1 | 0;
    var $34 = $_pre4 & 65535;
    var $35 = ($33 | 0) < ($34 | 0);
    if ($35) {
      var $col_026 = $33;
      var $22 = $34;
      label = 9;
      break;
    } else {
      var $36 = $_pre4;
      label = 10;
      break;
    }
   case 10:
    var $36;
    var $37 = $row_029 + 1 | 0;
    var $38 = $15 & 65535;
    var $39 = ($37 | 0) < ($38 | 0);
    if ($39) {
      var $row_029 = $37;
      var $17 = $36;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $40 = HEAP32[5264108 >> 2];
    var $41 = $40;
    _free($41);
    HEAP32[5264108 >> 2] = $14;
    HEAP16[5244916 >> 1] = 0;
    label = 12;
    break;
   case 12:
    var $43 = HEAP32[5427632 >> 2];
    var $44 = $43 >>> 0 > 1e3;
    var $45 = HEAP32[5560840 >> 2];
    var $46 = ($45 | 0) == 3;
    var $or_cond = $44 & $46;
    if ($or_cond) {
      label = 13;
      break;
    } else {
      label = 22;
      break;
    }
   case 13:
    var $_b2 = HEAP8[5403040];
    if ($_b2) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5560840 >> 2] = 4;
    var $_b = HEAP8[5398716];
    var $49 = $_b & 1;
    var $50 = $49 ^ 1;
    HEAP32[5263436 >> 2] = $50;
    var $76 = $49;
    label = 23;
    break;
   case 15:
    var $51 = $43 >>> 5;
    var $52 = $51 & 1;
    var $53 = HEAP16[5398712 >> 1];
    var $54 = $53 & 65535;
    var $55 = $52 >>> 0 < $54 >>> 0;
    if ($55) {
      label = 16;
      break;
    } else {
      label = 21;
      break;
    }
   case 16:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_121 = $52;
    label = 17;
    break;
   case 17:
    var $row_121;
    var $56 = $row_121 << 2;
    var $57 = $56 & 28;
    var $58 = $57 | 2;
    var $59 = $43 >>> ($58 >>> 0);
    var $60 = $59 & 1;
    var $61 = $_pre & 65535;
    var $62 = $60 >>> 0 < $61 >>> 0;
    if ($62) {
      label = 18;
      break;
    } else {
      label = 20;
      break;
    }
   case 18:
    var $_pre3 = HEAP32[5264108 >> 2];
    var $col_120 = $60;
    label = 19;
    break;
   case 19:
    var $col_120;
    var $63 = $61 * $row_121 & -1;
    var $64 = $63 + $col_120 | 0;
    var $65 = $_pre3 + ($64 << 3) + 6 | 0;
    var $66 = HEAP16[$65 >> 1];
    var $67 = $_pre3 + ($64 << 3) + 2 | 0;
    HEAP16[$67 >> 1] = $66;
    var $68 = $col_120 + 2 | 0;
    var $69 = ($68 | 0) < ($61 | 0);
    if ($69) {
      var $col_120 = $68;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $70 = $row_121 + 2 | 0;
    var $71 = ($70 | 0) < ($54 | 0);
    if ($71) {
      var $row_121 = $70;
      label = 17;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $72 = $43 << 1;
    var $_not = $72 | 1431655765;
    var $73 = $_not ^ -1431655766;
    var $74 = $73 & $43;
    HEAP32[5427632 >> 2] = $74;
    label = 22;
    break;
   case 22:
    var $_pr_b = HEAP8[5398716];
    var $_pr = $_pr_b & 1;
    var $76 = $_pr;
    label = 23;
    break;
   case 23:
    var $76;
    var $77 = ($76 | 0) == 0;
    if ($77) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[5427632 >> 2] = 0;
    label = 25;
    break;
   case 25:
    return;
  }
}
_pre_interpolate["X"] = 1;
function _border_interpolate($border) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sum = __stackBase__;
    var $1 = HEAP16[5398712 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 20;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $sum;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_039 = 0;
    var $4 = $_pre;
    label = 4;
    break;
   case 4:
    var $4;
    var $row_039;
    var $5 = $4 << 16 >> 16 == 0;
    if ($5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $_pre3 = $1 & 65535;
    var $62 = 0;
    var $_pre_phi4 = $_pre3;
    label = 19;
    break;
   case 6:
    var $6 = $4 & 65535;
    var $7 = $row_039 >>> 0 < $border >>> 0;
    var $8 = $row_039 - 1 | 0;
    var $9 = $row_039 + 2 | 0;
    var $col_036 = 0;
    var $11 = $6;
    label = 7;
    break;
   case 7:
    var $11;
    var $col_036;
    var $12 = ($col_036 | 0) != ($border | 0);
    var $or_cond = $12 | $7;
    var $_pre2 = $1 & 65535;
    if ($or_cond) {
      var $col_1 = $col_036;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $14 = $_pre2 - $border | 0;
    var $15 = $row_039 >>> 0 < $14 >>> 0;
    var $16 = $11 - $border | 0;
    var $_col_0 = $15 ? $16 : $border;
    var $col_1 = $_col_0;
    label = 9;
    break;
   case 9:
    var $col_1;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 28 >> 2] = 0;
    var $17 = $col_1 - 1 | 0;
    var $18 = $_pre & 65535;
    var $19 = HEAP32[5264108 >> 2];
    var $20 = $17 >>> 0 < $18 >>> 0;
    var $21 = $col_1 >>> 0 < $18 >>> 0;
    var $22 = $col_1 + 1 | 0;
    var $23 = $22 >>> 0 < $18 >>> 0;
    var $y_034 = $8;
    label = 10;
    break;
   case 10:
    var $y_034;
    var $25 = $y_034 >>> 0 < $_pre2 >>> 0;
    var $26 = $18 * $y_034 & -1;
    if ($25) {
      label = 11;
      break;
    } else {
      label = 25;
      break;
    }
   case 11:
    if ($20) {
      label = 12;
      break;
    } else {
      label = 21;
      break;
    }
   case 12:
    var $29 = _fcol($y_034, $17);
    var $30 = $26 + $17 | 0;
    var $31 = $19 + ($30 << 3) + ($29 << 1) | 0;
    var $32 = HEAP16[$31 >> 1];
    var $33 = $32 & 65535;
    var $34 = $sum + ($29 << 2) | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = $35 + $33 | 0;
    HEAP32[$34 >> 2] = $36;
    var $37 = $29 + 4 | 0;
    var $38 = $sum + ($37 << 2) | 0;
    var $39 = HEAP32[$38 >> 2];
    var $40 = $39 + 1 | 0;
    HEAP32[$38 >> 2] = $40;
    label = 21;
    break;
   case 13:
    var $42 = _fcol($row_039, $col_1);
    var $43 = HEAP32[5560840 >> 2];
    var $44 = ($43 | 0) == 0;
    if ($44) {
      label = 18;
      break;
    } else {
      var $c_035 = 0;
      label = 14;
      break;
    }
   case 14:
    var $c_035;
    var $45 = ($c_035 | 0) == ($42 | 0);
    if ($45) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $47 = $c_035 + 4 | 0;
    var $48 = $sum + ($47 << 2) | 0;
    var $49 = HEAP32[$48 >> 2];
    var $50 = ($49 | 0) == 0;
    if ($50) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $52 = $sum + ($c_035 << 2) | 0;
    var $53 = HEAP32[$52 >> 2];
    var $54 = Math.floor(($53 >>> 0) / ($49 >>> 0));
    var $55 = $54 & 65535;
    var $56 = $18 * $row_039 & -1;
    var $57 = $56 + $col_1 | 0;
    var $58 = $19 + ($57 << 3) + ($c_035 << 1) | 0;
    HEAP16[$58 >> 1] = $55;
    label = 17;
    break;
   case 17:
    var $60 = $c_035 + 1 | 0;
    var $61 = $60 >>> 0 < $43 >>> 0;
    if ($61) {
      var $c_035 = $60;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    if ($23) {
      var $col_036 = $22;
      var $11 = $18;
      label = 7;
      break;
    } else {
      var $62 = $_pre;
      var $_pre_phi4 = $_pre2;
      label = 19;
      break;
    }
   case 19:
    var $_pre_phi4;
    var $62;
    var $63 = $row_039 + 1 | 0;
    var $64 = $63 >>> 0 < $_pre_phi4 >>> 0;
    if ($64) {
      var $row_039 = $63;
      var $4 = $62;
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
   case 21:
    if ($21) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $67 = _fcol($y_034, $col_1);
    var $68 = $26 + $col_1 | 0;
    var $69 = $19 + ($68 << 3) + ($67 << 1) | 0;
    var $70 = HEAP16[$69 >> 1];
    var $71 = $70 & 65535;
    var $72 = $sum + ($67 << 2) | 0;
    var $73 = HEAP32[$72 >> 2];
    var $74 = $73 + $71 | 0;
    HEAP32[$72 >> 2] = $74;
    var $75 = $67 + 4 | 0;
    var $76 = $sum + ($75 << 2) | 0;
    var $77 = HEAP32[$76 >> 2];
    var $78 = $77 + 1 | 0;
    HEAP32[$76 >> 2] = $78;
    label = 23;
    break;
   case 23:
    if ($23) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $80 = _fcol($y_034, $22);
    var $81 = $26 + $22 | 0;
    var $82 = $19 + ($81 << 3) + ($80 << 1) | 0;
    var $83 = HEAP16[$82 >> 1];
    var $84 = $83 & 65535;
    var $85 = $sum + ($80 << 2) | 0;
    var $86 = HEAP32[$85 >> 2];
    var $87 = $86 + $84 | 0;
    HEAP32[$85 >> 2] = $87;
    var $88 = $80 + 4 | 0;
    var $89 = $sum + ($88 << 2) | 0;
    var $90 = HEAP32[$89 >> 2];
    var $91 = $90 + 1 | 0;
    HEAP32[$89 >> 2] = $91;
    label = 25;
    break;
   case 25:
    var $92 = $y_034 + 1 | 0;
    var $93 = ($92 | 0) == ($9 | 0);
    if ($93) {
      label = 13;
      break;
    } else {
      var $y_034 = $92;
      label = 10;
      break;
    }
  }
}
_border_interpolate["X"] = 1;
function _lin_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32784 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $code = __stackBase__;
    var $sum = __stackBase__ + 32768;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5577440, 26, 1, $2);
    label = 4;
    break;
   case 4:
    var $5 = HEAP32[5427632 >> 2];
    var $6 = ($5 | 0) == 2;
    var $_ = $6 ? 6 : 16;
    _border_interpolate(1);
    var $7 = $sum;
    var $row_080 = 0;
    label = 5;
    break;
   case 5:
    var $row_080;
    var $col_079 = 0;
    label = 8;
    break;
   case 6:
    var $8 = HEAP16[5398712 >> 1];
    var $9 = $8 & 65535;
    var $10 = $9 - 1 | 0;
    var $11 = ($10 | 0) > 1;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 28;
      break;
    }
   case 7:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_165 = 1;
    label = 18;
    break;
   case 8:
    var $col_079;
    var $13 = $code + ($row_080 << 11) + ($col_079 << 7) + 4 | 0;
    var $14 = _fcol($row_080, $col_079);
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$7 + 8 >> 2] = 0;
    HEAP32[$7 + 12 >> 2] = 0;
    var $15 = $col_079 - 1 | 0;
    var $16 = $col_079 + 1 | 0;
    var $y_071 = -1;
    var $ip_072 = $13;
    label = 9;
    break;
   case 9:
    var $ip_072;
    var $y_071;
    var $18 = ($y_071 | 0) == 0;
    var $19 = $18 & 1;
    var $20 = $y_071 + $row_080 | 0;
    var $21 = _fcol($20, $15);
    var $22 = ($21 | 0) == ($14 | 0);
    if ($22) {
      var $ip_2 = $ip_072;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $24 = HEAP16[5242964 >> 1];
    var $25 = $24 & 65535;
    var $26 = $25 * $y_071 & -1;
    var $27 = $26 << 2;
    var $28 = $27 - 4 | 0;
    var $29 = $28 + $21 | 0;
    var $30 = $ip_072 + 4 | 0;
    HEAP32[$ip_072 >> 2] = $29;
    var $31 = $ip_072 + 8 | 0;
    HEAP32[$30 >> 2] = $19;
    var $32 = $ip_072 + 12 | 0;
    HEAP32[$31 >> 2] = $21;
    var $33 = 1 << $19;
    var $34 = $sum + ($21 << 2) | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = $35 + $33 | 0;
    HEAP32[$34 >> 2] = $36;
    var $ip_2 = $32;
    label = 11;
    break;
   case 11:
    var $ip_2;
    var $38 = $18 ? 2 : 1;
    var $39 = _fcol($20, $col_079);
    var $40 = ($39 | 0) == ($14 | 0);
    if ($40) {
      var $ip_2_1 = $ip_2;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 12:
    var $42 = $code + ($row_080 << 11) + ($col_079 << 7) | 0;
    var $43 = $ip_2_2;
    var $44 = $42;
    var $45 = $43 - $44 | 0;
    var $46 = $45 >> 2;
    var $47 = ($46 | 0) / 3 & -1;
    HEAP32[$42 >> 2] = $47;
    var $48 = HEAP32[5560840 >> 2];
    var $49 = ($48 | 0) > 0;
    if ($49) {
      var $c_073 = 0;
      var $ip_374 = $ip_2_2;
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $ip_374;
    var $c_073;
    var $50 = ($c_073 | 0) == ($14 | 0);
    if ($50) {
      var $ip_4 = $ip_374;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $52 = $ip_374 + 4 | 0;
    HEAP32[$ip_374 >> 2] = $c_073;
    var $53 = $sum + ($c_073 << 2) | 0;
    var $54 = HEAP32[$53 >> 2];
    var $55 = 256 / ($54 | 0) & -1;
    var $56 = $ip_374 + 8 | 0;
    HEAP32[$52 >> 2] = $55;
    var $ip_4 = $56;
    label = 15;
    break;
   case 15:
    var $ip_4;
    var $58 = $c_073 + 1 | 0;
    var $59 = ($58 | 0) < ($48 | 0);
    if ($59) {
      var $c_073 = $58;
      var $ip_374 = $ip_4;
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $60 = ($16 | 0) < ($_ | 0);
    if ($60) {
      var $col_079 = $16;
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $62 = $row_080 + 1 | 0;
    var $63 = ($62 | 0) < ($_ | 0);
    if ($63) {
      var $row_080 = $62;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 18:
    var $row_165;
    var $64 = $_pre & 65535;
    var $65 = $64 - 1 | 0;
    var $66 = ($65 | 0) > 1;
    if ($66) {
      label = 19;
      break;
    } else {
      label = 27;
      break;
    }
   case 19:
    var $67 = ($row_165 | 0) % ($_ | 0);
    var $68 = $67 << 9;
    var $scevgep_sum83 = $68 | 1;
    var $_pre1 = HEAP32[5264108 >> 2];
    var $col_161 = 1;
    label = 20;
    break;
   case 20:
    var $col_161;
    var $70 = $64 * $row_165 & -1;
    var $71 = $70 + $col_161 | 0;
    var $72 = ($col_161 | 0) % ($_ | 0);
    var $73 = $code + ($67 << 11) + ($72 << 7) | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$7 + 8 >> 2] = 0;
    HEAP32[$7 + 12 >> 2] = 0;
    var $74 = $code + ($67 << 11) + ($72 << 7) + 4 | 0;
    var $75 = HEAP32[$73 >> 2];
    var $76 = ($75 | 0) == 0;
    if ($76) {
      var $ip_5_lcssa = $74;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $77 = $72 << 5;
    var $78 = $75 * 3 & -1;
    var $79 = $77 + $78 | 0;
    var $i_055 = $75;
    var $ip_556 = $74;
    label = 22;
    break;
   case 22:
    var $ip_556;
    var $i_055;
    var $81 = $i_055 - 1 | 0;
    var $82 = HEAP32[$ip_556 >> 2];
    var $83 = $_pre1 + ($71 << 3) + ($82 << 1) | 0;
    var $84 = HEAP16[$83 >> 1];
    var $85 = $84 & 65535;
    var $86 = $ip_556 + 4 | 0;
    var $87 = HEAP32[$86 >> 2];
    var $88 = $85 << $87;
    var $89 = $ip_556 + 8 | 0;
    var $90 = HEAP32[$89 >> 2];
    var $91 = $sum + ($90 << 2) | 0;
    var $92 = HEAP32[$91 >> 2];
    var $93 = $92 + $88 | 0;
    HEAP32[$91 >> 2] = $93;
    var $94 = $ip_556 + 12 | 0;
    var $95 = ($81 | 0) == 0;
    if ($95) {
      label = 23;
      break;
    } else {
      var $i_055 = $81;
      var $ip_556 = $94;
      label = 22;
      break;
    }
   case 23:
    var $scevgep81_sum = $scevgep_sum83 + $79 | 0;
    var $scevgep82 = $code + ($scevgep81_sum << 2) | 0;
    var $ip_5_lcssa = $scevgep82;
    label = 24;
    break;
   case 24:
    var $ip_5_lcssa;
    var $97 = $48 - 1 | 0;
    var $98 = ($97 | 0) == 0;
    if ($98) {
      label = 26;
      break;
    } else {
      var $ip_657 = $ip_5_lcssa;
      var $99 = $97;
      label = 25;
      break;
    }
   case 25:
    var $99;
    var $ip_657;
    var $100 = HEAP32[$ip_657 >> 2];
    var $101 = $sum + ($100 << 2) | 0;
    var $102 = HEAP32[$101 >> 2];
    var $103 = $ip_657 + 4 | 0;
    var $104 = HEAP32[$103 >> 2];
    var $105 = $104 * $102 & -1;
    var $106 = $105 >>> 8;
    var $107 = $106 & 65535;
    var $108 = $_pre1 + ($71 << 3) + ($100 << 1) | 0;
    HEAP16[$108 >> 1] = $107;
    var $109 = $ip_657 + 8 | 0;
    var $110 = $99 - 1 | 0;
    var $111 = ($110 | 0) == 0;
    if ($111) {
      label = 26;
      break;
    } else {
      var $ip_657 = $109;
      var $99 = $110;
      label = 25;
      break;
    }
   case 26:
    var $112 = $col_161 + 1 | 0;
    var $113 = ($112 | 0) < ($65 | 0);
    if ($113) {
      var $col_161 = $112;
      label = 20;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $114 = $row_165 + 1 | 0;
    var $115 = ($114 | 0) < ($10 | 0);
    if ($115) {
      var $row_165 = $114;
      label = 18;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    STACKTOP = __stackBase__;
    return;
   case 29:
    var $117 = HEAP16[5242964 >> 1];
    var $118 = $117 & 65535;
    var $119 = $118 * $y_071 & -1;
    var $120 = $119 << 2;
    var $121 = $120 + $39 | 0;
    var $122 = $ip_2 + 4 | 0;
    HEAP32[$ip_2 >> 2] = $121;
    var $123 = $ip_2 + 8 | 0;
    HEAP32[$122 >> 2] = $38;
    var $124 = $ip_2 + 12 | 0;
    HEAP32[$123 >> 2] = $39;
    var $125 = 1 << $38;
    var $126 = $sum + ($39 << 2) | 0;
    var $127 = HEAP32[$126 >> 2];
    var $128 = $127 + $125 | 0;
    HEAP32[$126 >> 2] = $128;
    var $ip_2_1 = $124;
    label = 30;
    break;
   case 30:
    var $ip_2_1;
    var $130 = _fcol($20, $16);
    var $131 = ($130 | 0) == ($14 | 0);
    if ($131) {
      var $ip_2_2 = $ip_2_1;
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $133 = HEAP16[5242964 >> 1];
    var $134 = $133 & 65535;
    var $135 = $134 * $y_071 & -1;
    var $136 = $135 << 2;
    var $137 = $136 + 4 | 0;
    var $138 = $137 + $130 | 0;
    var $139 = $ip_2_1 + 4 | 0;
    HEAP32[$ip_2_1 >> 2] = $138;
    var $140 = $ip_2_1 + 8 | 0;
    HEAP32[$139 >> 2] = $19;
    var $141 = $ip_2_1 + 12 | 0;
    HEAP32[$140 >> 2] = $130;
    var $142 = 1 << $19;
    var $143 = $sum + ($130 << 2) | 0;
    var $144 = HEAP32[$143 >> 2];
    var $145 = $144 + $142 | 0;
    HEAP32[$143 >> 2] = $145;
    var $ip_2_2 = $141;
    label = 32;
    break;
   case 32:
    var $ip_2_2;
    var $147 = $y_071 + 1 | 0;
    var $exitcond = ($147 | 0) == 2;
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $y_071 = $147;
      var $ip_072 = $ip_2_2;
      label = 9;
      break;
    }
  }
}



_lin_interpolate["X"] = 1;
function _vng_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1072 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $code = __stackBase__;
    var $gval = __stackBase__ + 1024;
    var $sum = __stackBase__ + 1056;
    _lin_interpolate();
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5577336, 21, 1, $2);
    label = 4;
    break;
   case 4:
    var $5 = HEAP32[5427632 >> 2];
    var $6 = ($5 | 0) == 1;
    var $_ = $6 ? 16 : 2;
    var $_149 = $6 ? 16 : 8;
    var $7 = ($5 | 0) == 2;
    var $pcol_1 = $7 ? 6 : $_;
    var $prow_1 = $7 ? 6 : $_149;
    var $8 = $prow_1 * $pcol_1 & -1;
    var $9 = _calloc($8, 1280);
    var $10 = $9;
    _merror($9, 5577240);
    var $row_0196 = 0;
    var $ip_0197 = $10;
    label = 5;
    break;
   case 5:
    var $ip_0197;
    var $row_0196;
    var $11 = $row_0196 + 1 | 0;
    var $col_0194 = 0;
    var $ip_1195 = $ip_0197;
    label = 6;
    break;
   case 6:
    var $ip_1195;
    var $col_0194;
    var $13 = $code + ($row_0196 << 6) + ($col_0194 << 2) | 0;
    HEAP32[$13 >> 2] = $ip_1195;
    HEAP32[5243512 >> 2] = 5243128;
    var $14 = $col_0194 + 1 | 0;
    var $t_0189 = 0;
    var $ip_2190 = $ip_1195;
    var $16 = 5243128;
    label = 7;
    break;
   case 7:
    var $16;
    var $ip_2190;
    var $t_0189;
    var $17 = $16 + 1 | 0;
    var $18 = HEAP8[$16];
    var $19 = $18 << 24 >> 24;
    var $20 = $16 + 2 | 0;
    var $21 = HEAP8[$17];
    var $22 = $21 << 24 >> 24;
    var $23 = $16 + 3 | 0;
    var $24 = HEAP8[$20];
    var $25 = $24 << 24 >> 24;
    var $26 = $16 + 4 | 0;
    var $27 = HEAP8[$23];
    var $28 = $27 << 24 >> 24;
    var $29 = $16 + 5 | 0;
    var $30 = HEAP8[$26];
    var $31 = $30 << 24 >> 24;
    var $32 = $16 + 6 | 0;
    HEAP32[5243512 >> 2] = $32;
    var $33 = HEAP8[$29];
    var $34 = $33 << 24 >> 24;
    var $35 = $19 + $row_0196 | 0;
    var $36 = $22 + $col_0194 | 0;
    var $37 = _fcol($35, $36);
    var $38 = $25 + $row_0196 | 0;
    var $39 = $28 + $col_0194 | 0;
    var $40 = _fcol($38, $39);
    var $41 = ($40 | 0) == ($37 | 0);
    if ($41) {
      label = 8;
      break;
    } else {
      var $ip_5 = $ip_2190;
      label = 15;
      break;
    }
   case 8:
    var $43 = _fcol($row_0196, $14);
    var $44 = ($43 | 0) == ($37 | 0);
    if ($44) {
      label = 9;
      break;
    } else {
      var $49 = 1;
      label = 10;
      break;
    }
   case 9:
    var $46 = _fcol($11, $col_0194);
    var $47 = ($46 | 0) == ($37 | 0);
    var $phitmp148 = $47 ? 2 : 1;
    var $49 = $phitmp148;
    label = 10;
    break;
   case 10:
    var $49;
    var $50 = $19 - $25 | 0;
    var $ispos = ($50 | 0) > -1;
    var $neg = -$50 | 0;
    var $51 = $ispos ? $50 : $neg;
    var $52 = ($51 | 0) == ($49 | 0);
    if ($52) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $54 = $22 - $28 | 0;
    var $ispos150 = ($54 | 0) > -1;
    var $neg151 = -$54 | 0;
    var $55 = $ispos150 ? $54 : $neg151;
    var $56 = ($55 | 0) == ($49 | 0);
    if ($56) {
      var $ip_5 = $ip_2190;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $57 = HEAP16[5242964 >> 1];
    var $58 = $57 & 65535;
    var $59 = $58 * $19 & -1;
    var $60 = $59 + $22 | 0;
    var $61 = $60 << 2;
    var $62 = $61 + $37 | 0;
    var $63 = $ip_2190 + 4 | 0;
    HEAP32[$ip_2190 >> 2] = $62;
    var $64 = $58 * $25 & -1;
    var $65 = $64 + $28 | 0;
    var $66 = $65 << 2;
    var $67 = $66 + $37 | 0;
    var $68 = $ip_2190 + 8 | 0;
    HEAP32[$63 >> 2] = $67;
    var $69 = $ip_2190 + 12 | 0;
    HEAP32[$68 >> 2] = $31;
    var $70 = $34 & 1;
    var $71 = ($70 | 0) == 0;
    if ($71) {
      var $ip_4 = $69;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $73 = $ip_2190 + 16 | 0;
    HEAP32[$69 >> 2] = 0;
    var $ip_4 = $73;
    label = 14;
    break;
   case 14:
    var $ip_4;
    var $75 = $34 & 2;
    var $76 = ($75 | 0) == 0;
    if ($76) {
      var $ip_4_1 = $ip_4;
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 15:
    var $ip_5;
    var $78 = $t_0189 + 1 | 0;
    var $exitcond204 = ($78 | 0) == 64;
    if ($exitcond204) {
      label = 16;
      break;
    } else {
      var $t_0189 = $78;
      var $ip_2190 = $ip_5;
      var $16 = $32;
      label = 7;
      break;
    }
   case 16:
    var $80 = $ip_5 + 4 | 0;
    HEAP32[$ip_5 >> 2] = 2147483647;
    HEAP32[5243512 >> 2] = 5243516;
    var $_pre = HEAP16[5242964 >> 1];
    var $ip_6191 = $80;
    var $g_1192 = 0;
    var $82 = 5243516;
    label = 17;
    break;
   case 17:
    var $82;
    var $g_1192;
    var $ip_6191;
    var $83 = $82 + 1 | 0;
    var $84 = HEAP8[$82];
    var $85 = $84 << 24 >> 24;
    var $86 = $82 + 2 | 0;
    HEAP32[5243512 >> 2] = $86;
    var $87 = HEAP8[$83];
    var $88 = $87 << 24 >> 24;
    var $89 = $_pre & 65535;
    var $90 = $89 * $85 & -1;
    var $91 = $90 + $88 | 0;
    var $92 = $91 << 2;
    var $93 = $ip_6191 + 4 | 0;
    HEAP32[$ip_6191 >> 2] = $92;
    var $94 = _fcol($row_0196, $col_0194);
    var $95 = $85 + $row_0196 | 0;
    var $96 = $88 + $col_0194 | 0;
    var $97 = _fcol($95, $96);
    var $98 = ($97 | 0) == ($94 | 0);
    if ($98) {
      var $storemerge = 0;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $100 = $85 << 1;
    var $101 = $100 + $row_0196 | 0;
    var $102 = $88 << 1;
    var $103 = $102 + $col_0194 | 0;
    var $104 = _fcol($101, $103);
    var $105 = ($104 | 0) == ($94 | 0);
    if ($105) {
      label = 19;
      break;
    } else {
      var $storemerge = 0;
      label = 20;
      break;
    }
   case 19:
    var $107 = $91 << 3;
    var $108 = $107 + $94 | 0;
    var $storemerge = $108;
    label = 20;
    break;
   case 20:
    var $storemerge;
    var $ip_7 = $ip_6191 + 8 | 0;
    HEAP32[$93 >> 2] = $storemerge;
    var $110 = $g_1192 + 1 | 0;
    var $exitcond205 = ($110 | 0) == 8;
    if ($exitcond205) {
      label = 21;
      break;
    } else {
      var $ip_6191 = $ip_7;
      var $g_1192 = $110;
      var $82 = $86;
      label = 17;
      break;
    }
   case 21:
    var $scevgep = $ip_5 + 68 | 0;
    var $112 = ($14 | 0) < ($pcol_1 | 0);
    if ($112) {
      var $col_0194 = $14;
      var $ip_1195 = $scevgep;
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $114 = ($11 | 0) < ($prow_1 | 0);
    if ($114) {
      var $row_0196 = $11;
      var $ip_0197 = $scevgep;
      label = 5;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $115 = $131 << 1;
    var $116 = $129 + ($115 << 3) | 0;
    var $117 = $gval;
    var $118 = $gval | 0;
    var $119 = $sum;
    var $120 = $gval + 4 | 0;
    var $121 = $gval + 8 | 0;
    var $122 = $gval + 12 | 0;
    var $123 = $gval + 16 | 0;
    var $124 = $gval + 20 | 0;
    var $125 = $gval + 24 | 0;
    var $126 = $gval + 28 | 0;
    var $row_2182 = 2;
    var $brow_sroa_0_0 = $129;
    var $brow_sroa_1_0 = $132;
    var $brow_sroa_2_0 = $116;
    label = 25;
    break;
   case 24:
    var $127 = $89 * 3 & -1;
    var $128 = _calloc($127, 8);
    var $129 = $128;
    _merror($128, 5577240);
    var $130 = HEAP16[5242964 >> 1];
    var $131 = $130 & 65535;
    var $132 = $129 + ($131 << 3) | 0;
    var $133 = HEAP16[5398712 >> 1];
    var $134 = $133 & 65535;
    var $135 = $134 - 2 | 0;
    var $136 = ($135 | 0) > 2;
    if ($136) {
      label = 23;
      break;
    } else {
      var $row_2_lcssa = 2;
      var $brow_sroa_0_1 = $129;
      var $brow_sroa_1_1 = $132;
      label = 56;
      break;
    }
   case 25:
    var $brow_sroa_2_0;
    var $brow_sroa_1_0;
    var $brow_sroa_0_0;
    var $row_2182;
    var $137 = $131 - 2 | 0;
    var $138 = ($137 | 0) > 2;
    if ($138) {
      label = 26;
      break;
    } else {
      label = 53;
      break;
    }
   case 26:
    var $139 = ($row_2182 | 0) % ($prow_1 | 0);
    var $_pre9 = HEAP32[5264108 >> 2];
    var $col_1173 = 2;
    label = 27;
    break;
   case 27:
    var $col_1173;
    var $141 = $131 * $row_2182 & -1;
    var $142 = $141 + $col_1173 | 0;
    var $143 = $_pre9 + ($142 << 3) | 0;
    var $144 = ($col_1173 | 0) % ($pcol_1 | 0);
    var $145 = $code + ($139 << 6) + ($144 << 2) | 0;
    var $146 = HEAP32[$145 >> 2];
    HEAP32[$117 >> 2] = 0;
    HEAP32[$117 + 4 >> 2] = 0;
    HEAP32[$117 + 8 >> 2] = 0;
    HEAP32[$117 + 12 >> 2] = 0;
    HEAP32[$117 + 16 >> 2] = 0;
    HEAP32[$117 + 20 >> 2] = 0;
    HEAP32[$117 + 24 >> 2] = 0;
    HEAP32[$117 + 28 >> 2] = 0;
    var $147 = HEAP32[$146 >> 2];
    var $148 = ($147 | 0) == 2147483647;
    if ($148) {
      var $ip_8_lcssa = $146;
      var $199 = 0;
      var $198 = 0;
      var $197 = 0;
      var $196 = 0;
      var $195 = 0;
      var $194 = 0;
      var $193 = 0;
      var $192 = 0;
      label = 33;
      break;
    } else {
      var $ip_8152 = $146;
      var $149 = $147;
      label = 28;
      break;
    }
   case 28:
    var $149;
    var $ip_8152;
    var $150 = $_pre9 + ($142 << 3) + ($149 << 1) | 0;
    var $151 = HEAP16[$150 >> 1];
    var $152 = $151 & 65535;
    var $153 = $ip_8152 + 4 | 0;
    var $154 = HEAP32[$153 >> 2];
    var $155 = $_pre9 + ($142 << 3) + ($154 << 1) | 0;
    var $156 = HEAP16[$155 >> 1];
    var $157 = $156 & 65535;
    var $158 = $152 - $157 | 0;
    var $159 = $158 >> 31;
    var $160 = $159 ^ $158;
    var $161 = $160 - $159 | 0;
    var $162 = $ip_8152 + 8 | 0;
    var $163 = HEAP32[$162 >> 2];
    var $164 = $161 << $163;
    var $165 = $ip_8152 + 12 | 0;
    var $166 = HEAP32[$165 >> 2];
    var $167 = $gval + ($166 << 2) | 0;
    var $168 = HEAP32[$167 >> 2];
    var $169 = $164 + $168 | 0;
    HEAP32[$167 >> 2] = $169;
    var $170 = $ip_8152 + 20 | 0;
    var $171 = $ip_8152 + 16 | 0;
    var $172 = HEAP32[$171 >> 2];
    var $173 = ($172 | 0) == -1;
    if ($173) {
      var $ip_8_be = $170;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $ip_8_be;
    var $174 = HEAP32[$ip_8_be >> 2];
    var $175 = ($174 | 0) == 2147483647;
    if ($175) {
      label = 32;
      break;
    } else {
      var $ip_8152 = $ip_8_be;
      var $149 = $174;
      label = 28;
      break;
    }
   case 30:
    var $177 = $gval + ($172 << 2) | 0;
    var $178 = HEAP32[$177 >> 2];
    var $179 = $178 + $164 | 0;
    HEAP32[$177 >> 2] = $179;
    var $180 = $ip_8152 + 24 | 0;
    var $181 = HEAP32[$170 >> 2];
    var $182 = ($181 | 0) == -1;
    if ($182) {
      var $ip_8_be = $180;
      label = 29;
      break;
    } else {
      var $184 = $180;
      var $183 = $181;
      label = 31;
      break;
    }
   case 31:
    var $183;
    var $184;
    var $185 = $gval + ($183 << 2) | 0;
    var $186 = HEAP32[$185 >> 2];
    var $187 = $186 + $164 | 0;
    HEAP32[$185 >> 2] = $187;
    var $188 = $184 + 4 | 0;
    var $189 = HEAP32[$184 >> 2];
    var $190 = ($189 | 0) == -1;
    if ($190) {
      var $ip_8_be = $188;
      label = 29;
      break;
    } else {
      var $184 = $188;
      var $183 = $189;
      label = 31;
      break;
    }
   case 32:
    var $_pre10 = HEAP32[$118 >> 2];
    var $_pre11 = HEAP32[$120 >> 2];
    var $_pre12 = HEAP32[$121 >> 2];
    var $_pre13 = HEAP32[$122 >> 2];
    var $_pre14 = HEAP32[$123 >> 2];
    var $_pre15 = HEAP32[$124 >> 2];
    var $_pre16 = HEAP32[$125 >> 2];
    var $_pre17 = HEAP32[$126 >> 2];
    var $ip_8_lcssa = $ip_8_be;
    var $199 = $_pre10;
    var $198 = $_pre11;
    var $197 = $_pre12;
    var $196 = $_pre13;
    var $195 = $_pre14;
    var $194 = $_pre15;
    var $193 = $_pre16;
    var $192 = $_pre17;
    label = 33;
    break;
   case 33:
    var $192;
    var $193;
    var $194;
    var $195;
    var $196;
    var $197;
    var $198;
    var $199;
    var $ip_8_lcssa;
    var $200 = ($199 | 0) > ($198 | 0);
    var $_gmin_0 = $200 ? $198 : $199;
    var $201 = ($199 | 0) < ($198 | 0);
    var $gmax_1 = $201 ? $198 : $199;
    var $202 = ($_gmin_0 | 0) > ($197 | 0);
    var $_gmin_0_1 = $202 ? $197 : $_gmin_0;
    var $203 = ($gmax_1 | 0) < ($197 | 0);
    var $gmax_1_1 = $203 ? $197 : $gmax_1;
    var $204 = ($_gmin_0_1 | 0) > ($196 | 0);
    var $_gmin_0_2 = $204 ? $196 : $_gmin_0_1;
    var $205 = ($gmax_1_1 | 0) < ($196 | 0);
    var $gmax_1_2 = $205 ? $196 : $gmax_1_1;
    var $206 = ($_gmin_0_2 | 0) > ($195 | 0);
    var $_gmin_0_3 = $206 ? $195 : $_gmin_0_2;
    var $207 = ($gmax_1_2 | 0) < ($195 | 0);
    var $gmax_1_3 = $207 ? $195 : $gmax_1_2;
    var $208 = ($_gmin_0_3 | 0) > ($194 | 0);
    var $_gmin_0_4 = $208 ? $194 : $_gmin_0_3;
    var $209 = ($gmax_1_3 | 0) < ($194 | 0);
    var $gmax_1_4 = $209 ? $194 : $gmax_1_3;
    var $210 = ($_gmin_0_4 | 0) > ($193 | 0);
    var $_gmin_0_5 = $210 ? $193 : $_gmin_0_4;
    var $211 = ($gmax_1_4 | 0) < ($193 | 0);
    var $gmax_1_5 = $211 ? $193 : $gmax_1_4;
    var $212 = ($gmax_1_5 | 0) < ($192 | 0);
    var $gmax_1_6 = $212 ? $192 : $gmax_1_5;
    var $213 = ($gmax_1_6 | 0) == 0;
    if ($213) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $215 = $brow_sroa_2_0 + ($col_1173 << 3) | 0;
    var $216 = $143;
    var $217 = $215;
    var $st$3$0 = $216 | 0;
    var $218$0 = HEAPU16[$st$3$0 >> 1] | HEAPU16[$st$3$0 + 2 >> 1] << 16;
    var $st$3$1 = $216 + 4 | 0;
    var $218$1 = HEAPU16[$st$3$1 >> 1] | HEAPU16[$st$3$1 + 2 >> 1] << 16;
    var $st$7$0 = $217 | 0;
    tempBigInt = $218$0;
    HEAP16[$st$7$0 >> 1] = tempBigInt & 65535;
    HEAP16[$st$7$0 + 2 >> 1] = tempBigInt >> 16;
    var $st$7$1 = $217 + 4 | 0;
    tempBigInt = $218$1;
    HEAP16[$st$7$1 >> 1] = tempBigInt & 65535;
    HEAP16[$st$7$1 + 2 >> 1] = tempBigInt >> 16;
    label = 52;
    break;
   case 35:
    var $220 = ($_gmin_0_5 | 0) > ($192 | 0);
    var $221 = $ip_8_lcssa + 4 | 0;
    var $_gmin_0_6 = $220 ? $192 : $_gmin_0_5;
    var $222 = $gmax_1_6 >> 1;
    var $223 = $_gmin_0_6 + $222 | 0;
    HEAP32[$119 >> 2] = 0;
    HEAP32[$119 + 4 >> 2] = 0;
    HEAP32[$119 + 8 >> 2] = 0;
    HEAP32[$119 + 12 >> 2] = 0;
    var $224 = _fcol($row_2182, $col_1173);
    var $ip_10163 = $221;
    var $g_3166 = 1;
    var $num_0167 = 0;
    var $226 = $199;
    label = 36;
    break;
   case 36:
    var $226;
    var $num_0167;
    var $g_3166;
    var $ip_10163;
    var $227 = ($226 | 0) > ($223 | 0);
    if ($227) {
      var $num_1 = $num_0167;
      label = 45;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $228 = HEAP32[5560840 >> 2];
    var $229 = ($228 | 0) > 0;
    if ($229) {
      label = 38;
      break;
    } else {
      label = 44;
      break;
    }
   case 38:
    var $230 = $ip_10163 + 4 | 0;
    var $c_0158 = 0;
    label = 39;
    break;
   case 39:
    var $c_0158;
    var $232 = ($c_0158 | 0) == ($224 | 0);
    if ($232) {
      label = 40;
      break;
    } else {
      label = 42;
      break;
    }
   case 40:
    var $234 = HEAP32[$230 >> 2];
    var $235 = ($234 | 0) == 0;
    if ($235) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $237 = $_pre9 + ($142 << 3) + ($224 << 1) | 0;
    var $238 = HEAP16[$237 >> 1];
    var $239 = $238 & 65535;
    var $240 = $_pre9 + ($142 << 3) + ($234 << 1) | 0;
    var $241 = HEAP16[$240 >> 1];
    var $242 = $241 & 65535;
    var $243 = $242 + $239 | 0;
    var $244 = $243 >>> 1;
    var $245 = $sum + ($224 << 2) | 0;
    var $246 = HEAP32[$245 >> 2];
    var $247 = $244 + $246 | 0;
    HEAP32[$245 >> 2] = $247;
    label = 43;
    break;
   case 42:
    var $249 = HEAP32[$ip_10163 >> 2];
    var $250 = $249 + $c_0158 | 0;
    var $251 = $_pre9 + ($142 << 3) + ($250 << 1) | 0;
    var $252 = HEAP16[$251 >> 1];
    var $253 = $252 & 65535;
    var $254 = $sum + ($c_0158 << 2) | 0;
    var $255 = HEAP32[$254 >> 2];
    var $256 = $255 + $253 | 0;
    HEAP32[$254 >> 2] = $256;
    label = 43;
    break;
   case 43:
    var $258 = $c_0158 + 1 | 0;
    var $259 = ($258 | 0) < ($228 | 0);
    if ($259) {
      var $c_0158 = $258;
      label = 39;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $260 = $num_0167 + 1 | 0;
    var $num_1 = $260;
    label = 45;
    break;
   case 45:
    var $num_1;
    var $exitcond = ($g_3166 | 0) == 8;
    if ($exitcond) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $262 = $ip_10163 + 8 | 0;
    var $_phi_trans_insert = $gval + ($g_3166 << 2) | 0;
    var $_pre20 = HEAP32[$_phi_trans_insert >> 2];
    var $phitmp21 = $g_3166 + 1 | 0;
    var $ip_10163 = $262;
    var $g_3166 = $phitmp21;
    var $num_0167 = $num_1;
    var $226 = $_pre20;
    label = 36;
    break;
   case 47:
    var $263 = HEAP32[5560840 >> 2];
    var $264 = ($263 | 0) > 0;
    if ($264) {
      label = 48;
      break;
    } else {
      label = 52;
      break;
    }
   case 48:
    var $265 = $_pre9 + ($142 << 3) + ($224 << 1) | 0;
    var $266 = $sum + ($224 << 2) | 0;
    var $c_1169 = 0;
    label = 49;
    break;
   case 49:
    var $c_1169;
    var $268 = HEAP16[$265 >> 1];
    var $269 = $268 & 65535;
    var $270 = ($c_1169 | 0) == ($224 | 0);
    if ($270) {
      var $t_1 = $269;
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $272 = $sum + ($c_1169 << 2) | 0;
    var $273 = HEAP32[$272 >> 2];
    var $274 = HEAP32[$266 >> 2];
    var $275 = $273 - $274 | 0;
    var $276 = ($275 | 0) / ($num_1 | 0) & -1;
    var $277 = $276 + $269 | 0;
    var $t_1 = $277;
    label = 51;
    break;
   case 51:
    var $t_1;
    var $279 = ($t_1 | 0) < 65535;
    var $280 = $279 ? $t_1 : 65535;
    var $281 = ($280 | 0) < 0;
    var $phitmp = $280 & 65535;
    var $_phitmp = $281 ? 0 : $phitmp;
    var $282 = $brow_sroa_2_0 + ($col_1173 << 3) + ($c_1169 << 1) | 0;
    HEAP16[$282 >> 1] = $_phitmp;
    var $283 = $c_1169 + 1 | 0;
    var $284 = ($283 | 0) < ($263 | 0);
    if ($284) {
      var $c_1169 = $283;
      label = 49;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $285 = $col_1173 + 1 | 0;
    var $286 = ($285 | 0) < ($137 | 0);
    if ($286) {
      var $col_1173 = $285;
      label = 27;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $287 = ($row_2182 | 0) > 3;
    if ($287) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $289 = $row_2182 - 2 | 0;
    var $290 = $131 * $289 & -1;
    var $291 = $290 + 2 | 0;
    var $292 = HEAP32[5264108 >> 2];
    var $293 = $292 + ($291 << 3) | 0;
    var $294 = $293;
    var $295 = $brow_sroa_0_0 + 16 | 0;
    var $296 = $295;
    var $297 = $131 << 3;
    var $298 = $297 - 32 | 0;
    _memcpy($294, $296, $298);
    label = 55;
    break;
   case 55:
    var $299 = $row_2182 + 1 | 0;
    var $300 = ($299 | 0) < ($135 | 0);
    if ($300) {
      var $brow_sroa_0_0 = $brow_sroa_1_0;
      var $brow_sroa_1_0 = $brow_sroa_2_0;
      var $row_2182 = $299;
      var $brow_sroa_2_0 = $brow_sroa_0_0;
      label = 25;
      break;
    } else {
      var $row_2_lcssa = $299;
      var $brow_sroa_0_1 = $brow_sroa_1_0;
      var $brow_sroa_1_1 = $brow_sroa_2_0;
      label = 56;
      break;
    }
   case 56:
    var $brow_sroa_1_1;
    var $brow_sroa_0_1;
    var $row_2_lcssa;
    var $301 = $row_2_lcssa - 2 | 0;
    var $302 = $131 * $301 & -1;
    var $303 = $302 + 2 | 0;
    var $304 = HEAP32[5264108 >> 2];
    var $305 = $304 + ($303 << 3) | 0;
    var $306 = $305;
    var $307 = $brow_sroa_0_1 + 16 | 0;
    var $308 = $307;
    var $309 = $131 << 3;
    var $310 = $309 - 32 | 0;
    _memcpy($306, $308, $310);
    var $311 = $row_2_lcssa - 1 | 0;
    var $312 = $131 * $311 & -1;
    var $313 = $312 + 2 | 0;
    var $314 = $304 + ($313 << 3) | 0;
    var $315 = $314;
    var $316 = $brow_sroa_1_1 + 16 | 0;
    var $317 = $316;
    _memcpy($315, $317, $310);
    _free($128);
    var $318 = $code | 0;
    var $319 = HEAP32[$318 >> 2];
    var $320 = $319;
    _free($320);
    STACKTOP = __stackBase__;
    return;
   case 57:
    var $322 = $ip_4 + 4 | 0;
    HEAP32[$ip_4 >> 2] = 1;
    var $ip_4_1 = $322;
    label = 58;
    break;
   case 58:
    var $ip_4_1;
    var $324 = $34 & 4;
    var $325 = ($324 | 0) == 0;
    if ($325) {
      var $ip_4_2 = $ip_4_1;
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $327 = $ip_4_1 + 4 | 0;
    HEAP32[$ip_4_1 >> 2] = 2;
    var $ip_4_2 = $327;
    label = 60;
    break;
   case 60:
    var $ip_4_2;
    var $329 = $34 & 8;
    var $330 = ($329 | 0) == 0;
    if ($330) {
      var $ip_4_3 = $ip_4_2;
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    var $332 = $ip_4_2 + 4 | 0;
    HEAP32[$ip_4_2 >> 2] = 3;
    var $ip_4_3 = $332;
    label = 62;
    break;
   case 62:
    var $ip_4_3;
    var $334 = $34 & 16;
    var $335 = ($334 | 0) == 0;
    if ($335) {
      var $ip_4_4 = $ip_4_3;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $337 = $ip_4_3 + 4 | 0;
    HEAP32[$ip_4_3 >> 2] = 4;
    var $ip_4_4 = $337;
    label = 64;
    break;
   case 64:
    var $ip_4_4;
    var $339 = $34 & 32;
    var $340 = ($339 | 0) == 0;
    if ($340) {
      var $ip_4_5 = $ip_4_4;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $342 = $ip_4_4 + 4 | 0;
    HEAP32[$ip_4_4 >> 2] = 5;
    var $ip_4_5 = $342;
    label = 66;
    break;
   case 66:
    var $ip_4_5;
    var $344 = $34 & 64;
    var $345 = ($344 | 0) == 0;
    if ($345) {
      var $ip_4_6 = $ip_4_5;
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $347 = $ip_4_5 + 4 | 0;
    HEAP32[$ip_4_5 >> 2] = 6;
    var $ip_4_6 = $347;
    label = 68;
    break;
   case 68:
    var $ip_4_6;
    var $349 = $34 & 128;
    var $350 = ($349 | 0) == 0;
    if ($350) {
      var $ip_4_7 = $ip_4_6;
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $352 = $ip_4_6 + 4 | 0;
    HEAP32[$ip_4_6 >> 2] = 7;
    var $ip_4_7 = $352;
    label = 70;
    break;
   case 70:
    var $ip_4_7;
    var $354 = $ip_4_7 + 4 | 0;
    HEAP32[$ip_4_7 >> 2] = -1;
    var $ip_5 = $354;
    label = 15;
    break;
  }
}
_vng_interpolate["X"] = 1;
function _ppg_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dir = __stackBase__;
    var $diff = __stackBase__ + 20;
    var $guess = __stackBase__ + 28;
    var $1 = $dir | 0;
    HEAP32[$1 >> 2] = 1;
    var $2 = $dir + 4 | 0;
    var $3 = HEAP16[5242964 >> 1];
    var $4 = $3 & 65535;
    HEAP32[$2 >> 2] = $4;
    var $5 = $dir + 8 | 0;
    HEAP32[$5 >> 2] = -1;
    var $6 = $dir + 12 | 0;
    var $7 = -$4 | 0;
    HEAP32[$6 >> 2] = $7;
    var $8 = $dir + 16 | 0;
    HEAP32[$8 >> 2] = 1;
    _border_interpolate(3);
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $10 = HEAP32[_stderr >> 2];
    var $11 = _fwrite(5577128, 21, 1, $10);
    label = 4;
    break;
   case 4:
    var $12 = HEAP16[5398712 >> 1];
    var $13 = $12 & 65535;
    var $14 = $13 - 3 | 0;
    var $15 = ($14 | 0) > 3;
    if ($15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $16 = $diff | 0;
    var $17 = $diff + 4 | 0;
    var $_pre = HEAP32[5427632 >> 2];
    var $_pre1 = HEAP16[5242964 >> 1];
    var $row_0313 = 3;
    label = 8;
    break;
   case 6:
    var $18;
    var $19;
    var $20 = $13 - 1 | 0;
    var $21 = ($20 | 0) > 1;
    if ($21) {
      label = 7;
      break;
    } else {
      label = 40;
      break;
    }
   case 7:
    var $_pre4 = HEAP32[5427632 >> 2];
    var $_pre5 = HEAP16[5242964 >> 1];
    var $row_1301 = 1;
    label = 19;
    break;
   case 8:
    var $23;
    var $24;
    var $row_0313;
    var $25 = $row_0313 << 1;
    var $26 = $25 & 14;
    var $27 = $26 << 1;
    var $28 = $27 | 2;
    var $29 = $_pre >>> ($28 >>> 0);
    var $30 = $29 & 1;
    var $31 = $30 + 3 | 0;
    var $32 = $30 | $26;
    var $33 = $32 << 1;
    var $34 = $33 ^ 2;
    var $35 = $_pre >>> ($34 >>> 0);
    var $36 = $35 & 3;
    var $37 = $_pre1 & 65535;
    var $38 = $37 - 3 | 0;
    var $39 = ($31 | 0) < ($38 | 0);
    if ($39) {
      label = 9;
      break;
    } else {
      var $133 = $24;
      var $132 = $23;
      label = 16;
      break;
    }
   case 9:
    var $_pre15 = HEAP32[5264108 >> 2];
    var $col_0308 = $31;
    var $41 = $24;
    var $40 = $23;
    label = 10;
    break;
   case 10:
    var $40;
    var $41;
    var $col_0308;
    var $42 = $37 * $row_0313 & -1;
    var $_sum256 = $42 + $col_0308 | 0;
    var $43 = $_pre15 + ($_sum256 << 3) + ($36 << 1) | 0;
    var $44 = HEAP16[$43 >> 1];
    var $45 = $44 & 65535;
    var $i_0304 = 0;
    var $46 = 1;
    label = 11;
    break;
   case 11:
    var $46;
    var $i_0304;
    var $_sum259 = $_sum256 - $46 | 0;
    var $47 = $_pre15 + ($_sum259 << 3) + 2 | 0;
    var $48 = HEAP16[$47 >> 1];
    var $49 = $48 & 65535;
    var $50 = $45 + $49 | 0;
    var $_sum260 = $46 + $_sum256 | 0;
    var $51 = $_pre15 + ($_sum260 << 3) + 2 | 0;
    var $52 = HEAP16[$51 >> 1];
    var $53 = $52 & 65535;
    var $54 = $50 + $53 | 0;
    var $55 = $54 << 1;
    var $56 = $46 * -2 & -1;
    var $_sum261 = $56 + $_sum256 | 0;
    var $57 = $_pre15 + ($_sum261 << 3) + ($36 << 1) | 0;
    var $58 = HEAP16[$57 >> 1];
    var $59 = $58 & 65535;
    var $60 = $55 - $59 | 0;
    var $61 = $46 << 1;
    var $_sum262 = $61 + $_sum256 | 0;
    var $62 = $_pre15 + ($_sum262 << 3) + ($36 << 1) | 0;
    var $63 = HEAP16[$62 >> 1];
    var $64 = $63 & 65535;
    var $65 = $60 - $64 | 0;
    var $66 = $guess + ($i_0304 << 2) | 0;
    HEAP32[$66 >> 2] = $65;
    var $67 = $59 - $45 | 0;
    var $68 = $67 >> 31;
    var $69 = $68 ^ $67;
    var $_neg269 = $67 >>> 31;
    var $70 = $64 - $45 | 0;
    var $71 = $70 >> 31;
    var $72 = $71 ^ $70;
    var $_neg270 = $70 >>> 31;
    var $73 = $49 - $53 | 0;
    var $74 = $73 >> 31;
    var $75 = $74 ^ $73;
    var $_neg271 = $73 >>> 31;
    var $76 = $69 + $_neg269 | 0;
    var $77 = $76 + $_neg270 | 0;
    var $78 = $77 + $72 | 0;
    var $79 = $78 + $_neg271 | 0;
    var $80 = $79 + $75 | 0;
    var $81 = $80 * 3 & -1;
    var $82 = $46 * 3 & -1;
    var $_sum263 = $82 + $_sum256 | 0;
    var $83 = $_pre15 + ($_sum263 << 3) + 2 | 0;
    var $84 = HEAP16[$83 >> 1];
    var $85 = $84 & 65535;
    var $86 = $85 - $53 | 0;
    var $87 = $86 >> 31;
    var $88 = $87 ^ $86;
    var $_neg272 = $86 >>> 31;
    var $89 = $46 * -3 & -1;
    var $_sum264 = $89 + $_sum256 | 0;
    var $90 = $_pre15 + ($_sum264 << 3) + 2 | 0;
    var $91 = HEAP16[$90 >> 1];
    var $92 = $91 & 65535;
    var $93 = $92 - $49 | 0;
    var $94 = $93 >> 31;
    var $95 = $94 ^ $93;
    var $_neg273 = $93 >>> 31;
    var $96 = $88 + $_neg272 | 0;
    var $97 = $96 + $_neg273 | 0;
    var $98 = $97 + $95 | 0;
    var $99 = $98 << 1;
    var $100 = $99 + $81 | 0;
    var $101 = $diff + ($i_0304 << 2) | 0;
    HEAP32[$101 >> 2] = $100;
    var $102 = $i_0304 + 1 | 0;
    var $103 = $dir + ($102 << 2) | 0;
    var $104 = HEAP32[$103 >> 2];
    var $105 = ($104 | 0) > 0;
    if ($105) {
      var $i_0304 = $102;
      var $46 = $104;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre2 = HEAP32[$16 >> 2];
    var $_pre3 = HEAP32[$17 >> 2];
    var $106 = ($_pre2 | 0) > ($_pre3 | 0);
    var $107 = $106 & 1;
    var $108 = $dir + ($107 << 2) | 0;
    var $109 = HEAP32[$108 >> 2];
    var $_sum257 = $109 + $_sum256 | 0;
    var $110 = $_pre15 + ($_sum257 << 3) + 2 | 0;
    var $111 = HEAP16[$110 >> 1];
    var $112 = $111 & 65535;
    var $_sum258 = $_sum256 - $109 | 0;
    var $113 = $_pre15 + ($_sum258 << 3) + 2 | 0;
    var $114 = HEAP16[$113 >> 1];
    var $115 = $114 & 65535;
    var $116 = ($111 & 65535) < ($114 & 65535);
    var $117 = $guess + ($107 << 2) | 0;
    var $118 = HEAP32[$117 >> 2];
    var $119 = $118 >> 2;
    if ($116) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $121 = ($119 | 0) < ($115 | 0);
    var $_ = $121 ? $119 : $115;
    var $122 = ($112 | 0) > ($_ | 0);
    var $__ = $122 ? $112 : $_;
    var $127 = $__;
    label = 15;
    break;
   case 14:
    var $124 = ($119 | 0) < ($112 | 0);
    var $_266 = $124 ? $119 : $112;
    var $125 = ($115 | 0) > ($_266 | 0);
    var $__266 = $125 ? $115 : $_266;
    var $127 = $__266;
    label = 15;
    break;
   case 15:
    var $127;
    var $128 = $127 & 65535;
    var $129 = $_pre15 + ($_sum256 << 3) + 2 | 0;
    HEAP16[$129 >> 1] = $128;
    var $130 = $col_0308 + 2 | 0;
    var $131 = ($130 | 0) < ($38 | 0);
    if ($131) {
      var $col_0308 = $130;
      var $41 = $_pre2;
      var $40 = $_pre3;
      label = 10;
      break;
    } else {
      var $133 = $_pre2;
      var $132 = $_pre3;
      label = 16;
      break;
    }
   case 16:
    var $132;
    var $133;
    var $134 = $row_0313 + 1 | 0;
    var $135 = ($134 | 0) < ($14 | 0);
    if ($135) {
      var $row_0313 = $134;
      var $24 = $133;
      var $23 = $132;
      label = 8;
      break;
    } else {
      var $19 = $133;
      var $18 = $132;
      label = 6;
      break;
    }
   case 17:
    if ($21) {
      label = 18;
      break;
    } else {
      label = 40;
      break;
    }
   case 18:
    var $136 = $4 + 1 | 0;
    var $137 = $diff | 0;
    var $138 = $diff + 4 | 0;
    var $139 = $guess | 0;
    var $140 = $guess + 4 | 0;
    var $_pre7 = HEAP32[5427632 >> 2];
    var $_pre8 = HEAP16[5242964 >> 1];
    var $row_2286 = 1;
    var $194 = $19;
    var $193 = $18;
    label = 27;
    break;
   case 19:
    var $row_1301;
    var $142 = $row_1301 << 1;
    var $143 = $142 & 14;
    var $144 = $143 << 1;
    var $145 = $_pre4 >>> ($144 >>> 0);
    var $146 = $145 & 1;
    var $147 = $146 + 1 | 0;
    var $148 = $_pre5 & 65535;
    var $149 = $148 - 1 | 0;
    var $150 = ($147 | 0) < ($149 | 0);
    if ($150) {
      label = 20;
      break;
    } else {
      label = 26;
      break;
    }
   case 20:
    var $151 = $146 | $143;
    var $152 = $151 << 1;
    var $153 = $_pre4 >>> ($152 >>> 0);
    var $154 = $153 & 3;
    var $_pre6 = HEAP32[5264108 >> 2];
    var $col_1295 = $147;
    var $c_0296 = $154;
    label = 21;
    break;
   case 21:
    var $c_0296;
    var $col_1295;
    var $155 = $148 * $row_1301 & -1;
    var $_sum250 = $155 + $col_1295 | 0;
    var $156 = $_pre6 + ($_sum250 << 3) + 2 | 0;
    var $c_1290 = $c_0296;
    var $i_1291 = 0;
    var $158 = 1;
    label = 22;
    break;
   case 22:
    var $158;
    var $i_1291;
    var $c_1290;
    var $_sum251 = $_sum250 - $158 | 0;
    var $159 = $_pre6 + ($_sum251 << 3) + ($c_1290 << 1) | 0;
    var $160 = HEAP16[$159 >> 1];
    var $161 = $160 & 65535;
    var $_sum252 = $158 + $_sum250 | 0;
    var $162 = $_pre6 + ($_sum252 << 3) + ($c_1290 << 1) | 0;
    var $163 = HEAP16[$162 >> 1];
    var $164 = $163 & 65535;
    var $165 = $164 + $161 | 0;
    var $166 = HEAP16[$156 >> 1];
    var $167 = $166 & 65535;
    var $168 = $167 << 1;
    var $169 = $165 + $168 | 0;
    var $170 = $_pre6 + ($_sum251 << 3) + 2 | 0;
    var $171 = HEAP16[$170 >> 1];
    var $172 = $171 & 65535;
    var $173 = $169 - $172 | 0;
    var $174 = $_pre6 + ($_sum252 << 3) + 2 | 0;
    var $175 = HEAP16[$174 >> 1];
    var $176 = $175 & 65535;
    var $177 = $173 - $176 | 0;
    var $178 = $177 >> 1;
    var $phitmp253 = ($178 | 0) < 0;
    if ($phitmp253) {
      var $181 = 0;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $180 = ($178 | 0) < 65535;
    var $phitmp254 = $178 & 65535;
    var $phitmp254_ = $180 ? $phitmp254 : -1;
    var $181 = $phitmp254_;
    label = 24;
    break;
   case 24:
    var $181;
    var $182 = $_pre6 + ($_sum250 << 3) + ($c_1290 << 1) | 0;
    HEAP16[$182 >> 1] = $181;
    var $183 = 2 - $c_1290 | 0;
    var $184 = $i_1291 + 1 | 0;
    var $185 = $dir + ($184 << 2) | 0;
    var $186 = HEAP32[$185 >> 2];
    var $187 = ($186 | 0) > 0;
    if ($187) {
      var $c_1290 = $183;
      var $i_1291 = $184;
      var $158 = $186;
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $188 = $col_1295 + 2 | 0;
    var $189 = ($188 | 0) < ($149 | 0);
    if ($189) {
      var $col_1295 = $188;
      var $c_0296 = $183;
      label = 21;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $190 = $row_1301 + 1 | 0;
    var $191 = ($190 | 0) < ($20 | 0);
    if ($191) {
      var $row_1301 = $190;
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 27:
    var $193;
    var $194;
    var $row_2286;
    var $195 = $row_2286 << 1;
    var $196 = $195 & 14;
    var $197 = $196 << 1;
    var $198 = $197 | 2;
    var $199 = $_pre7 >>> ($198 >>> 0);
    var $200 = $199 & 1;
    var $201 = $200 + 1 | 0;
    var $202 = $200 | $196;
    var $203 = $202 << 1;
    var $204 = $203 ^ 2;
    var $205 = $_pre7 >>> ($204 >>> 0);
    var $206 = $205 & 3;
    var $207 = 2 - $206 | 0;
    var $208 = $_pre8 & 65535;
    var $209 = $208 - 1 | 0;
    var $210 = ($201 | 0) < ($209 | 0);
    if ($210) {
      label = 28;
      break;
    } else {
      var $284 = $194;
      var $283 = $193;
      label = 39;
      break;
    }
   case 28:
    var $_pre16 = HEAP32[5264108 >> 2];
    var $col_2282 = $201;
    var $212 = $194;
    var $211 = $193;
    label = 29;
    break;
   case 29:
    var $211;
    var $212;
    var $col_2282;
    var $213 = $208 * $row_2286 & -1;
    var $_sum = $213 + $col_2282 | 0;
    var $214 = $_pre16 + ($_sum << 3) + 2 | 0;
    var $215 = HEAP16[$214 >> 1];
    var $216 = $215 & 65535;
    var $217 = $216 << 1;
    var $_pre9 = HEAP32[$2 >> 2];
    var $i_2281 = 0;
    var $220 = 1;
    var $219 = $136;
    var $218 = $_pre9;
    label = 30;
    break;
   case 30:
    var $218;
    var $219;
    var $220;
    var $i_2281;
    var $_sum248 = $_sum - $219 | 0;
    var $221 = $_pre16 + ($_sum248 << 3) + ($207 << 1) | 0;
    var $222 = HEAP16[$221 >> 1];
    var $223 = $222 & 65535;
    var $_sum249 = $219 + $_sum | 0;
    var $224 = $_pre16 + ($_sum249 << 3) + ($207 << 1) | 0;
    var $225 = HEAP16[$224 >> 1];
    var $226 = $225 & 65535;
    var $227 = $223 - $226 | 0;
    var $228 = $227 >> 31;
    var $229 = $228 ^ $227;
    var $_neg276 = $227 >>> 31;
    var $230 = $_pre16 + ($_sum248 << 3) + 2 | 0;
    var $231 = HEAP16[$230 >> 1];
    var $232 = $231 & 65535;
    var $233 = $232 - $216 | 0;
    var $234 = $233 >> 31;
    var $235 = $234 ^ $233;
    var $_neg277 = $233 >>> 31;
    var $236 = $_pre16 + ($_sum249 << 3) + 2 | 0;
    var $237 = HEAP16[$236 >> 1];
    var $238 = $237 & 65535;
    var $239 = $238 - $216 | 0;
    var $240 = $239 >> 31;
    var $241 = $240 ^ $239;
    var $_neg278 = $239 >>> 31;
    var $242 = $229 + $_neg276 | 0;
    var $243 = $242 + $_neg277 | 0;
    var $244 = $243 + $235 | 0;
    var $245 = $244 + $_neg278 | 0;
    var $246 = $245 + $241 | 0;
    var $247 = $diff + ($i_2281 << 2) | 0;
    HEAP32[$247 >> 2] = $246;
    var $248 = $226 + $223 | 0;
    var $249 = $248 + $217 | 0;
    var $250 = $249 - $232 | 0;
    var $251 = $250 - $238 | 0;
    var $252 = $guess + ($i_2281 << 2) | 0;
    HEAP32[$252 >> 2] = $251;
    var $253 = $220 + 1 | 0;
    var $254 = $dir + ($253 << 2) | 0;
    var $255 = HEAP32[$254 >> 2];
    var $256 = $255 + $218 | 0;
    var $257 = ($256 | 0) > 0;
    if ($257) {
      var $i_2281 = $220;
      var $220 = $253;
      var $219 = $256;
      var $218 = $255;
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $_pre10 = HEAP32[$137 >> 2];
    var $_pre11 = HEAP32[$138 >> 2];
    var $258 = ($_pre10 | 0) == ($_pre11 | 0);
    if ($258) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $260 = ($_pre10 | 0) > ($_pre11 | 0);
    var $261 = $260 & 1;
    var $262 = $guess + ($261 << 2) | 0;
    var $263 = HEAP32[$262 >> 2];
    var $264 = $263 >> 1;
    var $phitmp246 = ($264 | 0) < 0;
    if ($phitmp246) {
      var $268 = 0;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $266 = ($264 | 0) < 65535;
    var $phitmp247 = $264 & 65535;
    var $phitmp247_ = $266 ? $phitmp247 : -1;
    var $268 = $phitmp247_;
    label = 34;
    break;
   case 34:
    var $268;
    var $269 = $_pre16 + ($_sum << 3) + ($207 << 1) | 0;
    HEAP16[$269 >> 1] = $268;
    label = 38;
    break;
   case 35:
    var $271 = HEAP32[$139 >> 2];
    var $272 = HEAP32[$140 >> 2];
    var $273 = $272 + $271 | 0;
    var $274 = $273 >> 2;
    var $phitmp = ($274 | 0) < 0;
    if ($phitmp) {
      var $278 = 0;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $276 = ($274 | 0) < 65535;
    var $phitmp245 = $274 & 65535;
    var $phitmp245_ = $276 ? $phitmp245 : -1;
    var $278 = $phitmp245_;
    label = 37;
    break;
   case 37:
    var $278;
    var $279 = $_pre16 + ($_sum << 3) + ($207 << 1) | 0;
    HEAP16[$279 >> 1] = $278;
    label = 38;
    break;
   case 38:
    var $281 = $col_2282 + 2 | 0;
    var $282 = ($281 | 0) < ($209 | 0);
    if ($282) {
      var $col_2282 = $281;
      var $212 = $_pre10;
      var $211 = $_pre11;
      label = 29;
      break;
    } else {
      var $284 = $_pre10;
      var $283 = $_pre11;
      label = 39;
      break;
    }
   case 39:
    var $283;
    var $284;
    var $285 = $row_2286 + 1 | 0;
    var $286 = ($285 | 0) < ($20 | 0);
    if ($286) {
      var $row_2286 = $285;
      var $194 = $284;
      var $193 = $283;
      label = 27;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    STACKTOP = __stackBase__;
    return;
  }
}
_ppg_interpolate["X"] = 1;
function _ahd_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 262256 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ldiff = __stackBase__;
    var $abdiff = __stackBase__ + 32;
    var $cbrt = __stackBase__ + 64;
    var $xyz_cam = __stackBase__ + 262208;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      var $i_0441 = 0;
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5577012, 21, 1, $2);
    var $i_0441 = 0;
    label = 4;
    break;
   case 4:
    var $i_0441;
    var $4 = $i_0441 | 0;
    var $5 = $4 / 65535;
    var $6 = $5;
    var $7 = $6;
    var $8 = $7 > .008856;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $10 = Math.pow($7, .3333333333333333);
    var $15 = $10;
    label = 7;
    break;
   case 6:
    var $12 = $7 * 7.787;
    var $13 = $12 + .13793103448275862;
    var $15 = $13;
    label = 7;
    break;
   case 7:
    var $15;
    var $16 = $15;
    var $17 = $cbrt + ($i_0441 << 2) | 0;
    HEAPF32[$17 >> 2] = $16;
    var $18 = $i_0441 + 1 | 0;
    var $exitcond461 = ($18 | 0) == 65536;
    if ($exitcond461) {
      label = 8;
      break;
    } else {
      var $i_0441 = $18;
      label = 4;
      break;
    }
   case 8:
    var $19 = HEAP32[5560840 >> 2];
    var $20 = ($19 | 0) > 0;
    if ($20) {
      var $j_0434 = 0;
      label = 9;
      break;
    } else {
      label = 95;
      break;
    }
   case 9:
    var $j_0434;
    var $21 = $xyz_cam + ($j_0434 << 2) | 0;
    var $22 = 5244964 + ($j_0434 << 2) | 0;
    var $23 = HEAPF32[$22 >> 2];
    var $24 = $23;
    var $25 = $24 * .412453;
    var $26 = $25 / .9504560232162476;
    var $27 = $26;
    var $28 = $27;
    var $29 = 5244980 + ($j_0434 << 2) | 0;
    var $30 = HEAPF32[$29 >> 2];
    var $31 = $30;
    var $32 = $31 * .35758;
    var $33 = $32 / .9504560232162476;
    var $34 = $28;
    var $35 = $33 + $34;
    var $36 = $35;
    var $37 = 5244996 + ($j_0434 << 2) | 0;
    var $38 = HEAPF32[$37 >> 2];
    var $39 = $38;
    var $40 = $39 * .180423;
    var $41 = $40 / .9504560232162476;
    var $42 = $36;
    var $43 = $41 + $42;
    var $44 = $43;
    HEAPF32[$21 >> 2] = $44;
    var $45 = $j_0434 + 1 | 0;
    var $exitcond458 = ($45 | 0) == ($19 | 0);
    if ($exitcond458) {
      var $j_0434_1 = 0;
      label = 93;
      break;
    } else {
      var $j_0434 = $45;
      label = 9;
      break;
    }
   case 10:
    var $46 = $687 + 393216 | 0;
    var $47 = $46;
    var $48 = $ldiff | 0;
    var $49 = $ldiff + 4 | 0;
    var $50 = $ldiff + 24 | 0;
    var $51 = $ldiff + 28 | 0;
    var $52 = $abdiff | 0;
    var $53 = $abdiff + 4 | 0;
    var $54 = $abdiff + 24 | 0;
    var $55 = $abdiff + 28 | 0;
    var $56 = $ldiff + 8 | 0;
    var $57 = $ldiff + 12 | 0;
    var $58 = $ldiff + 16 | 0;
    var $59 = $ldiff + 20 | 0;
    var $60 = $abdiff + 20 | 0;
    var $61 = $abdiff + 16 | 0;
    var $62 = $abdiff + 12 | 0;
    var $63 = $abdiff + 8 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $top_0428 = 2;
    label = 11;
    break;
   case 11:
    var $top_0428;
    var $64 = $_pre & 65535;
    var $65 = $64 - 5 | 0;
    var $66 = ($65 | 0) > 2;
    if ($66) {
      label = 12;
      break;
    } else {
      label = 69;
      break;
    }
   case 12:
    var $67 = $top_0428 + 256 | 0;
    var $68 = $top_0428 | 1;
    var $69 = $top_0428 + 255 | 0;
    var $70 = ($68 | 0) < ($69 | 0);
    var $71 = $top_0428 + 2 | 0;
    var $72 = $top_0428 + 254 | 0;
    var $73 = $top_0428 + 3 | 0;
    var $74 = $top_0428 + 253 | 0;
    var $left_0425 = 2;
    label = 13;
    break;
   case 13:
    var $left_0425;
    var $75 = $left_0425 + 256 | 0;
    var $row_0384 = $top_0428;
    label = 14;
    break;
   case 14:
    var $row_0384;
    var $77 = $693 & 65535;
    var $78 = $77 - 2 | 0;
    var $79 = ($row_0384 | 0) < ($78 | 0);
    if ($79) {
      label = 15;
      break;
    } else {
      label = 26;
      break;
    }
   case 15:
    var $81 = HEAP32[5427632 >> 2];
    var $82 = $row_0384 << 1;
    var $83 = $82 & 14;
    var $84 = $83 << 1;
    var $85 = $81 >>> ($84 >>> 0);
    var $86 = $85 & 1;
    var $87 = $86 | $left_0425;
    var $88 = $86 | $83;
    var $89 = $88 << 1;
    var $90 = $81 >>> ($89 >>> 0);
    var $91 = $90 & 3;
    var $92 = ($87 | 0) < ($75 | 0);
    if ($92) {
      label = 16;
      break;
    } else {
      label = 25;
      break;
    }
   case 16:
    var $93 = $row_0384 - $top_0428 | 0;
    var $col_0383 = $87;
    label = 17;
    break;
   case 17:
    var $col_0383;
    var $95 = $64 - 2 | 0;
    var $96 = ($col_0383 | 0) < ($95 | 0);
    if ($96) {
      label = 18;
      break;
    } else {
      label = 25;
      break;
    }
   case 18:
    var $98 = HEAP32[5264108 >> 2];
    var $99 = $64 * $row_0384 & -1;
    var $_sum342 = $99 + $col_0383 | 0;
    var $_sum343 = $_sum342 - 1 | 0;
    var $100 = $98 + ($_sum343 << 3) + 2 | 0;
    var $101 = HEAP16[$100 >> 1];
    var $102 = $101 & 65535;
    var $103 = $98 + ($_sum342 << 3) + ($91 << 1) | 0;
    var $104 = HEAP16[$103 >> 1];
    var $105 = $104 & 65535;
    var $106 = $105 + $102 | 0;
    var $_sum344 = $_sum342 + 1 | 0;
    var $107 = $98 + ($_sum344 << 3) + 2 | 0;
    var $108 = HEAP16[$107 >> 1];
    var $109 = $108 & 65535;
    var $110 = $106 + $109 | 0;
    var $111 = $110 << 1;
    var $_sum345 = $_sum342 - 2 | 0;
    var $112 = $98 + ($_sum345 << 3) + ($91 << 1) | 0;
    var $113 = HEAP16[$112 >> 1];
    var $114 = $113 & 65535;
    var $115 = $111 - $114 | 0;
    var $_sum346 = $_sum342 + 2 | 0;
    var $116 = $98 + ($_sum346 << 3) + ($91 << 1) | 0;
    var $117 = HEAP16[$116 >> 1];
    var $118 = $117 & 65535;
    var $119 = $115 - $118 | 0;
    var $120 = $119 >> 2;
    var $121 = ($101 & 65535) < ($108 & 65535);
    if ($121) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $123 = ($120 | 0) < ($109 | 0);
    var $_ = $123 ? $120 : $109;
    var $124 = ($102 | 0) > ($_ | 0);
    var $__ = $124 ? $102 : $_;
    var $129 = $__;
    label = 21;
    break;
   case 20:
    var $126 = ($120 | 0) < ($102 | 0);
    var $_356 = $126 ? $120 : $102;
    var $127 = ($109 | 0) > ($_356 | 0);
    var $__356 = $127 ? $109 : $_356;
    var $129 = $__356;
    label = 21;
    break;
   case 21:
    var $129;
    var $130 = $129 & 65535;
    var $131 = $col_0383 - $left_0425 | 0;
    var $132 = $688 + $93 * 1536 + $131 * 6 + 2 | 0;
    HEAP16[$132 >> 1] = $130;
    var $_sum347 = $_sum342 - $64 | 0;
    var $133 = $98 + ($_sum347 << 3) + 2 | 0;
    var $134 = HEAP16[$133 >> 1];
    var $135 = $134 & 65535;
    var $136 = HEAP16[$103 >> 1];
    var $137 = $136 & 65535;
    var $138 = $137 + $135 | 0;
    var $_sum348 = $64 + $_sum342 | 0;
    var $139 = $98 + ($_sum348 << 3) + 2 | 0;
    var $140 = HEAP16[$139 >> 1];
    var $141 = $140 & 65535;
    var $142 = $138 + $141 | 0;
    var $143 = $142 << 1;
    var $144 = $64 * -2 & -1;
    var $_sum349 = $144 + $_sum342 | 0;
    var $145 = $98 + ($_sum349 << 3) + ($91 << 1) | 0;
    var $146 = HEAP16[$145 >> 1];
    var $147 = $146 & 65535;
    var $148 = $143 - $147 | 0;
    var $149 = $64 << 1;
    var $_sum350 = $149 + $_sum342 | 0;
    var $150 = $98 + ($_sum350 << 3) + ($91 << 1) | 0;
    var $151 = HEAP16[$150 >> 1];
    var $152 = $151 & 65535;
    var $153 = $148 - $152 | 0;
    var $154 = $153 >> 2;
    var $155 = ($134 & 65535) < ($140 & 65535);
    if ($155) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $157 = ($154 | 0) < ($141 | 0);
    var $_358 = $157 ? $154 : $141;
    var $158 = ($135 | 0) > ($_358 | 0);
    var $__358 = $158 ? $135 : $_358;
    var $163 = $__358;
    label = 24;
    break;
   case 23:
    var $160 = ($154 | 0) < ($135 | 0);
    var $_360 = $160 ? $154 : $135;
    var $161 = ($141 | 0) > ($_360 | 0);
    var $__360 = $161 ? $141 : $_360;
    var $163 = $__360;
    label = 24;
    break;
   case 24:
    var $163;
    var $164 = $163 & 65535;
    var $165 = $47 + $93 * 1536 + $131 * 6 + 2 | 0;
    HEAP16[$165 >> 1] = $164;
    var $166 = $col_0383 + 2 | 0;
    var $167 = ($166 | 0) < ($75 | 0);
    if ($167) {
      var $col_0383 = $166;
      label = 17;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $168 = $row_0384 + 1 | 0;
    var $169 = ($168 | 0) < ($67 | 0);
    if ($169) {
      var $row_0384 = $168;
      label = 14;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $170 = $left_0425 | 1;
    var $171 = $left_0425 + 255 | 0;
    var $172 = ($170 | 0) < ($171 | 0);
    var $d_0400 = 0;
    label = 27;
    break;
   case 27:
    var $d_0400;
    if ($70) {
      var $row_1396 = $68;
      label = 28;
      break;
    } else {
      label = 45;
      break;
    }
   case 28:
    var $row_1396;
    var $174 = $694 - 3 | 0;
    var $175 = ($row_1396 | 0) < ($174 | 0);
    if ($175) {
      label = 29;
      break;
    } else {
      label = 45;
      break;
    }
   case 29:
    if ($172) {
      label = 30;
      break;
    } else {
      label = 44;
      break;
    }
   case 30:
    var $177 = $row_1396 - $top_0428 | 0;
    var $178 = $row_1396 << 1;
    var $179 = $178 & 14;
    var $180 = $178 + 2 | 0;
    var $181 = $180 & 14;
    var $col_1393 = $170;
    label = 31;
    break;
   case 31:
    var $col_1393;
    var $183 = $64 - 3 | 0;
    var $184 = ($col_1393 | 0) < ($183 | 0);
    if ($184) {
      label = 32;
      break;
    } else {
      label = 44;
      break;
    }
   case 32:
    var $186 = HEAP32[5264108 >> 2];
    var $187 = $64 * $row_1396 & -1;
    var $_sum321 = $187 + $col_1393 | 0;
    var $188 = $col_1393 - $left_0425 | 0;
    var $189 = HEAP32[5427632 >> 2];
    var $190 = $col_1393 & 1;
    var $191 = $190 | $179;
    var $192 = $191 << 1;
    var $193 = $189 >>> ($192 >>> 0);
    var $194 = $193 & 3;
    var $195 = 2 - $194 | 0;
    var $196 = ($195 | 0) == 1;
    if ($196) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $198 = $190 | $181;
    var $199 = $198 << 1;
    var $200 = $189 >>> ($199 >>> 0);
    var $201 = $200 & 3;
    var $202 = $186 + ($_sum321 << 3) + 2 | 0;
    var $203 = HEAP16[$202 >> 1];
    var $204 = $203 & 65535;
    var $205 = 2 - $201 | 0;
    var $_sum333 = $_sum321 - 1 | 0;
    var $206 = $186 + ($_sum333 << 3) + ($205 << 1) | 0;
    var $207 = HEAP16[$206 >> 1];
    var $208 = $207 & 65535;
    var $_sum334 = $_sum321 + 1 | 0;
    var $209 = $186 + ($_sum334 << 3) + ($205 << 1) | 0;
    var $210 = HEAP16[$209 >> 1];
    var $211 = $210 & 65535;
    var $212 = $211 + $208 | 0;
    var $_sum335 = $188 - 1 | 0;
    var $213 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum335 * 6 + 2 | 0;
    var $214 = HEAP16[$213 >> 1];
    var $215 = $214 & 65535;
    var $216 = $212 - $215 | 0;
    var $_sum336 = $188 + 1 | 0;
    var $217 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum336 * 6 + 2 | 0;
    var $218 = HEAP16[$217 >> 1];
    var $219 = $218 & 65535;
    var $220 = $216 - $219 | 0;
    var $221 = $220 >> 1;
    var $222 = $221 + $204 | 0;
    var $223 = ($222 | 0) < 65535;
    var $224 = $223 ? $222 : 65535;
    var $225 = ($224 | 0) < 0;
    var $phitmp337 = $224 & 65535;
    var $226 = $225 ? 0 : $phitmp337;
    var $227 = $688 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + ($205 << 1) | 0;
    HEAP16[$227 >> 1] = $226;
    var $228 = HEAP16[$202 >> 1];
    var $229 = $228 & 65535;
    var $_sum338 = $_sum321 - $64 | 0;
    var $230 = $186 + ($_sum338 << 3) + ($201 << 1) | 0;
    var $231 = HEAP16[$230 >> 1];
    var $232 = $231 & 65535;
    var $_sum339 = $64 + $_sum321 | 0;
    var $233 = $186 + ($_sum339 << 3) + ($201 << 1) | 0;
    var $234 = HEAP16[$233 >> 1];
    var $235 = $234 & 65535;
    var $236 = $235 + $232 | 0;
    var $_sum340 = $188 - 256 | 0;
    var $237 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum340 * 6 + 2 | 0;
    var $238 = HEAP16[$237 >> 1];
    var $239 = $238 & 65535;
    var $240 = $236 - $239 | 0;
    var $_sum341 = $188 + 256 | 0;
    var $241 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum341 * 6 + 2 | 0;
    var $242 = HEAP16[$241 >> 1];
    var $243 = $242 & 65535;
    var $244 = $240 - $243 | 0;
    var $245 = $244 >> 1;
    var $246 = $245 + $229 | 0;
    var $val_0 = $246;
    var $c_0 = $201;
    label = 35;
    break;
   case 34:
    var $248 = $688 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + 2 | 0;
    var $249 = HEAP16[$248 >> 1];
    var $250 = $249 & 65535;
    var $251 = $64 ^ -1;
    var $_sum322 = $_sum321 + $251 | 0;
    var $252 = $186 + ($_sum322 << 3) + ($195 << 1) | 0;
    var $253 = HEAP16[$252 >> 1];
    var $254 = $253 & 65535;
    var $255 = 1 - $64 | 0;
    var $_sum323 = $255 + $_sum321 | 0;
    var $256 = $186 + ($_sum323 << 3) + ($195 << 1) | 0;
    var $257 = HEAP16[$256 >> 1];
    var $258 = $257 & 65535;
    var $259 = $64 - 1 | 0;
    var $_sum324 = $259 + $_sum321 | 0;
    var $260 = $186 + ($_sum324 << 3) + ($195 << 1) | 0;
    var $261 = HEAP16[$260 >> 1];
    var $262 = $261 & 65535;
    var $263 = $64 + 1 | 0;
    var $_sum325 = $263 + $_sum321 | 0;
    var $264 = $186 + ($_sum325 << 3) + ($195 << 1) | 0;
    var $265 = HEAP16[$264 >> 1];
    var $266 = $265 & 65535;
    var $_sum326 = $188 - 257 | 0;
    var $267 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum326 * 6 + 2 | 0;
    var $268 = HEAP16[$267 >> 1];
    var $269 = $268 & 65535;
    var $_sum327 = $188 - 255 | 0;
    var $270 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum327 * 6 + 2 | 0;
    var $271 = HEAP16[$270 >> 1];
    var $272 = $271 & 65535;
    var $_sum328 = $188 + 255 | 0;
    var $273 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum328 * 6 + 2 | 0;
    var $274 = HEAP16[$273 >> 1];
    var $275 = $274 & 65535;
    var $_sum329 = $188 + 257 | 0;
    var $276 = $688 + $d_0400 * 393216 + $177 * 1536 + $_sum329 * 6 + 2 | 0;
    var $277 = HEAP16[$276 >> 1];
    var $278 = $277 & 65535;
    var $279 = $254 + 1 | 0;
    var $280 = $279 + $258 | 0;
    var $281 = $280 + $262 | 0;
    var $282 = $281 + $266 | 0;
    var $283 = $282 - $269 | 0;
    var $284 = $283 - $272 | 0;
    var $285 = $284 - $275 | 0;
    var $286 = $285 - $278 | 0;
    var $287 = $286 >> 2;
    var $288 = $287 + $250 | 0;
    var $val_0 = $288;
    var $c_0 = $195;
    label = 35;
    break;
   case 35:
    var $c_0;
    var $val_0;
    var $290 = ($val_0 | 0) < 65535;
    var $291 = $290 ? $val_0 : 65535;
    var $292 = ($291 | 0) < 0;
    var $phitmp = $291 & 65535;
    var $293 = $292 ? 0 : $phitmp;
    var $294 = $688 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + ($c_0 << 1) | 0;
    HEAP16[$294 >> 1] = $293;
    var $295 = $186 + ($_sum321 << 3) + ($194 << 1) | 0;
    var $296 = HEAP16[$295 >> 1];
    var $297 = $688 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + ($194 << 1) | 0;
    HEAP16[$297 >> 1] = $296;
    var $298 = HEAP32[5560840 >> 2];
    var $299 = ($298 | 0) > 0;
    if ($299) {
      var $c_1386 = 0;
      var $xyz_sroa_2_0387 = .5;
      var $xyz_sroa_1_0388 = .5;
      var $xyz_sroa_0_0389 = .5;
      label = 36;
      break;
    } else {
      var $xyz_sroa_0_0_lcssa463 = 0;
      var $xyz_sroa_1_0_lcssa464 = 0;
      var $xyz_sroa_2_0_lcssa466 = 0;
      label = 38;
      break;
    }
   case 36:
    var $xyz_sroa_0_0389;
    var $xyz_sroa_1_0388;
    var $xyz_sroa_2_0387;
    var $c_1386;
    var $300 = $xyz_cam + ($c_1386 << 2) | 0;
    var $301 = HEAPF32[$300 >> 2];
    var $302 = $688 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + ($c_1386 << 1) | 0;
    var $303 = HEAP16[$302 >> 1];
    var $304 = $303 & 65535;
    var $305 = $304 | 0;
    var $306 = $301 * $305;
    var $307 = $xyz_sroa_0_0389 + $306;
    var $308 = $xyz_cam + 16 + ($c_1386 << 2) | 0;
    var $309 = HEAPF32[$308 >> 2];
    var $310 = $309 * $305;
    var $311 = $xyz_sroa_1_0388 + $310;
    var $312 = $xyz_cam + 32 + ($c_1386 << 2) | 0;
    var $313 = HEAPF32[$312 >> 2];
    var $314 = $313 * $305;
    var $315 = $xyz_sroa_2_0387 + $314;
    var $316 = $c_1386 + 1 | 0;
    var $317 = ($316 | 0) < ($298 | 0);
    if ($317) {
      var $c_1386 = $316;
      var $xyz_sroa_2_0387 = $315;
      var $xyz_sroa_1_0388 = $311;
      var $xyz_sroa_0_0389 = $307;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $phitmp442 = $307 & -1;
    var $phitmp443 = $311 & -1;
    var $phitmp444 = $315 & -1;
    var $phitmp330 = ($phitmp442 | 0) < 0;
    if ($phitmp330) {
      var $321 = 0;
      var $xyz_sroa_1_0_lcssa465 = $phitmp443;
      var $xyz_sroa_2_0_lcssa467 = $phitmp444;
      label = 39;
      break;
    } else {
      var $xyz_sroa_0_0_lcssa463 = $phitmp442;
      var $xyz_sroa_1_0_lcssa464 = $phitmp443;
      var $xyz_sroa_2_0_lcssa466 = $phitmp444;
      label = 38;
      break;
    }
   case 38:
    var $xyz_sroa_2_0_lcssa466;
    var $xyz_sroa_1_0_lcssa464;
    var $xyz_sroa_0_0_lcssa463;
    var $319 = ($xyz_sroa_0_0_lcssa463 | 0) < 65535;
    var $_362 = $319 ? $xyz_sroa_0_0_lcssa463 : 65535;
    var $321 = $_362;
    var $xyz_sroa_1_0_lcssa465 = $xyz_sroa_1_0_lcssa464;
    var $xyz_sroa_2_0_lcssa467 = $xyz_sroa_2_0_lcssa466;
    label = 39;
    break;
   case 39:
    var $xyz_sroa_2_0_lcssa467;
    var $xyz_sroa_1_0_lcssa465;
    var $321;
    var $322 = $cbrt + ($321 << 2) | 0;
    var $323 = HEAPF32[$322 >> 2];
    var $phitmp331 = ($xyz_sroa_1_0_lcssa465 | 0) < 0;
    if ($phitmp331) {
      var $327 = 0;
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $325 = ($xyz_sroa_1_0_lcssa465 | 0) < 65535;
    var $_363 = $325 ? $xyz_sroa_1_0_lcssa465 : 65535;
    var $327 = $_363;
    label = 41;
    break;
   case 41:
    var $327;
    var $328 = $cbrt + ($327 << 2) | 0;
    var $329 = HEAPF32[$328 >> 2];
    var $phitmp332 = ($xyz_sroa_2_0_lcssa467 | 0) < 0;
    if ($phitmp332) {
      var $333 = 0;
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $331 = ($xyz_sroa_2_0_lcssa467 | 0) < 65535;
    var $_364 = $331 ? $xyz_sroa_2_0_lcssa467 : 65535;
    var $333 = $_364;
    label = 43;
    break;
   case 43:
    var $333;
    var $334 = $cbrt + ($333 << 2) | 0;
    var $335 = HEAPF32[$334 >> 2];
    var $336 = $329 * 116;
    var $337 = $336 - 16;
    var $338 = $337 * 64;
    var $339 = $338 & -1;
    var $340 = $690 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 | 0;
    HEAP16[$340 >> 1] = $339;
    var $341 = $323 - $329;
    var $342 = $341 * 32e3;
    var $343 = $342 & -1;
    var $344 = $690 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + 2 | 0;
    HEAP16[$344 >> 1] = $343;
    var $345 = $329 - $335;
    var $346 = $345 * 12800;
    var $347 = $346 & -1;
    var $348 = $690 + $d_0400 * 393216 + $177 * 1536 + $188 * 6 + 4 | 0;
    HEAP16[$348 >> 1] = $347;
    var $349 = $col_1393 + 1 | 0;
    var $350 = ($349 | 0) < ($171 | 0);
    if ($350) {
      var $col_1393 = $349;
      label = 31;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $351 = $row_1396 + 1 | 0;
    var $352 = ($351 | 0) < ($69 | 0);
    if ($352) {
      var $row_1396 = $351;
      label = 28;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $353 = $d_0400 + 1 | 0;
    var $exitcond = ($353 | 0) == 2;
    if ($exitcond) {
      label = 46;
      break;
    } else {
      var $d_0400 = $353;
      label = 27;
      break;
    }
   case 46:
    _memset($691, 0, 131072);
    var $355 = $left_0425 + 2 | 0;
    var $356 = $left_0425 + 254 | 0;
    var $row_2409 = $71;
    label = 47;
    break;
   case 47:
    var $row_2409;
    var $358 = $693 & 65535;
    var $359 = $358 - 4 | 0;
    var $360 = ($row_2409 | 0) < ($359 | 0);
    if ($360) {
      label = 48;
      break;
    } else {
      label = 56;
      break;
    }
   case 48:
    var $362 = $row_2409 - $top_0428 | 0;
    var $col_2408 = $355;
    label = 49;
    break;
   case 49:
    var $col_2408;
    var $364 = $64 - 4 | 0;
    var $365 = ($col_2408 | 0) < ($364 | 0);
    if ($365) {
      label = 50;
      break;
    } else {
      label = 55;
      break;
    }
   case 50:
    var $367 = $col_2408 - $left_0425 | 0;
    var $_sum = $367 - 1 | 0;
    var $_sum_1 = $367 + 1 | 0;
    var $_sum_2 = $367 - 256 | 0;
    var $_sum_3 = $367 + 256 | 0;
    var $d_1404 = 0;
    label = 51;
    break;
   case 51:
    var $d_1404;
    var $369 = $690 + $d_1404 * 393216 + $362 * 1536 + $367 * 6 | 0;
    var $370 = HEAP16[$369 >> 1];
    var $371 = $370 << 16 >> 16;
    var $372 = $690 + $d_1404 * 393216 + $362 * 1536 + $367 * 6 + 2 | 0;
    var $373 = HEAP16[$372 >> 1];
    var $374 = $373 << 16 >> 16;
    var $375 = $690 + $d_1404 * 393216 + $362 * 1536 + $367 * 6 + 4 | 0;
    var $376 = HEAP16[$375 >> 1];
    var $377 = $376 << 16 >> 16;
    var $378 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum * 6 | 0;
    var $379 = HEAP16[$378 >> 1];
    var $380 = $379 << 16 >> 16;
    var $381 = $371 - $380 | 0;
    var $382 = $381 >> 31;
    var $383 = $382 ^ $381;
    var $384 = $383 - $382 | 0;
    var $385 = $ldiff + ($d_1404 << 4) | 0;
    HEAP32[$385 >> 2] = $384;
    var $386 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum * 6 + 2 | 0;
    var $387 = HEAP16[$386 >> 1];
    var $388 = $387 << 16 >> 16;
    var $389 = $374 - $388 | 0;
    var $390 = $389 * $389 & -1;
    var $391 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum * 6 + 4 | 0;
    var $392 = HEAP16[$391 >> 1];
    var $393 = $392 << 16 >> 16;
    var $394 = $377 - $393 | 0;
    var $395 = $394 * $394 & -1;
    var $396 = $395 + $390 | 0;
    var $397 = $abdiff + ($d_1404 << 4) | 0;
    HEAP32[$397 >> 2] = $396;
    var $398 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_1 * 6 | 0;
    var $399 = HEAP16[$398 >> 1];
    var $400 = $399 << 16 >> 16;
    var $401 = $371 - $400 | 0;
    var $402 = $401 >> 31;
    var $403 = $402 ^ $401;
    var $404 = $403 - $402 | 0;
    var $405 = $ldiff + ($d_1404 << 4) + 4 | 0;
    HEAP32[$405 >> 2] = $404;
    var $406 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_1 * 6 + 2 | 0;
    var $407 = HEAP16[$406 >> 1];
    var $408 = $407 << 16 >> 16;
    var $409 = $374 - $408 | 0;
    var $410 = $409 * $409 & -1;
    var $411 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_1 * 6 + 4 | 0;
    var $412 = HEAP16[$411 >> 1];
    var $413 = $412 << 16 >> 16;
    var $414 = $377 - $413 | 0;
    var $415 = $414 * $414 & -1;
    var $416 = $415 + $410 | 0;
    var $417 = $abdiff + ($d_1404 << 4) + 4 | 0;
    HEAP32[$417 >> 2] = $416;
    var $418 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_2 * 6 | 0;
    var $419 = HEAP16[$418 >> 1];
    var $420 = $419 << 16 >> 16;
    var $421 = $371 - $420 | 0;
    var $422 = $421 >> 31;
    var $423 = $422 ^ $421;
    var $424 = $423 - $422 | 0;
    var $425 = $ldiff + ($d_1404 << 4) + 8 | 0;
    HEAP32[$425 >> 2] = $424;
    var $426 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_2 * 6 + 2 | 0;
    var $427 = HEAP16[$426 >> 1];
    var $428 = $427 << 16 >> 16;
    var $429 = $374 - $428 | 0;
    var $430 = $429 * $429 & -1;
    var $431 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_2 * 6 + 4 | 0;
    var $432 = HEAP16[$431 >> 1];
    var $433 = $432 << 16 >> 16;
    var $434 = $377 - $433 | 0;
    var $435 = $434 * $434 & -1;
    var $436 = $435 + $430 | 0;
    var $437 = $abdiff + ($d_1404 << 4) + 8 | 0;
    HEAP32[$437 >> 2] = $436;
    var $438 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_3 * 6 | 0;
    var $439 = HEAP16[$438 >> 1];
    var $440 = $439 << 16 >> 16;
    var $441 = $371 - $440 | 0;
    var $442 = $441 >> 31;
    var $443 = $442 ^ $441;
    var $444 = $443 - $442 | 0;
    var $445 = $ldiff + ($d_1404 << 4) + 12 | 0;
    HEAP32[$445 >> 2] = $444;
    var $446 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_3 * 6 + 2 | 0;
    var $447 = HEAP16[$446 >> 1];
    var $448 = $447 << 16 >> 16;
    var $449 = $374 - $448 | 0;
    var $450 = $449 * $449 & -1;
    var $451 = $690 + $d_1404 * 393216 + $362 * 1536 + $_sum_3 * 6 + 4 | 0;
    var $452 = HEAP16[$451 >> 1];
    var $453 = $452 << 16 >> 16;
    var $454 = $377 - $453 | 0;
    var $455 = $454 * $454 & -1;
    var $456 = $455 + $450 | 0;
    var $457 = $abdiff + ($d_1404 << 4) + 12 | 0;
    HEAP32[$457 >> 2] = $456;
    var $458 = $d_1404 + 1 | 0;
    var $exitcond448 = ($458 | 0) == 2;
    if ($exitcond448) {
      label = 52;
      break;
    } else {
      var $d_1404 = $458;
      label = 51;
      break;
    }
   case 52:
    var $460 = HEAP32[$48 >> 2];
    var $461 = HEAP32[$49 >> 2];
    var $462 = $460 >>> 0 > $461 >>> 0;
    var $_365 = $462 ? $460 : $461;
    var $463 = HEAP32[$50 >> 2];
    var $464 = HEAP32[$51 >> 2];
    var $465 = $463 >>> 0 > $464 >>> 0;
    var $466 = $465 ? $463 : $464;
    var $467 = $_365 >>> 0 < $466 >>> 0;
    var $_365_ = $467 ? $_365 : $466;
    var $468 = HEAP32[$52 >> 2];
    var $469 = HEAP32[$53 >> 2];
    var $470 = $468 >>> 0 > $469 >>> 0;
    var $_368 = $470 ? $468 : $469;
    var $471 = HEAP32[$54 >> 2];
    var $472 = HEAP32[$55 >> 2];
    var $473 = $471 >>> 0 > $472 >>> 0;
    var $474 = $473 ? $471 : $472;
    var $475 = $_368 >>> 0 < $474 >>> 0;
    var $476 = $475 ? $_368 : $474;
    var $477 = $692 + ($362 << 8) + $367 | 0;
    var $478 = $460 >>> 0 > $_365_ >>> 0;
    var $479 = $468 >>> 0 > $476 >>> 0;
    var $or_cond = $478 | $479;
    if ($or_cond) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $481 = HEAP8[$477];
    var $482 = $481 + 1 & 255;
    HEAP8[$477] = $482;
    label = 54;
    break;
   case 54:
    var $484 = $461 >>> 0 > $_365_ >>> 0;
    var $485 = $469 >>> 0 > $476 >>> 0;
    var $or_cond5 = $484 | $485;
    if ($or_cond5) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 55:
    var $486 = $row_2409 + 1 | 0;
    var $487 = ($486 | 0) < ($72 | 0);
    if ($487) {
      var $row_2409 = $486;
      label = 47;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $488 = $left_0425 + 3 | 0;
    var $489 = $left_0425 + 253 | 0;
    var $row_3422 = $73;
    label = 57;
    break;
   case 57:
    var $row_3422;
    var $491 = $358 - 5 | 0;
    var $492 = ($row_3422 | 0) < ($491 | 0);
    if ($492) {
      label = 58;
      break;
    } else {
      label = 68;
      break;
    }
   case 58:
    var $494 = $row_3422 - $top_0428 | 0;
    var $495 = $494 - 1 | 0;
    var $496 = $494 + 1 | 0;
    var $col_3420 = $488;
    label = 59;
    break;
   case 59:
    var $col_3420;
    var $498 = ($col_3420 | 0) < ($65 | 0);
    if ($498) {
      label = 60;
      break;
    } else {
      label = 67;
      break;
    }
   case 60:
    var $500 = $col_3420 - $left_0425 | 0;
    var $501 = $500 - 1 | 0;
    var $502 = $500 + 1 | 0;
    var $i_4411 = $495;
    var $_lcssa413 = 0;
    label = 61;
    break;
   case 61:
    var $_lcssa413;
    var $i_4411;
    var $j_1410 = $501;
    var $505 = $_lcssa413;
    label = 62;
    break;
   case 62:
    var $505;
    var $j_1410;
    var $506 = $692 + ($i_4411 << 8) + $j_1410 | 0;
    var $507 = HEAP8[$506];
    var $508 = $507 << 24 >> 24;
    var $509 = $505 + $508 | 0;
    var $510 = $j_1410 + 1 | 0;
    var $511 = ($510 | 0) > ($502 | 0);
    if ($511) {
      label = 63;
      break;
    } else {
      var $j_1410 = $510;
      var $505 = $509;
      label = 62;
      break;
    }
   case 63:
    var $513 = $i_4411 + 1 | 0;
    var $514 = ($513 | 0) > ($496 | 0);
    if ($514) {
      var $i_4411_1 = $495;
      var $_lcssa413_1 = 0;
      label = 89;
      break;
    } else {
      var $i_4411 = $513;
      var $_lcssa413 = $509;
      label = 61;
      break;
    }
   case 64:
    var $515 = ($632 | 0) > ($509 | 0);
    var $516 = $515 & 1;
    var $517 = $688 + $516 * 393216 + $494 * 1536 + $500 * 6 | 0;
    var $518 = HEAP16[$517 >> 1];
    var $519 = $64 * $row_3422 & -1;
    var $520 = $519 + $col_3420 | 0;
    var $521 = HEAP32[5264108 >> 2];
    var $522 = $521 + ($520 << 3) | 0;
    HEAP16[$522 >> 1] = $518;
    var $523 = $688 + $516 * 393216 + $494 * 1536 + $500 * 6 + 2 | 0;
    var $524 = HEAP16[$523 >> 1];
    var $525 = $521 + ($520 << 3) + 2 | 0;
    HEAP16[$525 >> 1] = $524;
    var $526 = $688 + $516 * 393216 + $494 * 1536 + $500 * 6 + 4 | 0;
    var $527 = HEAP16[$526 >> 1];
    var $528 = $521 + ($520 << 3) + 4 | 0;
    HEAP16[$528 >> 1] = $527;
    label = 66;
    break;
   case 65:
    var $529 = $688 + $494 * 1536 + $500 * 6 | 0;
    var $530 = HEAP16[$529 >> 1];
    var $531 = $530 & 65535;
    var $532 = $47 + $494 * 1536 + $500 * 6 | 0;
    var $533 = HEAP16[$532 >> 1];
    var $534 = $533 & 65535;
    var $535 = $534 + $531 | 0;
    var $536 = $535 >>> 1;
    var $537 = $536 & 65535;
    var $538 = $64 * $row_3422 & -1;
    var $539 = $538 + $col_3420 | 0;
    var $540 = HEAP32[5264108 >> 2];
    var $541 = $540 + ($539 << 3) | 0;
    HEAP16[$541 >> 1] = $537;
    var $542 = $688 + $494 * 1536 + $500 * 6 + 2 | 0;
    var $543 = HEAP16[$542 >> 1];
    var $544 = $543 & 65535;
    var $545 = $47 + $494 * 1536 + $500 * 6 + 2 | 0;
    var $546 = HEAP16[$545 >> 1];
    var $547 = $546 & 65535;
    var $548 = $547 + $544 | 0;
    var $549 = $548 >>> 1;
    var $550 = $549 & 65535;
    var $551 = $540 + ($539 << 3) + 2 | 0;
    HEAP16[$551 >> 1] = $550;
    var $552 = $688 + $494 * 1536 + $500 * 6 + 4 | 0;
    var $553 = HEAP16[$552 >> 1];
    var $554 = $553 & 65535;
    var $555 = $47 + $494 * 1536 + $500 * 6 + 4 | 0;
    var $556 = HEAP16[$555 >> 1];
    var $557 = $556 & 65535;
    var $558 = $557 + $554 | 0;
    var $559 = $558 >>> 1;
    var $560 = $559 & 65535;
    var $561 = $540 + ($539 << 3) + 4 | 0;
    HEAP16[$561 >> 1] = $560;
    label = 66;
    break;
   case 66:
    var $563 = $col_3420 + 1 | 0;
    var $564 = ($563 | 0) < ($489 | 0);
    if ($564) {
      var $col_3420 = $563;
      label = 59;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $565 = $row_3422 + 1 | 0;
    var $566 = ($565 | 0) < ($74 | 0);
    if ($566) {
      var $row_3422 = $565;
      label = 57;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $567 = $left_0425 + 250 | 0;
    var $568 = ($567 | 0) < ($65 | 0);
    if ($568) {
      var $left_0425 = $567;
      label = 13;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $569 = $top_0428 + 250 | 0;
    var $570 = ($569 | 0) < ($695 | 0);
    if ($570) {
      var $top_0428 = $569;
      label = 11;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    _free($687);
    STACKTOP = __stackBase__;
    return;
   case 71:
    var $572 = HEAP8[$477];
    var $573 = $572 + 1 & 255;
    HEAP8[$477] = $573;
    label = 72;
    break;
   case 72:
    var $575 = HEAP32[$56 >> 2];
    var $576 = $575 >>> 0 > $_365_ >>> 0;
    if ($576) {
      label = 75;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $578 = HEAP32[$63 >> 2];
    var $579 = $578 >>> 0 > $476 >>> 0;
    if ($579) {
      label = 75;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    var $581 = HEAP8[$477];
    var $582 = $581 + 1 & 255;
    HEAP8[$477] = $582;
    label = 75;
    break;
   case 75:
    var $584 = HEAP32[$57 >> 2];
    var $585 = $584 >>> 0 > $_365_ >>> 0;
    if ($585) {
      label = 78;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $587 = HEAP32[$62 >> 2];
    var $588 = $587 >>> 0 > $476 >>> 0;
    if ($588) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    var $590 = HEAP8[$477];
    var $591 = $590 + 1 & 255;
    HEAP8[$477] = $591;
    label = 78;
    break;
   case 78:
    var $593 = $692 + 65536 + ($362 << 8) + $367 | 0;
    var $594 = HEAP32[$58 >> 2];
    var $595 = $594 >>> 0 > $_365_ >>> 0;
    if ($595) {
      label = 81;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    var $597 = HEAP32[$61 >> 2];
    var $598 = $597 >>> 0 > $476 >>> 0;
    if ($598) {
      label = 81;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $600 = HEAP8[$593];
    var $601 = $600 + 1 & 255;
    HEAP8[$593] = $601;
    label = 81;
    break;
   case 81:
    var $603 = HEAP32[$59 >> 2];
    var $604 = $603 >>> 0 > $_365_ >>> 0;
    if ($604) {
      label = 84;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    var $606 = HEAP32[$60 >> 2];
    var $607 = $606 >>> 0 > $476 >>> 0;
    if ($607) {
      label = 84;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $609 = HEAP8[$593];
    var $610 = $609 + 1 & 255;
    HEAP8[$593] = $610;
    label = 84;
    break;
   case 84:
    var $612 = $463 >>> 0 > $_365_ >>> 0;
    var $613 = $471 >>> 0 > $476 >>> 0;
    var $or_cond6 = $612 | $613;
    if ($or_cond6) {
      label = 86;
      break;
    } else {
      label = 85;
      break;
    }
   case 85:
    var $615 = HEAP8[$593];
    var $616 = $615 + 1 & 255;
    HEAP8[$593] = $616;
    label = 86;
    break;
   case 86:
    var $618 = $464 >>> 0 > $_365_ >>> 0;
    var $619 = $472 >>> 0 > $476 >>> 0;
    var $or_cond7 = $618 | $619;
    if ($or_cond7) {
      label = 88;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    var $621 = HEAP8[$593];
    var $622 = $621 + 1 & 255;
    HEAP8[$593] = $622;
    label = 88;
    break;
   case 88:
    var $624 = $col_2408 + 1 | 0;
    var $625 = ($624 | 0) < ($356 | 0);
    if ($625) {
      var $col_2408 = $624;
      label = 49;
      break;
    } else {
      label = 55;
      break;
    }
   case 89:
    var $_lcssa413_1;
    var $i_4411_1;
    var $j_1410_1 = $501;
    var $628 = $_lcssa413_1;
    label = 90;
    break;
   case 90:
    var $628;
    var $j_1410_1;
    var $629 = $692 + 65536 + ($i_4411_1 << 8) + $j_1410_1 | 0;
    var $630 = HEAP8[$629];
    var $631 = $630 << 24 >> 24;
    var $632 = $628 + $631 | 0;
    var $633 = $j_1410_1 + 1 | 0;
    var $634 = ($633 | 0) > ($502 | 0);
    if ($634) {
      label = 91;
      break;
    } else {
      var $j_1410_1 = $633;
      var $628 = $632;
      label = 90;
      break;
    }
   case 91:
    var $636 = $i_4411_1 + 1 | 0;
    var $637 = ($636 | 0) > ($496 | 0);
    if ($637) {
      label = 92;
      break;
    } else {
      var $i_4411_1 = $636;
      var $_lcssa413_1 = $632;
      label = 89;
      break;
    }
   case 92:
    var $639 = ($509 | 0) == ($632 | 0);
    if ($639) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 93:
    var $j_0434_1;
    var $640 = $xyz_cam + 16 + ($j_0434_1 << 2) | 0;
    var $641 = 5244964 + ($j_0434_1 << 2) | 0;
    var $642 = HEAPF32[$641 >> 2];
    var $643 = $642;
    var $644 = $643 * .212671;
    var $645 = $644;
    var $646 = $645;
    var $647 = 5244980 + ($j_0434_1 << 2) | 0;
    var $648 = HEAPF32[$647 >> 2];
    var $649 = $648;
    var $650 = $649 * .71516;
    var $651 = $646;
    var $652 = $650 + $651;
    var $653 = $652;
    var $654 = 5244996 + ($j_0434_1 << 2) | 0;
    var $655 = HEAPF32[$654 >> 2];
    var $656 = $655;
    var $657 = $656 * .072169;
    var $658 = $653;
    var $659 = $657 + $658;
    var $660 = $659;
    HEAPF32[$640 >> 2] = $660;
    var $661 = $j_0434_1 + 1 | 0;
    var $exitcond458_1 = ($661 | 0) == ($19 | 0);
    if ($exitcond458_1) {
      var $j_0434_2 = 0;
      label = 94;
      break;
    } else {
      var $j_0434_1 = $661;
      label = 93;
      break;
    }
   case 94:
    var $j_0434_2;
    var $662 = $xyz_cam + 32 + ($j_0434_2 << 2) | 0;
    var $663 = 5244964 + ($j_0434_2 << 2) | 0;
    var $664 = HEAPF32[$663 >> 2];
    var $665 = $664;
    var $666 = $665 * .019334;
    var $667 = $666 / 1.0887540578842163;
    var $668 = $667;
    var $669 = $668;
    var $670 = 5244980 + ($j_0434_2 << 2) | 0;
    var $671 = HEAPF32[$670 >> 2];
    var $672 = $671;
    var $673 = $672 * .119193;
    var $674 = $673 / 1.0887540578842163;
    var $675 = $669;
    var $676 = $674 + $675;
    var $677 = $676;
    var $678 = 5244996 + ($j_0434_2 << 2) | 0;
    var $679 = HEAPF32[$678 >> 2];
    var $680 = $679;
    var $681 = $680 * .950227;
    var $682 = $681 / 1.0887540578842163;
    var $683 = $677;
    var $684 = $682 + $683;
    var $685 = $684;
    HEAPF32[$662 >> 2] = $685;
    var $686 = $j_0434_2 + 1 | 0;
    var $exitcond458_2 = ($686 | 0) == ($19 | 0);
    if ($exitcond458_2) {
      label = 95;
      break;
    } else {
      var $j_0434_2 = $686;
      label = 94;
      break;
    }
   case 95:
    _border_interpolate(5);
    var $687 = _malloc(1703936);
    _merror($687, 5576920);
    var $688 = $687;
    var $689 = $687 + 786432 | 0;
    var $690 = $689;
    var $691 = $687 + 1572864 | 0;
    var $692 = $691;
    var $693 = HEAP16[5398712 >> 1];
    var $694 = $693 & 65535;
    var $695 = $694 - 5 | 0;
    var $696 = ($695 | 0) > 2;
    if ($696) {
      label = 10;
      break;
    } else {
      label = 70;
      break;
    }
  }
}
_ahd_interpolate["X"] = 1;
function _median_filter() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $med = __stackBase__;
    var $1 = HEAP32[5263492 >> 2];
    var $2 = ($1 | 0) < 1;
    if ($2) {
      label = 25;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $med + 16 | 0;
    var $pass_056 = 1;
    label = 4;
    break;
   case 4:
    var $pass_056;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $5 = HEAP32[_stderr >> 2];
    var $6 = _fprintf($5, 5576808, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $pass_056, tempInt));
    label = 6;
    break;
   case 6:
    var $_pre = HEAP32[5264108 >> 2];
    var $_pre1 = HEAP16[5242964 >> 1];
    var $_pre2 = HEAP16[5398712 >> 1];
    var $c_055 = 0;
    label = 7;
    break;
   case 7:
    var $c_055;
    var $7 = $_pre1 & 65535;
    var $8 = $_pre2 & 65535;
    var $9 = $8 * $7 & -1;
    var $10 = ($9 | 0) == 0;
    if ($10) {
      var $_lcssa39 = $7;
      label = 9;
      break;
    } else {
      var $pix_040 = $_pre;
      label = 8;
      break;
    }
   case 8:
    var $pix_040;
    var $11 = $pix_040 + ($c_055 << 1) | 0;
    var $12 = HEAP16[$11 >> 1];
    var $13 = $pix_040 + 6 | 0;
    HEAP16[$13 >> 1] = $12;
    var $14 = $pix_040 + 8 | 0;
    var $15 = $_pre1 & 65535;
    var $16 = $_pre2 & 65535;
    var $17 = $16 * $15 & -1;
    var $18 = $_pre + ($17 << 3) | 0;
    var $19 = $14 >>> 0 < $18 >>> 0;
    if ($19) {
      var $pix_040 = $14;
      label = 8;
      break;
    } else {
      var $_lcssa39 = $15;
      label = 9;
      break;
    }
   case 9:
    var $_lcssa39;
    var $20 = $_pre1 & 65535;
    var $21 = $_pre2 & 65535;
    var $22 = $21 - 1 | 0;
    var $23 = $22 * $20 & -1;
    var $24 = $_pre + ($23 << 3) | 0;
    var $25 = ($_lcssa39 | 0) < ($23 | 0);
    if ($25) {
      label = 10;
      break;
    } else {
      label = 23;
      break;
    }
   case 10:
    var $26 = $_pre + ($_lcssa39 << 3) | 0;
    var $pix_149 = $26;
    label = 11;
    break;
   case 11:
    var $pix_149;
    var $27 = $pix_149;
    var $28 = $_pre;
    var $29 = $27 - $28 | 0;
    var $30 = $29 >> 3;
    var $31 = $30 + 1 | 0;
    var $32 = ($31 | 0) % ($20 | 0);
    var $33 = ($32 | 0) < 2;
    if ($33) {
      label = 22;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $35 = -$20 | 0;
    var $36 = ($20 | 0) < ($35 | 0);
    if ($36) {
      var $i_148 = 0;
      label = 16;
      break;
    } else {
      var $i_044 = $35;
      var $k_045 = 0;
      label = 13;
      break;
    }
   case 13:
    var $k_045;
    var $i_044;
    var $37 = $i_044 - 1 | 0;
    var $38 = $i_044 + 1 | 0;
    var $j_042 = $37;
    var $k_143 = $k_045;
    label = 14;
    break;
   case 14:
    var $k_143;
    var $j_042;
    var $40 = $pix_149 + ($j_042 << 3) + 6 | 0;
    var $41 = HEAP16[$40 >> 1];
    var $42 = $41 & 65535;
    var $43 = $pix_149 + ($j_042 << 3) + 2 | 0;
    var $44 = HEAP16[$43 >> 1];
    var $45 = $44 & 65535;
    var $46 = $42 - $45 | 0;
    var $47 = $k_143 + 1 | 0;
    var $48 = $med + ($k_143 << 2) | 0;
    HEAP32[$48 >> 2] = $46;
    var $49 = $j_042 + 1 | 0;
    var $50 = ($49 | 0) > ($38 | 0);
    if ($50) {
      label = 15;
      break;
    } else {
      var $j_042 = $49;
      var $k_143 = $47;
      label = 14;
      break;
    }
   case 15:
    var $52 = $20 + $i_044 | 0;
    var $53 = ($i_044 | 0) > 0;
    if ($53) {
      var $i_148 = 0;
      label = 16;
      break;
    } else {
      var $i_044 = $52;
      var $k_045 = $47;
      label = 13;
      break;
    }
   case 16:
    var $i_148;
    var $54 = $i_148 + 5263452 | 0;
    var $55 = HEAP8[$54];
    var $56 = $55 & 255;
    var $57 = $med + ($56 << 2) | 0;
    var $58 = HEAP32[$57 >> 2];
    var $59 = $i_148 | 1;
    var $60 = $59 + 5263452 | 0;
    var $61 = HEAP8[$60];
    var $62 = $61 & 255;
    var $63 = $med + ($62 << 2) | 0;
    var $64 = HEAP32[$63 >> 2];
    var $65 = ($58 | 0) > ($64 | 0);
    if ($65) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $67 = $64 + $58 | 0;
    HEAP32[$57 >> 2] = $67;
    var $68 = HEAP32[$63 >> 2];
    var $69 = $67 - $68 | 0;
    HEAP32[$63 >> 2] = $69;
    var $70 = HEAP32[$57 >> 2];
    var $71 = $70 - $69 | 0;
    HEAP32[$57 >> 2] = $71;
    label = 18;
    break;
   case 18:
    var $73 = $i_148 + 2 | 0;
    var $74 = $73 >>> 0 < 38;
    if ($74) {
      var $i_148 = $73;
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $76 = HEAP32[$3 >> 2];
    var $77 = $pix_149 + 2 | 0;
    var $78 = HEAP16[$77 >> 1];
    var $79 = $78 & 65535;
    var $80 = $79 + $76 | 0;
    var $phitmp = ($80 | 0) < 0;
    if ($phitmp) {
      var $84 = 0;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $82 = ($80 | 0) < 65535;
    var $phitmp38 = $80 & 65535;
    var $phitmp38_ = $82 ? $phitmp38 : -1;
    var $84 = $phitmp38_;
    label = 21;
    break;
   case 21:
    var $84;
    var $85 = $pix_149 + ($c_055 << 1) | 0;
    HEAP16[$85 >> 1] = $84;
    label = 22;
    break;
   case 22:
    var $87 = $pix_149 + 8 | 0;
    var $88 = $87 >>> 0 < $24 >>> 0;
    if ($88) {
      var $pix_149 = $87;
      label = 11;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $89 = $c_055 + 2 | 0;
    var $90 = ($89 | 0) < 3;
    if ($90) {
      var $c_055 = $89;
      label = 7;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $92 = $pass_056 + 1 | 0;
    var $93 = HEAP32[5263492 >> 2];
    var $94 = ($92 | 0) > ($93 | 0);
    if ($94) {
      label = 25;
      break;
    } else {
      var $pass_056 = $92;
      label = 4;
      break;
    }
   case 25:
    STACKTOP = __stackBase__;
    return;
  }
}
_median_filter["X"] = 1;
function _blend_highlights() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam = __stackBase__;
    var $lab = __stackBase__ + 32;
    var $1 = HEAP32[5560840 >> 2];
    var $2 = $1 - 3 | 0;
    var $3 = $2 >>> 0 > 1;
    if ($3) {
      label = 32;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $8 = $1;
      label = 5;
      break;
    }
   case 4:
    var $6 = HEAP32[_stderr >> 2];
    var $7 = _fwrite(5576704, 23, 1, $6);
    var $_pre = HEAP32[5560840 >> 2];
    var $8 = $_pre;
    label = 5;
    break;
   case 5:
    var $8;
    var $9 = ($8 | 0) > 0;
    if ($9) {
      var $c_0107 = 0;
      var $clip_0108 = 2147483647;
      label = 8;
      break;
    } else {
      var $clip_0_lcssa = 2147483647;
      label = 6;
      break;
    }
   case 6:
    var $clip_0_lcssa;
    var $10 = HEAP16[5398712 >> 1];
    var $11 = $10 << 16 >> 16 == 0;
    if ($11) {
      label = 32;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $12 = $clip_0_lcssa | 0;
    var $_pre3 = HEAP16[5242964 >> 1];
    var $row_0104 = 0;
    var $21 = $_pre3;
    var $20 = $8;
    label = 9;
    break;
   case 8:
    var $clip_0108;
    var $c_0107;
    var $13 = 5245640 + ($c_0107 << 2) | 0;
    var $14 = HEAPF32[$13 >> 2];
    var $15 = $14 * 65535;
    var $16 = $15 & -1;
    var $17 = ($clip_0108 | 0) > ($16 | 0);
    var $_clip_0 = $17 ? $16 : $clip_0108;
    var $18 = $c_0107 + 1 | 0;
    var $19 = ($18 | 0) < ($8 | 0);
    if ($19) {
      var $c_0107 = $18;
      var $clip_0108 = $_clip_0;
      label = 8;
      break;
    } else {
      var $clip_0_lcssa = $_clip_0;
      label = 6;
      break;
    }
   case 9:
    var $20;
    var $21;
    var $row_0104;
    var $22 = $21 << 16 >> 16 == 0;
    if ($22) {
      var $100 = 0;
      var $99 = $20;
      label = 31;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre6 = HEAP32[5264108 >> 2];
    var $col_098 = 0;
    var $23 = $20;
    label = 11;
    break;
   case 11:
    var $23;
    var $col_098;
    var $24 = $_pre3 & 65535;
    var $25 = $24 * $row_0104 & -1;
    var $26 = $25 + $col_098 | 0;
    var $c_1 = 0;
    label = 12;
    break;
   case 12:
    var $c_1;
    var $28 = ($c_1 | 0) < ($23 | 0);
    if ($28) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $30 = $_pre6 + ($26 << 3) + ($c_1 << 1) | 0;
    var $31 = HEAP16[$30 >> 1];
    var $32 = $31 & 65535;
    var $33 = ($32 | 0) > ($clip_0_lcssa | 0);
    var $34 = $c_1 + 1 | 0;
    if ($33) {
      label = 14;
      break;
    } else {
      var $c_1 = $34;
      label = 12;
      break;
    }
   case 14:
    var $36 = ($c_1 | 0) == ($23 | 0);
    var $_not = $9 ^ 1;
    var $brmerge = $36 | $_not;
    var $_mux = $36 ? $23 : $8;
    if ($brmerge) {
      var $95 = $_mux;
      label = 30;
      break;
    } else {
      var $c_263 = 0;
      label = 15;
      break;
    }
   case 15:
    var $c_263;
    var $37 = $_pre6 + ($26 << 3) + ($c_263 << 1) | 0;
    var $38 = HEAP16[$37 >> 1];
    var $39 = $38 & 65535;
    var $40 = $cam + ($c_263 << 2) | 0;
    HEAPF32[$40 >> 2] = $39;
    var $41 = $39 < $12;
    var $_ = $41 ? $39 : $12;
    var $42 = $cam + 16 + ($c_263 << 2) | 0;
    HEAPF32[$42 >> 2] = $_;
    var $43 = $c_263 + 1 | 0;
    var $44 = ($43 | 0) < ($8 | 0);
    if ($44) {
      var $c_263 = $43;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $45 = ($8 | 0) > 1;
    var $46 = $8 - 3 | 0;
    var $c_367 = 0;
    label = 17;
    break;
   case 17:
    var $c_367;
    var $47 = $lab + ($c_367 << 2) | 0;
    HEAPF32[$47 >> 2] = 0;
    var $j_064 = 0;
    var $49 = 0;
    label = 18;
    break;
   case 18:
    var $49;
    var $j_064;
    var $50 = 5561144 + ($46 << 6) + ($c_367 << 4) + ($j_064 << 2) | 0;
    var $51 = HEAPF32[$50 >> 2];
    var $52 = $cam + ($j_064 << 2) | 0;
    var $53 = HEAPF32[$52 >> 2];
    var $54 = $51 * $53;
    var $55 = $49 + $54;
    var $56 = $j_064 + 1 | 0;
    var $exitcond = ($56 | 0) == ($8 | 0);
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $j_064 = $56;
      var $49 = $55;
      label = 18;
      break;
    }
   case 19:
    HEAPF32[$47 >> 2] = $55;
    var $58 = $c_367 + 1 | 0;
    var $exitcond110 = ($58 | 0) == ($8 | 0);
    if ($exitcond110) {
      label = 20;
      break;
    } else {
      var $c_367 = $58;
      label = 17;
      break;
    }
   case 20:
    if ($45) {
      var $c_471 = 1;
      var $59 = 0;
      label = 21;
      break;
    } else {
      var $104 = 0;
      var $sum_sroa_0_1 = 0;
      label = 33;
      break;
    }
   case 21:
    var $59;
    var $c_471;
    var $60 = $lab + ($c_471 << 2) | 0;
    var $61 = HEAPF32[$60 >> 2];
    var $62 = $61 * $61;
    var $63 = $59 + $62;
    var $64 = $c_471 + 1 | 0;
    var $exitcond113 = ($64 | 0) == ($8 | 0);
    if ($exitcond113) {
      var $104 = 1;
      var $sum_sroa_0_1 = $63;
      label = 33;
      break;
    } else {
      var $c_471 = $64;
      var $59 = $63;
      label = 21;
      break;
    }
   case 22:
    var $c_581;
    var $65 = $lab + ($c_581 << 2) | 0;
    var $66 = HEAPF32[$65 >> 2];
    var $67 = $125 * $66;
    HEAPF32[$65 >> 2] = $67;
    var $68 = $c_581 + 1 | 0;
    var $69 = ($68 | 0) < ($8 | 0);
    if ($69) {
      var $c_581 = $68;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    if ($9) {
      label = 24;
      break;
    } else {
      var $95 = $8;
      label = 30;
      break;
    }
   case 24:
    var $70 = $8 - 3 | 0;
    var $c_691 = 0;
    label = 25;
    break;
   case 25:
    var $c_691;
    var $71 = $cam + ($c_691 << 2) | 0;
    HEAPF32[$71 >> 2] = 0;
    var $j_184 = 0;
    var $73 = 0;
    label = 26;
    break;
   case 26:
    var $73;
    var $j_184;
    var $74 = 5561272 + ($70 << 6) + ($c_691 << 4) + ($j_184 << 2) | 0;
    var $75 = HEAPF32[$74 >> 2];
    var $76 = $lab + ($j_184 << 2) | 0;
    var $77 = HEAPF32[$76 >> 2];
    var $78 = $75 * $77;
    var $79 = $73 + $78;
    var $80 = $j_184 + 1 | 0;
    var $exitcond117 = ($80 | 0) == ($8 | 0);
    if ($exitcond117) {
      label = 27;
      break;
    } else {
      var $j_184 = $80;
      var $73 = $79;
      label = 26;
      break;
    }
   case 27:
    HEAPF32[$71 >> 2] = $79;
    var $82 = $c_691 + 1 | 0;
    var $83 = ($82 | 0) < ($8 | 0);
    if ($83) {
      var $c_691 = $82;
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    if ($9) {
      var $c_795 = 0;
      label = 29;
      break;
    } else {
      var $95 = $8;
      label = 30;
      break;
    }
   case 29:
    var $c_795;
    var $84 = $cam + ($c_795 << 2) | 0;
    var $85 = HEAPF32[$84 >> 2];
    var $86 = $8 | 0;
    var $87 = $85 / $86;
    var $88 = $87 >= 0 ? Math.floor($87) : Math.ceil($87);
    var $89 = $_pre3 & 65535;
    var $90 = $89 * $row_0104 & -1;
    var $91 = $90 + $col_098 | 0;
    var $92 = $_pre6 + ($91 << 3) + ($c_795 << 1) | 0;
    HEAP16[$92 >> 1] = $88;
    var $93 = $c_795 + 1 | 0;
    var $94 = ($93 | 0) < ($8 | 0);
    if ($94) {
      var $c_795 = $93;
      label = 29;
      break;
    } else {
      var $95 = $8;
      label = 30;
      break;
    }
   case 30:
    var $95;
    var $96 = $col_098 + 1 | 0;
    var $97 = $_pre3 & 65535;
    var $98 = ($96 | 0) < ($97 | 0);
    if ($98) {
      var $col_098 = $96;
      var $23 = $95;
      label = 11;
      break;
    } else {
      var $100 = $_pre3;
      var $99 = $95;
      label = 31;
      break;
    }
   case 31:
    var $99;
    var $100;
    var $101 = $row_0104 + 1 | 0;
    var $102 = $10 & 65535;
    var $103 = ($101 | 0) < ($102 | 0);
    if ($103) {
      var $row_0104 = $101;
      var $21 = $100;
      var $20 = $99;
      label = 9;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    STACKTOP = __stackBase__;
    return;
   case 33:
    var $sum_sroa_0_1;
    var $104;
    var $105 = $8 - 3 | 0;
    var $c_367_1 = 0;
    label = 34;
    break;
   case 34:
    var $c_367_1;
    var $106 = $lab + 16 + ($c_367_1 << 2) | 0;
    HEAPF32[$106 >> 2] = 0;
    var $j_064_1 = 0;
    var $108 = 0;
    label = 35;
    break;
   case 35:
    var $108;
    var $j_064_1;
    var $109 = 5561144 + ($105 << 6) + ($c_367_1 << 4) + ($j_064_1 << 2) | 0;
    var $110 = HEAPF32[$109 >> 2];
    var $111 = $cam + 16 + ($j_064_1 << 2) | 0;
    var $112 = HEAPF32[$111 >> 2];
    var $113 = $110 * $112;
    var $114 = $108 + $113;
    var $115 = $j_064_1 + 1 | 0;
    var $exitcond_1 = ($115 | 0) == ($8 | 0);
    if ($exitcond_1) {
      label = 36;
      break;
    } else {
      var $j_064_1 = $115;
      var $108 = $114;
      label = 35;
      break;
    }
   case 36:
    HEAPF32[$106 >> 2] = $114;
    var $117 = $c_367_1 + 1 | 0;
    var $exitcond110_1 = ($117 | 0) == ($8 | 0);
    if ($exitcond110_1) {
      label = 37;
      break;
    } else {
      var $c_367_1 = $117;
      label = 34;
      break;
    }
   case 37:
    if ($104) {
      var $c_471_1 = 1;
      var $118 = 0;
      label = 38;
      break;
    } else {
      var $sum_sroa_0_3 = $sum_sroa_0_1;
      var $sum_sroa_1_0_load = 0;
      label = 39;
      break;
    }
   case 38:
    var $118;
    var $c_471_1;
    var $119 = $lab + 16 + ($c_471_1 << 2) | 0;
    var $120 = HEAPF32[$119 >> 2];
    var $121 = $120 * $120;
    var $122 = $118 + $121;
    var $123 = $c_471_1 + 1 | 0;
    var $exitcond113_1 = ($123 | 0) == ($8 | 0);
    if ($exitcond113_1) {
      var $sum_sroa_0_3 = $sum_sroa_0_1;
      var $sum_sroa_1_0_load = $122;
      label = 39;
      break;
    } else {
      var $c_471_1 = $123;
      var $118 = $122;
      label = 38;
      break;
    }
   case 39:
    var $sum_sroa_1_0_load;
    var $sum_sroa_0_3;
    var $124 = $sum_sroa_1_0_load / $sum_sroa_0_3;
    var $125 = Math.sqrt($124);
    var $126 = ($8 | 0) > 1;
    if ($126) {
      var $c_581 = 1;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
  }
}
_blend_highlights["X"] = 1;
function _recover_highlights() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $hsat = __stackBase__;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[_stderr >> 2];
    var $3 = _fwrite(5576544, 25, 1, $2);
    label = 4;
    break;
   case 4:
    var $5 = HEAP32[5398708 >> 2];
    var $6 = 4 - $5 | 0;
    var $exp2 = _ldexp(1, $6);
    var $7 = $exp2;
    var $8 = HEAP32[5560840 >> 2];
    var $9 = ($8 | 0) == 0;
    if ($9) {
      var $kc_0_lcssa = 0;
      label = 8;
      break;
    } else {
      var $c_0200 = 0;
      label = 6;
      break;
    }
   case 5:
    var $10 = $8 >>> 0 > 1;
    if ($10) {
      var $kc_0195 = 0;
      var $c_1196 = 1;
      label = 7;
      break;
    } else {
      var $kc_0_lcssa = 0;
      label = 8;
      break;
    }
   case 6:
    var $c_0200;
    var $11 = 5245640 + ($c_0200 << 2) | 0;
    var $12 = HEAPF32[$11 >> 2];
    var $13 = $12 * 32e3;
    var $14 = $13 & -1;
    var $15 = $hsat + ($c_0200 << 2) | 0;
    HEAP32[$15 >> 2] = $14;
    var $16 = $c_0200 + 1 | 0;
    var $17 = $16 >>> 0 < $8 >>> 0;
    if ($17) {
      var $c_0200 = $16;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 7:
    var $c_1196;
    var $kc_0195;
    var $18 = 5245640 + ($kc_0195 << 2) | 0;
    var $19 = HEAPF32[$18 >> 2];
    var $20 = 5245640 + ($c_1196 << 2) | 0;
    var $21 = HEAPF32[$20 >> 2];
    var $22 = $19 < $21;
    var $kc_1 = $22 ? $c_1196 : $kc_0195;
    var $23 = $c_1196 + 1 | 0;
    var $24 = $23 >>> 0 < $8 >>> 0;
    if ($24) {
      var $kc_0195 = $kc_1;
      var $c_1196 = $23;
      label = 7;
      break;
    } else {
      var $kc_0_lcssa = $kc_1;
      label = 8;
      break;
    }
   case 8:
    var $kc_0_lcssa;
    var $25 = HEAP16[5398712 >> 1];
    var $26 = $25 & 65535;
    var $27 = HEAP16[5244916 >> 1];
    var $28 = $27 & 65535;
    var $29 = 4 >>> ($28 >>> 0);
    var $30 = ($26 | 0) / ($29 | 0) & -1;
    var $31 = HEAP16[5242964 >> 1];
    var $32 = $31 & 65535;
    var $33 = ($32 | 0) / ($29 | 0) & -1;
    var $34 = $33 * $30 & -1;
    var $35 = _calloc($34, 4);
    var $36 = $35;
    _merror($35, 5576324);
    var $37 = HEAP32[5560840 >> 2];
    var $38 = ($37 | 0) == 0;
    if ($38) {
      label = 66;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $39 = $34 << 2;
    var $40 = ($30 | 0) == 0;
    var $41 = 32 / $7;
    var $42 = $41 & -1;
    var $43 = ($33 | 0) == 0;
    var $44 = ($34 | 0) == 0;
    var $c_2187 = 0;
    label = 10;
    break;
   case 10:
    var $c_2187;
    var $46 = ($c_2187 | 0) == ($kc_0_lcssa | 0);
    if ($46) {
      label = 65;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _memset($35, 0, $39);
    if ($40) {
      var $spread_0 = $42;
      label = 28;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $48 = $hsat + ($c_2187 << 2) | 0;
    var $mrow_0146 = 0;
    label = 13;
    break;
   case 13:
    var $mrow_0146;
    var $_pre8 = $mrow_0146 + 1 | 0;
    if ($43) {
      var $_pre_phi9 = $_pre8;
      label = 27;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $49 = $mrow_0146 * $33 & -1;
    var $_pre = HEAP16[5244916 >> 1];
    var $mcol_0143 = 0;
    label = 15;
    break;
   case 15:
    var $mcol_0143;
    var $51 = $_pre & 65535;
    var $52 = 4 >>> ($51 >>> 0);
    var $53 = $52 * $mrow_0146 & -1;
    var $54 = $52 * $_pre8 & -1;
    var $55 = $53 >>> 0 < $54 >>> 0;
    if ($55) {
      label = 16;
      break;
    } else {
      var $count_0_lcssa = 0;
      var $wgt_0_lcssa = 0;
      var $sum_0_lcssa = 0;
      label = 24;
      break;
    }
   case 16:
    var $56 = $mcol_0143 + 1 | 0;
    var $57 = $52 * $56 & -1;
    var $58 = HEAP16[5242964 >> 1];
    var $59 = $58 & 65535;
    var $60 = HEAP32[5264108 >> 2];
    var $count_0132 = 0;
    var $row_0133 = $53;
    var $wgt_0134 = 0;
    var $sum_0135 = 0;
    label = 17;
    break;
   case 17:
    var $sum_0135;
    var $wgt_0134;
    var $row_0133;
    var $count_0132;
    var $62 = $52 * $mcol_0143 & -1;
    var $63 = $62 >>> 0 < $57 >>> 0;
    if ($63) {
      label = 18;
      break;
    } else {
      var $count_1_lcssa = $count_0132;
      var $wgt_1_lcssa = $wgt_0134;
      var $sum_1_lcssa = $sum_0135;
      label = 23;
      break;
    }
   case 18:
    var $64 = $59 * $row_0133 & -1;
    var $65 = HEAP32[$48 >> 2];
    var $count_1126 = $count_0132;
    var $col_0127 = $62;
    var $wgt_1128 = $wgt_0134;
    var $sum_1129 = $sum_0135;
    label = 19;
    break;
   case 19:
    var $sum_1129;
    var $wgt_1128;
    var $col_0127;
    var $count_1126;
    var $67 = $64 + $col_0127 | 0;
    var $68 = $60 + ($67 << 3) + ($c_2187 << 1) | 0;
    var $69 = HEAP16[$68 >> 1];
    var $70 = $69 & 65535;
    var $71 = ($70 | 0) / ($65 | 0) & -1;
    var $72 = ($71 | 0) == 1;
    if ($72) {
      label = 20;
      break;
    } else {
      var $sum_2 = $sum_1129;
      var $wgt_2 = $wgt_1128;
      var $count_2 = $count_1126;
      label = 22;
      break;
    }
   case 20:
    var $74 = $60 + ($67 << 3) + ($kc_0_lcssa << 1) | 0;
    var $75 = HEAP16[$74 >> 1];
    var $76 = ($75 & 65535) > 24e3;
    if ($76) {
      label = 21;
      break;
    } else {
      var $sum_2 = $sum_1129;
      var $wgt_2 = $wgt_1128;
      var $count_2 = $count_1126;
      label = 22;
      break;
    }
   case 21:
    var $78 = $75 & 65535;
    var $79 = $70 | 0;
    var $80 = $sum_1129 + $79;
    var $81 = $78 | 0;
    var $82 = $wgt_1128 + $81;
    var $83 = $count_1126 + 1 | 0;
    var $sum_2 = $80;
    var $wgt_2 = $82;
    var $count_2 = $83;
    label = 22;
    break;
   case 22:
    var $count_2;
    var $wgt_2;
    var $sum_2;
    var $85 = $col_0127 + 1 | 0;
    var $86 = $85 >>> 0 < $57 >>> 0;
    if ($86) {
      var $count_1126 = $count_2;
      var $col_0127 = $85;
      var $wgt_1128 = $wgt_2;
      var $sum_1129 = $sum_2;
      label = 19;
      break;
    } else {
      var $count_1_lcssa = $count_2;
      var $wgt_1_lcssa = $wgt_2;
      var $sum_1_lcssa = $sum_2;
      label = 23;
      break;
    }
   case 23:
    var $sum_1_lcssa;
    var $wgt_1_lcssa;
    var $count_1_lcssa;
    var $87 = $row_0133 + 1 | 0;
    var $88 = $87 >>> 0 < $54 >>> 0;
    if ($88) {
      var $count_0132 = $count_1_lcssa;
      var $row_0133 = $87;
      var $wgt_0134 = $wgt_1_lcssa;
      var $sum_0135 = $sum_1_lcssa;
      label = 17;
      break;
    } else {
      var $count_0_lcssa = $count_1_lcssa;
      var $wgt_0_lcssa = $wgt_1_lcssa;
      var $sum_0_lcssa = $sum_1_lcssa;
      label = 24;
      break;
    }
   case 24:
    var $sum_0_lcssa;
    var $wgt_0_lcssa;
    var $count_0_lcssa;
    var $89 = $52 * $52 & -1;
    var $90 = ($count_0_lcssa | 0) == ($89 | 0);
    if ($90) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $92 = $sum_0_lcssa / $wgt_0_lcssa;
    var $93 = $mcol_0143 + $49 | 0;
    var $94 = $36 + ($93 << 2) | 0;
    HEAPF32[$94 >> 2] = $92;
    label = 26;
    break;
   case 26:
    var $96 = $mcol_0143 + 1 | 0;
    var $exitcond = ($96 | 0) == ($33 | 0);
    if ($exitcond) {
      var $_pre_phi9 = $_pre8;
      label = 27;
      break;
    } else {
      var $mcol_0143 = $96;
      label = 15;
      break;
    }
   case 27:
    var $_pre_phi9;
    var $exitcond203 = ($_pre_phi9 | 0) == ($30 | 0);
    if ($exitcond203) {
      var $spread_0 = $42;
      label = 28;
      break;
    } else {
      var $mrow_0146 = $_pre_phi9;
      label = 13;
      break;
    }
   case 28:
    var $spread_0;
    var $97 = $spread_0 - 1 | 0;
    var $98 = ($spread_0 | 0) == 0;
    if ($98) {
      label = 46;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    if ($40) {
      label = 41;
      break;
    } else {
      var $mrow_1159 = 0;
      label = 30;
      break;
    }
   case 30:
    var $mrow_1159;
    if ($43) {
      label = 40;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $99 = $mrow_1159 * $33 & -1;
    var $mcol_1154 = 0;
    label = 32;
    break;
   case 32:
    var $mcol_1154;
    var $101 = $mcol_1154 + $99 | 0;
    var $102 = $36 + ($101 << 2) | 0;
    var $103 = HEAPF32[$102 >> 2];
    var $104 = $103 != 0;
    if ($104) {
      label = 39;
      break;
    } else {
      var $count_3150 = 0;
      var $d_0151 = 0;
      var $sum_3152 = 0;
      label = 33;
      break;
    }
   case 33:
    var $sum_3152;
    var $d_0151;
    var $count_3150;
    var $105 = 5245012 + ($d_0151 << 1) | 0;
    var $106 = HEAP8[$105];
    var $107 = $106 << 24 >> 24;
    var $108 = $107 + $mrow_1159 | 0;
    var $109 = 5245013 + ($d_0151 << 1) | 0;
    var $110 = HEAP8[$109];
    var $111 = $110 << 24 >> 24;
    var $112 = $111 + $mcol_1154 | 0;
    var $113 = $108 >>> 0 < $30 >>> 0;
    var $114 = $112 >>> 0 < $33 >>> 0;
    var $or_cond = $113 & $114;
    if ($or_cond) {
      label = 34;
      break;
    } else {
      var $sum_4 = $sum_3152;
      var $count_4 = $count_3150;
      label = 36;
      break;
    }
   case 34:
    var $116 = $108 * $33 & -1;
    var $117 = $116 + $112 | 0;
    var $118 = $36 + ($117 << 2) | 0;
    var $119 = HEAPF32[$118 >> 2];
    var $120 = $119 > 0;
    if ($120) {
      label = 35;
      break;
    } else {
      var $sum_4 = $sum_3152;
      var $count_4 = $count_3150;
      label = 36;
      break;
    }
   case 35:
    var $122 = $d_0151 & 1;
    var $123 = $122 + 1 | 0;
    var $124 = $123 >>> 0;
    var $125 = $124 * $119;
    var $126 = $sum_3152 + $125;
    var $127 = $123 + $count_3150 | 0;
    var $sum_4 = $126;
    var $count_4 = $127;
    label = 36;
    break;
   case 36:
    var $count_4;
    var $sum_4;
    var $129 = $d_0151 + 1 | 0;
    var $exitcond204 = ($129 | 0) == 8;
    if ($exitcond204) {
      label = 37;
      break;
    } else {
      var $count_3150 = $count_4;
      var $d_0151 = $129;
      var $sum_3152 = $sum_4;
      label = 33;
      break;
    }
   case 37:
    var $131 = ($count_4 | 0) > 3;
    if ($131) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $133 = $7 + $sum_4;
    var $134 = -$133;
    var $135 = $count_4 | 0;
    var $136 = $7 + $135;
    var $137 = $134 / $136;
    HEAPF32[$102 >> 2] = $137;
    label = 39;
    break;
   case 39:
    var $139 = $mcol_1154 + 1 | 0;
    var $exitcond205 = ($139 | 0) == ($33 | 0);
    if ($exitcond205) {
      label = 40;
      break;
    } else {
      var $mcol_1154 = $139;
      label = 32;
      break;
    }
   case 40:
    var $140 = $mrow_1159 + 1 | 0;
    var $exitcond206 = ($140 | 0) == ($30 | 0);
    if ($exitcond206) {
      label = 41;
      break;
    } else {
      var $mrow_1159 = $140;
      label = 30;
      break;
    }
   case 41:
    if ($44) {
      label = 50;
      break;
    } else {
      var $change_0161 = 0;
      var $i_0162 = 0;
      label = 42;
      break;
    }
   case 42:
    var $i_0162;
    var $change_0161;
    var $141 = $36 + ($i_0162 << 2) | 0;
    var $142 = HEAPF32[$141 >> 2];
    var $143 = $142 < 0;
    if ($143) {
      label = 43;
      break;
    } else {
      var $change_1 = $change_0161;
      label = 44;
      break;
    }
   case 43:
    var $145 = -$142;
    HEAPF32[$141 >> 2] = $145;
    var $change_1 = 1;
    label = 44;
    break;
   case 44:
    var $change_1;
    var $147 = $i_0162 + 1 | 0;
    var $exitcond207 = ($147 | 0) == ($34 | 0);
    if ($exitcond207) {
      label = 45;
      break;
    } else {
      var $change_0161 = $change_1;
      var $i_0162 = $147;
      label = 42;
      break;
    }
   case 45:
    var $148 = ($change_1 | 0) == 0;
    if ($148) {
      label = 46;
      break;
    } else {
      var $spread_0 = $97;
      label = 28;
      break;
    }
   case 46:
    if ($44) {
      label = 50;
      break;
    } else {
      var $i_1168 = 0;
      label = 47;
      break;
    }
   case 47:
    var $i_1168;
    var $149 = $36 + ($i_1168 << 2) | 0;
    var $150 = HEAPF32[$149 >> 2];
    var $151 = $150 == 0;
    if ($151) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    HEAPF32[$149 >> 2] = 1;
    label = 49;
    break;
   case 49:
    var $154 = $i_1168 + 1 | 0;
    var $exitcond208 = ($154 | 0) == ($34 | 0);
    if ($exitcond208) {
      label = 50;
      break;
    } else {
      var $i_1168 = $154;
      label = 47;
      break;
    }
   case 50:
    if ($40) {
      label = 65;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $155 = $hsat + ($c_2187 << 2) | 0;
    var $mrow_2185 = 0;
    label = 52;
    break;
   case 52:
    var $mrow_2185;
    var $_pre5 = $mrow_2185 + 1 | 0;
    if ($43) {
      var $_pre_phi = $_pre5;
      label = 64;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $156 = $mrow_2185 * $33 & -1;
    var $_pre2 = HEAP16[5244916 >> 1];
    var $mcol_2180 = 0;
    label = 54;
    break;
   case 54:
    var $mcol_2180;
    var $158 = $_pre2 & 65535;
    var $159 = 4 >>> ($158 >>> 0);
    var $160 = $159 * $mrow_2185 & -1;
    var $161 = $159 * $_pre5 & -1;
    var $162 = $160 >>> 0 < $161 >>> 0;
    var $163 = $mcol_2180 + 1 | 0;
    if ($162) {
      label = 55;
      break;
    } else {
      var $_pre_phi7 = $163;
      label = 63;
      break;
    }
   case 55:
    var $164 = $mcol_2180 + $156 | 0;
    var $165 = $36 + ($164 << 2) | 0;
    var $row_1174 = $160;
    label = 56;
    break;
   case 56:
    var $row_1174;
    var $167 = $159 * $mcol_2180 & -1;
    var $168 = $159 * $163 & -1;
    var $169 = $167 >>> 0 < $168 >>> 0;
    if ($169) {
      label = 57;
      break;
    } else {
      label = 62;
      break;
    }
   case 57:
    var $170 = HEAP32[$155 >> 2];
    var $_pre3 = HEAP16[5242964 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_1170 = $167;
    label = 58;
    break;
   case 58:
    var $col_1170;
    var $172 = $_pre3 & 65535;
    var $173 = $172 * $row_1174 & -1;
    var $174 = $173 + $col_1170 | 0;
    var $175 = $_pre4 + ($174 << 3) + ($c_2187 << 1) | 0;
    var $176 = HEAP16[$175 >> 1];
    var $177 = $176 & 65535;
    var $178 = ($177 | 0) / ($170 | 0) & -1;
    var $179 = ($178 | 0) > 1;
    if ($179) {
      label = 59;
      break;
    } else {
      label = 61;
      break;
    }
   case 59:
    var $181 = $_pre4 + ($174 << 3) + ($kc_0_lcssa << 1) | 0;
    var $182 = HEAP16[$181 >> 1];
    var $183 = $182 & 65535;
    var $184 = $183 | 0;
    var $185 = HEAPF32[$165 >> 2];
    var $186 = $185 * $184;
    var $187 = $186 & -1;
    var $188 = ($177 | 0) < ($187 | 0);
    if ($188) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $190 = ($187 | 0) < 65535;
    var $191 = $190 ? $187 : 65535;
    var $192 = ($191 | 0) < 0;
    var $phitmp = $191 & 65535;
    var $_phitmp = $192 ? 0 : $phitmp;
    HEAP16[$175 >> 1] = $_phitmp;
    label = 61;
    break;
   case 61:
    var $194 = $col_1170 + 1 | 0;
    var $195 = $194 >>> 0 < $168 >>> 0;
    if ($195) {
      var $col_1170 = $194;
      label = 58;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $196 = $row_1174 + 1 | 0;
    var $197 = $196 >>> 0 < $161 >>> 0;
    if ($197) {
      var $row_1174 = $196;
      label = 56;
      break;
    } else {
      var $_pre_phi7 = $163;
      label = 63;
      break;
    }
   case 63:
    var $_pre_phi7;
    var $exitcond209 = ($_pre_phi7 | 0) == ($33 | 0);
    if ($exitcond209) {
      var $_pre_phi = $_pre5;
      label = 64;
      break;
    } else {
      var $mcol_2180 = $_pre_phi7;
      label = 54;
      break;
    }
   case 64:
    var $_pre_phi;
    var $exitcond210 = ($_pre_phi | 0) == ($30 | 0);
    if ($exitcond210) {
      label = 65;
      break;
    } else {
      var $mrow_2185 = $_pre_phi;
      label = 52;
      break;
    }
   case 65:
    var $198 = $c_2187 + 1 | 0;
    var $199 = $198 >>> 0 < $37 >>> 0;
    if ($199) {
      var $c_2187 = $198;
      label = 10;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    _free($35);
    STACKTOP = __stackBase__;
    return;
  }
}
_recover_highlights["X"] = 1;
function _tiff_get($base, $tag, $type, $len, $save) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = _get2();
    var $2 = $1 & 65535;
    HEAP32[$tag >> 2] = $2;
    var $3 = _get2();
    var $4 = $3 & 65535;
    HEAP32[$type >> 2] = $4;
    var $5 = _get4();
    HEAP32[$len >> 2] = $5;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _ftell($6);
    var $8 = $7 + 4 | 0;
    HEAP32[$save >> 2] = $8;
    var $9 = HEAP32[$len >> 2];
    var $10 = HEAP32[$type >> 2];
    var $11 = $10 >>> 0 < 14;
    var $_ = $11 ? $10 : 0;
    var $12 = $_ + 5576084 | 0;
    var $13 = HEAP8[$12];
    var $14 = $13 << 24 >> 24;
    var $15 = $14 - 48 | 0;
    var $16 = $15 * $9 & -1;
    var $17 = $16 >>> 0 > 4;
    if ($17) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $19 = HEAP32[5264116 >> 2];
    var $20 = _get4();
    var $21 = $20 + $base | 0;
    var $22 = _fseek($19, $21, 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _parse_thumb_note($base, $toff, $tlen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $1 = _get2();
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $1 & 65535;
    var $_in = $3;
    label = 4;
    break;
   case 4:
    var $_in;
    var $5 = $_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $6 = HEAP32[$tag >> 2];
    var $7 = ($6 | 0) == ($toff | 0);
    if ($7) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $9 = _get4();
    var $10 = $9 + $base | 0;
    HEAP32[5244044 >> 2] = $10;
    label = 6;
    break;
   case 6:
    var $12 = ($6 | 0) == ($tlen | 0);
    if ($12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $14 = _get4();
    HEAP32[5244056 >> 2] = $14;
    label = 8;
    break;
   case 8:
    var $16 = HEAP32[5264116 >> 2];
    var $17 = HEAP32[$save >> 2];
    var $18 = _fseek($16, $17, 0);
    var $19 = ($5 | 0) == 0;
    if ($19) {
      label = 9;
      break;
    } else {
      var $_in = $5;
      label = 4;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_makernote($base, $uptag) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 352 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $buf97 = __stackBase__ + 16;
    var $buf = __stackBase__ + 340;
    var $1 = HEAP16[5262944 >> 1];
    var $2 = _strcmp(5263628, 5575800);
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 222;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $buf | 0;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fread($5, 1, 10, $6);
    var $8 = _strncmp($5, 5575320, 3);
    var $9 = ($8 | 0) == 0;
    if ($9) {
      label = 222;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $11 = _strncmp($5, 5574796, 3);
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 222;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $14 = _strncmp($5, 5574308, 4);
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 222;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $17 = _strncmp($5, 5574080, 4);
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 222;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $20 = _strncmp($5, 5573936, 2);
    var $21 = ($20 | 0) == 0;
    if ($21) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $23 = _strncmp($5, 5573736, 3);
    var $24 = ($23 | 0) == 0;
    if ($24) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    HEAP16[5262944 >> 1] = 19789;
    var $26 = HEAP32[5264116 >> 2];
    var $27 = _ftell($26);
    var $28 = HEAP32[5428492 >> 2];
    var $29 = $27 >>> 0 < $28 >>> 0;
    var $30 = $27 >>> 0 < 16384;
    var $or_cond131264 = $29 & $30;
    if ($or_cond131264) {
      var $wb_sroa_1_0 = 0;
      var $wb_sroa_2_0 = 0;
      var $wb_sroa_3_0 = 0;
      label = 10;
      break;
    } else {
      label = 221;
      break;
    }
   case 10:
    var $wb_sroa_3_0;
    var $wb_sroa_2_0;
    var $wb_sroa_1_0;
    var $31 = _get2();
    var $32 = $31 & 65535;
    var $33 = ($wb_sroa_3_0 | 0) == 256;
    var $34 = $31 << 16 >> 16 == 256;
    var $or_cond132 = $33 & $34;
    if ($or_cond132) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $_off261 = $wb_sroa_2_0 - 257 | 0;
    var $36 = $_off261 >>> 0 < 383;
    var $_off262 = $wb_sroa_1_0 - 257 | 0;
    var $37 = $_off262 >>> 0 < 383;
    var $or_cond218 = $36 & $37;
    if ($or_cond218) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $38 = HEAP32[5264116 >> 2];
    var $39 = _ftell($38);
    var $40 = HEAP32[5428492 >> 2];
    var $41 = $39 >>> 0 < $40 >>> 0;
    var $42 = $39 >>> 0 < 16384;
    var $or_cond131 = $41 & $42;
    if ($or_cond131) {
      var $wb_sroa_2_0 = $wb_sroa_1_0;
      var $wb_sroa_1_0 = $wb_sroa_3_0;
      var $wb_sroa_3_0 = $32;
      label = 10;
      break;
    } else {
      label = 221;
      break;
    }
   case 13:
    var $43 = $wb_sroa_2_0 >>> 0;
    HEAPF32[5561124 >> 2] = $43;
    HEAPF32[5561128 >> 2] = 256;
    var $44 = $wb_sroa_1_0 >>> 0;
    HEAPF32[5561132 >> 2] = $44;
    var $45 = $31 & 65535;
    HEAPF32[5561136 >> 2] = $45;
    label = 12;
    break;
   case 14:
    var $47 = _strcmp($5, 5573488);
    var $48 = ($47 | 0) == 0;
    if ($48) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    var $50 = HEAP32[5264116 >> 2];
    var $51 = _ftell($50);
    var $52 = _get2();
    HEAP16[5262944 >> 1] = $52;
    var $53 = _get2();
    var $54 = $53 << 16 >> 16 == 42;
    if ($54) {
      label = 16;
      break;
    } else {
      label = 221;
      break;
    }
   case 16:
    var $56 = _get4();
    var $57 = HEAP32[5264116 >> 2];
    var $58 = $56 - 8 | 0;
    var $59 = _fseek($57, $58, 1);
    var $_1 = $51;
    label = 34;
    break;
   case 17:
    var $61 = _strcmp($5, 5573348);
    var $62 = ($61 | 0) == 0;
    if ($62) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $64 = HEAP32[5264116 >> 2];
    var $65 = _ftell($64);
    var $66 = $65 - 10 | 0;
    var $67 = HEAP32[5264116 >> 2];
    var $68 = _fseek($67, -2, 1);
    var $69 = _get2();
    HEAP16[5262944 >> 1] = $69;
    var $70 = _get2();
    var $_1 = $66;
    label = 34;
    break;
   case 19:
    var $72 = _strncmp($5, 5573340, 4);
    var $73 = ($72 | 0) == 0;
    if ($73) {
      var $_0 = $base;
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $75 = _strcmp($5, 5573328);
    var $76 = ($75 | 0) == 0;
    if ($76) {
      var $_0 = $base;
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $78 = _strncmp($5, 5573316, 8);
    var $79 = ($78 | 0) == 0;
    if ($79) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $81 = HEAP32[5264116 >> 2];
    var $82 = _ftell($81);
    var $83 = $82 - 10 | 0;
    var $_0 = $83;
    label = 23;
    break;
   case 23:
    var $_0;
    HEAP16[5262944 >> 1] = 18761;
    var $85 = HEAP32[5264116 >> 2];
    var $86 = _fseek($85, 2, 1);
    var $_1 = $_0;
    label = 34;
    break;
   case 24:
    var $88 = _strcmp($5, 5573308);
    var $89 = ($88 | 0) == 0;
    if ($89) {
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $91 = _strcmp($5, 5573300);
    var $92 = ($91 | 0) == 0;
    if ($92) {
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $94 = _strcmp($5, 5573292);
    var $95 = ($94 | 0) == 0;
    if ($95) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $97 = _strcmp($5, 5573284);
    var $98 = ($97 | 0) == 0;
    if ($98) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $100 = HEAP32[5264116 >> 2];
    var $101 = _fseek($100, -2, 1);
    var $_1 = $base;
    label = 34;
    break;
   case 29:
    var $103 = _strcmp($5, 5573280);
    var $104 = ($103 | 0) == 0;
    if ($104) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $106 = _strcmp($5, 5587540);
    var $107 = ($106 | 0) == 0;
    if ($107) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $109 = HEAP32[5264116 >> 2];
    var $110 = _fseek($109, -4, 1);
    var $_1 = $base;
    label = 34;
    break;
   case 32:
    var $112 = HEAP32[5264116 >> 2];
    var $113 = _fseek($112, -10, 1);
    var $114 = _strncmp(5263628, 5587532, 7);
    var $115 = ($114 | 0) == 0;
    if ($115) {
      label = 33;
      break;
    } else {
      var $_1 = $base;
      label = 34;
      break;
    }
   case 33:
    var $117 = HEAP32[5264116 >> 2];
    var $118 = _ftell($117);
    var $_1 = $118;
    label = 34;
    break;
   case 34:
    var $_1;
    var $120 = _get2();
    var $121 = ($120 & 65535) > 1e3;
    if ($121) {
      label = 222;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $123 = HEAP16[5262944 >> 1];
    var $124 = $120 << 16 >> 16 == 0;
    if ($124) {
      label = 221;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $125 = $120 & 65535;
    var $126 = $uptag << 16;
    var $127 = $buf + 4 | 0;
    var $128 = $buf97 | 0;
    var $ver97_0309 = 0;
    var $serial_0310 = 0;
    var $wbi_0311 = 0;
    var $_in = $125;
    label = 37;
    break;
   case 37:
    var $_in;
    var $wbi_0311;
    var $serial_0310;
    var $ver97_0309;
    var $130 = $_in - 1 | 0;
    HEAP16[5262944 >> 1] = $123;
    _tiff_get($_1, $tag, $type, $len, $save);
    var $131 = HEAP32[$tag >> 2];
    var $132 = $131 | $126;
    HEAP32[$tag >> 2] = $132;
    var $133 = ($132 | 0) == 2;
    if ($133) {
      label = 38;
      break;
    } else {
      var $143 = $132;
      label = 40;
      break;
    }
   case 38:
    var $135 = _strstr(5263628, 5587524);
    var $136 = ($135 | 0) == 0;
    var $137 = HEAPF32[5264096 >> 2];
    var $138 = $137 != 0;
    var $or_cond = $136 | $138;
    if ($or_cond) {
      var $wbi_1414547495355 = $wbi_0311;
      label = 81;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $140 = _get2();
    var $141 = _get2();
    var $142 = $141 & 65535;
    HEAPF32[5264096 >> 2] = $142;
    var $_pr_pre = HEAP32[$tag >> 2];
    var $143 = $_pr_pre;
    label = 40;
    break;
   case 40:
    var $143;
    var $144 = ($143 | 0) == 4;
    if ($144) {
      label = 41;
      break;
    } else {
      var $wbi_1 = $wbi_0311;
      var $187 = $143;
      label = 49;
      break;
    }
   case 41:
    var $146 = HEAP32[$len >> 2];
    var $_off = $146 - 27 | 0;
    var $147 = $_off >>> 0 < 8;
    if ($147) {
      label = 42;
      break;
    } else {
      var $188 = 4;
      var $wbi_143 = $wbi_0311;
      label = 50;
      break;
    }
   case 42:
    var $149 = _get4();
    var $150 = _get2();
    var $151 = $150 << 16 >> 16 == 32767;
    var $152 = HEAPF32[5264096 >> 2];
    var $153 = $152 != 0;
    var $or_cond5 = $151 | $153;
    if ($or_cond5) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $155 = $150 & 65535;
    var $156 = $155 * .03125;
    var $157 = $156 - 4;
    var $exp2 = _exp2($157);
    var $158 = $exp2 * 50;
    var $159 = $158;
    HEAPF32[5264096 >> 2] = $159;
    label = 44;
    break;
   case 44:
    var $161 = _get2();
    var $162 = _get2();
    var $163 = $162 << 16 >> 16 == 32767;
    var $164 = HEAPF32[5561468 >> 2];
    var $165 = $164 != 0;
    var $or_cond7 = $163 | $165;
    if ($or_cond7) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $167 = $162 & 65535;
    var $168 = $167 * .015625;
    var $exp2135 = _exp2($168);
    var $169 = $exp2135;
    HEAPF32[5561468 >> 2] = $169;
    label = 46;
    break;
   case 46:
    var $171 = _get2();
    var $172 = $171 << 16 >> 16 == -1;
    var $173 = HEAPF32[5244912 >> 2];
    var $174 = $173 != 0;
    var $or_cond9 = $172 | $174;
    if ($or_cond9) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $176 = $171 << 16 >> 16;
    var $177 = $176 * -.03125;
    var $exp2136 = _exp2($177);
    var $178 = $exp2136;
    HEAPF32[5244912 >> 2] = $178;
    label = 48;
    break;
   case 48:
    var $180 = _get2();
    var $181 = _get2();
    var $182 = $181 & 65535;
    var $183 = _get2();
    var $184 = _get2();
    var $185 = $184 & 65535;
    HEAP32[5244924 >> 2] = $185;
    var $_pre = HEAP32[$tag >> 2];
    var $wbi_1 = $182;
    var $187 = $_pre;
    label = 49;
    break;
   case 49:
    var $187;
    var $wbi_1;
    if (($187 | 0) == 276 | ($187 | 0) == 4) {
      var $188 = $187;
      var $wbi_143 = $wbi_1;
      label = 50;
      break;
    } else {
      var $202 = $187;
      var $wbi_141 = $wbi_1;
      label = 56;
      break;
    }
   case 50:
    var $wbi_143;
    var $188;
    var $189 = _strncmp(5263628, 5587516, 6);
    var $190 = ($189 | 0) == 0;
    if ($190) {
      label = 51;
      break;
    } else {
      label = 55;
      break;
    }
   case 51:
    var $192 = HEAP32[5264116 >> 2];
    var $193 = ($188 | 0) == 4;
    var $194 = $193 ? 140 : 160;
    var $195 = _fseek($192, $194, 1);
    var $196 = _get2();
    var $197 = $196 & 65535;
    if (($197 | 0) == 72) {
      label = 52;
      break;
    } else if (($197 | 0) == 76) {
      label = 53;
      break;
    } else if (($197 | 0) == 82) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 52:
    HEAP32[5403048 >> 2] = 0;
    label = 55;
    break;
   case 53:
    HEAP32[5403048 >> 2] = 6;
    label = 55;
    break;
   case 54:
    HEAP32[5403048 >> 2] = 5;
    label = 55;
    break;
   case 55:
    var $_pr138 = HEAP32[$tag >> 2];
    var $202 = $_pr138;
    var $wbi_141 = $wbi_143;
    label = 56;
    break;
   case 56:
    var $wbi_141;
    var $202;
    var $203 = ($202 | 0) == 7;
    if ($203) {
      label = 57;
      break;
    } else {
      var $214 = $202;
      var $wbi_14145 = $wbi_141;
      label = 60;
      break;
    }
   case 57:
    var $205 = HEAP32[$type >> 2];
    var $206 = ($205 | 0) == 2;
    if ($206) {
      label = 58;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_141;
      label = 81;
      break;
    }
   case 58:
    var $208 = HEAP32[$len >> 2];
    var $209 = $208 >>> 0 > 20;
    if ($209) {
      label = 59;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_141;
      label = 81;
      break;
    }
   case 59:
    var $211 = HEAP32[5264116 >> 2];
    var $212 = _fgets(5263308, 64, $211);
    var $_pre10 = HEAP32[$tag >> 2];
    var $214 = $_pre10;
    var $wbi_14145 = $wbi_141;
    label = 60;
    break;
   case 60:
    var $wbi_14145;
    var $214;
    var $215 = ($214 | 0) == 8;
    if ($215) {
      label = 61;
      break;
    } else {
      var $221 = $214;
      var $wbi_1414547 = $wbi_14145;
      label = 63;
      break;
    }
   case 61:
    var $217 = HEAP32[$type >> 2];
    var $218 = ($217 | 0) == 4;
    if ($218) {
      label = 62;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145;
      label = 81;
      break;
    }
   case 62:
    var $220 = _get4();
    HEAP32[5244924 >> 2] = $220;
    var $_pr140_pre = HEAP32[$tag >> 2];
    var $221 = $_pr140_pre;
    var $wbi_1414547 = $wbi_14145;
    label = 63;
    break;
   case 63:
    var $wbi_1414547;
    var $221;
    var $222 = ($221 | 0) == 9;
    if ($222) {
      label = 64;
      break;
    } else {
      var $230 = $221;
      var $wbi_141454749 = $wbi_1414547;
      label = 66;
      break;
    }
   case 64:
    var $224 = _strcmp(5263628, 5587508);
    var $225 = ($224 | 0) == 0;
    if ($225) {
      label = 65;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_1414547;
      label = 81;
      break;
    }
   case 65:
    var $227 = HEAP32[5264116 >> 2];
    var $228 = _fread(5561404, 64, 1, $227);
    var $_pre12 = HEAP32[$tag >> 2];
    var $230 = $_pre12;
    var $wbi_141454749 = $wbi_1414547;
    label = 66;
    break;
   case 66:
    var $wbi_141454749;
    var $230;
    var $231 = ($230 | 0) == 12;
    if ($231) {
      label = 67;
      break;
    } else {
      var $242 = $230;
      var $wbi_14145474953 = $wbi_141454749;
      label = 69;
      break;
    }
   case 67:
    var $233 = HEAP32[$len >> 2];
    var $234 = ($233 | 0) == 4;
    if ($234) {
      label = 68;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_141454749;
      label = 81;
      break;
    }
   case 68:
    var $236 = HEAP32[$type >> 2];
    var $237 = _getreal($236);
    var $238 = $237;
    HEAPF32[5561124 >> 2] = $238;
    var $239 = HEAP32[$type >> 2];
    var $240 = _getreal($239);
    var $241 = $240;
    HEAPF32[5561132 >> 2] = $241;
    var $_pr142_pre = HEAP32[$tag >> 2];
    var $242 = $_pr142_pre;
    var $wbi_14145474953 = $wbi_141454749;
    label = 69;
    break;
   case 69:
    var $wbi_14145474953;
    var $242;
    var $243 = ($242 | 0) == 13;
    if ($243) {
      label = 70;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145474953;
      label = 81;
      break;
    }
   case 70:
    var $245 = HEAP32[$type >> 2];
    var $246 = ($245 | 0) == 7;
    if ($246) {
      label = 71;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145474953;
      label = 81;
      break;
    }
   case 71:
    var $248 = _get2();
    var $249 = $248 << 16 >> 16 == -21846;
    if ($249) {
      var $c_1266 = 2;
      var $i_0267 = 2;
      label = 72;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145474953;
      label = 81;
      break;
    }
   case 72:
    var $i_0267;
    var $c_1266;
    var $250 = HEAP32[$len >> 2];
    var $251 = $i_0267 >>> 0 < $250 >>> 0;
    if ($251) {
      label = 73;
      break;
    } else {
      var $i_0_lcssa = $i_0267;
      var $260 = $250;
      label = 75;
      break;
    }
   case 73:
    var $253 = $c_1266 << 8;
    var $254 = HEAP32[5264116 >> 2];
    var $255 = _fgetc($254);
    var $256 = $255 | $253;
    var $257 = $i_0267 + 1 | 0;
    var $258 = $256 & 65535;
    var $259 = ($258 | 0) == 48059;
    if ($259) {
      label = 74;
      break;
    } else {
      var $c_1266 = $256;
      var $i_0267 = $257;
      label = 72;
      break;
    }
   case 74:
    var $_pre38 = HEAP32[$len >> 2];
    var $i_0_lcssa = $257;
    var $260 = $_pre38;
    label = 75;
    break;
   case 75:
    var $260;
    var $i_0_lcssa;
    var $261 = $i_0_lcssa + 4 | 0;
    var $262 = $260 - 5 | 0;
    var $263 = $261 >>> 0 < $262 >>> 0;
    if ($263) {
      var $264 = $261;
      label = 76;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145474953;
      label = 81;
      break;
    }
   case 76:
    var $264;
    var $265 = _get4();
    var $266 = ($265 | 0) == 257;
    if ($266) {
      label = 77;
      break;
    } else {
      var $i_1_be = $264;
      label = 80;
      break;
    }
   case 77:
    var $268 = HEAP32[$len >> 2];
    var $269 = ($268 | 0) == 0;
    if ($269) {
      var $i_1_be = 0;
      label = 80;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    var $271 = _get4();
    var $272 = HEAP32[5264116 >> 2];
    var $273 = _fgetc($272);
    var $274 = $273 >>> 0 < 3;
    if ($274) {
      label = 79;
      break;
    } else {
      var $i_1_be = $268;
      label = 80;
      break;
    }
   case 79:
    var $276 = $273 + 5587504 | 0;
    var $277 = HEAP8[$276];
    var $278 = $277 << 24 >> 24;
    var $279 = $278 - 48 | 0;
    HEAP32[5403048 >> 2] = $279;
    var $i_1_be = $268;
    label = 80;
    break;
   case 80:
    var $i_1_be;
    var $280 = $i_1_be + 4 | 0;
    var $281 = HEAP32[$len >> 2];
    var $282 = $281 - 5 | 0;
    var $283 = $280 >>> 0 < $282 >>> 0;
    if ($283) {
      var $264 = $280;
      label = 76;
      break;
    } else {
      var $wbi_1414547495355 = $wbi_14145474953;
      label = 81;
      break;
    }
   case 81:
    var $wbi_1414547495355;
    var $284 = HEAP32[$tag >> 2];
    var $285 = ($284 | 0) == 16;
    if ($285) {
      label = 82;
      break;
    } else {
      var $292 = $284;
      label = 84;
      break;
    }
   case 82:
    var $287 = HEAP32[$type >> 2];
    var $288 = ($287 | 0) == 4;
    if ($288) {
      label = 83;
      break;
    } else {
      label = 93;
      break;
    }
   case 83:
    var $290 = _get4();
    HEAP32[5243560 >> 2] = $290;
    var $_pre14 = HEAP32[$tag >> 2];
    var $292 = $_pre14;
    label = 84;
    break;
   case 84:
    var $292;
    var $293 = ($292 | 0) == 17;
    var $294 = HEAP32[5264100 >> 2];
    var $295 = ($294 | 0) != 0;
    var $or_cond14 = $293 & $295;
    if ($or_cond14) {
      label = 85;
      break;
    } else {
      var $305 = $292;
      label = 87;
      break;
    }
   case 85:
    var $297 = _strncmp(5263628, 5587524, 5);
    var $298 = ($297 | 0) == 0;
    if ($298) {
      label = 86;
      break;
    } else {
      label = 93;
      break;
    }
   case 86:
    var $300 = HEAP32[5264116 >> 2];
    var $301 = _get4();
    var $302 = $301 + $_1 | 0;
    var $303 = _fseek($300, $302, 0);
    var $304 = _parse_tiff_ifd($_1);
    var $_pr144_pre = HEAP32[$tag >> 2];
    var $305 = $_pr144_pre;
    label = 87;
    break;
   case 87:
    var $305;
    var $306 = ($305 | 0) == 20;
    if ($306) {
      label = 88;
      break;
    } else {
      label = 93;
      break;
    }
   case 88:
    var $308 = HEAP32[$type >> 2];
    var $309 = ($308 | 0) == 7;
    if ($309) {
      label = 89;
      break;
    } else {
      label = 93;
      break;
    }
   case 89:
    var $311 = HEAP32[$len >> 2];
    var $312 = ($311 | 0) == 2560;
    var $313 = HEAP32[5264116 >> 2];
    if ($312) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    var $315 = _fseek($313, 1248, 1);
    var $serial_3 = $serial_0310;
    var $ver97_3 = $ver97_0309;
    label = 196;
    break;
   case 91:
    var $317 = _fread($5, 1, 10, $313);
    var $318 = _strncmp($5, 5587496, 4);
    var $319 = ($318 | 0) == 0;
    if ($319) {
      label = 92;
      break;
    } else {
      label = 93;
      break;
    }
   case 92:
    var $321 = HEAP32[5264116 >> 2];
    var $322 = _strcmp($127, 5587488);
    var $323 = ($322 | 0) != 0;
    var $324 = $323 ? 46 : 1546;
    var $325 = _fseek($321, $324, 1);
    var $326 = _get4();
    var $327 = $326 << 2;
    var $328 = $327 >>> 0;
    HEAPF32[5561124 >> 2] = $328;
    var $329 = _get4();
    var $330 = _get4();
    var $331 = $330 + $329 | 0;
    var $332 = $331 >>> 0;
    HEAPF32[5561128 >> 2] = $332;
    var $333 = _get4();
    var $334 = $333 << 2;
    var $335 = $334 >>> 0;
    HEAPF32[5561132 >> 2] = $335;
    label = 93;
    break;
   case 93:
    var $336 = HEAP32[$tag >> 2];
    var $337 = ($336 | 0) == 21;
    if ($337) {
      label = 94;
      break;
    } else {
      var $_pr146_pr_pr = $336;
      label = 96;
      break;
    }
   case 94:
    var $339 = HEAP32[$type >> 2];
    var $340 = ($339 | 0) == 2;
    var $341 = HEAP32[5264100 >> 2];
    var $342 = ($341 | 0) != 0;
    var $or_cond16 = $340 & $342;
    if ($or_cond16) {
      label = 95;
      break;
    } else {
      var $_pr146_pr_pr = 21;
      label = 96;
      break;
    }
   case 95:
    var $344 = HEAP32[5264116 >> 2];
    var $345 = _fread(5263372, 64, 1, $344);
    var $_pr146_pr_pr_pr_pre = HEAP32[$tag >> 2];
    var $_pr146_pr_pr = $_pr146_pr_pr_pr_pre;
    label = 96;
    break;
   case 96:
    var $_pr146_pr_pr;
    var $346 = _strstr(5263628, 5587480);
    var $347 = ($346 | 0) == 0;
    if ($347) {
      label = 100;
      break;
    } else {
      label = 97;
      break;
    }
   case 97:
    if (($_pr146_pr_pr | 0) == 27) {
      label = 98;
      break;
    } else if (($_pr146_pr_pr | 0) == 28) {
      label = 99;
      break;
    } else if (($_pr146_pr_pr | 0) == 29) {
      var $serial_1 = $serial_0310;
      label = 101;
      break;
    } else {
      var $serial_2 = $serial_0310;
      var $359 = $_pr146_pr_pr;
      label = 106;
      break;
    }
   case 98:
    HEAP32[$tag >> 2] = 4120;
    var $serial_2179182184193195198200203207210214217221224228231235238244250255257 = $serial_0310;
    var $ver97_2204206211213218220225227232234239241251254259 = $ver97_0309;
    label = 193;
    break;
   case 99:
    HEAP32[$tag >> 2] = 4119;
    var $ver97_2_ph164190197 = $ver97_0309;
    var $serial_258616272116142198 = $serial_0310;
    label = 191;
    break;
   case 100:
    var $349 = ($_pr146_pr_pr | 0) == 29;
    if ($349) {
      var $serial_1 = $serial_0310;
      label = 101;
      break;
    } else {
      var $serial_2 = $serial_0310;
      var $359 = $_pr146_pr_pr;
      label = 106;
      break;
    }
   case 101:
    var $serial_1;
    var $350 = HEAP32[5264116 >> 2];
    var $351 = _fgetc($350);
    if (($351 | 0) == 0 | ($351 | 0) == -1) {
      label = 105;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    var $353 = $serial_1 * 10 & -1;
    var $isdigittmp = $351 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      var $357 = $isdigittmp;
      label = 104;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    var $355 = ($351 >>> 0) % 10;
    var $357 = $355;
    label = 104;
    break;
   case 104:
    var $357;
    var $358 = $357 + $353 | 0;
    var $serial_1 = $358;
    label = 101;
    break;
   case 105:
    var $_pr148_pre = HEAP32[$tag >> 2];
    var $serial_2 = $serial_1;
    var $359 = $_pr148_pre;
    label = 106;
    break;
   case 106:
    var $359;
    var $serial_2;
    var $360 = ($359 | 0) == 129;
    if ($360) {
      label = 107;
      break;
    } else {
      var $_pr181 = $359;
      var $serial_258 = $serial_2;
      label = 109;
      break;
    }
   case 107:
    var $362 = HEAP32[$type >> 2];
    var $363 = ($362 | 0) == 4;
    if ($363) {
      label = 108;
      break;
    } else {
      var $serial_25861110 = $serial_2;
      var $396 = $362;
      label = 116;
      break;
    }
   case 108:
    var $365 = _get4();
    HEAP32[5428492 >> 2] = $365;
    var $366 = HEAP32[5264116 >> 2];
    var $367 = $365 + 41 | 0;
    var $368 = _fseek($366, $367, 0);
    var $369 = _get2();
    var $370 = $369 << 1;
    HEAP16[5245036 >> 1] = $370;
    var $371 = _get2();
    HEAP16[5245028 >> 1] = $371;
    HEAP32[5427632 >> 2] = 1633771873;
    var $_pr181_pre = HEAP32[$tag >> 2];
    var $_pr181 = $_pr181_pre;
    var $serial_258 = $serial_2;
    label = 109;
    break;
   case 109:
    var $serial_258;
    var $_pr181;
    var $373 = ($_pr181 | 0) == 41;
    if ($373) {
      label = 110;
      break;
    } else {
      var $_pr152 = $_pr181;
      var $serial_25861 = $serial_258;
      label = 114;
      break;
    }
   case 110:
    var $375 = HEAP32[$type >> 2];
    var $376 = ($375 | 0) == 1;
    if ($376) {
      label = 111;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_258;
      label = 141;
      break;
    }
   case 111:
    var $378 = $wbi_1414547495355 >>> 0 < 18;
    if ($378) {
      label = 112;
      break;
    } else {
      var $384 = 8;
      label = 113;
      break;
    }
   case 112:
    var $380 = $wbi_1414547495355 + 5587460 | 0;
    var $381 = HEAP8[$380];
    var $382 = $381 << 24 >> 24;
    var $383 = $382 << 5;
    var $phitmp = $383 - 1536 | 0;
    var $phitmp130 = $phitmp | 8;
    var $384 = $phitmp130;
    label = 113;
    break;
   case 113:
    var $384;
    var $385 = HEAP32[5264116 >> 2];
    var $386 = _fseek($385, $384, 1);
    var $387 = _get4();
    var $388 = $387 >>> 0;
    HEAPF32[5561128 >> 2] = $388;
    var $389 = _get4();
    var $390 = $389 >>> 0;
    HEAPF32[5561124 >> 2] = $390;
    var $391 = _get4();
    var $392 = $391 >>> 0;
    HEAPF32[5561132 >> 2] = $392;
    var $393 = _get4();
    var $394 = $393 >>> 0;
    HEAPF32[5561136 >> 2] = $394;
    var $_pr150_pre = HEAP32[$tag >> 2];
    var $_pr152 = $_pr150_pre;
    var $serial_25861 = $serial_258;
    label = 114;
    break;
   case 114:
    var $serial_25861;
    var $_pr152;
    var $395 = ($_pr152 | 0) == 129;
    if ($395) {
      label = 115;
      break;
    } else {
      var $serial_2586164 = $serial_25861;
      var $_pr15265 = $_pr152;
      label = 117;
      break;
    }
   case 115:
    var $_pr139 = HEAP32[$type >> 2];
    var $serial_25861110 = $serial_25861;
    var $396 = $_pr139;
    label = 116;
    break;
   case 116:
    var $396;
    var $serial_25861110;
    var $397 = ($396 | 0) == 7;
    if ($397) {
      var $serial_2586163 = $serial_25861110;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_25861110;
      label = 141;
      break;
    }
   case 117:
    var $_pr15265;
    var $serial_2586164;
    var $399 = ($_pr15265 | 0) == 256;
    if ($399) {
      label = 118;
      break;
    } else {
      var $_pr1526568 = $_pr15265;
      var $serial_258616469 = $serial_2586164;
      label = 119;
      break;
    }
   case 118:
    var $401 = HEAP32[$type >> 2];
    var $402 = ($401 | 0) == 7;
    if ($402) {
      var $serial_2586163 = $serial_2586164;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_2586164;
      label = 141;
      break;
    }
   case 119:
    var $serial_258616469;
    var $_pr1526568;
    var $403 = ($_pr1526568 | 0) == 640;
    if ($403) {
      label = 120;
      break;
    } else {
      var $_pr192 = $_pr1526568;
      var $serial_2586162 = $serial_258616469;
      label = 122;
      break;
    }
   case 120:
    var $405 = HEAP32[$type >> 2];
    var $406 = ($405 | 0) == 1;
    if ($406) {
      var $serial_2586163 = $serial_258616469;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_258616469;
      label = 141;
      break;
    }
   case 121:
    var $serial_2586163;
    var $408 = HEAP32[5264116 >> 2];
    var $409 = _ftell($408);
    HEAP32[5244044 >> 2] = $409;
    var $410 = HEAP32[$len >> 2];
    HEAP32[5244056 >> 2] = $410;
    var $_pr192_pre = HEAP32[$tag >> 2];
    var $_pr192 = $_pr192_pre;
    var $serial_2586162 = $serial_2586163;
    label = 122;
    break;
   case 122:
    var $serial_2586162;
    var $_pr192;
    var $411 = ($_pr192 | 0) == 136;
    if ($411) {
      label = 123;
      break;
    } else {
      var $420 = $_pr192;
      var $serial_258616272 = $serial_2586162;
      label = 127;
      break;
    }
   case 123:
    var $413 = HEAP32[$type >> 2];
    var $414 = ($413 | 0) == 4;
    if ($414) {
      label = 124;
      break;
    } else {
      label = 126;
      break;
    }
   case 124:
    var $416 = _get4();
    HEAP32[5244044 >> 2] = $416;
    var $417 = ($416 | 0) == 0;
    if ($417) {
      label = 126;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    var $419 = $416 + $_1 | 0;
    HEAP32[5244044 >> 2] = $419;
    label = 126;
    break;
   case 126:
    var $_pr154 = HEAP32[$tag >> 2];
    var $420 = $_pr154;
    var $serial_258616272 = $serial_2586162;
    label = 127;
    break;
   case 127:
    var $serial_258616272;
    var $420;
    var $421 = ($420 | 0) == 137;
    if ($421) {
      label = 128;
      break;
    } else {
      var $_pr197 = $420;
      var $serial_258616272115 = $serial_258616272;
      label = 130;
      break;
    }
   case 128:
    var $423 = HEAP32[$type >> 2];
    var $424 = ($423 | 0) == 4;
    if ($424) {
      label = 129;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_258616272;
      label = 141;
      break;
    }
   case 129:
    var $426 = _get4();
    HEAP32[5244056 >> 2] = $426;
    var $_pr197_pre = HEAP32[$tag >> 2];
    var $_pr197 = $_pr197_pre;
    var $serial_258616272115 = $serial_258616272;
    label = 130;
    break;
   case 130:
    var $serial_258616272115;
    var $_pr197;
    if (($_pr197 | 0) == 150 | ($_pr197 | 0) == 140) {
      label = 131;
      break;
    } else {
      var $430 = $_pr197;
      var $serial_258616272115140 = $serial_258616272115;
      label = 132;
      break;
    }
   case 131:
    var $428 = HEAP32[5264116 >> 2];
    var $429 = _ftell($428);
    HEAP32[5263440 >> 2] = $429;
    var $_pr155 = HEAP32[$tag >> 2];
    var $430 = $_pr155;
    var $serial_258616272115140 = $serial_258616272115;
    label = 132;
    break;
   case 132:
    var $serial_258616272115140;
    var $430;
    var $431 = ($430 | 0) == 151;
    if ($431) {
      label = 133;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0309;
      var $serial_258616272114_ph = $serial_258616272115140;
      label = 141;
      break;
    }
   case 133:
    var $432 = $ver97_0309 * 10 & -1;
    var $433 = HEAP32[5264116 >> 2];
    var $434 = _fgetc($433);
    var $435 = $432 - 48 | 0;
    var $436 = $435 + $434 | 0;
    var $437 = $436 * 10 & -1;
    var $438 = HEAP32[5264116 >> 2];
    var $439 = _fgetc($438);
    var $440 = $437 - 48 | 0;
    var $441 = $440 + $439 | 0;
    var $442 = $441 * 10 & -1;
    var $443 = HEAP32[5264116 >> 2];
    var $444 = _fgetc($443);
    var $445 = $442 - 48 | 0;
    var $446 = $445 + $444 | 0;
    var $447 = $446 * 10 & -1;
    var $448 = HEAP32[5264116 >> 2];
    var $449 = _fgetc($448);
    var $450 = $447 - 48 | 0;
    var $451 = $450 + $449 | 0;
    if (($451 | 0) == 100) {
      label = 134;
      break;
    } else if (($451 | 0) == 102) {
      label = 135;
      break;
    } else if (($451 | 0) == 103) {
      label = 136;
      break;
    } else {
      label = 137;
      break;
    }
   case 134:
    var $452 = HEAP32[5264116 >> 2];
    var $453 = _fseek($452, 68, 1);
    var $454 = _get2();
    var $455 = $454 & 65535;
    HEAPF32[5561124 >> 2] = $455;
    var $456 = _get2();
    var $457 = $456 & 65535;
    HEAPF32[5561132 >> 2] = $457;
    var $458 = _get2();
    var $459 = $458 & 65535;
    HEAPF32[5561128 >> 2] = $459;
    var $460 = _get2();
    var $461 = $460 & 65535;
    HEAPF32[5561136 >> 2] = $461;
    var $ver97_2_ph_ph = 100;
    var $serial_258616272114_ph = $serial_258616272115140;
    label = 141;
    break;
   case 135:
    var $463 = HEAP32[5264116 >> 2];
    var $464 = _fseek($463, 6, 1);
    var $serial_5 = $serial_258616272115140;
    var $ver97_5 = 102;
    label = 215;
    break;
   case 136:
    var $465 = HEAP32[5264116 >> 2];
    var $466 = _fseek($465, 16, 1);
    var $467 = _get2();
    var $468 = $467 & 65535;
    HEAPF32[5561124 >> 2] = $468;
    var $469 = _get2();
    var $470 = $469 & 65535;
    HEAPF32[5561128 >> 2] = $470;
    var $471 = _get2();
    var $472 = $471 & 65535;
    HEAPF32[5561132 >> 2] = $472;
    var $473 = _get2();
    var $474 = $473 & 65535;
    HEAPF32[5561136 >> 2] = $474;
    var $ver97_2_ph_ph = 103;
    var $serial_258616272114_ph = $serial_258616272115140;
    label = 141;
    break;
   case 137:
    var $476 = $451 >>> 0 > 199;
    if ($476) {
      label = 138;
      break;
    } else {
      var $ver97_2_ph_ph = $451;
      var $serial_258616272114_ph = $serial_258616272115140;
      label = 141;
      break;
    }
   case 138:
    var $478 = ($451 | 0) == 205;
    if ($478) {
      label = 140;
      break;
    } else {
      label = 139;
      break;
    }
   case 139:
    var $480 = HEAP32[5264116 >> 2];
    var $481 = _fseek($480, 280, 1);
    label = 140;
    break;
   case 140:
    var $483 = HEAP32[5264116 >> 2];
    var $484 = _fread($128, 324, 1, $483);
    var $ver97_2_ph_ph = $451;
    var $serial_258616272114_ph = $serial_258616272115140;
    label = 141;
    break;
   case 141:
    var $serial_258616272114_ph;
    var $ver97_2_ph_ph;
    var $_pr202_pr = HEAP32[$tag >> 2];
    var $485 = ($_pr202_pr | 0) == 161;
    if ($485) {
      label = 142;
      break;
    } else {
      var $497 = $_pr202_pr;
      var $serial_258616272114162 = $serial_258616272114_ph;
      var $ver97_2_ph163 = $ver97_2_ph_ph;
      label = 144;
      break;
    }
   case 142:
    var $487 = HEAP32[$type >> 2];
    var $488 = ($487 | 0) == 7;
    if ($488) {
      label = 143;
      break;
    } else {
      var $serial_7 = $serial_258616272114_ph;
      var $ver97_7 = $ver97_2_ph_ph;
      label = 220;
      break;
    }
   case 143:
    HEAP16[5262944 >> 1] = 18761;
    var $489 = HEAP32[5264116 >> 2];
    var $490 = _fseek($489, 140, 1);
    var $491 = _get4();
    var $492 = $491 >>> 0;
    HEAPF32[5561124 >> 2] = $492;
    var $493 = _get4();
    var $494 = $493 >>> 0;
    HEAPF32[5561128 >> 2] = $494;
    var $495 = _get4();
    var $496 = $495 >>> 0;
    HEAPF32[5561132 >> 2] = $496;
    var $_pr157_pre = HEAP32[$tag >> 2];
    var $497 = $_pr157_pre;
    var $serial_258616272114162 = $serial_258616272114_ph;
    var $ver97_2_ph163 = $ver97_2_ph_ph;
    label = 144;
    break;
   case 144:
    var $ver97_2_ph163;
    var $serial_258616272114162;
    var $497;
    var $498 = ($497 | 0) == 164;
    if ($498) {
      label = 145;
      break;
    } else {
      var $_pr209 = $497;
      var $ver97_2_ph163169 = $ver97_2_ph163;
      var $serial_258616272114162170 = $serial_258616272114162;
      label = 147;
      break;
    }
   case 145:
    var $500 = HEAP32[$type >> 2];
    var $501 = ($500 | 0) == 3;
    if ($501) {
      label = 146;
      break;
    } else {
      var $serial_7 = $serial_258616272114162;
      var $ver97_7 = $ver97_2_ph163;
      label = 220;
      break;
    }
   case 146:
    var $502 = HEAP32[5264116 >> 2];
    var $503 = $wbi_1414547495355 * 48 & -1;
    var $504 = _fseek($502, $503, 1);
    var $505 = _get2();
    var $506 = $505 & 65535;
    HEAPF32[5561124 >> 2] = $506;
    var $507 = _get2();
    var $508 = $507 & 65535;
    HEAPF32[5561128 >> 2] = $508;
    var $509 = _get2();
    var $510 = $509 & 65535;
    HEAPF32[5561132 >> 2] = $510;
    var $_pr209_pre = HEAP32[$tag >> 2];
    var $_pr209 = $_pr209_pre;
    var $ver97_2_ph163169 = $ver97_2_ph163;
    var $serial_258616272114162170 = $serial_258616272114162;
    label = 147;
    break;
   case 147:
    var $serial_258616272114162170;
    var $ver97_2_ph163169;
    var $_pr209;
    var $512 = ($_pr209 | 0) == 167;
    if ($512) {
      label = 148;
      break;
    } else {
      var $566 = $_pr209;
      var $serial_258616272114162170172 = $serial_258616272114162170;
      var $ver97_2_ph163169173 = $ver97_2_ph163169;
      label = 153;
      break;
    }
   case 148:
    var $514 = $ver97_2_ph163169 - 200 | 0;
    var $515 = $514 >>> 0 < 17;
    if ($515) {
      label = 149;
      break;
    } else {
      var $serial_7 = $serial_258616272114162170;
      var $ver97_7 = $ver97_2_ph163169;
      label = 220;
      break;
    }
   case 149:
    var $517 = $serial_258616272114162170 & 255;
    var $518 = $517 + 5246004 | 0;
    var $519 = HEAP8[$518];
    var $520 = HEAP32[5264116 >> 2];
    var $521 = _fgetc($520);
    var $522 = HEAP32[5264116 >> 2];
    var $523 = _fgetc($522);
    var $524 = $523 ^ $521;
    var $525 = HEAP32[5264116 >> 2];
    var $526 = _fgetc($525);
    var $527 = $524 ^ $526;
    var $528 = HEAP32[5264116 >> 2];
    var $529 = _fgetc($528);
    var $530 = $527 ^ $529;
    var $531 = $530 + 5246260 | 0;
    var $532 = HEAP8[$531];
    var $i_3282 = 0;
    var $cj_0283 = $532;
    var $ck_0284 = 96;
    label = 150;
    break;
   case 150:
    var $ck_0284;
    var $cj_0283;
    var $i_3282;
    var $534 = $ck_0284 * $519 & -1;
    var $535 = $534 + $cj_0283 & 255;
    var $536 = $buf97 + $i_3282 | 0;
    var $537 = HEAP8[$536];
    var $538 = $537 ^ $535;
    HEAP8[$536] = $538;
    var $539 = $i_3282 + 1 | 0;
    var $exitcond = ($539 | 0) == 324;
    if ($exitcond) {
      label = 152;
      break;
    } else {
      label = 151;
      break;
    }
   case 151:
    var $540 = $ck_0284 + 1 & 255;
    var $i_3282 = $539;
    var $cj_0283 = $535;
    var $ck_0284 = $540;
    label = 150;
    break;
   case 152:
    var $541 = $514 + 5587424 | 0;
    var $542 = HEAP8[$541];
    var $543 = $542 << 24 >> 24;
    var $544 = $543 - 48 | 0;
    var $545 = $544 & -2;
    var $546 = $544 & 1;
    var $547 = $buf97 + $545 | 0;
    var $548 = _sget2($547);
    var $549 = $548 & 65535;
    var $550 = 5561124 + ($546 << 2) | 0;
    HEAPF32[$550 >> 2] = $549;
    var $_sum_1 = $545 + 2 | 0;
    var $551 = $buf97 + $_sum_1 | 0;
    var $552 = _sget2($551);
    var $553 = $552 & 65535;
    var $554 = $546 ^ 1;
    var $555 = 5561124 + ($554 << 2) | 0;
    HEAPF32[$555 >> 2] = $553;
    var $_sum_2 = $545 + 4 | 0;
    var $556 = $buf97 + $_sum_2 | 0;
    var $557 = _sget2($556);
    var $558 = $557 & 65535;
    var $559 = $546 ^ 3;
    var $560 = 5561124 + ($559 << 2) | 0;
    HEAPF32[$560 >> 2] = $558;
    var $_sum_3 = $545 + 6 | 0;
    var $561 = $buf97 + $_sum_3 | 0;
    var $562 = _sget2($561);
    var $563 = $562 & 65535;
    var $564 = $546 | 2;
    var $565 = 5561124 + ($564 << 2) | 0;
    HEAPF32[$565 >> 2] = $563;
    var $_pr159_pre = HEAP32[$tag >> 2];
    var $566 = $_pr159_pre;
    var $serial_258616272114162170172 = $serial_258616272114162170;
    var $ver97_2_ph163169173 = $ver97_2_ph163169;
    label = 153;
    break;
   case 153:
    var $ver97_2_ph163169173;
    var $serial_258616272114162170172;
    var $566;
    var $567 = ($566 | 0) == 512;
    if ($567) {
      label = 154;
      break;
    } else {
      var $_pr223 = $566;
      var $serial_258616272124 = $serial_258616272114162170172;
      var $ver97_2_ph163169173174 = $ver97_2_ph163169173;
      label = 159;
      break;
    }
   case 154:
    var $569 = HEAP32[$len >> 2];
    var $570 = ($569 | 0) == 3;
    if ($570) {
      label = 155;
      break;
    } else {
      var $575 = $569;
      label = 157;
      break;
    }
   case 155:
    var $572 = _get4();
    var $573 = _get4();
    HEAP32[5244924 >> 2] = $573;
    var $_pr216_pre = HEAP32[$tag >> 2];
    var $574 = ($_pr216_pre | 0) == 512;
    if ($574) {
      label = 156;
      break;
    } else {
      var $_pr223 = $_pr216_pre;
      var $serial_258616272124 = $serial_258616272114162170172;
      var $ver97_2_ph163169173174 = $ver97_2_ph163169173;
      label = 159;
      break;
    }
   case 156:
    var $_pr = HEAP32[$len >> 2];
    var $575 = $_pr;
    label = 157;
    break;
   case 157:
    var $575;
    var $576 = ($575 | 0) == 4;
    if ($576) {
      label = 158;
      break;
    } else {
      var $serial_7 = $serial_258616272114162170172;
      var $ver97_7 = $ver97_2_ph163169173;
      label = 220;
      break;
    }
   case 158:
    var $577 = _get2();
    var $578 = $577 & 65535;
    HEAP32[5560904 >> 2] = $578;
    var $579 = _get2();
    var $580 = $579 & 65535;
    HEAP32[5560908 >> 2] = $580;
    var $581 = _get2();
    var $582 = $581 & 65535;
    HEAP32[5560916 >> 2] = $582;
    var $583 = _get2();
    var $584 = $583 & 65535;
    HEAP32[5560912 >> 2] = $584;
    var $_pr161_pre = HEAP32[$tag >> 2];
    var $_pr223 = $_pr161_pre;
    var $serial_258616272124 = $serial_258616272114162170172;
    var $ver97_2_ph163169173174 = $ver97_2_ph163169173;
    label = 159;
    break;
   case 159:
    var $ver97_2_ph163169173174;
    var $serial_258616272124;
    var $_pr223;
    var $585 = ($_pr223 | 0) == 513;
    if ($585) {
      label = 160;
      break;
    } else {
      var $_pr22381 = $_pr223;
      var $serial_258616272124128 = $serial_258616272124;
      var $ver97_2_ph163169173174175 = $ver97_2_ph163169173174;
      label = 161;
      break;
    }
   case 160:
    var $587 = HEAP32[$len >> 2];
    var $588 = ($587 | 0) == 4;
    if ($588) {
      var $serial_5 = $serial_258616272124;
      var $ver97_5 = $ver97_2_ph163169173174;
      label = 215;
      break;
    } else {
      var $serial_7 = $serial_258616272124;
      var $ver97_7 = $ver97_2_ph163169173174;
      label = 220;
      break;
    }
   case 161:
    var $ver97_2_ph163169173174175;
    var $serial_258616272124128;
    var $_pr22381;
    var $590 = ($_pr22381 | 0) == 544;
    if ($590) {
      label = 162;
      break;
    } else {
      var $597 = $_pr22381;
      var $serial_258616272122 = $serial_258616272124128;
      var $ver97_2_ph163169173174175177 = $ver97_2_ph163169173174175;
      label = 164;
      break;
    }
   case 162:
    var $592 = HEAP32[$type >> 2];
    var $593 = ($592 | 0) == 7;
    if ($593) {
      label = 163;
      break;
    } else {
      var $serial_7 = $serial_258616272124128;
      var $ver97_7 = $ver97_2_ph163169173174175;
      label = 220;
      break;
    }
   case 163:
    var $595 = HEAP32[5264116 >> 2];
    var $596 = _ftell($595);
    HEAP32[5263440 >> 2] = $596;
    var $_pr163_pre = HEAP32[$tag >> 2];
    var $597 = $_pr163_pre;
    var $serial_258616272122 = $serial_258616272124128;
    var $ver97_2_ph163169173174175177 = $ver97_2_ph163169173174175;
    label = 164;
    break;
   case 164:
    var $ver97_2_ph163169173174175177;
    var $serial_258616272122;
    var $597;
    var $598 = ($597 | 0) == 1025;
    if ($598) {
      label = 165;
      break;
    } else {
      var $_pr230 = $597;
      var $serial_258616272122131 = $serial_258616272122;
      var $ver97_2_ph163169173174175177179 = $ver97_2_ph163169173174175177;
      label = 168;
      break;
    }
   case 165:
    var $600 = HEAP32[$type >> 2];
    var $601 = ($600 | 0) == 4;
    if ($601) {
      label = 166;
      break;
    } else {
      var $serial_7 = $serial_258616272122;
      var $ver97_7 = $ver97_2_ph163169173174175177;
      label = 220;
      break;
    }
   case 166:
    var $603 = HEAP32[$len >> 2];
    var $604 = ($603 | 0) == 4;
    if ($604) {
      label = 167;
      break;
    } else {
      var $serial_7 = $serial_258616272122;
      var $ver97_7 = $ver97_2_ph163169173174175177;
      label = 220;
      break;
    }
   case 167:
    var $605 = _get4();
    HEAP32[5560904 >> 2] = $605;
    var $606 = _get4();
    HEAP32[5560908 >> 2] = $606;
    var $607 = _get4();
    HEAP32[5560916 >> 2] = $607;
    var $608 = _get4();
    HEAP32[5560912 >> 2] = $608;
    var $_pr230_pre = HEAP32[$tag >> 2];
    var $_pr230 = $_pr230_pre;
    var $serial_258616272122131 = $serial_258616272122;
    var $ver97_2_ph163169173174175177179 = $ver97_2_ph163169173174175177;
    label = 168;
    break;
   case 168:
    var $ver97_2_ph163169173174175177179;
    var $serial_258616272122131;
    var $_pr230;
    var $609 = ($_pr230 | 0) == 3585;
    if ($609) {
      label = 169;
      break;
    } else {
      var $634 = $_pr230;
      var $serial_258616272122131141 = $serial_258616272122131;
      var $ver97_2_ph163169173174175177179181 = $ver97_2_ph163169173174175177179;
      label = 175;
      break;
    }
   case 169:
    HEAP16[5262944 >> 1] = 18761;
    var $611 = HEAP32[5264116 >> 2];
    var $612 = _fseek($611, 22, 1);
    var $613 = HEAP32[$len >> 2];
    var $614 = $613 >>> 0 > 44;
    if ($614) {
      var $offset_0291 = 22;
      label = 170;
      break;
    } else {
      label = 174;
      break;
    }
   case 170:
    var $offset_0291;
    var $615 = _get4();
    HEAP32[$tag >> 2] = $615;
    var $616 = HEAP32[5264116 >> 2];
    var $617 = _fseek($616, 14, 1);
    var $618 = _get4();
    var $619 = HEAP32[$tag >> 2];
    var $620 = ($619 | 0) == 1990472199;
    if ($620) {
      label = 171;
      break;
    } else {
      label = 172;
      break;
    }
   case 171:
    var $622 = _get2();
    var $623 = $622 & 65535;
    HEAP32[5403048 >> 2] = $623;
    label = 173;
    break;
   case 172:
    var $625 = $618 - 4 | 0;
    var $626 = HEAP32[5264116 >> 2];
    var $627 = _fseek($626, $625, 1);
    label = 173;
    break;
   case 173:
    var $629 = $offset_0291 + 18 | 0;
    var $630 = $629 + $618 | 0;
    var $631 = $630 + 22 | 0;
    var $632 = HEAP32[$len >> 2];
    var $633 = $631 >>> 0 < $632 >>> 0;
    if ($633) {
      var $offset_0291 = $630;
      label = 170;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    var $_pr165 = HEAP32[$tag >> 2];
    var $634 = $_pr165;
    var $serial_258616272122131141 = $serial_258616272122131;
    var $ver97_2_ph163169173174175177179181 = $ver97_2_ph163169173174175177179;
    label = 175;
    break;
   case 175:
    var $ver97_2_ph163169173174175177179181;
    var $serial_258616272122131141;
    var $634;
    var $635 = ($634 | 0) == 3712;
    if ($635) {
      label = 176;
      break;
    } else {
      var $_pr248 = $634;
      var $serial_258616272122131141150 = $serial_258616272122131141;
      var $ver97_2_ph163169173174175177179181183 = $ver97_2_ph163169173174175177179181;
      label = 179;
      break;
    }
   case 176:
    var $637 = HEAP32[$len >> 2];
    var $638 = ($637 | 0) == 256;
    if ($638) {
      label = 177;
      break;
    } else {
      var $serial_7 = $serial_258616272122131141;
      var $ver97_7 = $ver97_2_ph163169173174175177179181;
      label = 220;
      break;
    }
   case 177:
    var $640 = HEAP32[$type >> 2];
    var $641 = ($640 | 0) == 7;
    if ($641) {
      label = 178;
      break;
    } else {
      var $serial_7 = $serial_258616272122131141;
      var $ver97_7 = $ver97_2_ph163169173174175177179181;
      label = 220;
      break;
    }
   case 178:
    var $643 = HEAP32[5264116 >> 2];
    var $644 = _fseek($643, 48, 1);
    var $645 = _get2();
    var $646 = $645 & 65535;
    var $647 = $646 * 508 & -1;
    var $648 = $647 | 0;
    var $649 = $648 * 1.078;
    var $650 = $649 * 152587890625e-16;
    var $651 = $650;
    HEAPF32[5561124 >> 2] = $651;
    var $652 = _get2();
    var $653 = $652 & 65535;
    var $654 = $653 * 382 & -1;
    var $655 = $654 | 0;
    var $656 = $655 * 1.173;
    var $657 = $656 * 152587890625e-16;
    var $658 = $657;
    HEAPF32[5561132 >> 2] = $658;
    var $_pr237_pre = HEAP32[$tag >> 2];
    var $_pr248 = $_pr237_pre;
    var $serial_258616272122131141150 = $serial_258616272122131141;
    var $ver97_2_ph163169173174175177179181183 = $ver97_2_ph163169173174175177179181;
    label = 179;
    break;
   case 179:
    var $ver97_2_ph163169173174175177179181183;
    var $serial_258616272122131141150;
    var $_pr248;
    var $659 = ($_pr248 | 0) == 3840;
    if ($659) {
      label = 180;
      break;
    } else {
      var $_pr24889 = $_pr248;
      var $serial_258616272122131141150155 = $serial_258616272122131141150;
      var $ver97_2_ph163169173174175177179181183184 = $ver97_2_ph163169173174175177179181183;
      label = 184;
      break;
    }
   case 180:
    var $661 = HEAP32[$type >> 2];
    var $662 = ($661 | 0) == 7;
    if ($662) {
      label = 181;
      break;
    } else {
      var $serial_7 = $serial_258616272122131141150;
      var $ver97_7 = $ver97_2_ph163169173174175177179181183;
      label = 220;
      break;
    }
   case 181:
    var $664 = HEAP32[$len >> 2];
    if (($664 | 0) == 614) {
      label = 182;
      break;
    } else if (($664 | 0) == 1502 | ($664 | 0) == 734) {
      label = 183;
      break;
    } else {
      var $serial_7 = $serial_258616272122131141150;
      var $ver97_7 = $ver97_2_ph163169173174175177179181183;
      label = 220;
      break;
    }
   case 182:
    var $666 = HEAP32[5264116 >> 2];
    var $667 = _fseek($666, 176, 1);
    var $serial_3 = $serial_258616272122131141150;
    var $ver97_3 = $ver97_2_ph163169173174175177179181183;
    label = 196;
    break;
   case 183:
    var $669 = HEAP32[5264116 >> 2];
    var $670 = _fseek($669, 148, 1);
    var $serial_3 = $serial_258616272122131141150;
    var $ver97_3 = $ver97_2_ph163169173174175177179181183;
    label = 196;
    break;
   case 184:
    var $ver97_2_ph163169173174175177179181183184;
    var $serial_258616272122131141150155;
    var $_pr24889;
    var $671 = ($_pr24889 | 0) == 4113;
    if ($671) {
      label = 185;
      break;
    } else {
      var $_pr2488990 = $_pr24889;
      var $serial_258616272118 = $serial_258616272122131141150155;
      var $ver97_2_ph166 = $ver97_2_ph163169173174175177179181183184;
      label = 186;
      break;
    }
   case 185:
    var $673 = HEAP32[$len >> 2];
    var $674 = ($673 | 0) == 9;
    if ($674) {
      var $serial_258616272117 = $serial_258616272122131141150155;
      var $ver97_2_ph165 = $ver97_2_ph163169173174175177179181183184;
      label = 223;
      break;
    } else {
      var $serial_7 = $serial_258616272122131141150155;
      var $ver97_7 = $ver97_2_ph163169173174175177179181183184;
      label = 220;
      break;
    }
   case 186:
    var $ver97_2_ph166;
    var $serial_258616272118;
    var $_pr2488990;
    var $675 = ($_pr2488990 | 0) == 541065728;
    if ($675) {
      var $serial_258616272117 = $serial_258616272118;
      var $ver97_2_ph165 = $ver97_2_ph166;
      label = 223;
      break;
    } else {
      var $676 = $_pr2488990;
      var $serial_258616272116 = $serial_258616272118;
      var $ver97_2_ph164 = $ver97_2_ph166;
      label = 187;
      break;
    }
   case 187:
    var $ver97_2_ph164;
    var $serial_258616272116;
    var $676;
    if (($676 | 0) == 541066752 | ($676 | 0) == 4114) {
      label = 188;
      break;
    } else {
      var $_pr253 = $676;
      var $serial_258616272116142 = $serial_258616272116;
      var $ver97_2_ph164190 = $ver97_2_ph164;
      label = 190;
      break;
    }
   case 188:
    var $677 = HEAP32[$len >> 2];
    var $678 = ($677 | 0) == 4;
    if ($678) {
      label = 189;
      break;
    } else {
      var $_pr253 = $676;
      var $serial_258616272116142 = $serial_258616272116;
      var $ver97_2_ph164190 = $ver97_2_ph164;
      label = 190;
      break;
    }
   case 189:
    var $679 = _get2();
    var $680 = $679 & 65535;
    HEAP32[5560904 >> 2] = $680;
    var $681 = _get2();
    var $682 = $681 & 65535;
    HEAP32[5560908 >> 2] = $682;
    var $683 = _get2();
    var $684 = $683 & 65535;
    HEAP32[5560916 >> 2] = $684;
    var $685 = _get2();
    var $686 = $685 & 65535;
    HEAP32[5560912 >> 2] = $686;
    var $_pr253_pre = HEAP32[$tag >> 2];
    var $_pr253 = $_pr253_pre;
    var $serial_258616272116142 = $serial_258616272116;
    var $ver97_2_ph164190 = $ver97_2_ph164;
    label = 190;
    break;
   case 190:
    var $ver97_2_ph164190;
    var $serial_258616272116142;
    var $_pr253;
    if (($_pr253 | 0) == 541065472 | ($_pr253 | 0) == 4119) {
      var $ver97_2_ph164190197 = $ver97_2_ph164190;
      var $serial_258616272116142198 = $serial_258616272116142;
      label = 191;
      break;
    } else {
      var $693 = $_pr253;
      var $serial_258616272116142151 = $serial_258616272116142;
      var $ver97_2_ph164190195 = $ver97_2_ph164190;
      label = 192;
      break;
    }
   case 191:
    var $serial_258616272116142198;
    var $ver97_2_ph164190197;
    var $688 = _get2();
    var $689 = $688 & 65535;
    var $690 = $689 | 0;
    var $691 = $690 * .00390625;
    var $692 = $691;
    HEAPF32[5561124 >> 2] = $692;
    var $_pr170 = HEAP32[$tag >> 2];
    var $693 = $_pr170;
    var $serial_258616272116142151 = $serial_258616272116142198;
    var $ver97_2_ph164190195 = $ver97_2_ph164190197;
    label = 192;
    break;
   case 192:
    var $ver97_2_ph164190195;
    var $serial_258616272116142151;
    var $693;
    if (($693 | 0) == 541065472 | ($693 | 0) == 4120) {
      var $serial_2179182184193195198200203207210214217221224228231235238244250255257 = $serial_258616272116142151;
      var $ver97_2204206211213218220225227232234239241251254259 = $ver97_2_ph164190195;
      label = 193;
      break;
    } else {
      var $serial_2179182184193195198200203207210214217221224228231235238244250255258 = $serial_258616272116142151;
      var $ver97_2204206211213218220225227232234239241251254260 = $ver97_2_ph164190195;
      var $700 = $693;
      label = 194;
      break;
    }
   case 193:
    var $ver97_2204206211213218220225227232234239241251254259;
    var $serial_2179182184193195198200203207210214217221224228231235238244250255257;
    var $695 = _get2();
    var $696 = $695 & 65535;
    var $697 = $696 | 0;
    var $698 = $697 * .00390625;
    var $699 = $698;
    HEAPF32[5561132 >> 2] = $699;
    var $_pre35 = HEAP32[$tag >> 2];
    var $serial_2179182184193195198200203207210214217221224228231235238244250255258 = $serial_2179182184193195198200203207210214217221224228231235238244250255257;
    var $ver97_2204206211213218220225227232234239241251254260 = $ver97_2204206211213218220225227232234239241251254259;
    var $700 = $_pre35;
    label = 194;
    break;
   case 194:
    var $700;
    var $ver97_2204206211213218220225227232234239241251254260;
    var $serial_2179182184193195198200203207210214217221224228231235238244250255258;
    var $701 = ($700 | 0) == 8209;
    if ($701) {
      label = 195;
      break;
    } else {
      var $serial_4 = $serial_2179182184193195198200203207210214217221224228231235238244250255258;
      var $ver97_4 = $ver97_2204206211213218220225227232234239241251254260;
      var $716 = $700;
      label = 197;
      break;
    }
   case 195:
    var $703 = HEAP32[$len >> 2];
    var $704 = ($703 | 0) == 2;
    if ($704) {
      var $serial_3 = $serial_2179182184193195198200203207210214217221224228231235238244250255258;
      var $ver97_3 = $ver97_2204206211213218220225227232234239241251254260;
      label = 196;
      break;
    } else {
      var $serial_7 = $serial_2179182184193195198200203207210214217221224228231235238244250255258;
      var $ver97_7 = $ver97_2204206211213218220225227232234239241251254260;
      label = 220;
      break;
    }
   case 196:
    var $ver97_3;
    var $serial_3;
    HEAP16[5262944 >> 1] = 19789;
    var $706 = _get2();
    var $707 = $706 & 65535;
    var $708 = $707 | 0;
    var $709 = $708 * .00390625;
    var $710 = $709;
    HEAPF32[5561124 >> 2] = $710;
    var $711 = _get2();
    var $712 = $711 & 65535;
    var $713 = $712 | 0;
    var $714 = $713 * .00390625;
    var $715 = $714;
    HEAPF32[5561132 >> 2] = $715;
    var $_pre16 = HEAP32[$tag >> 2];
    var $serial_4 = $serial_3;
    var $ver97_4 = $ver97_3;
    var $716 = $_pre16;
    label = 197;
    break;
   case 197:
    var $716;
    var $ver97_4;
    var $serial_4;
    var $717 = $716 | 112;
    var $718 = ($717 | 0) == 8304;
    if ($718) {
      label = 198;
      break;
    } else {
      var $727 = $716;
      var $ver97_499 = $ver97_4;
      var $serial_4100 = $serial_4;
      label = 200;
      break;
    }
   case 198:
    var $720 = HEAP32[$type >> 2];
    var $721 = ($720 | 0) == 4;
    if ($721) {
      label = 199;
      break;
    } else {
      var $727 = $716;
      var $ver97_499 = $ver97_4;
      var $serial_4100 = $serial_4;
      label = 200;
      break;
    }
   case 199:
    var $723 = HEAP32[5264116 >> 2];
    var $724 = _get4();
    var $725 = $724 + $_1 | 0;
    var $726 = _fseek($723, $725, 0);
    var $_pr172_pre = HEAP32[$tag >> 2];
    var $727 = $_pr172_pre;
    var $ver97_499 = $ver97_4;
    var $serial_4100 = $serial_4;
    label = 200;
    break;
   case 200:
    var $serial_4100;
    var $ver97_499;
    var $727;
    var $728 = ($727 | 0) == 8208;
    if ($728) {
      label = 201;
      break;
    } else {
      var $serial_4100133 = $serial_4100;
      var $ver97_499135 = $ver97_499;
      var $733 = $727;
      label = 203;
      break;
    }
   case 201:
    var $730 = HEAP32[$type >> 2];
    var $731 = ($730 | 0) == 7;
    if ($731) {
      var $serial_7 = $serial_4100;
      var $ver97_7 = $ver97_499;
      label = 220;
      break;
    } else {
      label = 202;
      break;
    }
   case 202:
    HEAP32[5263692 >> 2] = 62;
    var $serial_4100133 = $serial_4100;
    var $ver97_499135 = $ver97_499;
    var $733 = $727;
    label = 203;
    break;
   case 203:
    var $733;
    var $ver97_499135;
    var $serial_4100133;
    var $734 = ($733 | 0) == 8224;
    if ($734) {
      label = 204;
      break;
    } else {
      var $736 = $733;
      label = 205;
      break;
    }
   case 204:
    _parse_thumb_note($_1, 257, 258);
    var $_pr173 = HEAP32[$tag >> 2];
    var $736 = $_pr173;
    label = 205;
    break;
   case 205:
    var $736;
    var $737 = ($736 | 0) == 8256;
    if ($737) {
      label = 206;
      break;
    } else {
      var $739 = $736;
      label = 207;
      break;
    }
   case 206:
    _parse_makernote($_1, 8256);
    var $_pre18 = HEAP32[$tag >> 2];
    var $739 = $_pre18;
    label = 207;
    break;
   case 207:
    var $739;
    var $740 = ($739 | 0) == 45096;
    if ($740) {
      label = 208;
      break;
    } else {
      var $746 = $739;
      label = 209;
      break;
    }
   case 208:
    var $742 = HEAP32[5264116 >> 2];
    var $743 = _get4();
    var $744 = $743 + $_1 | 0;
    var $745 = _fseek($742, $744, 0);
    _parse_thumb_note($_1, 136, 137);
    var $_pr174 = HEAP32[$tag >> 2];
    var $746 = $_pr174;
    label = 209;
    break;
   case 209:
    var $746;
    var $747 = ($746 | 0) == 16385;
    if ($747) {
      label = 210;
      break;
    } else {
      var $serial_6 = $serial_4100133;
      var $ver97_6 = $ver97_499135;
      var $779 = $746;
      label = 216;
      break;
    }
   case 210:
    var $749 = HEAP32[$len >> 2];
    var $750 = $749 >>> 0 > 500;
    if ($750) {
      label = 211;
      break;
    } else {
      var $serial_7 = $serial_4100133;
      var $ver97_7 = $ver97_499135;
      label = 220;
      break;
    }
   case 211:
    var $752 = ($749 | 0) == 582;
    if ($752) {
      var $759 = 50;
      label = 214;
      break;
    } else {
      label = 212;
      break;
    }
   case 212:
    var $754 = ($749 | 0) == 653;
    if ($754) {
      var $759 = 68;
      label = 214;
      break;
    } else {
      label = 213;
      break;
    }
   case 213:
    var $756 = ($749 | 0) == 5120;
    var $757 = $756 ? 142 : 126;
    var $759 = $757;
    label = 214;
    break;
   case 214:
    var $759;
    var $760 = HEAP32[5264116 >> 2];
    var $761 = _fseek($760, $759, 1);
    var $serial_5 = $serial_4100133;
    var $ver97_5 = $ver97_499135;
    label = 215;
    break;
   case 215:
    var $ver97_5;
    var $serial_5;
    var $762 = _get2();
    var $763 = $762 & 65535;
    HEAPF32[5561124 >> 2] = $763;
    var $764 = _get2();
    var $765 = $764 & 65535;
    HEAPF32[5561128 >> 2] = $765;
    var $766 = _get2();
    var $767 = $766 & 65535;
    HEAPF32[5561136 >> 2] = $767;
    var $768 = _get2();
    var $769 = $768 & 65535;
    HEAPF32[5561132 >> 2] = $769;
    var $770 = HEAP32[$len >> 2];
    var $_mask = $770 & -8;
    var $771 = ($_mask | 0) == 1312;
    var $772 = $771 ? 112 : 22;
    var $773 = HEAP32[5264116 >> 2];
    var $774 = _fseek($773, $772, 1);
    var $775 = _get2();
    HEAP16[5244124 >> 1] = $775;
    var $776 = _get2();
    HEAP16[5244120 >> 1] = $776;
    var $777 = _get2();
    var $778 = _get2();
    HEAP16[5244116 >> 1] = $778;
    var $_pre19 = HEAP32[$tag >> 2];
    var $serial_6 = $serial_5;
    var $ver97_6 = $ver97_5;
    var $779 = $_pre19;
    label = 216;
    break;
   case 216:
    var $779;
    var $ver97_6;
    var $serial_6;
    var $780 = ($779 | 0) == 40993;
    if ($780) {
      label = 217;
      break;
    } else {
      var $789 = $779;
      label = 218;
      break;
    }
   case 217:
    var $781 = _get4();
    var $782 = $781 >>> 0;
    HEAPF32[5561124 >> 2] = $782;
    var $783 = _get4();
    var $784 = $783 >>> 0;
    HEAPF32[5561128 >> 2] = $784;
    var $785 = _get4();
    var $786 = $785 >>> 0;
    HEAPF32[5561136 >> 2] = $786;
    var $787 = _get4();
    var $788 = $787 >>> 0;
    HEAPF32[5561132 >> 2] = $788;
    var $_pr176 = HEAP32[$tag >> 2];
    var $789 = $_pr176;
    label = 218;
    break;
   case 218:
    var $789;
    var $790 = ($789 | 0) == 41e3;
    if ($790) {
      label = 219;
      break;
    } else {
      var $serial_7 = $serial_6;
      var $ver97_7 = $ver97_6;
      label = 220;
      break;
    }
   case 219:
    var $791 = _get4();
    var $792 = $791 >>> 0;
    var $793 = HEAPF32[5561124 >> 2];
    var $794 = $793 - $792;
    HEAPF32[5561124 >> 2] = $794;
    var $795 = _get4();
    var $796 = $795 >>> 0;
    var $797 = HEAPF32[5561128 >> 2];
    var $798 = $797 - $796;
    HEAPF32[5561128 >> 2] = $798;
    var $799 = _get4();
    var $800 = $799 >>> 0;
    var $801 = HEAPF32[5561136 >> 2];
    var $802 = $801 - $800;
    HEAPF32[5561136 >> 2] = $802;
    var $803 = _get4();
    var $804 = $803 >>> 0;
    var $805 = HEAPF32[5561132 >> 2];
    var $806 = $805 - $804;
    HEAPF32[5561132 >> 2] = $806;
    var $serial_7 = $serial_6;
    var $ver97_7 = $ver97_6;
    label = 220;
    break;
   case 220:
    var $ver97_7;
    var $serial_7;
    var $807 = HEAP32[5264116 >> 2];
    var $808 = HEAP32[$save >> 2];
    var $809 = _fseek($807, $808, 0);
    var $810 = ($130 | 0) == 0;
    if ($810) {
      label = 221;
      break;
    } else {
      var $ver97_0309 = $ver97_7;
      var $serial_0310 = $serial_7;
      var $wbi_0311 = $wbi_1414547495355;
      var $_in = $130;
      label = 37;
      break;
    }
   case 221:
    HEAP16[5262944 >> 1] = $1;
    label = 222;
    break;
   case 222:
    STACKTOP = __stackBase__;
    return;
   case 223:
    var $ver97_2_ph165;
    var $serial_258616272117;
    var $812 = _get2();
    var $813 = $812 << 16 >> 16;
    var $814 = $813 * .00390625;
    var $815 = $814;
    HEAPF32[5560844 >> 2] = $815;
    var $816 = _get2();
    var $817 = $816 << 16 >> 16;
    var $818 = $817 * .00390625;
    var $819 = $818;
    HEAPF32[5560848 >> 2] = $819;
    var $820 = _get2();
    var $821 = $820 << 16 >> 16;
    var $822 = $821 * .00390625;
    var $823 = $822;
    HEAPF32[5560852 >> 2] = $823;
    var $824 = _get2();
    var $825 = $824 << 16 >> 16;
    var $826 = $825 * .00390625;
    var $827 = $826;
    HEAPF32[5560860 >> 2] = $827;
    var $828 = _get2();
    var $829 = $828 << 16 >> 16;
    var $830 = $829 * .00390625;
    var $831 = $830;
    HEAPF32[5560864 >> 2] = $831;
    var $832 = _get2();
    var $833 = $832 << 16 >> 16;
    var $834 = $833 * .00390625;
    var $835 = $834;
    HEAPF32[5560868 >> 2] = $835;
    var $836 = _get2();
    var $837 = $836 << 16 >> 16;
    var $838 = $837 * .00390625;
    var $839 = $838;
    HEAPF32[5560876 >> 2] = $839;
    var $840 = _get2();
    var $841 = $840 << 16 >> 16;
    var $842 = $841 * .00390625;
    var $843 = $842;
    HEAPF32[5560880 >> 2] = $843;
    var $844 = _get2();
    var $845 = $844 << 16 >> 16;
    var $846 = $845 * .00390625;
    var $847 = $846;
    HEAPF32[5560884 >> 2] = $847;
    var $_pr169 = HEAP32[$tag >> 2];
    var $676 = $_pr169;
    var $serial_258616272116 = $serial_258616272117;
    var $ver97_2_ph164 = $ver97_2_ph165;
    label = 187;
    break;
  }
}
_parse_makernote["X"] = 1;
function _parse_tiff_ifd($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $software = __stackBase__ + 16;
    var $cfa_pat = __stackBase__ + 80;
    var $cfa_pc = __stackBase__ + 96;
    var $tmpcast = $cfa_pc;
    var $tab = STACKTOP;
    STACKTOP = STACKTOP + 256 | 0;
    var $cc = STACKTOP;
    STACKTOP = STACKTOP + 128 | 0;
    var $cm = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $cam_xyz = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $ab = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    var $asn = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    var $jh = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $1 = $cfa_pc;
    HEAP32[$cfa_pc >> 2] = 50462976;
    var $2 = $ab;
    HEAP32[$2 >> 2] = HEAP32[5245768 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[5245772 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[5245776 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[5245780 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[5245784 >> 2];
    HEAP32[$2 + 20 >> 2] = HEAP32[5245788 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[5245792 >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[5245796 >> 2];
    var $3 = $asn;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 28 >> 2] = 0;
    var $4 = HEAP32[5243584 >> 2];
    var $5 = $4 >>> 0 > 9;
    if ($5) {
      var $_0 = 1;
      label = 208;
      break;
    } else {
      label = 226;
      break;
    }
   case 3:
    var $6 = $995 << 16 >> 16 == 0;
    if ($6) {
      var $use_cm_0_lcssa395 = 0;
      var $xyz_sroa_0_2 = 1;
      var $xyz_sroa_1_2 = 1;
      var $xyz_sroa_2_2 = 1;
      label = 193;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = $jh + 8 | 0;
    var $8 = $jh + 4 | 0;
    var $9 = $jh | 0;
    var $10 = $jh + 12 | 0;
    var $11 = $jh + 16 | 0;
    var $12 = $software | 0;
    var $13 = $cfa_pat | 0;
    var $ifd_0345 = $4;
    var $use_cm_0346 = 0;
    var $ima_len_0347 = 0;
    var $blrr_0348 = 1;
    var $blrc_0349 = 1;
    var $plen_0350 = 16;
    var $sony_offset_0351 = 0;
    var $sony_length_0352 = 0;
    var $sony_key_0353 = 0;
    var $_in = $996;
    var $xyz_sroa_0_0 = 1;
    var $xyz_sroa_1_0 = 1;
    var $xyz_sroa_2_0 = 1;
    label = 5;
    break;
   case 5:
    var $xyz_sroa_2_0;
    var $xyz_sroa_1_0;
    var $xyz_sroa_0_0;
    var $_in;
    var $sony_key_0353;
    var $sony_length_0352;
    var $sony_offset_0351;
    var $plen_0350;
    var $blrc_0349;
    var $blrr_0348;
    var $ima_len_0347;
    var $use_cm_0346;
    var $ifd_0345;
    var $15 = $_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $16 = HEAP32[$tag >> 2];
    if (($16 | 0) == 50715 | ($16 | 0) == 50716) {
      label = 6;
      break;
    } else if (($16 | 0) == 50721 | ($16 | 0) == 50722) {
      label = 7;
      break;
    } else if (($16 | 0) == 50723 | ($16 | 0) == 50724) {
      label = 8;
      break;
    } else if (($16 | 0) == 50727) {
      label = 9;
      break;
    } else if (($16 | 0) == 50728) {
      label = 10;
      break;
    } else if (($16 | 0) == 50830) {
      label = 11;
      break;
    } else if (($16 | 0) == 5) {
      label = 12;
      break;
    } else if (($16 | 0) == 6) {
      label = 13;
      break;
    } else if (($16 | 0) == 7) {
      label = 14;
      break;
    } else if (($16 | 0) == 9) {
      label = 15;
      break;
    } else if (($16 | 0) == 17 | ($16 | 0) == 18) {
      label = 16;
      break;
    } else if (($16 | 0) == 23) {
      label = 19;
      break;
    } else if (($16 | 0) == 36 | ($16 | 0) == 37 | ($16 | 0) == 38) {
      label = 21;
      break;
    } else if (($16 | 0) == 39) {
      label = 22;
      break;
    } else if (($16 | 0) == 46) {
      label = 24;
      break;
    } else if (($16 | 0) == 61440) {
      label = 28;
      break;
    } else if (($16 | 0) == 2 | ($16 | 0) == 256 | ($16 | 0) == 61441) {
      label = 29;
      break;
    } else if (($16 | 0) == 3 | ($16 | 0) == 257 | ($16 | 0) == 61442) {
      label = 30;
      break;
    } else if (($16 | 0) == 258 | ($16 | 0) == 61443) {
      label = 31;
      break;
    } else if (($16 | 0) == 61446) {
      label = 32;
      break;
    } else if (($16 | 0) == 259) {
      label = 35;
      break;
    } else if (($16 | 0) == 262) {
      label = 36;
      break;
    } else if (($16 | 0) == 270) {
      label = 37;
      break;
    } else if (($16 | 0) == 271) {
      label = 38;
      break;
    } else if (($16 | 0) == 272) {
      label = 39;
      break;
    } else if (($16 | 0) == 280) {
      label = 40;
      break;
    } else if (($16 | 0) == 273 | ($16 | 0) == 513 | ($16 | 0) == 61447) {
      label = 42;
      break;
    } else if (($16 | 0) == 274) {
      label = 48;
      break;
    } else if (($16 | 0) == 277) {
      label = 49;
      break;
    } else if (($16 | 0) == 279 | ($16 | 0) == 514 | ($16 | 0) == 61448) {
      label = 50;
      break;
    } else if (($16 | 0) == 61454) {
      label = 51;
      break;
    } else if (($16 | 0) == 305 | ($16 | 0) == 11) {
      label = 52;
      break;
    } else if (($16 | 0) == 306) {
      label = 59;
      break;
    } else if (($16 | 0) == 315) {
      label = 60;
      break;
    } else if (($16 | 0) == 322) {
      label = 61;
      break;
    } else if (($16 | 0) == 323) {
      label = 62;
      break;
    } else if (($16 | 0) == 324) {
      label = 63;
      break;
    } else if (($16 | 0) == 330) {
      label = 68;
      break;
    } else if (($16 | 0) == 400) {
      label = 74;
      break;
    } else if (($16 | 0) == 28688) {
      label = 76;
      break;
    } else if (($16 | 0) == 29184) {
      label = 79;
      break;
    } else if (($16 | 0) == 29185) {
      label = 80;
      break;
    } else if (($16 | 0) == 29217) {
      label = 81;
      break;
    } else if (($16 | 0) == 29264) {
      label = 82;
      break;
    } else if (($16 | 0) == 29443) {
      label = 83;
      break;
    } else if (($16 | 0) == 29459) {
      label = 84;
      break;
    } else if (($16 | 0) == 33405) {
      label = 87;
      break;
    } else if (($16 | 0) == 33422 | ($16 | 0) == 64777) {
      label = 88;
      break;
    } else if (($16 | 0) == 33424 | ($16 | 0) == 65024) {
      label = 94;
      break;
    } else if (($16 | 0) == 33434) {
      label = 95;
      break;
    } else if (($16 | 0) == 33437) {
      label = 96;
      break;
    } else if (($16 | 0) == 34306) {
      label = 97;
      break;
    } else if (($16 | 0) == 34307) {
      label = 98;
      break;
    } else if (($16 | 0) == 34310) {
      label = 103;
      break;
    } else if (($16 | 0) == 34303) {
      label = 104;
      break;
    } else if (($16 | 0) == 34665) {
      label = 105;
      break;
    } else if (($16 | 0) == 34853) {
      label = 106;
      break;
    } else if (($16 | 0) == 34675 | ($16 | 0) == 50831) {
      label = 107;
      break;
    } else if (($16 | 0) == 37122) {
      label = 108;
      break;
    } else if (($16 | 0) == 37386) {
      label = 109;
      break;
    } else if (($16 | 0) == 37393) {
      label = 110;
      break;
    } else if (($16 | 0) == 46275) {
      label = 111;
      break;
    } else if (($16 | 0) == 46279) {
      label = 112;
      break;
    } else if (($16 | 0) == 46274) {
      label = 114;
      break;
    } else if (($16 | 0) == 50454 | ($16 | 0) == 50455) {
      label = 125;
      break;
    } else if (($16 | 0) == 50458) {
      label = 132;
      break;
    } else if (($16 | 0) == 50459) {
      label = 134;
      break;
    } else if (($16 | 0) == 50706) {
      label = 135;
      break;
    } else if (($16 | 0) == 50710) {
      label = 138;
      break;
    } else if (($16 | 0) == 50711) {
      label = 147;
      break;
    } else if (($16 | 0) == 291 | ($16 | 0) == 50712) {
      label = 149;
      break;
    } else if (($16 | 0) == 50713) {
      label = 150;
      break;
    } else if (($16 | 0) == 61450) {
      label = 151;
      break;
    } else if (($16 | 0) == 50714) {
      var $blrc_1 = $blrc_0349;
      var $blrr_1 = $blrr_0348;
      label = 152;
      break;
    } else if (($16 | 0) == 50717) {
      label = 166;
      break;
    } else if (($16 | 0) == 50718) {
      label = 167;
      break;
    } else if (($16 | 0) == 50729) {
      label = 174;
      break;
    } else if (($16 | 0) == 50740) {
      label = 175;
      break;
    } else if (($16 | 0) == 50752) {
      label = 177;
      break;
    } else if (($16 | 0) == 50829) {
      label = 178;
      break;
    } else if (($16 | 0) == 51009) {
      label = 181;
      break;
    } else if (($16 | 0) == 64772) {
      label = 182;
      break;
    } else if (($16 | 0) == 65026) {
      label = 184;
      break;
    } else if (($16 | 0) == 37400) {
      label = 214;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 6:
    var $17 = HEAP32[$len >> 2];
    var $18 = ($17 | 0) == 0;
    if ($18) {
      var $num_1_lcssa = 0;
      var $_lcssa273 = 0;
      label = 165;
      break;
    } else {
      var $i_6274 = 0;
      var $num_1275 = 0;
      label = 163;
      break;
    }
   case 7:
    var $19 = HEAP32[5560840 >> 2];
    var $20 = ($19 | 0) > 0;
    if ($20) {
      var $c_14271 = 0;
      label = 168;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = 1;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 8:
    var $21 = HEAP32[5560840 >> 2];
    var $22 = ($21 | 0) > 0;
    if ($22) {
      var $i_7265 = 0;
      var $744 = $21;
      label = 169;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 9:
    var $23 = HEAP32[5560840 >> 2];
    var $24 = ($23 | 0) > 0;
    if ($24) {
      var $c_16257 = 0;
      label = 172;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 10:
    var $25 = HEAP32[5560840 >> 2];
    var $26 = ($25 | 0) > 0;
    if ($26) {
      var $c_17253 = 0;
      label = 173;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 11:
    var $27 = HEAP32[$len >> 2];
    var $28 = ($27 | 0) == 0;
    if ($28) {
      label = 180;
      break;
    } else {
      var $i_8247 = 0;
      label = 179;
      break;
    }
   case 12:
    var $30 = _get2();
    HEAP16[5242964 >> 1] = $30;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 13:
    var $32 = _get2();
    HEAP16[5398712 >> 1] = $32;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 14:
    var $34 = _get2();
    var $35 = HEAP16[5242964 >> 1];
    var $36 = $35 + $34 & 65535;
    HEAP16[5242964 >> 1] = $36;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 15:
    var $38 = _get2();
    var $39 = $38 & 65535;
    HEAP32[5427632 >> 2] = $39;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 16:
    var $41 = HEAP32[$type >> 2];
    var $42 = ($41 | 0) == 3;
    if ($42) {
      label = 17;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 17:
    var $44 = HEAP32[$len >> 2];
    var $45 = ($44 | 0) == 1;
    if ($45) {
      label = 18;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 18:
    var $47 = _get2();
    var $48 = $47 & 65535;
    var $49 = $48 | 0;
    var $50 = $49 * .00390625;
    var $51 = $50;
    var $52 = $16 << 1;
    var $53 = $52 - 34 | 0;
    var $54 = 5561124 + ($53 << 2) | 0;
    HEAPF32[$54 >> 2] = $51;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 19:
    var $56 = HEAP32[$type >> 2];
    var $57 = ($56 | 0) == 3;
    if ($57) {
      label = 20;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 20:
    var $59 = _get2();
    var $60 = $59 & 65535;
    HEAPF32[5264096 >> 2] = $60;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 21:
    var $62 = _get2();
    var $63 = $62 & 65535;
    var $64 = $16 - 36 | 0;
    var $65 = 5561124 + ($64 << 2) | 0;
    HEAPF32[$65 >> 2] = $63;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 22:
    var $67 = HEAP32[$len >> 2];
    var $68 = $67 >>> 0 < 50;
    var $69 = HEAPF32[5561124 >> 2];
    var $70 = $69 != 0;
    var $or_cond = $68 | $70;
    if ($or_cond) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $71 = HEAP32[5264116 >> 2];
    var $72 = _fseek($71, 12, 1);
    var $73 = _get2();
    var $74 = $73 & 65535;
    HEAPF32[5561124 >> 2] = $74;
    var $75 = _get2();
    var $76 = $75 & 65535;
    HEAPF32[5561128 >> 2] = $76;
    var $77 = _get2();
    var $78 = $77 & 65535;
    HEAPF32[5561132 >> 2] = $78;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 24:
    var $80 = HEAP32[$type >> 2];
    var $81 = ($80 | 0) == 7;
    if ($81) {
      label = 25;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 25:
    var $83 = HEAP32[5264116 >> 2];
    var $84 = _fgetc($83);
    var $85 = ($84 | 0) == 255;
    if ($85) {
      label = 26;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 26:
    var $87 = HEAP32[5264116 >> 2];
    var $88 = _fgetc($87);
    var $89 = ($88 | 0) == 216;
    if ($89) {
      label = 27;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 27:
    var $91 = HEAP32[5264116 >> 2];
    var $92 = _ftell($91);
    var $93 = $92 - 2 | 0;
    HEAP32[5244044 >> 2] = $93;
    var $94 = HEAP32[$len >> 2];
    HEAP32[5244056 >> 2] = $94;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 28:
    var $96 = _parse_tiff_ifd($base);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 29:
    var $98 = HEAP32[$type >> 2];
    var $99 = _getint($98);
    var $100 = 5243588 + $ifd_0345 * 44 | 0;
    HEAP32[$100 >> 2] = $99;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 30:
    var $102 = HEAP32[$type >> 2];
    var $103 = _getint($102);
    var $104 = 5243592 + $ifd_0345 * 44 | 0;
    HEAP32[$104 >> 2] = $103;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 31:
    var $106 = HEAP32[$len >> 2];
    var $107 = $106 & 7;
    var $108 = 5243616 + $ifd_0345 * 44 | 0;
    HEAP32[$108 >> 2] = $107;
    var $109 = HEAP32[$type >> 2];
    var $110 = _getint($109);
    var $111 = 5243596 + $ifd_0345 * 44 | 0;
    HEAP32[$111 >> 2] = $110;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 32:
    HEAP16[5245036 >> 1] = 0;
    HEAP32[5263692 >> 2] = 36;
    var $113 = _get4();
    var $114 = ($113 | 0) == 0;
    if ($114) {
      var $117 = 80;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[5427632 >> 2] = 370546198;
    var $117 = 24;
    label = 34;
    break;
   case 34:
    var $117;
    HEAP32[5263696 >> 2] = $117;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 35:
    var $119 = HEAP32[$type >> 2];
    var $120 = _getint($119);
    var $121 = 5243600 + $ifd_0345 * 44 | 0;
    HEAP32[$121 >> 2] = $120;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 36:
    var $123 = _get2();
    var $124 = $123 & 65535;
    var $125 = 5243604 + $ifd_0345 * 44 | 0;
    HEAP32[$125 >> 2] = $124;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 37:
    var $127 = HEAP32[5264116 >> 2];
    var $128 = _fread(5427980, 512, 1, $127);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 38:
    var $130 = HEAP32[5264116 >> 2];
    var $131 = _fgets(5263628, 64, $130);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 39:
    var $133 = HEAP32[5264116 >> 2];
    var $134 = _fgets(5263372, 64, $133);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 40:
    var $136 = HEAP32[$type >> 2];
    var $137 = ($136 | 0) == 4;
    if ($137) {
      label = 41;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 41:
    HEAP32[5263692 >> 2] = 40;
    HEAP32[5263696 >> 2] = 8200;
    label = 42;
    break;
   case 42:
    var $140 = _get4();
    var $141 = $140 + $base | 0;
    var $142 = 5243608 + $ifd_0345 * 44 | 0;
    HEAP32[$142 >> 2] = $141;
    var $143 = 5243596 + $ifd_0345 * 44 | 0;
    var $144 = HEAP32[$143 >> 2];
    var $145 = ($144 | 0) == 0;
    var $146 = ($141 | 0) > 0;
    var $or_cond217 = $145 & $146;
    if ($or_cond217) {
      label = 43;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 43:
    var $148 = HEAP32[5264116 >> 2];
    var $149 = _fseek($148, $141, 0);
    var $150 = _ljpeg_start($jh, 1);
    var $151 = ($150 | 0) == 0;
    if ($151) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $153 = 5243600 + $ifd_0345 * 44 | 0;
    HEAP32[$153 >> 2] = 6;
    var $154 = HEAP32[$7 >> 2];
    var $155 = 5243588 + $ifd_0345 * 44 | 0;
    HEAP32[$155 >> 2] = $154;
    var $156 = HEAP32[$8 >> 2];
    var $157 = 5243592 + $ifd_0345 * 44 | 0;
    HEAP32[$157 >> 2] = $156;
    var $158 = HEAP32[$9 >> 2];
    HEAP32[$143 >> 2] = $158;
    var $159 = HEAP32[$10 >> 2];
    var $160 = 5243616 + $ifd_0345 * 44 | 0;
    HEAP32[$160 >> 2] = $159;
    var $161 = HEAP32[$11 >> 2];
    var $162 = ($161 | 0) == 0;
    if ($162) {
      label = 45;
      break;
    } else {
      label = 47;
      break;
    }
   case 45:
    var $164 = $159 & 1;
    var $165 = ($164 | 0) == 0;
    if ($165) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    var $167 = $154 * $159 & -1;
    HEAP32[$155 >> 2] = $167;
    label = 47;
    break;
   case 47:
    var $169 = HEAP16[5262944 >> 1];
    var $170 = HEAP32[$142 >> 2];
    var $171 = $170 + 12 | 0;
    var $172 = _parse_tiff($171);
    HEAP16[5262944 >> 1] = $169;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 48:
    var $174 = _get2();
    var $175 = $174 & 65535;
    var $176 = $175 & 7;
    var $177 = $176 + 5586852 | 0;
    var $178 = HEAP8[$177];
    var $179 = $178 << 24 >> 24;
    var $180 = $179 - 48 | 0;
    var $181 = 5243612 + $ifd_0345 * 44 | 0;
    HEAP32[$181 >> 2] = $180;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 49:
    var $183 = HEAP32[$type >> 2];
    var $184 = _getint($183);
    var $185 = $184 & 7;
    var $186 = 5243616 + $ifd_0345 * 44 | 0;
    HEAP32[$186 >> 2] = $185;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 50:
    var $188 = _get4();
    var $189 = 5243620 + $ifd_0345 * 44 | 0;
    HEAP32[$189 >> 2] = $188;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 51:
    var $190 = HEAP32[$type >> 2];
    var $191 = _getint($190);
    var $192 = $191 >>> 0;
    HEAPF32[5561128 >> 2] = $192;
    var $193 = HEAP32[$type >> 2];
    var $194 = _getint($193);
    var $195 = $194 >>> 0;
    HEAPF32[5561124 >> 2] = $195;
    var $196 = HEAP32[$type >> 2];
    var $197 = _getint($196);
    var $198 = $197 >>> 0;
    HEAPF32[5561132 >> 2] = $198;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 52:
    var $200 = HEAP32[5264116 >> 2];
    var $201 = _fgets($12, 64, $200);
    var $202 = _strncmp($12, 5586844, 5);
    var $203 = ($202 | 0) == 0;
    if ($203) {
      label = 58;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $205 = _strncmp($12, 5586808, 5);
    var $206 = ($205 | 0) == 0;
    if ($206) {
      label = 58;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $208 = _strncmp($12, 5586800, 5);
    var $209 = ($208 | 0) == 0;
    if ($209) {
      label = 58;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $211 = _strncmp($12, 5586792, 6);
    var $212 = ($211 | 0) == 0;
    if ($212) {
      label = 58;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $214 = _strncmp($12, 5586780, 10);
    var $215 = ($214 | 0) == 0;
    if ($215) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    var $217 = _strcmp($12, 5586752);
    var $218 = ($217 | 0) == 0;
    if ($218) {
      label = 58;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 58:
    HEAP32[5264100 >> 2] = 0;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 59:
    _get_timestamp(0);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 60:
    var $222 = HEAP32[5264116 >> 2];
    var $223 = _fread(5561404, 64, 1, $222);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 61:
    var $225 = HEAP32[$type >> 2];
    var $226 = _getint($225);
    var $227 = 5243624 + $ifd_0345 * 44 | 0;
    HEAP32[$227 >> 2] = $226;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 62:
    var $229 = HEAP32[$type >> 2];
    var $230 = _getint($229);
    var $231 = 5243628 + $ifd_0345 * 44 | 0;
    HEAP32[$231 >> 2] = $230;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 63:
    var $233 = HEAP32[$len >> 2];
    var $234 = $233 >>> 0 > 1;
    if ($234) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    var $236 = HEAP32[5264116 >> 2];
    var $237 = _ftell($236);
    var $241 = $237;
    label = 66;
    break;
   case 65:
    var $239 = _get4();
    var $241 = $239;
    label = 66;
    break;
   case 66:
    var $241;
    var $242 = 5243608 + $ifd_0345 * 44 | 0;
    HEAP32[$242 >> 2] = $241;
    var $243 = HEAP32[$len >> 2];
    var $244 = ($243 | 0) == 4;
    if ($244) {
      label = 67;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 67:
    HEAP32[5263692 >> 2] = 30;
    HEAP32[5264100 >> 2] = 5;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 68:
    var $247 = _strcmp(5263372, 5586740);
    var $248 = ($247 | 0) == 0;
    if ($248) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $249 = HEAP32[$len >> 2];
    var $250 = $249 - 1 | 0;
    HEAP32[$len >> 2] = $250;
    var $251 = ($249 | 0) == 0;
    if ($251) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 72;
      break;
    }
   case 70:
    var $253 = 5243588 + $ifd_0345 * 44 | 0;
    var $254 = HEAP32[$253 >> 2];
    var $255 = ($254 | 0) == 3872;
    if ($255) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 71:
    HEAP32[5263692 >> 2] = 24;
    var $257 = _get4();
    var $258 = $257 + $base | 0;
    HEAP32[5428492 >> 2] = $258;
    var $259 = $ifd_0345 + 1 | 0;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $259;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 72:
    var $260 = HEAP32[5264116 >> 2];
    var $261 = _ftell($260);
    var $262 = HEAP32[5264116 >> 2];
    var $263 = _get4();
    var $264 = $263 + $base | 0;
    var $265 = _fseek($262, $264, 0);
    var $266 = _parse_tiff_ifd($base);
    var $267 = ($266 | 0) == 0;
    if ($267) {
      label = 73;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 73:
    var $269 = HEAP32[5264116 >> 2];
    var $270 = $261 + 4 | 0;
    var $271 = _fseek($269, $270, 0);
    var $272 = HEAP32[$len >> 2];
    var $273 = $272 - 1 | 0;
    HEAP32[$len >> 2] = $273;
    var $274 = ($272 | 0) == 0;
    if ($274) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 72;
      break;
    }
   case 74:
    var $$etemp$1 = 5263628;
    var $$etemp$0$0 = 1852989779;
    var $$etemp$0$1 = 6710895;
    var $st$3$0 = $$etemp$1 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = $$etemp$1 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    HEAP32[5263496 >> 2] = 4095;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 75:
    var $j_1328_1 = $281 + 1 | 0;
    var $276 = $j_1328_1 >>> 0 > $285 >>> 0;
    if ($276) {
      label = 217;
      break;
    } else {
      label = 215;
      break;
    }
   case 76:
    var $278 = _get2();
    var $279 = $278 & 65535;
    var $280 = $279 >>> 2;
    var $281 = $280 & 4095;
    var $282 = _get2();
    var $283 = $282 & 65535;
    var $284 = $283 >>> 2;
    var $285 = $284 & 4095;
    var $286 = _get2();
    var $287 = $286 & 65535;
    var $288 = $287 >>> 2;
    var $289 = $288 & 4095;
    var $290 = _get2();
    var $291 = $290 & 65535;
    var $292 = $291 >>> 2;
    var $293 = $292 & 4095;
    var $294 = ($281 | 0) == 0;
    if ($294) {
      label = 75;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    var $_pre27 = HEAP16[5428500 >> 1];
    var $j_1330 = 1;
    var $296 = $_pre27;
    label = 78;
    break;
   case 78:
    var $296;
    var $j_1330;
    var $297 = $296 + 1 & 65535;
    var $298 = 5428500 + ($j_1330 << 1) | 0;
    HEAP16[$298 >> 1] = $297;
    var $j_1 = $j_1330 + 1 | 0;
    var $299 = $j_1 >>> 0 > $281 >>> 0;
    if ($299) {
      label = 75;
      break;
    } else {
      var $j_1330 = $j_1;
      var $296 = $297;
      label = 78;
      break;
    }
   case 79:
    var $301 = _get4();
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $301;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 80:
    var $303 = _get4();
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $303;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 81:
    var $305 = _get4();
    var $sony_key_1 = $305;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 82:
    var $307 = HEAP32[5264116 >> 2];
    var $308 = _ftell($307);
    _parse_minolta($308);
    HEAP16[5245028 >> 1] = 0;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 83:
    var $309 = _get2();
    var $310 = $309 & 65535;
    HEAPF32[5561128 >> 2] = $310;
    var $311 = _get2();
    var $312 = $311 & 65535;
    HEAPF32[5561124 >> 2] = $312;
    var $313 = _get2();
    var $314 = $313 & 65535;
    HEAPF32[5561132 >> 2] = $314;
    var $315 = _get2();
    var $316 = $315 & 65535;
    HEAPF32[5561136 >> 2] = $316;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 84:
    var $317 = _get2();
    var $318 = $317 & 65535;
    HEAPF32[5561124 >> 2] = $318;
    var $319 = _get2();
    var $320 = $319 & 65535;
    HEAPF32[5561128 >> 2] = $320;
    var $321 = _get2();
    var $322 = $321 & 65535;
    HEAPF32[5561132 >> 2] = $322;
    var $323 = _get2();
    var $324 = $323 & 65535;
    HEAPF32[5561136 >> 2] = $324;
    var $325 = HEAPF32[5561128 >> 2];
    var $326 = $325 == 1024;
    if ($326) {
      label = 85;
      break;
    } else {
      var $331 = 0;
      label = 86;
      break;
    }
   case 85:
    var $328 = HEAPF32[5561132 >> 2];
    var $329 = $328 == 1024;
    var $331 = $329;
    label = 86;
    break;
   case 86:
    var $331;
    var $332 = $331 & 1;
    var $333 = $332 << 1;
    var $334 = 5561124 + ($333 << 2) | 0;
    var $335 = HEAPF32[$334 >> 2];
    var $336 = $333 | 1;
    var $337 = 5561124 + ($336 << 2) | 0;
    var $338 = HEAPF32[$337 >> 2];
    var $339 = $335 + $338;
    var $340 = $339 - $338;
    HEAPF32[$337 >> 2] = $340;
    var $341 = $339 - $340;
    HEAPF32[$334 >> 2] = $341;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 87:
    var $343 = HEAP32[5264116 >> 2];
    var $344 = _fgets(5263308, 64, $343);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 88:
    var $346 = HEAP32[$len >> 2];
    var $347 = $346 >>> 0 > 16;
    var $_ = $347 ? 16 : $346;
    var $348 = HEAP32[5264116 >> 2];
    var $349 = _fread($13, 1, $_, $348);
    HEAP32[5560840 >> 2] = 0;
    var $350 = ($_ | 0) == 0;
    if ($350) {
      var $c_12_lcssa = 0;
      var $plen_234 = 0;
      label = 145;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $351 = $346 >>> 0 < 16;
    var $352 = $351 ? $346 : 16;
    var $cfa_0304 = 0;
    var $i_2305 = 0;
    var $354 = 0;
    label = 90;
    break;
   case 90:
    var $354;
    var $i_2305;
    var $cfa_0304;
    var $355 = $cfa_pat + $i_2305 | 0;
    var $356 = HEAP8[$355];
    var $357 = $356 & 255;
    var $358 = 1 << $357;
    var $359 = $358 & $cfa_0304;
    var $360 = ($359 | 0) == 0;
    var $361 = $360 & 1;
    var $362 = $361 + $354 | 0;
    var $363 = $358 | $cfa_0304;
    var $364 = $i_2305 + 1 | 0;
    var $exitcond383 = ($364 | 0) == ($352 | 0);
    if ($exitcond383) {
      label = 91;
      break;
    } else {
      var $cfa_0304 = $363;
      var $i_2305 = $364;
      var $354 = $362;
      label = 90;
      break;
    }
   case 91:
    HEAP32[5560840 >> 2] = $362;
    if (($363 | 0) == 56) {
      label = 92;
      break;
    } else if (($363 | 0) == 58) {
      label = 93;
      break;
    } else {
      var $plen_2 = $_;
      var $621 = $362;
      label = 141;
      break;
    }
   case 92:
    HEAP8[$1] = HEAP8[5586736];
    HEAP8[$1 + 1] = HEAP8[5586737];
    HEAP8[$1 + 2] = HEAP8[5586738];
    var $plen_2 = $_;
    var $621 = $362;
    label = 141;
    break;
   case 93:
    HEAP32[$cfa_pc >> 2] = 17040133;
    var $plen_2 = $_;
    var $621 = $362;
    label = 141;
    break;
   case 94:
    var $369 = HEAP32[5264116 >> 2];
    var $370 = _get4();
    var $371 = $370 + $base | 0;
    var $372 = _fseek($369, $371, 0);
    _parse_kodak_ifd($base);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 95:
    var $374 = HEAP32[$type >> 2];
    var $375 = _getreal($374);
    var $376 = $375;
    HEAPF32[5244912 >> 2] = $376;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 96:
    var $378 = HEAP32[$type >> 2];
    var $379 = _getreal($378);
    var $380 = $379;
    HEAPF32[5561468 >> 2] = $380;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 97:
    var $381 = _get2();
    var $382 = $381 & 65535;
    var $383 = $382 | 0;
    var $384 = 4096 / $383;
    var $385 = $384;
    HEAPF32[5561128 >> 2] = $385;
    var $386 = _get2();
    var $387 = $386 & 65535;
    var $388 = $387 | 0;
    var $389 = 4096 / $388;
    var $390 = $389;
    HEAPF32[5561124 >> 2] = $390;
    var $391 = _get2();
    var $392 = $391 & 65535;
    var $393 = $392 | 0;
    var $394 = 4096 / $393;
    var $395 = $394;
    HEAPF32[5561136 >> 2] = $395;
    var $396 = _get2();
    var $397 = $396 & 65535;
    var $398 = $397 | 0;
    var $399 = 4096 / $398;
    var $400 = $399;
    HEAPF32[5561132 >> 2] = $400;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 98:
    var $402 = HEAP32[5264116 >> 2];
    var $403 = _fread($12, 1, 7, $402);
    var $404 = _strncmp($12, 5586728, 6);
    var $405 = ($404 | 0) == 0;
    if ($405) {
      label = 99;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 99:
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5245040 >> 2] = 0;
    var $i_3299 = 0;
    label = 100;
    break;
   case 100:
    var $i_3299;
    var $407 = HEAP32[5264116 >> 2];
    var $408 = 5244968 + ($i_3299 << 4) | 0;
    var $409 = _fscanf($407, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $408, tempInt));
    var $410 = HEAP32[5264116 >> 2];
    var $411 = 5244964 + ($i_3299 << 4) | 0;
    var $412 = _fscanf($410, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $411, tempInt));
    var $413 = HEAP32[5264116 >> 2];
    var $414 = 5244976 + ($i_3299 << 4) | 0;
    var $415 = _fscanf($413, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $414, tempInt));
    var $416 = HEAP32[5264116 >> 2];
    var $417 = 5244972 + ($i_3299 << 4) | 0;
    var $418 = _fscanf($416, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $417, tempInt));
    var $_b = HEAP8[5243552];
    if ($_b) {
      label = 101;
      break;
    } else {
      label = 102;
      break;
    }
   case 101:
    var $419 = HEAPF32[$411 >> 2];
    var $420 = $419;
    var $421 = $420;
    var $422 = HEAPF32[$408 >> 2];
    var $423 = $422;
    var $424 = $421 + $423;
    var $425 = HEAPF32[$417 >> 2];
    var $426 = $425;
    var $427 = $424 + $426;
    var $428 = HEAPF32[$414 >> 2];
    var $429 = $428;
    var $430 = $427 + $429;
    var $431 = $420 / $430;
    var $432 = $431;
    HEAPF32[$411 >> 2] = $432;
    var $433 = $423 / $430;
    var $434 = $433;
    HEAPF32[$408 >> 2] = $434;
    var $435 = $426 / $430;
    var $436 = $435;
    HEAPF32[$417 >> 2] = $436;
    var $437 = $429 / $430;
    var $438 = $437;
    HEAPF32[$414 >> 2] = $438;
    label = 102;
    break;
   case 102:
    var $440 = $i_3299 + 1 | 0;
    var $exitcond379 = ($440 | 0) == 3;
    if ($exitcond379) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      var $i_3299 = $440;
      label = 100;
      break;
    }
   case 103:
    var $442 = HEAP32[5264116 >> 2];
    var $443 = _ftell($442);
    _parse_mos($443);
    label = 104;
    break;
   case 104:
    HEAP8[5263628] = HEAP8[5586700];
    HEAP8[5263629] = HEAP8[5586701];
    HEAP8[5263630] = HEAP8[5586702];
    HEAP8[5263631] = HEAP8[5586703];
    HEAP8[5263632] = HEAP8[5586704];
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 105:
    var $446 = HEAP32[5264116 >> 2];
    var $447 = _get4();
    var $448 = $447 + $base | 0;
    var $449 = _fseek($446, $448, 0);
    _parse_exif($base);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 106:
    var $451 = HEAP32[5264116 >> 2];
    var $452 = _get4();
    var $453 = $452 + $base | 0;
    var $454 = _fseek($451, $453, 0);
    _parse_gps($base);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 107:
    var $456 = HEAP32[5264116 >> 2];
    var $457 = _ftell($456);
    var $458 = HEAP32[$len >> 2];
    HEAP32[5245636 >> 2] = $458;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 108:
    var $460 = _get4();
    HEAP32[5264036 >> 2] = $460;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 109:
    var $462 = HEAP32[$type >> 2];
    var $463 = _getreal($462);
    var $464 = $463;
    HEAPF32[5403044 >> 2] = $464;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 110:
    var $466 = HEAP32[$type >> 2];
    var $467 = _getint($466);
    HEAP32[5244924 >> 2] = $467;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 111:
    HEAP8[5263628] = HEAP8[5586692];
    HEAP8[5263629] = HEAP8[5586693];
    HEAP8[5263630] = HEAP8[5586694];
    HEAP8[5263631] = HEAP8[5586695];
    HEAP8[5263632] = HEAP8[5586696];
    HEAP8[5263633] = HEAP8[5586697];
    HEAP8[5263634] = HEAP8[5586698];
    var $469 = HEAP32[5264116 >> 2];
    var $470 = _ftell($469);
    HEAP32[5428492 >> 2] = $470;
    var $471 = HEAP32[$len >> 2];
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $471;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 112:
    var $473 = ($ima_len_0347 | 0) == 0;
    if ($473) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = 0;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 113;
      break;
    }
   case 113:
    var $475 = HEAP32[5264116 >> 2];
    var $476 = _fseek($475, 38, 1);
    label = 114;
    break;
   case 114:
    var $478 = HEAP32[5264116 >> 2];
    var $479 = _fseek($478, 40, 1);
    var $480 = _get4();
    var $481 = $480 & 65535;
    HEAP16[5245028 >> 1] = $481;
    var $482 = _get4();
    var $483 = $482 & 65535;
    HEAP16[5245036 >> 1] = $483;
    var $484 = _get4();
    var $_tr = $484 & 65535;
    var $485 = $_tr & 7;
    HEAP16[5263700 >> 1] = $485;
    var $486 = HEAP16[5245028 >> 1];
    var $487 = $486 & 65535;
    var $488 = $485 & 65535;
    var $489 = $487 - $488 | 0;
    var $490 = _get4();
    var $491 = $490 & 7;
    var $492 = $489 - $491 | 0;
    var $493 = $492 & 65535;
    HEAP16[5242964 >> 1] = $493;
    var $494 = _get4();
    var $_tr216 = $494 & 65535;
    var $495 = $_tr216 & 7;
    HEAP16[5243564 >> 1] = $495;
    var $496 = HEAP16[5245036 >> 1];
    var $497 = $496 & 65535;
    var $498 = $495 & 65535;
    var $499 = $497 - $498 | 0;
    var $500 = _get4();
    var $501 = $500 & 7;
    var $502 = $499 - $501 | 0;
    var $503 = $502 & 65535;
    HEAP16[5398712 >> 1] = $503;
    var $504 = HEAP16[5245028 >> 1];
    var $505 = $504 << 16 >> 16 == 7262;
    if ($505) {
      label = 115;
      break;
    } else {
      label = 116;
      break;
    }
   case 115:
    HEAP16[5398712 >> 1] = 5444;
    HEAP16[5242964 >> 1] = 7244;
    HEAP16[5263700 >> 1] = 7;
    label = 116;
    break;
   case 116:
    var $508 = HEAP32[5264116 >> 2];
    var $509 = _fseek($508, 52, 1);
    var $510 = _getreal(11);
    var $511 = $510;
    HEAPF32[5561124 >> 2] = $511;
    var $512 = _getreal(11);
    var $513 = $512;
    HEAPF32[5561128 >> 2] = $513;
    var $514 = _getreal(11);
    var $515 = $514;
    HEAPF32[5561132 >> 2] = $515;
    var $516 = HEAP32[5264116 >> 2];
    var $517 = _fseek($516, 114, 1);
    var $518 = _get2();
    var $519 = $518 & 65535;
    var $520 = $519 >>> 7;
    var $521 = $520 * 90 & -1;
    HEAP32[5403048 >> 2] = $521;
    var $522 = HEAP16[5242964 >> 1];
    var $523 = $522 & 65535;
    var $524 = HEAP16[5398712 >> 1];
    var $525 = $524 & 65535;
    var $526 = $523 * 6 & -1;
    var $527 = $526 * $525 & -1;
    var $528 = ($527 | 0) == ($ima_len_0347 | 0);
    if ($528) {
      label = 117;
      break;
    } else {
      var $538 = $524;
      var $537 = $522;
      label = 120;
      break;
    }
   case 117:
    var $530 = ($521 >>> 0) % 180;
    var $531 = ($530 | 0) == 90;
    if ($531) {
      label = 118;
      break;
    } else {
      var $535 = $522;
      var $534 = $524;
      label = 119;
      break;
    }
   case 118:
    HEAP16[5398712 >> 1] = $522;
    HEAP16[5242964 >> 1] = $524;
    var $535 = $524;
    var $534 = $522;
    label = 119;
    break;
   case 119:
    var $534;
    var $535;
    HEAP16[5245028 >> 1] = $535;
    HEAP16[5245036 >> 1] = $534;
    HEAP32[5403048 >> 2] = 0;
    HEAP32[5427632 >> 2] = 0;
    HEAP16[5243564 >> 1] = 0;
    HEAP16[5263700 >> 1] = 0;
    var $538 = $534;
    var $537 = $535;
    label = 120;
    break;
   case 120:
    var $537;
    var $538;
    var $539 = $538 & 65535;
    var $540 = $537 & 65535;
    var $541 = $540 * $539 & -1;
    var $542 = Math.floor(($541 >>> 0) / 1e6);
    var $543 = _sprintf(5263372, 5586676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $542, tempInt));
    HEAP32[5263692 >> 2] = 72;
    var $544 = HEAP32[5427632 >> 2];
    var $545 = ($544 | 0) == 0;
    if ($545) {
      label = 124;
      break;
    } else {
      label = 121;
      break;
    }
   case 121:
    var $547 = HEAP16[5263700 >> 1];
    var $548 = $547 & 1;
    var $549 = $548 << 16 >> 16 == 0;
    if ($549) {
      label = 123;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 123;
    break;
   case 123:
    HEAP32[5263692 >> 2] = 4;
    label = 124;
    break;
   case 124:
    HEAP32[5263496 >> 2] = 65535;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 125:
    var $554 = HEAP32[$len >> 2];
    var $555 = _malloc($554);
    var $556 = ($555 | 0) == 0;
    if ($556) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 126;
      break;
    }
   case 126:
    var $558 = HEAP32[$len >> 2];
    var $559 = HEAP32[5264116 >> 2];
    var $560 = _fread($555, 1, $558, $559);
    var $561 = $555 - 1 | 0;
    var $562 = ($561 | 0) == 0;
    if ($562) {
      label = 131;
      break;
    } else {
      var $cp_0283 = $561;
      label = 127;
      break;
    }
   case 127:
    var $cp_0283;
    var $563 = HEAP32[$len >> 2];
    var $564 = $555 + $563 | 0;
    var $565 = $cp_0283 >>> 0 < $564 >>> 0;
    if ($565) {
      label = 128;
      break;
    } else {
      label = 131;
      break;
    }
   case 128:
    var $567 = $cp_0283 + 1 | 0;
    var $568 = _strncmp($567, 5586664, 8);
    var $569 = ($568 | 0) == 0;
    if ($569) {
      label = 129;
      break;
    } else {
      label = 130;
      break;
    }
   case 129:
    var $571 = $cp_0283 + 9 | 0;
    var $572 = _sscanf($571, 5586652, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5561124, HEAP32[tempInt + 4 >> 2] = 5561128, HEAP32[tempInt + 8 >> 2] = 5561132, tempInt));
    label = 130;
    break;
   case 130:
    var $574 = _strchr($567, 10);
    var $575 = ($574 | 0) == 0;
    if ($575) {
      label = 131;
      break;
    } else {
      var $cp_0283 = $574;
      label = 127;
      break;
    }
   case 131:
    _free($555);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 132:
    var $577 = HEAP8[5263628];
    var $578 = $577 << 24 >> 24 == 0;
    if ($578) {
      label = 133;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 133:
    for (var $$src = 5586640, $$dest = 5263628, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 134:
    var $581 = HEAP16[5262944 >> 1];
    var $582 = HEAP32[5264116 >> 2];
    var $583 = _ftell($582);
    var $584 = HEAP32[5243584 >> 2];
    var $585 = _get2();
    HEAP16[5262944 >> 1] = $585;
    var $586 = HEAP32[5264116 >> 2];
    var $587 = _get2();
    var $588 = _get4();
    var $589 = $588 + $583 | 0;
    var $590 = _fseek($586, $589, 0);
    var $591 = _parse_tiff_ifd($583);
    HEAP32[5263496 >> 2] = 65535;
    HEAP32[5243584 >> 2] = $584;
    HEAP16[5262944 >> 1] = $581;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 135:
    var $592 = HEAP32[5427976 >> 2];
    var $593 = $592 << 8;
    var $594 = HEAP32[5264116 >> 2];
    var $595 = _fgetc($594);
    var $596 = $595 + $593 | 0;
    HEAP32[5427976 >> 2] = $596;
    var $597 = $596 << 8;
    var $598 = HEAP32[5264116 >> 2];
    var $599 = _fgetc($598);
    var $600 = $599 + $597 | 0;
    HEAP32[5427976 >> 2] = $600;
    var $601 = $600 << 8;
    var $602 = HEAP32[5264116 >> 2];
    var $603 = _fgetc($602);
    var $604 = $603 + $601 | 0;
    HEAP32[5427976 >> 2] = $604;
    var $605 = $604 << 8;
    var $606 = HEAP32[5264116 >> 2];
    var $607 = _fgetc($606);
    var $608 = $607 + $605 | 0;
    HEAP32[5427976 >> 2] = $608;
    var $609 = HEAP8[5263628];
    var $610 = $609 << 24 >> 24 == 0;
    if ($610) {
      label = 136;
      break;
    } else {
      label = 137;
      break;
    }
   case 136:
    HEAP32[5263628 >> 2] = 4673092;
    label = 137;
    break;
   case 137:
    HEAP32[5264100 >> 2] = 1;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 138:
    var $614 = HEAP32[$len >> 2];
    var $615 = $614 >>> 0 > 4;
    if ($615) {
      label = 139;
      break;
    } else {
      var $618 = $614;
      label = 140;
      break;
    }
   case 139:
    HEAP32[$len >> 2] = 4;
    var $618 = 4;
    label = 140;
    break;
   case 140:
    var $618;
    HEAP32[5560840 >> 2] = $618;
    var $619 = HEAP32[5264116 >> 2];
    var $620 = _fread($1, 1, $618, $619);
    var $_pr_pre = HEAP32[5560840 >> 2];
    var $plen_2 = $plen_0350;
    var $621 = $_pr_pre;
    label = 141;
    break;
   case 141:
    var $621;
    var $plen_2;
    var $622 = ($621 | 0) > 0;
    if ($622) {
      label = 142;
      break;
    } else {
      var $c_12_lcssa = 0;
      var $plen_234 = $plen_2;
      label = 145;
      break;
    }
   case 142:
    var $623 = ($621 | 0) > 1;
    var $c_12311 = 0;
    label = 143;
    break;
   case 143:
    var $c_12311;
    var $625 = $c_12311 & 255;
    var $626 = $tmpcast + $c_12311 | 0;
    var $627 = HEAP8[$626];
    var $628 = $627 & 255;
    var $629 = $tab + $628 | 0;
    HEAP8[$629] = $625;
    var $630 = $c_12311 + 1 | 0;
    var $631 = ($630 | 0) < ($621 | 0);
    if ($631) {
      var $c_12311 = $630;
      label = 143;
      break;
    } else {
      label = 144;
      break;
    }
   case 144:
    var $smax = $623 ? $621 : 1;
    var $c_12_lcssa = $smax;
    var $plen_234 = $plen_2;
    label = 145;
    break;
   case 145:
    var $plen_234;
    var $c_12_lcssa;
    var $632 = $c_12_lcssa + 5560896 | 0;
    HEAP8[$632] = 0;
    var $filters_promoted = HEAP32[5427632 >> 2];
    var $635 = 15;
    var $634 = $filters_promoted;
    label = 146;
    break;
   case 146:
    var $634;
    var $635;
    var $636 = $634 << 2;
    var $637 = ($635 >>> 0) % ($plen_234 >>> 0);
    var $638 = $cfa_pat + $637 | 0;
    var $639 = HEAP8[$638];
    var $640 = $639 & 255;
    var $641 = $tab + $640 | 0;
    var $642 = HEAP8[$641];
    var $643 = $642 & 255;
    var $644 = $643 | $636;
    var $645 = $635 - 1 | 0;
    var $646 = ($635 | 0) == 0;
    if ($646) {
      label = 186;
      break;
    } else {
      var $635 = $645;
      var $634 = $644;
      label = 146;
      break;
    }
   case 147:
    var $648 = _get2();
    var $649 = $648 << 16 >> 16 == 2;
    if ($649) {
      label = 148;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 148:
    HEAP16[5398900 >> 1] = 1;
    HEAP32[5427632 >> 2] = 1229539657;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 149:
    var $652 = HEAP32[$len >> 2];
    _linear_table($652);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 150:
    var $654 = _get2();
    var $655 = $654 & 65535;
    var $656 = _get2();
    var $657 = $656 & 65535;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $657;
    var $blrr_2 = $655;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 151:
    var $blrc_1 = 2;
    var $blrr_1 = 2;
    label = 152;
    break;
   case 152:
    var $blrr_1;
    var $blrc_1;
    var $660 = HEAP32[$type >> 2];
    var $661 = _getreal($660);
    var $662 = $661 >= 0 ? Math.floor($661) : Math.ceil($661);
    HEAP32[5561400 >> 2] = $662;
    var $663 = HEAP32[5427632 >> 2];
    if (($663 | 0) == 0 | ($663 | 0) == -1) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_1;
      var $blrr_2 = $blrr_1;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 153;
      break;
    }
   case 153:
    var $665 = ($blrc_1 | 0) == 2;
    if ($665) {
      label = 154;
      break;
    } else {
      label = 155;
      break;
    }
   case 154:
    var $667 = HEAP32[$type >> 2];
    var $668 = _getreal($667);
    var $672 = $668;
    label = 156;
    break;
   case 155:
    var $670 = $662 | 0;
    var $672 = $670;
    label = 156;
    break;
   case 156:
    var $672;
    var $673 = $672 & -1;
    var $674 = ($blrr_1 | 0) == 2;
    if ($674) {
      label = 157;
      break;
    } else {
      var $dblack_sroa_2_0 = $662;
      label = 159;
      break;
    }
   case 157:
    var $676 = HEAP32[$type >> 2];
    var $677 = _getreal($676);
    var $678 = $677 & -1;
    if ($665) {
      label = 158;
      break;
    } else {
      var $dblack_sroa_2_0 = $678;
      label = 159;
      break;
    }
   case 158:
    var $680 = HEAP32[$type >> 2];
    var $681 = _getreal($680);
    var $684 = $681;
    var $dblack_sroa_2_1 = $678;
    label = 160;
    break;
   case 159:
    var $dblack_sroa_2_0;
    var $682 = $673 | 0;
    var $684 = $682;
    var $dblack_sroa_2_1 = $dblack_sroa_2_0;
    label = 160;
    break;
   case 160:
    var $dblack_sroa_2_1;
    var $684;
    var $685 = $684 & -1;
    var $686 = HEAP32[5560840 >> 2];
    var $687 = ($686 | 0) == 3;
    var $688 = HEAP32[5427632 >> 2];
    if ($687) {
      label = 161;
      break;
    } else {
      var $698 = $688;
      label = 162;
      break;
    }
   case 161:
    var $690 = $688 >>> 2;
    var $691 = $690 & 572662306;
    var $692 = $688 << 2;
    var $693 = $692 & -2004318072;
    var $694 = $691 | $693;
    var $695 = $688 << 1;
    var $696 = $694 & $695;
    var $697 = $696 | $688;
    HEAP32[5427632 >> 2] = $697;
    var $698 = $697;
    label = 162;
    break;
   case 162:
    var $698;
    var $699 = $698 & 3;
    var $700 = 5560904 + ($699 << 2) | 0;
    HEAP32[$700 >> 2] = $662;
    var $701 = $698 >>> 2;
    var $702 = $701 & 3;
    var $703 = 5560904 + ($702 << 2) | 0;
    HEAP32[$703 >> 2] = $673;
    var $704 = $698 >>> 4;
    var $705 = $704 & 3;
    var $706 = 5560904 + ($705 << 2) | 0;
    HEAP32[$706 >> 2] = $dblack_sroa_2_1;
    var $707 = $698 >>> 6;
    var $708 = $707 & 3;
    var $709 = 5560904 + ($708 << 2) | 0;
    HEAP32[$709 >> 2] = $685;
    HEAP32[5561400 >> 2] = 0;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_1;
    var $blrr_2 = $blrr_1;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 163:
    var $num_1275;
    var $i_6274;
    var $710 = HEAP32[$type >> 2];
    var $711 = _getreal($710);
    var $712 = $num_1275 + $711;
    var $713 = $i_6274 + 1 | 0;
    var $714 = HEAP32[$len >> 2];
    var $715 = $713 >>> 0 < $714 >>> 0;
    if ($715) {
      var $i_6274 = $713;
      var $num_1275 = $712;
      label = 163;
      break;
    } else {
      label = 164;
      break;
    }
   case 164:
    var $phitmp = $714 >>> 0;
    var $num_1_lcssa = $712;
    var $_lcssa273 = $phitmp;
    label = 165;
    break;
   case 165:
    var $_lcssa273;
    var $num_1_lcssa;
    var $716 = $num_1_lcssa / $_lcssa273;
    var $717 = $716 + .5;
    var $718 = HEAP32[5561400 >> 2];
    var $719 = $718 >>> 0;
    var $720 = $717 + $719;
    var $721 = $720 >= 0 ? Math.floor($720) : Math.ceil($720);
    HEAP32[5561400 >> 2] = $721;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 166:
    var $723 = HEAP32[$type >> 2];
    var $724 = _getint($723);
    HEAP32[5263496 >> 2] = $724;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 167:
    var $726 = HEAP32[$type >> 2];
    var $727 = _getreal($726);
    HEAPF64[tempDoublePtr >> 3] = $727, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $728 = HEAP32[$type >> 2];
    var $729 = _getreal($728);
    var $730 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $731 = $730 / $729;
    HEAPF64[tempDoublePtr >> 3] = $731, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 168:
    var $c_14271;
    var $732 = HEAP32[$type >> 2];
    var $733 = _getreal($732);
    var $734 = $cm + $c_14271 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = $733, HEAP32[$734 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$734 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $735 = HEAP32[$type >> 2];
    var $736 = _getreal($735);
    var $737 = $cm + $c_14271 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $736, HEAP32[$737 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$737 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $738 = HEAP32[$type >> 2];
    var $739 = _getreal($738);
    var $740 = $cm + $c_14271 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $739, HEAP32[$740 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$740 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $741 = $c_14271 + 1 | 0;
    var $742 = HEAP32[5560840 >> 2];
    var $743 = ($741 | 0) < ($742 | 0);
    if ($743) {
      var $c_14271 = $741;
      label = 168;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = 1;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 169:
    var $744;
    var $i_7265;
    var $745 = ($744 | 0) > 0;
    if ($745) {
      var $c_15260 = 0;
      label = 170;
      break;
    } else {
      var $752 = $744;
      label = 171;
      break;
    }
   case 170:
    var $c_15260;
    var $746 = HEAP32[$type >> 2];
    var $747 = _getreal($746);
    var $748 = $cc + ($i_7265 << 5) + ($c_15260 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $747, HEAP32[$748 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$748 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $749 = $c_15260 + 1 | 0;
    var $750 = HEAP32[5560840 >> 2];
    var $751 = ($749 | 0) < ($750 | 0);
    if ($751) {
      var $c_15260 = $749;
      label = 170;
      break;
    } else {
      var $752 = $750;
      label = 171;
      break;
    }
   case 171:
    var $752;
    var $753 = $i_7265 + 1 | 0;
    var $754 = ($753 | 0) < ($752 | 0);
    if ($754) {
      var $i_7265 = $753;
      var $744 = $752;
      label = 169;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 172:
    var $c_16257;
    var $755 = HEAP32[$type >> 2];
    var $756 = _getreal($755);
    var $757 = $ab + ($c_16257 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $756, HEAP32[$757 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$757 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $758 = $c_16257 + 1 | 0;
    var $759 = HEAP32[5560840 >> 2];
    var $760 = ($758 | 0) < ($759 | 0);
    if ($760) {
      var $c_16257 = $758;
      label = 172;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 173:
    var $c_17253;
    var $761 = HEAP32[$type >> 2];
    var $762 = _getreal($761);
    var $763 = $asn + ($c_17253 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $762, HEAP32[$763 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$763 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $764 = $c_17253 + 1 | 0;
    var $765 = HEAP32[5560840 >> 2];
    var $766 = ($764 | 0) < ($765 | 0);
    if ($766) {
      var $c_17253 = $764;
      label = 173;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 174:
    var $767 = HEAP32[$type >> 2];
    var $768 = _getreal($767);
    var $769 = HEAP32[$type >> 2];
    var $770 = _getreal($769);
    var $771 = 1 - $768;
    var $772 = $771 - $770;
    var $773 = $768 / .9504560232162476;
    var $774 = $772 / 1.0887540578842163;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $773;
    var $xyz_sroa_1_1 = $770;
    var $xyz_sroa_2_1 = $774;
    label = 187;
    break;
   case 175:
    var $776 = HEAP32[5427976 >> 2];
    var $777 = ($776 | 0) == 0;
    if ($777) {
      label = 176;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 176:
    var $779 = _get4();
    var $780 = $779 + $base | 0;
    _parse_minolta($780);
    var $781 = HEAP32[5264116 >> 2];
    var $782 = _fseek($781, $780, 0);
    var $783 = _parse_tiff_ifd($base);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 177:
    _read_shorts(5560200, 3);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 178:
    var $786 = HEAP32[$type >> 2];
    var $787 = _getint($786);
    var $788 = $787 & 65535;
    HEAP16[5243564 >> 1] = $788;
    var $789 = HEAP32[$type >> 2];
    var $790 = _getint($789);
    var $791 = $790 & 65535;
    HEAP16[5263700 >> 1] = $791;
    var $792 = HEAP32[$type >> 2];
    var $793 = _getint($792);
    var $794 = HEAP16[5243564 >> 1];
    var $795 = $794 & 65535;
    var $796 = $793 - $795 | 0;
    var $797 = $796 & 65535;
    HEAP16[5398712 >> 1] = $797;
    var $798 = HEAP32[$type >> 2];
    var $799 = _getint($798);
    var $800 = HEAP16[5263700 >> 1];
    var $801 = $800 & 65535;
    var $802 = $799 - $801 | 0;
    var $803 = $802 & 65535;
    HEAP16[5242964 >> 1] = $803;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 179:
    var $i_8247;
    var $804 = HEAP32[$type >> 2];
    var $805 = _getint($804);
    var $806 = 5263500 + ($i_8247 << 2) | 0;
    HEAP32[$806 >> 2] = $805;
    var $807 = $i_8247 + 1 | 0;
    var $808 = HEAP32[$len >> 2];
    var $809 = $807 >>> 0 < $808 >>> 0;
    var $810 = ($807 | 0) < 32;
    var $or_cond4 = $809 & $810;
    if ($or_cond4) {
      var $i_8247 = $807;
      label = 179;
      break;
    } else {
      label = 180;
      break;
    }
   case 180:
    HEAP32[5561400 >> 2] = 0;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 181:
    var $812 = HEAP32[5264116 >> 2];
    var $813 = _ftell($812);
    HEAP32[5263440 >> 2] = $813;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 182:
    var $815 = HEAP32[$len >> 2];
    var $816 = $815 >>> 0 < 13;
    if ($816) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 183;
      break;
    }
   case 183:
    var $818 = HEAP32[5264116 >> 2];
    var $819 = _fseek($818, 16, 1);
    var $820 = _get4();
    HEAP32[5428492 >> 2] = $820;
    var $821 = HEAP32[5264116 >> 2];
    var $822 = _fseek($821, 28, 1);
    var $823 = _get4();
    var $824 = HEAP32[5428492 >> 2];
    var $825 = $824 + $823 | 0;
    HEAP32[5428492 >> 2] = $825;
    HEAP32[5263692 >> 2] = 36;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 184:
    var $827 = HEAP32[$type >> 2];
    var $828 = ($827 | 0) == 2;
    if ($828) {
      label = 185;
      break;
    } else {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 185:
    var $830 = HEAP32[5264116 >> 2];
    var $831 = _fgets(5263308, 64, $830);
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 186:
    HEAP32[5427632 >> 2] = $644;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_234;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 187:
    var $xyz_sroa_2_1;
    var $xyz_sroa_1_1;
    var $xyz_sroa_0_1;
    var $ifd_1;
    var $use_cm_1;
    var $ima_len_1;
    var $blrr_2;
    var $blrc_2;
    var $plen_3;
    var $sony_offset_1;
    var $sony_length_1;
    var $sony_key_1;
    var $832 = HEAP32[5264116 >> 2];
    var $833 = HEAP32[$save >> 2];
    var $834 = _fseek($832, $833, 0);
    var $835 = ($15 | 0) == 0;
    if ($835) {
      label = 188;
      break;
    } else {
      var $ifd_0345 = $ifd_1;
      var $use_cm_0346 = $use_cm_1;
      var $ima_len_0347 = $ima_len_1;
      var $blrr_0348 = $blrr_2;
      var $blrc_0349 = $blrc_2;
      var $plen_0350 = $plen_3;
      var $sony_offset_0351 = $sony_offset_1;
      var $sony_length_0352 = $sony_length_1;
      var $sony_key_0353 = $sony_key_1;
      var $_in = $15;
      var $xyz_sroa_0_0 = $xyz_sroa_0_1;
      var $xyz_sroa_1_0 = $xyz_sroa_1_1;
      var $xyz_sroa_2_0 = $xyz_sroa_2_1;
      label = 5;
      break;
    }
   case 188:
    var $836 = ($sony_length_1 | 0) == 0;
    if ($836) {
      var $use_cm_0_lcssa395 = $use_cm_1;
      var $xyz_sroa_0_2 = $xyz_sroa_0_1;
      var $xyz_sroa_1_2 = $xyz_sroa_1_1;
      var $xyz_sroa_2_2 = $xyz_sroa_2_1;
      label = 193;
      break;
    } else {
      label = 189;
      break;
    }
   case 189:
    var $838 = _malloc($sony_length_1);
    var $839 = ($838 | 0) == 0;
    if ($839) {
      var $use_cm_0_lcssa395 = $use_cm_1;
      var $xyz_sroa_0_2 = $xyz_sroa_0_1;
      var $xyz_sroa_1_2 = $xyz_sroa_1_1;
      var $xyz_sroa_2_2 = $xyz_sroa_2_1;
      label = 193;
      break;
    } else {
      label = 190;
      break;
    }
   case 190:
    var $841 = $838;
    var $842 = HEAP32[5264116 >> 2];
    var $843 = _fseek($842, $sony_offset_1, 0);
    var $844 = HEAP32[5264116 >> 2];
    var $845 = _fread($838, $sony_length_1, 1, $844);
    var $846 = $sony_length_1 >>> 2;
    _sony_decrypt($841, $846, 1, $sony_key_1);
    var $847 = HEAP32[5264116 >> 2];
    var $848 = _tmpfile();
    HEAP32[5264116 >> 2] = $848;
    var $849 = ($848 | 0) == 0;
    if ($849) {
      label = 192;
      break;
    } else {
      label = 191;
      break;
    }
   case 191:
    var $851 = _fwrite($838, $sony_length_1, 1, $848);
    var $852 = HEAP32[5264116 >> 2];
    var $853 = _fseek($852, 0, 0);
    var $854 = -$sony_offset_1 | 0;
    var $855 = _parse_tiff_ifd($854);
    var $856 = HEAP32[5264116 >> 2];
    var $857 = _fclose($856);
    label = 192;
    break;
   case 192:
    HEAP32[5264116 >> 2] = $847;
    _free($838);
    var $use_cm_0_lcssa395 = $use_cm_1;
    var $xyz_sroa_0_2 = $xyz_sroa_0_1;
    var $xyz_sroa_1_2 = $xyz_sroa_1_1;
    var $xyz_sroa_2_2 = $xyz_sroa_2_1;
    label = 193;
    break;
   case 193:
    var $xyz_sroa_2_2;
    var $xyz_sroa_1_2;
    var $xyz_sroa_0_2;
    var $use_cm_0_lcssa395;
    var $859 = HEAP32[5560840 >> 2];
    var $860 = ($859 | 0) > 0;
    if ($860) {
      var $i_9242 = 0;
      label = 194;
      break;
    } else {
      label = 197;
      break;
    }
   case 194:
    var $i_9242;
    var $861 = $ab + ($i_9242 << 3) | 0;
    var $862 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$861 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$861 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $c_19238 = 0;
    label = 195;
    break;
   case 195:
    var $c_19238;
    var $864 = $cc + ($i_9242 << 5) + ($c_19238 << 3) | 0;
    var $865 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$864 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$864 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $866 = $862 * $865;
    HEAPF64[tempDoublePtr >> 3] = $866, HEAP32[$864 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$864 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $867 = $c_19238 + 1 | 0;
    var $exitcond365 = ($867 | 0) == ($859 | 0);
    if ($exitcond365) {
      label = 196;
      break;
    } else {
      var $c_19238 = $867;
      label = 195;
      break;
    }
   case 196:
    var $868 = $i_9242 + 1 | 0;
    var $869 = ($868 | 0) < ($859 | 0);
    if ($869) {
      var $i_9242 = $868;
      label = 194;
      break;
    } else {
      label = 197;
      break;
    }
   case 197:
    var $870 = ($use_cm_0_lcssa395 | 0) != 0;
    if ($870) {
      label = 198;
      break;
    } else {
      label = 202;
      break;
    }
   case 198:
    if ($860) {
      var $c_20235 = 0;
      label = 199;
      break;
    } else {
      label = 201;
      break;
    }
   case 199:
    var $c_20235;
    var $871 = $cam_xyz + $c_20235 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$871 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$871 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3229 = 0;
    var $873 = 0;
    label = 200;
    break;
   case 200:
    var $873;
    var $j_3229;
    var $874 = $cc + ($c_20235 << 5) + ($j_3229 << 3) | 0;
    var $875 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$874 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$874 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $876 = $cm + $j_3229 * 24 | 0;
    var $877 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$876 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$876 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $878 = $875 * $877;
    var $879 = $878 * $xyz_sroa_0_2;
    var $880 = $873 + $879;
    var $881 = $j_3229 + 1 | 0;
    var $exitcond = ($881 | 0) == ($859 | 0);
    if ($exitcond) {
      label = 209;
      break;
    } else {
      var $j_3229 = $881;
      var $873 = $880;
      label = 200;
      break;
    }
   case 201:
    var $882 = $cam_xyz | 0;
    _cam_xyz_coeff($882);
    label = 202;
    break;
   case 202:
    var $883 = $asn | 0;
    var $884 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$883 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$883 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $885 = $884 != 0;
    if ($885) {
      label = 203;
      break;
    } else {
      label = 206;
      break;
    }
   case 203:
    HEAPF32[5561136 >> 2] = 0;
    if ($860) {
      var $c_21227 = 0;
      var $887 = $884;
      label = 204;
      break;
    } else {
      var $_0 = 0;
      label = 208;
      break;
    }
   case 204:
    var $887;
    var $c_21227;
    var $888 = 1 / $887;
    var $889 = $888;
    var $890 = 5561124 + ($c_21227 << 2) | 0;
    HEAPF32[$890 >> 2] = $889;
    var $891 = $c_21227 + 1 | 0;
    var $892 = ($891 | 0) < ($859 | 0);
    if ($892) {
      label = 205;
      break;
    } else {
      label = 206;
      break;
    }
   case 205:
    var $_phi_trans_insert31 = $asn + ($891 << 3) | 0;
    var $_pre32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$_phi_trans_insert31 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$_phi_trans_insert31 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $c_21227 = $891;
    var $887 = $_pre32;
    label = 204;
    break;
   case 206:
    var $_not = $870 ^ 1;
    var $or_cond399 = $860 & $_not;
    if ($or_cond399) {
      var $c_22225 = 0;
      label = 207;
      break;
    } else {
      var $_0 = 0;
      label = 208;
      break;
    }
   case 207:
    var $c_22225;
    var $893 = $cc + ($c_22225 << 5) + ($c_22225 << 3) | 0;
    var $894 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$893 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$893 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $895 = 5245640 + ($c_22225 << 2) | 0;
    var $896 = HEAPF32[$895 >> 2];
    var $897 = $896;
    var $898 = $897 / $894;
    var $899 = $898;
    HEAPF32[$895 >> 2] = $899;
    var $900 = $c_22225 + 1 | 0;
    var $901 = ($900 | 0) < ($859 | 0);
    if ($901) {
      var $c_22225 = $900;
      label = 207;
      break;
    } else {
      var $_0 = 0;
      label = 208;
      break;
    }
   case 208:
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
   case 209:
    HEAPF64[tempDoublePtr >> 3] = $880, HEAP32[$871 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$871 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $902 = $cam_xyz + $c_20235 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$902 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$902 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3229_1 = 0;
    var $904 = 0;
    label = 210;
    break;
   case 210:
    var $904;
    var $j_3229_1;
    var $905 = $cc + ($c_20235 << 5) + ($j_3229_1 << 3) | 0;
    var $906 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$905 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$905 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $907 = $cm + $j_3229_1 * 24 + 8 | 0;
    var $908 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$907 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$907 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $909 = $906 * $908;
    var $910 = $909 * $xyz_sroa_1_2;
    var $911 = $904 + $910;
    var $912 = $j_3229_1 + 1 | 0;
    var $exitcond_1 = ($912 | 0) == ($859 | 0);
    if ($exitcond_1) {
      label = 211;
      break;
    } else {
      var $j_3229_1 = $912;
      var $904 = $911;
      label = 210;
      break;
    }
   case 211:
    HEAPF64[tempDoublePtr >> 3] = $911, HEAP32[$902 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$902 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $913 = $cam_xyz + $c_20235 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$913 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$913 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3229_2 = 0;
    var $915 = 0;
    label = 212;
    break;
   case 212:
    var $915;
    var $j_3229_2;
    var $916 = $cc + ($c_20235 << 5) + ($j_3229_2 << 3) | 0;
    var $917 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$916 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$916 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $918 = $cm + $j_3229_2 * 24 + 16 | 0;
    var $919 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$918 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$918 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $920 = $917 * $919;
    var $921 = $920 * $xyz_sroa_2_2;
    var $922 = $915 + $921;
    var $923 = $j_3229_2 + 1 | 0;
    var $exitcond_2 = ($923 | 0) == ($859 | 0);
    if ($exitcond_2) {
      label = 213;
      break;
    } else {
      var $j_3229_2 = $923;
      var $915 = $922;
      label = 212;
      break;
    }
   case 213:
    HEAPF64[tempDoublePtr >> 3] = $922, HEAP32[$913 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$913 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $925 = $c_20235 + 1 | 0;
    var $926 = ($925 | 0) < ($859 | 0);
    if ($926) {
      var $c_20235 = $925;
      label = 199;
      break;
    } else {
      label = 201;
      break;
    }
   case 214:
    HEAP32[5245040 >> 2] = 0;
    var $927 = HEAP32[$type >> 2];
    var $928 = _getreal($927);
    var $929 = HEAP32[$type >> 2];
    var $930 = _getreal($929);
    var $931 = $930;
    HEAPF32[5244964 >> 2] = $931;
    var $932 = HEAP32[$type >> 2];
    var $933 = _getreal($932);
    var $934 = $933;
    HEAPF32[5244968 >> 2] = $934;
    var $935 = HEAP32[$type >> 2];
    var $936 = _getreal($935);
    var $937 = $936;
    HEAPF32[5244972 >> 2] = $937;
    var $938 = HEAP32[$type >> 2];
    var $939 = _getreal($938);
    var $940 = HEAP32[$type >> 2];
    var $941 = _getreal($940);
    var $942 = $941;
    HEAPF32[5244980 >> 2] = $942;
    var $943 = HEAP32[$type >> 2];
    var $944 = _getreal($943);
    var $945 = $944;
    HEAPF32[5244984 >> 2] = $945;
    var $946 = HEAP32[$type >> 2];
    var $947 = _getreal($946);
    var $948 = $947;
    HEAPF32[5244988 >> 2] = $948;
    var $949 = HEAP32[$type >> 2];
    var $950 = _getreal($949);
    var $951 = HEAP32[$type >> 2];
    var $952 = _getreal($951);
    var $953 = $952;
    HEAPF32[5244996 >> 2] = $953;
    var $954 = HEAP32[$type >> 2];
    var $955 = _getreal($954);
    var $956 = $955;
    HEAPF32[5245e3 >> 2] = $956;
    var $957 = HEAP32[$type >> 2];
    var $958 = _getreal($957);
    var $959 = $958;
    HEAPF32[5245004 >> 2] = $959;
    var $sony_key_1 = $sony_key_0353;
    var $sony_length_1 = $sony_length_0352;
    var $sony_offset_1 = $sony_offset_0351;
    var $plen_3 = $plen_0350;
    var $blrc_2 = $blrc_0349;
    var $blrr_2 = $blrr_0348;
    var $ima_len_1 = $ima_len_0347;
    var $use_cm_1 = $use_cm_0346;
    var $ifd_1 = $ifd_0345;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 215:
    var $_phi_trans_insert25 = 5428500 + ($281 << 1) | 0;
    var $_pre26 = HEAP16[$_phi_trans_insert25 >> 1];
    var $j_1330_1 = $j_1328_1;
    var $961 = $_pre26;
    label = 216;
    break;
   case 216:
    var $961;
    var $j_1330_1;
    var $962 = $961 + 2 & 65535;
    var $963 = 5428500 + ($j_1330_1 << 1) | 0;
    HEAP16[$963 >> 1] = $962;
    var $j_1_1 = $j_1330_1 + 1 | 0;
    var $964 = $j_1_1 >>> 0 > $285 >>> 0;
    if ($964) {
      label = 217;
      break;
    } else {
      var $j_1330_1 = $j_1_1;
      var $961 = $962;
      label = 216;
      break;
    }
   case 217:
    var $j_1328_2 = $285 + 1 | 0;
    var $965 = $j_1328_2 >>> 0 > $289 >>> 0;
    if ($965) {
      label = 220;
      break;
    } else {
      label = 218;
      break;
    }
   case 218:
    var $_phi_trans_insert23 = 5428500 + ($285 << 1) | 0;
    var $_pre24 = HEAP16[$_phi_trans_insert23 >> 1];
    var $j_1330_2 = $j_1328_2;
    var $967 = $_pre24;
    label = 219;
    break;
   case 219:
    var $967;
    var $j_1330_2;
    var $968 = $967 + 4 & 65535;
    var $969 = 5428500 + ($j_1330_2 << 1) | 0;
    HEAP16[$969 >> 1] = $968;
    var $j_1_2 = $j_1330_2 + 1 | 0;
    var $970 = $j_1_2 >>> 0 > $289 >>> 0;
    if ($970) {
      label = 220;
      break;
    } else {
      var $j_1330_2 = $j_1_2;
      var $967 = $968;
      label = 219;
      break;
    }
   case 220:
    var $j_1328_3 = $289 + 1 | 0;
    var $971 = $j_1328_3 >>> 0 > $293 >>> 0;
    if ($971) {
      label = 223;
      break;
    } else {
      label = 221;
      break;
    }
   case 221:
    var $_phi_trans_insert21 = 5428500 + ($289 << 1) | 0;
    var $_pre22 = HEAP16[$_phi_trans_insert21 >> 1];
    var $j_1330_3 = $j_1328_3;
    var $973 = $_pre22;
    label = 222;
    break;
   case 222:
    var $973;
    var $j_1330_3;
    var $974 = $973 + 8 & 65535;
    var $975 = 5428500 + ($j_1330_3 << 1) | 0;
    HEAP16[$975 >> 1] = $974;
    var $j_1_3 = $j_1330_3 + 1 | 0;
    var $976 = $j_1_3 >>> 0 > $293 >>> 0;
    if ($976) {
      label = 223;
      break;
    } else {
      var $j_1330_3 = $j_1_3;
      var $973 = $974;
      label = 222;
      break;
    }
   case 223:
    var $j_1328_4 = $293 + 1 | 0;
    var $977 = $j_1328_4 >>> 0 > 4095;
    if ($977) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 224;
      break;
    }
   case 224:
    var $_phi_trans_insert = 5428500 + ($293 << 1) | 0;
    var $_pre = HEAP16[$_phi_trans_insert >> 1];
    var $j_1330_4 = $j_1328_4;
    var $979 = $_pre;
    label = 225;
    break;
   case 225:
    var $979;
    var $j_1330_4;
    var $980 = $979 + 16 & 65535;
    var $981 = 5428500 + ($j_1330_4 << 1) | 0;
    HEAP16[$981 >> 1] = $980;
    var $j_1_4 = $j_1330_4 + 1 | 0;
    var $982 = $j_1_4 >>> 0 > 4095;
    if ($982) {
      var $sony_key_1 = $sony_key_0353;
      var $sony_length_1 = $sony_length_0352;
      var $sony_offset_1 = $sony_offset_0351;
      var $plen_3 = $plen_0350;
      var $blrc_2 = $blrc_0349;
      var $blrr_2 = $blrr_0348;
      var $ima_len_1 = $ima_len_0347;
      var $use_cm_1 = $use_cm_0346;
      var $ifd_1 = $ifd_0345;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      var $j_1330_4 = $j_1_4;
      var $979 = $980;
      label = 225;
      break;
    }
   case 226:
    var $984 = $4 + 1 | 0;
    HEAP32[5243584 >> 2] = $984;
    var $985 = $cc | 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$985 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$985 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $986 = $cc + 8 | 0;
    var $987 = $cc + 40 | 0;
    var $988 = $986;
    HEAP32[$988 >> 2] = 0;
    HEAP32[$988 + 4 >> 2] = 0;
    HEAP32[$988 + 8 >> 2] = 0;
    HEAP32[$988 + 12 >> 2] = 0;
    HEAP32[$988 + 16 >> 2] = 0;
    HEAP32[$988 + 20 >> 2] = 0;
    HEAP32[$988 + 24 >> 2] = 0;
    HEAP32[$988 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$987 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$987 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $989 = $cc + 48 | 0;
    var $990 = $cc + 80 | 0;
    var $991 = $989;
    HEAP32[$991 >> 2] = 0;
    HEAP32[$991 + 4 >> 2] = 0;
    HEAP32[$991 + 8 >> 2] = 0;
    HEAP32[$991 + 12 >> 2] = 0;
    HEAP32[$991 + 16 >> 2] = 0;
    HEAP32[$991 + 20 >> 2] = 0;
    HEAP32[$991 + 24 >> 2] = 0;
    HEAP32[$991 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$990 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$990 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $992 = $cc + 88 | 0;
    var $993 = $cc + 120 | 0;
    var $994 = $992;
    HEAP32[$994 >> 2] = 0;
    HEAP32[$994 + 4 >> 2] = 0;
    HEAP32[$994 + 8 >> 2] = 0;
    HEAP32[$994 + 12 >> 2] = 0;
    HEAP32[$994 + 16 >> 2] = 0;
    HEAP32[$994 + 20 >> 2] = 0;
    HEAP32[$994 + 24 >> 2] = 0;
    HEAP32[$994 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$993 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$993 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $995 = _get2();
    var $996 = $995 & 65535;
    var $997 = ($995 & 65535) > 512;
    if ($997) {
      var $_0 = 1;
      label = 208;
      break;
    } else {
      label = 3;
      break;
    }
  }
}
_parse_tiff_ifd["X"] = 1;
function _romm_coeff($romm_cam) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $romm_cam | 0;
    var $2 = $romm_cam + 12 | 0;
    var $3 = $romm_cam + 24 | 0;
    var $4 = $romm_cam + 4 | 0;
    var $5 = $romm_cam + 16 | 0;
    var $6 = $romm_cam + 28 | 0;
    var $7 = $romm_cam + 8 | 0;
    var $8 = $romm_cam + 20 | 0;
    var $9 = $romm_cam + 32 | 0;
    var $i_014 = 0;
    label = 4;
    break;
   case 3:
    return;
   case 4:
    var $i_014;
    var $12 = 5244928 + $i_014 * 12 | 0;
    var $13 = 5560844 + ($i_014 << 4) | 0;
    HEAPF32[$13 >> 2] = 0;
    var $14 = HEAPF32[$12 >> 2];
    var $15 = HEAPF32[$1 >> 2];
    var $16 = $14 * $15;
    var $17 = $16;
    HEAPF32[$13 >> 2] = $17;
    var $18 = 5244932 + $i_014 * 12 | 0;
    var $19 = HEAPF32[$18 >> 2];
    var $20 = HEAPF32[$2 >> 2];
    var $21 = $19 * $20;
    var $22 = $17 + $21;
    HEAPF32[$13 >> 2] = $22;
    var $23 = 5244936 + $i_014 * 12 | 0;
    var $24 = HEAPF32[$23 >> 2];
    var $25 = HEAPF32[$3 >> 2];
    var $26 = $24 * $25;
    var $27 = $22 + $26;
    HEAPF32[$13 >> 2] = $27;
    var $28 = 5560848 + ($i_014 << 4) | 0;
    HEAPF32[$28 >> 2] = 0;
    var $29 = HEAPF32[$4 >> 2];
    var $30 = $14 * $29;
    var $31 = $30;
    HEAPF32[$28 >> 2] = $31;
    var $32 = HEAPF32[$5 >> 2];
    var $33 = $19 * $32;
    var $34 = $31 + $33;
    HEAPF32[$28 >> 2] = $34;
    var $35 = HEAPF32[$6 >> 2];
    var $36 = $24 * $35;
    var $37 = $34 + $36;
    HEAPF32[$28 >> 2] = $37;
    var $38 = 5560852 + ($i_014 << 4) | 0;
    HEAPF32[$38 >> 2] = 0;
    var $39 = HEAPF32[$7 >> 2];
    var $40 = $14 * $39;
    var $41 = $40;
    HEAPF32[$38 >> 2] = $41;
    var $42 = HEAPF32[$8 >> 2];
    var $43 = $19 * $42;
    var $44 = $41 + $43;
    HEAPF32[$38 >> 2] = $44;
    var $45 = HEAPF32[$9 >> 2];
    var $46 = $24 * $45;
    var $47 = $44 + $46;
    HEAPF32[$38 >> 2] = $47;
    var $48 = $i_014 + 1 | 0;
    var $exitcond = ($48 | 0) == 3;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      var $i_014 = $48;
      label = 4;
      break;
    }
  }
}
_romm_coeff["X"] = 1;
function _get_timestamp($reversed) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $t = __stackBase__;
    var $str = __stackBase__ + 44;
    var $1 = $str + 19 | 0;
    HEAP8[$1] = 0;
    var $2 = ($reversed | 0) == 0;
    if ($2) {
      label = 4;
      break;
    } else {
      var $3 = 18;
      label = 3;
      break;
    }
   case 3:
    var $3;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fgetc($4);
    var $6 = $5 & 255;
    var $7 = $str + $3 | 0;
    HEAP8[$7] = $6;
    var $8 = $3 - 1 | 0;
    var $9 = ($3 | 0) == 0;
    if ($9) {
      label = 5;
      break;
    } else {
      var $3 = $8;
      label = 3;
      break;
    }
   case 4:
    var $11 = $str | 0;
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _fread($11, 19, 1, $12);
    var $_pre_phi = $11;
    label = 6;
    break;
   case 5:
    var $_pre = $str | 0;
    var $_pre_phi = $_pre;
    label = 6;
    break;
   case 6:
    var $_pre_phi;
    var $14 = $t;
    for (var $$dest = $14 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $15 = $t + 20 | 0;
    var $16 = $t + 16 | 0;
    var $17 = $t + 12 | 0;
    var $18 = $t + 8 | 0;
    var $19 = $t + 4 | 0;
    var $20 = $t | 0;
    var $21 = _sscanf($_pre_phi, 5587404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $15, HEAP32[tempInt + 4 >> 2] = $16, HEAP32[tempInt + 8 >> 2] = $17, HEAP32[tempInt + 12 >> 2] = $18, HEAP32[tempInt + 16 >> 2] = $19, HEAP32[tempInt + 20 >> 2] = $20, tempInt));
    var $22 = ($21 | 0) == 6;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $24 = HEAP32[$15 >> 2];
    var $25 = $24 - 1900 | 0;
    HEAP32[$15 >> 2] = $25;
    var $26 = HEAP32[$16 >> 2];
    var $27 = $26 - 1 | 0;
    HEAP32[$16 >> 2] = $27;
    var $28 = $t + 32 | 0;
    HEAP32[$28 >> 2] = -1;
    var $29 = _mktime($t);
    var $30 = ($29 | 0) > 0;
    if ($30) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $32 = _mktime($t);
    HEAP32[5243568 >> 2] = $32;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_exif($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $1 = _strncmp(5263628, 5587396, 7);
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      var $7 = 0;
      label = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[5243584 >> 2];
    var $5 = $4 >>> 0 < 3;
    var $7 = $5;
    label = 4;
    break;
   case 4:
    var $7;
    var $8 = _get2();
    var $9 = $8 << 16 >> 16 == 0;
    if ($9) {
      label = 23;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $10 = $8 & 65535;
    var $_in = $10;
    label = 6;
    break;
   case 6:
    var $_in;
    var $12 = $_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $13 = HEAP32[$tag >> 2];
    if (($13 | 0) == 33434) {
      label = 7;
      break;
    } else if (($13 | 0) == 33437) {
      label = 8;
      break;
    } else if (($13 | 0) == 34855) {
      label = 9;
      break;
    } else if (($13 | 0) == 36867 | ($13 | 0) == 36868) {
      label = 10;
      break;
    } else if (($13 | 0) == 37377) {
      label = 11;
      break;
    } else if (($13 | 0) == 37378) {
      label = 13;
      break;
    } else if (($13 | 0) == 37386) {
      label = 14;
      break;
    } else if (($13 | 0) == 37500) {
      label = 15;
      break;
    } else if (($13 | 0) == 40962) {
      label = 16;
      break;
    } else if (($13 | 0) == 40963) {
      label = 18;
      break;
    } else if (($13 | 0) == 41730) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 7:
    var $15 = HEAP32[$type >> 2];
    var $16 = _getreal($15);
    var $17 = $16;
    HEAPF32[5244912 >> 2] = $17;
    label = 22;
    break;
   case 8:
    var $19 = HEAP32[$type >> 2];
    var $20 = _getreal($19);
    var $21 = $20;
    HEAPF32[5561468 >> 2] = $21;
    label = 22;
    break;
   case 9:
    var $23 = _get2();
    var $24 = $23 & 65535;
    HEAPF32[5264096 >> 2] = $24;
    label = 22;
    break;
   case 10:
    _get_timestamp(0);
    label = 22;
    break;
   case 11:
    var $27 = HEAP32[$type >> 2];
    var $28 = _getreal($27);
    var $29 = $28 > -128;
    if ($29) {
      label = 12;
      break;
    } else {
      label = 22;
      break;
    }
   case 12:
    var $31 = -$28;
    var $exp2 = _exp2($31);
    var $32 = $exp2;
    HEAPF32[5244912 >> 2] = $32;
    label = 22;
    break;
   case 13:
    var $34 = HEAP32[$type >> 2];
    var $35 = _getreal($34);
    var $36 = $35 * .5;
    var $exp25 = _exp2($36);
    var $37 = $exp25;
    HEAPF32[5561468 >> 2] = $37;
    label = 22;
    break;
   case 14:
    var $39 = HEAP32[$type >> 2];
    var $40 = _getreal($39);
    var $41 = $40;
    HEAPF32[5403044 >> 2] = $41;
    label = 22;
    break;
   case 15:
    _parse_makernote($base, 0);
    label = 22;
    break;
   case 16:
    if ($7) {
      label = 17;
      break;
    } else {
      label = 22;
      break;
    }
   case 17:
    var $45 = _get4();
    var $46 = $45 & 65535;
    HEAP16[5245028 >> 1] = $46;
    label = 22;
    break;
   case 18:
    if ($7) {
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    var $49 = _get4();
    var $50 = $49 & 65535;
    HEAP16[5245036 >> 1] = $50;
    label = 22;
    break;
   case 20:
    var $52 = _get4();
    var $53 = ($52 | 0) == 131074;
    if ($53) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[5427968 >> 2] = 0;
    var $54 = HEAP32[5264116 >> 2];
    var $55 = _fgetc($54);
    var $56 = $55 * 16843009 & -1;
    var $57 = HEAP32[5427968 >> 2];
    var $58 = $56 | $57;
    HEAP32[5427968 >> 2] = $58;
    var $59 = HEAP32[5264116 >> 2];
    var $60 = _fgetc($59);
    var $61 = $60 * 67372036 & -1;
    var $62 = HEAP32[5427968 >> 2];
    var $63 = $61 | $62;
    HEAP32[5427968 >> 2] = $63;
    var $64 = HEAP32[5264116 >> 2];
    var $65 = _fgetc($64);
    var $66 = $65 * 269488144 & -1;
    var $67 = HEAP32[5427968 >> 2];
    var $68 = $66 | $67;
    HEAP32[5427968 >> 2] = $68;
    var $69 = HEAP32[5264116 >> 2];
    var $70 = _fgetc($69);
    var $71 = $70 * 1077952576 & -1;
    var $72 = HEAP32[5427968 >> 2];
    var $73 = $71 | $72;
    HEAP32[5427968 >> 2] = $73;
    label = 22;
    break;
   case 22:
    var $75 = HEAP32[5264116 >> 2];
    var $76 = HEAP32[$save >> 2];
    var $77 = _fseek($75, $76, 0);
    var $78 = ($12 | 0) == 0;
    if ($78) {
      label = 23;
      break;
    } else {
      var $_in = $12;
      label = 6;
      break;
    }
   case 23:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_exif["X"] = 1;
function _parse_gps($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $1 = _get2();
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $1 & 65535;
    var $_in = $3;
    label = 4;
    break;
   case 4:
    var $_in;
    var $5 = $_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $6 = HEAP32[$tag >> 2];
    if (($6 | 0) == 1 | ($6 | 0) == 3 | ($6 | 0) == 5) {
      label = 5;
      break;
    } else if (($6 | 0) == 2 | ($6 | 0) == 4 | ($6 | 0) == 7) {
      label = 6;
      break;
    } else if (($6 | 0) == 6) {
      label = 7;
      break;
    } else if (($6 | 0) == 18 | ($6 | 0) == 29) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fgetc($8);
    var $10 = $6 >>> 1;
    var $11 = $10 + 29 | 0;
    var $12 = 5398736 + ($11 << 2) | 0;
    HEAP32[$12 >> 2] = $9;
    label = 9;
    break;
   case 6:
    var $13 = Math.floor(($6 >>> 0) / 3);
    var $14 = $13 * 6 & -1;
    var $15 = _get4();
    var $16 = 5398736 + ($14 << 2) | 0;
    HEAP32[$16 >> 2] = $15;
    var $17 = _get4();
    var $18 = $14 | 1;
    var $19 = 5398736 + ($18 << 2) | 0;
    HEAP32[$19 >> 2] = $17;
    var $20 = _get4();
    var $21 = $14 + 2 | 0;
    var $22 = 5398736 + ($21 << 2) | 0;
    HEAP32[$22 >> 2] = $20;
    var $23 = _get4();
    var $24 = $14 + 3 | 0;
    var $25 = 5398736 + ($24 << 2) | 0;
    HEAP32[$25 >> 2] = $23;
    var $26 = _get4();
    var $27 = $14 + 4 | 0;
    var $28 = 5398736 + ($27 << 2) | 0;
    HEAP32[$28 >> 2] = $26;
    var $29 = _get4();
    var $30 = $14 + 5 | 0;
    var $31 = 5398736 + ($30 << 2) | 0;
    HEAP32[$31 >> 2] = $29;
    label = 9;
    break;
   case 7:
    var $32 = _get4();
    HEAP32[5398808 >> 2] = $32;
    var $33 = _get4();
    HEAP32[5398812 >> 2] = $33;
    label = 9;
    break;
   case 8:
    var $35 = Math.floor(($6 >>> 0) / 3);
    var $_sum = $35 + 14 | 0;
    var $36 = 5398736 + ($_sum << 2) | 0;
    var $37 = $36;
    var $38 = HEAP32[$len >> 2];
    var $39 = $38 >>> 0 < 12;
    var $40 = $39 ? $38 : 12;
    var $41 = HEAP32[5264116 >> 2];
    var $42 = _fgets($37, $40, $41);
    label = 9;
    break;
   case 9:
    var $44 = HEAP32[5264116 >> 2];
    var $45 = HEAP32[$save >> 2];
    var $46 = _fseek($44, $45, 0);
    var $47 = ($5 | 0) == 0;
    if ($47) {
      label = 10;
      break;
    } else {
      var $_in = $5;
      label = 4;
      break;
    }
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_gps["X"] = 1;
function _parse_mos($offset) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $i = __stackBase__ + 40;
    var $neut = __stackBase__ + 44;
    var $planes = __stackBase__ + 60;
    var $romm_cam = __stackBase__ + 64;
    HEAP32[$planes >> 2] = 0;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, $offset, 0);
    var $3 = _get4();
    var $4 = ($3 | 0) == 1347114067;
    if ($4) {
      label = 3;
      break;
    } else {
      var $frot_0_lcssa = 0;
      label = 32;
      break;
    }
   case 3:
    var $5 = $data | 0;
    var $6 = $neut | 0;
    var $7 = $romm_cam | 0;
    var $8 = $neut + 4 | 0;
    var $9 = $neut + 8 | 0;
    var $10 = $neut + 12 | 0;
    var $frot_028 = 0;
    label = 4;
    break;
   case 4:
    var $frot_028;
    var $12 = _get4();
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fread($5, 1, 40, $13);
    var $15 = _get4();
    var $16 = HEAP32[5264116 >> 2];
    var $17 = _ftell($16);
    var $18 = _strcmp($5, 5587132);
    var $19 = ($18 | 0) == 0;
    if ($19) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5244044 >> 2] = $17;
    HEAP32[5244056 >> 2] = $15;
    label = 6;
    break;
   case 6:
    var $22 = _strcmp($5, 5587112);
    var $23 = ($22 | 0) == 0;
    if ($23) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5245636 >> 2] = $15;
    label = 8;
    break;
   case 8:
    var $26 = _strcmp($5, 5587092);
    var $27 = ($26 | 0) == 0;
    if ($27) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $29 = HEAP32[5264116 >> 2];
    var $30 = _fscanf($29, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $31 = HEAP32[$i >> 2];
    var $32 = $31 >>> 0 < 39;
    if ($32) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $34 = 5245848 + ($31 << 2) | 0;
    var $35 = HEAP32[$34 >> 2];
    var $36 = _strcpy(5263372, $35);
    label = 11;
    break;
   case 11:
    var $38 = _strcmp($5, 5587060);
    var $39 = ($38 | 0) == 0;
    if ($39) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    HEAP32[$i >> 2] = 0;
    label = 13;
    break;
   case 13:
    var $41 = _get4();
    var $42 = _int_to_float($41);
    var $43 = HEAP32[$i >> 2];
    var $44 = $romm_cam + ($43 << 2) | 0;
    HEAPF32[$44 >> 2] = $42;
    var $45 = $43 + 1 | 0;
    HEAP32[$i >> 2] = $45;
    var $46 = ($45 | 0) < 9;
    if ($46) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _romm_coeff($7);
    label = 15;
    break;
   case 15:
    var $49 = _strcmp($5, 5587036);
    var $50 = ($49 | 0) == 0;
    if ($50) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    HEAP32[$i >> 2] = 0;
    var $storemerge1719 = 0;
    label = 17;
    break;
   case 17:
    var $storemerge1719;
    var $52 = HEAP32[5264116 >> 2];
    var $53 = $romm_cam + ($storemerge1719 << 2) | 0;
    var $54 = _fscanf($52, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $53, tempInt));
    var $55 = HEAP32[$i >> 2];
    var $56 = $55 + 1 | 0;
    HEAP32[$i >> 2] = $56;
    var $57 = ($56 | 0) < 9;
    if ($57) {
      var $storemerge1719 = $56;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _romm_coeff($7);
    label = 19;
    break;
   case 19:
    var $60 = _strcmp($5, 5586980);
    var $61 = ($60 | 0) == 0;
    if ($61) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $63 = HEAP32[5264116 >> 2];
    var $64 = _fscanf($63, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $planes, tempInt));
    label = 21;
    break;
   case 21:
    var $66 = _strcmp($5, 5586952);
    var $67 = ($66 | 0) == 0;
    if ($67) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $69 = HEAP32[5264116 >> 2];
    var $70 = _fscanf($69, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5403048, tempInt));
    label = 23;
    break;
   case 23:
    var $72 = _strcmp($5, 5586928);
    var $73 = ($72 | 0) == 0;
    if ($73) {
      label = 24;
      break;
    } else {
      var $frot_3 = $frot_028;
      label = 25;
      break;
    }
   case 24:
    var $74 = HEAP32[5264116 >> 2];
    var $75 = _fscanf($74, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $76 = HEAP32[$i >> 2];
    var $77 = ($76 | 0) == 1;
    var $_frot_028 = $77 ? 0 : $frot_028;
    var $78 = HEAP32[5264116 >> 2];
    var $79 = _fscanf($78, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $80 = HEAP32[$i >> 2];
    var $81 = ($80 | 0) == 1;
    var $frot_2_1 = $81 ? 1 : $_frot_028;
    var $82 = HEAP32[5264116 >> 2];
    var $83 = _fscanf($82, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $84 = HEAP32[$i >> 2];
    var $85 = ($84 | 0) == 1;
    var $_frot_2_1 = $85 ? 3 : $frot_2_1;
    var $86 = HEAP32[5264116 >> 2];
    var $87 = _fscanf($86, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $88 = HEAP32[$i >> 2];
    var $89 = ($88 | 0) == 1;
    var $__frot_2_1 = $89 ? 2 : $_frot_2_1;
    var $frot_3 = $__frot_2_1;
    label = 25;
    break;
   case 25:
    var $frot_3;
    var $90 = _strcmp($5, 5586904);
    var $91 = ($90 | 0) == 0;
    if ($91) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $93 = HEAP32[5264116 >> 2];
    var $94 = _fscanf($93, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $95 = HEAP32[$i >> 2];
    var $96 = HEAP32[5403048 >> 2];
    var $97 = $95 - $96 | 0;
    HEAP32[5403048 >> 2] = $97;
    label = 27;
    break;
   case 27:
    var $99 = _strcmp($5, 5586884);
    var $100 = ($99 | 0) != 0;
    var $101 = HEAPF32[5561124 >> 2];
    var $102 = $101 != 0;
    var $or_cond = $100 | $102;
    if ($or_cond) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $103 = HEAP32[5264116 >> 2];
    var $104 = _fscanf($103, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $6, tempInt));
    var $105 = HEAP32[5264116 >> 2];
    var $106 = _fscanf($105, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $8, tempInt));
    var $107 = HEAP32[5264116 >> 2];
    var $108 = _fscanf($107, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $9, tempInt));
    var $109 = HEAP32[5264116 >> 2];
    var $110 = _fscanf($109, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $10, tempInt));
    var $111 = HEAP32[$6 >> 2];
    var $112 = $111 | 0;
    var $113 = HEAP32[$8 >> 2];
    var $114 = $113 | 0;
    var $115 = $112 / $114;
    HEAPF32[5561124 >> 2] = $115;
    var $116 = HEAP32[$9 >> 2];
    var $117 = $116 | 0;
    var $118 = $112 / $117;
    HEAPF32[5561128 >> 2] = $118;
    var $119 = HEAP32[$10 >> 2];
    var $120 = $119 | 0;
    var $121 = $112 / $120;
    HEAPF32[5561132 >> 2] = $121;
    label = 29;
    break;
   case 29:
    var $123 = _strcmp($5, 5586872);
    var $124 = ($123 | 0) == 0;
    if ($124) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $126 = _get4();
    HEAP32[5263696 >> 2] = $126;
    label = 31;
    break;
   case 31:
    _parse_mos($17);
    var $128 = HEAP32[5264116 >> 2];
    var $129 = $17 + $15 | 0;
    var $130 = _fseek($128, $129, 0);
    var $131 = _get4();
    var $132 = ($131 | 0) == 1347114067;
    if ($132) {
      var $frot_028 = $frot_3;
      label = 4;
      break;
    } else {
      var $frot_0_lcssa = $frot_3;
      label = 32;
      break;
    }
   case 32:
    var $frot_0_lcssa;
    var $133 = HEAP32[$planes >> 2];
    var $134 = ($133 | 0) == 0;
    if ($134) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $136 = ($133 | 0) == 1;
    var $137 = $136 & 1;
    var $138 = -$137 | 0;
    var $139 = $138 & 16843009;
    var $140 = HEAP32[5403048 >> 2];
    var $141 = ($140 | 0) / 90 & -1;
    var $142 = $141 + $frot_0_lcssa | 0;
    var $143 = $142 & 3;
    var $144 = $143 + 5586864 | 0;
    var $145 = HEAP8[$144];
    var $146 = $145 & 255;
    var $147 = $146 * $139 & -1;
    HEAP32[5427632 >> 2] = $147;
    label = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_mos["X"] = 1;
function _linear_table($len) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $len >>> 0 > 4096;
    var $_len = $1 ? 4096 : $len;
    _read_shorts(5428500, $_len);
    var $2 = ($_len | 0) < 4096;
    if ($2) {
      var $i_06 = $_len;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $i_06;
    var $3 = $i_06 - 1 | 0;
    var $4 = 5428500 + ($3 << 1) | 0;
    var $5 = HEAP16[$4 >> 1];
    var $6 = 5428500 + ($i_06 << 1) | 0;
    HEAP16[$6 >> 1] = $5;
    var $7 = $i_06 + 1 | 0;
    var $8 = ($7 | 0) < 4096;
    if ($8) {
      var $i_06 = $7;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $9 = HEAP16[5436690 >> 1];
    var $10 = $9 & 65535;
    HEAP32[5263496 >> 2] = $10;
    return;
  }
}
function _parse_kodak_ifd($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $1 = _get2();
    var $2 = ($1 & 65535) > 1024;
    var $3 = $1 << 16 >> 16 == 0;
    var $or_cond40 = $2 | $3;
    if ($or_cond40) {
      label = 25;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $4 = $1 & 65535;
    var $wbi_038 = -2;
    var $wbtemp_039 = 6500;
    var $_in = $4;
    var $mul_sroa_0_0 = 1;
    var $mul_sroa_1_0 = 1;
    var $mul_sroa_2_0 = 1;
    label = 4;
    break;
   case 4:
    var $mul_sroa_2_0;
    var $mul_sroa_1_0;
    var $mul_sroa_0_0;
    var $_in;
    var $wbtemp_039;
    var $wbi_038;
    var $5 = $_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $6 = HEAP32[$tag >> 2];
    var $7 = ($6 | 0) == 1020;
    if ($7) {
      label = 5;
      break;
    } else {
      var $wbi_1 = $wbi_038;
      label = 6;
      break;
    }
   case 5:
    var $8 = HEAP32[$type >> 2];
    var $9 = _getint($8);
    var $wbtemp_1 = $wbtemp_039;
    var $wbi_22 = $9;
    label = 11;
    break;
   case 6:
    var $wbi_1;
    var $11 = ($6 | 0) == 1021;
    if ($11) {
      label = 7;
      break;
    } else {
      var $wbi_2 = $wbi_1;
      label = 9;
      break;
    }
   case 7:
    var $13 = HEAP32[$len >> 2];
    var $14 = ($13 | 0) == 72;
    if ($14) {
      label = 8;
      break;
    } else {
      var $wbtemp_1 = $wbtemp_039;
      var $wbi_22 = $wbi_1;
      label = 11;
      break;
    }
   case 8:
    var $15 = HEAP32[5264116 >> 2];
    var $16 = _fseek($15, 40, 1);
    var $17 = _get2();
    var $18 = $17 & 65535;
    var $19 = $18 | 0;
    var $20 = 2048 / $19;
    var $21 = $20;
    HEAPF32[5561124 >> 2] = $21;
    var $22 = _get2();
    var $23 = $22 & 65535;
    var $24 = $23 | 0;
    var $25 = 2048 / $24;
    var $26 = $25;
    HEAPF32[5561128 >> 2] = $26;
    var $27 = _get2();
    var $28 = $27 & 65535;
    var $29 = $28 | 0;
    var $30 = 2048 / $29;
    var $31 = $30;
    HEAPF32[5561132 >> 2] = $31;
    var $wbi_2 = -2;
    label = 9;
    break;
   case 9:
    var $wbi_2;
    var $33 = ($6 | 0) == 2118;
    if ($33) {
      label = 10;
      break;
    } else {
      var $wbtemp_1 = $wbtemp_039;
      var $wbi_22 = $wbi_2;
      label = 11;
      break;
    }
   case 10:
    var $35 = HEAP32[$type >> 2];
    var $36 = _getint($35);
    var $wbtemp_1 = $36;
    var $wbi_22 = $wbi_2;
    label = 11;
    break;
   case 11:
    var $wbi_22;
    var $wbtemp_1;
    var $37 = $wbi_22 + 2130 | 0;
    var $38 = ($6 | 0) == ($37 | 0);
    if ($38) {
      label = 12;
      break;
    } else {
      var $mul_sroa_0_1 = $mul_sroa_0_0;
      var $mul_sroa_1_1 = $mul_sroa_1_0;
      var $mul_sroa_2_1 = $mul_sroa_2_0;
      label = 13;
      break;
    }
   case 12:
    var $39 = HEAP32[$type >> 2];
    var $40 = _getreal($39);
    var $41 = $40;
    var $42 = _getreal($39);
    var $43 = $42;
    var $44 = _getreal($39);
    var $45 = $44;
    var $mul_sroa_0_1 = $41;
    var $mul_sroa_1_1 = $43;
    var $mul_sroa_2_1 = $45;
    label = 13;
    break;
   case 13:
    var $mul_sroa_2_1;
    var $mul_sroa_1_1;
    var $mul_sroa_0_1;
    var $47 = $wbi_22 + 2140 | 0;
    var $48 = ($6 | 0) == ($47 | 0);
    var $49 = ($wbi_22 | 0) > -1;
    var $or_cond = $48 & $49;
    if ($or_cond) {
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    if (($6 | 0) == 2317) {
      label = 15;
      break;
    } else if (($6 | 0) == 6020) {
      label = 16;
      break;
    } else if (($6 | 0) == 64013) {
      label = 17;
      break;
    } else {
      var $wbi_3 = $wbi_22;
      label = 18;
      break;
    }
   case 15:
    var $51 = HEAP32[$len >> 2];
    _linear_table($51);
    var $wbi_3 = $wbi_22;
    label = 18;
    break;
   case 16:
    var $53 = HEAP32[$type >> 2];
    var $54 = _getint($53);
    var $55 = $54 >>> 0;
    HEAPF32[5264096 >> 2] = $55;
    var $wbi_3 = $wbi_22;
    label = 18;
    break;
   case 17:
    var $57 = HEAP32[5264116 >> 2];
    var $58 = _fgetc($57);
    var $wbi_3 = $58;
    label = 18;
    break;
   case 18:
    var $wbi_3;
    var $59 = $wbi_3 >>> 0 < 7;
    if ($59) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $61 = 5246516 + ($wbi_3 << 2) | 0;
    var $62 = HEAP32[$61 >> 2];
    var $63 = ($6 | 0) == ($62 | 0);
    if ($63) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $64 = _get4();
    var $65 = $64 >>> 0;
    HEAPF32[5561124 >> 2] = $65;
    var $66 = _get4();
    var $67 = $66 >>> 0;
    HEAPF32[5561128 >> 2] = $67;
    var $68 = _get4();
    var $69 = $68 >>> 0;
    HEAPF32[5561132 >> 2] = $69;
    label = 21;
    break;
   case 21:
    if (($6 | 0) == 64019) {
      label = 22;
      break;
    } else if (($6 | 0) == 64020) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $70 = HEAP32[$type >> 2];
    var $71 = _getint($70);
    var $72 = $71 & 65535;
    HEAP16[5242964 >> 1] = $72;
    label = 24;
    break;
   case 23:
    var $74 = HEAP32[$type >> 2];
    var $75 = _getint($74);
    var $76 = $75 + 1 | 0;
    var $_tr = $76 & 65535;
    var $77 = $_tr & -2;
    HEAP16[5398712 >> 1] = $77;
    label = 24;
    break;
   case 24:
    var $79 = HEAP32[5264116 >> 2];
    var $80 = HEAP32[$save >> 2];
    var $81 = _fseek($79, $80, 0);
    var $82 = ($5 | 0) == 0;
    if ($82) {
      label = 25;
      break;
    } else {
      var $wbi_038 = $wbi_3;
      var $wbtemp_039 = $wbtemp_1;
      var $_in = $5;
      var $mul_sroa_0_0 = $mul_sroa_0_1;
      var $mul_sroa_1_0 = $mul_sroa_1_1;
      var $mul_sroa_2_0 = $mul_sroa_2_1;
      label = 4;
      break;
    }
   case 25:
    STACKTOP = __stackBase__;
    return;
   case 26:
    var $83 = HEAP32[$type >> 2];
    var $84 = $wbtemp_1 | 0;
    var $85 = $84 / 100;
    var $86 = _getreal($83);
    var $87 = Math.pow($85, 0);
    var $88 = $86 * $87;
    var $89 = $88;
    var $90 = $89;
    var $91 = _getreal($83);
    var $92 = Math.pow($85, 1);
    var $93 = $91 * $92;
    var $94 = $90;
    var $95 = $94 + $93;
    var $96 = $95;
    var $97 = _getreal($83);
    var $98 = Math.pow($85, 2);
    var $99 = $97 * $98;
    var $100 = $96;
    var $101 = $100 + $99;
    var $102 = $101;
    var $103 = _getreal($83);
    var $104 = Math.pow($85, 3);
    var $105 = $103 * $104;
    var $106 = $102;
    var $107 = $106 + $105;
    var $108 = $107;
    var $109 = $108 * $mul_sroa_0_1;
    var $110 = 2048 / $109;
    HEAPF32[5561124 >> 2] = $110;
    var $111 = _getreal($83);
    var $112 = Math.pow($85, 0);
    var $113 = $111 * $112;
    var $114 = $113;
    var $115 = $114;
    var $116 = _getreal($83);
    var $117 = Math.pow($85, 1);
    var $118 = $116 * $117;
    var $119 = $115;
    var $120 = $119 + $118;
    var $121 = $120;
    var $122 = _getreal($83);
    var $123 = Math.pow($85, 2);
    var $124 = $122 * $123;
    var $125 = $121;
    var $126 = $125 + $124;
    var $127 = $126;
    var $128 = _getreal($83);
    var $129 = Math.pow($85, 3);
    var $130 = $128 * $129;
    var $131 = $127;
    var $132 = $131 + $130;
    var $133 = $132;
    var $134 = $133 * $mul_sroa_1_1;
    var $135 = 2048 / $134;
    HEAPF32[5561128 >> 2] = $135;
    var $136 = _getreal($83);
    var $137 = Math.pow($85, 0);
    var $138 = $136 * $137;
    var $139 = $138;
    var $140 = $139;
    var $141 = _getreal($83);
    var $142 = Math.pow($85, 1);
    var $143 = $141 * $142;
    var $144 = $140;
    var $145 = $144 + $143;
    var $146 = $145;
    var $147 = _getreal($83);
    var $148 = Math.pow($85, 2);
    var $149 = $147 * $148;
    var $150 = $146;
    var $151 = $150 + $149;
    var $152 = $151;
    var $153 = _getreal($83);
    var $154 = Math.pow($85, 3);
    var $155 = $153 * $154;
    var $156 = $152;
    var $157 = $156 + $155;
    var $158 = $157;
    var $159 = $158 * $mul_sroa_2_1;
    var $160 = 2048 / $159;
    HEAPF32[5561132 >> 2] = $160;
    label = 14;
    break;
  }
}
_parse_kodak_ifd["X"] = 1;
function _parse_tiff($base) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, $base, 0);
    var $3 = _get2();
    HEAP16[5262944 >> 1] = $3;
    if ($3 << 16 >> 16 == 18761 | $3 << 16 >> 16 == 19789) {
      label = 3;
      break;
    } else {
      var $_0 = 0;
      label = 6;
      break;
    }
   case 3:
    var $5 = _get2();
    label = 4;
    break;
   case 4:
    var $7 = _get4();
    var $8 = ($7 | 0) == 0;
    if ($8) {
      var $_0 = 1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $10 = HEAP32[5264116 >> 2];
    var $11 = $7 + $base | 0;
    var $12 = _fseek($10, $11, 0);
    var $13 = _parse_tiff_ifd($base);
    var $14 = ($13 | 0) == 0;
    if ($14) {
      label = 4;
      break;
    } else {
      var $_0 = 1;
      label = 6;
      break;
    }
   case 6:
    var $_0;
    return $_0;
  }
}
function _parse_minolta($base) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5262944 >> 1];
    var $2 = HEAP32[5264116 >> 2];
    var $3 = _fseek($2, $base, 0);
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fgetc($4);
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fgetc($8);
    var $10 = ($9 | 0) == 77;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 12;
      break;
    }
   case 4:
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _fgetc($12);
    var $14 = ($13 | 0) == 82;
    if ($14) {
      label = 5;
      break;
    } else {
      label = 12;
      break;
    }
   case 5:
    var $16 = HEAP32[5264116 >> 2];
    var $17 = _fgetc($16);
    var $18 = $17 * 257 & -1;
    var $19 = $18 & 65535;
    HEAP16[5262944 >> 1] = $19;
    var $20 = _get4();
    var $21 = $base + 8 | 0;
    var $22 = $21 + $20 | 0;
    var $23 = HEAP32[5264116 >> 2];
    var $24 = _ftell($23);
    var $25 = ($24 | 0) < ($22 | 0);
    if ($25) {
      var $high_012 = 0;
      var $wide_013 = 0;
      var $26 = $24;
      label = 6;
      break;
    } else {
      var $high_0_lcssa = 0;
      var $wide_0_lcssa = 0;
      label = 11;
      break;
    }
   case 6:
    var $26;
    var $wide_013;
    var $high_012;
    var $27 = HEAP32[5264116 >> 2];
    var $28 = _fgetc($27);
    var $29 = $28 << 8;
    var $30 = HEAP32[5264116 >> 2];
    var $31 = _fgetc($30);
    var $32 = $31 | $29;
    var $33 = $32 << 8;
    var $34 = HEAP32[5264116 >> 2];
    var $35 = _fgetc($34);
    var $36 = $35 | $33;
    var $37 = $36 << 8;
    var $38 = HEAP32[5264116 >> 2];
    var $39 = _fgetc($38);
    var $40 = $39 | $37;
    var $41 = _get4();
    if (($40 | 0) == 5263940) {
      label = 7;
      break;
    } else if (($40 | 0) == 5718599) {
      label = 8;
      break;
    } else if (($40 | 0) == 5526615) {
      label = 9;
      break;
    } else {
      var $wide_1 = $wide_013;
      var $high_1 = $high_012;
      label = 10;
      break;
    }
   case 7:
    var $43 = HEAP32[5264116 >> 2];
    var $44 = _fseek($43, 8, 1);
    var $45 = _get2();
    var $46 = $45 & 65535;
    var $47 = _get2();
    var $48 = $47 & 65535;
    var $wide_1 = $48;
    var $high_1 = $46;
    label = 10;
    break;
   case 8:
    var $49 = _get4();
    var $50 = _strcmp(5263372, 5586576);
    var $51 = ($50 | 0) != 0;
    var $52 = $51 ? 0 : 3;
    var $53 = _get2();
    var $54 = $53 & 65535;
    var $55 = 5561124 + ($52 << 2) | 0;
    HEAPF32[$55 >> 2] = $54;
    var $56 = _get2();
    var $57 = $56 & 65535;
    var $58 = $52 ^ 1;
    var $59 = 5561124 + ($58 << 2) | 0;
    HEAPF32[$59 >> 2] = $57;
    var $60 = _get2();
    var $61 = $60 & 65535;
    var $62 = $52 ^ 3;
    var $63 = 5561124 + ($62 << 2) | 0;
    HEAPF32[$63 >> 2] = $61;
    var $64 = _get2();
    var $65 = $64 & 65535;
    var $66 = $52 ^ 2;
    var $67 = 5561124 + ($66 << 2) | 0;
    HEAPF32[$67 >> 2] = $65;
    var $wide_1 = $wide_013;
    var $high_1 = $high_012;
    label = 10;
    break;
   case 9:
    var $69 = HEAP32[5264116 >> 2];
    var $70 = _ftell($69);
    var $71 = _parse_tiff($70);
    HEAP32[5428492 >> 2] = $22;
    var $wide_1 = $wide_013;
    var $high_1 = $high_012;
    label = 10;
    break;
   case 10:
    var $high_1;
    var $wide_1;
    var $73 = HEAP32[5264116 >> 2];
    var $74 = $26 + 8 | 0;
    var $75 = $74 + $41 | 0;
    var $76 = _fseek($73, $75, 0);
    var $77 = HEAP32[5264116 >> 2];
    var $78 = _ftell($77);
    var $79 = ($78 | 0) < ($22 | 0);
    if ($79) {
      var $high_012 = $high_1;
      var $wide_013 = $wide_1;
      var $26 = $78;
      label = 6;
      break;
    } else {
      var $high_0_lcssa = $high_1;
      var $wide_0_lcssa = $wide_1;
      label = 11;
      break;
    }
   case 11:
    var $wide_0_lcssa;
    var $high_0_lcssa;
    var $80 = $high_0_lcssa & 65535;
    HEAP16[5245036 >> 1] = $80;
    var $81 = $wide_0_lcssa & 65535;
    HEAP16[5245028 >> 1] = $81;
    HEAP16[5262944 >> 1] = $1;
    label = 12;
    break;
   case 12:
    return;
  }
}
_parse_minolta["X"] = 1;
function _apply_tiff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    HEAP32[5244048 >> 2] = 16;
    var $1 = HEAP32[5244044 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fseek($4, $1, 0);
    var $6 = _ljpeg_start($jh, 1);
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $9 = $jh | 0;
    var $10 = HEAP32[$9 >> 2];
    HEAP32[5244048 >> 2] = $10;
    var $11 = $jh + 8 | 0;
    var $12 = HEAP32[$11 >> 2];
    var $13 = $12 & 65535;
    HEAP16[5244040 >> 1] = $13;
    var $14 = $jh + 4 | 0;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & 65535;
    HEAP16[5244060 >> 1] = $16;
    label = 5;
    break;
   case 5:
    var $17 = HEAP32[5243584 >> 2];
    var $18 = ($17 | 0) == 0;
    if ($18) {
      var $max_samp_0_lcssa = 0;
      var $raw_0_lcssa = -1;
      var $58 = 0;
      label = 11;
      break;
    } else {
      var $max_samp_070 = 0;
      var $raw_071 = -1;
      var $i_072 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_072;
    var $raw_071;
    var $max_samp_070;
    var $19 = 5243616 + $i_072 * 44 | 0;
    var $20 = HEAP32[$19 >> 2];
    var $21 = ($max_samp_070 | 0) < ($20 | 0);
    var $_max_samp_0 = $21 ? $20 : $max_samp_070;
    var $22 = ($_max_samp_0 | 0) > 3;
    var $max_samp_2 = $22 ? 3 : $_max_samp_0;
    var $23 = 5243600 + $i_072 * 44 | 0;
    var $24 = HEAP32[$23 >> 2];
    var $25 = ($24 | 0) == 6;
    var $26 = ($20 | 0) == 3;
    var $or_cond62 = $25 & $26;
    if ($or_cond62) {
      var $raw_1 = $raw_071;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $28 = 5243588 + $i_072 * 44 | 0;
    var $29 = HEAP32[$28 >> 2];
    var $30 = 5243592 + $i_072 * 44 | 0;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31 | $29;
    var $33 = ($32 | 0) < 65536;
    if ($33) {
      label = 8;
      break;
    } else {
      var $raw_1 = $raw_071;
      label = 10;
      break;
    }
   case 8:
    var $35 = $31 * $29 & -1;
    var $36 = HEAP16[5245028 >> 1];
    var $37 = $36 & 65535;
    var $38 = HEAP16[5245036 >> 1];
    var $39 = $38 & 65535;
    var $40 = $39 * $37 & -1;
    var $41 = ($35 | 0) > ($40 | 0);
    if ($41) {
      label = 9;
      break;
    } else {
      var $raw_1 = $raw_071;
      label = 10;
      break;
    }
   case 9:
    var $43 = $29 & 65535;
    HEAP16[5245028 >> 1] = $43;
    var $44 = $31 & 65535;
    HEAP16[5245036 >> 1] = $44;
    var $45 = 5243596 + $i_072 * 44 | 0;
    var $46 = HEAP32[$45 >> 2];
    HEAP32[5244036 >> 2] = $46;
    HEAP32[5244032 >> 2] = $24;
    var $47 = 5243608 + $i_072 * 44 | 0;
    var $48 = HEAP32[$47 >> 2];
    HEAP32[5428492 >> 2] = $48;
    var $49 = 5243612 + $i_072 * 44 | 0;
    var $50 = HEAP32[$49 >> 2];
    HEAP32[5244028 >> 2] = $50;
    HEAP32[5243580 >> 2] = $20;
    var $51 = 5243624 + $i_072 * 44 | 0;
    var $52 = HEAP32[$51 >> 2];
    HEAP32[5243572 >> 2] = $52;
    var $53 = 5243628 + $i_072 * 44 | 0;
    var $54 = HEAP32[$53 >> 2];
    HEAP32[5243576 >> 2] = $54;
    var $raw_1 = $i_072;
    label = 10;
    break;
   case 10:
    var $raw_1;
    var $56 = $i_072 + 1 | 0;
    var $57 = $56 >>> 0 < $17 >>> 0;
    if ($57) {
      var $max_samp_070 = $max_samp_2;
      var $raw_071 = $raw_1;
      var $i_072 = $56;
      label = 6;
      break;
    } else {
      var $max_samp_0_lcssa = $max_samp_2;
      var $raw_0_lcssa = $raw_1;
      var $58 = $17;
      label = 11;
      break;
    }
   case 11:
    var $58;
    var $raw_0_lcssa;
    var $max_samp_0_lcssa;
    var $59 = HEAP32[5243572 >> 2];
    var $60 = ($59 | 0) == 0;
    if ($60) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5243572 >> 2] = 2147483647;
    label = 13;
    break;
   case 13:
    var $62 = HEAP32[5243576 >> 2];
    var $63 = ($62 | 0) == 0;
    if ($63) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5243576 >> 2] = 2147483647;
    label = 15;
    break;
   case 15:
    var $66 = ($58 | 0) == 0;
    if ($66) {
      label = 19;
      break;
    } else {
      var $_in = $58;
      label = 16;
      break;
    }
   case 16:
    var $_in;
    var $67 = $_in - 1 | 0;
    var $68 = 5243612 + $67 * 44 | 0;
    var $69 = HEAP32[$68 >> 2];
    var $70 = ($69 | 0) == 0;
    if ($70) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[5244028 >> 2] = $69;
    label = 18;
    break;
   case 18:
    var $72 = ($67 | 0) == 0;
    if ($72) {
      label = 19;
      break;
    } else {
      var $_in = $67;
      label = 16;
      break;
    }
   case 19:
    var $73 = ($raw_0_lcssa | 0) < 0;
    var $74 = HEAP32[5263692 >> 2];
    var $75 = ($74 | 0) != 0;
    var $or_cond = $73 | $75;
    if ($or_cond) {
      label = 51;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $77 = HEAP32[5244032 >> 2];
    if (($77 | 0) == 32769) {
      label = 21;
      break;
    } else if (($77 | 0) == 32767) {
      label = 22;
      break;
    } else if (($77 | 0) == 0 | ($77 | 0) == 1) {
      label = 28;
      break;
    } else if (($77 | 0) == 32770 | ($77 | 0) == 32773) {
      label = 30;
      break;
    } else if (($77 | 0) == 6 | ($77 | 0) == 7 | ($77 | 0) == 99) {
      label = 37;
      break;
    } else if (($77 | 0) == 262) {
      label = 38;
      break;
    } else if (($77 | 0) == 34713) {
      label = 39;
      break;
    } else if (($77 | 0) == 34892) {
      label = 44;
      break;
    } else if (($77 | 0) == 65535) {
      label = 45;
      break;
    } else if (($77 | 0) == 65e3) {
      label = 46;
      break;
    } else if (($77 | 0) == 32867) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 21:
    var $_pre6 = HEAP32[5263696 >> 2];
    var $phitmp = $_pre6 + 1 | 0;
    var $97 = $phitmp;
    label = 27;
    break;
   case 22:
    var $79 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $80 = HEAP32[$79 >> 2];
    var $81 = HEAP16[5245028 >> 1];
    var $82 = $81 & 65535;
    var $83 = HEAP16[5245036 >> 1];
    var $84 = $83 & 65535;
    var $85 = $84 * $82 & -1;
    var $86 = ($80 | 0) == ($85 | 0);
    if ($86) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    HEAP32[5244036 >> 2] = 12;
    HEAP32[5263692 >> 2] = 38;
    label = 51;
    break;
   case 24:
    var $89 = $80 << 3;
    var $90 = HEAP32[5244036 >> 2];
    var $91 = $90 * $85 & -1;
    var $92 = ($89 | 0) == ($91 | 0);
    if ($92) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $94 = $83 + 8 & 65535;
    HEAP16[5245036 >> 1] = $94;
    HEAP32[5263692 >> 2] = 24;
    label = 51;
    break;
   case 26:
    HEAP32[5263696 >> 2] = 79;
    var $97 = 80;
    label = 27;
    break;
   case 27:
    var $97;
    HEAP32[5263696 >> 2] = $97;
    label = 30;
    break;
   case 28:
    var $98 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $99 = HEAP32[$98 >> 2];
    var $100 = $99 * 5 & -1;
    var $101 = HEAP16[5245028 >> 1];
    var $102 = $101 & 65535;
    var $103 = HEAP16[5245036 >> 1];
    var $104 = $103 & 65535;
    var $105 = $102 << 3;
    var $106 = $105 * $104 & -1;
    var $107 = ($100 | 0) == ($106 | 0);
    if ($107) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    HEAP32[5263696 >> 2] = 81;
    HEAP32[5244036 >> 2] = 12;
    label = 32;
    break;
   case 30:
    var $_pr = HEAP32[5244036 >> 2];
    if (($_pr | 0) == 8) {
      label = 31;
      break;
    } else if (($_pr | 0) == 12) {
      label = 32;
      break;
    } else if (($_pr | 0) == 14) {
      label = 35;
      break;
    } else if (($_pr | 0) == 16) {
      label = 36;
      break;
    } else {
      label = 51;
      break;
    }
   case 31:
    HEAP32[5263692 >> 2] = 82;
    label = 51;
    break;
   case 32:
    var $110 = 5243604 + $raw_0_lcssa * 44 | 0;
    var $111 = HEAP32[$110 >> 2];
    var $112 = ($111 | 0) == 2;
    if ($112) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[5263696 >> 2] = 6;
    label = 34;
    break;
   case 34:
    HEAP32[5263692 >> 2] = 36;
    label = 51;
    break;
   case 35:
    HEAP32[5263696 >> 2] = 0;
    label = 36;
    break;
   case 36:
    HEAP32[5263692 >> 2] = 4;
    label = 51;
    break;
   case 37:
    HEAP32[5263692 >> 2] = 46;
    label = 51;
    break;
   case 38:
    HEAP32[5263692 >> 2] = 34;
    label = 51;
    break;
   case 39:
    var $120 = HEAP16[5245028 >> 1];
    var $121 = $120 & 65535;
    var $122 = $121 + 9 | 0;
    var $123 = Math.floor(($122 >>> 0) / 10);
    var $124 = $123 << 4;
    var $125 = HEAP16[5245036 >> 1];
    var $126 = $125 & 65535;
    var $127 = $124 * $126 & -1;
    var $128 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $129 = HEAP32[$128 >> 2];
    var $130 = ($127 | 0) == ($129 | 0);
    if ($130) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 1;
    label = 51;
    break;
   case 41:
    var $133 = $121 << 1;
    var $134 = $133 * $126 & -1;
    var $135 = ($134 | 0) == ($129 | 0);
    if ($135) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 4;
    HEAP16[5262944 >> 1] = 19789;
    label = 51;
    break;
   case 43:
    HEAP32[5263692 >> 2] = 16;
    label = 51;
    break;
   case 44:
    HEAP32[5263692 >> 2] = 94;
    label = 51;
    break;
   case 45:
    HEAP32[5263692 >> 2] = 88;
    label = 51;
    break;
   case 46:
    var $141 = 5243604 + $raw_0_lcssa * 44 | 0;
    var $142 = HEAP32[$141 >> 2];
    if (($142 | 0) == 2) {
      label = 47;
      break;
    } else if (($142 | 0) == 6) {
      label = 48;
      break;
    } else if (($142 | 0) == 32803) {
      label = 49;
      break;
    } else {
      label = 51;
      break;
    }
   case 47:
    HEAP32[5263692 >> 2] = 90;
    HEAP32[5427632 >> 2] = 0;
    label = 51;
    break;
   case 48:
    HEAP32[5263692 >> 2] = 8;
    HEAP32[5427632 >> 2] = 0;
    label = 51;
    break;
   case 49:
    HEAP32[5263692 >> 2] = 54;
    label = 51;
    break;
   case 50:
    HEAP32[5264100 >> 2] = 0;
    label = 51;
    break;
   case 51:
    var $148 = HEAP32[5427976 >> 2];
    var $149 = ($148 | 0) == 0;
    if ($149) {
      label = 52;
      break;
    } else {
      label = 60;
      break;
    }
   case 52:
    var $151 = HEAP32[5243580 >> 2];
    var $152 = ($151 | 0) == 3;
    if ($152) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $_pre = HEAP32[5244036 >> 2];
    var $164 = $_pre;
    label = 55;
    break;
   case 54:
    var $154 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $155 = HEAP32[$154 >> 2];
    var $156 = ($155 | 0) != 0;
    var $157 = HEAP32[5244036 >> 2];
    var $158 = ($157 | 0) != 14;
    var $or_cond3 = $156 & $158;
    var $159 = ($157 | 0) != 2048;
    var $or_cond5 = $or_cond3 & $159;
    var $160 = HEAP32[5244032 >> 2];
    var $161 = ($160 | 0) != 32769;
    var $or_cond7 = $or_cond5 & $161;
    var $162 = ($160 | 0) != 32770;
    var $or_cond9 = $or_cond7 & $162;
    if ($or_cond9) {
      label = 59;
      break;
    } else {
      var $164 = $157;
      label = 55;
      break;
    }
   case 55:
    var $164;
    var $165 = ($164 | 0) == 8;
    if ($165) {
      label = 56;
      break;
    } else {
      label = 60;
      break;
    }
   case 56:
    var $167 = _strstr(5263628, 5586632);
    var $168 = ($167 | 0) == 0;
    if ($168) {
      label = 57;
      break;
    } else {
      label = 60;
      break;
    }
   case 57:
    var $170 = _strstr(5263628, 5586624);
    var $171 = ($170 | 0) == 0;
    if ($171) {
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 58:
    var $173 = _strstr(5263308, 5586612);
    var $174 = ($173 | 0) == 0;
    if ($174) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    HEAP32[5264100 >> 2] = 0;
    label = 60;
    break;
   case 60:
    if ($66) {
      label = 76;
      break;
    } else {
      var $thm_063 = -1;
      var $i_264 = 0;
      label = 61;
      break;
    }
   case 61:
    var $i_264;
    var $thm_063;
    var $176 = ($i_264 | 0) == ($raw_0_lcssa | 0);
    if ($176) {
      var $thm_1 = $thm_063;
      label = 66;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $178 = 5243616 + $i_264 * 44 | 0;
    var $179 = HEAP32[$178 >> 2];
    var $180 = ($179 | 0) == ($max_samp_0_lcssa | 0);
    if ($180) {
      label = 63;
      break;
    } else {
      var $thm_1 = $thm_063;
      label = 66;
      break;
    }
   case 63:
    var $182 = 5243588 + $i_264 * 44 | 0;
    var $183 = HEAP32[$182 >> 2];
    var $184 = 5243592 + $i_264 * 44 | 0;
    var $185 = HEAP32[$184 >> 2];
    var $186 = $185 * $183 & -1;
    var $187 = 5243596 + $i_264 * 44 | 0;
    var $188 = HEAP32[$187 >> 2];
    var $189 = $188 + 1 | 0;
    var $190 = $189 * $189 & -1;
    var $191 = ($186 | 0) / ($190 | 0) & -1;
    var $192 = HEAP16[5244040 >> 1];
    var $193 = $192 & 65535;
    var $194 = HEAP16[5244060 >> 1];
    var $195 = $194 & 65535;
    var $196 = $195 * $193 & -1;
    var $197 = HEAP32[5244048 >> 2];
    var $198 = $197 + 1 | 0;
    var $199 = $198 * $198 & -1;
    var $200 = Math.floor(($196 >>> 0) / ($199 >>> 0));
    var $201 = $191 >>> 0 > $200 >>> 0;
    if ($201) {
      label = 64;
      break;
    } else {
      var $thm_1 = $thm_063;
      label = 66;
      break;
    }
   case 64:
    var $203 = 5243600 + $i_264 * 44 | 0;
    var $204 = HEAP32[$203 >> 2];
    var $205 = ($204 | 0) == 34892;
    if ($205) {
      var $thm_1 = $thm_063;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $207 = $183 & 65535;
    HEAP16[5244040 >> 1] = $207;
    var $208 = $185 & 65535;
    HEAP16[5244060 >> 1] = $208;
    var $209 = 5243608 + $i_264 * 44 | 0;
    var $210 = HEAP32[$209 >> 2];
    HEAP32[5244044 >> 2] = $210;
    var $211 = 5243620 + $i_264 * 44 | 0;
    var $212 = HEAP32[$211 >> 2];
    HEAP32[5244056 >> 2] = $212;
    HEAP32[5244048 >> 2] = $188;
    var $thm_1 = $i_264;
    label = 66;
    break;
   case 66:
    var $thm_1;
    var $214 = $i_264 + 1 | 0;
    var $215 = $214 >>> 0 < $58 >>> 0;
    if ($215) {
      var $thm_063 = $thm_1;
      var $i_264 = $214;
      label = 61;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $216 = ($thm_1 | 0) > -1;
    if ($216) {
      label = 68;
      break;
    } else {
      label = 76;
      break;
    }
   case 68:
    var $218 = 5243616 + $thm_1 * 44 | 0;
    var $219 = HEAP32[$218 >> 2];
    var $220 = $219 << 5;
    var $221 = HEAP32[5244048 >> 2];
    var $222 = $221 | $220;
    HEAP32[5244048 >> 2] = $222;
    var $223 = 5243600 + $thm_1 * 44 | 0;
    var $224 = HEAP32[$223 >> 2];
    if (($224 | 0) == 0) {
      label = 69;
      break;
    } else if (($224 | 0) == 1) {
      label = 70;
      break;
    } else if (($224 | 0) == 65e3) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 69:
    HEAP32[5242960 >> 2] = 50;
    label = 76;
    break;
   case 70:
    var $227 = 5243596 + $thm_1 * 44 | 0;
    var $228 = HEAP32[$227 >> 2];
    var $229 = ($228 | 0) < 9;
    if ($229) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    HEAP32[5242960 >> 2] = 68;
    label = 76;
    break;
   case 72:
    var $232 = _strcmp(5263628, 5586692);
    var $233 = ($232 | 0) == 0;
    if ($233) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    HEAP32[5242960 >> 2] = 78;
    label = 76;
    break;
   case 74:
    HEAP32[5244052 >> 2] = 28;
    label = 76;
    break;
   case 75:
    var $237 = 5243604 + $thm_1 * 44 | 0;
    var $238 = HEAP32[$237 >> 2];
    var $239 = ($238 | 0) == 6;
    var $240 = $239 ? 8 : 90;
    HEAP32[5244052 >> 2] = $240;
    label = 76;
    break;
   case 76:
    STACKTOP = __stackBase__;
    return;
  }
}
_apply_tiff["X"] = 1;
function _parse_external_jpeg() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[5264120 >> 2];
    var $3 = _strrchr($2, 46);
    var $4 = _strrchr($2, 47);
    var $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      var $file_1 = $4;
      label = 4;
      break;
    }
   case 3:
    var $7 = _strrchr($2, 92);
    var $8 = ($7 | 0) == 0;
    var $9 = $2 - 1 | 0;
    var $_ = $8 ? $9 : $7;
    var $file_1 = $_;
    label = 4;
    break;
   case 4:
    var $file_1;
    var $10 = $file_1 + 1 | 0;
    var $11 = ($3 | 0) == 0;
    if ($11) {
      label = 22;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $13 = _strlen($3);
    var $14 = ($13 | 0) == 4;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 6:
    var $16 = $3;
    var $17 = $10;
    var $18 = $16 - $17 | 0;
    var $19 = ($18 | 0) == 8;
    if ($19) {
      label = 7;
      break;
    } else {
      label = 22;
      break;
    }
   case 7:
    var $21 = _strlen($2);
    var $22 = $21 + 1 | 0;
    var $23 = _malloc($22);
    _merror($23, 5586552);
    var $24 = HEAP32[5264120 >> 2];
    var $25 = _strcpy($23, $24);
    var $26 = HEAP32[5264120 >> 2];
    var $27 = $26;
    var $28 = $17 - $27 | 0;
    var $29 = $23 + $28 | 0;
    var $30 = $16 - $27 | 0;
    var $31 = _strcasecmp($3, 5586544);
    var $32 = ($31 | 0) == 0;
    if ($32) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $_sum30 = $30 - 1 | 0;
    var $33 = $23 + $_sum30 | 0;
    var $34 = HEAP8[$33];
    var $35 = $34 << 24 >> 24;
    var $isdigittmp2528 = $35 - 48 | 0;
    var $isdigit2629 = $isdigittmp2528 >>> 0 < 10;
    if ($isdigit2629) {
      var $56 = $33;
      var $55 = $34;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    var $37 = $23 + $30 | 0;
    var $38 = $3 + 1 | 0;
    var $39 = HEAP8[$38];
    var $40 = $39 << 24 >> 24;
    var $41 = _isupper($40);
    var $42 = ($41 | 0) != 0;
    var $43 = $42 ? 5586536 : 5586544;
    HEAP8[$37] = HEAP8[$43];
    HEAP8[$37 + 1] = HEAP8[$43 + 1];
    HEAP8[$37 + 2] = HEAP8[$43 + 2];
    HEAP8[$37 + 3] = HEAP8[$43 + 3];
    HEAP8[$37 + 4] = HEAP8[$43 + 4];
    var $44 = HEAP8[$10];
    var $45 = $44 << 24 >> 24;
    var $isdigittmp = $45 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    var $47 = $file_1 + 5 | 0;
    var $48 = $47;
    var $49 = $29;
    var $50 = HEAPU8[$48] | HEAPU8[$48 + 1] << 8 | HEAPU8[$48 + 2] << 16 | HEAPU8[$48 + 3] << 24 | 0;
    tempBigInt = $50;
    HEAP8[$49] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$49 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$49 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$49 + 3] = tempBigInt & 255;
    var $_sum = $28 + 4 | 0;
    var $51 = $23 + $_sum | 0;
    var $52 = $10;
    var $53 = $51;
    var $54 = HEAPU8[$52] | HEAPU8[$52 + 1] << 8 | HEAPU8[$52 + 2] << 16 | HEAPU8[$52 + 3] << 24 | 0;
    tempBigInt = $54;
    HEAP8[$53] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$53 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$53 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$53 + 3] = tempBigInt & 255;
    label = 14;
    break;
   case 11:
    var $55;
    var $56;
    var $57 = $55 << 24 >> 24 == 57;
    if ($57) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $59 = $55 + 1 & 255;
    HEAP8[$56] = $59;
    label = 14;
    break;
   case 13:
    HEAP8[$56] = 48;
    var $61 = $56 - 1 | 0;
    var $62 = HEAP8[$61];
    var $63 = $62 << 24 >> 24;
    var $isdigittmp25 = $63 - 48 | 0;
    var $isdigit26 = $isdigittmp25 >>> 0 < 10;
    if ($isdigit26) {
      var $56 = $61;
      var $55 = $62;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $64 = HEAP32[5264120 >> 2];
    var $65 = _strcmp($23, $64);
    var $66 = ($65 | 0) == 0;
    if ($66) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $68 = _fopen($23, 5579008);
    HEAP32[5264116 >> 2] = $68;
    var $69 = ($68 | 0) == 0;
    if ($69) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $72 = HEAP32[_stderr >> 2];
    var $73 = _fprintf($72, 5586504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $23, tempInt));
    label = 18;
    break;
   case 18:
    var $75 = _parse_tiff(12);
    HEAP32[5244044 >> 2] = 0;
    HEAP32[5264100 >> 2] = 1;
    var $76 = HEAP32[5264116 >> 2];
    var $77 = _fclose($76);
    label = 19;
    break;
   case 19:
    var $79 = HEAP32[5243568 >> 2];
    var $80 = ($79 | 0) == 0;
    if ($80) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $82 = HEAP32[_stderr >> 2];
    var $83 = _fprintf($82, 5586468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $23, tempInt));
    label = 21;
    break;
   case 21:
    _free($23);
    HEAP32[5264116 >> 2] = $1;
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_external_jpeg["X"] = 1;
function _ciff_block_1030() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = _get2();
    var $2 = _get4();
    var $3 = ($2 | 0) == 524296;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    var $5 = _get4();
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $8 = _get2();
    var $9 = $8 & 65535;
    if ($8 << 16 >> 16 == 12 | $8 << 16 >> 16 == 10) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $10 = 32 - $9 | 0;
    var $i_019 = 0;
    var $row_020 = 0;
    var $vbits_021 = 0;
    var $bitbuf_022 = 0;
    label = 6;
    break;
   case 6:
    var $bitbuf_022;
    var $vbits_021;
    var $row_020;
    var $i_019;
    var $i_114 = $i_019;
    var $col_015 = 0;
    var $vbits_116 = $vbits_021;
    var $bitbuf_117 = $bitbuf_022;
    label = 7;
    break;
   case 7:
    var $bitbuf_117;
    var $vbits_116;
    var $col_015;
    var $i_114;
    var $12 = ($vbits_116 | 0) < ($9 | 0);
    if ($12) {
      label = 8;
      break;
    } else {
      var $bitbuf_2 = $bitbuf_117;
      var $vbits_2 = $vbits_116;
      var $i_2 = $i_114;
      label = 9;
      break;
    }
   case 8:
    var $14 = $bitbuf_117 << 16;
    var $15 = _get2();
    var $16 = $i_114 + 1 | 0;
    var $17 = $i_114 & 1;
    var $18 = 5560892 + ($17 << 1) | 0;
    var $19 = HEAP16[$18 >> 1];
    var $20 = $19 ^ $15;
    var $21 = $20 & 65535;
    var $22 = $21 | $14;
    var $23 = $vbits_116 + 16 | 0;
    var $bitbuf_2 = $22;
    var $vbits_2 = $23;
    var $i_2 = $16;
    label = 9;
    break;
   case 9:
    var $i_2;
    var $vbits_2;
    var $bitbuf_2;
    var $25 = 32 - $vbits_2 | 0;
    var $26 = $bitbuf_2 << $25;
    var $27 = $26 >>> ($10 >>> 0);
    var $28 = $27 & 65535;
    var $29 = 5242968 + ($row_020 << 4) + ($col_015 << 1) | 0;
    HEAP16[$29 >> 1] = $28;
    var $30 = $vbits_2 - $9 | 0;
    var $31 = $col_015 + 1 | 0;
    var $exitcond = ($31 | 0) == 8;
    if ($exitcond) {
      label = 10;
      break;
    } else {
      var $i_114 = $i_2;
      var $col_015 = $31;
      var $vbits_116 = $30;
      var $bitbuf_117 = $bitbuf_2;
      label = 7;
      break;
    }
   case 10:
    var $33 = $row_020 + 1 | 0;
    var $exitcond23 = ($33 | 0) == 8;
    if ($exitcond23) {
      label = 11;
      break;
    } else {
      var $i_019 = $i_2;
      var $row_020 = $33;
      var $vbits_021 = $30;
      var $bitbuf_022 = $bitbuf_2;
      label = 6;
      break;
    }
   case 11:
    return;
  }
}
_ciff_block_1030["X"] = 1;
function _parse_ciff($offset, $length) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = $offset - 4 | 0;
    var $3 = $2 + $length | 0;
    var $4 = _fseek($1, $3, 0);
    var $5 = _get4();
    var $6 = $5 + $offset | 0;
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _fseek($7, $6, 0);
    var $9 = _get2();
    var $10 = ($9 & 65535) > 100;
    var $11 = $9 << 16 >> 16 == 0;
    var $or_cond = $10 | $11;
    if ($or_cond) {
      label = 43;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $12 = $9 & 65535;
    var $wbi_088 = -1;
    var $_in = $12;
    var $key_sroa_0_0 = 1040;
    var $key_sroa_1_0 = 17907;
    label = 4;
    break;
   case 4:
    var $key_sroa_1_0;
    var $key_sroa_0_0;
    var $_in;
    var $wbi_088;
    var $14 = $_in - 1 | 0;
    var $15 = _get2();
    var $16 = $15 & 65535;
    var $17 = _get4();
    var $18 = HEAP32[5264116 >> 2];
    var $19 = _ftell($18);
    var $20 = $19 + 4 | 0;
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _get4();
    var $23 = $22 + $offset | 0;
    var $24 = _fseek($21, $23, 0);
    var $25 = $16 >>> 8;
    var $26 = $25 + 8 | 0;
    var $27 = $26 | 8;
    var $28 = ($27 | 0) == 56;
    if ($28) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $30 = HEAP32[5264116 >> 2];
    var $31 = _ftell($30);
    _parse_ciff($31, $17);
    label = 6;
    break;
   case 6:
    if ($15 << 16 >> 16 == 2064) {
      label = 7;
      break;
    } else if ($15 << 16 >> 16 == 2058) {
      label = 8;
      break;
    } else if ($15 << 16 >> 16 == 6160) {
      label = 9;
      break;
    } else if ($15 << 16 >> 16 == 6197) {
      label = 10;
      break;
    } else if ($15 << 16 >> 16 == 8199) {
      label = 11;
      break;
    } else if ($15 << 16 >> 16 == 6168) {
      label = 12;
      break;
    } else if ($15 << 16 >> 16 == 4138) {
      label = 13;
      break;
    } else if ($15 << 16 >> 16 == 4140) {
      label = 15;
      break;
    } else if ($15 << 16 >> 16 == 50) {
      label = 18;
      break;
    } else if ($15 << 16 >> 16 == 4265) {
      label = 27;
      break;
    } else {
      var $wbi_4 = $wbi_088;
      var $key_sroa_0_4 = $key_sroa_0_0;
      var $key_sroa_1_4 = $key_sroa_1_0;
      label = 30;
      break;
    }
   case 7:
    var $34 = HEAP32[5264116 >> 2];
    var $35 = _fread(5561404, 64, 1, $34);
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 8:
    var $37 = HEAP32[5264116 >> 2];
    var $38 = _fread(5263628, 64, 1, $37);
    var $39 = HEAP32[5264116 >> 2];
    var $40 = _strlen(5263628);
    var $41 = $40 - 63 | 0;
    var $42 = _fseek($39, $41, 1);
    var $43 = HEAP32[5264116 >> 2];
    var $44 = _fread(5263372, 64, 1, $43);
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 9:
    var $46 = HEAP32[5264116 >> 2];
    var $47 = _fseek($46, 12, 1);
    var $48 = _get4();
    HEAP32[5403048 >> 2] = $48;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 10:
    var $50 = _get4();
    HEAP32[5244032 >> 2] = $50;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 11:
    var $52 = HEAP32[5264116 >> 2];
    var $53 = _ftell($52);
    HEAP32[5244044 >> 2] = $53;
    HEAP32[5244056 >> 2] = $17;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 12:
    var $55 = _get4();
    var $56 = _get4();
    var $57 = _int_to_float($56);
    var $58 = -$57;
    var $59 = $58;
    var $exp2 = _exp2($59);
    var $60 = $exp2;
    HEAPF32[5244912 >> 2] = $60;
    var $61 = _get4();
    var $62 = _int_to_float($61);
    var $63 = $62 * .5;
    var $64 = $63;
    var $exp260 = _exp2($64);
    var $65 = $exp260;
    HEAPF32[5561468 >> 2] = $65;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 13:
    var $67 = _get4();
    var $68 = _get2();
    var $69 = $68 & 65535;
    var $70 = $69 | 0;
    var $71 = $70 * .03125;
    var $72 = $71 - 4;
    var $exp261 = _exp2($72);
    var $73 = $exp261 * 50;
    var $74 = $73;
    HEAPF32[5264096 >> 2] = $74;
    var $75 = _get2();
    var $76 = _get2();
    var $77 = $76 << 16 >> 16;
    var $78 = $77 * .015625;
    var $exp262 = _exp2($78);
    var $79 = $exp262;
    HEAPF32[5561468 >> 2] = $79;
    var $80 = _get2();
    var $81 = $80 << 16 >> 16;
    var $82 = -$81 | 0;
    var $83 = $82 | 0;
    var $84 = $83 * .03125;
    var $exp263 = _exp2($84);
    var $85 = $exp263;
    HEAPF32[5244912 >> 2] = $85;
    var $86 = _get2();
    var $87 = _get2();
    var $88 = $87 & 65535;
    var $89 = ($87 & 65535) > 17;
    var $_ = $89 ? 0 : $88;
    var $90 = HEAP32[5264116 >> 2];
    var $91 = _fseek($90, 32, 1);
    var $92 = HEAPF32[5244912 >> 2];
    var $93 = $92 > 1e6;
    if ($93) {
      label = 14;
      break;
    } else {
      var $wbi_468 = $_;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    }
   case 14:
    var $95 = _get2();
    var $96 = $95 & 65535;
    var $97 = $96 | 0;
    var $98 = $97 / 10;
    var $99 = $98;
    HEAPF32[5244912 >> 2] = $99;
    var $wbi_468 = $_;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 15:
    var $101 = _get2();
    var $102 = ($101 & 65535) > 512;
    var $103 = HEAP32[5264116 >> 2];
    if ($102) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $104 = _fseek($103, 98, 1);
    var $105 = _get2();
    var $106 = $105 & 65535;
    HEAPF32[5561128 >> 2] = $106;
    var $107 = _get2();
    var $108 = $107 & 65535;
    HEAPF32[5561124 >> 2] = $108;
    var $109 = _get2();
    var $110 = $109 & 65535;
    HEAPF32[5561132 >> 2] = $110;
    var $111 = _get2();
    var $112 = $111 & 65535;
    HEAPF32[5561136 >> 2] = $112;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 17:
    var $114 = _fseek($103, 118, 1);
    var $115 = _get2();
    var $116 = $115 & 65535;
    HEAPF32[5561132 >> 2] = $116;
    var $117 = _get2();
    var $118 = $117 & 65535;
    HEAPF32[5561136 >> 2] = $118;
    var $119 = _get2();
    var $120 = $119 & 65535;
    HEAPF32[5561124 >> 2] = $120;
    var $121 = _get2();
    var $122 = $121 & 65535;
    HEAPF32[5561128 >> 2] = $122;
    var $wbi_468 = $wbi_088;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 18:
    var $124 = ($17 | 0) == 768;
    if ($124) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $126 = HEAP32[5264116 >> 2];
    var $127 = _fseek($126, 72, 1);
    var $128 = _get2();
    var $129 = $128 & 65535;
    var $130 = $129 | 0;
    var $131 = 1024 / $130;
    var $132 = $131;
    HEAPF32[5561124 >> 2] = $132;
    var $133 = _get2();
    var $134 = $133 & 65535;
    var $135 = $134 | 0;
    var $136 = 1024 / $135;
    var $137 = $136;
    HEAPF32[5561128 >> 2] = $137;
    var $138 = _get2();
    var $139 = $138 & 65535;
    var $140 = $139 | 0;
    var $141 = 1024 / $140;
    var $142 = $141;
    HEAPF32[5561136 >> 2] = $142;
    var $143 = _get2();
    var $144 = $143 & 65535;
    var $145 = $144 | 0;
    var $146 = 1024 / $145;
    var $147 = $146;
    HEAPF32[5561132 >> 2] = $147;
    var $148 = ($wbi_088 | 0) == 0;
    if ($148) {
      label = 20;
      break;
    } else {
      var $wbi_468 = $wbi_088;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    }
   case 20:
    HEAPF32[5561124 >> 2] = -1;
    var $wbi_4 = 0;
    var $key_sroa_0_4 = $key_sroa_0_0;
    var $key_sroa_1_4 = $key_sroa_1_0;
    label = 30;
    break;
   case 21:
    var $151 = HEAPF32[5561124 >> 2];
    var $152 = $151 != 0;
    if ($152) {
      var $wbi_468 = $wbi_088;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $154 = _get2();
    var $155 = $154 << 16 >> 16 == $key_sroa_0_0 << 16 >> 16;
    if ($155) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $157 = _strstr(5263372, 5586460);
    var $158 = ($157 | 0) != 0;
    var $159 = $158 ? 5586440 : 5586420;
    var $160 = $159 + $wbi_088 | 0;
    var $161 = HEAP8[$160];
    var $162 = $161 << 24 >> 24;
    var $163 = $162 - 46 | 0;
    var $c_3 = $163;
    var $key_sroa_0_1 = $key_sroa_0_0;
    var $key_sroa_1_1 = $key_sroa_1_0;
    label = 25;
    break;
   case 24:
    var $165 = $wbi_088 + 5586400 | 0;
    var $166 = HEAP8[$165];
    var $167 = $166 << 24 >> 24;
    var $168 = $167 - 48 | 0;
    var $c_3 = $168;
    var $key_sroa_0_1 = 0;
    var $key_sroa_1_1 = 0;
    label = 25;
    break;
   case 25:
    var $key_sroa_1_1;
    var $key_sroa_0_1;
    var $c_3;
    var $170 = HEAP32[5264116 >> 2];
    var $171 = $c_3 << 3;
    var $172 = $171 + 78 | 0;
    var $173 = _fseek($170, $172, 1);
    var $174 = _get2();
    var $175 = $key_sroa_0_1 ^ $174;
    var $176 = $175 & 65535;
    var $177 = $176 | 0;
    HEAPF32[5561128 >> 2] = $177;
    var $178 = _get2();
    var $179 = $key_sroa_1_1 ^ $178;
    var $180 = $179 & 65535;
    var $181 = $180 | 0;
    HEAPF32[5561124 >> 2] = $181;
    var $182 = _get2();
    var $183 = $key_sroa_0_1 ^ $182;
    var $184 = $183 & 65535;
    var $185 = $184 | 0;
    HEAPF32[5561132 >> 2] = $185;
    var $186 = _get2();
    var $187 = $key_sroa_1_1 ^ $186;
    var $188 = $187 & 65535;
    var $189 = $188 | 0;
    HEAPF32[5561136 >> 2] = $189;
    var $190 = ($wbi_088 | 0) == 0;
    if ($190) {
      label = 26;
      break;
    } else {
      var $wbi_4 = $wbi_088;
      var $key_sroa_0_4 = $key_sroa_0_1;
      var $key_sroa_1_4 = $key_sroa_1_1;
      label = 30;
      break;
    }
   case 26:
    HEAPF32[5561124 >> 2] = -1;
    var $wbi_4 = 0;
    var $key_sroa_0_4 = $key_sroa_0_1;
    var $key_sroa_1_4 = $key_sroa_1_1;
    label = 30;
    break;
   case 27:
    var $193 = ($17 | 0) > 66;
    if ($193) {
      label = 28;
      break;
    } else {
      var $wbi_3 = $wbi_088;
      label = 29;
      break;
    }
   case 28:
    var $195 = $wbi_088 + 5586368 | 0;
    var $196 = HEAP8[$195];
    var $197 = $196 << 24 >> 24;
    var $198 = $197 - 48 | 0;
    var $wbi_3 = $198;
    label = 29;
    break;
   case 29:
    var $wbi_3;
    var $199 = HEAP32[5264116 >> 2];
    var $200 = $wbi_3 << 3;
    var $201 = $200 | 2;
    var $202 = _fseek($199, $201, 1);
    var $203 = _get2();
    var $204 = $203 & 65535;
    HEAPF32[5561124 >> 2] = $204;
    var $205 = _get2();
    var $206 = $205 & 65535;
    HEAPF32[5561128 >> 2] = $206;
    var $207 = _get2();
    var $208 = $207 & 65535;
    HEAPF32[5561136 >> 2] = $208;
    var $209 = _get2();
    var $210 = $209 & 65535;
    HEAPF32[5561132 >> 2] = $210;
    var $wbi_4 = $wbi_3;
    var $key_sroa_0_4 = $key_sroa_0_0;
    var $key_sroa_1_4 = $key_sroa_1_0;
    label = 30;
    break;
   case 30:
    var $key_sroa_1_4;
    var $key_sroa_0_4;
    var $wbi_4;
    if ($15 << 16 >> 16 == 4144) {
      label = 31;
      break;
    } else if ($15 << 16 >> 16 == 4145) {
      label = 33;
      break;
    } else if ($15 << 16 >> 16 == 20521) {
      label = 34;
      break;
    } else if ($15 << 16 >> 16 == 22547) {
      label = 36;
      break;
    } else if ($15 << 16 >> 16 == 22548) {
      label = 37;
      break;
    } else if ($15 << 16 >> 16 == 22551) {
      label = 38;
      break;
    } else if ($15 << 16 >> 16 == 22580) {
      label = 39;
      break;
    } else if ($15 << 16 >> 16 == 22542) {
      label = 40;
      break;
    } else if ($15 << 16 >> 16 == 6158) {
      label = 41;
      break;
    } else {
      var $wbi_468 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    }
   case 31:
    var $212 = 98368 >>> ($wbi_4 >>> 0);
    var $213 = $212 & 1;
    var $214 = ($213 | 0) == 0;
    if ($214) {
      var $wbi_468 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _ciff_block_1030();
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 33:
    var $217 = _get2();
    var $218 = _get2();
    HEAP16[5245028 >> 1] = $218;
    var $219 = _get2();
    HEAP16[5245036 >> 1] = $219;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 34:
    var $221 = $17 >> 16;
    var $222 = $221 | 0;
    HEAPF32[5403044 >> 2] = $222;
    var $223 = $17 & 65535;
    var $224 = ($223 | 0) == 2;
    if ($224) {
      label = 35;
      break;
    } else {
      var $wbi_468 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    }
   case 35:
    var $226 = $222 * .03125;
    HEAPF32[5403044 >> 2] = $226;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 36:
    var $227 = _int_to_float($17);
    HEAPF32[5403052 >> 2] = $227;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 37:
    var $228 = _int_to_float($17);
    HEAPF32[5560920 >> 2] = $228;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 38:
    HEAP32[5244924 >> 2] = $17;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 39:
    HEAP32[5243560 >> 2] = $17;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 40:
    HEAP32[5243568 >> 2] = $17;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 41:
    var $231 = _get4();
    HEAP32[5243568 >> 2] = $231;
    var $wbi_468 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 42:
    var $key_sroa_1_5;
    var $key_sroa_0_5;
    var $wbi_468;
    var $232 = HEAP32[5264116 >> 2];
    var $233 = _fseek($232, $20, 0);
    var $234 = ($14 | 0) == 0;
    if ($234) {
      label = 43;
      break;
    } else {
      var $wbi_088 = $wbi_468;
      var $_in = $14;
      var $key_sroa_0_0 = $key_sroa_0_5;
      var $key_sroa_1_0 = $key_sroa_1_5;
      label = 4;
      break;
    }
   case 43:
    return;
  }
}
_parse_ciff["X"] = 1;
function _parse_rollei() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 172 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $line = __stackBase__;
    var $t = __stackBase__ + 128;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 0, 0);
    var $3 = $t;
    for (var $$dest = $3 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $4 = $line | 0;
    var $5 = $t + 12 | 0;
    var $6 = $t + 16 | 0;
    var $7 = $t + 20 | 0;
    var $8 = $t + 8 | 0;
    var $9 = $t + 4 | 0;
    var $10 = $t | 0;
    label = 3;
    break;
   case 3:
    var $12 = HEAP32[5264116 >> 2];
    var $13 = _fgets($4, 128, $12);
    var $14 = _strchr($4, 61);
    var $15 = ($14 | 0) == 0;
    if ($15) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $17 = $14 + 1 | 0;
    HEAP8[$14] = 0;
    var $val_0 = $17;
    label = 6;
    break;
   case 5:
    var $19 = _strlen($4);
    var $20 = $line + $19 | 0;
    var $val_0 = $20;
    label = 6;
    break;
   case 6:
    var $val_0;
    var $22 = _strcmp($4, 5586364);
    var $23 = ($22 | 0) == 0;
    if ($23) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $25 = _sscanf($val_0, 5579012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = $6, HEAP32[tempInt + 8 >> 2] = $7, tempInt));
    label = 8;
    break;
   case 8:
    var $27 = _strcmp($4, 5586360);
    var $28 = ($27 | 0) == 0;
    if ($28) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $30 = _sscanf($val_0, 5586348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $9, HEAP32[tempInt + 8 >> 2] = $10, tempInt));
    label = 10;
    break;
   case 10:
    var $32 = _strcmp($4, 5586344);
    var $33 = ($32 | 0) == 0;
    if ($33) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $35 = _atoi($val_0);
    HEAP32[5244044 >> 2] = $35;
    label = 12;
    break;
   case 12:
    var $37 = _strcmp($4, 5586340);
    var $38 = ($37 | 0) == 0;
    if ($38) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $40 = _atoi($val_0);
    var $41 = $40 & 65535;
    HEAP16[5245028 >> 1] = $41;
    label = 14;
    break;
   case 14:
    var $43 = _strcmp($4, 5586336);
    var $44 = ($43 | 0) == 0;
    if ($44) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $46 = _atoi($val_0);
    var $47 = $46 & 65535;
    HEAP16[5245036 >> 1] = $47;
    label = 16;
    break;
   case 16:
    var $49 = _strcmp($4, 5586332);
    var $50 = ($49 | 0) == 0;
    if ($50) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $52 = _atoi($val_0);
    var $53 = $52 & 65535;
    HEAP16[5244040 >> 1] = $53;
    label = 18;
    break;
   case 18:
    var $55 = _strcmp($4, 5586328);
    var $56 = ($55 | 0) == 0;
    if ($56) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $58 = _atoi($val_0);
    var $59 = $58 & 65535;
    HEAP16[5244060 >> 1] = $59;
    label = 20;
    break;
   case 20:
    var $61 = _strncmp($4, 5586320, 4);
    var $62 = ($61 | 0) == 0;
    if ($62) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 21:
    var $64 = HEAP32[5244044 >> 2];
    var $65 = HEAP16[5244040 >> 1];
    var $66 = $65 & 65535;
    var $67 = HEAP16[5244060 >> 1];
    var $68 = $67 & 65535;
    var $69 = $66 << 1;
    var $70 = $69 * $68 & -1;
    var $71 = $70 + $64 | 0;
    HEAP32[5428492 >> 2] = $71;
    var $72 = HEAP32[$7 >> 2];
    var $73 = $72 - 1900 | 0;
    HEAP32[$7 >> 2] = $73;
    var $74 = HEAP32[$6 >> 2];
    var $75 = $74 - 1 | 0;
    HEAP32[$6 >> 2] = $75;
    var $76 = _mktime($t);
    var $77 = ($76 | 0) > 0;
    if ($77) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $79 = _mktime($t);
    HEAP32[5243568 >> 2] = $79;
    label = 23;
    break;
   case 23:
    HEAP8[5263628] = HEAP8[5586288];
    HEAP8[5263629] = HEAP8[5586289];
    HEAP8[5263630] = HEAP8[5586290];
    HEAP8[5263631] = HEAP8[5586291];
    HEAP8[5263632] = HEAP8[5586292];
    HEAP8[5263633] = HEAP8[5586293];
    HEAP8[5263634] = HEAP8[5586294];
    for (var $$src = 5586276, $$dest = 5263372, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5242960 >> 2] = 56;
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_rollei["X"] = 1;
function _parse_sinar_ia() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $str = __stackBase__;
    HEAP16[5262944 >> 1] = 18761;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 4, 0);
    var $3 = _get4();
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _get4();
    var $6 = _fseek($4, $5, 0);
    var $7 = ($3 | 0) == 0;
    if ($7) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $8 = $str | 0;
    var $_in = $3;
    label = 4;
    break;
   case 4:
    var $_in;
    var $10 = $_in - 1 | 0;
    var $11 = _get4();
    var $12 = _get4();
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fread($8, 8, 1, $13);
    var $15 = _strcmp($8, 5586268);
    var $16 = ($15 | 0) == 0;
    if ($16) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5263440 >> 2] = $11;
    label = 6;
    break;
   case 6:
    var $19 = _strcmp($8, 5586260);
    var $20 = ($19 | 0) == 0;
    if ($20) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5244044 >> 2] = $11;
    label = 8;
    break;
   case 8:
    var $23 = _strcmp($8, 5586252);
    var $24 = ($23 | 0) == 0;
    if ($24) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[5428492 >> 2] = $11;
    label = 10;
    break;
   case 10:
    var $26 = ($10 | 0) == 0;
    if ($26) {
      label = 11;
      break;
    } else {
      var $_in = $10;
      label = 4;
      break;
    }
   case 11:
    var $27 = HEAP32[5264116 >> 2];
    var $28 = HEAP32[5263440 >> 2];
    var $29 = $28 + 20 | 0;
    var $30 = _fseek($27, $29, 0);
    var $31 = HEAP32[5264116 >> 2];
    var $32 = _fread(5263628, 64, 1, $31);
    HEAP8[5263691] = 0;
    var $33 = _strchr(5263628, 32);
    var $34 = ($33 | 0) == 0;
    if ($34) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $36 = $33 + 1 | 0;
    var $37 = _strcpy(5263372, $36);
    HEAP8[$33] = 0;
    label = 13;
    break;
   case 13:
    var $39 = _get2();
    HEAP16[5245028 >> 1] = $39;
    var $40 = _get2();
    HEAP16[5245036 >> 1] = $40;
    HEAP32[5263692 >> 2] = 4;
    var $41 = _get4();
    var $42 = _get2();
    HEAP16[5244040 >> 1] = $42;
    var $43 = _get2();
    HEAP16[5244060 >> 1] = $43;
    HEAP32[5242960 >> 2] = 68;
    HEAP32[5263496 >> 2] = 16383;
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_sinar_ia["X"] = 1;
function _parse_phase_one($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $romm_cam = __stackBase__;
    HEAP32[5245740 >> 2] = 0;
    HEAP32[5245744 >> 2] = 0;
    HEAP32[5245748 >> 2] = 0;
    HEAP32[5245752 >> 2] = 0;
    HEAP32[5245756 >> 2] = 0;
    HEAP32[5245760 >> 2] = 0;
    HEAP32[5245764 >> 2] = 0;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, $base, 0);
    var $3 = _get4();
    var $4 = $3 & 65535;
    HEAP16[5262944 >> 1] = $4;
    var $5 = _get4();
    var $_mask = $5 & -256;
    var $6 = ($_mask | 0) == 1382119168;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 34;
      break;
    }
   case 3:
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _get4();
    var $10 = $9 + $base | 0;
    var $11 = _fseek($8, $10, 0);
    var $12 = _get4();
    var $13 = _get4();
    var $14 = ($12 | 0) == 0;
    if ($14) {
      label = 28;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $15 = $romm_cam | 0;
    var $16 = $romm_cam | 0;
    var $17 = $romm_cam + 4 | 0;
    var $18 = $romm_cam + 8 | 0;
    var $19 = $romm_cam + 12 | 0;
    var $20 = $romm_cam + 16 | 0;
    var $21 = $romm_cam + 20 | 0;
    var $22 = $romm_cam + 24 | 0;
    var $23 = $romm_cam + 28 | 0;
    var $24 = $romm_cam + 32 | 0;
    var $_in = $12;
    label = 5;
    break;
   case 5:
    var $_in;
    var $26 = $_in - 1 | 0;
    var $27 = _get4();
    var $28 = _get4();
    var $29 = _get4();
    var $30 = _get4();
    var $31 = HEAP32[5264116 >> 2];
    var $32 = _ftell($31);
    var $33 = HEAP32[5264116 >> 2];
    var $34 = $30 + $base | 0;
    var $35 = _fseek($33, $34, 0);
    if (($27 | 0) == 256) {
      label = 6;
      break;
    } else if (($27 | 0) == 262) {
      label = 7;
      break;
    } else if (($27 | 0) == 263) {
      label = 8;
      break;
    } else if (($27 | 0) == 264) {
      label = 9;
      break;
    } else if (($27 | 0) == 265) {
      label = 10;
      break;
    } else if (($27 | 0) == 266) {
      label = 11;
      break;
    } else if (($27 | 0) == 267) {
      label = 12;
      break;
    } else if (($27 | 0) == 268) {
      label = 13;
      break;
    } else if (($27 | 0) == 269) {
      label = 14;
      break;
    } else if (($27 | 0) == 270) {
      label = 15;
      break;
    } else if (($27 | 0) == 271) {
      label = 16;
      break;
    } else if (($27 | 0) == 272) {
      label = 17;
      break;
    } else if (($27 | 0) == 274) {
      label = 18;
      break;
    } else if (($27 | 0) == 528) {
      label = 19;
      break;
    } else if (($27 | 0) == 538) {
      label = 20;
      break;
    } else if (($27 | 0) == 540) {
      label = 21;
      break;
    } else if (($27 | 0) == 541) {
      label = 22;
      break;
    } else if (($27 | 0) == 546) {
      label = 23;
      break;
    } else if (($27 | 0) == 547) {
      label = 24;
      break;
    } else if (($27 | 0) == 769) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 6:
    var $37 = $30 & 3;
    var $38 = $37 + 5586244 | 0;
    var $39 = HEAP8[$38];
    var $40 = $39 << 24 >> 24;
    var $41 = $40 - 48 | 0;
    HEAP32[5403048 >> 2] = $41;
    label = 27;
    break;
   case 7:
    var $42 = _getreal(11);
    var $43 = $42;
    HEAPF32[$16 >> 2] = $43;
    var $44 = _getreal(11);
    var $45 = $44;
    HEAPF32[$17 >> 2] = $45;
    var $46 = _getreal(11);
    var $47 = $46;
    HEAPF32[$18 >> 2] = $47;
    var $48 = _getreal(11);
    var $49 = $48;
    HEAPF32[$19 >> 2] = $49;
    var $50 = _getreal(11);
    var $51 = $50;
    HEAPF32[$20 >> 2] = $51;
    var $52 = _getreal(11);
    var $53 = $52;
    HEAPF32[$21 >> 2] = $53;
    var $54 = _getreal(11);
    var $55 = $54;
    HEAPF32[$22 >> 2] = $55;
    var $56 = _getreal(11);
    var $57 = $56;
    HEAPF32[$23 >> 2] = $57;
    var $58 = _getreal(11);
    var $59 = $58;
    HEAPF32[$24 >> 2] = $59;
    _romm_coeff($15);
    label = 27;
    break;
   case 8:
    var $60 = _getreal(11);
    var $61 = $60;
    HEAPF32[5561124 >> 2] = $61;
    var $62 = _getreal(11);
    var $63 = $62;
    HEAPF32[5561128 >> 2] = $63;
    var $64 = _getreal(11);
    var $65 = $64;
    HEAPF32[5561132 >> 2] = $65;
    label = 27;
    break;
   case 9:
    var $67 = $30 & 65535;
    HEAP16[5245028 >> 1] = $67;
    label = 27;
    break;
   case 10:
    var $69 = $30 & 65535;
    HEAP16[5245036 >> 1] = $69;
    label = 27;
    break;
   case 11:
    var $71 = $30 & 65535;
    HEAP16[5263700 >> 1] = $71;
    label = 27;
    break;
   case 12:
    var $73 = $30 & 65535;
    HEAP16[5243564 >> 1] = $73;
    label = 27;
    break;
   case 13:
    var $75 = $30 & 65535;
    HEAP16[5242964 >> 1] = $75;
    label = 27;
    break;
   case 14:
    var $77 = $30 & 65535;
    HEAP16[5398712 >> 1] = $77;
    label = 27;
    break;
   case 15:
    HEAP32[5245740 >> 2] = $30;
    label = 27;
    break;
   case 16:
    HEAP32[5428492 >> 2] = $34;
    label = 27;
    break;
   case 17:
    HEAP32[5263440 >> 2] = $34;
    HEAP32[5263444 >> 2] = $29;
    label = 27;
    break;
   case 18:
    var $82 = $32 - 4 | 0;
    HEAP32[5245744 >> 2] = $82;
    label = 27;
    break;
   case 19:
    var $84 = _int_to_float($30);
    HEAPF32[5245764 >> 2] = $84;
    label = 27;
    break;
   case 20:
    HEAP32[5245760 >> 2] = $30;
    label = 27;
    break;
   case 21:
    HEAP32[5244068 >> 2] = $34;
    label = 27;
    break;
   case 22:
    HEAP32[5245748 >> 2] = $30;
    label = 27;
    break;
   case 23:
    HEAP32[5245756 >> 2] = $30;
    label = 27;
    break;
   case 24:
    HEAP32[5245752 >> 2] = $34;
    label = 27;
    break;
   case 25:
    HEAP8[5263435] = 0;
    var $91 = HEAP32[5264116 >> 2];
    var $92 = _fread(5263372, 1, 63, $91);
    var $93 = _strstr(5263372, 5586236);
    var $94 = ($93 | 0) == 0;
    if ($94) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    HEAP8[$93] = 0;
    label = 27;
    break;
   case 27:
    var $97 = HEAP32[5264116 >> 2];
    var $98 = _fseek($97, $32, 0);
    var $99 = ($26 | 0) == 0;
    if ($99) {
      label = 28;
      break;
    } else {
      var $_in = $26;
      label = 5;
      break;
    }
   case 28:
    var $100 = HEAP32[5245740 >> 2];
    var $101 = ($100 | 0) < 3;
    var $102 = $101 ? 64 : 86;
    HEAP32[5263692 >> 2] = $102;
    HEAP32[5263496 >> 2] = 65535;
    for (var $$src = 5586224, $$dest = 5263628, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $103 = HEAP8[5263372];
    var $104 = $103 << 24 >> 24 == 0;
    if ($104) {
      label = 29;
      break;
    } else {
      label = 34;
      break;
    }
   case 29:
    var $106 = HEAP16[5245036 >> 1];
    var $107 = $106 & 65535;
    if (($107 | 0) == 2060) {
      label = 30;
      break;
    } else if (($107 | 0) == 2682) {
      label = 31;
      break;
    } else if (($107 | 0) == 4128) {
      label = 32;
      break;
    } else if (($107 | 0) == 5488) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 30:
    for (var $$src = 5586212, $$dest = 5263372, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    label = 34;
    break;
   case 31:
    HEAP8[5263372] = HEAP8[5586204];
    HEAP8[5263373] = HEAP8[5586205];
    HEAP8[5263374] = HEAP8[5586206];
    HEAP8[5263375] = HEAP8[5586207];
    HEAP8[5263376] = HEAP8[5586208];
    label = 34;
    break;
   case 32:
    HEAP8[5263372] = HEAP8[5586152];
    HEAP8[5263373] = HEAP8[5586153];
    HEAP8[5263374] = HEAP8[5586154];
    HEAP8[5263375] = HEAP8[5586155];
    HEAP8[5263376] = HEAP8[5586156];
    label = 34;
    break;
   case 33:
    HEAP8[5263372] = HEAP8[5586144];
    HEAP8[5263373] = HEAP8[5586145];
    HEAP8[5263374] = HEAP8[5586146];
    HEAP8[5263375] = HEAP8[5586147];
    HEAP8[5263376] = HEAP8[5586148];
    label = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_phase_one["X"] = 1;
function _parse_fuji($offset) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, $offset, 0);
    var $3 = _get4();
    var $4 = $3 >>> 0 > 255;
    if ($4) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = ($3 | 0) == 0;
    if ($5) {
      label = 14;
      break;
    } else {
      var $_in = $3;
      label = 4;
      break;
    }
   case 4:
    var $_in;
    var $6 = $_in - 1 | 0;
    var $7 = _get2();
    var $8 = _get2();
    var $9 = $8 & 65535;
    var $10 = HEAP32[5264116 >> 2];
    var $11 = _ftell($10);
    if ($7 << 16 >> 16 == 256) {
      label = 5;
      break;
    } else if ($7 << 16 >> 16 == 289) {
      label = 6;
      break;
    } else if ($7 << 16 >> 16 == 304) {
      label = 8;
      break;
    } else if ($7 << 16 >> 16 == 12272) {
      label = 9;
      break;
    } else if ($7 << 16 >> 16 == -16384) {
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    var $13 = _get2();
    HEAP16[5245036 >> 1] = $13;
    var $14 = _get2();
    HEAP16[5245028 >> 1] = $14;
    label = 13;
    break;
   case 6:
    var $16 = _get2();
    HEAP16[5398712 >> 1] = $16;
    var $17 = _get2();
    HEAP16[5242964 >> 1] = $17;
    var $18 = $17 << 16 >> 16 == 4284;
    if ($18) {
      label = 7;
      break;
    } else {
      label = 13;
      break;
    }
   case 7:
    HEAP16[5242964 >> 1] = 4287;
    label = 13;
    break;
   case 8:
    var $21 = HEAP32[5264116 >> 2];
    var $22 = _fgetc($21);
    var $23 = $22 >> 7;
    HEAP32[5398904 >> 2] = $23;
    var $24 = HEAP32[5264116 >> 2];
    var $25 = _fgetc($24);
    var $26 = $25 >>> 3;
    var $_lobit = $26 & 1;
    var $27 = $_lobit ^ 1;
    var $28 = $27 & 65535;
    HEAP16[5398900 >> 1] = $28;
    label = 13;
    break;
   case 9:
    var $29 = _get2();
    var $30 = $29 & 65535;
    HEAPF32[5561128 >> 2] = $30;
    var $31 = _get2();
    var $32 = $31 & 65535;
    HEAPF32[5561124 >> 2] = $32;
    var $33 = _get2();
    var $34 = $33 & 65535;
    HEAPF32[5561136 >> 2] = $34;
    var $35 = _get2();
    var $36 = $35 & 65535;
    HEAPF32[5561132 >> 2] = $36;
    label = 13;
    break;
   case 10:
    var $38 = HEAP16[5262944 >> 1];
    HEAP16[5262944 >> 1] = 18761;
    var $39 = _get4();
    var $40 = $39 & 65535;
    HEAP16[5242964 >> 1] = $40;
    var $41 = $39 & 65535;
    var $42 = $41 >>> 0 > 1e4;
    if ($42) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $44 = _get4();
    var $45 = $44 & 65535;
    HEAP16[5242964 >> 1] = $45;
    label = 12;
    break;
   case 12:
    var $47 = _get4();
    var $48 = $47 & 65535;
    HEAP16[5398712 >> 1] = $48;
    HEAP16[5262944 >> 1] = $38;
    label = 13;
    break;
   case 13:
    var $50 = HEAP32[5264116 >> 2];
    var $51 = $11 + $9 | 0;
    var $52 = _fseek($50, $51, 0);
    var $53 = ($6 | 0) == 0;
    if ($53) {
      label = 14;
      break;
    } else {
      var $_in = $6;
      label = 4;
      break;
    }
   case 14:
    var $54 = HEAP32[5398904 >> 2];
    var $55 = HEAP16[5398712 >> 1];
    var $56 = $55 & 65535;
    var $57 = $56 << $54;
    var $58 = $57 & 65535;
    HEAP16[5398712 >> 1] = $58;
    var $59 = HEAP16[5242964 >> 1];
    var $60 = $59 & 65535;
    var $61 = $60 >>> ($54 >>> 0);
    var $62 = $61 & 65535;
    HEAP16[5242964 >> 1] = $62;
    label = 15;
    break;
   case 15:
    return;
  }
}
_parse_fuji["X"] = 1;
function _parse_jpeg() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 0, 0);
    var $3 = HEAP32[5264116 >> 2];
    var $4 = _fgetc($3);
    var $5 = ($4 | 0) == 255;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 13;
      break;
    }
   case 3:
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _fgetc($7);
    var $9 = ($8 | 0) == 216;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 13;
      break;
    }
   case 4:
    var $10 = HEAP32[5264116 >> 2];
    var $11 = _fgetc($10);
    var $12 = ($11 | 0) == 255;
    if ($12) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fgetc($13);
    var $15 = ($14 | 0) == 218;
    if ($15) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    HEAP16[5262944 >> 1] = 19789;
    var $17 = _get2();
    var $18 = $17 & 65535;
    var $19 = $18 - 2 | 0;
    var $20 = HEAP32[5264116 >> 2];
    var $21 = _ftell($20);
    if (($14 | 0) == 195 | ($14 | 0) == 192) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $23 = HEAP32[5264116 >> 2];
    var $24 = _fgetc($23);
    var $25 = _get2();
    HEAP16[5245036 >> 1] = $25;
    var $26 = _get2();
    HEAP16[5245028 >> 1] = $26;
    label = 8;
    break;
   case 8:
    var $28 = _get2();
    HEAP16[5262944 >> 1] = $28;
    var $29 = _get4();
    var $30 = _get4();
    var $31 = ($30 | 0) == 1212498256;
    if ($31) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $33 = $29 + $21 | 0;
    var $34 = $19 - $29 | 0;
    _parse_ciff($33, $34);
    label = 10;
    break;
   case 10:
    var $36 = $21 + 6 | 0;
    var $37 = _parse_tiff($36);
    var $38 = ($37 | 0) == 0;
    if ($38) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _apply_tiff();
    label = 12;
    break;
   case 12:
    var $41 = HEAP32[5264116 >> 2];
    var $42 = $21 + $19 | 0;
    var $43 = _fseek($41, $42, 0);
    var $44 = HEAP32[5264116 >> 2];
    var $45 = _fgetc($44);
    var $46 = ($45 | 0) == 255;
    if ($46) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    return;
  }
}
_parse_jpeg["X"] = 1;
function _parse_riff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 176 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $date = __stackBase__ + 4;
    var $month = __stackBase__ + 68;
    var $t = __stackBase__ + 132;
    HEAP16[5262944 >> 1] = 18761;
    var $1 = $tag | 0;
    var $2 = HEAP32[5264116 >> 2];
    var $3 = _fread($1, 4, 1, $2);
    var $4 = _get4();
    var $5 = HEAP32[5264116 >> 2];
    var $6 = _ftell($5);
    var $7 = $6 + $4 | 0;
    var $8 = _memcmp($1, 5586136, 4);
    var $9 = ($8 | 0) == 0;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $11 = _memcmp($1, 5586128, 4);
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $14 = _get4();
    var $15 = HEAP32[5264116 >> 2];
    var $16 = _ftell($15);
    var $17 = $16 + 7 | 0;
    var $18 = $17 >>> 0 < $7 >>> 0;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    _parse_riff();
    var $19 = HEAP32[5264116 >> 2];
    var $20 = _ftell($19);
    var $21 = $20 + 7 | 0;
    var $22 = $21 >>> 0 < $7 >>> 0;
    if ($22) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 6:
    var $24 = _memcmp($1, 5586120, 4);
    var $25 = ($24 | 0) == 0;
    if ($25) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $26 = HEAP32[5264116 >> 2];
    var $27 = _ftell($26);
    var $28 = $27 + 7 | 0;
    var $29 = $28 >>> 0 < $7 >>> 0;
    if ($29) {
      label = 8;
      break;
    } else {
      label = 19;
      break;
    }
   case 8:
    var $30 = _get2();
    var $31 = $30 & 65535;
    var $32 = _get2();
    var $33 = $31 + 1 | 0;
    var $_mask = $33 & 131070;
    var $34 = ($_mask | 0) == 20;
    var $35 = $32 << 16 >> 16 == 20;
    var $or_cond = $34 & $35;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _get_timestamp(0);
    label = 11;
    break;
   case 10:
    var $38 = $32 & 65535;
    var $39 = HEAP32[5264116 >> 2];
    var $40 = _fseek($39, $38, 1);
    label = 11;
    break;
   case 11:
    var $41 = HEAP32[5264116 >> 2];
    var $42 = _ftell($41);
    var $43 = $42 + 7 | 0;
    var $44 = $43 >>> 0 < $7 >>> 0;
    if ($44) {
      label = 8;
      break;
    } else {
      label = 19;
      break;
    }
   case 12:
    var $46 = _memcmp($1, 5586112, 4);
    var $47 = ($46 | 0) == 0;
    var $48 = $4 >>> 0 < 64;
    var $or_cond11 = $47 & $48;
    if ($or_cond11) {
      label = 13;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    var $50 = $date | 0;
    var $51 = HEAP32[5264116 >> 2];
    var $52 = _fread($50, 64, 1, $51);
    var $53 = $date + $4 | 0;
    HEAP8[$53] = 0;
    var $54 = $t;
    for (var $$dest = $54 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $55 = $month | 0;
    var $56 = $t + 12 | 0;
    var $57 = $t + 8 | 0;
    var $58 = $t + 4 | 0;
    var $59 = $t | 0;
    var $60 = $t + 20 | 0;
    var $61 = _sscanf($50, 5586088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $55, HEAP32[tempInt + 4 >> 2] = $56, HEAP32[tempInt + 8 >> 2] = $57, HEAP32[tempInt + 12 >> 2] = $58, HEAP32[tempInt + 16 >> 2] = $59, HEAP32[tempInt + 20 >> 2] = $60, tempInt));
    var $62 = ($61 | 0) == 6;
    if ($62) {
      var $i_0 = 0;
      label = 14;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $i_0;
    var $63 = $i_0 >>> 0 < 12;
    if ($63) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $65 = 5245800 + ($i_0 << 2) | 0;
    var $66 = _strcasecmp($65, $55);
    var $67 = ($66 | 0) == 0;
    var $68 = $i_0 + 1 | 0;
    if ($67) {
      label = 16;
      break;
    } else {
      var $i_0 = $68;
      label = 14;
      break;
    }
   case 16:
    var $69 = $t + 16 | 0;
    HEAP32[$69 >> 2] = $i_0;
    var $70 = HEAP32[$60 >> 2];
    var $71 = $70 - 1900 | 0;
    HEAP32[$60 >> 2] = $71;
    var $72 = _mktime($t);
    var $73 = ($72 | 0) > 0;
    if ($73) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $75 = _mktime($t);
    HEAP32[5243568 >> 2] = $75;
    label = 19;
    break;
   case 18:
    var $77 = HEAP32[5264116 >> 2];
    var $78 = _fseek($77, $4, 1);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_riff["X"] = 1;
function _parse_smal($fsize) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 2, 0);
    HEAP16[5262944 >> 1] = 18761;
    var $3 = HEAP32[5264116 >> 2];
    var $4 = _fgetc($3);
    var $5 = ($4 | 0) == 6;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _fseek($7, 5, 1);
    label = 4;
    break;
   case 4:
    var $10 = _get4();
    var $11 = ($10 | 0) == ($fsize | 0);
    if ($11) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $13 = ($4 | 0) > 6;
    if ($13) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $15 = _get4();
    HEAP32[5428492 >> 2] = $15;
    label = 7;
    break;
   case 7:
    var $17 = _get2();
    HEAP16[5398712 >> 1] = $17;
    HEAP16[5245036 >> 1] = $17;
    var $18 = _get2();
    HEAP16[5242964 >> 1] = $18;
    HEAP16[5245028 >> 1] = $18;
    HEAP8[5263628] = HEAP8[5586080];
    HEAP8[5263629] = HEAP8[5586081];
    HEAP8[5263630] = HEAP8[5586082];
    HEAP8[5263631] = HEAP8[5586083];
    HEAP8[5263632] = HEAP8[5586084];
    var $19 = $18 & 65535;
    var $20 = HEAP16[5398712 >> 1];
    var $21 = $20 & 65535;
    var $22 = _sprintf(5263372, 5586068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $4, HEAP32[tempInt + 4 >> 2] = $19, HEAP32[tempInt + 8 >> 2] = $21, tempInt));
    if ($5) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[5263692 >> 2] = 74;
    label = 11;
    break;
   case 9:
    var $24 = ($4 | 0) == 9;
    if ($24) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[5263692 >> 2] = 12;
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_cine() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[5262944 >> 1] = 18761;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 4, 0);
    var $3 = _get2();
    var $4 = $3 << 16 >> 16 == 2;
    var $5 = $4 & 1;
    HEAP32[5264100 >> 2] = $5;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fseek($6, 14, 1);
    var $8 = _get4();
    var $9 = HEAP32[5264100 >> 2];
    var $10 = $9 * $8 & -1;
    HEAP32[5264100 >> 2] = $10;
    var $11 = _get4();
    var $12 = _get4();
    var $13 = _get4();
    var $14 = _get4();
    HEAP32[5243568 >> 2] = $14;
    var $15 = _get4();
    var $16 = ($15 | 0) == 0;
    if ($16) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP32[5243568 >> 2] = $15;
    label = 4;
    break;
   case 4:
    var $19 = HEAP32[5264116 >> 2];
    var $20 = $11 + 4 | 0;
    var $21 = _fseek($19, $20, 0);
    var $22 = _get4();
    var $23 = $22 & 65535;
    HEAP16[5245028 >> 1] = $23;
    var $24 = _get4();
    var $25 = $24 & 65535;
    HEAP16[5245036 >> 1] = $25;
    var $26 = _get2();
    var $27 = _get2();
    var $28 = $27 & 65535;
    if (($28 | 0) == 8) {
      label = 5;
      break;
    } else if (($28 | 0) == 16) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    HEAP32[5263692 >> 2] = 82;
    label = 7;
    break;
   case 6:
    HEAP32[5263692 >> 2] = 4;
    label = 7;
    break;
   case 7:
    var $32 = HEAP32[5264116 >> 2];
    var $33 = $12 + 792 | 0;
    var $34 = _fseek($32, $33, 0);
    HEAP8[5263628] = HEAP8[5586060];
    HEAP8[5263629] = HEAP8[5586061];
    HEAP8[5263630] = HEAP8[5586062];
    HEAP8[5263631] = HEAP8[5586063];
    HEAP8[5263632] = HEAP8[5586064];
    var $35 = _get4();
    var $36 = _sprintf(5263372, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $35, tempInt));
    var $37 = HEAP32[5264116 >> 2];
    var $38 = _fseek($37, 12, 1);
    var $39 = _get4();
    var $40 = $39 & 16777215;
    if (($40 | 0) == 3) {
      label = 8;
      break;
    } else if (($40 | 0) == 4) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    HEAP32[5427632 >> 2] = -1802201964;
    label = 11;
    break;
   case 9:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 11;
    break;
   case 10:
    HEAP32[5264100 >> 2] = 0;
    label = 11;
    break;
   case 11:
    var $45 = HEAP32[5264116 >> 2];
    var $46 = _fseek($45, 72, 1);
    var $47 = _get4();
    var $48 = $47 + 3600 | 0;
    var $49 = ($48 >>> 0) % 360;
    if (($49 | 0) == 270) {
      label = 12;
      break;
    } else if (($49 | 0) == 180) {
      label = 13;
      break;
    } else if (($49 | 0) == 90) {
      label = 14;
      break;
    } else if (($49 | 0) == 0) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 12:
    HEAP32[5403048 >> 2] = 4;
    label = 16;
    break;
   case 13:
    HEAP32[5403048 >> 2] = 1;
    label = 16;
    break;
   case 14:
    HEAP32[5403048 >> 2] = 7;
    label = 16;
    break;
   case 15:
    HEAP32[5403048 >> 2] = 2;
    label = 16;
    break;
   case 16:
    var $55 = _getreal(11);
    var $56 = $55;
    HEAPF32[5561124 >> 2] = $56;
    var $57 = _getreal(11);
    var $58 = $57;
    HEAPF32[5561132 >> 2] = $58;
    var $59 = _get4();
    var $60 = -1 << $59;
    var $61 = $60 ^ -1;
    HEAP32[5263496 >> 2] = $61;
    var $62 = HEAP32[5264116 >> 2];
    var $63 = _fseek($62, 668, 1);
    var $64 = _get4();
    var $65 = $64 >>> 0;
    var $66 = $65 / 1e9;
    var $67 = $66;
    HEAPF32[5244912 >> 2] = $67;
    var $68 = HEAP32[5264116 >> 2];
    var $69 = _fseek($68, $13, 0);
    var $70 = HEAP32[5244920 >> 2];
    var $71 = HEAP32[5264100 >> 2];
    var $72 = $70 >>> 0 < $71 >>> 0;
    if ($72) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $74 = HEAP32[5264116 >> 2];
    var $75 = $70 << 3;
    var $76 = _fseek($74, $75, 1);
    label = 18;
    break;
   case 18:
    var $78 = _get4();
    var $79 = $78 + 8 | 0;
    HEAP32[5428492 >> 2] = $79;
    var $80 = _get4();
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_cine["X"] = 1;
function _parse_redcine() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5264100 >> 2] = 0;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 52, 0);
    var $3 = _get4();
    var $4 = $3 & 65535;
    HEAP16[5242964 >> 1] = $4;
    var $5 = _get4();
    var $6 = $5 & 65535;
    HEAP16[5398712 >> 1] = $6;
    var $7 = HEAP32[5264116 >> 2];
    var $8 = _fseek($7, 0, 2);
    var $9 = HEAP32[5264116 >> 2];
    var $10 = _ftell($9);
    var $11 = $10 & 511;
    var $12 = -$11 | 0;
    var $13 = _fseek($9, $12, 1);
    var $14 = _get4();
    var $15 = ($14 | 0) == ($11 | 0);
    if ($15) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $17 = _get4();
    var $18 = ($17 | 0) == 1380273986;
    if ($18) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $20 = HEAP32[_stderr >> 2];
    var $21 = HEAP32[5264120 >> 2];
    var $22 = _fprintf($20, 5585992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $21, tempInt));
    var $23 = HEAP32[5264116 >> 2];
    var $24 = _fseek($23, 0, 0);
    var $25 = _get4();
    var $26 = ($25 | 0) == -1;
    if ($26) {
      label = 10;
      break;
    } else {
      var $27 = $25;
      label = 5;
      break;
    }
   case 5:
    var $27;
    var $28 = _get4();
    var $29 = ($28 | 0) == 1380271190;
    if ($29) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $31 = HEAP32[5264100 >> 2];
    var $32 = $31 + 1 | 0;
    HEAP32[5264100 >> 2] = $32;
    var $33 = HEAP32[5244920 >> 2];
    var $34 = ($31 | 0) == ($33 | 0);
    if ($34) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $36 = HEAP32[5264116 >> 2];
    var $37 = _ftell($36);
    var $38 = $37 - 8 | 0;
    HEAP32[5428492 >> 2] = $38;
    label = 8;
    break;
   case 8:
    var $40 = HEAP32[5264116 >> 2];
    var $41 = $27 - 8 | 0;
    var $42 = _fseek($40, $41, 1);
    var $43 = _get4();
    var $44 = ($43 | 0) == -1;
    if ($44) {
      label = 10;
      break;
    } else {
      var $27 = $43;
      label = 5;
      break;
    }
   case 9:
    var $46 = _get4();
    var $47 = HEAP32[5264116 >> 2];
    var $48 = _fseek($47, 12, 1);
    var $49 = _get4();
    HEAP32[5264100 >> 2] = $49;
    var $50 = HEAP32[5264116 >> 2];
    var $51 = $46 + 8 | 0;
    var $52 = HEAP32[5244920 >> 2];
    var $53 = $52 << 2;
    var $54 = $51 + $53 | 0;
    var $55 = _fseek($50, $54, 0);
    var $56 = _get4();
    HEAP32[5428492 >> 2] = $56;
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_redcine["X"] = 1;
function _foveon_gets($offset, $str) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, $offset, 0);
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $4 = ($i_0 | 0) < 63;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = $str + $i_0 | 0;
    var $_pre_phi = $_pre;
    label = 6;
    break;
   case 5:
    var $6 = _get2();
    var $7 = $6 & 255;
    var $8 = $str + $i_0 | 0;
    HEAP8[$8] = $7;
    var $9 = $7 << 24 >> 24 == 0;
    var $10 = $i_0 + 1 | 0;
    if ($9) {
      var $_pre_phi = $8;
      label = 6;
      break;
    } else {
      var $i_0 = $10;
      label = 3;
      break;
    }
   case 6:
    var $_pre_phi;
    HEAP8[$_pre_phi] = 0;
    return;
  }
}
function _parse_foveon() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2176 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $poff = __stackBase__;
    var $name = __stackBase__ + 2048;
    var $value = __stackBase__ + 2112;
    HEAP16[5262944 >> 1] = 18761;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fseek($1, 36, 0);
    var $3 = _get4();
    HEAP32[5403048 >> 2] = $3;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fseek($4, -4, 2);
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _get4();
    var $8 = _fseek($6, $7, 0);
    var $9 = _get4();
    var $10 = ($9 | 0) == 1682130259;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 46;
      break;
    }
   case 3:
    var $12 = _get4();
    var $13 = _get4();
    var $14 = ($13 | 0) == 0;
    if ($14) {
      label = 45;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $15 = $name | 0;
    var $16 = $value | 0;
    var $img_031 = 0;
    var $_in = $13;
    label = 5;
    break;
   case 5:
    var $_in;
    var $img_031;
    var $18 = $_in - 1 | 0;
    var $19 = _get4();
    var $20 = _get4();
    var $21 = _get4();
    var $22 = HEAP32[5264116 >> 2];
    var $23 = _ftell($22);
    var $24 = HEAP32[5264116 >> 2];
    var $25 = _fseek($24, $19, 0);
    var $26 = _get4();
    var $27 = $21 << 24;
    var $28 = $27 | 541279571;
    var $29 = ($26 | 0) == ($28 | 0);
    if ($29) {
      label = 6;
      break;
    } else {
      label = 46;
      break;
    }
   case 6:
    if (($21 | 0) == 1195461961 | ($21 | 0) == 843140425) {
      label = 7;
      break;
    } else if (($21 | 0) == 1179468099) {
      label = 21;
      break;
    } else if (($21 | 0) == 1347375696) {
      label = 22;
      break;
    } else {
      var $img_1 = $img_031;
      label = 44;
      break;
    }
   case 7:
    var $32 = HEAP32[5264116 >> 2];
    var $33 = _fseek($32, 8, 1);
    var $34 = _get4();
    var $35 = _get4();
    var $36 = _get4();
    var $37 = HEAP16[5245028 >> 1];
    var $38 = $37 & 65535;
    var $39 = ($35 | 0) > ($38 | 0);
    if ($39) {
      label = 8;
      break;
    } else {
      label = 15;
      break;
    }
   case 8:
    var $41 = HEAP16[5245036 >> 1];
    var $42 = $41 & 65535;
    var $43 = ($36 | 0) > ($42 | 0);
    if ($43) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    if (($34 | 0) == 5) {
      label = 10;
      break;
    } else if (($34 | 0) == 6) {
      label = 11;
      break;
    } else if (($34 | 0) == 30) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    HEAP32[5263696 >> 2] = 1;
    label = 11;
    break;
   case 11:
    HEAP32[5263692 >> 2] = 6;
    label = 14;
    break;
   case 12:
    HEAP32[5263692 >> 2] = 92;
    label = 14;
    break;
   case 13:
    HEAP32[5263692 >> 2] = 0;
    label = 14;
    break;
   case 14:
    var $50 = $35 & 65535;
    HEAP16[5245028 >> 1] = $50;
    var $51 = $36 & 65535;
    HEAP16[5245036 >> 1] = $51;
    var $52 = $19 + 28 | 0;
    HEAP32[5428492 >> 2] = $52;
    label = 15;
    break;
   case 15:
    var $54 = HEAP32[5264116 >> 2];
    var $55 = $19 + 28 | 0;
    var $56 = _fseek($54, $55, 0);
    var $57 = HEAP32[5264116 >> 2];
    var $58 = _fgetc($57);
    var $59 = ($58 | 0) == 255;
    if ($59) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $61 = HEAP32[5264116 >> 2];
    var $62 = _fgetc($61);
    var $63 = ($62 | 0) == 216;
    if ($63) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $65 = HEAP32[5244056 >> 2];
    var $66 = $20 - 28 | 0;
    var $67 = $65 >>> 0 < $66 >>> 0;
    if ($67) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAP32[5244044 >> 2] = $55;
    HEAP32[5244056 >> 2] = $66;
    HEAP32[5242960 >> 2] = 60;
    label = 19;
    break;
   case 19:
    var $69 = $img_031 + 1 | 0;
    var $70 = ($69 | 0) != 2;
    var $71 = HEAP32[5244056 >> 2];
    var $72 = ($71 | 0) != 0;
    var $or_cond = $70 | $72;
    if ($or_cond) {
      var $img_1 = $69;
      label = 44;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $74 = $19 + 24 | 0;
    HEAP32[5244044 >> 2] = $74;
    var $75 = $35 & 65535;
    HEAP16[5244040 >> 1] = $75;
    var $76 = $36 & 65535;
    HEAP16[5244060 >> 1] = $76;
    HEAP32[5242960 >> 2] = 48;
    var $img_1 = 2;
    label = 44;
    break;
   case 21:
    var $78 = $19 + 8 | 0;
    HEAP32[5263440 >> 2] = $78;
    var $79 = $20 - 28 | 0;
    HEAP32[5263444 >> 2] = $79;
    var $img_1 = $img_031;
    label = 44;
    break;
   case 22:
    var $81 = _get4();
    var $82 = _get4();
    var $83 = HEAP32[5264116 >> 2];
    var $84 = _fseek($83, 12, 1);
    var $85 = $82 >>> 0 > 256;
    var $_ = $85 ? 256 : $82;
    var $86 = $_ << 1;
    var $87 = ($86 | 0) > 0;
    if ($87) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $88 = $82 << 3;
    var $89 = $19 + 24 | 0;
    var $90 = $89 + $88 | 0;
    var $91 = $82 >>> 0 < 256;
    var $92 = $82 << 1;
    var $_op = $92 ^ -2;
    var $_op_op = -2 - $_op | 0;
    var $93 = $91 ? $_op_op : 512;
    var $i_026 = 0;
    label = 24;
    break;
   case 24:
    var $i_026;
    var $95 = _get4();
    var $96 = $95 << 1;
    var $97 = $90 + $96 | 0;
    var $98 = $poff + ($i_026 << 2) | 0;
    HEAP32[$98 >> 2] = $97;
    var $99 = $i_026 + 1 | 0;
    var $exitcond = ($99 | 0) == ($93 | 0);
    if ($exitcond) {
      label = 25;
      break;
    } else {
      var $i_026 = $99;
      label = 24;
      break;
    }
   case 25:
    var $100 = ($_ | 0) > 0;
    if ($100) {
      label = 26;
      break;
    } else {
      var $img_1 = $img_031;
      label = 44;
      break;
    }
   case 26:
    var $101 = $82 >>> 0 < 256;
    var $102 = $101 ? $82 : 256;
    var $i_128 = 0;
    label = 27;
    break;
   case 27:
    var $i_128;
    var $104 = $poff + ($i_128 << 3) | 0;
    var $105 = HEAP32[$104 >> 2];
    _foveon_gets($105, $15);
    var $106 = $poff + ($i_128 << 3) + 4 | 0;
    var $107 = HEAP32[$106 >> 2];
    _foveon_gets($107, $16);
    var $108 = _strcmp($15, 5585988);
    var $109 = ($108 | 0) == 0;
    if ($109) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $111 = _atoi($16);
    var $112 = $111 | 0;
    HEAPF32[5264096 >> 2] = $112;
    label = 29;
    break;
   case 29:
    var $114 = _strcmp($15, 5585976);
    var $115 = ($114 | 0) == 0;
    if ($115) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $117 = _strcpy(5263628, $16);
    label = 31;
    break;
   case 31:
    var $119 = _strcmp($15, 5585964);
    var $120 = ($119 | 0) == 0;
    if ($120) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $122 = _strcpy(5263372, $16);
    label = 33;
    break;
   case 33:
    var $124 = _strcmp($15, 5585956);
    var $125 = ($124 | 0) == 0;
    if ($125) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $127 = _strcpy(5263308, $16);
    label = 35;
    break;
   case 35:
    var $129 = _strcmp($15, 5585948);
    var $130 = ($129 | 0) == 0;
    if ($130) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    var $132 = _atoi($16);
    HEAP32[5243568 >> 2] = $132;
    label = 37;
    break;
   case 37:
    var $134 = _strcmp($15, 5585940);
    var $135 = ($134 | 0) == 0;
    if ($135) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $137 = _atoi($16);
    var $138 = $137 | 0;
    var $139 = $138 / 1e6;
    var $140 = $139;
    HEAPF32[5244912 >> 2] = $140;
    label = 39;
    break;
   case 39:
    var $142 = _strcmp($15, 5585928);
    var $143 = ($142 | 0) == 0;
    if ($143) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $145 = _atof($16);
    var $146 = $145;
    HEAPF32[5561468 >> 2] = $146;
    label = 41;
    break;
   case 41:
    var $148 = _strcmp($15, 5585920);
    var $149 = ($148 | 0) == 0;
    if ($149) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    var $151 = _atof($16);
    var $152 = $151;
    HEAPF32[5403044 >> 2] = $152;
    label = 43;
    break;
   case 43:
    var $154 = $i_128 + 1 | 0;
    var $exitcond34 = ($154 | 0) == ($102 | 0);
    if ($exitcond34) {
      var $img_1 = $img_031;
      label = 44;
      break;
    } else {
      var $i_128 = $154;
      label = 27;
      break;
    }
   case 44:
    var $img_1;
    var $155 = HEAP32[5264116 >> 2];
    var $156 = _fseek($155, $23, 0);
    var $157 = ($18 | 0) == 0;
    if ($157) {
      label = 45;
      break;
    } else {
      var $img_031 = $img_1;
      var $_in = $18;
      label = 5;
      break;
    }
   case 45:
    HEAP8[5264104] = 1;
    label = 46;
    break;
   case 46:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_foveon["X"] = 1;
function _adobe_coeff($make, $model) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 228 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam_xyz = __stackBase__;
    var $name = __stackBase__ + 96;
    var $1 = $name | 0;
    var $2 = _sprintf($1, 5579180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $make, HEAP32[tempInt + 4 >> 2] = $model, tempInt));
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $4 = $i_0 >>> 0 < 368;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    var $6 = 5561472 + ($i_0 << 5) | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = _strlen($7);
    var $9 = _strncmp($1, $7, $8);
    var $10 = ($9 | 0) == 0;
    var $11 = $i_0 + 1 | 0;
    if ($10) {
      label = 5;
      break;
    } else {
      var $i_0 = $11;
      label = 3;
      break;
    }
   case 5:
    var $13 = 5561476 + ($i_0 << 5) | 0;
    var $14 = HEAP16[$13 >> 1];
    var $15 = $14 << 16 >> 16 == 0;
    if ($15) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $17 = $14 & 65535;
    HEAP32[5561400 >> 2] = $17;
    label = 7;
    break;
   case 7:
    var $19 = 5561478 + ($i_0 << 5) | 0;
    var $20 = HEAP16[$19 >> 1];
    var $21 = $20 << 16 >> 16 == 0;
    if ($21) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $23 = $20 & 65535;
    HEAP32[5263496 >> 2] = $23;
    label = 9;
    break;
   case 9:
    var $25 = ($i_0 | 0) == 39;
    if ($25) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $26 = 5561480 + ($i_0 << 5) | 0;
    var $27 = HEAP16[$26 >> 1];
    var $28 = $27 << 16 >> 16;
    var $29 = $28 / 1e4;
    var $30 = $cam_xyz | 0;
    HEAPF64[tempDoublePtr >> 3] = $29, HEAP32[$30 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$30 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $31 = 5561482 + ($i_0 << 5) | 0;
    var $32 = HEAP16[$31 >> 1];
    var $33 = $32 << 16 >> 16;
    var $34 = $33 / 1e4;
    var $35 = $cam_xyz + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $34, HEAP32[$35 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$35 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $36 = 5561484 + ($i_0 << 5) | 0;
    var $37 = HEAP16[$36 >> 1];
    var $38 = $37 << 16 >> 16;
    var $39 = $38 / 1e4;
    var $40 = $cam_xyz + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $39, HEAP32[$40 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$40 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $41 = 5561486 + ($i_0 << 5) | 0;
    var $42 = HEAP16[$41 >> 1];
    var $43 = $42 << 16 >> 16;
    var $44 = $43 / 1e4;
    var $45 = $cam_xyz + 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = $44, HEAP32[$45 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$45 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $46 = 5561488 + ($i_0 << 5) | 0;
    var $47 = HEAP16[$46 >> 1];
    var $48 = $47 << 16 >> 16;
    var $49 = $48 / 1e4;
    var $50 = $cam_xyz + 32 | 0;
    HEAPF64[tempDoublePtr >> 3] = $49, HEAP32[$50 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$50 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $51 = 5561490 + ($i_0 << 5) | 0;
    var $52 = HEAP16[$51 >> 1];
    var $53 = $52 << 16 >> 16;
    var $54 = $53 / 1e4;
    var $55 = $cam_xyz + 40 | 0;
    HEAPF64[tempDoublePtr >> 3] = $54, HEAP32[$55 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$55 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $56 = 5561492 + ($i_0 << 5) | 0;
    var $57 = HEAP16[$56 >> 1];
    var $58 = $57 << 16 >> 16;
    var $59 = $58 / 1e4;
    var $60 = $cam_xyz + 48 | 0;
    HEAPF64[tempDoublePtr >> 3] = $59, HEAP32[$60 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$60 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $61 = 5561494 + ($i_0 << 5) | 0;
    var $62 = HEAP16[$61 >> 1];
    var $63 = $62 << 16 >> 16;
    var $64 = $63 / 1e4;
    var $65 = $cam_xyz + 56 | 0;
    HEAPF64[tempDoublePtr >> 3] = $64, HEAP32[$65 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$65 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $66 = 5561496 + ($i_0 << 5) | 0;
    var $67 = HEAP16[$66 >> 1];
    var $68 = $67 << 16 >> 16;
    var $69 = $68 / 1e4;
    var $70 = $cam_xyz + 64 | 0;
    HEAPF64[tempDoublePtr >> 3] = $69, HEAP32[$70 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$70 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $71 = 5561498 + ($i_0 << 5) | 0;
    var $72 = HEAP16[$71 >> 1];
    var $73 = $72 << 16 >> 16;
    var $74 = $73 / 1e4;
    var $75 = $cam_xyz + 72 | 0;
    HEAPF64[tempDoublePtr >> 3] = $74, HEAP32[$75 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$75 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $76 = 5561500 + ($i_0 << 5) | 0;
    var $77 = HEAP16[$76 >> 1];
    var $78 = $77 << 16 >> 16;
    var $79 = $78 / 1e4;
    var $80 = $cam_xyz + 80 | 0;
    HEAPF64[tempDoublePtr >> 3] = $79, HEAP32[$80 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$80 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $81 = 5561502 + ($i_0 << 5) | 0;
    var $82 = HEAP16[$81 >> 1];
    var $83 = $82 << 16 >> 16;
    var $84 = $83 / 1e4;
    var $85 = $cam_xyz + 88 | 0;
    HEAPF64[tempDoublePtr >> 3] = $84, HEAP32[$85 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$85 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $86 = $cam_xyz | 0;
    _cam_xyz_coeff($86);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
_adobe_coeff["X"] = 1;
function _simple_coeff($index) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[5245040 >> 2] = 0;
    var $0 = HEAP32[5560840 >> 2];
    var $1 = ($0 | 0) > 0;
    var $2 = $0 << 2;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $scevgep10 = 5244720 + $index * 48 | 0;
    var $scevgep1011 = $scevgep10;
    _memcpy(5244964, $scevgep1011, $2);
    var $scevgep10_1 = 5244720 + $index * 48 + ($0 << 2) | 0;
    var $scevgep1011_1 = $scevgep10_1;
    _memcpy(5244980, $scevgep1011_1, $2);
    var $3 = $0 << 1;
    var $scevgep10_2 = 5244720 + $index * 48 + ($3 << 2) | 0;
    var $scevgep1011_2 = $scevgep10_2;
    _memcpy(5244996, $scevgep1011_2, $2);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _guess_byte_order() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $test = __stackBase__;
    var $0 = $test | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $2 = _fread($0, 2, 2, $1);
    var $t_015 = 2;
    var $4 = 65533;
    var $sum_sroa_0_0 = 0;
    var $sum_sroa_1_0 = 0;
    label = 3;
    break;
   case 3:
    var $sum_sroa_1_0;
    var $sum_sroa_0_0;
    var $4;
    var $t_015;
    var $5 = $test + ($t_015 << 1) | 0;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fread($5, 2, 1, $6);
    var $8 = $t_015 ^ 2;
    var $9 = $test + ($8 << 1) | 0;
    var $10 = HEAP8[$9];
    var $11 = $10 & 255;
    var $12 = $11 << 8;
    var $13 = $test + ($8 << 1) + 1 | 0;
    var $14 = HEAP8[$13];
    var $15 = $14 & 255;
    var $16 = $12 | $15;
    var $17 = HEAP8[$5];
    var $18 = $17 & 255;
    var $19 = $18 << 8;
    var $20 = $test + ($t_015 << 1) + 1 | 0;
    var $21 = HEAP8[$20];
    var $22 = $21 & 255;
    var $23 = $19 | $22;
    var $24 = $16 - $23 | 0;
    var $25 = $24 | 0;
    var $26 = $25 * $25;
    var $27 = $sum_sroa_0_0 + $26;
    var $28 = $15 << 8;
    var $29 = $28 | $11;
    var $30 = $22 << 8;
    var $31 = $30 | $18;
    var $32 = $29 - $31 | 0;
    var $33 = $32 | 0;
    var $34 = $33 * $33;
    var $35 = $sum_sroa_1_0 + $34;
    var $36 = $t_015 + 1 | 0;
    var $37 = $36 & 3;
    var $38 = $4 - 1 | 0;
    var $39 = ($4 | 0) == 0;
    if ($39) {
      label = 4;
      break;
    } else {
      var $t_015 = $37;
      var $4 = $38;
      var $sum_sroa_0_0 = $27;
      var $sum_sroa_1_0 = $35;
      label = 3;
      break;
    }
   case 4:
    var $40 = $27 < $35;
    var $41 = $40 ? 19789 : 18761;
    STACKTOP = __stackBase__;
    return $41;
  }
}
function _find_green($bps, $bite, $off0, $off1) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8272 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $img = __stackBase__;
    var $sum = __stackBase__ + 8256;
    var $1 = $sum;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = 0;
    var $2 = 64 - $bps | 0;
    var $3$0 = $2;
    var $4$0 = $bite;
    var $5 = ($bite | 0) > 0;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = _fseek($6, $off0, 0);
    var $8 = HEAP16[5242964 >> 1];
    var $9 = $8 << 16 >> 16 == 0;
    if ($9) {
      var $bitbuf_1_lcssa$1 = 0;
      var $bitbuf_1_lcssa$0 = 0;
      label = 10;
      break;
    } else {
      var $bitbuf_149$1 = 0;
      var $bitbuf_149$0 = 0;
      var $vbits_050 = 0;
      var $col_051 = 0;
      var $10 = $8;
      label = 4;
      break;
    }
   case 3:
    var $_phi_trans_insert = $img | 0;
    var $_pre = HEAP16[$_phi_trans_insert >> 1];
    var $_phi_trans_insert1 = $img + 4128 | 0;
    var $_pre2 = HEAP16[$_phi_trans_insert1 >> 1];
    var $c_136 = 0;
    var $39 = $_pre;
    var $38 = $_pre2;
    label = 11;
    break;
   case 4:
    var $10;
    var $col_051;
    var $vbits_050;
    var $bitbuf_149$0;
    var $bitbuf_149$1;
    var $11 = $vbits_050 - $bps | 0;
    var $12 = ($11 | 0) < 0;
    if ($12) {
      var $bitbuf_242$1 = $bitbuf_149$1;
      var $bitbuf_242$0 = $bitbuf_149$0;
      var $vbits_143 = $11;
      label = 5;
      break;
    } else {
      var $bitbuf_2_lcssa$1 = $bitbuf_149$1;
      var $bitbuf_2_lcssa$0 = $bitbuf_149$0;
      var $vbits_1_lcssa = $11;
      var $23 = $10;
      label = 9;
      break;
    }
   case 5:
    var $vbits_143;
    var $bitbuf_242$0;
    var $bitbuf_242$1;
    Runtime.bitshift64($bitbuf_242$0, $bitbuf_242$1, 0, $4$0);
    var $13$0 = HEAP32[tempDoublePtr >> 2], $13$1 = HEAP32[tempDoublePtr + 4 >> 2];
    if ($5) {
      var $bitbuf_337$1 = $13$1;
      var $bitbuf_337$0 = $13$0;
      var $i_038 = 0;
      label = 6;
      break;
    } else {
      var $bitbuf_3_lcssa$1 = $13$1;
      var $bitbuf_3_lcssa$0 = $13$0;
      label = 7;
      break;
    }
   case 6:
    var $i_038;
    var $bitbuf_337$0;
    var $bitbuf_337$1;
    var $14 = HEAP32[5264116 >> 2];
    var $15 = _fgetc($14);
    var $16 = $15 << $i_038;
    var $17$0 = $16;
    var $17$1 = 0;
    var $18$0 = $17$0 | $bitbuf_337$0;
    var $18$1 = $17$1 | $bitbuf_337$1;
    var $19 = $i_038 + 8 | 0;
    var $20 = ($19 | 0) < ($bite | 0);
    if ($20) {
      var $bitbuf_337$1 = $18$1;
      var $bitbuf_337$0 = $18$0;
      var $i_038 = $19;
      label = 6;
      break;
    } else {
      var $bitbuf_3_lcssa$1 = $18$1;
      var $bitbuf_3_lcssa$0 = $18$0;
      label = 7;
      break;
    }
   case 7:
    var $bitbuf_3_lcssa$0;
    var $bitbuf_3_lcssa$1;
    var $21 = $vbits_143 + $bite | 0;
    var $22 = ($21 | 0) < 0;
    if ($22) {
      var $bitbuf_242$1 = $bitbuf_3_lcssa$1;
      var $bitbuf_242$0 = $bitbuf_3_lcssa$0;
      var $vbits_143 = $21;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre8 = HEAP16[5242964 >> 1];
    var $bitbuf_2_lcssa$1 = $bitbuf_3_lcssa$1;
    var $bitbuf_2_lcssa$0 = $bitbuf_3_lcssa$0;
    var $vbits_1_lcssa = $21;
    var $23 = $_pre8;
    label = 9;
    break;
   case 9:
    var $23;
    var $vbits_1_lcssa;
    var $bitbuf_2_lcssa$0;
    var $bitbuf_2_lcssa$1;
    var $24 = $2 - $vbits_1_lcssa | 0;
    var $25$0 = $24;
    Runtime.bitshift64($bitbuf_2_lcssa$0, $bitbuf_2_lcssa$1, 0, $25$0);
    var $26$0 = HEAP32[tempDoublePtr >> 2], $26$1 = HEAP32[tempDoublePtr + 4 >> 2];
    Runtime.bitshift64($26$0, $26$1, 2, $3$0);
    var $27$0 = HEAP32[tempDoublePtr >> 2];
    var $28$0 = $27$0;
    var $28 = $28$0 & 65535;
    var $29 = $img + ($col_051 << 1) | 0;
    HEAP16[$29 >> 1] = $28;
    var $30 = $col_051 + 1 | 0;
    var $31 = $23 & 65535;
    var $32 = ($30 | 0) < ($31 | 0);
    if ($32) {
      var $bitbuf_149$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_149$0 = $bitbuf_2_lcssa$0;
      var $vbits_050 = $vbits_1_lcssa;
      var $col_051 = $30;
      var $10 = $23;
      label = 4;
      break;
    } else {
      var $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
      label = 10;
      break;
    }
   case 10:
    var $bitbuf_1_lcssa$0;
    var $bitbuf_1_lcssa$1;
    var $33 = HEAP32[5264116 >> 2];
    var $34 = _fseek($33, $off1, 0);
    var $35 = HEAP16[5242964 >> 1];
    var $36 = $35 << 16 >> 16 == 0;
    if ($36) {
      var $97 = 0;
      label = 20;
      break;
    } else {
      var $bitbuf_149_1$1 = $bitbuf_1_lcssa$1;
      var $bitbuf_149_1$0 = $bitbuf_1_lcssa$0;
      var $vbits_050_1 = 0;
      var $col_051_1 = 0;
      var $74 = $35;
      label = 14;
      break;
    }
   case 11:
    var $38;
    var $39;
    var $c_136;
    var $40 = $39 & 65535;
    var $41 = $c_136 + 1 | 0;
    var $42 = $img + 4128 + ($41 << 1) | 0;
    var $43 = HEAP16[$42 >> 1];
    var $44 = $43 & 65535;
    var $45 = $40 - $44 | 0;
    var $46 = $45 >> 31;
    var $47 = $46 ^ $45;
    var $48 = $47 - $46 | 0;
    var $49 = $48 | 0;
    var $50 = $c_136 & 1;
    var $51 = $sum + ($50 << 3) | 0;
    var $52 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$51 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$51 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $53 = $52 + $49;
    HEAPF64[tempDoublePtr >> 3] = $53, HEAP32[$51 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$51 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $54 = $38 & 65535;
    var $55 = $img + ($41 << 1) | 0;
    var $56 = HEAP16[$55 >> 1];
    var $57 = $56 & 65535;
    var $58 = $54 - $57 | 0;
    var $59 = $58 >> 31;
    var $60 = $59 ^ $58;
    var $61 = $60 - $59 | 0;
    var $62 = $61 | 0;
    var $63 = $50 ^ 1;
    var $64 = $sum + ($63 << 3) | 0;
    var $65 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$64 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$64 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $66 = $65 + $62;
    HEAPF64[tempDoublePtr >> 3] = $66, HEAP32[$64 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$64 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $67 = ($41 | 0) < ($99 | 0);
    if ($67) {
      var $c_136 = $41;
      var $39 = $56;
      var $38 = $43;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_phi_trans_insert3 = $sum | 0;
    var $_pre4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$_phi_trans_insert3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$_phi_trans_insert3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $_phi_trans_insert5 = $sum + 8 | 0;
    var $_pre6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$_phi_trans_insert5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$_phi_trans_insert5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $69 = $_pre4;
    var $68 = $_pre6;
    label = 13;
    break;
   case 13:
    var $68;
    var $69;
    var $70 = $69 / $68;
    var $71 = Math.log($70);
    var $72 = $71 * 100;
    var $73 = $72;
    STACKTOP = __stackBase__;
    return $73;
   case 14:
    var $74;
    var $col_051_1;
    var $vbits_050_1;
    var $bitbuf_149_1$0;
    var $bitbuf_149_1$1;
    var $75 = $vbits_050_1 - $bps | 0;
    var $76 = ($75 | 0) < 0;
    if ($76) {
      var $bitbuf_242_1$1 = $bitbuf_149_1$1;
      var $bitbuf_242_1$0 = $bitbuf_149_1$0;
      var $vbits_143_1 = $75;
      label = 15;
      break;
    } else {
      var $bitbuf_2_lcssa_1$1 = $bitbuf_149_1$1;
      var $bitbuf_2_lcssa_1$0 = $bitbuf_149_1$0;
      var $vbits_1_lcssa_1 = $75;
      var $87 = $74;
      label = 19;
      break;
    }
   case 15:
    var $vbits_143_1;
    var $bitbuf_242_1$0;
    var $bitbuf_242_1$1;
    Runtime.bitshift64($bitbuf_242_1$0, $bitbuf_242_1$1, 0, $4$0);
    var $77$0 = HEAP32[tempDoublePtr >> 2], $77$1 = HEAP32[tempDoublePtr + 4 >> 2];
    if ($5) {
      var $bitbuf_337_1$1 = $77$1;
      var $bitbuf_337_1$0 = $77$0;
      var $i_038_1 = 0;
      label = 16;
      break;
    } else {
      var $bitbuf_3_lcssa_1$1 = $77$1;
      var $bitbuf_3_lcssa_1$0 = $77$0;
      label = 17;
      break;
    }
   case 16:
    var $i_038_1;
    var $bitbuf_337_1$0;
    var $bitbuf_337_1$1;
    var $78 = HEAP32[5264116 >> 2];
    var $79 = _fgetc($78);
    var $80 = $79 << $i_038_1;
    var $81$0 = $80;
    var $81$1 = 0;
    var $82$0 = $81$0 | $bitbuf_337_1$0;
    var $82$1 = $81$1 | $bitbuf_337_1$1;
    var $83 = $i_038_1 + 8 | 0;
    var $84 = ($83 | 0) < ($bite | 0);
    if ($84) {
      var $bitbuf_337_1$1 = $82$1;
      var $bitbuf_337_1$0 = $82$0;
      var $i_038_1 = $83;
      label = 16;
      break;
    } else {
      var $bitbuf_3_lcssa_1$1 = $82$1;
      var $bitbuf_3_lcssa_1$0 = $82$0;
      label = 17;
      break;
    }
   case 17:
    var $bitbuf_3_lcssa_1$0;
    var $bitbuf_3_lcssa_1$1;
    var $85 = $vbits_143_1 + $bite | 0;
    var $86 = ($85 | 0) < 0;
    if ($86) {
      var $bitbuf_242_1$1 = $bitbuf_3_lcssa_1$1;
      var $bitbuf_242_1$0 = $bitbuf_3_lcssa_1$0;
      var $vbits_143_1 = $85;
      label = 15;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $_pre7 = HEAP16[5242964 >> 1];
    var $bitbuf_2_lcssa_1$1 = $bitbuf_3_lcssa_1$1;
    var $bitbuf_2_lcssa_1$0 = $bitbuf_3_lcssa_1$0;
    var $vbits_1_lcssa_1 = $85;
    var $87 = $_pre7;
    label = 19;
    break;
   case 19:
    var $87;
    var $vbits_1_lcssa_1;
    var $bitbuf_2_lcssa_1$0;
    var $bitbuf_2_lcssa_1$1;
    var $88 = $2 - $vbits_1_lcssa_1 | 0;
    var $89$0 = $88;
    Runtime.bitshift64($bitbuf_2_lcssa_1$0, $bitbuf_2_lcssa_1$1, 0, $89$0);
    var $90$0 = HEAP32[tempDoublePtr >> 2], $90$1 = HEAP32[tempDoublePtr + 4 >> 2];
    Runtime.bitshift64($90$0, $90$1, 2, $3$0);
    var $91$0 = HEAP32[tempDoublePtr >> 2];
    var $92$0 = $91$0;
    var $92 = $92$0 & 65535;
    var $93 = $img + 4128 + ($col_051_1 << 1) | 0;
    HEAP16[$93 >> 1] = $92;
    var $94 = $col_051_1 + 1 | 0;
    var $95 = $87 & 65535;
    var $96 = ($94 | 0) < ($95 | 0);
    if ($96) {
      var $bitbuf_149_1$1 = $bitbuf_2_lcssa_1$1;
      var $bitbuf_149_1$0 = $bitbuf_2_lcssa_1$0;
      var $vbits_050_1 = $vbits_1_lcssa_1;
      var $col_051_1 = $94;
      var $74 = $87;
      label = 14;
      break;
    } else {
      var $97 = $87;
      label = 20;
      break;
    }
   case 20:
    var $97;
    var $98 = $97 & 65535;
    var $99 = $98 - 1 | 0;
    var $100 = ($99 | 0) > 0;
    if ($100) {
      label = 3;
      break;
    } else {
      var $69 = 0;
      var $68 = 0;
      label = 13;
      break;
    }
  }
}
_find_green["X"] = 1;
function _identify() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head = __stackBase__;
    var $jh = __stackBase__ + 32;
    HEAP32[5427632 >> 2] = -1;
    HEAP32[5403048 >> 2] = -1;
    HEAP32[5244028 >> 2] = -1;
    HEAP16[5560200 >> 1] = 0;
    HEAP32[5398904 >> 2] = 0;
    HEAP16[5398900 >> 1] = 0;
    HEAP16[5245028 >> 1] = 0;
    HEAP16[5245036 >> 1] = 0;
    HEAP16[5263700 >> 1] = 0;
    HEAP16[5243564 >> 1] = 0;
    HEAP16[5242964 >> 1] = 0;
    HEAP16[5398712 >> 1] = 0;
    HEAP32[5263496 >> 2] = 0;
    HEAP8[5263308] = 0;
    HEAP8[5263372] = 0;
    HEAP8[5263628] = 0;
    HEAP8[5561404] = 0;
    HEAP8[5427980] = 0;
    HEAP8[5560896] = 0;
    HEAP32[5243560 >> 2] = 0;
    HEAPF32[5403044 >> 2] = 0;
    HEAPF32[5561468 >> 2] = 0;
    HEAPF32[5244912 >> 2] = 0;
    HEAPF32[5264096 >> 2] = 0;
    HEAP32[5243584 >> 2] = 0;
    for (var $$dest = 5243588 >> 2, $$stop = $$dest + 110; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    for (var $$dest = 5398736 >> 2, $$stop = $$dest + 32; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    _memset(5242968, 0, 128);
    for (var $$dest = 5263500 >> 2, $$stop = $$dest + 32; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP16[5244060 >> 1] = 0;
    HEAP16[5244040 >> 1] = 0;
    HEAP32[5244056 >> 2] = 0;
    HEAP32[5244044 >> 2] = 0;
    HEAP32[5244052 >> 2] = 0;
    HEAP32[5263692 >> 2] = 0;
    HEAP32[5242960 >> 2] = 60;
    HEAP32[5244032 >> 2] = 0;
    HEAP32[5244036 >> 2] = 0;
    HEAP32[5263444 >> 2] = 0;
    HEAP32[5428492 >> 2] = 0;
    HEAP32[5263696 >> 2] = 0;
    HEAP32[5427976 >> 2] = 0;
    HEAP8[5242884] = 0;
    HEAP32[5264036 >> 2] = 0;
    HEAP8[5264104] = 0;
    HEAP32[5561400 >> 2] = 0;
    HEAP32[5243580 >> 2] = 0;
    HEAP32[5244924 >> 2] = 0;
    HEAP32[5243568 >> 2] = 0;
    HEAP8[5242880] = 0;
    HEAP32[5428496 >> 2] = 0;
    HEAP32[5245636 >> 2] = 0;
    HEAP32[5263436 >> 2] = 0;
    HEAP32[5245040 >> 2] = 1;
    HEAP32[5264100 >> 2] = 1;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5243576 >> 2] = 0;
    HEAP32[5243572 >> 2] = 0;
    HEAPF32[5561124 >> 2] = 0;
    HEAPF32[5245640 >> 2] = 1;
    HEAPF32[5560844 >> 2] = 0;
    HEAPF32[5560860 >> 2] = 0;
    HEAPF32[5560876 >> 2] = 0;
    HEAPF32[5244964 >> 2] = 1;
    HEAPF32[5244980 >> 2] = 0;
    HEAPF32[5244996 >> 2] = 0;
    HEAPF32[5561128 >> 2] = 1;
    HEAPF32[5245644 >> 2] = 1;
    HEAPF32[5560848 >> 2] = 0;
    HEAPF32[5560864 >> 2] = 0;
    HEAPF32[5560880 >> 2] = 0;
    HEAPF32[5244968 >> 2] = 0;
    HEAPF32[5244984 >> 2] = 1;
    HEAPF32[5245e3 >> 2] = 0;
    HEAPF32[5561132 >> 2] = 0;
    HEAPF32[5245648 >> 2] = 1;
    HEAPF32[5560852 >> 2] = 0;
    HEAPF32[5560868 >> 2] = 0;
    HEAPF32[5560884 >> 2] = 0;
    HEAPF32[5244972 >> 2] = 0;
    HEAPF32[5244988 >> 2] = 0;
    HEAPF32[5245004 >> 2] = 1;
    HEAPF32[5561136 >> 2] = 0;
    HEAPF32[5245652 >> 2] = 0;
    HEAPF32[5560856 >> 2] = 0;
    HEAPF32[5560872 >> 2] = 0;
    HEAPF32[5560888 >> 2] = 0;
    HEAPF32[5244976 >> 2] = 0;
    HEAPF32[5244992 >> 2] = 0;
    HEAPF32[5245008 >> 2] = 0;
    HEAP32[5560840 >> 2] = 3;
    var $i_1276 = 0;
    label = 3;
    break;
   case 3:
    var $i_1276;
    var $2 = $i_1276 & 65535;
    var $3 = 5428500 + ($i_1276 << 1) | 0;
    HEAP16[$3 >> 1] = $2;
    var $4 = $i_1276 + 1 | 0;
    var $exitcond285 = ($4 | 0) == 65536;
    if ($exitcond285) {
      label = 4;
      break;
    } else {
      var $i_1276 = $4;
      label = 3;
      break;
    }
   case 4:
    var $6 = _get2();
    HEAP16[5262944 >> 1] = $6;
    var $7 = _get4();
    var $8 = HEAP32[5264116 >> 2];
    var $9 = _fseek($8, 0, 0);
    var $10 = $head | 0;
    var $11 = HEAP32[5264116 >> 2];
    var $12 = _fread($10, 1, 32, $11);
    var $13 = HEAP32[5264116 >> 2];
    var $14 = _fseek($13, 0, 2);
    var $15 = HEAP32[5264116 >> 2];
    var $16 = _ftell($15);
    var $17 = _my_memmem($10, 5574080);
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      var $cp_0 = $17;
      label = 6;
      break;
    }
   case 5:
    var $20 = _my_memmem($10, 5574308);
    var $21 = ($20 | 0) == 0;
    if ($21) {
      label = 9;
      break;
    } else {
      var $cp_0 = $20;
      label = 6;
      break;
    }
   case 6:
    var $cp_0;
    var $23 = $cp_0;
    var $24 = $head;
    var $25 = $23 - $24 | 0;
    _parse_phase_one($25);
    var $26 = ($cp_0 | 0) == ($10 | 0);
    if ($26) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $28 = _parse_tiff(0);
    var $29 = ($28 | 0) == 0;
    if ($29) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 9:
    var $32 = HEAP16[5262944 >> 1];
    if ($32 << 16 >> 16 == 18761 | $32 << 16 >> 16 == 19789) {
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    var $34 = $head + 6 | 0;
    var $35 = _memcmp($34, 5579108, 8);
    var $36 = ($35 | 0) == 0;
    if ($36) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[5428492 >> 2] = $7;
    var $38 = $16 - $7 | 0;
    _parse_ciff($7, $38);
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 12:
    var $40 = _parse_tiff(0);
    var $41 = ($40 | 0) == 0;
    if ($41) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 14:
    var $44 = _memcmp($10, 5579100, 4);
    var $45 = ($44 | 0) == 0;
    if ($45) {
      label = 15;
      break;
    } else {
      label = 19;
      break;
    }
   case 15:
    var $47 = $head + 6 | 0;
    var $48 = _memcmp($47, 5579092, 4);
    var $49 = ($48 | 0) == 0;
    if ($49) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $51 = HEAP32[5264116 >> 2];
    var $52 = _fseek($51, 4, 0);
    var $53 = _get2();
    var $54 = $53 & 65535;
    var $55 = $54 + 4 | 0;
    HEAP32[5428492 >> 2] = $55;
    var $56 = HEAP32[5264116 >> 2];
    var $57 = _fseek($56, $55, 0);
    var $58 = HEAP32[5264116 >> 2];
    var $59 = _fgetc($58);
    var $60 = ($59 | 0) == 255;
    if ($60) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $62 = _parse_tiff(12);
    label = 18;
    break;
   case 18:
    HEAP32[5244044 >> 2] = 0;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 19:
    var $65 = $head + 25 | 0;
    var $66 = _memcmp($65, 5579084, 7);
    var $67 = ($66 | 0) == 0;
    if ($67) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAP8[5263628] = HEAP8[5579076];
    HEAP8[5263629] = HEAP8[5579077];
    HEAP8[5263630] = HEAP8[5579078];
    HEAP8[5263631] = HEAP8[5579079];
    HEAP8[5263632] = HEAP8[5579080];
    HEAP8[5263633] = HEAP8[5579081];
    HEAP8[5263634] = HEAP8[5579082];
    for (var $$src = 5579064, $$dest = 5263372, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $68 = HEAP32[5264116 >> 2];
    var $69 = _fseek($68, 33, 0);
    _get_timestamp(1);
    var $70 = HEAP32[5264116 >> 2];
    var $71 = _fseek($70, 60, 0);
    var $72 = _get4();
    var $73 = $72 >>> 0;
    HEAPF32[5561124 >> 2] = $73;
    var $74 = _get4();
    var $75 = $74 >>> 0;
    HEAPF32[5561128 >> 2] = $75;
    var $76 = _get4();
    var $77 = $76 >>> 0;
    HEAPF32[5561136 >> 2] = $77;
    var $78 = _get4();
    var $79 = $78 >>> 0;
    HEAPF32[5561132 >> 2] = $79;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 21:
    var $81 = _strcmp($10, 5579060);
    var $82 = ($81 | 0) == 0;
    if ($82) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    for (var $$src = 5579048, $$dest = 5263628, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    for (var $$src = 5579032, $$dest = 5263372, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 23:
    var $85 = _strcmp($10, 5579024);
    var $86 = ($85 | 0) == 0;
    if ($86) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    HEAP8[5263628] = HEAP8[5579e3];
    HEAP8[5263629] = HEAP8[5579001];
    HEAP8[5263630] = HEAP8[5579002];
    HEAP8[5263631] = HEAP8[5579003];
    HEAP8[5263632] = HEAP8[5579004];
    HEAP8[5263633] = HEAP8[5579005];
    for (var $$src = 5578984, $$dest = 5263372, $$stop = $$src + 14; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5263692 >> 2] = 32;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 25:
    var $89 = _strcmp($10, 5578976);
    var $90 = ($89 | 0) == 0;
    if ($90) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP8[5263628] = HEAP8[5579e3];
    HEAP8[5263629] = HEAP8[5579001];
    HEAP8[5263630] = HEAP8[5579002];
    HEAP8[5263631] = HEAP8[5579003];
    HEAP8[5263632] = HEAP8[5579004];
    HEAP8[5263633] = HEAP8[5579005];
    for (var $$src = 5578960, $$dest = 5263372, $$stop = $$src + 14; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5263692 >> 2] = 58;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 27:
    var $93 = _memcmp($10, 5573316, 8);
    var $94 = ($93 | 0) == 0;
    if ($94) {
      label = 28;
      break;
    } else {
      label = 32;
      break;
    }
   case 28:
    var $96 = HEAP32[5264116 >> 2];
    var $97 = _fseek($96, 84, 0);
    var $98 = _get4();
    HEAP32[5244044 >> 2] = $98;
    var $99 = _get4();
    HEAP32[5244056 >> 2] = $99;
    var $100 = HEAP32[5264116 >> 2];
    var $101 = _fseek($100, 92, 0);
    var $102 = _get4();
    _parse_fuji($102);
    var $103 = HEAP32[5244044 >> 2];
    var $104 = ($103 | 0) > 120;
    if ($104) {
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 29:
    var $106 = HEAP32[5264116 >> 2];
    var $107 = _fseek($106, 120, 0);
    var $108 = _get4();
    var $109 = ($108 | 0) != 0;
    var $110 = $109 & 1;
    var $111 = HEAP32[5264100 >> 2];
    var $112 = $110 + $111 | 0;
    HEAP32[5264100 >> 2] = $112;
    var $113 = ($112 | 0) == 2;
    var $114 = HEAP32[5244920 >> 2];
    var $115 = ($114 | 0) != 0;
    var $or_cond = $113 & $115;
    if ($or_cond) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _parse_fuji($108);
    label = 31;
    break;
   case 31:
    HEAP32[5263692 >> 2] = 4;
    var $117 = HEAP32[5264116 >> 2];
    var $118 = HEAP32[5244920 >> 2];
    var $119 = ($118 | 0) != 0;
    var $120 = $119 & 1;
    var $121 = -$120 | 0;
    var $122 = $121 & 28;
    var $123 = $122 + 100 | 0;
    var $124 = _fseek($117, $123, 0);
    var $125 = _get4();
    HEAP32[5428492 >> 2] = $125;
    var $126 = _parse_tiff($125);
    var $127 = HEAP32[5244044 >> 2];
    var $128 = $127 + 12 | 0;
    var $129 = _parse_tiff($128);
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 32:
    var $131 = _memcmp($10, 5586136, 4);
    var $132 = ($131 | 0) == 0;
    if ($132) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $134 = HEAP32[5264116 >> 2];
    var $135 = _fseek($134, 0, 0);
    _parse_riff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 34:
    var $137 = _memcmp($10, 5578952, 6);
    var $138 = ($137 | 0) == 0;
    if ($138) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $140 = HEAP32[5264116 >> 2];
    var $141 = _fseek($140, 6, 0);
    var $142 = HEAP32[5264116 >> 2];
    var $143 = _fread(5263628, 1, 8, $142);
    var $144 = HEAP32[5264116 >> 2];
    var $145 = _fread(5263372, 1, 8, $144);
    var $146 = HEAP32[5264116 >> 2];
    var $147 = _fread(5263308, 1, 16, $146);
    var $148 = _get2();
    var $149 = $148 & 65535;
    HEAP32[5428492 >> 2] = $149;
    var $150 = _get2();
    var $151 = _get2();
    HEAP16[5245028 >> 1] = $151;
    var $152 = _get2();
    HEAP16[5245036 >> 1] = $152;
    HEAP32[5263692 >> 2] = 66;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 36:
    var $154 = _memcmp($10, 5578940, 8);
    var $155 = ($154 | 0) == 0;
    if ($155) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP8[5263628] = HEAP8[5578932];
    HEAP8[5263629] = HEAP8[5578933];
    HEAP8[5263630] = HEAP8[5578934];
    HEAP8[5263631] = HEAP8[5578935];
    HEAP8[5263632] = HEAP8[5578936];
    HEAP8[5263633] = HEAP8[5578937];
    HEAP8[5263372] = HEAP8[5578928];
    HEAP8[5263373] = HEAP8[5578929];
    HEAP8[5263374] = HEAP8[5578930];
    HEAP16[5262944 >> 1] = 18761;
    var $157 = HEAP32[5264116 >> 2];
    var $158 = _fseek($157, 300, 0);
    var $159 = _get4();
    HEAP32[5428492 >> 2] = $159;
    var $160 = _get4();
    var $161 = _get2();
    HEAP16[5242964 >> 1] = $161;
    var $162 = _get2();
    HEAP16[5398712 >> 1] = $162;
    var $163 = HEAP16[5242964 >> 1];
    var $164 = $163 & 65535;
    var $165 = $164 * 5 & -1;
    var $166 = $165 >>> 2;
    var $167 = $162 & 65535;
    var $168 = $166 * $167 & -1;
    var $169 = HEAP32[5428492 >> 2];
    var $170 = $169 + $160 | 0;
    var $171 = $170 - $168 | 0;
    HEAP32[5428492 >> 2] = $171;
    HEAP32[5263692 >> 2] = 66;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 38:
    var $173 = _memcmp($10, 5578920, 4);
    var $174 = ($173 | 0) == 0;
    if ($174) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP16[5262944 >> 1] = 18761;
    var $176 = HEAP32[5264116 >> 2];
    var $177 = _fseek($176, 20, 0);
    var $178 = _get4();
    var $179 = $178 & 65535;
    HEAP16[5242964 >> 1] = $179;
    var $180 = _get4();
    var $181 = $180 & 65535;
    HEAP16[5398712 >> 1] = $181;
    HEAP8[5263628] = HEAP8[5578920];
    HEAP8[5263629] = HEAP8[5578921];
    HEAP8[5263630] = HEAP8[5578922];
    HEAP8[5263631] = HEAP8[5578923];
    HEAP8[5263632] = HEAP8[5578924];
    var $182 = HEAP32[5264116 >> 2];
    var $183 = _fseek($182, 668, 0);
    var $184 = HEAP32[5264116 >> 2];
    var $185 = _fread(5263372, 1, 64, $184);
    HEAP32[5428492 >> 2] = 4096;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 88;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 40:
    var $187 = $head + 4 | 0;
    var $188 = _memcmp($187, 5578912, 4);
    var $189 = ($188 | 0) == 0;
    if ($189) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAP32[5263628 >> 2] = 4474194;
    HEAP32[5263372 >> 2] = 4542031;
    _parse_redcine();
    HEAP32[5263692 >> 2] = 44;
    _gamma_curve(.4166666666666667, 12.92, 1, 4095);
    HEAP32[5427632 >> 2] = 1229539657;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 42:
    var $192 = _memcmp($10, 5578868, 9);
    var $193 = ($192 | 0) == 0;
    if ($193) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _parse_rollei();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 44:
    var $196 = _memcmp($10, 5578860, 4);
    var $197 = ($196 | 0) == 0;
    if ($197) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _parse_sinar_ia();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 46:
    var $200 = _memcmp($10, 5578852, 4);
    var $201 = ($200 | 0) == 0;
    if ($201) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    _parse_minolta(0);
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 48:
    var $204 = _memcmp($10, 5578844, 4);
    var $205 = ($204 | 0) == 0;
    if ($205) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    _parse_foveon();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 50:
    var $208 = _memcmp($10, 5578840, 2);
    var $209 = ($208 | 0) == 0;
    if ($209) {
      label = 51;
      break;
    } else {
      var $i_2275 = 0;
      label = 52;
      break;
    }
   case 51:
    _parse_cine();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 52:
    var $i_2275;
    var $211 = 5264124 + $i_2275 * 36 | 0;
    var $212 = HEAP32[$211 >> 2];
    var $213 = ($16 | 0) == ($212 | 0);
    if ($213) {
      label = 53;
      break;
    } else {
      label = 55;
      break;
    }
   case 53:
    var $215 = 5264128 + $i_2275 * 36 | 0;
    var $216 = _strcpy(5263628, $215);
    var $217 = 5264140 + $i_2275 * 36 | 0;
    var $218 = _strcpy(5263372, $217);
    var $219 = $i_2275 - 46 | 0;
    var $220 = $219 >>> 0 < 39;
    if ($220) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    _parse_external_jpeg();
    label = 55;
    break;
   case 55:
    var $223 = $i_2275 + 1 | 0;
    var $exitcond284 = ($223 | 0) == 88;
    if ($exitcond284) {
      var $zero_fsize_0 = $16;
      label = 56;
      break;
    } else {
      var $i_2275 = $223;
      label = 52;
      break;
    }
   case 56:
    var $zero_fsize_0;
    var $224 = HEAP8[5263628];
    var $225 = $224 << 24 >> 24 == 0;
    if ($225) {
      label = 57;
      break;
    } else {
      var $i_3271 = 0;
      label = 59;
      break;
    }
   case 57:
    _parse_smal($16);
    var $_pr = HEAP8[5263628];
    var $227 = $_pr << 24 >> 24 == 0;
    if ($227) {
      label = 58;
      break;
    } else {
      var $i_3271 = 0;
      label = 59;
      break;
    }
   case 58:
    HEAP32[5264100 >> 2] = 0;
    _parse_jpeg();
    var $i_3271 = 0;
    label = 59;
    break;
   case 59:
    var $i_3271;
    var $229 = 5267568 + ($i_3271 << 2) | 0;
    var $230 = HEAP32[$229 >> 2];
    var $231 = _strstr(5263628, $230);
    var $232 = ($231 | 0) == 0;
    if ($232) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $234 = _strcpy(5263628, $230);
    label = 61;
    break;
   case 61:
    var $235 = $i_3271 + 1 | 0;
    var $exitcond282 = ($235 | 0) == 17;
    if ($exitcond282) {
      label = 62;
      break;
    } else {
      var $i_3271 = $235;
      label = 59;
      break;
    }
   case 62:
    var $237 = _strncmp(5263628, 5586632, 5);
    var $238 = ($237 | 0) == 0;
    if ($238) {
      label = 63;
      break;
    } else {
      label = 67;
      break;
    }
   case 63:
    var $240 = _strstr(5263372, 5578824);
    var $241 = ($240 | 0) == 0;
    if ($241) {
      label = 64;
      break;
    } else {
      var $cp_1 = $240;
      label = 66;
      break;
    }
   case 64:
    var $243 = _strstr(5263372, 5578808);
    var $244 = ($243 | 0) == 0;
    if ($244) {
      label = 65;
      break;
    } else {
      var $cp_1 = $243;
      label = 66;
      break;
    }
   case 65:
    var $246 = _strstr(5263372, 5578792);
    var $247 = ($246 | 0) == 0;
    if ($247) {
      label = 67;
      break;
    } else {
      var $cp_1 = $246;
      label = 66;
      break;
    }
   case 66:
    var $cp_1;
    HEAP8[$cp_1] = 0;
    label = 67;
    break;
   case 67:
    var $250 = _strlen(5263628);
    var $_sum = $250 - 1 | 0;
    var $251 = $_sum + 5263628 | 0;
    var $252 = HEAP8[$251];
    var $253 = $252 << 24 >> 24 == 32;
    if ($253) {
      var $254 = $251;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    var $254;
    HEAP8[$254] = 0;
    var $255 = $254 - 1 | 0;
    var $256 = HEAP8[$255];
    var $257 = $256 << 24 >> 24 == 32;
    if ($257) {
      var $254 = $255;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $258 = _strlen(5263372);
    var $_sum281 = $258 - 1 | 0;
    var $259 = $_sum281 + 5263372 | 0;
    var $260 = HEAP8[$259];
    var $261 = $260 << 24 >> 24 == 32;
    if ($261) {
      var $262 = $259;
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 70:
    var $262;
    HEAP8[$262] = 0;
    var $263 = $262 - 1 | 0;
    var $264 = HEAP8[$263];
    var $265 = $264 << 24 >> 24 == 32;
    if ($265) {
      var $262 = $263;
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $266 = _strlen(5263628);
    var $267 = _strncasecmp(5263372, 5263628, $266);
    var $268 = ($267 | 0) == 0;
    if ($268) {
      label = 72;
      break;
    } else {
      label = 74;
      break;
    }
   case 72:
    var $270 = $266 + 5263372 | 0;
    var $271 = HEAP8[$270];
    var $272 = $271 << 24 >> 24 == 32;
    if ($272) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    var $274 = $266 + 1 | 0;
    var $275 = $274 + 5263372 | 0;
    var $276 = 63 - $266 | 0;
    _memmove(5263372, $275, $276, 1, 0);
    label = 74;
    break;
   case 74:
    var $278 = _strncmp(5263372, 5578748, 8);
    var $279 = ($278 | 0) == 0;
    if ($279) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    var $281 = _strcpy(5263372, 5263380);
    label = 76;
    break;
   case 76:
    var $283 = _strncmp(5263372, 5578732, 15);
    var $284 = ($283 | 0) == 0;
    if ($284) {
      label = 77;
      break;
    } else {
      label = 78;
      break;
    }
   case 77:
    var $286 = _strcpy(5263372, 5263387);
    label = 78;
    break;
   case 78:
    HEAP8[5263371] = 0;
    HEAP8[5263435] = 0;
    HEAP8[5263691] = 0;
    HEAP8[5561467] = 0;
    HEAP8[5428491] = 0;
    var $288 = HEAP32[5264100 >> 2];
    var $289 = ($288 | 0) == 0;
    if ($289) {
      label = 680;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    var $291 = HEAP16[5398712 >> 1];
    var $292 = $291 << 16 >> 16 == 0;
    if ($292) {
      label = 80;
      break;
    } else {
      var $295 = $291;
      label = 81;
      break;
    }
   case 80:
    var $294 = HEAP16[5245036 >> 1];
    HEAP16[5398712 >> 1] = $294;
    var $295 = $294;
    label = 81;
    break;
   case 81:
    var $295;
    var $296 = HEAP16[5242964 >> 1];
    var $297 = $296 << 16 >> 16 == 0;
    if ($297) {
      label = 82;
      break;
    } else {
      var $_pr229_pr_pr = $296;
      label = 83;
      break;
    }
   case 82:
    var $299 = HEAP16[5245028 >> 1];
    HEAP16[5242964 >> 1] = $299;
    var $_pr229_pr_pr = $299;
    label = 83;
    break;
   case 83:
    var $_pr229_pr_pr;
    var $301 = $295 << 16 >> 16 == 2624;
    var $302 = $_pr229_pr_pr << 16 >> 16 == 3936;
    var $or_cond141 = $301 & $302;
    if ($or_cond141) {
      label = 84;
      break;
    } else {
      label = 85;
      break;
    }
   case 84:
    HEAP16[5398712 >> 1] = 2616;
    HEAP16[5242964 >> 1] = 3896;
    var $334 = 3896;
    var $333 = 2616;
    label = 102;
    break;
   case 85:
    var $304 = $295 << 16 >> 16 == 3136;
    var $305 = $_pr229_pr_pr << 16 >> 16 == 4864;
    var $or_cond143 = $304 & $305;
    if ($or_cond143) {
      label = 86;
      break;
    } else {
      label = 87;
      break;
    }
   case 86:
    HEAP16[5398712 >> 1] = 3124;
    HEAP16[5242964 >> 1] = 4688;
    HEAP32[5427632 >> 2] = 370546198;
    var $334 = 4688;
    var $333 = 3124;
    label = 102;
    break;
   case 87:
    var $307 = $_pr229_pr_pr << 16 >> 16 == 4352;
    if ($307) {
      label = 88;
      break;
    } else {
      label = 91;
      break;
    }
   case 88:
    var $309 = _strcmp(5263372, 5578728);
    var $310 = ($309 | 0) == 0;
    if ($310) {
      label = 90;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $312 = _strcmp(5263372, 5578724);
    var $313 = ($312 | 0) == 0;
    if ($313) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    HEAP16[5242964 >> 1] = 4309;
    HEAP32[5427632 >> 2] = 370546198;
    var $334 = 4309;
    var $333 = $295;
    label = 102;
    break;
   case 91:
    var $315 = ($_pr229_pr_pr & 65535) > 4959;
    if ($315) {
      label = 92;
      break;
    } else {
      var $_pr234_pr_pr_pr = $_pr229_pr_pr;
      label = 94;
      break;
    }
   case 92:
    var $317 = _strncmp(5263372, 5578720, 3);
    var $318 = ($317 | 0) == 0;
    if ($318) {
      label = 93;
      break;
    } else {
      var $_pr234_pr_pr_pr_ph = $_pr229_pr_pr;
      label = 97;
      break;
    }
   case 93:
    HEAP16[5263700 >> 1] = 10;
    HEAP16[5242964 >> 1] = 4950;
    HEAP32[5427632 >> 2] = 370546198;
    var $334 = 4950;
    var $333 = $295;
    label = 102;
    break;
   case 94:
    var $_pr234_pr_pr_pr;
    var $319 = $_pr234_pr_pr_pr << 16 >> 16 == 4736;
    if ($319) {
      label = 95;
      break;
    } else {
      label = 100;
      break;
    }
   case 95:
    var $321 = _strcmp(5263372, 5578716);
    var $322 = ($321 | 0) == 0;
    if ($322) {
      label = 96;
      break;
    } else {
      var $334 = $_pr234_pr_pr_pr;
      var $333 = $295;
      label = 102;
      break;
    }
   case 96:
    HEAP16[5398712 >> 1] = 3122;
    HEAP16[5242964 >> 1] = 4684;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP16[5243564 >> 1] = 2;
    var $334 = 4684;
    var $333 = 3122;
    label = 102;
    break;
   case 97:
    var $_pr234_pr_pr_pr_ph;
    var $324 = $_pr234_pr_pr_pr_ph << 16 >> 16 == 7424;
    if ($324) {
      label = 98;
      break;
    } else {
      var $334 = $_pr234_pr_pr_pr_ph;
      var $333 = $295;
      label = 102;
      break;
    }
   case 98:
    var $326 = _strcmp(5263372, 5578708);
    var $327 = ($326 | 0) == 0;
    if ($327) {
      label = 99;
      break;
    } else {
      var $334 = 7424;
      var $333 = $295;
      label = 102;
      break;
    }
   case 99:
    HEAP16[5398712 >> 1] = 5502;
    HEAP16[5242964 >> 1] = 7328;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP16[5243564 >> 1] = 29;
    HEAP16[5263700 >> 1] = 48;
    var $334 = 7328;
    var $333 = 5502;
    label = 102;
    break;
   case 100:
    var $330 = $295 << 16 >> 16 == 3014;
    var $331 = $_pr234_pr_pr_pr << 16 >> 16 == 4096;
    var $or_cond145 = $330 & $331;
    if ($or_cond145) {
      label = 101;
      break;
    } else {
      var $334 = $_pr234_pr_pr_pr;
      var $333 = $295;
      label = 102;
      break;
    }
   case 101:
    HEAP16[5242964 >> 1] = 4014;
    var $334 = 4014;
    var $333 = $295;
    label = 102;
    break;
   case 102:
    var $333;
    var $334;
    var $335 = HEAP32[5427976 >> 2];
    var $336 = ($335 | 0) == 0;
    if ($336) {
      label = 111;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    var $338 = HEAP32[5427632 >> 2];
    var $339 = ($338 | 0) == -1;
    if ($339) {
      label = 104;
      break;
    } else {
      label = 105;
      break;
    }
   case 104:
    HEAP32[5427632 >> 2] = 0;
    var $340 = HEAP32[5243580 >> 2];
    var $346 = $340;
    label = 107;
    break;
   case 105:
    var $342 = ($338 | 0) == 0;
    var $343 = HEAP32[5243580 >> 2];
    if ($342) {
      var $346 = $343;
      label = 107;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    HEAP32[5264100 >> 2] = $343;
    label = 108;
    break;
   case 107:
    var $346;
    HEAP32[5560840 >> 2] = $346;
    label = 108;
    break;
   case 108:
    var $348 = HEAP32[5244032 >> 2];
    if (($348 | 0) == 1) {
      label = 109;
      break;
    } else if (($348 | 0) == 7) {
      label = 110;
      break;
    } else {
      label = 654;
      break;
    }
   case 109:
    HEAP32[5263692 >> 2] = 76;
    label = 654;
    break;
   case 110:
    HEAP32[5263692 >> 2] = 2;
    label = 654;
    break;
   case 111:
    var $351 = _strcmp(5263628, 5587508);
    var $352 = ($351 | 0) == 0;
    if ($352) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    var $354 = $head + 6 | 0;
    var $355 = _memcmp($354, 5579108, 8);
    var $356 = ($355 | 0) != 0;
    var $357 = $356 ? 46 : 42;
    HEAP32[5263692 >> 2] = $357;
    label = 113;
    break;
   case 113:
    var $359 = _strcmp(5263628, 5587524);
    var $360 = ($359 | 0) == 0;
    if ($360) {
      label = 114;
      break;
    } else {
      label = 118;
      break;
    }
   case 114:
    var $362 = HEAP32[5263692 >> 2];
    var $363 = ($362 | 0) == 0;
    if ($363) {
      label = 115;
      break;
    } else {
      label = 116;
      break;
    }
   case 115:
    HEAP32[5263692 >> 2] = 36;
    label = 116;
    break;
   case 116:
    var $365 = HEAP8[5263372];
    var $366 = $365 << 24 >> 24 == 69;
    if ($366) {
      label = 117;
      break;
    } else {
      label = 118;
      break;
    }
   case 117:
    var $368 = HEAP32[5428492 >> 2];
    var $369 = ($368 | 0) == 0;
    var $370 = $369 & 1;
    var $371 = $370 << 2;
    var $372 = HEAP32[5263696 >> 2];
    var $373 = $372 | $371;
    var $374 = $373 | 2;
    HEAP32[5263696 >> 2] = $374;
    label = 118;
    break;
   case 118:
    var $376 = _strcmp(5263628, 5579148);
    var $377 = ($376 | 0) == 0;
    if ($377) {
      label = 119;
      break;
    } else {
      label = 120;
      break;
    }
   case 119:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3967;
    label = 120;
    break;
   case 120:
    var $_b = HEAP8[5264104];
    if ($_b) {
      label = 121;
      break;
    } else {
      label = 126;
      break;
    }
   case 121:
    var $381 = $333 & 65535;
    var $382 = $381 << 1;
    var $383 = $334 & 65535;
    var $384 = $382 >>> 0 < $383 >>> 0;
    if ($384) {
      label = 122;
      break;
    } else {
      label = 123;
      break;
    }
   case 122:
    HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 123;
    break;
   case 123:
    var $387 = ($333 & 65535) > ($334 & 65535);
    if ($387) {
      label = 124;
      break;
    } else {
      label = 125;
      break;
    }
   case 124:
    HEAPF64[tempDoublePtr >> 3] = 2, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 125;
    break;
   case 125:
    HEAP32[5427632 >> 2] = 0;
    _simple_coeff(0);
    label = 643;
    break;
   case 126:
    var $391 = HEAP32[5244036 >> 2];
    var $392 = ($391 | 0) == 15;
    var $or_cond3 = $352 & $392;
    if ($or_cond3) {
      label = 127;
      break;
    } else {
      label = 133;
      break;
    }
   case 127:
    var $394 = $334 & 65535;
    if (($394 | 0) == 3344) {
      label = 128;
      break;
    } else if (($394 | 0) == 3872) {
      var $398 = $334;
      label = 129;
      break;
    } else {
      var $401 = $334;
      label = 130;
      break;
    }
   case 128:
    var $396 = $334 - 66 & 65535;
    HEAP16[5242964 >> 1] = $396;
    var $398 = $396;
    label = 129;
    break;
   case 129:
    var $398;
    var $399 = $398 - 6 & 65535;
    HEAP16[5242964 >> 1] = $399;
    var $401 = $399;
    label = 130;
    break;
   case 130:
    var $401;
    var $402 = ($333 & 65535) > ($401 & 65535);
    if ($402) {
      label = 131;
      break;
    } else {
      label = 132;
      break;
    }
   case 131:
    HEAP16[5242964 >> 1] = $333;
    HEAP16[5398712 >> 1] = $401;
    label = 132;
    break;
   case 132:
    HEAP32[5427632 >> 2] = 0;
    HEAP32[5263692 >> 2] = 20;
    label = 643;
    break;
   case 133:
    var $406 = _strcmp(5263372, 5578692);
    var $407 = ($406 | 0) == 0;
    if ($407) {
      label = 134;
      break;
    } else {
      label = 135;
      break;
    }
   case 134:
    HEAP16[5398712 >> 1] = 613;
    HEAP16[5242964 >> 1] = 854;
    HEAP16[5245028 >> 1] = 896;
    HEAPF64[tempDoublePtr >> 3] = .9665605095541401, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -505093660;
    HEAP32[5263692 >> 2] = 10;
    label = 643;
    break;
   case 135:
    var $410 = _strcmp(5263372, 5578676);
    var $411 = ($410 | 0) == 0;
    if ($411) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    var $413 = _strcmp(5263372, 5578656);
    var $414 = ($413 | 0) == 0;
    if ($414) {
      label = 137;
      break;
    } else {
      label = 138;
      break;
    }
   case 137:
    HEAP16[5398712 >> 1] = 773;
    HEAP16[5242964 >> 1] = 960;
    HEAP16[5245028 >> 1] = 992;
    HEAPF64[tempDoublePtr >> 3] = 1.0893617021276596, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $storemerge266 = 508436046;
    label = 166;
    break;
   case 138:
    var $417 = _strcmp(5263372, 5578628);
    var $418 = ($417 | 0) == 0;
    if ($418) {
      label = 139;
      break;
    } else {
      label = 140;
      break;
    }
   case 139:
    HEAP16[5398712 >> 1] = 968;
    HEAP16[5242964 >> 1] = 1290;
    HEAP16[5245028 >> 1] = 1320;
    var $storemerge266 = 458115870;
    label = 166;
    break;
   case 140:
    var $421 = _strcmp(5263372, 5578612);
    var $422 = ($421 | 0) == 0;
    if ($422) {
      label = 167;
      break;
    } else {
      label = 141;
      break;
    }
   case 141:
    var $424 = _strcmp(5263372, 5578596);
    var $425 = ($424 | 0) == 0;
    if ($425) {
      label = 142;
      break;
    } else {
      label = 143;
      break;
    }
   case 142:
    HEAP16[5398712 >> 1] = 1752;
    HEAP16[5242964 >> 1] = 2344;
    HEAP16[5245036 >> 1] = 1766;
    HEAP16[5245028 >> 1] = 2400;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 143:
    var $428 = _strcmp(5263372, 5578580);
    var $429 = ($428 | 0) == 0;
    if ($429) {
      label = 144;
      break;
    } else {
      label = 145;
      break;
    }
   case 144:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5245036 >> 1] = 1968;
    HEAP16[5245028 >> 1] = 2664;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 4;
    label = 165;
    break;
   case 145:
    var $432 = _strcmp(5263372, 5578564);
    var $433 = ($432 | 0) == 0;
    if ($433) {
      label = 146;
      break;
    } else {
      label = 147;
      break;
    }
   case 146:
    HEAP16[5398712 >> 1] = 1984;
    HEAP16[5242964 >> 1] = 2620;
    HEAP16[5245036 >> 1] = 1992;
    HEAP16[5245028 >> 1] = 2672;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 10;
    label = 165;
    break;
   case 147:
    var $436 = _strcmp(5263372, 5578548);
    var $437 = ($436 | 0) == 0;
    if ($437) {
      label = 148;
      break;
    } else {
      label = 151;
      break;
    }
   case 148:
    var $439 = _canon_s2is();
    var $440 = ($439 | 0) == 0;
    if ($440) {
      label = 150;
      break;
    } else {
      label = 149;
      break;
    }
   case 149:
    HEAP8[5263382] = HEAP8[5578540];
    HEAP8[5263383] = HEAP8[5578541];
    HEAP8[5263384] = HEAP8[5578542];
    HEAP8[5263385] = HEAP8[5578543];
    HEAP8[5263386] = HEAP8[5578544];
    HEAP8[5263387] = HEAP8[5578545];
    label = 150;
    break;
   case 150:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5245036 >> 1] = 1968;
    HEAP16[5245028 >> 1] = 2672;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 151:
    var $444 = _strcmp(5263372, 5578524);
    var $445 = ($444 | 0) == 0;
    if ($445) {
      label = 152;
      break;
    } else {
      label = 153;
      break;
    }
   case 152:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3112;
    HEAP16[5245036 >> 1] = 2340;
    HEAP16[5245028 >> 1] = 3152;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 36;
    label = 165;
    break;
   case 153:
    var $448 = _strcmp(5263372, 5578508);
    var $449 = ($448 | 0) == 0;
    if ($449) {
      label = 154;
      break;
    } else {
      label = 155;
      break;
    }
   case 154:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3096;
    HEAP16[5245036 >> 1] = 2346;
    HEAP16[5245028 >> 1] = 3152;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 155:
    var $452 = _strcmp(5263372, 5578488);
    var $453 = ($452 | 0) == 0;
    if ($453) {
      label = 156;
      break;
    } else {
      label = 157;
      break;
    }
   case 156:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3298;
    HEAP16[5245036 >> 1] = 2480;
    HEAP16[5245028 >> 1] = 3336;
    HEAP16[5243564 >> 1] = 5;
    HEAP16[5263700 >> 1] = 6;
    label = 165;
    break;
   case 157:
    var $456 = _strcmp(5263372, 5578448);
    var $457 = ($456 | 0) == 0;
    if ($457) {
      label = 158;
      break;
    } else {
      label = 159;
      break;
    }
   case 158:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5245036 >> 1] = 2484;
    HEAP16[5245028 >> 1] = 3344;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 159:
    var $460 = _strcmp(5263372, 5578432);
    var $461 = ($460 | 0) == 0;
    if ($461) {
      label = 160;
      break;
    } else {
      label = 161;
      break;
    }
   case 160:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3672;
    HEAP16[5245036 >> 1] = 2772;
    HEAP16[5245028 >> 1] = 3736;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 161:
    var $464 = _strcmp(5263372, 5578416);
    var $465 = ($464 | 0) == 0;
    if ($465) {
      label = 162;
      break;
    } else {
      label = 163;
      break;
    }
   case 162:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5245036 >> 1] = 3048;
    HEAP16[5245028 >> 1] = 4104;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 48;
    label = 165;
    break;
   case 163:
    var $468 = _strcmp(5263372, 5578400);
    var $469 = ($468 | 0) == 0;
    if ($469) {
      label = 164;
      break;
    } else {
      label = 169;
      break;
    }
   case 164:
    HEAP16[5398712 >> 1] = 2128;
    HEAP16[5242964 >> 1] = 2840;
    HEAP16[5245036 >> 1] = 2136;
    HEAP16[5245028 >> 1] = 2888;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 44;
    label = 165;
    break;
   case 165:
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    label = 168;
    break;
   case 166:
    var $storemerge266;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = $storemerge266;
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    label = 643;
    break;
   case 167:
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1552;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 508251675;
    var $_pr238 = HEAP16[5245028 >> 1];
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    var $472 = ($_pr238 & 65535) > 1600;
    if ($472) {
      label = 168;
      break;
    } else {
      label = 643;
      break;
    }
   case 168:
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 169:
    var $475 = _strcmp(5263372, 5578380);
    var $476 = ($475 | 0) == 0;
    if ($476) {
      label = 170;
      break;
    } else {
      label = 171;
      break;
    }
   case 170:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3684;
    HEAP16[5245036 >> 1] = 2772;
    HEAP16[5245028 >> 1] = 3720;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 6;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 171:
    var $479 = _strcmp(5263372, 5578360);
    var $480 = ($479 | 0) == 0;
    if ($480) {
      label = 172;
      break;
    } else {
      label = 173;
      break;
    }
   case 172:
    HEAP16[5398712 >> 1] = 2742;
    HEAP16[5242964 >> 1] = 3664;
    HEAP16[5245036 >> 1] = 2778;
    HEAP16[5245028 >> 1] = 3728;
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 16;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 173:
    var $483 = _strcmp(5263372, 5578340);
    var $484 = ($483 | 0) == 0;
    if ($484) {
      label = 174;
      break;
    } else {
      label = 175;
      break;
    }
   case 174:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5245036 >> 1] = 3048;
    HEAP16[5245028 >> 1] = 4080;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 24;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 175:
    var $487 = _strcmp(5263372, 5578320);
    var $488 = ($487 | 0) == 0;
    if ($488) {
      label = 176;
      break;
    } else {
      label = 177;
      break;
    }
   case 176:
    HEAP16[5398712 >> 1] = 3043;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5245036 >> 1] = 3060;
    HEAP16[5245028 >> 1] = 4168;
    HEAP16[5243564 >> 1] = 16;
    HEAP32[5263500 >> 2] = 16;
    HEAP32[5263508 >> 2] = 3059;
    HEAP16[5263700 >> 1] = 92;
    HEAP32[5263512 >> 2] = 92;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 8;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 177:
    var $491 = _strcmp(5263372, 5578300);
    var $492 = ($491 | 0) == 0;
    if ($492) {
      label = 178;
      break;
    } else {
      label = 179;
      break;
    }
   case 178:
    HEAP16[5398712 >> 1] = 3254;
    HEAP16[5242964 >> 1] = 4366;
    HEAP16[5245036 >> 1] = 3276;
    HEAP16[5245028 >> 1] = 4464;
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 25;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 179:
    var $495 = _strcmp(5263372, 5578280);
    var $496 = ($495 | 0) == 0;
    if ($496) {
      label = 180;
      break;
    } else {
      label = 181;
      break;
    }
   case 180:
    HEAP16[5242964 >> 1] = 1896;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 181:
    var $499 = HEAP16[5245028 >> 1];
    var $500 = $499 << 16 >> 16 == 2144;
    var $or_cond147 = $352 & $500;
    if ($or_cond147) {
      label = 182;
      break;
    } else {
      label = 184;
      break;
    }
   case 182:
    HEAP16[5398712 >> 1] = 1550;
    HEAP16[5242964 >> 1] = 2088;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 4;
    var $502 = _strcmp(5263372, 5578244);
    var $503 = ($502 | 0) == 0;
    if ($503) {
      label = 183;
      break;
    } else {
      label = 643;
      break;
    }
   case 183:
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 184:
    var $506 = $499 << 16 >> 16 == 2224;
    var $or_cond149 = $352 & $506;
    if ($or_cond149) {
      label = 185;
      break;
    } else {
      label = 186;
      break;
    }
   case 185:
    HEAP16[5398712 >> 1] = 1448;
    HEAP16[5242964 >> 1] = 2176;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 48;
    label = 643;
    break;
   case 186:
    var $509 = $499 << 16 >> 16 == 2376;
    var $or_cond151 = $352 & $509;
    if ($or_cond151) {
      label = 187;
      break;
    } else {
      label = 188;
      break;
    }
   case 187:
    HEAP16[5398712 >> 1] = 1720;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 643;
    break;
   case 188:
    var $512 = $499 << 16 >> 16 == 2672;
    var $or_cond153 = $352 & $512;
    if ($or_cond153) {
      label = 189;
      break;
    } else {
      label = 190;
      break;
    }
   case 189:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 643;
    break;
   case 190:
    var $515 = $499 << 16 >> 16 == 3152;
    var $or_cond155 = $352 & $515;
    if ($or_cond155) {
      label = 191;
      break;
    } else {
      label = 193;
      break;
    }
   case 191:
    HEAP16[5398712 >> 1] = 2056;
    HEAP16[5242964 >> 1] = 3088;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 64;
    var $517 = HEAP32[5243560 >> 2];
    var $518 = ($517 | 0) == -2147483280;
    if ($518) {
      label = 192;
      break;
    } else {
      label = 643;
      break;
    }
   case 192:
    _adobe_coeff(5587508, 5578232);
    label = 643;
    break;
   case 193:
    var $521 = $499 << 16 >> 16 == 3160;
    var $or_cond157 = $352 & $521;
    if ($or_cond157) {
      label = 194;
      break;
    } else {
      label = 195;
      break;
    }
   case 194:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3112;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 44;
    label = 643;
    break;
   case 195:
    var $524 = $499 << 16 >> 16 == 3344;
    var $or_cond159 = $352 & $524;
    if ($or_cond159) {
      label = 196;
      break;
    } else {
      label = 197;
      break;
    }
   case 196:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 4;
    label = 643;
    break;
   case 197:
    var $527 = _strcmp(5263372, 5578220);
    var $528 = ($527 | 0) == 0;
    if ($528) {
      label = 198;
      break;
    } else {
      label = 199;
      break;
    }
   case 198:
    HEAP32[5427632 >> 2] = 1633771873;
    var $530 = HEAP16[5428900 >> 1];
    var $531 = $530 & 65535;
    HEAP32[5561400 >> 2] = $531;
    label = 643;
    break;
   case 199:
    var $533 = $499 << 16 >> 16 == 3516;
    var $or_cond161 = $352 & $533;
    if ($or_cond161) {
      label = 200;
      break;
    } else {
      label = 202;
      break;
    }
   case 200:
    HEAP16[5243564 >> 1] = 14;
    HEAP16[5263700 >> 1] = 42;
    var $535 = HEAP32[5243560 >> 2];
    var $536 = ($535 | 0) == -2147483255;
    if ($536) {
      label = 201;
      break;
    } else {
      label = 261;
      break;
    }
   case 201:
    _adobe_coeff(5587508, 5578208);
    label = 261;
    break;
   case 202:
    var $539 = $499 << 16 >> 16 == 3596;
    var $or_cond163 = $352 & $539;
    if ($or_cond163) {
      label = 203;
      break;
    } else {
      label = 204;
      break;
    }
   case 203:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 74;
    label = 261;
    break;
   case 204:
    var $542 = $499 << 16 >> 16 == 3744;
    var $or_cond165 = $352 & $542;
    if ($or_cond165) {
      label = 205;
      break;
    } else {
      label = 207;
      break;
    }
   case 205:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3684;
    HEAP16[5243564 >> 1] = 16;
    HEAP16[5263700 >> 1] = 8;
    var $544 = HEAP32[5243560 >> 2];
    var $545 = $544 >>> 0 > 41025536;
    if ($545) {
      label = 206;
      break;
    } else {
      label = 643;
      break;
    }
   case 206:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 52;
    label = 643;
    break;
   case 207:
    var $548 = $499 << 16 >> 16 == 3944;
    var $or_cond167 = $352 & $548;
    if ($or_cond167) {
      label = 208;
      break;
    } else {
      label = 209;
      break;
    }
   case 208:
    HEAP16[5398712 >> 1] = 2602;
    HEAP16[5242964 >> 1] = 3908;
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 30;
    label = 643;
    break;
   case 209:
    var $551 = $499 << 16 >> 16 == 3948;
    var $or_cond169 = $352 & $551;
    if ($or_cond169) {
      label = 210;
      break;
    } else {
      label = 214;
      break;
    }
   case 210:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 42;
    var $553 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $553;
    var $554 = HEAP32[5243560 >> 2];
    var $555 = ($554 | 0) == -2147483082;
    if ($555) {
      label = 211;
      break;
    } else {
      var $558 = $554;
      label = 212;
      break;
    }
   case 211:
    _adobe_coeff(5587508, 5578196);
    var $_pr243 = HEAP32[5243560 >> 2];
    var $558 = $_pr243;
    label = 212;
    break;
   case 212:
    var $558;
    var $559 = ($558 | 0) == -2147483052;
    if ($559) {
      label = 213;
      break;
    } else {
      label = 261;
      break;
    }
   case 213:
    _adobe_coeff(5587508, 5578184);
    label = 261;
    break;
   case 214:
    var $562 = $499 << 16 >> 16 == 3984;
    var $or_cond171 = $352 & $562;
    if ($or_cond171) {
      label = 215;
      break;
    } else {
      label = 216;
      break;
    }
   case 215:
    HEAP16[5243564 >> 1] = 20;
    HEAP16[5263700 >> 1] = 76;
    var $564 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $564;
    label = 261;
    break;
   case 216:
    var $566 = $499 << 16 >> 16 == 4104;
    var $or_cond173 = $352 & $566;
    if ($or_cond173) {
      label = 217;
      break;
    } else {
      label = 218;
      break;
    }
   case 217:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 48;
    label = 643;
    break;
   case 218:
    var $569 = $499 << 16 >> 16 == 4152;
    var $or_cond175 = $352 & $569;
    if ($or_cond175) {
      label = 219;
      break;
    } else {
      label = 220;
      break;
    }
   case 219:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 192;
    label = 261;
    break;
   case 220:
    var $572 = $499 << 16 >> 16 == 4160;
    var $or_cond177 = $352 & $572;
    if ($or_cond177) {
      label = 221;
      break;
    } else {
      label = 222;
      break;
    }
   case 221:
    HEAP16[5398712 >> 1] = 3048;
    HEAP16[5242964 >> 1] = 4048;
    HEAP16[5243564 >> 1] = 11;
    HEAP16[5263700 >> 1] = 104;
    label = 643;
    break;
   case 222:
    var $575 = $499 << 16 >> 16 == 4176;
    var $or_cond179 = $352 & $575;
    if ($or_cond179) {
      label = 223;
      break;
    } else {
      label = 224;
      break;
    }
   case 223:
    HEAP16[5398712 >> 1] = 3045;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5263700 >> 1] = 96;
    HEAP16[5243564 >> 1] = 17;
    HEAP32[5263500 >> 2] = 17;
    var $577 = HEAP16[5245036 >> 1];
    var $578 = $577 & 65535;
    HEAP32[5263508 >> 2] = $578;
    HEAP32[5263512 >> 2] = 80;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 224:
    var $580 = $499 << 16 >> 16 == 4312;
    var $or_cond181 = $352 & $580;
    if ($or_cond181) {
      label = 225;
      break;
    } else {
      label = 227;
      break;
    }
   case 225:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 22;
    var $582 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $582;
    var $583 = HEAP32[5243560 >> 2];
    var $584 = ($583 | 0) == -2147483274;
    if ($584) {
      label = 226;
      break;
    } else {
      label = 261;
      break;
    }
   case 226:
    _adobe_coeff(5587508, 5578172);
    label = 261;
    break;
   case 227:
    var $587 = $499 << 16 >> 16 == 4352;
    var $or_cond183 = $352 & $587;
    if ($or_cond183) {
      label = 228;
      break;
    } else {
      label = 230;
      break;
    }
   case 228:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 62;
    var $589 = HEAP32[5243560 >> 2];
    var $590 = ($589 | 0) == -2147483e3;
    if ($590) {
      label = 229;
      break;
    } else {
      label = 261;
      break;
    }
   case 229:
    _adobe_coeff(5587508, 5578160);
    label = 261;
    break;
   case 230:
    var $593 = $499 << 16 >> 16 == 4476;
    var $or_cond185 = $352 & $593;
    if ($or_cond185) {
      label = 231;
      break;
    } else {
      label = 232;
      break;
    }
   case 231:
    HEAP16[5243564 >> 1] = 34;
    HEAP16[5263700 >> 1] = 90;
    label = 261;
    break;
   case 232:
    var $596 = $499 << 16 >> 16 == 4480;
    var $or_cond187 = $352 & $596;
    if ($or_cond187) {
      label = 233;
      break;
    } else {
      label = 234;
      break;
    }
   case 233:
    HEAP16[5398712 >> 1] = 3326;
    HEAP16[5242964 >> 1] = 4432;
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 12;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 234:
    var $599 = $499 << 16 >> 16 == 4496;
    var $or_cond189 = $352 & $599;
    if ($or_cond189) {
      label = 235;
      break;
    } else {
      label = 236;
      break;
    }
   case 235:
    HEAP16[5398712 >> 1] = 3316;
    HEAP16[5242964 >> 1] = 4404;
    HEAP16[5243564 >> 1] = 50;
    HEAP16[5263700 >> 1] = 80;
    label = 643;
    break;
   case 236:
    var $602 = $499 << 16 >> 16 == 4832;
    var $or_cond191 = $352 & $602;
    if ($or_cond191) {
      label = 237;
      break;
    } else {
      label = 239;
      break;
    }
   case 237:
    var $604 = HEAP32[5243560 >> 2];
    var $605 = ($604 | 0) == -2147483039;
    var $606 = $605 ? 51 : 26;
    HEAP16[5243564 >> 1] = $606;
    HEAP16[5263700 >> 1] = 62;
    var $607 = ($604 | 0) == -2147483054;
    if ($607) {
      label = 238;
      break;
    } else {
      label = 261;
      break;
    }
   case 238:
    _adobe_coeff(5587508, 5578148);
    label = 261;
    break;
   case 239:
    var $610 = $499 << 16 >> 16 == 5108;
    var $or_cond193 = $352 & $610;
    if ($or_cond193) {
      label = 240;
      break;
    } else {
      label = 241;
      break;
    }
   case 240:
    HEAP16[5243564 >> 1] = 13;
    HEAP16[5263700 >> 1] = 98;
    label = 261;
    break;
   case 241:
    var $613 = $499 << 16 >> 16 == 5120;
    var $or_cond195 = $352 & $613;
    if ($or_cond195) {
      label = 242;
      break;
    } else {
      label = 243;
      break;
    }
   case 242:
    HEAP16[5243564 >> 1] = 45;
    var $615 = $333 - 45 & 65535;
    HEAP16[5398712 >> 1] = $615;
    HEAP16[5263700 >> 1] = 142;
    HEAP16[5242964 >> 1] = 4916;
    label = 643;
    break;
   case 243:
    var $617 = $499 << 16 >> 16 == 5280;
    var $or_cond197 = $352 & $617;
    if ($or_cond197) {
      label = 244;
      break;
    } else {
      label = 246;
      break;
    }
   case 244:
    HEAP16[5243564 >> 1] = 52;
    HEAP16[5263700 >> 1] = 72;
    var $619 = HEAP32[5243560 >> 2];
    var $620 = ($619 | 0) == -2147482879;
    if ($620) {
      label = 245;
      break;
    } else {
      label = 261;
      break;
    }
   case 245:
    _adobe_coeff(5587508, 5578136);
    label = 261;
    break;
   case 246:
    var $623 = $499 << 16 >> 16 == 5344;
    var $or_cond199 = $352 & $623;
    if ($or_cond199) {
      label = 247;
      break;
    } else {
      label = 253;
      break;
    }
   case 247:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 142;
    var $625 = HEAP32[5243560 >> 2];
    var $626 = ($625 | 0) == -2147483031;
    if ($626) {
      label = 248;
      break;
    } else {
      var $630 = $625;
      label = 249;
      break;
    }
   case 248:
    HEAP16[5243564 >> 1] = 100;
    HEAP16[5263700 >> 1] = 126;
    var $628 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $628;
    _adobe_coeff(5587508, 5578084);
    var $_pr244 = HEAP32[5243560 >> 2];
    var $630 = $_pr244;
    label = 249;
    break;
   case 249:
    var $630;
    var $631 = ($630 | 0) == -2147483024;
    if ($631) {
      label = 250;
      break;
    } else {
      var $634 = $630;
      label = 251;
      break;
    }
   case 250:
    _adobe_coeff(5587508, 5578072);
    var $_pre1 = HEAP32[5243560 >> 2];
    var $634 = $_pre1;
    label = 251;
    break;
   case 251:
    var $634;
    var $635 = ($634 | 0) == -2147483002;
    if ($635) {
      label = 252;
      break;
    } else {
      label = 261;
      break;
    }
   case 252:
    _adobe_coeff(5587508, 5578060);
    label = 261;
    break;
   case 253:
    var $638 = $499 << 16 >> 16 == 5360;
    var $or_cond201 = $352 & $638;
    if ($or_cond201) {
      label = 254;
      break;
    } else {
      label = 255;
      break;
    }
   case 254:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 158;
    label = 261;
    break;
   case 255:
    var $641 = $499 << 16 >> 16 == 5568;
    var $or_cond203 = $352 & $641;
    if ($or_cond203) {
      label = 256;
      break;
    } else {
      label = 257;
      break;
    }
   case 256:
    HEAP16[5243564 >> 1] = 38;
    HEAP16[5263700 >> 1] = 72;
    label = 261;
    break;
   case 257:
    var $644 = $499 << 16 >> 16 == 5712;
    var $or_cond205 = $352 & $644;
    if ($or_cond205) {
      label = 258;
      break;
    } else {
      label = 259;
      break;
    }
   case 258:
    HEAP16[5398712 >> 1] = 3752;
    HEAP16[5242964 >> 1] = 5640;
    HEAP16[5243564 >> 1] = 20;
    HEAP16[5263700 >> 1] = 62;
    label = 643;
    break;
   case 259:
    var $647 = $499 << 16 >> 16 == 5792;
    var $or_cond207 = $352 & $647;
    if ($or_cond207) {
      label = 260;
      break;
    } else {
      label = 262;
      break;
    }
   case 260:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 158;
    label = 261;
    break;
   case 261:
    var $649 = HEAP16[5243564 >> 1];
    var $650 = HEAP16[5398712 >> 1];
    var $651 = $650 - $649 & 65535;
    HEAP16[5398712 >> 1] = $651;
    var $652 = HEAP16[5263700 >> 1];
    var $653 = HEAP16[5242964 >> 1];
    var $654 = $653 - $652 & 65535;
    HEAP16[5242964 >> 1] = $654;
    label = 643;
    break;
   case 262:
    var $656 = $499 << 16 >> 16 == 5920;
    var $or_cond209 = $352 & $656;
    if ($or_cond209) {
      label = 263;
      break;
    } else {
      label = 264;
      break;
    }
   case 263:
    HEAP16[5398712 >> 1] = 3870;
    HEAP16[5242964 >> 1] = 5796;
    HEAP16[5243564 >> 1] = 80;
    HEAP16[5263700 >> 1] = 122;
    label = 643;
    break;
   case 264:
    var $659 = _strcmp(5263372, 5578056);
    var $660 = ($659 | 0) == 0;
    if ($660) {
      label = 265;
      break;
    } else {
      label = 266;
      break;
    }
   case 265:
    var $662 = HEAPF32[5561124 >> 2];
    var $663 = $662;
    var $664 = $663 * .4857685009487666;
    var $665 = $664;
    HEAPF32[5561124 >> 2] = $665;
    var $666 = HEAPF32[5561132 >> 2];
    var $667 = $666;
    var $668 = $667 * .807570977917981;
    var $669 = $668;
    HEAPF32[5561132 >> 2] = $669;
    label = 643;
    break;
   case 266:
    var $671 = _strcmp(5263372, 5578052);
    var $672 = ($671 | 0) == 0;
    if ($672) {
      label = 267;
      break;
    } else {
      label = 268;
      break;
    }
   case 267:
    var $674 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $674;
    HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 643;
    break;
   case 268:
    var $676 = _strcmp(5263372, 5578044);
    var $677 = ($676 | 0) == 0;
    if ($677) {
      label = 272;
      break;
    } else {
      label = 269;
      break;
    }
   case 269:
    var $679 = _strcmp(5263372, 5578040);
    var $680 = ($679 | 0) == 0;
    if ($680) {
      label = 272;
      break;
    } else {
      label = 270;
      break;
    }
   case 270:
    var $682 = _strcmp(5263372, 5578036);
    var $683 = ($682 | 0) == 0;
    if ($683) {
      label = 272;
      break;
    } else {
      label = 271;
      break;
    }
   case 271:
    var $685 = _strcmp(5263372, 5578028);
    var $686 = ($685 | 0) == 0;
    if ($686) {
      label = 272;
      break;
    } else {
      label = 273;
      break;
    }
   case 272:
    var $688 = $333 - 3 & 65535;
    HEAP16[5398712 >> 1] = $688;
    var $689 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $689;
    label = 643;
    break;
   case 273:
    var $691 = _strcmp(5263372, 5578024);
    var $692 = ($691 | 0) == 0;
    if ($692) {
      label = 276;
      break;
    } else {
      label = 274;
      break;
    }
   case 274:
    var $694 = _strcmp(5263372, 5577960);
    var $695 = ($694 | 0) == 0;
    if ($695) {
      label = 276;
      break;
    } else {
      label = 275;
      break;
    }
   case 275:
    var $697 = _strcmp(5263372, 5577952);
    var $698 = ($697 | 0) == 0;
    if ($698) {
      label = 276;
      break;
    } else {
      label = 277;
      break;
    }
   case 276:
    var $700 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $700;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 277:
    var $702 = _strcmp(5263372, 5577944);
    var $703 = ($702 | 0) == 0;
    if ($703) {
      label = 278;
      break;
    } else {
      label = 279;
      break;
    }
   case 278:
    var $705 = $334 - 28 & 65535;
    HEAP16[5242964 >> 1] = $705;
    HEAP16[5263700 >> 1] = 6;
    label = 643;
    break;
   case 279:
    var $707 = _strcmp(5263372, 5577936);
    var $708 = ($707 | 0) == 0;
    if ($708) {
      label = 281;
      break;
    } else {
      label = 280;
      break;
    }
   case 280:
    var $710 = _strcmp(5263372, 5577932);
    var $711 = ($710 | 0) == 0;
    if ($711) {
      label = 281;
      break;
    } else {
      label = 282;
      break;
    }
   case 281:
    var $713 = $334 - 42 & 65535;
    HEAP16[5242964 >> 1] = $713;
    label = 643;
    break;
   case 282:
    var $715 = _strcmp(5263372, 5577924);
    var $716 = ($715 | 0) == 0;
    if ($716) {
      label = 284;
      break;
    } else {
      label = 283;
      break;
    }
   case 283:
    var $718 = _strcmp(5263372, 5577916);
    var $719 = ($718 | 0) == 0;
    if ($719) {
      label = 284;
      break;
    } else {
      label = 285;
      break;
    }
   case 284:
    var $721 = $334 - 44 & 65535;
    HEAP16[5242964 >> 1] = $721;
    label = 643;
    break;
   case 285:
    var $723 = _strcmp(5263372, 5577908);
    var $724 = ($723 | 0) == 0;
    if ($724) {
      label = 288;
      break;
    } else {
      label = 286;
      break;
    }
   case 286:
    var $726 = _strcmp(5263372, 5577900);
    var $727 = ($726 | 0) == 0;
    if ($727) {
      label = 288;
      break;
    } else {
      label = 287;
      break;
    }
   case 287:
    var $729 = _strcmp(5263372, 5577892);
    var $730 = ($729 | 0) == 0;
    if ($730) {
      label = 288;
      break;
    } else {
      label = 289;
      break;
    }
   case 288:
    var $732 = $334 - 46 & 65535;
    HEAP16[5242964 >> 1] = $732;
    label = 643;
    break;
   case 289:
    var $734 = _strcmp(5263372, 5577884);
    var $735 = ($734 | 0) == 0;
    if ($735) {
      label = 290;
      break;
    } else {
      label = 291;
      break;
    }
   case 290:
    var $737 = $334 - 52 & 65535;
    HEAP16[5242964 >> 1] = $737;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 291:
    var $739 = _strncmp(5263372, 5577880, 3);
    var $740 = ($739 | 0) == 0;
    if ($740) {
      label = 294;
      break;
    } else {
      label = 292;
      break;
    }
   case 292:
    var $742 = _strncmp(5263372, 5577876, 3);
    var $743 = ($742 | 0) == 0;
    if ($743) {
      label = 294;
      break;
    } else {
      label = 293;
      break;
    }
   case 293:
    var $745 = _strncmp(5263372, 5577872, 3);
    var $746 = ($745 | 0) == 0;
    if ($746) {
      label = 294;
      break;
    } else {
      label = 295;
      break;
    }
   case 294:
    var $748 = $334 - 1 & 65535;
    HEAP16[5242964 >> 1] = $748;
    label = 643;
    break;
   case 295:
    var $750 = _strcmp(5263372, 5577864);
    var $751 = ($750 | 0) == 0;
    if ($751) {
      label = 296;
      break;
    } else {
      label = 298;
      break;
    }
   case 296:
    var $753 = HEAP32[5263696 >> 2];
    var $754 = ($753 | 0) == 0;
    if ($754) {
      label = 643;
      break;
    } else {
      label = 297;
      break;
    }
   case 297:
    var $756 = $334 + 3 & 65535;
    HEAP16[5242964 >> 1] = $756;
    var $757 = $334 + 6 & 65535;
    HEAP16[5245028 >> 1] = $757;
    label = 643;
    break;
   case 298:
    var $759 = _strcmp(5263372, 5577856);
    var $760 = ($759 | 0) == 0;
    if ($760) {
      label = 299;
      break;
    } else {
      label = 300;
      break;
    }
   case 299:
    HEAP16[5263700 >> 1] = 1;
    var $762 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $762;
    HEAP32[5427632 >> 2] = -1802201964;
    label = 643;
    break;
   case 300:
    var $764 = _strncmp(5263372, 5577852, 3);
    var $765 = ($764 | 0) == 0;
    if ($765) {
      label = 301;
      break;
    } else {
      label = 302;
      break;
    }
   case 301:
    HEAP16[5263700 >> 1] = 6;
    var $767 = $334 - 14 & 65535;
    HEAP16[5242964 >> 1] = $767;
    label = 643;
    break;
   case 302:
    var $769 = _strncmp(5263372, 5577848, 3);
    var $770 = ($769 | 0) == 0;
    if ($770) {
      label = 303;
      break;
    } else {
      label = 306;
      break;
    }
   case 303:
    var $772 = $334 << 16 >> 16 == 3264;
    if ($772) {
      label = 304;
      break;
    } else {
      label = 305;
      break;
    }
   case 304:
    HEAP16[5242964 >> 1] = 3232;
    label = 643;
    break;
   case 305:
    var $775 = $334 - 8 & 65535;
    HEAP16[5242964 >> 1] = $775;
    label = 643;
    break;
   case 306:
    var $777 = _strncmp(5263372, 5577840, 4);
    var $778 = ($777 | 0) == 0;
    if ($778) {
      label = 307;
      break;
    } else {
      label = 308;
      break;
    }
   case 307:
    var $780 = $334 - 32 & 65535;
    HEAP16[5242964 >> 1] = $780;
    label = 643;
    break;
   case 308:
    var $782 = _strcmp(5263628, 5587524);
    var $783 = ($782 | 0) == 0;
    var $784 = $499 << 16 >> 16 == 4032;
    var $or_cond211 = $783 & $784;
    if ($or_cond211) {
      label = 309;
      break;
    } else {
      label = 310;
      break;
    }
   case 309:
    _adobe_coeff(5587524, 5577824);
    label = 643;
    break;
   case 310:
    var $787 = _strncmp(5263372, 5577776, 9);
    var $788 = ($787 | 0) == 0;
    if ($788) {
      label = 311;
      break;
    } else {
      label = 313;
      break;
    }
   case 311:
    HEAP32[5263696 >> 2] = 24;
    HEAP32[5427632 >> 2] = -1802201964;
    var $790 = HEAP8[5263381];
    var $791 = $790 << 24 >> 24 == 55;
    var $792 = HEAPF32[5264096 >> 2];
    var $793 = $792 >= 400;
    var $or_cond5 = $791 & $793;
    if ($or_cond5) {
      label = 312;
      break;
    } else {
      label = 643;
      break;
    }
   case 312:
    HEAP32[5561400 >> 2] = 255;
    label = 643;
    break;
   case 313:
    var $796 = _strncmp(5263372, 5577772, 2);
    var $797 = ($796 | 0) == 0;
    if ($797) {
      label = 314;
      break;
    } else {
      label = 315;
      break;
    }
   case 314:
    var $799 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $799;
    label = 643;
    break;
   case 315:
    if (($zero_fsize_0 | 0) == 1581060) {
      label = 316;
      break;
    } else if (($zero_fsize_0 | 0) == 2465792) {
      label = 317;
      break;
    } else if (($zero_fsize_0 | 0) == 4771840) {
      label = 319;
      break;
    } else {
      label = 324;
      break;
    }
   case 316:
    HEAP16[5398712 >> 1] = 963;
    HEAP16[5242964 >> 1] = 1287;
    HEAP16[5245028 >> 1] = 1632;
    HEAP32[5263496 >> 2] = 1012;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 505290270;
    _simple_coeff(3);
    HEAPF32[5245640 >> 2] = 1.2085000276565552;
    HEAPF32[5245644 >> 2] = 1.0943000316619873;
    HEAPF32[5245652 >> 2] = 1.1102999448776245;
    label = 318;
    break;
   case 317:
    HEAP16[5398712 >> 1] = 1203;
    HEAP16[5242964 >> 1] = 1616;
    HEAP16[5245028 >> 1] = 2048;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1263225675;
    _adobe_coeff(5587524, 5577764);
    label = 318;
    break;
   case 318:
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 6;
    label = 643;
    break;
   case 319:
    HEAP16[5398712 >> 1] = 1540;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -505290271;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 6;
    var $805 = HEAP32[5243568 >> 2];
    var $806 = ($805 | 0) == 0;
    if ($806) {
      label = 320;
      break;
    } else {
      label = 322;
      break;
    }
   case 320:
    var $808 = _nikon_e995();
    var $809 = ($808 | 0) == 0;
    if ($809) {
      label = 322;
      break;
    } else {
      label = 321;
      break;
    }
   case 321:
    HEAP8[5263372] = HEAP8[5577756];
    HEAP8[5263373] = HEAP8[5577757];
    HEAP8[5263374] = HEAP8[5577758];
    HEAP8[5263375] = HEAP8[5577759];
    HEAP8[5263376] = HEAP8[5577760];
    label = 322;
    break;
   case 322:
    var $812 = _strcmp(5263372, 5577756);
    var $813 = ($812 | 0) == 0;
    if ($813) {
      label = 643;
      break;
    } else {
      label = 323;
      break;
    }
   case 323:
    HEAP32[5427632 >> 2] = -1263225676;
    _simple_coeff(3);
    HEAPF32[5245640 >> 2] = 1.1959999799728394;
    HEAPF32[5245644 >> 2] = 1.246000051498413;
    HEAPF32[5245648 >> 2] = 1.0180000066757202;
    label = 643;
    break;
   case 324:
    var $816 = _strcmp(5263372, 5577748);
    var $817 = ($816 | 0) == 0;
    if ($817) {
      label = 325;
      break;
    } else {
      label = 328;
      break;
    }
   case 325:
    var $819 = HEAP32[5243568 >> 2];
    var $820 = ($819 | 0) == 0;
    if ($820) {
      label = 326;
      break;
    } else {
      label = 327;
      break;
    }
   case 326:
    var $822 = _nikon_e2100();
    var $823 = ($822 | 0) == 0;
    if ($823) {
      label = 329;
      break;
    } else {
      label = 327;
      break;
    }
   case 327:
    HEAP16[5398712 >> 1] = 1206;
    HEAP16[5242964 >> 1] = 1616;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 328:
    var $826 = _strcmp(5263372, 5577740);
    var $827 = ($826 | 0) == 0;
    if ($827) {
      label = 329;
      break;
    } else {
      label = 330;
      break;
    }
   case 329:
    HEAP8[5263372] = HEAP8[5577740];
    HEAP8[5263373] = HEAP8[5577741];
    HEAP8[5263374] = HEAP8[5577742];
    HEAP8[5263375] = HEAP8[5577743];
    HEAP8[5263376] = HEAP8[5577744];
    HEAP8[5263377] = HEAP8[5577745];
    HEAP16[5398712 >> 1] = 1204;
    HEAP16[5242964 >> 1] = 1616;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1263225675;
    label = 643;
    break;
   case 330:
    if (($zero_fsize_0 | 0) == 4775936) {
      label = 331;
      break;
    } else if (($zero_fsize_0 | 0) == 5869568) {
      label = 343;
      break;
    } else {
      label = 347;
      break;
    }
   case 331:
    HEAP16[5398712 >> 1] = 1542;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    var $831 = HEAP32[5243568 >> 2];
    var $832 = ($831 | 0) == 0;
    if ($832) {
      label = 332;
      break;
    } else {
      label = 333;
      break;
    }
   case 332:
    _nikon_3700();
    label = 333;
    break;
   case 333:
    var $834 = HEAP8[5263372];
    var $835 = $834 << 24 >> 24 == 69;
    if ($835) {
      label = 334;
      break;
    } else {
      label = 336;
      break;
    }
   case 334:
    var $837 = _atoi(5263373);
    var $838 = ($837 | 0) < 3700;
    if ($838) {
      label = 335;
      break;
    } else {
      label = 336;
      break;
    }
   case 335:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 336;
    break;
   case 336:
    var $841 = _strcmp(5263372, 5577728);
    var $842 = ($841 | 0) == 0;
    if ($842) {
      label = 337;
      break;
    } else {
      label = 338;
      break;
    }
   case 337:
    HEAP32[5403048 >> 2] = 1;
    HEAP32[5427632 >> 2] = 370546198;
    label = 338;
    break;
   case 338:
    var $844 = HEAP8[5263628];
    var $845 = $844 << 24 >> 24 == 79;
    if ($845) {
      label = 339;
      break;
    } else {
      label = 643;
      break;
    }
   case 339:
    var $847 = _find_green(12, 32, 1188864, 3576832);
    var $848 = $847 & -1;
    var $849 = _find_green(12, 32, 2383920, 2387016);
    var $850 = $849 & -1;
    var $ispos = ($848 | 0) > -1;
    var $neg = -$848 | 0;
    var $851 = $ispos ? $848 : $neg;
    var $ispos226 = ($850 | 0) > -1;
    var $neg227 = -$850 | 0;
    var $852 = $ispos226 ? $850 : $neg227;
    var $853 = ($851 | 0) < ($852 | 0);
    if ($853) {
      label = 340;
      break;
    } else {
      var $i_4 = $848;
      label = 341;
      break;
    }
   case 340:
    HEAP32[5263696 >> 2] = 24;
    var $i_4 = $850;
    label = 341;
    break;
   case 341:
    var $i_4;
    var $856 = ($i_4 | 0) < 0;
    if ($856) {
      label = 342;
      break;
    } else {
      label = 643;
      break;
    }
   case 342:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 343:
    HEAP16[5398712 >> 1] = 1710;
    HEAP16[5242964 >> 1] = 2288;
    HEAP32[5427632 >> 2] = 370546198;
    var $859 = HEAP32[5243568 >> 2];
    var $860 = ($859 | 0) == 0;
    if ($860) {
      label = 344;
      break;
    } else {
      label = 346;
      break;
    }
   case 344:
    var $862 = _minolta_z2();
    var $863 = ($862 | 0) == 0;
    if ($863) {
      label = 346;
      break;
    } else {
      label = 345;
      break;
    }
   case 345:
    var $$etemp$1 = 5263628;
    var $$etemp$0$0 = 1869506893;
    var $$etemp$0$1 = 6386796;
    var $st$3$0 = $$etemp$1 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = $$etemp$1 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    for (var $$src = 5577716, $$dest = 5263372, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    label = 346;
    break;
   case 346:
    HEAP32[5263692 >> 2] = 36;
    var $865 = HEAP8[5263628];
    var $866 = $865 << 24 >> 24 == 77;
    var $867 = $866 & 1;
    var $868 = -$867 | 0;
    var $869 = $868 & 24;
    var $870 = $869 | 6;
    HEAP32[5263696 >> 2] = $870;
    label = 643;
    break;
   case 347:
    var $872 = _strcmp(5263372, 5577708);
    var $873 = ($872 | 0) == 0;
    if ($873) {
      label = 348;
      break;
    } else {
      label = 349;
      break;
    }
   case 348:
    HEAP16[5398712 >> 1] = 1708;
    HEAP16[5242964 >> 1] = 2288;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 349:
    if (($zero_fsize_0 | 0) == 7438336) {
      label = 350;
      break;
    } else if (($zero_fsize_0 | 0) == 8998912) {
      label = 351;
      break;
    } else {
      label = 352;
      break;
    }
   case 350:
    HEAP16[5398712 >> 1] = 1924;
    HEAP16[5242964 >> 1] = 2576;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 351:
    HEAP16[5398712 >> 1] = 2118;
    HEAP16[5242964 >> 1] = 2832;
    HEAP32[5263496 >> 2] = 3971;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 352:
    var $879 = _strcmp(5263628, 5573316);
    var $880 = ($879 | 0) == 0;
    if ($880) {
      label = 353;
      break;
    } else {
      label = 365;
      break;
    }
   case 353:
    var $882 = _strcmp(5263379, 5577700);
    var $883 = ($882 | 0) == 0;
    if ($883) {
      label = 354;
      break;
    } else {
      label = 355;
      break;
    }
   case 354:
    HEAP8[5263372] = HEAP8[5577700];
    HEAP8[5263373] = HEAP8[5577701];
    HEAP8[5263374] = HEAP8[5577702];
    HEAP8[5263375] = HEAP8[5577703];
    HEAP8[5263376] = HEAP8[5577704];
    HEAP8[5263377] = HEAP8[5577705];
    HEAP16[5398712 >> 1] = 2144;
    HEAP16[5242964 >> 1] = 2880;
    HEAP32[5403048 >> 2] = 6;
    var $895 = 2144;
    var $_pr247 = 2880;
    label = 359;
    break;
   case 355:
    var $886 = HEAP32[5263692 >> 2];
    var $887 = ($886 | 0) == 36;
    if ($887) {
      var $895 = $333;
      var $_pr247 = $334;
      label = 359;
      break;
    } else {
      label = 356;
      break;
    }
   case 356:
    var $889 = ($288 | 0) == 2;
    if ($889) {
      label = 357;
      break;
    } else {
      var $894 = 15872;
      label = 358;
      break;
    }
   case 357:
    var $891 = HEAP32[5244920 >> 2];
    var $892 = ($891 | 0) != 0;
    var $phitmp = $892 ? 12032 : 15872;
    var $894 = $phitmp;
    label = 358;
    break;
   case 358:
    var $894;
    HEAP32[5263496 >> 2] = $894;
    var $895 = $333;
    var $_pr247 = $334;
    label = 359;
    break;
   case 359:
    var $_pr247;
    var $895;
    var $896 = HEAP16[5245036 >> 1];
    var $897 = $896 & 65535;
    var $898 = $895 & 65535;
    var $899 = $897 - $898 | 0;
    var $900 = $899 >> 2;
    var $901 = $900 << 1;
    var $902 = $901 & 65535;
    HEAP16[5243564 >> 1] = $902;
    var $903 = $499 & 65535;
    var $904 = $_pr247 & 65535;
    var $905 = $903 - $904 | 0;
    var $906 = $905 >> 2;
    var $907 = $906 << 1;
    var $908 = $907 & 65535;
    HEAP16[5263700 >> 1] = $908;
    if ($_pr247 << 16 >> 16 == 2848) {
      label = 360;
      break;
    } else if ($_pr247 << 16 >> 16 == 3328) {
      label = 361;
      break;
    } else if ($_pr247 << 16 >> 16 == 4952) {
      label = 362;
      break;
    } else {
      label = 363;
      break;
    }
   case 360:
    HEAP32[5427632 >> 2] = 370546198;
    label = 363;
    break;
   case 361:
    HEAP16[5242964 >> 1] = 3262;
    HEAP16[5263700 >> 1] = 34;
    label = 363;
    break;
   case 362:
    HEAP16[5263700 >> 1] = 0;
    HEAP32[5427632 >> 2] = 2;
    label = 363;
    break;
   case 363:
    var $911 = HEAP32[5398904 >> 2];
    var $912 = ($911 | 0) == 0;
    if ($912) {
      label = 643;
      break;
    } else {
      label = 364;
      break;
    }
   case 364:
    var $914 = $903 * $288 & -1;
    var $915 = $914 & 65535;
    HEAP16[5245028 >> 1] = $915;
    label = 643;
    break;
   case 365:
    var $917 = _strcmp(5263372, 5577652);
    var $918 = ($917 | 0) == 0;
    if ($918) {
      label = 366;
      break;
    } else {
      label = 367;
      break;
    }
   case 366:
    HEAP16[5398712 >> 1] = 986;
    HEAP16[5242964 >> 1] = 1534;
    HEAP32[5428492 >> 2] = 513;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 22;
    label = 643;
    break;
   case 367:
    var $921 = _strcmp(5263372, 5577644);
    var $922 = ($921 | 0) == 0;
    if ($922) {
      label = 368;
      break;
    } else {
      label = 369;
      break;
    }
   case 368:
    HEAP16[5398712 >> 1] = 1712;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5245028 >> 1] = 2336;
    label = 385;
    break;
   case 369:
    var $925 = _strcmp(5263372, 5577636);
    var $926 = ($925 | 0) == 0;
    if ($926) {
      label = 382;
      break;
    } else {
      label = 370;
      break;
    }
   case 370:
    var $928 = _strcasecmp(5263628, 5579172);
    var $929 = ($928 | 0) == 0;
    if ($929) {
      label = 371;
      break;
    } else {
      label = 386;
      break;
    }
   case 371:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 4095;
    var $931 = _strncmp(5263372, 5577624, 8);
    var $932 = ($931 | 0) == 0;
    if ($932) {
      label = 372;
      break;
    } else {
      label = 375;
      break;
    }
   case 372:
    var $934 = _strcmp(5263372, 5586576);
    var $935 = ($934 | 0) == 0;
    if ($935) {
      label = 373;
      break;
    } else {
      label = 374;
      break;
    }
   case 373:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 374;
    break;
   case 374:
    HEAP32[5244036 >> 2] = 12;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 375:
    var $939 = _strncmp(5263372, 5577616, 5);
    var $940 = ($939 | 0) == 0;
    if ($940) {
      label = 378;
      break;
    } else {
      label = 376;
      break;
    }
   case 376:
    var $942 = _strncmp(5263372, 5577608, 5);
    var $943 = ($942 | 0) == 0;
    if ($943) {
      label = 378;
      break;
    } else {
      label = 377;
      break;
    }
   case 377:
    var $945 = _strncmp(5263372, 5577600, 6);
    var $946 = ($945 | 0) == 0;
    if ($946) {
      label = 378;
      break;
    } else {
      label = 379;
      break;
    }
   case 378:
    var $947 = HEAP8[5263372];
    var $948 = $947 << 24 >> 24 == 77;
    var $949 = $948 & 1;
    var $_sum136 = $949 | 6;
    var $950 = $_sum136 + 5263372 | 0;
    var $951 = _sprintf(5263392, 5577588, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $950, tempInt));
    _adobe_coeff(5263628, 5263392);
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 379:
    var $953 = _strncmp(5263372, 5577576, 8);
    var $954 = ($953 | 0) == 0;
    if ($954) {
      label = 380;
      break;
    } else {
      label = 643;
      break;
    }
   case 380:
    var $956 = HEAP8[5263380];
    if ($956 << 24 >> 24 == 52) {
      label = 381;
      break;
    } else if ($956 << 24 >> 24 == 53) {
      label = 382;
      break;
    } else if ($956 << 24 >> 24 == 54) {
      label = 383;
      break;
    } else {
      label = 384;
      break;
    }
   case 381:
    HEAP16[5398712 >> 1] = 1716;
    HEAP16[5242964 >> 1] = 2304;
    label = 384;
    break;
   case 382:
    HEAP16[5398712 >> 1] = 1956;
    HEAP16[5242964 >> 1] = 2607;
    HEAP16[5245028 >> 1] = 2624;
    label = 384;
    break;
   case 383:
    HEAP16[5398712 >> 1] = 2136;
    HEAP16[5242964 >> 1] = 2848;
    label = 384;
    break;
   case 384:
    var $960 = HEAP32[5428492 >> 2];
    var $961 = $960 + 14 | 0;
    HEAP32[5428492 >> 2] = $961;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 385;
    break;
   case 385:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 991;
    HEAP16[5262944 >> 1] = 19789;
    label = 643;
    break;
   case 386:
    var $964 = _strcmp(5263372, 5577568);
    var $965 = ($964 | 0) == 0;
    if ($965) {
      label = 387;
      break;
    } else {
      label = 388;
      break;
    }
   case 387:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5428496 >> 2] = -1;
    label = 643;
    break;
   case 388:
    var $968 = _strcmp(5263372, 5577540);
    var $969 = ($968 | 0) == 0;
    if ($969) {
      label = 389;
      break;
    } else {
      label = 390;
      break;
    }
   case 389:
    var $971 = $333 - 2 & 65535;
    HEAP16[5398712 >> 1] = $971;
    label = 643;
    break;
   case 390:
    var $973 = _strcmp(5263372, 5577532);
    var $974 = ($973 | 0) == 0;
    if ($974) {
      label = 391;
      break;
    } else {
      label = 394;
      break;
    }
   case 391:
    var $976 = ($zero_fsize_0 | 0) == 3178560;
    if ($976) {
      label = 392;
      break;
    } else {
      label = 393;
      break;
    }
   case 392:
    HEAP16[5398712 >> 1] = 1540;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5263692 >> 2] = 82;
    var $978 = HEAPF32[5561124 >> 2];
    var $979 = $978 * 4;
    HEAPF32[5561124 >> 2] = $979;
    var $980 = HEAPF32[5561132 >> 2];
    var $981 = $980 * 4;
    HEAPF32[5561132 >> 2] = $981;
    label = 643;
    break;
   case 393:
    HEAP16[5398712 >> 1] = 1544;
    HEAP16[5242964 >> 1] = 2068;
    HEAP16[5245028 >> 1] = 3136;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3964;
    label = 643;
    break;
   case 394:
    var $984 = ($zero_fsize_0 | 0) == 6114240;
    if ($984) {
      label = 395;
      break;
    } else {
      label = 396;
      break;
    }
   case 395:
    HEAP16[5398712 >> 1] = 1737;
    HEAP16[5242964 >> 1] = 2324;
    HEAP16[5245028 >> 1] = 3520;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3962;
    label = 643;
    break;
   case 396:
    var $987 = _strcmp(5263372, 5577520);
    var $988 = ($987 | 0) == 0;
    if ($988) {
      label = 397;
      break;
    } else {
      label = 398;
      break;
    }
   case 397:
    HEAP16[5398712 >> 1] = 2302;
    HEAP16[5242964 >> 1] = 3072;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 398:
    var $991 = _strcmp(5263372, 5577512);
    var $992 = ($991 | 0) == 0;
    if ($992) {
      label = 399;
      break;
    } else {
      label = 400;
      break;
    }
   case 399:
    HEAP16[5398712 >> 1] = 2448;
    HEAP16[5242964 >> 1] = 3264;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 64512;
    label = 643;
    break;
   case 400:
    var $995 = _strncmp(5263372, 5577508, 3);
    var $996 = ($995 | 0) == 0;
    if ($996) {
      label = 401;
      break;
    } else {
      label = 402;
      break;
    }
   case 401:
    HEAP16[5398712 >> 1] = 2448;
    HEAP16[5242964 >> 1] = 3264;
    var $998 = ($zero_fsize_0 | 0) / 4896 & -1;
    var $999 = $998 & 65535;
    HEAP16[5245028 >> 1] = $999;
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 402:
    var $1001 = _strcmp(5263628, 5587532);
    var $1002 = ($1001 | 0) == 0;
    var $1003 = $499 << 16 >> 16 == 4704;
    var $or_cond213 = $1002 & $1003;
    if ($or_cond213) {
      label = 403;
      break;
    } else {
      label = 404;
      break;
    }
   case 403:
    HEAP16[5243564 >> 1] = 8;
    var $1005 = $333 - 8 & 65535;
    HEAP16[5398712 >> 1] = $1005;
    HEAP16[5263700 >> 1] = 8;
    var $1006 = $334 - 16 & 65535;
    HEAP16[5242964 >> 1] = $1006;
    HEAP32[5263696 >> 2] = 32;
    label = 643;
    break;
   case 404:
    var $1008 = $499 << 16 >> 16 == 5632;
    var $or_cond215 = $1002 & $1008;
    if ($or_cond215) {
      label = 405;
      break;
    } else {
      label = 407;
      break;
    }
   case 405:
    HEAP16[5262944 >> 1] = 18761;
    HEAP16[5398712 >> 1] = 3694;
    HEAP16[5243564 >> 1] = 2;
    var $1010 = $391 + 32 | 0;
    var $1011 = $1010 & 65535;
    HEAP16[5263700 >> 1] = $1011;
    var $1012 = 5542 - $391 | 0;
    var $1013 = $1012 & 65535;
    HEAP16[5242964 >> 1] = $1013;
    var $1014 = ($391 | 0) == 12;
    if ($1014) {
      label = 406;
      break;
    } else {
      label = 643;
      break;
    }
   case 406:
    HEAP32[5263696 >> 2] = 80;
    label = 643;
    break;
   case 407:
    var $1017 = _strcmp(5263372, 5577504);
    var $1018 = ($1017 | 0) == 0;
    if ($1018) {
      label = 408;
      break;
    } else {
      label = 410;
      break;
    }
   case 408:
    HEAP16[5262944 >> 1] = 18761;
    var $1020 = $333 - 20 & 65535;
    HEAP16[5398712 >> 1] = $1020;
    HEAP16[5243564 >> 1] = 2;
    var $1021 = $334 - 6 & 65535;
    HEAP16[5242964 >> 1] = $1021;
    var $1022 = ($1021 & 65535) > 3682;
    if ($1022) {
      label = 409;
      break;
    } else {
      label = 643;
      break;
    }
   case 409:
    var $1024 = $333 - 30 & 65535;
    HEAP16[5398712 >> 1] = $1024;
    var $1025 = $334 - 52 & 65535;
    HEAP16[5242964 >> 1] = $1025;
    HEAP16[5243564 >> 1] = 8;
    label = 643;
    break;
   case 410:
    var $1027 = _strcmp(5263372, 5577496);
    var $1028 = ($1027 | 0) == 0;
    if ($1028) {
      label = 411;
      break;
    } else {
      label = 413;
      break;
    }
   case 411:
    HEAP16[5262944 >> 1] = 18761;
    var $1030 = $333 - 3 & 65535;
    HEAP16[5398712 >> 1] = $1030;
    HEAP16[5243564 >> 1] = 2;
    var $1031 = $334 - 10 & 65535;
    HEAP16[5242964 >> 1] = $1031;
    var $1032 = ($1031 & 65535) > 3718;
    if ($1032) {
      label = 412;
      break;
    } else {
      label = 643;
      break;
    }
   case 412:
    var $1034 = $333 - 31 & 65535;
    HEAP16[5398712 >> 1] = $1034;
    var $1035 = $334 - 66 & 65535;
    HEAP16[5242964 >> 1] = $1035;
    HEAP16[5243564 >> 1] = 8;
    label = 643;
    break;
   case 413:
    if (($zero_fsize_0 | 0) == 24e6) {
      label = 414;
      break;
    } else if (($zero_fsize_0 | 0) == 20487168) {
      var $storemerge138 = 3648;
      var $storemerge139 = 2808;
      label = 415;
      break;
    } else {
      label = 416;
      break;
    }
   case 414:
    var $storemerge138 = 4e3;
    var $storemerge139 = 3e3;
    label = 415;
    break;
   case 415:
    var $storemerge139;
    var $storemerge138;
    HEAP16[5398712 >> 1] = $storemerge139;
    HEAP16[5242964 >> 1] = $storemerge138;
    HEAP8[5263372] = HEAP8[5577488];
    HEAP8[5263373] = HEAP8[5577489];
    HEAP8[5263374] = HEAP8[5577490];
    HEAP8[5263375] = HEAP8[5577491];
    HEAP8[5263376] = HEAP8[5577492];
    HEAP8[5263377] = HEAP8[5577493];
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 6;
    HEAP32[5263496 >> 2] = 991;
    label = 643;
    break;
   case 416:
    var $1040 = _strcmp(5263372, 5577480);
    var $1041 = ($1040 | 0) == 0;
    if ($1041) {
      label = 417;
      break;
    } else {
      label = 418;
      break;
    }
   case 417:
    HEAP16[5398712 >> 1] = 3045;
    HEAP16[5242964 >> 1] = 4070;
    HEAP16[5243564 >> 1] = 3;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 418:
    var $1044 = _strcmp(5263372, 5577468);
    var $1045 = ($1044 | 0) == 0;
    if ($1045) {
      label = 419;
      break;
    } else {
      label = 420;
      break;
    }
   case 419:
    HEAP16[5398712 >> 1] = 484;
    HEAP16[5242964 >> 1] = 644;
    HEAP32[5263692 >> 2] = 82;
    HEAP32[5403048 >> 2] = 2;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5561400 >> 2] = 16;
    label = 643;
    break;
   case 420:
    var $1048 = _strcmp(5263372, 5577436);
    var $1049 = ($1048 | 0) == 0;
    if ($1049) {
      label = 421;
      break;
    } else {
      label = 422;
      break;
    }
   case 421:
    var $1051 = HEAP16[5245036 >> 1];
    HEAP16[5243564 >> 1] = 2;
    var $1052 = $1051 - 2 & 65535;
    HEAP16[5398712 >> 1] = $1052;
    label = 643;
    break;
   case 422:
    var $1054 = _strcmp(5263372, 5577428);
    var $1055 = ($1054 | 0) == 0;
    if ($1055) {
      label = 423;
      break;
    } else {
      label = 424;
      break;
    }
   case 423:
    HEAP16[5398712 >> 1] = 1200;
    HEAP16[5242964 >> 1] = 1600;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 424:
    var $1058 = _strcmp(5263372, 5577420);
    var $1059 = ($1058 | 0) == 0;
    if ($1059) {
      label = 425;
      break;
    } else {
      label = 426;
      break;
    }
   case 425:
    HEAP16[5398712 >> 1] = 480;
    HEAP16[5242964 >> 1] = 640;
    HEAP32[5263692 >> 2] = 82;
    _gamma_curve(.45, 4.5, 1, 255);
    label = 643;
    break;
   case 426:
    var $1062 = _strcmp(5263372, 5577412);
    var $1063 = ($1062 | 0) == 0;
    if ($1063) {
      label = 427;
      break;
    } else {
      label = 428;
      break;
    }
   case 427:
    HEAP16[5398712 >> 1] = 768;
    HEAP16[5242964 >> 1] = 1024;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 428:
    var $1066 = _strcmp(5263372, 5577404);
    var $1067 = ($1066 | 0) == 0;
    if ($1067) {
      label = 429;
      break;
    } else {
      label = 430;
      break;
    }
   case 429:
    HEAP16[5398712 >> 1] = 1040;
    HEAP16[5242964 >> 1] = 1392;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 430:
    var $1070 = _strcmp(5263372, 5577396);
    var $1071 = ($1070 | 0) == 0;
    if ($1071) {
      label = 431;
      break;
    } else {
      label = 432;
      break;
    }
   case 431:
    HEAP16[5398712 >> 1] = 1200;
    HEAP16[5242964 >> 1] = 1600;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 432:
    var $1074 = _strcmp(5263372, 5577388);
    var $1075 = ($1074 | 0) == 0;
    if ($1075) {
      label = 433;
      break;
    } else {
      label = 434;
      break;
    }
   case 433:
    HEAP16[5398712 >> 1] = 1958;
    HEAP16[5242964 >> 1] = 2588;
    var $1077 = ($zero_fsize_0 | 0) < 75e5;
    var $1078 = $1077 ? 82 : 4;
    HEAP32[5263692 >> 2] = $1078;
    var $1079 = $zero_fsize_0 >> 22;
    var $1080 = $1079 * -5067304 & -1;
    var $1081 = $1080 + $zero_fsize_0 | 0;
    HEAP32[5428492 >> 2] = $1081;
    HEAP32[5263496 >> 2] = 65520;
    label = 643;
    break;
   case 434:
    var $1083 = _strcmp(5263372, 5577380);
    var $1084 = ($1083 | 0) == 0;
    if ($1084) {
      label = 435;
      break;
    } else {
      label = 436;
      break;
    }
   case 435:
    HEAP16[5398712 >> 1] = 2469;
    HEAP16[5242964 >> 1] = 3272;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 65520;
    label = 643;
    break;
   case 436:
    var $1087 = _strcmp(5263372, 5577368);
    var $1088 = ($1087 | 0) == 0;
    if ($1088) {
      label = 437;
      break;
    } else {
      label = 438;
      break;
    }
   case 437:
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1375;
    HEAP16[5245028 >> 1] = 1376;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263496 >> 2] = 1023;
    var $1090 = ($zero_fsize_0 | 0) < 2e6;
    var $1091 = $1090 ? 82 : 4;
    HEAP32[5263692 >> 2] = $1091;
    label = 643;
    break;
   case 438:
    var $1093 = _strcmp(5263372, 5577360);
    var $1094 = ($1093 | 0) == 0;
    if ($1094) {
      label = 439;
      break;
    } else {
      label = 440;
      break;
    }
   case 439:
    HEAP16[5398712 >> 1] = 1207;
    HEAP16[5242964 >> 1] = 1608;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5428492 >> 2] = 3212;
    HEAP32[5263496 >> 2] = 1023;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 440:
    var $1097 = _strcmp(5263372, 5577328);
    var $1098 = ($1097 | 0) == 0;
    if ($1098) {
      label = 441;
      break;
    } else {
      label = 442;
      break;
    }
   case 441:
    HEAP16[5398712 >> 1] = 3e3;
    HEAP16[5242964 >> 1] = 2208;
    HEAP32[5427632 >> 2] = 1633771873;
    var $1100 = ($zero_fsize_0 | 0) < 1e7;
    var $1101 = $1100 ? 82 : 4;
    HEAP32[5263692 >> 2] = $1101;
    HEAP32[5263496 >> 2] = 65472;
    label = 643;
    break;
   case 442:
    var $1103 = _strcmp(5263372, 5577320);
    var $1104 = ($1103 | 0) == 0;
    if ($1104) {
      label = 443;
      break;
    } else {
      label = 445;
      break;
    }
   case 443:
    HEAP16[5398712 >> 1] = 1536;
    HEAP16[5242964 >> 1] = 2048;
    HEAP16[5245028 >> 1] = 2048;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 1023;
    var $1106 = HEAP32[5264116 >> 2];
    var $1107 = _fseek($1106, 3145728, 0);
    var $1108 = _guess_byte_order();
    HEAP16[5262944 >> 1] = $1108;
    var $1109 = $1108 << 16 >> 16 == 19789;
    if ($1109) {
      label = 444;
      break;
    } else {
      label = 643;
      break;
    }
   case 444:
    HEAP16[5243564 >> 1] = 16;
    var $1110 = HEAP16[5398712 >> 1];
    var $1111 = $1110 - 16 & 65535;
    HEAP16[5398712 >> 1] = $1111;
    HEAP16[5263700 >> 1] = 28;
    var $1112 = HEAP16[5242964 >> 1];
    var $1113 = $1112 - 28 & 65535;
    HEAP16[5242964 >> 1] = $1113;
    HEAP32[5263496 >> 2] = 62912;
    HEAP32[5263628 >> 2] = 4674377;
    HEAP8[5263372] = 0;
    label = 644;
    break;
   case 445:
    var $1115 = _strcmp(5263628, 5586640);
    var $1116 = ($1115 | 0) == 0;
    if ($1116) {
      label = 446;
      break;
    } else {
      label = 453;
      break;
    }
   case 446:
    var $1118 = HEAP32[5263692 >> 2];
    var $1119 = ($1118 | 0) == 46;
    if ($1119) {
      label = 447;
      break;
    } else {
      label = 448;
      break;
    }
   case 447:
    HEAP32[5263692 >> 2] = 96;
    label = 448;
    break;
   case 448:
    if ($499 << 16 >> 16 == 7262) {
      label = 449;
      break;
    } else if ($499 << 16 >> 16 == 7410) {
      label = 450;
      break;
    } else if ($499 << 16 >> 16 == 9044) {
      label = 451;
      break;
    } else if ($499 << 16 >> 16 == 4090) {
      label = 452;
      break;
    } else {
      label = 643;
      break;
    }
   case 449:
    HEAP16[5398712 >> 1] = 5444;
    HEAP16[5242964 >> 1] = 7248;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 7;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 450:
    HEAP16[5398712 >> 1] = 5502;
    HEAP16[5242964 >> 1] = 7328;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 41;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 451:
    HEAP16[5398712 >> 1] = 6716;
    HEAP16[5242964 >> 1] = 8964;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 40;
    HEAP32[5263696 >> 2] = 256;
    var $1125 = HEAP32[5561400 >> 2];
    var $1126 = $1125 + 256 | 0;
    HEAP32[5561400 >> 2] = $1126;
    HEAP32[5263496 >> 2] = 33025;
    label = 643;
    break;
   case 452:
    HEAP8[5263372] = HEAP8[5577312];
    HEAP8[5263373] = HEAP8[5577313];
    HEAP8[5263374] = HEAP8[5577314];
    HEAP8[5263375] = HEAP8[5577315];
    HEAP8[5263376] = HEAP8[5577316];
    HEAP16[5243564 >> 1] = 6;
    var $1128 = $333 - 6 & 65535;
    HEAP16[5398712 >> 1] = $1128;
    HEAP16[5263700 >> 1] = 3;
    var $1129 = $334 - 10 & 65535;
    HEAP16[5242964 >> 1] = $1129;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 453:
    var $1131 = _strcmp(5263628, 5579748);
    var $1132 = ($1131 | 0) == 0;
    if ($1132) {
      label = 454;
      break;
    } else {
      label = 459;
      break;
    }
   case 454:
    var $1134 = _memcmp($10, 5577304, 4);
    var $1135 = ($1134 | 0) == 0;
    if ($1135) {
      label = 455;
      break;
    } else {
      label = 456;
      break;
    }
   case 455:
    var $1137 = HEAP32[5264116 >> 2];
    var $1138 = _fseek($1137, 14, 0);
    var $1139 = _get4();
    var $1140 = $1139 & 65535;
    HEAP16[5398712 >> 1] = $1140;
    var $1141 = _get4();
    var $1142 = $1141 & 65535;
    HEAP16[5242964 >> 1] = $1142;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5428492 >> 2] = 68;
    label = 456;
    break;
   case 456:
    var $1143 = HEAP32[5263692 >> 2];
    var $1144 = ($1143 | 0) == 0;
    if ($1144) {
      label = 457;
      break;
    } else {
      label = 458;
      break;
    }
   case 457:
    HEAP32[5263692 >> 2] = 4;
    label = 458;
    break;
   case 458:
    HEAP32[5263496 >> 2] = 16383;
    label = 643;
    break;
   case 459:
    var $1148 = _strcmp(5263628, 5586700);
    var $1149 = ($1148 | 0) == 0;
    if ($1149) {
      label = 460;
      break;
    } else {
      label = 483;
      break;
    }
   case 460:
    HEAP32[5263496 >> 2] = 16383;
    var $1151 = HEAP32[5264116 >> 2];
    var $1152 = HEAP32[5428492 >> 2];
    var $1153 = _fseek($1151, $1152, 0);
    var $1154 = _ljpeg_start($jh, 1);
    var $1155 = ($1154 | 0) == 0;
    if ($1155) {
      label = 463;
      break;
    } else {
      label = 461;
      break;
    }
   case 461:
    var $1157 = $jh | 0;
    var $1158 = HEAP32[$1157 >> 2];
    var $1159 = ($1158 | 0) == 15;
    if ($1159) {
      label = 462;
      break;
    } else {
      label = 463;
      break;
    }
   case 462:
    HEAP32[5263496 >> 2] = 8191;
    label = 463;
    break;
   case 463:
    var $1162 = HEAP32[5243580 >> 2];
    var $1163 = $1162 >>> 0 > 1;
    if ($1163) {
      label = 464;
      break;
    } else {
      label = 465;
      break;
    }
   case 464:
    HEAP32[5427632 >> 2] = 0;
    label = 466;
    break;
   case 465:
    var $1165 = HEAP32[5243576 >> 2];
    var $1166 = HEAP16[5245036 >> 1];
    var $1167 = $1166 & 65535;
    var $1168 = $1165 >>> 0 < $1167 >>> 0;
    if ($1168) {
      label = 466;
      break;
    } else {
      label = 467;
      break;
    }
   case 466:
    HEAP32[5263692 >> 2] = 14;
    var $1170 = HEAP32[5243572 >> 2];
    var $1171 = $1170 & 65535;
    HEAP16[5245028 >> 1] = $1171;
    label = 467;
    break;
   case 467:
    var $1173 = HEAP16[5242964 >> 1];
    var $1174 = HEAP16[5398712 >> 1];
    var $1175 = $1174 | $1173;
    var $1176 = $1175 << 16 >> 16 == 2048;
    if ($1176) {
      label = 468;
      break;
    } else {
      label = 471;
      break;
    }
   case 468:
    var $1178 = ($1162 | 0) == 1;
    if ($1178) {
      label = 469;
      break;
    } else {
      label = 470;
      break;
    }
   case 469:
    HEAP32[5427632 >> 2] = 1;
    HEAP8[5560896] = HEAP8[5577296];
    HEAP8[5560897] = HEAP8[5577297];
    HEAP8[5560898] = HEAP8[5577298];
    HEAP8[5560899] = HEAP8[5577299];
    HEAP8[5560900] = HEAP8[5577300];
    for (var $$src = 5577284, $$dest = 5263372, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 18;
    HEAP16[5398712 >> 1] = 2032;
    HEAP16[5242964 >> 1] = 2016;
    label = 643;
    break;
   case 470:
    HEAP8[5263372] = HEAP8[5587384];
    HEAP8[5263373] = HEAP8[5587385];
    HEAP8[5263374] = HEAP8[5587386];
    HEAP8[5263375] = HEAP8[5587387];
    HEAP8[5263376] = HEAP8[5587388];
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 16;
    HEAP16[5398712 >> 1] = 2028;
    HEAP16[5242964 >> 1] = 2022;
    label = 643;
    break;
   case 471:
    var $1182 = $1173 & 65535;
    var $1183 = $1174 & 65535;
    var $1184 = $1183 + $1182 | 0;
    var $1185 = ($1184 | 0) == 5204;
    if ($1185) {
      label = 472;
      break;
    } else {
      label = 480;
      break;
    }
   case 472:
    var $1187 = HEAP8[5263372];
    var $1188 = $1187 << 24 >> 24 == 0;
    if ($1188) {
      label = 473;
      break;
    } else {
      var $1191 = $1187;
      label = 474;
      break;
    }
   case 473:
    var $$etemp$3 = 5263372;
    var $$etemp$2$0 = 1953390915;
    var $$etemp$2$1 = 6648417;
    var $st$3$0 = $$etemp$3 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$2$0;
    var $st$3$1 = $$etemp$3 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$2$1;
    var $1191 = 67;
    label = 474;
    break;
   case 474:
    var $1191;
    var $1192 = ($1173 & 65535) > ($1174 & 65535);
    if ($1192) {
      label = 475;
      break;
    } else {
      label = 476;
      break;
    }
   case 475:
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 32;
    HEAP16[5398712 >> 1] = 2048;
    HEAP16[5242964 >> 1] = 3072;
    var $storemerge = 1633771873;
    label = 477;
    break;
   case 476:
    HEAP16[5263700 >> 1] = 6;
    HEAP16[5243564 >> 1] = 32;
    HEAP16[5242964 >> 1] = 2048;
    HEAP16[5398712 >> 1] = 3072;
    var $storemerge = 370546198;
    label = 477;
    break;
   case 477:
    var $storemerge;
    HEAP32[5427632 >> 2] = $storemerge;
    var $1196 = HEAPF32[5561124 >> 2];
    var $1197 = $1196 == 0;
    var $1198 = $1191 << 24 >> 24 == 86;
    var $or_cond217 = $1197 | $1198;
    if ($or_cond217) {
      label = 478;
      break;
    } else {
      label = 479;
      break;
    }
   case 478:
    HEAP32[5427632 >> 2] = 0;
    label = 643;
    break;
   case 479:
    HEAP32[5264100 >> 2] = $1162;
    label = 643;
    break;
   case 480:
    if ($1173 << 16 >> 16 == 2116) {
      label = 481;
      break;
    } else if ($1173 << 16 >> 16 == 3171) {
      label = 482;
      break;
    } else {
      label = 643;
      break;
    }
   case 481:
    var $$etemp$5 = 5263372;
    var $$etemp$4$0 = 1701601622;
    var $$etemp$4$1 = 3547247;
    var $st$3$0 = $$etemp$5 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$4$0;
    var $st$3$1 = $$etemp$5 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$4$1;
    HEAP16[5243564 >> 1] = 30;
    var $1203 = $1174 - 60 & 65535;
    HEAP16[5398712 >> 1] = $1203;
    HEAP16[5263700 >> 1] = 55;
    HEAP16[5242964 >> 1] = 2006;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 482:
    var $$etemp$7 = 5263372;
    var $$etemp$6$0 = 1701601622;
    var $$etemp$6$1 = 3547247;
    var $st$3$0 = $$etemp$7 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$6$0;
    var $st$3$1 = $$etemp$7 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$6$1;
    HEAP16[5243564 >> 1] = 24;
    var $1205 = $1174 - 48 & 65535;
    HEAP16[5398712 >> 1] = $1205;
    HEAP16[5263700 >> 1] = 24;
    HEAP16[5242964 >> 1] = 3123;
    HEAP32[5427632 >> 2] = 370546198;
    label = 643;
    break;
   case 483:
    var $1207 = _strcmp(5263628, 5573300);
    var $1208 = ($1207 | 0) == 0;
    if ($1208) {
      label = 485;
      break;
    } else {
      label = 484;
      break;
    }
   case 484:
    var $1210 = _strcmp(5263628, 5573328);
    var $1211 = ($1210 | 0) == 0;
    if ($1211) {
      label = 485;
      break;
    } else {
      label = 495;
      break;
    }
   case 485:
    var $1212 = HEAP32[5428492 >> 2];
    var $1213 = $16 - $1212 | 0;
    var $1214 = $499 & 65535;
    var $1215 = $1214 << 3;
    var $1216 = Math.floor(($1215 >>> 0) / 7);
    var $1217 = ($1213 | 0) / ($1216 | 0) & -1;
    var $1218 = HEAP16[5245036 >> 1];
    var $1219 = $1218 & 65535;
    var $1220 = ($1217 | 0) == ($1219 | 0);
    if ($1220) {
      label = 486;
      break;
    } else {
      label = 487;
      break;
    }
   case 486:
    HEAP32[5263692 >> 2] = 40;
    label = 489;
    break;
   case 487:
    var $_pr252 = HEAP32[5263692 >> 2];
    var $1222 = ($_pr252 | 0) == 0;
    if ($1222) {
      label = 488;
      break;
    } else {
      label = 489;
      break;
    }
   case 488:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 4;
    label = 489;
    break;
   case 489:
    HEAP8[5242880] = 1;
    var $1224 = $333 + 12 & 65535;
    var $1225 = ($1224 & 65535) > ($1218 & 65535);
    var $_ = $1225 ? $1218 : $1224;
    HEAP16[5398712 >> 1] = $_;
    var $i_5267 = 0;
    var $1228 = $334;
    var $1227 = $_;
    label = 490;
    break;
   case 490:
    var $1227;
    var $1228;
    var $i_5267;
    var $1229 = 5267292 + $i_5267 * 12 | 0;
    var $1230 = HEAP16[$1229 >> 1];
    var $1231 = $1230 << 16 >> 16;
    var $1232 = ($1214 | 0) == ($1231 | 0);
    if ($1232) {
      label = 491;
      break;
    } else {
      var $1251 = $1228;
      var $1250 = $1227;
      label = 493;
      break;
    }
   case 491:
    var $1234 = 5267294 + $i_5267 * 12 | 0;
    var $1235 = HEAP16[$1234 >> 1];
    var $1236 = $1235 << 16 >> 16;
    var $1237 = ($1219 | 0) == ($1236 | 0);
    if ($1237) {
      label = 492;
      break;
    } else {
      var $1251 = $1228;
      var $1250 = $1227;
      label = 493;
      break;
    }
   case 492:
    var $1239 = 5267296 + $i_5267 * 12 | 0;
    var $1240 = HEAP16[$1239 >> 1];
    HEAP16[5263700 >> 1] = $1240;
    var $1241 = 5267298 + $i_5267 * 12 | 0;
    var $1242 = HEAP16[$1241 >> 1];
    HEAP16[5243564 >> 1] = $1242;
    var $1243 = 5267300 + $i_5267 * 12 | 0;
    var $1244 = HEAP16[$1243 >> 1];
    var $1245 = $1228 + $1244 & 65535;
    HEAP16[5242964 >> 1] = $1245;
    var $1246 = 5267302 + $i_5267 * 12 | 0;
    var $1247 = HEAP16[$1246 >> 1];
    var $1248 = $1227 + $1247 & 65535;
    HEAP16[5398712 >> 1] = $1248;
    var $1251 = $1245;
    var $1250 = $1248;
    label = 493;
    break;
   case 493:
    var $1250;
    var $1251;
    var $1252 = $i_5267 + 1 | 0;
    var $exitcond = ($1252 | 0) == 23;
    if ($exitcond) {
      label = 494;
      break;
    } else {
      var $i_5267 = $1252;
      var $1228 = $1251;
      var $1227 = $1250;
      label = 490;
      break;
    }
   case 494:
    var $1254 = HEAP32[5427632 >> 2];
    var $1255 = $1254 + 3 | 0;
    var $1256 = HEAP16[5263700 >> 1];
    var $1257 = $1256 & 65535;
    var $1258 = $1257 & 1;
    var $1259 = $1258 ^ $1255;
    var $1260 = HEAP16[5243564 >> 1];
    var $1261 = $1260 & 65535;
    var $1262 = $1261 << 1;
    var $1263 = $1259 ^ $1262;
    var $1264 = $1263 & 3;
    var $1265 = $1264 + 5577276 | 0;
    var $1266 = HEAP8[$1265];
    var $1267 = $1266 & 255;
    var $1268 = $1267 * 16843009 & -1;
    HEAP32[5427632 >> 2] = $1268;
    label = 643;
    break;
   case 495:
    var $1270 = _strcmp(5263372, 5577268);
    var $1271 = ($1270 | 0) == 0;
    if ($1271) {
      label = 496;
      break;
    } else {
      label = 497;
      break;
    }
   case 496:
    HEAP16[5398712 >> 1] = 1718;
    HEAP16[5242964 >> 1] = 2304;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 497:
    var $1274 = _strcmp(5263628, 5573348);
    var $1275 = ($1274 | 0) == 0;
    if ($1275) {
      label = 498;
      break;
    } else {
      label = 515;
      break;
    }
   case 498:
    var $1277 = $333 & 1;
    var $1278 = $1277 + $333 & 65535;
    HEAP16[5398712 >> 1] = $1278;
    var $1279 = HEAP32[5427968 >> 2];
    HEAP32[5427632 >> 2] = $1279;
    var $1280 = $334 << 16 >> 16 == 4100;
    if ($1280) {
      label = 499;
      break;
    } else {
      var $1282 = $334;
      label = 500;
      break;
    }
   case 499:
    HEAP16[5242964 >> 1] = 4096;
    var $1285 = 4096;
    label = 502;
    break;
   case 500:
    var $1282;
    var $1283 = $1282 << 16 >> 16 == 4080;
    if ($1283) {
      label = 501;
      break;
    } else {
      var $1285 = $1282;
      label = 502;
      break;
    }
   case 501:
    HEAP16[5242964 >> 1] = 4056;
    var $1285 = 4056;
    label = 502;
    break;
   case 502:
    var $1285;
    var $1286 = HEAP32[5263692 >> 2];
    var $1287 = ($1286 | 0) == 4;
    if ($1287) {
      label = 503;
      break;
    } else {
      label = 504;
      break;
    }
   case 503:
    HEAP32[5263696 >> 2] = 4;
    label = 504;
    break;
   case 504:
    HEAP32[5244036 >> 2] = 12;
    var $1290 = _strcmp(5263372, 5577260);
    var $1291 = ($1290 | 0) == 0;
    if ($1291) {
      label = 506;
      break;
    } else {
      label = 505;
      break;
    }
   case 505:
    var $1293 = _strcmp(5263372, 5577232);
    var $1294 = ($1293 | 0) == 0;
    if ($1294) {
      label = 506;
      break;
    } else {
      label = 508;
      break;
    }
   case 506:
    var $1296 = $1285 - 20 & 65535;
    HEAP16[5242964 >> 1] = $1296;
    if ($1287) {
      label = 507;
      break;
    } else {
      label = 643;
      break;
    }
   case 507:
    HEAP32[5263496 >> 2] = 4035;
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    label = 643;
    break;
   case 508:
    var $1299 = _strcmp(5263372, 5577224);
    var $1300 = ($1299 | 0) == 0;
    if ($1300) {
      label = 509;
      break;
    } else {
      label = 511;
      break;
    }
   case 509:
    var $1302 = $1285 - 30 & 65535;
    HEAP16[5242964 >> 1] = $1302;
    if ($1287) {
      label = 510;
      break;
    } else {
      label = 643;
      break;
    }
   case 510:
    HEAP32[5263496 >> 2] = 3961;
    label = 643;
    break;
   case 511:
    var $1305 = _strcmp(5263372, 5577216);
    var $1306 = ($1305 | 0) == 0;
    if ($1306) {
      label = 512;
      break;
    } else {
      label = 513;
      break;
    }
   case 512:
    HEAP32[5244044 >> 2] = 10721280;
    var $1308 = $16 - 10721280 | 0;
    HEAP32[5244056 >> 2] = $1308;
    HEAP16[5244060 >> 1] = 480;
    HEAP16[5244040 >> 1] = 640;
    label = 643;
    break;
   case 513:
    var $1310 = _strcmp(5263372, 5577208);
    var $1311 = ($1310 | 0) == 0;
    if ($1311) {
      label = 514;
      break;
    } else {
      label = 643;
      break;
    }
   case 514:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 24;
    label = 643;
    break;
   case 515:
    var $1314 = _strcmp(5263372, 5579064);
    var $1315 = ($1314 | 0) == 0;
    if ($1315) {
      label = 516;
      break;
    } else {
      label = 517;
      break;
    }
   case 516:
    HEAP16[5398712 >> 1] = 2047;
    HEAP16[5242964 >> 1] = 3072;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5428492 >> 2] = 6656;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 517:
    var $1318 = _strcmp(5263372, 5577196);
    var $1319 = ($1318 | 0) == 0;
    if ($1319) {
      label = 518;
      break;
    } else {
      label = 519;
      break;
    }
   case 518:
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5263700 >> 1] = 5;
    HEAP32[5263528 >> 2] = -17;
    HEAP32[5428492 >> 2] = 862144;
    HEAP32[5263692 >> 2] = 26;
    HEAP32[5427632 >> 2] = -1667457892;
    HEAP32[5560840 >> 2] = 4;
    HEAP8[5560896] = HEAP8[5577188];
    HEAP8[5560897] = HEAP8[5577189];
    HEAP8[5560898] = HEAP8[5577190];
    HEAP8[5560899] = HEAP8[5577191];
    HEAP8[5560900] = HEAP8[5577192];
    label = 643;
    break;
   case 519:
    var $1322 = _strcmp(5263372, 5577180);
    var $1323 = ($1322 | 0) == 0;
    if ($1323) {
      label = 520;
      break;
    } else {
      label = 521;
      break;
    }
   case 520:
    HEAP16[5242964 >> 1] = 3109;
    HEAP16[5263700 >> 1] = 59;
    HEAP32[5263504 >> 2] = 9;
    HEAP32[5428492 >> 2] = 787392;
    HEAP32[5263692 >> 2] = 26;
    label = 643;
    break;
   case 521:
    var $1326 = _strcmp(5263628, 5573340);
    var $1327 = ($1326 | 0) == 0;
    var $or_cond219 = $1327 & $562;
    if ($or_cond219) {
      label = 522;
      break;
    } else {
      label = 523;
      break;
    }
   case 522:
    _adobe_coeff(5573340, 5577172);
    HEAP16[5242964 >> 1] = 3925;
    HEAP16[5262944 >> 1] = 19789;
    label = 643;
    break;
   case 523:
    var $1330 = $499 << 16 >> 16 == 5504;
    var $or_cond221 = $1327 & $1330;
    if ($or_cond221) {
      label = 524;
      break;
    } else {
      label = 525;
      break;
    }
   case 524:
    var $1332 = $334 - 8 & 65535;
    HEAP16[5242964 >> 1] = $1332;
    label = 643;
    break;
   case 525:
    var $1334 = $499 << 16 >> 16 == 6048;
    var $or_cond223 = $1327 & $1334;
    if ($or_cond223) {
      label = 526;
      break;
    } else {
      label = 527;
      break;
    }
   case 526:
    var $1336 = $334 - 24 & 65535;
    HEAP16[5242964 >> 1] = $1336;
    label = 643;
    break;
   case 527:
    var $1338 = _strcmp(5263372, 5586740);
    var $1339 = ($1338 | 0) == 0;
    if ($1339) {
      label = 528;
      break;
    } else {
      label = 532;
      break;
    }
   case 528:
    var $1341 = $334 << 16 >> 16 == 3880;
    if ($1341) {
      label = 529;
      break;
    } else {
      label = 530;
      break;
    }
   case 529:
    var $1343 = $333 - 1 & 65535;
    HEAP16[5398712 >> 1] = $1343;
    var $1344 = $499 + 1 & 65535;
    HEAP16[5245028 >> 1] = $1344;
    HEAP16[5242964 >> 1] = $1344;
    label = 531;
    break;
   case 530:
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263696 >> 2] = 2;
    label = 531;
    break;
   case 531:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 532:
    var $1348 = _strcmp(5263372, 5577160);
    var $1349 = ($1348 | 0) == 0;
    if ($1349) {
      label = 533;
      break;
    } else {
      label = 534;
      break;
    }
   case 533:
    var $1351 = $333 - 4 & 65535;
    HEAP16[5398712 >> 1] = $1351;
    label = 643;
    break;
   case 534:
    var $1353 = _strcmp(5263372, 5577152);
    var $1354 = ($1353 | 0) == 0;
    if ($1354) {
      label = 535;
      break;
    } else {
      label = 536;
      break;
    }
   case 535:
    HEAP16[5243564 >> 1] = 4;
    var $1356 = $333 - 4 & 65535;
    HEAP16[5398712 >> 1] = $1356;
    HEAP16[5263700 >> 1] = 32;
    var $1357 = $334 - 32 & 65535;
    HEAP16[5242964 >> 1] = $1357;
    _gamma_curve(0, 7, 1, 255);
    label = 643;
    break;
   case 536:
    var $1359 = _strcmp(5263372, 5577120);
    var $1360 = ($1359 | 0) == 0;
    if ($1360) {
      label = 537;
      break;
    } else {
      label = 540;
      break;
    }
   case 537:
    HEAP16[5398712 >> 1] = 480;
    HEAP16[5242964 >> 1] = 640;
    var $1362 = ($zero_fsize_0 | 0) < 614400;
    if ($1362) {
      label = 542;
      break;
    } else {
      label = 538;
      break;
    }
   case 538:
    var $1364 = _find_green(16, 16, 3840, 5120);
    var $1365 = $1364 < 25;
    if ($1365) {
      label = 542;
      break;
    } else {
      label = 539;
      break;
    }
   case 539:
    for (var $$src = 5577108, $$dest = 5263372, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $1367 = HEAP16[5398712 >> 1];
    var $1368 = $1367 - 3 & 65535;
    HEAP16[5398712 >> 1] = $1368;
    HEAP32[5428492 >> 2] = 3840;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 540:
    var $1370 = _strcmp(5263372, 5577100);
    var $1371 = ($1370 | 0) == 0;
    if ($1371) {
      label = 541;
      break;
    } else {
      label = 543;
      break;
    }
   case 541:
    HEAP16[5398712 >> 1] = 2134;
    HEAP16[5242964 >> 1] = 2848;
    label = 542;
    break;
   case 542:
    HEAP32[5427632 >> 2] = 0;
    HEAP32[5263692 >> 2] = 52;
    _gamma_curve(0, 3.875, 1, 255);
    label = 643;
    break;
   case 543:
    var $1375 = _strcmp(5263372, 5577092);
    var $1376 = ($1375 | 0) == 0;
    if ($1376) {
      label = 544;
      break;
    } else {
      label = 545;
      break;
    }
   case 544:
    HEAP16[5398712 >> 1] = 2152;
    HEAP16[5245036 >> 1] = 2152;
    HEAP16[5242964 >> 1] = 2864;
    HEAP16[5245028 >> 1] = 2864;
    var $1384 = 2152;
    var $1383 = 2864;
    label = 547;
    break;
   case 545:
    var $1379 = _strcmp(5263372, 5577084);
    var $1380 = ($1379 | 0) == 0;
    if ($1380) {
      label = 546;
      break;
    } else {
      label = 551;
      break;
    }
   case 546:
    HEAP16[5398712 >> 1] = 1744;
    HEAP16[5242964 >> 1] = 2336;
    HEAP16[5245036 >> 1] = 1779;
    HEAP16[5245028 >> 1] = 2338;
    HEAP16[5243564 >> 1] = 33;
    HEAP16[5263700 >> 1] = 1;
    var $1384 = 1779;
    var $1383 = 2338;
    label = 547;
    break;
   case 547:
    var $1383;
    var $1384;
    HEAP16[5262944 >> 1] = 18761;
    var $1385 = $1383 * $1384 & -1;
    var $1386 = $zero_fsize_0 - $1385 | 0;
    HEAP32[5428492 >> 2] = $1386;
    var $1387 = ($zero_fsize_0 | 0) == ($1385 | 0);
    if ($1387) {
      label = 549;
      break;
    } else {
      label = 548;
      break;
    }
   case 548:
    var $1389 = HEAP32[5264116 >> 2];
    var $1390 = _fseek($1389, 168, 0);
    _read_shorts(5428500, 256);
    label = 550;
    break;
   case 549:
    _gamma_curve(0, 3.875, 1, 255);
    label = 550;
    break;
   case 550:
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 551:
    var $1394 = _strncasecmp(5263372, 5577072, 9);
    var $1395 = ($1394 | 0) == 0;
    if ($1395) {
      label = 552;
      break;
    } else {
      label = 553;
      break;
    }
   case 552:
    var $1397 = HEAP32[5428492 >> 2];
    var $1398 = ($1397 | 0) < 86016;
    var $1399 = $1398 ? 86016 : 94208;
    HEAP32[5428492 >> 2] = $1399;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 553:
    var $1401 = _strcasecmp(5263628, 5586632);
    var $1402 = ($1401 | 0) == 0;
    if ($1402) {
      label = 554;
      break;
    } else {
      label = 586;
      break;
    }
   case 554:
    var $1404 = HEAP32[5427632 >> 2];
    var $1405 = ($1404 | 0) == -1;
    if ($1405) {
      label = 555;
      break;
    } else {
      label = 556;
      break;
    }
   case 555:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 556;
    break;
   case 556:
    var $1408 = _strncmp(5263372, 5577064, 6);
    var $1409 = ($1408 | 0) == 0;
    if ($1409) {
      label = 557;
      break;
    } else {
      label = 558;
      break;
    }
   case 557:
    var $1411 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1411;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 558:
    var $1413 = _strcmp(5263372, 5577052);
    var $1414 = ($1413 | 0) == 0;
    if ($1414) {
      label = 559;
      break;
    } else {
      label = 560;
      break;
    }
   case 559:
    var $1416 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1416;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 560:
    var $1418 = _strcmp(5263372, 5577044);
    var $1419 = ($1418 | 0) == 0;
    if ($1419) {
      label = 561;
      break;
    } else {
      label = 562;
      break;
    }
   case 561:
    var $1421 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1421;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 562:
    var $1423 = _strcmp(5263372, 5577036);
    var $1424 = ($1423 | 0) == 0;
    if ($1424) {
      label = 563;
      break;
    } else {
      label = 564;
      break;
    }
   case 563:
    var $1426 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1426;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 564:
    var $1428 = _strncmp(5263372, 5577004, 7);
    var $1429 = ($1428 | 0) == 0;
    if ($1429) {
      label = 565;
      break;
    } else {
      label = 566;
      break;
    }
   case 565:
    HEAP8[5263378] = 0;
    var $1431 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1431;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 566:
    var $1433 = _strcmp(5263372, 5576996);
    var $1434 = ($1433 | 0) == 0;
    if ($1434) {
      label = 567;
      break;
    } else {
      label = 568;
      break;
    }
   case 567:
    var $1436 = $334 - 4 & 65535;
    HEAP16[5242964 >> 1] = $1436;
    HEAP16[5263700 >> 1] = 2;
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 568:
    var $1438 = _strcmp(5263372, 5576988);
    var $1439 = ($1438 | 0) == 0;
    if ($1439) {
      label = 569;
      break;
    } else {
      label = 570;
      break;
    }
   case 569:
    HEAP32[5561400 >> 2] = 214;
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 570:
    var $1442 = _strcmp(5263372, 5576980);
    var $1443 = ($1442 | 0) == 0;
    if ($1443) {
      label = 571;
      break;
    } else {
      label = 572;
      break;
    }
   case 571:
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 572:
    var $1446 = _strcmp(5263376, 5576976);
    var $1447 = ($1446 | 0) == 0;
    if ($1447) {
      label = 573;
      break;
    } else {
      label = 574;
      break;
    }
   case 573:
    HEAP8[5560896] = HEAP8[5576968];
    HEAP8[5560897] = HEAP8[5576969];
    HEAP8[5560898] = HEAP8[5576970];
    HEAP8[5560899] = HEAP8[5576971];
    HEAP8[5560900] = HEAP8[5576972];
    label = 574;
    break;
   case 574:
    var $1450 = _strstr(5263372, 5576960);
    var $1451 = ($1450 | 0) == 0;
    if ($1451) {
      label = 576;
      break;
    } else {
      label = 575;
      break;
    }
   case 575:
    HEAP8[5263372] = HEAP8[5576960];
    HEAP8[5263373] = HEAP8[5576961];
    HEAP8[5263374] = HEAP8[5576962];
    HEAP8[5263375] = HEAP8[5576963];
    HEAP8[5263376] = HEAP8[5576964];
    HEAP32[5428492 >> 2] = 15424;
    label = 576;
    break;
   case 576:
    var $1454 = _strncmp(5263372, 5579868, 3);
    var $1455 = ($1454 | 0) == 0;
    if ($1455) {
      label = 577;
      break;
    } else {
      label = 578;
      break;
    }
   case 577:
    HEAP16[5398712 >> 1] = 242;
    HEAP16[5245036 >> 1] = 242;
    var $1457 = ($16 | 0) < 1e5;
    var $_73 = $1457 ? 256 : 512;
    var $_74 = $1457 ? 249 : 501;
    var $_75 = $1457 ? 257 : 513;
    var $_76 = $1457 ? 1.2958500669344042 : .6384335885869012;
    HEAP16[5245028 >> 1] = $_73;
    HEAP16[5242964 >> 1] = $_74;
    HEAPF64[tempDoublePtr >> 3] = $_76, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $1458 = HEAP32[5428492 >> 2];
    var $1459 = $_75 + $1458 | 0;
    HEAP32[5428492 >> 2] = $1459;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1920103027;
    _simple_coeff(1);
    HEAPF32[5245644 >> 2] = 1.1790000200271606;
    HEAPF32[5245648 >> 2] = 1.2089999914169312;
    HEAPF32[5245652 >> 2] = 1.0360000133514404;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 578:
    var $1461 = _strcmp(5263372, 5576956);
    var $1462 = ($1461 | 0) == 0;
    if ($1462) {
      label = 579;
      break;
    } else {
      label = 580;
      break;
    }
   case 579:
    HEAP8[5263372] = HEAP8[5576948];
    HEAP8[5263373] = HEAP8[5576949];
    HEAP8[5263374] = HEAP8[5576950];
    HEAP8[5263375] = HEAP8[5576951];
    HEAP8[5263376] = HEAP8[5576952];
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 1152;
    HEAP32[5263692 >> 2] = 58;
    label = 643;
    break;
   case 580:
    var $1465 = _strstr(5263372, 5576940);
    var $1466 = ($1465 | 0) == 0;
    if ($1466) {
      label = 582;
      break;
    } else {
      label = 581;
      break;
    }
   case 581:
    HEAP8[5263372] = HEAP8[5576940];
    HEAP8[5263373] = HEAP8[5576941];
    HEAP8[5263374] = HEAP8[5576942];
    HEAP8[5263375] = HEAP8[5576943];
    HEAP8[5263376] = HEAP8[5576944];
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 19712;
    HEAP32[5263692 >> 2] = 58;
    label = 643;
    break;
   case 582:
    var $1469 = _strstr(5263372, 5576912);
    var $1470 = ($1469 | 0) == 0;
    if ($1470) {
      label = 584;
      break;
    } else {
      label = 583;
      break;
    }
   case 583:
    HEAP8[5263372] = HEAP8[5576912];
    HEAP8[5263373] = HEAP8[5576913];
    HEAP8[5263374] = HEAP8[5576914];
    HEAP8[5263375] = HEAP8[5576915];
    HEAP8[5263376] = HEAP8[5576916];
    HEAP8[5263377] = HEAP8[5576917];
    HEAP16[5398712 >> 1] = 976;
    HEAP16[5242964 >> 1] = 848;
    HEAPF64[tempDoublePtr >> 3] = 1.5345911949685533, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $1472 = HEAP32[5244032 >> 2];
    var $1473 = ($1472 | 0) == 7;
    var $1474 = $1473 ? 18 : 80;
    HEAP32[5263692 >> 2] = $1474;
    label = 643;
    break;
   case 584:
    var $1476 = _strcmp(5263372, 5576904);
    var $1477 = ($1476 | 0) == 0;
    if ($1477) {
      label = 585;
      break;
    } else {
      label = 643;
      break;
    }
   case 585:
    HEAP16[5244060 >> 1] = 128;
    HEAP16[5244040 >> 1] = 192;
    HEAP32[5244044 >> 2] = 6144;
    HEAP32[5244048 >> 2] = 360;
    HEAP32[5242960 >> 2] = 50;
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1536;
    HEAP32[5428492 >> 2] = 79872;
    HEAP32[5263692 >> 2] = 82;
    HEAP32[5561400 >> 2] = 17;
    label = 643;
    break;
   case 586:
    var $1480 = _strcmp(5263372, 5579032);
    var $1481 = ($1480 | 0) == 0;
    if ($1481) {
      label = 587;
      break;
    } else {
      label = 588;
      break;
    }
   case 587:
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 3632;
    HEAP32[5263692 >> 2] = 58;
    HEAP32[5427632 >> 2] = 1633771873;
    _simple_coeff(2);
    label = 643;
    break;
   case 588:
    var $1484 = _strncmp(5263372, 5576892, 9);
    var $1485 = ($1484 | 0) == 0;
    if ($1485) {
      label = 589;
      break;
    } else {
      label = 594;
      break;
    }
   case 589:
    var $1487 = $head + 5 | 0;
    var $1488 = HEAP8[$1487];
    var $1489 = $1488 << 24 >> 24 == 0;
    if ($1489) {
      label = 591;
      break;
    } else {
      label = 590;
      break;
    }
   case 590:
    tempBigInt = 3158066;
    HEAP16[5263382 >> 1] = tempBigInt & 65535;
    HEAP16[5263384 >> 1] = tempBigInt >> 16;
    label = 591;
    break;
   case 591:
    var $1492 = HEAP32[5264116 >> 2];
    var $1493 = _fseek($1492, 544, 0);
    var $1494 = _get2();
    HEAP16[5398712 >> 1] = $1494;
    var $1495 = _get2();
    HEAP16[5242964 >> 1] = $1495;
    var $1496 = _get4();
    var $1497 = _get2();
    var $1498 = $1497 << 16 >> 16 == 30;
    var $1499 = $1498 ? 738 : 736;
    HEAP32[5428492 >> 2] = $1499;
    var $1500 = HEAP16[5398712 >> 1];
    var $1501 = HEAP16[5242964 >> 1];
    var $1502 = ($1500 & 65535) > ($1501 & 65535);
    if ($1502) {
      label = 592;
      break;
    } else {
      label = 593;
      break;
    }
   case 592:
    HEAP16[5242964 >> 1] = $1500;
    HEAP16[5398712 >> 1] = $1501;
    var $1504 = HEAP32[5264116 >> 2];
    var $1505 = $1499 - 6 | 0;
    var $1506 = _fseek($1504, $1505, 0);
    var $1507 = _get2();
    var $1508 = $1507 & 3;
    var $1509 = $1508 << 16 >> 16 != 3;
    var $1510 = $1509 ? 5 : 6;
    HEAP32[5403048 >> 2] = $1510;
    label = 593;
    break;
   case 593:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 594:
    var $1513 = _strcmp(5263628, 5586288);
    var $1514 = ($1513 | 0) != 0;
    var $1515 = HEAP32[5263692 >> 2];
    var $1516 = ($1515 | 0) != 0;
    var $or_cond7 = $1514 | $1516;
    if ($or_cond7) {
      label = 599;
      break;
    } else {
      label = 595;
      break;
    }
   case 595:
    var $1518 = $499 & 65535;
    if (($1518 | 0) == 1316) {
      label = 596;
      break;
    } else if (($1518 | 0) == 2568) {
      label = 597;
      break;
    } else {
      label = 598;
      break;
    }
   case 596:
    HEAP16[5398712 >> 1] = 1030;
    HEAP16[5242964 >> 1] = 1300;
    HEAP16[5243564 >> 1] = 1;
    HEAP16[5263700 >> 1] = 6;
    label = 598;
    break;
   case 597:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2560;
    HEAP16[5243564 >> 1] = 2;
    HEAP16[5263700 >> 1] = 8;
    label = 598;
    break;
   case 598:
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 70;
    label = 643;
    break;
   case 599:
    var $1523 = _strcmp(5263372, 5576880);
    var $1524 = ($1523 | 0) == 0;
    if ($1524) {
      label = 600;
      break;
    } else {
      label = 601;
      break;
    }
   case 600:
    HEAP16[5398712 >> 1] = 768;
    HEAP16[5242964 >> 1] = 1024;
    HEAP32[5428492 >> 2] = 1024;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 601:
    var $1527 = _strcmp(5263372, 5576868);
    var $1528 = ($1527 | 0) == 0;
    if ($1528) {
      label = 602;
      break;
    } else {
      label = 603;
      break;
    }
   case 602:
    HEAP16[5398712 >> 1] = 1208;
    HEAP16[5242964 >> 1] = 1632;
    HEAP32[5428492 >> 2] = 3264;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 603:
    var $1531 = ($zero_fsize_0 | 0) == 3217760;
    if ($1531) {
      label = 604;
      break;
    } else {
      label = 605;
      break;
    }
   case 604:
    HEAP16[5398712 >> 1] = 1546;
    HEAP16[5242964 >> 1] = 2070;
    HEAP16[5245028 >> 1] = 2080;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 605:
    var $1534 = _strcmp(5263372, 5576860);
    var $1535 = ($1534 | 0) == 0;
    if ($1535) {
      label = 606;
      break;
    } else {
      label = 607;
      break;
    }
   case 606:
    HEAP16[5398712 >> 1] = 1700;
    HEAP16[5242964 >> 1] = 2260;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 65535;
    label = 643;
    break;
   case 607:
    var $1538 = _strcmp(5263372, 5576852);
    var $1539 = ($1538 | 0) == 0;
    if ($1539) {
      label = 608;
      break;
    } else {
      label = 609;
      break;
    }
   case 608:
    HEAP16[5398712 >> 1] = 1924;
    HEAP16[5242964 >> 1] = 2576;
    HEAP16[5245028 >> 1] = 3232;
    HEAP32[5244036 >> 2] = 10;
    label = 643;
    break;
   case 609:
    var $1542 = _strcmp(5263372, 5576844);
    var $1543 = ($1542 | 0) == 0;
    if ($1543) {
      label = 610;
      break;
    } else {
      label = 611;
      break;
    }
   case 610:
    HEAP16[5398712 >> 1] = 1720;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5245028 >> 1] = 3520;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 611:
    var $1546 = _strcmp(5263372, 5576836);
    var $1547 = ($1546 | 0) == 0;
    if ($1547) {
      label = 612;
      break;
    } else {
      label = 613;
      break;
    }
   case 612:
    HEAP16[5398712 >> 1] = 1926;
    HEAP16[5242964 >> 1] = 2580;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 613:
    var $1550 = _strcmp(5263372, 5576800);
    var $1551 = ($1550 | 0) == 0;
    if ($1551) {
      label = 614;
      break;
    } else {
      label = 615;
      break;
    }
   case 614:
    HEAP16[5398712 >> 1] = 1208;
    HEAP16[5242964 >> 1] = 1620;
    HEAP16[5245028 >> 1] = 2432;
    HEAP32[5403048 >> 2] = 3;
    label = 643;
    break;
   case 615:
    var $1554 = _strcmp(5263372, 5576792);
    var $1555 = ($1554 | 0) == 0;
    if ($1555) {
      label = 616;
      break;
    } else {
      label = 617;
      break;
    }
   case 616:
    HEAP16[5398712 >> 1] = 1544;
    HEAP16[5242964 >> 1] = 2058;
    HEAP16[5245028 >> 1] = 3136;
    label = 643;
    break;
   case 617:
    var $1558 = _strcmp(5263372, 5576784);
    var $1559 = ($1558 | 0) == 0;
    if ($1559) {
      label = 618;
      break;
    } else {
      label = 619;
      break;
    }
   case 618:
    HEAP16[5398712 >> 1] = 1931;
    HEAP16[5242964 >> 1] = 2570;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 619:
    var $1562 = _strcmp(5263372, 5576776);
    var $1563 = ($1562 | 0) == 0;
    if ($1563) {
      label = 620;
      break;
    } else {
      label = 621;
      break;
    }
   case 620:
    HEAP16[5398712 >> 1] = 1937;
    HEAP16[5242964 >> 1] = 2577;
    HEAP16[5245028 >> 1] = 3904;
    HEAP32[5427632 >> 2] = 370546198;
    label = 643;
    break;
   case 621:
    var $1566 = _strcmp(5263372, 5576768);
    var $1567 = ($1566 | 0) == 0;
    if ($1567) {
      label = 622;
      break;
    } else {
      label = 623;
      break;
    }
   case 622:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2570;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 623:
    var $1570 = _strcmp(5263372, 5576760);
    var $1571 = ($1570 | 0) == 0;
    if ($1571) {
      label = 624;
      break;
    } else {
      label = 625;
      break;
    }
   case 624:
    HEAP16[5398712 >> 1] = 2145;
    HEAP16[5242964 >> 1] = 2833;
    HEAP16[5245028 >> 1] = 3584;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5244036 >> 2] = 10;
    label = 643;
    break;
   case 625:
    var $1574 = _strcmp(5263372, 5576752);
    var $1575 = ($1574 | 0) == 0;
    if ($1575) {
      label = 626;
      break;
    } else {
      label = 627;
      break;
    }
   case 626:
    HEAP16[5398712 >> 1] = 2321;
    HEAP16[5242964 >> 1] = 3089;
    HEAP16[5245028 >> 1] = 4672;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 627:
    var $1578 = _strcmp(5263372, 5576744);
    var $1579 = ($1578 | 0) == 0;
    if ($1579) {
      label = 628;
      break;
    } else {
      label = 629;
      break;
    }
   case 628:
    HEAP16[5398712 >> 1] = 2319;
    HEAP16[5242964 >> 1] = 3087;
    HEAP16[5245028 >> 1] = 4672;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 629:
    var $1582 = _strcmp(5263372, 5576736);
    var $1583 = ($1582 | 0) == 0;
    if ($1583) {
      label = 630;
      break;
    } else {
      label = 631;
      break;
    }
   case 630:
    HEAP16[5398712 >> 1] = 2468;
    HEAP16[5242964 >> 1] = 3279;
    HEAP16[5245028 >> 1] = 4928;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 631:
    var $1586 = _strcmp(5263372, 5576728);
    var $1587 = ($1586 | 0) == 0;
    if ($1587) {
      label = 632;
      break;
    } else {
      label = 633;
      break;
    }
   case 632:
    HEAP16[5398712 >> 1] = 2467;
    HEAP16[5242964 >> 1] = 3281;
    HEAP16[5245036 >> 1] = 2502;
    HEAP16[5245028 >> 1] = 4992;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 633:
    var $1590 = ($zero_fsize_0 | 0) == 15499264;
    if ($1590) {
      label = 634;
      break;
    } else {
      label = 635;
      break;
    }
   case 634:
    HEAP16[5398712 >> 1] = 2752;
    HEAP16[5242964 >> 1] = 3672;
    HEAP16[5245028 >> 1] = 5632;
    label = 643;
    break;
   case 635:
    var $1593 = _strcmp(5263372, 5576692);
    var $1594 = ($1593 | 0) == 0;
    if ($1594) {
      label = 636;
      break;
    } else {
      label = 637;
      break;
    }
   case 636:
    HEAP16[5398712 >> 1] = 3044;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5245028 >> 1] = 4096;
    HEAP32[5263696 >> 2] = 80;
    label = 643;
    break;
   case 637:
    var $1597 = _strcmp(5263372, 5576684);
    var $1598 = ($1597 | 0) == 0;
    if ($1598) {
      label = 638;
      break;
    } else {
      label = 639;
      break;
    }
   case 638:
    HEAP16[5398712 >> 1] = 1928;
    HEAP16[5242964 >> 1] = 2568;
    HEAP16[5245028 >> 1] = 3852;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 639:
    var $1601 = ($zero_fsize_0 | 0) == 9313536;
    if ($1601) {
      label = 640;
      break;
    } else {
      label = 641;
      break;
    }
   case 640:
    HEAP16[5398712 >> 1] = 2142;
    HEAP16[5242964 >> 1] = 2844;
    HEAP16[5245028 >> 1] = 4288;
    label = 643;
    break;
   case 641:
    var $1604 = _strcmp(5263372, 5576676);
    var $1605 = ($1604 | 0) == 0;
    if ($1605) {
      label = 642;
      break;
    } else {
      label = 643;
      break;
    }
   case 642:
    HEAP16[5398712 >> 1] = 2318;
    HEAP16[5242964 >> 1] = 3082;
    HEAP16[5245028 >> 1] = 4672;
    label = 643;
    break;
   case 643:
    var $_pr255 = HEAP8[5263372];
    var $1607 = $_pr255 << 24 >> 24 == 0;
    if ($1607) {
      label = 644;
      break;
    } else {
      label = 645;
      break;
    }
   case 644:
    var $1609 = HEAP16[5242964 >> 1];
    var $1610 = $1609 & 65535;
    var $1611 = HEAP16[5398712 >> 1];
    var $1612 = $1611 & 65535;
    var $1613 = _sprintf(5263372, 5576668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1610, HEAP32[tempInt + 4 >> 2] = $1612, tempInt));
    label = 645;
    break;
   case 645:
    var $1615 = HEAP32[5427632 >> 2];
    var $1616 = ($1615 | 0) == -1;
    if ($1616) {
      label = 646;
      break;
    } else {
      label = 647;
      break;
    }
   case 646:
    HEAP32[5427632 >> 2] = -1802201964;
    label = 647;
    break;
   case 647:
    var $1619 = HEAP32[5245040 >> 2];
    var $1620 = ($1619 | 0) == 0;
    if ($1620) {
      label = 648;
      break;
    } else {
      label = 649;
      break;
    }
   case 648:
    var $1621 = HEAP32[5263692 >> 2];
    label = 651;
    break;
   case 649:
    _adobe_coeff(5263628, 5263372);
    var $_pre = HEAP32[5245040 >> 2];
    var $phitmp54 = ($_pre | 0) != 0;
    var $1624 = HEAP32[5263692 >> 2];
    var $1625 = ($1624 | 0) == 58;
    var $or_cond15 = $1625 & $phitmp54;
    if ($or_cond15) {
      label = 650;
      break;
    } else {
      label = 651;
      break;
    }
   case 650:
    _adobe_coeff(5579e3, 5576656);
    label = 651;
    break;
   case 651:
    var $1627 = HEAP32[5244044 >> 2];
    var $1628 = ($1627 | 0) == 0;
    var $1629 = HEAP16[5244060 >> 1];
    var $1630 = $1629 << 16 >> 16 != 0;
    var $or_cond9 = $1628 | $1630;
    if ($or_cond9) {
      label = 654;
      break;
    } else {
      label = 652;
      break;
    }
   case 652:
    var $1632 = HEAP32[5264116 >> 2];
    var $1633 = _fseek($1632, $1627, 0);
    var $1634 = _ljpeg_start($jh, 1);
    var $1635 = ($1634 | 0) == 0;
    if ($1635) {
      label = 654;
      break;
    } else {
      label = 653;
      break;
    }
   case 653:
    var $1637 = $jh + 8 | 0;
    var $1638 = HEAP32[$1637 >> 2];
    var $1639 = $1638 & 65535;
    HEAP16[5244040 >> 1] = $1639;
    var $1640 = $jh + 4 | 0;
    var $1641 = HEAP32[$1640 >> 2];
    var $1642 = $1641 & 65535;
    HEAP16[5244060 >> 1] = $1642;
    label = 654;
    break;
   case 654:
    var $1644 = HEAP16[5398900 >> 1];
    var $1645 = $1644 << 16 >> 16 == 0;
    if ($1645) {
      label = 658;
      break;
    } else {
      label = 655;
      break;
    }
   case 655:
    var $1647 = HEAP16[5242964 >> 1];
    var $1648 = $1647 & 65535;
    var $1649 = HEAP32[5398904 >> 2];
    var $1650 = ($1649 | 0) == 0;
    var $1651 = $1650 & 1;
    var $1652 = $1648 >>> ($1651 >>> 0);
    var $1653 = $1652 & 65535;
    HEAP16[5398900 >> 1] = $1653;
    var $1654 = $1652 & 1;
    var $1655 = ($1654 | 0) == 0;
    if ($1655) {
      label = 656;
      break;
    } else {
      label = 657;
      break;
    }
   case 656:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 657;
    break;
   case 657:
    var $1658 = HEAP16[5398712 >> 1];
    var $1659 = $1658 & 65535;
    var $1660 = $1659 >>> ($1649 >>> 0);
    var $1661 = $1652 & 65535;
    var $1662 = $1661 + $1660 | 0;
    var $1663 = $1662 & 65535;
    HEAP16[5242964 >> 1] = $1663;
    var $1664 = $1662 + 65535 | 0;
    var $1665 = $1664 & 65535;
    HEAP16[5398712 >> 1] = $1665;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $1676 = $1665;
    label = 662;
    break;
   case 658:
    var $1667 = HEAP16[5245036 >> 1];
    var $1668 = HEAP16[5398712 >> 1];
    var $1669 = ($1667 & 65535) < ($1668 & 65535);
    if ($1669) {
      label = 659;
      break;
    } else {
      label = 660;
      break;
    }
   case 659:
    HEAP16[5245036 >> 1] = $1668;
    label = 660;
    break;
   case 660:
    var $1672 = HEAP16[5245028 >> 1];
    var $1673 = HEAP16[5242964 >> 1];
    var $1674 = ($1672 & 65535) < ($1673 & 65535);
    if ($1674) {
      label = 661;
      break;
    } else {
      var $1676 = $1668;
      label = 662;
      break;
    }
   case 661:
    HEAP16[5245028 >> 1] = $1673;
    var $1676 = $1668;
    label = 662;
    break;
   case 662:
    var $1676;
    var $1677 = HEAP32[5244036 >> 2];
    var $1678 = ($1677 | 0) == 0;
    if ($1678) {
      label = 663;
      break;
    } else {
      var $1680 = $1677;
      label = 664;
      break;
    }
   case 663:
    HEAP32[5244036 >> 2] = 12;
    var $1680 = 12;
    label = 664;
    break;
   case 664:
    var $1680;
    var $1681 = HEAP32[5263496 >> 2];
    var $1682 = ($1681 | 0) == 0;
    if ($1682) {
      label = 665;
      break;
    } else {
      label = 666;
      break;
    }
   case 665:
    var $1684 = 1 << $1680;
    var $1685 = $1684 - 1 | 0;
    HEAP32[5263496 >> 2] = $1685;
    label = 666;
    break;
   case 666:
    var $1686 = HEAP32[5263692 >> 2];
    var $1687 = ($1686 | 0) == 0;
    var $1688 = ($1676 & 65535) < 22;
    var $or_cond225 = $1687 | $1688;
    if ($or_cond225) {
      label = 667;
      break;
    } else {
      label = 668;
      break;
    }
   case 667:
    HEAP32[5264100 >> 2] = 0;
    label = 668;
    break;
   case 668:
    var $1691 = ($1686 | 0) == 44;
    if ($1691) {
      label = 669;
      break;
    } else {
      var $1697 = $1686;
      label = 670;
      break;
    }
   case 669:
    var $1693 = HEAP32[_stderr >> 2];
    var $1694 = HEAP32[5264120 >> 2];
    var $1695 = _fprintf($1693, 5576620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1694, HEAP32[tempInt + 4 >> 2] = 5576608, tempInt));
    HEAP32[5264100 >> 2] = 0;
    var $_pre2 = HEAP32[5263692 >> 2];
    var $1697 = $_pre2;
    label = 670;
    break;
   case 670:
    var $1697;
    var $1698 = ($1697 | 0) == 18;
    var $1699 = ($1697 | 0) == 94;
    var $or_cond11 = $1698 | $1699;
    if ($or_cond11) {
      label = 671;
      break;
    } else {
      label = 672;
      break;
    }
   case 671:
    var $1701 = HEAP32[_stderr >> 2];
    var $1702 = HEAP32[5264120 >> 2];
    var $1703 = _fprintf($1701, 5576620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1702, HEAP32[tempInt + 4 >> 2] = 5576600, tempInt));
    HEAP32[5264100 >> 2] = 0;
    label = 672;
    break;
   case 672:
    var $1704 = HEAP8[5560896];
    var $1705 = $1704 << 24 >> 24 == 0;
    if ($1705) {
      label = 673;
      break;
    } else {
      label = 674;
      break;
    }
   case 673:
    var $1707 = HEAP32[5560840 >> 2];
    var $1708 = ($1707 | 0) == 3;
    var $1709 = $1708 ? 5576592 : 5576584;
    HEAP8[5560896] = HEAP8[$1709];
    HEAP8[5560897] = HEAP8[$1709 + 1];
    HEAP8[5560898] = HEAP8[$1709 + 2];
    HEAP8[5560899] = HEAP8[$1709 + 3];
    HEAP8[5560900] = HEAP8[$1709 + 4];
    label = 674;
    break;
   case 674:
    var $1710 = HEAP16[5245036 >> 1];
    var $1711 = $1710 << 16 >> 16 == 0;
    if ($1711) {
      label = 675;
      break;
    } else {
      label = 676;
      break;
    }
   case 675:
    var $1713 = HEAP16[5398712 >> 1];
    HEAP16[5245036 >> 1] = $1713;
    label = 676;
    break;
   case 676:
    var $1715 = HEAP16[5245028 >> 1];
    var $1716 = $1715 << 16 >> 16 == 0;
    if ($1716) {
      label = 677;
      break;
    } else {
      label = 678;
      break;
    }
   case 677:
    var $1718 = HEAP16[5242964 >> 1];
    HEAP16[5245028 >> 1] = $1718;
    label = 678;
    break;
   case 678:
    var $1719 = HEAP32[5427632 >> 2];
    var $1720 = ($1719 | 0) != 0;
    var $1721 = HEAP32[5560840 >> 2];
    var $1722 = ($1721 | 0) == 3;
    var $or_cond13 = $1720 & $1722;
    if ($or_cond13) {
      label = 679;
      break;
    } else {
      label = 680;
      break;
    }
   case 679:
    var $1724 = $1719 >>> 2;
    var $1725 = $1724 & 572662306;
    var $1726 = $1719 << 2;
    var $1727 = $1726 & -2004318072;
    var $1728 = $1725 | $1727;
    var $1729 = $1719 << 1;
    var $1730 = $1728 & $1729;
    var $1731 = $1730 | $1719;
    HEAP32[5427632 >> 2] = $1731;
    label = 680;
    break;
   case 680:
    var $1732 = HEAP32[5403048 >> 2];
    var $1733 = ($1732 | 0) == -1;
    if ($1733) {
      label = 681;
      break;
    } else {
      label = 683;
      break;
    }
   case 681:
    var $1735 = HEAP32[5244028 >> 2];
    HEAP32[5403048 >> 2] = $1735;
    var $1736 = ($1735 | 0) == -1;
    if ($1736) {
      label = 682;
      break;
    } else {
      label = 683;
      break;
    }
   case 682:
    HEAP32[5403048 >> 2] = 0;
    label = 683;
    break;
   case 683:
    STACKTOP = __stackBase__;
    return;
  }
}
_identify["X"] = 1;
function _convert_to_rgb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 244 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $out_cam = __stackBase__;
    var $inverse = __stackBase__ + 48;
    var $pbody = __stackBase__ + 120;
    var $1 = $pbody;
    for (var $$src = 5560604 >> 2, $$dest = $1 >> 2, $$stop = $$src + 31; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398892 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398896 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398884 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398888 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _gamma_curve($2, $3, 0, 0);
    var $4 = $out_cam;
    for (var $$src = 5244964 >> 2, $$dest = $4 >> 2, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $5 = HEAP32[5560840 >> 2];
    var $6 = ($5 | 0) == 1;
    var $7 = HEAP32[5427972 >> 2];
    var $8 = ($7 | 0) != 0;
    var $or_cond = $6 | $8;
    var $9 = HEAP32[5262936 >> 2];
    var $10 = ($9 | 0) < 1;
    var $or_cond3 = $or_cond | $10;
    if ($or_cond3) {
      var $14 = 1;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $12 = ($9 | 0) > 5;
    var $14 = $12;
    label = 4;
    break;
   case 4:
    var $14;
    var $15 = $14 & 1;
    var $16 = HEAP32[5245040 >> 2];
    var $17 = $16 | $15;
    HEAP32[5245040 >> 2] = $17;
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      var $145 = $9;
      label = 16;
      break;
    }
   case 5:
    var $20 = _calloc(1024, 1);
    var $21 = $20;
    HEAP32[5262948 >> 2] = $21;
    _merror($20, 5576460);
    var $22 = HEAP32[5262948 >> 2];
    var $23 = $22;
    for (var $$src = 5560508 >> 2, $$dest = $23 >> 2, $$stop = $$src + 20; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $24 = HEAP32[5262936 >> 2];
    var $25 = ($24 | 0) == 5;
    if ($25) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $27 = $22 + 16 | 0;
    HEAP32[$27 >> 2] = 1482250784;
    label = 7;
    break;
   case 7:
    var $28 = $pbody | 0;
    HEAP32[$22 >> 2] = 252;
    var $i_0112 = 0;
    var $29 = 252;
    label = 8;
    break;
   case 8:
    var $29;
    var $i_0112;
    var $30 = ($i_0112 | 0) == 0;
    if ($30) {
      var $35 = 1952807028;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $32 = ($i_0112 | 0) > 1;
    var $33 = $32 ? 1482250784 : 1684370275;
    var $35 = $33;
    label = 10;
    break;
   case 10:
    var $35;
    var $36 = $29 >>> 2;
    var $37 = $22 + ($36 << 2) | 0;
    HEAP32[$37 >> 2] = $35;
    var $38 = HEAP32[$22 >> 2];
    var $39 = $i_0112 * 3 & -1;
    var $40 = $39 + 2 | 0;
    var $41 = $pbody + ($40 << 2) | 0;
    HEAP32[$41 >> 2] = $38;
    var $42 = $39 + 3 | 0;
    var $43 = $pbody + ($42 << 2) | 0;
    var $44 = HEAP32[$43 >> 2];
    var $45 = $44 + 3 | 0;
    var $46 = $45 & -4;
    var $47 = HEAP32[$22 >> 2];
    var $48 = $47 + $46 | 0;
    HEAP32[$22 >> 2] = $48;
    var $49 = $i_0112 + 1 | 0;
    var $50 = HEAP32[$28 >> 2];
    var $51 = $49 >>> 0 < $50 >>> 0;
    if ($51) {
      var $i_0112 = $49;
      var $29 = $48;
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_phi_trans_insert = $pbody + 20 | 0;
    var $_pre = HEAP32[$_phi_trans_insert >> 2];
    var $_phi_trans_insert5 = $pbody + 32 | 0;
    var $_pre6 = HEAP32[$_phi_trans_insert5 >> 2];
    var $_phi_trans_insert7 = $pbody + 56 | 0;
    var $_pre8 = HEAP32[$_phi_trans_insert7 >> 2];
    var $_phi_trans_insert9 = $pbody + 68 | 0;
    var $_pre10 = HEAP32[$_phi_trans_insert9 >> 2];
    var $_phi_trans_insert11 = $pbody + 80 | 0;
    var $_pre12 = HEAP32[$_phi_trans_insert11 >> 2];
    var $_phi_trans_insert13 = $pbody + 92 | 0;
    var $_pre14 = HEAP32[$_phi_trans_insert13 >> 2];
    var $_phi_trans_insert15 = $pbody + 104 | 0;
    var $_pre16 = HEAP32[$_phi_trans_insert15 >> 2];
    var $_phi_trans_insert17 = $pbody + 116 | 0;
    var $_pre18 = HEAP32[$_phi_trans_insert17 >> 2];
    var $phitmp40 = $_pre >>> 2;
    var $phitmp41 = $phitmp40 + 2 | 0;
    var $phitmp42 = $_pre6 + 8 | 0;
    var $phitmp43 = $_pre14 >>> 2;
    var $phitmp44 = $_pre16 >>> 2;
    var $phitmp45 = $_pre18 >>> 2;
    var $53 = $22 + 128 | 0;
    var $54 = $53;
    for (var $$src = $1 >> 2, $$dest = $54 >> 2, $$stop = $$src + 31; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $55 = $24 - 1 | 0;
    var $56 = 5560748 + ($55 << 2) | 0;
    var $57 = HEAP32[$56 >> 2];
    var $58 = _strlen($57);
    var $59 = $58 + 1 | 0;
    var $60 = $22 + ($phitmp41 << 2) | 0;
    HEAP32[$60 >> 2] = $59;
    var $61 = $23 + $phitmp42 | 0;
    for (var $$src = 5560424, $$dest = $61, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $62 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398876 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398880 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $63 = 256 / $62;
    var $64 = $63 + .5;
    var $65 = $64 & -1;
    var $66 = $65 & 65535;
    var $67 = $66 << 16;
    var $68 = $23 + $_pre8 | 0;
    for (var $$src = 5560588, $$dest = $68, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $_sum79 = $_pre8 + 12 | 0;
    var $pcurve_sroa_1_12__idx = $23 + $_sum79 | 0;
    var $pcurve_sroa_1_12__cast = $pcurve_sroa_1_12__idx;
    tempBigInt = $67;
    HEAP8[$pcurve_sroa_1_12__cast] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast + 3] = tempBigInt & 255;
    var $69 = $23 + $_pre10 | 0;
    for (var $$src = 5560588, $$dest = $69, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $_sum79_1 = $_pre10 + 12 | 0;
    var $pcurve_sroa_1_12__idx_1 = $23 + $_sum79_1 | 0;
    var $pcurve_sroa_1_12__cast_1 = $pcurve_sroa_1_12__idx_1;
    tempBigInt = $67;
    HEAP8[$pcurve_sroa_1_12__cast_1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_1 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_1 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_1 + 3] = tempBigInt & 255;
    var $70 = $23 + $_pre12 | 0;
    for (var $$src = 5560588, $$dest = $70, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $_sum79_2 = $_pre12 + 12 | 0;
    var $pcurve_sroa_1_12__idx_2 = $23 + $_sum79_2 | 0;
    var $pcurve_sroa_1_12__cast_2 = $pcurve_sroa_1_12__idx_2;
    tempBigInt = $67;
    HEAP8[$pcurve_sroa_1_12__cast_2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_2 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_2 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12__cast_2 + 3] = tempBigInt & 255;
    var $71 = 5560728 + ($55 << 2) | 0;
    var $72 = HEAP32[$71 >> 2];
    var $73 = $inverse | 0;
    _pseudoinverse($72, $73, 3);
    var $74 = $inverse | 0;
    var $75 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$74 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$74 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $76 = $inverse + 8 | 0;
    var $77 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$76 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$76 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $78 = $inverse + 16 | 0;
    var $79 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$78 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$78 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $80 = $inverse + 24 | 0;
    var $81 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$80 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$80 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $82 = $inverse + 32 | 0;
    var $83 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$82 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$82 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $84 = $inverse + 40 | 0;
    var $85 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$84 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$84 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $86 = $inverse + 48 | 0;
    var $87 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$86 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$86 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $88 = $inverse + 56 | 0;
    var $89 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$88 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$88 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $90 = $inverse + 64 | 0;
    var $91 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$90 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$90 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $i_2110 = 0;
    label = 47;
    break;
   case 12:
    var $92;
    var $i_3104;
    var $93 = $92 + ($i_3104 << 2) | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = _htonl($94);
    var $96 = HEAP32[5262948 >> 2];
    var $97 = $96 + ($i_3104 << 2) | 0;
    HEAP32[$97 >> 2] = $95;
    var $98 = $i_3104 + 1 | 0;
    var $exitcond120 = ($98 | 0) == 256;
    if ($exitcond120) {
      label = 13;
      break;
    } else {
      var $i_3104 = $98;
      var $92 = $96;
      label = 12;
      break;
    }
   case 13:
    var $99 = $96;
    var $100 = $pbody + 8 | 0;
    var $101 = HEAP32[$100 >> 2];
    var $_sum76 = $101 + 8 | 0;
    var $102 = $99 + $_sum76 | 0;
    _memcpy($102, 5576436, 24);
    var $103 = HEAP32[$_phi_trans_insert >> 2];
    var $_sum77 = $103 + 12 | 0;
    var $104 = $99 + $_sum77 | 0;
    var $105 = HEAP32[5262936 >> 2];
    var $106 = $105 - 1 | 0;
    var $107 = 5560748 + ($106 << 2) | 0;
    var $108 = HEAP32[$107 >> 2];
    var $109 = _strcpy($104, $108);
    var $110 = HEAP32[5560840 >> 2];
    var $111 = ($110 | 0) > 0;
    var $112 = HEAP32[5262936 >> 2];
    if ($111) {
      label = 14;
      break;
    } else {
      var $145 = $112;
      label = 16;
      break;
    }
   case 14:
    var $113 = $112 - 1 | 0;
    var $114 = 5560728 + ($113 << 2) | 0;
    var $115 = HEAP32[$114 >> 2];
    var $116 = $115 | 0;
    var $117 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$116 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$116 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $118 = $115 + 8 | 0;
    var $119 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$118 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$118 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $120 = $115 + 16 | 0;
    var $121 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$120 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$120 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_196 = 0;
    label = 15;
    break;
   case 15:
    var $j_196;
    var $123 = $out_cam + ($j_196 << 2) | 0;
    var $124 = 5244964 + ($j_196 << 2) | 0;
    var $125 = HEAPF32[$124 >> 2];
    var $126 = $125;
    var $127 = $117 * $126;
    var $128 = $127;
    var $129 = $128;
    var $130 = 5244980 + ($j_196 << 2) | 0;
    var $131 = HEAPF32[$130 >> 2];
    var $132 = $131;
    var $133 = $119 * $132;
    var $134 = $129;
    var $135 = $134 + $133;
    var $136 = $135;
    var $137 = 5244996 + ($j_196 << 2) | 0;
    var $138 = HEAPF32[$137 >> 2];
    var $139 = $138;
    var $140 = $121 * $139;
    var $141 = $136;
    var $142 = $141 + $140;
    var $143 = $142;
    HEAPF32[$123 >> 2] = $143;
    var $144 = $j_196 + 1 | 0;
    var $exitcond = ($144 | 0) == ($110 | 0);
    if ($exitcond) {
      label = 43;
      break;
    } else {
      var $j_196 = $144;
      label = 15;
      break;
    }
   case 16:
    var $145;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $147 = HEAP32[_stderr >> 2];
    var $148 = HEAP32[5245040 >> 2];
    var $149 = ($148 | 0) != 0;
    var $150 = $149 ? 5576412 : 5576380;
    var $151 = $145 - 1 | 0;
    var $152 = 5560748 + ($151 << 2) | 0;
    var $153 = HEAP32[$152 >> 2];
    var $154 = _fprintf($147, $150, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $153, tempInt));
    label = 18;
    break;
   case 18:
    for (var $$dest = 5267636 >> 2, $$stop = $$dest + 32768; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $156 = HEAP16[5398712 >> 1];
    var $157 = $156 << 16 >> 16 == 0;
    if ($157) {
      label = 34;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $158 = HEAP32[5264108 >> 2];
    var $159 = $158 | 0;
    var $_pre19 = HEAP16[5242964 >> 1];
    var $row_091 = 0;
    var $img_092 = $159;
    var $160 = $_pre19;
    label = 20;
    break;
   case 20:
    var $160;
    var $img_092;
    var $row_091;
    var $161 = $160 << 16 >> 16 == 0;
    if ($161) {
      var $img_1_lcssa = $img_092;
      var $209 = 0;
      label = 33;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre20 = HEAP32[5245040 >> 2];
    var $col_086 = 0;
    var $img_187 = $img_092;
    label = 22;
    break;
   case 22:
    var $img_187;
    var $col_086;
    var $162 = ($_pre20 | 0) == 0;
    if ($162) {
      label = 23;
      break;
    } else {
      label = 28;
      break;
    }
   case 23:
    var $164 = HEAP32[5560840 >> 2];
    var $165 = ($164 | 0) > 0;
    if ($165) {
      var $c_080 = 0;
      var $out_sroa_0_0 = 0;
      var $out_sroa_1_0 = 0;
      var $out_sroa_2_0 = 0;
      label = 24;
      break;
    } else {
      var $out_sroa_2_147 = 0;
      var $out_sroa_1_149 = 0;
      var $out_sroa_0_151 = 0;
      label = 26;
      break;
    }
   case 24:
    var $out_sroa_2_0;
    var $out_sroa_1_0;
    var $out_sroa_0_0;
    var $c_080;
    var $166 = $out_cam + ($c_080 << 2) | 0;
    var $167 = HEAPF32[$166 >> 2];
    var $168 = $img_187 + ($c_080 << 1) | 0;
    var $169 = HEAP16[$168 >> 1];
    var $170 = $169 & 65535;
    var $171 = $170 | 0;
    var $172 = $167 * $171;
    var $173 = $out_sroa_0_0 + $172;
    var $174 = $out_cam + 16 + ($c_080 << 2) | 0;
    var $175 = HEAPF32[$174 >> 2];
    var $176 = $175 * $171;
    var $177 = $out_sroa_1_0 + $176;
    var $178 = $out_cam + 32 + ($c_080 << 2) | 0;
    var $179 = HEAPF32[$178 >> 2];
    var $180 = $179 * $171;
    var $181 = $out_sroa_2_0 + $180;
    var $182 = $c_080 + 1 | 0;
    var $183 = ($182 | 0) < ($164 | 0);
    if ($183) {
      var $c_080 = $182;
      var $out_sroa_0_0 = $173;
      var $out_sroa_1_0 = $177;
      var $out_sroa_2_0 = $181;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $phitmp37 = $173 & -1;
    var $phitmp38 = $177 & -1;
    var $phitmp39 = $181 & -1;
    var $phitmp = ($phitmp37 | 0) < 0;
    if ($phitmp) {
      var $186 = 0;
      var $out_sroa_2_148 = $phitmp39;
      var $out_sroa_1_150 = $phitmp38;
      label = 27;
      break;
    } else {
      var $out_sroa_2_147 = $phitmp39;
      var $out_sroa_1_149 = $phitmp38;
      var $out_sroa_0_151 = $phitmp37;
      label = 26;
      break;
    }
   case 26:
    var $out_sroa_0_151;
    var $out_sroa_1_149;
    var $out_sroa_2_147;
    var $184 = ($out_sroa_0_151 | 0) < 65535;
    var $phitmp78 = $out_sroa_0_151 & 65535;
    var $phitmp78_ = $184 ? $phitmp78 : -1;
    var $186 = $phitmp78_;
    var $out_sroa_2_148 = $out_sroa_2_147;
    var $out_sroa_1_150 = $out_sroa_1_149;
    label = 27;
    break;
   case 27:
    var $out_sroa_1_150;
    var $out_sroa_2_148;
    var $186;
    HEAP16[$img_187 >> 1] = $186;
    var $phitmp_1 = ($out_sroa_1_150 | 0) < 0;
    if ($phitmp_1) {
      var $227 = 0;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 28:
    var $188 = HEAP32[5427972 >> 2];
    var $189 = ($188 | 0) == 0;
    if ($189) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $191 = _fcol($row_091, $col_086);
    var $192 = $img_187 + ($191 << 1) | 0;
    var $193 = HEAP16[$192 >> 1];
    HEAP16[$img_187 >> 1] = $193;
    label = 30;
    break;
   case 30:
    var $194 = HEAP32[5560840 >> 2];
    var $195 = ($194 | 0) > 0;
    if ($195) {
      var $c_283 = 0;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $c_283;
    var $196 = $img_187 + ($c_283 << 1) | 0;
    var $197 = HEAP16[$196 >> 1];
    var $198 = $197 & 65535;
    var $199 = $198 >>> 3;
    var $200 = 5267636 + ($c_283 << 15) + ($199 << 2) | 0;
    var $201 = HEAP32[$200 >> 2];
    var $202 = $201 + 1 | 0;
    HEAP32[$200 >> 2] = $202;
    var $203 = $c_283 + 1 | 0;
    var $204 = ($203 | 0) < ($194 | 0);
    if ($204) {
      var $c_283 = $203;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $205 = $col_086 + 1 | 0;
    var $206 = $img_187 + 8 | 0;
    var $207 = $_pre19 & 65535;
    var $208 = ($205 | 0) < ($207 | 0);
    if ($208) {
      var $col_086 = $205;
      var $img_187 = $206;
      label = 22;
      break;
    } else {
      var $img_1_lcssa = $206;
      var $209 = $_pre19;
      label = 33;
      break;
    }
   case 33:
    var $209;
    var $img_1_lcssa;
    var $210 = $row_091 + 1 | 0;
    var $211 = $156 & 65535;
    var $212 = ($210 | 0) < ($211 | 0);
    if ($212) {
      var $row_091 = $210;
      var $img_092 = $img_1_lcssa;
      var $160 = $209;
      label = 20;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $213 = HEAP32[5560840 >> 2];
    var $214 = ($213 | 0) == 4;
    var $215 = HEAP32[5262936 >> 2];
    var $216 = ($215 | 0) != 0;
    var $or_cond5 = $214 & $216;
    if ($or_cond5) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    HEAP32[5560840 >> 2] = 3;
    label = 36;
    break;
   case 36:
    var $218 = HEAP32[5427972 >> 2];
    var $219 = ($218 | 0) != 0;
    var $220 = HEAP32[5427632 >> 2];
    var $221 = ($220 | 0) != 0;
    var $or_cond7 = $219 & $221;
    if ($or_cond7) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[5560840 >> 2] = 1;
    label = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
   case 39:
    var $225 = ($out_sroa_1_150 | 0) < 65535;
    var $phitmp78_1 = $out_sroa_1_150 & 65535;
    var $phitmp78__1 = $225 ? $phitmp78_1 : -1;
    var $227 = $phitmp78__1;
    label = 40;
    break;
   case 40:
    var $227;
    var $228 = $img_187 + 2 | 0;
    HEAP16[$228 >> 1] = $227;
    var $phitmp_2 = ($out_sroa_2_148 | 0) < 0;
    if ($phitmp_2) {
      var $231 = 0;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $230 = ($out_sroa_2_148 | 0) < 65535;
    var $phitmp78_2 = $out_sroa_2_148 & 65535;
    var $phitmp78__2 = $230 ? $phitmp78_2 : -1;
    var $231 = $phitmp78__2;
    label = 42;
    break;
   case 42:
    var $231;
    var $232 = $img_187 + 4 | 0;
    HEAP16[$232 >> 1] = $231;
    label = 30;
    break;
   case 43:
    var $233 = $115 + 24 | 0;
    var $234 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$233 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$233 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $235 = $115 + 32 | 0;
    var $236 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$235 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$235 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $237 = $115 + 40 | 0;
    var $238 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$237 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$237 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_196_1 = 0;
    label = 44;
    break;
   case 44:
    var $j_196_1;
    var $240 = $out_cam + 16 + ($j_196_1 << 2) | 0;
    var $241 = 5244964 + ($j_196_1 << 2) | 0;
    var $242 = HEAPF32[$241 >> 2];
    var $243 = $242;
    var $244 = $234 * $243;
    var $245 = $244;
    var $246 = $245;
    var $247 = 5244980 + ($j_196_1 << 2) | 0;
    var $248 = HEAPF32[$247 >> 2];
    var $249 = $248;
    var $250 = $236 * $249;
    var $251 = $246;
    var $252 = $251 + $250;
    var $253 = $252;
    var $254 = 5244996 + ($j_196_1 << 2) | 0;
    var $255 = HEAPF32[$254 >> 2];
    var $256 = $255;
    var $257 = $238 * $256;
    var $258 = $253;
    var $259 = $258 + $257;
    var $260 = $259;
    HEAPF32[$240 >> 2] = $260;
    var $261 = $j_196_1 + 1 | 0;
    var $exitcond_1 = ($261 | 0) == ($110 | 0);
    if ($exitcond_1) {
      label = 45;
      break;
    } else {
      var $j_196_1 = $261;
      label = 44;
      break;
    }
   case 45:
    var $262 = $115 + 48 | 0;
    var $263 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$262 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$262 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $264 = $115 + 56 | 0;
    var $265 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$264 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$264 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $266 = $115 + 64 | 0;
    var $267 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$266 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$266 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_196_2 = 0;
    label = 46;
    break;
   case 46:
    var $j_196_2;
    var $269 = $out_cam + 32 + ($j_196_2 << 2) | 0;
    var $270 = 5244964 + ($j_196_2 << 2) | 0;
    var $271 = HEAPF32[$270 >> 2];
    var $272 = $271;
    var $273 = $263 * $272;
    var $274 = $273;
    var $275 = $274;
    var $276 = 5244980 + ($j_196_2 << 2) | 0;
    var $277 = HEAPF32[$276 >> 2];
    var $278 = $277;
    var $279 = $265 * $278;
    var $280 = $275;
    var $281 = $280 + $279;
    var $282 = $281;
    var $283 = 5244996 + ($j_196_2 << 2) | 0;
    var $284 = HEAPF32[$283 >> 2];
    var $285 = $284;
    var $286 = $267 * $285;
    var $287 = $282;
    var $288 = $287 + $286;
    var $289 = $288;
    HEAPF32[$269 >> 2] = $289;
    var $290 = $j_196_2 + 1 | 0;
    var $exitcond_2 = ($290 | 0) == ($110 | 0);
    if ($exitcond_2) {
      var $145 = $112;
      label = 16;
      break;
    } else {
      var $j_196_2 = $290;
      label = 46;
      break;
    }
   case 47:
    var $i_2110;
    var $292 = $i_2110 + 2 | 0;
    var $293 = 5560208 + $i_2110 * 24 | 0;
    var $294 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$293 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$293 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $295 = $294 * $75;
    var $296 = $295;
    var $297 = 5560216 + $i_2110 * 24 | 0;
    var $298 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$297 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$297 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $299 = $298 * $77;
    var $300 = $296 + $299;
    var $301 = 5560224 + $i_2110 * 24 | 0;
    var $302 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$301 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$301 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $303 = $302 * $79;
    var $304 = $300 + $303;
    var $305 = $304 * 65536;
    var $306 = $305 + .5;
    var $307 = $306 >= 0 ? Math.floor($306) : Math.ceil($306);
    var $308 = $292 + $phitmp43 | 0;
    var $309 = $22 + ($308 << 2) | 0;
    HEAP32[$309 >> 2] = $307;
    var $310 = $294 * $81;
    var $311 = $310;
    var $312 = $298 * $83;
    var $313 = $311 + $312;
    var $314 = $302 * $85;
    var $315 = $313 + $314;
    var $316 = $315 * 65536;
    var $317 = $316 + .5;
    var $318 = $317 >= 0 ? Math.floor($317) : Math.ceil($317);
    var $319 = $292 + $phitmp44 | 0;
    var $320 = $22 + ($319 << 2) | 0;
    HEAP32[$320 >> 2] = $318;
    var $321 = $294 * $87;
    var $322 = $321;
    var $323 = $298 * $89;
    var $324 = $322 + $323;
    var $325 = $302 * $91;
    var $326 = $324 + $325;
    var $327 = $326 * 65536;
    var $328 = $327 + .5;
    var $329 = $328 >= 0 ? Math.floor($328) : Math.ceil($328);
    var $330 = $292 + $phitmp45 | 0;
    var $331 = $22 + ($330 << 2) | 0;
    HEAP32[$331 >> 2] = $329;
    var $332 = $i_2110 + 1 | 0;
    var $exitcond124 = ($332 | 0) == 3;
    if ($exitcond124) {
      var $i_3104 = 0;
      var $92 = $22;
      label = 12;
      break;
    } else {
      var $i_2110 = $332;
      label = 47;
      break;
    }
  }
}
_convert_to_rgb["X"] = 1;
function _fuji_rotate() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP16[5398900 >> 1];
    var $2 = $1 << 16 >> 16 == 0;
    if ($2) {
      label = 17;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $8 = $1;
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP32[_stderr >> 2];
    var $6 = _fwrite(5576348, 29, 1, $5);
    var $_pre = HEAP16[5398900 >> 1];
    var $8 = $_pre;
    label = 5;
    break;
   case 5:
    var $8;
    var $9 = $8 & 65535;
    var $10 = $9 - 1 | 0;
    var $11 = HEAP16[5244916 >> 1];
    var $12 = $11 & 65535;
    var $13 = $10 + $12 | 0;
    var $14 = $13 >> $12;
    var $15 = $14 & 65535;
    HEAP16[5398900 >> 1] = $15;
    var $16 = $14 & 65535;
    var $17 = $16 | 0;
    var $18 = $17 / .7071067811865476;
    var $19 = $18 >= 0 ? Math.floor($18) : Math.ceil($18);
    var $20 = HEAP16[5398712 >> 1];
    var $21 = $20 & 65535;
    var $22 = $21 - $16 | 0;
    var $23 = $22 | 0;
    var $24 = $23 / .7071067811865476;
    var $25 = $24 >= 0 ? Math.floor($24) : Math.ceil($24);
    var $26 = $19 & 65535;
    var $27 = $25 & 65535;
    var $28 = $27 * $26 & -1;
    var $29 = _calloc($28, 8);
    var $30 = $29;
    _merror($29, 5576308);
    var $31 = $25 << 16 >> 16 == 0;
    if ($31) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $32 = $19 << 16 >> 16 == 0;
    var $row_042 = 0;
    label = 7;
    break;
   case 7:
    var $row_042;
    if ($32) {
      label = 15;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $33 = $row_042 * $26 & -1;
    var $_pre1 = HEAP16[5398900 >> 1];
    var $_pre2 = HEAP16[5398712 >> 1];
    var $col_040 = 0;
    label = 9;
    break;
   case 9:
    var $col_040;
    var $35 = $_pre1 & 65535;
    var $36 = $35 | 0;
    var $37 = $row_042 - $col_040 | 0;
    var $38 = $37 | 0;
    var $39 = $38 * .7071067811865476;
    var $40 = $39 + $36;
    var $41 = $40;
    var $42 = $41 >= 0 ? Math.floor($41) : Math.ceil($41);
    var $43 = $col_040 + $row_042 | 0;
    var $44 = $43 | 0;
    var $45 = $44 * .7071067811865476;
    var $46 = $45;
    var $47 = $46 >= 0 ? Math.floor($46) : Math.ceil($46);
    var $48 = $_pre2 & 65535;
    var $49 = $48 - 2 | 0;
    var $50 = $42 >>> 0 > $49 >>> 0;
    if ($50) {
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $52 = HEAP16[5242964 >> 1];
    var $53 = $52 & 65535;
    var $54 = $53 - 2 | 0;
    var $55 = $47 >>> 0 > $54 >>> 0;
    if ($55) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $57 = $42 >>> 0;
    var $58 = $41 - $57;
    var $59 = $47 >>> 0;
    var $60 = $46 - $59;
    var $61 = HEAP32[5264108 >> 2];
    var $62 = $53 * $42 & -1;
    var $_sum = $62 + $47 | 0;
    var $63 = HEAP32[5560840 >> 2];
    var $64 = ($63 | 0) > 0;
    if ($64) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $65 = 1 - $60;
    var $_sum36 = $_sum + 1 | 0;
    var $66 = 1 - $58;
    var $67 = $col_040 + $33 | 0;
    var $i_039 = 0;
    label = 13;
    break;
   case 13:
    var $i_039;
    var $69 = $61 + ($_sum << 3) + ($i_039 << 1) | 0;
    var $70 = HEAP16[$69 >> 1];
    var $71 = $70 & 65535;
    var $72 = $71 | 0;
    var $73 = $65 * $72;
    var $74 = $61 + ($_sum36 << 3) + ($i_039 << 1) | 0;
    var $75 = HEAP16[$74 >> 1];
    var $76 = $75 & 65535;
    var $77 = $76 | 0;
    var $78 = $60 * $77;
    var $79 = $73 + $78;
    var $80 = $66 * $79;
    var $_sum37 = $53 + $_sum | 0;
    var $81 = $61 + ($_sum37 << 3) + ($i_039 << 1) | 0;
    var $82 = HEAP16[$81 >> 1];
    var $83 = $82 & 65535;
    var $84 = $83 | 0;
    var $85 = $65 * $84;
    var $_sum38 = $_sum36 + $53 | 0;
    var $86 = $61 + ($_sum38 << 3) + ($i_039 << 1) | 0;
    var $87 = HEAP16[$86 >> 1];
    var $88 = $87 & 65535;
    var $89 = $88 | 0;
    var $90 = $60 * $89;
    var $91 = $85 + $90;
    var $92 = $58 * $91;
    var $93 = $80 + $92;
    var $94 = $93 >= 0 ? Math.floor($93) : Math.ceil($93);
    var $95 = $30 + ($67 << 3) + ($i_039 << 1) | 0;
    HEAP16[$95 >> 1] = $94;
    var $96 = $i_039 + 1 | 0;
    var $97 = ($96 | 0) < ($63 | 0);
    if ($97) {
      var $i_039 = $96;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $98 = $col_040 + 1 | 0;
    var $99 = ($98 | 0) < ($26 | 0);
    if ($99) {
      var $col_040 = $98;
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $100 = $row_042 + 1 | 0;
    var $101 = ($100 | 0) < ($27 | 0);
    if ($101) {
      var $row_042 = $100;
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $102 = HEAP32[5264108 >> 2];
    var $103 = $102;
    _free($103);
    HEAP16[5242964 >> 1] = $19;
    HEAP16[5398712 >> 1] = $25;
    HEAP32[5264108 >> 2] = $30;
    HEAP16[5398900 >> 1] = 0;
    label = 17;
    break;
   case 17:
    return;
  }
}
_fuji_rotate["X"] = 1;
function _flip_index($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5403048 >> 2];
    var $2 = $1 & 4;
    var $3 = ($2 | 0) == 0;
    var $row_col = $3 ? $row : $col;
    var $col_row = $3 ? $col : $row;
    var $4 = $1 & 2;
    var $5 = ($4 | 0) == 0;
    if ($5) {
      var $_111 = $row_col;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $7 = HEAP16[5264112 >> 1];
    var $8 = $7 & 65535;
    var $9 = $row_col ^ -1;
    var $10 = $8 + $9 | 0;
    var $_111 = $10;
    label = 4;
    break;
   case 4:
    var $_111;
    var $12 = $1 & 1;
    var $13 = ($12 | 0) == 0;
    var $_pre = HEAP16[5264092 >> 1];
    if ($13) {
      var $_1 = $col_row;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $15 = $_pre & 65535;
    var $16 = $col_row ^ -1;
    var $17 = $15 + $16 | 0;
    var $_1 = $17;
    label = 6;
    break;
   case 6:
    var $_1;
    var $18 = $_pre & 65535;
    var $19 = $18 * $_111 & -1;
    var $20 = $19 + $_1 | 0;
    return $20;
  }
}
function _tiff_set($ntag, $tag, $type, $count, $val) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $ntag + 2 | 0;
    var $2 = $1;
    var $3 = HEAP16[$ntag >> 1];
    var $4 = $3 + 1 & 65535;
    HEAP16[$ntag >> 1] = $4;
    var $5 = $3 & 65535;
    var $6 = $2 + $5 * 12 | 0;
    HEAP16[$6 >> 1] = $tag;
    var $7 = $2 + $5 * 12 + 2 | 0;
    HEAP16[$7 >> 1] = $type;
    var $8 = $2 + $5 * 12 + 4 | 0;
    HEAP32[$8 >> 2] = $count;
    var $9 = ($type & 65535) < 3;
    var $10 = ($count | 0) < 5;
    var $or_cond = $9 & $10;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $11 = $2 + $5 * 12 + 8 | 0;
    var $12 = $11;
    var $13 = $val & 255;
    var $14 = $11;
    HEAP8[$14] = $13;
    var $15 = $val >>> 8;
    var $16 = $15 & 255;
    var $17 = $12 + 1 | 0;
    HEAP8[$17] = $16;
    var $18 = $val >>> 16;
    var $19 = $18 & 255;
    var $20 = $12 + 2 | 0;
    HEAP8[$20] = $19;
    var $21 = $val >>> 24;
    var $22 = $21 & 255;
    var $23 = $12 + 3 | 0;
    HEAP8[$23] = $22;
    label = 7;
    break;
   case 4:
    var $25 = $type << 16 >> 16 == 3;
    var $26 = ($count | 0) < 3;
    var $or_cond24 = $25 & $26;
    if ($or_cond24) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $27 = $2 + $5 * 12 + 8 | 0;
    var $28 = $27;
    var $29 = $val & 65535;
    var $30 = $27;
    HEAP16[$30 >> 1] = $29;
    var $31 = $val >>> 16;
    var $32 = $31 & 65535;
    var $33 = $28 + 2 | 0;
    HEAP16[$33 >> 1] = $32;
    label = 7;
    break;
   case 6:
    var $35 = $2 + $5 * 12 + 8 | 0;
    HEAP32[$35 >> 2] = $val;
    label = 7;
    break;
   case 7:
    return;
  }
}
_tiff_set["X"] = 1;
function _stretch() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = $1 == 1;
    if ($2) {
      label = 31;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $8 = $1;
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP32[_stderr >> 2];
    var $6 = _fwrite(5576280, 24, 1, $5);
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $8 = $_pre;
    label = 5;
    break;
   case 5:
    var $8;
    var $9 = $8 < 1;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 18;
      break;
    }
   case 6:
    var $11 = HEAP16[5398712 >> 1];
    var $12 = $11 & 65535;
    var $13 = $12 | 0;
    var $14 = $13 / $8;
    var $15 = $14 + .5;
    var $16 = $15 >= 0 ? Math.floor($15) : Math.ceil($15);
    var $17 = HEAP16[5242964 >> 1];
    var $18 = $17 & 65535;
    var $19 = $16 & 65535;
    var $20 = $19 * $18 & -1;
    var $21 = _calloc($20, 8);
    var $22 = $21;
    _merror($21, 5576268);
    var $23 = $16 << 16 >> 16 == 0;
    if ($23) {
      label = 17;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre1 = HEAP16[5242964 >> 1];
    var $_pre2 = HEAP32[5264108 >> 2];
    var $_pre3 = HEAP16[5398712 >> 1];
    var $row_056 = 0;
    var $rc_058 = 0;
    var $24 = $_pre1;
    label = 8;
    break;
   case 8:
    var $24;
    var $rc_058;
    var $row_056;
    var $25 = $rc_058 & -1;
    var $26 = $25 | 0;
    var $27 = $rc_058 - $26;
    var $28 = $24 & 65535;
    var $29 = $28 * $25 & -1;
    var $30 = $_pre2 + ($29 << 3) | 0;
    var $31 = $25 + 1 | 0;
    var $32 = $_pre3 & 65535;
    var $33 = ($31 | 0) < ($32 | 0);
    if ($33) {
      label = 9;
      break;
    } else {
      var $pix1_1_ph = $30;
      label = 10;
      break;
    }
   case 9:
    var $35 = $28 << 2;
    var $36 = $_pre2 + ($29 << 3) + ($35 << 1) | 0;
    var $pix1_1_ph = $36;
    label = 10;
    break;
   case 10:
    var $pix1_1_ph;
    var $37 = $24 << 16 >> 16 == 0;
    if ($37) {
      var $63 = 0;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $38 = 1 - $27;
    var $_pre4 = HEAP32[5560840 >> 2];
    var $pix0_052 = $30;
    var $pix1_153 = $pix1_1_ph;
    var $col_054 = 0;
    label = 12;
    break;
   case 12:
    var $col_054;
    var $pix1_153;
    var $pix0_052;
    var $39 = ($_pre4 | 0) > 0;
    if ($39) {
      var $c_050 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre8 = $_pre1 & 65535;
    var $_pre_phi = $_pre8;
    label = 15;
    break;
   case 14:
    var $c_050;
    var $40 = $pix0_052 + ($c_050 << 1) | 0;
    var $41 = HEAP16[$40 >> 1];
    var $42 = $41 & 65535;
    var $43 = $42 | 0;
    var $44 = $38 * $43;
    var $45 = $pix1_153 + ($c_050 << 1) | 0;
    var $46 = HEAP16[$45 >> 1];
    var $47 = $46 & 65535;
    var $48 = $47 | 0;
    var $49 = $27 * $48;
    var $50 = $44 + $49;
    var $51 = $50 + .5;
    var $52 = $51 >= 0 ? Math.floor($51) : Math.ceil($51);
    var $53 = $_pre1 & 65535;
    var $54 = $53 * $row_056 & -1;
    var $55 = $54 + $col_054 | 0;
    var $56 = $22 + ($55 << 3) + ($c_050 << 1) | 0;
    HEAP16[$56 >> 1] = $52;
    var $57 = $c_050 + 1 | 0;
    var $58 = ($57 | 0) < ($_pre4 | 0);
    if ($58) {
      var $c_050 = $57;
      label = 14;
      break;
    } else {
      var $_pre_phi = $53;
      label = 15;
      break;
    }
   case 15:
    var $_pre_phi;
    var $59 = $col_054 + 1 | 0;
    var $60 = $pix0_052 + 8 | 0;
    var $61 = $pix1_153 + 8 | 0;
    var $62 = ($59 | 0) < ($_pre_phi | 0);
    if ($62) {
      var $pix0_052 = $60;
      var $pix1_153 = $61;
      var $col_054 = $59;
      label = 12;
      break;
    } else {
      var $63 = $_pre1;
      label = 16;
      break;
    }
   case 16:
    var $63;
    var $64 = $row_056 + 1 | 0;
    var $65 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $66 = $rc_058 + $65;
    var $67 = ($64 | 0) < ($19 | 0);
    if ($67) {
      var $row_056 = $64;
      var $rc_058 = $66;
      var $24 = $63;
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP16[5398712 >> 1] = $16;
    var $img_0 = $22;
    label = 30;
    break;
   case 18:
    var $69 = HEAP16[5242964 >> 1];
    var $70 = $69 & 65535;
    var $71 = $70 | 0;
    var $72 = $8 * $71;
    var $73 = $72 + .5;
    var $74 = $73 >= 0 ? Math.floor($73) : Math.ceil($73);
    var $75 = HEAP16[5398712 >> 1];
    var $76 = $75 & 65535;
    var $77 = $74 & 65535;
    var $78 = $77 * $76 & -1;
    var $79 = _calloc($78, 8);
    var $80 = $79;
    _merror($79, 5576268);
    var $81 = $74 << 16 >> 16 == 0;
    if ($81) {
      label = 29;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre5 = HEAP32[5264108 >> 2];
    var $_pre6 = HEAP16[5242964 >> 1];
    var $col_171 = 0;
    var $rc_172 = 0;
    label = 20;
    break;
   case 20:
    var $rc_172;
    var $col_171;
    var $82 = $rc_172 & -1;
    var $83 = $82 | 0;
    var $84 = $rc_172 - $83;
    var $85 = $_pre5 + ($82 << 3) | 0;
    var $86 = $82 + 1 | 0;
    var $87 = $_pre6 & 65535;
    var $88 = ($86 | 0) < ($87 | 0);
    if ($88) {
      label = 21;
      break;
    } else {
      var $pix1_3_ph = $85;
      label = 22;
      break;
    }
   case 21:
    var $90 = $_pre5 + ($82 << 3) + 8 | 0;
    var $pix1_3_ph = $90;
    label = 22;
    break;
   case 22:
    var $pix1_3_ph;
    var $91 = HEAP16[5398712 >> 1];
    var $92 = $91 << 16 >> 16 == 0;
    if ($92) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $93 = 1 - $84;
    var $_pre7 = HEAP32[5560840 >> 2];
    var $pix0_167 = $85;
    var $pix1_368 = $pix1_3_ph;
    var $row_169 = 0;
    label = 24;
    break;
   case 24:
    var $row_169;
    var $pix1_368;
    var $pix0_167;
    var $94 = ($_pre7 | 0) > 0;
    if ($94) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    var $95 = $row_169 * $77 & -1;
    var $96 = $95 + $col_171 | 0;
    var $c_163 = 0;
    label = 26;
    break;
   case 26:
    var $c_163;
    var $98 = $pix0_167 + ($c_163 << 1) | 0;
    var $99 = HEAP16[$98 >> 1];
    var $100 = $99 & 65535;
    var $101 = $100 | 0;
    var $102 = $93 * $101;
    var $103 = $pix1_368 + ($c_163 << 1) | 0;
    var $104 = HEAP16[$103 >> 1];
    var $105 = $104 & 65535;
    var $106 = $105 | 0;
    var $107 = $84 * $106;
    var $108 = $102 + $107;
    var $109 = $108 + .5;
    var $110 = $109 >= 0 ? Math.floor($109) : Math.ceil($109);
    var $111 = $80 + ($96 << 3) + ($c_163 << 1) | 0;
    HEAP16[$111 >> 1] = $110;
    var $112 = $c_163 + 1 | 0;
    var $113 = ($112 | 0) < ($_pre7 | 0);
    if ($113) {
      var $c_163 = $112;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $114 = $row_169 + 1 | 0;
    var $115 = $87 << 2;
    var $116 = $pix0_167 + ($115 << 1) | 0;
    var $117 = $pix1_368 + ($115 << 1) | 0;
    var $118 = $91 & 65535;
    var $119 = ($114 | 0) < ($118 | 0);
    if ($119) {
      var $pix0_167 = $116;
      var $pix1_368 = $117;
      var $row_169 = $114;
      label = 24;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $120 = $col_171 + 1 | 0;
    var $121 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $122 = 1 / $121;
    var $123 = $rc_172 + $122;
    var $124 = ($120 | 0) < ($77 | 0);
    if ($124) {
      var $col_171 = $120;
      var $rc_172 = $123;
      label = 20;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP16[5242964 >> 1] = $74;
    var $img_0 = $80;
    label = 30;
    break;
   case 30:
    var $img_0;
    var $126 = HEAP32[5264108 >> 2];
    var $127 = $126;
    _free($127);
    HEAP32[5264108 >> 2] = $img_0;
    label = 31;
    break;
   case 31:
    return;
  }
}
_stretch["X"] = 1;
function _tiff_head($th, $full) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $th;
    for (var $$dest = $1 >> 2, $$stop = $$dest + 344; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $2 = _htonl(1296910665);
    var $3 = $2 >>> 16;
    var $4 = $3 & 65535;
    var $5 = $th | 0;
    HEAP16[$5 >> 1] = $4;
    var $6 = $th + 2 | 0;
    HEAP16[$6 >> 1] = 42;
    var $7 = $th + 4 | 0;
    HEAP32[$7 >> 2] = 10;
    var $8 = ($full | 0) != 0;
    var $9 = $th + 10 | 0;
    if ($8) {
      label = 3;
      break;
    } else {
      var $_pre_phi = $9;
      label = 6;
      break;
    }
   case 3:
    _tiff_set($9, 254, 4, 1, 0);
    var $11 = HEAP16[5242964 >> 1];
    var $12 = $11 & 65535;
    _tiff_set($9, 256, 4, 1, $12);
    var $13 = HEAP16[5398712 >> 1];
    var $14 = $13 & 65535;
    _tiff_set($9, 257, 4, 1, $14);
    var $15 = HEAP32[5560840 >> 2];
    var $_b5 = HEAP8[5262940];
    var $16 = $_b5 ? 16 : 8;
    _tiff_set($9, 258, 3, $15, $16);
    var $17 = ($15 | 0) > 2;
    if ($17) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $19 = HEAP16[$9 >> 1];
    var $20 = $19 & 65535;
    var $21 = $20 - 1 | 0;
    var $22 = $th + 12 + $21 * 12 + 8 | 0;
    HEAP32[$22 >> 2] = 468;
    label = 5;
    break;
   case 5:
    var $23 = $_b5 ? 16 : 8;
    var $24 = $th + 468 | 0;
    HEAP16[$24 >> 1] = $23;
    var $25 = $th + 470 | 0;
    HEAP16[$25 >> 1] = $23;
    var $26 = $th + 472 | 0;
    HEAP16[$26 >> 1] = $23;
    var $27 = $th + 474 | 0;
    HEAP16[$27 >> 1] = $23;
    _tiff_set($9, 259, 3, 1, 1);
    var $28 = ($15 | 0) > 1;
    var $29 = $28 ? 2 : 1;
    _tiff_set($9, 262, 3, 1, $29);
    var $_pre_phi = $9;
    label = 6;
    break;
   case 6:
    var $_pre_phi;
    _tiff_set($_pre_phi, 270, 2, 512, 620);
    _tiff_set($_pre_phi, 271, 2, 64, 1132);
    _tiff_set($_pre_phi, 272, 2, 64, 1196);
    if ($8) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    var $31 = HEAP32[5262948 >> 2];
    var $32 = ($31 | 0) == 0;
    if ($32) {
      var $psize_0 = 0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $34 = HEAP32[$31 >> 2];
    var $35 = _htonl($34);
    var $psize_0 = $35;
    label = 9;
    break;
   case 9:
    var $psize_0;
    var $36 = $psize_0 + 1376 | 0;
    _tiff_set($_pre_phi, 273, 4, 1, $36);
    var $37 = HEAP32[5560840 >> 2];
    _tiff_set($_pre_phi, 277, 3, 1, $37);
    var $38 = HEAP16[5398712 >> 1];
    var $39 = $38 & 65535;
    _tiff_set($_pre_phi, 278, 4, 1, $39);
    var $40 = HEAP16[5242964 >> 1];
    var $41 = $40 & 65535;
    var $42 = $41 * $39 & -1;
    var $43 = $42 * $37 & -1;
    var $_b = HEAP8[5262940];
    var $44 = $_b ? 16 : 8;
    var $45 = $43 * $44 & -1;
    var $46 = ($45 | 0) / 8 & -1;
    _tiff_set($_pre_phi, 279, 4, 1, $46);
    var $psize_1 = $psize_0;
    label = 11;
    break;
   case 10:
    var $48 = HEAP32[5403048 >> 2];
    var $49 = $48 + 5576256 | 0;
    var $50 = HEAP8[$49];
    var $51 = $50 << 24 >> 24;
    var $52 = $51 - 48 | 0;
    _tiff_set($_pre_phi, 274, 3, 1, $52);
    var $psize_1 = 0;
    label = 11;
    break;
   case 11:
    var $psize_1;
    var $54 = $th + 476 | 0;
    _tiff_set($_pre_phi, 282, 5, 1, 476);
    var $55 = $th + 484 | 0;
    _tiff_set($_pre_phi, 283, 5, 1, 484);
    _tiff_set($_pre_phi, 284, 3, 1, 1);
    _tiff_set($_pre_phi, 296, 3, 1, 2);
    _tiff_set($_pre_phi, 305, 2, 32, 1260);
    _tiff_set($_pre_phi, 306, 2, 20, 1292);
    _tiff_set($_pre_phi, 315, 2, 64, 1312);
    var $56 = $th + 294 | 0;
    _tiff_set($_pre_phi, -30871, 4, 1, 294);
    var $57 = ($psize_1 | 0) == 0;
    if ($57) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _tiff_set($_pre_phi, -30861, 7, $psize_1, 1376);
    label = 13;
    break;
   case 13:
    var $60 = $th + 492 | 0;
    _tiff_set($56, -32102, 5, 1, 492);
    var $61 = $th + 500 | 0;
    _tiff_set($56, -32099, 5, 1, 500);
    var $62 = HEAPF32[5264096 >> 2];
    var $63 = $62 & -1;
    _tiff_set($56, -30681, 3, 1, $63);
    var $64 = $th + 508 | 0;
    _tiff_set($56, -28150, 5, 1, 508);
    var $65 = HEAP32[5398740 >> 2];
    var $66 = ($65 | 0) == 0;
    if ($66) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $68 = $th + 346 | 0;
    _tiff_set($_pre_phi, -30683, 4, 1, 346);
    _tiff_set($68, 0, 1, 4, 514);
    var $69 = HEAP32[5398852 >> 2];
    _tiff_set($68, 1, 2, 2, $69);
    var $70 = $th + 516 | 0;
    _tiff_set($68, 2, 5, 3, 516);
    var $71 = HEAP32[5398856 >> 2];
    _tiff_set($68, 3, 2, 2, $71);
    _tiff_set($68, 4, 5, 3, 540);
    var $72 = HEAP32[5398860 >> 2];
    _tiff_set($68, 5, 1, 1, $72);
    _tiff_set($68, 6, 5, 1, 588);
    _tiff_set($68, 7, 5, 3, 564);
    _tiff_set($68, 18, 2, 12, 596);
    _tiff_set($68, 29, 2, 12, 608);
    var $73 = $70;
    for (var $$src = 5398736 >> 2, $$dest = $73 >> 2, $$stop = $$src + 26; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    label = 15;
    break;
   case 15:
    HEAP32[$55 >> 2] = 300;
    HEAP32[$54 >> 2] = 300;
    var $75 = $th + 488 | 0;
    HEAP32[$75 >> 2] = 1;
    var $76 = $th + 480 | 0;
    HEAP32[$76 >> 2] = 1;
    var $77 = $th + 496 | 0;
    HEAP32[$77 >> 2] = 1e6;
    var $78 = $th + 504 | 0;
    HEAP32[$78 >> 2] = 1e6;
    var $79 = $th + 512 | 0;
    HEAP32[$79 >> 2] = 1e6;
    var $80 = HEAPF32[5244912 >> 2];
    var $81 = $80 * 1e6;
    var $82 = $81 & -1;
    HEAP32[$60 >> 2] = $82;
    var $83 = HEAPF32[5561468 >> 2];
    var $84 = $83 * 1e6;
    var $85 = $84 & -1;
    HEAP32[$61 >> 2] = $85;
    var $86 = HEAPF32[5403044 >> 2];
    var $87 = $86 * 1e6;
    var $88 = $87 & -1;
    HEAP32[$64 >> 2] = $88;
    var $89 = $th + 620 | 0;
    var $90 = _strncpy($89, 5427980, 512);
    var $91 = $th + 1132 | 0;
    var $92 = _strncpy($91, 5263628, 64);
    var $93 = $th + 1196 | 0;
    var $94 = _strncpy($93, 5263372, 64);
    var $95 = $th + 1260 | 0;
    for (var $$src = 5576244, $$dest = $95, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $96 = _localtime(5243568);
    var $97 = $th + 1292 | 0;
    var $98 = $96 + 20 | 0;
    var $99 = HEAP32[$98 >> 2];
    var $100 = $99 + 1900 | 0;
    var $101 = $96 + 16 | 0;
    var $102 = HEAP32[$101 >> 2];
    var $103 = $102 + 1 | 0;
    var $104 = $96 + 12 | 0;
    var $105 = HEAP32[$104 >> 2];
    var $106 = $96 + 8 | 0;
    var $107 = HEAP32[$106 >> 2];
    var $108 = $96 + 4 | 0;
    var $109 = HEAP32[$108 >> 2];
    var $110 = $96 | 0;
    var $111 = HEAP32[$110 >> 2];
    var $112 = _sprintf($97, 5576212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $100, HEAP32[tempInt + 4 >> 2] = $103, HEAP32[tempInt + 8 >> 2] = $105, HEAP32[tempInt + 12 >> 2] = $107, HEAP32[tempInt + 16 >> 2] = $109, HEAP32[tempInt + 20 >> 2] = $111, tempInt));
    var $113 = $th + 1312 | 0;
    var $114 = _strncpy($113, 5561404, 64);
    STACKTOP = __stackBase__;
    return;
  }
}
_tiff_head["X"] = 1;
function _jpeg_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1388 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $exif = __stackBase__;
    var $th = __stackBase__ + 12;
    var $1 = HEAP32[5244056 >> 2];
    var $2 = _malloc($1);
    _merror($2, 5576196);
    var $3 = HEAP32[5244056 >> 2];
    var $4 = HEAP32[5264116 >> 2];
    var $5 = _fread($2, 1, $3, $4);
    var $6 = HEAP32[5262952 >> 2];
    var $7 = _fputc(255, $6);
    var $8 = HEAP32[5262952 >> 2];
    var $9 = _fputc(216, $8);
    var $10 = $2 + 6 | 0;
    var $11 = _strcmp($10, 5579092);
    var $12 = ($11 | 0) == 0;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $14 = $exif;
    for (var $$src = 5576184, $$dest = $14, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $15 = _htons(1384);
    var $16 = $15 & 65535;
    var $17 = $exif + 2 | 0;
    HEAP16[$17 >> 1] = $16;
    var $18 = HEAP32[5262952 >> 2];
    var $19 = _fwrite($14, 1, 10, $18);
    _tiff_head($th, 0);
    var $20 = $th;
    var $21 = HEAP32[5262952 >> 2];
    var $22 = _fwrite($20, 1, 1376, $21);
    label = 4;
    break;
   case 4:
    var $24 = $2 + 2 | 0;
    var $25 = HEAP32[5244056 >> 2];
    var $26 = $25 - 2 | 0;
    var $27 = HEAP32[5262952 >> 2];
    var $28 = _fwrite($24, 1, $26, $27);
    _free($2);
    STACKTOP = __stackBase__;
    return;
  }
}
function _write_ppm_tiff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1376 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $th = __stackBase__;
    var $1 = HEAP16[5242964 >> 1];
    var $2 = $1 & 65535;
    var $3 = HEAP16[5398712 >> 1];
    var $4 = $3 & 65535;
    var $5 = $4 * $2 & -1;
    var $6 = $5 | 0;
    var $7 = $6 * .01;
    var $8 = $7 & -1;
    var $9 = HEAP16[5398900 >> 1];
    var $10 = $9 << 16 >> 16 == 0;
    if ($10) {
      var $perc_0 = $8;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $12 = ($8 | 0) / 2 & -1;
    var $perc_0 = $12;
    label = 4;
    break;
   case 4:
    var $perc_0;
    var $14 = HEAP32[5398708 >> 2];
    var $15 = $14 & -3;
    var $_b8 = HEAP8[5262956];
    var $16 = $_b8 & 1;
    var $17 = $15 | $16;
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      var $white_2 = 65536;
      label = 11;
      break;
    }
   case 5:
    var $19 = HEAP32[5560840 >> 2];
    var $20 = ($19 | 0) > 0;
    if ($20) {
      var $c_054 = 0;
      var $white_055 = 0;
      label = 6;
      break;
    } else {
      var $white_2 = 0;
      label = 11;
      break;
    }
   case 6:
    var $white_055;
    var $c_054;
    var $total_0 = 0;
    var $val_0 = 8192;
    label = 7;
    break;
   case 7:
    var $val_0;
    var $total_0;
    var $22 = $val_0 - 1 | 0;
    var $23 = ($22 | 0) > 32;
    if ($23) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $25 = 5267636 + ($c_054 << 15) + ($22 << 2) | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26 + $total_0 | 0;
    var $28 = ($27 | 0) > ($perc_0 | 0);
    if ($28) {
      label = 9;
      break;
    } else {
      var $total_0 = $27;
      var $val_0 = $22;
      label = 7;
      break;
    }
   case 9:
    var $30 = ($white_055 | 0) < ($22 | 0);
    var $_white_0 = $30 ? $22 : $white_055;
    var $31 = $c_054 + 1 | 0;
    var $32 = ($31 | 0) < ($19 | 0);
    if ($32) {
      var $c_054 = $31;
      var $white_055 = $_white_0;
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $phitmp = $_white_0 << 3;
    var $phitmp15 = $phitmp | 0;
    var $white_2 = $phitmp15;
    label = 11;
    break;
   case 11:
    var $white_2;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398892 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398896 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398884 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398888 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $35 = HEAPF32[5561140 >> 2];
    var $36 = $white_2 / $35;
    var $37 = $36 & -1;
    _gamma_curve($33, $34, 2, $37);
    HEAP16[5264112 >> 1] = $3;
    HEAP16[5264092 >> 1] = $1;
    var $38 = HEAP32[5403048 >> 2];
    var $39 = $38 & 4;
    var $40 = ($39 | 0) == 0;
    if ($40) {
      var $42 = $1;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP16[5242964 >> 1] = $3;
    HEAP16[5398712 >> 1] = $1;
    var $42 = $3;
    label = 13;
    break;
   case 13:
    var $42;
    var $43 = $42 & 65535;
    var $44 = HEAP32[5560840 >> 2];
    var $_b5 = HEAP8[5262940];
    var $45 = $_b5 ? 16 : 8;
    var $46 = $45 * $44 & -1;
    var $47 = ($46 | 0) / 8 & -1;
    var $48 = _calloc($43, $47);
    var $49 = $48;
    _merror($48, 5576164);
    var $_b7 = HEAP8[5262932];
    if ($_b7) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    _tiff_head($th, 1);
    var $51 = $th;
    var $52 = HEAP32[5262952 >> 2];
    var $53 = _fwrite($51, 1376, 1, $52);
    var $54 = HEAP32[5262948 >> 2];
    var $55 = ($54 | 0) == 0;
    if ($55) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $57 = $54;
    var $58 = HEAP32[$54 >> 2];
    var $59 = _htonl($58);
    var $60 = HEAP32[5262952 >> 2];
    var $61 = _fwrite($57, $59, 1, $60);
    label = 19;
    break;
   case 16:
    var $63 = HEAP32[5560840 >> 2];
    var $64 = ($63 | 0) > 3;
    var $65 = HEAP32[5262952 >> 2];
    if ($64) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $67 = HEAP16[5242964 >> 1];
    var $68 = $67 & 65535;
    var $69 = HEAP16[5398712 >> 1];
    var $70 = $69 & 65535;
    var $_b4 = HEAP8[5262940];
    var $71 = $_b4 ? 65535 : 255;
    var $72 = _fprintf($65, 5576100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $68, HEAP32[tempInt + 4 >> 2] = $70, HEAP32[tempInt + 8 >> 2] = $63, HEAP32[tempInt + 12 >> 2] = $71, HEAP32[tempInt + 16 >> 2] = 5560896, tempInt));
    label = 19;
    break;
   case 18:
    var $74 = ($63 | 0) / 2 & -1;
    var $75 = $74 + 5 | 0;
    var $76 = HEAP16[5242964 >> 1];
    var $77 = $76 & 65535;
    var $78 = HEAP16[5398712 >> 1];
    var $79 = $78 & 65535;
    var $_b3 = HEAP8[5262940];
    var $80 = $_b3 ? 65535 : 255;
    var $81 = _fprintf($65, 5576068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $75, HEAP32[tempInt + 4 >> 2] = $77, HEAP32[tempInt + 8 >> 2] = $79, HEAP32[tempInt + 12 >> 2] = $80, tempInt));
    label = 19;
    break;
   case 19:
    var $83 = _flip_index(0, 0);
    var $84 = _flip_index(0, 1);
    var $85 = $84 - $83 | 0;
    var $86 = _flip_index(1, 0);
    var $87 = HEAP16[5242964 >> 1];
    var $88 = $87 & 65535;
    var $89 = _flip_index(0, $88);
    var $90 = $86 - $89 | 0;
    var $91 = HEAP16[5398712 >> 1];
    var $92 = $91 << 16 >> 16 == 0;
    if ($92) {
      label = 35;
      break;
    } else {
      var $soff_047 = $83;
      var $row_048 = 1;
      var $93 = $87;
      label = 20;
      break;
    }
   case 20:
    var $93;
    var $row_048;
    var $soff_047;
    var $94 = $93 << 16 >> 16 == 0;
    var $_b2 = HEAP8[5262940];
    if ($94) {
      var $soff_1_lcssa = $soff_047;
      label = 30;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre = HEAP32[5560840 >> 2];
    var $col_040 = 0;
    var $soff_144 = $soff_047;
    label = 22;
    break;
   case 22:
    var $soff_144;
    var $col_040;
    var $95 = ($_pre | 0) > 0;
    if ($_b2) {
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    if ($95) {
      label = 24;
      break;
    } else {
      label = 29;
      break;
    }
   case 24:
    var $_pre10 = HEAP32[5264108 >> 2];
    var $c_137 = 0;
    label = 27;
    break;
   case 25:
    if ($95) {
      label = 26;
      break;
    } else {
      label = 29;
      break;
    }
   case 26:
    var $_pre12 = HEAP32[5264108 >> 2];
    var $c_234 = 0;
    label = 28;
    break;
   case 27:
    var $c_137;
    var $96 = $_pre10 + ($soff_144 << 3) + ($c_137 << 1) | 0;
    var $97 = HEAP16[$96 >> 1];
    var $98 = $97 & 65535;
    var $99 = 5428500 + ($98 << 1) | 0;
    var $100 = HEAP16[$99 >> 1];
    var $101 = ($100 & 65535) >>> 8;
    var $102 = $101 & 255;
    var $103 = $_pre * $col_040 & -1;
    var $104 = $103 + $c_137 | 0;
    var $105 = $48 + $104 | 0;
    HEAP8[$105] = $102;
    var $106 = $c_137 + 1 | 0;
    var $107 = ($106 | 0) < ($_pre | 0);
    if ($107) {
      var $c_137 = $106;
      label = 27;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $c_234;
    var $108 = $_pre12 + ($soff_144 << 3) + ($c_234 << 1) | 0;
    var $109 = HEAP16[$108 >> 1];
    var $110 = $109 & 65535;
    var $111 = 5428500 + ($110 << 1) | 0;
    var $112 = HEAP16[$111 >> 1];
    var $113 = $_pre * $col_040 & -1;
    var $114 = $113 + $c_234 | 0;
    var $115 = $49 + ($114 << 1) | 0;
    HEAP16[$115 >> 1] = $112;
    var $116 = $c_234 + 1 | 0;
    var $117 = ($116 | 0) < ($_pre | 0);
    if ($117) {
      var $c_234 = $116;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $118 = $col_040 + 1 | 0;
    var $119 = $85 + $soff_144 | 0;
    var $120 = $93 & 65535;
    var $121 = ($118 | 0) < ($120 | 0);
    if ($121) {
      var $col_040 = $118;
      var $soff_144 = $119;
      label = 22;
      break;
    } else {
      var $soff_1_lcssa = $119;
      label = 30;
      break;
    }
   case 30:
    var $soff_1_lcssa;
    var $not__b216 = $_b2 ^ 1;
    var $_b6 = HEAP8[5262932];
    var $or_cond3 = $_b6 | $not__b216;
    if ($or_cond3) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $123 = _htons(21930);
    var $124 = ($123 | 0) == 21930;
    if ($124) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $126 = HEAP16[5242964 >> 1];
    var $127 = $126 & 65535;
    var $128 = HEAP32[5560840 >> 2];
    var $129 = $128 << 1;
    var $130 = $129 * $127 & -1;
    _swab($48, $48, $130);
    label = 33;
    break;
   case 33:
    var $131 = HEAP32[5560840 >> 2];
    var $_b = HEAP8[5262940];
    var $132 = $_b ? 16 : 8;
    var $133 = $132 * $131 & -1;
    var $134 = ($133 | 0) / 8 & -1;
    var $135 = HEAP16[5242964 >> 1];
    var $136 = $135 & 65535;
    var $137 = HEAP32[5262952 >> 2];
    var $138 = _fwrite($48, $134, $136, $137);
    var $139 = HEAP16[5398712 >> 1];
    var $140 = $139 & 65535;
    var $141 = ($row_048 | 0) < ($140 | 0);
    if ($141) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $142 = $90 + $soff_1_lcssa | 0;
    var $_pre14 = HEAP16[5242964 >> 1];
    var $phitmp17 = $row_048 + 1 | 0;
    var $soff_047 = $142;
    var $row_048 = $phitmp17;
    var $93 = $_pre14;
    label = 20;
    break;
   case 35:
    _free($48);
    STACKTOP = __stackBase__;
    return;
  }
}



_write_ppm_tiff["X"] = 1;
function _main($argc, $argv) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  var mySetjmpIds = {};
  var setjmpTable = {
    "60": (function(value) {
      label = 224;
      $272 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (label) {
     case 2:
      var $ut = __stackBase__;
      var $1 = _putenv(5576060);
      var $2 = ($argc | 0) == 1;
      if ($2) {
        label = 3;
        break;
      } else {
        label = 4;
        break;
      }
     case 3:
      var $4 = _printf(5576028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5576020, tempInt));
      var $puts = _puts(5244072);
      var $5 = HEAP32[$argv >> 2];
      var $6 = _printf(5575984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $5, tempInt));
      var $7 = _puts(5575948);
      var $8 = _puts(5575900);
      var $9 = _puts(5575856);
      var $10 = _puts(5575808);
      var $11 = _puts(5575756);
      var $12 = _puts(5575708);
      var $13 = _puts(5575660);
      var $14 = _puts(5575608);
      var $15 = _puts(5575556);
      var $16 = _puts(5575516);
      var $17 = _puts(5575464);
      var $18 = _puts(5575424);
      var $19 = _puts(5575372);
      var $20 = _puts(5575324);
      var $21 = _puts(5575284);
      var $22 = _puts(5575248);
      var $23 = _puts(5575200);
      var $24 = _puts(5575132);
      var $25 = _puts(5575076);
      var $26 = _puts(5575012);
      var $27 = _puts(5574956);
      var $28 = _puts(5574900);
      var $29 = _puts(5574852);
      var $30 = _puts(5574800);
      var $31 = _puts(5574752);
      var $32 = _puts(5574696);
      var $33 = _puts(5574656);
      var $34 = _puts(5574596);
      var $35 = _puts(5574552);
      var $36 = _puts(5574500);
      var $37 = _puts(5574440);
      var $38 = _puts(5574400);
      var $39 = _puts(5574352);
      var $40 = _puts(5574316);
      var $putchar = _putchar(10);
      var $_0 = 1;
      label = 223;
      break;
     case 4:
      var $42 = $argv + ($argc << 2) | 0;
      HEAP32[$42 >> 2] = 5587392;
      var $43 = $argv + 4 | 0;
      var $44 = HEAP32[$43 >> 2];
      var $45 = HEAP8[$44];
      var $46 = $45 << 24 >> 24;
      var $47 = $46 - 2 | 0;
      var $48 = $47 | 2;
      var $49 = ($48 | 0) == 43;
      if ($49) {
        var $timestamp_only_0223 = 0;
        var $thumbnail_only_0224 = 0;
        var $identify_only_0225 = 0;
        var $user_qual_0226 = -1;
        var $user_black_0227 = -1;
        var $user_sat_0228 = -1;
        var $user_flip_0229 = -1;
        var $use_fuji_rotate_0230 = 1;
        var $write_to_stdout_0231 = 0;
        var $read_from_stdin_0232 = 0;
        var $bpfile_0233 = 0;
        var $dark_frame_0234 = 0;
        var $arg_0235 = 1;
        var $51 = $44;
        var $50 = $45;
        var $multi_out_0 = 0;
        var $use_camera_matrix_0 = -1;
        label = 5;
        break;
      } else {
        var $multi_out_241 = 0;
        var $arg_0_lcssa43 = 1;
        var $dark_frame_0_lcssa45 = 0;
        var $bpfile_0_lcssa47 = 0;
        var $read_from_stdin_0_lcssa49 = 0;
        var $write_to_stdout_0_lcssa51 = 0;
        var $use_fuji_rotate_0_lcssa53 = 1;
        var $user_flip_0_lcssa55 = -1;
        var $user_sat_0_lcssa57 = -1;
        var $user_black_0_lcssa59 = -1;
        var $user_qual_0_lcssa61 = -1;
        var $identify_only_0_lcssa63 = 0;
        var $thumbnail_only_0_lcssa65 = 0;
        var $timestamp_only_0_lcssa67 = 0;
        label = 52;
        break;
      }
     case 5:
      var $use_camera_matrix_0;
      var $multi_out_0;
      var $50;
      var $51;
      var $arg_0235;
      var $dark_frame_0234;
      var $bpfile_0233;
      var $read_from_stdin_0232;
      var $write_to_stdout_0231;
      var $use_fuji_rotate_0230;
      var $user_flip_0229;
      var $user_sat_0228;
      var $user_black_0227;
      var $user_qual_0226;
      var $identify_only_0225;
      var $thumbnail_only_0224;
      var $timestamp_only_0223;
      var $52 = $arg_0235 + 1 | 0;
      var $53 = $51 + 1 | 0;
      var $54 = HEAP8[$53];
      var $55 = $54 << 24 >> 24;
      var $memchr = _memchr(5574292, $55, 13);
      var $56 = ($memchr | 0) == 0;
      if ($56) {
        label = 10;
        break;
      } else {
        label = 6;
        break;
      }
     case 6:
      var $57 = $memchr;
      var $58 = $57 - 5574292 | 0;
      var $59 = $58 + 5574276 | 0;
      var $60 = HEAP8[$59];
      var $61 = $60 << 24 >> 24;
      var $62 = $61 - 48 | 0;
      var $i_0 = 0;
      label = 7;
      break;
     case 7:
      var $i_0;
      var $64 = ($i_0 | 0) < ($62 | 0);
      if ($64) {
        label = 8;
        break;
      } else {
        label = 10;
        break;
      }
     case 8:
      var $66 = $i_0 + $52 | 0;
      var $67 = $argv + ($66 << 2) | 0;
      var $68 = HEAP32[$67 >> 2];
      var $69 = HEAP8[$68];
      var $70 = $69 << 24 >> 24;
      var $isdigittmp = $70 - 48 | 0;
      var $isdigit = $isdigittmp >>> 0 < 10;
      var $71 = $i_0 + 1 | 0;
      if ($isdigit) {
        var $i_0 = $71;
        label = 7;
        break;
      } else {
        label = 9;
        break;
      }
     case 9:
      var $73 = HEAP32[_stderr >> 2];
      var $74 = _fprintf($73, 5574244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $55, tempInt));
      var $_0 = 1;
      label = 223;
      break;
     case 10:
      if (($55 | 0) == 100) {
        label = 11;
        break;
      } else if (($55 | 0) == 110) {
        label = 12;
        break;
      } else if (($55 | 0) == 98) {
        label = 13;
        break;
      } else if (($55 | 0) == 114) {
        label = 14;
        break;
      } else if (($55 | 0) == 67) {
        label = 15;
        break;
      } else if (($55 | 0) == 103) {
        label = 16;
        break;
      } else if (($55 | 0) == 107) {
        label = 18;
        break;
      } else if (($55 | 0) == 83) {
        label = 19;
        break;
      } else if (($55 | 0) == 116) {
        label = 20;
        break;
      } else if (($55 | 0) == 113) {
        label = 21;
        break;
      } else if (($55 | 0) == 109) {
        label = 22;
        break;
      } else if (($55 | 0) == 72) {
        label = 23;
        break;
      } else if (($55 | 0) == 115) {
        label = 24;
        break;
      } else if (($55 | 0) == 111) {
        label = 25;
        break;
      } else if (($55 | 0) == 122) {
        var $arg_0_be = $52;
        var $dark_frame_0_be = $dark_frame_0234;
        var $bpfile_0_be = $bpfile_0233;
        var $read_from_stdin_0_be = $read_from_stdin_0232;
        var $write_to_stdout_0_be = $write_to_stdout_0231;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
        var $user_flip_0_be = $user_flip_0229;
        var $user_sat_0_be = $user_sat_0228;
        var $user_black_0_be = $user_black_0227;
        var $user_qual_0_be = $user_qual_0226;
        var $identify_only_0_be = $identify_only_0225;
        var $thumbnail_only_0_be = $thumbnail_only_0224;
        var $timestamp_only_0_be = 1;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      } else if (($55 | 0) == 80) {
        label = 29;
        break;
      } else if (($55 | 0) == 75) {
        label = 30;
        break;
      } else if (($55 | 0) == 101) {
        label = 31;
        break;
      } else if (($55 | 0) == 105) {
        label = 32;
        break;
      } else if (($55 | 0) == 99) {
        label = 33;
        break;
      } else if (($55 | 0) == 118) {
        label = 34;
        break;
      } else if (($55 | 0) == 104) {
        label = 35;
        break;
      } else if (($55 | 0) == 102) {
        label = 36;
        break;
      } else if (($55 | 0) == 65) {
        label = 37;
        break;
      } else if (($55 | 0) == 97) {
        var $arg_3 = $52;
        label = 38;
        break;
      } else if (($55 | 0) == 119) {
        label = 39;
        break;
      } else if (($55 | 0) == 77) {
        label = 40;
        break;
      } else if (($55 | 0) == 73) {
        label = 41;
        break;
      } else if (($55 | 0) == 69) {
        label = 42;
        break;
      } else if (($55 | 0) == 68) {
        label = 43;
        break;
      } else if (($55 | 0) == 106) {
        label = 45;
        break;
      } else if (($55 | 0) == 87) {
        label = 46;
        break;
      } else if (($55 | 0) == 84) {
        label = 47;
        break;
      } else if (($55 | 0) == 52) {
        label = 48;
        break;
      } else if (($55 | 0) == 54) {
        label = 49;
        break;
      } else {
        label = 50;
        break;
      }
     case 11:
      var $_pre39 = HEAP32[5427972 >> 2];
      var $230 = $_pre39;
      label = 44;
      break;
     case 12:
      var $76 = $arg_0235 + 2 | 0;
      var $77 = $argv + ($52 << 2) | 0;
      var $78 = HEAP32[$77 >> 2];
      var $79 = _atof($78);
      var $80 = $79;
      HEAPF32[5244064 >> 2] = $80;
      var $arg_0_be = $76;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 13:
      var $82 = $arg_0235 + 2 | 0;
      var $83 = $argv + ($52 << 2) | 0;
      var $84 = HEAP32[$83 >> 2];
      var $85 = _atof($84);
      var $86 = $85;
      HEAPF32[5561140 >> 2] = $86;
      var $arg_0_be = $82;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 14:
      var $87 = $arg_0235 + 2 | 0;
      var $88 = $argv + ($52 << 2) | 0;
      var $89 = HEAP32[$88 >> 2];
      var $90 = _atof($89);
      var $91 = $90;
      HEAPF32[5243536 >> 2] = $91;
      var $92 = $arg_0235 + 3 | 0;
      var $93 = $argv + ($87 << 2) | 0;
      var $94 = HEAP32[$93 >> 2];
      var $95 = _atof($94);
      var $96 = $95;
      HEAPF32[5243540 >> 2] = $96;
      var $97 = $arg_0235 + 4 | 0;
      var $98 = $argv + ($92 << 2) | 0;
      var $99 = HEAP32[$98 >> 2];
      var $100 = _atof($99);
      var $101 = $100;
      HEAPF32[5243544 >> 2] = $101;
      var $102 = $argv + ($97 << 2) | 0;
      var $103 = HEAP32[$102 >> 2];
      var $104 = _atof($103);
      var $105 = $104;
      HEAPF32[5243548 >> 2] = $105;
      var $106 = $arg_0235 + 5 | 0;
      var $arg_0_be = $106;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 15:
      var $108 = $arg_0235 + 2 | 0;
      var $109 = $argv + ($52 << 2) | 0;
      var $110 = HEAP32[$109 >> 2];
      var $111 = _atof($110);
      var $112 = 1 / $111;
      HEAPF64[tempDoublePtr >> 3] = $112, HEAP32[5573248 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5573252 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $113 = $arg_0235 + 3 | 0;
      var $114 = $argv + ($108 << 2) | 0;
      var $115 = HEAP32[$114 >> 2];
      var $116 = _atof($115);
      var $117 = 1 / $116;
      HEAPF64[tempDoublePtr >> 3] = $117, HEAP32[5573264 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5573268 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $arg_0_be = $113;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 16:
      var $119 = $arg_0235 + 2 | 0;
      var $120 = $argv + ($52 << 2) | 0;
      var $121 = HEAP32[$120 >> 2];
      var $122 = _atof($121);
      HEAPF64[tempDoublePtr >> 3] = $122, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $123 = $arg_0235 + 3 | 0;
      var $124 = $argv + ($119 << 2) | 0;
      var $125 = HEAP32[$124 >> 2];
      var $126 = _atof($125);
      HEAPF64[tempDoublePtr >> 3] = $126, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $127 = $122 != 0;
      if ($127) {
        label = 17;
        break;
      } else {
        var $arg_0_be = $123;
        var $dark_frame_0_be = $dark_frame_0234;
        var $bpfile_0_be = $bpfile_0233;
        var $read_from_stdin_0_be = $read_from_stdin_0232;
        var $write_to_stdout_0_be = $write_to_stdout_0231;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
        var $user_flip_0_be = $user_flip_0229;
        var $user_sat_0_be = $user_sat_0228;
        var $user_black_0_be = $user_black_0227;
        var $user_qual_0_be = $user_qual_0226;
        var $identify_only_0_be = $identify_only_0225;
        var $thumbnail_only_0_be = $thumbnail_only_0224;
        var $timestamp_only_0_be = $timestamp_only_0223;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 17:
      var $129 = 1 / $122;
      HEAPF64[tempDoublePtr >> 3] = $129, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $arg_0_be = $123;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 18:
      var $131 = $arg_0235 + 2 | 0;
      var $132 = $argv + ($52 << 2) | 0;
      var $133 = HEAP32[$132 >> 2];
      var $134 = _atoi($133);
      var $arg_0_be = $131;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $134;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 19:
      var $136 = $arg_0235 + 2 | 0;
      var $137 = $argv + ($52 << 2) | 0;
      var $138 = HEAP32[$137 >> 2];
      var $139 = _atoi($138);
      var $arg_0_be = $136;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $139;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 20:
      var $141 = $arg_0235 + 2 | 0;
      var $142 = $argv + ($52 << 2) | 0;
      var $143 = HEAP32[$142 >> 2];
      var $144 = _atoi($143);
      var $arg_0_be = $141;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $144;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 21:
      var $146 = $arg_0235 + 2 | 0;
      var $147 = $argv + ($52 << 2) | 0;
      var $148 = HEAP32[$147 >> 2];
      var $149 = _atoi($148);
      var $arg_0_be = $146;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $149;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 22:
      var $151 = $arg_0235 + 2 | 0;
      var $152 = $argv + ($52 << 2) | 0;
      var $153 = HEAP32[$152 >> 2];
      var $154 = _atoi($153);
      HEAP32[5263492 >> 2] = $154;
      var $arg_0_be = $151;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 23:
      var $156 = $arg_0235 + 2 | 0;
      var $157 = $argv + ($52 << 2) | 0;
      var $158 = HEAP32[$157 >> 2];
      var $159 = _atoi($158);
      HEAP32[5398708 >> 2] = $159;
      var $arg_0_be = $156;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 24:
      var $161 = $argv + ($52 << 2) | 0;
      var $162 = HEAP32[$161 >> 2];
      var $163 = _atoi($162);
      var $ispos = ($163 | 0) > -1;
      var $neg = -$163 | 0;
      var $164 = $ispos ? $163 : $neg;
      HEAP32[5244920 >> 2] = $164;
      var $165 = $arg_0235 + 2 | 0;
      var $166 = _strcmp($162, 5574240);
      var $167 = ($166 | 0) == 0;
      var $168 = $167 & 1;
      var $arg_0_be = $165;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $168;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 25:
      var $170 = $argv + ($52 << 2) | 0;
      var $171 = HEAP32[$170 >> 2];
      var $172 = HEAP8[$171];
      var $173 = $172 << 24 >> 24;
      var $isdigittmp159 = $173 - 48 | 0;
      var $isdigit160 = $isdigittmp159 >>> 0 < 10;
      if ($isdigit160) {
        label = 26;
        break;
      } else {
        var $arg_0_be = $52;
        var $dark_frame_0_be = $dark_frame_0234;
        var $bpfile_0_be = $bpfile_0233;
        var $read_from_stdin_0_be = $read_from_stdin_0232;
        var $write_to_stdout_0_be = $write_to_stdout_0231;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
        var $user_flip_0_be = $user_flip_0229;
        var $user_sat_0_be = $user_sat_0228;
        var $user_black_0_be = $user_black_0227;
        var $user_qual_0_be = $user_qual_0226;
        var $identify_only_0_be = $identify_only_0225;
        var $thumbnail_only_0_be = $thumbnail_only_0224;
        var $timestamp_only_0_be = $timestamp_only_0223;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 26:
      var $175 = $171 + 1 | 0;
      var $176 = HEAP8[$175];
      var $177 = $176 << 24 >> 24 == 0;
      if ($177) {
        label = 27;
        break;
      } else {
        var $arg_0_be = $52;
        var $dark_frame_0_be = $dark_frame_0234;
        var $bpfile_0_be = $bpfile_0233;
        var $read_from_stdin_0_be = $read_from_stdin_0232;
        var $write_to_stdout_0_be = $write_to_stdout_0231;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
        var $user_flip_0_be = $user_flip_0229;
        var $user_sat_0_be = $user_sat_0228;
        var $user_black_0_be = $user_black_0227;
        var $user_qual_0_be = $user_qual_0226;
        var $identify_only_0_be = $identify_only_0225;
        var $thumbnail_only_0_be = $thumbnail_only_0224;
        var $timestamp_only_0_be = $timestamp_only_0223;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 27:
      var $179 = $arg_0235 + 2 | 0;
      var $180 = _atoi($171);
      HEAP32[5262936 >> 2] = $180;
      var $arg_0_be = $179;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 28:
      var $use_camera_matrix_1;
      var $multi_out_1;
      var $timestamp_only_0_be;
      var $thumbnail_only_0_be;
      var $identify_only_0_be;
      var $user_qual_0_be;
      var $user_black_0_be;
      var $user_sat_0_be;
      var $user_flip_0_be;
      var $use_fuji_rotate_0_be;
      var $write_to_stdout_0_be;
      var $read_from_stdin_0_be;
      var $bpfile_0_be;
      var $dark_frame_0_be;
      var $arg_0_be;
      var $181 = $argv + ($arg_0_be << 2) | 0;
      var $182 = HEAP32[$181 >> 2];
      var $183 = HEAP8[$182];
      var $184 = $183 << 24 >> 24;
      var $185 = $184 - 2 | 0;
      var $186 = $185 | 2;
      var $187 = ($186 | 0) == 43;
      if ($187) {
        var $timestamp_only_0223 = $timestamp_only_0_be;
        var $thumbnail_only_0224 = $thumbnail_only_0_be;
        var $identify_only_0225 = $identify_only_0_be;
        var $user_qual_0226 = $user_qual_0_be;
        var $user_black_0227 = $user_black_0_be;
        var $user_sat_0228 = $user_sat_0_be;
        var $user_flip_0229 = $user_flip_0_be;
        var $use_fuji_rotate_0230 = $use_fuji_rotate_0_be;
        var $write_to_stdout_0231 = $write_to_stdout_0_be;
        var $read_from_stdin_0232 = $read_from_stdin_0_be;
        var $bpfile_0233 = $bpfile_0_be;
        var $dark_frame_0234 = $dark_frame_0_be;
        var $arg_0235 = $arg_0_be;
        var $51 = $182;
        var $50 = $183;
        var $multi_out_0 = $multi_out_1;
        var $use_camera_matrix_0 = $use_camera_matrix_1;
        label = 5;
        break;
      } else {
        var $timestamp_only_0_lcssa = $timestamp_only_0_be;
        var $thumbnail_only_0_lcssa = $thumbnail_only_0_be;
        var $identify_only_0_lcssa = $identify_only_0_be;
        var $user_qual_0_lcssa = $user_qual_0_be;
        var $user_black_0_lcssa = $user_black_0_be;
        var $user_sat_0_lcssa = $user_sat_0_be;
        var $user_flip_0_lcssa = $user_flip_0_be;
        var $use_fuji_rotate_0_lcssa = $use_fuji_rotate_0_be;
        var $write_to_stdout_0_lcssa = $write_to_stdout_0_be;
        var $read_from_stdin_0_lcssa = $read_from_stdin_0_be;
        var $bpfile_0_lcssa = $bpfile_0_be;
        var $dark_frame_0_lcssa = $dark_frame_0_be;
        var $arg_0_lcssa = $arg_0_be;
        var $multi_out_2 = $multi_out_1;
        var $use_camera_matrix_2 = $use_camera_matrix_1;
        label = 51;
        break;
      }
     case 29:
      var $189 = $arg_0235 + 2 | 0;
      var $190 = $argv + ($52 << 2) | 0;
      var $191 = HEAP32[$190 >> 2];
      var $arg_0_be = $189;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $191;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 30:
      var $193 = $arg_0235 + 2 | 0;
      var $194 = $argv + ($52 << 2) | 0;
      var $195 = HEAP32[$194 >> 2];
      var $arg_0_be = $193;
      var $dark_frame_0_be = $195;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 31:
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = 1;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 32:
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = 1;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 33:
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = 1;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 34:
      HEAP8[5243532] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 35:
      HEAP8[5398716] = 1;
      label = 36;
      break;
     case 36:
      HEAP8[5403040] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 37:
      var $202 = $arg_0235 + 2 | 0;
      var $203 = $argv + ($52 << 2) | 0;
      var $204 = HEAP32[$203 >> 2];
      var $205 = _atoi($204);
      HEAP32[5398732 >> 2] = $205;
      var $206 = $arg_0235 + 3 | 0;
      var $207 = $argv + ($202 << 2) | 0;
      var $208 = HEAP32[$207 >> 2];
      var $209 = _atoi($208);
      HEAP32[5398728 >> 2] = $209;
      var $210 = $arg_0235 + 4 | 0;
      var $211 = $argv + ($206 << 2) | 0;
      var $212 = HEAP32[$211 >> 2];
      var $213 = _atoi($212);
      HEAP32[5398724 >> 2] = $213;
      var $214 = $argv + ($210 << 2) | 0;
      var $215 = HEAP32[$214 >> 2];
      var $216 = _atoi($215);
      HEAP32[5398720 >> 2] = $216;
      var $217 = $arg_0235 + 5 | 0;
      var $arg_3 = $217;
      label = 38;
      break;
     case 38:
      var $arg_3;
      HEAP8[5243556] = 1;
      var $arg_0_be = $arg_3;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 39:
      HEAP8[5243552] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 40:
      var $221 = $50 << 24 >> 24 == 43;
      var $222 = $221 & 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $222;
      label = 28;
      break;
     case 41:
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = 1;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 42:
      var $225 = HEAP32[5427972 >> 2];
      var $226 = $225 + 1 | 0;
      HEAP32[5427972 >> 2] = $226;
      label = 43;
      break;
     case 43:
      var $227 = HEAP32[5427972 >> 2];
      var $228 = $227 + 1 | 0;
      HEAP32[5427972 >> 2] = $228;
      var $230 = $228;
      label = 44;
      break;
     case 44:
      var $230;
      var $231 = $230 + 1 | 0;
      HEAP32[5427972 >> 2] = $231;
      label = 45;
      break;
     case 45:
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = 0;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 46:
      HEAP8[5262956] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 47:
      HEAP8[5262932] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 48:
      HEAP8[5262956] = 1;
      HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      label = 49;
      break;
     case 49:
      HEAP8[5262940] = 1;
      var $arg_0_be = $52;
      var $dark_frame_0_be = $dark_frame_0234;
      var $bpfile_0_be = $bpfile_0233;
      var $read_from_stdin_0_be = $read_from_stdin_0232;
      var $write_to_stdout_0_be = $write_to_stdout_0231;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0230;
      var $user_flip_0_be = $user_flip_0229;
      var $user_sat_0_be = $user_sat_0228;
      var $user_black_0_be = $user_black_0227;
      var $user_qual_0_be = $user_qual_0226;
      var $identify_only_0_be = $identify_only_0225;
      var $thumbnail_only_0_be = $thumbnail_only_0224;
      var $timestamp_only_0_be = $timestamp_only_0223;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 50:
      var $238 = HEAP32[_stderr >> 2];
      var $239 = _fprintf($238, 5574216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $55, tempInt));
      var $_0 = 1;
      label = 223;
      break;
     case 51:
      var $use_camera_matrix_2;
      var $multi_out_2;
      var $arg_0_lcssa;
      var $dark_frame_0_lcssa;
      var $bpfile_0_lcssa;
      var $read_from_stdin_0_lcssa;
      var $write_to_stdout_0_lcssa;
      var $use_fuji_rotate_0_lcssa;
      var $user_flip_0_lcssa;
      var $user_sat_0_lcssa;
      var $user_black_0_lcssa;
      var $user_qual_0_lcssa;
      var $identify_only_0_lcssa;
      var $thumbnail_only_0_lcssa;
      var $timestamp_only_0_lcssa;
      var $240 = ($use_camera_matrix_2 | 0) < 0;
      if ($240) {
        var $multi_out_241 = $multi_out_2;
        var $arg_0_lcssa43 = $arg_0_lcssa;
        var $dark_frame_0_lcssa45 = $dark_frame_0_lcssa;
        var $bpfile_0_lcssa47 = $bpfile_0_lcssa;
        var $read_from_stdin_0_lcssa49 = $read_from_stdin_0_lcssa;
        var $write_to_stdout_0_lcssa51 = $write_to_stdout_0_lcssa;
        var $use_fuji_rotate_0_lcssa53 = $use_fuji_rotate_0_lcssa;
        var $user_flip_0_lcssa55 = $user_flip_0_lcssa;
        var $user_sat_0_lcssa57 = $user_sat_0_lcssa;
        var $user_black_0_lcssa59 = $user_black_0_lcssa;
        var $user_qual_0_lcssa61 = $user_qual_0_lcssa;
        var $identify_only_0_lcssa63 = $identify_only_0_lcssa;
        var $thumbnail_only_0_lcssa65 = $thumbnail_only_0_lcssa;
        var $timestamp_only_0_lcssa67 = $timestamp_only_0_lcssa;
        label = 52;
        break;
      } else {
        var $use_camera_matrix_3 = $use_camera_matrix_2;
        var $multi_out_240 = $multi_out_2;
        var $arg_0_lcssa42 = $arg_0_lcssa;
        var $dark_frame_0_lcssa44 = $dark_frame_0_lcssa;
        var $bpfile_0_lcssa46 = $bpfile_0_lcssa;
        var $read_from_stdin_0_lcssa48 = $read_from_stdin_0_lcssa;
        var $write_to_stdout_0_lcssa50 = $write_to_stdout_0_lcssa;
        var $use_fuji_rotate_0_lcssa52 = $use_fuji_rotate_0_lcssa;
        var $user_flip_0_lcssa54 = $user_flip_0_lcssa;
        var $user_sat_0_lcssa56 = $user_sat_0_lcssa;
        var $user_black_0_lcssa58 = $user_black_0_lcssa;
        var $user_qual_0_lcssa60 = $user_qual_0_lcssa;
        var $identify_only_0_lcssa62 = $identify_only_0_lcssa;
        var $thumbnail_only_0_lcssa64 = $thumbnail_only_0_lcssa;
        var $timestamp_only_0_lcssa66 = $timestamp_only_0_lcssa;
        label = 53;
        break;
      }
     case 52:
      var $timestamp_only_0_lcssa67;
      var $thumbnail_only_0_lcssa65;
      var $identify_only_0_lcssa63;
      var $user_qual_0_lcssa61;
      var $user_black_0_lcssa59;
      var $user_sat_0_lcssa57;
      var $user_flip_0_lcssa55;
      var $use_fuji_rotate_0_lcssa53;
      var $write_to_stdout_0_lcssa51;
      var $read_from_stdin_0_lcssa49;
      var $bpfile_0_lcssa47;
      var $dark_frame_0_lcssa45;
      var $arg_0_lcssa43;
      var $multi_out_241;
      var $_b6 = HEAP8[5243552];
      var $241 = $_b6 & 1;
      var $use_camera_matrix_3 = $241;
      var $multi_out_240 = $multi_out_241;
      var $arg_0_lcssa42 = $arg_0_lcssa43;
      var $dark_frame_0_lcssa44 = $dark_frame_0_lcssa45;
      var $bpfile_0_lcssa46 = $bpfile_0_lcssa47;
      var $read_from_stdin_0_lcssa48 = $read_from_stdin_0_lcssa49;
      var $write_to_stdout_0_lcssa50 = $write_to_stdout_0_lcssa51;
      var $use_fuji_rotate_0_lcssa52 = $use_fuji_rotate_0_lcssa53;
      var $user_flip_0_lcssa54 = $user_flip_0_lcssa55;
      var $user_sat_0_lcssa56 = $user_sat_0_lcssa57;
      var $user_black_0_lcssa58 = $user_black_0_lcssa59;
      var $user_qual_0_lcssa60 = $user_qual_0_lcssa61;
      var $identify_only_0_lcssa62 = $identify_only_0_lcssa63;
      var $thumbnail_only_0_lcssa64 = $thumbnail_only_0_lcssa65;
      var $timestamp_only_0_lcssa66 = $timestamp_only_0_lcssa67;
      label = 53;
      break;
     case 53:
      var $timestamp_only_0_lcssa66;
      var $thumbnail_only_0_lcssa64;
      var $identify_only_0_lcssa62;
      var $user_qual_0_lcssa60;
      var $user_black_0_lcssa58;
      var $user_sat_0_lcssa56;
      var $user_flip_0_lcssa54;
      var $use_fuji_rotate_0_lcssa52;
      var $write_to_stdout_0_lcssa50;
      var $read_from_stdin_0_lcssa48;
      var $bpfile_0_lcssa46;
      var $dark_frame_0_lcssa44;
      var $arg_0_lcssa42;
      var $multi_out_240;
      var $use_camera_matrix_3;
      var $243 = ($arg_0_lcssa42 | 0) == ($argc | 0);
      if ($243) {
        label = 54;
        break;
      } else {
        label = 55;
        break;
      }
     case 54:
      var $245 = HEAP32[_stderr >> 2];
      var $246 = _fwrite(5574192, 21, 1, $245);
      var $_0 = 1;
      label = 223;
      break;
     case 55:
      var $248 = ($write_to_stdout_0_lcssa50 | 0) != 0;
      if ($248) {
        label = 56;
        break;
      } else {
        label = 57;
        break;
      }
     case 56:
      var $250 = _isatty(1);
      var $251 = ($250 | 0) == 0;
      if ($251) {
        label = 57;
        break;
      } else {
        label = 59;
        break;
      }
     case 57:
      var $252 = ($arg_0_lcssa42 | 0) < ($argc | 0);
      if ($252) {
        label = 58;
        break;
      } else {
        var $_0 = 0;
        label = 223;
        break;
      }
     case 58:
      var $253 = ($user_flip_0_lcssa54 | 0) > -1;
      var $254 = ($timestamp_only_0_lcssa66 | 0) == 0;
      var $255 = ($thumbnail_only_0_lcssa64 | 0) != 0;
      var $256 = ($identify_only_0_lcssa62 | 0) != 0;
      var $257 = ($use_fuji_rotate_0_lcssa52 | 0) == 0;
      var $258 = ($read_from_stdin_0_lcssa48 | 0) == 0;
      var $259 = ($dark_frame_0_lcssa44 | 0) == 0;
      var $260 = ($user_qual_0_lcssa60 | 0) > -1;
      var $261 = ($user_black_0_lcssa58 | 0) > -1;
      var $262 = ($user_sat_0_lcssa56 | 0) > 0;
      var $263 = ($identify_only_0_lcssa62 | 0) == 0;
      var $264 = $ut + 4 | 0;
      var $265 = $ut | 0;
      var $266 = ($multi_out_240 | 0) == 0;
      var $267 = ($use_camera_matrix_3 | 0) != 0;
      var $arg_4182 = $arg_0_lcssa42;
      label = 60;
      break;
     case 59:
      var $269 = HEAP32[_stderr >> 2];
      var $270 = _fwrite(5574148, 41, 1, $269);
      var $_0 = 1;
      label = 223;
      break;
     case 60:
      var $arg_4182;
      HEAP32[5245032 >> 2] = 0;
      HEAP32[5264108 >> 2] = 0;
      HEAP32[5262948 >> 2] = 0;
      HEAP32[5263448 >> 2] = 0;
      var $271 = HEAP32[_stdout >> 2];
      HEAP32[5262952 >> 2] = $271;
      var $272 = (tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label, HEAP32[5427928 >> 2] = tempInt, 0);
      label = 224;
      break;
     case 224:
      var $273 = ($272 | 0) == 0;
      if ($273) {
        label = 65;
        break;
      } else {
        label = 61;
        break;
      }
     case 61:
      var $275 = HEAP32[5264116 >> 2];
      var $276 = _fileno($275);
      var $277 = ($276 | 0) > 2;
      if ($277) {
        label = 62;
        break;
      } else {
        label = 63;
        break;
      }
     case 62:
      var $279 = HEAP32[5264116 >> 2];
      var $280 = _fclose($279);
      label = 63;
      break;
     case 63:
      var $282 = HEAP32[5262952 >> 2];
      var $283 = _fileno($282);
      var $284 = ($283 | 0) > 2;
      if ($284) {
        label = 64;
        break;
      } else {
        var $ofname_0 = 0;
        var $status_4 = 1;
        label = 210;
        break;
      }
     case 64:
      var $286 = HEAP32[5262952 >> 2];
      var $287 = _fclose($286);
      var $ofname_0 = 0;
      var $status_4 = 1;
      label = 210;
      break;
     case 65:
      var $289 = $argv + ($arg_4182 << 2) | 0;
      var $290 = HEAP32[$289 >> 2];
      HEAP32[5264120 >> 2] = $290;
      var $291 = _fopen($290, 5579008);
      HEAP32[5264116 >> 2] = $291;
      var $292 = ($291 | 0) == 0;
      if ($292) {
        label = 66;
        break;
      } else {
        label = 67;
        break;
      }
     case 66:
      var $294 = HEAP32[5264120 >> 2];
      _perror($294);
      var $arg_5 = $arg_4182;
      var $status_5 = 1;
      label = 222;
      break;
     case 67:
      _identify();
      var $296 = HEAP32[5264100 >> 2];
      var $297 = ($296 | 0) == 0;
      var $298 = $297 & 1;
      if ($253) {
        label = 69;
        break;
      } else {
        label = 68;
        break;
      }
     case 68:
      var $_pre34 = HEAP32[5403048 >> 2];
      var $301 = $_pre34;
      label = 70;
      break;
     case 69:
      HEAP32[5403048 >> 2] = $user_flip_0_lcssa54;
      var $301 = $user_flip_0_lcssa54;
      label = 70;
      break;
     case 70:
      var $301;
      var $302 = $301 + 3600 | 0;
      var $303 = ($302 | 0) % 360;
      if (($303 | 0) == 270) {
        label = 71;
        break;
      } else if (($303 | 0) == 180) {
        label = 72;
        break;
      } else if (($303 | 0) == 90) {
        label = 73;
        break;
      } else {
        label = 74;
        break;
      }
     case 71:
      HEAP32[5403048 >> 2] = 5;
      label = 74;
      break;
     case 72:
      HEAP32[5403048 >> 2] = 3;
      label = 74;
      break;
     case 73:
      HEAP32[5403048 >> 2] = 6;
      label = 74;
      break;
     case 74:
      if ($254) {
        label = 82;
        break;
      } else {
        label = 75;
        break;
      }
     case 75:
      var $309 = HEAP32[5243568 >> 2];
      var $310 = ($309 | 0) == 0;
      var $311 = $310 & 1;
      if ($310) {
        label = 76;
        break;
      } else {
        label = 77;
        break;
      }
     case 76:
      var $313 = HEAP32[_stderr >> 2];
      var $314 = HEAP32[5264120 >> 2];
      var $315 = _fprintf($313, 5574124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $314, tempInt));
      var $status_2 = $311;
      label = 133;
      break;
     case 77:
      if ($263) {
        label = 79;
        break;
      } else {
        label = 78;
        break;
      }
     case 78:
      var $318 = HEAP32[5244924 >> 2];
      var $319 = HEAP32[5264120 >> 2];
      var $320 = _printf(5574108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $309, HEAP32[tempInt + 4 >> 2] = $318, HEAP32[tempInt + 8 >> 2] = $319, tempInt));
      var $status_2 = $311;
      label = 133;
      break;
     case 79:
      var $_b5 = HEAP8[5243532];
      if ($_b5) {
        label = 80;
        break;
      } else {
        var $327 = $309;
        label = 81;
        break;
      }
     case 80:
      var $323 = HEAP32[_stderr >> 2];
      var $324 = HEAP32[5264120 >> 2];
      var $325 = _fprintf($323, 5574088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $324, HEAP32[tempInt + 4 >> 2] = $309, tempInt));
      var $_pre21 = HEAP32[5243568 >> 2];
      var $327 = $_pre21;
      label = 81;
      break;
     case 81:
      var $327;
      HEAP32[$264 >> 2] = $327;
      HEAP32[$265 >> 2] = $327;
      var $328 = HEAP32[5264120 >> 2];
      var $329 = _utime($328, $ut);
      var $status_2 = $311;
      label = 133;
      break;
     case 82:
      if ($255) {
        label = 84;
        break;
      } else {
        label = 83;
        break;
      }
     case 83:
      var $_pre35 = HEAP32[5263692 >> 2];
      var $status_1 = $298;
      var $346 = $_pre35;
      label = 88;
      break;
     case 84:
      var $332 = HEAP32[5244044 >> 2];
      var $333 = ($332 | 0) == 0;
      var $334 = $333 & 1;
      if ($333) {
        label = 85;
        break;
      } else {
        label = 86;
        break;
      }
     case 85:
      var $336 = HEAP32[_stderr >> 2];
      var $337 = HEAP32[5264120 >> 2];
      var $338 = _fprintf($336, 5574056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $337, tempInt));
      var $status_2 = $334;
      label = 133;
      break;
     case 86:
      var $340 = HEAP32[5244052 >> 2];
      var $341 = ($340 | 0) == 0;
      if ($341) {
        label = 193;
        break;
      } else {
        label = 87;
        break;
      }
     case 87:
      HEAP32[5263692 >> 2] = $340;
      HEAP32[5428492 >> 2] = $332;
      var $343 = HEAP16[5244060 >> 1];
      HEAP16[5398712 >> 1] = $343;
      var $344 = HEAP16[5244040 >> 1];
      HEAP16[5242964 >> 1] = $344;
      HEAP32[5427632 >> 2] = 0;
      var $status_1 = $334;
      var $346 = $340;
      label = 88;
      break;
     case 88:
      var $346;
      var $status_1;
      var $347 = ($346 | 0) == 8;
      if ($347) {
        label = 89;
        break;
      } else {
        label = 90;
        break;
      }
     case 89:
      var $349 = HEAP16[5398712 >> 1];
      var $350 = $349 & 1;
      var $351 = $350 + $349 & 65535;
      HEAP16[5398712 >> 1] = $351;
      var $352 = HEAP16[5242964 >> 1];
      var $353 = $352 & 1;
      var $354 = $353 + $352 & 65535;
      HEAP16[5242964 >> 1] = $354;
      label = 90;
      break;
     case 90:
      var $_b4 = HEAP8[5243532];
      var $or_cond = $256 & $_b4;
      var $or_cond_not = $or_cond ^ 1;
      var $356 = HEAP8[5263628];
      var $357 = $356 << 24 >> 24 == 0;
      var $or_cond155 = $357 | $or_cond_not;
      if ($or_cond155) {
        label = 102;
        break;
      } else {
        label = 91;
        break;
      }
     case 91:
      var $359 = HEAP32[5264120 >> 2];
      var $360 = _printf(5574040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $359, tempInt));
      var $361 = _ctime(5243568);
      var $362 = _printf(5574024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $361, tempInt));
      var $363 = _printf(5574008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 5263628, HEAP32[tempInt + 4 >> 2] = 5263372, tempInt));
      var $364 = HEAP8[5561404];
      var $365 = $364 << 24 >> 24 == 0;
      if ($365) {
        label = 93;
        break;
      } else {
        label = 92;
        break;
      }
     case 92:
      var $367 = _printf(5573996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5561404, tempInt));
      label = 93;
      break;
     case 93:
      var $369 = HEAP32[5427976 >> 2];
      var $370 = ($369 | 0) == 0;
      if ($370) {
        label = 95;
        break;
      } else {
        label = 94;
        break;
      }
     case 94:
      var $371 = _printf(5573980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $372 = HEAP32[5427976 >> 2];
      var $373 = $372 >>> 24;
      var $374 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $373, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $375 = HEAP32[5427976 >> 2];
      var $376 = $375 >>> 16;
      var $377 = $376 & 255;
      var $378 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $377, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $379 = HEAP32[5427976 >> 2];
      var $380 = $379 >>> 8;
      var $381 = $380 & 255;
      var $382 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $381, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $383 = HEAP32[5427976 >> 2];
      var $384 = $383 & 255;
      var $385 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $384, HEAP32[tempInt + 4 >> 2] = 10, tempInt));
      label = 95;
      break;
     case 95:
      var $387 = HEAPF32[5264096 >> 2];
      var $388 = $387 & -1;
      var $389 = _printf(5573956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $388, tempInt));
      var $390 = _printf(5573944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $391 = HEAPF32[5244912 >> 2];
      var $392 = $391 > 0;
      var $393 = $391 < 1;
      var $or_cond3 = $392 & $393;
      if ($or_cond3) {
        label = 96;
        break;
      } else {
        var $399 = $391;
        label = 97;
        break;
      }
     case 96:
      var $395 = _printf(5573940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $396 = HEAPF32[5244912 >> 2];
      var $397 = 1 / $396;
      HEAPF32[5244912 >> 2] = $397;
      var $399 = $397;
      label = 97;
      break;
     case 97:
      var $399;
      var $400 = $399;
      var $401 = _printf(5573924, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $400, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $402 = HEAPF32[5561468 >> 2];
      var $403 = $402;
      var $404 = _printf(5573904, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $403, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $405 = HEAPF32[5403044 >> 2];
      var $406 = $405;
      var $407 = _printf(5573880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $406, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $408 = HEAP32[5245636 >> 2];
      var $409 = ($408 | 0) != 0;
      var $410 = $409 ? 5573848 : 5573844;
      var $411 = _printf(5573852, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $410, tempInt));
      var $412 = HEAP32[5264100 >> 2];
      var $413 = _printf(5573816, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $412, tempInt));
      var $414 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $415 = $414 != 1;
      if ($415) {
        label = 98;
        break;
      } else {
        label = 99;
        break;
      }
     case 98:
      var $417 = _printf(5573788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $414, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      label = 99;
      break;
     case 99:
      var $419 = HEAP32[5244044 >> 2];
      var $420 = ($419 | 0) == 0;
      if ($420) {
        label = 101;
        break;
      } else {
        label = 100;
        break;
      }
     case 100:
      var $422 = HEAP16[5244040 >> 1];
      var $423 = $422 & 65535;
      var $424 = HEAP16[5244060 >> 1];
      var $425 = $424 & 65535;
      var $426 = _printf(5573764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $423, HEAP32[tempInt + 4 >> 2] = $425, tempInt));
      label = 101;
      break;
     case 101:
      var $428 = HEAP16[5245028 >> 1];
      var $429 = $428 & 65535;
      var $430 = HEAP16[5245036 >> 1];
      var $431 = $430 & 65535;
      var $432 = _printf(5573740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $429, HEAP32[tempInt + 4 >> 2] = $431, tempInt));
      label = 104;
      break;
     case 102:
      if ($297) {
        label = 103;
        break;
      } else {
        label = 105;
        break;
      }
     case 103:
      var $435 = HEAP32[_stderr >> 2];
      var $436 = HEAP32[5264120 >> 2];
      var $437 = _fprintf($435, 5573712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $436, tempInt));
      label = 104;
      break;
     case 104:
      var $_pr = HEAP32[5264100 >> 2];
      var $439 = ($_pr | 0) == 0;
      if ($439) {
        var $status_2 = $status_1;
        label = 133;
        break;
      } else {
        label = 105;
        break;
      }
     case 105:
      var $440 = HEAP32[5427632 >> 2];
      var $441 = ($440 | 0) == 0;
      if ($441) {
        var $454 = 0;
        label = 109;
        break;
      } else {
        label = 106;
        break;
      }
     case 106:
      var $_b = HEAP8[5398716];
      var $443 = $_b & 1;
      var $444 = $443 | $identify_only_0_lcssa62;
      var $445 = ($444 | 0) == 0;
      if ($445) {
        label = 107;
        break;
      } else {
        var $454 = $_b;
        label = 109;
        break;
      }
     case 107:
      var $447 = HEAPF32[5244064 >> 2];
      var $448 = $447 != 0;
      var $449 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573248 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573252 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $450 = $449 != 1;
      var $or_cond5 = $448 | $450;
      if ($or_cond5) {
        var $454 = 1;
        label = 109;
        break;
      } else {
        label = 108;
        break;
      }
     case 108:
      var $452 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573264 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573268 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $453 = $452 != 1;
      var $454 = $453;
      label = 109;
      break;
     case 109:
      var $454;
      var $455 = $454 & 1;
      HEAP16[5244916 >> 1] = $455;
      var $456 = HEAP16[5398712 >> 1];
      var $457 = $456 & 65535;
      var $458 = $454 & 1;
      var $459 = $457 + $458 | 0;
      var $460 = $459 >>> ($458 >>> 0);
      var $461 = $460 & 65535;
      HEAP16[5264112 >> 1] = $461;
      var $462 = HEAP16[5242964 >> 1];
      var $463 = $462 & 65535;
      var $464 = $454 & 1;
      var $465 = $464 + $463 | 0;
      var $466 = $465 >>> ($464 >>> 0);
      var $467 = $466 & 65535;
      HEAP16[5264092 >> 1] = $467;
      if ($256) {
        label = 110;
        break;
      } else {
        label = 134;
        break;
      }
     case 110:
      var $_b3 = HEAP8[5243532];
      if ($_b3) {
        label = 111;
        break;
      } else {
        label = 132;
        break;
      }
     case 111:
      var $470 = HEAP32[5427972 >> 2];
      var $471 = ($470 | 0) == 3;
      if ($471) {
        label = 112;
        break;
      } else {
        var $485 = $456;
        var $484 = $462;
        label = 115;
        break;
      }
     case 112:
      HEAP16[5398900 >> 1] = 0;
      HEAP16[5263700 >> 1] = 0;
      HEAP16[5243564 >> 1] = 0;
      var $473 = HEAP16[5245036 >> 1];
      HEAP16[5398712 >> 1] = $473;
      var $474 = HEAP16[5245028 >> 1];
      var $475 = $474 & 65535;
      var $476 = $475 << 3;
      var $477 = HEAP32[5244036 >> 2];
      var $478 = Math.floor(($476 >>> 0) / ($477 >>> 0));
      var $479 = $463 >>> 0 > $478 >>> 0;
      if ($479) {
        label = 114;
        break;
      } else {
        label = 113;
        break;
      }
     case 113:
      var $481 = $478 & 65535;
      HEAP16[5242964 >> 1] = $481;
      var $485 = $473;
      var $484 = $481;
      label = 115;
      break;
     case 114:
      HEAP16[5242964 >> 1] = $474;
      var $485 = $473;
      var $484 = $474;
      label = 115;
      break;
     case 115:
      var $484;
      var $485;
      var $486 = $485 & 65535;
      var $487 = $464 + $486 | 0;
      var $488 = $487 >>> ($464 >>> 0);
      var $489 = $488 & 65535;
      HEAP16[5264112 >> 1] = $489;
      var $490 = $484 & 65535;
      var $491 = $464 + $490 | 0;
      var $492 = $491 >>> ($464 >>> 0);
      var $493 = $492 & 65535;
      HEAP16[5264092 >> 1] = $493;
      if ($257) {
        var $532 = $489;
        var $531 = $493;
        label = 122;
        break;
      } else {
        label = 116;
        break;
      }
     case 116:
      var $495 = HEAP16[5398900 >> 1];
      var $496 = $495 << 16 >> 16 == 0;
      if ($496) {
        label = 118;
        break;
      } else {
        label = 117;
        break;
      }
     case 117:
      var $498 = $495 & 65535;
      var $499 = $498 - 1 | 0;
      var $500 = $499 + $464 | 0;
      var $501 = $500 >> $464;
      var $502 = $501 & 65535;
      HEAP16[5398900 >> 1] = $502;
      var $503 = $501 & 65535;
      var $504 = $503 | 0;
      var $505 = $504 / .7071067811865476;
      var $506 = $505 >= 0 ? Math.floor($505) : Math.ceil($505);
      HEAP16[5264092 >> 1] = $506;
      var $507 = $488 & 65535;
      var $508 = $501 & 65535;
      var $509 = $507 - $508 | 0;
      var $510 = $509 | 0;
      var $511 = $510 / .7071067811865476;
      var $512 = $511 >= 0 ? Math.floor($511) : Math.ceil($511);
      HEAP16[5264112 >> 1] = $512;
      var $532 = $512;
      var $531 = $506;
      label = 122;
      break;
     case 118:
      var $514 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $515 = $514 < 1;
      if ($515) {
        label = 119;
        break;
      } else {
        var $523 = $489;
        label = 120;
        break;
      }
     case 119:
      var $517 = $488 & 65535;
      var $518 = $517 | 0;
      var $519 = $518 / $514;
      var $520 = $519 + .5;
      var $521 = $520 >= 0 ? Math.floor($520) : Math.ceil($520);
      HEAP16[5264112 >> 1] = $521;
      var $523 = $521;
      label = 120;
      break;
     case 120:
      var $523;
      var $524 = $514 > 1;
      if ($524) {
        label = 121;
        break;
      } else {
        var $532 = $523;
        var $531 = $493;
        label = 122;
        break;
      }
     case 121:
      var $526 = $492 & 65535;
      var $527 = $526 | 0;
      var $528 = $514 * $527;
      var $529 = $528 + .5;
      var $530 = $529 >= 0 ? Math.floor($529) : Math.ceil($529);
      HEAP16[5264092 >> 1] = $530;
      var $532 = $523;
      var $531 = $530;
      label = 122;
      break;
     case 122:
      var $531;
      var $532;
      var $533 = HEAP32[5403048 >> 2];
      var $534 = $533 & 4;
      var $535 = ($534 | 0) == 0;
      if ($535) {
        label = 124;
        break;
      } else {
        label = 123;
        break;
      }
     case 123:
      HEAP16[5264092 >> 1] = $532;
      HEAP16[5264112 >> 1] = $531;
      label = 124;
      break;
     case 124:
      var $538 = _printf(5573688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $490, HEAP32[tempInt + 4 >> 2] = $486, tempInt));
      var $539 = HEAP16[5264092 >> 1];
      var $540 = $539 & 65535;
      var $541 = HEAP16[5264112 >> 1];
      var $542 = $541 & 65535;
      var $543 = _printf(5573664, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $540, HEAP32[tempInt + 4 >> 2] = $542, tempInt));
      var $544 = HEAP32[5560840 >> 2];
      var $545 = _printf(5573648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $544, tempInt));
      var $546 = HEAP32[5427632 >> 2];
      var $547 = ($546 | 0) == 0;
      if ($547) {
        label = 127;
        break;
      } else {
        label = 125;
        break;
      }
     case 125:
      var $549 = _printf(5573628, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $i_2175 = 0;
      label = 126;
      break;
     case 126:
      var $i_2175;
      var $551 = $i_2175 >> 1;
      var $552 = $i_2175 & 1;
      var $553 = _fcol($551, $552);
      var $554 = $553 + 5560896 | 0;
      var $555 = HEAP8[$554];
      var $556 = $555 << 24 >> 24;
      var $557 = HEAP32[_stdout >> 2];
      var $558 = _fputc($556, $557);
      var $559 = $i_2175 + 1 | 0;
      var $exitcond = ($559 | 0) == 16;
      if ($exitcond) {
        label = 127;
        break;
      } else {
        var $i_2175 = $559;
        label = 126;
        break;
      }
     case 127:
      var $560 = _printf(5573604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $561 = HEAP32[5560840 >> 2];
      var $562 = ($561 | 0) > 0;
      if ($562) {
        var $c_2176 = 0;
        label = 128;
        break;
      } else {
        label = 129;
        break;
      }
     case 128:
      var $c_2176;
      var $563 = 5245640 + ($c_2176 << 2) | 0;
      var $564 = HEAPF32[$563 >> 2];
      var $565 = $564;
      var $566 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $565, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $567 = $c_2176 + 1 | 0;
      var $568 = HEAP32[5560840 >> 2];
      var $569 = ($567 | 0) < ($568 | 0);
      if ($569) {
        var $c_2176 = $567;
        label = 128;
        break;
      } else {
        label = 129;
        break;
      }
     case 129:
      var $570 = HEAPF32[5561124 >> 2];
      var $571 = $570 > 0;
      if ($571) {
        label = 130;
        break;
      } else {
        label = 131;
        break;
      }
     case 130:
      var $572 = _printf(5573580, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $573 = HEAPF32[5561124 >> 2];
      var $574 = $573;
      var $575 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $574, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $576 = HEAPF32[5561128 >> 2];
      var $577 = $576;
      var $578 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $577, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $579 = HEAPF32[5561132 >> 2];
      var $580 = $579;
      var $581 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $580, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $582 = HEAPF32[5561136 >> 2];
      var $583 = $582;
      var $584 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $583, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      label = 131;
      break;
     case 131:
      var $586 = HEAP32[_stdout >> 2];
      var $587 = _fputc(10, $586);
      var $status_2 = $status_1;
      label = 133;
      break;
     case 132:
      var $589 = HEAP32[5264120 >> 2];
      var $590 = _printf(5573556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $589, HEAP32[tempInt + 4 >> 2] = 5263628, HEAP32[tempInt + 8 >> 2] = 5263372, tempInt));
      var $status_2 = $status_1;
      label = 133;
      break;
     case 133:
      var $status_2;
      var $592 = HEAP32[5264116 >> 2];
      var $593 = _fclose($592);
      var $arg_5 = $arg_4182;
      var $status_5 = $status_2;
      label = 222;
      break;
     case 134:
      var $595 = HEAPF32[5560844 >> 2];
      var $596 = $595 > .25;
      var $or_cond157 = $267 & $596;
      if ($or_cond157) {
        label = 135;
        break;
      } else {
        label = 136;
        break;
      }
     case 135:
      for (var $$src = 5560844 >> 2, $$dest = 5244964 >> 2, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src];
      }
      HEAP32[5245040 >> 2] = 0;
      label = 136;
      break;
     case 136:
      var $599 = HEAP32[5263444 >> 2];
      var $600 = ($599 | 0) == 0;
      if ($600) {
        var $604 = $440;
        label = 138;
        break;
      } else {
        label = 137;
        break;
      }
     case 137:
      var $602 = _malloc($599);
      HEAP32[5263448 >> 2] = $602;
      _merror($602, 5573548);
      var $_pre = HEAP32[5427632 >> 2];
      var $604 = $_pre;
      label = 138;
      break;
     case 138:
      var $604;
      var $605 = ($604 | 0) != 0;
      var $606 = HEAP32[5560840 >> 2];
      var $607 = ($606 | 0) == 1;
      var $or_cond7 = $605 | $607;
      if ($or_cond7) {
        label = 139;
        break;
      } else {
        label = 140;
        break;
      }
     case 139:
      var $609 = HEAP16[5245036 >> 1];
      var $610 = $609 & 65535;
      var $611 = $610 + 7 | 0;
      var $612 = HEAP16[5245028 >> 1];
      var $613 = $612 & 65535;
      var $614 = $611 * $613 & -1;
      var $615 = _calloc($614, 2);
      var $616 = $615;
      HEAP32[5245032 >> 2] = $616;
      _merror($615, 5573548);
      label = 141;
      break;
     case 140:
      var $618 = HEAP16[5264112 >> 1];
      var $619 = $618 & 65535;
      var $620 = HEAP16[5264092 >> 1];
      var $621 = $620 & 65535;
      var $622 = $621 * $619 & -1;
      var $623 = _calloc($622, 8);
      var $624 = $623;
      HEAP32[5264108 >> 2] = $624;
      _merror($623, 5573548);
      label = 141;
      break;
     case 141:
      var $_b2 = HEAP8[5243532];
      if ($_b2) {
        label = 142;
        break;
      } else {
        label = 143;
        break;
      }
     case 142:
      var $627 = HEAP32[_stderr >> 2];
      var $628 = HEAP32[5264120 >> 2];
      var $629 = _fprintf($627, 5573512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5263628, HEAP32[tempInt + 4 >> 2] = 5263372, HEAP32[tempInt + 8 >> 2] = $628, tempInt));
      label = 143;
      break;
     case 143:
      var $631 = HEAP32[5244920 >> 2];
      var $632 = HEAP32[5264100 >> 2];
      var $633 = $631 >>> 0 < $632 >>> 0;
      if ($633) {
        label = 145;
        break;
      } else {
        label = 144;
        break;
      }
     case 144:
      var $635 = HEAP32[_stderr >> 2];
      var $636 = HEAP32[5264120 >> 2];
      var $637 = _fprintf($635, 5573444, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $636, HEAP32[tempInt + 4 >> 2] = $631, tempInt));
      label = 145;
      break;
     case 145:
      var $639 = HEAP32[5264116 >> 2];
      var $640 = HEAP32[5428492 >> 2];
      var $641 = _fseek($639, $640, 0);
      var $642 = HEAP32[5245032 >> 2];
      var $643 = ($642 | 0) == 0;
      var $or_cond158 = $643 | $258;
      if ($or_cond158) {
        label = 147;
        break;
      } else {
        label = 146;
        break;
      }
     case 146:
      var $645 = $642;
      var $646 = HEAP16[5245036 >> 1];
      var $647 = $646 & 65535;
      var $648 = HEAP16[5245028 >> 1];
      var $649 = $648 & 65535;
      var $650 = $649 * $647 & -1;
      var $651 = HEAP32[_stdin >> 2];
      var $652 = _fread($645, 2, $650, $651);
      label = 148;
      break;
     case 147:
      var $654 = HEAP32[5263692 >> 2];
      var $655 = $654;
      FUNCTION_TABLE[$655]();
      label = 148;
      break;
     case 148:
      var $657 = HEAP32[5427972 >> 2];
      var $658 = ($657 | 0) == 3;
      if ($658) {
        label = 150;
        break;
      } else {
        label = 149;
        break;
      }
     case 149:
      var $_pre36 = HEAP16[5398712 >> 1];
      var $_pre37 = HEAP16[5242964 >> 1];
      var $674 = $_pre36;
      var $673 = $_pre37;
      label = 153;
      break;
     case 150:
      HEAP16[5398900 >> 1] = 0;
      HEAP16[5263700 >> 1] = 0;
      HEAP16[5243564 >> 1] = 0;
      var $660 = HEAP16[5245036 >> 1];
      HEAP16[5398712 >> 1] = $660;
      var $661 = HEAP16[5242964 >> 1];
      var $662 = $661 & 65535;
      var $663 = HEAP16[5245028 >> 1];
      var $664 = $663 & 65535;
      var $665 = $664 << 3;
      var $666 = HEAP32[5244036 >> 2];
      var $667 = Math.floor(($665 >>> 0) / ($666 >>> 0));
      var $668 = $662 >>> 0 > $667 >>> 0;
      if ($668) {
        label = 152;
        break;
      } else {
        label = 151;
        break;
      }
     case 151:
      var $670 = $667 & 65535;
      HEAP16[5242964 >> 1] = $670;
      var $674 = $660;
      var $673 = $670;
      label = 153;
      break;
     case 152:
      HEAP16[5242964 >> 1] = $663;
      var $674 = $660;
      var $673 = $663;
      label = 153;
      break;
     case 153:
      var $673;
      var $674;
      var $675 = $674 & 65535;
      var $676 = HEAP16[5244916 >> 1];
      var $677 = $676 & 65535;
      var $678 = $677 + $675 | 0;
      var $679 = $678 >>> ($677 >>> 0);
      var $680 = $679 & 65535;
      HEAP16[5264112 >> 1] = $680;
      var $681 = $673 & 65535;
      var $682 = $677 + $681 | 0;
      var $683 = $682 >>> ($677 >>> 0);
      var $684 = $683 & 65535;
      HEAP16[5264092 >> 1] = $684;
      var $685 = HEAP32[5245032 >> 2];
      var $686 = ($685 | 0) == 0;
      if ($686) {
        label = 155;
        break;
      } else {
        label = 154;
        break;
      }
     case 154:
      var $688 = $679 & 65535;
      var $689 = $683 & 65535;
      var $690 = $688 * $689 & -1;
      var $691 = _calloc($690, 8);
      var $692 = $691;
      HEAP32[5264108 >> 2] = $692;
      _merror($691, 5573548);
      _crop_masked_pixels();
      var $693 = HEAP32[5245032 >> 2];
      var $694 = $693;
      _free($694);
      label = 155;
      break;
     case 155:
      var $_b12 = HEAP8[5242880];
      if ($_b12) {
        label = 156;
        break;
      } else {
        label = 157;
        break;
      }
     case 156:
      _remove_zeroes();
      label = 157;
      break;
     case 157:
      _bad_pixels($bpfile_0_lcssa46);
      if ($259) {
        label = 159;
        break;
      } else {
        label = 158;
        break;
      }
     case 158:
      _subtract($dark_frame_0_lcssa44);
      label = 159;
      break;
     case 159:
      var $700 = HEAP16[5398900 >> 1];
      var $701 = $700 << 16 >> 16 == 0;
      var $702 = $701 & 1;
      var $703 = $702 | 2;
      var $704 = HEAP32[5560916 >> 2];
      var $705 = HEAP32[5560904 >> 2];
      var $706 = $704 >>> 0 > $705 >>> 0;
      var $_i_3 = $706 ? $705 : $704;
      var $707 = HEAP32[5560908 >> 2];
      var $708 = $_i_3 >>> 0 > $707 >>> 0;
      var $_i_3_1 = $708 ? $707 : $_i_3;
      var $709 = HEAP32[5560912 >> 2];
      var $710 = $_i_3_1 >>> 0 > $709 >>> 0;
      var $_i_3_2 = $710 ? $709 : $_i_3_1;
      var $711 = $705 - $_i_3_2 | 0;
      var $712 = $707 - $_i_3_2 | 0;
      var $713 = $709 - $_i_3_2 | 0;
      var $714 = $704 - $_i_3_2 | 0;
      var $715 = HEAP32[5561400 >> 2];
      var $716 = $715 + $_i_3_2 | 0;
      var $user_black_0_ = $261 ? $user_black_0_lcssa58 : $716;
      HEAP32[5561400 >> 2] = $user_black_0_;
      var $717 = $711 + $user_black_0_ | 0;
      HEAP32[5560904 >> 2] = $717;
      var $718 = $712 + $user_black_0_ | 0;
      HEAP32[5560908 >> 2] = $718;
      var $719 = $713 + $user_black_0_ | 0;
      HEAP32[5560912 >> 2] = $719;
      var $720 = $714 + $user_black_0_ | 0;
      HEAP32[5560916 >> 2] = $720;
      var $user_qual_0_ = $260 ? $user_qual_0_lcssa60 : $703;
      if ($262) {
        label = 160;
        break;
      } else {
        label = 161;
        break;
      }
     case 160:
      HEAP32[5263496 >> 2] = $user_sat_0_lcssa56;
      label = 161;
      break;
     case 161:
      var $_b11 = HEAP8[5264104];
      var $723 = HEAP32[5427972 >> 2];
      if ($_b11) {
        label = 162;
        break;
      } else {
        label = 169;
        break;
      }
     case 162:
      var $725 = ($723 | 0) != 0;
      var $726 = HEAP32[5263692 >> 2];
      var $727 = ($726 | 0) == 92;
      var $or_cond9 = $725 | $727;
      if ($or_cond9) {
        label = 163;
        break;
      } else {
        label = 168;
        break;
      }
     case 163:
      var $728 = HEAP16[5398712 >> 1];
      var $729 = $728 & 65535;
      var $730 = HEAP16[5242964 >> 1];
      var $731 = $730 & 65535;
      var $732 = $729 << 2;
      var $733 = $732 * $731 & -1;
      var $734 = ($733 | 0) > 0;
      if ($734) {
        label = 164;
        break;
      } else {
        label = 171;
        break;
      }
     case 164:
      var $_pre16 = HEAP32[5264108 >> 2];
      var $i_5170 = 0;
      label = 165;
      break;
     case 165:
      var $i_5170;
      var $735 = $_pre16 + ($i_5170 << 1) | 0;
      var $736 = HEAP16[$735 >> 1];
      var $737 = $736 << 16 >> 16 < 0;
      if ($737) {
        label = 166;
        break;
      } else {
        label = 167;
        break;
      }
     case 166:
      HEAP16[$735 >> 1] = 0;
      label = 167;
      break;
     case 167:
      var $740 = $i_5170 + 1 | 0;
      var $741 = ($740 | 0) < ($733 | 0);
      if ($741) {
        var $i_5170 = $740;
        label = 165;
        break;
      } else {
        label = 171;
        break;
      }
     case 168:
      _foveon_interpolate();
      label = 171;
      break;
     case 169:
      var $744 = ($723 | 0) < 2;
      if ($744) {
        label = 170;
        break;
      } else {
        label = 171;
        break;
      }
     case 170:
      _scale_colors();
      label = 171;
      break;
     case 171:
      _pre_interpolate();
      var $746 = HEAP32[5427632 >> 2];
      var $747 = ($746 | 0) == 0;
      var $748 = HEAP32[5427972 >> 2];
      var $749 = ($748 | 0) != 0;
      var $or_cond11 = $747 | $749;
      if ($or_cond11) {
        label = 179;
        break;
      } else {
        label = 172;
        break;
      }
     case 172:
      var $751 = ($user_qual_0_ | 0) == 0;
      if ($751) {
        label = 173;
        break;
      } else {
        label = 174;
        break;
      }
     case 173:
      _lin_interpolate();
      label = 179;
      break;
     case 174:
      var $754 = ($user_qual_0_ | 0) == 1;
      var $755 = HEAP32[5560840 >> 2];
      var $756 = ($755 | 0) > 3;
      var $or_cond13 = $754 | $756;
      var $757 = $746 >>> 0 < 1e3;
      var $or_cond15 = $or_cond13 | $757;
      if ($or_cond15) {
        label = 175;
        break;
      } else {
        label = 176;
        break;
      }
     case 175:
      _vng_interpolate();
      label = 179;
      break;
     case 176:
      var $760 = ($user_qual_0_ | 0) == 2;
      if ($760) {
        label = 177;
        break;
      } else {
        label = 178;
        break;
      }
     case 177:
      _ppg_interpolate();
      label = 179;
      break;
     case 178:
      _ahd_interpolate();
      label = 179;
      break;
     case 179:
      var $764 = HEAP32[5263436 >> 2];
      var $765 = ($764 | 0) == 0;
      if ($765) {
        label = 180;
        break;
      } else {
        label = 181;
        break;
      }
     case 180:
      var $_pre38 = HEAP32[5560840 >> 2];
      var $phitmp = ($_pre38 | 0) == 3;
      var $784 = $phitmp;
      label = 184;
      break;
     case 181:
      HEAP32[5560840 >> 2] = 3;
      var $767 = HEAP16[5398712 >> 1];
      var $768 = $767 & 65535;
      var $769 = HEAP16[5242964 >> 1];
      var $770 = $769 & 65535;
      var $771 = $770 * $768 & -1;
      var $772 = ($771 | 0) == 0;
      if ($772) {
        var $784 = 1;
        label = 184;
        break;
      } else {
        label = 182;
        break;
      }
     case 182:
      var $_pre20 = HEAP32[5264108 >> 2];
      var $i_6172 = 0;
      label = 183;
      break;
     case 183:
      var $i_6172;
      var $773 = $_pre20 + ($i_6172 << 3) + 2 | 0;
      var $774 = HEAP16[$773 >> 1];
      var $775 = $774 & 65535;
      var $776 = $_pre20 + ($i_6172 << 3) + 6 | 0;
      var $777 = HEAP16[$776 >> 1];
      var $778 = $777 & 65535;
      var $779 = $778 + $775 | 0;
      var $780 = $779 >>> 1;
      var $781 = $780 & 65535;
      HEAP16[$773 >> 1] = $781;
      var $782 = $i_6172 + 1 | 0;
      var $783 = ($782 | 0) < ($771 | 0);
      if ($783) {
        var $i_6172 = $782;
        label = 183;
        break;
      } else {
        var $784 = 1;
        label = 184;
        break;
      }
     case 184:
      var $784;
      var $_b10 = HEAP8[5264104];
      var $785 = $_b10 ^ 1;
      var $or_cond17 = $784 & $785;
      if ($or_cond17) {
        label = 185;
        break;
      } else {
        var $_b9 = $_b10;
        label = 186;
        break;
      }
     case 185:
      _median_filter();
      var $_b9_pre = HEAP8[5264104];
      var $_b9 = $_b9_pre;
      label = 186;
      break;
     case 186:
      var $_b9;
      var $788 = $_b9 ^ 1;
      var $789 = HEAP32[5398708 >> 2];
      var $790 = ($789 | 0) == 2;
      var $or_cond19 = $790 & $788;
      if ($or_cond19) {
        label = 187;
        break;
      } else {
        var $_b8 = $_b9;
        var $793 = $789;
        label = 188;
        break;
      }
     case 187:
      _blend_highlights();
      var $_b8_pre = HEAP8[5264104];
      var $_pre19 = HEAP32[5398708 >> 2];
      var $_b8 = $_b8_pre;
      var $793 = $_pre19;
      label = 188;
      break;
     case 188:
      var $793;
      var $_b8;
      var $794 = $_b8 ^ 1;
      var $795 = ($793 | 0) > 2;
      var $or_cond21 = $795 & $794;
      if ($or_cond21) {
        label = 189;
        break;
      } else {
        label = 190;
        break;
      }
     case 189:
      _recover_highlights();
      label = 190;
      break;
     case 190:
      if ($257) {
        label = 192;
        break;
      } else {
        label = 191;
        break;
      }
     case 191:
      _fuji_rotate();
      _convert_to_rgb();
      _stretch();
      var $803 = 84;
      var $status_370 = $status_1;
      label = 194;
      break;
     case 192:
      _convert_to_rgb();
      var $803 = 84;
      var $status_370 = $status_1;
      label = 194;
      break;
     case 193:
      var $799 = HEAP32[5264116 >> 2];
      var $800 = _fseek($799, $332, 0);
      var $801 = HEAP32[5242960 >> 2];
      var $802 = ($801 | 0) == 60;
      if ($802) {
        var $write_ext_0 = 5586544;
        var $write_fun_069 = $801;
        var $status_371 = $334;
        label = 196;
        break;
      } else {
        var $803 = $801;
        var $status_370 = $334;
        label = 194;
        break;
      }
     case 194:
      var $status_370;
      var $803;
      var $_b7 = HEAP8[5262932];
      var $804 = ($803 | 0) == 84;
      var $or_cond23 = $_b7 & $804;
      if ($or_cond23) {
        var $write_ext_0 = 5573436;
        var $write_fun_069 = $803;
        var $status_371 = $status_370;
        label = 196;
        break;
      } else {
        label = 195;
        break;
      }
     case 195:
      var $806 = HEAP32[5560840 >> 2];
      var $807 = $806 * 5 & -1;
      var $_sum = $807 - 5 | 0;
      var $808 = $_sum + 5573416 | 0;
      var $write_ext_0 = $808;
      var $write_fun_069 = $803;
      var $status_371 = $status_370;
      label = 196;
      break;
     case 196:
      var $status_371;
      var $write_fun_069;
      var $write_ext_0;
      var $810 = HEAP32[5264120 >> 2];
      var $811 = _strlen($810);
      var $812 = $811 + 64 | 0;
      var $813 = _malloc($812);
      _merror($813, 5573548);
      if ($248) {
        label = 197;
        break;
      } else {
        label = 198;
        break;
      }
     case 197:
      for (var $$src = 5573400, $$dest = $813, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src];
      }
      label = 206;
      break;
     case 198:
      var $816 = HEAP32[5264120 >> 2];
      var $817 = _strcpy($813, $816);
      var $818 = _strrchr($813, 46);
      var $819 = ($818 | 0) == 0;
      if ($819) {
        label = 200;
        break;
      } else {
        label = 199;
        break;
      }
     case 199:
      HEAP8[$818] = 0;
      label = 200;
      break;
     case 200:
      if ($266) {
        label = 202;
        break;
      } else {
        label = 201;
        break;
      }
     case 201:
      var $823 = _strlen($813);
      var $824 = $813 + $823 | 0;
      var $825 = HEAP32[5264100 >> 2];
      var $826 = $825 - 1 | 0;
      var $827 = _snprintf(0, 0, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $826, tempInt));
      var $828 = HEAP32[5244920 >> 2];
      var $829 = _sprintf($824, 5573392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $827, HEAP32[tempInt + 4 >> 2] = $828, tempInt));
      label = 202;
      break;
     case 202:
      if ($255) {
        label = 203;
        break;
      } else {
        label = 204;
        break;
      }
     case 203:
      var $strlen = _strlen($813);
      var $endptr = $813 + $strlen | 0;
      HEAP8[$endptr] = HEAP8[5573384];
      HEAP8[$endptr + 1] = HEAP8[5573385];
      HEAP8[$endptr + 2] = HEAP8[5573386];
      HEAP8[$endptr + 3] = HEAP8[5573387];
      HEAP8[$endptr + 4] = HEAP8[5573388];
      HEAP8[$endptr + 5] = HEAP8[5573389];
      HEAP8[$endptr + 6] = HEAP8[5573390];
      label = 204;
      break;
     case 204:
      var $833 = _strcat($813, $write_ext_0);
      var $834 = _fopen($813, 5573380);
      HEAP32[5262952 >> 2] = $834;
      var $835 = ($834 | 0) == 0;
      if ($835) {
        label = 205;
        break;
      } else {
        label = 206;
        break;
      }
     case 205:
      _perror($813);
      var $ofname_0 = $813;
      var $status_4 = 1;
      label = 210;
      break;
     case 206:
      var $_b1 = HEAP8[5243532];
      if ($_b1) {
        label = 207;
        break;
      } else {
        label = 208;
        break;
      }
     case 207:
      var $839 = HEAP32[_stderr >> 2];
      var $840 = _fprintf($839, 5573356, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $813, tempInt));
      label = 208;
      break;
     case 208:
      var $842 = $write_fun_069;
      FUNCTION_TABLE[$842]();
      var $843 = HEAP32[5264116 >> 2];
      var $844 = _fclose($843);
      var $845 = HEAP32[5262952 >> 2];
      var $846 = HEAP32[_stdout >> 2];
      var $847 = ($845 | 0) == ($846 | 0);
      if ($847) {
        var $ofname_0 = $813;
        var $status_4 = $status_371;
        label = 210;
        break;
      } else {
        label = 209;
        break;
      }
     case 209:
      var $849 = _fclose($845);
      var $ofname_0 = $813;
      var $status_4 = $status_371;
      label = 210;
      break;
     case 210:
      var $status_4;
      var $ofname_0;
      var $851 = HEAP32[5263448 >> 2];
      var $852 = ($851 | 0) == 0;
      if ($852) {
        label = 212;
        break;
      } else {
        label = 211;
        break;
      }
     case 211:
      _free($851);
      label = 212;
      break;
     case 212:
      var $855 = ($ofname_0 | 0) == 0;
      if ($855) {
        label = 214;
        break;
      } else {
        label = 213;
        break;
      }
     case 213:
      _free($ofname_0);
      label = 214;
      break;
     case 214:
      var $858 = HEAP32[5262948 >> 2];
      var $859 = ($858 | 0) == 0;
      if ($859) {
        label = 216;
        break;
      } else {
        label = 215;
        break;
      }
     case 215:
      var $861 = $858;
      _free($861);
      label = 216;
      break;
     case 216:
      var $863 = HEAP32[5264108 >> 2];
      var $864 = ($863 | 0) == 0;
      if ($864) {
        label = 218;
        break;
      } else {
        label = 217;
        break;
      }
     case 217:
      var $866 = $863;
      _free($866);
      label = 218;
      break;
     case 218:
      if ($266) {
        var $arg_5 = $arg_4182;
        var $status_5 = $status_4;
        label = 222;
        break;
      } else {
        label = 219;
        break;
      }
     case 219:
      var $869 = HEAP32[5244920 >> 2];
      var $870 = $869 + 1 | 0;
      HEAP32[5244920 >> 2] = $870;
      var $871 = HEAP32[5264100 >> 2];
      var $872 = $870 >>> 0 < $871 >>> 0;
      if ($872) {
        label = 220;
        break;
      } else {
        label = 221;
        break;
      }
     case 220:
      var $874 = $arg_4182 - 1 | 0;
      var $arg_5 = $874;
      var $status_5 = $status_4;
      label = 222;
      break;
     case 221:
      HEAP32[5244920 >> 2] = 0;
      var $arg_5 = $arg_4182;
      var $status_5 = $status_4;
      label = 222;
      break;
     case 222:
      var $status_5;
      var $arg_5;
      var $877 = $arg_5 + 1 | 0;
      var $878 = ($877 | 0) < ($argc | 0);
      if ($878) {
        var $arg_4182 = $877;
        label = 60;
        break;
      } else {
        var $_0 = $status_5;
        label = 223;
        break;
      }
     case 223:
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in mySetjmpIds)) throw e;
    setjmpTable[setjmpLabels[e.id]](e.value);
  }
}
Module["_main"] = _main;
_main["X"] = 1;
function _malloc($bytes) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $bytes >>> 0 < 245;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 28;
      break;
    }
   case 3:
    var $3 = $bytes >>> 0 < 11;
    if ($3) {
      var $8 = 16;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = $bytes + 11 | 0;
    var $6 = $5 & -8;
    var $8 = $6;
    label = 5;
    break;
   case 5:
    var $8;
    var $9 = $8 >>> 3;
    var $10 = HEAP32[5587596 >> 2];
    var $11 = $10 >>> ($9 >>> 0);
    var $12 = $11 & 3;
    var $13 = ($12 | 0) == 0;
    if ($13) {
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $15 = $11 & 1;
    var $16 = $15 ^ 1;
    var $17 = $16 + $9 | 0;
    var $18 = $17 << 1;
    var $19 = 5587636 + ($18 << 2) | 0;
    var $20 = $19;
    var $_sum106 = $18 + 2 | 0;
    var $21 = 5587636 + ($_sum106 << 2) | 0;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22 + 8 | 0;
    var $24 = HEAP32[$23 >> 2];
    var $25 = ($20 | 0) == ($24 | 0);
    if ($25) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $27 = 1 << $17;
    var $28 = $27 ^ -1;
    var $29 = $10 & $28;
    HEAP32[5587596 >> 2] = $29;
    label = 11;
    break;
   case 8:
    var $31 = $24;
    var $32 = HEAP32[5587612 >> 2];
    var $33 = $31 >>> 0 < $32 >>> 0;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[$21 >> 2] = $24;
    var $35 = $24 + 12 | 0;
    HEAP32[$35 >> 2] = $20;
    label = 11;
    break;
   case 10:
    _abort();
   case 11:
    var $38 = $17 << 3;
    var $39 = $38 | 3;
    var $40 = $22 + 4 | 0;
    HEAP32[$40 >> 2] = $39;
    var $41 = $22;
    var $_sum107108 = $38 | 4;
    var $42 = $41 + $_sum107108 | 0;
    var $43 = $42;
    var $44 = HEAP32[$43 >> 2];
    var $45 = $44 | 1;
    HEAP32[$43 >> 2] = $45;
    var $46 = $23;
    var $mem_0 = $46;
    label = 39;
    break;
   case 12:
    var $48 = HEAP32[5587604 >> 2];
    var $49 = $8 >>> 0 > $48 >>> 0;
    if ($49) {
      label = 13;
      break;
    } else {
      var $nb_0 = $8;
      label = 31;
      break;
    }
   case 13:
    var $51 = ($11 | 0) == 0;
    if ($51) {
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $53 = $11 << $9;
    var $54 = 2 << $9;
    var $55 = -$54 | 0;
    var $56 = $54 | $55;
    var $57 = $53 & $56;
    var $58 = -$57 | 0;
    var $59 = $57 & $58;
    var $60 = $59 - 1 | 0;
    var $61 = $60 >>> 12;
    var $62 = $61 & 16;
    var $63 = $60 >>> ($62 >>> 0);
    var $64 = $63 >>> 5;
    var $65 = $64 & 8;
    var $66 = $65 | $62;
    var $67 = $63 >>> ($65 >>> 0);
    var $68 = $67 >>> 2;
    var $69 = $68 & 4;
    var $70 = $66 | $69;
    var $71 = $67 >>> ($69 >>> 0);
    var $72 = $71 >>> 1;
    var $73 = $72 & 2;
    var $74 = $70 | $73;
    var $75 = $71 >>> ($73 >>> 0);
    var $76 = $75 >>> 1;
    var $77 = $76 & 1;
    var $78 = $74 | $77;
    var $79 = $75 >>> ($77 >>> 0);
    var $80 = $78 + $79 | 0;
    var $81 = $80 << 1;
    var $82 = 5587636 + ($81 << 2) | 0;
    var $83 = $82;
    var $_sum100 = $81 + 2 | 0;
    var $84 = 5587636 + ($_sum100 << 2) | 0;
    var $85 = HEAP32[$84 >> 2];
    var $86 = $85 + 8 | 0;
    var $87 = HEAP32[$86 >> 2];
    var $88 = ($83 | 0) == ($87 | 0);
    if ($88) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $90 = 1 << $80;
    var $91 = $90 ^ -1;
    var $92 = $10 & $91;
    HEAP32[5587596 >> 2] = $92;
    label = 19;
    break;
   case 16:
    var $94 = $87;
    var $95 = HEAP32[5587612 >> 2];
    var $96 = $94 >>> 0 < $95 >>> 0;
    if ($96) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$84 >> 2] = $87;
    var $98 = $87 + 12 | 0;
    HEAP32[$98 >> 2] = $83;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $101 = $80 << 3;
    var $102 = $101 - $8 | 0;
    var $103 = $8 | 3;
    var $104 = $85 + 4 | 0;
    HEAP32[$104 >> 2] = $103;
    var $105 = $85;
    var $106 = $105 + $8 | 0;
    var $107 = $106;
    var $108 = $102 | 1;
    var $_sum101102 = $8 | 4;
    var $109 = $105 + $_sum101102 | 0;
    var $110 = $109;
    HEAP32[$110 >> 2] = $108;
    var $111 = $105 + $101 | 0;
    var $112 = $111;
    HEAP32[$112 >> 2] = $102;
    var $113 = HEAP32[5587604 >> 2];
    var $114 = ($113 | 0) == 0;
    if ($114) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $116 = HEAP32[5587616 >> 2];
    var $117 = $113 >>> 3;
    var $118 = $117 << 1;
    var $119 = 5587636 + ($118 << 2) | 0;
    var $120 = $119;
    var $121 = HEAP32[5587596 >> 2];
    var $122 = 1 << $117;
    var $123 = $121 & $122;
    var $124 = ($123 | 0) == 0;
    if ($124) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    var $126 = $121 | $122;
    HEAP32[5587596 >> 2] = $126;
    var $_sum104_pre = $118 + 2 | 0;
    var $_pre = 5587636 + ($_sum104_pre << 2) | 0;
    var $F4_0 = $120;
    var $_pre_phi = $_pre;
    label = 24;
    break;
   case 22:
    var $_sum105 = $118 + 2 | 0;
    var $128 = 5587636 + ($_sum105 << 2) | 0;
    var $129 = HEAP32[$128 >> 2];
    var $130 = $129;
    var $131 = HEAP32[5587612 >> 2];
    var $132 = $130 >>> 0 < $131 >>> 0;
    if ($132) {
      label = 23;
      break;
    } else {
      var $F4_0 = $129;
      var $_pre_phi = $128;
      label = 24;
      break;
    }
   case 23:
    _abort();
   case 24:
    var $_pre_phi;
    var $F4_0;
    HEAP32[$_pre_phi >> 2] = $116;
    var $135 = $F4_0 + 12 | 0;
    HEAP32[$135 >> 2] = $116;
    var $136 = $116 + 8 | 0;
    HEAP32[$136 >> 2] = $F4_0;
    var $137 = $116 + 12 | 0;
    HEAP32[$137 >> 2] = $120;
    label = 25;
    break;
   case 25:
    HEAP32[5587604 >> 2] = $102;
    HEAP32[5587616 >> 2] = $107;
    var $139 = $86;
    var $mem_0 = $139;
    label = 39;
    break;
   case 26:
    var $141 = HEAP32[5587600 >> 2];
    var $142 = ($141 | 0) == 0;
    if ($142) {
      var $nb_0 = $8;
      label = 31;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $144 = _tmalloc_small($8);
    var $145 = ($144 | 0) == 0;
    if ($145) {
      var $nb_0 = $8;
      label = 31;
      break;
    } else {
      var $mem_0 = $144;
      label = 39;
      break;
    }
   case 28:
    var $147 = $bytes >>> 0 > 4294967231;
    if ($147) {
      var $nb_0 = -1;
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $149 = $bytes + 11 | 0;
    var $150 = $149 & -8;
    var $151 = HEAP32[5587600 >> 2];
    var $152 = ($151 | 0) == 0;
    if ($152) {
      var $nb_0 = $150;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $154 = _tmalloc_large($150);
    var $155 = ($154 | 0) == 0;
    if ($155) {
      var $nb_0 = $150;
      label = 31;
      break;
    } else {
      var $mem_0 = $154;
      label = 39;
      break;
    }
   case 31:
    var $nb_0;
    var $156 = HEAP32[5587604 >> 2];
    var $157 = $nb_0 >>> 0 > $156 >>> 0;
    if ($157) {
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $159 = $156 - $nb_0 | 0;
    var $160 = HEAP32[5587616 >> 2];
    var $161 = $159 >>> 0 > 15;
    if ($161) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $163 = $160;
    var $164 = $163 + $nb_0 | 0;
    var $165 = $164;
    HEAP32[5587616 >> 2] = $165;
    HEAP32[5587604 >> 2] = $159;
    var $166 = $159 | 1;
    var $_sum98 = $nb_0 + 4 | 0;
    var $167 = $163 + $_sum98 | 0;
    var $168 = $167;
    HEAP32[$168 >> 2] = $166;
    var $169 = $163 + $156 | 0;
    var $170 = $169;
    HEAP32[$170 >> 2] = $159;
    var $171 = $nb_0 | 3;
    var $172 = $160 + 4 | 0;
    HEAP32[$172 >> 2] = $171;
    label = 35;
    break;
   case 34:
    HEAP32[5587604 >> 2] = 0;
    HEAP32[5587616 >> 2] = 0;
    var $174 = $156 | 3;
    var $175 = $160 + 4 | 0;
    HEAP32[$175 >> 2] = $174;
    var $176 = $160;
    var $_sum97 = $156 + 4 | 0;
    var $177 = $176 + $_sum97 | 0;
    var $178 = $177;
    var $179 = HEAP32[$178 >> 2];
    var $180 = $179 | 1;
    HEAP32[$178 >> 2] = $180;
    label = 35;
    break;
   case 35:
    var $182 = $160 + 8 | 0;
    var $183 = $182;
    var $mem_0 = $183;
    label = 39;
    break;
   case 36:
    var $185 = HEAP32[5587608 >> 2];
    var $186 = $nb_0 >>> 0 < $185 >>> 0;
    if ($186) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $188 = $185 - $nb_0 | 0;
    HEAP32[5587608 >> 2] = $188;
    var $189 = HEAP32[5587620 >> 2];
    var $190 = $189;
    var $191 = $190 + $nb_0 | 0;
    var $192 = $191;
    HEAP32[5587620 >> 2] = $192;
    var $193 = $188 | 1;
    var $_sum = $nb_0 + 4 | 0;
    var $194 = $190 + $_sum | 0;
    var $195 = $194;
    HEAP32[$195 >> 2] = $193;
    var $196 = $nb_0 | 3;
    var $197 = $189 + 4 | 0;
    HEAP32[$197 >> 2] = $196;
    var $198 = $189 + 8 | 0;
    var $199 = $198;
    var $mem_0 = $199;
    label = 39;
    break;
   case 38:
    var $201 = _sys_alloc($nb_0);
    var $mem_0 = $201;
    label = 39;
    break;
   case 39:
    var $mem_0;
    return $mem_0;
  }
}
_malloc["X"] = 1;
function _tmalloc_small($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5587600 >> 2];
    var $2 = -$1 | 0;
    var $3 = $1 & $2;
    var $4 = $3 - 1 | 0;
    var $5 = $4 >>> 12;
    var $6 = $5 & 16;
    var $7 = $4 >>> ($6 >>> 0);
    var $8 = $7 >>> 5;
    var $9 = $8 & 8;
    var $10 = $9 | $6;
    var $11 = $7 >>> ($9 >>> 0);
    var $12 = $11 >>> 2;
    var $13 = $12 & 4;
    var $14 = $10 | $13;
    var $15 = $11 >>> ($13 >>> 0);
    var $16 = $15 >>> 1;
    var $17 = $16 & 2;
    var $18 = $14 | $17;
    var $19 = $15 >>> ($17 >>> 0);
    var $20 = $19 >>> 1;
    var $21 = $20 & 1;
    var $22 = $18 | $21;
    var $23 = $19 >>> ($21 >>> 0);
    var $24 = $22 + $23 | 0;
    var $25 = 5587900 + ($24 << 2) | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26 + 4 | 0;
    var $28 = HEAP32[$27 >> 2];
    var $29 = $28 & -8;
    var $30 = $29 - $nb | 0;
    var $t_0 = $26;
    var $v_0 = $26;
    var $rsize_0 = $30;
    label = 3;
    break;
   case 3:
    var $rsize_0;
    var $v_0;
    var $t_0;
    var $32 = $t_0 + 16 | 0;
    var $33 = HEAP32[$32 >> 2];
    var $34 = ($33 | 0) == 0;
    if ($34) {
      label = 4;
      break;
    } else {
      var $39 = $33;
      label = 5;
      break;
    }
   case 4:
    var $36 = $t_0 + 20 | 0;
    var $37 = HEAP32[$36 >> 2];
    var $38 = ($37 | 0) == 0;
    if ($38) {
      label = 6;
      break;
    } else {
      var $39 = $37;
      label = 5;
      break;
    }
   case 5:
    var $39;
    var $40 = $39 + 4 | 0;
    var $41 = HEAP32[$40 >> 2];
    var $42 = $41 & -8;
    var $43 = $42 - $nb | 0;
    var $44 = $43 >>> 0 < $rsize_0 >>> 0;
    var $_rsize_0 = $44 ? $43 : $rsize_0;
    var $_v_0 = $44 ? $39 : $v_0;
    var $t_0 = $39;
    var $v_0 = $_v_0;
    var $rsize_0 = $_rsize_0;
    label = 3;
    break;
   case 6:
    var $46 = $v_0;
    var $47 = HEAP32[5587612 >> 2];
    var $48 = $46 >>> 0 < $47 >>> 0;
    if ($48) {
      label = 49;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $50 = $46 + $nb | 0;
    var $51 = $50;
    var $52 = $46 >>> 0 < $50 >>> 0;
    if ($52) {
      label = 8;
      break;
    } else {
      label = 49;
      break;
    }
   case 8:
    var $54 = $v_0 + 24 | 0;
    var $55 = HEAP32[$54 >> 2];
    var $56 = $v_0 + 12 | 0;
    var $57 = HEAP32[$56 >> 2];
    var $58 = ($57 | 0) == ($v_0 | 0);
    if ($58) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $60 = $v_0 + 8 | 0;
    var $61 = HEAP32[$60 >> 2];
    var $62 = $61;
    var $63 = $62 >>> 0 < $47 >>> 0;
    if ($63) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $65 = $61 + 12 | 0;
    HEAP32[$65 >> 2] = $57;
    var $66 = $57 + 8 | 0;
    HEAP32[$66 >> 2] = $61;
    var $R_1 = $57;
    label = 19;
    break;
   case 11:
    _abort();
   case 12:
    var $69 = $v_0 + 20 | 0;
    var $70 = HEAP32[$69 >> 2];
    var $71 = ($70 | 0) == 0;
    if ($71) {
      label = 13;
      break;
    } else {
      var $R_0 = $70;
      var $RP_0 = $69;
      label = 14;
      break;
    }
   case 13:
    var $73 = $v_0 + 16 | 0;
    var $74 = HEAP32[$73 >> 2];
    var $75 = ($74 | 0) == 0;
    if ($75) {
      var $R_1 = 0;
      label = 19;
      break;
    } else {
      var $R_0 = $74;
      var $RP_0 = $73;
      label = 14;
      break;
    }
   case 14:
    var $RP_0;
    var $R_0;
    var $76 = $R_0 + 20 | 0;
    var $77 = HEAP32[$76 >> 2];
    var $78 = ($77 | 0) == 0;
    if ($78) {
      label = 15;
      break;
    } else {
      var $R_0 = $77;
      var $RP_0 = $76;
      label = 14;
      break;
    }
   case 15:
    var $80 = $R_0 + 16 | 0;
    var $81 = HEAP32[$80 >> 2];
    var $82 = ($81 | 0) == 0;
    if ($82) {
      label = 16;
      break;
    } else {
      var $R_0 = $81;
      var $RP_0 = $80;
      label = 14;
      break;
    }
   case 16:
    var $84 = $RP_0;
    var $85 = $84 >>> 0 < $47 >>> 0;
    if ($85) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $R_1;
    var $89 = ($55 | 0) == 0;
    if ($89) {
      label = 39;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $91 = $v_0 + 28 | 0;
    var $92 = HEAP32[$91 >> 2];
    var $93 = 5587900 + ($92 << 2) | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = ($v_0 | 0) == ($94 | 0);
    if ($95) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    HEAP32[$93 >> 2] = $R_1;
    var $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 22:
    var $97 = HEAP32[$91 >> 2];
    var $98 = 1 << $97;
    var $99 = $98 ^ -1;
    var $100 = HEAP32[5587600 >> 2];
    var $101 = $100 & $99;
    HEAP32[5587600 >> 2] = $101;
    label = 39;
    break;
   case 23:
    var $103 = $55;
    var $104 = HEAP32[5587612 >> 2];
    var $105 = $103 >>> 0 < $104 >>> 0;
    if ($105) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $107 = $55 + 16 | 0;
    var $108 = HEAP32[$107 >> 2];
    var $109 = ($108 | 0) == ($v_0 | 0);
    if ($109) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[$107 >> 2] = $R_1;
    label = 28;
    break;
   case 26:
    var $112 = $55 + 20 | 0;
    HEAP32[$112 >> 2] = $R_1;
    label = 28;
    break;
   case 27:
    _abort();
   case 28:
    var $115 = ($R_1 | 0) == 0;
    if ($115) {
      label = 39;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $117 = $R_1;
    var $118 = HEAP32[5587612 >> 2];
    var $119 = $117 >>> 0 < $118 >>> 0;
    if ($119) {
      label = 38;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $121 = $R_1 + 24 | 0;
    HEAP32[$121 >> 2] = $55;
    var $122 = $v_0 + 16 | 0;
    var $123 = HEAP32[$122 >> 2];
    var $124 = ($123 | 0) == 0;
    if ($124) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $126 = $123;
    var $127 = HEAP32[5587612 >> 2];
    var $128 = $126 >>> 0 < $127 >>> 0;
    if ($128) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $130 = $R_1 + 16 | 0;
    HEAP32[$130 >> 2] = $123;
    var $131 = $123 + 24 | 0;
    HEAP32[$131 >> 2] = $R_1;
    label = 34;
    break;
   case 33:
    _abort();
   case 34:
    var $134 = $v_0 + 20 | 0;
    var $135 = HEAP32[$134 >> 2];
    var $136 = ($135 | 0) == 0;
    if ($136) {
      label = 39;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $138 = $135;
    var $139 = HEAP32[5587612 >> 2];
    var $140 = $138 >>> 0 < $139 >>> 0;
    if ($140) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $142 = $R_1 + 20 | 0;
    HEAP32[$142 >> 2] = $135;
    var $143 = $135 + 24 | 0;
    HEAP32[$143 >> 2] = $R_1;
    label = 39;
    break;
   case 37:
    _abort();
   case 38:
    _abort();
   case 39:
    var $147 = $rsize_0 >>> 0 < 16;
    if ($147) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $149 = $rsize_0 + $nb | 0;
    var $150 = $149 | 3;
    var $151 = $v_0 + 4 | 0;
    HEAP32[$151 >> 2] = $150;
    var $_sum4 = $149 + 4 | 0;
    var $152 = $46 + $_sum4 | 0;
    var $153 = $152;
    var $154 = HEAP32[$153 >> 2];
    var $155 = $154 | 1;
    HEAP32[$153 >> 2] = $155;
    label = 48;
    break;
   case 41:
    var $157 = $nb | 3;
    var $158 = $v_0 + 4 | 0;
    HEAP32[$158 >> 2] = $157;
    var $159 = $rsize_0 | 1;
    var $_sum = $nb + 4 | 0;
    var $160 = $46 + $_sum | 0;
    var $161 = $160;
    HEAP32[$161 >> 2] = $159;
    var $_sum1 = $rsize_0 + $nb | 0;
    var $162 = $46 + $_sum1 | 0;
    var $163 = $162;
    HEAP32[$163 >> 2] = $rsize_0;
    var $164 = HEAP32[5587604 >> 2];
    var $165 = ($164 | 0) == 0;
    if ($165) {
      label = 47;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $167 = HEAP32[5587616 >> 2];
    var $168 = $164 >>> 3;
    var $169 = $168 << 1;
    var $170 = 5587636 + ($169 << 2) | 0;
    var $171 = $170;
    var $172 = HEAP32[5587596 >> 2];
    var $173 = 1 << $168;
    var $174 = $172 & $173;
    var $175 = ($174 | 0) == 0;
    if ($175) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $177 = $172 | $173;
    HEAP32[5587596 >> 2] = $177;
    var $_sum2_pre = $169 + 2 | 0;
    var $_pre = 5587636 + ($_sum2_pre << 2) | 0;
    var $F1_0 = $171;
    var $_pre_phi = $_pre;
    label = 46;
    break;
   case 44:
    var $_sum3 = $169 + 2 | 0;
    var $179 = 5587636 + ($_sum3 << 2) | 0;
    var $180 = HEAP32[$179 >> 2];
    var $181 = $180;
    var $182 = HEAP32[5587612 >> 2];
    var $183 = $181 >>> 0 < $182 >>> 0;
    if ($183) {
      label = 45;
      break;
    } else {
      var $F1_0 = $180;
      var $_pre_phi = $179;
      label = 46;
      break;
    }
   case 45:
    _abort();
   case 46:
    var $_pre_phi;
    var $F1_0;
    HEAP32[$_pre_phi >> 2] = $167;
    var $186 = $F1_0 + 12 | 0;
    HEAP32[$186 >> 2] = $167;
    var $187 = $167 + 8 | 0;
    HEAP32[$187 >> 2] = $F1_0;
    var $188 = $167 + 12 | 0;
    HEAP32[$188 >> 2] = $171;
    label = 47;
    break;
   case 47:
    HEAP32[5587604 >> 2] = $rsize_0;
    HEAP32[5587616 >> 2] = $51;
    label = 48;
    break;
   case 48:
    var $191 = $v_0 + 8 | 0;
    var $192 = $191;
    return $192;
   case 49:
    _abort();
  }
}
_tmalloc_small["X"] = 1;
function _sys_alloc($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263284 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $5 = HEAP32[5588036 >> 2];
    var $6 = $5 & 4;
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      var $tsize_125 = 0;
      label = 24;
      break;
    }
   case 5:
    var $9 = HEAP32[5587620 >> 2];
    var $10 = ($9 | 0) == 0;
    if ($10) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $12 = $9;
    var $13 = _segment_holding($12);
    var $14 = ($13 | 0) == 0;
    if ($14) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $15 = _sbrk(0);
    var $16 = ($15 | 0) == -1;
    if ($16) {
      var $tsize_0121720_ph = 0;
      label = 22;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $18 = HEAP32[5263292 >> 2];
    var $19 = $nb + 47 | 0;
    var $20 = $19 + $18 | 0;
    var $21 = -$18 | 0;
    var $22 = $20 & $21;
    var $23 = $15;
    var $24 = HEAP32[5263288 >> 2];
    var $25 = $24 - 1 | 0;
    var $26 = $25 & $23;
    var $27 = ($26 | 0) == 0;
    if ($27) {
      var $asize_0 = $22;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $29 = $25 + $23 | 0;
    var $30 = -$24 | 0;
    var $31 = $29 & $30;
    var $32 = $22 - $23 | 0;
    var $33 = $32 + $31 | 0;
    var $asize_0 = $33;
    label = 10;
    break;
   case 10:
    var $asize_0;
    var $35 = $asize_0 >>> 0 < 2147483647;
    if ($35) {
      label = 11;
      break;
    } else {
      var $tsize_0121720_ph = 0;
      label = 22;
      break;
    }
   case 11:
    var $37 = _sbrk($asize_0);
    var $38 = ($37 | 0) == ($15 | 0);
    var $asize_0_ = $38 ? $asize_0 : 0;
    var $_ = $38 ? $15 : -1;
    var $tbase_0 = $_;
    var $tsize_0 = $asize_0_;
    var $br_0 = $37;
    var $asize_1 = $asize_0;
    label = 14;
    break;
   case 12:
    var $40 = HEAP32[5587608 >> 2];
    var $41 = HEAP32[5263292 >> 2];
    var $42 = $nb + 47 | 0;
    var $43 = $42 - $40 | 0;
    var $44 = $43 + $41 | 0;
    var $45 = -$41 | 0;
    var $46 = $44 & $45;
    var $47 = $46 >>> 0 < 2147483647;
    if ($47) {
      label = 13;
      break;
    } else {
      var $tsize_0121720_ph = 0;
      label = 22;
      break;
    }
   case 13:
    var $49 = _sbrk($46);
    var $50 = $13 | 0;
    var $51 = HEAP32[$50 >> 2];
    var $52 = $13 + 4 | 0;
    var $53 = HEAP32[$52 >> 2];
    var $54 = $51 + $53 | 0;
    var $55 = ($49 | 0) == ($54 | 0);
    var $_1 = $55 ? $46 : 0;
    var $_2 = $55 ? $49 : -1;
    var $tbase_0 = $_2;
    var $tsize_0 = $_1;
    var $br_0 = $49;
    var $asize_1 = $46;
    label = 14;
    break;
   case 14:
    var $asize_1;
    var $br_0;
    var $tsize_0;
    var $tbase_0;
    var $57 = -$asize_1 | 0;
    var $58 = ($tbase_0 | 0) == -1;
    if ($58) {
      label = 15;
      break;
    } else {
      var $tsize_229 = $tsize_0;
      var $tbase_230 = $tbase_0;
      label = 27;
      break;
    }
   case 15:
    var $60 = ($br_0 | 0) != -1;
    var $61 = $asize_1 >>> 0 < 2147483647;
    var $or_cond = $60 & $61;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 16:
    var $63 = $nb + 48 | 0;
    var $64 = $asize_1 >>> 0 < $63 >>> 0;
    if ($64) {
      label = 17;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 17:
    var $66 = HEAP32[5263292 >> 2];
    var $67 = $nb + 47 | 0;
    var $68 = $67 - $asize_1 | 0;
    var $69 = $68 + $66 | 0;
    var $70 = -$66 | 0;
    var $71 = $69 & $70;
    var $72 = $71 >>> 0 < 2147483647;
    if ($72) {
      label = 18;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 18:
    var $74 = _sbrk($71);
    var $75 = ($74 | 0) == -1;
    if ($75) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $77 = $71 + $asize_1 | 0;
    var $asize_2 = $77;
    label = 21;
    break;
   case 20:
    var $79 = _sbrk($57);
    var $tsize_0121720_ph = $tsize_0;
    label = 22;
    break;
   case 21:
    var $asize_2;
    var $81 = ($br_0 | 0) == -1;
    if ($81) {
      label = 23;
      break;
    } else {
      var $tsize_229 = $asize_2;
      var $tbase_230 = $br_0;
      label = 27;
      break;
    }
   case 22:
    var $tsize_0121720_ph;
    var $82 = HEAP32[5588036 >> 2];
    var $83 = $82 | 4;
    HEAP32[5588036 >> 2] = $83;
    var $tsize_125 = $tsize_0121720_ph;
    label = 24;
    break;
   case 23:
    var $84 = HEAP32[5588036 >> 2];
    var $85 = $84 | 4;
    HEAP32[5588036 >> 2] = $85;
    var $tsize_125 = $tsize_0;
    label = 24;
    break;
   case 24:
    var $tsize_125;
    var $86 = HEAP32[5263292 >> 2];
    var $87 = $nb + 47 | 0;
    var $88 = $87 + $86 | 0;
    var $89 = -$86 | 0;
    var $90 = $88 & $89;
    var $91 = $90 >>> 0 < 2147483647;
    if ($91) {
      label = 25;
      break;
    } else {
      label = 48;
      break;
    }
   case 25:
    var $93 = _sbrk($90);
    var $94 = _sbrk(0);
    var $notlhs = ($93 | 0) != -1;
    var $notrhs = ($94 | 0) != -1;
    var $or_cond3_not = $notrhs & $notlhs;
    var $95 = $93 >>> 0 < $94 >>> 0;
    var $or_cond4 = $or_cond3_not & $95;
    if ($or_cond4) {
      label = 26;
      break;
    } else {
      label = 48;
      break;
    }
   case 26:
    var $96 = $94;
    var $97 = $93;
    var $98 = $96 - $97 | 0;
    var $99 = $nb + 40 | 0;
    var $100 = $98 >>> 0 > $99 >>> 0;
    var $_tsize_1 = $100 ? $98 : $tsize_125;
    var $_tbase_1 = $100 ? $93 : -1;
    var $101 = ($_tbase_1 | 0) == -1;
    if ($101) {
      label = 48;
      break;
    } else {
      var $tsize_229 = $_tsize_1;
      var $tbase_230 = $_tbase_1;
      label = 27;
      break;
    }
   case 27:
    var $tbase_230;
    var $tsize_229;
    var $102 = HEAP32[5588028 >> 2];
    var $103 = $102 + $tsize_229 | 0;
    HEAP32[5588028 >> 2] = $103;
    var $104 = HEAP32[5588032 >> 2];
    var $105 = $103 >>> 0 > $104 >>> 0;
    if ($105) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[5588032 >> 2] = $103;
    label = 29;
    break;
   case 29:
    var $108 = HEAP32[5587620 >> 2];
    var $109 = ($108 | 0) == 0;
    if ($109) {
      label = 30;
      break;
    } else {
      var $sp_042 = 5588040;
      label = 33;
      break;
    }
   case 30:
    var $111 = HEAP32[5587612 >> 2];
    var $112 = ($111 | 0) == 0;
    var $113 = $tbase_230 >>> 0 < $111 >>> 0;
    var $or_cond5 = $112 | $113;
    if ($or_cond5) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    HEAP32[5587612 >> 2] = $tbase_230;
    label = 32;
    break;
   case 32:
    HEAP32[5588040 >> 2] = $tbase_230;
    HEAP32[5588044 >> 2] = $tsize_229;
    HEAP32[5588052 >> 2] = 0;
    var $116 = HEAP32[5263284 >> 2];
    HEAP32[5587632 >> 2] = $116;
    HEAP32[5587628 >> 2] = -1;
    _init_bins();
    var $117 = $tbase_230;
    var $118 = $tsize_229 - 40 | 0;
    _init_top($117, $118);
    label = 46;
    break;
   case 33:
    var $sp_042;
    var $119 = $sp_042 | 0;
    var $120 = HEAP32[$119 >> 2];
    var $121 = $sp_042 + 4 | 0;
    var $122 = HEAP32[$121 >> 2];
    var $123 = $120 + $122 | 0;
    var $124 = ($tbase_230 | 0) == ($123 | 0);
    if ($124) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $126 = $sp_042 + 8 | 0;
    var $127 = HEAP32[$126 >> 2];
    var $128 = ($127 | 0) == 0;
    if ($128) {
      label = 38;
      break;
    } else {
      var $sp_042 = $127;
      label = 33;
      break;
    }
   case 35:
    var $129 = $sp_042 + 12 | 0;
    var $130 = HEAP32[$129 >> 2];
    var $131 = $130 & 8;
    var $132 = ($131 | 0) == 0;
    if ($132) {
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 36:
    var $134 = $108;
    var $135 = $134 >>> 0 >= $120 >>> 0;
    var $136 = $134 >>> 0 < $tbase_230 >>> 0;
    var $or_cond31 = $135 & $136;
    if ($or_cond31) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $138 = $122 + $tsize_229 | 0;
    HEAP32[$121 >> 2] = $138;
    var $139 = HEAP32[5587620 >> 2];
    var $140 = HEAP32[5587608 >> 2];
    var $141 = $140 + $tsize_229 | 0;
    _init_top($139, $141);
    label = 46;
    break;
   case 38:
    var $142 = HEAP32[5587612 >> 2];
    var $143 = $tbase_230 >>> 0 < $142 >>> 0;
    if ($143) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[5587612 >> 2] = $tbase_230;
    label = 40;
    break;
   case 40:
    var $145 = $tbase_230 + $tsize_229 | 0;
    var $sp_135 = 5588040;
    label = 41;
    break;
   case 41:
    var $sp_135;
    var $147 = $sp_135 | 0;
    var $148 = HEAP32[$147 >> 2];
    var $149 = ($148 | 0) == ($145 | 0);
    if ($149) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $151 = $sp_135 + 8 | 0;
    var $152 = HEAP32[$151 >> 2];
    var $153 = ($152 | 0) == 0;
    if ($153) {
      label = 45;
      break;
    } else {
      var $sp_135 = $152;
      label = 41;
      break;
    }
   case 43:
    var $154 = $sp_135 + 12 | 0;
    var $155 = HEAP32[$154 >> 2];
    var $156 = $155 & 8;
    var $157 = ($156 | 0) == 0;
    if ($157) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    HEAP32[$147 >> 2] = $tbase_230;
    var $159 = $sp_135 + 4 | 0;
    var $160 = HEAP32[$159 >> 2];
    var $161 = $160 + $tsize_229 | 0;
    HEAP32[$159 >> 2] = $161;
    var $162 = _prepend_alloc($tbase_230, $145, $nb);
    var $_0 = $162;
    label = 49;
    break;
   case 45:
    _add_segment($tbase_230, $tsize_229);
    label = 46;
    break;
   case 46:
    var $164 = HEAP32[5587608 >> 2];
    var $165 = $164 >>> 0 > $nb >>> 0;
    if ($165) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $167 = $164 - $nb | 0;
    HEAP32[5587608 >> 2] = $167;
    var $168 = HEAP32[5587620 >> 2];
    var $169 = $168;
    var $170 = $169 + $nb | 0;
    var $171 = $170;
    HEAP32[5587620 >> 2] = $171;
    var $172 = $167 | 1;
    var $_sum = $nb + 4 | 0;
    var $173 = $169 + $_sum | 0;
    var $174 = $173;
    HEAP32[$174 >> 2] = $172;
    var $175 = $nb | 3;
    var $176 = $168 + 4 | 0;
    HEAP32[$176 >> 2] = $175;
    var $177 = $168 + 8 | 0;
    var $178 = $177;
    var $_0 = $178;
    label = 49;
    break;
   case 48:
    var $179 = ___errno_location();
    HEAP32[$179 >> 2] = 12;
    var $_0 = 0;
    label = 49;
    break;
   case 49:
    var $_0;
    return $_0;
  }
}
_sys_alloc["X"] = 1;
function _tmalloc_large($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = -$nb | 0;
    var $2 = $nb >>> 8;
    var $3 = ($2 | 0) == 0;
    if ($3) {
      var $idx_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $nb >>> 0 > 16777215;
    if ($5) {
      var $idx_0 = 31;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $7 = $2 + 1048320 | 0;
    var $8 = $7 >>> 16;
    var $9 = $8 & 8;
    var $10 = $2 << $9;
    var $11 = $10 + 520192 | 0;
    var $12 = $11 >>> 16;
    var $13 = $12 & 4;
    var $14 = $13 | $9;
    var $15 = $10 << $13;
    var $16 = $15 + 245760 | 0;
    var $17 = $16 >>> 16;
    var $18 = $17 & 2;
    var $19 = $14 | $18;
    var $20 = 14 - $19 | 0;
    var $21 = $15 << $18;
    var $22 = $21 >>> 15;
    var $23 = $20 + $22 | 0;
    var $24 = $23 << 1;
    var $25 = $23 + 7 | 0;
    var $26 = $nb >>> ($25 >>> 0);
    var $27 = $26 & 1;
    var $28 = $27 | $24;
    var $idx_0 = $28;
    label = 5;
    break;
   case 5:
    var $idx_0;
    var $30 = 5587900 + ($idx_0 << 2) | 0;
    var $31 = HEAP32[$30 >> 2];
    var $32 = ($31 | 0) == 0;
    if ($32) {
      var $v_2 = 0;
      var $rsize_2 = $1;
      var $t_1 = 0;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $34 = ($idx_0 | 0) == 31;
    if ($34) {
      var $39 = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $36 = $idx_0 >>> 1;
    var $37 = 25 - $36 | 0;
    var $39 = $37;
    label = 8;
    break;
   case 8:
    var $39;
    var $40 = $nb << $39;
    var $v_0 = 0;
    var $rsize_0 = $1;
    var $t_0 = $31;
    var $sizebits_0 = $40;
    var $rst_0 = 0;
    label = 9;
    break;
   case 9:
    var $rst_0;
    var $sizebits_0;
    var $t_0;
    var $rsize_0;
    var $v_0;
    var $42 = $t_0 + 4 | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $43 & -8;
    var $45 = $44 - $nb | 0;
    var $46 = $45 >>> 0 < $rsize_0 >>> 0;
    if ($46) {
      label = 10;
      break;
    } else {
      var $v_1 = $v_0;
      var $rsize_1 = $rsize_0;
      label = 11;
      break;
    }
   case 10:
    var $48 = ($44 | 0) == ($nb | 0);
    if ($48) {
      var $v_2 = $t_0;
      var $rsize_2 = $45;
      var $t_1 = $t_0;
      label = 12;
      break;
    } else {
      var $v_1 = $t_0;
      var $rsize_1 = $45;
      label = 11;
      break;
    }
   case 11:
    var $rsize_1;
    var $v_1;
    var $50 = $t_0 + 20 | 0;
    var $51 = HEAP32[$50 >> 2];
    var $52 = $sizebits_0 >>> 31;
    var $53 = $t_0 + 16 + ($52 << 2) | 0;
    var $54 = HEAP32[$53 >> 2];
    var $55 = ($51 | 0) == 0;
    var $56 = ($51 | 0) == ($54 | 0);
    var $or_cond = $55 | $56;
    var $rst_1 = $or_cond ? $rst_0 : $51;
    var $57 = ($54 | 0) == 0;
    var $58 = $sizebits_0 << 1;
    if ($57) {
      var $v_2 = $v_1;
      var $rsize_2 = $rsize_1;
      var $t_1 = $rst_1;
      label = 12;
      break;
    } else {
      var $v_0 = $v_1;
      var $rsize_0 = $rsize_1;
      var $t_0 = $54;
      var $sizebits_0 = $58;
      var $rst_0 = $rst_1;
      label = 9;
      break;
    }
   case 12:
    var $t_1;
    var $rsize_2;
    var $v_2;
    var $59 = ($t_1 | 0) == 0;
    var $60 = ($v_2 | 0) == 0;
    var $or_cond19 = $59 & $60;
    if ($or_cond19) {
      label = 13;
      break;
    } else {
      var $t_2_ph = $t_1;
      label = 15;
      break;
    }
   case 13:
    var $62 = 2 << $idx_0;
    var $63 = -$62 | 0;
    var $64 = $62 | $63;
    var $65 = HEAP32[5587600 >> 2];
    var $66 = $65 & $64;
    var $67 = ($66 | 0) == 0;
    if ($67) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $69 = -$66 | 0;
    var $70 = $66 & $69;
    var $71 = $70 - 1 | 0;
    var $72 = $71 >>> 12;
    var $73 = $72 & 16;
    var $74 = $71 >>> ($73 >>> 0);
    var $75 = $74 >>> 5;
    var $76 = $75 & 8;
    var $77 = $76 | $73;
    var $78 = $74 >>> ($76 >>> 0);
    var $79 = $78 >>> 2;
    var $80 = $79 & 4;
    var $81 = $77 | $80;
    var $82 = $78 >>> ($80 >>> 0);
    var $83 = $82 >>> 1;
    var $84 = $83 & 2;
    var $85 = $81 | $84;
    var $86 = $82 >>> ($84 >>> 0);
    var $87 = $86 >>> 1;
    var $88 = $87 & 1;
    var $89 = $85 | $88;
    var $90 = $86 >>> ($88 >>> 0);
    var $91 = $89 + $90 | 0;
    var $92 = 5587900 + ($91 << 2) | 0;
    var $93 = HEAP32[$92 >> 2];
    var $t_2_ph = $93;
    label = 15;
    break;
   case 15:
    var $t_2_ph;
    var $94 = ($t_2_ph | 0) == 0;
    if ($94) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      var $t_224 = $t_2_ph;
      var $rsize_325 = $rsize_2;
      var $v_326 = $v_2;
      label = 16;
      break;
    }
   case 16:
    var $v_326;
    var $rsize_325;
    var $t_224;
    var $95 = $t_224 + 4 | 0;
    var $96 = HEAP32[$95 >> 2];
    var $97 = $96 & -8;
    var $98 = $97 - $nb | 0;
    var $99 = $98 >>> 0 < $rsize_325 >>> 0;
    var $_rsize_3 = $99 ? $98 : $rsize_325;
    var $t_2_v_3 = $99 ? $t_224 : $v_326;
    var $100 = $t_224 + 16 | 0;
    var $101 = HEAP32[$100 >> 2];
    var $102 = ($101 | 0) == 0;
    if ($102) {
      label = 17;
      break;
    } else {
      var $t_224 = $101;
      var $rsize_325 = $_rsize_3;
      var $v_326 = $t_2_v_3;
      label = 16;
      break;
    }
   case 17:
    var $103 = $t_224 + 20 | 0;
    var $104 = HEAP32[$103 >> 2];
    var $105 = ($104 | 0) == 0;
    if ($105) {
      var $rsize_3_lcssa = $_rsize_3;
      var $v_3_lcssa = $t_2_v_3;
      label = 18;
      break;
    } else {
      var $t_224 = $104;
      var $rsize_325 = $_rsize_3;
      var $v_326 = $t_2_v_3;
      label = 16;
      break;
    }
   case 18:
    var $v_3_lcssa;
    var $rsize_3_lcssa;
    var $106 = ($v_3_lcssa | 0) == 0;
    if ($106) {
      var $_0 = 0;
      label = 80;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $108 = HEAP32[5587604 >> 2];
    var $109 = $108 - $nb | 0;
    var $110 = $rsize_3_lcssa >>> 0 < $109 >>> 0;
    if ($110) {
      label = 20;
      break;
    } else {
      var $_0 = 0;
      label = 80;
      break;
    }
   case 20:
    var $112 = $v_3_lcssa;
    var $113 = HEAP32[5587612 >> 2];
    var $114 = $112 >>> 0 < $113 >>> 0;
    if ($114) {
      label = 79;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $116 = $112 + $nb | 0;
    var $117 = $116;
    var $118 = $112 >>> 0 < $116 >>> 0;
    if ($118) {
      label = 22;
      break;
    } else {
      label = 79;
      break;
    }
   case 22:
    var $120 = $v_3_lcssa + 24 | 0;
    var $121 = HEAP32[$120 >> 2];
    var $122 = $v_3_lcssa + 12 | 0;
    var $123 = HEAP32[$122 >> 2];
    var $124 = ($123 | 0) == ($v_3_lcssa | 0);
    if ($124) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $126 = $v_3_lcssa + 8 | 0;
    var $127 = HEAP32[$126 >> 2];
    var $128 = $127;
    var $129 = $128 >>> 0 < $113 >>> 0;
    if ($129) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $131 = $127 + 12 | 0;
    HEAP32[$131 >> 2] = $123;
    var $132 = $123 + 8 | 0;
    HEAP32[$132 >> 2] = $127;
    var $R_1 = $123;
    label = 33;
    break;
   case 25:
    _abort();
   case 26:
    var $135 = $v_3_lcssa + 20 | 0;
    var $136 = HEAP32[$135 >> 2];
    var $137 = ($136 | 0) == 0;
    if ($137) {
      label = 27;
      break;
    } else {
      var $R_0 = $136;
      var $RP_0 = $135;
      label = 28;
      break;
    }
   case 27:
    var $139 = $v_3_lcssa + 16 | 0;
    var $140 = HEAP32[$139 >> 2];
    var $141 = ($140 | 0) == 0;
    if ($141) {
      var $R_1 = 0;
      label = 33;
      break;
    } else {
      var $R_0 = $140;
      var $RP_0 = $139;
      label = 28;
      break;
    }
   case 28:
    var $RP_0;
    var $R_0;
    var $142 = $R_0 + 20 | 0;
    var $143 = HEAP32[$142 >> 2];
    var $144 = ($143 | 0) == 0;
    if ($144) {
      label = 29;
      break;
    } else {
      var $R_0 = $143;
      var $RP_0 = $142;
      label = 28;
      break;
    }
   case 29:
    var $146 = $R_0 + 16 | 0;
    var $147 = HEAP32[$146 >> 2];
    var $148 = ($147 | 0) == 0;
    if ($148) {
      label = 30;
      break;
    } else {
      var $R_0 = $147;
      var $RP_0 = $146;
      label = 28;
      break;
    }
   case 30:
    var $150 = $RP_0;
    var $151 = $150 >>> 0 < $113 >>> 0;
    if ($151) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 33;
    break;
   case 32:
    _abort();
   case 33:
    var $R_1;
    var $155 = ($121 | 0) == 0;
    if ($155) {
      label = 53;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $157 = $v_3_lcssa + 28 | 0;
    var $158 = HEAP32[$157 >> 2];
    var $159 = 5587900 + ($158 << 2) | 0;
    var $160 = HEAP32[$159 >> 2];
    var $161 = ($v_3_lcssa | 0) == ($160 | 0);
    if ($161) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    HEAP32[$159 >> 2] = $R_1;
    var $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 36;
      break;
    } else {
      label = 43;
      break;
    }
   case 36:
    var $163 = HEAP32[$157 >> 2];
    var $164 = 1 << $163;
    var $165 = $164 ^ -1;
    var $166 = HEAP32[5587600 >> 2];
    var $167 = $166 & $165;
    HEAP32[5587600 >> 2] = $167;
    label = 53;
    break;
   case 37:
    var $169 = $121;
    var $170 = HEAP32[5587612 >> 2];
    var $171 = $169 >>> 0 < $170 >>> 0;
    if ($171) {
      label = 41;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $173 = $121 + 16 | 0;
    var $174 = HEAP32[$173 >> 2];
    var $175 = ($174 | 0) == ($v_3_lcssa | 0);
    if ($175) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[$173 >> 2] = $R_1;
    label = 42;
    break;
   case 40:
    var $178 = $121 + 20 | 0;
    HEAP32[$178 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $181 = ($R_1 | 0) == 0;
    if ($181) {
      label = 53;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $183 = $R_1;
    var $184 = HEAP32[5587612 >> 2];
    var $185 = $183 >>> 0 < $184 >>> 0;
    if ($185) {
      label = 52;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $187 = $R_1 + 24 | 0;
    HEAP32[$187 >> 2] = $121;
    var $188 = $v_3_lcssa + 16 | 0;
    var $189 = HEAP32[$188 >> 2];
    var $190 = ($189 | 0) == 0;
    if ($190) {
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $192 = $189;
    var $193 = HEAP32[5587612 >> 2];
    var $194 = $192 >>> 0 < $193 >>> 0;
    if ($194) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $196 = $R_1 + 16 | 0;
    HEAP32[$196 >> 2] = $189;
    var $197 = $189 + 24 | 0;
    HEAP32[$197 >> 2] = $R_1;
    label = 48;
    break;
   case 47:
    _abort();
   case 48:
    var $200 = $v_3_lcssa + 20 | 0;
    var $201 = HEAP32[$200 >> 2];
    var $202 = ($201 | 0) == 0;
    if ($202) {
      label = 53;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $204 = $201;
    var $205 = HEAP32[5587612 >> 2];
    var $206 = $204 >>> 0 < $205 >>> 0;
    if ($206) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $208 = $R_1 + 20 | 0;
    HEAP32[$208 >> 2] = $201;
    var $209 = $201 + 24 | 0;
    HEAP32[$209 >> 2] = $R_1;
    label = 53;
    break;
   case 51:
    _abort();
   case 52:
    _abort();
   case 53:
    var $213 = $rsize_3_lcssa >>> 0 < 16;
    if ($213) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $215 = $rsize_3_lcssa + $nb | 0;
    var $216 = $215 | 3;
    var $217 = $v_3_lcssa + 4 | 0;
    HEAP32[$217 >> 2] = $216;
    var $_sum18 = $215 + 4 | 0;
    var $218 = $112 + $_sum18 | 0;
    var $219 = $218;
    var $220 = HEAP32[$219 >> 2];
    var $221 = $220 | 1;
    HEAP32[$219 >> 2] = $221;
    label = 78;
    break;
   case 55:
    var $223 = $nb | 3;
    var $224 = $v_3_lcssa + 4 | 0;
    HEAP32[$224 >> 2] = $223;
    var $225 = $rsize_3_lcssa | 1;
    var $_sum = $nb + 4 | 0;
    var $226 = $112 + $_sum | 0;
    var $227 = $226;
    HEAP32[$227 >> 2] = $225;
    var $_sum1 = $rsize_3_lcssa + $nb | 0;
    var $228 = $112 + $_sum1 | 0;
    var $229 = $228;
    HEAP32[$229 >> 2] = $rsize_3_lcssa;
    var $230 = $rsize_3_lcssa >>> 3;
    var $231 = $rsize_3_lcssa >>> 0 < 256;
    if ($231) {
      label = 56;
      break;
    } else {
      label = 61;
      break;
    }
   case 56:
    var $233 = $230 << 1;
    var $234 = 5587636 + ($233 << 2) | 0;
    var $235 = $234;
    var $236 = HEAP32[5587596 >> 2];
    var $237 = 1 << $230;
    var $238 = $236 & $237;
    var $239 = ($238 | 0) == 0;
    if ($239) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    var $241 = $236 | $237;
    HEAP32[5587596 >> 2] = $241;
    var $_sum14_pre = $233 + 2 | 0;
    var $_pre = 5587636 + ($_sum14_pre << 2) | 0;
    var $F5_0 = $235;
    var $_pre_phi = $_pre;
    label = 60;
    break;
   case 58:
    var $_sum17 = $233 + 2 | 0;
    var $243 = 5587636 + ($_sum17 << 2) | 0;
    var $244 = HEAP32[$243 >> 2];
    var $245 = $244;
    var $246 = HEAP32[5587612 >> 2];
    var $247 = $245 >>> 0 < $246 >>> 0;
    if ($247) {
      label = 59;
      break;
    } else {
      var $F5_0 = $244;
      var $_pre_phi = $243;
      label = 60;
      break;
    }
   case 59:
    _abort();
   case 60:
    var $_pre_phi;
    var $F5_0;
    HEAP32[$_pre_phi >> 2] = $117;
    var $250 = $F5_0 + 12 | 0;
    HEAP32[$250 >> 2] = $117;
    var $_sum15 = $nb + 8 | 0;
    var $251 = $112 + $_sum15 | 0;
    var $252 = $251;
    HEAP32[$252 >> 2] = $F5_0;
    var $_sum16 = $nb + 12 | 0;
    var $253 = $112 + $_sum16 | 0;
    var $254 = $253;
    HEAP32[$254 >> 2] = $235;
    label = 78;
    break;
   case 61:
    var $256 = $116;
    var $257 = $rsize_3_lcssa >>> 8;
    var $258 = ($257 | 0) == 0;
    if ($258) {
      var $I7_0 = 0;
      label = 64;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $260 = $rsize_3_lcssa >>> 0 > 16777215;
    if ($260) {
      var $I7_0 = 31;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $262 = $257 + 1048320 | 0;
    var $263 = $262 >>> 16;
    var $264 = $263 & 8;
    var $265 = $257 << $264;
    var $266 = $265 + 520192 | 0;
    var $267 = $266 >>> 16;
    var $268 = $267 & 4;
    var $269 = $268 | $264;
    var $270 = $265 << $268;
    var $271 = $270 + 245760 | 0;
    var $272 = $271 >>> 16;
    var $273 = $272 & 2;
    var $274 = $269 | $273;
    var $275 = 14 - $274 | 0;
    var $276 = $270 << $273;
    var $277 = $276 >>> 15;
    var $278 = $275 + $277 | 0;
    var $279 = $278 << 1;
    var $280 = $278 + 7 | 0;
    var $281 = $rsize_3_lcssa >>> ($280 >>> 0);
    var $282 = $281 & 1;
    var $283 = $282 | $279;
    var $I7_0 = $283;
    label = 64;
    break;
   case 64:
    var $I7_0;
    var $285 = 5587900 + ($I7_0 << 2) | 0;
    var $_sum2 = $nb + 28 | 0;
    var $286 = $112 + $_sum2 | 0;
    var $287 = $286;
    HEAP32[$287 >> 2] = $I7_0;
    var $_sum3 = $nb + 16 | 0;
    var $288 = $112 + $_sum3 | 0;
    var $_sum4 = $nb + 20 | 0;
    var $289 = $112 + $_sum4 | 0;
    var $290 = $289;
    HEAP32[$290 >> 2] = 0;
    var $291 = $288;
    HEAP32[$291 >> 2] = 0;
    var $292 = HEAP32[5587600 >> 2];
    var $293 = 1 << $I7_0;
    var $294 = $292 & $293;
    var $295 = ($294 | 0) == 0;
    if ($295) {
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 65:
    var $297 = $292 | $293;
    HEAP32[5587600 >> 2] = $297;
    HEAP32[$285 >> 2] = $256;
    var $298 = $285;
    var $_sum5 = $nb + 24 | 0;
    var $299 = $112 + $_sum5 | 0;
    var $300 = $299;
    HEAP32[$300 >> 2] = $298;
    var $_sum6 = $nb + 12 | 0;
    var $301 = $112 + $_sum6 | 0;
    var $302 = $301;
    HEAP32[$302 >> 2] = $256;
    var $_sum7 = $nb + 8 | 0;
    var $303 = $112 + $_sum7 | 0;
    var $304 = $303;
    HEAP32[$304 >> 2] = $256;
    label = 78;
    break;
   case 66:
    var $306 = HEAP32[$285 >> 2];
    var $307 = ($I7_0 | 0) == 31;
    if ($307) {
      var $312 = 0;
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $309 = $I7_0 >>> 1;
    var $310 = 25 - $309 | 0;
    var $312 = $310;
    label = 68;
    break;
   case 68:
    var $312;
    var $313 = $rsize_3_lcssa << $312;
    var $K12_0 = $313;
    var $T_0 = $306;
    label = 69;
    break;
   case 69:
    var $T_0;
    var $K12_0;
    var $315 = $T_0 + 4 | 0;
    var $316 = HEAP32[$315 >> 2];
    var $317 = $316 & -8;
    var $318 = ($317 | 0) == ($rsize_3_lcssa | 0);
    if ($318) {
      label = 74;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $320 = $K12_0 >>> 31;
    var $321 = $T_0 + 16 + ($320 << 2) | 0;
    var $322 = HEAP32[$321 >> 2];
    var $323 = ($322 | 0) == 0;
    var $324 = $K12_0 << 1;
    if ($323) {
      label = 71;
      break;
    } else {
      var $K12_0 = $324;
      var $T_0 = $322;
      label = 69;
      break;
    }
   case 71:
    var $326 = $321;
    var $327 = HEAP32[5587612 >> 2];
    var $328 = $326 >>> 0 < $327 >>> 0;
    if ($328) {
      label = 73;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    HEAP32[$321 >> 2] = $256;
    var $_sum11 = $nb + 24 | 0;
    var $330 = $112 + $_sum11 | 0;
    var $331 = $330;
    HEAP32[$331 >> 2] = $T_0;
    var $_sum12 = $nb + 12 | 0;
    var $332 = $112 + $_sum12 | 0;
    var $333 = $332;
    HEAP32[$333 >> 2] = $256;
    var $_sum13 = $nb + 8 | 0;
    var $334 = $112 + $_sum13 | 0;
    var $335 = $334;
    HEAP32[$335 >> 2] = $256;
    label = 78;
    break;
   case 73:
    _abort();
   case 74:
    var $338 = $T_0 + 8 | 0;
    var $339 = HEAP32[$338 >> 2];
    var $340 = $T_0;
    var $341 = HEAP32[5587612 >> 2];
    var $342 = $340 >>> 0 < $341 >>> 0;
    if ($342) {
      label = 77;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    var $344 = $339;
    var $345 = $344 >>> 0 < $341 >>> 0;
    if ($345) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $347 = $339 + 12 | 0;
    HEAP32[$347 >> 2] = $256;
    HEAP32[$338 >> 2] = $256;
    var $_sum8 = $nb + 8 | 0;
    var $348 = $112 + $_sum8 | 0;
    var $349 = $348;
    HEAP32[$349 >> 2] = $339;
    var $_sum9 = $nb + 12 | 0;
    var $350 = $112 + $_sum9 | 0;
    var $351 = $350;
    HEAP32[$351 >> 2] = $T_0;
    var $_sum10 = $nb + 24 | 0;
    var $352 = $112 + $_sum10 | 0;
    var $353 = $352;
    HEAP32[$353 >> 2] = 0;
    label = 78;
    break;
   case 77:
    _abort();
   case 78:
    var $355 = $v_3_lcssa + 8 | 0;
    var $356 = $355;
    var $_0 = $356;
    label = 80;
    break;
   case 79:
    _abort();
   case 80:
    var $_0;
    return $_0;
  }
}
_tmalloc_large["X"] = 1;
function _release_unused_segments() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0_in = 5588048;
    label = 3;
    break;
   case 3:
    var $sp_0_in;
    var $sp_0 = HEAP32[$sp_0_in >> 2];
    var $2 = ($sp_0 | 0) == 0;
    var $3 = $sp_0 + 8 | 0;
    if ($2) {
      label = 4;
      break;
    } else {
      var $sp_0_in = $3;
      label = 3;
      break;
    }
   case 4:
    HEAP32[5587628 >> 2] = -1;
    return;
  }
}
function _sys_trim() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263284 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $5 = HEAP32[5587620 >> 2];
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $8 = HEAP32[5587608 >> 2];
    var $9 = $8 >>> 0 > 40;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $11 = HEAP32[5263292 >> 2];
    var $12 = $8 - 41 | 0;
    var $13 = $12 + $11 | 0;
    var $14 = Math.floor(($13 >>> 0) / ($11 >>> 0));
    var $15 = $14 - 1 | 0;
    var $16 = $15 * $11 & -1;
    var $17 = $5;
    var $18 = _segment_holding($17);
    var $19 = $18 + 12 | 0;
    var $20 = HEAP32[$19 >> 2];
    var $21 = $20 & 8;
    var $22 = ($21 | 0) == 0;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $24 = _sbrk(0);
    var $25 = $18 | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $18 + 4 | 0;
    var $28 = HEAP32[$27 >> 2];
    var $29 = $26 + $28 | 0;
    var $30 = ($24 | 0) == ($29 | 0);
    if ($30) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    var $32 = -2147483648 - $11 | 0;
    var $33 = $16 >>> 0 > 2147483646;
    var $_ = $33 ? $32 : $16;
    var $34 = -$_ | 0;
    var $35 = _sbrk($34);
    var $36 = _sbrk(0);
    var $37 = ($35 | 0) != -1;
    var $38 = $36 >>> 0 < $24 >>> 0;
    var $or_cond = $37 & $38;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $40 = $24;
    var $41 = $36;
    var $42 = $40 - $41 | 0;
    var $43 = ($24 | 0) == ($36 | 0);
    if ($43) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $45 = HEAP32[$27 >> 2];
    var $46 = $45 - $42 | 0;
    HEAP32[$27 >> 2] = $46;
    var $47 = HEAP32[5588028 >> 2];
    var $48 = $47 - $42 | 0;
    HEAP32[5588028 >> 2] = $48;
    var $49 = HEAP32[5587620 >> 2];
    var $50 = HEAP32[5587608 >> 2];
    var $51 = $50 - $42 | 0;
    _init_top($49, $51);
    label = 13;
    break;
   case 11:
    var $52 = HEAP32[5587608 >> 2];
    var $53 = HEAP32[5587624 >> 2];
    var $54 = $52 >>> 0 > $53 >>> 0;
    if ($54) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5587624 >> 2] = -1;
    label = 13;
    break;
   case 13:
    return;
  }
}
_sys_trim["X"] = 1;
function _free($mem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($mem | 0) == 0;
    if ($1) {
      label = 128;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $mem - 8 | 0;
    var $4 = $3;
    var $5 = HEAP32[5587612 >> 2];
    var $6 = $3 >>> 0 < $5 >>> 0;
    if ($6) {
      label = 127;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $8 = $mem - 4 | 0;
    var $9 = $8;
    var $10 = HEAP32[$9 >> 2];
    var $11 = $10 & 3;
    var $12 = ($11 | 0) == 1;
    if ($12) {
      label = 127;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $14 = $10 & -8;
    var $_sum = $14 - 8 | 0;
    var $15 = $mem + $_sum | 0;
    var $16 = $15;
    var $17 = $10 & 1;
    var $18 = ($17 | 0) == 0;
    if ($18) {
      label = 6;
      break;
    } else {
      var $p_0 = $4;
      var $psize_0 = $14;
      label = 49;
      break;
    }
   case 6:
    var $20 = $3;
    var $21 = HEAP32[$20 >> 2];
    var $22 = ($11 | 0) == 0;
    if ($22) {
      label = 128;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_sum216 = -8 - $21 | 0;
    var $24 = $mem + $_sum216 | 0;
    var $25 = $24;
    var $26 = $21 + $14 | 0;
    var $27 = $24 >>> 0 < $5 >>> 0;
    if ($27) {
      label = 127;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $29 = HEAP32[5587616 >> 2];
    var $30 = ($25 | 0) == ($29 | 0);
    if ($30) {
      label = 47;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $32 = $21 >>> 3;
    var $33 = $21 >>> 0 < 256;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 16;
      break;
    }
   case 10:
    var $_sum250 = $_sum216 + 8 | 0;
    var $35 = $mem + $_sum250 | 0;
    var $36 = $35;
    var $37 = HEAP32[$36 >> 2];
    var $_sum251 = $_sum216 + 12 | 0;
    var $38 = $mem + $_sum251 | 0;
    var $39 = $38;
    var $40 = HEAP32[$39 >> 2];
    var $41 = ($37 | 0) == ($40 | 0);
    if ($41) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $43 = 1 << $32;
    var $44 = $43 ^ -1;
    var $45 = HEAP32[5587596 >> 2];
    var $46 = $45 & $44;
    HEAP32[5587596 >> 2] = $46;
    var $p_0 = $25;
    var $psize_0 = $26;
    label = 49;
    break;
   case 12:
    var $48 = $32 << 1;
    var $49 = 5587636 + ($48 << 2) | 0;
    var $50 = $49;
    var $51 = ($37 | 0) != ($50 | 0);
    var $52 = $37;
    var $53 = $52 >>> 0 < $5 >>> 0;
    var $or_cond = $51 & $53;
    if ($or_cond) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $55 = ($40 | 0) == ($50 | 0);
    var $56 = $40;
    var $57 = $56 >>> 0 >= $5 >>> 0;
    var $or_cond263 = $55 | $57;
    if ($or_cond263) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $58 = $37 + 12 | 0;
    HEAP32[$58 >> 2] = $40;
    var $59 = $40 + 8 | 0;
    HEAP32[$59 >> 2] = $37;
    var $p_0 = $25;
    var $psize_0 = $26;
    label = 49;
    break;
   case 15:
    _abort();
   case 16:
    var $61 = $24;
    var $_sum242 = $_sum216 + 24 | 0;
    var $62 = $mem + $_sum242 | 0;
    var $63 = $62;
    var $64 = HEAP32[$63 >> 2];
    var $_sum243 = $_sum216 + 12 | 0;
    var $65 = $mem + $_sum243 | 0;
    var $66 = $65;
    var $67 = HEAP32[$66 >> 2];
    var $68 = ($67 | 0) == ($61 | 0);
    if ($68) {
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $_sum249 = $_sum216 + 8 | 0;
    var $70 = $mem + $_sum249 | 0;
    var $71 = $70;
    var $72 = HEAP32[$71 >> 2];
    var $73 = $72;
    var $74 = $73 >>> 0 < $5 >>> 0;
    if ($74) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $76 = $72 + 12 | 0;
    HEAP32[$76 >> 2] = $67;
    var $77 = $67 + 8 | 0;
    HEAP32[$77 >> 2] = $72;
    var $R_1 = $67;
    label = 27;
    break;
   case 19:
    _abort();
   case 20:
    var $_sum245 = $_sum216 + 20 | 0;
    var $80 = $mem + $_sum245 | 0;
    var $81 = $80;
    var $82 = HEAP32[$81 >> 2];
    var $83 = ($82 | 0) == 0;
    if ($83) {
      label = 21;
      break;
    } else {
      var $R_0 = $82;
      var $RP_0 = $81;
      label = 22;
      break;
    }
   case 21:
    var $_sum244 = $_sum216 + 16 | 0;
    var $85 = $mem + $_sum244 | 0;
    var $86 = $85;
    var $87 = HEAP32[$86 >> 2];
    var $88 = ($87 | 0) == 0;
    if ($88) {
      var $R_1 = 0;
      label = 27;
      break;
    } else {
      var $R_0 = $87;
      var $RP_0 = $86;
      label = 22;
      break;
    }
   case 22:
    var $RP_0;
    var $R_0;
    var $89 = $R_0 + 20 | 0;
    var $90 = HEAP32[$89 >> 2];
    var $91 = ($90 | 0) == 0;
    if ($91) {
      label = 23;
      break;
    } else {
      var $R_0 = $90;
      var $RP_0 = $89;
      label = 22;
      break;
    }
   case 23:
    var $93 = $R_0 + 16 | 0;
    var $94 = HEAP32[$93 >> 2];
    var $95 = ($94 | 0) == 0;
    if ($95) {
      label = 24;
      break;
    } else {
      var $R_0 = $94;
      var $RP_0 = $93;
      label = 22;
      break;
    }
   case 24:
    var $97 = $RP_0;
    var $98 = $97 >>> 0 < $5 >>> 0;
    if ($98) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 27;
    break;
   case 26:
    _abort();
   case 27:
    var $R_1;
    var $102 = ($64 | 0) == 0;
    if ($102) {
      var $p_0 = $25;
      var $psize_0 = $26;
      label = 49;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $_sum246 = $_sum216 + 28 | 0;
    var $104 = $mem + $_sum246 | 0;
    var $105 = $104;
    var $106 = HEAP32[$105 >> 2];
    var $107 = 5587900 + ($106 << 2) | 0;
    var $108 = HEAP32[$107 >> 2];
    var $109 = ($61 | 0) == ($108 | 0);
    if ($109) {
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 29:
    HEAP32[$107 >> 2] = $R_1;
    var $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 30;
      break;
    } else {
      label = 37;
      break;
    }
   case 30:
    var $111 = HEAP32[$105 >> 2];
    var $112 = 1 << $111;
    var $113 = $112 ^ -1;
    var $114 = HEAP32[5587600 >> 2];
    var $115 = $114 & $113;
    HEAP32[5587600 >> 2] = $115;
    var $p_0 = $25;
    var $psize_0 = $26;
    label = 49;
    break;
   case 31:
    var $117 = $64;
    var $118 = HEAP32[5587612 >> 2];
    var $119 = $117 >>> 0 < $118 >>> 0;
    if ($119) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $121 = $64 + 16 | 0;
    var $122 = HEAP32[$121 >> 2];
    var $123 = ($122 | 0) == ($61 | 0);
    if ($123) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$121 >> 2] = $R_1;
    label = 36;
    break;
   case 34:
    var $126 = $64 + 20 | 0;
    HEAP32[$126 >> 2] = $R_1;
    label = 36;
    break;
   case 35:
    _abort();
   case 36:
    var $129 = ($R_1 | 0) == 0;
    if ($129) {
      var $p_0 = $25;
      var $psize_0 = $26;
      label = 49;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $131 = $R_1;
    var $132 = HEAP32[5587612 >> 2];
    var $133 = $131 >>> 0 < $132 >>> 0;
    if ($133) {
      label = 46;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $135 = $R_1 + 24 | 0;
    HEAP32[$135 >> 2] = $64;
    var $_sum247 = $_sum216 + 16 | 0;
    var $136 = $mem + $_sum247 | 0;
    var $137 = $136;
    var $138 = HEAP32[$137 >> 2];
    var $139 = ($138 | 0) == 0;
    if ($139) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $141 = $138;
    var $142 = HEAP32[5587612 >> 2];
    var $143 = $141 >>> 0 < $142 >>> 0;
    if ($143) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $145 = $R_1 + 16 | 0;
    HEAP32[$145 >> 2] = $138;
    var $146 = $138 + 24 | 0;
    HEAP32[$146 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $_sum248 = $_sum216 + 20 | 0;
    var $149 = $mem + $_sum248 | 0;
    var $150 = $149;
    var $151 = HEAP32[$150 >> 2];
    var $152 = ($151 | 0) == 0;
    if ($152) {
      var $p_0 = $25;
      var $psize_0 = $26;
      label = 49;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $154 = $151;
    var $155 = HEAP32[5587612 >> 2];
    var $156 = $154 >>> 0 < $155 >>> 0;
    if ($156) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $158 = $R_1 + 20 | 0;
    HEAP32[$158 >> 2] = $151;
    var $159 = $151 + 24 | 0;
    HEAP32[$159 >> 2] = $R_1;
    var $p_0 = $25;
    var $psize_0 = $26;
    label = 49;
    break;
   case 45:
    _abort();
   case 46:
    _abort();
   case 47:
    var $_sum217 = $14 - 4 | 0;
    var $163 = $mem + $_sum217 | 0;
    var $164 = $163;
    var $165 = HEAP32[$164 >> 2];
    var $166 = $165 & 3;
    var $167 = ($166 | 0) == 3;
    if ($167) {
      label = 48;
      break;
    } else {
      var $p_0 = $25;
      var $psize_0 = $26;
      label = 49;
      break;
    }
   case 48:
    HEAP32[5587604 >> 2] = $26;
    var $169 = HEAP32[$164 >> 2];
    var $170 = $169 & -2;
    HEAP32[$164 >> 2] = $170;
    var $171 = $26 | 1;
    var $_sum240 = $_sum216 + 4 | 0;
    var $172 = $mem + $_sum240 | 0;
    var $173 = $172;
    HEAP32[$173 >> 2] = $171;
    var $174 = $15;
    HEAP32[$174 >> 2] = $26;
    label = 128;
    break;
   case 49:
    var $psize_0;
    var $p_0;
    var $176 = $p_0;
    var $177 = $176 >>> 0 < $15 >>> 0;
    if ($177) {
      label = 50;
      break;
    } else {
      label = 127;
      break;
    }
   case 50:
    var $_sum239 = $14 - 4 | 0;
    var $179 = $mem + $_sum239 | 0;
    var $180 = $179;
    var $181 = HEAP32[$180 >> 2];
    var $182 = $181 & 1;
    var $183 = ($182 | 0) == 0;
    if ($183) {
      label = 127;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $185 = $181 & 2;
    var $186 = ($185 | 0) == 0;
    if ($186) {
      label = 52;
      break;
    } else {
      label = 101;
      break;
    }
   case 52:
    var $188 = HEAP32[5587620 >> 2];
    var $189 = ($16 | 0) == ($188 | 0);
    if ($189) {
      label = 53;
      break;
    } else {
      label = 57;
      break;
    }
   case 53:
    var $191 = HEAP32[5587608 >> 2];
    var $192 = $191 + $psize_0 | 0;
    HEAP32[5587608 >> 2] = $192;
    HEAP32[5587620 >> 2] = $p_0;
    var $193 = $192 | 1;
    var $194 = $p_0 + 4 | 0;
    HEAP32[$194 >> 2] = $193;
    var $195 = HEAP32[5587616 >> 2];
    var $196 = ($p_0 | 0) == ($195 | 0);
    if ($196) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    HEAP32[5587616 >> 2] = 0;
    HEAP32[5587604 >> 2] = 0;
    label = 55;
    break;
   case 55:
    var $199 = HEAP32[5587624 >> 2];
    var $200 = $192 >>> 0 > $199 >>> 0;
    if ($200) {
      label = 56;
      break;
    } else {
      label = 128;
      break;
    }
   case 56:
    _sys_trim();
    label = 128;
    break;
   case 57:
    var $203 = HEAP32[5587616 >> 2];
    var $204 = ($16 | 0) == ($203 | 0);
    if ($204) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $206 = HEAP32[5587604 >> 2];
    var $207 = $206 + $psize_0 | 0;
    HEAP32[5587604 >> 2] = $207;
    HEAP32[5587616 >> 2] = $p_0;
    var $208 = $207 | 1;
    var $209 = $p_0 + 4 | 0;
    HEAP32[$209 >> 2] = $208;
    var $210 = $176 + $207 | 0;
    var $211 = $210;
    HEAP32[$211 >> 2] = $207;
    label = 128;
    break;
   case 59:
    var $213 = $181 & -8;
    var $214 = $213 + $psize_0 | 0;
    var $215 = $181 >>> 3;
    var $216 = $181 >>> 0 < 256;
    if ($216) {
      label = 60;
      break;
    } else {
      label = 68;
      break;
    }
   case 60:
    var $218 = $mem + $14 | 0;
    var $219 = $218;
    var $220 = HEAP32[$219 >> 2];
    var $_sum237238 = $14 | 4;
    var $221 = $mem + $_sum237238 | 0;
    var $222 = $221;
    var $223 = HEAP32[$222 >> 2];
    var $224 = ($220 | 0) == ($223 | 0);
    if ($224) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    var $226 = 1 << $215;
    var $227 = $226 ^ -1;
    var $228 = HEAP32[5587596 >> 2];
    var $229 = $228 & $227;
    HEAP32[5587596 >> 2] = $229;
    label = 99;
    break;
   case 62:
    var $231 = $215 << 1;
    var $232 = 5587636 + ($231 << 2) | 0;
    var $233 = $232;
    var $234 = ($220 | 0) == ($233 | 0);
    if ($234) {
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $236 = $220;
    var $237 = HEAP32[5587612 >> 2];
    var $238 = $236 >>> 0 < $237 >>> 0;
    if ($238) {
      label = 67;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $240 = ($223 | 0) == ($233 | 0);
    if ($240) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $242 = $223;
    var $243 = HEAP32[5587612 >> 2];
    var $244 = $242 >>> 0 < $243 >>> 0;
    if ($244) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $245 = $220 + 12 | 0;
    HEAP32[$245 >> 2] = $223;
    var $246 = $223 + 8 | 0;
    HEAP32[$246 >> 2] = $220;
    label = 99;
    break;
   case 67:
    _abort();
   case 68:
    var $248 = $15;
    var $_sum219 = $14 + 16 | 0;
    var $249 = $mem + $_sum219 | 0;
    var $250 = $249;
    var $251 = HEAP32[$250 >> 2];
    var $_sum220221 = $14 | 4;
    var $252 = $mem + $_sum220221 | 0;
    var $253 = $252;
    var $254 = HEAP32[$253 >> 2];
    var $255 = ($254 | 0) == ($248 | 0);
    if ($255) {
      label = 72;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $257 = $mem + $14 | 0;
    var $258 = $257;
    var $259 = HEAP32[$258 >> 2];
    var $260 = $259;
    var $261 = HEAP32[5587612 >> 2];
    var $262 = $260 >>> 0 < $261 >>> 0;
    if ($262) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $264 = $259 + 12 | 0;
    HEAP32[$264 >> 2] = $254;
    var $265 = $254 + 8 | 0;
    HEAP32[$265 >> 2] = $259;
    var $R7_1 = $254;
    label = 79;
    break;
   case 71:
    _abort();
   case 72:
    var $_sum223 = $14 + 12 | 0;
    var $268 = $mem + $_sum223 | 0;
    var $269 = $268;
    var $270 = HEAP32[$269 >> 2];
    var $271 = ($270 | 0) == 0;
    if ($271) {
      label = 73;
      break;
    } else {
      var $R7_0 = $270;
      var $RP9_0 = $269;
      label = 74;
      break;
    }
   case 73:
    var $_sum222 = $14 + 8 | 0;
    var $273 = $mem + $_sum222 | 0;
    var $274 = $273;
    var $275 = HEAP32[$274 >> 2];
    var $276 = ($275 | 0) == 0;
    if ($276) {
      var $R7_1 = 0;
      label = 79;
      break;
    } else {
      var $R7_0 = $275;
      var $RP9_0 = $274;
      label = 74;
      break;
    }
   case 74:
    var $RP9_0;
    var $R7_0;
    var $277 = $R7_0 + 20 | 0;
    var $278 = HEAP32[$277 >> 2];
    var $279 = ($278 | 0) == 0;
    if ($279) {
      label = 75;
      break;
    } else {
      var $R7_0 = $278;
      var $RP9_0 = $277;
      label = 74;
      break;
    }
   case 75:
    var $281 = $R7_0 + 16 | 0;
    var $282 = HEAP32[$281 >> 2];
    var $283 = ($282 | 0) == 0;
    if ($283) {
      label = 76;
      break;
    } else {
      var $R7_0 = $282;
      var $RP9_0 = $281;
      label = 74;
      break;
    }
   case 76:
    var $285 = $RP9_0;
    var $286 = HEAP32[5587612 >> 2];
    var $287 = $285 >>> 0 < $286 >>> 0;
    if ($287) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    HEAP32[$RP9_0 >> 2] = 0;
    var $R7_1 = $R7_0;
    label = 79;
    break;
   case 78:
    _abort();
   case 79:
    var $R7_1;
    var $291 = ($251 | 0) == 0;
    if ($291) {
      label = 99;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $_sum232 = $14 + 20 | 0;
    var $293 = $mem + $_sum232 | 0;
    var $294 = $293;
    var $295 = HEAP32[$294 >> 2];
    var $296 = 5587900 + ($295 << 2) | 0;
    var $297 = HEAP32[$296 >> 2];
    var $298 = ($248 | 0) == ($297 | 0);
    if ($298) {
      label = 81;
      break;
    } else {
      label = 83;
      break;
    }
   case 81:
    HEAP32[$296 >> 2] = $R7_1;
    var $cond261 = ($R7_1 | 0) == 0;
    if ($cond261) {
      label = 82;
      break;
    } else {
      label = 89;
      break;
    }
   case 82:
    var $300 = HEAP32[$294 >> 2];
    var $301 = 1 << $300;
    var $302 = $301 ^ -1;
    var $303 = HEAP32[5587600 >> 2];
    var $304 = $303 & $302;
    HEAP32[5587600 >> 2] = $304;
    label = 99;
    break;
   case 83:
    var $306 = $251;
    var $307 = HEAP32[5587612 >> 2];
    var $308 = $306 >>> 0 < $307 >>> 0;
    if ($308) {
      label = 87;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    var $310 = $251 + 16 | 0;
    var $311 = HEAP32[$310 >> 2];
    var $312 = ($311 | 0) == ($248 | 0);
    if ($312) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    HEAP32[$310 >> 2] = $R7_1;
    label = 88;
    break;
   case 86:
    var $315 = $251 + 20 | 0;
    HEAP32[$315 >> 2] = $R7_1;
    label = 88;
    break;
   case 87:
    _abort();
   case 88:
    var $318 = ($R7_1 | 0) == 0;
    if ($318) {
      label = 99;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $320 = $R7_1;
    var $321 = HEAP32[5587612 >> 2];
    var $322 = $320 >>> 0 < $321 >>> 0;
    if ($322) {
      label = 98;
      break;
    } else {
      label = 90;
      break;
    }
   case 90:
    var $324 = $R7_1 + 24 | 0;
    HEAP32[$324 >> 2] = $251;
    var $_sum233 = $14 + 8 | 0;
    var $325 = $mem + $_sum233 | 0;
    var $326 = $325;
    var $327 = HEAP32[$326 >> 2];
    var $328 = ($327 | 0) == 0;
    if ($328) {
      label = 94;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $330 = $327;
    var $331 = HEAP32[5587612 >> 2];
    var $332 = $330 >>> 0 < $331 >>> 0;
    if ($332) {
      label = 93;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    var $334 = $R7_1 + 16 | 0;
    HEAP32[$334 >> 2] = $327;
    var $335 = $327 + 24 | 0;
    HEAP32[$335 >> 2] = $R7_1;
    label = 94;
    break;
   case 93:
    _abort();
   case 94:
    var $_sum234 = $14 + 12 | 0;
    var $338 = $mem + $_sum234 | 0;
    var $339 = $338;
    var $340 = HEAP32[$339 >> 2];
    var $341 = ($340 | 0) == 0;
    if ($341) {
      label = 99;
      break;
    } else {
      label = 95;
      break;
    }
   case 95:
    var $343 = $340;
    var $344 = HEAP32[5587612 >> 2];
    var $345 = $343 >>> 0 < $344 >>> 0;
    if ($345) {
      label = 97;
      break;
    } else {
      label = 96;
      break;
    }
   case 96:
    var $347 = $R7_1 + 20 | 0;
    HEAP32[$347 >> 2] = $340;
    var $348 = $340 + 24 | 0;
    HEAP32[$348 >> 2] = $R7_1;
    label = 99;
    break;
   case 97:
    _abort();
   case 98:
    _abort();
   case 99:
    var $352 = $214 | 1;
    var $353 = $p_0 + 4 | 0;
    HEAP32[$353 >> 2] = $352;
    var $354 = $176 + $214 | 0;
    var $355 = $354;
    HEAP32[$355 >> 2] = $214;
    var $356 = HEAP32[5587616 >> 2];
    var $357 = ($p_0 | 0) == ($356 | 0);
    if ($357) {
      label = 100;
      break;
    } else {
      var $psize_1 = $214;
      label = 102;
      break;
    }
   case 100:
    HEAP32[5587604 >> 2] = $214;
    label = 128;
    break;
   case 101:
    var $360 = $181 & -2;
    HEAP32[$180 >> 2] = $360;
    var $361 = $psize_0 | 1;
    var $362 = $p_0 + 4 | 0;
    HEAP32[$362 >> 2] = $361;
    var $363 = $176 + $psize_0 | 0;
    var $364 = $363;
    HEAP32[$364 >> 2] = $psize_0;
    var $psize_1 = $psize_0;
    label = 102;
    break;
   case 102:
    var $psize_1;
    var $366 = $psize_1 >>> 3;
    var $367 = $psize_1 >>> 0 < 256;
    if ($367) {
      label = 103;
      break;
    } else {
      label = 108;
      break;
    }
   case 103:
    var $369 = $366 << 1;
    var $370 = 5587636 + ($369 << 2) | 0;
    var $371 = $370;
    var $372 = HEAP32[5587596 >> 2];
    var $373 = 1 << $366;
    var $374 = $372 & $373;
    var $375 = ($374 | 0) == 0;
    if ($375) {
      label = 104;
      break;
    } else {
      label = 105;
      break;
    }
   case 104:
    var $377 = $372 | $373;
    HEAP32[5587596 >> 2] = $377;
    var $_sum230_pre = $369 + 2 | 0;
    var $_pre = 5587636 + ($_sum230_pre << 2) | 0;
    var $F16_0 = $371;
    var $_pre_phi = $_pre;
    label = 107;
    break;
   case 105:
    var $_sum231 = $369 + 2 | 0;
    var $379 = 5587636 + ($_sum231 << 2) | 0;
    var $380 = HEAP32[$379 >> 2];
    var $381 = $380;
    var $382 = HEAP32[5587612 >> 2];
    var $383 = $381 >>> 0 < $382 >>> 0;
    if ($383) {
      label = 106;
      break;
    } else {
      var $F16_0 = $380;
      var $_pre_phi = $379;
      label = 107;
      break;
    }
   case 106:
    _abort();
   case 107:
    var $_pre_phi;
    var $F16_0;
    HEAP32[$_pre_phi >> 2] = $p_0;
    var $386 = $F16_0 + 12 | 0;
    HEAP32[$386 >> 2] = $p_0;
    var $387 = $p_0 + 8 | 0;
    HEAP32[$387 >> 2] = $F16_0;
    var $388 = $p_0 + 12 | 0;
    HEAP32[$388 >> 2] = $371;
    label = 128;
    break;
   case 108:
    var $390 = $p_0;
    var $391 = $psize_1 >>> 8;
    var $392 = ($391 | 0) == 0;
    if ($392) {
      var $I18_0 = 0;
      label = 111;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    var $394 = $psize_1 >>> 0 > 16777215;
    if ($394) {
      var $I18_0 = 31;
      label = 111;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    var $396 = $391 + 1048320 | 0;
    var $397 = $396 >>> 16;
    var $398 = $397 & 8;
    var $399 = $391 << $398;
    var $400 = $399 + 520192 | 0;
    var $401 = $400 >>> 16;
    var $402 = $401 & 4;
    var $403 = $402 | $398;
    var $404 = $399 << $402;
    var $405 = $404 + 245760 | 0;
    var $406 = $405 >>> 16;
    var $407 = $406 & 2;
    var $408 = $403 | $407;
    var $409 = 14 - $408 | 0;
    var $410 = $404 << $407;
    var $411 = $410 >>> 15;
    var $412 = $409 + $411 | 0;
    var $413 = $412 << 1;
    var $414 = $412 + 7 | 0;
    var $415 = $psize_1 >>> ($414 >>> 0);
    var $416 = $415 & 1;
    var $417 = $416 | $413;
    var $I18_0 = $417;
    label = 111;
    break;
   case 111:
    var $I18_0;
    var $419 = 5587900 + ($I18_0 << 2) | 0;
    var $420 = $p_0 + 28 | 0;
    var $I18_0_c = $I18_0;
    HEAP32[$420 >> 2] = $I18_0_c;
    var $421 = $p_0 + 20 | 0;
    HEAP32[$421 >> 2] = 0;
    var $422 = $p_0 + 16 | 0;
    HEAP32[$422 >> 2] = 0;
    var $423 = HEAP32[5587600 >> 2];
    var $424 = 1 << $I18_0;
    var $425 = $423 & $424;
    var $426 = ($425 | 0) == 0;
    if ($426) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    var $428 = $423 | $424;
    HEAP32[5587600 >> 2] = $428;
    HEAP32[$419 >> 2] = $390;
    var $429 = $p_0 + 24 | 0;
    var $_c = $419;
    HEAP32[$429 >> 2] = $_c;
    var $430 = $p_0 + 12 | 0;
    HEAP32[$430 >> 2] = $p_0;
    var $431 = $p_0 + 8 | 0;
    HEAP32[$431 >> 2] = $p_0;
    label = 125;
    break;
   case 113:
    var $433 = HEAP32[$419 >> 2];
    var $434 = ($I18_0 | 0) == 31;
    if ($434) {
      var $439 = 0;
      label = 115;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    var $436 = $I18_0 >>> 1;
    var $437 = 25 - $436 | 0;
    var $439 = $437;
    label = 115;
    break;
   case 115:
    var $439;
    var $440 = $psize_1 << $439;
    var $K19_0 = $440;
    var $T_0 = $433;
    label = 116;
    break;
   case 116:
    var $T_0;
    var $K19_0;
    var $442 = $T_0 + 4 | 0;
    var $443 = HEAP32[$442 >> 2];
    var $444 = $443 & -8;
    var $445 = ($444 | 0) == ($psize_1 | 0);
    if ($445) {
      label = 121;
      break;
    } else {
      label = 117;
      break;
    }
   case 117:
    var $447 = $K19_0 >>> 31;
    var $448 = $T_0 + 16 + ($447 << 2) | 0;
    var $449 = HEAP32[$448 >> 2];
    var $450 = ($449 | 0) == 0;
    var $451 = $K19_0 << 1;
    if ($450) {
      label = 118;
      break;
    } else {
      var $K19_0 = $451;
      var $T_0 = $449;
      label = 116;
      break;
    }
   case 118:
    var $453 = $448;
    var $454 = HEAP32[5587612 >> 2];
    var $455 = $453 >>> 0 < $454 >>> 0;
    if ($455) {
      label = 120;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    HEAP32[$448 >> 2] = $390;
    var $457 = $p_0 + 24 | 0;
    var $T_0_c227 = $T_0;
    HEAP32[$457 >> 2] = $T_0_c227;
    var $458 = $p_0 + 12 | 0;
    HEAP32[$458 >> 2] = $p_0;
    var $459 = $p_0 + 8 | 0;
    HEAP32[$459 >> 2] = $p_0;
    label = 125;
    break;
   case 120:
    _abort();
   case 121:
    var $462 = $T_0 + 8 | 0;
    var $463 = HEAP32[$462 >> 2];
    var $464 = $T_0;
    var $465 = HEAP32[5587612 >> 2];
    var $466 = $464 >>> 0 < $465 >>> 0;
    if ($466) {
      label = 124;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    var $468 = $463;
    var $469 = $468 >>> 0 < $465 >>> 0;
    if ($469) {
      label = 124;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    var $471 = $463 + 12 | 0;
    HEAP32[$471 >> 2] = $390;
    HEAP32[$462 >> 2] = $390;
    var $472 = $p_0 + 8 | 0;
    var $_c226 = $463;
    HEAP32[$472 >> 2] = $_c226;
    var $473 = $p_0 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$473 >> 2] = $T_0_c;
    var $474 = $p_0 + 24 | 0;
    HEAP32[$474 >> 2] = 0;
    label = 125;
    break;
   case 124:
    _abort();
   case 125:
    var $476 = HEAP32[5587628 >> 2];
    var $477 = $476 - 1 | 0;
    HEAP32[5587628 >> 2] = $477;
    var $478 = ($477 | 0) == 0;
    if ($478) {
      label = 126;
      break;
    } else {
      label = 128;
      break;
    }
   case 126:
    _release_unused_segments();
    label = 128;
    break;
   case 127:
    _abort();
   case 128:
    return;
  }
}
_free["X"] = 1;
function _segment_holding($addr) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0 = 5588040;
    label = 3;
    break;
   case 3:
    var $sp_0;
    var $2 = $sp_0 | 0;
    var $3 = HEAP32[$2 >> 2];
    var $4 = $3 >>> 0 > $addr >>> 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = $sp_0 + 4 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $3 + $7 | 0;
    var $9 = $8 >>> 0 > $addr >>> 0;
    if ($9) {
      var $_0 = $sp_0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $11 = $sp_0 + 8 | 0;
    var $12 = HEAP32[$11 >> 2];
    var $13 = ($12 | 0) == 0;
    if ($13) {
      var $_0 = 0;
      label = 6;
      break;
    } else {
      var $sp_0 = $12;
      label = 3;
      break;
    }
   case 6:
    var $_0;
    return $_0;
  }
}
function _init_top($p, $psize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $p;
    var $2 = $p + 8 | 0;
    var $3 = $2;
    var $4 = $3 & 7;
    var $5 = ($4 | 0) == 0;
    if ($5) {
      var $10 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $7 = -$3 | 0;
    var $8 = $7 & 7;
    var $10 = $8;
    label = 4;
    break;
   case 4:
    var $10;
    var $11 = $1 + $10 | 0;
    var $12 = $11;
    var $13 = $psize - $10 | 0;
    HEAP32[5587620 >> 2] = $12;
    HEAP32[5587608 >> 2] = $13;
    var $14 = $13 | 1;
    var $_sum = $10 + 4 | 0;
    var $15 = $1 + $_sum | 0;
    var $16 = $15;
    HEAP32[$16 >> 2] = $14;
    var $_sum2 = $psize + 4 | 0;
    var $17 = $1 + $_sum2 | 0;
    var $18 = $17;
    HEAP32[$18 >> 2] = 40;
    var $19 = HEAP32[5263300 >> 2];
    HEAP32[5587624 >> 2] = $19;
    return;
  }
}
function _init_bins() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $i_02 = 0;
    label = 3;
    break;
   case 3:
    var $i_02;
    var $2 = $i_02 << 1;
    var $3 = 5587636 + ($2 << 2) | 0;
    var $4 = $3;
    var $_sum = $2 + 3 | 0;
    var $5 = 5587636 + ($_sum << 2) | 0;
    HEAP32[$5 >> 2] = $4;
    var $_sum1 = $2 + 2 | 0;
    var $6 = 5587636 + ($_sum1 << 2) | 0;
    HEAP32[$6 >> 2] = $4;
    var $7 = $i_02 + 1 | 0;
    var $exitcond = ($7 | 0) == 32;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_02 = $7;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _calloc($n_elements, $elem_size) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = ($n_elements | 0) == 0;
    if ($1) {
      var $req_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $elem_size * $n_elements & -1;
    var $4 = $elem_size | $n_elements;
    var $5 = $4 >>> 0 > 65535;
    if ($5) {
      label = 4;
      break;
    } else {
      var $req_0 = $3;
      label = 5;
      break;
    }
   case 4:
    var $7 = Math.floor(($3 >>> 0) / ($n_elements >>> 0));
    var $8 = ($7 | 0) == ($elem_size | 0);
    var $_ = $8 ? $3 : -1;
    var $req_0 = $_;
    label = 5;
    break;
   case 5:
    var $req_0;
    var $10 = _malloc($req_0);
    var $11 = ($10 | 0) == 0;
    if ($11) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $13 = $10 - 4 | 0;
    var $14 = $13;
    var $15 = HEAP32[$14 >> 2];
    var $16 = $15 & 3;
    var $17 = ($16 | 0) == 0;
    if ($17) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _memset($10, 0, $req_0);
    label = 8;
    break;
   case 8:
    return $10;
  }
}
Module["_calloc"] = _calloc;
function _init_mparams() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5263284 >> 2];
    var $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $4 = _sysconf(8);
    var $5 = $4 - 1 | 0;
    var $6 = $5 & $4;
    var $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _abort();
   case 5:
    HEAP32[5263292 >> 2] = $4;
    HEAP32[5263288 >> 2] = $4;
    HEAP32[5263296 >> 2] = -1;
    HEAP32[5263300 >> 2] = 2097152;
    HEAP32[5263304 >> 2] = 0;
    HEAP32[5588036 >> 2] = 0;
    var $10 = _time(0);
    var $11 = $10 & -16;
    var $12 = $11 ^ 1431655768;
    HEAP32[5263284 >> 2] = $12;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = $newbase + 8 | 0;
    var $2 = $1;
    var $3 = $2 & 7;
    var $4 = ($3 | 0) == 0;
    if ($4) {
      var $9 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $6 = -$2 | 0;
    var $7 = $6 & 7;
    var $9 = $7;
    label = 4;
    break;
   case 4:
    var $9;
    var $10 = $newbase + $9 | 0;
    var $11 = $oldbase + 8 | 0;
    var $12 = $11;
    var $13 = $12 & 7;
    var $14 = ($13 | 0) == 0;
    if ($14) {
      var $19 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $16 = -$12 | 0;
    var $17 = $16 & 7;
    var $19 = $17;
    label = 6;
    break;
   case 6:
    var $19;
    var $20 = $oldbase + $19 | 0;
    var $21 = $20;
    var $22 = $20;
    var $23 = $10;
    var $24 = $22 - $23 | 0;
    var $_sum = $9 + $nb | 0;
    var $25 = $newbase + $_sum | 0;
    var $26 = $25;
    var $27 = $24 - $nb | 0;
    var $28 = $nb | 3;
    var $_sum1 = $9 + 4 | 0;
    var $29 = $newbase + $_sum1 | 0;
    var $30 = $29;
    HEAP32[$30 >> 2] = $28;
    var $31 = HEAP32[5587620 >> 2];
    var $32 = ($21 | 0) == ($31 | 0);
    if ($32) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $34 = HEAP32[5587608 >> 2];
    var $35 = $34 + $27 | 0;
    HEAP32[5587608 >> 2] = $35;
    HEAP32[5587620 >> 2] = $26;
    var $36 = $35 | 1;
    var $_sum42 = $_sum + 4 | 0;
    var $37 = $newbase + $_sum42 | 0;
    var $38 = $37;
    HEAP32[$38 >> 2] = $36;
    label = 75;
    break;
   case 8:
    var $40 = HEAP32[5587616 >> 2];
    var $41 = ($21 | 0) == ($40 | 0);
    if ($41) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $43 = HEAP32[5587604 >> 2];
    var $44 = $43 + $27 | 0;
    HEAP32[5587604 >> 2] = $44;
    HEAP32[5587616 >> 2] = $26;
    var $45 = $44 | 1;
    var $_sum40 = $_sum + 4 | 0;
    var $46 = $newbase + $_sum40 | 0;
    var $47 = $46;
    HEAP32[$47 >> 2] = $45;
    var $_sum41 = $44 + $_sum | 0;
    var $48 = $newbase + $_sum41 | 0;
    var $49 = $48;
    HEAP32[$49 >> 2] = $44;
    label = 75;
    break;
   case 10:
    var $_sum2 = $19 + 4 | 0;
    var $51 = $oldbase + $_sum2 | 0;
    var $52 = $51;
    var $53 = HEAP32[$52 >> 2];
    var $54 = $53 & 3;
    var $55 = ($54 | 0) == 1;
    if ($55) {
      label = 11;
      break;
    } else {
      var $oldfirst_0 = $21;
      var $qsize_0 = $27;
      label = 52;
      break;
    }
   case 11:
    var $57 = $53 & -8;
    var $58 = $53 >>> 3;
    var $59 = $53 >>> 0 < 256;
    if ($59) {
      label = 12;
      break;
    } else {
      label = 20;
      break;
    }
   case 12:
    var $_sum3738 = $19 | 8;
    var $61 = $oldbase + $_sum3738 | 0;
    var $62 = $61;
    var $63 = HEAP32[$62 >> 2];
    var $_sum39 = $19 + 12 | 0;
    var $64 = $oldbase + $_sum39 | 0;
    var $65 = $64;
    var $66 = HEAP32[$65 >> 2];
    var $67 = ($63 | 0) == ($66 | 0);
    if ($67) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $69 = 1 << $58;
    var $70 = $69 ^ -1;
    var $71 = HEAP32[5587596 >> 2];
    var $72 = $71 & $70;
    HEAP32[5587596 >> 2] = $72;
    label = 51;
    break;
   case 14:
    var $74 = $58 << 1;
    var $75 = 5587636 + ($74 << 2) | 0;
    var $76 = $75;
    var $77 = ($63 | 0) == ($76 | 0);
    if ($77) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $79 = $63;
    var $80 = HEAP32[5587612 >> 2];
    var $81 = $79 >>> 0 < $80 >>> 0;
    if ($81) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $83 = ($66 | 0) == ($76 | 0);
    if ($83) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $85 = $66;
    var $86 = HEAP32[5587612 >> 2];
    var $87 = $85 >>> 0 < $86 >>> 0;
    if ($87) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $88 = $63 + 12 | 0;
    HEAP32[$88 >> 2] = $66;
    var $89 = $66 + 8 | 0;
    HEAP32[$89 >> 2] = $63;
    label = 51;
    break;
   case 19:
    _abort();
   case 20:
    var $91 = $20;
    var $_sum34 = $19 | 24;
    var $92 = $oldbase + $_sum34 | 0;
    var $93 = $92;
    var $94 = HEAP32[$93 >> 2];
    var $_sum5 = $19 + 12 | 0;
    var $95 = $oldbase + $_sum5 | 0;
    var $96 = $95;
    var $97 = HEAP32[$96 >> 2];
    var $98 = ($97 | 0) == ($91 | 0);
    if ($98) {
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_sum3536 = $19 | 8;
    var $100 = $oldbase + $_sum3536 | 0;
    var $101 = $100;
    var $102 = HEAP32[$101 >> 2];
    var $103 = $102;
    var $104 = HEAP32[5587612 >> 2];
    var $105 = $103 >>> 0 < $104 >>> 0;
    if ($105) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $107 = $102 + 12 | 0;
    HEAP32[$107 >> 2] = $97;
    var $108 = $97 + 8 | 0;
    HEAP32[$108 >> 2] = $102;
    var $R_1 = $97;
    label = 31;
    break;
   case 23:
    _abort();
   case 24:
    var $_sum67 = $19 | 16;
    var $_sum8 = $_sum67 + 4 | 0;
    var $111 = $oldbase + $_sum8 | 0;
    var $112 = $111;
    var $113 = HEAP32[$112 >> 2];
    var $114 = ($113 | 0) == 0;
    if ($114) {
      label = 25;
      break;
    } else {
      var $R_0 = $113;
      var $RP_0 = $112;
      label = 26;
      break;
    }
   case 25:
    var $116 = $oldbase + $_sum67 | 0;
    var $117 = $116;
    var $118 = HEAP32[$117 >> 2];
    var $119 = ($118 | 0) == 0;
    if ($119) {
      var $R_1 = 0;
      label = 31;
      break;
    } else {
      var $R_0 = $118;
      var $RP_0 = $117;
      label = 26;
      break;
    }
   case 26:
    var $RP_0;
    var $R_0;
    var $120 = $R_0 + 20 | 0;
    var $121 = HEAP32[$120 >> 2];
    var $122 = ($121 | 0) == 0;
    if ($122) {
      label = 27;
      break;
    } else {
      var $R_0 = $121;
      var $RP_0 = $120;
      label = 26;
      break;
    }
   case 27:
    var $124 = $R_0 + 16 | 0;
    var $125 = HEAP32[$124 >> 2];
    var $126 = ($125 | 0) == 0;
    if ($126) {
      label = 28;
      break;
    } else {
      var $R_0 = $125;
      var $RP_0 = $124;
      label = 26;
      break;
    }
   case 28:
    var $128 = $RP_0;
    var $129 = HEAP32[5587612 >> 2];
    var $130 = $128 >>> 0 < $129 >>> 0;
    if ($130) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 31;
    break;
   case 30:
    _abort();
   case 31:
    var $R_1;
    var $134 = ($94 | 0) == 0;
    if ($134) {
      label = 51;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $_sum30 = $19 + 28 | 0;
    var $136 = $oldbase + $_sum30 | 0;
    var $137 = $136;
    var $138 = HEAP32[$137 >> 2];
    var $139 = 5587900 + ($138 << 2) | 0;
    var $140 = HEAP32[$139 >> 2];
    var $141 = ($91 | 0) == ($140 | 0);
    if ($141) {
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 33:
    HEAP32[$139 >> 2] = $R_1;
    var $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 34;
      break;
    } else {
      label = 41;
      break;
    }
   case 34:
    var $143 = HEAP32[$137 >> 2];
    var $144 = 1 << $143;
    var $145 = $144 ^ -1;
    var $146 = HEAP32[5587600 >> 2];
    var $147 = $146 & $145;
    HEAP32[5587600 >> 2] = $147;
    label = 51;
    break;
   case 35:
    var $149 = $94;
    var $150 = HEAP32[5587612 >> 2];
    var $151 = $149 >>> 0 < $150 >>> 0;
    if ($151) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $153 = $94 + 16 | 0;
    var $154 = HEAP32[$153 >> 2];
    var $155 = ($154 | 0) == ($91 | 0);
    if ($155) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[$153 >> 2] = $R_1;
    label = 40;
    break;
   case 38:
    var $158 = $94 + 20 | 0;
    HEAP32[$158 >> 2] = $R_1;
    label = 40;
    break;
   case 39:
    _abort();
   case 40:
    var $161 = ($R_1 | 0) == 0;
    if ($161) {
      label = 51;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $163 = $R_1;
    var $164 = HEAP32[5587612 >> 2];
    var $165 = $163 >>> 0 < $164 >>> 0;
    if ($165) {
      label = 50;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $167 = $R_1 + 24 | 0;
    HEAP32[$167 >> 2] = $94;
    var $_sum3132 = $19 | 16;
    var $168 = $oldbase + $_sum3132 | 0;
    var $169 = $168;
    var $170 = HEAP32[$169 >> 2];
    var $171 = ($170 | 0) == 0;
    if ($171) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $173 = $170;
    var $174 = HEAP32[5587612 >> 2];
    var $175 = $173 >>> 0 < $174 >>> 0;
    if ($175) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $177 = $R_1 + 16 | 0;
    HEAP32[$177 >> 2] = $170;
    var $178 = $170 + 24 | 0;
    HEAP32[$178 >> 2] = $R_1;
    label = 46;
    break;
   case 45:
    _abort();
   case 46:
    var $_sum33 = $_sum3132 + 4 | 0;
    var $181 = $oldbase + $_sum33 | 0;
    var $182 = $181;
    var $183 = HEAP32[$182 >> 2];
    var $184 = ($183 | 0) == 0;
    if ($184) {
      label = 51;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $186 = $183;
    var $187 = HEAP32[5587612 >> 2];
    var $188 = $186 >>> 0 < $187 >>> 0;
    if ($188) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $190 = $R_1 + 20 | 0;
    HEAP32[$190 >> 2] = $183;
    var $191 = $183 + 24 | 0;
    HEAP32[$191 >> 2] = $R_1;
    label = 51;
    break;
   case 49:
    _abort();
   case 50:
    _abort();
   case 51:
    var $_sum9 = $57 | $19;
    var $195 = $oldbase + $_sum9 | 0;
    var $196 = $195;
    var $197 = $57 + $27 | 0;
    var $oldfirst_0 = $196;
    var $qsize_0 = $197;
    label = 52;
    break;
   case 52:
    var $qsize_0;
    var $oldfirst_0;
    var $199 = $oldfirst_0 + 4 | 0;
    var $200 = HEAP32[$199 >> 2];
    var $201 = $200 & -2;
    HEAP32[$199 >> 2] = $201;
    var $202 = $qsize_0 | 1;
    var $_sum10 = $_sum + 4 | 0;
    var $203 = $newbase + $_sum10 | 0;
    var $204 = $203;
    HEAP32[$204 >> 2] = $202;
    var $_sum11 = $qsize_0 + $_sum | 0;
    var $205 = $newbase + $_sum11 | 0;
    var $206 = $205;
    HEAP32[$206 >> 2] = $qsize_0;
    var $207 = $qsize_0 >>> 3;
    var $208 = $qsize_0 >>> 0 < 256;
    if ($208) {
      label = 53;
      break;
    } else {
      label = 58;
      break;
    }
   case 53:
    var $210 = $207 << 1;
    var $211 = 5587636 + ($210 << 2) | 0;
    var $212 = $211;
    var $213 = HEAP32[5587596 >> 2];
    var $214 = 1 << $207;
    var $215 = $213 & $214;
    var $216 = ($215 | 0) == 0;
    if ($216) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $218 = $213 | $214;
    HEAP32[5587596 >> 2] = $218;
    var $_sum26_pre = $210 + 2 | 0;
    var $_pre = 5587636 + ($_sum26_pre << 2) | 0;
    var $F4_0 = $212;
    var $_pre_phi = $_pre;
    label = 57;
    break;
   case 55:
    var $_sum29 = $210 + 2 | 0;
    var $220 = 5587636 + ($_sum29 << 2) | 0;
    var $221 = HEAP32[$220 >> 2];
    var $222 = $221;
    var $223 = HEAP32[5587612 >> 2];
    var $224 = $222 >>> 0 < $223 >>> 0;
    if ($224) {
      label = 56;
      break;
    } else {
      var $F4_0 = $221;
      var $_pre_phi = $220;
      label = 57;
      break;
    }
   case 56:
    _abort();
   case 57:
    var $_pre_phi;
    var $F4_0;
    HEAP32[$_pre_phi >> 2] = $26;
    var $227 = $F4_0 + 12 | 0;
    HEAP32[$227 >> 2] = $26;
    var $_sum27 = $_sum + 8 | 0;
    var $228 = $newbase + $_sum27 | 0;
    var $229 = $228;
    HEAP32[$229 >> 2] = $F4_0;
    var $_sum28 = $_sum + 12 | 0;
    var $230 = $newbase + $_sum28 | 0;
    var $231 = $230;
    HEAP32[$231 >> 2] = $212;
    label = 75;
    break;
   case 58:
    var $233 = $25;
    var $234 = $qsize_0 >>> 8;
    var $235 = ($234 | 0) == 0;
    if ($235) {
      var $I7_0 = 0;
      label = 61;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $237 = $qsize_0 >>> 0 > 16777215;
    if ($237) {
      var $I7_0 = 31;
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $239 = $234 + 1048320 | 0;
    var $240 = $239 >>> 16;
    var $241 = $240 & 8;
    var $242 = $234 << $241;
    var $243 = $242 + 520192 | 0;
    var $244 = $243 >>> 16;
    var $245 = $244 & 4;
    var $246 = $245 | $241;
    var $247 = $242 << $245;
    var $248 = $247 + 245760 | 0;
    var $249 = $248 >>> 16;
    var $250 = $249 & 2;
    var $251 = $246 | $250;
    var $252 = 14 - $251 | 0;
    var $253 = $247 << $250;
    var $254 = $253 >>> 15;
    var $255 = $252 + $254 | 0;
    var $256 = $255 << 1;
    var $257 = $255 + 7 | 0;
    var $258 = $qsize_0 >>> ($257 >>> 0);
    var $259 = $258 & 1;
    var $260 = $259 | $256;
    var $I7_0 = $260;
    label = 61;
    break;
   case 61:
    var $I7_0;
    var $262 = 5587900 + ($I7_0 << 2) | 0;
    var $_sum12 = $_sum + 28 | 0;
    var $263 = $newbase + $_sum12 | 0;
    var $264 = $263;
    HEAP32[$264 >> 2] = $I7_0;
    var $_sum13 = $_sum + 16 | 0;
    var $265 = $newbase + $_sum13 | 0;
    var $_sum14 = $_sum + 20 | 0;
    var $266 = $newbase + $_sum14 | 0;
    var $267 = $266;
    HEAP32[$267 >> 2] = 0;
    var $268 = $265;
    HEAP32[$268 >> 2] = 0;
    var $269 = HEAP32[5587600 >> 2];
    var $270 = 1 << $I7_0;
    var $271 = $269 & $270;
    var $272 = ($271 | 0) == 0;
    if ($272) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    var $274 = $269 | $270;
    HEAP32[5587600 >> 2] = $274;
    HEAP32[$262 >> 2] = $233;
    var $275 = $262;
    var $_sum15 = $_sum + 24 | 0;
    var $276 = $newbase + $_sum15 | 0;
    var $277 = $276;
    HEAP32[$277 >> 2] = $275;
    var $_sum16 = $_sum + 12 | 0;
    var $278 = $newbase + $_sum16 | 0;
    var $279 = $278;
    HEAP32[$279 >> 2] = $233;
    var $_sum17 = $_sum + 8 | 0;
    var $280 = $newbase + $_sum17 | 0;
    var $281 = $280;
    HEAP32[$281 >> 2] = $233;
    label = 75;
    break;
   case 63:
    var $283 = HEAP32[$262 >> 2];
    var $284 = ($I7_0 | 0) == 31;
    if ($284) {
      var $289 = 0;
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $286 = $I7_0 >>> 1;
    var $287 = 25 - $286 | 0;
    var $289 = $287;
    label = 65;
    break;
   case 65:
    var $289;
    var $290 = $qsize_0 << $289;
    var $K8_0 = $290;
    var $T_0 = $283;
    label = 66;
    break;
   case 66:
    var $T_0;
    var $K8_0;
    var $292 = $T_0 + 4 | 0;
    var $293 = HEAP32[$292 >> 2];
    var $294 = $293 & -8;
    var $295 = ($294 | 0) == ($qsize_0 | 0);
    if ($295) {
      label = 71;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $297 = $K8_0 >>> 31;
    var $298 = $T_0 + 16 + ($297 << 2) | 0;
    var $299 = HEAP32[$298 >> 2];
    var $300 = ($299 | 0) == 0;
    var $301 = $K8_0 << 1;
    if ($300) {
      label = 68;
      break;
    } else {
      var $K8_0 = $301;
      var $T_0 = $299;
      label = 66;
      break;
    }
   case 68:
    var $303 = $298;
    var $304 = HEAP32[5587612 >> 2];
    var $305 = $303 >>> 0 < $304 >>> 0;
    if ($305) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    HEAP32[$298 >> 2] = $233;
    var $_sum23 = $_sum + 24 | 0;
    var $307 = $newbase + $_sum23 | 0;
    var $308 = $307;
    HEAP32[$308 >> 2] = $T_0;
    var $_sum24 = $_sum + 12 | 0;
    var $309 = $newbase + $_sum24 | 0;
    var $310 = $309;
    HEAP32[$310 >> 2] = $233;
    var $_sum25 = $_sum + 8 | 0;
    var $311 = $newbase + $_sum25 | 0;
    var $312 = $311;
    HEAP32[$312 >> 2] = $233;
    label = 75;
    break;
   case 70:
    _abort();
   case 71:
    var $315 = $T_0 + 8 | 0;
    var $316 = HEAP32[$315 >> 2];
    var $317 = $T_0;
    var $318 = HEAP32[5587612 >> 2];
    var $319 = $317 >>> 0 < $318 >>> 0;
    if ($319) {
      label = 74;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $321 = $316;
    var $322 = $321 >>> 0 < $318 >>> 0;
    if ($322) {
      label = 74;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $324 = $316 + 12 | 0;
    HEAP32[$324 >> 2] = $233;
    HEAP32[$315 >> 2] = $233;
    var $_sum20 = $_sum + 8 | 0;
    var $325 = $newbase + $_sum20 | 0;
    var $326 = $325;
    HEAP32[$326 >> 2] = $316;
    var $_sum21 = $_sum + 12 | 0;
    var $327 = $newbase + $_sum21 | 0;
    var $328 = $327;
    HEAP32[$328 >> 2] = $T_0;
    var $_sum22 = $_sum + 24 | 0;
    var $329 = $newbase + $_sum22 | 0;
    var $330 = $329;
    HEAP32[$330 >> 2] = 0;
    label = 75;
    break;
   case 74:
    _abort();
   case 75:
    var $_sum1819 = $9 | 8;
    var $332 = $newbase + $_sum1819 | 0;
    return $332;
  }
}
_prepend_alloc["X"] = 1;
function _add_segment($tbase, $tsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $1 = HEAP32[5587620 >> 2];
    var $2 = $1;
    var $3 = _segment_holding($2);
    var $4 = $3 | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6 = $3 + 4 | 0;
    var $7 = HEAP32[$6 >> 2];
    var $8 = $5 + $7 | 0;
    var $_sum = $7 - 47 | 0;
    var $_sum1 = $7 - 39 | 0;
    var $9 = $5 + $_sum1 | 0;
    var $10 = $9;
    var $11 = $10 & 7;
    var $12 = ($11 | 0) == 0;
    if ($12) {
      var $17 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $14 = -$10 | 0;
    var $15 = $14 & 7;
    var $17 = $15;
    label = 4;
    break;
   case 4:
    var $17;
    var $_sum2 = $_sum + $17 | 0;
    var $18 = $5 + $_sum2 | 0;
    var $19 = $1 + 16 | 0;
    var $20 = $19;
    var $21 = $18 >>> 0 < $20 >>> 0;
    var $22 = $21 ? $2 : $18;
    var $23 = $22 + 8 | 0;
    var $24 = $23;
    var $25 = $tbase;
    var $26 = $tsize - 40 | 0;
    _init_top($25, $26);
    var $27 = $22 + 4 | 0;
    var $28 = $27;
    HEAP32[$28 >> 2] = 27;
    HEAP32[$23 >> 2] = HEAP32[5588040 >> 2];
    HEAP32[$23 + 4 >> 2] = HEAP32[5588044 >> 2];
    HEAP32[$23 + 8 >> 2] = HEAP32[5588048 >> 2];
    HEAP32[$23 + 12 >> 2] = HEAP32[5588052 >> 2];
    HEAP32[5588040 >> 2] = $tbase;
    HEAP32[5588044 >> 2] = $tsize;
    HEAP32[5588052 >> 2] = 0;
    HEAP32[5588048 >> 2] = $24;
    var $29 = $22 + 28 | 0;
    var $30 = $29;
    HEAP32[$30 >> 2] = 7;
    var $31 = $22 + 32 | 0;
    var $32 = $31 >>> 0 < $8 >>> 0;
    if ($32) {
      var $33 = $30;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $33;
    var $34 = $33 + 4 | 0;
    HEAP32[$34 >> 2] = 7;
    var $35 = $33 + 8 | 0;
    var $36 = $35;
    var $37 = $36 >>> 0 < $8 >>> 0;
    if ($37) {
      var $33 = $34;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $38 = ($22 | 0) == ($2 | 0);
    if ($38) {
      label = 30;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $40 = $22;
    var $41 = $1;
    var $42 = $40 - $41 | 0;
    var $43 = $2 + $42 | 0;
    var $_sum3 = $42 + 4 | 0;
    var $44 = $2 + $_sum3 | 0;
    var $45 = $44;
    var $46 = HEAP32[$45 >> 2];
    var $47 = $46 & -2;
    HEAP32[$45 >> 2] = $47;
    var $48 = $42 | 1;
    var $49 = $1 + 4 | 0;
    HEAP32[$49 >> 2] = $48;
    var $50 = $43;
    HEAP32[$50 >> 2] = $42;
    var $51 = $42 >>> 3;
    var $52 = $42 >>> 0 < 256;
    if ($52) {
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 8:
    var $54 = $51 << 1;
    var $55 = 5587636 + ($54 << 2) | 0;
    var $56 = $55;
    var $57 = HEAP32[5587596 >> 2];
    var $58 = 1 << $51;
    var $59 = $57 & $58;
    var $60 = ($59 | 0) == 0;
    if ($60) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $62 = $57 | $58;
    HEAP32[5587596 >> 2] = $62;
    var $_sum10_pre = $54 + 2 | 0;
    var $_pre = 5587636 + ($_sum10_pre << 2) | 0;
    var $F_0 = $56;
    var $_pre_phi = $_pre;
    label = 12;
    break;
   case 10:
    var $_sum11 = $54 + 2 | 0;
    var $64 = 5587636 + ($_sum11 << 2) | 0;
    var $65 = HEAP32[$64 >> 2];
    var $66 = $65;
    var $67 = HEAP32[5587612 >> 2];
    var $68 = $66 >>> 0 < $67 >>> 0;
    if ($68) {
      label = 11;
      break;
    } else {
      var $F_0 = $65;
      var $_pre_phi = $64;
      label = 12;
      break;
    }
   case 11:
    _abort();
   case 12:
    var $_pre_phi;
    var $F_0;
    HEAP32[$_pre_phi >> 2] = $1;
    var $71 = $F_0 + 12 | 0;
    HEAP32[$71 >> 2] = $1;
    var $72 = $1 + 8 | 0;
    HEAP32[$72 >> 2] = $F_0;
    var $73 = $1 + 12 | 0;
    HEAP32[$73 >> 2] = $56;
    label = 30;
    break;
   case 13:
    var $75 = $1;
    var $76 = $42 >>> 8;
    var $77 = ($76 | 0) == 0;
    if ($77) {
      var $I1_0 = 0;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $79 = $42 >>> 0 > 16777215;
    if ($79) {
      var $I1_0 = 31;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $81 = $76 + 1048320 | 0;
    var $82 = $81 >>> 16;
    var $83 = $82 & 8;
    var $84 = $76 << $83;
    var $85 = $84 + 520192 | 0;
    var $86 = $85 >>> 16;
    var $87 = $86 & 4;
    var $88 = $87 | $83;
    var $89 = $84 << $87;
    var $90 = $89 + 245760 | 0;
    var $91 = $90 >>> 16;
    var $92 = $91 & 2;
    var $93 = $88 | $92;
    var $94 = 14 - $93 | 0;
    var $95 = $89 << $92;
    var $96 = $95 >>> 15;
    var $97 = $94 + $96 | 0;
    var $98 = $97 << 1;
    var $99 = $97 + 7 | 0;
    var $100 = $42 >>> ($99 >>> 0);
    var $101 = $100 & 1;
    var $102 = $101 | $98;
    var $I1_0 = $102;
    label = 16;
    break;
   case 16:
    var $I1_0;
    var $104 = 5587900 + ($I1_0 << 2) | 0;
    var $105 = $1 + 28 | 0;
    var $I1_0_c = $I1_0;
    HEAP32[$105 >> 2] = $I1_0_c;
    var $106 = $1 + 20 | 0;
    HEAP32[$106 >> 2] = 0;
    var $107 = $1 + 16 | 0;
    HEAP32[$107 >> 2] = 0;
    var $108 = HEAP32[5587600 >> 2];
    var $109 = 1 << $I1_0;
    var $110 = $108 & $109;
    var $111 = ($110 | 0) == 0;
    if ($111) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $113 = $108 | $109;
    HEAP32[5587600 >> 2] = $113;
    HEAP32[$104 >> 2] = $75;
    var $114 = $1 + 24 | 0;
    var $_c = $104;
    HEAP32[$114 >> 2] = $_c;
    var $115 = $1 + 12 | 0;
    HEAP32[$115 >> 2] = $1;
    var $116 = $1 + 8 | 0;
    HEAP32[$116 >> 2] = $1;
    label = 30;
    break;
   case 18:
    var $118 = HEAP32[$104 >> 2];
    var $119 = ($I1_0 | 0) == 31;
    if ($119) {
      var $124 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $121 = $I1_0 >>> 1;
    var $122 = 25 - $121 | 0;
    var $124 = $122;
    label = 20;
    break;
   case 20:
    var $124;
    var $125 = $42 << $124;
    var $K2_0 = $125;
    var $T_0 = $118;
    label = 21;
    break;
   case 21:
    var $T_0;
    var $K2_0;
    var $127 = $T_0 + 4 | 0;
    var $128 = HEAP32[$127 >> 2];
    var $129 = $128 & -8;
    var $130 = ($129 | 0) == ($42 | 0);
    if ($130) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $132 = $K2_0 >>> 31;
    var $133 = $T_0 + 16 + ($132 << 2) | 0;
    var $134 = HEAP32[$133 >> 2];
    var $135 = ($134 | 0) == 0;
    var $136 = $K2_0 << 1;
    if ($135) {
      label = 23;
      break;
    } else {
      var $K2_0 = $136;
      var $T_0 = $134;
      label = 21;
      break;
    }
   case 23:
    var $138 = $133;
    var $139 = HEAP32[5587612 >> 2];
    var $140 = $138 >>> 0 < $139 >>> 0;
    if ($140) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[$133 >> 2] = $75;
    var $142 = $1 + 24 | 0;
    var $T_0_c7 = $T_0;
    HEAP32[$142 >> 2] = $T_0_c7;
    var $143 = $1 + 12 | 0;
    HEAP32[$143 >> 2] = $1;
    var $144 = $1 + 8 | 0;
    HEAP32[$144 >> 2] = $1;
    label = 30;
    break;
   case 25:
    _abort();
   case 26:
    var $147 = $T_0 + 8 | 0;
    var $148 = HEAP32[$147 >> 2];
    var $149 = $T_0;
    var $150 = HEAP32[5587612 >> 2];
    var $151 = $149 >>> 0 < $150 >>> 0;
    if ($151) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $153 = $148;
    var $154 = $153 >>> 0 < $150 >>> 0;
    if ($154) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $156 = $148 + 12 | 0;
    HEAP32[$156 >> 2] = $75;
    HEAP32[$147 >> 2] = $75;
    var $157 = $1 + 8 | 0;
    var $_c6 = $148;
    HEAP32[$157 >> 2] = $_c6;
    var $158 = $1 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$158 >> 2] = $T_0_c;
    var $159 = $1 + 24 | 0;
    HEAP32[$159 >> 2] = 0;
    label = 30;
    break;
   case 29:
    _abort();
   case 30:
    return;
  }
}



_add_segment["X"]=1;

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    add: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_pre_interpolate","_lossless_dng_load_raw","_unpacked_load_raw","_init_top","_nikon_3700","_parse_riff","_canon_600_fixed_wb","_smal_v9_load_raw","_nikon_load_raw","_kodak_jpeg_load_raw","_jpeg_thumb","_parse_tiff","_tiff_set","_foveon_camf_param","_vng_interpolate","_linear_table","_redcine_load_raw","_foveon_thumb","_ljpeg_diff","_phase_one_correct","_sget2","_sget4","_find_green","_flip_index","_release_unused_segments","_foveon_camf_matrix","_foveon_make_curves","_fuji_rotate","_sys_alloc","_free","_simple_coeff","_parse_kodak_ifd","_parse_redcine","_foveon_dp_load_raw","_foveon_decoder","_read_shorts","_minolta_z2","_main","_ljpeg_end","_init_bins","_parse_ciff","_leaf_hdr_load_raw","_parse_smal","_adobe_copy_pixel","_recover_highlights","_eight_bit_load_raw","_parse_thumb_note","_kodak_thumb_load_raw","_ljpeg_row","_phase_one_flat_field","_get_timestamp","_tmalloc_large","_canon_has_lowbits","_pana_bits","_derror","_my_memmem","_canon_600_correct","_scale_colors","_gamma_curve","_kodak_radc_load_raw","_lin_interpolate","_parse_phase_one","_phase_one_load_raw","_ahd_interpolate","_parse_jpeg","_parse_makernote","_ppm_thumb","_kodak_65000_decode","_sony_decrypt","_parse_minolta","_ppm16_thumb","_int_to_float","_canon_600_auto_wb","_canon_600_color","_phase_one_load_raw_c","_pentax_load_raw","_adobe_coeff","_parse_gps","_hasselblad_load_raw","_sys_trim","_canon_600_coeff","_foveon_huff","_border_interpolate","_make_decoder_ref","_tmalloc_small","_canon_600_load_raw","_foveon_interpolate","_hat_transform","_median_filter","_parse_fuji","_sony_load_raw","_prepend_alloc","_merror","_crop_masked_pixels","_sinar_4shot_load_raw","_apply_tiff","_kodak_262_load_raw","_crw_init_tables","_foveon_gets","_packed_load_raw","_getint","_canon_load_raw","_ph1_bithuff","_kodak_yrgb_load_raw","_median4","_rollei_thumb","_olympus_load_raw","_getbithuff","_parse_exif","_stretch","_imacon_full_load_raw","_smal_v6_load_raw","_packed_dng_load_raw","_tiff_get","_kodak_dc120_load_raw","_smal_decode_segment","_add_segment","_cam_xyz_coeff","_foveon_make_curve","_identify","_malloc","_kodak_rgb_load_raw","_ciff_block_1030","_bad_pixels","_foveon_fixed","_foveon_sd_load_raw","_pseudoinverse","_lossy_dng_load_raw","_get2","_fill_holes","_kodak_ycbcr_load_raw","_get4","_subtract","_canon_sraw_load_raw","_blend_highlights","_minolta_rd175_load_raw","_kodak_65000_load_raw","_fcol","_foveon_load_camf","_nikon_e2100","_ljpeg_start","_quicktake_100_load_raw","_canon_s2is","_calloc","_sony_arw2_load_raw","_foveon_apply_curve","_panasonic_load_raw","_sony_arw_load_raw","_lossless_jpeg_load_raw","_init_mparams","_layer_thumb","_parse_sinar_ia","_parse_rollei","_parse_tiff_ifd","_make_decoder","_remove_zeroes","_segment_holding","_rollei_load_raw","_nokia_load_raw","_getreal","_wavelet_denoise","_nikon_e995","_tiff_head","_foveon_avg","_parse_external_jpeg","_guess_byte_order","_romm_coeff","_parse_cine","_write_ppm_tiff","_raw","_parse_mos","_ppg_interpolate","_parse_foveon","_convert_to_rgb"]




    root.run = run;
    root.FS = FS;
}());
