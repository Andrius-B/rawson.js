// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";


// *** Environment setup code ***
var arguments_ = [];

var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  print = function(x) {
    process['stdout'].write(x + '\n');
  };
  printErr = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');

  read = function(filename) {
    var ret = nodeFS['readFileSync'](filename).toString();
    if (!ret && filename[0] != '/') {
      filename = __dirname.split('/').slice(0, -1).join('/') + '/src/' + filename;
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  arguments_ = process['argv'].slice(2);

} else if (ENVIRONMENT_IS_SHELL) {
  // Polyfill over SpiderMonkey/V8 differences
  if (!this['read']) {
    read = function(f) { snarf(f) };
  }

  if (!this['arguments']) {
    arguments_ = scriptArgs;
  } else {
    arguments_ = arguments;
  }

} else if (ENVIRONMENT_IS_WEB) {
  print = printErr = function(x) {
    console.log(x);
  };

  read = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (this['arguments']) {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  load = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}

if (typeof load == 'undefined' && typeof read != 'undefined') {
  load = function(f) {
    globalEval(read(f));
  };
}

if (typeof printErr === 'undefined') {
  printErr = function(){};
}

if (typeof print === 'undefined') {
  print = printErr;
}
// *** Environment setup code ***


try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
if (!Module.arguments) {
  Module.arguments = arguments_;
}
if (Module.print) {
  print = Module.print;
}

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else {
      return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
    }
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ [^}]* }>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size && type[type.length-1] == '*') {
      size = Runtime.QUANTUM_SIZE; // A pointer
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (!struct) struct = (typeof Types === 'undefined' ? Runtime : Types).structMetadata[typeName.replace(/.*\./, '')];
      if (!struct) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName + '. Perhaps due to inheritance, which is not supported yet?');
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = Math.ceil((STACKTOP)/4)*4;assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = Math.ceil((STATICTOP)/4)*4; if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempDoubleBuffer = new ArrayBuffer(8);
var tempDoubleI32 = new Int32Array(tempDoubleBuffer);
var tempDoubleF64 = new Float64Array(tempDoubleBuffer);

function abort(text) {
  print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (HEAP32[((ptr)>>2)]=value[0],HEAP32[((ptr+4)>>2)]=value[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[((ptr+4)>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.

function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return [HEAPU32[((ptr)>>2)],HEAPU32[((ptr+4)>>2)]];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[((ptr+4)>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr) {
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[(ptr+i)]);
    if (t == nullByte) { break; } else {}
    ret += t;
    i += 1;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return Math.ceil(x/PAGE_SIZE)*PAGE_SIZE;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP8[(i)]=base[i]
}

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}


// Copies a list of num items on the HEAP into a
// a normal JavaScript array of numbers
function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr+num)); // Make a normal array out of the typed 'view'
                                                                   // Consider making a typed array here, for speed?
  return HEAP.slice(ptr, ptr+num);
}
Module['Array_copy'] = Array_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP8[(ptr+i)]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Copies a C-style string, terminated by a zero, from the HEAP into
// a normal JavaScript array of numbers
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len-1] = 0;
  return ret;
}
Module['String_copy'] = String_copy;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// === Body ===




function _int_to_float($i) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $u=__stackBase__;
  $1=$i;
  var $2=$1;
  var $3=$u;
  HEAP32[(($3)>>2)]=$2;
  var $4=$u;
  var $5=HEAPF32[(($4)>>2)];
  STACKTOP = __stackBase__;
  return $5;
}


function _fc($row, $col) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      $2=$row;
      $3=$col;
      var $4=HEAP32[((_filters)>>2)];
      var $5=((($4))|0)!=1;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      var $7=HEAPU32[((_filters)>>2)];
      var $8=$2;
      var $9=($8) << 1;
      var $10=($9) & 14;
      var $11=$3;
      var $12=($11) & 1;
      var $13=((($10)+($12))|0);
      var $14=($13) << 1;
      var $15=($7) >>> ((($14))>>>0);
      var $16=($15) & 3;
      $1=$16;
      __label__ = 3; break;
    case 2: // $17
      var $18=$3;
      var $19=HEAPU16[((_left_margin)>>1)];
      var $20=((($19))&65535);
      var $21=((($18)+($20))|0);
      var $22=($21) & 15;
      var $23=$2;
      var $24=HEAPU16[((_top_margin)>>1)];
      var $25=((($24))&65535);
      var $26=((($23)+($25))|0);
      var $27=($26) & 15;
      var $28=((_fc_filter+($27<<4))|0);
      var $29=(($28+$22)|0);
      var $30=HEAP8[($29)];
      var $31=((($30) << 24) >> 24);
      $1=$31;
      __label__ = 3; break;
    case 3: // $32
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _sget2($s) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $2=$s;
      var $3=HEAP16[((_order)>>1)];
      var $4=((($3) << 16) >> 16);
      var $5=((($4))|0)==18761;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAPU8[($8)];
      var $10=((($9))&255);
      var $11=$2;
      var $12=(($11+1)|0);
      var $13=HEAPU8[($12)];
      var $14=((($13))&255);
      var $15=($14) << 8;
      var $16=($10) | ($15);
      var $17=((($16)) & 65535);
      $1=$17;
      __label__ = 3; break;
    case 2: // $18
      var $19=$2;
      var $20=(($19)|0);
      var $21=HEAPU8[($20)];
      var $22=((($21))&255);
      var $23=($22) << 8;
      var $24=$2;
      var $25=(($24+1)|0);
      var $26=HEAPU8[($25)];
      var $27=((($26))&255);
      var $28=($23) | ($27);
      var $29=((($28)) & 65535);
      $1=$29;
      __label__ = 3; break;
    case 3: // $30
      var $31=$1;
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _sget4($s) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $2=$s;
      var $3=HEAP16[((_order)>>1)];
      var $4=((($3) << 16) >> 16);
      var $5=((($4))|0)==18761;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAPU8[($8)];
      var $10=((($9))&255);
      var $11=$2;
      var $12=(($11+1)|0);
      var $13=HEAPU8[($12)];
      var $14=((($13))&255);
      var $15=($14) << 8;
      var $16=($10) | ($15);
      var $17=$2;
      var $18=(($17+2)|0);
      var $19=HEAPU8[($18)];
      var $20=((($19))&255);
      var $21=($20) << 16;
      var $22=($16) | ($21);
      var $23=$2;
      var $24=(($23+3)|0);
      var $25=HEAPU8[($24)];
      var $26=((($25))&255);
      var $27=($26) << 24;
      var $28=($22) | ($27);
      $1=$28;
      __label__ = 3; break;
    case 2: // $29
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAPU8[($31)];
      var $33=((($32))&255);
      var $34=($33) << 24;
      var $35=$2;
      var $36=(($35+1)|0);
      var $37=HEAPU8[($36)];
      var $38=((($37))&255);
      var $39=($38) << 16;
      var $40=($34) | ($39);
      var $41=$2;
      var $42=(($41+2)|0);
      var $43=HEAPU8[($42)];
      var $44=((($43))&255);
      var $45=($44) << 8;
      var $46=($40) | ($45);
      var $47=$2;
      var $48=(($47+3)|0);
      var $49=HEAPU8[($48)];
      var $50=((($49))&255);
      var $51=($46) | ($50);
      $1=$51;
      __label__ = 3; break;
    case 3: // $52
      var $53=$1;
      ;
      return $53;
    default: assert(0, "bad label: " + __label__);
  }
}
_sget4["X"]=1;

function _canon_600_fixed_wb($temp) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $lo;
      var $hi;
      var $i;
      var $frac;
      $1=$temp;
      $frac=0;
      $lo=4;
      __label__ = 1; break;
    case 1: // $2
      var $3=$lo;
      var $4=((($3)-1)|0);
      $lo=$4;
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: // $6
      var $7=$lo;
      var $8=((_canon_600_fixed_wb_mul+$7*10)|0);
      var $9=(($8)|0);
      var $10=HEAP16[(($9)>>1)];
      var $11=((($10) << 16) >> 16);
      var $12=$1;
      var $13=((($11))|0) <= ((($12))|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $14
      __label__ = 5; break;
    case 4: // $15
      __label__ = 1; break;
    case 5: // $16
      $hi=0;
      __label__ = 6; break;
    case 6: // $17
      var $18=$hi;
      var $19=((($18))|0) < 3;
      if ($19) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: // $20
      var $21=$hi;
      var $22=((_canon_600_fixed_wb_mul+$21*10)|0);
      var $23=(($22)|0);
      var $24=HEAP16[(($23)>>1)];
      var $25=((($24) << 16) >> 16);
      var $26=$1;
      var $27=((($25))|0) >= ((($26))|0);
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $28
      __label__ = 11; break;
    case 9: // $29
      __label__ = 10; break;
    case 10: // $30
      var $31=$hi;
      var $32=((($31)+1)|0);
      $hi=$32;
      __label__ = 6; break;
    case 11: // $33
      var $34=$lo;
      var $35=$hi;
      var $36=((($34))|0)!=((($35))|0);
      if ($36) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $37
      var $38=$1;
      var $39=$lo;
      var $40=((_canon_600_fixed_wb_mul+$39*10)|0);
      var $41=(($40)|0);
      var $42=HEAP16[(($41)>>1)];
      var $43=((($42) << 16) >> 16);
      var $44=((($38)-($43))|0);
      var $45=((($44))|0);
      var $46=$hi;
      var $47=((_canon_600_fixed_wb_mul+$46*10)|0);
      var $48=(($47)|0);
      var $49=HEAP16[(($48)>>1)];
      var $50=((($49) << 16) >> 16);
      var $51=$lo;
      var $52=((_canon_600_fixed_wb_mul+$51*10)|0);
      var $53=(($52)|0);
      var $54=HEAP16[(($53)>>1)];
      var $55=((($54) << 16) >> 16);
      var $56=((($50)-($55))|0);
      var $57=((($56))|0);
      var $58=($45)/($57);
      $frac=$58;
      __label__ = 13; break;
    case 13: // $59
      $i=1;
      __label__ = 14; break;
    case 14: // $60
      var $61=$i;
      var $62=((($61))|0) < 5;
      if ($62) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $63
      var $64=$frac;
      var $65=$i;
      var $66=$hi;
      var $67=((_canon_600_fixed_wb_mul+$66*10)|0);
      var $68=(($67+($65<<1))|0);
      var $69=HEAP16[(($68)>>1)];
      var $70=((($69) << 16) >> 16);
      var $71=((($70))|0);
      var $72=($64)*($71);
      var $73=$frac;
      var $74=1-($73);
      var $75=$i;
      var $76=$lo;
      var $77=((_canon_600_fixed_wb_mul+$76*10)|0);
      var $78=(($77+($75<<1))|0);
      var $79=HEAP16[(($78)>>1)];
      var $80=((($79) << 16) >> 16);
      var $81=((($80))|0);
      var $82=($74)*($81);
      var $83=($72)+($82);
      var $84=1/($83);
      var $85=$i;
      var $86=((($85)-1)|0);
      var $87=((_pre_mul+($86<<2))|0);
      HEAPF32[(($87)>>2)]=$84;
      __label__ = 16; break;
    case 16: // $88
      var $89=$i;
      var $90=((($89)+1)|0);
      $i=$90;
      __label__ = 14; break;
    case 17: // $91
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_600_fixed_wb["X"]=1;

function _my_memmem($haystack, $haystacklen, $needle, $needlelen) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $c;
      $2=$haystack;
      $3=$haystacklen;
      $4=$needle;
      $5=$needlelen;
      var $6=$2;
      $c=$6;
      __label__ = 1; break;
    case 1: // $7
      var $8=$c;
      var $9=$2;
      var $10=$3;
      var $11=(($9+$10)|0);
      var $12=$5;
      var $13=(((-($12)))|0);
      var $14=(($11+$13)|0);
      var $15=((($8))>>>0) <= ((($14))>>>0);
      if ($15) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $16
      var $17=$c;
      var $18=$4;
      var $19=$5;
      var $20=_memcmp($17, $18, $19);
      var $21=((($20))|0)!=0;
      if ($21) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $22
      var $23=$c;
      $1=$23;
      __label__ = 7; break;
    case 4: // $24
      __label__ = 5; break;
    case 5: // $25
      var $26=$c;
      var $27=(($26+1)|0);
      $c=$27;
      __label__ = 1; break;
    case 6: // $28
      $1=0;
      __label__ = 7; break;
    case 7: // $29
      var $30=$1;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _merror($ptr, $where) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $1=$ptr;
      $2=$where;
      var $3=$1;
      var $4=((($3))|0)!=0;
      if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $5
      ;
      return;
    case 2: // $6
      var $7=HEAP32[((__impure_ptr)>>2)];
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=HEAP32[((_ifname)>>2)];
      var $11=$2;
      var $12=_fprintf($9, ((__str)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$10,HEAP32[((tempInt+4)>>2)]=$11,tempInt));
      _longjmp(((_failure)|0), 1);
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function _derror() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1=HEAP32[((_data_error)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 5; break; } else { __label__ = 1; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=HEAP32[((_ifname)>>2)];
      var $8=_fprintf($6, ((__str1)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$7,tempInt));
      var $9=HEAP32[((_ifp)>>2)];
      var $10=_feof($9);
      var $11=((($10))|0)!=0;
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $12
      var $13=HEAP32[((__impure_ptr)>>2)];
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_fprintf($15, ((__str2)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 3: // $17
      var $18=HEAP32[((__impure_ptr)>>2)];
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=HEAP32[((_ifp)>>2)];
      var $22=_ftello($21);
      var $23=(tempBigIntD=((($22))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      var $24=_fprintf($20, ((__str3)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$23.slice(0)[0],HEAP32[((tempInt+4)>>2)]=$23.slice(0)[1],tempInt));
      __label__ = 4; break;
    case 4: // $25
      __label__ = 5; break;
    case 5: // $26
      var $27=HEAP32[((_data_error)>>2)];
      var $28=((($27)+1)|0);
      HEAP32[((_data_error)>>2)]=$28;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _get2() {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $str=__stackBase__;
  var $1=$str;
  assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1)]=HEAP8[(((_get2_str)|0))]; HEAP8[($1+1)]=HEAP8[(((_get2_str)|0)+1)];
  var $2=(($str)|0);
  var $3=HEAP32[((_ifp)>>2)];
  var $4=_fread($2, 1, 2, $3);
  var $5=(($str)|0);
  var $6=_sget2($5);
  STACKTOP = __stackBase__;
  return $6;
}


function _get4() {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $str=__stackBase__;
  var $1=$str;
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1)]=HEAP8[(((_get4_str)|0))]; HEAP8[($1+1)]=HEAP8[(((_get4_str)|0)+1)]; HEAP8[($1+2)]=HEAP8[(((_get4_str)|0)+2)]; HEAP8[($1+3)]=HEAP8[(((_get4_str)|0)+3)];
  var $2=(($str)|0);
  var $3=HEAP32[((_ifp)>>2)];
  var $4=_fread($2, 1, 4, $3);
  var $5=(($str)|0);
  var $6=_sget4($5);
  STACKTOP = __stackBase__;
  return $6;
}


function _getint($type) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      $1=$type;
      var $2=$1;
      var $3=((($2))|0)==3;
      if ($3) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $4
      var $5=_get2();
      var $6=((($5))&65535);
      var $10 = $6;__label__ = 3; break;
    case 2: // $7
      var $8=_get4();
      var $10 = $8;__label__ = 3; break;
    case 3: // $9
      var $10;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getreal($type) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $u=__stackBase__;
      var $i;
      var $rev;
      $2=$type;
      var $3=$2;
      if ($3 == 3) {
        __label__ = 1; break;
      }
      else if ($3 == 4) {
        __label__ = 2; break;
      }
      else if ($3 == 5) {
        __label__ = 3; break;
      }
      else if ($3 == 8) {
        __label__ = 4; break;
      }
      else if ($3 == 9) {
        __label__ = 5; break;
      }
      else if ($3 == 10) {
        __label__ = 6; break;
      }
      else if ($3 == 11) {
        __label__ = 7; break;
      }
      else if ($3 == 12) {
        __label__ = 8; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 1: // $4
      var $5=_get2();
      var $6=((($5))&65535);
      $1=$6;
      __label__ = 14; break;
    case 2: // $7
      var $8=_get4();
      var $9=((($8))>>>0);
      $1=$9;
      __label__ = 14; break;
    case 3: // $10
      var $11=_get4();
      var $12=((($11))>>>0);
      var $13=$u;
      (tempDoubleF64[0]=$12,HEAP32[(($13)>>2)]=tempDoubleI32[0],HEAP32[(($13+4)>>2)]=tempDoubleI32[1]);
      var $14=$u;
      var $15=(tempDoubleI32[0]=HEAP32[(($14)>>2)],tempDoubleI32[1]=HEAP32[(($14+4)>>2)],tempDoubleF64[0]);
      var $16=_get4();
      var $17=((($16))>>>0);
      var $18=($15)/($17);
      $1=$18;
      __label__ = 14; break;
    case 4: // $19
      var $20=_get2();
      var $21=((($20) << 16) >> 16);
      $1=$21;
      __label__ = 14; break;
    case 5: // $22
      var $23=_get4();
      var $24=((($23))|0);
      $1=$24;
      __label__ = 14; break;
    case 6: // $25
      var $26=_get4();
      var $27=((($26))|0);
      var $28=$u;
      (tempDoubleF64[0]=$27,HEAP32[(($28)>>2)]=tempDoubleI32[0],HEAP32[(($28+4)>>2)]=tempDoubleI32[1]);
      var $29=$u;
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[(($29+4)>>2)],tempDoubleF64[0]);
      var $31=_get4();
      var $32=((($31))|0);
      var $33=($30)/($32);
      $1=$33;
      __label__ = 14; break;
    case 7: // $34
      var $35=_get4();
      var $36=_int_to_float($35);
      var $37=($36);
      $1=$37;
      __label__ = 14; break;
    case 8: // $38
      var $39=HEAP16[((_order)>>1)];
      var $40=((($39) << 16) >> 16);
      var $41=((($40))|0)==18761;
      var $42=((($41))&1);
      var $43=_ntohs(4660);
      var $44=((($43))|0)==4660;
      var $45=((($44))&1);
      var $46=((($42))|0)==((($45))|0);
      var $47=((($46))&1);
      var $48=((($47)*7)|0);
      $rev=$48;
      $i=0;
      __label__ = 9; break;
    case 9: // $49
      var $50=$i;
      var $51=((($50))|0) < 8;
      if ($51) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $52
      var $53=HEAP32[((_ifp)>>2)];
      var $54=_getc_unlocked($53);
      var $55=((($54)) & 255);
      var $56=$i;
      var $57=$rev;
      var $58=($56) ^ ($57);
      var $59=$u;
      var $60=(($59+$58)|0);
      HEAP8[($60)]=$55;
      __label__ = 11; break;
    case 11: // $61
      var $62=$i;
      var $63=((($62)+1)|0);
      $i=$63;
      __label__ = 9; break;
    case 12: // $64
      var $65=$u;
      var $66=(tempDoubleI32[0]=HEAP32[(($65)>>2)],tempDoubleI32[1]=HEAP32[(($65+4)>>2)],tempDoubleF64[0]);
      $1=$66;
      __label__ = 14; break;
    case 13: // $67
      var $68=HEAP32[((_ifp)>>2)];
      var $69=_getc_unlocked($68);
      var $70=((($69))|0);
      $1=$70;
      __label__ = 14; break;
    case 14: // $71
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_getreal["X"]=1;

function _read_shorts($pixel, $count) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $1=$pixel;
      $2=$count;
      var $3=$1;
      var $4=$3;
      var $5=$2;
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_fread($4, 2, $5, $6);
      var $8=$2;
      var $9=((($7))>>>0) < ((($8))>>>0);
      if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $10
      _derror();
      __label__ = 2; break;
    case 2: // $11
      var $12=HEAP16[((_order)>>1)];
      var $13=((($12) << 16) >> 16);
      var $14=((($13))|0)==18761;
      var $15=((($14))&1);
      var $16=_ntohs(4660);
      var $17=((($16))|0)==4660;
      var $18=((($17))&1);
      var $19=((($15))|0)==((($18))|0);
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $20
      var $21=$1;
      var $22=$21;
      var $23=$1;
      var $24=$23;
      var $25=$2;
      var $26=(((($25)<<1))|0);
      _swab($22, $24, $26);
      __label__ = 4; break;
    case 4: // $27
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _canon_600_color($ratio, $mar) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $clipped;
      var $target;
      var $miss;
      $2=$ratio;
      $3=$mar;
      $clipped=0;
      var $4=HEAPF32[((_flash_used)>>2)];
      var $5=($4) != 0;
      if ($5) { __label__ = 1; break; } else { __label__ = 6; break; }
    case 1: // $6
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9))|0) < -104;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $11
      var $12=$2;
      var $13=(($12+4)|0);
      HEAP32[(($13)>>2)]=-104;
      $clipped=1;
      __label__ = 3; break;
    case 3: // $14
      var $15=$2;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17))|0) > 12;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $19
      var $20=$2;
      var $21=(($20+4)|0);
      HEAP32[(($21)>>2)]=12;
      $clipped=1;
      __label__ = 5; break;
    case 5: // $22
      __label__ = 14; break;
    case 6: // $23
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26))|0) < -264;
      if ($27) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: // $28
      var $29=$2;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31))|0) > 461;
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $33
      $1=2;
      __label__ = 29; break;
    case 9: // $34
      var $35=$2;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37))|0) < -50;
      if ($38) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $39
      var $40=$2;
      var $41=(($40+4)|0);
      HEAP32[(($41)>>2)]=-50;
      $clipped=1;
      __label__ = 11; break;
    case 11: // $42
      var $43=$2;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45))|0) > 307;
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $47
      var $48=$2;
      var $49=(($48+4)|0);
      HEAP32[(($49)>>2)]=307;
      $clipped=1;
      __label__ = 13; break;
    case 13: // $50
      __label__ = 14; break;
    case 14: // $51
      var $52=HEAPF32[((_flash_used)>>2)];
      var $53=($52) != 0;
      if ($53) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: // $54
      var $55=$2;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57))|0) < 197;
      if ($58) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $59
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)*398)|0);
      var $64=($63) >> 10;
      var $65=((-38-($64))|0);
      var $74 = $65;__label__ = 18; break;
    case 17: // $66
      var $67=$2;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)*48)|0);
      var $71=($70) >> 10;
      var $72=((($71)-123)|0);
      var $74 = $72;__label__ = 18; break;
    case 18: // $73
      var $74;
      $target=$74;
      var $75=$target;
      var $76=$3;
      var $77=((($75)-($76))|0);
      var $78=$2;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($77))|0) <= ((($80))|0);
      if ($81) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: // $82
      var $83=$target;
      var $84=((($83)+20)|0);
      var $85=$2;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($84))|0) >= ((($87))|0);
      if ($88) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $89
      var $90=$clipped;
      var $91=((($90))|0)!=0;
      if ($91) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: // $92
      $1=0;
      __label__ = 29; break;
    case 22: // $93
      var $94=$target;
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($94)-($97))|0);
      $miss=$98;
      var $99=$miss;
      var $100=_abs($99);
      var $101=$3;
      var $102=(((($101)<<2))|0);
      var $103=((($100))|0) >= ((($102))|0);
      if ($103) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $104
      $1=2;
      __label__ = 29; break;
    case 24: // $105
      var $106=$miss;
      var $107=((($106))|0) < -20;
      if ($107) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $108
      $miss=-20;
      __label__ = 26; break;
    case 26: // $109
      var $110=$miss;
      var $111=$3;
      var $112=((($110))|0) > ((($111))|0);
      if ($112) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $113
      var $114=$3;
      $miss=$114;
      __label__ = 28; break;
    case 28: // $115
      var $116=$target;
      var $117=$miss;
      var $118=((($116)-($117))|0);
      var $119=$2;
      var $120=(($119)|0);
      HEAP32[(($120)>>2)]=$118;
      $1=1;
      __label__ = 29; break;
    case 29: // $121
      var $122=$1;
      ;
      return $122;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_600_color["X"]=1;

function _canon_600_coeff() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $t;
      var $i;
      var $c;
      var $mc;
      var $yc;
      $t=0;
      var $1=HEAPF32[((((_pre_mul+4)|0))>>2)];
      var $2=HEAPF32[((((_pre_mul+8)|0))>>2)];
      var $3=($1)/($2);
      $mc=$3;
      var $4=HEAPF32[((((_pre_mul+12)|0))>>2)];
      var $5=HEAPF32[((((_pre_mul+8)|0))>>2)];
      var $6=($4)/($5);
      $yc=$6;
      var $7=$mc;
      var $8=($7) > 1;
      if ($8) { __label__ = 1; break; } else { __label__ = 4; break; }
    case 1: // $9
      var $10=$mc;
      var $11=($10);
      var $12=($11) <= 1.28;
      if ($12) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $13
      var $14=$yc;
      var $15=($14);
      var $16=($15) < 0.8789;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $17
      $t=1;
      __label__ = 4; break;
    case 4: // $18
      var $19=$mc;
      var $20=($19);
      var $21=($20) > 1.28;
      if ($21) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: // $22
      var $23=$mc;
      var $24=($23) <= 2;
      if ($24) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: // $25
      var $26=$yc;
      var $27=($26);
      var $28=($27) < 0.8789;
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $29
      $t=3;
      __label__ = 11; break;
    case 8: // $30
      var $31=$yc;
      var $32=($31) <= 2;
      if ($32) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $33
      $t=4;
      __label__ = 10; break;
    case 10: // $34
      __label__ = 11; break;
    case 11: // $35
      __label__ = 12; break;
    case 12: // $36
      var $37=HEAPF32[((_flash_used)>>2)];
      var $38=($37) != 0;
      if ($38) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $39
      $t=5;
      __label__ = 14; break;
    case 14: // $40
      $i=0;
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 15; break;
    case 15: // $41
      var $42=$i;
      var $43=((($42))|0) < 3;
      if ($43) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: // $44
      $c=0;
      __label__ = 17; break;
    case 17: // $45
      var $46=$c;
      var $47=HEAP32[((_colors)>>2)];
      var $48=((($46))|0) < ((($47))|0);
      if ($48) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $49
      var $50=$i;
      var $51=(((($50)<<2))|0);
      var $52=$c;
      var $53=((($51)+($52))|0);
      var $54=$t;
      var $55=((_canon_600_coeff_table+$54*24)|0);
      var $56=(($55+($53<<1))|0);
      var $57=HEAP16[(($56)>>1)];
      var $58=((($57) << 16) >> 16);
      var $59=((($58))|0);
      var $60=($59)/1024;
      var $61=($60);
      var $62=$c;
      var $63=$i;
      var $64=((_rgb_cam+($63<<4))|0);
      var $65=(($64+($62<<2))|0);
      HEAPF32[(($65)>>2)]=$61;
      __label__ = 19; break;
    case 19: // $66
      var $67=$c;
      var $68=((($67)+1)|0);
      $c=$68;
      __label__ = 17; break;
    case 20: // $69
      __label__ = 21; break;
    case 21: // $70
      var $71=$i;
      var $72=((($71)+1)|0);
      $i=$72;
      __label__ = 15; break;
    case 22: // $73
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_600_coeff["X"]=1;

function _canon_600_auto_wb() {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $mar;
      var $row;
      var $col;
      var $i;
      var $j;
      var $st;
      var $count=__stackBase__;
      var $test=__stackBase__+8;
      var $total=__stackBase__+40;
      var $ratio=__stackBase__+104;
      var $stat=__stackBase__+120;
      var $1=$count;
      HEAP32[(($1)>>2)]=0; HEAP32[(($1+4)>>2)]=0;
      var $2=$total;
      _memset($2, 0, 64, 1);
      var $3=HEAPF32[((_canon_ev)>>2)];
      var $4=($3);
      var $5=($4)+0.5;
      var $6=((($5))|0);
      $i=$6;
      var $7=$i;
      var $8=((($7))|0) < 10;
      if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $9
      $mar=150;
      __label__ = 6; break;
    case 2: // $10
      var $11=$i;
      var $12=((($11))|0) > 12;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $13
      $mar=20;
      __label__ = 5; break;
    case 4: // $14
      var $15=$i;
      var $16=((($15)*20)|0);
      var $17=((280-($16))|0);
      $mar=$17;
      __label__ = 5; break;
    case 5: // $18
      __label__ = 6; break;
    case 6: // $19
      var $20=HEAPF32[((_flash_used)>>2)];
      var $21=($20) != 0;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $22
      $mar=80;
      __label__ = 8; break;
    case 8: // $23
      $row=14;
      __label__ = 9; break;
    case 9: // $24
      var $25=$row;
      var $26=HEAPU16[((_height)>>1)];
      var $27=((($26))&65535);
      var $28=((($27)-14)|0);
      var $29=((($25))|0) < ((($28))|0);
      if ($29) { __label__ = 10; break; } else { __label__ = 58; break; }
    case 10: // $30
      $col=10;
      __label__ = 11; break;
    case 11: // $31
      var $32=$col;
      var $33=HEAPU16[((_width)>>1)];
      var $34=((($33))&65535);
      var $35=((($32))|0) < ((($34))|0);
      if ($35) { __label__ = 12; break; } else { __label__ = 56; break; }
    case 12: // $36
      $i=0;
      __label__ = 13; break;
    case 13: // $37
      var $38=$i;
      var $39=((($38))|0) < 8;
      if ($39) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $40
      var $41=HEAPU32[((_filters)>>2)];
      var $42=$row;
      var $43=$i;
      var $44=($43) >> 1;
      var $45=((($42)+($44))|0);
      var $46=($45) << 1;
      var $47=($46) & 14;
      var $48=$col;
      var $49=$i;
      var $50=($49) & 1;
      var $51=((($48)+($50))|0);
      var $52=($51) & 1;
      var $53=((($47)+($52))|0);
      var $54=($53) << 1;
      var $55=($41) >>> ((($54))>>>0);
      var $56=($55) & 3;
      var $57=$row;
      var $58=$i;
      var $59=($58) >> 1;
      var $60=((($57)+($59))|0);
      var $61=HEAPU16[((_shrink)>>1)];
      var $62=((($61))&65535);
      var $63=($60) >> ((($62))|0);
      var $64=HEAPU16[((_iwidth)>>1)];
      var $65=((($64))&65535);
      var $66=((($63)*($65))|0);
      var $67=$col;
      var $68=$i;
      var $69=($68) & 1;
      var $70=((($67)+($69))|0);
      var $71=HEAPU16[((_shrink)>>1)];
      var $72=((($71))&65535);
      var $73=($70) >> ((($72))|0);
      var $74=((($66)+($73))|0);
      var $75=HEAP32[((_image)>>2)];
      var $76=(($75+($74<<3))|0);
      var $77=(($76+($56<<1))|0);
      var $78=HEAPU16[(($77)>>1)];
      var $79=((($78))&65535);
      var $80=$i;
      var $81=($80) & 4;
      var $82=HEAPU32[((_filters)>>2)];
      var $83=$row;
      var $84=$i;
      var $85=($84) >> 1;
      var $86=((($83)+($85))|0);
      var $87=($86) << 1;
      var $88=($87) & 14;
      var $89=$col;
      var $90=$i;
      var $91=($90) & 1;
      var $92=((($89)+($91))|0);
      var $93=($92) & 1;
      var $94=((($88)+($93))|0);
      var $95=($94) << 1;
      var $96=($82) >>> ((($95))>>>0);
      var $97=($96) & 3;
      var $98=((($81)+($97))|0);
      var $99=(($test+($98<<2))|0);
      HEAP32[(($99)>>2)]=$79;
      __label__ = 15; break;
    case 15: // $100
      var $101=$i;
      var $102=((($101)+1)|0);
      $i=$102;
      __label__ = 13; break;
    case 16: // $103
      $i=0;
      __label__ = 17; break;
    case 17: // $104
      var $105=$i;
      var $106=((($105))|0) < 8;
      if ($106) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: // $107
      var $108=$i;
      var $109=(($test+($108<<2))|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110))|0) < 150;
      if ($111) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: // $112
      var $113=$i;
      var $114=(($test+($113<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115))|0) > 1500;
      if ($116) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $117
      __label__ = 54; break;
    case 21: // $118
      __label__ = 22; break;
    case 22: // $119
      var $120=$i;
      var $121=((($120)+1)|0);
      $i=$121;
      __label__ = 17; break;
    case 23: // $122
      $i=0;
      __label__ = 24; break;
    case 24: // $123
      var $124=$i;
      var $125=((($124))|0) < 4;
      if ($125) { __label__ = 25; break; } else { __label__ = 29; break; }
    case 25: // $126
      var $127=$i;
      var $128=(($test+($127<<2))|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$i;
      var $131=((($130)+4)|0);
      var $132=(($test+($131<<2))|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($129)-($133))|0);
      var $135=_abs($134);
      var $136=((($135))|0) > 50;
      if ($136) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $137
      __label__ = 54; break;
    case 27: // $138
      __label__ = 28; break;
    case 28: // $139
      var $140=$i;
      var $141=((($140)+1)|0);
      $i=$141;
      __label__ = 24; break;
    case 29: // $142
      $i=0;
      __label__ = 30; break;
    case 30: // $143
      var $144=$i;
      var $145=((($144))|0) < 2;
      if ($145) { __label__ = 31; break; } else { __label__ = 37; break; }
    case 31: // $146
      $j=0;
      __label__ = 32; break;
    case 32: // $147
      var $148=$j;
      var $149=((($148))|0) < 4;
      if ($149) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: // $150
      var $151=$i;
      var $152=(((($151)<<2))|0);
      var $153=$j;
      var $154=((($152)+($153))|0);
      var $155=((($154)+1)|0);
      var $156=(($test+($155<<2))|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$i;
      var $159=(((($158)<<2))|0);
      var $160=$j;
      var $161=((($159)+($160))|0);
      var $162=(($test+($161<<2))|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=((($157)-($163))|0);
      var $165=($164) << 10;
      var $166=$i;
      var $167=(((($166)<<2))|0);
      var $168=$j;
      var $169=((($167)+($168))|0);
      var $170=(($test+($169<<2))|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=((((($165))|0)/((($171))|0))|0);
      var $173=$j;
      var $174=($173) >> 1;
      var $175=$i;
      var $176=(($ratio+($175<<3))|0);
      var $177=(($176+($174<<2))|0);
      HEAP32[(($177)>>2)]=$172;
      __label__ = 34; break;
    case 34: // $178
      var $179=$j;
      var $180=((($179)+2)|0);
      $j=$180;
      __label__ = 32; break;
    case 35: // $181
      var $182=$i;
      var $183=(($ratio+($182<<3))|0);
      var $184=(($183)|0);
      var $185=$mar;
      var $186=_canon_600_color($184, $185);
      var $187=$i;
      var $188=(($stat+($187<<2))|0);
      HEAP32[(($188)>>2)]=$186;
      __label__ = 36; break;
    case 36: // $189
      var $190=$i;
      var $191=((($190)+1)|0);
      $i=$191;
      __label__ = 30; break;
    case 37: // $192
      var $193=(($stat)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($stat+4)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=($194) | ($196);
      $st=$197;
      var $198=((($197))|0) > 1;
      if ($198) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $199
      __label__ = 54; break;
    case 39: // $200
      $i=0;
      __label__ = 40; break;
    case 40: // $201
      var $202=$i;
      var $203=((($202))|0) < 2;
      if ($203) { __label__ = 41; break; } else { __label__ = 49; break; }
    case 41: // $204
      var $205=$i;
      var $206=(($stat+($205<<2))|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=((($207))|0)!=0;
      if ($208) { __label__ = 42; break; } else { __label__ = 47; break; }
    case 42: // $209
      $j=0;
      __label__ = 43; break;
    case 43: // $210
      var $211=$j;
      var $212=((($211))|0) < 2;
      if ($212) { __label__ = 44; break; } else { __label__ = 46; break; }
    case 44: // $213
      var $214=$i;
      var $215=(((($214)<<2))|0);
      var $216=$j;
      var $217=(((($216)<<1))|0);
      var $218=((($215)+($217))|0);
      var $219=(($test+($218<<2))|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$j;
      var $222=$i;
      var $223=(($ratio+($222<<3))|0);
      var $224=(($223+($221<<2))|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=((($225)+1024)|0);
      var $227=((($220)*($226))|0);
      var $228=($227) >> 10;
      var $229=$i;
      var $230=(((($229)<<2))|0);
      var $231=$j;
      var $232=(((($231)<<1))|0);
      var $233=((($230)+($232))|0);
      var $234=((($233)+1)|0);
      var $235=(($test+($234<<2))|0);
      HEAP32[(($235)>>2)]=$228;
      __label__ = 45; break;
    case 45: // $236
      var $237=$j;
      var $238=((($237)+1)|0);
      $j=$238;
      __label__ = 43; break;
    case 46: // $239
      __label__ = 47; break;
    case 47: // $240
      __label__ = 48; break;
    case 48: // $241
      var $242=$i;
      var $243=((($242)+1)|0);
      $i=$243;
      __label__ = 40; break;
    case 49: // $244
      $i=0;
      __label__ = 50; break;
    case 50: // $245
      var $246=$i;
      var $247=((($246))|0) < 8;
      if ($247) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: // $248
      var $249=$i;
      var $250=(($test+($249<<2))|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=$i;
      var $253=$st;
      var $254=(($total+($253<<5))|0);
      var $255=(($254+($252<<2))|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=((($256)+($251))|0);
      HEAP32[(($255)>>2)]=$257;
      __label__ = 52; break;
    case 52: // $258
      var $259=$i;
      var $260=((($259)+1)|0);
      $i=$260;
      __label__ = 50; break;
    case 53: // $261
      var $262=$st;
      var $263=(($count+($262<<2))|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=((($264)+1)|0);
      HEAP32[(($263)>>2)]=$265;
      __label__ = 54; break;
    case 54: // $266
      __label__ = 55; break;
    case 55: // $267
      var $268=$col;
      var $269=((($268)+2)|0);
      $col=$269;
      __label__ = 11; break;
    case 56: // $270
      __label__ = 57; break;
    case 57: // $271
      var $272=$row;
      var $273=((($272)+4)|0);
      $row=$273;
      __label__ = 9; break;
    case 58: // $274
      var $275=(($count)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($count+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=($276) | ($278);
      var $280=((($279))|0)!=0;
      if ($280) { __label__ = 59; break; } else { __label__ = 64; break; }
    case 59: // $281
      var $282=(($count)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=((($283)*200)|0);
      var $285=(($count+4)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=((($284))|0) < ((($286))|0);
      var $288=((($287))&1);
      $st=$288;
      $i=0;
      __label__ = 60; break;
    case 60: // $289
      var $290=$i;
      var $291=((($290))|0) < 4;
      if ($291) { __label__ = 61; break; } else { __label__ = 63; break; }
    case 61: // $292
      var $293=$i;
      var $294=$st;
      var $295=(($total+($294<<5))|0);
      var $296=(($295+($293<<2))|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$i;
      var $299=((($298)+4)|0);
      var $300=$st;
      var $301=(($total+($300<<5))|0);
      var $302=(($301+($299<<2))|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=((($297)+($303))|0);
      var $305=((($304))|0);
      var $306=1/($305);
      var $307=($306);
      var $308=$i;
      var $309=((_pre_mul+($308<<2))|0);
      HEAPF32[(($309)>>2)]=$307;
      __label__ = 62; break;
    case 62: // $310
      var $311=$i;
      var $312=((($311)+1)|0);
      $i=$312;
      __label__ = 60; break;
    case 63: // $313
      __label__ = 64; break;
    case 64: // $314
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_600_auto_wb["X"]=1;

function _remove_zeroes() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      var $tot;
      var $n;
      var $r;
      var $c;
      $row=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$row;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))>>>0) < ((($4))>>>0);
      if ($5) { __label__ = 2; break; } else { __label__ = 25; break; }
    case 2: // $6
      $col=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$col;
      var $9=HEAPU16[((_width)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))>>>0) < ((($10))>>>0);
      if ($11) { __label__ = 4; break; } else { __label__ = 23; break; }
    case 4: // $12
      var $13=HEAPU32[((_filters)>>2)];
      var $14=$row;
      var $15=($14) << 1;
      var $16=($15) & 14;
      var $17=$col;
      var $18=($17) & 1;
      var $19=((($16)+($18))|0);
      var $20=($19) << 1;
      var $21=($13) >>> ((($20))>>>0);
      var $22=($21) & 3;
      var $23=$row;
      var $24=HEAPU16[((_shrink)>>1)];
      var $25=((($24))&65535);
      var $26=($23) >>> ((($25))>>>0);
      var $27=HEAPU16[((_iwidth)>>1)];
      var $28=((($27))&65535);
      var $29=((($26)*($28))|0);
      var $30=$col;
      var $31=HEAPU16[((_shrink)>>1)];
      var $32=((($31))&65535);
      var $33=($30) >>> ((($32))>>>0);
      var $34=((($29)+($33))|0);
      var $35=HEAP32[((_image)>>2)];
      var $36=(($35+($34<<3))|0);
      var $37=(($36+($22<<1))|0);
      var $38=HEAPU16[(($37)>>1)];
      var $39=((($38))&65535);
      var $40=((($39))|0)==0;
      if ($40) { __label__ = 5; break; } else { __label__ = 21; break; }
    case 5: // $41
      $n=0;
      $tot=0;
      var $42=$row;
      var $43=((($42)-2)|0);
      $r=$43;
      __label__ = 6; break;
    case 6: // $44
      var $45=$r;
      var $46=$row;
      var $47=((($46)+2)|0);
      var $48=((($45))>>>0) <= ((($47))>>>0);
      if ($48) { __label__ = 7; break; } else { __label__ = 18; break; }
    case 7: // $49
      var $50=$col;
      var $51=((($50)-2)|0);
      $c=$51;
      __label__ = 8; break;
    case 8: // $52
      var $53=$c;
      var $54=$col;
      var $55=((($54)+2)|0);
      var $56=((($53))>>>0) <= ((($55))>>>0);
      if ($56) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: // $57
      var $58=$r;
      var $59=HEAPU16[((_height)>>1)];
      var $60=((($59))&65535);
      var $61=((($58))>>>0) < ((($60))>>>0);
      if ($61) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: // $62
      var $63=$c;
      var $64=HEAPU16[((_width)>>1)];
      var $65=((($64))&65535);
      var $66=((($63))>>>0) < ((($65))>>>0);
      if ($66) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: // $67
      var $68=HEAPU32[((_filters)>>2)];
      var $69=$r;
      var $70=($69) << 1;
      var $71=($70) & 14;
      var $72=$c;
      var $73=($72) & 1;
      var $74=((($71)+($73))|0);
      var $75=($74) << 1;
      var $76=($68) >>> ((($75))>>>0);
      var $77=($76) & 3;
      var $78=HEAPU32[((_filters)>>2)];
      var $79=$row;
      var $80=($79) << 1;
      var $81=($80) & 14;
      var $82=$col;
      var $83=($82) & 1;
      var $84=((($81)+($83))|0);
      var $85=($84) << 1;
      var $86=($78) >>> ((($85))>>>0);
      var $87=($86) & 3;
      var $88=((($77))|0)==((($87))|0);
      if ($88) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $89
      var $90=HEAPU32[((_filters)>>2)];
      var $91=$r;
      var $92=($91) << 1;
      var $93=($92) & 14;
      var $94=$c;
      var $95=($94) & 1;
      var $96=((($93)+($95))|0);
      var $97=($96) << 1;
      var $98=($90) >>> ((($97))>>>0);
      var $99=($98) & 3;
      var $100=$r;
      var $101=HEAPU16[((_shrink)>>1)];
      var $102=((($101))&65535);
      var $103=($100) >>> ((($102))>>>0);
      var $104=HEAPU16[((_iwidth)>>1)];
      var $105=((($104))&65535);
      var $106=((($103)*($105))|0);
      var $107=$c;
      var $108=HEAPU16[((_shrink)>>1)];
      var $109=((($108))&65535);
      var $110=($107) >>> ((($109))>>>0);
      var $111=((($106)+($110))|0);
      var $112=HEAP32[((_image)>>2)];
      var $113=(($112+($111<<3))|0);
      var $114=(($113+($99<<1))|0);
      var $115=HEAPU16[(($114)>>1)];
      var $116=((($115))&65535);
      var $117=((($116))|0)!=0;
      if ($117) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $118
      var $119=$n;
      var $120=((($119)+1)|0);
      $n=$120;
      var $121=HEAPU32[((_filters)>>2)];
      var $122=$r;
      var $123=($122) << 1;
      var $124=($123) & 14;
      var $125=$c;
      var $126=($125) & 1;
      var $127=((($124)+($126))|0);
      var $128=($127) << 1;
      var $129=($121) >>> ((($128))>>>0);
      var $130=($129) & 3;
      var $131=$r;
      var $132=HEAPU16[((_shrink)>>1)];
      var $133=((($132))&65535);
      var $134=($131) >>> ((($133))>>>0);
      var $135=HEAPU16[((_iwidth)>>1)];
      var $136=((($135))&65535);
      var $137=((($134)*($136))|0);
      var $138=$c;
      var $139=HEAPU16[((_shrink)>>1)];
      var $140=((($139))&65535);
      var $141=($138) >>> ((($140))>>>0);
      var $142=((($137)+($141))|0);
      var $143=HEAP32[((_image)>>2)];
      var $144=(($143+($142<<3))|0);
      var $145=(($144+($130<<1))|0);
      var $146=HEAPU16[(($145)>>1)];
      var $147=((($146))&65535);
      var $148=$tot;
      var $149=((($148)+($147))|0);
      $tot=$149;
      __label__ = 14; break;
    case 14: // $150
      __label__ = 15; break;
    case 15: // $151
      var $152=$c;
      var $153=((($152)+1)|0);
      $c=$153;
      __label__ = 8; break;
    case 16: // $154
      __label__ = 17; break;
    case 17: // $155
      var $156=$r;
      var $157=((($156)+1)|0);
      $r=$157;
      __label__ = 6; break;
    case 18: // $158
      var $159=$n;
      var $160=((($159))|0)!=0;
      if ($160) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $161
      var $162=$tot;
      var $163=$n;
      var $164=Math.floor(((($162))>>>0)/((($163))>>>0));
      var $165=((($164)) & 65535);
      var $166=HEAPU32[((_filters)>>2)];
      var $167=$row;
      var $168=($167) << 1;
      var $169=($168) & 14;
      var $170=$col;
      var $171=($170) & 1;
      var $172=((($169)+($171))|0);
      var $173=($172) << 1;
      var $174=($166) >>> ((($173))>>>0);
      var $175=($174) & 3;
      var $176=$row;
      var $177=HEAPU16[((_shrink)>>1)];
      var $178=((($177))&65535);
      var $179=($176) >>> ((($178))>>>0);
      var $180=HEAPU16[((_iwidth)>>1)];
      var $181=((($180))&65535);
      var $182=((($179)*($181))|0);
      var $183=$col;
      var $184=HEAPU16[((_shrink)>>1)];
      var $185=((($184))&65535);
      var $186=($183) >>> ((($185))>>>0);
      var $187=((($182)+($186))|0);
      var $188=HEAP32[((_image)>>2)];
      var $189=(($188+($187<<3))|0);
      var $190=(($189+($175<<1))|0);
      HEAP16[(($190)>>1)]=$165;
      __label__ = 20; break;
    case 20: // $191
      __label__ = 21; break;
    case 21: // $192
      __label__ = 22; break;
    case 22: // $193
      var $194=$col;
      var $195=((($194)+1)|0);
      $col=$195;
      __label__ = 3; break;
    case 23: // $196
      __label__ = 24; break;
    case 24: // $197
      var $198=$row;
      var $199=((($198)+1)|0);
      $row=$199;
      __label__ = 1; break;
    case 25: // $200
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_remove_zeroes["X"]=1;

function _canon_600_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 2912; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $data=__stackBase__;
      var $dp;
      var $pixel=__stackBase__+1120;
      var $pix;
      var $irow;
      var $row;
      var $col;
      var $val;
      $row=0;
      $irow=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$irow;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 20; break; }
    case 2: // $6
      var $7=(($data)|0);
      var $8=HEAPU16[((_raw_width)>>1)];
      var $9=((($8))&65535);
      var $10=((($9)*5)|0);
      var $11=((((($10))|0)/4)|0);
      var $12=HEAP32[((_ifp)>>2)];
      var $13=_fread($7, 1, $11, $12);
      var $14=HEAPU16[((_raw_width)>>1)];
      var $15=((($14))&65535);
      var $16=((($15)*5)|0);
      var $17=((((($16))|0)/4)|0);
      var $18=((($13))>>>0) < ((($17))>>>0);
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $19
      _derror();
      __label__ = 4; break;
    case 4: // $20
      var $21=(($data)|0);
      $dp=$21;
      var $22=(($pixel)|0);
      $pix=$22;
      __label__ = 5; break;
    case 5: // $23
      var $24=$dp;
      var $25=(($data)|0);
      var $26=(($25+1120)|0);
      var $27=((($24))>>>0) < ((($26))>>>0);
      if ($27) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $28
      var $29=$dp;
      var $30=(($29)|0);
      var $31=HEAPU8[($30)];
      var $32=((($31))&255);
      var $33=($32) << 2;
      var $34=$dp;
      var $35=(($34+1)|0);
      var $36=HEAPU8[($35)];
      var $37=((($36))&255);
      var $38=($37) >> 6;
      var $39=((($33)+($38))|0);
      var $40=((($39)) & 65535);
      var $41=$pix;
      var $42=(($41)|0);
      HEAP16[(($42)>>1)]=$40;
      var $43=$dp;
      var $44=(($43+2)|0);
      var $45=HEAPU8[($44)];
      var $46=((($45))&255);
      var $47=($46) << 2;
      var $48=$dp;
      var $49=(($48+1)|0);
      var $50=HEAPU8[($49)];
      var $51=((($50))&255);
      var $52=($51) >> 4;
      var $53=($52) & 3;
      var $54=((($47)+($53))|0);
      var $55=((($54)) & 65535);
      var $56=$pix;
      var $57=(($56+2)|0);
      HEAP16[(($57)>>1)]=$55;
      var $58=$dp;
      var $59=(($58+3)|0);
      var $60=HEAPU8[($59)];
      var $61=((($60))&255);
      var $62=($61) << 2;
      var $63=$dp;
      var $64=(($63+1)|0);
      var $65=HEAPU8[($64)];
      var $66=((($65))&255);
      var $67=($66) >> 2;
      var $68=($67) & 3;
      var $69=((($62)+($68))|0);
      var $70=((($69)) & 65535);
      var $71=$pix;
      var $72=(($71+4)|0);
      HEAP16[(($72)>>1)]=$70;
      var $73=$dp;
      var $74=(($73+4)|0);
      var $75=HEAPU8[($74)];
      var $76=((($75))&255);
      var $77=($76) << 2;
      var $78=$dp;
      var $79=(($78+1)|0);
      var $80=HEAPU8[($79)];
      var $81=((($80))&255);
      var $82=($81) & 3;
      var $83=((($77)+($82))|0);
      var $84=((($83)) & 65535);
      var $85=$pix;
      var $86=(($85+6)|0);
      HEAP16[(($86)>>1)]=$84;
      var $87=$dp;
      var $88=(($87+5)|0);
      var $89=HEAPU8[($88)];
      var $90=((($89))&255);
      var $91=($90) << 2;
      var $92=$dp;
      var $93=(($92+9)|0);
      var $94=HEAPU8[($93)];
      var $95=((($94))&255);
      var $96=($95) & 3;
      var $97=((($91)+($96))|0);
      var $98=((($97)) & 65535);
      var $99=$pix;
      var $100=(($99+8)|0);
      HEAP16[(($100)>>1)]=$98;
      var $101=$dp;
      var $102=(($101+6)|0);
      var $103=HEAPU8[($102)];
      var $104=((($103))&255);
      var $105=($104) << 2;
      var $106=$dp;
      var $107=(($106+9)|0);
      var $108=HEAPU8[($107)];
      var $109=((($108))&255);
      var $110=($109) >> 2;
      var $111=($110) & 3;
      var $112=((($105)+($111))|0);
      var $113=((($112)) & 65535);
      var $114=$pix;
      var $115=(($114+10)|0);
      HEAP16[(($115)>>1)]=$113;
      var $116=$dp;
      var $117=(($116+7)|0);
      var $118=HEAPU8[($117)];
      var $119=((($118))&255);
      var $120=($119) << 2;
      var $121=$dp;
      var $122=(($121+9)|0);
      var $123=HEAPU8[($122)];
      var $124=((($123))&255);
      var $125=($124) >> 4;
      var $126=($125) & 3;
      var $127=((($120)+($126))|0);
      var $128=((($127)) & 65535);
      var $129=$pix;
      var $130=(($129+12)|0);
      HEAP16[(($130)>>1)]=$128;
      var $131=$dp;
      var $132=(($131+8)|0);
      var $133=HEAPU8[($132)];
      var $134=((($133))&255);
      var $135=($134) << 2;
      var $136=$dp;
      var $137=(($136+9)|0);
      var $138=HEAPU8[($137)];
      var $139=((($138))&255);
      var $140=($139) >> 6;
      var $141=((($135)+($140))|0);
      var $142=((($141)) & 65535);
      var $143=$pix;
      var $144=(($143+14)|0);
      HEAP16[(($144)>>1)]=$142;
      __label__ = 7; break;
    case 7: // $145
      var $146=$dp;
      var $147=(($146+10)|0);
      $dp=$147;
      var $148=$pix;
      var $149=(($148+16)|0);
      $pix=$149;
      __label__ = 5; break;
    case 8: // $150
      $col=0;
      __label__ = 9; break;
    case 9: // $151
      var $152=$col;
      var $153=HEAPU16[((_width)>>1)];
      var $154=((($153))&65535);
      var $155=((($152))|0) < ((($154))|0);
      if ($155) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $156
      var $157=$col;
      var $158=(($pixel+($157<<1))|0);
      var $159=HEAP16[(($158)>>1)];
      var $160=HEAPU32[((_filters)>>2)];
      var $161=$row;
      var $162=($161) << 1;
      var $163=($162) & 14;
      var $164=$col;
      var $165=($164) & 1;
      var $166=((($163)+($165))|0);
      var $167=($166) << 1;
      var $168=($160) >>> ((($167))>>>0);
      var $169=($168) & 3;
      var $170=$row;
      var $171=HEAPU16[((_shrink)>>1)];
      var $172=((($171))&65535);
      var $173=($170) >> ((($172))|0);
      var $174=HEAPU16[((_iwidth)>>1)];
      var $175=((($174))&65535);
      var $176=((($173)*($175))|0);
      var $177=$col;
      var $178=HEAPU16[((_shrink)>>1)];
      var $179=((($178))&65535);
      var $180=($177) >> ((($179))|0);
      var $181=((($176)+($180))|0);
      var $182=HEAP32[((_image)>>2)];
      var $183=(($182+($181<<3))|0);
      var $184=(($183+($169<<1))|0);
      HEAP16[(($184)>>1)]=$159;
      __label__ = 11; break;
    case 11: // $185
      var $186=$col;
      var $187=((($186)+1)|0);
      $col=$187;
      __label__ = 9; break;
    case 12: // $188
      var $189=HEAPU16[((_width)>>1)];
      var $190=((($189))&65535);
      $col=$190;
      __label__ = 13; break;
    case 13: // $191
      var $192=$col;
      var $193=HEAPU16[((_raw_width)>>1)];
      var $194=((($193))&65535);
      var $195=((($192))|0) < ((($194))|0);
      if ($195) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $196
      var $197=$col;
      var $198=(($pixel+($197<<1))|0);
      var $199=HEAPU16[(($198)>>1)];
      var $200=((($199))&65535);
      var $201=HEAP32[((_black)>>2)];
      var $202=((($201)+($200))|0);
      HEAP32[((_black)>>2)]=$202;
      __label__ = 15; break;
    case 15: // $203
      var $204=$col;
      var $205=((($204)+1)|0);
      $col=$205;
      __label__ = 13; break;
    case 16: // $206
      var $207=$row;
      var $208=((($207)+2)|0);
      $row=$208;
      var $209=HEAPU16[((_height)>>1)];
      var $210=((($209))&65535);
      var $211=((($208))|0) > ((($210))|0);
      if ($211) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $212
      $row=1;
      __label__ = 18; break;
    case 18: // $213
      __label__ = 19; break;
    case 19: // $214
      var $215=$irow;
      var $216=((($215)+1)|0);
      $irow=$216;
      __label__ = 1; break;
    case 20: // $217
      var $218=HEAPU16[((_raw_width)>>1)];
      var $219=((($218))&65535);
      var $220=HEAPU16[((_width)>>1)];
      var $221=((($220))&65535);
      var $222=((($219))|0) > ((($221))|0);
      if ($222) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $223
      var $224=HEAPU32[((_black)>>2)];
      var $225=HEAPU16[((_raw_width)>>1)];
      var $226=((($225))&65535);
      var $227=HEAPU16[((_width)>>1)];
      var $228=((($227))&65535);
      var $229=((($226)-($228))|0);
      var $230=HEAPU16[((_height)>>1)];
      var $231=((($230))&65535);
      var $232=((($229)*($231))|0);
      var $233=Math.floor(((($224))>>>0)/((($232))>>>0));
      var $234=((($233)-4)|0);
      HEAP32[((_black)>>2)]=$234;
      __label__ = 22; break;
    case 22: // $235
      $row=0;
      __label__ = 23; break;
    case 23: // $236
      var $237=$row;
      var $238=HEAPU16[((_height)>>1)];
      var $239=((($238))&65535);
      var $240=((($237))|0) < ((($239))|0);
      if ($240) { __label__ = 24; break; } else { __label__ = 32; break; }
    case 24: // $241
      $col=0;
      __label__ = 25; break;
    case 25: // $242
      var $243=$col;
      var $244=HEAPU16[((_width)>>1)];
      var $245=((($244))&65535);
      var $246=((($243))|0) < ((($245))|0);
      if ($246) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: // $247
      var $248=HEAPU32[((_filters)>>2)];
      var $249=$row;
      var $250=($249) << 1;
      var $251=($250) & 14;
      var $252=$col;
      var $253=($252) & 1;
      var $254=((($251)+($253))|0);
      var $255=($254) << 1;
      var $256=($248) >>> ((($255))>>>0);
      var $257=($256) & 3;
      var $258=$row;
      var $259=HEAPU16[((_shrink)>>1)];
      var $260=((($259))&65535);
      var $261=($258) >> ((($260))|0);
      var $262=HEAPU16[((_iwidth)>>1)];
      var $263=((($262))&65535);
      var $264=((($261)*($263))|0);
      var $265=$col;
      var $266=HEAPU16[((_shrink)>>1)];
      var $267=((($266))&65535);
      var $268=($265) >> ((($267))|0);
      var $269=((($264)+($268))|0);
      var $270=HEAP32[((_image)>>2)];
      var $271=(($270+($269<<3))|0);
      var $272=(($271+($257<<1))|0);
      var $273=HEAPU16[(($272)>>1)];
      var $274=((($273))&65535);
      var $275=HEAP32[((_black)>>2)];
      var $276=((($274)-($275))|0);
      $val=$276;
      var $277=((($276))|0) < 0;
      if ($277) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $278
      $val=0;
      __label__ = 28; break;
    case 28: // $279
      var $280=$val;
      var $281=$col;
      var $282=($281) & 1;
      var $283=$row;
      var $284=($283) & 3;
      var $285=((_canon_600_load_raw_mul+($284<<2))|0);
      var $286=(($285+($282<<1))|0);
      var $287=HEAP16[(($286)>>1)];
      var $288=((($287) << 16) >> 16);
      var $289=((($280)*($288))|0);
      var $290=($289) >> 9;
      $val=$290;
      var $291=$val;
      var $292=((($291)) & 65535);
      var $293=HEAPU32[((_filters)>>2)];
      var $294=$row;
      var $295=($294) << 1;
      var $296=($295) & 14;
      var $297=$col;
      var $298=($297) & 1;
      var $299=((($296)+($298))|0);
      var $300=($299) << 1;
      var $301=($293) >>> ((($300))>>>0);
      var $302=($301) & 3;
      var $303=$row;
      var $304=HEAPU16[((_shrink)>>1)];
      var $305=((($304))&65535);
      var $306=($303) >> ((($305))|0);
      var $307=HEAPU16[((_iwidth)>>1)];
      var $308=((($307))&65535);
      var $309=((($306)*($308))|0);
      var $310=$col;
      var $311=HEAPU16[((_shrink)>>1)];
      var $312=((($311))&65535);
      var $313=($310) >> ((($312))|0);
      var $314=((($309)+($313))|0);
      var $315=HEAP32[((_image)>>2)];
      var $316=(($315+($314<<3))|0);
      var $317=(($316+($302<<1))|0);
      HEAP16[(($317)>>1)]=$292;
      __label__ = 29; break;
    case 29: // $318
      var $319=$col;
      var $320=((($319)+1)|0);
      $col=$320;
      __label__ = 25; break;
    case 30: // $321
      __label__ = 31; break;
    case 31: // $322
      var $323=$row;
      var $324=((($323)+1)|0);
      $row=$324;
      __label__ = 23; break;
    case 32: // $325
      _canon_600_fixed_wb(1311);
      _canon_600_auto_wb();
      _canon_600_coeff();
      var $326=HEAP32[((_black)>>2)];
      var $327=((1023-($326))|0);
      var $328=((($327)*1109)|0);
      var $329=($328) >>> 9;
      HEAP32[((_maximum)>>2)]=$329;
      HEAP32[((_black)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_600_load_raw["X"]=1;

function _canon_s2is() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $row;
      $row=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$row;
      var $4=((($3))>>>0) < 100;
      if ($4) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $5
      var $6=HEAP32[((_ifp)>>2)];
      var $7=$row;
      var $8=((($7)*3340)|0);
      var $9=((($8)+3284)|0);
      var $10=_fseek($6, $9, 0);
      var $11=HEAP32[((_ifp)>>2)];
      var $12=_getc($11);
      var $13=((($12))|0) > 15;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $14
      $1=1;
      __label__ = 7; break;
    case 4: // $15
      __label__ = 5; break;
    case 5: // $16
      var $17=$row;
      var $18=((($17)+1)|0);
      $row=$18;
      __label__ = 1; break;
    case 6: // $19
      $1=0;
      __label__ = 7; break;
    case 7: // $20
      var $21=$1;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getbithuff($nbits, $huff) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $c;
      $2=$nbits;
      $3=$huff;
      var $4=$2;
      var $5=((($4))|0)==-1;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      HEAP32[((_getbithuff_reset)>>2)]=0;
      HEAP32[((_getbithuff_vbits)>>2)]=0;
      HEAP32[((_getbithuff_bitbuf)>>2)]=0;
      $1=0;
      __label__ = 21; break;
    case 2: // $7
      var $8=$2;
      var $9=((($8))|0)==0;
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $10
      var $11=HEAP32[((_getbithuff_vbits)>>2)];
      var $12=((($11))|0) < 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $13
      $1=0;
      __label__ = 21; break;
    case 5: // $14
      __label__ = 6; break;
    case 6: // $15
      var $16=HEAP32[((_getbithuff_reset)>>2)];
      var $17=((($16))|0)!=0;
      if ($17) { var $41 = 0;__label__ = 13; break; } else { __label__ = 7; break; }
    case 7: // $18
      var $19=HEAP32[((_getbithuff_vbits)>>2)];
      var $20=$2;
      var $21=((($19))|0) < ((($20))|0);
      if ($21) { __label__ = 8; break; } else { var $41 = 0;__label__ = 13; break; }
    case 8: // $22
      var $23=HEAP32[((_ifp)>>2)];
      var $24=_getc_unlocked($23);
      $c=$24;
      var $25=((($24))|0)!=-1;
      if ($25) { __label__ = 9; break; } else { var $41 = 0;__label__ = 13; break; }
    case 9: // $26
      var $27=HEAP32[((_zero_after_ff)>>2)];
      var $28=((($27))|0)!=0;
      if ($28) { __label__ = 10; break; } else { var $37 = 0;__label__ = 12; break; }
    case 10: // $29
      var $30=$c;
      var $31=((($30))|0)==255;
      if ($31) { __label__ = 11; break; } else { var $37 = 0;__label__ = 12; break; }
    case 11: // $32
      var $33=HEAP32[((_ifp)>>2)];
      var $34=_getc_unlocked($33);
      var $35=((($34))|0)!=0;
      var $37 = $35;__label__ = 12; break;
    case 12: // $36
      var $37;
      var $38=((($37))&1);
      HEAP32[((_getbithuff_reset)>>2)]=$38;
      var $39=($37) ^ 1;
      var $41 = $39;__label__ = 13; break;
    case 13: // $40
      var $41;
      if ($41) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $42
      var $43=HEAP32[((_getbithuff_bitbuf)>>2)];
      var $44=($43) << 8;
      var $45=$c;
      var $46=((($45)) & 255);
      var $47=((($46))&255);
      var $48=((($44)+($47))|0);
      HEAP32[((_getbithuff_bitbuf)>>2)]=$48;
      var $49=HEAP32[((_getbithuff_vbits)>>2)];
      var $50=((($49)+8)|0);
      HEAP32[((_getbithuff_vbits)>>2)]=$50;
      __label__ = 6; break;
    case 15: // $51
      var $52=HEAP32[((_getbithuff_bitbuf)>>2)];
      var $53=HEAP32[((_getbithuff_vbits)>>2)];
      var $54=((32-($53))|0);
      var $55=($52) << ($54);
      var $56=$2;
      var $57=((32-($56))|0);
      var $58=($55) >>> ((($57))>>>0);
      $c=$58;
      var $59=$3;
      var $60=((($59))|0)!=0;
      if ($60) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $61
      var $62=$c;
      var $63=$3;
      var $64=(($63+($62<<1))|0);
      var $65=HEAPU16[(($64)>>1)];
      var $66=((($65))&65535);
      var $67=($66) >> 8;
      var $68=HEAP32[((_getbithuff_vbits)>>2)];
      var $69=((($68)-($67))|0);
      HEAP32[((_getbithuff_vbits)>>2)]=$69;
      var $70=$c;
      var $71=$3;
      var $72=(($71+($70<<1))|0);
      var $73=HEAP16[(($72)>>1)];
      var $74=((($73)) & 255);
      var $75=((($74))&255);
      $c=$75;
      __label__ = 18; break;
    case 17: // $76
      var $77=$2;
      var $78=HEAP32[((_getbithuff_vbits)>>2)];
      var $79=((($78)-($77))|0);
      HEAP32[((_getbithuff_vbits)>>2)]=$79;
      __label__ = 18; break;
    case 18: // $80
      var $81=HEAP32[((_getbithuff_vbits)>>2)];
      var $82=((($81))|0) < 0;
      if ($82) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $83
      _derror();
      __label__ = 20; break;
    case 20: // $84
      var $85=$c;
      $1=$85;
      __label__ = 21; break;
    case 21: // $86
      var $87=$1;
      ;
      return $87;
    default: assert(0, "bad label: " + __label__);
  }
}
_getbithuff["X"]=1;

function _make_decoder_ref($source) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $max;
      var $len;
      var $h;
      var $i;
      var $j;
      var $count;
      var $huff;
      $1=$source;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3+16)|0);
      HEAP32[(($2)>>2)]=$4;
      var $5=(($4-17)|0);
      $count=$5;
      $max=16;
      __label__ = 1; break;
    case 1: // $6
      var $7=$max;
      var $8=((($7))|0)!=0;
      if ($8) { __label__ = 2; break; } else { var $17 = 0;__label__ = 3; break; }
    case 2: // $9
      var $10=$max;
      var $11=$count;
      var $12=(($11+$10)|0);
      var $13=HEAP8[($12)];
      var $14=((($13) << 24) >> 24)!=0;
      var $15=($14) ^ 1;
      var $17 = $15;__label__ = 3; break;
    case 3: // $16
      var $17;
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $18
      __label__ = 5; break;
    case 5: // $19
      var $20=$max;
      var $21=((($20)-1)|0);
      $max=$21;
      __label__ = 1; break;
    case 6: // $22
      var $23=$max;
      var $24=1 << ($23);
      var $25=((($24)+1)|0);
      var $26=_calloc($25, 2);
      var $27=$26;
      $huff=$27;
      var $28=$huff;
      var $29=$28;
      _merror($29, ((__str4)|0));
      var $30=$max;
      var $31=((($30)) & 65535);
      var $32=$huff;
      var $33=(($32)|0);
      HEAP16[(($33)>>1)]=$31;
      $len=1;
      $h=1;
      __label__ = 7; break;
    case 7: // $34
      var $35=$len;
      var $36=$max;
      var $37=((($35))|0) <= ((($36))|0);
      if ($37) { __label__ = 8; break; } else { __label__ = 20; break; }
    case 8: // $38
      $i=0;
      __label__ = 9; break;
    case 9: // $39
      var $40=$i;
      var $41=$len;
      var $42=$count;
      var $43=(($42+$41)|0);
      var $44=HEAPU8[($43)];
      var $45=((($44))&255);
      var $46=((($40))|0) < ((($45))|0);
      if ($46) { __label__ = 10; break; } else { __label__ = 18; break; }
    case 10: // $47
      $j=0;
      __label__ = 11; break;
    case 11: // $48
      var $49=$j;
      var $50=$max;
      var $51=$len;
      var $52=((($50)-($51))|0);
      var $53=1 << ($52);
      var $54=((($49))|0) < ((($53))|0);
      if ($54) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: // $55
      var $56=$h;
      var $57=$max;
      var $58=1 << ($57);
      var $59=((($56))|0) <= ((($58))|0);
      if ($59) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $60
      var $61=$len;
      var $62=($61) << 8;
      var $63=$1;
      var $64=HEAP32[(($63)>>2)];
      var $65=HEAPU8[($64)];
      var $66=((($65))&255);
      var $67=($62) | ($66);
      var $68=((($67)) & 65535);
      var $69=$h;
      var $70=((($69)+1)|0);
      $h=$70;
      var $71=$huff;
      var $72=(($71+($69<<1))|0);
      HEAP16[(($72)>>1)]=$68;
      __label__ = 14; break;
    case 14: // $73
      __label__ = 15; break;
    case 15: // $74
      var $75=$j;
      var $76=((($75)+1)|0);
      $j=$76;
      __label__ = 11; break;
    case 16: // $77
      __label__ = 17; break;
    case 17: // $78
      var $79=$i;
      var $80=((($79)+1)|0);
      $i=$80;
      var $81=$1;
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+1)|0);
      HEAP32[(($81)>>2)]=$83;
      __label__ = 9; break;
    case 18: // $84
      __label__ = 19; break;
    case 19: // $85
      var $86=$len;
      var $87=((($86)+1)|0);
      $len=$87;
      __label__ = 7; break;
    case 20: // $88
      var $89=$huff;
      ;
      return $89;
    default: assert(0, "bad label: " + __label__);
  }
}
_make_decoder_ref["X"]=1;

function _make_decoder($source) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  HEAP32[(($1)>>2)]=$source;
  var $2=_make_decoder_ref($1);
  STACKTOP = __stackBase__;
  return $2;
}


function _crw_init_tables($table, $huff) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $1=$table;
      $2=$huff;
      var $3=$1;
      var $4=((($3))>>>0) > 2;
      if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $5
      $1=2;
      __label__ = 2; break;
    case 2: // $6
      var $7=$1;
      var $8=((_crw_init_tables_first_tree+$7*29)|0);
      var $9=(($8)|0);
      var $10=_make_decoder($9);
      var $11=$2;
      var $12=(($11)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$1;
      var $14=((_crw_init_tables_second_tree+$13*180)|0);
      var $15=(($14)|0);
      var $16=_make_decoder($15);
      var $17=$2;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=$16;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _canon_has_lowbits() {
  var __stackBase__  = STACKTOP; STACKTOP += 16384; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $test=__stackBase__;
      var $ret;
      var $i;
      $ret=1;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=_fseek($2, 0, 0);
      var $4=(($test)|0);
      var $5=HEAP32[((_ifp)>>2)];
      var $6=_fread($4, 1, 16384, $5);
      $i=540;
      __label__ = 1; break;
    case 1: // $7
      var $8=$i;
      var $9=((($8))>>>0) < 16383;
      if ($9) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $10
      var $11=$i;
      var $12=(($test+$11)|0);
      var $13=HEAPU8[($12)];
      var $14=((($13))&255);
      var $15=((($14))|0)==255;
      if ($15) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: // $16
      var $17=$i;
      var $18=((($17)+1)|0);
      var $19=(($test+$18)|0);
      var $20=HEAP8[($19)];
      var $21=((($20) << 24) >> 24)!=0;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $22
      $1=1;
      __label__ = 9; break;
    case 5: // $23
      $ret=0;
      __label__ = 6; break;
    case 6: // $24
      __label__ = 7; break;
    case 7: // $25
      var $26=$i;
      var $27=((($26)+1)|0);
      $i=$27;
      __label__ = 1; break;
    case 8: // $28
      var $29=$ret;
      $1=$29;
      __label__ = 9; break;
    case 9: // $30
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _canon_compressed_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 272; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $prow;
      var $huff=__stackBase__;
      var $nblocks;
      var $lowbits;
      var $i;
      var $c;
      var $row;
      var $r;
      var $col;
      var $save;
      var $val;
      var $irow;
      var $icol;
      var $block;
      var $diffbuf=__stackBase__+8;
      var $leaf;
      var $len;
      var $diff;
      var $carry;
      var $pnum;
      var $base=__stackBase__+264;
      $carry=0;
      $pnum=0;
      var $1=HEAP32[((_tiff_compress)>>2)];
      var $2=(($huff)|0);
      _crw_init_tables($1, $2);
      var $3=HEAPU16[((_raw_width)>>1)];
      var $4=((($3))&65535);
      var $5=(((($4)<<3))|0);
      var $6=_calloc($5, 2);
      var $7=$6;
      $pixel=$7;
      var $8=$pixel;
      var $9=$8;
      _merror($9, ((__str5)|0));
      var $10=_canon_has_lowbits();
      $lowbits=$10;
      var $11=$lowbits;
      var $12=((($11))|0)!=0;
      if ($12) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $13
      HEAP32[((_maximum)>>2)]=1023;
      __label__ = 2; break;
    case 2: // $14
      var $15=HEAP32[((_ifp)>>2)];
      var $16=$lowbits;
      var $17=HEAPU16[((_raw_height)>>1)];
      var $18=((($17))&65535);
      var $19=((($16)*($18))|0);
      var $20=HEAPU16[((_raw_width)>>1)];
      var $21=((($20))&65535);
      var $22=((($19)*($21))|0);
      var $23=((((($22))|0)/4)|0);
      var $24=((($23)+540)|0);
      var $25=_fseek($15, $24, 0);
      HEAP32[((_zero_after_ff)>>2)]=1;
      var $26=_getbithuff(-1, 0);
      $row=0;
      __label__ = 3; break;
    case 3: // $27
      var $28=$row;
      var $29=HEAPU16[((_raw_height)>>1)];
      var $30=((($29))&65535);
      var $31=((($28))|0) < ((($30))|0);
      if ($31) { __label__ = 4; break; } else { __label__ = 65; break; }
    case 4: // $32
      var $33=HEAPU16[((_raw_height)>>1)];
      var $34=((($33))&65535);
      var $35=$row;
      var $36=((($34)-($35))|0);
      var $37=8 < ((($36))|0);
      if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $38
      var $45 = 8;__label__ = 7; break;
    case 6: // $39
      var $40=HEAPU16[((_raw_height)>>1)];
      var $41=((($40))&65535);
      var $42=$row;
      var $43=((($41)-($42))|0);
      var $45 = $43;__label__ = 7; break;
    case 7: // $44
      var $45;
      var $46=HEAPU16[((_raw_width)>>1)];
      var $47=((($46))&65535);
      var $48=((($45)*($47))|0);
      var $49=($48) >> 6;
      $nblocks=$49;
      $block=0;
      __label__ = 8; break;
    case 8: // $50
      var $51=$block;
      var $52=$nblocks;
      var $53=((($51))|0) < ((($52))|0);
      if ($53) { __label__ = 9; break; } else { __label__ = 34; break; }
    case 9: // $54
      var $55=(($diffbuf)|0);
      var $56=$55;
      _memset($56, 0, 256, 1);
      $i=0;
      __label__ = 10; break;
    case 10: // $57
      var $58=$i;
      var $59=((($58))|0) < 64;
      if ($59) { __label__ = 11; break; } else { __label__ = 24; break; }
    case 11: // $60
      var $61=$i;
      var $62=((($61))|0) > 0;
      var $63=((($62))&1);
      var $64=(($huff+($63<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=HEAPU16[(($65)>>1)];
      var $67=((($66))&65535);
      var $68=$i;
      var $69=((($68))|0) > 0;
      var $70=((($69))&1);
      var $71=(($huff+($70<<2))|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+2)|0);
      var $74=_getbithuff($67, $73);
      $leaf=$74;
      var $75=$leaf;
      var $76=((($75))|0)==0;
      if ($76) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $77
      var $78=$i;
      var $79=((($78))|0)!=0;
      if ($79) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $80
      __label__ = 24; break;
    case 14: // $81
      var $82=$leaf;
      var $83=((($82))|0)==255;
      if ($83) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $84
      __label__ = 23; break;
    case 16: // $85
      var $86=$leaf;
      var $87=($86) >> 4;
      var $88=$i;
      var $89=((($88)+($87))|0);
      $i=$89;
      var $90=$leaf;
      var $91=($90) & 15;
      $len=$91;
      var $92=$len;
      var $93=((($92))|0)==0;
      if ($93) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $94
      __label__ = 23; break;
    case 18: // $95
      var $96=$len;
      var $97=_getbithuff($96, 0);
      $diff=$97;
      var $98=$diff;
      var $99=$len;
      var $100=((($99)-1)|0);
      var $101=1 << ($100);
      var $102=($98) & ($101);
      var $103=((($102))|0)==0;
      if ($103) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $104
      var $105=$len;
      var $106=1 << ($105);
      var $107=((($106)-1)|0);
      var $108=$diff;
      var $109=((($108)-($107))|0);
      $diff=$109;
      __label__ = 20; break;
    case 20: // $110
      var $111=$i;
      var $112=((($111))|0) < 64;
      if ($112) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $113
      var $114=$diff;
      var $115=$i;
      var $116=(($diffbuf+($115<<2))|0);
      HEAP32[(($116)>>2)]=$114;
      __label__ = 22; break;
    case 22: // $117
      __label__ = 23; break;
    case 23: // $118
      var $119=$i;
      var $120=((($119)+1)|0);
      $i=$120;
      __label__ = 10; break;
    case 24: // $121
      var $122=$carry;
      var $123=(($diffbuf)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=((($124)+($122))|0);
      HEAP32[(($123)>>2)]=$125;
      var $126=(($diffbuf)|0);
      var $127=HEAP32[(($126)>>2)];
      $carry=$127;
      $i=0;
      __label__ = 25; break;
    case 25: // $128
      var $129=$i;
      var $130=((($129))|0) < 64;
      if ($130) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: // $131
      var $132=$pnum;
      var $133=((($132)+1)|0);
      $pnum=$133;
      var $134=HEAPU16[((_raw_width)>>1)];
      var $135=((($134))&65535);
      var $136=((($132))|0)%((($135))|0);
      var $137=((($136))|0)==0;
      if ($137) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $138
      var $139=(($base+4)|0);
      HEAP32[(($139)>>2)]=512;
      var $140=(($base)|0);
      HEAP32[(($140)>>2)]=512;
      __label__ = 28; break;
    case 28: // $141
      var $142=$i;
      var $143=(($diffbuf+($142<<2))|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$i;
      var $146=($145) & 1;
      var $147=(($base+($146<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=((($148)+($144))|0);
      HEAP32[(($147)>>2)]=$149;
      var $150=((($149)) & 65535);
      var $151=$block;
      var $152=($151) << 6;
      var $153=$i;
      var $154=((($152)+($153))|0);
      var $155=$pixel;
      var $156=(($155+($154<<1))|0);
      HEAP16[(($156)>>1)]=$150;
      var $157=((($150))&65535);
      var $158=($157) >> 10;
      var $159=((($158))|0)!=0;
      if ($159) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $160
      _derror();
      __label__ = 30; break;
    case 30: // $161
      __label__ = 31; break;
    case 31: // $162
      var $163=$i;
      var $164=((($163)+1)|0);
      $i=$164;
      __label__ = 25; break;
    case 32: // $165
      __label__ = 33; break;
    case 33: // $166
      var $167=$block;
      var $168=((($167)+1)|0);
      $block=$168;
      __label__ = 8; break;
    case 34: // $169
      var $170=$lowbits;
      var $171=((($170))|0)!=0;
      if ($171) { __label__ = 35; break; } else { __label__ = 47; break; }
    case 35: // $172
      var $173=HEAP32[((_ifp)>>2)];
      var $174=_ftell($173);
      $save=$174;
      var $175=HEAP32[((_ifp)>>2)];
      var $176=$row;
      var $177=HEAPU16[((_raw_width)>>1)];
      var $178=((($177))&65535);
      var $179=((($176)*($178))|0);
      var $180=((((($179))|0)/4)|0);
      var $181=((($180)+26)|0);
      var $182=_fseek($175, $181, 0);
      var $183=$pixel;
      $prow=$183;
      $i=0;
      __label__ = 36; break;
    case 36: // $184
      var $185=$i;
      var $186=HEAPU16[((_raw_width)>>1)];
      var $187=((($186))&65535);
      var $188=(((($187)<<1))|0);
      var $189=((($185))|0) < ((($188))|0);
      if ($189) { __label__ = 37; break; } else { __label__ = 46; break; }
    case 37: // $190
      var $191=HEAP32[((_ifp)>>2)];
      var $192=_getc_unlocked($191);
      $c=$192;
      $r=0;
      __label__ = 38; break;
    case 38: // $193
      var $194=$r;
      var $195=((($194))|0) < 8;
      if ($195) { __label__ = 39; break; } else { __label__ = 44; break; }
    case 39: // $196
      var $197=$prow;
      var $198=HEAPU16[(($197)>>1)];
      var $199=((($198))&65535);
      var $200=($199) << 2;
      var $201=$c;
      var $202=$r;
      var $203=($201) >> ((($202))|0);
      var $204=($203) & 3;
      var $205=((($200)+($204))|0);
      $val=$205;
      var $206=HEAPU16[((_raw_width)>>1)];
      var $207=((($206))&65535);
      var $208=((($207))|0)==2672;
      if ($208) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: // $209
      var $210=$val;
      var $211=((($210))|0) < 512;
      if ($211) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $212
      var $213=$val;
      var $214=((($213)+2)|0);
      $val=$214;
      __label__ = 42; break;
    case 42: // $215
      var $216=$val;
      var $217=((($216)) & 65535);
      var $218=$prow;
      HEAP16[(($218)>>1)]=$217;
      __label__ = 43; break;
    case 43: // $219
      var $220=$r;
      var $221=((($220)+2)|0);
      $r=$221;
      var $222=$prow;
      var $223=(($222+2)|0);
      $prow=$223;
      __label__ = 38; break;
    case 44: // $224
      __label__ = 45; break;
    case 45: // $225
      var $226=$i;
      var $227=((($226)+1)|0);
      $i=$227;
      __label__ = 36; break;
    case 46: // $228
      var $229=HEAP32[((_ifp)>>2)];
      var $230=$save;
      var $231=_fseek($229, $230, 0);
      __label__ = 47; break;
    case 47: // $232
      $r=0;
      __label__ = 48; break;
    case 48: // $233
      var $234=$r;
      var $235=((($234))|0) < 8;
      if ($235) { __label__ = 49; break; } else { __label__ = 63; break; }
    case 49: // $236
      var $237=$row;
      var $238=HEAPU16[((_top_margin)>>1)];
      var $239=((($238))&65535);
      var $240=((($237)-($239))|0);
      var $241=$r;
      var $242=((($240)+($241))|0);
      $irow=$242;
      var $243=$irow;
      var $244=HEAPU16[((_height)>>1)];
      var $245=((($244))&65535);
      var $246=((($243))>>>0) >= ((($245))>>>0);
      if ($246) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: // $247
      __label__ = 62; break;
    case 51: // $248
      $col=0;
      __label__ = 52; break;
    case 52: // $249
      var $250=$col;
      var $251=HEAPU16[((_raw_width)>>1)];
      var $252=((($251))&65535);
      var $253=((($250))|0) < ((($252))|0);
      if ($253) { __label__ = 53; break; } else { __label__ = 61; break; }
    case 53: // $254
      var $255=$col;
      var $256=HEAPU16[((_left_margin)>>1)];
      var $257=((($256))&65535);
      var $258=((($255)-($257))|0);
      $icol=$258;
      var $259=HEAPU32[((_filters)>>2)];
      var $260=$irow;
      var $261=($260) << 1;
      var $262=($261) & 14;
      var $263=$icol;
      var $264=($263) & 1;
      var $265=((($262)+($264))|0);
      var $266=($265) << 1;
      var $267=($259) >>> ((($266))>>>0);
      var $268=($267) & 3;
      $c=$268;
      var $269=$icol;
      var $270=HEAPU16[((_width)>>1)];
      var $271=((($270))&65535);
      var $272=((($269))>>>0) < ((($271))>>>0);
      if ($272) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: // $273
      var $274=$r;
      var $275=HEAPU16[((_raw_width)>>1)];
      var $276=((($275))&65535);
      var $277=((($274)*($276))|0);
      var $278=$col;
      var $279=((($277)+($278))|0);
      var $280=$pixel;
      var $281=(($280+($279<<1))|0);
      var $282=HEAP16[(($281)>>1)];
      var $283=HEAPU32[((_filters)>>2)];
      var $284=$irow;
      var $285=($284) << 1;
      var $286=($285) & 14;
      var $287=$icol;
      var $288=($287) & 1;
      var $289=((($286)+($288))|0);
      var $290=($289) << 1;
      var $291=($283) >>> ((($290))>>>0);
      var $292=($291) & 3;
      var $293=$irow;
      var $294=HEAPU16[((_shrink)>>1)];
      var $295=((($294))&65535);
      var $296=($293) >>> ((($295))>>>0);
      var $297=HEAPU16[((_iwidth)>>1)];
      var $298=((($297))&65535);
      var $299=((($296)*($298))|0);
      var $300=$icol;
      var $301=HEAPU16[((_shrink)>>1)];
      var $302=((($301))&65535);
      var $303=($300) >>> ((($302))>>>0);
      var $304=((($299)+($303))|0);
      var $305=HEAP32[((_image)>>2)];
      var $306=(($305+($304<<3))|0);
      var $307=(($306+($292<<1))|0);
      HEAP16[(($307)>>1)]=$282;
      __label__ = 59; break;
    case 55: // $308
      var $309=$col;
      var $310=((($309))|0) > 1;
      if ($310) { __label__ = 56; break; } else { __label__ = 58; break; }
    case 56: // $311
      var $312=$col;
      var $313=HEAPU16[((_left_margin)>>1)];
      var $314=((($313))&65535);
      var $315=((($312)-($314))|0);
      var $316=((($315)+2)|0);
      var $317=HEAPU16[((_width)>>1)];
      var $318=((($317))&65535);
      var $319=((($318)+3)|0);
      var $320=((($316))>>>0) > ((($319))>>>0);
      if ($320) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: // $321
      var $322=$c;
      var $323=((($322)+4)|0);
      var $324=((_cblack+($323<<2))|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=((($325)+1)|0);
      HEAP32[(($324)>>2)]=$326;
      var $327=$r;
      var $328=HEAPU16[((_raw_width)>>1)];
      var $329=((($328))&65535);
      var $330=((($327)*($329))|0);
      var $331=$col;
      var $332=((($330)+($331))|0);
      var $333=$pixel;
      var $334=(($333+($332<<1))|0);
      var $335=HEAPU16[(($334)>>1)];
      var $336=((($335))&65535);
      var $337=$c;
      var $338=((_cblack+($337<<2))|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=((($339)+($336))|0);
      HEAP32[(($338)>>2)]=$340;
      __label__ = 58; break;
    case 58: // $341
      __label__ = 59; break;
    case 59: // $342
      __label__ = 60; break;
    case 60: // $343
      var $344=$col;
      var $345=((($344)+1)|0);
      $col=$345;
      __label__ = 52; break;
    case 61: // $346
      __label__ = 62; break;
    case 62: // $347
      var $348=$r;
      var $349=((($348)+1)|0);
      $r=$349;
      __label__ = 48; break;
    case 63: // $350
      __label__ = 64; break;
    case 64: // $351
      var $352=$row;
      var $353=((($352)+8)|0);
      $row=$353;
      __label__ = 3; break;
    case 65: // $354
      var $355=$pixel;
      var $356=$355;
      _free($356);
      $c=0;
      __label__ = 66; break;
    case 66: // $357
      var $358=$c;
      var $359=((($358))|0) < 2;
      if ($359) { __label__ = 67; break; } else { __label__ = 69; break; }
    case 67: // $360
      var $361=$c;
      var $362=(($huff+($361<<2))|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=$363;
      _free($364);
      __label__ = 68; break;
    case 68: // $365
      var $366=$c;
      var $367=((($366)+1)|0);
      $c=$367;
      __label__ = 66; break;
    case 69: // $368
      $c=0;
      __label__ = 70; break;
    case 70: // $369
      var $370=$c;
      var $371=((($370))|0) < 4;
      if ($371) { __label__ = 71; break; } else { __label__ = 75; break; }
    case 71: // $372
      var $373=$c;
      var $374=((($373)+4)|0);
      var $375=((_cblack+($374<<2))|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=((($376))|0)!=0;
      if ($377) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: // $378
      var $379=$c;
      var $380=((($379)+4)|0);
      var $381=((_cblack+($380<<2))|0);
      var $382=HEAPU32[(($381)>>2)];
      var $383=$c;
      var $384=((_cblack+($383<<2))|0);
      var $385=HEAPU32[(($384)>>2)];
      var $386=Math.floor(((($385))>>>0)/((($382))>>>0));
      HEAP32[(($384)>>2)]=$386;
      __label__ = 73; break;
    case 73: // $387
      __label__ = 74; break;
    case 74: // $388
      var $389=$c;
      var $390=((($389)+1)|0);
      $c=$390;
      __label__ = 70; break;
    case 75: // $391
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_compressed_load_raw["X"]=1;

function _ljpeg_end($jh) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $c;
      $1=$jh;
      $c=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$c;
      var $4=((($3))|0) < 4;
      if ($4) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $5
      var $6=$c;
      var $7=$1;
      var $8=(($7+76)|0);
      var $9=(($8+($6<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10))|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $12
      var $13=$c;
      var $14=$1;
      var $15=(($14+76)|0);
      var $16=(($15+($13<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _free($18);
      __label__ = 4; break;
    case 4: // $19
      __label__ = 5; break;
    case 5: // $20
      var $21=$c;
      var $22=((($21)+1)|0);
      $c=$22;
      __label__ = 1; break;
    case 6: // $23
      var $24=$1;
      var $25=(($24+92)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      _free($27);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ljpeg_start($jh, $info_only) {
  var __stackBase__  = STACKTOP; STACKTOP += 65540; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $c;
      var $tag;
      var $len;
      var $data=__stackBase__;
      var $dp=__stackBase__+65536;
      $2=$jh;
      $3=$info_only;
      var $4=$2;
      var $5=$4;
      _memset($5, 0, 96, 1);
      var $6=$2;
      var $7=(($6+24)|0);
      HEAP32[(($7)>>2)]=2147483647;
      var $8=(($data)|0);
      var $9=HEAP32[((_ifp)>>2)];
      var $10=_fread($8, 2, 1, $9);
      var $11=(($data+1)|0);
      var $12=HEAPU8[($11)];
      var $13=((($12))&255);
      var $14=((($13))|0)!=216;
      if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $15
      $1=0;
      __label__ = 42; break;
    case 2: // $16
      __label__ = 3; break;
    case 3: // $17
      var $18=(($data)|0);
      var $19=HEAP32[((_ifp)>>2)];
      var $20=_fread($18, 2, 2, $19);
      var $21=(($data)|0);
      var $22=HEAPU8[($21)];
      var $23=((($22))&255);
      var $24=($23) << 8;
      var $25=(($data+1)|0);
      var $26=HEAPU8[($25)];
      var $27=((($26))&255);
      var $28=($24) | ($27);
      $tag=$28;
      var $29=(($data+2)|0);
      var $30=HEAPU8[($29)];
      var $31=((($30))&255);
      var $32=($31) << 8;
      var $33=(($data+3)|0);
      var $34=HEAPU8[($33)];
      var $35=((($34))&255);
      var $36=($32) | ($35);
      var $37=((($36)-2)|0);
      $len=$37;
      var $38=$tag;
      var $39=((($38))|0) <= 65280;
      if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $40
      $1=0;
      __label__ = 42; break;
    case 5: // $41
      var $42=(($data)|0);
      var $43=$len;
      var $44=HEAP32[((_ifp)>>2)];
      var $45=_fread($42, 1, $43, $44);
      var $46=$tag;
      if ($46 == 65475) {
        __label__ = 6; break;
      }
      else if ($46 == 65472) {
        __label__ = 7; break;
      }
      else if ($46 == 65476) {
        __label__ = 11; break;
      }
      else if ($46 == 65498) {
        __label__ = 19; break;
      }
      else if ($46 == 65501) {
        __label__ = 20; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 6: // $47
      var $48=(($data+7)|0);
      var $49=HEAPU8[($48)];
      var $50=((($49))&255);
      var $51=($50) >> 4;
      var $52=(($data+7)|0);
      var $53=HEAPU8[($52)];
      var $54=((($53))&255);
      var $55=($54) & 15;
      var $56=((($51)*($55))|0);
      var $57=((($56)-1)|0);
      var $58=($57) & 3;
      var $59=$2;
      var $60=(($59+16)|0);
      HEAP32[(($60)>>2)]=$58;
      __label__ = 7; break;
    case 7: // $61
      var $62=(($data)|0);
      var $63=HEAPU8[($62)];
      var $64=((($63))&255);
      var $65=$2;
      var $66=(($65)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=(($data+1)|0);
      var $68=HEAPU8[($67)];
      var $69=((($68))&255);
      var $70=($69) << 8;
      var $71=(($data+2)|0);
      var $72=HEAPU8[($71)];
      var $73=((($72))&255);
      var $74=($70) | ($73);
      var $75=$2;
      var $76=(($75+4)|0);
      HEAP32[(($76)>>2)]=$74;
      var $77=(($data+3)|0);
      var $78=HEAPU8[($77)];
      var $79=((($78))&255);
      var $80=($79) << 8;
      var $81=(($data+4)|0);
      var $82=HEAPU8[($81)];
      var $83=((($82))&255);
      var $84=($80) | ($83);
      var $85=$2;
      var $86=(($85+8)|0);
      HEAP32[(($86)>>2)]=$84;
      var $87=(($data+5)|0);
      var $88=HEAPU8[($87)];
      var $89=((($88))&255);
      var $90=$2;
      var $91=(($90+16)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($89)+($92))|0);
      var $94=$2;
      var $95=(($94+12)|0);
      HEAP32[(($95)>>2)]=$93;
      var $96=$len;
      var $97=((($96))|0)==9;
      if ($97) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $98
      var $99=HEAP32[((_dng_version)>>2)];
      var $100=((($99))|0)!=0;
      if ($100) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: // $101
      var $102=HEAP32[((_ifp)>>2)];
      var $103=_getc($102);
      __label__ = 10; break;
    case 10: // $104
      __label__ = 21; break;
    case 11: // $105
      var $106=$3;
      var $107=((($106))|0)!=0;
      if ($107) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $108
      __label__ = 21; break;
    case 13: // $109
      var $110=(($data)|0);
      HEAP32[(($dp)>>2)]=$110;
      __label__ = 14; break;
    case 14: // $111
      var $112=HEAPU32[(($dp)>>2)];
      var $113=(($data)|0);
      var $114=$len;
      var $115=(($113+$114)|0);
      var $116=((($112))>>>0) < ((($115))>>>0);
      if ($116) { __label__ = 15; break; } else { var $124 = 0;__label__ = 16; break; }
    case 15: // $117
      var $118=HEAPU32[(($dp)>>2)];
      var $119=(($118+1)|0);
      HEAP32[(($dp)>>2)]=$119;
      var $120=HEAPU8[($118)];
      var $121=((($120))&255);
      $c=$121;
      var $122=((($121))|0) < 4;
      var $124 = $122;__label__ = 16; break;
    case 16: // $123
      var $124;
      if ($124) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $125
      var $126=_make_decoder_ref($dp);
      var $127=$c;
      var $128=$2;
      var $129=(($128+52)|0);
      var $130=(($129+($127<<2))|0);
      HEAP32[(($130)>>2)]=$126;
      var $131=$c;
      var $132=$2;
      var $133=(($132+76)|0);
      var $134=(($133+($131<<2))|0);
      HEAP32[(($134)>>2)]=$126;
      __label__ = 14; break;
    case 18: // $135
      __label__ = 21; break;
    case 19: // $136
      var $137=(($data)|0);
      var $138=HEAPU8[($137)];
      var $139=((($138))&255);
      var $140=(((($139)<<1))|0);
      var $141=((($140)+1)|0);
      var $142=(($data+$141)|0);
      var $143=HEAPU8[($142)];
      var $144=((($143))&255);
      var $145=$2;
      var $146=(($145+20)|0);
      HEAP32[(($146)>>2)]=$144;
      var $147=(($data)|0);
      var $148=HEAPU8[($147)];
      var $149=((($148))&255);
      var $150=(((($149)<<1))|0);
      var $151=((($150)+3)|0);
      var $152=(($data+$151)|0);
      var $153=HEAPU8[($152)];
      var $154=((($153))&255);
      var $155=($154) & 15;
      var $156=$2;
      var $157=(($156)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=((($158)-($155))|0);
      HEAP32[(($157)>>2)]=$159;
      __label__ = 21; break;
    case 20: // $160
      var $161=(($data)|0);
      var $162=HEAPU8[($161)];
      var $163=((($162))&255);
      var $164=($163) << 8;
      var $165=(($data+1)|0);
      var $166=HEAPU8[($165)];
      var $167=((($166))&255);
      var $168=($164) | ($167);
      var $169=$2;
      var $170=(($169+24)|0);
      HEAP32[(($170)>>2)]=$168;
      __label__ = 21; break;
    case 21: // $171
      __label__ = 22; break;
    case 22: // $172
      var $173=$tag;
      var $174=((($173))|0)!=65498;
      if ($174) { __label__ = 3; break; } else { __label__ = 23; break; }
    case 23: // $175
      var $176=$3;
      var $177=((($176))|0)!=0;
      if ($177) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $178
      $1=1;
      __label__ = 42; break;
    case 25: // $179
      $c=0;
      __label__ = 26; break;
    case 26: // $180
      var $181=$c;
      var $182=((($181))|0) < 5;
      if ($182) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: // $183
      var $184=$c;
      var $185=((($184)+1)|0);
      var $186=$2;
      var $187=(($186+52)|0);
      var $188=(($187+($185<<2))|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=((($189))|0)!=0;
      if ($190) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: // $191
      var $192=$c;
      var $193=$2;
      var $194=(($193+52)|0);
      var $195=(($194+($192<<2))|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$c;
      var $198=((($197)+1)|0);
      var $199=$2;
      var $200=(($199+52)|0);
      var $201=(($200+($198<<2))|0);
      HEAP32[(($201)>>2)]=$196;
      __label__ = 29; break;
    case 29: // $202
      __label__ = 30; break;
    case 30: // $203
      var $204=$c;
      var $205=((($204)+1)|0);
      $c=$205;
      __label__ = 26; break;
    case 31: // $206
      var $207=$2;
      var $208=(($207+16)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=((($209))|0)!=0;
      if ($210) { __label__ = 32; break; } else { __label__ = 41; break; }
    case 32: // $211
      $c=0;
      __label__ = 33; break;
    case 33: // $212
      var $213=$c;
      var $214=((($213))|0) < 4;
      if ($214) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: // $215
      var $216=$2;
      var $217=(($216+52)|0);
      var $218=(($217+4)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$c;
      var $221=((($220)+2)|0);
      var $222=$2;
      var $223=(($222+52)|0);
      var $224=(($223+($221<<2))|0);
      HEAP32[(($224)>>2)]=$219;
      __label__ = 35; break;
    case 35: // $225
      var $226=$c;
      var $227=((($226)+1)|0);
      $c=$227;
      __label__ = 33; break;
    case 36: // $228
      $c=0;
      __label__ = 37; break;
    case 37: // $229
      var $230=$c;
      var $231=$2;
      var $232=(($231+16)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=((($230))|0) < ((($233))|0);
      if ($234) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: // $235
      var $236=$2;
      var $237=(($236+52)|0);
      var $238=(($237)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=$c;
      var $241=((($240)+1)|0);
      var $242=$2;
      var $243=(($242+52)|0);
      var $244=(($243+($241<<2))|0);
      HEAP32[(($244)>>2)]=$239;
      __label__ = 39; break;
    case 39: // $245
      var $246=$c;
      var $247=((($246)+1)|0);
      $c=$247;
      __label__ = 37; break;
    case 40: // $248
      __label__ = 41; break;
    case 41: // $249
      var $250=$2;
      var $251=(($250+8)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$2;
      var $254=(($253+12)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=((($252)*($255))|0);
      var $257=_calloc($256, 4);
      var $258=$257;
      var $259=$2;
      var $260=(($259+92)|0);
      HEAP32[(($260)>>2)]=$258;
      var $261=$2;
      var $262=(($261+92)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=$263;
      _merror($264, ((__str6)|0));
      HEAP32[((_zero_after_ff)>>2)]=1;
      $1=1;
      __label__ = 42; break;
    case 42: // $265
      var $266=$1;
      STACKTOP = __stackBase__;
      return $266;
    default: assert(0, "bad label: " + __label__);
  }
}
_ljpeg_start["X"]=1;

function _ljpeg_diff($huff) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $len;
      var $diff;
      $2=$huff;
      var $3=$2;
      var $4=HEAPU16[(($3)>>1)];
      var $5=((($4))&65535);
      var $6=$2;
      var $7=(($6+2)|0);
      var $8=_getbithuff($5, $7);
      $len=$8;
      var $9=$len;
      var $10=((($9))|0)==16;
      if ($10) { __label__ = 1; break; } else { __label__ = 4; break; }
    case 1: // $11
      var $12=HEAP32[((_dng_version)>>2)];
      var $13=((($12))|0)!=0;
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $14
      var $15=HEAPU32[((_dng_version)>>2)];
      var $16=((($15))>>>0) >= 16842752;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $17
      $1=-32768;
      __label__ = 7; break;
    case 4: // $18
      var $19=$len;
      var $20=_getbithuff($19, 0);
      $diff=$20;
      var $21=$diff;
      var $22=$len;
      var $23=((($22)-1)|0);
      var $24=1 << ($23);
      var $25=($21) & ($24);
      var $26=((($25))|0)==0;
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $27
      var $28=$len;
      var $29=1 << ($28);
      var $30=((($29)-1)|0);
      var $31=$diff;
      var $32=((($31)-($30))|0);
      $diff=$32;
      __label__ = 6; break;
    case 6: // $33
      var $34=$diff;
      $1=$34;
      __label__ = 7; break;
    case 7: // $35
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ljpeg_row($jrow, $jh) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $col;
      var $c;
      var $diff;
      var $pred;
      var $spred;
      var $mark;
      var $row=__stackBase__;
      $1=$jrow;
      $2=$jh;
      $spred=0;
      $mark=0;
      var $3=$1;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($3)*($6))|0);
      var $8=$2;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($7))|0)%((($10))|0);
      var $12=((($11))|0)==0;
      if ($12) { __label__ = 1; break; } else { __label__ = 13; break; }
    case 1: // $13
      $c=0;
      __label__ = 2; break;
    case 2: // $14
      var $15=$c;
      var $16=((($15))|0) < 6;
      if ($16) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: // $17
      var $18=$2;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-1)|0);
      var $22=1 << ($21);
      var $23=$c;
      var $24=$2;
      var $25=(($24+28)|0);
      var $26=(($25+($23<<2))|0);
      HEAP32[(($26)>>2)]=$22;
      __label__ = 4; break;
    case 4: // $27
      var $28=$c;
      var $29=((($28)+1)|0);
      $c=$29;
      __label__ = 2; break;
    case 5: // $30
      var $31=$1;
      var $32=((($31))|0)!=0;
      if ($32) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: // $33
      var $34=HEAP32[((_ifp)>>2)];
      var $35=_fseek($34, -2, 1);
      __label__ = 7; break;
    case 7: // $36
      var $37=$mark;
      var $38=((($37))&65535);
      var $39=($38) << 8;
      var $40=HEAP32[((_ifp)>>2)];
      var $41=_getc_unlocked($40);
      $c=$41;
      var $42=((($39)+($41))|0);
      var $43=((($42)) & 65535);
      $mark=$43;
      __label__ = 8; break;
    case 8: // $44
      var $45=$c;
      var $46=((($45))|0)!=-1;
      if ($46) { __label__ = 9; break; } else { var $53 = 0;__label__ = 10; break; }
    case 9: // $47
      var $48=$mark;
      var $49=((($48))&65535);
      var $50=($49) >> 4;
      var $51=((($50))|0)!=4093;
      var $53 = $51;__label__ = 10; break;
    case 10: // $52
      var $53;
      if ($53) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 11: // $54
      __label__ = 12; break;
    case 12: // $55
      var $56=_getbithuff(-1, 0);
      __label__ = 13; break;
    case 13: // $57
      $c=0;
      __label__ = 14; break;
    case 14: // $58
      var $59=$c;
      var $60=((($59))|0) < 3;
      if ($60) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $61
      var $62=$2;
      var $63=(($62+92)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$2;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($67)*($70))|0);
      var $72=$1;
      var $73=$c;
      var $74=((($72)+($73))|0);
      var $75=($74) & 1;
      var $76=((($71)*($75))|0);
      var $77=(($64+($76<<1))|0);
      var $78=$c;
      var $79=(($row+($78<<2))|0);
      HEAP32[(($79)>>2)]=$77;
      __label__ = 16; break;
    case 16: // $80
      var $81=$c;
      var $82=((($81)+1)|0);
      $c=$82;
      __label__ = 14; break;
    case 17: // $83
      $col=0;
      __label__ = 18; break;
    case 18: // $84
      var $85=$col;
      var $86=$2;
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($85))|0) < ((($88))|0);
      if ($89) { __label__ = 19; break; } else { __label__ = 48; break; }
    case 19: // $90
      $c=0;
      __label__ = 20; break;
    case 20: // $91
      var $92=$c;
      var $93=$2;
      var $94=(($93+12)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($92))|0) < ((($95))|0);
      if ($96) { __label__ = 21; break; } else { __label__ = 46; break; }
    case 21: // $97
      var $98=$c;
      var $99=$2;
      var $100=(($99+52)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=_ljpeg_diff($102);
      $diff=$103;
      var $104=$2;
      var $105=(($104+16)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106))|0)!=0;
      if ($107) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: // $108
      var $109=$c;
      var $110=$2;
      var $111=(($110+16)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=((($109))|0) <= ((($112))|0);
      if ($113) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: // $114
      var $115=$col;
      var $116=$c;
      var $117=($115) | ($116);
      var $118=((($117))|0)!=0;
      if ($118) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $119
      var $120=$spred;
      $pred=$120;
      __label__ = 29; break;
    case 25: // $121
      var $122=$col;
      var $123=((($122))|0)!=0;
      if ($123) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $124
      var $125=$2;
      var $126=(($125+12)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(((-($127)))|0);
      var $129=(($row)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+($128<<1))|0);
      var $132=HEAPU16[(($131)>>1)];
      var $133=((($132))&65535);
      $pred=$133;
      __label__ = 28; break;
    case 27: // $134
      var $135=$diff;
      var $136=$c;
      var $137=$2;
      var $138=(($137+28)|0);
      var $139=(($138+($136<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+($135))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=$diff;
      var $143=((($141)-($142))|0);
      $pred=$143;
      __label__ = 28; break;
    case 28: // $144
      __label__ = 29; break;
    case 29: // $145
      var $146=$1;
      var $147=((($146))|0)!=0;
      if ($147) { __label__ = 30; break; } else { __label__ = 40; break; }
    case 30: // $148
      var $149=$col;
      var $150=((($149))|0)!=0;
      if ($150) { __label__ = 31; break; } else { __label__ = 40; break; }
    case 31: // $151
      var $152=$2;
      var $153=(($152+20)|0);
      var $154=HEAP32[(($153)>>2)];
      if ($154 == 1) {
        __label__ = 39; break;
      }
      else if ($154 == 2) {
        __label__ = 32; break;
      }
      else if ($154 == 3) {
        __label__ = 33; break;
      }
      else if ($154 == 4) {
        __label__ = 34; break;
      }
      else if ($154 == 5) {
        __label__ = 35; break;
      }
      else if ($154 == 6) {
        __label__ = 36; break;
      }
      else if ($154 == 7) {
        __label__ = 37; break;
      }
      else {
      __label__ = 38; break;
      }
      
    case 32: // $155
      var $156=(($row+4)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157)|0);
      var $159=HEAPU16[(($158)>>1)];
      var $160=((($159))&65535);
      $pred=$160;
      __label__ = 39; break;
    case 33: // $161
      var $162=$2;
      var $163=(($162+12)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(((-($164)))|0);
      var $166=(($row+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+($165<<1))|0);
      var $169=HEAPU16[(($168)>>1)];
      var $170=((($169))&65535);
      $pred=$170;
      __label__ = 39; break;
    case 34: // $171
      var $172=$pred;
      var $173=(($row+4)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|0);
      var $176=HEAPU16[(($175)>>1)];
      var $177=((($176))&65535);
      var $178=((($172)+($177))|0);
      var $179=$2;
      var $180=(($179+12)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(((-($181)))|0);
      var $183=(($row+4)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184+($182<<1))|0);
      var $186=HEAPU16[(($185)>>1)];
      var $187=((($186))&65535);
      var $188=((($178)-($187))|0);
      $pred=$188;
      __label__ = 39; break;
    case 35: // $189
      var $190=$pred;
      var $191=(($row+4)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192)|0);
      var $194=HEAPU16[(($193)>>1)];
      var $195=((($194))&65535);
      var $196=$2;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(((-($198)))|0);
      var $200=(($row+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+($199<<1))|0);
      var $203=HEAPU16[(($202)>>1)];
      var $204=((($203))&65535);
      var $205=((($195)-($204))|0);
      var $206=($205) >> 1;
      var $207=((($190)+($206))|0);
      $pred=$207;
      __label__ = 39; break;
    case 36: // $208
      var $209=(($row+4)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210)|0);
      var $212=HEAPU16[(($211)>>1)];
      var $213=((($212))&65535);
      var $214=$pred;
      var $215=$2;
      var $216=(($215+12)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(((-($217)))|0);
      var $219=(($row+4)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220+($218<<1))|0);
      var $222=HEAPU16[(($221)>>1)];
      var $223=((($222))&65535);
      var $224=((($214)-($223))|0);
      var $225=($224) >> 1;
      var $226=((($213)+($225))|0);
      $pred=$226;
      __label__ = 39; break;
    case 37: // $227
      var $228=$pred;
      var $229=(($row+4)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($230)|0);
      var $232=HEAPU16[(($231)>>1)];
      var $233=((($232))&65535);
      var $234=((($228)+($233))|0);
      var $235=($234) >> 1;
      $pred=$235;
      __label__ = 39; break;
    case 38: // $236
      $pred=0;
      __label__ = 39; break;
    case 39: // $237
      __label__ = 40; break;
    case 40: // $238
      var $239=$pred;
      var $240=$diff;
      var $241=((($239)+($240))|0);
      var $242=((($241)) & 65535);
      var $243=(($row)|0);
      var $244=HEAP32[(($243)>>2)];
      HEAP16[(($244)>>1)]=$242;
      var $245=((($242))&65535);
      var $246=$2;
      var $247=(($246)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=($245) >> ((($248))|0);
      var $250=((($249))|0)!=0;
      if ($250) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $251
      _derror();
      __label__ = 42; break;
    case 42: // $252
      var $253=$c;
      var $254=$2;
      var $255=(($254+16)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=((($253))|0) <= ((($256))|0);
      if ($257) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: // $258
      var $259=(($row)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=HEAPU16[(($260)>>1)];
      var $262=((($261))&65535);
      $spred=$262;
      __label__ = 44; break;
    case 44: // $263
      var $264=(($row)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265+2)|0);
      HEAP32[(($264)>>2)]=$266;
      var $267=(($row+4)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=(($268+2)|0);
      HEAP32[(($267)>>2)]=$269;
      __label__ = 45; break;
    case 45: // $270
      var $271=$c;
      var $272=((($271)+1)|0);
      $c=$272;
      __label__ = 20; break;
    case 46: // $273
      __label__ = 47; break;
    case 47: // $274
      var $275=$col;
      var $276=((($275)+1)|0);
      $col=$276;
      __label__ = 18; break;
    case 48: // $277
      var $278=(($row+8)|0);
      var $279=HEAP32[(($278)>>2)];
      STACKTOP = __stackBase__;
      return $279;
    default: assert(0, "bad label: " + __label__);
  }
}
_ljpeg_row["X"]=1;

function _lossless_jpeg_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $jwide;
      var $jrow;
      var $jcol;
      var $val;
      var $jidx;
      var $c;
      var $i;
      var $j;
      var $row;
      var $col;
      var $jh=__stackBase__;
      var $min;
      var $rp;
      $row=0;
      $col=0;
      $min=2147483647;
      var $1=_ljpeg_start($jh, 0);
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $3
      __label__ = 44; break;
    case 2: // $4
      var $5=(($jh+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($jh+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($6)*($8))|0);
      $jwide=$9;
      $jrow=0;
      __label__ = 3; break;
    case 3: // $10
      var $11=$jrow;
      var $12=(($jh+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($11))|0) < ((($13))|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 36; break; }
    case 4: // $15
      var $16=$jrow;
      var $17=_ljpeg_row($16, $jh);
      $rp=$17;
      var $18=HEAP32[((_load_flags)>>2)];
      var $19=($18) & 1;
      var $20=((($19))|0)!=0;
      if ($20) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: // $21
      var $22=$jrow;
      var $23=($22) & 1;
      var $24=((($23))|0)!=0;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $25
      var $26=HEAPU16[((_height)>>1)];
      var $27=((($26))&65535);
      var $28=((($27)-1)|0);
      var $29=$jrow;
      var $30=((((($29))|0)/2)|0);
      var $31=((($28)-($30))|0);
      var $36 = $31;__label__ = 8; break;
    case 7: // $32
      var $33=$jrow;
      var $34=((((($33))|0)/2)|0);
      var $36 = $34;__label__ = 8; break;
    case 8: // $35
      var $36;
      $row=$36;
      __label__ = 9; break;
    case 9: // $37
      $jcol=0;
      __label__ = 10; break;
    case 10: // $38
      var $39=$jcol;
      var $40=$jwide;
      var $41=((($39))|0) < ((($40))|0);
      if ($41) { __label__ = 11; break; } else { __label__ = 34; break; }
    case 11: // $42
      var $43=$rp;
      var $44=(($43+2)|0);
      $rp=$44;
      var $45=HEAPU16[(($43)>>1)];
      var $46=((($45))&65535);
      $val=$46;
      var $47=(($jh)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48))|0) <= 12;
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $50
      var $51=$val;
      var $52=($51) & 4095;
      var $53=((_curve+($52<<1))|0);
      var $54=HEAPU16[(($53)>>1)];
      var $55=((($54))&65535);
      $val=$55;
      __label__ = 13; break;
    case 13: // $56
      var $57=HEAP16[((((_cr2_slice)|0))>>1)];
      var $58=((($57) << 16) >> 16)!=0;
      if ($58) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: // $59
      var $60=$jrow;
      var $61=$jwide;
      var $62=((($60)*($61))|0);
      var $63=$jcol;
      var $64=((($62)+($63))|0);
      $jidx=$64;
      var $65=$jidx;
      var $66=HEAPU16[((((_cr2_slice+2)|0))>>1)];
      var $67=((($66))&65535);
      var $68=(($jh+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($67)*($69))|0);
      var $71=((((($65))|0)/((($70))|0))|0);
      $i=$71;
      var $72=$i;
      var $73=HEAPU16[((((_cr2_slice)|0))>>1)];
      var $74=((($73))&65535);
      var $75=((($72))|0) >= ((($74))|0);
      var $76=((($75))&1);
      $j=$76;
      if ($75) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $77
      var $78=HEAPU16[((((_cr2_slice)|0))>>1)];
      var $79=((($78))&65535);
      $i=$79;
      __label__ = 16; break;
    case 16: // $80
      var $81=$i;
      var $82=HEAPU16[((((_cr2_slice+2)|0))>>1)];
      var $83=((($82))&65535);
      var $84=(($jh+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($83)*($85))|0);
      var $87=((($81)*($86))|0);
      var $88=$jidx;
      var $89=((($88)-($87))|0);
      $jidx=$89;
      var $90=$jidx;
      var $91=$j;
      var $92=((($91)+1)|0);
      var $93=((_cr2_slice+($92<<1))|0);
      var $94=HEAPU16[(($93)>>1)];
      var $95=((($94))&65535);
      var $96=((((($90))|0)/((($95))|0))|0);
      $row=$96;
      var $97=$jidx;
      var $98=$j;
      var $99=((($98)+1)|0);
      var $100=((_cr2_slice+($99<<1))|0);
      var $101=HEAPU16[(($100)>>1)];
      var $102=((($101))&65535);
      var $103=((($97))|0)%((($102))|0);
      var $104=$i;
      var $105=HEAPU16[((((_cr2_slice+2)|0))>>1)];
      var $106=((($105))&65535);
      var $107=((($104)*($106))|0);
      var $108=((($103)+($107))|0);
      $col=$108;
      __label__ = 17; break;
    case 17: // $109
      var $110=HEAPU16[((_raw_width)>>1)];
      var $111=((($110))&65535);
      var $112=((($111))|0)==3984;
      if ($112) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $113
      var $114=$col;
      var $115=((($114)-2)|0);
      $col=$115;
      var $116=((($115))|0) < 0;
      if ($116) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $117
      var $118=$row;
      var $119=((($118)-1)|0);
      $row=$119;
      var $120=HEAPU16[((_raw_width)>>1)];
      var $121=((($120))&65535);
      var $122=$col;
      var $123=((($122)+($121))|0);
      $col=$123;
      __label__ = 20; break;
    case 20: // $124
      var $125=$row;
      var $126=HEAPU16[((_top_margin)>>1)];
      var $127=((($126))&65535);
      var $128=((($125)-($127))|0);
      var $129=HEAPU16[((_height)>>1)];
      var $130=((($129))&65535);
      var $131=((($128))>>>0) < ((($130))>>>0);
      if ($131) { __label__ = 21; break; } else { __label__ = 30; break; }
    case 21: // $132
      var $133=HEAPU32[((_filters)>>2)];
      var $134=$row;
      var $135=HEAPU16[((_top_margin)>>1)];
      var $136=((($135))&65535);
      var $137=((($134)-($136))|0);
      var $138=($137) << 1;
      var $139=($138) & 14;
      var $140=$col;
      var $141=HEAPU16[((_left_margin)>>1)];
      var $142=((($141))&65535);
      var $143=((($140)-($142))|0);
      var $144=($143) & 1;
      var $145=((($139)+($144))|0);
      var $146=($145) << 1;
      var $147=($133) >>> ((($146))>>>0);
      var $148=($147) & 3;
      $c=$148;
      var $149=$col;
      var $150=HEAPU16[((_left_margin)>>1)];
      var $151=((($150))&65535);
      var $152=((($149)-($151))|0);
      var $153=HEAPU16[((_width)>>1)];
      var $154=((($153))&65535);
      var $155=((($152))>>>0) < ((($154))>>>0);
      if ($155) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: // $156
      var $157=$val;
      var $158=((($157)) & 65535);
      var $159=HEAPU32[((_filters)>>2)];
      var $160=$row;
      var $161=HEAPU16[((_top_margin)>>1)];
      var $162=((($161))&65535);
      var $163=((($160)-($162))|0);
      var $164=($163) << 1;
      var $165=($164) & 14;
      var $166=$col;
      var $167=HEAPU16[((_left_margin)>>1)];
      var $168=((($167))&65535);
      var $169=((($166)-($168))|0);
      var $170=($169) & 1;
      var $171=((($165)+($170))|0);
      var $172=($171) << 1;
      var $173=($159) >>> ((($172))>>>0);
      var $174=($173) & 3;
      var $175=$row;
      var $176=HEAPU16[((_top_margin)>>1)];
      var $177=((($176))&65535);
      var $178=((($175)-($177))|0);
      var $179=HEAPU16[((_shrink)>>1)];
      var $180=((($179))&65535);
      var $181=($178) >> ((($180))|0);
      var $182=HEAPU16[((_iwidth)>>1)];
      var $183=((($182))&65535);
      var $184=((($181)*($183))|0);
      var $185=$col;
      var $186=HEAPU16[((_left_margin)>>1)];
      var $187=((($186))&65535);
      var $188=((($185)-($187))|0);
      var $189=HEAPU16[((_shrink)>>1)];
      var $190=((($189))&65535);
      var $191=($188) >> ((($190))|0);
      var $192=((($184)+($191))|0);
      var $193=HEAP32[((_image)>>2)];
      var $194=(($193+($192<<3))|0);
      var $195=(($194+($174<<1))|0);
      HEAP16[(($195)>>1)]=$158;
      var $196=$min;
      var $197=$val;
      var $198=((($196))|0) > ((($197))|0);
      if ($198) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $199
      var $200=$val;
      $min=$200;
      __label__ = 24; break;
    case 24: // $201
      __label__ = 29; break;
    case 25: // $202
      var $203=$col;
      var $204=((($203))|0) > 1;
      if ($204) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: // $205
      var $206=$col;
      var $207=HEAPU16[((_left_margin)>>1)];
      var $208=((($207))&65535);
      var $209=((($206)-($208))|0);
      var $210=((($209)+2)|0);
      var $211=HEAPU16[((_width)>>1)];
      var $212=((($211))&65535);
      var $213=((($212)+3)|0);
      var $214=((($210))>>>0) > ((($213))>>>0);
      if ($214) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $215
      var $216=$c;
      var $217=((($216)+4)|0);
      var $218=((_cblack+($217<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)+1)|0);
      HEAP32[(($218)>>2)]=$220;
      var $221=$val;
      var $222=$c;
      var $223=((_cblack+($222<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=((($224)+($221))|0);
      HEAP32[(($223)>>2)]=$225;
      __label__ = 28; break;
    case 28: // $226
      __label__ = 29; break;
    case 29: // $227
      __label__ = 30; break;
    case 30: // $228
      var $229=$col;
      var $230=((($229)+1)|0);
      $col=$230;
      var $231=HEAPU16[((_raw_width)>>1)];
      var $232=((($231))&65535);
      var $233=((($230))|0) >= ((($232))|0);
      if ($233) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $234
      var $235=$row;
      var $236=((($235)+1)|0);
      $row=$236;
      $col=0;
      __label__ = 32; break;
    case 32: // $237
      __label__ = 33; break;
    case 33: // $238
      var $239=$jcol;
      var $240=((($239)+1)|0);
      $jcol=$240;
      __label__ = 10; break;
    case 34: // $241
      __label__ = 35; break;
    case 35: // $242
      var $243=$jrow;
      var $244=((($243)+1)|0);
      $jrow=$244;
      __label__ = 3; break;
    case 36: // $245
      _ljpeg_end($jh);
      $c=0;
      __label__ = 37; break;
    case 37: // $246
      var $247=$c;
      var $248=((($247))|0) < 4;
      if ($248) { __label__ = 38; break; } else { __label__ = 42; break; }
    case 38: // $249
      var $250=$c;
      var $251=((($250)+4)|0);
      var $252=((_cblack+($251<<2))|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=((($253))|0)!=0;
      if ($254) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: // $255
      var $256=$c;
      var $257=((($256)+4)|0);
      var $258=((_cblack+($257<<2))|0);
      var $259=HEAPU32[(($258)>>2)];
      var $260=$c;
      var $261=((_cblack+($260<<2))|0);
      var $262=HEAPU32[(($261)>>2)];
      var $263=Math.floor(((($262))>>>0)/((($259))>>>0));
      HEAP32[(($261)>>2)]=$263;
      __label__ = 40; break;
    case 40: // $264
      __label__ = 41; break;
    case 41: // $265
      var $266=$c;
      var $267=((($266)+1)|0);
      $c=$267;
      __label__ = 37; break;
    case 42: // $268
      var $269=_strcasecmp(((_make)|0), ((__str7)|0));
      var $270=((($269))|0)!=0;
      if ($270) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: // $271
      var $272=$min;
      HEAP32[((_black)>>2)]=$272;
      __label__ = 44; break;
    case 44: // $273
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lossless_jpeg_load_raw["X"]=1;

function _canon_sraw_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $jh=__stackBase__;
      var $rp;
      var $ip;
      var $jwide;
      var $slice;
      var $scol;
      var $ecol;
      var $row;
      var $col;
      var $jrow;
      var $jcol;
      var $pix=__stackBase__+96;
      var $c;
      var $v=__stackBase__+108;
      var $ver;
      var $hue;
      var $cp;
      $rp=0;
      $jrow=0;
      $jcol=0;
      var $1=$v;
      HEAP32[(($1)>>2)]=0; HEAP32[(($1+4)>>2)]=0; HEAP32[(($1+8)>>2)]=0;
      var $2=_ljpeg_start($jh, 0);
      var $3=((($2))|0)!=0;
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $4
      __label__ = 84; break;
    case 2: // $5
      var $6=(($jh+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=($7) >> 1;
      HEAP32[(($6)>>2)]=$8;
      var $9=(($jh+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($8)*($10))|0);
      $jwide=$11;
      $slice=0;
      $ecol=0;
      __label__ = 3; break;
    case 3: // $12
      var $13=$slice;
      var $14=HEAPU16[((((_cr2_slice)|0))>>1)];
      var $15=((($14))&65535);
      var $16=((($13))|0) <= ((($15))|0);
      if ($16) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: // $17
      var $18=$ecol;
      $scol=$18;
      var $19=HEAPU16[((((_cr2_slice+2)|0))>>1)];
      var $20=((($19))&65535);
      var $21=(((($20)<<1))|0);
      var $22=(($jh+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((((($21))|0)/((($23))|0))|0);
      var $25=$ecol;
      var $26=((($25)+($24))|0);
      $ecol=$26;
      var $27=HEAP16[((((_cr2_slice)|0))>>1)];
      var $28=((($27) << 16) >> 16)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $29
      var $30=$ecol;
      var $31=HEAPU16[((_raw_width)>>1)];
      var $32=((($31))&65535);
      var $33=((($32)-1)|0);
      var $34=((($30))|0) > ((($33))|0);
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $35
      var $36=HEAPU16[((_raw_width)>>1)];
      var $37=((($36))&65535);
      var $38=($37) & -2;
      $ecol=$38;
      __label__ = 7; break;
    case 7: // $39
      $row=0;
      __label__ = 8; break;
    case 8: // $40
      var $41=$row;
      var $42=HEAPU16[((_height)>>1)];
      var $43=((($42))&65535);
      var $44=((($41))|0) < ((($43))|0);
      if ($44) { __label__ = 9; break; } else { __label__ = 23; break; }
    case 9: // $45
      var $46=HEAP32[((_image)>>2)];
      var $47=$row;
      var $48=HEAPU16[((_width)>>1)];
      var $49=((($48))&65535);
      var $50=((($47)*($49))|0);
      var $51=(($46+($50<<3))|0);
      $ip=$51;
      var $52=$scol;
      $col=$52;
      __label__ = 10; break;
    case 10: // $53
      var $54=$col;
      var $55=$ecol;
      var $56=((($54))|0) < ((($55))|0);
      if ($56) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: // $57
      var $58=$jwide;
      var $59=$jcol;
      var $60=((($59))|0)%((($58))|0);
      $jcol=$60;
      var $61=((($60))|0)==0;
      if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $62
      var $63=$jrow;
      var $64=((($63)+1)|0);
      $jrow=$64;
      var $65=_ljpeg_row($63, $jh);
      $rp=$65;
      __label__ = 13; break;
    case 13: // $66
      var $67=$col;
      var $68=HEAPU16[((_width)>>1)];
      var $69=((($68))&65535);
      var $70=((($67))|0) >= ((($69))|0);
      if ($70) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $71
      __label__ = 20; break;
    case 15: // $72
      $c=0;
      __label__ = 16; break;
    case 16: // $73
      var $74=$c;
      var $75=(($jh+12)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-2)|0);
      var $78=((($74))|0) < ((($77))|0);
      if ($78) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: // $79
      var $80=$jcol;
      var $81=$c;
      var $82=((($80)+($81))|0);
      var $83=$rp;
      var $84=(($83+($82<<1))|0);
      var $85=HEAP16[(($84)>>1)];
      var $86=$col;
      var $87=$c;
      var $88=($87) >> 1;
      var $89=HEAPU16[((_width)>>1)];
      var $90=((($89))&65535);
      var $91=((($88)*($90))|0);
      var $92=((($86)+($91))|0);
      var $93=$c;
      var $94=($93) & 1;
      var $95=((($92)+($94))|0);
      var $96=$ip;
      var $97=(($96+($95<<3))|0);
      var $98=(($97)|0);
      HEAP16[(($98)>>1)]=$85;
      __label__ = 18; break;
    case 18: // $99
      var $100=$c;
      var $101=((($100)+1)|0);
      $c=$101;
      __label__ = 16; break;
    case 19: // $102
      var $103=$jcol;
      var $104=(($jh+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($103)+($105))|0);
      var $107=((($106)-2)|0);
      var $108=$rp;
      var $109=(($108+($107<<1))|0);
      var $110=HEAP16[(($109)>>1)];
      var $111=((($110) << 16) >> 16);
      var $112=((($111)-16384)|0);
      var $113=((($112)) & 65535);
      var $114=$col;
      var $115=$ip;
      var $116=(($115+($114<<3))|0);
      var $117=(($116+2)|0);
      HEAP16[(($117)>>1)]=$113;
      var $118=$jcol;
      var $119=(($jh+12)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($118)+($120))|0);
      var $122=((($121)-1)|0);
      var $123=$rp;
      var $124=(($123+($122<<1))|0);
      var $125=HEAP16[(($124)>>1)];
      var $126=((($125) << 16) >> 16);
      var $127=((($126)-16384)|0);
      var $128=((($127)) & 65535);
      var $129=$col;
      var $130=$ip;
      var $131=(($130+($129<<3))|0);
      var $132=(($131+4)|0);
      HEAP16[(($132)>>1)]=$128;
      __label__ = 20; break;
    case 20: // $133
      var $134=$col;
      var $135=((($134)+2)|0);
      $col=$135;
      var $136=(($jh+12)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$jcol;
      var $139=((($138)+($137))|0);
      $jcol=$139;
      __label__ = 10; break;
    case 21: // $140
      __label__ = 22; break;
    case 22: // $141
      var $142=(($jh+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=($143) >> 1;
      var $145=((($144)-1)|0);
      var $146=$row;
      var $147=((($146)+($145))|0);
      $row=$147;
      __label__ = 8; break;
    case 23: // $148
      __label__ = 24; break;
    case 24: // $149
      var $150=$slice;
      var $151=((($150)+1)|0);
      $slice=$151;
      __label__ = 3; break;
    case 25: // $152
      $cp=((_model2)|0);
      __label__ = 26; break;
    case 26: // $153
      var $154=$cp;
      var $155=HEAP8[($154)];
      var $156=((($155) << 24) >> 24);
      var $157=((($156))|0)!=0;
      if ($157) { __label__ = 27; break; } else { var $166 = 0;__label__ = 28; break; }
    case 27: // $158
      var $159=$cp;
      var $160=HEAP8[($159)];
      var $161=((($160) << 24) >> 24);
      var $162=_isdigit($161);
      var $163=((($162))|0)!=0;
      var $164=($163) ^ 1;
      var $166 = $164;__label__ = 28; break;
    case 28: // $165
      var $166;
      if ($166) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: // $167
      __label__ = 30; break;
    case 30: // $168
      var $169=$cp;
      var $170=(($169+1)|0);
      $cp=$170;
      __label__ = 26; break;
    case 31: // $171
      var $172=$cp;
      var $173=(($v)|0);
      var $174=(($v)|0);
      var $175=(($174+4)|0);
      var $176=(($v)|0);
      var $177=(($176+8)|0);
      var $178=_sscanf($172, ((__str8)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$173,HEAP32[((tempInt+4)>>2)]=$175,HEAP32[((tempInt+8)>>2)]=$177,tempInt));
      var $179=(($v)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=((($180)*1000)|0);
      var $182=(($v+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=((($181)+($183))|0);
      var $185=((($184)*1000)|0);
      var $186=(($v+8)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($185)+($187))|0);
      $ver=$188;
      var $189=(($jh+16)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=((($190)+1)|0);
      var $192=($191) << 2;
      $hue=$192;
      var $193=HEAPU32[((_unique_id)>>2)];
      var $194=((($193))>>>0) >= 2147484289;
      if ($194) { __label__ = 34; break; } else { __label__ = 32; break; }
    case 32: // $195
      var $196=HEAP32[((_unique_id)>>2)];
      var $197=((($196))|0)==-2147483112;
      if ($197) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: // $198
      var $199=$ver;
      var $200=((($199))|0) > 1000006;
      if ($200) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: // $201
      var $202=(($jh+16)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=($203) << 1;
      $hue=$204;
      __label__ = 35; break;
    case 35: // $205
      var $206=HEAP32[((_image)>>2)];
      $ip=$206;
      var $207=$ip;
      var $208=(($207)|0);
      var $209=(($208)|0);
      $rp=$209;
      $row=0;
      __label__ = 36; break;
    case 36: // $210
      var $211=$row;
      var $212=HEAPU16[((_height)>>1)];
      var $213=((($212))&65535);
      var $214=((($211))|0) < ((($213))|0);
      if ($214) { __label__ = 37; break; } else { __label__ = 63; break; }
    case 37: // $215
      var $216=$row;
      var $217=(($jh+16)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=($218) >> 1;
      var $220=($216) & ($219);
      var $221=((($220))|0)!=0;
      if ($221) { __label__ = 38; break; } else { __label__ = 50; break; }
    case 38: // $222
      $col=0;
      __label__ = 39; break;
    case 39: // $223
      var $224=$col;
      var $225=HEAPU16[((_width)>>1)];
      var $226=((($225))&65535);
      var $227=((($224))|0) < ((($226))|0);
      if ($227) { __label__ = 40; break; } else { __label__ = 49; break; }
    case 40: // $228
      $c=1;
      __label__ = 41; break;
    case 41: // $229
      var $230=$c;
      var $231=((($230))|0) < 3;
      if ($231) { __label__ = 42; break; } else { __label__ = 47; break; }
    case 42: // $232
      var $233=$row;
      var $234=HEAPU16[((_height)>>1)];
      var $235=((($234))&65535);
      var $236=((($235)-1)|0);
      var $237=((($233))|0)==((($236))|0);
      if ($237) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: // $238
      var $239=$c;
      var $240=$col;
      var $241=HEAPU16[((_width)>>1)];
      var $242=((($241))&65535);
      var $243=((($240)-($242))|0);
      var $244=$ip;
      var $245=(($244+($243<<3))|0);
      var $246=(($245+($239<<1))|0);
      var $247=HEAP16[(($246)>>1)];
      var $248=$c;
      var $249=$col;
      var $250=$ip;
      var $251=(($250+($249<<3))|0);
      var $252=(($251+($248<<1))|0);
      HEAP16[(($252)>>1)]=$247;
      __label__ = 45; break;
    case 44: // $253
      var $254=$c;
      var $255=$col;
      var $256=HEAPU16[((_width)>>1)];
      var $257=((($256))&65535);
      var $258=((($255)-($257))|0);
      var $259=$ip;
      var $260=(($259+($258<<3))|0);
      var $261=(($260+($254<<1))|0);
      var $262=HEAP16[(($261)>>1)];
      var $263=((($262) << 16) >> 16);
      var $264=$c;
      var $265=$col;
      var $266=HEAPU16[((_width)>>1)];
      var $267=((($266))&65535);
      var $268=((($265)+($267))|0);
      var $269=$ip;
      var $270=(($269+($268<<3))|0);
      var $271=(($270+($264<<1))|0);
      var $272=HEAP16[(($271)>>1)];
      var $273=((($272) << 16) >> 16);
      var $274=((($263)+($273))|0);
      var $275=((($274)+1)|0);
      var $276=($275) >> 1;
      var $277=((($276)) & 65535);
      var $278=$c;
      var $279=$col;
      var $280=$ip;
      var $281=(($280+($279<<3))|0);
      var $282=(($281+($278<<1))|0);
      HEAP16[(($282)>>1)]=$277;
      __label__ = 45; break;
    case 45: // $283
      __label__ = 46; break;
    case 46: // $284
      var $285=$c;
      var $286=((($285)+1)|0);
      $c=$286;
      __label__ = 41; break;
    case 47: // $287
      __label__ = 48; break;
    case 48: // $288
      var $289=$col;
      var $290=((($289)+2)|0);
      $col=$290;
      __label__ = 39; break;
    case 49: // $291
      __label__ = 50; break;
    case 50: // $292
      $col=1;
      __label__ = 51; break;
    case 51: // $293
      var $294=$col;
      var $295=HEAPU16[((_width)>>1)];
      var $296=((($295))&65535);
      var $297=((($294))|0) < ((($296))|0);
      if ($297) { __label__ = 52; break; } else { __label__ = 61; break; }
    case 52: // $298
      $c=1;
      __label__ = 53; break;
    case 53: // $299
      var $300=$c;
      var $301=((($300))|0) < 3;
      if ($301) { __label__ = 54; break; } else { __label__ = 59; break; }
    case 54: // $302
      var $303=$col;
      var $304=HEAPU16[((_width)>>1)];
      var $305=((($304))&65535);
      var $306=((($305)-1)|0);
      var $307=((($303))|0)==((($306))|0);
      if ($307) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: // $308
      var $309=$c;
      var $310=$col;
      var $311=((($310)-1)|0);
      var $312=$ip;
      var $313=(($312+($311<<3))|0);
      var $314=(($313+($309<<1))|0);
      var $315=HEAP16[(($314)>>1)];
      var $316=$c;
      var $317=$col;
      var $318=$ip;
      var $319=(($318+($317<<3))|0);
      var $320=(($319+($316<<1))|0);
      HEAP16[(($320)>>1)]=$315;
      __label__ = 57; break;
    case 56: // $321
      var $322=$c;
      var $323=$col;
      var $324=((($323)-1)|0);
      var $325=$ip;
      var $326=(($325+($324<<3))|0);
      var $327=(($326+($322<<1))|0);
      var $328=HEAP16[(($327)>>1)];
      var $329=((($328) << 16) >> 16);
      var $330=$c;
      var $331=$col;
      var $332=((($331)+1)|0);
      var $333=$ip;
      var $334=(($333+($332<<3))|0);
      var $335=(($334+($330<<1))|0);
      var $336=HEAP16[(($335)>>1)];
      var $337=((($336) << 16) >> 16);
      var $338=((($329)+($337))|0);
      var $339=((($338)+1)|0);
      var $340=($339) >> 1;
      var $341=((($340)) & 65535);
      var $342=$c;
      var $343=$col;
      var $344=$ip;
      var $345=(($344+($343<<3))|0);
      var $346=(($345+($342<<1))|0);
      HEAP16[(($346)>>1)]=$341;
      __label__ = 57; break;
    case 57: // $347
      __label__ = 58; break;
    case 58: // $348
      var $349=$c;
      var $350=((($349)+1)|0);
      $c=$350;
      __label__ = 53; break;
    case 59: // $351
      __label__ = 60; break;
    case 60: // $352
      var $353=$col;
      var $354=((($353)+2)|0);
      $col=$354;
      __label__ = 51; break;
    case 61: // $355
      __label__ = 62; break;
    case 62: // $356
      var $357=$row;
      var $358=((($357)+1)|0);
      $row=$358;
      var $359=HEAPU16[((_width)>>1)];
      var $360=((($359))&65535);
      var $361=$ip;
      var $362=(($361+($360<<3))|0);
      $ip=$362;
      __label__ = 36; break;
    case 63: // $363
      __label__ = 64; break;
    case 64: // $364
      var $365=$rp;
      var $366=$ip;
      var $367=(($366)|0);
      var $368=(($367)|0);
      var $369=((($365))>>>0) < ((($368))>>>0);
      if ($369) { __label__ = 65; break; } else { __label__ = 83; break; }
    case 65: // $370
      var $371=HEAPU32[((_unique_id)>>2)];
      var $372=((($371))>>>0) < 2147484184;
      if ($372) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $373
      var $374=$rp;
      var $375=(($374)|0);
      var $376=HEAP16[(($375)>>1)];
      var $377=((($376) << 16) >> 16);
      var $378=$rp;
      var $379=(($378+4)|0);
      var $380=HEAP16[(($379)>>1)];
      var $381=((($380) << 16) >> 16);
      var $382=((($377)+($381))|0);
      var $383=((($382)-512)|0);
      var $384=(($pix)|0);
      HEAP32[(($384)>>2)]=$383;
      var $385=$rp;
      var $386=(($385)|0);
      var $387=HEAP16[(($386)>>1)];
      var $388=((($387) << 16) >> 16);
      var $389=$rp;
      var $390=(($389+2)|0);
      var $391=HEAP16[(($390)>>1)];
      var $392=((($391) << 16) >> 16);
      var $393=((($388)+($392))|0);
      var $394=((($393)-512)|0);
      var $395=(($pix+8)|0);
      HEAP32[(($395)>>2)]=$394;
      var $396=$rp;
      var $397=(($396)|0);
      var $398=HEAP16[(($397)>>1)];
      var $399=((($398) << 16) >> 16);
      var $400=$rp;
      var $401=(($400+2)|0);
      var $402=HEAP16[(($401)>>1)];
      var $403=((($402) << 16) >> 16);
      var $404=((($403)*-778)|0);
      var $405=$rp;
      var $406=(($405+4)|0);
      var $407=HEAP16[(($406)>>1)];
      var $408=((($407) << 16) >> 16);
      var $409=($408) << 11;
      var $410=((($404)-($409))|0);
      var $411=($410) >> 12;
      var $412=((($399)+($411))|0);
      var $413=((($412)-512)|0);
      var $414=(($pix+4)|0);
      HEAP32[(($414)>>2)]=$413;
      __label__ = 68; break;
    case 67: // $415
      var $416=$rp;
      var $417=(($416+2)|0);
      var $418=HEAP16[(($417)>>1)];
      var $419=((($418) << 16) >> 16);
      var $420=($419) << 2;
      var $421=$hue;
      var $422=((($420)+($421))|0);
      var $423=((($422)) & 65535);
      var $424=$rp;
      var $425=(($424+2)|0);
      HEAP16[(($425)>>1)]=$423;
      var $426=$rp;
      var $427=(($426+4)|0);
      var $428=HEAP16[(($427)>>1)];
      var $429=((($428) << 16) >> 16);
      var $430=($429) << 2;
      var $431=$hue;
      var $432=((($430)+($431))|0);
      var $433=((($432)) & 65535);
      var $434=$rp;
      var $435=(($434+4)|0);
      HEAP16[(($435)>>1)]=$433;
      var $436=$rp;
      var $437=(($436)|0);
      var $438=HEAP16[(($437)>>1)];
      var $439=((($438) << 16) >> 16);
      var $440=$rp;
      var $441=(($440+2)|0);
      var $442=HEAP16[(($441)>>1)];
      var $443=((($442) << 16) >> 16);
      var $444=((($443)*50)|0);
      var $445=$rp;
      var $446=(($445+4)|0);
      var $447=HEAP16[(($446)>>1)];
      var $448=((($447) << 16) >> 16);
      var $449=((($448)*22929)|0);
      var $450=((($444)+($449))|0);
      var $451=($450) >> 14;
      var $452=((($439)+($451))|0);
      var $453=(($pix)|0);
      HEAP32[(($453)>>2)]=$452;
      var $454=$rp;
      var $455=(($454)|0);
      var $456=HEAP16[(($455)>>1)];
      var $457=((($456) << 16) >> 16);
      var $458=$rp;
      var $459=(($458+2)|0);
      var $460=HEAP16[(($459)>>1)];
      var $461=((($460) << 16) >> 16);
      var $462=((($461)*-5640)|0);
      var $463=$rp;
      var $464=(($463+4)|0);
      var $465=HEAP16[(($464)>>1)];
      var $466=((($465) << 16) >> 16);
      var $467=((($466)*11751)|0);
      var $468=((($462)-($467))|0);
      var $469=($468) >> 14;
      var $470=((($457)+($469))|0);
      var $471=(($pix+4)|0);
      HEAP32[(($471)>>2)]=$470;
      var $472=$rp;
      var $473=(($472)|0);
      var $474=HEAP16[(($473)>>1)];
      var $475=((($474) << 16) >> 16);
      var $476=$rp;
      var $477=(($476+2)|0);
      var $478=HEAP16[(($477)>>1)];
      var $479=((($478) << 16) >> 16);
      var $480=((($479)*29040)|0);
      var $481=$rp;
      var $482=(($481+4)|0);
      var $483=HEAP16[(($482)>>1)];
      var $484=((($483) << 16) >> 16);
      var $485=((($484)*101)|0);
      var $486=((($480)-($485))|0);
      var $487=($486) >> 14;
      var $488=((($475)+($487))|0);
      var $489=(($pix+8)|0);
      HEAP32[(($489)>>2)]=$488;
      __label__ = 68; break;
    case 68: // $490
      $c=0;
      __label__ = 69; break;
    case 69: // $491
      var $492=$c;
      var $493=((($492))|0) < 3;
      if ($493) { __label__ = 70; break; } else { __label__ = 81; break; }
    case 70: // $494
      var $495=$c;
      var $496=(($pix+($495<<2))|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=$c;
      var $499=((_sraw_mul+($498<<1))|0);
      var $500=HEAPU16[(($499)>>1)];
      var $501=((($500))&65535);
      var $502=((($497)*($501))|0);
      var $503=($502) >> 10;
      var $504=((($503))|0) < 65535;
      if ($504) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: // $505
      var $506=$c;
      var $507=(($pix+($506<<2))|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=$c;
      var $510=((_sraw_mul+($509<<1))|0);
      var $511=HEAPU16[(($510)>>1)];
      var $512=((($511))&65535);
      var $513=((($508)*($512))|0);
      var $514=($513) >> 10;
      var $517 = $514;__label__ = 73; break;
    case 72: // $515
      var $517 = 65535;__label__ = 73; break;
    case 73: // $516
      var $517;
      var $518=0 > ((($517))|0);
      if ($518) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: // $519
      var $545 = 0;__label__ = 79; break;
    case 75: // $520
      var $521=$c;
      var $522=(($pix+($521<<2))|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=$c;
      var $525=((_sraw_mul+($524<<1))|0);
      var $526=HEAPU16[(($525)>>1)];
      var $527=((($526))&65535);
      var $528=((($523)*($527))|0);
      var $529=($528) >> 10;
      var $530=((($529))|0) < 65535;
      if ($530) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: // $531
      var $532=$c;
      var $533=(($pix+($532<<2))|0);
      var $534=HEAP32[(($533)>>2)];
      var $535=$c;
      var $536=((_sraw_mul+($535<<1))|0);
      var $537=HEAPU16[(($536)>>1)];
      var $538=((($537))&65535);
      var $539=((($534)*($538))|0);
      var $540=($539) >> 10;
      var $543 = $540;__label__ = 78; break;
    case 77: // $541
      var $543 = 65535;__label__ = 78; break;
    case 78: // $542
      var $543;
      var $545 = $543;__label__ = 79; break;
    case 79: // $544
      var $545;
      var $546=((($545)) & 65535);
      var $547=$c;
      var $548=$rp;
      var $549=(($548+($547<<1))|0);
      HEAP16[(($549)>>1)]=$546;
      __label__ = 80; break;
    case 80: // $550
      var $551=$c;
      var $552=((($551)+1)|0);
      $c=$552;
      __label__ = 69; break;
    case 81: // $553
      __label__ = 82; break;
    case 82: // $554
      var $555=$rp;
      var $556=(($555+8)|0);
      $rp=$556;
      __label__ = 64; break;
    case 83: // $557
      _ljpeg_end($jh);
      HEAP32[((_maximum)>>2)]=16383;
      __label__ = 84; break;
    case 84: // $558
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_canon_sraw_load_raw["X"]=1;

function _adobe_copy_pixel($row, $col, $rp) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $r;
      var $c;
      $1=$row;
      $2=$col;
      $3=$rp;
      var $4=HEAPU16[((_top_margin)>>1)];
      var $5=((($4))&65535);
      var $6=$1;
      var $7=((($6)-($5))|0);
      $1=$7;
      $r=$7;
      var $8=HEAPU16[((_left_margin)>>1)];
      var $9=((($8))&65535);
      var $10=$2;
      var $11=((($10)-($9))|0);
      $2=$11;
      $c=$11;
      var $12=HEAP32[((_is_raw)>>2)];
      var $13=((($12))|0)==2;
      if ($13) { __label__ = 1; break; } else { __label__ = 3; break; }
    case 1: // $14
      var $15=HEAP32[((_shot_select)>>2)];
      var $16=((($15))|0)!=0;
      if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $17
      var $18=$3;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+2)|0);
      HEAP32[(($18)>>2)]=$20;
      __label__ = 3; break;
    case 3: // $21
      var $22=HEAP32[((_filters)>>2)];
      var $23=((($22))|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: // $24
      var $25=HEAP16[((_fuji_width)>>1)];
      var $26=((($25) << 16) >> 16)!=0;
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $27
      var $28=$1;
      var $29=HEAPU16[((_fuji_width)>>1)];
      var $30=((($29))&65535);
      var $31=((($28)+($30))|0);
      var $32=((($31)-1)|0);
      var $33=$2;
      var $34=($33) >> 1;
      var $35=((($32)-($34))|0);
      $r=$35;
      var $36=$1;
      var $37=$2;
      var $38=((($37)+1)|0);
      var $39=($38) >> 1;
      var $40=((($36)+($39))|0);
      $c=$40;
      __label__ = 6; break;
    case 6: // $41
      var $42=$r;
      var $43=HEAPU16[((_height)>>1)];
      var $44=((($43))&65535);
      var $45=((($42))>>>0) < ((($44))>>>0);
      if ($45) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: // $46
      var $47=$c;
      var $48=HEAPU16[((_width)>>1)];
      var $49=((($48))&65535);
      var $50=((($47))>>>0) < ((($49))>>>0);
      if ($50) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: // $51
      var $52=$3;
      var $53=HEAP32[(($52)>>2)];
      var $54=HEAPU16[(($53)>>1)];
      var $55=((($54))&65535);
      var $56=((($55))|0) < 4096;
      if ($56) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $57
      var $58=$3;
      var $59=HEAP32[(($58)>>2)];
      var $60=HEAPU16[(($59)>>1)];
      var $61=((($60))&65535);
      var $62=((_curve+($61<<1))|0);
      var $63=HEAPU16[(($62)>>1)];
      var $64=((($63))&65535);
      var $71 = $64;__label__ = 11; break;
    case 10: // $65
      var $66=$3;
      var $67=HEAP32[(($66)>>2)];
      var $68=HEAPU16[(($67)>>1)];
      var $69=((($68))&65535);
      var $71 = $69;__label__ = 11; break;
    case 11: // $70
      var $71;
      var $72=((($71)) & 65535);
      var $73=HEAPU32[((_filters)>>2)];
      var $74=$r;
      var $75=($74) << 1;
      var $76=($75) & 14;
      var $77=$c;
      var $78=($77) & 1;
      var $79=((($76)+($78))|0);
      var $80=($79) << 1;
      var $81=($73) >>> ((($80))>>>0);
      var $82=($81) & 3;
      var $83=$r;
      var $84=HEAPU16[((_shrink)>>1)];
      var $85=((($84))&65535);
      var $86=($83) >>> ((($85))>>>0);
      var $87=HEAPU16[((_iwidth)>>1)];
      var $88=((($87))&65535);
      var $89=((($86)*($88))|0);
      var $90=$c;
      var $91=HEAPU16[((_shrink)>>1)];
      var $92=((($91))&65535);
      var $93=($90) >>> ((($92))>>>0);
      var $94=((($89)+($93))|0);
      var $95=HEAP32[((_image)>>2)];
      var $96=(($95+($94<<3))|0);
      var $97=(($96+($82<<1))|0);
      HEAP16[(($97)>>1)]=$72;
      __label__ = 12; break;
    case 12: // $98
      var $99=HEAP32[((_is_raw)>>2)];
      var $100=$3;
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+($99<<1))|0);
      HEAP32[(($100)>>2)]=$102;
      __label__ = 24; break;
    case 13: // $103
      var $104=$r;
      var $105=HEAPU16[((_height)>>1)];
      var $106=((($105))&65535);
      var $107=((($104))>>>0) < ((($106))>>>0);
      if ($107) { __label__ = 14; break; } else { __label__ = 23; break; }
    case 14: // $108
      var $109=$c;
      var $110=HEAPU16[((_width)>>1)];
      var $111=((($110))&65535);
      var $112=((($109))>>>0) < ((($111))>>>0);
      if ($112) { __label__ = 15; break; } else { __label__ = 23; break; }
    case 15: // $113
      $c=0;
      __label__ = 16; break;
    case 16: // $114
      var $115=$c;
      var $116=HEAPU32[((_tiff_samples)>>2)];
      var $117=((($115))>>>0) < ((($116))>>>0);
      if ($117) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: // $118
      var $119=$c;
      var $120=$3;
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+($119<<1))|0);
      var $123=HEAPU16[(($122)>>1)];
      var $124=((($123))&65535);
      var $125=((($124))|0) < 4096;
      if ($125) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $126
      var $127=$c;
      var $128=$3;
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+($127<<1))|0);
      var $131=HEAPU16[(($130)>>1)];
      var $132=((($131))&65535);
      var $133=((_curve+($132<<1))|0);
      var $134=HEAPU16[(($133)>>1)];
      var $135=((($134))&65535);
      var $144 = $135;__label__ = 20; break;
    case 19: // $136
      var $137=$c;
      var $138=$3;
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+($137<<1))|0);
      var $141=HEAPU16[(($140)>>1)];
      var $142=((($141))&65535);
      var $144 = $142;__label__ = 20; break;
    case 20: // $143
      var $144;
      var $145=((($144)) & 65535);
      var $146=$c;
      var $147=$1;
      var $148=HEAPU16[((_width)>>1)];
      var $149=((($148))&65535);
      var $150=((($147)*($149))|0);
      var $151=$2;
      var $152=((($150)+($151))|0);
      var $153=HEAP32[((_image)>>2)];
      var $154=(($153+($152<<3))|0);
      var $155=(($154+($146<<1))|0);
      HEAP16[(($155)>>1)]=$145;
      __label__ = 21; break;
    case 21: // $156
      var $157=$c;
      var $158=((($157)+1)|0);
      $c=$158;
      __label__ = 16; break;
    case 22: // $159
      __label__ = 23; break;
    case 23: // $160
      var $161=HEAP32[((_tiff_samples)>>2)];
      var $162=$3;
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+($161<<1))|0);
      HEAP32[(($162)>>2)]=$164;
      __label__ = 24; break;
    case 24: // $165
      var $166=HEAP32[((_is_raw)>>2)];
      var $167=((($166))|0)==2;
      if ($167) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: // $168
      var $169=HEAP32[((_shot_select)>>2)];
      var $170=((($169))|0)!=0;
      if ($170) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $171
      var $172=$3;
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173-2)|0);
      HEAP32[(($172)>>2)]=$174;
      __label__ = 27; break;
    case 27: // $175
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adobe_copy_pixel["X"]=1;

function _adobe_dng_load_raw_lj() {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $save;
      var $trow;
      var $tcol;
      var $jwide;
      var $jrow;
      var $jcol;
      var $row;
      var $col;
      var $jh=__stackBase__;
      var $rp=__stackBase__+96;
      $trow=0;
      $tcol=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$trow;
      var $3=HEAPU16[((_raw_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))>>>0) < ((($4))>>>0);
      if ($5) { __label__ = 2; break; } else { __label__ = 22; break; }
    case 2: // $6
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_ftell($7);
      $save=$8;
      var $9=HEAPU32[((_tile_length)>>2)];
      var $10=((($9))>>>0) < 2147483647;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $11
      var $12=HEAP32[((_ifp)>>2)];
      var $13=_get4();
      var $14=_fseek($12, $13, 0);
      __label__ = 4; break;
    case 4: // $15
      var $16=_ljpeg_start($jh, 0);
      var $17=((($16))|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: // $18
      __label__ = 22; break;
    case 6: // $19
      var $20=(($jh+8)|0);
      var $21=HEAP32[(($20)>>2)];
      $jwide=$21;
      var $22=HEAP32[((_filters)>>2)];
      var $23=((($22))|0)!=0;
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $24
      var $25=(($jh+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$jwide;
      var $28=((($27)*($26))|0);
      $jwide=$28;
      __label__ = 8; break;
    case 8: // $29
      var $30=HEAPU32[((_is_raw)>>2)];
      var $31=$jwide;
      var $32=Math.floor(((($31))>>>0)/((($30))>>>0));
      $jwide=$32;
      $jrow=0;
      $col=0;
      $row=0;
      __label__ = 9; break;
    case 9: // $33
      var $34=$jrow;
      var $35=(($jh+4)|0);
      var $36=HEAPU32[(($35)>>2)];
      var $37=((($34))>>>0) < ((($36))>>>0);
      if ($37) { __label__ = 10; break; } else { __label__ = 19; break; }
    case 10: // $38
      var $39=$jrow;
      var $40=_ljpeg_row($39, $jh);
      HEAP32[(($rp)>>2)]=$40;
      $jcol=0;
      __label__ = 11; break;
    case 11: // $41
      var $42=$jcol;
      var $43=$jwide;
      var $44=((($42))>>>0) < ((($43))>>>0);
      if ($44) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: // $45
      var $46=$trow;
      var $47=$row;
      var $48=((($46)+($47))|0);
      var $49=$tcol;
      var $50=$col;
      var $51=((($49)+($50))|0);
      _adobe_copy_pixel($48, $51, $rp);
      var $52=$col;
      var $53=((($52)+1)|0);
      $col=$53;
      var $54=HEAPU32[((_tile_width)>>2)];
      var $55=((($53))>>>0) >= ((($54))>>>0);
      if ($55) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: // $56
      var $57=$col;
      var $58=HEAPU16[((_raw_width)>>1)];
      var $59=((($58))&65535);
      var $60=((($57))>>>0) >= ((($59))>>>0);
      if ($60) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $61
      $col=0;
      var $62=$row;
      var $63=((($62)+1)|0);
      $row=$63;
      __label__ = 15; break;
    case 15: // $64
      __label__ = 16; break;
    case 16: // $65
      var $66=$jcol;
      var $67=((($66)+1)|0);
      $jcol=$67;
      __label__ = 11; break;
    case 17: // $68
      __label__ = 18; break;
    case 18: // $69
      var $70=$jrow;
      var $71=((($70)+1)|0);
      $jrow=$71;
      __label__ = 9; break;
    case 19: // $72
      var $73=HEAP32[((_ifp)>>2)];
      var $74=$save;
      var $75=((($74)+4)|0);
      var $76=_fseek($73, $75, 0);
      var $77=HEAP32[((_tile_width)>>2)];
      var $78=$tcol;
      var $79=((($78)+($77))|0);
      $tcol=$79;
      var $80=HEAPU16[((_raw_width)>>1)];
      var $81=((($80))&65535);
      var $82=((($79))>>>0) >= ((($81))>>>0);
      if ($82) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $83
      var $84=HEAP32[((_tile_length)>>2)];
      $tcol=0;
      var $85=((($84))|0);
      var $86=$trow;
      var $87=((($86)+($85))|0);
      $trow=$87;
      __label__ = 21; break;
    case 21: // $88
      _ljpeg_end($jh);
      __label__ = 1; break;
    case 22: // $89
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adobe_dng_load_raw_lj["X"]=1;

function _adobe_dng_load_raw_nc() {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $rp=__stackBase__;
      var $row;
      var $col;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=HEAP32[((_tiff_samples)>>2)];
      var $4=((($2)*($3))|0);
      var $5=_calloc($4, 2);
      var $6=$5;
      $pixel=$6;
      var $7=$pixel;
      var $8=$7;
      _merror($8, ((__str9)|0));
      $row=0;
      __label__ = 1; break;
    case 1: // $9
      var $10=$row;
      var $11=HEAPU16[((_raw_height)>>1)];
      var $12=((($11))&65535);
      var $13=((($10))|0) < ((($12))|0);
      if ($13) { __label__ = 2; break; } else { __label__ = 15; break; }
    case 2: // $14
      var $15=HEAP32[((_tiff_bps)>>2)];
      var $16=((($15))|0)==16;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $17
      var $18=$pixel;
      var $19=HEAPU16[((_raw_width)>>1)];
      var $20=((($19))&65535);
      var $21=HEAP32[((_tiff_samples)>>2)];
      var $22=((($20)*($21))|0);
      _read_shorts($18, $22);
      __label__ = 9; break;
    case 4: // $23
      var $24=_getbithuff(-1, 0);
      $col=0;
      __label__ = 5; break;
    case 5: // $25
      var $26=$col;
      var $27=HEAPU16[((_raw_width)>>1)];
      var $28=((($27))&65535);
      var $29=HEAP32[((_tiff_samples)>>2)];
      var $30=((($28)*($29))|0);
      var $31=((($26))>>>0) < ((($30))>>>0);
      if ($31) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $32
      var $33=HEAP32[((_tiff_bps)>>2)];
      var $34=_getbithuff($33, 0);
      var $35=((($34)) & 65535);
      var $36=$col;
      var $37=$pixel;
      var $38=(($37+($36<<1))|0);
      HEAP16[(($38)>>1)]=$35;
      __label__ = 7; break;
    case 7: // $39
      var $40=$col;
      var $41=((($40)+1)|0);
      $col=$41;
      __label__ = 5; break;
    case 8: // $42
      __label__ = 9; break;
    case 9: // $43
      var $44=$pixel;
      HEAP32[(($rp)>>2)]=$44;
      $col=0;
      __label__ = 10; break;
    case 10: // $45
      var $46=$col;
      var $47=HEAPU16[((_raw_width)>>1)];
      var $48=((($47))&65535);
      var $49=((($46))|0) < ((($48))|0);
      if ($49) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: // $50
      var $51=$row;
      var $52=$col;
      _adobe_copy_pixel($51, $52, $rp);
      __label__ = 12; break;
    case 12: // $53
      var $54=$col;
      var $55=((($54)+1)|0);
      $col=$55;
      __label__ = 10; break;
    case 13: // $56
      __label__ = 14; break;
    case 14: // $57
      var $58=$row;
      var $59=((($58)+1)|0);
      $row=$59;
      __label__ = 1; break;
    case 15: // $60
      var $61=$pixel;
      var $62=$61;
      _free($62);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adobe_dng_load_raw_nc["X"]=1;

function _pentax_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 8268; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $bit=__stackBase__;
      var $huff=__stackBase__+60;
      var $dep;
      var $row;
      var $col;
      var $diff;
      var $c;
      var $i;
      var $vpred=__stackBase__+8256;
      var $hpred=__stackBase__+8264;
      var $1=$vpred;
      HEAP16[(($1)>>1)]=0; HEAP16[(($1+2)>>1)]=0; HEAP16[(($1+4)>>1)]=0; HEAP16[(($1+6)>>1)]=0;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=HEAP32[((_meta_offset)>>2)];
      var $4=_fseek($2, $3, 0);
      var $5=_get2();
      var $6=((($5))&65535);
      var $7=((($6)+12)|0);
      var $8=($7) & 15;
      $dep=$8;
      var $9=HEAP32[((_ifp)>>2)];
      var $10=_fseek($9, 12, 1);
      $c=0;
      __label__ = 1; break;
    case 1: // $11
      var $12=$c;
      var $13=$dep;
      var $14=((($12))|0) < ((($13))|0);
      if ($14) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $15
      var $16=_get2();
      var $17=$c;
      var $18=(($bit)|0);
      var $19=(($18+($17<<1))|0);
      HEAP16[(($19)>>1)]=$16;
      __label__ = 3; break;
    case 3: // $20
      var $21=$c;
      var $22=((($21)+1)|0);
      $c=$22;
      __label__ = 1; break;
    case 4: // $23
      $c=0;
      __label__ = 5; break;
    case 5: // $24
      var $25=$c;
      var $26=$dep;
      var $27=((($25))|0) < ((($26))|0);
      if ($27) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $28
      var $29=HEAP32[((_ifp)>>2)];
      var $30=_getc_unlocked($29);
      var $31=((($30)) & 65535);
      var $32=$c;
      var $33=(($bit+30)|0);
      var $34=(($33+($32<<1))|0);
      HEAP16[(($34)>>1)]=$31;
      __label__ = 7; break;
    case 7: // $35
      var $36=$c;
      var $37=((($36)+1)|0);
      $c=$37;
      __label__ = 5; break;
    case 8: // $38
      $c=0;
      __label__ = 9; break;
    case 9: // $39
      var $40=$c;
      var $41=$dep;
      var $42=((($40))|0) < ((($41))|0);
      if ($42) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: // $43
      var $44=$c;
      var $45=(($bit)|0);
      var $46=(($45+($44<<1))|0);
      var $47=HEAPU16[(($46)>>1)];
      var $48=((($47))&65535);
      $i=$48;
      __label__ = 11; break;
    case 11: // $49
      var $50=$i;
      var $51=$c;
      var $52=(($bit)|0);
      var $53=(($52+($51<<1))|0);
      var $54=HEAPU16[(($53)>>1)];
      var $55=((($54))&65535);
      var $56=$c;
      var $57=(($bit+30)|0);
      var $58=(($57+($56<<1))|0);
      var $59=HEAPU16[(($58)>>1)];
      var $60=((($59))&65535);
      var $61=4096 >> ((($60))|0);
      var $62=((($55)+($61))|0);
      var $63=((($62)-1)|0);
      var $64=($63) & 4095;
      var $65=((($50))|0) <= ((($64))|0);
      if ($65) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $66
      var $67=$c;
      var $68=(($bit+30)|0);
      var $69=(($68+($67<<1))|0);
      var $70=HEAPU16[(($69)>>1)];
      var $71=((($70))&65535);
      var $72=($71) << 8;
      var $73=$c;
      var $74=($72) | ($73);
      var $75=((($74)) & 65535);
      var $76=$i;
      var $77=((($76)+1)|0);
      $i=$77;
      var $78=(($huff+($77<<1))|0);
      HEAP16[(($78)>>1)]=$75;
      __label__ = 11; break;
    case 13: // $79
      __label__ = 14; break;
    case 14: // $80
      var $81=$c;
      var $82=((($81)+1)|0);
      $c=$82;
      __label__ = 9; break;
    case 15: // $83
      var $84=(($huff)|0);
      HEAP16[(($84)>>1)]=12;
      var $85=HEAP32[((_ifp)>>2)];
      var $86=HEAP32[((_data_offset)>>2)];
      var $87=_fseek($85, $86, 0);
      var $88=_getbithuff(-1, 0);
      $row=0;
      __label__ = 16; break;
    case 16: // $89
      var $90=$row;
      var $91=HEAPU16[((_raw_height)>>1)];
      var $92=((($91))&65535);
      var $93=((($90))|0) < ((($92))|0);
      if ($93) { __label__ = 17; break; } else { __label__ = 31; break; }
    case 17: // $94
      $col=0;
      __label__ = 18; break;
    case 18: // $95
      var $96=$col;
      var $97=HEAPU16[((_raw_width)>>1)];
      var $98=((($97))&65535);
      var $99=((($96))|0) < ((($98))|0);
      if ($99) { __label__ = 19; break; } else { __label__ = 29; break; }
    case 19: // $100
      var $101=(($huff)|0);
      var $102=_ljpeg_diff($101);
      $diff=$102;
      var $103=$col;
      var $104=((($103))|0) < 2;
      if ($104) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $105
      var $106=$diff;
      var $107=$col;
      var $108=$row;
      var $109=($108) & 1;
      var $110=(($vpred+($109<<2))|0);
      var $111=(($110+($107<<1))|0);
      var $112=HEAPU16[(($111)>>1)];
      var $113=((($112))&65535);
      var $114=((($113)+($106))|0);
      var $115=((($114)) & 65535);
      HEAP16[(($111)>>1)]=$115;
      var $116=$col;
      var $117=(($hpred+($116<<1))|0);
      HEAP16[(($117)>>1)]=$115;
      __label__ = 22; break;
    case 21: // $118
      var $119=$diff;
      var $120=$col;
      var $121=($120) & 1;
      var $122=(($hpred+($121<<1))|0);
      var $123=HEAPU16[(($122)>>1)];
      var $124=((($123))&65535);
      var $125=((($124)+($119))|0);
      var $126=((($125)) & 65535);
      HEAP16[(($122)>>1)]=$126;
      __label__ = 22; break;
    case 22: // $127
      var $128=$row;
      var $129=HEAPU16[((_top_margin)>>1)];
      var $130=((($129))&65535);
      var $131=((($128)-($130))|0);
      var $132=HEAPU16[((_height)>>1)];
      var $133=((($132))&65535);
      var $134=((($131))>>>0) < ((($133))>>>0);
      if ($134) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: // $135
      var $136=$col;
      var $137=HEAPU16[((_left_margin)>>1)];
      var $138=((($137))&65535);
      var $139=((($136)-($138))|0);
      var $140=HEAPU16[((_width)>>1)];
      var $141=((($140))&65535);
      var $142=((($139))>>>0) < ((($141))>>>0);
      if ($142) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $143
      var $144=$col;
      var $145=($144) & 1;
      var $146=(($hpred+($145<<1))|0);
      var $147=HEAP16[(($146)>>1)];
      var $148=HEAPU32[((_filters)>>2)];
      var $149=$row;
      var $150=HEAPU16[((_top_margin)>>1)];
      var $151=((($150))&65535);
      var $152=((($149)-($151))|0);
      var $153=($152) << 1;
      var $154=($153) & 14;
      var $155=$col;
      var $156=HEAPU16[((_left_margin)>>1)];
      var $157=((($156))&65535);
      var $158=((($155)-($157))|0);
      var $159=($158) & 1;
      var $160=((($154)+($159))|0);
      var $161=($160) << 1;
      var $162=($148) >>> ((($161))>>>0);
      var $163=($162) & 3;
      var $164=$row;
      var $165=HEAPU16[((_top_margin)>>1)];
      var $166=((($165))&65535);
      var $167=((($164)-($166))|0);
      var $168=HEAPU16[((_shrink)>>1)];
      var $169=((($168))&65535);
      var $170=($167) >> ((($169))|0);
      var $171=HEAPU16[((_iwidth)>>1)];
      var $172=((($171))&65535);
      var $173=((($170)*($172))|0);
      var $174=$col;
      var $175=HEAPU16[((_left_margin)>>1)];
      var $176=((($175))&65535);
      var $177=((($174)-($176))|0);
      var $178=HEAPU16[((_shrink)>>1)];
      var $179=((($178))&65535);
      var $180=($177) >> ((($179))|0);
      var $181=((($173)+($180))|0);
      var $182=HEAP32[((_image)>>2)];
      var $183=(($182+($181<<3))|0);
      var $184=(($183+($163<<1))|0);
      HEAP16[(($184)>>1)]=$147;
      __label__ = 25; break;
    case 25: // $185
      var $186=$col;
      var $187=($186) & 1;
      var $188=(($hpred+($187<<1))|0);
      var $189=HEAPU16[(($188)>>1)];
      var $190=((($189))&65535);
      var $191=HEAP32[((_tiff_bps)>>2)];
      var $192=($190) >> ((($191))|0);
      var $193=((($192))|0)!=0;
      if ($193) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $194
      _derror();
      __label__ = 27; break;
    case 27: // $195
      __label__ = 28; break;
    case 28: // $196
      var $197=$col;
      var $198=((($197)+1)|0);
      $col=$198;
      __label__ = 18; break;
    case 29: // $199
      __label__ = 30; break;
    case 30: // $200
      var $201=$row;
      var $202=((($201)+1)|0);
      $row=$202;
      __label__ = 16; break;
    case 31: // $203
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_pentax_load_raw["X"]=1;

function _nikon_compressed_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $huff;
      var $ver0;
      var $ver1;
      var $vpred=__stackBase__;
      var $hpred=__stackBase__+8;
      var $csize;
      var $i;
      var $min;
      var $max;
      var $step;
      var $tree;
      var $split;
      var $row;
      var $col;
      var $len;
      var $shl;
      var $diff;
      $step=0;
      $tree=0;
      $split=0;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=HEAP32[((_meta_offset)>>2)];
      var $3=_fseek($1, $2, 0);
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_getc_unlocked($4);
      var $6=((($5)) & 65535);
      $ver0=$6;
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_getc_unlocked($7);
      var $9=((($8)) & 65535);
      $ver1=$9;
      var $10=$ver0;
      var $11=((($10))&65535);
      var $12=((($11))|0)==73;
      if ($12) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $13
      var $14=$ver1;
      var $15=((($14))&65535);
      var $16=((($15))|0)==88;
      if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $17
      var $18=HEAP32[((_ifp)>>2)];
      var $19=_fseek($18, 2110, 1);
      __label__ = 3; break;
    case 3: // $20
      var $21=$ver0;
      var $22=((($21))&65535);
      var $23=((($22))|0)==70;
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $24
      $tree=2;
      __label__ = 5; break;
    case 5: // $25
      var $26=HEAP32[((_tiff_bps)>>2)];
      var $27=((($26))|0)==14;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $28
      var $29=$tree;
      var $30=((($29)+3)|0);
      $tree=$30;
      __label__ = 7; break;
    case 7: // $31
      var $32=(($vpred)|0);
      var $33=(($32)|0);
      _read_shorts($33, 4);
      var $34=HEAP32[((_tiff_bps)>>2)];
      var $35=1 << ($34);
      var $36=($35) & 32767;
      $max=$36;
      var $37=_get2();
      $csize=$37;
      var $38=((($37))&65535);
      var $39=((($38))|0) > 1;
      if ($39) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $40
      var $41=$max;
      var $42=$csize;
      var $43=((($42))&65535);
      var $44=((($43)-1)|0);
      var $45=((((($41))|0)/((($44))|0))|0);
      $step=$45;
      __label__ = 9; break;
    case 9: // $46
      var $47=$ver0;
      var $48=((($47))&65535);
      var $49=((($48))|0)==68;
      if ($49) { __label__ = 10; break; } else { __label__ = 21; break; }
    case 10: // $50
      var $51=$ver1;
      var $52=((($51))&65535);
      var $53=((($52))|0)==32;
      if ($53) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: // $54
      var $55=$step;
      var $56=((($55))|0) > 0;
      if ($56) { __label__ = 12; break; } else { __label__ = 21; break; }
    case 12: // $57
      $i=0;
      __label__ = 13; break;
    case 13: // $58
      var $59=$i;
      var $60=$csize;
      var $61=((($60))&65535);
      var $62=((($59))|0) < ((($61))|0);
      if ($62) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $63
      var $64=_get2();
      var $65=$i;
      var $66=$step;
      var $67=((($65)*($66))|0);
      var $68=((_curve+($67<<1))|0);
      HEAP16[(($68)>>1)]=$64;
      __label__ = 15; break;
    case 15: // $69
      var $70=$i;
      var $71=((($70)+1)|0);
      $i=$71;
      __label__ = 13; break;
    case 16: // $72
      $i=0;
      __label__ = 17; break;
    case 17: // $73
      var $74=$i;
      var $75=$max;
      var $76=((($74))|0) < ((($75))|0);
      if ($76) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $77
      var $78=$i;
      var $79=$i;
      var $80=$step;
      var $81=((($79))|0)%((($80))|0);
      var $82=((($78)-($81))|0);
      var $83=((_curve+($82<<1))|0);
      var $84=HEAPU16[(($83)>>1)];
      var $85=((($84))&65535);
      var $86=$step;
      var $87=$i;
      var $88=$step;
      var $89=((($87))|0)%((($88))|0);
      var $90=((($86)-($89))|0);
      var $91=((($85)*($90))|0);
      var $92=$i;
      var $93=$i;
      var $94=$step;
      var $95=((($93))|0)%((($94))|0);
      var $96=((($92)-($95))|0);
      var $97=$step;
      var $98=((($96)+($97))|0);
      var $99=((_curve+($98<<1))|0);
      var $100=HEAPU16[(($99)>>1)];
      var $101=((($100))&65535);
      var $102=$i;
      var $103=$step;
      var $104=((($102))|0)%((($103))|0);
      var $105=((($101)*($104))|0);
      var $106=((($91)+($105))|0);
      var $107=$step;
      var $108=((((($106))|0)/((($107))|0))|0);
      var $109=((($108)) & 65535);
      var $110=$i;
      var $111=((_curve+($110<<1))|0);
      HEAP16[(($111)>>1)]=$109;
      __label__ = 19; break;
    case 19: // $112
      var $113=$i;
      var $114=((($113)+1)|0);
      $i=$114;
      __label__ = 17; break;
    case 20: // $115
      var $116=HEAP32[((_ifp)>>2)];
      var $117=HEAP32[((_meta_offset)>>2)];
      var $118=((($117)+562)|0);
      var $119=_fseek($116, $118, 0);
      var $120=_get2();
      var $121=((($120))&65535);
      $split=$121;
      __label__ = 25; break;
    case 21: // $122
      var $123=$ver0;
      var $124=((($123))&65535);
      var $125=((($124))|0)!=70;
      if ($125) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $126
      var $127=$csize;
      var $128=((($127))&65535);
      var $129=((($128))|0) <= 16385;
      if ($129) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $130
      var $131=$csize;
      var $132=((($131))&65535);
      $max=$132;
      _read_shorts(((_curve)|0), $132);
      __label__ = 24; break;
    case 24: // $133
      __label__ = 25; break;
    case 25: // $134
      __label__ = 26; break;
    case 26: // $135
      var $136=$max;
      var $137=((($136)-2)|0);
      var $138=((_curve+($137<<1))|0);
      var $139=HEAPU16[(($138)>>1)];
      var $140=((($139))&65535);
      var $141=$max;
      var $142=((($141)-1)|0);
      var $143=((_curve+($142<<1))|0);
      var $144=HEAPU16[(($143)>>1)];
      var $145=((($144))&65535);
      var $146=((($140))|0)==((($145))|0);
      if ($146) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $147
      var $148=$max;
      var $149=((($148)-1)|0);
      $max=$149;
      __label__ = 26; break;
    case 28: // $150
      var $151=$tree;
      var $152=((_nikon_compressed_load_raw_nikon_tree+($151<<5))|0);
      var $153=(($152)|0);
      var $154=_make_decoder($153);
      $huff=$154;
      var $155=HEAP32[((_ifp)>>2)];
      var $156=HEAP32[((_data_offset)>>2)];
      var $157=_fseek($155, $156, 0);
      var $158=_getbithuff(-1, 0);
      $row=0;
      $min=0;
      __label__ = 29; break;
    case 29: // $159
      var $160=$row;
      var $161=HEAPU16[((_height)>>1)];
      var $162=((($161))&65535);
      var $163=((($160))|0) < ((($162))|0);
      if ($163) { __label__ = 30; break; } else { __label__ = 57; break; }
    case 30: // $164
      var $165=$split;
      var $166=((($165))|0)!=0;
      if ($166) { __label__ = 31; break; } else { __label__ = 33; break; }
    case 31: // $167
      var $168=$row;
      var $169=$split;
      var $170=((($168))|0)==((($169))|0);
      if ($170) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: // $171
      var $172=$huff;
      var $173=$172;
      _free($173);
      var $174=$tree;
      var $175=((($174)+1)|0);
      var $176=((_nikon_compressed_load_raw_nikon_tree+($175<<5))|0);
      var $177=(($176)|0);
      var $178=_make_decoder($177);
      $huff=$178;
      $min=16;
      var $179=$max;
      var $180=((($179)+32)|0);
      $max=$180;
      __label__ = 33; break;
    case 33: // $181
      $col=0;
      __label__ = 34; break;
    case 34: // $182
      var $183=$col;
      var $184=HEAPU16[((_raw_width)>>1)];
      var $185=((($184))&65535);
      var $186=((($183))|0) < ((($185))|0);
      if ($186) { __label__ = 35; break; } else { __label__ = 55; break; }
    case 35: // $187
      var $188=$huff;
      var $189=HEAPU16[(($188)>>1)];
      var $190=((($189))&65535);
      var $191=$huff;
      var $192=(($191+2)|0);
      var $193=_getbithuff($190, $192);
      $i=$193;
      var $194=$i;
      var $195=($194) & 15;
      $len=$195;
      var $196=$i;
      var $197=($196) >> 4;
      $shl=$197;
      var $198=$len;
      var $199=$shl;
      var $200=((($198)-($199))|0);
      var $201=_getbithuff($200, 0);
      var $202=($201) << 1;
      var $203=((($202)+1)|0);
      var $204=$shl;
      var $205=($203) << ($204);
      var $206=($205) >>> 1;
      $diff=$206;
      var $207=$diff;
      var $208=$len;
      var $209=((($208)-1)|0);
      var $210=1 << ($209);
      var $211=($207) & ($210);
      var $212=((($211))|0)==0;
      if ($212) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: // $213
      var $214=$len;
      var $215=1 << ($214);
      var $216=$shl;
      var $217=((($216))|0)!=0;
      var $218=($217) ^ 1;
      var $219=((($218))&1);
      var $220=((($215)-($219))|0);
      var $221=$diff;
      var $222=((($221)-($220))|0);
      $diff=$222;
      __label__ = 37; break;
    case 37: // $223
      var $224=$col;
      var $225=((($224))|0) < 2;
      if ($225) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $226
      var $227=$diff;
      var $228=$col;
      var $229=$row;
      var $230=($229) & 1;
      var $231=(($vpred+($230<<2))|0);
      var $232=(($231+($228<<1))|0);
      var $233=HEAPU16[(($232)>>1)];
      var $234=((($233))&65535);
      var $235=((($234)+($227))|0);
      var $236=((($235)) & 65535);
      HEAP16[(($232)>>1)]=$236;
      var $237=$col;
      var $238=(($hpred+($237<<1))|0);
      HEAP16[(($238)>>1)]=$236;
      __label__ = 40; break;
    case 39: // $239
      var $240=$diff;
      var $241=$col;
      var $242=($241) & 1;
      var $243=(($hpred+($242<<1))|0);
      var $244=HEAPU16[(($243)>>1)];
      var $245=((($244))&65535);
      var $246=((($245)+($240))|0);
      var $247=((($246)) & 65535);
      HEAP16[(($243)>>1)]=$247;
      __label__ = 40; break;
    case 40: // $248
      var $249=$col;
      var $250=($249) & 1;
      var $251=(($hpred+($250<<1))|0);
      var $252=HEAPU16[(($251)>>1)];
      var $253=((($252))&65535);
      var $254=$min;
      var $255=((($253)+($254))|0);
      var $256=((($255)) & 65535);
      var $257=((($256))&65535);
      var $258=$max;
      var $259=((($257))|0) >= ((($258))|0);
      if ($259) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $260
      _derror();
      __label__ = 42; break;
    case 42: // $261
      var $262=$col;
      var $263=HEAPU16[((_left_margin)>>1)];
      var $264=((($263))&65535);
      var $265=((($262)-($264))|0);
      var $266=HEAPU16[((_width)>>1)];
      var $267=((($266))&65535);
      var $268=((($265))>>>0) < ((($267))>>>0);
      if ($268) { __label__ = 43; break; } else { __label__ = 53; break; }
    case 43: // $269
      var $270=$col;
      var $271=($270) & 1;
      var $272=(($hpred+($271<<1))|0);
      var $273=HEAP16[(($272)>>1)];
      var $274=((($273) << 16) >> 16);
      var $275=((($274))|0) < 16383;
      if ($275) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: // $276
      var $277=$col;
      var $278=($277) & 1;
      var $279=(($hpred+($278<<1))|0);
      var $280=HEAP16[(($279)>>1)];
      var $281=((($280) << 16) >> 16);
      var $284 = $281;__label__ = 46; break;
    case 45: // $282
      var $284 = 16383;__label__ = 46; break;
    case 46: // $283
      var $284;
      var $285=0 > ((($284))|0);
      if ($285) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: // $286
      var $304 = 0;__label__ = 52; break;
    case 48: // $287
      var $288=$col;
      var $289=($288) & 1;
      var $290=(($hpred+($289<<1))|0);
      var $291=HEAP16[(($290)>>1)];
      var $292=((($291) << 16) >> 16);
      var $293=((($292))|0) < 16383;
      if ($293) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: // $294
      var $295=$col;
      var $296=($295) & 1;
      var $297=(($hpred+($296<<1))|0);
      var $298=HEAP16[(($297)>>1)];
      var $299=((($298) << 16) >> 16);
      var $302 = $299;__label__ = 51; break;
    case 50: // $300
      var $302 = 16383;__label__ = 51; break;
    case 51: // $301
      var $302;
      var $304 = $302;__label__ = 52; break;
    case 52: // $303
      var $304;
      var $305=((_curve+($304<<1))|0);
      var $306=HEAP16[(($305)>>1)];
      var $307=HEAPU32[((_filters)>>2)];
      var $308=$row;
      var $309=($308) << 1;
      var $310=($309) & 14;
      var $311=$col;
      var $312=HEAPU16[((_left_margin)>>1)];
      var $313=((($312))&65535);
      var $314=((($311)-($313))|0);
      var $315=($314) & 1;
      var $316=((($310)+($315))|0);
      var $317=($316) << 1;
      var $318=($307) >>> ((($317))>>>0);
      var $319=($318) & 3;
      var $320=$row;
      var $321=HEAPU16[((_shrink)>>1)];
      var $322=((($321))&65535);
      var $323=($320) >> ((($322))|0);
      var $324=HEAPU16[((_iwidth)>>1)];
      var $325=((($324))&65535);
      var $326=((($323)*($325))|0);
      var $327=$col;
      var $328=HEAPU16[((_left_margin)>>1)];
      var $329=((($328))&65535);
      var $330=((($327)-($329))|0);
      var $331=HEAPU16[((_shrink)>>1)];
      var $332=((($331))&65535);
      var $333=($330) >> ((($332))|0);
      var $334=((($326)+($333))|0);
      var $335=HEAP32[((_image)>>2)];
      var $336=(($335+($334<<3))|0);
      var $337=(($336+($319<<1))|0);
      HEAP16[(($337)>>1)]=$306;
      __label__ = 53; break;
    case 53: // $338
      __label__ = 54; break;
    case 54: // $339
      var $340=$col;
      var $341=((($340)+1)|0);
      $col=$341;
      __label__ = 34; break;
    case 55: // $342
      __label__ = 56; break;
    case 56: // $343
      var $344=$row;
      var $345=((($344)+1)|0);
      $row=$345;
      __label__ = 29; break;
    case 57: // $346
      var $347=$huff;
      var $348=$347;
      _free($348);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_nikon_compressed_load_raw["X"]=1;

function _nikon_is_compressed() {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $test=__stackBase__;
      var $i;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=HEAP32[((_data_offset)>>2)];
      var $4=_fseek($2, $3, 0);
      var $5=(($test)|0);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_fread($5, 1, 256, $6);
      $i=15;
      __label__ = 1; break;
    case 1: // $8
      var $9=$i;
      var $10=((($9))|0) < 256;
      if ($10) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $11
      var $12=$i;
      var $13=(($test+$12)|0);
      var $14=HEAP8[($13)];
      var $15=((($14) << 24) >> 24)!=0;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $16
      $1=1;
      __label__ = 7; break;
    case 4: // $17
      __label__ = 5; break;
    case 5: // $18
      var $19=$i;
      var $20=((($19)+16)|0);
      $i=$20;
      __label__ = 1; break;
    case 6: // $21
      $1=0;
      __label__ = 7; break;
    case 7: // $22
      var $23=$1;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _nikon_e995() {
  var __stackBase__  = STACKTOP; STACKTOP += 1024; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $i;
      var $histo=__stackBase__;
      var $2=(($histo)|0);
      var $3=$2;
      _memset($3, 0, 1024, 1);
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_fseek($4, -2000, 2);
      $i=0;
      __label__ = 1; break;
    case 1: // $6
      var $7=$i;
      var $8=((($7))|0) < 2000;
      if ($8) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $9
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_getc_unlocked($10);
      var $12=(($histo+($11<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+1)|0);
      HEAP32[(($12)>>2)]=$14;
      __label__ = 3; break;
    case 3: // $15
      var $16=$i;
      var $17=((($16)+1)|0);
      $i=$17;
      __label__ = 1; break;
    case 4: // $18
      $i=0;
      __label__ = 5; break;
    case 5: // $19
      var $20=$i;
      var $21=((($20))|0) < 4;
      if ($21) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: // $22
      var $23=$i;
      var $24=((_nikon_e995_often+$23)|0);
      var $25=HEAPU8[($24)];
      var $26=((($25))&255);
      var $27=(($histo+($26<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28))|0) < 200;
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $30
      $1=0;
      __label__ = 11; break;
    case 8: // $31
      __label__ = 9; break;
    case 9: // $32
      var $33=$i;
      var $34=((($33)+1)|0);
      $i=$34;
      __label__ = 5; break;
    case 10: // $35
      $1=1;
      __label__ = 11; break;
    case 11: // $36
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _nikon_e2100() {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $t=__stackBase__;
      var $i;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=_fseek($2, 0, 0);
      $i=0;
      __label__ = 1; break;
    case 1: // $4
      var $5=$i;
      var $6=((($5))|0) < 1024;
      if ($6) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $7
      var $8=(($t)|0);
      var $9=HEAP32[((_ifp)>>2)];
      var $10=_fread($8, 1, 12, $9);
      var $11=(($t+2)|0);
      var $12=HEAPU8[($11)];
      var $13=((($12))&255);
      var $14=(($t+4)|0);
      var $15=HEAPU8[($14)];
      var $16=((($15))&255);
      var $17=($13) & ($16);
      var $18=(($t+7)|0);
      var $19=HEAPU8[($18)];
      var $20=((($19))&255);
      var $21=($17) & ($20);
      var $22=(($t+9)|0);
      var $23=HEAPU8[($22)];
      var $24=((($23))&255);
      var $25=($21) & ($24);
      var $26=($25) >> 4;
      var $27=(($t+1)|0);
      var $28=HEAPU8[($27)];
      var $29=((($28))&255);
      var $30=($26) & ($29);
      var $31=(($t+6)|0);
      var $32=HEAPU8[($31)];
      var $33=((($32))&255);
      var $34=($30) & ($33);
      var $35=(($t+8)|0);
      var $36=HEAPU8[($35)];
      var $37=((($36))&255);
      var $38=($34) & ($37);
      var $39=(($t+11)|0);
      var $40=HEAPU8[($39)];
      var $41=((($40))&255);
      var $42=($38) & ($41);
      var $43=($42) & 3;
      var $44=((($43))|0)!=3;
      if ($44) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $45
      $1=0;
      __label__ = 7; break;
    case 4: // $46
      __label__ = 5; break;
    case 5: // $47
      var $48=$i;
      var $49=((($48)+1)|0);
      $i=$49;
      __label__ = 1; break;
    case 6: // $50
      $1=1;
      __label__ = 7; break;
    case 7: // $51
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + __label__);
  }
}
_nikon_e2100["X"]=1;

function _nikon_3700() {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $bits;
      var $i;
      var $dp=__stackBase__;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 3072, 0);
      var $3=(($dp)|0);
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_fread($3, 1, 24, $4);
      var $6=(($dp+8)|0);
      var $7=HEAPU8[($6)];
      var $8=((($7))&255);
      var $9=($8) & 3;
      var $10=($9) << 4;
      var $11=(($dp+20)|0);
      var $12=HEAPU8[($11)];
      var $13=((($12))&255);
      var $14=($13) & 3;
      var $15=($10) | ($14);
      $bits=$15;
      $i=0;
      __label__ = 1; break;
    case 1: // $16
      var $17=$i;
      var $18=((($17))>>>0) < 4;
      if ($18) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $19
      var $20=$bits;
      var $21=$i;
      var $22=(((_nikon_3700_table)+($21<<5))|0);
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($20))|0)==((($24))|0);
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $26
      var $27=$i;
      var $28=(((_nikon_3700_table)+($27<<5))|0);
      var $29=(($28+4)|0);
      var $30=(($29)|0);
      var $31=_strcpy(((_make)|0), $30);
      var $32=$i;
      var $33=(((_nikon_3700_table)+($32<<5))|0);
      var $34=(($33+16)|0);
      var $35=(($34)|0);
      var $36=_strcpy(((_model)|0), $35);
      __label__ = 4; break;
    case 4: // $37
      __label__ = 5; break;
    case 5: // $38
      var $39=$i;
      var $40=((($39)+1)|0);
      $i=$40;
      __label__ = 1; break;
    case 6: // $41
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _minolta_z2() {
  var __stackBase__  = STACKTOP; STACKTOP += 424; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $nz;
      var $tail=__stackBase__;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, -424, 2);
      var $3=(($tail)|0);
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_fread($3, 1, 424, $4);
      $i=0;
      $nz=0;
      __label__ = 1; break;
    case 1: // $6
      var $7=$i;
      var $8=((($7))>>>0) < 424;
      if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $9
      var $10=$i;
      var $11=(($tail+$10)|0);
      var $12=HEAP8[($11)];
      var $13=((($12) << 24) >> 24)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $14
      var $15=$nz;
      var $16=((($15)+1)|0);
      $nz=$16;
      __label__ = 4; break;
    case 4: // $17
      __label__ = 5; break;
    case 5: // $18
      var $19=$i;
      var $20=((($19)+1)|0);
      $i=$20;
      __label__ = 1; break;
    case 6: // $21
      var $22=$nz;
      var $23=((($22))|0) > 20;
      var $24=((($23))&1);
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fuji_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $wide;
      var $row;
      var $col;
      var $r;
      var $c;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=HEAPU16[((_top_margin)>>1)];
      var $3=((($2))&65535);
      var $4=HEAPU16[((_raw_width)>>1)];
      var $5=((($4))&65535);
      var $6=((($3)*($5))|0);
      var $7=HEAPU16[((_left_margin)>>1)];
      var $8=((($7))&65535);
      var $9=((($6)+($8))|0);
      var $10=(((($9)<<1))|0);
      var $11=_fseek($1, $10, 1);
      var $12=HEAPU16[((_fuji_width)>>1)];
      var $13=((($12))&65535);
      var $14=HEAP32[((_fuji_layout)>>2)];
      var $15=((($14))|0)!=0;
      var $16=($15) ^ 1;
      var $17=((($16))&1);
      var $18=($13) << ($17);
      $wide=$18;
      var $19=$wide;
      var $20=_calloc($19, 2);
      var $21=$20;
      $pixel=$21;
      var $22=$pixel;
      var $23=$22;
      _merror($23, ((__str10)|0));
      $row=0;
      __label__ = 1; break;
    case 1: // $24
      var $25=$row;
      var $26=HEAPU16[((_raw_height)>>1)];
      var $27=((($26))&65535);
      var $28=((($25))|0) < ((($27))|0);
      if ($28) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: // $29
      var $30=$pixel;
      var $31=$wide;
      _read_shorts($30, $31);
      var $32=HEAP32[((_ifp)>>2)];
      var $33=HEAPU16[((_raw_width)>>1)];
      var $34=((($33))&65535);
      var $35=$wide;
      var $36=((($34)-($35))|0);
      var $37=(((($36)<<1))|0);
      var $38=_fseek($32, $37, 1);
      $col=0;
      __label__ = 3; break;
    case 3: // $39
      var $40=$col;
      var $41=$wide;
      var $42=((($40))|0) < ((($41))|0);
      if ($42) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: // $43
      var $44=HEAP32[((_fuji_layout)>>2)];
      var $45=((($44))|0)!=0;
      if ($45) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $46
      var $47=HEAPU16[((_fuji_width)>>1)];
      var $48=((($47))&65535);
      var $49=((($48)-1)|0);
      var $50=$col;
      var $51=((($49)-($50))|0);
      var $52=$row;
      var $53=($52) >> 1;
      var $54=((($51)+($53))|0);
      $r=$54;
      var $55=$col;
      var $56=$row;
      var $57=((($56)+1)|0);
      var $58=($57) >> 1;
      var $59=((($55)+($58))|0);
      $c=$59;
      __label__ = 7; break;
    case 6: // $60
      var $61=HEAPU16[((_fuji_width)>>1)];
      var $62=((($61))&65535);
      var $63=((($62)-1)|0);
      var $64=$row;
      var $65=((($63)+($64))|0);
      var $66=$col;
      var $67=($66) >> 1;
      var $68=((($65)-($67))|0);
      $r=$68;
      var $69=$row;
      var $70=$col;
      var $71=((($70)+1)|0);
      var $72=($71) >> 1;
      var $73=((($69)+($72))|0);
      $c=$73;
      __label__ = 7; break;
    case 7: // $74
      var $75=$col;
      var $76=$pixel;
      var $77=(($76+($75<<1))|0);
      var $78=HEAP16[(($77)>>1)];
      var $79=HEAPU32[((_filters)>>2)];
      var $80=$r;
      var $81=($80) << 1;
      var $82=($81) & 14;
      var $83=$c;
      var $84=($83) & 1;
      var $85=((($82)+($84))|0);
      var $86=($85) << 1;
      var $87=($79) >>> ((($86))>>>0);
      var $88=($87) & 3;
      var $89=$r;
      var $90=HEAPU16[((_shrink)>>1)];
      var $91=((($90))&65535);
      var $92=($89) >> ((($91))|0);
      var $93=HEAPU16[((_iwidth)>>1)];
      var $94=((($93))&65535);
      var $95=((($92)*($94))|0);
      var $96=$c;
      var $97=HEAPU16[((_shrink)>>1)];
      var $98=((($97))&65535);
      var $99=($96) >> ((($98))|0);
      var $100=((($95)+($99))|0);
      var $101=HEAP32[((_image)>>2)];
      var $102=(($101+($100<<3))|0);
      var $103=(($102+($88<<1))|0);
      HEAP16[(($103)>>1)]=$78;
      __label__ = 8; break;
    case 8: // $104
      var $105=$col;
      var $106=((($105)+1)|0);
      $col=$106;
      __label__ = 3; break;
    case 9: // $107
      __label__ = 10; break;
    case 10: // $108
      var $109=$row;
      var $110=((($109)+1)|0);
      $row=$110;
      __label__ = 1; break;
    case 11: // $111
      var $112=$pixel;
      var $113=$112;
      _free($113);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fuji_load_raw["X"]=1;

function _bayer($row, $col) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $1=$row;
      $2=$col;
      var $3=$1;
      var $4=HEAPU16[((_height)>>1)];
      var $5=((($4))&65535);
      var $6=((($3))>>>0) < ((($5))>>>0);
      if ($6) { __label__ = 1; break; } else { __label__ = 3; break; }
    case 1: // $7
      var $8=$2;
      var $9=HEAPU16[((_width)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))>>>0) < ((($10))>>>0);
      if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $12
      var $13=HEAPU32[((_filters)>>2)];
      var $14=$1;
      var $15=($14) << 1;
      var $16=($15) & 14;
      var $17=$2;
      var $18=($17) & 1;
      var $19=((($16)+($18))|0);
      var $20=($19) << 1;
      var $21=($13) >>> ((($20))>>>0);
      var $22=($21) & 3;
      var $23=$1;
      var $24=HEAPU16[((_shrink)>>1)];
      var $25=((($24))&65535);
      var $26=($23) >>> ((($25))>>>0);
      var $27=HEAPU16[((_iwidth)>>1)];
      var $28=((($27))&65535);
      var $29=((($26)*($28))|0);
      var $30=$2;
      var $31=HEAPU16[((_shrink)>>1)];
      var $32=((($31))&65535);
      var $33=($30) >>> ((($32))>>>0);
      var $34=((($29)+($33))|0);
      var $35=HEAP32[((_image)>>2)];
      var $36=(($35+($34<<3))|0);
      var $37=(($36+($22<<1))|0);
      var $38=HEAPU16[(($37)>>1)];
      var $39=((($38))&65535);
      var $42 = $39;__label__ = 4; break;
    case 3: // $40
      var $42 = 0;__label__ = 4; break;
    case 4: // $41
      var $42;
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ppm_thumb() {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $thumb;
  var $1=HEAPU16[((_thumb_width)>>1)];
  var $2=((($1))&65535);
  var $3=HEAPU16[((_thumb_height)>>1)];
  var $4=((($3))&65535);
  var $5=((($2)*($4))|0);
  var $6=((($5)*3)|0);
  HEAP32[((_thumb_length)>>2)]=$6;
  var $7=HEAP32[((_thumb_length)>>2)];
  var $8=_malloc($7);
  $thumb=$8;
  var $9=$thumb;
  _merror($9, ((__str11)|0));
  var $10=HEAP32[((_ofp)>>2)];
  var $11=HEAPU16[((_thumb_width)>>1)];
  var $12=((($11))&65535);
  var $13=HEAPU16[((_thumb_height)>>1)];
  var $14=((($13))&65535);
  var $15=_fprintf($10, ((__str12)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,HEAP32[((tempInt+4)>>2)]=$14,tempInt));
  var $16=$thumb;
  var $17=HEAP32[((_thumb_length)>>2)];
  var $18=HEAP32[((_ifp)>>2)];
  var $19=_fread($16, 1, $17, $18);
  var $20=$thumb;
  var $21=HEAP32[((_thumb_length)>>2)];
  var $22=HEAP32[((_ofp)>>2)];
  var $23=_fwrite($20, 1, $21, $22);
  var $24=$thumb;
  _free($24);
  STACKTOP = __stackBase__;
  return;
}


function _layer_thumb() {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $c;
      var $thumb;
      var $map=__stackBase__;
      var $1=$map;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1)]=HEAP8[(((_layer_thumb_map)|0))]; HEAP8[($1+1)]=HEAP8[(((_layer_thumb_map)|0)+1)]; HEAP8[($1+2)]=HEAP8[(((_layer_thumb_map)|0)+2)]; HEAP8[($1+3)]=HEAP8[(((_layer_thumb_map)|0)+3)]; HEAP8[($1+4)]=HEAP8[(((_layer_thumb_map)|0)+4)]; HEAP8[($1+5)]=HEAP8[(((_layer_thumb_map)|0)+5)]; HEAP8[($1+6)]=HEAP8[(((_layer_thumb_map)|0)+6)]; HEAP8[($1+7)]=HEAP8[(((_layer_thumb_map)|0)+7)];
      var $2=HEAPU32[((_thumb_misc)>>2)];
      var $3=($2) >>> 5;
      var $4=($3) & 7;
      HEAP32[((_colors)>>2)]=$4;
      var $5=HEAPU16[((_thumb_width)>>1)];
      var $6=((($5))&65535);
      var $7=HEAPU16[((_thumb_height)>>1)];
      var $8=((($7))&65535);
      var $9=((($6)*($8))|0);
      HEAP32[((_thumb_length)>>2)]=$9;
      var $10=HEAP32[((_colors)>>2)];
      var $11=HEAP32[((_thumb_length)>>2)];
      var $12=_calloc($10, $11);
      $thumb=$12;
      var $13=$thumb;
      _merror($13, ((__str13)|0));
      var $14=HEAP32[((_ofp)>>2)];
      var $15=HEAP32[((_colors)>>2)];
      var $16=($15) >> 1;
      var $17=((($16)+5)|0);
      var $18=HEAPU16[((_thumb_width)>>1)];
      var $19=((($18))&65535);
      var $20=HEAPU16[((_thumb_height)>>1)];
      var $21=((($20))&65535);
      var $22=_fprintf($14, ((__str14)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$17,HEAP32[((tempInt+4)>>2)]=$19,HEAP32[((tempInt+8)>>2)]=$21,tempInt));
      var $23=$thumb;
      var $24=HEAP32[((_thumb_length)>>2)];
      var $25=HEAP32[((_colors)>>2)];
      var $26=HEAP32[((_ifp)>>2)];
      var $27=_fread($23, $24, $25, $26);
      $i=0;
      __label__ = 1; break;
    case 1: // $28
      var $29=$i;
      var $30=HEAPU32[((_thumb_length)>>2)];
      var $31=((($29))>>>0) < ((($30))>>>0);
      if ($31) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $32
      $c=0;
      __label__ = 3; break;
    case 3: // $33
      var $34=$c;
      var $35=HEAP32[((_colors)>>2)];
      var $36=((($34))|0) < ((($35))|0);
      if ($36) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $37
      var $38=$i;
      var $39=HEAP32[((_thumb_length)>>2)];
      var $40=$c;
      var $41=HEAPU32[((_thumb_misc)>>2)];
      var $42=($41) >>> 8;
      var $43=(($map+($42<<2))|0);
      var $44=(($43+$40)|0);
      var $45=HEAP8[($44)];
      var $46=((($45) << 24) >> 24);
      var $47=((($46)-48)|0);
      var $48=((($39)*($47))|0);
      var $49=((($38)+($48))|0);
      var $50=$thumb;
      var $51=(($50+$49)|0);
      var $52=HEAP8[($51)];
      var $53=((($52) << 24) >> 24);
      var $54=HEAP32[((_ofp)>>2)];
      var $55=_putc($53, $54);
      __label__ = 5; break;
    case 5: // $56
      var $57=$c;
      var $58=((($57)+1)|0);
      $c=$58;
      __label__ = 3; break;
    case 6: // $59
      __label__ = 7; break;
    case 7: // $60
      var $61=$i;
      var $62=((($61)+1)|0);
      $i=$62;
      __label__ = 1; break;
    case 8: // $63
      var $64=$thumb;
      _free($64);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_layer_thumb["X"]=1;

function _rollei_thumb() {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $thumb;
      var $1=HEAPU16[((_thumb_width)>>1)];
      var $2=((($1))&65535);
      var $3=HEAPU16[((_thumb_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2)*($4))|0);
      HEAP32[((_thumb_length)>>2)]=$5;
      var $6=HEAP32[((_thumb_length)>>2)];
      var $7=_calloc($6, 2);
      var $8=$7;
      $thumb=$8;
      var $9=$thumb;
      var $10=$9;
      _merror($10, ((__str15)|0));
      var $11=HEAP32[((_ofp)>>2)];
      var $12=HEAPU16[((_thumb_width)>>1)];
      var $13=((($12))&65535);
      var $14=HEAPU16[((_thumb_height)>>1)];
      var $15=((($14))&65535);
      var $16=_fprintf($11, ((__str12)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,HEAP32[((tempInt+4)>>2)]=$15,tempInt));
      var $17=$thumb;
      var $18=HEAP32[((_thumb_length)>>2)];
      _read_shorts($17, $18);
      $i=0;
      __label__ = 1; break;
    case 1: // $19
      var $20=$i;
      var $21=HEAPU32[((_thumb_length)>>2)];
      var $22=((($20))>>>0) < ((($21))>>>0);
      if ($22) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $23
      var $24=$i;
      var $25=$thumb;
      var $26=(($25+($24<<1))|0);
      var $27=HEAPU16[(($26)>>1)];
      var $28=((($27))&65535);
      var $29=($28) << 3;
      var $30=HEAP32[((_ofp)>>2)];
      var $31=_putc($29, $30);
      var $32=$i;
      var $33=$thumb;
      var $34=(($33+($32<<1))|0);
      var $35=HEAPU16[(($34)>>1)];
      var $36=((($35))&65535);
      var $37=($36) >> 5;
      var $38=($37) << 2;
      var $39=HEAP32[((_ofp)>>2)];
      var $40=_putc($38, $39);
      var $41=$i;
      var $42=$thumb;
      var $43=(($42+($41<<1))|0);
      var $44=HEAPU16[(($43)>>1)];
      var $45=((($44))&65535);
      var $46=($45) >> 11;
      var $47=($46) << 3;
      var $48=HEAP32[((_ofp)>>2)];
      var $49=_putc($47, $48);
      __label__ = 3; break;
    case 3: // $50
      var $51=$i;
      var $52=((($51)+1)|0);
      $i=$52;
      __label__ = 1; break;
    case 4: // $53
      var $54=$thumb;
      var $55=$54;
      _free($55);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_rollei_thumb["X"]=1;

function _rollei_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel=__stackBase__;
      var $iten;
      var $isix;
      var $i;
      var $buffer;
      var $row;
      var $col;
      var $todo=__stackBase__+12;
      $iten=0;
      $buffer=0;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=HEAPU16[((_raw_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2)*($4))|0);
      var $6=((($5)*5)|0);
      var $7=((((($6))|0)/8)|0);
      $isix=$7;
      __label__ = 1; break;
    case 1: // $8
      var $9=(($pixel)|0);
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_fread($9, 1, 10, $10);
      var $12=((($11))|0)==10;
      if ($12) { __label__ = 2; break; } else { __label__ = 18; break; }
    case 2: // $13
      $i=0;
      __label__ = 3; break;
    case 3: // $14
      var $15=$i;
      var $16=((($15))>>>0) < 10;
      if ($16) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $17
      var $18=$iten;
      var $19=((($18)+1)|0);
      $iten=$19;
      var $20=$i;
      var $21=(($todo+($20<<2))|0);
      HEAP32[(($21)>>2)]=$18;
      var $22=$i;
      var $23=(($pixel+$22)|0);
      var $24=HEAPU8[($23)];
      var $25=((($24))&255);
      var $26=($25) << 8;
      var $27=$i;
      var $28=((($27)+1)|0);
      var $29=(($pixel+$28)|0);
      var $30=HEAPU8[($29)];
      var $31=((($30))&255);
      var $32=($26) | ($31);
      var $33=$i;
      var $34=((($33)+1)|0);
      var $35=(($todo+($34<<2))|0);
      HEAP32[(($35)>>2)]=$32;
      var $36=$i;
      var $37=(($pixel+$36)|0);
      var $38=HEAPU8[($37)];
      var $39=((($38))&255);
      var $40=($39) >> 2;
      var $41=$buffer;
      var $42=($41) << 6;
      var $43=($40) | ($42);
      $buffer=$43;
      __label__ = 5; break;
    case 5: // $44
      var $45=$i;
      var $46=((($45)+2)|0);
      $i=$46;
      __label__ = 3; break;
    case 6: // $47
      __label__ = 7; break;
    case 7: // $48
      var $49=$i;
      var $50=((($49))>>>0) < 16;
      if ($50) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $51
      var $52=$isix;
      var $53=((($52)+1)|0);
      $isix=$53;
      var $54=$i;
      var $55=(($todo+($54<<2))|0);
      HEAP32[(($55)>>2)]=$52;
      var $56=$buffer;
      var $57=$i;
      var $58=((14-($57))|0);
      var $59=((($58)*5)|0);
      var $60=($56) >>> ((($59))>>>0);
      var $61=$i;
      var $62=((($61)+1)|0);
      var $63=(($todo+($62<<2))|0);
      HEAP32[(($63)>>2)]=$60;
      __label__ = 9; break;
    case 9: // $64
      var $65=$i;
      var $66=((($65)+2)|0);
      $i=$66;
      __label__ = 7; break;
    case 10: // $67
      $i=0;
      __label__ = 11; break;
    case 11: // $68
      var $69=$i;
      var $70=((($69))>>>0) < 16;
      if ($70) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: // $71
      var $72=$i;
      var $73=(($todo+($72<<2))|0);
      var $74=HEAPU32[(($73)>>2)];
      var $75=HEAPU16[((_raw_width)>>1)];
      var $76=((($75))&65535);
      var $77=Math.floor(((($74))>>>0)/((($76))>>>0));
      var $78=HEAPU16[((_top_margin)>>1)];
      var $79=((($78))&65535);
      var $80=((($77)-($79))|0);
      $row=$80;
      var $81=$i;
      var $82=(($todo+($81<<2))|0);
      var $83=HEAPU32[(($82)>>2)];
      var $84=HEAPU16[((_raw_width)>>1)];
      var $85=((($84))&65535);
      var $86=((($83))>>>0)%((($85))>>>0);
      var $87=HEAPU16[((_left_margin)>>1)];
      var $88=((($87))&65535);
      var $89=((($86)-($88))|0);
      $col=$89;
      var $90=$row;
      var $91=HEAPU16[((_height)>>1)];
      var $92=((($91))&65535);
      var $93=((($90))>>>0) < ((($92))>>>0);
      if ($93) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $94
      var $95=$col;
      var $96=HEAPU16[((_width)>>1)];
      var $97=((($96))&65535);
      var $98=((($95))>>>0) < ((($97))>>>0);
      if ($98) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $99
      var $100=$i;
      var $101=((($100)+1)|0);
      var $102=(($todo+($101<<2))|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=($103) & 1023;
      var $105=((($104)) & 65535);
      var $106=HEAPU32[((_filters)>>2)];
      var $107=$row;
      var $108=($107) << 1;
      var $109=($108) & 14;
      var $110=$col;
      var $111=($110) & 1;
      var $112=((($109)+($111))|0);
      var $113=($112) << 1;
      var $114=($106) >>> ((($113))>>>0);
      var $115=($114) & 3;
      var $116=$row;
      var $117=HEAPU16[((_shrink)>>1)];
      var $118=((($117))&65535);
      var $119=($116) >>> ((($118))>>>0);
      var $120=HEAPU16[((_iwidth)>>1)];
      var $121=((($120))&65535);
      var $122=((($119)*($121))|0);
      var $123=$col;
      var $124=HEAPU16[((_shrink)>>1)];
      var $125=((($124))&65535);
      var $126=($123) >>> ((($125))>>>0);
      var $127=((($122)+($126))|0);
      var $128=HEAP32[((_image)>>2)];
      var $129=(($128+($127<<3))|0);
      var $130=(($129+($115<<1))|0);
      HEAP16[(($130)>>1)]=$105;
      __label__ = 15; break;
    case 15: // $131
      __label__ = 16; break;
    case 16: // $132
      var $133=$i;
      var $134=((($133)+2)|0);
      $i=$134;
      __label__ = 11; break;
    case 17: // $135
      __label__ = 1; break;
    case 18: // $136
      HEAP32[((_maximum)>>2)]=1023;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_rollei_load_raw["X"]=1;

function _phase_one_flat_field($is_float, $nc) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $head=__stackBase__;
      var $wide;
      var $y;
      var $x;
      var $c;
      var $rend;
      var $cend;
      var $row;
      var $col;
      var $mrow;
      var $num;
      var $mult=__stackBase__+16;
      $1=$is_float;
      $2=$nc;
      var $3=(($head)|0);
      _read_shorts($3, 8);
      var $4=(($head+4)|0);
      var $5=HEAPU16[(($4)>>1)];
      var $6=((($5))&65535);
      var $7=(($head+8)|0);
      var $8=HEAPU16[(($7)>>1)];
      var $9=((($8))&65535);
      var $10=((((($6))|0)/((($9))|0))|0);
      $wide=$10;
      var $11=$2;
      var $12=$wide;
      var $13=((($11)*($12))|0);
      var $14=_calloc($13, 4);
      var $15=$14;
      $mrow=$15;
      var $16=$mrow;
      var $17=$16;
      _merror($17, ((__str16)|0));
      $y=0;
      __label__ = 1; break;
    case 1: // $18
      var $19=$y;
      var $20=(($head+6)|0);
      var $21=HEAPU16[(($20)>>1)];
      var $22=((($21))&65535);
      var $23=(($head+10)|0);
      var $24=HEAPU16[(($23)>>1)];
      var $25=((($24))&65535);
      var $26=((((($22))|0)/((($25))|0))|0);
      var $27=((($19))>>>0) < ((($26))>>>0);
      if ($27) { __label__ = 2; break; } else { __label__ = 66; break; }
    case 2: // $28
      $x=0;
      __label__ = 3; break;
    case 3: // $29
      var $30=$x;
      var $31=$wide;
      var $32=((($30))>>>0) < ((($31))>>>0);
      if ($32) { __label__ = 4; break; } else { __label__ = 16; break; }
    case 4: // $33
      $c=0;
      __label__ = 5; break;
    case 5: // $34
      var $35=$c;
      var $36=$2;
      var $37=((($35))>>>0) < ((($36))>>>0);
      if ($37) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: // $38
      var $39=$1;
      var $40=((($39))|0)!=0;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $41
      var $42=_getreal(11);
      var $49 = $42;__label__ = 9; break;
    case 8: // $43
      var $44=_get2();
      var $45=((($44))&65535);
      var $46=((($45))|0);
      var $47=($46)/32768;
      var $49 = $47;__label__ = 9; break;
    case 9: // $48
      var $49;
      var $50=($49);
      $num=$50;
      var $51=$y;
      var $52=((($51))|0)==0;
      if ($52) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $53
      var $54=$num;
      var $55=$c;
      var $56=$wide;
      var $57=((($55)*($56))|0);
      var $58=$x;
      var $59=((($57)+($58))|0);
      var $60=$mrow;
      var $61=(($60+($59<<2))|0);
      HEAPF32[(($61)>>2)]=$54;
      __label__ = 12; break;
    case 11: // $62
      var $63=$num;
      var $64=$c;
      var $65=$wide;
      var $66=((($64)*($65))|0);
      var $67=$x;
      var $68=((($66)+($67))|0);
      var $69=$mrow;
      var $70=(($69+($68<<2))|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=($63)-($71);
      var $73=(($head+10)|0);
      var $74=HEAPU16[(($73)>>1)];
      var $75=((($74))&65535);
      var $76=((($75))|0);
      var $77=($72)/($76);
      var $78=$c;
      var $79=((($78)+1)|0);
      var $80=$wide;
      var $81=((($79)*($80))|0);
      var $82=$x;
      var $83=((($81)+($82))|0);
      var $84=$mrow;
      var $85=(($84+($83<<2))|0);
      HEAPF32[(($85)>>2)]=$77;
      __label__ = 12; break;
    case 12: // $86
      __label__ = 13; break;
    case 13: // $87
      var $88=$c;
      var $89=((($88)+2)|0);
      $c=$89;
      __label__ = 5; break;
    case 14: // $90
      __label__ = 15; break;
    case 15: // $91
      var $92=$x;
      var $93=((($92)+1)|0);
      $x=$93;
      __label__ = 3; break;
    case 16: // $94
      var $95=$y;
      var $96=((($95))|0)==0;
      if ($96) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $97
      __label__ = 65; break;
    case 18: // $98
      var $99=(($head+2)|0);
      var $100=HEAPU16[(($99)>>1)];
      var $101=((($100))&65535);
      var $102=HEAPU16[((_top_margin)>>1)];
      var $103=((($102))&65535);
      var $104=((($101)-($103))|0);
      var $105=$y;
      var $106=(($head+10)|0);
      var $107=HEAPU16[(($106)>>1)];
      var $108=((($107))&65535);
      var $109=((($105)*($108))|0);
      var $110=((($104)+($109))|0);
      $rend=$110;
      var $111=$rend;
      var $112=(($head+10)|0);
      var $113=HEAPU16[(($112)>>1)];
      var $114=((($113))&65535);
      var $115=((($111)-($114))|0);
      $row=$115;
      __label__ = 19; break;
    case 19: // $116
      var $117=$row;
      var $118=HEAPU16[((_height)>>1)];
      var $119=((($118))&65535);
      var $120=((($117))>>>0) < ((($119))>>>0);
      if ($120) { __label__ = 20; break; } else { var $126 = 0;__label__ = 21; break; }
    case 20: // $121
      var $122=$row;
      var $123=$rend;
      var $124=((($122))>>>0) < ((($123))>>>0);
      var $126 = $124;__label__ = 21; break;
    case 21: // $125
      var $126;
      if ($126) { __label__ = 22; break; } else { __label__ = 64; break; }
    case 22: // $127
      $x=1;
      __label__ = 23; break;
    case 23: // $128
      var $129=$x;
      var $130=$wide;
      var $131=((($129))>>>0) < ((($130))>>>0);
      if ($131) { __label__ = 24; break; } else { __label__ = 54; break; }
    case 24: // $132
      $c=0;
      __label__ = 25; break;
    case 25: // $133
      var $134=$c;
      var $135=$2;
      var $136=((($134))>>>0) < ((($135))>>>0);
      if ($136) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: // $137
      var $138=$c;
      var $139=$wide;
      var $140=((($138)*($139))|0);
      var $141=$x;
      var $142=((($140)+($141))|0);
      var $143=((($142)-1)|0);
      var $144=$mrow;
      var $145=(($144+($143<<2))|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$c;
      var $148=(($mult+($147<<2))|0);
      HEAPF32[(($148)>>2)]=$146;
      var $149=$c;
      var $150=$wide;
      var $151=((($149)*($150))|0);
      var $152=$x;
      var $153=((($151)+($152))|0);
      var $154=$mrow;
      var $155=(($154+($153<<2))|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=$c;
      var $158=(($mult+($157<<2))|0);
      var $159=HEAPF32[(($158)>>2)];
      var $160=($156)-($159);
      var $161=(($head+8)|0);
      var $162=HEAPU16[(($161)>>1)];
      var $163=((($162))&65535);
      var $164=((($163))|0);
      var $165=($160)/($164);
      var $166=$c;
      var $167=((($166)+1)|0);
      var $168=(($mult+($167<<2))|0);
      HEAPF32[(($168)>>2)]=$165;
      __label__ = 27; break;
    case 27: // $169
      var $170=$c;
      var $171=((($170)+2)|0);
      $c=$171;
      __label__ = 25; break;
    case 28: // $172
      var $173=(($head)|0);
      var $174=HEAPU16[(($173)>>1)];
      var $175=((($174))&65535);
      var $176=HEAPU16[((_left_margin)>>1)];
      var $177=((($176))&65535);
      var $178=((($175)-($177))|0);
      var $179=$x;
      var $180=(($head+8)|0);
      var $181=HEAPU16[(($180)>>1)];
      var $182=((($181))&65535);
      var $183=((($179)*($182))|0);
      var $184=((($178)+($183))|0);
      $cend=$184;
      var $185=$cend;
      var $186=(($head+8)|0);
      var $187=HEAPU16[(($186)>>1)];
      var $188=((($187))&65535);
      var $189=((($185)-($188))|0);
      $col=$189;
      __label__ = 29; break;
    case 29: // $190
      var $191=$col;
      var $192=HEAPU16[((_width)>>1)];
      var $193=((($192))&65535);
      var $194=((($191))>>>0) < ((($193))>>>0);
      if ($194) { __label__ = 30; break; } else { var $200 = 0;__label__ = 31; break; }
    case 30: // $195
      var $196=$col;
      var $197=$cend;
      var $198=((($196))>>>0) < ((($197))>>>0);
      var $200 = $198;__label__ = 31; break;
    case 31: // $199
      var $200;
      if ($200) { __label__ = 32; break; } else { __label__ = 52; break; }
    case 32: // $201
      var $202=$2;
      var $203=((($202))|0) > 2;
      if ($203) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $204
      var $205=HEAPU32[((_filters)>>2)];
      var $206=$row;
      var $207=($206) << 1;
      var $208=($207) & 14;
      var $209=$col;
      var $210=($209) & 1;
      var $211=((($208)+($210))|0);
      var $212=($211) << 1;
      var $213=($205) >>> ((($212))>>>0);
      var $214=($213) & 3;
      var $217 = $214;__label__ = 35; break;
    case 34: // $215
      var $217 = 0;__label__ = 35; break;
    case 35: // $216
      var $217;
      $c=$217;
      var $218=$c;
      var $219=($218) & 1;
      var $220=((($219))|0)!=0;
      if ($220) { __label__ = 46; break; } else { __label__ = 36; break; }
    case 36: // $221
      var $222=HEAPU32[((_filters)>>2)];
      var $223=$row;
      var $224=($223) << 1;
      var $225=($224) & 14;
      var $226=$col;
      var $227=($226) & 1;
      var $228=((($225)+($227))|0);
      var $229=($228) << 1;
      var $230=($222) >>> ((($229))>>>0);
      var $231=($230) & 3;
      var $232=$row;
      var $233=HEAPU16[((_shrink)>>1)];
      var $234=((($233))&65535);
      var $235=($232) >>> ((($234))>>>0);
      var $236=HEAPU16[((_iwidth)>>1)];
      var $237=((($236))&65535);
      var $238=((($235)*($237))|0);
      var $239=$col;
      var $240=HEAPU16[((_shrink)>>1)];
      var $241=((($240))&65535);
      var $242=($239) >>> ((($241))>>>0);
      var $243=((($238)+($242))|0);
      var $244=HEAP32[((_image)>>2)];
      var $245=(($244+($243<<3))|0);
      var $246=(($245+($231<<1))|0);
      var $247=HEAPU16[(($246)>>1)];
      var $248=((($247))&65535);
      var $249=((($248))|0);
      var $250=$c;
      var $251=(($mult+($250<<2))|0);
      var $252=HEAPF32[(($251)>>2)];
      var $253=($249)*($252);
      var $254=(($253) >= 0 ? Math.floor(($253)) : Math.ceil(($253)));
      $c=$254;
      var $255=$c;
      var $256=((($255))>>>0) < 65535;
      if ($256) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $257
      var $258=$c;
      var $261 = $258;__label__ = 39; break;
    case 38: // $259
      var $261 = 65535;__label__ = 39; break;
    case 39: // $260
      var $261;
      var $262=0 > ((($261))>>>0);
      if ($262) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: // $263
      var $273 = 0;__label__ = 45; break;
    case 41: // $264
      var $265=$c;
      var $266=((($265))>>>0) < 65535;
      if ($266) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: // $267
      var $268=$c;
      var $271 = $268;__label__ = 44; break;
    case 43: // $269
      var $271 = 65535;__label__ = 44; break;
    case 44: // $270
      var $271;
      var $273 = $271;__label__ = 45; break;
    case 45: // $272
      var $273;
      var $274=((($273)) & 65535);
      var $275=HEAPU32[((_filters)>>2)];
      var $276=$row;
      var $277=($276) << 1;
      var $278=($277) & 14;
      var $279=$col;
      var $280=($279) & 1;
      var $281=((($278)+($280))|0);
      var $282=($281) << 1;
      var $283=($275) >>> ((($282))>>>0);
      var $284=($283) & 3;
      var $285=$row;
      var $286=HEAPU16[((_shrink)>>1)];
      var $287=((($286))&65535);
      var $288=($285) >>> ((($287))>>>0);
      var $289=HEAPU16[((_iwidth)>>1)];
      var $290=((($289))&65535);
      var $291=((($288)*($290))|0);
      var $292=$col;
      var $293=HEAPU16[((_shrink)>>1)];
      var $294=((($293))&65535);
      var $295=($292) >>> ((($294))>>>0);
      var $296=((($291)+($295))|0);
      var $297=HEAP32[((_image)>>2)];
      var $298=(($297+($296<<3))|0);
      var $299=(($298+($284<<1))|0);
      HEAP16[(($299)>>1)]=$274;
      __label__ = 46; break;
    case 46: // $300
      $c=0;
      __label__ = 47; break;
    case 47: // $301
      var $302=$c;
      var $303=$2;
      var $304=((($302))>>>0) < ((($303))>>>0);
      if ($304) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: // $305
      var $306=$c;
      var $307=((($306)+1)|0);
      var $308=(($mult+($307<<2))|0);
      var $309=HEAPF32[(($308)>>2)];
      var $310=$c;
      var $311=(($mult+($310<<2))|0);
      var $312=HEAPF32[(($311)>>2)];
      var $313=($312)+($309);
      HEAPF32[(($311)>>2)]=$313;
      __label__ = 49; break;
    case 49: // $314
      var $315=$c;
      var $316=((($315)+2)|0);
      $c=$316;
      __label__ = 47; break;
    case 50: // $317
      __label__ = 51; break;
    case 51: // $318
      var $319=$col;
      var $320=((($319)+1)|0);
      $col=$320;
      __label__ = 29; break;
    case 52: // $321
      __label__ = 53; break;
    case 53: // $322
      var $323=$x;
      var $324=((($323)+1)|0);
      $x=$324;
      __label__ = 23; break;
    case 54: // $325
      $x=0;
      __label__ = 55; break;
    case 55: // $326
      var $327=$x;
      var $328=$wide;
      var $329=((($327))>>>0) < ((($328))>>>0);
      if ($329) { __label__ = 56; break; } else { __label__ = 62; break; }
    case 56: // $330
      $c=0;
      __label__ = 57; break;
    case 57: // $331
      var $332=$c;
      var $333=$2;
      var $334=((($332))>>>0) < ((($333))>>>0);
      if ($334) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: // $335
      var $336=$c;
      var $337=((($336)+1)|0);
      var $338=$wide;
      var $339=((($337)*($338))|0);
      var $340=$x;
      var $341=((($339)+($340))|0);
      var $342=$mrow;
      var $343=(($342+($341<<2))|0);
      var $344=HEAPF32[(($343)>>2)];
      var $345=$c;
      var $346=$wide;
      var $347=((($345)*($346))|0);
      var $348=$x;
      var $349=((($347)+($348))|0);
      var $350=$mrow;
      var $351=(($350+($349<<2))|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=($352)+($344);
      HEAPF32[(($351)>>2)]=$353;
      __label__ = 59; break;
    case 59: // $354
      var $355=$c;
      var $356=((($355)+2)|0);
      $c=$356;
      __label__ = 57; break;
    case 60: // $357
      __label__ = 61; break;
    case 61: // $358
      var $359=$x;
      var $360=((($359)+1)|0);
      $x=$360;
      __label__ = 55; break;
    case 62: // $361
      __label__ = 63; break;
    case 63: // $362
      var $363=$row;
      var $364=((($363)+1)|0);
      $row=$364;
      __label__ = 19; break;
    case 64: // $365
      __label__ = 65; break;
    case 65: // $366
      var $367=$y;
      var $368=((($367)+1)|0);
      $y=$368;
      __label__ = 1; break;
    case 66: // $369
      var $370=$mrow;
      var $371=$370;
      _free($371);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_phase_one_flat_field["X"]=1;

function _phase_one_correct() {
  var __stackBase__  = STACKTOP; STACKTOP += 124; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $entries;
      var $tag;
      var $data;
      var $save;
      var $col;
      var $row;
      var $type;
      var $len;
      var $i;
      var $j;
      var $k;
      var $cip;
      var $val=__stackBase__;
      var $dev=__stackBase__+16;
      var $sum;
      var $max;
      var $head=__stackBase__+32;
      var $diff;
      var $mindiff;
      var $off_412;
      var $poly=__stackBase__+68;
      var $num;
      var $cfrac;
      var $frac;
      var $mult=__stackBase__+100;
      var $yval=__stackBase__+108;
      var $xval=__stackBase__+116;
      $mindiff=2147483647;
      $off_412=0;
      var $1=HEAP32[((_half_size)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $3
      var $4=HEAP32[((_meta_length)>>2)];
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: // $6
      __label__ = 167; break;
    case 3: // $7
      var $8=HEAP32[((_verbose)>>2)];
      var $9=((($8))|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $10
      var $11=HEAP32[((__impure_ptr)>>2)];
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_fprintf($13, ((__str17)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: // $15
      var $16=HEAP32[((_ifp)>>2)];
      var $17=HEAP32[((_meta_offset)>>2)];
      var $18=_fseek($16, $17, 0);
      var $19=_get2();
      HEAP16[((_order)>>1)]=$19;
      var $20=HEAP32[((_ifp)>>2)];
      var $21=_fseek($20, 6, 1);
      var $22=HEAP32[((_ifp)>>2)];
      var $23=HEAP32[((_meta_offset)>>2)];
      var $24=_get4();
      var $25=((($23)+($24))|0);
      var $26=_fseek($22, $25, 0);
      var $27=_get4();
      $entries=$27;
      var $28=_get4();
      __label__ = 6; break;
    case 6: // $29
      var $30=$entries;
      var $31=((($30)-1)|0);
      $entries=$31;
      var $32=((($30))|0)!=0;
      if ($32) { __label__ = 7; break; } else { __label__ = 114; break; }
    case 7: // $33
      var $34=_get4();
      $tag=$34;
      var $35=_get4();
      $len=$35;
      var $36=_get4();
      $data=$36;
      var $37=HEAP32[((_ifp)>>2)];
      var $38=_ftell($37);
      $save=$38;
      var $39=HEAP32[((_ifp)>>2)];
      var $40=HEAP32[((_meta_offset)>>2)];
      var $41=$data;
      var $42=((($40)+($41))|0);
      var $43=_fseek($39, $42, 0);
      var $44=$tag;
      var $45=((($44))|0)==1049;
      if ($45) { __label__ = 8; break; } else { __label__ = 26; break; }
    case 8: // $46
      var $47=_get4();
      $i=0;
      __label__ = 9; break;
    case 9: // $48
      var $49=$i;
      var $50=((($49))|0) < 8;
      if ($50) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $51
      var $52=_getreal(11);
      var $53=($52);
      var $54=$i;
      var $55=(($poly+($54<<2))|0);
      HEAPF32[(($55)>>2)]=$53;
      __label__ = 11; break;
    case 11: // $56
      var $57=$i;
      var $58=((($57)+1)|0);
      $i=$58;
      __label__ = 9; break;
    case 12: // $59
      var $60=HEAPF32[((((_ph1+24)|0))>>2)];
      var $61=(($poly+28)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=($60)-($62);
      var $64=(($poly+24)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=($63)*($65);
      var $67=($66)+1;
      var $68=(($poly+12)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=($69)+($67);
      HEAPF32[(($68)>>2)]=$70;
      $i=0;
      __label__ = 13; break;
    case 13: // $71
      var $72=$i;
      var $73=((($72))|0) < 65536;
      if ($73) { __label__ = 14; break; } else { __label__ = 25; break; }
    case 14: // $74
      var $75=(($poly+20)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=$i;
      var $78=((($77))|0);
      var $79=($76)*($78);
      var $80=(($poly+12)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=($79)+($81);
      var $83=$i;
      var $84=((($83))|0);
      var $85=($82)*($84);
      var $86=(($poly+4)|0);
      var $87=HEAPF32[(($86)>>2)];
      var $88=($85)+($87);
      $num=$88;
      var $89=$num;
      var $90=($89) < 65535;
      if ($90) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $91
      var $92=$num;
      var $95 = $92;__label__ = 17; break;
    case 16: // $93
      var $95 = 65535;__label__ = 17; break;
    case 17: // $94
      var $95;
      var $96=0 > ($95);
      if ($96) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $97
      var $107 = 0;__label__ = 23; break;
    case 19: // $98
      var $99=$num;
      var $100=($99) < 65535;
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $101
      var $102=$num;
      var $105 = $102;__label__ = 22; break;
    case 21: // $103
      var $105 = 65535;__label__ = 22; break;
    case 22: // $104
      var $105;
      var $107 = $105;__label__ = 23; break;
    case 23: // $106
      var $107;
      var $108=(($107) >= 0 ? Math.floor(($107)) : Math.ceil(($107)));
      var $109=$i;
      var $110=((_curve+($109<<1))|0);
      HEAP16[(($110)>>1)]=$108;
      __label__ = 24; break;
    case 24: // $111
      var $112=$i;
      var $113=((($112)+1)|0);
      $i=$113;
      __label__ = 13; break;
    case 25: // $114
      __label__ = 48; break;
    case 26: // $115
      var $116=$tag;
      var $117=((($116))|0)==1050;
      if ($117) { __label__ = 27; break; } else { __label__ = 57; break; }
    case 27: // $118
      $i=0;
      __label__ = 28; break;
    case 28: // $119
      var $120=$i;
      var $121=((($120))|0) < 4;
      if ($121) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: // $122
      var $123=_getreal(11);
      var $124=($123);
      var $125=$i;
      var $126=(($poly+($125<<2))|0);
      HEAPF32[(($126)>>2)]=$124;
      __label__ = 30; break;
    case 30: // $127
      var $128=$i;
      var $129=((($128)+1)|0);
      $i=$129;
      __label__ = 28; break;
    case 31: // $130
      $i=0;
      __label__ = 32; break;
    case 32: // $131
      var $132=$i;
      var $133=((($132))|0) < 65536;
      if ($133) { __label__ = 33; break; } else { __label__ = 47; break; }
    case 33: // $134
      $num=0;
      $j=4;
      __label__ = 34; break;
    case 34: // $135
      var $136=$j;
      var $137=((($136)-1)|0);
      $j=$137;
      var $138=((($136))|0)!=0;
      if ($138) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $139
      var $140=$num;
      var $141=$i;
      var $142=((($141))|0);
      var $143=($140)*($142);
      var $144=$j;
      var $145=(($poly+($144<<2))|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=($143)+($146);
      $num=$147;
      __label__ = 34; break;
    case 36: // $148
      var $149=$num;
      var $150=$i;
      var $151=((($150))|0);
      var $152=($149)+($151);
      var $153=($152) < 65535;
      if ($153) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $154
      var $155=$num;
      var $156=$i;
      var $157=((($156))|0);
      var $158=($155)+($157);
      var $161 = $158;__label__ = 39; break;
    case 38: // $159
      var $161 = 65535;__label__ = 39; break;
    case 39: // $160
      var $161;
      var $162=0 > ($161);
      if ($162) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: // $163
      var $179 = 0;__label__ = 45; break;
    case 41: // $164
      var $165=$num;
      var $166=$i;
      var $167=((($166))|0);
      var $168=($165)+($167);
      var $169=($168) < 65535;
      if ($169) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: // $170
      var $171=$num;
      var $172=$i;
      var $173=((($172))|0);
      var $174=($171)+($173);
      var $177 = $174;__label__ = 44; break;
    case 43: // $175
      var $177 = 65535;__label__ = 44; break;
    case 44: // $176
      var $177;
      var $179 = $177;__label__ = 45; break;
    case 45: // $178
      var $179;
      var $180=(($179) >= 0 ? Math.floor(($179)) : Math.ceil(($179)));
      var $181=$i;
      var $182=((_curve+($181<<1))|0);
      HEAP16[(($182)>>1)]=$180;
      __label__ = 46; break;
    case 46: // $183
      var $184=$i;
      var $185=((($184)+1)|0);
      $i=$185;
      __label__ = 32; break;
    case 47: // $186
      __label__ = 48; break;
    case 48: // $187
      $row=0;
      __label__ = 49; break;
    case 49: // $188
      var $189=$row;
      var $190=HEAPU16[((_height)>>1)];
      var $191=((($190))&65535);
      var $192=((($189))>>>0) < ((($191))>>>0);
      if ($192) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: // $193
      var $194=$tag;
      var $195=($194) & 1;
      var $196=HEAP32[((((_ph1+16)|0))>>2)];
      var $197=((($195)*($196))|0);
      $col=$197;
      __label__ = 51; break;
    case 51: // $198
      var $199=$col;
      var $200=HEAPU16[((_width)>>1)];
      var $201=((($200))&65535);
      var $202=((($199))>>>0) < ((($201))>>>0);
      if ($202) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: // $203
      var $204=HEAPU32[((_filters)>>2)];
      var $205=$row;
      var $206=($205) << 1;
      var $207=($206) & 14;
      var $208=$col;
      var $209=($208) & 1;
      var $210=((($207)+($209))|0);
      var $211=($210) << 1;
      var $212=($204) >>> ((($211))>>>0);
      var $213=($212) & 3;
      var $214=$row;
      var $215=HEAPU16[((_shrink)>>1)];
      var $216=((($215))&65535);
      var $217=($214) >>> ((($216))>>>0);
      var $218=HEAPU16[((_iwidth)>>1)];
      var $219=((($218))&65535);
      var $220=((($217)*($219))|0);
      var $221=$col;
      var $222=HEAPU16[((_shrink)>>1)];
      var $223=((($222))&65535);
      var $224=($221) >>> ((($223))>>>0);
      var $225=((($220)+($224))|0);
      var $226=HEAP32[((_image)>>2)];
      var $227=(($226+($225<<3))|0);
      var $228=(($227+($213<<1))|0);
      var $229=HEAPU16[(($228)>>1)];
      var $230=((($229))&65535);
      var $231=((_curve+($230<<1))|0);
      var $232=HEAP16[(($231)>>1)];
      var $233=HEAPU32[((_filters)>>2)];
      var $234=$row;
      var $235=($234) << 1;
      var $236=($235) & 14;
      var $237=$col;
      var $238=($237) & 1;
      var $239=((($236)+($238))|0);
      var $240=($239) << 1;
      var $241=($233) >>> ((($240))>>>0);
      var $242=($241) & 3;
      var $243=$row;
      var $244=HEAPU16[((_shrink)>>1)];
      var $245=((($244))&65535);
      var $246=($243) >>> ((($245))>>>0);
      var $247=HEAPU16[((_iwidth)>>1)];
      var $248=((($247))&65535);
      var $249=((($246)*($248))|0);
      var $250=$col;
      var $251=HEAPU16[((_shrink)>>1)];
      var $252=((($251))&65535);
      var $253=($250) >>> ((($252))>>>0);
      var $254=((($249)+($253))|0);
      var $255=HEAP32[((_image)>>2)];
      var $256=(($255+($254<<3))|0);
      var $257=(($256+($242<<1))|0);
      HEAP16[(($257)>>1)]=$232;
      __label__ = 53; break;
    case 53: // $258
      var $259=$col;
      var $260=((($259)+1)|0);
      $col=$260;
      __label__ = 51; break;
    case 54: // $261
      __label__ = 55; break;
    case 55: // $262
      var $263=$row;
      var $264=((($263)+1)|0);
      $row=$264;
      __label__ = 49; break;
    case 56: // $265
      __label__ = 112; break;
    case 57: // $266
      var $267=$tag;
      var $268=((($267))|0)==1024;
      if ($268) { __label__ = 58; break; } else { __label__ = 96; break; }
    case 58: // $269
      __label__ = 59; break;
    case 59: // $270
      var $271=$len;
      var $272=((($271)-8)|0);
      $len=$272;
      var $273=((($272))|0) >= 0;
      if ($273) { __label__ = 60; break; } else { __label__ = 95; break; }
    case 60: // $274
      var $275=_get2();
      var $276=((($275))&65535);
      var $277=HEAPU16[((_left_margin)>>1)];
      var $278=((($277))&65535);
      var $279=((($276)-($278))|0);
      $col=$279;
      var $280=_get2();
      var $281=((($280))&65535);
      var $282=HEAPU16[((_top_margin)>>1)];
      var $283=((($282))&65535);
      var $284=((($281)-($283))|0);
      $row=$284;
      var $285=_get2();
      var $286=((($285))&65535);
      $type=$286;
      var $287=_get2();
      var $288=$col;
      var $289=HEAPU16[((_width)>>1)];
      var $290=((($289))&65535);
      var $291=((($288))>>>0) >= ((($290))>>>0);
      if ($291) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $292
      __label__ = 59; break;
    case 62: // $293
      var $294=$type;
      var $295=((($294))|0)==131;
      if ($295) { __label__ = 63; break; } else { __label__ = 85; break; }
    case 63: // $296
      $row=0;
      __label__ = 64; break;
    case 64: // $297
      var $298=$row;
      var $299=HEAPU16[((_height)>>1)];
      var $300=((($299))&65535);
      var $301=((($298))>>>0) < ((($300))>>>0);
      if ($301) { __label__ = 65; break; } else { __label__ = 84; break; }
    case 65: // $302
      var $303=HEAPU32[((_filters)>>2)];
      var $304=$row;
      var $305=($304) << 1;
      var $306=($305) & 14;
      var $307=$col;
      var $308=($307) & 1;
      var $309=((($306)+($308))|0);
      var $310=($309) << 1;
      var $311=($303) >>> ((($310))>>>0);
      var $312=($311) & 3;
      var $313=((($312))|0)==1;
      if ($313) { __label__ = 66; break; } else { __label__ = 77; break; }
    case 66: // $314
      $i=0;
      $sum=0;
      __label__ = 67; break;
    case 67: // $315
      var $316=$i;
      var $317=((($316))|0) < 4;
      if ($317) { __label__ = 68; break; } else { __label__ = 70; break; }
    case 68: // $318
      var $319=$row;
      var $320=$i;
      var $321=((_phase_one_correct_dir+($320<<1))|0);
      var $322=(($321)|0);
      var $323=HEAP8[($322)];
      var $324=((($323) << 24) >> 24);
      var $325=((($319)+($324))|0);
      var $326=$col;
      var $327=$i;
      var $328=((_phase_one_correct_dir+($327<<1))|0);
      var $329=(($328+1)|0);
      var $330=HEAP8[($329)];
      var $331=((($330) << 24) >> 24);
      var $332=((($326)+($331))|0);
      var $333=_bayer($325, $332);
      var $334=$i;
      var $335=(($val+($334<<2))|0);
      HEAP32[(($335)>>2)]=$333;
      var $336=$sum;
      var $337=((($336)+($333))|0);
      $sum=$337;
      __label__ = 69; break;
    case 69: // $338
      var $339=$i;
      var $340=((($339)+1)|0);
      $i=$340;
      __label__ = 67; break;
    case 70: // $341
      $i=0;
      $max=0;
      __label__ = 71; break;
    case 71: // $342
      var $343=$i;
      var $344=((($343))|0) < 4;
      if ($344) { __label__ = 72; break; } else { __label__ = 76; break; }
    case 72: // $345
      var $346=$i;
      var $347=(($val+($346<<2))|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=($348) << 2;
      var $350=$sum;
      var $351=((($349)-($350))|0);
      var $352=_abs($351);
      var $353=$i;
      var $354=(($dev+($353<<2))|0);
      HEAP32[(($354)>>2)]=$352;
      var $355=$max;
      var $356=(($dev+($355<<2))|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=$i;
      var $359=(($dev+($358<<2))|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=((($357))|0) < ((($360))|0);
      if ($361) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: // $362
      var $363=$i;
      $max=$363;
      __label__ = 74; break;
    case 74: // $364
      __label__ = 75; break;
    case 75: // $365
      var $366=$i;
      var $367=((($366)+1)|0);
      $i=$367;
      __label__ = 71; break;
    case 76: // $368
      var $369=$sum;
      var $370=$max;
      var $371=(($val+($370<<2))|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=((($369)-($372))|0);
      var $374=((($373))|0);
      var $375=($374)/3;
      var $376=($375)+0.5;
      var $377=(($376) >= 0 ? Math.floor(($376)) : Math.ceil(($376)));
      var $378=HEAPU32[((_filters)>>2)];
      var $379=$row;
      var $380=($379) << 1;
      var $381=($380) & 14;
      var $382=$col;
      var $383=($382) & 1;
      var $384=((($381)+($383))|0);
      var $385=($384) << 1;
      var $386=($378) >>> ((($385))>>>0);
      var $387=($386) & 3;
      var $388=$row;
      var $389=HEAPU16[((_shrink)>>1)];
      var $390=((($389))&65535);
      var $391=($388) >>> ((($390))>>>0);
      var $392=HEAPU16[((_iwidth)>>1)];
      var $393=((($392))&65535);
      var $394=((($391)*($393))|0);
      var $395=$col;
      var $396=HEAPU16[((_shrink)>>1)];
      var $397=((($396))&65535);
      var $398=($395) >>> ((($397))>>>0);
      var $399=((($394)+($398))|0);
      var $400=HEAP32[((_image)>>2)];
      var $401=(($400+($399<<3))|0);
      var $402=(($401+($387<<1))|0);
      HEAP16[(($402)>>1)]=$377;
      __label__ = 82; break;
    case 77: // $403
      $sum=0;
      $i=8;
      __label__ = 78; break;
    case 78: // $404
      var $405=$i;
      var $406=((($405))|0) < 12;
      if ($406) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: // $407
      var $408=$row;
      var $409=$i;
      var $410=((_phase_one_correct_dir+($409<<1))|0);
      var $411=(($410)|0);
      var $412=HEAP8[($411)];
      var $413=((($412) << 24) >> 24);
      var $414=((($408)+($413))|0);
      var $415=$col;
      var $416=$i;
      var $417=((_phase_one_correct_dir+($416<<1))|0);
      var $418=(($417+1)|0);
      var $419=HEAP8[($418)];
      var $420=((($419) << 24) >> 24);
      var $421=((($415)+($420))|0);
      var $422=_bayer($414, $421);
      var $423=$sum;
      var $424=((($423)+($422))|0);
      $sum=$424;
      __label__ = 80; break;
    case 80: // $425
      var $426=$i;
      var $427=((($426)+1)|0);
      $i=$427;
      __label__ = 78; break;
    case 81: // $428
      var $429=$sum;
      var $430=((($429))|0);
      var $431=($430)*0.0732233;
      var $432=($431)+0.5;
      var $433=$row;
      var $434=$col;
      var $435=((($434)-2)|0);
      var $436=_bayer($433, $435);
      var $437=$row;
      var $438=$col;
      var $439=((($438)+2)|0);
      var $440=_bayer($437, $439);
      var $441=((($436)+($440))|0);
      var $442=((($441))|0);
      var $443=($442)*0.3535534;
      var $444=($432)+($443);
      var $445=(($444) >= 0 ? Math.floor(($444)) : Math.ceil(($444)));
      var $446=HEAPU32[((_filters)>>2)];
      var $447=$row;
      var $448=($447) << 1;
      var $449=($448) & 14;
      var $450=$col;
      var $451=($450) & 1;
      var $452=((($449)+($451))|0);
      var $453=($452) << 1;
      var $454=($446) >>> ((($453))>>>0);
      var $455=($454) & 3;
      var $456=$row;
      var $457=HEAPU16[((_shrink)>>1)];
      var $458=((($457))&65535);
      var $459=($456) >>> ((($458))>>>0);
      var $460=HEAPU16[((_iwidth)>>1)];
      var $461=((($460))&65535);
      var $462=((($459)*($461))|0);
      var $463=$col;
      var $464=HEAPU16[((_shrink)>>1)];
      var $465=((($464))&65535);
      var $466=($463) >>> ((($465))>>>0);
      var $467=((($462)+($466))|0);
      var $468=HEAP32[((_image)>>2)];
      var $469=(($468+($467<<3))|0);
      var $470=(($469+($455<<1))|0);
      HEAP16[(($470)>>1)]=$445;
      __label__ = 82; break;
    case 82: // $471
      __label__ = 83; break;
    case 83: // $472
      var $473=$row;
      var $474=((($473)+1)|0);
      $row=$474;
      __label__ = 64; break;
    case 84: // $475
      __label__ = 94; break;
    case 85: // $476
      var $477=$type;
      var $478=((($477))|0)==129;
      if ($478) { __label__ = 86; break; } else { __label__ = 93; break; }
    case 86: // $479
      var $480=$row;
      var $481=HEAPU16[((_height)>>1)];
      var $482=((($481))&65535);
      var $483=((($480))>>>0) >= ((($482))>>>0);
      if ($483) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: // $484
      __label__ = 59; break;
    case 88: // $485
      var $486=HEAPU32[((_filters)>>2)];
      var $487=$row;
      var $488=($487) << 1;
      var $489=($488) & 14;
      var $490=$col;
      var $491=($490) & 1;
      var $492=((($489)+($491))|0);
      var $493=($492) << 1;
      var $494=($486) >>> ((($493))>>>0);
      var $495=($494) & 3;
      var $496=((($495))|0)!=1;
      var $497=((($496))&1);
      var $498=(((($497)<<2))|0);
      $j=$498;
      $sum=0;
      var $499=$j;
      $i=$499;
      __label__ = 89; break;
    case 89: // $500
      var $501=$i;
      var $502=$j;
      var $503=((($502)+8)|0);
      var $504=((($501))|0) < ((($503))|0);
      if ($504) { __label__ = 90; break; } else { __label__ = 92; break; }
    case 90: // $505
      var $506=$row;
      var $507=$i;
      var $508=((_phase_one_correct_dir+($507<<1))|0);
      var $509=(($508)|0);
      var $510=HEAP8[($509)];
      var $511=((($510) << 24) >> 24);
      var $512=((($506)+($511))|0);
      var $513=$col;
      var $514=$i;
      var $515=((_phase_one_correct_dir+($514<<1))|0);
      var $516=(($515+1)|0);
      var $517=HEAP8[($516)];
      var $518=((($517) << 24) >> 24);
      var $519=((($513)+($518))|0);
      var $520=_bayer($512, $519);
      var $521=$sum;
      var $522=((($521)+($520))|0);
      $sum=$522;
      __label__ = 91; break;
    case 91: // $523
      var $524=$i;
      var $525=((($524)+1)|0);
      $i=$525;
      __label__ = 89; break;
    case 92: // $526
      var $527=$sum;
      var $528=((($527)+4)|0);
      var $529=($528) >> 3;
      var $530=((($529)) & 65535);
      var $531=HEAPU32[((_filters)>>2)];
      var $532=$row;
      var $533=($532) << 1;
      var $534=($533) & 14;
      var $535=$col;
      var $536=($535) & 1;
      var $537=((($534)+($536))|0);
      var $538=($537) << 1;
      var $539=($531) >>> ((($538))>>>0);
      var $540=($539) & 3;
      var $541=$row;
      var $542=HEAPU16[((_shrink)>>1)];
      var $543=((($542))&65535);
      var $544=($541) >>> ((($543))>>>0);
      var $545=HEAPU16[((_iwidth)>>1)];
      var $546=((($545))&65535);
      var $547=((($544)*($546))|0);
      var $548=$col;
      var $549=HEAPU16[((_shrink)>>1)];
      var $550=((($549))&65535);
      var $551=($548) >>> ((($550))>>>0);
      var $552=((($547)+($551))|0);
      var $553=HEAP32[((_image)>>2)];
      var $554=(($553+($552<<3))|0);
      var $555=(($554+($540<<1))|0);
      HEAP16[(($555)>>1)]=$530;
      __label__ = 93; break;
    case 93: // $556
      __label__ = 94; break;
    case 94: // $557
      __label__ = 59; break;
    case 95: // $558
      __label__ = 111; break;
    case 96: // $559
      var $560=$tag;
      var $561=((($560))|0)==1025;
      if ($561) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: // $562
      _phase_one_flat_field(1, 2);
      __label__ = 110; break;
    case 98: // $563
      var $564=$tag;
      var $565=((($564))|0)==1046;
      if ($565) { __label__ = 100; break; } else { __label__ = 99; break; }
    case 99: // $566
      var $567=$tag;
      var $568=((($567))|0)==1040;
      if ($568) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: // $569
      _phase_one_flat_field(0, 2);
      __label__ = 109; break;
    case 101: // $570
      var $571=$tag;
      var $572=((($571))|0)==1035;
      if ($572) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: // $573
      _phase_one_flat_field(0, 4);
      __label__ = 108; break;
    case 103: // $574
      var $575=$tag;
      var $576=((($575))|0)==1042;
      if ($576) { __label__ = 104; break; } else { __label__ = 107; break; }
    case 104: // $577
      var $578=HEAP32[((_ifp)>>2)];
      var $579=_fseek($578, 36, 1);
      var $580=_get2();
      var $581=((($580))&65535);
      var $582=HEAP32[((((_ph1+20)|0))>>2)];
      var $583=((($581)-($582))|0);
      var $584=_abs($583);
      $diff=$584;
      var $585=$mindiff;
      var $586=$diff;
      var $587=((($585))|0) > ((($586))|0);
      if ($587) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $588
      var $589=$diff;
      $mindiff=$589;
      var $590=HEAP32[((_ifp)>>2)];
      var $591=_ftell($590);
      var $592=((($591)-38)|0);
      $off_412=$592;
      __label__ = 106; break;
    case 106: // $593
      __label__ = 107; break;
    case 107: // $594
      __label__ = 108; break;
    case 108: // $595
      __label__ = 109; break;
    case 109: // $596
      __label__ = 110; break;
    case 110: // $597
      __label__ = 111; break;
    case 111: // $598
      __label__ = 112; break;
    case 112: // $599
      __label__ = 113; break;
    case 113: // $600
      var $601=HEAP32[((_ifp)>>2)];
      var $602=$save;
      var $603=_fseek($601, $602, 0);
      __label__ = 6; break;
    case 114: // $604
      var $605=$off_412;
      var $606=((($605))|0)!=0;
      if ($606) { __label__ = 115; break; } else { __label__ = 167; break; }
    case 115: // $607
      var $608=HEAP32[((_ifp)>>2)];
      var $609=$off_412;
      var $610=_fseek($608, $609, 0);
      $i=0;
      __label__ = 116; break;
    case 116: // $611
      var $612=$i;
      var $613=((($612))|0) < 9;
      if ($613) { __label__ = 117; break; } else { __label__ = 119; break; }
    case 117: // $614
      var $615=_get4();
      var $616=($615) & 32767;
      var $617=$i;
      var $618=(($head+($617<<2))|0);
      HEAP32[(($618)>>2)]=$616;
      __label__ = 118; break;
    case 118: // $619
      var $620=$i;
      var $621=((($620)+1)|0);
      $i=$621;
      __label__ = 116; break;
    case 119: // $622
      var $623=(($head+4)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=(($head+12)|0);
      var $626=HEAP32[(($625)>>2)];
      var $627=((($624)*($626))|0);
      var $628=(($head+8)|0);
      var $629=HEAP32[(($628)>>2)];
      var $630=(($head+16)|0);
      var $631=HEAP32[(($630)>>2)];
      var $632=((($629)*($631))|0);
      var $633=((($627)+($632))|0);
      var $634=_calloc($633, 6);
      var $635=$634;
      var $636=(($yval)|0);
      HEAP32[(($636)>>2)]=$635;
      var $637=(($yval)|0);
      var $638=HEAP32[(($637)>>2)];
      var $639=$638;
      _merror($639, ((__str18)|0));
      var $640=(($yval)|0);
      var $641=HEAP32[(($640)>>2)];
      var $642=(($head+4)|0);
      var $643=HEAP32[(($642)>>2)];
      var $644=(($head+12)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=((($643)*($645))|0);
      var $647=(($641+($646<<2))|0);
      var $648=(($yval+4)|0);
      HEAP32[(($648)>>2)]=$647;
      var $649=(($yval+4)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=(($head+8)|0);
      var $652=HEAP32[(($651)>>2)];
      var $653=(($head+16)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=((($652)*($654))|0);
      var $656=(($650+($655<<2))|0);
      var $657=$656;
      var $658=(($xval)|0);
      HEAP32[(($658)>>2)]=$657;
      var $659=(($xval)|0);
      var $660=HEAP32[(($659)>>2)];
      var $661=(($head+4)|0);
      var $662=HEAP32[(($661)>>2)];
      var $663=(($head+12)|0);
      var $664=HEAP32[(($663)>>2)];
      var $665=((($662)*($664))|0);
      var $666=(($660+($665<<1))|0);
      var $667=(($xval+4)|0);
      HEAP32[(($667)>>2)]=$666;
      var $668=_get2();
      $i=0;
      __label__ = 120; break;
    case 120: // $669
      var $670=$i;
      var $671=((($670))|0) < 2;
      if ($671) { __label__ = 121; break; } else { __label__ = 127; break; }
    case 121: // $672
      $j=0;
      __label__ = 122; break;
    case 122: // $673
      var $674=$j;
      var $675=$i;
      var $676=((($675)+1)|0);
      var $677=(($head+($676<<2))|0);
      var $678=HEAP32[(($677)>>2)];
      var $679=$i;
      var $680=((($679)+3)|0);
      var $681=(($head+($680<<2))|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=((($678)*($682))|0);
      var $684=((($674))|0) < ((($683))|0);
      if ($684) { __label__ = 123; break; } else { __label__ = 125; break; }
    case 123: // $685
      var $686=_getreal(11);
      var $687=($686);
      var $688=$j;
      var $689=$i;
      var $690=(($yval+($689<<2))|0);
      var $691=HEAP32[(($690)>>2)];
      var $692=(($691+($688<<2))|0);
      HEAPF32[(($692)>>2)]=$687;
      __label__ = 124; break;
    case 124: // $693
      var $694=$j;
      var $695=((($694)+1)|0);
      $j=$695;
      __label__ = 122; break;
    case 125: // $696
      __label__ = 126; break;
    case 126: // $697
      var $698=$i;
      var $699=((($698)+1)|0);
      $i=$699;
      __label__ = 120; break;
    case 127: // $700
      $i=0;
      __label__ = 128; break;
    case 128: // $701
      var $702=$i;
      var $703=((($702))|0) < 2;
      if ($703) { __label__ = 129; break; } else { __label__ = 135; break; }
    case 129: // $704
      $j=0;
      __label__ = 130; break;
    case 130: // $705
      var $706=$j;
      var $707=$i;
      var $708=((($707)+1)|0);
      var $709=(($head+($708<<2))|0);
      var $710=HEAP32[(($709)>>2)];
      var $711=$i;
      var $712=((($711)+3)|0);
      var $713=(($head+($712<<2))|0);
      var $714=HEAP32[(($713)>>2)];
      var $715=((($710)*($714))|0);
      var $716=((($706))|0) < ((($715))|0);
      if ($716) { __label__ = 131; break; } else { __label__ = 133; break; }
    case 131: // $717
      var $718=_get2();
      var $719=$j;
      var $720=$i;
      var $721=(($xval+($720<<2))|0);
      var $722=HEAP32[(($721)>>2)];
      var $723=(($722+($719<<1))|0);
      HEAP16[(($723)>>1)]=$718;
      __label__ = 132; break;
    case 132: // $724
      var $725=$j;
      var $726=((($725)+1)|0);
      $j=$726;
      __label__ = 130; break;
    case 133: // $727
      __label__ = 134; break;
    case 134: // $728
      var $729=$i;
      var $730=((($729)+1)|0);
      $i=$730;
      __label__ = 128; break;
    case 135: // $731
      $row=0;
      __label__ = 136; break;
    case 136: // $732
      var $733=$row;
      var $734=HEAPU16[((_height)>>1)];
      var $735=((($734))&65535);
      var $736=((($733))>>>0) < ((($735))>>>0);
      if ($736) { __label__ = 137; break; } else { __label__ = 166; break; }
    case 137: // $737
      $col=0;
      __label__ = 138; break;
    case 138: // $738
      var $739=$col;
      var $740=HEAPU16[((_width)>>1)];
      var $741=((($740))&65535);
      var $742=((($739))>>>0) < ((($741))>>>0);
      if ($742) { __label__ = 139; break; } else { __label__ = 164; break; }
    case 139: // $743
      var $744=$col;
      var $745=((($744))>>>0);
      var $746=(($head+12)|0);
      var $747=HEAP32[(($746)>>2)];
      var $748=((($747))|0);
      var $749=($745)*($748);
      var $750=HEAPU16[((_raw_width)>>1)];
      var $751=((($750))&65535);
      var $752=((($751))|0);
      var $753=($749)/($752);
      $cfrac=$753;
      var $754=$cfrac;
      var $755=((($754))|0);
      $cip=$755;
      var $756=((($755))|0);
      var $757=$cfrac;
      var $758=($757)-($756);
      $cfrac=$758;
      var $759=HEAPU32[((_filters)>>2)];
      var $760=$row;
      var $761=($760) << 1;
      var $762=($761) & 14;
      var $763=$col;
      var $764=($763) & 1;
      var $765=((($762)+($764))|0);
      var $766=($765) << 1;
      var $767=($759) >>> ((($766))>>>0);
      var $768=($767) & 3;
      var $769=$row;
      var $770=HEAPU16[((_shrink)>>1)];
      var $771=((($770))&65535);
      var $772=($769) >>> ((($771))>>>0);
      var $773=HEAPU16[((_iwidth)>>1)];
      var $774=((($773))&65535);
      var $775=((($772)*($774))|0);
      var $776=$col;
      var $777=HEAPU16[((_shrink)>>1)];
      var $778=((($777))&65535);
      var $779=($776) >>> ((($778))>>>0);
      var $780=((($775)+($779))|0);
      var $781=HEAP32[((_image)>>2)];
      var $782=(($781+($780<<3))|0);
      var $783=(($782+($768<<1))|0);
      var $784=HEAPU16[(($783)>>1)];
      var $785=((($784))&65535);
      var $786=((($785))|0);
      var $787=($786)*0.5;
      var $788=($787);
      $num=$788;
      var $789=$cip;
      $i=$789;
      __label__ = 140; break;
    case 140: // $790
      var $791=$i;
      var $792=$cip;
      var $793=((($792)+2)|0);
      var $794=((($791))|0) < ((($793))|0);
      if ($794) { __label__ = 141; break; } else { __label__ = 153; break; }
    case 141: // $795
      $j=0;
      $k=0;
      __label__ = 142; break;
    case 142: // $796
      var $797=$j;
      var $798=(($head+4)|0);
      var $799=HEAP32[(($798)>>2)];
      var $800=((($797))|0) < ((($799))|0);
      if ($800) { __label__ = 143; break; } else { __label__ = 147; break; }
    case 143: // $801
      var $802=$num;
      var $803=(($head+4)|0);
      var $804=HEAP32[(($803)>>2)];
      var $805=$i;
      var $806=((($804)*($805))|0);
      var $807=$j;
      var $808=((($806)+($807))|0);
      $k=$808;
      var $809=(($xval)|0);
      var $810=HEAP32[(($809)>>2)];
      var $811=(($810+($808<<1))|0);
      var $812=HEAPU16[(($811)>>1)];
      var $813=((($812))&65535);
      var $814=((($813))|0);
      var $815=($802) < ($814);
      if ($815) { __label__ = 144; break; } else { __label__ = 145; break; }
    case 144: // $816
      __label__ = 147; break;
    case 145: // $817
      __label__ = 146; break;
    case 146: // $818
      var $819=$j;
      var $820=((($819)+1)|0);
      $j=$820;
      __label__ = 142; break;
    case 147: // $821
      var $822=$j;
      var $823=((($822))|0)==0;
      if ($823) { __label__ = 149; break; } else { __label__ = 148; break; }
    case 148: // $824
      var $825=$j;
      var $826=(($head+4)|0);
      var $827=HEAP32[(($826)>>2)];
      var $828=((($825))|0)==((($827))|0);
      if ($828) { __label__ = 149; break; } else { __label__ = 150; break; }
    case 149: // $829
      var $857 = 0;__label__ = 151; break;
    case 150: // $830
      var $831=$k;
      var $832=(($xval)|0);
      var $833=HEAP32[(($832)>>2)];
      var $834=(($833+($831<<1))|0);
      var $835=HEAPU16[(($834)>>1)];
      var $836=((($835))&65535);
      var $837=((($836))|0);
      var $838=$num;
      var $839=($837)-($838);
      var $840=$k;
      var $841=(($xval)|0);
      var $842=HEAP32[(($841)>>2)];
      var $843=(($842+($840<<1))|0);
      var $844=HEAPU16[(($843)>>1)];
      var $845=((($844))&65535);
      var $846=$k;
      var $847=((($846)-1)|0);
      var $848=(($xval)|0);
      var $849=HEAP32[(($848)>>2)];
      var $850=(($849+($847<<1))|0);
      var $851=HEAPU16[(($850)>>1)];
      var $852=((($851))&65535);
      var $853=((($845)-($852))|0);
      var $854=((($853))|0);
      var $855=($839)/($854);
      var $857 = $855;__label__ = 151; break;
    case 151: // $856
      var $857;
      $frac=$857;
      var $858=$k;
      var $859=((($858)-1)|0);
      var $860=(($yval)|0);
      var $861=HEAP32[(($860)>>2)];
      var $862=(($861+($859<<2))|0);
      var $863=HEAPF32[(($862)>>2)];
      var $864=$frac;
      var $865=($863)*($864);
      var $866=$k;
      var $867=(($yval)|0);
      var $868=HEAP32[(($867)>>2)];
      var $869=(($868+($866<<2))|0);
      var $870=HEAPF32[(($869)>>2)];
      var $871=$frac;
      var $872=1-($871);
      var $873=($870)*($872);
      var $874=($865)+($873);
      var $875=$i;
      var $876=$cip;
      var $877=((($875)-($876))|0);
      var $878=(($mult+($877<<2))|0);
      HEAPF32[(($878)>>2)]=$874;
      __label__ = 152; break;
    case 152: // $879
      var $880=$i;
      var $881=((($880)+1)|0);
      $i=$881;
      __label__ = 140; break;
    case 153: // $882
      var $883=(($mult)|0);
      var $884=HEAPF32[(($883)>>2)];
      var $885=$cfrac;
      var $886=1-($885);
      var $887=($884)*($886);
      var $888=(($mult+4)|0);
      var $889=HEAPF32[(($888)>>2)];
      var $890=$cfrac;
      var $891=($889)*($890);
      var $892=($887)+($891);
      var $893=$row;
      var $894=HEAPU16[((_top_margin)>>1)];
      var $895=((($894))&65535);
      var $896=((($893)+($895))|0);
      var $897=((($896))>>>0);
      var $898=($892)*($897);
      var $899=$num;
      var $900=($898)+($899);
      var $901=($900)*2;
      var $902=((($901))|0);
      $i=$902;
      var $903=$i;
      var $904=((($903))|0) < 65535;
      if ($904) { __label__ = 154; break; } else { __label__ = 155; break; }
    case 154: // $905
      var $906=$i;
      var $909 = $906;__label__ = 156; break;
    case 155: // $907
      var $909 = 65535;__label__ = 156; break;
    case 156: // $908
      var $909;
      var $910=0 > ((($909))|0);
      if ($910) { __label__ = 157; break; } else { __label__ = 158; break; }
    case 157: // $911
      var $921 = 0;__label__ = 162; break;
    case 158: // $912
      var $913=$i;
      var $914=((($913))|0) < 65535;
      if ($914) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: // $915
      var $916=$i;
      var $919 = $916;__label__ = 161; break;
    case 160: // $917
      var $919 = 65535;__label__ = 161; break;
    case 161: // $918
      var $919;
      var $921 = $919;__label__ = 162; break;
    case 162: // $920
      var $921;
      var $922=((($921)) & 65535);
      var $923=HEAPU32[((_filters)>>2)];
      var $924=$row;
      var $925=($924) << 1;
      var $926=($925) & 14;
      var $927=$col;
      var $928=($927) & 1;
      var $929=((($926)+($928))|0);
      var $930=($929) << 1;
      var $931=($923) >>> ((($930))>>>0);
      var $932=($931) & 3;
      var $933=$row;
      var $934=HEAPU16[((_shrink)>>1)];
      var $935=((($934))&65535);
      var $936=($933) >>> ((($935))>>>0);
      var $937=HEAPU16[((_iwidth)>>1)];
      var $938=((($937))&65535);
      var $939=((($936)*($938))|0);
      var $940=$col;
      var $941=HEAPU16[((_shrink)>>1)];
      var $942=((($941))&65535);
      var $943=($940) >>> ((($942))>>>0);
      var $944=((($939)+($943))|0);
      var $945=HEAP32[((_image)>>2)];
      var $946=(($945+($944<<3))|0);
      var $947=(($946+($932<<1))|0);
      HEAP16[(($947)>>1)]=$922;
      __label__ = 163; break;
    case 163: // $948
      var $949=$col;
      var $950=((($949)+1)|0);
      $col=$950;
      __label__ = 138; break;
    case 164: // $951
      __label__ = 165; break;
    case 165: // $952
      var $953=$row;
      var $954=((($953)+1)|0);
      $row=$954;
      __label__ = 136; break;
    case 166: // $955
      var $956=(($yval)|0);
      var $957=HEAP32[(($956)>>2)];
      var $958=$957;
      _free($958);
      __label__ = 167; break;
    case 167: // $959
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_phase_one_correct["X"]=1;

function _phase_one_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      var $a;
      var $b;
      var $pixel;
      var $akey;
      var $bkey;
      var $mask;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=HEAP32[((((_ph1+4)|0))>>2)];
      var $3=_fseek($1, $2, 0);
      var $4=_get2();
      $akey=$4;
      var $5=_get2();
      $bkey=$5;
      var $6=HEAP32[((((_ph1)|0))>>2)];
      var $7=((($6))|0)==1;
      var $8=($7) ? 21845 : 4948;
      var $9=((($8)) & 65535);
      $mask=$9;
      var $10=HEAP32[((_ifp)>>2)];
      var $11=HEAP32[((_data_offset)>>2)];
      var $12=HEAPU16[((_top_margin)>>1)];
      var $13=((($12))&65535);
      var $14=HEAPU16[((_raw_width)>>1)];
      var $15=((($14))&65535);
      var $16=((($13)*($15))|0);
      var $17=(((($16)<<1))|0);
      var $18=((($11)+($17))|0);
      var $19=_fseek($10, $18, 0);
      var $20=HEAPU16[((_raw_width)>>1)];
      var $21=((($20))&65535);
      var $22=_calloc($21, 2);
      var $23=$22;
      $pixel=$23;
      var $24=$pixel;
      var $25=$24;
      _merror($25, ((__str19)|0));
      $row=0;
      __label__ = 1; break;
    case 1: // $26
      var $27=$row;
      var $28=HEAPU16[((_height)>>1)];
      var $29=((($28))&65535);
      var $30=((($27))|0) < ((($29))|0);
      if ($30) { __label__ = 2; break; } else { __label__ = 14; break; }
    case 2: // $31
      var $32=$pixel;
      var $33=HEAPU16[((_raw_width)>>1)];
      var $34=((($33))&65535);
      _read_shorts($32, $34);
      var $35=HEAP32[((((_ph1)|0))>>2)];
      var $36=((($35))|0)!=0;
      if ($36) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: // $37
      $col=0;
      __label__ = 4; break;
    case 4: // $38
      var $39=$col;
      var $40=HEAPU16[((_raw_width)>>1)];
      var $41=((($40))&65535);
      var $42=((($39))|0) < ((($41))|0);
      if ($42) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: // $43
      var $44=$col;
      var $45=((($44))|0);
      var $46=$pixel;
      var $47=(($46+($45<<1))|0);
      var $48=HEAPU16[(($47)>>1)];
      var $49=((($48))&65535);
      var $50=$akey;
      var $51=((($50))&65535);
      var $52=($49) ^ ($51);
      $a=$52;
      var $53=$col;
      var $54=((($53)+1)|0);
      var $55=$pixel;
      var $56=(($55+($54<<1))|0);
      var $57=HEAPU16[(($56)>>1)];
      var $58=((($57))&65535);
      var $59=$bkey;
      var $60=((($59))&65535);
      var $61=($58) ^ ($60);
      $b=$61;
      var $62=$a;
      var $63=$mask;
      var $64=((($63))&65535);
      var $65=($62) & ($64);
      var $66=$b;
      var $67=$mask;
      var $68=((($67))&65535);
      var $69=($68) ^ -1;
      var $70=($66) & ($69);
      var $71=($65) | ($70);
      var $72=((($71)) & 65535);
      var $73=$col;
      var $74=((($73))|0);
      var $75=$pixel;
      var $76=(($75+($74<<1))|0);
      HEAP16[(($76)>>1)]=$72;
      var $77=$b;
      var $78=$mask;
      var $79=((($78))&65535);
      var $80=($77) & ($79);
      var $81=$a;
      var $82=$mask;
      var $83=((($82))&65535);
      var $84=($83) ^ -1;
      var $85=($81) & ($84);
      var $86=($80) | ($85);
      var $87=((($86)) & 65535);
      var $88=$col;
      var $89=((($88)+1)|0);
      var $90=$pixel;
      var $91=(($90+($89<<1))|0);
      HEAP16[(($91)>>1)]=$87;
      __label__ = 6; break;
    case 6: // $92
      var $93=$col;
      var $94=((($93)+2)|0);
      $col=$94;
      __label__ = 4; break;
    case 7: // $95
      __label__ = 8; break;
    case 8: // $96
      $col=0;
      __label__ = 9; break;
    case 9: // $97
      var $98=$col;
      var $99=HEAPU16[((_width)>>1)];
      var $100=((($99))&65535);
      var $101=((($98))|0) < ((($100))|0);
      if ($101) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $102
      var $103=$col;
      var $104=HEAPU16[((_left_margin)>>1)];
      var $105=((($104))&65535);
      var $106=((($103)+($105))|0);
      var $107=$pixel;
      var $108=(($107+($106<<1))|0);
      var $109=HEAP16[(($108)>>1)];
      var $110=HEAPU32[((_filters)>>2)];
      var $111=$row;
      var $112=($111) << 1;
      var $113=($112) & 14;
      var $114=$col;
      var $115=($114) & 1;
      var $116=((($113)+($115))|0);
      var $117=($116) << 1;
      var $118=($110) >>> ((($117))>>>0);
      var $119=($118) & 3;
      var $120=$row;
      var $121=HEAPU16[((_shrink)>>1)];
      var $122=((($121))&65535);
      var $123=($120) >> ((($122))|0);
      var $124=HEAPU16[((_iwidth)>>1)];
      var $125=((($124))&65535);
      var $126=((($123)*($125))|0);
      var $127=$col;
      var $128=HEAPU16[((_shrink)>>1)];
      var $129=((($128))&65535);
      var $130=($127) >> ((($129))|0);
      var $131=((($126)+($130))|0);
      var $132=HEAP32[((_image)>>2)];
      var $133=(($132+($131<<3))|0);
      var $134=(($133+($119<<1))|0);
      HEAP16[(($134)>>1)]=$109;
      __label__ = 11; break;
    case 11: // $135
      var $136=$col;
      var $137=((($136)+1)|0);
      $col=$137;
      __label__ = 9; break;
    case 12: // $138
      __label__ = 13; break;
    case 13: // $139
      var $140=$row;
      var $141=((($140)+1)|0);
      $row=$141;
      __label__ = 1; break;
    case 14: // $142
      var $143=$pixel;
      var $144=$143;
      _free($144);
      _phase_one_correct();
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_phase_one_load_raw["X"]=1;

function _ph1_bithuff($nbits, $huff) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $c;
      $2=$nbits;
      $3=$huff;
      var $4=$2;
      var $5=((($4))|0)==-1;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      HEAP32[((_ph1_bithuff_vbits)>>2)]=0;
      (HEAP32[((_ph1_bithuff_bitbuf)>>2)]=[0,0].slice(0)[0],HEAP32[((_ph1_bithuff_bitbuf+4)>>2)]=[0,0].slice(0)[1]);
      $1=0;
      __label__ = 9; break;
    case 2: // $7
      var $8=$2;
      var $9=((($8))|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $10
      $1=0;
      __label__ = 9; break;
    case 4: // $11
      var $12=HEAP32[((_ph1_bithuff_vbits)>>2)];
      var $13=$2;
      var $14=((($12))|0) < ((($13))|0);
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $15
      var $16=[HEAPU32[((_ph1_bithuff_bitbuf)>>2)],HEAPU32[((_ph1_bithuff_bitbuf+4)>>2)]];
      var $17=[($16.slice(0))[0] << 32, (($16.slice(0))[1] << 32) | ((($16.slice(0))[0]&((Math.pow(2, 32)-1)<<(32-32))) >>> (32-32))];
      var $18=_get4();
      var $19=[((((($18))>>>0))>>>0),0];
      var $20=[($17.slice(0))[0] | ($19)[0], ($17.slice(0))[1] | ($19)[1]];
      (HEAP32[((_ph1_bithuff_bitbuf)>>2)]=$20.slice(0).slice(0)[0],HEAP32[((_ph1_bithuff_bitbuf+4)>>2)]=$20.slice(0).slice(0)[1]);
      var $21=HEAP32[((_ph1_bithuff_vbits)>>2)];
      var $22=((($21)+32)|0);
      HEAP32[((_ph1_bithuff_vbits)>>2)]=$22;
      __label__ = 6; break;
    case 6: // $23
      var $24=[HEAPU32[((_ph1_bithuff_bitbuf)>>2)],HEAPU32[((_ph1_bithuff_bitbuf+4)>>2)]];
      var $25=HEAP32[((_ph1_bithuff_vbits)>>2)];
      var $26=((64-($25))|0);
      var $27=[((((($26))>>>0))>>>0),0];
      var $28=[($24.slice(0))[0] << ($27), (($24.slice(0))[1] << ($27)) | ((($24.slice(0))[0]&((Math.pow(2, ($27))-1)<<(32-($27)))) >>> (32-($27)))];
      var $29=$2;
      var $30=((64-($29))|0);
      var $31=[((((($30))>>>0))>>>0),0];
      var $32=[(($28.slice(0))[0] >>> ((($31))>>>0)) | ((($28.slice(0))[1]&(Math.pow(2, ((($31))>>>0))-1))<<(32-((($31))>>>0))),($28.slice(0))[1] >>> ((($31))>>>0)];
      var $33=((($32.slice(0))[0]) & 4294967295);
      $c=$33;
      var $34=$3;
      var $35=((($34))|0)!=0;
      if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $36
      var $37=$c;
      var $38=$3;
      var $39=(($38+($37<<1))|0);
      var $40=HEAPU16[(($39)>>1)];
      var $41=((($40))&65535);
      var $42=($41) >> 8;
      var $43=HEAP32[((_ph1_bithuff_vbits)>>2)];
      var $44=((($43)-($42))|0);
      HEAP32[((_ph1_bithuff_vbits)>>2)]=$44;
      var $45=$c;
      var $46=$3;
      var $47=(($46+($45<<1))|0);
      var $48=HEAP16[(($47)>>1)];
      var $49=((($48)) & 255);
      var $50=((($49))&255);
      $1=$50;
      __label__ = 9; break;
    case 8: // $51
      var $52=$2;
      var $53=HEAP32[((_ph1_bithuff_vbits)>>2)];
      var $54=((($53)-($52))|0);
      HEAP32[((_ph1_bithuff_vbits)>>2)]=$54;
      var $55=$c;
      $1=$55;
      __label__ = 9; break;
    case 9: // $56
      var $57=$1;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_ph1_bithuff["X"]=1;

function _phase_one_load_raw_c() {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $offset;
      var $len=__stackBase__;
      var $pred=__stackBase__+8;
      var $row;
      var $col;
      var $i;
      var $j;
      var $pixel;
      var $black;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=HEAPU16[((_raw_height)>>1)];
      var $4=((($3))&65535);
      var $5=(((($4)<<2))|0);
      var $6=((($2)+($5))|0);
      var $7=_calloc($6, 2);
      var $8=$7;
      $pixel=$8;
      var $9=$pixel;
      var $10=$9;
      _merror($10, ((__str20)|0));
      var $11=$pixel;
      var $12=HEAPU16[((_raw_width)>>1)];
      var $13=((($12))&65535);
      var $14=(($11+($13<<1))|0);
      var $15=$14;
      $offset=$15;
      var $16=HEAP32[((_ifp)>>2)];
      var $17=HEAP32[((_strip_offset)>>2)];
      var $18=_fseek($16, $17, 0);
      $row=0;
      __label__ = 1; break;
    case 1: // $19
      var $20=$row;
      var $21=HEAPU16[((_raw_height)>>1)];
      var $22=((($21))&65535);
      var $23=((($20))|0) < ((($22))|0);
      if ($23) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $24
      var $25=_get4();
      var $26=$row;
      var $27=$offset;
      var $28=(($27+($26<<2))|0);
      HEAP32[(($28)>>2)]=$25;
      __label__ = 3; break;
    case 3: // $29
      var $30=$row;
      var $31=((($30)+1)|0);
      $row=$31;
      __label__ = 1; break;
    case 4: // $32
      var $33=$offset;
      var $34=$33;
      var $35=HEAPU16[((_raw_height)>>1)];
      var $36=((($35))&65535);
      var $37=(($34+($36<<2))|0);
      $black=$37;
      var $38=HEAP32[((_ifp)>>2)];
      var $39=HEAP32[((((_ph1+12)|0))>>2)];
      var $40=_fseek($38, $39, 0);
      var $41=HEAP32[((((_ph1+12)|0))>>2)];
      var $42=((($41))|0)!=0;
      if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $43
      var $44=$black;
      var $45=(($44)|0);
      var $46=(($45)|0);
      var $47=HEAPU16[((_raw_height)>>1)];
      var $48=((($47))&65535);
      var $49=(((($48)<<1))|0);
      _read_shorts($46, $49);
      __label__ = 6; break;
    case 6: // $50
      $i=0;
      __label__ = 7; break;
    case 7: // $51
      var $52=$i;
      var $53=((($52))|0) < 256;
      if ($53) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $54
      var $55=$i;
      var $56=$i;
      var $57=((($55)*($56))|0);
      var $58=((($57))|0);
      var $59=($58)/3.969;
      var $60=($59)+0.5;
      var $61=(($60) >= 0 ? Math.floor(($60)) : Math.ceil(($60)));
      var $62=$i;
      var $63=((_curve+($62<<1))|0);
      HEAP16[(($63)>>1)]=$61;
      __label__ = 9; break;
    case 9: // $64
      var $65=$i;
      var $66=((($65)+1)|0);
      $i=$66;
      __label__ = 7; break;
    case 10: // $67
      $row=0;
      __label__ = 11; break;
    case 11: // $68
      var $69=$row;
      var $70=HEAPU16[((_raw_height)>>1)];
      var $71=((($70))&65535);
      var $72=((($69))|0) < ((($71))|0);
      if ($72) { __label__ = 12; break; } else { __label__ = 51; break; }
    case 12: // $73
      var $74=HEAP32[((_ifp)>>2)];
      var $75=HEAP32[((_data_offset)>>2)];
      var $76=$row;
      var $77=$offset;
      var $78=(($77+($76<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($75)+($79))|0);
      var $81=_fseek($74, $80, 0);
      var $82=_ph1_bithuff(-1, 0);
      var $83=(($pred+4)|0);
      HEAP32[(($83)>>2)]=0;
      var $84=(($pred)|0);
      HEAP32[(($84)>>2)]=0;
      $col=0;
      __label__ = 13; break;
    case 13: // $85
      var $86=$col;
      var $87=HEAPU16[((_raw_width)>>1)];
      var $88=((($87))&65535);
      var $89=((($86))|0) < ((($88))|0);
      if ($89) { __label__ = 14; break; } else { __label__ = 41; break; }
    case 14: // $90
      var $91=$col;
      var $92=HEAPU16[((_raw_width)>>1)];
      var $93=((($92))&65535);
      var $94=($93) & -8;
      var $95=((($91))|0) >= ((($94))|0);
      if ($95) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $96
      var $97=(($len+4)|0);
      HEAP32[(($97)>>2)]=14;
      var $98=(($len)|0);
      HEAP32[(($98)>>2)]=14;
      __label__ = 31; break;
    case 16: // $99
      var $100=$col;
      var $101=($100) & 7;
      var $102=((($101))|0)==0;
      if ($102) { __label__ = 17; break; } else { __label__ = 30; break; }
    case 17: // $103
      $i=0;
      __label__ = 18; break;
    case 18: // $104
      var $105=$i;
      var $106=((($105))|0) < 2;
      if ($106) { __label__ = 19; break; } else { __label__ = 29; break; }
    case 19: // $107
      $j=0;
      __label__ = 20; break;
    case 20: // $108
      var $109=$j;
      var $110=((($109))|0) < 5;
      if ($110) { __label__ = 21; break; } else { var $116 = 0;__label__ = 22; break; }
    case 21: // $111
      var $112=_ph1_bithuff(1, 0);
      var $113=((($112))|0)!=0;
      var $114=($113) ^ 1;
      var $116 = $114;__label__ = 22; break;
    case 22: // $115
      var $116;
      if ($116) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: // $117
      __label__ = 24; break;
    case 24: // $118
      var $119=$j;
      var $120=((($119)+1)|0);
      $j=$120;
      __label__ = 20; break;
    case 25: // $121
      var $122=$j;
      var $123=((($122)-1)|0);
      $j=$123;
      var $124=((($122))|0)!=0;
      if ($124) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $125
      var $126=$j;
      var $127=(((($126)<<1))|0);
      var $128=_ph1_bithuff(1, 0);
      var $129=((($127)+($128))|0);
      var $130=((_phase_one_load_raw_c_length+($129<<2))|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$i;
      var $133=(($len+($132<<2))|0);
      HEAP32[(($133)>>2)]=$131;
      __label__ = 27; break;
    case 27: // $134
      __label__ = 28; break;
    case 28: // $135
      var $136=$i;
      var $137=((($136)+1)|0);
      $i=$137;
      __label__ = 18; break;
    case 29: // $138
      __label__ = 30; break;
    case 30: // $139
      __label__ = 31; break;
    case 31: // $140
      var $141=$col;
      var $142=($141) & 1;
      var $143=(($len+($142<<2))|0);
      var $144=HEAP32[(($143)>>2)];
      $i=$144;
      var $145=((($144))|0)==14;
      if ($145) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: // $146
      var $147=_ph1_bithuff(16, 0);
      var $148=$col;
      var $149=($148) & 1;
      var $150=(($pred+($149<<2))|0);
      HEAP32[(($150)>>2)]=$147;
      var $151=((($147)) & 65535);
      var $152=$col;
      var $153=$pixel;
      var $154=(($153+($152<<1))|0);
      HEAP16[(($154)>>1)]=$151;
      __label__ = 34; break;
    case 33: // $155
      var $156=$i;
      var $157=_ph1_bithuff($156, 0);
      var $158=((($157)+1)|0);
      var $159=$i;
      var $160=((($159)-1)|0);
      var $161=1 << ($160);
      var $162=((($158)-($161))|0);
      var $163=$col;
      var $164=($163) & 1;
      var $165=(($pred+($164<<2))|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($166)+($162))|0);
      HEAP32[(($165)>>2)]=$167;
      var $168=((($167)) & 65535);
      var $169=$col;
      var $170=$pixel;
      var $171=(($170+($169<<1))|0);
      HEAP16[(($171)>>1)]=$168;
      __label__ = 34; break;
    case 34: // $172
      var $173=$col;
      var $174=($173) & 1;
      var $175=(($pred+($174<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=($176) >> 16;
      var $178=((($177))|0)!=0;
      if ($178) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $179
      _derror();
      __label__ = 36; break;
    case 36: // $180
      var $181=HEAP32[((((_ph1)|0))>>2)];
      var $182=((($181))|0)==5;
      if ($182) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: // $183
      var $184=$col;
      var $185=$pixel;
      var $186=(($185+($184<<1))|0);
      var $187=HEAPU16[(($186)>>1)];
      var $188=((($187))&65535);
      var $189=((($188))|0) < 256;
      if ($189) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $190
      var $191=$col;
      var $192=$pixel;
      var $193=(($192+($191<<1))|0);
      var $194=HEAPU16[(($193)>>1)];
      var $195=((($194))&65535);
      var $196=((_curve+($195<<1))|0);
      var $197=HEAP16[(($196)>>1)];
      var $198=$col;
      var $199=$pixel;
      var $200=(($199+($198<<1))|0);
      HEAP16[(($200)>>1)]=$197;
      __label__ = 39; break;
    case 39: // $201
      __label__ = 40; break;
    case 40: // $202
      var $203=$col;
      var $204=((($203)+1)|0);
      $col=$204;
      __label__ = 13; break;
    case 41: // $205
      var $206=$row;
      var $207=HEAPU16[((_top_margin)>>1)];
      var $208=((($207))&65535);
      var $209=((($206)-($208))|0);
      var $210=HEAPU16[((_height)>>1)];
      var $211=((($210))&65535);
      var $212=((($209))>>>0) < ((($211))>>>0);
      if ($212) { __label__ = 42; break; } else { __label__ = 49; break; }
    case 42: // $213
      $col=0;
      __label__ = 43; break;
    case 43: // $214
      var $215=$col;
      var $216=HEAPU16[((_width)>>1)];
      var $217=((($216))&65535);
      var $218=((($215))|0) < ((($217))|0);
      if ($218) { __label__ = 44; break; } else { __label__ = 48; break; }
    case 44: // $219
      var $220=$col;
      var $221=HEAPU16[((_left_margin)>>1)];
      var $222=((($221))&65535);
      var $223=((($220)+($222))|0);
      var $224=$pixel;
      var $225=(($224+($223<<1))|0);
      var $226=HEAPU16[(($225)>>1)];
      var $227=((($226))&65535);
      var $228=($227) << 2;
      var $229=HEAP32[((((_ph1+8)|0))>>2)];
      var $230=((($228)-($229))|0);
      var $231=$col;
      var $232=HEAP32[((((_ph1+16)|0))>>2)];
      var $233=((($231))|0) >= ((($232))|0);
      var $234=((($233))&1);
      var $235=$row;
      var $236=$black;
      var $237=(($236+($235<<2))|0);
      var $238=(($237+($234<<1))|0);
      var $239=HEAP16[(($238)>>1)];
      var $240=((($239) << 16) >> 16);
      var $241=((($230)+($240))|0);
      $i=$241;
      var $242=$i;
      var $243=((($242))|0) > 0;
      if ($243) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: // $244
      var $245=$i;
      var $246=((($245)) & 65535);
      var $247=HEAPU32[((_filters)>>2)];
      var $248=$row;
      var $249=HEAPU16[((_top_margin)>>1)];
      var $250=((($249))&65535);
      var $251=((($248)-($250))|0);
      var $252=($251) << 1;
      var $253=($252) & 14;
      var $254=$col;
      var $255=($254) & 1;
      var $256=((($253)+($255))|0);
      var $257=($256) << 1;
      var $258=($247) >>> ((($257))>>>0);
      var $259=($258) & 3;
      var $260=$row;
      var $261=HEAPU16[((_top_margin)>>1)];
      var $262=((($261))&65535);
      var $263=((($260)-($262))|0);
      var $264=HEAPU16[((_shrink)>>1)];
      var $265=((($264))&65535);
      var $266=($263) >> ((($265))|0);
      var $267=HEAPU16[((_iwidth)>>1)];
      var $268=((($267))&65535);
      var $269=((($266)*($268))|0);
      var $270=$col;
      var $271=HEAPU16[((_shrink)>>1)];
      var $272=((($271))&65535);
      var $273=($270) >> ((($272))|0);
      var $274=((($269)+($273))|0);
      var $275=HEAP32[((_image)>>2)];
      var $276=(($275+($274<<3))|0);
      var $277=(($276+($259<<1))|0);
      HEAP16[(($277)>>1)]=$246;
      __label__ = 46; break;
    case 46: // $278
      __label__ = 47; break;
    case 47: // $279
      var $280=$col;
      var $281=((($280)+1)|0);
      $col=$281;
      __label__ = 43; break;
    case 48: // $282
      __label__ = 49; break;
    case 49: // $283
      __label__ = 50; break;
    case 50: // $284
      var $285=$row;
      var $286=((($285)+1)|0);
      $row=$286;
      __label__ = 11; break;
    case 51: // $287
      var $288=$pixel;
      var $289=$288;
      _free($289);
      _phase_one_correct();
      var $290=HEAP32[((((_ph1+8)|0))>>2)];
      var $291=((65532-($290))|0);
      HEAP32[((_maximum)>>2)]=$291;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_phase_one_load_raw_c["X"]=1;

function _hasselblad_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $jh=__stackBase__;
      var $row;
      var $col;
      var $pred=__stackBase__+96;
      var $len=__stackBase__+104;
      var $diff;
      var $c;
      var $1=_ljpeg_start($jh, 0);
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $3
      __label__ = 26; break;
    case 2: // $4
      HEAP16[((_order)>>1)]=18761;
      var $5=_ph1_bithuff(-1, 0);
      var $6=HEAPU16[((_top_margin)>>1)];
      var $7=((($6))&65535);
      var $8=(((-($7)))|0);
      $row=$8;
      __label__ = 3; break;
    case 3: // $9
      var $10=$row;
      var $11=HEAPU16[((_height)>>1)];
      var $12=((($11))&65535);
      var $13=((($10))|0) < ((($12))|0);
      if ($13) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: // $14
      var $15=HEAP32[((_load_flags)>>2)];
      var $16=((($15)+32768)|0);
      var $17=(($pred+4)|0);
      HEAP32[(($17)>>2)]=$16;
      var $18=(($pred)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=HEAPU16[((_left_margin)>>1)];
      var $20=((($19))&65535);
      var $21=(((-($20)))|0);
      $col=$21;
      __label__ = 5; break;
    case 5: // $22
      var $23=$col;
      var $24=HEAPU16[((_raw_width)>>1)];
      var $25=((($24))&65535);
      var $26=HEAPU16[((_left_margin)>>1)];
      var $27=((($26))&65535);
      var $28=((($25)-($27))|0);
      var $29=((($23))|0) < ((($28))|0);
      if ($29) { __label__ = 6; break; } else { __label__ = 23; break; }
    case 6: // $30
      $c=0;
      __label__ = 7; break;
    case 7: // $31
      var $32=$c;
      var $33=((($32))|0) < 2;
      if ($33) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $34
      var $35=(($jh+52)|0);
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=HEAPU16[(($37)>>1)];
      var $39=((($38))&65535);
      var $40=(($jh+52)|0);
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+2)|0);
      var $44=_ph1_bithuff($39, $43);
      var $45=$c;
      var $46=(($len+($45<<2))|0);
      HEAP32[(($46)>>2)]=$44;
      __label__ = 9; break;
    case 9: // $47
      var $48=$c;
      var $49=((($48)+1)|0);
      $c=$49;
      __label__ = 7; break;
    case 10: // $50
      $c=0;
      __label__ = 11; break;
    case 11: // $51
      var $52=$c;
      var $53=((($52))|0) < 2;
      if ($53) { __label__ = 12; break; } else { __label__ = 21; break; }
    case 12: // $54
      var $55=$c;
      var $56=(($len+($55<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=_ph1_bithuff($57, 0);
      $diff=$58;
      var $59=$diff;
      var $60=$c;
      var $61=(($len+($60<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-1)|0);
      var $64=1 << ($63);
      var $65=($59) & ($64);
      var $66=((($65))|0)==0;
      if ($66) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $67
      var $68=$c;
      var $69=(($len+($68<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=1 << ($70);
      var $72=((($71)-1)|0);
      var $73=$diff;
      var $74=((($73)-($72))|0);
      $diff=$74;
      __label__ = 14; break;
    case 14: // $75
      var $76=$diff;
      var $77=((($76))|0)==65535;
      if ($77) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $78
      $diff=-32768;
      __label__ = 16; break;
    case 16: // $79
      var $80=$diff;
      var $81=$c;
      var $82=(($pred+($81<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)+($80))|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=$row;
      var $86=((($85))|0) >= 0;
      if ($86) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: // $87
      var $88=$col;
      var $89=$c;
      var $90=((($88)+($89))|0);
      var $91=HEAPU16[((_width)>>1)];
      var $92=((($91))&65535);
      var $93=((($90))>>>0) < ((($92))>>>0);
      if ($93) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $94
      var $95=$c;
      var $96=(($pred+($95<<2))|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($97)) & 65535);
      var $99=HEAPU32[((_filters)>>2)];
      var $100=$row;
      var $101=($100) << 1;
      var $102=($101) & 14;
      var $103=$col;
      var $104=$c;
      var $105=((($103)+($104))|0);
      var $106=($105) & 1;
      var $107=((($102)+($106))|0);
      var $108=($107) << 1;
      var $109=($99) >>> ((($108))>>>0);
      var $110=($109) & 3;
      var $111=$row;
      var $112=HEAPU16[((_shrink)>>1)];
      var $113=((($112))&65535);
      var $114=($111) >> ((($113))|0);
      var $115=HEAPU16[((_iwidth)>>1)];
      var $116=((($115))&65535);
      var $117=((($114)*($116))|0);
      var $118=$col;
      var $119=$c;
      var $120=((($118)+($119))|0);
      var $121=HEAPU16[((_shrink)>>1)];
      var $122=((($121))&65535);
      var $123=($120) >> ((($122))|0);
      var $124=((($117)+($123))|0);
      var $125=HEAP32[((_image)>>2)];
      var $126=(($125+($124<<3))|0);
      var $127=(($126+($110<<1))|0);
      HEAP16[(($127)>>1)]=$98;
      __label__ = 19; break;
    case 19: // $128
      __label__ = 20; break;
    case 20: // $129
      var $130=$c;
      var $131=((($130)+1)|0);
      $c=$131;
      __label__ = 11; break;
    case 21: // $132
      __label__ = 22; break;
    case 22: // $133
      var $134=$col;
      var $135=((($134)+2)|0);
      $col=$135;
      __label__ = 5; break;
    case 23: // $136
      __label__ = 24; break;
    case 24: // $137
      var $138=$row;
      var $139=((($138)+1)|0);
      $row=$139;
      __label__ = 3; break;
    case 25: // $140
      _ljpeg_end($jh);
      HEAP32[((_maximum)>>2)]=65535;
      __label__ = 26; break;
    case 26: // $141
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_hasselblad_load_raw["X"]=1;

function _imacon_full_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      $row=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$row;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $6
      $col=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$col;
      var $9=HEAPU16[((_width)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $12
      var $13=$row;
      var $14=HEAPU16[((_width)>>1)];
      var $15=((($14))&65535);
      var $16=((($13)*($15))|0);
      var $17=$col;
      var $18=((($16)+($17))|0);
      var $19=HEAP32[((_image)>>2)];
      var $20=(($19+($18<<3))|0);
      var $21=(($20)|0);
      _read_shorts($21, 3);
      __label__ = 5; break;
    case 5: // $22
      var $23=$col;
      var $24=((($23)+1)|0);
      $col=$24;
      __label__ = 3; break;
    case 6: // $25
      __label__ = 7; break;
    case 7: // $26
      var $27=$row;
      var $28=((($27)+1)|0);
      $row=$28;
      __label__ = 1; break;
    case 8: // $29
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _leaf_hdr_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $tile;
      var $r;
      var $c;
      var $row;
      var $col;
      $tile=0;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=_calloc($2, 2);
      var $4=$3;
      $pixel=$4;
      var $5=$pixel;
      var $6=$5;
      _merror($6, ((__str21)|0));
      $c=0;
      __label__ = 1; break;
    case 1: // $7
      var $8=$c;
      var $9=HEAPU32[((_tiff_samples)>>2)];
      var $10=((($8))>>>0) < ((($9))>>>0);
      if ($10) { __label__ = 2; break; } else { __label__ = 22; break; }
    case 2: // $11
      $r=0;
      __label__ = 3; break;
    case 3: // $12
      var $13=$r;
      var $14=HEAPU16[((_raw_height)>>1)];
      var $15=((($14))&65535);
      var $16=((($13))>>>0) < ((($15))>>>0);
      if ($16) { __label__ = 4; break; } else { __label__ = 20; break; }
    case 4: // $17
      var $18=$r;
      var $19=HEAPU32[((_tile_length)>>2)];
      var $20=((($18))>>>0)%((($19))>>>0);
      var $21=((($20))|0)==0;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $22
      var $23=HEAP32[((_ifp)>>2)];
      var $24=HEAP32[((_data_offset)>>2)];
      var $25=$tile;
      var $26=((($25)+1)|0);
      $tile=$26;
      var $27=(((($25)<<2))|0);
      var $28=((($24)+($27))|0);
      var $29=_fseek($23, $28, 0);
      var $30=HEAP32[((_ifp)>>2)];
      var $31=_get4();
      var $32=HEAPU16[((_left_margin)>>1)];
      var $33=((($32))&65535);
      var $34=(((($33)<<1))|0);
      var $35=((($31)+($34))|0);
      var $36=_fseek($30, $35, 0);
      __label__ = 6; break;
    case 6: // $37
      var $38=HEAP32[((_filters)>>2)];
      var $39=((($38))|0)!=0;
      if ($39) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: // $40
      var $41=$c;
      var $42=HEAP32[((_shot_select)>>2)];
      var $43=((($41))|0)!=((($42))|0);
      if ($43) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $44
      __label__ = 19; break;
    case 9: // $45
      var $46=$pixel;
      var $47=HEAPU16[((_raw_width)>>1)];
      var $48=((($47))&65535);
      _read_shorts($46, $48);
      var $49=$r;
      var $50=HEAPU16[((_top_margin)>>1)];
      var $51=((($50))&65535);
      var $52=((($49)-($51))|0);
      $row=$52;
      var $53=HEAPU16[((_height)>>1)];
      var $54=((($53))&65535);
      var $55=((($52))>>>0) >= ((($54))>>>0);
      if ($55) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $56
      __label__ = 19; break;
    case 11: // $57
      $col=0;
      __label__ = 12; break;
    case 12: // $58
      var $59=$col;
      var $60=HEAPU16[((_width)>>1)];
      var $61=((($60))&65535);
      var $62=((($59))>>>0) < ((($61))>>>0);
      if ($62) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: // $63
      var $64=HEAP32[((_filters)>>2)];
      var $65=((($64))|0)!=0;
      if ($65) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $66
      var $67=$col;
      var $68=$pixel;
      var $69=(($68+($67<<1))|0);
      var $70=HEAP16[(($69)>>1)];
      var $71=HEAPU32[((_filters)>>2)];
      var $72=$row;
      var $73=($72) << 1;
      var $74=($73) & 14;
      var $75=$col;
      var $76=($75) & 1;
      var $77=((($74)+($76))|0);
      var $78=($77) << 1;
      var $79=($71) >>> ((($78))>>>0);
      var $80=($79) & 3;
      var $81=$row;
      var $82=HEAPU16[((_shrink)>>1)];
      var $83=((($82))&65535);
      var $84=($81) >>> ((($83))>>>0);
      var $85=HEAPU16[((_iwidth)>>1)];
      var $86=((($85))&65535);
      var $87=((($84)*($86))|0);
      var $88=$col;
      var $89=HEAPU16[((_shrink)>>1)];
      var $90=((($89))&65535);
      var $91=($88) >>> ((($90))>>>0);
      var $92=((($87)+($91))|0);
      var $93=HEAP32[((_image)>>2)];
      var $94=(($93+($92<<3))|0);
      var $95=(($94+($80<<1))|0);
      HEAP16[(($95)>>1)]=$70;
      __label__ = 16; break;
    case 15: // $96
      var $97=$col;
      var $98=$pixel;
      var $99=(($98+($97<<1))|0);
      var $100=HEAP16[(($99)>>1)];
      var $101=$c;
      var $102=$row;
      var $103=HEAPU16[((_width)>>1)];
      var $104=((($103))&65535);
      var $105=((($102)*($104))|0);
      var $106=$col;
      var $107=((($105)+($106))|0);
      var $108=HEAP32[((_image)>>2)];
      var $109=(($108+($107<<3))|0);
      var $110=(($109+($101<<1))|0);
      HEAP16[(($110)>>1)]=$100;
      __label__ = 16; break;
    case 16: // $111
      __label__ = 17; break;
    case 17: // $112
      var $113=$col;
      var $114=((($113)+1)|0);
      $col=$114;
      __label__ = 12; break;
    case 18: // $115
      __label__ = 19; break;
    case 19: // $116
      var $117=$r;
      var $118=((($117)+1)|0);
      $r=$118;
      __label__ = 3; break;
    case 20: // $119
      __label__ = 21; break;
    case 21: // $120
      var $121=$c;
      var $122=((($121)+1)|0);
      $c=$122;
      __label__ = 1; break;
    case 22: // $123
      var $124=$pixel;
      var $125=$124;
      _free($125);
      var $126=HEAP32[((_filters)>>2)];
      var $127=((($126))|0)!=0;
      if ($127) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: // $128
      HEAP32[((_maximum)>>2)]=65535;
      HEAP32[((_raw_color)>>2)]=1;
      __label__ = 24; break;
    case 24: // $129
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_leaf_hdr_load_raw["X"]=1;

function _sinar_4shot_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $shot;
      var $row;
      var $col;
      var $r;
      var $c;
      var $1=HEAP32[((_shot_select)>>2)];
      $shot=$1;
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $3
      var $4=HEAP32[((_half_size)>>2)];
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: // $6
      var $7=$shot;
      var $8=((($7))|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $9
      var $10=$shot;
      var $11=((($10)-1)|0);
      $shot=$11;
      __label__ = 4; break;
    case 4: // $12
      var $13=$shot;
      var $14=((($13))>>>0) > 3;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $15
      $shot=3;
      __label__ = 6; break;
    case 6: // $16
      var $17=HEAP32[((_ifp)>>2)];
      var $18=HEAP32[((_data_offset)>>2)];
      var $19=$shot;
      var $20=(((($19)<<2))|0);
      var $21=((($18)+($20))|0);
      var $22=_fseek($17, $21, 0);
      var $23=HEAP32[((_ifp)>>2)];
      var $24=_get4();
      var $25=_fseek($23, $24, 0);
      _unpacked_load_raw();
      __label__ = 24; break;
    case 7: // $26
      var $27=HEAP32[((_image)>>2)];
      var $28=$27;
      _free($28);
      var $29=HEAPU16[((_height)>>1)];
      HEAP16[((_iheight)>>1)]=$29;
      var $30=((($29))&65535);
      var $31=HEAPU16[((_width)>>1)];
      HEAP16[((_iwidth)>>1)]=$31;
      var $32=((($31))&65535);
      var $33=((($30)*($32))|0);
      var $34=_calloc($33, 8);
      var $35=$34;
      HEAP32[((_image)>>2)]=$35;
      var $36=HEAP32[((_image)>>2)];
      var $37=$36;
      _merror($37, ((__str22)|0));
      var $38=HEAPU16[((_raw_width)>>1)];
      var $39=((($38))&65535);
      var $40=_calloc($39, 2);
      var $41=$40;
      $pixel=$41;
      var $42=$pixel;
      var $43=$42;
      _merror($43, ((__str22)|0));
      $shot=0;
      __label__ = 8; break;
    case 8: // $44
      var $45=$shot;
      var $46=((($45))>>>0) < 4;
      if ($46) { __label__ = 9; break; } else { __label__ = 23; break; }
    case 9: // $47
      var $48=HEAP32[((_ifp)>>2)];
      var $49=HEAP32[((_data_offset)>>2)];
      var $50=$shot;
      var $51=(((($50)<<2))|0);
      var $52=((($49)+($51))|0);
      var $53=_fseek($48, $52, 0);
      var $54=HEAP32[((_ifp)>>2)];
      var $55=_get4();
      var $56=_fseek($54, $55, 0);
      $row=0;
      __label__ = 10; break;
    case 10: // $57
      var $58=$row;
      var $59=HEAPU16[((_raw_height)>>1)];
      var $60=((($59))&65535);
      var $61=((($58))>>>0) < ((($60))>>>0);
      if ($61) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: // $62
      var $63=$pixel;
      var $64=HEAPU16[((_raw_width)>>1)];
      var $65=((($64))&65535);
      _read_shorts($63, $65);
      var $66=$row;
      var $67=HEAPU16[((_top_margin)>>1)];
      var $68=((($67))&65535);
      var $69=((($66)-($68))|0);
      var $70=$shot;
      var $71=($70) >>> 1;
      var $72=($71) & 1;
      var $73=((($69)-($72))|0);
      $r=$73;
      var $74=HEAPU16[((_height)>>1)];
      var $75=((($74))&65535);
      var $76=((($73))>>>0) >= ((($75))>>>0);
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $77
      __label__ = 20; break;
    case 13: // $78
      $col=0;
      __label__ = 14; break;
    case 14: // $79
      var $80=$col;
      var $81=HEAPU16[((_raw_width)>>1)];
      var $82=((($81))&65535);
      var $83=((($80))>>>0) < ((($82))>>>0);
      if ($83) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: // $84
      var $85=$col;
      var $86=HEAPU16[((_left_margin)>>1)];
      var $87=((($86))&65535);
      var $88=((($85)-($87))|0);
      var $89=$shot;
      var $90=($89) & 1;
      var $91=((($88)-($90))|0);
      $c=$91;
      var $92=HEAPU16[((_width)>>1)];
      var $93=((($92))&65535);
      var $94=((($91))>>>0) >= ((($93))>>>0);
      if ($94) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $95
      __label__ = 18; break;
    case 17: // $96
      var $97=$col;
      var $98=$pixel;
      var $99=(($98+($97<<1))|0);
      var $100=HEAP16[(($99)>>1)];
      var $101=HEAPU32[((_filters)>>2)];
      var $102=$row;
      var $103=($102) << 1;
      var $104=($103) & 14;
      var $105=$col;
      var $106=($105) & 1;
      var $107=((($104)+($106))|0);
      var $108=($107) << 1;
      var $109=($101) >>> ((($108))>>>0);
      var $110=($109) & 3;
      var $111=$r;
      var $112=HEAPU16[((_width)>>1)];
      var $113=((($112))&65535);
      var $114=((($111)*($113))|0);
      var $115=$c;
      var $116=((($114)+($115))|0);
      var $117=HEAP32[((_image)>>2)];
      var $118=(($117+($116<<3))|0);
      var $119=(($118+($110<<1))|0);
      HEAP16[(($119)>>1)]=$100;
      __label__ = 18; break;
    case 18: // $120
      var $121=$col;
      var $122=((($121)+1)|0);
      $col=$122;
      __label__ = 14; break;
    case 19: // $123
      __label__ = 20; break;
    case 20: // $124
      var $125=$row;
      var $126=((($125)+1)|0);
      $row=$126;
      __label__ = 10; break;
    case 21: // $127
      __label__ = 22; break;
    case 22: // $128
      var $129=$shot;
      var $130=((($129)+1)|0);
      $shot=$130;
      __label__ = 8; break;
    case 23: // $131
      var $132=$pixel;
      var $133=$132;
      _free($133);
      HEAP32[((_filters)>>2)]=0;
      HEAP16[((_shrink)>>1)]=0;
      __label__ = 24; break;
    case 24: // $134
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sinar_4shot_load_raw["X"]=1;

function _packed_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $vbits;
      var $bwide;
      var $pwide;
      var $rbits;
      var $bite;
      var $half;
      var $irow;
      var $row;
      var $col;
      var $val;
      var $i;
      var $zero;
      var $bitbuf=__stackBase__;
      $vbits=0;
      $zero=0;
      (HEAP32[(($bitbuf)>>2)]=[0,0].slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=[0,0].slice(0)[1]);
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=(((($2)<<3))|0);
      var $4=HEAPU16[((_width)>>1)];
      var $5=((($4))&65535);
      var $6=HEAP32[((_tiff_bps)>>2)];
      var $7=((($5)*($6))|0);
      var $8=((($3))>>>0) >= ((($7))>>>0);
      if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $9
      var $10=HEAPU16[((_raw_width)>>1)];
      var $11=((($10))&65535);
      $bwide=$11;
      var $12=(((($11)<<3))|0);
      var $13=HEAPU32[((_tiff_bps)>>2)];
      var $14=Math.floor(((($12))>>>0)/((($13))>>>0));
      $pwide=$14;
      __label__ = 3; break;
    case 2: // $15
      var $16=HEAPU16[((_raw_width)>>1)];
      var $17=((($16))&65535);
      $pwide=$17;
      var $18=HEAP32[((_tiff_bps)>>2)];
      var $19=((($17)*($18))|0);
      var $20=Math.floor(((($19))>>>0)/8);
      $bwide=$20;
      __label__ = 3; break;
    case 3: // $21
      var $22=$bwide;
      var $23=(((($22)<<3))|0);
      var $24=$pwide;
      var $25=HEAP32[((_tiff_bps)>>2)];
      var $26=((($24)*($25))|0);
      var $27=((($23)-($26))|0);
      $rbits=$27;
      var $28=HEAP32[((_load_flags)>>2)];
      var $29=($28) & 1;
      var $30=((($29))|0)!=0;
      if ($30) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $31
      var $32=$bwide;
      var $33=(((($32)<<4))|0);
      var $34=((((($33))|0)/15)|0);
      $bwide=$34;
      __label__ = 5; break;
    case 5: // $35
      var $36=HEAP32[((_ifp)>>2)];
      var $37=HEAPU16[((_top_margin)>>1)];
      var $38=((($37))&65535);
      var $39=$bwide;
      var $40=((($38)*($39))|0);
      var $41=_fseek($36, $40, 1);
      var $42=HEAP32[((_load_flags)>>2)];
      var $43=($42) & 24;
      var $44=((($43)+8)|0);
      $bite=$44;
      var $45=HEAPU16[((_height)>>1)];
      var $46=((($45))&65535);
      var $47=((($46)+1)|0);
      var $48=($47) >> 1;
      $half=$48;
      $irow=0;
      __label__ = 6; break;
    case 6: // $49
      var $50=$irow;
      var $51=HEAPU16[((_height)>>1)];
      var $52=((($51))&65535);
      var $53=((($50))|0) < ((($52))|0);
      if ($53) { __label__ = 7; break; } else { __label__ = 38; break; }
    case 7: // $54
      var $55=$irow;
      $row=$55;
      var $56=HEAP32[((_load_flags)>>2)];
      var $57=($56) & 2;
      var $58=((($57))|0)!=0;
      if ($58) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: // $59
      var $60=$irow;
      var $61=$half;
      var $62=((($60))|0)%((($61))|0);
      var $63=(((($62)<<1))|0);
      var $64=$irow;
      var $65=$half;
      var $66=((((($64))|0)/((($65))|0))|0);
      var $67=((($63)+($66))|0);
      $row=$67;
      var $68=((($67))|0)==1;
      if ($68) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: // $69
      var $70=HEAP32[((_load_flags)>>2)];
      var $71=($70) & 4;
      var $72=((($71))|0)!=0;
      if ($72) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: // $73
      $vbits=0;
      var $74=HEAP32[((_tiff_compress)>>2)];
      var $75=((($74))|0)!=0;
      if ($75) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $76
      var $77=HEAP32[((_ifp)>>2)];
      var $78=HEAP32[((_data_offset)>>2)];
      var $79=$half;
      var $80=(((-($79)))|0);
      var $81=$bwide;
      var $82=((($80)*($81))|0);
      var $83=($82) & -2048;
      var $84=((($78)-($83))|0);
      var $85=_fseek($77, $84, 0);
      __label__ = 13; break;
    case 12: // $86
      var $87=HEAP32[((_ifp)>>2)];
      var $88=_fseek($87, 0, 2);
      var $89=HEAP32[((_ifp)>>2)];
      var $90=HEAP32[((_ifp)>>2)];
      var $91=_ftell($90);
      var $92=($91) >> 3;
      var $93=($92) << 2;
      var $94=_fseek($89, $93, 0);
      __label__ = 13; break;
    case 13: // $95
      __label__ = 14; break;
    case 14: // $96
      $col=0;
      __label__ = 15; break;
    case 15: // $97
      var $98=$col;
      var $99=$pwide;
      var $100=((($98))|0) < ((($99))|0);
      if ($100) { __label__ = 16; break; } else { __label__ = 36; break; }
    case 16: // $101
      var $102=HEAP32[((_tiff_bps)>>2)];
      var $103=$vbits;
      var $104=((($103)-($102))|0);
      $vbits=$104;
      __label__ = 17; break;
    case 17: // $105
      var $106=$vbits;
      var $107=((($106))|0) < 0;
      if ($107) { __label__ = 18; break; } else { __label__ = 24; break; }
    case 18: // $108
      var $109=$bite;
      var $110=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $111=[((((($109))>>>0))>>>0),0];
      var $112=[($110.slice(0))[0] << ($111), (($110.slice(0))[1] << ($111)) | ((($110.slice(0))[0]&((Math.pow(2, ($111))-1)<<(32-($111)))) >>> (32-($111)))];
      (HEAP32[(($bitbuf)>>2)]=$112.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$112.slice(0).slice(0)[1]);
      $i=0;
      __label__ = 19; break;
    case 19: // $113
      var $114=$i;
      var $115=$bite;
      var $116=((($114))|0) < ((($115))|0);
      if ($116) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $117
      var $118=HEAP32[((_ifp)>>2)];
      var $119=_getc_unlocked($118);
      var $120=$i;
      var $121=($119) << ($120);
      var $122=[((((($121))>>>0))>>>0),0];
      var $123=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $124=[($123.slice(0))[0] | ($122)[0], ($123.slice(0))[1] | ($122)[1]];
      (HEAP32[(($bitbuf)>>2)]=$124.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$124.slice(0).slice(0)[1]);
      __label__ = 21; break;
    case 21: // $125
      var $126=$i;
      var $127=((($126)+8)|0);
      $i=$127;
      __label__ = 19; break;
    case 22: // $128
      __label__ = 23; break;
    case 23: // $129
      var $130=$bite;
      var $131=$vbits;
      var $132=((($131)+($130))|0);
      $vbits=$132;
      __label__ = 17; break;
    case 24: // $133
      var $134=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $135=HEAP32[((_tiff_bps)>>2)];
      var $136=((64-($135))|0);
      var $137=$vbits;
      var $138=((($136)-($137))|0);
      var $139=[((((($138))>>>0))>>>0),0];
      var $140=[($134.slice(0))[0] << ($139), (($134.slice(0))[1] << ($139)) | ((($134.slice(0))[0]&((Math.pow(2, ($139))-1)<<(32-($139)))) >>> (32-($139)))];
      var $141=HEAP32[((_tiff_bps)>>2)];
      var $142=((64-($141))|0);
      var $143=[((((($142))>>>0))>>>0),0];
      var $144=[(($140.slice(0))[0] >>> ((($143))>>>0)) | ((($140.slice(0))[1]&(Math.pow(2, ((($143))>>>0))-1))<<(32-((($143))>>>0))),($140.slice(0))[1] >>> ((($143))>>>0)];
      var $145=((($144.slice(0))[0]) & 4294967295);
      $val=$145;
      var $146=$col;
      var $147=HEAPU32[((_load_flags)>>2)];
      var $148=($147) >>> 6;
      var $149=($146) ^ ($148);
      var $150=HEAPU16[((_left_margin)>>1)];
      var $151=((($150))&65535);
      var $152=((($149)-($151))|0);
      $i=$152;
      var $153=$i;
      var $154=HEAPU16[((_width)>>1)];
      var $155=((($154))&65535);
      var $156=((($153))>>>0) < ((($155))>>>0);
      if ($156) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $157
      var $158=$val;
      var $159=((($158)) & 65535);
      var $160=HEAPU32[((_filters)>>2)];
      var $161=$row;
      var $162=($161) << 1;
      var $163=($162) & 14;
      var $164=$i;
      var $165=($164) & 1;
      var $166=((($163)+($165))|0);
      var $167=($166) << 1;
      var $168=($160) >>> ((($167))>>>0);
      var $169=($168) & 3;
      var $170=$row;
      var $171=HEAPU16[((_shrink)>>1)];
      var $172=((($171))&65535);
      var $173=($170) >> ((($172))|0);
      var $174=HEAPU16[((_iwidth)>>1)];
      var $175=((($174))&65535);
      var $176=((($173)*($175))|0);
      var $177=$i;
      var $178=HEAPU16[((_shrink)>>1)];
      var $179=((($178))&65535);
      var $180=($177) >> ((($179))|0);
      var $181=((($176)+($180))|0);
      var $182=HEAP32[((_image)>>2)];
      var $183=(($182+($181<<3))|0);
      var $184=(($183+($169<<1))|0);
      HEAP16[(($184)>>1)]=$159;
      __label__ = 29; break;
    case 26: // $185
      var $186=HEAP32[((_load_flags)>>2)];
      var $187=($186) & 32;
      var $188=((($187))|0)!=0;
      if ($188) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $189
      var $190=$val;
      var $191=HEAP32[((_black)>>2)];
      var $192=((($191)+($190))|0);
      HEAP32[((_black)>>2)]=$192;
      var $193=$val;
      var $194=((($193))|0)!=0;
      var $195=($194) ^ 1;
      var $196=((($195))&1);
      var $197=$zero;
      var $198=((($197)+($196))|0);
      $zero=$198;
      __label__ = 28; break;
    case 28: // $199
      __label__ = 29; break;
    case 29: // $200
      var $201=HEAP32[((_load_flags)>>2)];
      var $202=($201) & 1;
      var $203=((($202))|0)!=0;
      if ($203) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: // $204
      var $205=$col;
      var $206=((($205))|0)%10;
      var $207=((($206))|0)==9;
      if ($207) { __label__ = 31; break; } else { __label__ = 34; break; }
    case 31: // $208
      var $209=HEAP32[((_ifp)>>2)];
      var $210=_getc_unlocked($209);
      var $211=((($210))|0)!=0;
      if ($211) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: // $212
      var $213=$col;
      var $214=HEAPU16[((_width)>>1)];
      var $215=((($214))&65535);
      var $216=HEAPU16[((_left_margin)>>1)];
      var $217=((($216))&65535);
      var $218=((($215)+($217))|0);
      var $219=((($213))|0) < ((($218))|0);
      if ($219) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $220
      _derror();
      __label__ = 34; break;
    case 34: // $221
      __label__ = 35; break;
    case 35: // $222
      var $223=$col;
      var $224=((($223)+1)|0);
      $col=$224;
      __label__ = 15; break;
    case 36: // $225
      var $226=$rbits;
      var $227=$vbits;
      var $228=((($227)-($226))|0);
      $vbits=$228;
      __label__ = 37; break;
    case 37: // $229
      var $230=$irow;
      var $231=((($230)+1)|0);
      $irow=$231;
      __label__ = 6; break;
    case 38: // $232
      var $233=HEAP32[((_load_flags)>>2)];
      var $234=($233) & 32;
      var $235=((($234))|0)!=0;
      if ($235) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: // $236
      var $237=$pwide;
      var $238=HEAPU16[((_width)>>1)];
      var $239=((($238))&65535);
      var $240=((($237))|0) > ((($239))|0);
      if ($240) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: // $241
      var $242=$pwide;
      var $243=HEAPU16[((_width)>>1)];
      var $244=((($243))&65535);
      var $245=((($242)-($244))|0);
      var $246=HEAPU16[((_height)>>1)];
      var $247=((($246))&65535);
      var $248=((($245)*($247))|0);
      var $249=HEAPU32[((_black)>>2)];
      var $250=Math.floor(((($249))>>>0)/((($248))>>>0));
      HEAP32[((_black)>>2)]=$250;
      __label__ = 41; break;
    case 41: // $251
      var $252=$zero;
      var $253=(((($252)<<2))|0);
      var $254=$pwide;
      var $255=HEAPU16[((_width)>>1)];
      var $256=((($255))&65535);
      var $257=((($254)-($256))|0);
      var $258=HEAPU16[((_height)>>1)];
      var $259=((($258))&65535);
      var $260=((($257)*($259))|0);
      var $261=((($253))|0) > ((($260))|0);
      if ($261) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: // $262
      HEAP32[((_black)>>2)]=0;
      __label__ = 43; break;
    case 43: // $263
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_packed_load_raw["X"]=1;

function _unpacked_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $row;
      var $col;
      var $bits;
      $bits=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$bits;
      var $3=((($2)+1)|0);
      $bits=$3;
      var $4=1 << ($3);
      var $5=HEAPU32[((_maximum)>>2)];
      var $6=((($4))>>>0) < ((($5))>>>0);
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $7
      __label__ = 1; break;
    case 3: // $8
      var $9=HEAP32[((_ifp)>>2)];
      var $10=HEAPU16[((_top_margin)>>1)];
      var $11=((($10))&65535);
      var $12=HEAPU16[((_raw_width)>>1)];
      var $13=((($12))&65535);
      var $14=((($11)*($13))|0);
      var $15=HEAPU16[((_left_margin)>>1)];
      var $16=((($15))&65535);
      var $17=((($14)+($16))|0);
      var $18=(((($17)<<1))|0);
      var $19=_fseek($9, $18, 1);
      var $20=HEAPU16[((_width)>>1)];
      var $21=((($20))&65535);
      var $22=_calloc($21, 2);
      var $23=$22;
      $pixel=$23;
      var $24=$pixel;
      var $25=$24;
      _merror($25, ((__str23)|0));
      $row=0;
      __label__ = 4; break;
    case 4: // $26
      var $27=$row;
      var $28=HEAPU16[((_height)>>1)];
      var $29=((($28))&65535);
      var $30=((($27))|0) < ((($29))|0);
      if ($30) { __label__ = 5; break; } else { __label__ = 13; break; }
    case 5: // $31
      var $32=$pixel;
      var $33=HEAPU16[((_width)>>1)];
      var $34=((($33))&65535);
      _read_shorts($32, $34);
      var $35=HEAP32[((_ifp)>>2)];
      var $36=HEAPU16[((_raw_width)>>1)];
      var $37=((($36))&65535);
      var $38=HEAPU16[((_width)>>1)];
      var $39=((($38))&65535);
      var $40=((($37)-($39))|0);
      var $41=(((($40)<<1))|0);
      var $42=_fseek($35, $41, 1);
      $col=0;
      __label__ = 6; break;
    case 6: // $43
      var $44=$col;
      var $45=HEAPU16[((_width)>>1)];
      var $46=((($45))&65535);
      var $47=((($44))|0) < ((($46))|0);
      if ($47) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: // $48
      var $49=$col;
      var $50=$pixel;
      var $51=(($50+($49<<1))|0);
      var $52=HEAPU16[(($51)>>1)];
      var $53=((($52))&65535);
      var $54=HEAP32[((_load_flags)>>2)];
      var $55=($53) >> ((($54))|0);
      var $56=((($55)) & 65535);
      var $57=$row;
      var $58=$col;
      var $59=_fc($57, $58);
      var $60=$row;
      var $61=HEAPU16[((_shrink)>>1)];
      var $62=((($61))&65535);
      var $63=($60) >> ((($62))|0);
      var $64=HEAPU16[((_iwidth)>>1)];
      var $65=((($64))&65535);
      var $66=((($63)*($65))|0);
      var $67=$col;
      var $68=HEAPU16[((_shrink)>>1)];
      var $69=((($68))&65535);
      var $70=($67) >> ((($69))|0);
      var $71=((($66)+($70))|0);
      var $72=HEAP32[((_image)>>2)];
      var $73=(($72+($71<<3))|0);
      var $74=(($73+($59<<1))|0);
      HEAP16[(($74)>>1)]=$56;
      var $75=((($56))&65535);
      var $76=$bits;
      var $77=($75) >> ((($76))|0);
      var $78=((($77))|0)!=0;
      if ($78) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $79
      _derror();
      __label__ = 9; break;
    case 9: // $80
      __label__ = 10; break;
    case 10: // $81
      var $82=$col;
      var $83=((($82)+1)|0);
      $col=$83;
      __label__ = 6; break;
    case 11: // $84
      __label__ = 12; break;
    case 12: // $85
      var $86=$row;
      var $87=((($86)+1)|0);
      $row=$87;
      __label__ = 4; break;
    case 13: // $88
      var $89=$pixel;
      var $90=$89;
      _free($90);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_unpacked_load_raw["X"]=1;

function _nokia_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $data;
      var $dp;
      var $pixel;
      var $pix;
      var $rev;
      var $dwide;
      var $row;
      var $c;
      var $1=HEAP16[((_order)>>1)];
      var $2=((($1) << 16) >> 16);
      var $3=((($2))|0)==18761;
      var $4=((($3))&1);
      var $5=((($4)*3)|0);
      $rev=$5;
      var $6=HEAPU16[((_raw_width)>>1)];
      var $7=((($6))&65535);
      var $8=((($7)*5)|0);
      var $9=((((($8))|0)/4)|0);
      $dwide=$9;
      var $10=$dwide;
      var $11=HEAPU16[((_raw_width)>>1)];
      var $12=((($11))&65535);
      var $13=(((($12)<<1))|0);
      var $14=((($10)+($13))|0);
      var $15=_malloc($14);
      $data=$15;
      var $16=$data;
      _merror($16, ((__str24)|0));
      var $17=$data;
      var $18=$dwide;
      var $19=(($17+$18)|0);
      var $20=$19;
      $pixel=$20;
      $row=0;
      __label__ = 1; break;
    case 1: // $21
      var $22=$row;
      var $23=HEAPU16[((_raw_height)>>1)];
      var $24=((($23))&65535);
      var $25=((($22))|0) < ((($24))|0);
      if ($25) { __label__ = 2; break; } else { __label__ = 29; break; }
    case 2: // $26
      var $27=$data;
      var $28=$dwide;
      var $29=(($27+$28)|0);
      var $30=$dwide;
      var $31=HEAP32[((_ifp)>>2)];
      var $32=_fread($29, 1, $30, $31);
      var $33=$dwide;
      var $34=((($32))>>>0) < ((($33))>>>0);
      if ($34) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $35
      _derror();
      __label__ = 4; break;
    case 4: // $36
      $c=0;
      __label__ = 5; break;
    case 5: // $37
      var $38=$c;
      var $39=$dwide;
      var $40=((($38))|0) < ((($39))|0);
      if ($40) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $41
      var $42=$dwide;
      var $43=$c;
      var $44=$rev;
      var $45=($43) ^ ($44);
      var $46=((($42)+($45))|0);
      var $47=$data;
      var $48=(($47+$46)|0);
      var $49=HEAP8[($48)];
      var $50=$c;
      var $51=$data;
      var $52=(($51+$50)|0);
      HEAP8[($52)]=$49;
      __label__ = 7; break;
    case 7: // $53
      var $54=$c;
      var $55=((($54)+1)|0);
      $c=$55;
      __label__ = 5; break;
    case 8: // $56
      var $57=$data;
      $dp=$57;
      var $58=$pixel;
      $pix=$58;
      __label__ = 9; break;
    case 9: // $59
      var $60=$pix;
      var $61=$pixel;
      var $62=HEAPU16[((_raw_width)>>1)];
      var $63=((($62))&65535);
      var $64=(($61+($63<<1))|0);
      var $65=((($60))>>>0) < ((($64))>>>0);
      if ($65) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: // $66
      $c=0;
      __label__ = 11; break;
    case 11: // $67
      var $68=$c;
      var $69=((($68))|0) < 4;
      if ($69) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $70
      var $71=$c;
      var $72=$dp;
      var $73=(($72+$71)|0);
      var $74=HEAPU8[($73)];
      var $75=((($74))&255);
      var $76=($75) << 2;
      var $77=$dp;
      var $78=(($77+4)|0);
      var $79=HEAPU8[($78)];
      var $80=((($79))&255);
      var $81=$c;
      var $82=($81) << 1;
      var $83=($80) >> ((($82))|0);
      var $84=($83) & 3;
      var $85=($76) | ($84);
      var $86=((($85)) & 65535);
      var $87=$c;
      var $88=$pix;
      var $89=(($88+($87<<1))|0);
      HEAP16[(($89)>>1)]=$86;
      __label__ = 13; break;
    case 13: // $90
      var $91=$c;
      var $92=((($91)+1)|0);
      $c=$92;
      __label__ = 11; break;
    case 14: // $93
      __label__ = 15; break;
    case 15: // $94
      var $95=$dp;
      var $96=(($95+5)|0);
      $dp=$96;
      var $97=$pix;
      var $98=(($97+8)|0);
      $pix=$98;
      __label__ = 9; break;
    case 16: // $99
      var $100=$row;
      var $101=HEAPU16[((_top_margin)>>1)];
      var $102=((($101))&65535);
      var $103=((($100))|0) < ((($102))|0);
      if ($103) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: // $104
      $c=0;
      __label__ = 18; break;
    case 18: // $105
      var $106=$c;
      var $107=HEAPU16[((_width)>>1)];
      var $108=((($107))&65535);
      var $109=((($106))|0) < ((($108))|0);
      if ($109) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: // $110
      var $111=$c;
      var $112=$pixel;
      var $113=(($112+($111<<1))|0);
      var $114=HEAPU16[(($113)>>1)];
      var $115=((($114))&65535);
      var $116=HEAP32[((_black)>>2)];
      var $117=((($116)+($115))|0);
      HEAP32[((_black)>>2)]=$117;
      __label__ = 20; break;
    case 20: // $118
      var $119=$c;
      var $120=((($119)+1)|0);
      $c=$120;
      __label__ = 18; break;
    case 21: // $121
      __label__ = 27; break;
    case 22: // $122
      $c=0;
      __label__ = 23; break;
    case 23: // $123
      var $124=$c;
      var $125=HEAPU16[((_width)>>1)];
      var $126=((($125))&65535);
      var $127=((($124))|0) < ((($126))|0);
      if ($127) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: // $128
      var $129=$c;
      var $130=$pixel;
      var $131=(($130+($129<<1))|0);
      var $132=HEAP16[(($131)>>1)];
      var $133=HEAPU32[((_filters)>>2)];
      var $134=$row;
      var $135=HEAPU16[((_top_margin)>>1)];
      var $136=((($135))&65535);
      var $137=((($134)-($136))|0);
      var $138=($137) << 1;
      var $139=($138) & 14;
      var $140=$c;
      var $141=($140) & 1;
      var $142=((($139)+($141))|0);
      var $143=($142) << 1;
      var $144=($133) >>> ((($143))>>>0);
      var $145=($144) & 3;
      var $146=$row;
      var $147=HEAPU16[((_top_margin)>>1)];
      var $148=((($147))&65535);
      var $149=((($146)-($148))|0);
      var $150=HEAPU16[((_shrink)>>1)];
      var $151=((($150))&65535);
      var $152=($149) >> ((($151))|0);
      var $153=HEAPU16[((_iwidth)>>1)];
      var $154=((($153))&65535);
      var $155=((($152)*($154))|0);
      var $156=$c;
      var $157=HEAPU16[((_shrink)>>1)];
      var $158=((($157))&65535);
      var $159=($156) >> ((($158))|0);
      var $160=((($155)+($159))|0);
      var $161=HEAP32[((_image)>>2)];
      var $162=(($161+($160<<3))|0);
      var $163=(($162+($145<<1))|0);
      HEAP16[(($163)>>1)]=$132;
      __label__ = 25; break;
    case 25: // $164
      var $165=$c;
      var $166=((($165)+1)|0);
      $c=$166;
      __label__ = 23; break;
    case 26: // $167
      __label__ = 27; break;
    case 27: // $168
      __label__ = 28; break;
    case 28: // $169
      var $170=$row;
      var $171=((($170)+1)|0);
      $row=$171;
      __label__ = 1; break;
    case 29: // $172
      var $173=$data;
      _free($173);
      var $174=HEAP16[((_top_margin)>>1)];
      var $175=((($174) << 16) >> 16)!=0;
      if ($175) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: // $176
      var $177=HEAPU16[((_top_margin)>>1)];
      var $178=((($177))&65535);
      var $179=HEAPU16[((_width)>>1)];
      var $180=((($179))&65535);
      var $181=((($178)*($180))|0);
      var $182=HEAPU32[((_black)>>2)];
      var $183=Math.floor(((($182))>>>0)/((($181))>>>0));
      HEAP32[((_black)>>2)]=$183;
      __label__ = 31; break;
    case 31: // $184
      HEAP32[((_maximum)>>2)]=1023;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_nokia_load_raw["X"]=1;

function _pana_bits($nbits) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $byte;
      $2=$nbits;
      var $3=$2;
      var $4=((($3))|0)!=0;
      if ($4) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $5
      HEAP32[((_pana_bits_vbits)>>2)]=0;
      $1=0;
      __label__ = 5; break;
    case 2: // $6
      var $7=HEAP32[((_pana_bits_vbits)>>2)];
      var $8=((($7))|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $9
      var $10=HEAP32[((_load_flags)>>2)];
      var $11=((((_pana_bits_buf)|0)+$10)|0);
      var $12=HEAP32[((_load_flags)>>2)];
      var $13=((16384-($12))|0);
      var $14=HEAP32[((_ifp)>>2)];
      var $15=_fread($11, 1, $13, $14);
      var $16=HEAP32[((_load_flags)>>2)];
      var $17=HEAP32[((_ifp)>>2)];
      var $18=_fread(((_pana_bits_buf)|0), 1, $16, $17);
      __label__ = 4; break;
    case 4: // $19
      var $20=HEAP32[((_pana_bits_vbits)>>2)];
      var $21=$2;
      var $22=((($20)-($21))|0);
      var $23=($22) & 131071;
      HEAP32[((_pana_bits_vbits)>>2)]=$23;
      var $24=HEAP32[((_pana_bits_vbits)>>2)];
      var $25=($24) >> 3;
      var $26=($25) ^ 16368;
      $byte=$26;
      var $27=$byte;
      var $28=((_pana_bits_buf+$27)|0);
      var $29=HEAPU8[($28)];
      var $30=((($29))&255);
      var $31=$byte;
      var $32=((($31)+1)|0);
      var $33=((_pana_bits_buf+$32)|0);
      var $34=HEAPU8[($33)];
      var $35=((($34))&255);
      var $36=($35) << 8;
      var $37=($30) | ($36);
      var $38=HEAP32[((_pana_bits_vbits)>>2)];
      var $39=($38) & 7;
      var $40=($37) >> ((($39))|0);
      var $41=$2;
      var $42=-1 << ($41);
      var $43=($42) ^ -1;
      var $44=($40) & ($43);
      $1=$44;
      __label__ = 5; break;
    case 5: // $45
      var $46=$1;
      ;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}
_pana_bits["X"]=1;

function _panasonic_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      var $i;
      var $j;
      var $sh;
      var $pred=__stackBase__;
      var $nonz=__stackBase__+8;
      $sh=0;
      var $1=_pana_bits(0);
      $row=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$row;
      var $4=HEAPU16[((_height)>>1)];
      var $5=((($4))&65535);
      var $6=((($3))|0) < ((($5))|0);
      if ($6) { __label__ = 2; break; } else { __label__ = 27; break; }
    case 2: // $7
      $col=0;
      __label__ = 3; break;
    case 3: // $8
      var $9=$col;
      var $10=HEAPU16[((_raw_width)>>1)];
      var $11=((($10))&65535);
      var $12=((($9))|0) < ((($11))|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: // $13
      var $14=$col;
      var $15=((($14))|0)%14;
      $i=$15;
      var $16=((($15))|0)==0;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $17
      var $18=(($nonz+4)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=(($nonz)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=(($pred+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=(($pred)|0);
      HEAP32[(($21)>>2)]=0;
      __label__ = 6; break;
    case 6: // $22
      var $23=$i;
      var $24=((($23))|0)%3;
      var $25=((($24))|0)==2;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $26
      var $27=_pana_bits(2);
      var $28=((3-($27))|0);
      var $29=4 >> ((($28))|0);
      $sh=$29;
      __label__ = 8; break;
    case 8: // $30
      var $31=$i;
      var $32=($31) & 1;
      var $33=(($nonz+($32<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34))|0)!=0;
      if ($35) { __label__ = 9; break; } else { __label__ = 15; break; }
    case 9: // $36
      var $37=_pana_bits(8);
      $j=$37;
      var $38=((($37))|0)!=0;
      if ($38) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: // $39
      var $40=$sh;
      var $41=128 << ($40);
      var $42=$i;
      var $43=($42) & 1;
      var $44=(($pred+($43<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-($41))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=((($46))|0) < 0;
      if ($47) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $48
      var $49=$sh;
      var $50=((($49))|0)==4;
      if ($50) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $51
      var $52=$sh;
      var $53=-1 << ($52);
      var $54=($53) ^ -1;
      var $55=$i;
      var $56=($55) & 1;
      var $57=(($pred+($56<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=($58) & ($54);
      HEAP32[(($57)>>2)]=$59;
      __label__ = 13; break;
    case 13: // $60
      var $61=$j;
      var $62=$sh;
      var $63=($61) << ($62);
      var $64=$i;
      var $65=($64) & 1;
      var $66=(($pred+($65<<2))|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)+($63))|0);
      HEAP32[(($66)>>2)]=$68;
      __label__ = 14; break;
    case 14: // $69
      __label__ = 19; break;
    case 15: // $70
      var $71=_pana_bits(8);
      var $72=$i;
      var $73=($72) & 1;
      var $74=(($nonz+($73<<2))|0);
      HEAP32[(($74)>>2)]=$71;
      var $75=((($71))|0)!=0;
      if ($75) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: // $76
      var $77=$i;
      var $78=((($77))|0) > 11;
      if ($78) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $79
      var $80=$i;
      var $81=($80) & 1;
      var $82=(($nonz+($81<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=($83) << 4;
      var $85=_pana_bits(4);
      var $86=($84) | ($85);
      var $87=$i;
      var $88=($87) & 1;
      var $89=(($pred+($88<<2))|0);
      HEAP32[(($89)>>2)]=$86;
      __label__ = 18; break;
    case 18: // $90
      __label__ = 19; break;
    case 19: // $91
      var $92=$col;
      var $93=HEAPU16[((_width)>>1)];
      var $94=((($93))&65535);
      var $95=((($92))|0) < ((($94))|0);
      if ($95) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: // $96
      var $97=$col;
      var $98=($97) & 1;
      var $99=(($pred+($98<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)) & 65535);
      var $102=HEAPU32[((_filters)>>2)];
      var $103=$row;
      var $104=($103) << 1;
      var $105=($104) & 14;
      var $106=$col;
      var $107=($106) & 1;
      var $108=((($105)+($107))|0);
      var $109=($108) << 1;
      var $110=($102) >>> ((($109))>>>0);
      var $111=($110) & 3;
      var $112=$row;
      var $113=HEAPU16[((_shrink)>>1)];
      var $114=((($113))&65535);
      var $115=($112) >> ((($114))|0);
      var $116=HEAPU16[((_iwidth)>>1)];
      var $117=((($116))&65535);
      var $118=((($115)*($117))|0);
      var $119=$col;
      var $120=HEAPU16[((_shrink)>>1)];
      var $121=((($120))&65535);
      var $122=($119) >> ((($121))|0);
      var $123=((($118)+($122))|0);
      var $124=HEAP32[((_image)>>2)];
      var $125=(($124+($123<<3))|0);
      var $126=(($125+($111<<1))|0);
      HEAP16[(($126)>>1)]=$101;
      var $127=((($101))&65535);
      var $128=((($127))|0) > 4098;
      if ($128) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $129
      _derror();
      __label__ = 22; break;
    case 22: // $130
      __label__ = 23; break;
    case 23: // $131
      __label__ = 24; break;
    case 24: // $132
      var $133=$col;
      var $134=((($133)+1)|0);
      $col=$134;
      __label__ = 3; break;
    case 25: // $135
      __label__ = 26; break;
    case 26: // $136
      var $137=$row;
      var $138=((($137)+1)|0);
      $row=$138;
      __label__ = 1; break;
    case 27: // $139
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_panasonic_load_raw["X"]=1;

function _olympus_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 8216; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $huff=__stackBase__;
      var $row;
      var $col;
      var $nbits;
      var $sign;
      var $low;
      var $high;
      var $i;
      var $c;
      var $w;
      var $n;
      var $nw;
      var $acarry=__stackBase__+8192;
      var $carry;
      var $pred;
      var $diff;
      $n=0;
      var $1=(($huff)|0);
      HEAP16[(($1)>>1)]=3084;
      $i=12;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=((($3)-1)|0);
      $i=$4;
      var $5=((($3))|0)!=0;
      if ($5) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: // $6
      $c=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$c;
      var $9=$i;
      var $10=2048 >> ((($9))|0);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $12
      var $13=$i;
      var $14=((($13)+1)|0);
      var $15=($14) << 8;
      var $16=$i;
      var $17=($15) | ($16);
      var $18=((($17)) & 65535);
      var $19=$n;
      var $20=((($19)+1)|0);
      $n=$20;
      var $21=(($huff+($20<<1))|0);
      HEAP16[(($21)>>1)]=$18;
      __label__ = 5; break;
    case 5: // $22
      var $23=$c;
      var $24=((($23)+1)|0);
      $c=$24;
      __label__ = 3; break;
    case 6: // $25
      __label__ = 1; break;
    case 7: // $26
      var $27=HEAP32[((_ifp)>>2)];
      var $28=_fseek($27, 7, 1);
      var $29=_getbithuff(-1, 0);
      $row=0;
      __label__ = 8; break;
    case 8: // $30
      var $31=$row;
      var $32=HEAPU16[((_height)>>1)];
      var $33=((($32))&65535);
      var $34=((($31))|0) < ((($33))|0);
      if ($34) { __label__ = 9; break; } else { __label__ = 51; break; }
    case 9: // $35
      var $36=(($acarry)|0);
      var $37=$36;
      _memset($37, 0, 24, 1);
      $col=0;
      __label__ = 10; break;
    case 10: // $38
      var $39=$col;
      var $40=HEAPU16[((_raw_width)>>1)];
      var $41=((($40))&65535);
      var $42=((($39))|0) < ((($41))|0);
      if ($42) { __label__ = 11; break; } else { __label__ = 49; break; }
    case 11: // $43
      var $44=$col;
      var $45=($44) & 1;
      var $46=(($acarry+$45*12)|0);
      var $47=(($46)|0);
      $carry=$47;
      var $48=$carry;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50))|0) < 3;
      var $52=((($51))&1);
      var $53=(((($52)<<1))|0);
      $i=$53;
      var $54=$i;
      var $55=((($54)+2)|0);
      $nbits=$55;
      __label__ = 12; break;
    case 12: // $56
      var $57=$carry;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)) & 65535);
      var $61=((($60))&65535);
      var $62=$nbits;
      var $63=$i;
      var $64=((($62)+($63))|0);
      var $65=($61) >> ((($64))|0);
      var $66=((($65))|0)!=0;
      if ($66) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $67
      __label__ = 14; break;
    case 14: // $68
      var $69=$nbits;
      var $70=((($69)+1)|0);
      $nbits=$70;
      __label__ = 12; break;
    case 15: // $71
      var $72=_getbithuff(3, 0);
      $sign=$72;
      var $73=($72) & 3;
      $low=$73;
      var $74=$sign;
      var $75=($74) << 29;
      var $76=($75) >> 31;
      $sign=$76;
      var $77=(($huff)|0);
      var $78=_getbithuff(12, $77);
      $high=$78;
      var $79=((($78))|0)==12;
      if ($79) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $80
      var $81=$nbits;
      var $82=((16-($81))|0);
      var $83=_getbithuff($82, 0);
      var $84=($83) >>> 1;
      $high=$84;
      __label__ = 17; break;
    case 17: // $85
      var $86=$high;
      var $87=$nbits;
      var $88=($86) << ($87);
      var $89=$nbits;
      var $90=_getbithuff($89, 0);
      var $91=($88) | ($90);
      var $92=$carry;
      var $93=(($92)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$carry;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$sign;
      var $98=($96) ^ ($97);
      var $99=$carry;
      var $100=(($99+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($98)+($101))|0);
      $diff=$102;
      var $103=$diff;
      var $104=((($103)*3)|0);
      var $105=$carry;
      var $106=(($105+4)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($104)+($107))|0);
      var $109=($108) >> 5;
      var $110=$carry;
      var $111=(($110+4)|0);
      HEAP32[(($111)>>2)]=$109;
      var $112=$carry;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=((($114))|0) > 16;
      if ($115) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $116
      var $123 = 0;__label__ = 20; break;
    case 19: // $117
      var $118=$carry;
      var $119=(($118+8)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)+1)|0);
      var $123 = $121;__label__ = 20; break;
    case 20: // $122
      var $123;
      var $124=$carry;
      var $125=(($124+8)|0);
      HEAP32[(($125)>>2)]=$123;
      var $126=$col;
      var $127=HEAPU16[((_width)>>1)];
      var $128=((($127))&65535);
      var $129=((($126))|0) >= ((($128))|0);
      if ($129) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $130
      __label__ = 48; break;
    case 22: // $131
      var $132=$row;
      var $133=((($132))|0) < 2;
      if ($133) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: // $134
      var $135=$col;
      var $136=((($135))|0) < 2;
      if ($136) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $137
      $pred=0;
      __label__ = 45; break;
    case 25: // $138
      var $139=$row;
      var $140=((($139))|0) < 2;
      if ($140) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $141
      var $142=HEAPU32[((_filters)>>2)];
      var $143=$row;
      var $144=($143) << 1;
      var $145=($144) & 14;
      var $146=$col;
      var $147=((($146)-2)|0);
      var $148=($147) & 1;
      var $149=((($145)+($148))|0);
      var $150=($149) << 1;
      var $151=($142) >>> ((($150))>>>0);
      var $152=($151) & 3;
      var $153=$row;
      var $154=HEAPU16[((_shrink)>>1)];
      var $155=((($154))&65535);
      var $156=($153) >> ((($155))|0);
      var $157=HEAPU16[((_iwidth)>>1)];
      var $158=((($157))&65535);
      var $159=((($156)*($158))|0);
      var $160=$col;
      var $161=((($160)-2)|0);
      var $162=HEAPU16[((_shrink)>>1)];
      var $163=((($162))&65535);
      var $164=($161) >> ((($163))|0);
      var $165=((($159)+($164))|0);
      var $166=HEAP32[((_image)>>2)];
      var $167=(($166+($165<<3))|0);
      var $168=(($167+($152<<1))|0);
      var $169=HEAPU16[(($168)>>1)];
      var $170=((($169))&65535);
      $pred=$170;
      __label__ = 44; break;
    case 27: // $171
      var $172=$col;
      var $173=((($172))|0) < 2;
      if ($173) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: // $174
      var $175=HEAPU32[((_filters)>>2)];
      var $176=$row;
      var $177=((($176)-2)|0);
      var $178=($177) << 1;
      var $179=($178) & 14;
      var $180=$col;
      var $181=($180) & 1;
      var $182=((($179)+($181))|0);
      var $183=($182) << 1;
      var $184=($175) >>> ((($183))>>>0);
      var $185=($184) & 3;
      var $186=$row;
      var $187=((($186)-2)|0);
      var $188=HEAPU16[((_shrink)>>1)];
      var $189=((($188))&65535);
      var $190=($187) >> ((($189))|0);
      var $191=HEAPU16[((_iwidth)>>1)];
      var $192=((($191))&65535);
      var $193=((($190)*($192))|0);
      var $194=$col;
      var $195=HEAPU16[((_shrink)>>1)];
      var $196=((($195))&65535);
      var $197=($194) >> ((($196))|0);
      var $198=((($193)+($197))|0);
      var $199=HEAP32[((_image)>>2)];
      var $200=(($199+($198<<3))|0);
      var $201=(($200+($185<<1))|0);
      var $202=HEAPU16[(($201)>>1)];
      var $203=((($202))&65535);
      $pred=$203;
      __label__ = 43; break;
    case 29: // $204
      var $205=HEAPU32[((_filters)>>2)];
      var $206=$row;
      var $207=($206) << 1;
      var $208=($207) & 14;
      var $209=$col;
      var $210=((($209)-2)|0);
      var $211=($210) & 1;
      var $212=((($208)+($211))|0);
      var $213=($212) << 1;
      var $214=($205) >>> ((($213))>>>0);
      var $215=($214) & 3;
      var $216=$row;
      var $217=HEAPU16[((_shrink)>>1)];
      var $218=((($217))&65535);
      var $219=($216) >> ((($218))|0);
      var $220=HEAPU16[((_iwidth)>>1)];
      var $221=((($220))&65535);
      var $222=((($219)*($221))|0);
      var $223=$col;
      var $224=((($223)-2)|0);
      var $225=HEAPU16[((_shrink)>>1)];
      var $226=((($225))&65535);
      var $227=($224) >> ((($226))|0);
      var $228=((($222)+($227))|0);
      var $229=HEAP32[((_image)>>2)];
      var $230=(($229+($228<<3))|0);
      var $231=(($230+($215<<1))|0);
      var $232=HEAPU16[(($231)>>1)];
      var $233=((($232))&65535);
      $w=$233;
      var $234=HEAPU32[((_filters)>>2)];
      var $235=$row;
      var $236=((($235)-2)|0);
      var $237=($236) << 1;
      var $238=($237) & 14;
      var $239=$col;
      var $240=($239) & 1;
      var $241=((($238)+($240))|0);
      var $242=($241) << 1;
      var $243=($234) >>> ((($242))>>>0);
      var $244=($243) & 3;
      var $245=$row;
      var $246=((($245)-2)|0);
      var $247=HEAPU16[((_shrink)>>1)];
      var $248=((($247))&65535);
      var $249=($246) >> ((($248))|0);
      var $250=HEAPU16[((_iwidth)>>1)];
      var $251=((($250))&65535);
      var $252=((($249)*($251))|0);
      var $253=$col;
      var $254=HEAPU16[((_shrink)>>1)];
      var $255=((($254))&65535);
      var $256=($253) >> ((($255))|0);
      var $257=((($252)+($256))|0);
      var $258=HEAP32[((_image)>>2)];
      var $259=(($258+($257<<3))|0);
      var $260=(($259+($244<<1))|0);
      var $261=HEAPU16[(($260)>>1)];
      var $262=((($261))&65535);
      $n=$262;
      var $263=HEAPU32[((_filters)>>2)];
      var $264=$row;
      var $265=((($264)-2)|0);
      var $266=($265) << 1;
      var $267=($266) & 14;
      var $268=$col;
      var $269=((($268)-2)|0);
      var $270=($269) & 1;
      var $271=((($267)+($270))|0);
      var $272=($271) << 1;
      var $273=($263) >>> ((($272))>>>0);
      var $274=($273) & 3;
      var $275=$row;
      var $276=((($275)-2)|0);
      var $277=HEAPU16[((_shrink)>>1)];
      var $278=((($277))&65535);
      var $279=($276) >> ((($278))|0);
      var $280=HEAPU16[((_iwidth)>>1)];
      var $281=((($280))&65535);
      var $282=((($279)*($281))|0);
      var $283=$col;
      var $284=((($283)-2)|0);
      var $285=HEAPU16[((_shrink)>>1)];
      var $286=((($285))&65535);
      var $287=($284) >> ((($286))|0);
      var $288=((($282)+($287))|0);
      var $289=HEAP32[((_image)>>2)];
      var $290=(($289+($288<<3))|0);
      var $291=(($290+($274<<1))|0);
      var $292=HEAPU16[(($291)>>1)];
      var $293=((($292))&65535);
      $nw=$293;
      var $294=$w;
      var $295=$nw;
      var $296=((($294))|0) < ((($295))|0);
      if ($296) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: // $297
      var $298=$nw;
      var $299=$n;
      var $300=((($298))|0) < ((($299))|0);
      if ($300) { __label__ = 33; break; } else { __label__ = 31; break; }
    case 31: // $301
      var $302=$n;
      var $303=$nw;
      var $304=((($302))|0) < ((($303))|0);
      if ($304) { __label__ = 32; break; } else { __label__ = 38; break; }
    case 32: // $305
      var $306=$nw;
      var $307=$w;
      var $308=((($306))|0) < ((($307))|0);
      if ($308) { __label__ = 33; break; } else { __label__ = 38; break; }
    case 33: // $309
      var $310=$w;
      var $311=$nw;
      var $312=((($310)-($311))|0);
      var $313=$w;
      var $314=$nw;
      var $315=((($313)-($314))|0);
      var $316=($315) >> 31;
      var $317=($312) ^ ($316);
      var $318=$w;
      var $319=$nw;
      var $320=((($318)-($319))|0);
      var $321=($320) >> 31;
      var $322=((($317)-($321))|0);
      var $323=((($322))|0) > 32;
      if ($323) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: // $324
      var $325=$n;
      var $326=$nw;
      var $327=((($325)-($326))|0);
      var $328=$n;
      var $329=$nw;
      var $330=((($328)-($329))|0);
      var $331=($330) >> 31;
      var $332=($327) ^ ($331);
      var $333=$n;
      var $334=$nw;
      var $335=((($333)-($334))|0);
      var $336=($335) >> 31;
      var $337=((($332)-($336))|0);
      var $338=((($337))|0) > 32;
      if ($338) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $339
      var $340=$w;
      var $341=$n;
      var $342=((($340)+($341))|0);
      var $343=$nw;
      var $344=((($342)-($343))|0);
      $pred=$344;
      __label__ = 37; break;
    case 36: // $345
      var $346=$w;
      var $347=$n;
      var $348=((($346)+($347))|0);
      var $349=($348) >> 1;
      $pred=$349;
      __label__ = 37; break;
    case 37: // $350
      __label__ = 42; break;
    case 38: // $351
      var $352=$w;
      var $353=$nw;
      var $354=((($352)-($353))|0);
      var $355=$w;
      var $356=$nw;
      var $357=((($355)-($356))|0);
      var $358=($357) >> 31;
      var $359=($354) ^ ($358);
      var $360=$w;
      var $361=$nw;
      var $362=((($360)-($361))|0);
      var $363=($362) >> 31;
      var $364=((($359)-($363))|0);
      var $365=$n;
      var $366=$nw;
      var $367=((($365)-($366))|0);
      var $368=$n;
      var $369=$nw;
      var $370=((($368)-($369))|0);
      var $371=($370) >> 31;
      var $372=($367) ^ ($371);
      var $373=$n;
      var $374=$nw;
      var $375=((($373)-($374))|0);
      var $376=($375) >> 31;
      var $377=((($372)-($376))|0);
      var $378=((($364))|0) > ((($377))|0);
      if ($378) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: // $379
      var $380=$w;
      var $384 = $380;__label__ = 41; break;
    case 40: // $381
      var $382=$n;
      var $384 = $382;__label__ = 41; break;
    case 41: // $383
      var $384;
      $pred=$384;
      __label__ = 42; break;
    case 42: // $385
      __label__ = 43; break;
    case 43: // $386
      __label__ = 44; break;
    case 44: // $387
      __label__ = 45; break;
    case 45: // $388
      var $389=$pred;
      var $390=$diff;
      var $391=($390) << 2;
      var $392=$low;
      var $393=($391) | ($392);
      var $394=((($389)+($393))|0);
      var $395=((($394)) & 65535);
      var $396=HEAPU32[((_filters)>>2)];
      var $397=$row;
      var $398=($397) << 1;
      var $399=($398) & 14;
      var $400=$col;
      var $401=($400) & 1;
      var $402=((($399)+($401))|0);
      var $403=($402) << 1;
      var $404=($396) >>> ((($403))>>>0);
      var $405=($404) & 3;
      var $406=$row;
      var $407=HEAPU16[((_shrink)>>1)];
      var $408=((($407))&65535);
      var $409=($406) >> ((($408))|0);
      var $410=HEAPU16[((_iwidth)>>1)];
      var $411=((($410))&65535);
      var $412=((($409)*($411))|0);
      var $413=$col;
      var $414=HEAPU16[((_shrink)>>1)];
      var $415=((($414))&65535);
      var $416=($413) >> ((($415))|0);
      var $417=((($412)+($416))|0);
      var $418=HEAP32[((_image)>>2)];
      var $419=(($418+($417<<3))|0);
      var $420=(($419+($405<<1))|0);
      HEAP16[(($420)>>1)]=$395;
      var $421=((($395))&65535);
      var $422=($421) >> 12;
      var $423=((($422))|0)!=0;
      if ($423) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: // $424
      _derror();
      __label__ = 47; break;
    case 47: // $425
      __label__ = 48; break;
    case 48: // $426
      var $427=$col;
      var $428=((($427)+1)|0);
      $col=$428;
      __label__ = 10; break;
    case 49: // $429
      __label__ = 50; break;
    case 50: // $430
      var $431=$row;
      var $432=((($431)+1)|0);
      $row=$432;
      __label__ = 8; break;
    case 51: // $433
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_olympus_load_raw["X"]=1;

function _minolta_rd175_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 768; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel=__stackBase__;
      var $irow;
      var $box;
      var $row;
      var $col;
      $irow=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$irow;
      var $3=((($2))>>>0) < 1481;
      if ($3) { __label__ = 2; break; } else { __label__ = 31; break; }
    case 2: // $4
      var $5=(($pixel)|0);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_fread($5, 1, 768, $6);
      var $8=((($7))>>>0) < 768;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $9
      _derror();
      __label__ = 4; break;
    case 4: // $10
      var $11=$irow;
      var $12=Math.floor(((($11))>>>0)/82);
      $box=$12;
      var $13=$irow;
      var $14=((($13))>>>0)%82;
      var $15=((($14)*12)|0);
      var $16=$box;
      var $17=((($16))>>>0) < 12;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $18
      var $19=$box;
      var $20=($19) | 1;
      var $26 = $20;__label__ = 7; break;
    case 6: // $21
      var $22=$box;
      var $23=((($22)-12)|0);
      var $24=(((($23)<<1))|0);
      var $26 = $24;__label__ = 7; break;
    case 7: // $25
      var $26;
      var $27=((($15)+($26))|0);
      $row=$27;
      var $28=$irow;
      if ($28 == 1477 || $28 == 1479) {
        __label__ = 8; break;
      }
      else if ($28 == 1476) {
        __label__ = 9; break;
      }
      else if ($28 == 1480) {
        __label__ = 10; break;
      }
      else if ($28 == 1478) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 8: // $29
      __label__ = 30; break;
    case 9: // $30
      $row=984;
      __label__ = 12; break;
    case 10: // $31
      $row=985;
      __label__ = 12; break;
    case 11: // $32
      $row=985;
      $box=1;
      __label__ = 12; break;
    case 12: // $33
      var $34=$box;
      var $35=((($34))>>>0) < 12;
      if ($35) { __label__ = 13; break; } else { __label__ = 24; break; }
    case 13: // $36
      var $37=$box;
      var $38=($37) & 1;
      var $39=((($38))|0)!=0;
      if ($39) { __label__ = 14; break; } else { __label__ = 24; break; }
    case 14: // $40
      $col=0;
      __label__ = 15; break;
    case 15: // $41
      var $42=$col;
      var $43=((($42))>>>0) < 1533;
      if ($43) { __label__ = 16; break; } else { __label__ = 23; break; }
    case 16: // $44
      var $45=$col;
      var $46=((($45))|0)!=1;
      if ($46) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: // $47
      var $48=$col;
      var $49=((($48)+1)|0);
      var $50=($49) & 2;
      var $51=((($50))|0)!=0;
      if ($51) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $52
      var $53=$col;
      var $54=Math.floor(((($53))>>>0)/2);
      var $55=((($54)-1)|0);
      var $56=(($pixel+$55)|0);
      var $57=HEAPU8[($56)];
      var $58=((($57))&255);
      var $59=$col;
      var $60=Math.floor(((($59))>>>0)/2);
      var $61=((($60)+1)|0);
      var $62=(($pixel+$61)|0);
      var $63=HEAPU8[($62)];
      var $64=((($63))&255);
      var $65=((($58)+($64))|0);
      var $74 = $65;__label__ = 20; break;
    case 19: // $66
      var $67=$col;
      var $68=Math.floor(((($67))>>>0)/2);
      var $69=(($pixel+$68)|0);
      var $70=HEAPU8[($69)];
      var $71=((($70))&255);
      var $72=($71) << 1;
      var $74 = $72;__label__ = 20; break;
    case 20: // $73
      var $74;
      var $75=((($74)) & 65535);
      var $76=HEAPU32[((_filters)>>2)];
      var $77=$row;
      var $78=($77) << 1;
      var $79=($78) & 14;
      var $80=$col;
      var $81=($80) & 1;
      var $82=((($79)+($81))|0);
      var $83=($82) << 1;
      var $84=($76) >>> ((($83))>>>0);
      var $85=($84) & 3;
      var $86=$row;
      var $87=HEAPU16[((_shrink)>>1)];
      var $88=((($87))&65535);
      var $89=($86) >>> ((($88))>>>0);
      var $90=HEAPU16[((_iwidth)>>1)];
      var $91=((($90))&65535);
      var $92=((($89)*($91))|0);
      var $93=$col;
      var $94=HEAPU16[((_shrink)>>1)];
      var $95=((($94))&65535);
      var $96=($93) >>> ((($95))>>>0);
      var $97=((($92)+($96))|0);
      var $98=HEAP32[((_image)>>2)];
      var $99=(($98+($97<<3))|0);
      var $100=(($99+($85<<1))|0);
      HEAP16[(($100)>>1)]=$75;
      __label__ = 21; break;
    case 21: // $101
      __label__ = 22; break;
    case 22: // $102
      var $103=$col;
      var $104=((($103)+1)|0);
      $col=$104;
      var $105=$row;
      var $106=($105) ^ 1;
      $row=$106;
      __label__ = 15; break;
    case 23: // $107
      var $108=(($pixel+1)|0);
      var $109=HEAPU8[($108)];
      var $110=((($109))&255);
      var $111=($110) << 1;
      var $112=((($111)) & 65535);
      var $113=HEAPU32[((_filters)>>2)];
      var $114=$row;
      var $115=($114) << 1;
      var $116=($115) & 14;
      var $117=((($116)+1)|0);
      var $118=($117) << 1;
      var $119=($113) >>> ((($118))>>>0);
      var $120=($119) & 3;
      var $121=$row;
      var $122=HEAPU16[((_shrink)>>1)];
      var $123=((($122))&65535);
      var $124=($121) >>> ((($123))>>>0);
      var $125=HEAPU16[((_iwidth)>>1)];
      var $126=((($125))&65535);
      var $127=((($124)*($126))|0);
      var $128=HEAPU16[((_shrink)>>1)];
      var $129=((($128))&65535);
      var $130=1 >> ((($129))|0);
      var $131=((($127)+($130))|0);
      var $132=HEAP32[((_image)>>2)];
      var $133=(($132+($131<<3))|0);
      var $134=(($133+($120<<1))|0);
      HEAP16[(($134)>>1)]=$112;
      var $135=(($pixel+765)|0);
      var $136=HEAPU8[($135)];
      var $137=((($136))&255);
      var $138=($137) << 1;
      var $139=((($138)) & 65535);
      var $140=HEAPU32[((_filters)>>2)];
      var $141=$row;
      var $142=($141) << 1;
      var $143=($142) & 14;
      var $144=((($143)+1)|0);
      var $145=($144) << 1;
      var $146=($140) >>> ((($145))>>>0);
      var $147=($146) & 3;
      var $148=$row;
      var $149=HEAPU16[((_shrink)>>1)];
      var $150=((($149))&65535);
      var $151=($148) >>> ((($150))>>>0);
      var $152=HEAPU16[((_iwidth)>>1)];
      var $153=((($152))&65535);
      var $154=((($151)*($153))|0);
      var $155=HEAPU16[((_shrink)>>1)];
      var $156=((($155))&65535);
      var $157=1533 >> ((($156))|0);
      var $158=((($154)+($157))|0);
      var $159=HEAP32[((_image)>>2)];
      var $160=(($159+($158<<3))|0);
      var $161=(($160+($147<<1))|0);
      HEAP16[(($161)>>1)]=$139;
      __label__ = 29; break;
    case 24: // $162
      var $163=$row;
      var $164=($163) & 1;
      $col=$164;
      __label__ = 25; break;
    case 25: // $165
      var $166=$col;
      var $167=((($166))>>>0) < 1534;
      if ($167) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: // $168
      var $169=$col;
      var $170=Math.floor(((($169))>>>0)/2);
      var $171=(($pixel+$170)|0);
      var $172=HEAPU8[($171)];
      var $173=((($172))&255);
      var $174=($173) << 1;
      var $175=((($174)) & 65535);
      var $176=HEAPU32[((_filters)>>2)];
      var $177=$row;
      var $178=($177) << 1;
      var $179=($178) & 14;
      var $180=$col;
      var $181=($180) & 1;
      var $182=((($179)+($181))|0);
      var $183=($182) << 1;
      var $184=($176) >>> ((($183))>>>0);
      var $185=($184) & 3;
      var $186=$row;
      var $187=HEAPU16[((_shrink)>>1)];
      var $188=((($187))&65535);
      var $189=($186) >>> ((($188))>>>0);
      var $190=HEAPU16[((_iwidth)>>1)];
      var $191=((($190))&65535);
      var $192=((($189)*($191))|0);
      var $193=$col;
      var $194=HEAPU16[((_shrink)>>1)];
      var $195=((($194))&65535);
      var $196=($193) >>> ((($195))>>>0);
      var $197=((($192)+($196))|0);
      var $198=HEAP32[((_image)>>2)];
      var $199=(($198+($197<<3))|0);
      var $200=(($199+($185<<1))|0);
      HEAP16[(($200)>>1)]=$175;
      __label__ = 27; break;
    case 27: // $201
      var $202=$col;
      var $203=((($202)+2)|0);
      $col=$203;
      __label__ = 25; break;
    case 28: // $204
      __label__ = 29; break;
    case 29: // $205
      __label__ = 30; break;
    case 30: // $206
      var $207=$irow;
      var $208=((($207)+1)|0);
      $irow=$208;
      __label__ = 1; break;
    case 31: // $209
      HEAP32[((_maximum)>>2)]=510;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_minolta_rd175_load_raw["X"]=1;

function _quicktake_100_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 311696; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel=__stackBase__;
      var $rb;
      var $row;
      var $col;
      var $sharp;
      var $val;
      $val=0;
      var $1=_getbithuff(-1, 0);
      var $2=(($pixel)|0);
      var $3=$2;
      _memset($3, -128, 311696, 1);
      $row=2;
      __label__ = 1; break;
    case 1: // $4
      var $5=$row;
      var $6=HEAPU16[((_height)>>1)];
      var $7=((($6))&65535);
      var $8=((($7)+2)|0);
      var $9=((($5))|0) < ((($8))|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 21; break; }
    case 2: // $10
      var $11=$row;
      var $12=($11) & 1;
      var $13=((($12)+2)|0);
      $col=$13;
      __label__ = 3; break;
    case 3: // $14
      var $15=$col;
      var $16=HEAPU16[((_width)>>1)];
      var $17=((($16))&65535);
      var $18=((($17)+2)|0);
      var $19=((($15))|0) < ((($18))|0);
      if ($19) { __label__ = 4; break; } else { __label__ = 19; break; }
    case 4: // $20
      var $21=$col;
      var $22=((($21)-1)|0);
      var $23=$row;
      var $24=((($23)-1)|0);
      var $25=(($pixel+$24*644)|0);
      var $26=(($25+$22)|0);
      var $27=HEAPU8[($26)];
      var $28=((($27))&255);
      var $29=$col;
      var $30=((($29)+1)|0);
      var $31=$row;
      var $32=((($31)-1)|0);
      var $33=(($pixel+$32*644)|0);
      var $34=(($33+$30)|0);
      var $35=HEAPU8[($34)];
      var $36=((($35))&255);
      var $37=(((($36)<<1))|0);
      var $38=((($28)+($37))|0);
      var $39=$col;
      var $40=((($39)-2)|0);
      var $41=$row;
      var $42=(($pixel+$41*644)|0);
      var $43=(($42+$40)|0);
      var $44=HEAPU8[($43)];
      var $45=((($44))&255);
      var $46=((($38)+($45))|0);
      var $47=($46) >> 2;
      var $48=_getbithuff(4, 0);
      var $49=((_quicktake_100_load_raw_gstep+($48<<1))|0);
      var $50=HEAP16[(($49)>>1)];
      var $51=((($50) << 16) >> 16);
      var $52=((($47)+($51))|0);
      $val=$52;
      var $53=$val;
      var $54=((($53))|0) < 255;
      if ($54) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $55
      var $56=$val;
      var $59 = $56;__label__ = 7; break;
    case 6: // $57
      var $59 = 255;__label__ = 7; break;
    case 7: // $58
      var $59;
      var $60=0 > ((($59))|0);
      if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $61
      var $71 = 0;__label__ = 13; break;
    case 9: // $62
      var $63=$val;
      var $64=((($63))|0) < 255;
      if ($64) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $65
      var $66=$val;
      var $69 = $66;__label__ = 12; break;
    case 11: // $67
      var $69 = 255;__label__ = 12; break;
    case 12: // $68
      var $69;
      var $71 = $69;__label__ = 13; break;
    case 13: // $70
      var $71;
      $val=$71;
      var $72=((($71)) & 255);
      var $73=$col;
      var $74=$row;
      var $75=(($pixel+$74*644)|0);
      var $76=(($75+$73)|0);
      HEAP8[($76)]=$72;
      var $77=$col;
      var $78=((($77))|0) < 4;
      if ($78) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $79
      var $80=$val;
      var $81=((($80)) & 255);
      var $82=$row;
      var $83=($82) ^ -1;
      var $84=($83) & 1;
      var $85=$row;
      var $86=((($85)+1)|0);
      var $87=(($pixel+$86*644)|0);
      var $88=(($87+$84)|0);
      HEAP8[($88)]=$81;
      var $89=$col;
      var $90=((($89)-2)|0);
      var $91=$row;
      var $92=(($pixel+$91*644)|0);
      var $93=(($92+$90)|0);
      HEAP8[($93)]=$81;
      __label__ = 15; break;
    case 15: // $94
      var $95=$row;
      var $96=((($95))|0)==2;
      if ($96) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $97
      var $98=$val;
      var $99=((($98)) & 255);
      var $100=$col;
      var $101=((($100)+3)|0);
      var $102=$row;
      var $103=((($102)-1)|0);
      var $104=(($pixel+$103*644)|0);
      var $105=(($104+$101)|0);
      HEAP8[($105)]=$99;
      var $106=$col;
      var $107=((($106)+1)|0);
      var $108=$row;
      var $109=((($108)-1)|0);
      var $110=(($pixel+$109*644)|0);
      var $111=(($110+$107)|0);
      HEAP8[($111)]=$99;
      __label__ = 17; break;
    case 17: // $112
      __label__ = 18; break;
    case 18: // $113
      var $114=$col;
      var $115=((($114)+2)|0);
      $col=$115;
      __label__ = 3; break;
    case 19: // $116
      var $117=$val;
      var $118=((($117)) & 255);
      var $119=$col;
      var $120=$row;
      var $121=(($pixel+$120*644)|0);
      var $122=(($121+$119)|0);
      HEAP8[($122)]=$118;
      __label__ = 20; break;
    case 20: // $123
      var $124=$row;
      var $125=((($124)+1)|0);
      $row=$125;
      __label__ = 1; break;
    case 21: // $126
      $rb=0;
      __label__ = 22; break;
    case 22: // $127
      var $128=$rb;
      var $129=((($128))|0) < 2;
      if ($129) { __label__ = 23; break; } else { __label__ = 62; break; }
    case 23: // $130
      var $131=$rb;
      var $132=((($131)+2)|0);
      $row=$132;
      __label__ = 24; break;
    case 24: // $133
      var $134=$row;
      var $135=HEAPU16[((_height)>>1)];
      var $136=((($135))&65535);
      var $137=((($136)+2)|0);
      var $138=((($134))|0) < ((($137))|0);
      if ($138) { __label__ = 25; break; } else { __label__ = 60; break; }
    case 25: // $139
      var $140=$row;
      var $141=($140) & 1;
      var $142=((3-($141))|0);
      $col=$142;
      __label__ = 26; break;
    case 26: // $143
      var $144=$col;
      var $145=HEAPU16[((_width)>>1)];
      var $146=((($145))&65535);
      var $147=((($146)+2)|0);
      var $148=((($144))|0) < ((($147))|0);
      if ($148) { __label__ = 27; break; } else { __label__ = 58; break; }
    case 27: // $149
      var $150=$row;
      var $151=((($150))|0) < 4;
      if ($151) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: // $152
      var $153=$col;
      var $154=((($153))|0) < 4;
      if ($154) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $155
      $sharp=2;
      __label__ = 43; break;
    case 30: // $156
      var $157=$col;
      var $158=$row;
      var $159=((($158)-2)|0);
      var $160=(($pixel+$159*644)|0);
      var $161=(($160+$157)|0);
      var $162=HEAPU8[($161)];
      var $163=((($162))&255);
      var $164=$col;
      var $165=((($164)-2)|0);
      var $166=$row;
      var $167=(($pixel+$166*644)|0);
      var $168=(($167+$165)|0);
      var $169=HEAPU8[($168)];
      var $170=((($169))&255);
      var $171=((($163)-($170))|0);
      var $172=$col;
      var $173=$row;
      var $174=((($173)-2)|0);
      var $175=(($pixel+$174*644)|0);
      var $176=(($175+$172)|0);
      var $177=HEAPU8[($176)];
      var $178=((($177))&255);
      var $179=$col;
      var $180=((($179)-2)|0);
      var $181=$row;
      var $182=(($pixel+$181*644)|0);
      var $183=(($182+$180)|0);
      var $184=HEAPU8[($183)];
      var $185=((($184))&255);
      var $186=((($178)-($185))|0);
      var $187=($186) >> 31;
      var $188=($171) ^ ($187);
      var $189=$col;
      var $190=$row;
      var $191=((($190)-2)|0);
      var $192=(($pixel+$191*644)|0);
      var $193=(($192+$189)|0);
      var $194=HEAPU8[($193)];
      var $195=((($194))&255);
      var $196=$col;
      var $197=((($196)-2)|0);
      var $198=$row;
      var $199=(($pixel+$198*644)|0);
      var $200=(($199+$197)|0);
      var $201=HEAPU8[($200)];
      var $202=((($201))&255);
      var $203=((($195)-($202))|0);
      var $204=($203) >> 31;
      var $205=((($188)-($204))|0);
      var $206=$col;
      var $207=$row;
      var $208=((($207)-2)|0);
      var $209=(($pixel+$208*644)|0);
      var $210=(($209+$206)|0);
      var $211=HEAPU8[($210)];
      var $212=((($211))&255);
      var $213=$col;
      var $214=((($213)-2)|0);
      var $215=$row;
      var $216=((($215)-2)|0);
      var $217=(($pixel+$216*644)|0);
      var $218=(($217+$214)|0);
      var $219=HEAPU8[($218)];
      var $220=((($219))&255);
      var $221=((($212)-($220))|0);
      var $222=$col;
      var $223=$row;
      var $224=((($223)-2)|0);
      var $225=(($pixel+$224*644)|0);
      var $226=(($225+$222)|0);
      var $227=HEAPU8[($226)];
      var $228=((($227))&255);
      var $229=$col;
      var $230=((($229)-2)|0);
      var $231=$row;
      var $232=((($231)-2)|0);
      var $233=(($pixel+$232*644)|0);
      var $234=(($233+$230)|0);
      var $235=HEAPU8[($234)];
      var $236=((($235))&255);
      var $237=((($228)-($236))|0);
      var $238=($237) >> 31;
      var $239=($221) ^ ($238);
      var $240=$col;
      var $241=$row;
      var $242=((($241)-2)|0);
      var $243=(($pixel+$242*644)|0);
      var $244=(($243+$240)|0);
      var $245=HEAPU8[($244)];
      var $246=((($245))&255);
      var $247=$col;
      var $248=((($247)-2)|0);
      var $249=$row;
      var $250=((($249)-2)|0);
      var $251=(($pixel+$250*644)|0);
      var $252=(($251+$248)|0);
      var $253=HEAPU8[($252)];
      var $254=((($253))&255);
      var $255=((($246)-($254))|0);
      var $256=($255) >> 31;
      var $257=((($239)-($256))|0);
      var $258=((($205)+($257))|0);
      var $259=$col;
      var $260=((($259)-2)|0);
      var $261=$row;
      var $262=(($pixel+$261*644)|0);
      var $263=(($262+$260)|0);
      var $264=HEAPU8[($263)];
      var $265=((($264))&255);
      var $266=$col;
      var $267=((($266)-2)|0);
      var $268=$row;
      var $269=((($268)-2)|0);
      var $270=(($pixel+$269*644)|0);
      var $271=(($270+$267)|0);
      var $272=HEAPU8[($271)];
      var $273=((($272))&255);
      var $274=((($265)-($273))|0);
      var $275=$col;
      var $276=((($275)-2)|0);
      var $277=$row;
      var $278=(($pixel+$277*644)|0);
      var $279=(($278+$276)|0);
      var $280=HEAPU8[($279)];
      var $281=((($280))&255);
      var $282=$col;
      var $283=((($282)-2)|0);
      var $284=$row;
      var $285=((($284)-2)|0);
      var $286=(($pixel+$285*644)|0);
      var $287=(($286+$283)|0);
      var $288=HEAPU8[($287)];
      var $289=((($288))&255);
      var $290=((($281)-($289))|0);
      var $291=($290) >> 31;
      var $292=($274) ^ ($291);
      var $293=$col;
      var $294=((($293)-2)|0);
      var $295=$row;
      var $296=(($pixel+$295*644)|0);
      var $297=(($296+$294)|0);
      var $298=HEAPU8[($297)];
      var $299=((($298))&255);
      var $300=$col;
      var $301=((($300)-2)|0);
      var $302=$row;
      var $303=((($302)-2)|0);
      var $304=(($pixel+$303*644)|0);
      var $305=(($304+$301)|0);
      var $306=HEAPU8[($305)];
      var $307=((($306))&255);
      var $308=((($299)-($307))|0);
      var $309=($308) >> 31;
      var $310=((($292)-($309))|0);
      var $311=((($258)+($310))|0);
      $val=$311;
      var $312=$val;
      var $313=((($312))|0) < 4;
      if ($313) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $314
      var $338 = 0;__label__ = 42; break;
    case 32: // $315
      var $316=$val;
      var $317=((($316))|0) < 8;
      if ($317) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $318
      var $336 = 1;__label__ = 41; break;
    case 34: // $319
      var $320=$val;
      var $321=((($320))|0) < 16;
      if ($321) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $322
      var $334 = 2;__label__ = 40; break;
    case 36: // $323
      var $324=$val;
      var $325=((($324))|0) < 32;
      if ($325) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $326
      var $332 = 3;__label__ = 39; break;
    case 38: // $327
      var $328=$val;
      var $329=((($328))|0) < 48;
      var $330=($329) ? 4 : 5;
      var $332 = $330;__label__ = 39; break;
    case 39: // $331
      var $332;
      var $334 = $332;__label__ = 40; break;
    case 40: // $333
      var $334;
      var $336 = $334;__label__ = 41; break;
    case 41: // $335
      var $336;
      var $338 = $336;__label__ = 42; break;
    case 42: // $337
      var $338;
      $sharp=$338;
      __label__ = 43; break;
    case 43: // $339
      var $340=$col;
      var $341=$row;
      var $342=((($341)-2)|0);
      var $343=(($pixel+$342*644)|0);
      var $344=(($343+$340)|0);
      var $345=HEAPU8[($344)];
      var $346=((($345))&255);
      var $347=$col;
      var $348=((($347)-2)|0);
      var $349=$row;
      var $350=(($pixel+$349*644)|0);
      var $351=(($350+$348)|0);
      var $352=HEAPU8[($351)];
      var $353=((($352))&255);
      var $354=((($346)+($353))|0);
      var $355=($354) >> 1;
      var $356=_getbithuff(2, 0);
      var $357=$sharp;
      var $358=((_quicktake_100_load_raw_rstep+($357<<3))|0);
      var $359=(($358+($356<<1))|0);
      var $360=HEAP16[(($359)>>1)];
      var $361=((($360) << 16) >> 16);
      var $362=((($355)+($361))|0);
      $val=$362;
      var $363=$val;
      var $364=((($363))|0) < 255;
      if ($364) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: // $365
      var $366=$val;
      var $369 = $366;__label__ = 46; break;
    case 45: // $367
      var $369 = 255;__label__ = 46; break;
    case 46: // $368
      var $369;
      var $370=0 > ((($369))|0);
      if ($370) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: // $371
      var $381 = 0;__label__ = 52; break;
    case 48: // $372
      var $373=$val;
      var $374=((($373))|0) < 255;
      if ($374) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: // $375
      var $376=$val;
      var $379 = $376;__label__ = 51; break;
    case 50: // $377
      var $379 = 255;__label__ = 51; break;
    case 51: // $378
      var $379;
      var $381 = $379;__label__ = 52; break;
    case 52: // $380
      var $381;
      $val=$381;
      var $382=((($381)) & 255);
      var $383=$col;
      var $384=$row;
      var $385=(($pixel+$384*644)|0);
      var $386=(($385+$383)|0);
      HEAP8[($386)]=$382;
      var $387=$row;
      var $388=((($387))|0) < 4;
      if ($388) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: // $389
      var $390=$val;
      var $391=((($390)) & 255);
      var $392=$col;
      var $393=((($392)+2)|0);
      var $394=$row;
      var $395=((($394)-2)|0);
      var $396=(($pixel+$395*644)|0);
      var $397=(($396+$393)|0);
      HEAP8[($397)]=$391;
      __label__ = 54; break;
    case 54: // $398
      var $399=$col;
      var $400=((($399))|0) < 4;
      if ($400) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: // $401
      var $402=$val;
      var $403=((($402)) & 255);
      var $404=$col;
      var $405=((($404)-2)|0);
      var $406=$row;
      var $407=((($406)+2)|0);
      var $408=(($pixel+$407*644)|0);
      var $409=(($408+$405)|0);
      HEAP8[($409)]=$403;
      __label__ = 56; break;
    case 56: // $410
      __label__ = 57; break;
    case 57: // $411
      var $412=$col;
      var $413=((($412)+2)|0);
      $col=$413;
      __label__ = 26; break;
    case 58: // $414
      __label__ = 59; break;
    case 59: // $415
      var $416=$row;
      var $417=((($416)+2)|0);
      $row=$417;
      __label__ = 24; break;
    case 60: // $418
      __label__ = 61; break;
    case 61: // $419
      var $420=$rb;
      var $421=((($420)+1)|0);
      $rb=$421;
      __label__ = 22; break;
    case 62: // $422
      $row=2;
      __label__ = 63; break;
    case 63: // $423
      var $424=$row;
      var $425=HEAPU16[((_height)>>1)];
      var $426=((($425))&65535);
      var $427=((($426)+2)|0);
      var $428=((($424))|0) < ((($427))|0);
      if ($428) { __label__ = 64; break; } else { __label__ = 79; break; }
    case 64: // $429
      var $430=$row;
      var $431=($430) & 1;
      var $432=((3-($431))|0);
      $col=$432;
      __label__ = 65; break;
    case 65: // $433
      var $434=$col;
      var $435=HEAPU16[((_width)>>1)];
      var $436=((($435))&65535);
      var $437=((($436)+2)|0);
      var $438=((($434))|0) < ((($437))|0);
      if ($438) { __label__ = 66; break; } else { __label__ = 77; break; }
    case 66: // $439
      var $440=$col;
      var $441=((($440)-1)|0);
      var $442=$row;
      var $443=(($pixel+$442*644)|0);
      var $444=(($443+$441)|0);
      var $445=HEAPU8[($444)];
      var $446=((($445))&255);
      var $447=$col;
      var $448=$row;
      var $449=(($pixel+$448*644)|0);
      var $450=(($449+$447)|0);
      var $451=HEAPU8[($450)];
      var $452=((($451))&255);
      var $453=($452) << 2;
      var $454=((($446)+($453))|0);
      var $455=$col;
      var $456=((($455)+1)|0);
      var $457=$row;
      var $458=(($pixel+$457*644)|0);
      var $459=(($458+$456)|0);
      var $460=HEAPU8[($459)];
      var $461=((($460))&255);
      var $462=((($454)+($461))|0);
      var $463=($462) >> 1;
      var $464=((($463)-256)|0);
      $val=$464;
      var $465=$val;
      var $466=((($465))|0) < 255;
      if ($466) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: // $467
      var $468=$val;
      var $471 = $468;__label__ = 69; break;
    case 68: // $469
      var $471 = 255;__label__ = 69; break;
    case 69: // $470
      var $471;
      var $472=0 > ((($471))|0);
      if ($472) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: // $473
      var $483 = 0;__label__ = 75; break;
    case 71: // $474
      var $475=$val;
      var $476=((($475))|0) < 255;
      if ($476) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: // $477
      var $478=$val;
      var $481 = $478;__label__ = 74; break;
    case 73: // $479
      var $481 = 255;__label__ = 74; break;
    case 74: // $480
      var $481;
      var $483 = $481;__label__ = 75; break;
    case 75: // $482
      var $483;
      var $484=((($483)) & 255);
      var $485=$col;
      var $486=$row;
      var $487=(($pixel+$486*644)|0);
      var $488=(($487+$485)|0);
      HEAP8[($488)]=$484;
      __label__ = 76; break;
    case 76: // $489
      var $490=$col;
      var $491=((($490)+2)|0);
      $col=$491;
      __label__ = 65; break;
    case 77: // $492
      __label__ = 78; break;
    case 78: // $493
      var $494=$row;
      var $495=((($494)+1)|0);
      $row=$495;
      __label__ = 63; break;
    case 79: // $496
      $row=0;
      __label__ = 80; break;
    case 80: // $497
      var $498=$row;
      var $499=HEAPU16[((_height)>>1)];
      var $500=((($499))&65535);
      var $501=((($498))|0) < ((($500))|0);
      if ($501) { __label__ = 81; break; } else { __label__ = 87; break; }
    case 81: // $502
      $col=0;
      __label__ = 82; break;
    case 82: // $503
      var $504=$col;
      var $505=HEAPU16[((_width)>>1)];
      var $506=((($505))&65535);
      var $507=((($504))|0) < ((($506))|0);
      if ($507) { __label__ = 83; break; } else { __label__ = 85; break; }
    case 83: // $508
      var $509=$col;
      var $510=((($509)+2)|0);
      var $511=$row;
      var $512=((($511)+2)|0);
      var $513=(($pixel+$512*644)|0);
      var $514=(($513+$510)|0);
      var $515=HEAPU8[($514)];
      var $516=((($515))&255);
      var $517=((_quicktake_100_load_raw_curve+($516<<1))|0);
      var $518=HEAP16[(($517)>>1)];
      var $519=HEAPU32[((_filters)>>2)];
      var $520=$row;
      var $521=($520) << 1;
      var $522=($521) & 14;
      var $523=$col;
      var $524=($523) & 1;
      var $525=((($522)+($524))|0);
      var $526=($525) << 1;
      var $527=($519) >>> ((($526))>>>0);
      var $528=($527) & 3;
      var $529=$row;
      var $530=HEAPU16[((_shrink)>>1)];
      var $531=((($530))&65535);
      var $532=($529) >> ((($531))|0);
      var $533=HEAPU16[((_iwidth)>>1)];
      var $534=((($533))&65535);
      var $535=((($532)*($534))|0);
      var $536=$col;
      var $537=HEAPU16[((_shrink)>>1)];
      var $538=((($537))&65535);
      var $539=($536) >> ((($538))|0);
      var $540=((($535)+($539))|0);
      var $541=HEAP32[((_image)>>2)];
      var $542=(($541+($540<<3))|0);
      var $543=(($542+($528<<1))|0);
      HEAP16[(($543)>>1)]=$518;
      __label__ = 84; break;
    case 84: // $544
      var $545=$col;
      var $546=((($545)+1)|0);
      $col=$546;
      __label__ = 82; break;
    case 85: // $547
      __label__ = 86; break;
    case 86: // $548
      var $549=$row;
      var $550=((($549)+1)|0);
      $row=$550;
      __label__ = 80; break;
    case 87: // $551
      HEAP32[((_maximum)>>2)]=1023;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_quicktake_100_load_raw["X"]=1;

function _kodak_radc_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 16692; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $huff=__stackBase__;
      var $row;
      var $col;
      var $tree;
      var $nreps;
      var $rep;
      var $step;
      var $i;
      var $c;
      var $s;
      var $r;
      var $x;
      var $y;
      var $val;
      var $last=__stackBase__+9728;
      var $mul=__stackBase__+9736;
      var $buf=__stackBase__+9744;
      var $1=$last;
      assert(6 % 1 === 0, 'memcpy given ' + 6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($1)>>1)]=HEAP16[(((_kodak_radc_load_raw_last))>>1)]; HEAP16[(($1+2)>>1)]=HEAP16[(((_kodak_radc_load_raw_last)+2)>>1)]; HEAP16[(($1+4)>>1)]=HEAP16[(((_kodak_radc_load_raw_last)+4)>>1)];
      $i=2;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=((($3))|0) < 12;
      if ($4) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $5
      var $6=$i;
      var $7=((($6)-2)|0);
      var $8=((_kodak_radc_load_raw_pt+($7<<1))|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=((($9))&65535);
      $c=$10;
      __label__ = 3; break;
    case 3: // $11
      var $12=$c;
      var $13=$i;
      var $14=((_kodak_radc_load_raw_pt+($13<<1))|0);
      var $15=HEAPU16[(($14)>>1)];
      var $16=((($15))&65535);
      var $17=((($12))|0) <= ((($16))|0);
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $18
      var $19=$c;
      var $20=$i;
      var $21=((($20)-2)|0);
      var $22=((_kodak_radc_load_raw_pt+($21<<1))|0);
      var $23=HEAPU16[(($22)>>1)];
      var $24=((($23))&65535);
      var $25=((($19)-($24))|0);
      var $26=((($25))|0);
      var $27=$i;
      var $28=((_kodak_radc_load_raw_pt+($27<<1))|0);
      var $29=HEAPU16[(($28)>>1)];
      var $30=((($29))&65535);
      var $31=$i;
      var $32=((($31)-2)|0);
      var $33=((_kodak_radc_load_raw_pt+($32<<1))|0);
      var $34=HEAPU16[(($33)>>1)];
      var $35=((($34))&65535);
      var $36=((($30)-($35))|0);
      var $37=((($36))|0);
      var $38=($26)/($37);
      var $39=$i;
      var $40=((($39)+1)|0);
      var $41=((_kodak_radc_load_raw_pt+($40<<1))|0);
      var $42=HEAPU16[(($41)>>1)];
      var $43=((($42))&65535);
      var $44=$i;
      var $45=((($44)-1)|0);
      var $46=((_kodak_radc_load_raw_pt+($45<<1))|0);
      var $47=HEAPU16[(($46)>>1)];
      var $48=((($47))&65535);
      var $49=((($43)-($48))|0);
      var $50=((($49))|0);
      var $51=($38)*($50);
      var $52=$i;
      var $53=((($52)-1)|0);
      var $54=((_kodak_radc_load_raw_pt+($53<<1))|0);
      var $55=HEAPU16[(($54)>>1)];
      var $56=((($55))&65535);
      var $57=((($56))|0);
      var $58=($51)+($57);
      var $59=($58);
      var $60=($59)+0.5;
      var $61=(($60) >= 0 ? Math.floor(($60)) : Math.ceil(($60)));
      var $62=$c;
      var $63=((_curve+($62<<1))|0);
      HEAP16[(($63)>>1)]=$61;
      __label__ = 5; break;
    case 5: // $64
      var $65=$c;
      var $66=((($65)+1)|0);
      $c=$66;
      __label__ = 3; break;
    case 6: // $67
      __label__ = 7; break;
    case 7: // $68
      var $69=$i;
      var $70=((($69)+2)|0);
      $i=$70;
      __label__ = 1; break;
    case 8: // $71
      $i=0;
      $s=0;
      __label__ = 9; break;
    case 9: // $72
      var $73=$i;
      var $74=((($73))>>>0) < 260;
      if ($74) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: // $75
      $c=0;
      __label__ = 11; break;
    case 11: // $76
      var $77=$c;
      var $78=$i;
      var $79=((_kodak_radc_load_raw_src+$78)|0);
      var $80=HEAP8[($79)];
      var $81=((($80) << 24) >> 24);
      var $82=256 >> ((($81))|0);
      var $83=((($77))|0) < ((($82))|0);
      if ($83) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $84
      var $85=$i;
      var $86=((_kodak_radc_load_raw_src+$85)|0);
      var $87=HEAP8[($86)];
      var $88=((($87) << 24) >> 24);
      var $89=($88) << 8;
      var $90=$i;
      var $91=((($90)+1)|0);
      var $92=((_kodak_radc_load_raw_src+$91)|0);
      var $93=HEAPU8[($92)];
      var $94=((($93))&255);
      var $95=($89) | ($94);
      var $96=((($95)) & 65535);
      var $97=$s;
      var $98=((($97)+1)|0);
      $s=$98;
      var $99=(($huff)|0);
      var $100=(($99+($97<<1))|0);
      HEAP16[(($100)>>1)]=$96;
      __label__ = 13; break;
    case 13: // $101
      var $102=$c;
      var $103=((($102)+1)|0);
      $c=$103;
      __label__ = 11; break;
    case 14: // $104
      __label__ = 15; break;
    case 15: // $105
      var $106=$i;
      var $107=((($106)+2)|0);
      $i=$107;
      __label__ = 9; break;
    case 16: // $108
      var $109=HEAP32[((_kodak_cbpp)>>2)];
      var $110=((($109))|0)==243;
      var $111=($110) ? 2 : 3;
      $s=$111;
      $c=0;
      __label__ = 17; break;
    case 17: // $112
      var $113=$c;
      var $114=((($113))|0) < 256;
      if ($114) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $115
      var $116=$s;
      var $117=((8-($116))|0);
      var $118=($117) << 8;
      var $119=$c;
      var $120=$s;
      var $121=($119) >> ((($120))|0);
      var $122=$s;
      var $123=($121) << ($122);
      var $124=($118) | ($123);
      var $125=$s;
      var $126=((($125)-1)|0);
      var $127=1 << ($126);
      var $128=($124) | ($127);
      var $129=((($128)) & 65535);
      var $130=$c;
      var $131=(($huff+9216)|0);
      var $132=(($131+($130<<1))|0);
      HEAP16[(($132)>>1)]=$129;
      __label__ = 19; break;
    case 19: // $133
      var $134=$c;
      var $135=((($134)+1)|0);
      $c=$135;
      __label__ = 17; break;
    case 20: // $136
      var $137=_getbithuff(-1, 0);
      $i=0;
      __label__ = 21; break;
    case 21: // $138
      var $139=$i;
      var $140=((($139))>>>0) < 3474;
      if ($140) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $141
      var $142=$i;
      var $143=(($buf)|0);
      var $144=(($143)|0);
      var $145=(($144+($142<<1))|0);
      HEAP16[(($145)>>1)]=2048;
      __label__ = 23; break;
    case 23: // $146
      var $147=$i;
      var $148=((($147)+1)|0);
      $i=$148;
      __label__ = 21; break;
    case 24: // $149
      $row=0;
      __label__ = 25; break;
    case 25: // $150
      var $151=$row;
      var $152=HEAPU16[((_height)>>1)];
      var $153=((($152))&65535);
      var $154=((($151))|0) < ((($153))|0);
      if ($154) { __label__ = 26; break; } else { __label__ = 137; break; }
    case 26: // $155
      $c=0;
      __label__ = 27; break;
    case 27: // $156
      var $157=$c;
      var $158=((($157))|0) < 3;
      if ($158) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $159
      var $160=_getbithuff(6, 0);
      var $161=((($160)) & 65535);
      var $162=$c;
      var $163=(($mul+($162<<1))|0);
      HEAP16[(($163)>>1)]=$161;
      __label__ = 29; break;
    case 29: // $164
      var $165=$c;
      var $166=((($165)+1)|0);
      $c=$166;
      __label__ = 27; break;
    case 30: // $167
      $c=0;
      __label__ = 31; break;
    case 31: // $168
      var $169=$c;
      var $170=((($169))|0) < 3;
      if ($170) { __label__ = 32; break; } else { __label__ = 117; break; }
    case 32: // $171
      var $172=$c;
      var $173=(($last+($172<<1))|0);
      var $174=HEAP16[(($173)>>1)];
      var $175=((($174) << 16) >> 16);
      var $176=((16777216/((($175))|0))|0);
      var $177=((($176)+2047)|0);
      var $178=($177) >> 12;
      var $179=$c;
      var $180=(($mul+($179<<1))|0);
      var $181=HEAP16[(($180)>>1)];
      var $182=((($181) << 16) >> 16);
      var $183=((($178)*($182))|0);
      $val=$183;
      var $184=$val;
      var $185=((($184))|0) > 65564;
      var $186=($185) ? 10 : 12;
      $s=$186;
      var $187=$s;
      var $188=((($187)-1)|0);
      var $189=-1 << ($188);
      var $190=($189) ^ -1;
      $x=$190;
      var $191=$s;
      var $192=((12-($191))|0);
      var $193=$val;
      var $194=($193) << ($192);
      $val=$194;
      $i=0;
      __label__ = 33; break;
    case 33: // $195
      var $196=$i;
      var $197=((($196))>>>0) < 1158;
      if ($197) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: // $198
      var $199=$i;
      var $200=$c;
      var $201=(($buf+$200*2316)|0);
      var $202=(($201)|0);
      var $203=(($202+($199<<1))|0);
      var $204=HEAP16[(($203)>>1)];
      var $205=((($204) << 16) >> 16);
      var $206=$val;
      var $207=((($205)*($206))|0);
      var $208=$x;
      var $209=((($207)+($208))|0);
      var $210=$s;
      var $211=($209) >> ((($210))|0);
      var $212=((($211)) & 65535);
      var $213=$i;
      var $214=$c;
      var $215=(($buf+$214*2316)|0);
      var $216=(($215)|0);
      var $217=(($216+($213<<1))|0);
      HEAP16[(($217)>>1)]=$212;
      __label__ = 35; break;
    case 35: // $218
      var $219=$i;
      var $220=((($219)+1)|0);
      $i=$220;
      __label__ = 33; break;
    case 36: // $221
      var $222=$c;
      var $223=(($mul+($222<<1))|0);
      var $224=HEAP16[(($223)>>1)];
      var $225=$c;
      var $226=(($last+($225<<1))|0);
      HEAP16[(($226)>>1)]=$224;
      $r=0;
      __label__ = 37; break;
    case 37: // $227
      var $228=$r;
      var $229=$c;
      var $230=((($229))|0)!=0;
      var $231=($230) ^ 1;
      var $232=((($231))&1);
      var $233=((($228))|0) <= ((($232))|0);
      if ($233) { __label__ = 38; break; } else { __label__ = 115; break; }
    case 38: // $234
      var $235=$c;
      var $236=(($mul+($235<<1))|0);
      var $237=HEAP16[(($236)>>1)];
      var $238=((($237) << 16) >> 16);
      var $239=($238) << 7;
      var $240=((($239)) & 65535);
      var $241=HEAPU16[((_width)>>1)];
      var $242=((($241))&65535);
      var $243=((((($242))|0)/2)|0);
      var $244=$c;
      var $245=(($buf+$244*2316)|0);
      var $246=(($245+1544)|0);
      var $247=(($246+($243<<1))|0);
      HEAP16[(($247)>>1)]=$240;
      var $248=HEAPU16[((_width)>>1)];
      var $249=((($248))&65535);
      var $250=((((($249))|0)/2)|0);
      var $251=$c;
      var $252=(($buf+$251*2316)|0);
      var $253=(($252+772)|0);
      var $254=(($253+($250<<1))|0);
      HEAP16[(($254)>>1)]=$240;
      $tree=1;
      var $255=HEAPU16[((_width)>>1)];
      var $256=((($255))&65535);
      var $257=((((($256))|0)/2)|0);
      $col=$257;
      __label__ = 39; break;
    case 39: // $258
      var $259=$col;
      var $260=((($259))|0) > 0;
      if ($260) { __label__ = 40; break; } else { __label__ = 100; break; }
    case 40: // $261
      var $262=$tree;
      var $263=(($huff+($262<<9))|0);
      var $264=(($263)|0);
      var $265=_getbithuff(8, $264);
      var $266=((($265)) & 255);
      var $267=((($266) << 24) >> 24);
      $tree=$267;
      var $268=((($267))|0)!=0;
      if ($268) { __label__ = 41; break; } else { __label__ = 64; break; }
    case 41: // $269
      var $270=$col;
      var $271=((($270)-2)|0);
      $col=$271;
      var $272=$tree;
      var $273=((($272))|0)==8;
      if ($273) { __label__ = 42; break; } else { __label__ = 51; break; }
    case 42: // $274
      $y=1;
      __label__ = 43; break;
    case 43: // $275
      var $276=$y;
      var $277=((($276))|0) < 3;
      if ($277) { __label__ = 44; break; } else { __label__ = 50; break; }
    case 44: // $278
      var $279=$col;
      var $280=((($279)+1)|0);
      $x=$280;
      __label__ = 45; break;
    case 45: // $281
      var $282=$x;
      var $283=$col;
      var $284=((($282))|0) >= ((($283))|0);
      if ($284) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 46: // $285
      var $286=(($huff+9216)|0);
      var $287=(($286)|0);
      var $288=_getbithuff(8, $287);
      var $289=((($288)) & 255);
      var $290=((($289))&255);
      var $291=$c;
      var $292=(($mul+($291<<1))|0);
      var $293=HEAP16[(($292)>>1)];
      var $294=((($293) << 16) >> 16);
      var $295=((($290)*($294))|0);
      var $296=((($295)) & 65535);
      var $297=$x;
      var $298=$y;
      var $299=$c;
      var $300=(($buf+$299*2316)|0);
      var $301=(($300+$298*772)|0);
      var $302=(($301+($297<<1))|0);
      HEAP16[(($302)>>1)]=$296;
      __label__ = 47; break;
    case 47: // $303
      var $304=$x;
      var $305=((($304)-1)|0);
      $x=$305;
      __label__ = 45; break;
    case 48: // $306
      __label__ = 49; break;
    case 49: // $307
      var $308=$y;
      var $309=((($308)+1)|0);
      $y=$309;
      __label__ = 43; break;
    case 50: // $310
      __label__ = 63; break;
    case 51: // $311
      $y=1;
      __label__ = 52; break;
    case 52: // $312
      var $313=$y;
      var $314=((($313))|0) < 3;
      if ($314) { __label__ = 53; break; } else { __label__ = 62; break; }
    case 53: // $315
      var $316=$col;
      var $317=((($316)+1)|0);
      $x=$317;
      __label__ = 54; break;
    case 54: // $318
      var $319=$x;
      var $320=$col;
      var $321=((($319))|0) >= ((($320))|0);
      if ($321) { __label__ = 55; break; } else { __label__ = 60; break; }
    case 55: // $322
      var $323=$tree;
      var $324=((($323)+10)|0);
      var $325=(($huff+($324<<9))|0);
      var $326=(($325)|0);
      var $327=_getbithuff(8, $326);
      var $328=((($327)) & 255);
      var $329=((($328) << 24) >> 24);
      var $330=(((($329)<<4))|0);
      var $331=$c;
      var $332=((($331))|0)!=0;
      if ($332) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: // $333
      var $334=$x;
      var $335=$y;
      var $336=((($335)-1)|0);
      var $337=$c;
      var $338=(($buf+$337*2316)|0);
      var $339=(($338+$336*772)|0);
      var $340=(($339+($334<<1))|0);
      var $341=HEAP16[(($340)>>1)];
      var $342=((($341) << 16) >> 16);
      var $343=$x;
      var $344=((($343)+1)|0);
      var $345=$y;
      var $346=$c;
      var $347=(($buf+$346*2316)|0);
      var $348=(($347+$345*772)|0);
      var $349=(($348+($344<<1))|0);
      var $350=HEAP16[(($349)>>1)];
      var $351=((($350) << 16) >> 16);
      var $352=((($342)+($351))|0);
      var $353=((((($352))|0)/2)|0);
      var $388 = $353;__label__ = 58; break;
    case 57: // $354
      var $355=$x;
      var $356=((($355)+1)|0);
      var $357=$y;
      var $358=((($357)-1)|0);
      var $359=$c;
      var $360=(($buf+$359*2316)|0);
      var $361=(($360+$358*772)|0);
      var $362=(($361+($356<<1))|0);
      var $363=HEAP16[(($362)>>1)];
      var $364=((($363) << 16) >> 16);
      var $365=$x;
      var $366=$y;
      var $367=((($366)-1)|0);
      var $368=$c;
      var $369=(($buf+$368*2316)|0);
      var $370=(($369+$367*772)|0);
      var $371=(($370+($365<<1))|0);
      var $372=HEAP16[(($371)>>1)];
      var $373=((($372) << 16) >> 16);
      var $374=(((($373)<<1))|0);
      var $375=((($364)+($374))|0);
      var $376=$x;
      var $377=((($376)+1)|0);
      var $378=$y;
      var $379=$c;
      var $380=(($buf+$379*2316)|0);
      var $381=(($380+$378*772)|0);
      var $382=(($381+($377<<1))|0);
      var $383=HEAP16[(($382)>>1)];
      var $384=((($383) << 16) >> 16);
      var $385=((($375)+($384))|0);
      var $386=((((($385))|0)/4)|0);
      var $388 = $386;__label__ = 58; break;
    case 58: // $387
      var $388;
      var $389=((($330)+($388))|0);
      var $390=((($389)) & 65535);
      var $391=$x;
      var $392=$y;
      var $393=$c;
      var $394=(($buf+$393*2316)|0);
      var $395=(($394+$392*772)|0);
      var $396=(($395+($391<<1))|0);
      HEAP16[(($396)>>1)]=$390;
      __label__ = 59; break;
    case 59: // $397
      var $398=$x;
      var $399=((($398)-1)|0);
      $x=$399;
      __label__ = 54; break;
    case 60: // $400
      __label__ = 61; break;
    case 61: // $401
      var $402=$y;
      var $403=((($402)+1)|0);
      $y=$403;
      __label__ = 52; break;
    case 62: // $404
      __label__ = 63; break;
    case 63: // $405
      __label__ = 99; break;
    case 64: // $406
      __label__ = 65; break;
    case 65: // $407
      var $408=$col;
      var $409=((($408))|0) > 2;
      if ($409) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $410
      var $411=(($huff+4608)|0);
      var $412=(($411)|0);
      var $413=_getbithuff(8, $412);
      var $414=((($413)) & 255);
      var $415=((($414) << 24) >> 24);
      var $416=((($415)+1)|0);
      var $419 = $416;__label__ = 68; break;
    case 67: // $417
      var $419 = 1;__label__ = 68; break;
    case 68: // $418
      var $419;
      $nreps=$419;
      $rep=0;
      __label__ = 69; break;
    case 69: // $420
      var $421=$rep;
      var $422=((($421))|0) < 8;
      if ($422) { __label__ = 70; break; } else { var $431 = 0;__label__ = 72; break; }
    case 70: // $423
      var $424=$rep;
      var $425=$nreps;
      var $426=((($424))|0) < ((($425))|0);
      if ($426) { __label__ = 71; break; } else { var $431 = 0;__label__ = 72; break; }
    case 71: // $427
      var $428=$col;
      var $429=((($428))|0) > 0;
      var $431 = $429;__label__ = 72; break;
    case 72: // $430
      var $431;
      if ($431) { __label__ = 73; break; } else { __label__ = 96; break; }
    case 73: // $432
      var $433=$col;
      var $434=((($433)-2)|0);
      $col=$434;
      $y=1;
      __label__ = 74; break;
    case 74: // $435
      var $436=$y;
      var $437=((($436))|0) < 3;
      if ($437) { __label__ = 75; break; } else { __label__ = 84; break; }
    case 75: // $438
      var $439=$col;
      var $440=((($439)+1)|0);
      $x=$440;
      __label__ = 76; break;
    case 76: // $441
      var $442=$x;
      var $443=$col;
      var $444=((($442))|0) >= ((($443))|0);
      if ($444) { __label__ = 77; break; } else { __label__ = 82; break; }
    case 77: // $445
      var $446=$c;
      var $447=((($446))|0)!=0;
      if ($447) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: // $448
      var $449=$x;
      var $450=$y;
      var $451=((($450)-1)|0);
      var $452=$c;
      var $453=(($buf+$452*2316)|0);
      var $454=(($453+$451*772)|0);
      var $455=(($454+($449<<1))|0);
      var $456=HEAP16[(($455)>>1)];
      var $457=((($456) << 16) >> 16);
      var $458=$x;
      var $459=((($458)+1)|0);
      var $460=$y;
      var $461=$c;
      var $462=(($buf+$461*2316)|0);
      var $463=(($462+$460*772)|0);
      var $464=(($463+($459<<1))|0);
      var $465=HEAP16[(($464)>>1)];
      var $466=((($465) << 16) >> 16);
      var $467=((($457)+($466))|0);
      var $468=((((($467))|0)/2)|0);
      var $503 = $468;__label__ = 80; break;
    case 79: // $469
      var $470=$x;
      var $471=((($470)+1)|0);
      var $472=$y;
      var $473=((($472)-1)|0);
      var $474=$c;
      var $475=(($buf+$474*2316)|0);
      var $476=(($475+$473*772)|0);
      var $477=(($476+($471<<1))|0);
      var $478=HEAP16[(($477)>>1)];
      var $479=((($478) << 16) >> 16);
      var $480=$x;
      var $481=$y;
      var $482=((($481)-1)|0);
      var $483=$c;
      var $484=(($buf+$483*2316)|0);
      var $485=(($484+$482*772)|0);
      var $486=(($485+($480<<1))|0);
      var $487=HEAP16[(($486)>>1)];
      var $488=((($487) << 16) >> 16);
      var $489=(((($488)<<1))|0);
      var $490=((($479)+($489))|0);
      var $491=$x;
      var $492=((($491)+1)|0);
      var $493=$y;
      var $494=$c;
      var $495=(($buf+$494*2316)|0);
      var $496=(($495+$493*772)|0);
      var $497=(($496+($492<<1))|0);
      var $498=HEAP16[(($497)>>1)];
      var $499=((($498) << 16) >> 16);
      var $500=((($490)+($499))|0);
      var $501=((((($500))|0)/4)|0);
      var $503 = $501;__label__ = 80; break;
    case 80: // $502
      var $503;
      var $504=((($503)) & 65535);
      var $505=$x;
      var $506=$y;
      var $507=$c;
      var $508=(($buf+$507*2316)|0);
      var $509=(($508+$506*772)|0);
      var $510=(($509+($505<<1))|0);
      HEAP16[(($510)>>1)]=$504;
      __label__ = 81; break;
    case 81: // $511
      var $512=$x;
      var $513=((($512)-1)|0);
      $x=$513;
      __label__ = 76; break;
    case 82: // $514
      __label__ = 83; break;
    case 83: // $515
      var $516=$y;
      var $517=((($516)+1)|0);
      $y=$517;
      __label__ = 74; break;
    case 84: // $518
      var $519=$rep;
      var $520=($519) & 1;
      var $521=((($520))|0)!=0;
      if ($521) { __label__ = 85; break; } else { __label__ = 94; break; }
    case 85: // $522
      var $523=(($huff+5120)|0);
      var $524=(($523)|0);
      var $525=_getbithuff(8, $524);
      var $526=((($525)) & 255);
      var $527=((($526) << 24) >> 24);
      var $528=($527) << 4;
      $step=$528;
      $y=1;
      __label__ = 86; break;
    case 86: // $529
      var $530=$y;
      var $531=((($530))|0) < 3;
      if ($531) { __label__ = 87; break; } else { __label__ = 93; break; }
    case 87: // $532
      var $533=$col;
      var $534=((($533)+1)|0);
      $x=$534;
      __label__ = 88; break;
    case 88: // $535
      var $536=$x;
      var $537=$col;
      var $538=((($536))|0) >= ((($537))|0);
      if ($538) { __label__ = 89; break; } else { __label__ = 91; break; }
    case 89: // $539
      var $540=$step;
      var $541=$x;
      var $542=$y;
      var $543=$c;
      var $544=(($buf+$543*2316)|0);
      var $545=(($544+$542*772)|0);
      var $546=(($545+($541<<1))|0);
      var $547=HEAP16[(($546)>>1)];
      var $548=((($547) << 16) >> 16);
      var $549=((($548)+($540))|0);
      var $550=((($549)) & 65535);
      HEAP16[(($546)>>1)]=$550;
      __label__ = 90; break;
    case 90: // $551
      var $552=$x;
      var $553=((($552)-1)|0);
      $x=$553;
      __label__ = 88; break;
    case 91: // $554
      __label__ = 92; break;
    case 92: // $555
      var $556=$y;
      var $557=((($556)+1)|0);
      $y=$557;
      __label__ = 86; break;
    case 93: // $558
      __label__ = 94; break;
    case 94: // $559
      __label__ = 95; break;
    case 95: // $560
      var $561=$rep;
      var $562=((($561)+1)|0);
      $rep=$562;
      __label__ = 69; break;
    case 96: // $563
      __label__ = 97; break;
    case 97: // $564
      var $565=$nreps;
      var $566=((($565))|0)==9;
      if ($566) { __label__ = 65; break; } else { __label__ = 98; break; }
    case 98: // $567
      __label__ = 99; break;
    case 99: // $568
      __label__ = 39; break;
    case 100: // $569
      $y=0;
      __label__ = 101; break;
    case 101: // $570
      var $571=$y;
      var $572=((($571))|0) < 2;
      if ($572) { __label__ = 102; break; } else { __label__ = 113; break; }
    case 102: // $573
      $x=0;
      __label__ = 103; break;
    case 103: // $574
      var $575=$x;
      var $576=HEAPU16[((_width)>>1)];
      var $577=((($576))&65535);
      var $578=((((($577))|0)/2)|0);
      var $579=((($575))|0) < ((($578))|0);
      if ($579) { __label__ = 104; break; } else { __label__ = 111; break; }
    case 104: // $580
      var $581=$x;
      var $582=$y;
      var $583=((($582)+1)|0);
      var $584=$c;
      var $585=(($buf+$584*2316)|0);
      var $586=(($585+$583*772)|0);
      var $587=(($586+($581<<1))|0);
      var $588=HEAP16[(($587)>>1)];
      var $589=((($588) << 16) >> 16);
      var $590=($589) << 4;
      var $591=$c;
      var $592=(($mul+($591<<1))|0);
      var $593=HEAP16[(($592)>>1)];
      var $594=((($593) << 16) >> 16);
      var $595=((((($590))|0)/((($594))|0))|0);
      $val=$595;
      var $596=$val;
      var $597=((($596))|0) < 0;
      if ($597) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $598
      $val=0;
      __label__ = 106; break;
    case 106: // $599
      var $600=$c;
      var $601=((($600))|0)!=0;
      if ($601) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: // $602
      var $603=$val;
      var $604=((($603)) & 65535);
      var $605=HEAPU32[((_filters)>>2)];
      var $606=$row;
      var $607=$y;
      var $608=(((($607)<<1))|0);
      var $609=((($606)+($608))|0);
      var $610=$c;
      var $611=((($609)+($610))|0);
      var $612=((($611)-1)|0);
      var $613=($612) << 1;
      var $614=($613) & 14;
      var $615=$x;
      var $616=(((($615)<<1))|0);
      var $617=((($616)+2)|0);
      var $618=$c;
      var $619=((($617)-($618))|0);
      var $620=($619) & 1;
      var $621=((($614)+($620))|0);
      var $622=($621) << 1;
      var $623=($605) >>> ((($622))>>>0);
      var $624=($623) & 3;
      var $625=$row;
      var $626=$y;
      var $627=(((($626)<<1))|0);
      var $628=((($625)+($627))|0);
      var $629=$c;
      var $630=((($628)+($629))|0);
      var $631=((($630)-1)|0);
      var $632=HEAPU16[((_shrink)>>1)];
      var $633=((($632))&65535);
      var $634=($631) >> ((($633))|0);
      var $635=HEAPU16[((_iwidth)>>1)];
      var $636=((($635))&65535);
      var $637=((($634)*($636))|0);
      var $638=$x;
      var $639=(((($638)<<1))|0);
      var $640=((($639)+2)|0);
      var $641=$c;
      var $642=((($640)-($641))|0);
      var $643=HEAPU16[((_shrink)>>1)];
      var $644=((($643))&65535);
      var $645=($642) >> ((($644))|0);
      var $646=((($637)+($645))|0);
      var $647=HEAP32[((_image)>>2)];
      var $648=(($647+($646<<3))|0);
      var $649=(($648+($624<<1))|0);
      HEAP16[(($649)>>1)]=$604;
      __label__ = 109; break;
    case 108: // $650
      var $651=$val;
      var $652=((($651)) & 65535);
      var $653=HEAPU32[((_filters)>>2)];
      var $654=$row;
      var $655=$r;
      var $656=(((($655)<<1))|0);
      var $657=((($654)+($656))|0);
      var $658=$y;
      var $659=((($657)+($658))|0);
      var $660=($659) << 1;
      var $661=($660) & 14;
      var $662=$x;
      var $663=(((($662)<<1))|0);
      var $664=$y;
      var $665=((($663)+($664))|0);
      var $666=($665) & 1;
      var $667=((($661)+($666))|0);
      var $668=($667) << 1;
      var $669=($653) >>> ((($668))>>>0);
      var $670=($669) & 3;
      var $671=$row;
      var $672=$r;
      var $673=(((($672)<<1))|0);
      var $674=((($671)+($673))|0);
      var $675=$y;
      var $676=((($674)+($675))|0);
      var $677=HEAPU16[((_shrink)>>1)];
      var $678=((($677))&65535);
      var $679=($676) >> ((($678))|0);
      var $680=HEAPU16[((_iwidth)>>1)];
      var $681=((($680))&65535);
      var $682=((($679)*($681))|0);
      var $683=$x;
      var $684=(((($683)<<1))|0);
      var $685=$y;
      var $686=((($684)+($685))|0);
      var $687=HEAPU16[((_shrink)>>1)];
      var $688=((($687))&65535);
      var $689=($686) >> ((($688))|0);
      var $690=((($682)+($689))|0);
      var $691=HEAP32[((_image)>>2)];
      var $692=(($691+($690<<3))|0);
      var $693=(($692+($670<<1))|0);
      HEAP16[(($693)>>1)]=$652;
      __label__ = 109; break;
    case 109: // $694
      __label__ = 110; break;
    case 110: // $695
      var $696=$x;
      var $697=((($696)+1)|0);
      $x=$697;
      __label__ = 103; break;
    case 111: // $698
      __label__ = 112; break;
    case 112: // $699
      var $700=$y;
      var $701=((($700)+1)|0);
      $y=$701;
      __label__ = 101; break;
    case 113: // $702
      var $703=$c;
      var $704=(($buf+$703*2316)|0);
      var $705=(($704)|0);
      var $706=(($705)|0);
      var $707=$c;
      var $708=((($707))|0)!=0;
      var $709=($708) ^ 1;
      var $710=((($709))&1);
      var $711=(($706+($710<<1))|0);
      var $712=$711;
      var $713=$c;
      var $714=(($buf+$713*2316)|0);
      var $715=(($714+1544)|0);
      var $716=(($715)|0);
      var $717=$716;
      var $718=$c;
      var $719=((($718))|0)!=0;
      var $720=($719) ^ 1;
      var $721=((($720))&1);
      var $722=(((($721)<<1))|0);
      var $723=((772-($722))|0);
      assert($723 % 1 === 0, 'memcpy given ' + $723 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($712, $717, $723, 1);
      __label__ = 114; break;
    case 114: // $724
      var $725=$r;
      var $726=((($725)+1)|0);
      $r=$726;
      __label__ = 37; break;
    case 115: // $727
      __label__ = 116; break;
    case 116: // $728
      var $729=$c;
      var $730=((($729)+1)|0);
      $c=$730;
      __label__ = 31; break;
    case 117: // $731
      var $732=$row;
      $y=$732;
      __label__ = 118; break;
    case 118: // $733
      var $734=$y;
      var $735=$row;
      var $736=((($735)+4)|0);
      var $737=((($734))|0) < ((($736))|0);
      if ($737) { __label__ = 119; break; } else { __label__ = 135; break; }
    case 119: // $738
      $x=0;
      __label__ = 120; break;
    case 120: // $739
      var $740=$x;
      var $741=HEAPU16[((_width)>>1)];
      var $742=((($741))&65535);
      var $743=((($740))|0) < ((($742))|0);
      if ($743) { __label__ = 121; break; } else { __label__ = 133; break; }
    case 121: // $744
      var $745=$x;
      var $746=$y;
      var $747=((($745)+($746))|0);
      var $748=($747) & 1;
      var $749=((($748))|0)!=0;
      if ($749) { __label__ = 122; break; } else { __label__ = 131; break; }
    case 122: // $750
      var $751=$x;
      var $752=((($751))|0)!=0;
      if ($752) { __label__ = 123; break; } else { __label__ = 124; break; }
    case 123: // $753
      var $754=$x;
      var $755=((($754)-1)|0);
      var $760 = $755;__label__ = 125; break;
    case 124: // $756
      var $757=$x;
      var $758=((($757)+1)|0);
      var $760 = $758;__label__ = 125; break;
    case 125: // $759
      var $760;
      $r=$760;
      var $761=$x;
      var $762=((($761)+1)|0);
      var $763=HEAPU16[((_width)>>1)];
      var $764=((($763))&65535);
      var $765=((($762))|0) < ((($764))|0);
      if ($765) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: // $766
      var $767=$x;
      var $768=((($767)+1)|0);
      var $773 = $768;__label__ = 128; break;
    case 127: // $769
      var $770=$x;
      var $771=((($770)-1)|0);
      var $773 = $771;__label__ = 128; break;
    case 128: // $772
      var $773;
      $s=$773;
      var $774=HEAPU32[((_filters)>>2)];
      var $775=$y;
      var $776=($775) << 1;
      var $777=($776) & 14;
      var $778=$x;
      var $779=($778) & 1;
      var $780=((($777)+($779))|0);
      var $781=($780) << 1;
      var $782=($774) >>> ((($781))>>>0);
      var $783=($782) & 3;
      var $784=$y;
      var $785=HEAPU16[((_shrink)>>1)];
      var $786=((($785))&65535);
      var $787=($784) >> ((($786))|0);
      var $788=HEAPU16[((_iwidth)>>1)];
      var $789=((($788))&65535);
      var $790=((($787)*($789))|0);
      var $791=$x;
      var $792=HEAPU16[((_shrink)>>1)];
      var $793=((($792))&65535);
      var $794=($791) >> ((($793))|0);
      var $795=((($790)+($794))|0);
      var $796=HEAP32[((_image)>>2)];
      var $797=(($796+($795<<3))|0);
      var $798=(($797+($783<<1))|0);
      var $799=HEAPU16[(($798)>>1)];
      var $800=((($799))&65535);
      var $801=((($800)-2048)|0);
      var $802=(((($801)<<1))|0);
      var $803=HEAPU32[((_filters)>>2)];
      var $804=$y;
      var $805=($804) << 1;
      var $806=($805) & 14;
      var $807=$r;
      var $808=($807) & 1;
      var $809=((($806)+($808))|0);
      var $810=($809) << 1;
      var $811=($803) >>> ((($810))>>>0);
      var $812=($811) & 3;
      var $813=$y;
      var $814=HEAPU16[((_shrink)>>1)];
      var $815=((($814))&65535);
      var $816=($813) >> ((($815))|0);
      var $817=HEAPU16[((_iwidth)>>1)];
      var $818=((($817))&65535);
      var $819=((($816)*($818))|0);
      var $820=$r;
      var $821=HEAPU16[((_shrink)>>1)];
      var $822=((($821))&65535);
      var $823=($820) >> ((($822))|0);
      var $824=((($819)+($823))|0);
      var $825=HEAP32[((_image)>>2)];
      var $826=(($825+($824<<3))|0);
      var $827=(($826+($812<<1))|0);
      var $828=HEAPU16[(($827)>>1)];
      var $829=((($828))&65535);
      var $830=HEAPU32[((_filters)>>2)];
      var $831=$y;
      var $832=($831) << 1;
      var $833=($832) & 14;
      var $834=$s;
      var $835=($834) & 1;
      var $836=((($833)+($835))|0);
      var $837=($836) << 1;
      var $838=($830) >>> ((($837))>>>0);
      var $839=($838) & 3;
      var $840=$y;
      var $841=HEAPU16[((_shrink)>>1)];
      var $842=((($841))&65535);
      var $843=($840) >> ((($842))|0);
      var $844=HEAPU16[((_iwidth)>>1)];
      var $845=((($844))&65535);
      var $846=((($843)*($845))|0);
      var $847=$s;
      var $848=HEAPU16[((_shrink)>>1)];
      var $849=((($848))&65535);
      var $850=($847) >> ((($849))|0);
      var $851=((($846)+($850))|0);
      var $852=HEAP32[((_image)>>2)];
      var $853=(($852+($851<<3))|0);
      var $854=(($853+($839<<1))|0);
      var $855=HEAPU16[(($854)>>1)];
      var $856=((($855))&65535);
      var $857=((($829)+($856))|0);
      var $858=((((($857))|0)/2)|0);
      var $859=((($802)+($858))|0);
      $val=$859;
      var $860=$val;
      var $861=((($860))|0) < 0;
      if ($861) { __label__ = 129; break; } else { __label__ = 130; break; }
    case 129: // $862
      $val=0;
      __label__ = 130; break;
    case 130: // $863
      var $864=$val;
      var $865=((($864)) & 65535);
      var $866=HEAPU32[((_filters)>>2)];
      var $867=$y;
      var $868=($867) << 1;
      var $869=($868) & 14;
      var $870=$x;
      var $871=($870) & 1;
      var $872=((($869)+($871))|0);
      var $873=($872) << 1;
      var $874=($866) >>> ((($873))>>>0);
      var $875=($874) & 3;
      var $876=$y;
      var $877=HEAPU16[((_shrink)>>1)];
      var $878=((($877))&65535);
      var $879=($876) >> ((($878))|0);
      var $880=HEAPU16[((_iwidth)>>1)];
      var $881=((($880))&65535);
      var $882=((($879)*($881))|0);
      var $883=$x;
      var $884=HEAPU16[((_shrink)>>1)];
      var $885=((($884))&65535);
      var $886=($883) >> ((($885))|0);
      var $887=((($882)+($886))|0);
      var $888=HEAP32[((_image)>>2)];
      var $889=(($888+($887<<3))|0);
      var $890=(($889+($875<<1))|0);
      HEAP16[(($890)>>1)]=$865;
      __label__ = 131; break;
    case 131: // $891
      __label__ = 132; break;
    case 132: // $892
      var $893=$x;
      var $894=((($893)+1)|0);
      $x=$894;
      __label__ = 120; break;
    case 133: // $895
      __label__ = 134; break;
    case 134: // $896
      var $897=$y;
      var $898=((($897)+1)|0);
      $y=$898;
      __label__ = 118; break;
    case 135: // $899
      __label__ = 136; break;
    case 136: // $900
      var $901=$row;
      var $902=((($901)+4)|0);
      $row=$902;
      __label__ = 25; break;
    case 137: // $903
      $i=0;
      __label__ = 138; break;
    case 138: // $904
      var $905=$i;
      var $906=HEAPU16[((_iheight)>>1)];
      var $907=((($906))&65535);
      var $908=HEAPU16[((_iwidth)>>1)];
      var $909=((($908))&65535);
      var $910=((($907)*($909))|0);
      var $911=(((($910)<<2))|0);
      var $912=((($905))|0) < ((($911))|0);
      if ($912) { __label__ = 139; break; } else { __label__ = 141; break; }
    case 139: // $913
      var $914=$i;
      var $915=HEAP32[((_image)>>2)];
      var $916=(($915)|0);
      var $917=(($916+($914<<1))|0);
      var $918=HEAPU16[(($917)>>1)];
      var $919=((($918))&65535);
      var $920=((_curve+($919<<1))|0);
      var $921=HEAP16[(($920)>>1)];
      var $922=$i;
      var $923=HEAP32[((_image)>>2)];
      var $924=(($923)|0);
      var $925=(($924+($922<<1))|0);
      HEAP16[(($925)>>1)]=$921;
      __label__ = 140; break;
    case 140: // $926
      var $927=$i;
      var $928=((($927)+1)|0);
      $i=$928;
      __label__ = 138; break;
    case 141: // $929
      HEAP32[((_maximum)>>2)]=16383;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_radc_load_raw["X"]=1;

function _kodak_jpeg_load_raw() {
  ;
  var __label__;

  ;
  return;
}


function _kodak_dc120_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 848; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel=__stackBase__;
      var $row;
      var $shift;
      var $col;
      $row=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$row;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: // $6
      var $7=(($pixel)|0);
      var $8=HEAP32[((_ifp)>>2)];
      var $9=_fread($7, 1, 848, $8);
      var $10=((($9))>>>0) < 848;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $11
      _derror();
      __label__ = 4; break;
    case 4: // $12
      var $13=$row;
      var $14=$row;
      var $15=($14) & 3;
      var $16=((_kodak_dc120_load_raw_mul+($15<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($13)*($17))|0);
      var $19=$row;
      var $20=($19) & 3;
      var $21=((_kodak_dc120_load_raw_add+($20<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($18)+($22))|0);
      $shift=$23;
      $col=0;
      __label__ = 5; break;
    case 5: // $24
      var $25=$col;
      var $26=HEAPU16[((_width)>>1)];
      var $27=((($26))&65535);
      var $28=((($25))|0) < ((($27))|0);
      if ($28) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $29
      var $30=$col;
      var $31=$shift;
      var $32=((($30)+($31))|0);
      var $33=((($32))|0)%848;
      var $34=(($pixel+$33)|0);
      var $35=HEAPU8[($34)];
      var $36=((($35))&255);
      var $37=HEAPU32[((_filters)>>2)];
      var $38=$row;
      var $39=($38) << 1;
      var $40=($39) & 14;
      var $41=$col;
      var $42=($41) & 1;
      var $43=((($40)+($42))|0);
      var $44=($43) << 1;
      var $45=($37) >>> ((($44))>>>0);
      var $46=($45) & 3;
      var $47=$row;
      var $48=HEAPU16[((_shrink)>>1)];
      var $49=((($48))&65535);
      var $50=($47) >> ((($49))|0);
      var $51=HEAPU16[((_iwidth)>>1)];
      var $52=((($51))&65535);
      var $53=((($50)*($52))|0);
      var $54=$col;
      var $55=HEAPU16[((_shrink)>>1)];
      var $56=((($55))&65535);
      var $57=($54) >> ((($56))|0);
      var $58=((($53)+($57))|0);
      var $59=HEAP32[((_image)>>2)];
      var $60=(($59+($58<<3))|0);
      var $61=(($60+($46<<1))|0);
      HEAP16[(($61)>>1)]=$36;
      __label__ = 7; break;
    case 7: // $62
      var $63=$col;
      var $64=((($63)+1)|0);
      $col=$64;
      __label__ = 5; break;
    case 8: // $65
      __label__ = 9; break;
    case 9: // $66
      var $67=$row;
      var $68=((($67)+1)|0);
      $row=$68;
      __label__ = 1; break;
    case 10: // $69
      HEAP32[((_maximum)>>2)]=255;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_dc120_load_raw["X"]=1;

function _eight_bit_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $row;
      var $col;
      var $val;
      var $lblack;
      $lblack=0;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=_calloc($2, 1);
      $pixel=$3;
      var $4=$pixel;
      _merror($4, ((__str25)|0));
      var $5=HEAP32[((_ifp)>>2)];
      var $6=HEAPU16[((_top_margin)>>1)];
      var $7=((($6))&65535);
      var $8=HEAPU16[((_raw_width)>>1)];
      var $9=((($8))&65535);
      var $10=((($7)*($9))|0);
      var $11=_fseek($5, $10, 1);
      $row=0;
      __label__ = 1; break;
    case 1: // $12
      var $13=$row;
      var $14=HEAPU16[((_height)>>1)];
      var $15=((($14))&65535);
      var $16=((($13))>>>0) < ((($15))>>>0);
      if ($16) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: // $17
      var $18=$pixel;
      var $19=HEAPU16[((_raw_width)>>1)];
      var $20=((($19))&65535);
      var $21=HEAP32[((_ifp)>>2)];
      var $22=_fread($18, 1, $20, $21);
      var $23=HEAPU16[((_raw_width)>>1)];
      var $24=((($23))&65535);
      var $25=((($22))>>>0) < ((($24))>>>0);
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $26
      _derror();
      __label__ = 4; break;
    case 4: // $27
      $col=0;
      __label__ = 5; break;
    case 5: // $28
      var $29=$col;
      var $30=HEAPU16[((_raw_width)>>1)];
      var $31=((($30))&65535);
      var $32=((($29))>>>0) < ((($31))>>>0);
      if ($32) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: // $33
      var $34=$col;
      var $35=$pixel;
      var $36=(($35+$34)|0);
      var $37=HEAPU8[($36)];
      var $38=((($37))&255);
      var $39=((_curve+($38<<1))|0);
      var $40=HEAPU16[(($39)>>1)];
      var $41=((($40))&65535);
      $val=$41;
      var $42=$col;
      var $43=HEAPU16[((_left_margin)>>1)];
      var $44=((($43))&65535);
      var $45=((($42)-($44))|0);
      var $46=HEAPU16[((_width)>>1)];
      var $47=((($46))&65535);
      var $48=((($45))>>>0) < ((($47))>>>0);
      if ($48) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $49
      var $50=$val;
      var $51=((($50)) & 65535);
      var $52=HEAPU32[((_filters)>>2)];
      var $53=$row;
      var $54=($53) << 1;
      var $55=($54) & 14;
      var $56=$col;
      var $57=HEAPU16[((_left_margin)>>1)];
      var $58=((($57))&65535);
      var $59=((($56)-($58))|0);
      var $60=($59) & 1;
      var $61=((($55)+($60))|0);
      var $62=($61) << 1;
      var $63=($52) >>> ((($62))>>>0);
      var $64=($63) & 3;
      var $65=$row;
      var $66=HEAPU16[((_shrink)>>1)];
      var $67=((($66))&65535);
      var $68=($65) >>> ((($67))>>>0);
      var $69=HEAPU16[((_iwidth)>>1)];
      var $70=((($69))&65535);
      var $71=((($68)*($70))|0);
      var $72=$col;
      var $73=HEAPU16[((_left_margin)>>1)];
      var $74=((($73))&65535);
      var $75=((($72)-($74))|0);
      var $76=HEAPU16[((_shrink)>>1)];
      var $77=((($76))&65535);
      var $78=($75) >>> ((($77))>>>0);
      var $79=((($71)+($78))|0);
      var $80=HEAP32[((_image)>>2)];
      var $81=(($80+($79<<3))|0);
      var $82=(($81+($64<<1))|0);
      HEAP16[(($82)>>1)]=$51;
      __label__ = 9; break;
    case 8: // $83
      var $84=$val;
      var $85=$lblack;
      var $86=((($85)+($84))|0);
      $lblack=$86;
      __label__ = 9; break;
    case 9: // $87
      __label__ = 10; break;
    case 10: // $88
      var $89=$col;
      var $90=((($89)+1)|0);
      $col=$90;
      __label__ = 5; break;
    case 11: // $91
      __label__ = 12; break;
    case 12: // $92
      var $93=$row;
      var $94=((($93)+1)|0);
      $row=$94;
      __label__ = 1; break;
    case 13: // $95
      var $96=$pixel;
      _free($96);
      var $97=HEAPU16[((_raw_width)>>1)];
      var $98=((($97))&65535);
      var $99=HEAPU16[((_width)>>1)];
      var $100=((($99))&65535);
      var $101=((($100)+1)|0);
      var $102=((($98))|0) > ((($101))|0);
      if ($102) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $103
      var $104=$lblack;
      var $105=HEAPU16[((_raw_width)>>1)];
      var $106=((($105))&65535);
      var $107=HEAPU16[((_width)>>1)];
      var $108=((($107))&65535);
      var $109=((($106)-($108))|0);
      var $110=HEAPU16[((_height)>>1)];
      var $111=((($110))&65535);
      var $112=((($109)*($111))|0);
      var $113=Math.floor(((($104))>>>0)/((($112))>>>0));
      HEAP32[((_black)>>2)]=$113;
      __label__ = 15; break;
    case 15: // $114
      var $115=_strncmp(((_model)|0), ((__str26)|0), 3);
      var $116=((($115))|0)!=0;
      if ($116) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: // $117
      HEAP32[((_black)>>2)]=0;
      __label__ = 17; break;
    case 17: // $118
      var $119=HEAPU16[((((_curve+510)|0))>>1)];
      var $120=((($119))&65535);
      HEAP32[((_maximum)>>2)]=$120;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_eight_bit_load_raw["X"]=1;

function _kodak_yrgb_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pixel;
      var $row;
      var $col;
      var $y;
      var $cb;
      var $cr;
      var $rgb=__stackBase__;
      var $c;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=_calloc($2, 3);
      $pixel=$3;
      var $4=$pixel;
      _merror($4, ((__str27)|0));
      $row=0;
      __label__ = 1; break;
    case 1: // $5
      var $6=$row;
      var $7=HEAPU16[((_height)>>1)];
      var $8=((($7))&65535);
      var $9=((($6))|0) < ((($8))|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 25; break; }
    case 2: // $10
      var $11=$row;
      var $12=($11) ^ -1;
      var $13=($12) & 1;
      var $14=((($13))|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: // $15
      var $16=$pixel;
      var $17=HEAPU16[((_raw_width)>>1)];
      var $18=((($17))&65535);
      var $19=HEAP32[((_ifp)>>2)];
      var $20=_fread($16, $18, 3, $19);
      var $21=((($20))>>>0) < 3;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $22
      _derror();
      __label__ = 5; break;
    case 5: // $23
      __label__ = 6; break;
    case 6: // $24
      $col=0;
      __label__ = 7; break;
    case 7: // $25
      var $26=$col;
      var $27=HEAPU16[((_raw_width)>>1)];
      var $28=((($27))&65535);
      var $29=((($26))|0) < ((($28))|0);
      if ($29) { __label__ = 8; break; } else { __label__ = 23; break; }
    case 8: // $30
      var $31=HEAPU16[((_width)>>1)];
      var $32=((($31))&65535);
      var $33=(((($32)<<1))|0);
      var $34=$row;
      var $35=($34) & 1;
      var $36=((($33)*($35))|0);
      var $37=$col;
      var $38=((($36)+($37))|0);
      var $39=$pixel;
      var $40=(($39+$38)|0);
      var $41=HEAPU8[($40)];
      var $42=((($41))&255);
      $y=$42;
      var $43=HEAPU16[((_width)>>1)];
      var $44=((($43))&65535);
      var $45=$col;
      var $46=($45) & -2;
      var $47=((($44)+($46))|0);
      var $48=$pixel;
      var $49=(($48+$47)|0);
      var $50=HEAPU8[($49)];
      var $51=((($50))&255);
      var $52=((($51)-128)|0);
      $cb=$52;
      var $53=HEAPU16[((_width)>>1)];
      var $54=((($53))&65535);
      var $55=$col;
      var $56=($55) & -2;
      var $57=((($54)+($56))|0);
      var $58=((($57)+1)|0);
      var $59=$pixel;
      var $60=(($59+$58)|0);
      var $61=HEAPU8[($60)];
      var $62=((($61))&255);
      var $63=((($62)-128)|0);
      $cr=$63;
      var $64=$y;
      var $65=$cb;
      var $66=$cr;
      var $67=((($65)+($66))|0);
      var $68=((($67)+2)|0);
      var $69=($68) >> 2;
      var $70=((($64)-($69))|0);
      var $71=(($rgb+4)|0);
      HEAP32[(($71)>>2)]=$70;
      var $72=(($rgb+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$cb;
      var $75=((($73)+($74))|0);
      var $76=(($rgb+8)|0);
      HEAP32[(($76)>>2)]=$75;
      var $77=(($rgb+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$cr;
      var $80=((($78)+($79))|0);
      var $81=(($rgb)|0);
      HEAP32[(($81)>>2)]=$80;
      $c=0;
      __label__ = 9; break;
    case 9: // $82
      var $83=$c;
      var $84=((($83))|0) < 3;
      if ($84) { __label__ = 10; break; } else { __label__ = 21; break; }
    case 10: // $85
      var $86=$c;
      var $87=(($rgb+($86<<2))|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88))|0) < 255;
      if ($89) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $90
      var $91=$c;
      var $92=(($rgb+($91<<2))|0);
      var $93=HEAP32[(($92)>>2)];
      var $96 = $93;__label__ = 13; break;
    case 12: // $94
      var $96 = 255;__label__ = 13; break;
    case 13: // $95
      var $96;
      var $97=0 > ((($96))|0);
      if ($97) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $98
      var $112 = 0;__label__ = 19; break;
    case 15: // $99
      var $100=$c;
      var $101=(($rgb+($100<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102))|0) < 255;
      if ($103) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $104
      var $105=$c;
      var $106=(($rgb+($105<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $110 = $107;__label__ = 18; break;
    case 17: // $108
      var $110 = 255;__label__ = 18; break;
    case 18: // $109
      var $110;
      var $112 = $110;__label__ = 19; break;
    case 19: // $111
      var $112;
      var $113=((_curve+($112<<1))|0);
      var $114=HEAP16[(($113)>>1)];
      var $115=$c;
      var $116=$row;
      var $117=HEAPU16[((_width)>>1)];
      var $118=((($117))&65535);
      var $119=((($116)*($118))|0);
      var $120=$col;
      var $121=((($119)+($120))|0);
      var $122=HEAP32[((_image)>>2)];
      var $123=(($122+($121<<3))|0);
      var $124=(($123+($115<<1))|0);
      HEAP16[(($124)>>1)]=$114;
      __label__ = 20; break;
    case 20: // $125
      var $126=$c;
      var $127=((($126)+1)|0);
      $c=$127;
      __label__ = 9; break;
    case 21: // $128
      __label__ = 22; break;
    case 22: // $129
      var $130=$col;
      var $131=((($130)+1)|0);
      $col=$131;
      __label__ = 7; break;
    case 23: // $132
      __label__ = 24; break;
    case 24: // $133
      var $134=$row;
      var $135=((($134)+1)|0);
      $row=$135;
      __label__ = 1; break;
    case 25: // $136
      var $137=$pixel;
      _free($137);
      var $138=HEAPU16[((((_curve+510)|0))>>1)];
      var $139=((($138))&65535);
      HEAP32[((_maximum)>>2)]=$139;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_yrgb_load_raw["X"]=1;

function _kodak_262_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $huff=__stackBase__;
      var $pixel;
      var $strip;
      var $ns;
      var $c;
      var $row;
      var $col;
      var $chess;
      var $pi;
      var $pi1;
      var $pi2;
      var $pred;
      var $val;
      $pi=0;
      $c=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$c;
      var $3=((($2))|0) < 2;
      if ($3) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $4
      var $5=$c;
      var $6=((_kodak_262_load_raw_kodak_tree+$5*26)|0);
      var $7=(($6)|0);
      var $8=_make_decoder($7);
      var $9=$c;
      var $10=(($huff+($9<<2))|0);
      HEAP32[(($10)>>2)]=$8;
      __label__ = 3; break;
    case 3: // $11
      var $12=$c;
      var $13=((($12)+1)|0);
      $c=$13;
      __label__ = 1; break;
    case 4: // $14
      var $15=HEAPU16[((_raw_height)>>1)];
      var $16=((($15))&65535);
      var $17=((($16)+63)|0);
      var $18=($17) >> 5;
      $ns=$18;
      var $19=HEAPU16[((_raw_width)>>1)];
      var $20=((($19))&65535);
      var $21=(((($20)<<5))|0);
      var $22=$ns;
      var $23=(((($22)<<2))|0);
      var $24=((($21)+($23))|0);
      var $25=_malloc($24);
      $pixel=$25;
      var $26=$pixel;
      _merror($26, ((__str28)|0));
      var $27=$pixel;
      var $28=HEAPU16[((_raw_width)>>1)];
      var $29=((($28))&65535);
      var $30=(((($29)<<5))|0);
      var $31=(($27+$30)|0);
      var $32=$31;
      $strip=$32;
      HEAP16[((_order)>>1)]=19789;
      $c=0;
      __label__ = 5; break;
    case 5: // $33
      var $34=$c;
      var $35=$ns;
      var $36=((($34))|0) < ((($35))|0);
      if ($36) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $37
      var $38=_get4();
      var $39=$c;
      var $40=$strip;
      var $41=(($40+($39<<2))|0);
      HEAP32[(($41)>>2)]=$38;
      __label__ = 7; break;
    case 7: // $42
      var $43=$c;
      var $44=((($43)+1)|0);
      $c=$44;
      __label__ = 5; break;
    case 8: // $45
      $row=0;
      __label__ = 9; break;
    case 9: // $46
      var $47=$row;
      var $48=HEAPU16[((_raw_height)>>1)];
      var $49=((($48))&65535);
      var $50=((($47))|0) < ((($49))|0);
      if ($50) { __label__ = 10; break; } else { __label__ = 41; break; }
    case 10: // $51
      var $52=$row;
      var $53=($52) & 31;
      var $54=((($53))|0)==0;
      if ($54) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $55
      var $56=HEAP32[((_ifp)>>2)];
      var $57=$row;
      var $58=($57) >> 5;
      var $59=$strip;
      var $60=(($59+($58<<2))|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=_fseek($56, $61, 0);
      var $63=_getbithuff(-1, 0);
      $pi=0;
      __label__ = 12; break;
    case 12: // $64
      $col=0;
      __label__ = 13; break;
    case 13: // $65
      var $66=$col;
      var $67=HEAPU16[((_raw_width)>>1)];
      var $68=((($67))&65535);
      var $69=((($66))|0) < ((($68))|0);
      if ($69) { __label__ = 14; break; } else { __label__ = 39; break; }
    case 14: // $70
      var $71=$row;
      var $72=$col;
      var $73=((($71)+($72))|0);
      var $74=($73) & 1;
      $chess=$74;
      var $75=$chess;
      var $76=((($75))|0)!=0;
      if ($76) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $77
      var $78=$pi;
      var $79=((($78)-2)|0);
      var $87 = $79;__label__ = 17; break;
    case 16: // $80
      var $81=$pi;
      var $82=HEAPU16[((_raw_width)>>1)];
      var $83=((($82))&65535);
      var $84=((($81)-($83))|0);
      var $85=((($84)-1)|0);
      var $87 = $85;__label__ = 17; break;
    case 17: // $86
      var $87;
      $pi1=$87;
      var $88=$chess;
      var $89=((($88))|0)!=0;
      if ($89) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $90
      var $91=$pi;
      var $92=HEAPU16[((_raw_width)>>1)];
      var $93=((($92))&65535);
      var $94=(((($93)<<1))|0);
      var $95=((($91)-($94))|0);
      var $103 = $95;__label__ = 20; break;
    case 19: // $96
      var $97=$pi;
      var $98=HEAPU16[((_raw_width)>>1)];
      var $99=((($98))&65535);
      var $100=((($97)-($99))|0);
      var $101=((($100)+1)|0);
      var $103 = $101;__label__ = 20; break;
    case 20: // $102
      var $103;
      $pi2=$103;
      var $104=$col;
      var $105=$chess;
      var $106=((($104))|0) <= ((($105))|0);
      if ($106) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $107
      $pi1=-1;
      __label__ = 22; break;
    case 22: // $108
      var $109=$pi1;
      var $110=((($109))|0) < 0;
      if ($110) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $111
      var $112=$pi2;
      $pi1=$112;
      __label__ = 24; break;
    case 24: // $113
      var $114=$pi2;
      var $115=((($114))|0) < 0;
      if ($115) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $116
      var $117=$pi1;
      $pi2=$117;
      __label__ = 26; break;
    case 26: // $118
      var $119=$pi1;
      var $120=((($119))|0) < 0;
      if ($120) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: // $121
      var $122=$col;
      var $123=((($122))|0) > 1;
      if ($123) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: // $124
      var $125=$pi;
      var $126=((($125)-2)|0);
      $pi2=$126;
      $pi1=$126;
      __label__ = 29; break;
    case 29: // $127
      var $128=$pi1;
      var $129=((($128))|0) < 0;
      if ($129) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: // $130
      var $145 = 0;__label__ = 32; break;
    case 31: // $131
      var $132=$pi1;
      var $133=$pixel;
      var $134=(($133+$132)|0);
      var $135=HEAPU8[($134)];
      var $136=((($135))&255);
      var $137=$pi2;
      var $138=$pixel;
      var $139=(($138+$137)|0);
      var $140=HEAPU8[($139)];
      var $141=((($140))&255);
      var $142=((($136)+($141))|0);
      var $143=($142) >> 1;
      var $145 = $143;__label__ = 32; break;
    case 32: // $144
      var $145;
      $pred=$145;
      var $146=$pred;
      var $147=$chess;
      var $148=(($huff+($147<<2))|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=_ljpeg_diff($149);
      var $151=((($146)+($150))|0);
      $val=$151;
      var $152=((($151)) & 255);
      var $153=$pi;
      var $154=$pixel;
      var $155=(($154+$153)|0);
      HEAP8[($155)]=$152;
      var $156=$val;
      var $157=($156) >> 8;
      var $158=((($157))|0)!=0;
      if ($158) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $159
      _derror();
      __label__ = 34; break;
    case 34: // $160
      var $161=$pi;
      var $162=((($161)+1)|0);
      $pi=$162;
      var $163=$pixel;
      var $164=(($163+$161)|0);
      var $165=HEAPU8[($164)];
      var $166=((($165))&255);
      var $167=((_curve+($166<<1))|0);
      var $168=HEAPU16[(($167)>>1)];
      var $169=((($168))&65535);
      $val=$169;
      var $170=$col;
      var $171=HEAPU16[((_left_margin)>>1)];
      var $172=((($171))&65535);
      var $173=((($170)-($172))|0);
      var $174=HEAPU16[((_width)>>1)];
      var $175=((($174))&65535);
      var $176=((($173))>>>0) < ((($175))>>>0);
      if ($176) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $177
      var $178=$val;
      var $179=((($178)) & 65535);
      var $180=HEAPU32[((_filters)>>2)];
      var $181=$row;
      var $182=($181) << 1;
      var $183=($182) & 14;
      var $184=$col;
      var $185=HEAPU16[((_left_margin)>>1)];
      var $186=((($185))&65535);
      var $187=((($184)-($186))|0);
      var $188=($187) & 1;
      var $189=((($183)+($188))|0);
      var $190=($189) << 1;
      var $191=($180) >>> ((($190))>>>0);
      var $192=($191) & 3;
      var $193=$row;
      var $194=HEAPU16[((_shrink)>>1)];
      var $195=((($194))&65535);
      var $196=($193) >> ((($195))|0);
      var $197=HEAPU16[((_iwidth)>>1)];
      var $198=((($197))&65535);
      var $199=((($196)*($198))|0);
      var $200=$col;
      var $201=HEAPU16[((_left_margin)>>1)];
      var $202=((($201))&65535);
      var $203=((($200)-($202))|0);
      var $204=HEAPU16[((_shrink)>>1)];
      var $205=((($204))&65535);
      var $206=($203) >> ((($205))|0);
      var $207=((($199)+($206))|0);
      var $208=HEAP32[((_image)>>2)];
      var $209=(($208+($207<<3))|0);
      var $210=(($209+($192<<1))|0);
      HEAP16[(($210)>>1)]=$179;
      __label__ = 37; break;
    case 36: // $211
      var $212=$val;
      var $213=HEAP32[((_black)>>2)];
      var $214=((($213)+($212))|0);
      HEAP32[((_black)>>2)]=$214;
      __label__ = 37; break;
    case 37: // $215
      __label__ = 38; break;
    case 38: // $216
      var $217=$col;
      var $218=((($217)+1)|0);
      $col=$218;
      __label__ = 13; break;
    case 39: // $219
      __label__ = 40; break;
    case 40: // $220
      var $221=$row;
      var $222=((($221)+1)|0);
      $row=$222;
      __label__ = 9; break;
    case 41: // $223
      var $224=$pixel;
      _free($224);
      $c=0;
      __label__ = 42; break;
    case 42: // $225
      var $226=$c;
      var $227=((($226))|0) < 2;
      if ($227) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: // $228
      var $229=$c;
      var $230=(($huff+($229<<2))|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231;
      _free($232);
      __label__ = 44; break;
    case 44: // $233
      var $234=$c;
      var $235=((($234)+1)|0);
      $c=$235;
      __label__ = 42; break;
    case 45: // $236
      var $237=HEAPU16[((_raw_width)>>1)];
      var $238=((($237))&65535);
      var $239=HEAPU16[((_width)>>1)];
      var $240=((($239))&65535);
      var $241=((($238))|0) > ((($240))|0);
      if ($241) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: // $242
      var $243=HEAPU16[((_raw_width)>>1)];
      var $244=((($243))&65535);
      var $245=HEAPU16[((_width)>>1)];
      var $246=((($245))&65535);
      var $247=((($244)-($246))|0);
      var $248=HEAPU16[((_height)>>1)];
      var $249=((($248))&65535);
      var $250=((($247)*($249))|0);
      var $251=HEAPU32[((_black)>>2)];
      var $252=Math.floor(((($251))>>>0)/((($250))>>>0));
      HEAP32[((_black)>>2)]=$252;
      __label__ = 47; break;
    case 47: // $253
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_262_load_raw["X"]=1;
// Warning: Arithmetic on 64-bit integers in mode 1 is rounded and flaky, like mode 0, but much slower!
// Warning: Cannot correct overflows of this many bits: 64 at line 17596
// Warning: Cannot correct overflows of this many bits: 64 at line 17642

function _kodak_65000_decode($out, $bsize) {
  var __stackBase__  = STACKTOP; STACKTOP += 788; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $c;
      var $blen=__stackBase__;
      var $raw=__stackBase__+768;
      var $bitbuf=__stackBase__+780;
      var $save;
      var $bits;
      var $i;
      var $j;
      var $len;
      var $diff;
      $2=$out;
      $3=$bsize;
      (HEAP32[(($bitbuf)>>2)]=[0,0].slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=[0,0].slice(0)[1]);
      $bits=0;
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_ftell($4);
      $save=$5;
      var $6=$3;
      var $7=((($6)+3)|0);
      var $8=($7) & -4;
      $3=$8;
      $i=0;
      __label__ = 1; break;
    case 1: // $9
      var $10=$i;
      var $11=$3;
      var $12=((($10))|0) < ((($11))|0);
      if ($12) { __label__ = 2; break; } else { __label__ = 15; break; }
    case 2: // $13
      var $14=HEAP32[((_ifp)>>2)];
      var $15=_getc_unlocked($14);
      var $16=((($15)) & 255);
      $c=$16;
      var $17=$c;
      var $18=((($17))&255);
      var $19=($18) & 15;
      var $20=((($19)) & 255);
      var $21=$i;
      var $22=(($blen+$21)|0);
      HEAP8[($22)]=$20;
      var $23=((($20))&255);
      var $24=((($23))|0) > 12;
      if ($24) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $25
      var $26=$c;
      var $27=((($26))&255);
      var $28=($27) >> 4;
      var $29=((($28)) & 255);
      var $30=$i;
      var $31=((($30)+1)|0);
      var $32=(($blen+$31)|0);
      HEAP8[($32)]=$29;
      var $33=((($29))&255);
      var $34=((($33))|0) > 12;
      if ($34) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: // $35
      var $36=HEAP32[((_ifp)>>2)];
      var $37=$save;
      var $38=_fseek($36, $37, 0);
      $i=0;
      __label__ = 5; break;
    case 5: // $39
      var $40=$i;
      var $41=$3;
      var $42=((($40))|0) < ((($41))|0);
      if ($42) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: // $43
      var $44=(($raw)|0);
      _read_shorts($44, 6);
      var $45=(($raw)|0);
      var $46=HEAPU16[(($45)>>1)];
      var $47=((($46))&65535);
      var $48=($47) >> 12;
      var $49=($48) << 8;
      var $50=(($raw+4)|0);
      var $51=HEAPU16[(($50)>>1)];
      var $52=((($51))&65535);
      var $53=($52) >> 12;
      var $54=($53) << 4;
      var $55=($49) | ($54);
      var $56=(($raw+8)|0);
      var $57=HEAPU16[(($56)>>1)];
      var $58=((($57))&65535);
      var $59=($58) >> 12;
      var $60=($55) | ($59);
      var $61=((($60)) & 65535);
      var $62=$i;
      var $63=$2;
      var $64=(($63+($62<<1))|0);
      HEAP16[(($64)>>1)]=$61;
      var $65=(($raw+2)|0);
      var $66=HEAPU16[(($65)>>1)];
      var $67=((($66))&65535);
      var $68=($67) >> 12;
      var $69=($68) << 8;
      var $70=(($raw+6)|0);
      var $71=HEAPU16[(($70)>>1)];
      var $72=((($71))&65535);
      var $73=($72) >> 12;
      var $74=($73) << 4;
      var $75=($69) | ($74);
      var $76=(($raw+10)|0);
      var $77=HEAPU16[(($76)>>1)];
      var $78=((($77))&65535);
      var $79=($78) >> 12;
      var $80=($75) | ($79);
      var $81=((($80)) & 65535);
      var $82=$i;
      var $83=((($82)+1)|0);
      var $84=$2;
      var $85=(($84+($83<<1))|0);
      HEAP16[(($85)>>1)]=$81;
      $j=0;
      __label__ = 7; break;
    case 7: // $86
      var $87=$j;
      var $88=((($87))|0) < 6;
      if ($88) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $89
      var $90=$j;
      var $91=(($raw+($90<<1))|0);
      var $92=HEAPU16[(($91)>>1)];
      var $93=((($92))&65535);
      var $94=($93) & 4095;
      var $95=((($94)) & 65535);
      var $96=$i;
      var $97=((($96)+2)|0);
      var $98=$j;
      var $99=((($97)+($98))|0);
      var $100=$2;
      var $101=(($100+($99<<1))|0);
      HEAP16[(($101)>>1)]=$95;
      __label__ = 9; break;
    case 9: // $102
      var $103=$j;
      var $104=((($103)+1)|0);
      $j=$104;
      __label__ = 7; break;
    case 10: // $105
      __label__ = 11; break;
    case 11: // $106
      var $107=$i;
      var $108=((($107)+8)|0);
      $i=$108;
      __label__ = 5; break;
    case 12: // $109
      $1=1;
      __label__ = 30; break;
    case 13: // $110
      __label__ = 14; break;
    case 14: // $111
      var $112=$i;
      var $113=((($112)+2)|0);
      $i=$113;
      __label__ = 1; break;
    case 15: // $114
      var $115=$3;
      var $116=($115) & 7;
      var $117=((($116))|0)==4;
      if ($117) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $118
      var $119=HEAP32[((_ifp)>>2)];
      var $120=_getc_unlocked($119);
      var $121=($120) << 8;
      var $122=(tempBigIntD=((($121))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      (HEAP32[(($bitbuf)>>2)]=$122.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$122.slice(0).slice(0)[1]);
      var $123=HEAP32[((_ifp)>>2)];
      var $124=_getc_unlocked($123);
      var $125=(tempBigIntD=((($124))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      var $126=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $127=(tempBigIntP=(tempI64=($126.slice(0)),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296)))+((($125)[1] <= 2147483648 ? (((($125)[0])>>>0)+(((($125)[1])>>>0)*4294967296)) : (((($125)[0])|0)+(1+((($125)[1])|0))*4294967296))),[((tempBigIntP>>>0)>>>0),((Math.min(Math.floor(tempBigIntP/4294967296), 4294967295))>>>0)]);
      (HEAP32[(($bitbuf)>>2)]=$127.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$127.slice(0).slice(0)[1]);
      $bits=16;
      __label__ = 17; break;
    case 17: // $128
      $i=0;
      __label__ = 18; break;
    case 18: // $129
      var $130=$i;
      var $131=$3;
      var $132=((($130))|0) < ((($131))|0);
      if ($132) { __label__ = 19; break; } else { __label__ = 29; break; }
    case 19: // $133
      var $134=$i;
      var $135=(($blen+$134)|0);
      var $136=HEAPU8[($135)];
      var $137=((($136))&255);
      $len=$137;
      var $138=$bits;
      var $139=$len;
      var $140=((($138))|0) < ((($139))|0);
      if ($140) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: // $141
      $j=0;
      __label__ = 21; break;
    case 21: // $142
      var $143=$j;
      var $144=((($143))|0) < 32;
      if ($144) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $145
      var $146=HEAP32[((_ifp)>>2)];
      var $147=_getc_unlocked($146);
      var $148=(tempBigIntD=((($147))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      var $149=$bits;
      var $150=$j;
      var $151=($150) ^ 8;
      var $152=((($149)+($151))|0);
      var $153=[((((($152))>>>0))>>>0),0];
      var $154=[($148.slice(0))[0] << ($153), (($148.slice(0))[1] << ($153)) | ((($148.slice(0))[0]&((Math.pow(2, ($153))-1)<<(32-($153)))) >>> (32-($153)))];
      var $155=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $156=(tempBigIntP=(tempI64=($155.slice(0)),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296)))+((($154)[1] <= 2147483648 ? (((($154)[0])>>>0)+(((($154)[1])>>>0)*4294967296)) : (((($154)[0])|0)+(1+((($154)[1])|0))*4294967296))),[((tempBigIntP>>>0)>>>0),((Math.min(Math.floor(tempBigIntP/4294967296), 4294967295))>>>0)]);
      (HEAP32[(($bitbuf)>>2)]=$156.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$156.slice(0).slice(0)[1]);
      __label__ = 23; break;
    case 23: // $157
      var $158=$j;
      var $159=((($158)+8)|0);
      $j=$159;
      __label__ = 21; break;
    case 24: // $160
      var $161=$bits;
      var $162=((($161)+32)|0);
      $bits=$162;
      __label__ = 25; break;
    case 25: // $163
      var $164=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $165=$len;
      var $166=((16-($165))|0);
      var $167=65535 >> ((($166))|0);
      var $168=(tempBigIntD=((($167))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      var $169=[($164.slice(0))[0] & ($168)[0], ($164.slice(0))[1] & ($168)[1]];
      var $170=((($169.slice(0))[0]) & 4294967295);
      $diff=$170;
      var $171=$len;
      var $172=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $173=[((((($171))>>>0))>>>0),0];
      var $174=[(($172.slice(0))[0] >>> ((($173))|0)) | ((($172.slice(0))[1]&(Math.pow(2, ((($173))|0))-1))<<(32-((($173))|0))),($172.slice(0))[1] >>> ((($173))|0)];
      (HEAP32[(($bitbuf)>>2)]=$174.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$174.slice(0).slice(0)[1]);
      var $175=$len;
      var $176=$bits;
      var $177=((($176)-($175))|0);
      $bits=$177;
      var $178=$diff;
      var $179=$len;
      var $180=((($179)-1)|0);
      var $181=1 << ($180);
      var $182=($178) & ($181);
      var $183=((($182))|0)==0;
      if ($183) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: // $184
      var $185=$len;
      var $186=1 << ($185);
      var $187=((($186)-1)|0);
      var $188=$diff;
      var $189=((($188)-($187))|0);
      $diff=$189;
      __label__ = 27; break;
    case 27: // $190
      var $191=$diff;
      var $192=((($191)) & 65535);
      var $193=$i;
      var $194=$2;
      var $195=(($194+($193<<1))|0);
      HEAP16[(($195)>>1)]=$192;
      __label__ = 28; break;
    case 28: // $196
      var $197=$i;
      var $198=((($197)+1)|0);
      $i=$198;
      __label__ = 18; break;
    case 29: // $199
      $1=0;
      __label__ = 30; break;
    case 30: // $200
      var $201=$1;
      STACKTOP = __stackBase__;
      return $201;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_65000_decode["X"]=1;

function _kodak_65000_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 520; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $buf=__stackBase__;
      var $row;
      var $col;
      var $len;
      var $pred=__stackBase__+512;
      var $ret;
      var $i;
      $row=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$row;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 20; break; }
    case 2: // $6
      $col=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$col;
      var $9=HEAPU16[((_width)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 18; break; }
    case 4: // $12
      var $13=(($pred+4)|0);
      HEAP32[(($13)>>2)]=0;
      var $14=(($pred)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=HEAPU16[((_width)>>1)];
      var $16=((($15))&65535);
      var $17=$col;
      var $18=((($16)-($17))|0);
      var $19=256 < ((($18))|0);
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $20
      var $27 = 256;__label__ = 7; break;
    case 6: // $21
      var $22=HEAPU16[((_width)>>1)];
      var $23=((($22))&65535);
      var $24=$col;
      var $25=((($23)-($24))|0);
      var $27 = $25;__label__ = 7; break;
    case 7: // $26
      var $27;
      $len=$27;
      var $28=(($buf)|0);
      var $29=$len;
      var $30=_kodak_65000_decode($28, $29);
      $ret=$30;
      $i=0;
      __label__ = 8; break;
    case 8: // $31
      var $32=$i;
      var $33=$len;
      var $34=((($32))|0) < ((($33))|0);
      if ($34) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: // $35
      var $36=$ret;
      var $37=((($36))|0)!=0;
      if ($37) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $38
      var $39=$i;
      var $40=(($buf+($39<<1))|0);
      var $41=HEAP16[(($40)>>1)];
      var $42=((($41) << 16) >> 16);
      var $54 = $42;__label__ = 12; break;
    case 11: // $43
      var $44=$i;
      var $45=(($buf+($44<<1))|0);
      var $46=HEAP16[(($45)>>1)];
      var $47=((($46) << 16) >> 16);
      var $48=$i;
      var $49=($48) & 1;
      var $50=(($pred+($49<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)+($47))|0);
      HEAP32[(($50)>>2)]=$52;
      var $54 = $52;__label__ = 12; break;
    case 12: // $53
      var $54;
      var $55=((_curve+($54<<1))|0);
      var $56=HEAPU16[(($55)>>1)];
      var $57=HEAPU32[((_filters)>>2)];
      var $58=$row;
      var $59=($58) << 1;
      var $60=($59) & 14;
      var $61=$col;
      var $62=$i;
      var $63=((($61)+($62))|0);
      var $64=($63) & 1;
      var $65=((($60)+($64))|0);
      var $66=($65) << 1;
      var $67=($57) >>> ((($66))>>>0);
      var $68=($67) & 3;
      var $69=$row;
      var $70=HEAPU16[((_shrink)>>1)];
      var $71=((($70))&65535);
      var $72=($69) >> ((($71))|0);
      var $73=HEAPU16[((_iwidth)>>1)];
      var $74=((($73))&65535);
      var $75=((($72)*($74))|0);
      var $76=$col;
      var $77=$i;
      var $78=((($76)+($77))|0);
      var $79=HEAPU16[((_shrink)>>1)];
      var $80=((($79))&65535);
      var $81=($78) >> ((($80))|0);
      var $82=((($75)+($81))|0);
      var $83=HEAP32[((_image)>>2)];
      var $84=(($83+($82<<3))|0);
      var $85=(($84+($68<<1))|0);
      HEAP16[(($85)>>1)]=$56;
      var $86=((($56))&65535);
      var $87=($86) >> 12;
      var $88=((($87))|0)!=0;
      if ($88) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $89
      _derror();
      __label__ = 14; break;
    case 14: // $90
      __label__ = 15; break;
    case 15: // $91
      var $92=$i;
      var $93=((($92)+1)|0);
      $i=$93;
      __label__ = 8; break;
    case 16: // $94
      __label__ = 17; break;
    case 17: // $95
      var $96=$col;
      var $97=((($96)+256)|0);
      $col=$97;
      __label__ = 3; break;
    case 18: // $98
      __label__ = 19; break;
    case 19: // $99
      var $100=$row;
      var $101=((($100)+1)|0);
      $row=$101;
      __label__ = 1; break;
    case 20: // $102
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_65000_load_raw["X"]=1;

function _kodak_ycbcr_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 796; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $buf=__stackBase__;
      var $bp;
      var $row;
      var $col;
      var $len;
      var $c;
      var $i;
      var $j;
      var $k;
      var $y=__stackBase__+768;
      var $cb;
      var $cr;
      var $rgb=__stackBase__+784;
      var $ip;
      $row=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$row;
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 38; break; }
    case 2: // $6
      $col=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$col;
      var $9=HEAPU16[((_width)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 36; break; }
    case 4: // $12
      var $13=HEAPU16[((_width)>>1)];
      var $14=((($13))&65535);
      var $15=$col;
      var $16=((($14)-($15))|0);
      var $17=128 < ((($16))|0);
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $18
      var $25 = 128;__label__ = 7; break;
    case 6: // $19
      var $20=HEAPU16[((_width)>>1)];
      var $21=((($20))&65535);
      var $22=$col;
      var $23=((($21)-($22))|0);
      var $25 = $23;__label__ = 7; break;
    case 7: // $24
      var $25;
      $len=$25;
      var $26=(($buf)|0);
      var $27=$len;
      var $28=((($27)*3)|0);
      var $29=_kodak_65000_decode($26, $28);
      $cr=0;
      $cb=0;
      var $30=(($y+8)|0);
      var $31=(($30+4)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=(($y)|0);
      var $33=(($32+4)|0);
      HEAP32[(($33)>>2)]=0;
      var $34=(($buf)|0);
      $bp=$34;
      $i=0;
      __label__ = 8; break;
    case 8: // $35
      var $36=$i;
      var $37=$len;
      var $38=((($36))|0) < ((($37))|0);
      if ($38) { __label__ = 9; break; } else { __label__ = 34; break; }
    case 9: // $39
      var $40=$bp;
      var $41=(($40+8)|0);
      var $42=HEAP16[(($41)>>1)];
      var $43=((($42) << 16) >> 16);
      var $44=$cb;
      var $45=((($44)+($43))|0);
      $cb=$45;
      var $46=$bp;
      var $47=(($46+10)|0);
      var $48=HEAP16[(($47)>>1)];
      var $49=((($48) << 16) >> 16);
      var $50=$cr;
      var $51=((($50)+($49))|0);
      $cr=$51;
      var $52=$cb;
      var $53=$cr;
      var $54=((($52)+($53))|0);
      var $55=((($54)+2)|0);
      var $56=($55) >> 2;
      var $57=(((-($56)))|0);
      var $58=(($rgb+4)|0);
      HEAP32[(($58)>>2)]=$57;
      var $59=(($rgb+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$cb;
      var $62=((($60)+($61))|0);
      var $63=(($rgb+8)|0);
      HEAP32[(($63)>>2)]=$62;
      var $64=(($rgb+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$cr;
      var $67=((($65)+($66))|0);
      var $68=(($rgb)|0);
      HEAP32[(($68)>>2)]=$67;
      $j=0;
      __label__ = 10; break;
    case 10: // $69
      var $70=$j;
      var $71=((($70))|0) < 2;
      if ($71) { __label__ = 11; break; } else { __label__ = 32; break; }
    case 11: // $72
      $k=0;
      __label__ = 12; break;
    case 12: // $73
      var $74=$k;
      var $75=((($74))|0) < 2;
      if ($75) { __label__ = 13; break; } else { __label__ = 30; break; }
    case 13: // $76
      var $77=$k;
      var $78=($77) ^ 1;
      var $79=$j;
      var $80=(($y+($79<<3))|0);
      var $81=(($80+($78<<2))|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$bp;
      var $84=(($83+2)|0);
      $bp=$84;
      var $85=HEAP16[(($83)>>1)];
      var $86=((($85) << 16) >> 16);
      var $87=((($82)+($86))|0);
      var $88=$k;
      var $89=$j;
      var $90=(($y+($89<<3))|0);
      var $91=(($90+($88<<2))|0);
      HEAP32[(($91)>>2)]=$87;
      var $92=($87) >> 10;
      var $93=((($92))|0)!=0;
      if ($93) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $94
      _derror();
      __label__ = 15; break;
    case 15: // $95
      var $96=$row;
      var $97=$j;
      var $98=((($96)+($97))|0);
      var $99=HEAPU16[((_width)>>1)];
      var $100=((($99))&65535);
      var $101=((($98)*($100))|0);
      var $102=$col;
      var $103=((($101)+($102))|0);
      var $104=$i;
      var $105=((($103)+($104))|0);
      var $106=$k;
      var $107=((($105)+($106))|0);
      var $108=HEAP32[((_image)>>2)];
      var $109=(($108+($107<<3))|0);
      var $110=(($109)|0);
      $ip=$110;
      $c=0;
      __label__ = 16; break;
    case 16: // $111
      var $112=$c;
      var $113=((($112))|0) < 3;
      if ($113) { __label__ = 17; break; } else { __label__ = 28; break; }
    case 17: // $114
      var $115=$k;
      var $116=$j;
      var $117=(($y+($116<<3))|0);
      var $118=(($117+($115<<2))|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$c;
      var $121=(($rgb+($120<<2))|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=((($119)+($122))|0);
      var $124=((($123))|0) < 4095;
      if ($124) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $125
      var $126=$k;
      var $127=$j;
      var $128=(($y+($127<<3))|0);
      var $129=(($128+($126<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$c;
      var $132=(($rgb+($131<<2))|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($130)+($133))|0);
      var $137 = $134;__label__ = 20; break;
    case 19: // $135
      var $137 = 4095;__label__ = 20; break;
    case 20: // $136
      var $137;
      var $138=0 > ((($137))|0);
      if ($138) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $139
      var $165 = 0;__label__ = 26; break;
    case 22: // $140
      var $141=$k;
      var $142=$j;
      var $143=(($y+($142<<3))|0);
      var $144=(($143+($141<<2))|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$c;
      var $147=(($rgb+($146<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=((($145)+($148))|0);
      var $150=((($149))|0) < 4095;
      if ($150) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $151
      var $152=$k;
      var $153=$j;
      var $154=(($y+($153<<3))|0);
      var $155=(($154+($152<<2))|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$c;
      var $158=(($rgb+($157<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=((($156)+($159))|0);
      var $163 = $160;__label__ = 25; break;
    case 24: // $161
      var $163 = 4095;__label__ = 25; break;
    case 25: // $162
      var $163;
      var $165 = $163;__label__ = 26; break;
    case 26: // $164
      var $165;
      var $166=((_curve+($165<<1))|0);
      var $167=HEAP16[(($166)>>1)];
      var $168=$c;
      var $169=$ip;
      var $170=(($169+($168<<1))|0);
      HEAP16[(($170)>>1)]=$167;
      __label__ = 27; break;
    case 27: // $171
      var $172=$c;
      var $173=((($172)+1)|0);
      $c=$173;
      __label__ = 16; break;
    case 28: // $174
      __label__ = 29; break;
    case 29: // $175
      var $176=$k;
      var $177=((($176)+1)|0);
      $k=$177;
      __label__ = 12; break;
    case 30: // $178
      __label__ = 31; break;
    case 31: // $179
      var $180=$j;
      var $181=((($180)+1)|0);
      $j=$181;
      __label__ = 10; break;
    case 32: // $182
      __label__ = 33; break;
    case 33: // $183
      var $184=$i;
      var $185=((($184)+2)|0);
      $i=$185;
      var $186=$bp;
      var $187=(($186+4)|0);
      $bp=$187;
      __label__ = 8; break;
    case 34: // $188
      __label__ = 35; break;
    case 35: // $189
      var $190=$col;
      var $191=((($190)+128)|0);
      $col=$191;
      __label__ = 3; break;
    case 36: // $192
      __label__ = 37; break;
    case 37: // $193
      var $194=$row;
      var $195=((($194)+2)|0);
      $row=$195;
      __label__ = 1; break;
    case 38: // $196
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_ycbcr_load_raw["X"]=1;

function _kodak_rgb_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 1548; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $buf=__stackBase__;
      var $bp;
      var $row;
      var $col;
      var $len;
      var $c;
      var $i;
      var $rgb=__stackBase__+1536;
      var $ip;
      var $1=HEAP32[((_image)>>2)];
      var $2=(($1)|0);
      var $3=(($2)|0);
      $ip=$3;
      $row=0;
      __label__ = 1; break;
    case 1: // $4
      var $5=$row;
      var $6=HEAPU16[((_height)>>1)];
      var $7=((($6))&65535);
      var $8=((($5))|0) < ((($7))|0);
      if ($8) { __label__ = 2; break; } else { __label__ = 21; break; }
    case 2: // $9
      $col=0;
      __label__ = 3; break;
    case 3: // $10
      var $11=$col;
      var $12=HEAPU16[((_width)>>1)];
      var $13=((($12))&65535);
      var $14=((($11))|0) < ((($13))|0);
      if ($14) { __label__ = 4; break; } else { __label__ = 19; break; }
    case 4: // $15
      var $16=HEAPU16[((_width)>>1)];
      var $17=((($16))&65535);
      var $18=$col;
      var $19=((($17)-($18))|0);
      var $20=256 < ((($19))|0);
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $21
      var $28 = 256;__label__ = 7; break;
    case 6: // $22
      var $23=HEAPU16[((_width)>>1)];
      var $24=((($23))&65535);
      var $25=$col;
      var $26=((($24)-($25))|0);
      var $28 = $26;__label__ = 7; break;
    case 7: // $27
      var $28;
      $len=$28;
      var $29=(($buf)|0);
      var $30=$len;
      var $31=((($30)*3)|0);
      var $32=_kodak_65000_decode($29, $31);
      var $33=(($rgb)|0);
      var $34=$33;
      for (var $$dest = $34, $$stop = $$dest + 12; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      var $35=(($buf)|0);
      $bp=$35;
      $i=0;
      __label__ = 8; break;
    case 8: // $36
      var $37=$i;
      var $38=$len;
      var $39=((($37))|0) < ((($38))|0);
      if ($39) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: // $40
      $c=0;
      __label__ = 10; break;
    case 10: // $41
      var $42=$c;
      var $43=((($42))|0) < 3;
      if ($43) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: // $44
      var $45=$bp;
      var $46=(($45+2)|0);
      $bp=$46;
      var $47=HEAP16[(($45)>>1)];
      var $48=((($47) << 16) >> 16);
      var $49=$c;
      var $50=(($rgb+($49<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)+($48))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=((($52)) & 65535);
      var $54=$c;
      var $55=$ip;
      var $56=(($55+($54<<1))|0);
      HEAP16[(($56)>>1)]=$53;
      var $57=((($53))&65535);
      var $58=($57) >> 12;
      var $59=((($58))|0)!=0;
      if ($59) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $60
      _derror();
      __label__ = 13; break;
    case 13: // $61
      __label__ = 14; break;
    case 14: // $62
      var $63=$c;
      var $64=((($63)+1)|0);
      $c=$64;
      __label__ = 10; break;
    case 15: // $65
      __label__ = 16; break;
    case 16: // $66
      var $67=$i;
      var $68=((($67)+1)|0);
      $i=$68;
      var $69=$ip;
      var $70=(($69+8)|0);
      $ip=$70;
      __label__ = 8; break;
    case 17: // $71
      __label__ = 18; break;
    case 18: // $72
      var $73=$col;
      var $74=((($73)+256)|0);
      $col=$74;
      __label__ = 3; break;
    case 19: // $75
      __label__ = 20; break;
    case 20: // $76
      var $77=$row;
      var $78=((($77)+1)|0);
      $row=$78;
      __label__ = 1; break;
    case 21: // $79
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_kodak_rgb_load_raw["X"]=1;

function _kodak_thumb_load_raw() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      var $1=HEAPU32[((_thumb_misc)>>2)];
      var $2=($1) >>> 5;
      HEAP32[((_colors)>>2)]=$2;
      $row=0;
      __label__ = 1; break;
    case 1: // $3
      var $4=$row;
      var $5=HEAPU16[((_height)>>1)];
      var $6=((($5))&65535);
      var $7=((($4))|0) < ((($6))|0);
      if ($7) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $8
      $col=0;
      __label__ = 3; break;
    case 3: // $9
      var $10=$col;
      var $11=HEAPU16[((_width)>>1)];
      var $12=((($11))&65535);
      var $13=((($10))|0) < ((($12))|0);
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $14
      var $15=$row;
      var $16=HEAPU16[((_width)>>1)];
      var $17=((($16))&65535);
      var $18=((($15)*($17))|0);
      var $19=$col;
      var $20=((($18)+($19))|0);
      var $21=HEAP32[((_image)>>2)];
      var $22=(($21+($20<<3))|0);
      var $23=(($22)|0);
      var $24=HEAP32[((_colors)>>2)];
      _read_shorts($23, $24);
      __label__ = 5; break;
    case 5: // $25
      var $26=$col;
      var $27=((($26)+1)|0);
      $col=$27;
      __label__ = 3; break;
    case 6: // $28
      __label__ = 7; break;
    case 7: // $29
      var $30=$row;
      var $31=((($30)+1)|0);
      $row=$31;
      __label__ = 1; break;
    case 8: // $32
      var $33=HEAP32[((_thumb_misc)>>2)];
      var $34=($33) & 31;
      var $35=1 << ($34);
      var $36=((($35)-1)|0);
      HEAP32[((_maximum)>>2)]=$36;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _sony_decrypt($data, $len, $start, $key) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$data;
      $2=$len;
      $3=$start;
      $4=$key;
      var $5=$3;
      var $6=((($5))|0)!=0;
      if ($6) { __label__ = 1; break; } else { __label__ = 14; break; }
    case 1: // $7
      HEAP32[((_sony_decrypt_p)>>2)]=0;
      __label__ = 2; break;
    case 2: // $8
      var $9=HEAPU32[((_sony_decrypt_p)>>2)];
      var $10=((($9))>>>0) < 4;
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: // $11
      var $12=$4;
      var $13=((($12)*48828125)|0);
      var $14=((($13)+1)|0);
      $4=$14;
      var $15=HEAP32[((_sony_decrypt_p)>>2)];
      var $16=((_sony_decrypt_pad+($15<<2))|0);
      HEAP32[(($16)>>2)]=$14;
      __label__ = 4; break;
    case 4: // $17
      var $18=HEAP32[((_sony_decrypt_p)>>2)];
      var $19=((($18)+1)|0);
      HEAP32[((_sony_decrypt_p)>>2)]=$19;
      __label__ = 2; break;
    case 5: // $20
      var $21=HEAP32[((((_sony_decrypt_pad+12)|0))>>2)];
      var $22=($21) << 1;
      var $23=HEAP32[((((_sony_decrypt_pad)|0))>>2)];
      var $24=HEAP32[((((_sony_decrypt_pad+8)|0))>>2)];
      var $25=($23) ^ ($24);
      var $26=($25) >>> 31;
      var $27=($22) | ($26);
      HEAP32[((((_sony_decrypt_pad+12)|0))>>2)]=$27;
      HEAP32[((_sony_decrypt_p)>>2)]=4;
      __label__ = 6; break;
    case 6: // $28
      var $29=HEAPU32[((_sony_decrypt_p)>>2)];
      var $30=((($29))>>>0) < 127;
      if ($30) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: // $31
      var $32=HEAP32[((_sony_decrypt_p)>>2)];
      var $33=((($32)-4)|0);
      var $34=((_sony_decrypt_pad+($33<<2))|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP32[((_sony_decrypt_p)>>2)];
      var $37=((($36)-2)|0);
      var $38=((_sony_decrypt_pad+($37<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=($35) ^ ($39);
      var $41=($40) << 1;
      var $42=HEAP32[((_sony_decrypt_p)>>2)];
      var $43=((($42)-3)|0);
      var $44=((_sony_decrypt_pad+($43<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=HEAP32[((_sony_decrypt_p)>>2)];
      var $47=((($46)-1)|0);
      var $48=((_sony_decrypt_pad+($47<<2))|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=($45) ^ ($49);
      var $51=($50) >>> 31;
      var $52=($41) | ($51);
      var $53=HEAP32[((_sony_decrypt_p)>>2)];
      var $54=((_sony_decrypt_pad+($53<<2))|0);
      HEAP32[(($54)>>2)]=$52;
      __label__ = 8; break;
    case 8: // $55
      var $56=HEAP32[((_sony_decrypt_p)>>2)];
      var $57=((($56)+1)|0);
      HEAP32[((_sony_decrypt_p)>>2)]=$57;
      __label__ = 6; break;
    case 9: // $58
      HEAP32[((_sony_decrypt_p)>>2)]=0;
      __label__ = 10; break;
    case 10: // $59
      var $60=HEAPU32[((_sony_decrypt_p)>>2)];
      var $61=((($60))>>>0) < 127;
      if ($61) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: // $62
      var $63=HEAP32[((_sony_decrypt_p)>>2)];
      var $64=((_sony_decrypt_pad+($63<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_htonl($65);
      var $67=HEAP32[((_sony_decrypt_p)>>2)];
      var $68=((_sony_decrypt_pad+($67<<2))|0);
      HEAP32[(($68)>>2)]=$66;
      __label__ = 12; break;
    case 12: // $69
      var $70=HEAP32[((_sony_decrypt_p)>>2)];
      var $71=((($70)+1)|0);
      HEAP32[((_sony_decrypt_p)>>2)]=$71;
      __label__ = 10; break;
    case 13: // $72
      __label__ = 14; break;
    case 14: // $73
      __label__ = 15; break;
    case 15: // $74
      var $75=$2;
      var $76=((($75)-1)|0);
      $2=$76;
      var $77=((($75))|0)!=0;
      if ($77) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $78
      var $79=HEAP32[((_sony_decrypt_p)>>2)];
      var $80=((($79)+1)|0);
      var $81=($80) & 127;
      var $82=((_sony_decrypt_pad+($81<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=HEAP32[((_sony_decrypt_p)>>2)];
      var $85=((($84)+65)|0);
      var $86=($85) & 127;
      var $87=((_sony_decrypt_pad+($86<<2))|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=($83) ^ ($88);
      var $90=HEAP32[((_sony_decrypt_p)>>2)];
      var $91=((($90)+1)|0);
      HEAP32[((_sony_decrypt_p)>>2)]=$91;
      var $92=($90) & 127;
      var $93=((_sony_decrypt_pad+($92<<2))|0);
      HEAP32[(($93)>>2)]=$89;
      var $94=$1;
      var $95=(($94+4)|0);
      $1=$95;
      var $96=HEAP32[(($94)>>2)];
      var $97=($96) ^ ($89);
      HEAP32[(($94)>>2)]=$97;
      __label__ = 15; break;
    case 17: // $98
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sony_decrypt["X"]=1;

function _sony_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $head=__stackBase__;
      var $pixel;
      var $i;
      var $key;
      var $row;
      var $col;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 200896, 0);
      var $3=HEAP32[((_ifp)>>2)];
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_getc_unlocked($4);
      var $6=(((($5)<<2))|0);
      var $7=((($6)-1)|0);
      var $8=_fseek($3, $7, 1);
      HEAP16[((_order)>>1)]=19789;
      var $9=_get4();
      $key=$9;
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_fseek($10, 164600, 0);
      var $12=(($head)|0);
      var $13=HEAP32[((_ifp)>>2)];
      var $14=_fread($12, 1, 40, $13);
      var $15=(($head)|0);
      var $16=$15;
      var $17=$key;
      _sony_decrypt($16, 10, 1, $17);
      $i=26;
      __label__ = 1; break;
    case 1: // $18
      var $19=$i;
      var $20=((($19)-1)|0);
      $i=$20;
      var $21=((($19))>>>0) > 22;
      if ($21) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $22
      var $23=$key;
      var $24=($23) << 8;
      var $25=$i;
      var $26=(($head+$25)|0);
      var $27=HEAPU8[($26)];
      var $28=((($27))&255);
      var $29=($24) | ($28);
      $key=$29;
      __label__ = 1; break;
    case 3: // $30
      var $31=HEAP32[((_ifp)>>2)];
      var $32=HEAP32[((_data_offset)>>2)];
      var $33=_fseek($31, $32, 0);
      var $34=HEAPU16[((_raw_width)>>1)];
      var $35=((($34))&65535);
      var $36=_calloc($35, 2);
      var $37=$36;
      $pixel=$37;
      var $38=$pixel;
      var $39=$38;
      _merror($39, ((__str29)|0));
      $row=0;
      __label__ = 4; break;
    case 4: // $40
      var $41=$row;
      var $42=HEAPU16[((_height)>>1)];
      var $43=((($42))&65535);
      var $44=((($41))>>>0) < ((($43))>>>0);
      if ($44) { __label__ = 5; break; } else { __label__ = 19; break; }
    case 5: // $45
      var $46=$pixel;
      var $47=$46;
      var $48=HEAPU16[((_raw_width)>>1)];
      var $49=((($48))&65535);
      var $50=HEAP32[((_ifp)>>2)];
      var $51=_fread($47, 2, $49, $50);
      var $52=HEAPU16[((_raw_width)>>1)];
      var $53=((($52))&65535);
      var $54=((($51))>>>0) < ((($53))>>>0);
      if ($54) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $55
      _derror();
      __label__ = 7; break;
    case 7: // $56
      var $57=$pixel;
      var $58=$57;
      var $59=HEAPU16[((_raw_width)>>1)];
      var $60=((($59))&65535);
      var $61=((((($60))|0)/2)|0);
      var $62=$row;
      var $63=((($62))|0)!=0;
      var $64=($63) ^ 1;
      var $65=((($64))&1);
      var $66=$key;
      _sony_decrypt($58, $61, $65, $66);
      $col=9;
      __label__ = 8; break;
    case 8: // $67
      var $68=$col;
      var $69=HEAPU16[((_left_margin)>>1)];
      var $70=((($69))&65535);
      var $71=((($68))>>>0) < ((($70))>>>0);
      if ($71) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: // $72
      var $73=$col;
      var $74=$pixel;
      var $75=(($74+($73<<1))|0);
      var $76=HEAPU16[(($75)>>1)];
      var $77=((($76))&65535);
      var $78=_ntohs($77);
      var $79=HEAP32[((_black)>>2)];
      var $80=((($79)+($78))|0);
      HEAP32[((_black)>>2)]=$80;
      __label__ = 10; break;
    case 10: // $81
      var $82=$col;
      var $83=((($82)+1)|0);
      $col=$83;
      __label__ = 8; break;
    case 11: // $84
      $col=0;
      __label__ = 12; break;
    case 12: // $85
      var $86=$col;
      var $87=HEAPU16[((_width)>>1)];
      var $88=((($87))&65535);
      var $89=((($86))>>>0) < ((($88))>>>0);
      if ($89) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: // $90
      var $91=$col;
      var $92=HEAPU16[((_left_margin)>>1)];
      var $93=((($92))&65535);
      var $94=((($91)+($93))|0);
      var $95=$pixel;
      var $96=(($95+($94<<1))|0);
      var $97=HEAPU16[(($96)>>1)];
      var $98=((($97))&65535);
      var $99=_ntohs($98);
      var $100=((($99)) & 65535);
      var $101=HEAPU32[((_filters)>>2)];
      var $102=$row;
      var $103=($102) << 1;
      var $104=($103) & 14;
      var $105=$col;
      var $106=($105) & 1;
      var $107=((($104)+($106))|0);
      var $108=($107) << 1;
      var $109=($101) >>> ((($108))>>>0);
      var $110=($109) & 3;
      var $111=$row;
      var $112=HEAPU16[((_shrink)>>1)];
      var $113=((($112))&65535);
      var $114=($111) >>> ((($113))>>>0);
      var $115=HEAPU16[((_iwidth)>>1)];
      var $116=((($115))&65535);
      var $117=((($114)*($116))|0);
      var $118=$col;
      var $119=HEAPU16[((_shrink)>>1)];
      var $120=((($119))&65535);
      var $121=($118) >>> ((($120))>>>0);
      var $122=((($117)+($121))|0);
      var $123=HEAP32[((_image)>>2)];
      var $124=(($123+($122<<3))|0);
      var $125=(($124+($110<<1))|0);
      HEAP16[(($125)>>1)]=$100;
      var $126=((($100))&65535);
      var $127=($126) >> 14;
      var $128=((($127))|0)!=0;
      if ($128) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $129
      _derror();
      __label__ = 15; break;
    case 15: // $130
      __label__ = 16; break;
    case 16: // $131
      var $132=$col;
      var $133=((($132)+1)|0);
      $col=$133;
      __label__ = 12; break;
    case 17: // $134
      __label__ = 18; break;
    case 18: // $135
      var $136=$row;
      var $137=((($136)+1)|0);
      $row=$137;
      __label__ = 4; break;
    case 19: // $138
      var $139=$pixel;
      var $140=$139;
      _free($140);
      var $141=HEAPU16[((_left_margin)>>1)];
      var $142=((($141))&65535);
      var $143=((($142))|0) > 9;
      if ($143) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $144
      var $145=HEAPU16[((_left_margin)>>1)];
      var $146=((($145))&65535);
      var $147=((($146)-9)|0);
      var $148=HEAPU16[((_height)>>1)];
      var $149=((($148))&65535);
      var $150=((($147)*($149))|0);
      var $151=HEAPU32[((_black)>>2)];
      var $152=Math.floor(((($151))>>>0)/((($150))>>>0));
      HEAP32[((_black)>>2)]=$152;
      __label__ = 21; break;
    case 21: // $153
      HEAP32[((_maximum)>>2)]=16368;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sony_load_raw["X"]=1;

function _sony_arw_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 65536; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $huff=__stackBase__;
      var $i;
      var $c;
      var $n;
      var $col;
      var $row;
      var $len;
      var $diff;
      var $sum;
      $sum=0;
      $i=0;
      $n=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$i;
      var $3=((($2))|0) < 18;
      if ($3) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $4
      $c=0;
      __label__ = 3; break;
    case 3: // $5
      var $6=$c;
      var $7=$i;
      var $8=((_sony_arw_load_raw_tab+($7<<1))|0);
      var $9=HEAPU16[(($8)>>1)];
      var $10=((($9))&65535);
      var $11=($10) >> 8;
      var $12=32768 >> ((($11))|0);
      var $13=((($6))|0) < ((($12))|0);
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $14
      var $15=$i;
      var $16=((_sony_arw_load_raw_tab+($15<<1))|0);
      var $17=HEAP16[(($16)>>1)];
      var $18=$n;
      var $19=((($18)+1)|0);
      $n=$19;
      var $20=(($huff+($18<<1))|0);
      HEAP16[(($20)>>1)]=$17;
      __label__ = 5; break;
    case 5: // $21
      var $22=$c;
      var $23=((($22)+1)|0);
      $c=$23;
      __label__ = 3; break;
    case 6: // $24
      __label__ = 7; break;
    case 7: // $25
      var $26=$i;
      var $27=((($26)+1)|0);
      $i=$27;
      __label__ = 1; break;
    case 8: // $28
      var $29=_getbithuff(-1, 0);
      var $30=HEAPU16[((_raw_width)>>1)];
      var $31=((($30))&65535);
      $col=$31;
      __label__ = 9; break;
    case 9: // $32
      var $33=$col;
      var $34=((($33)-1)|0);
      $col=$34;
      var $35=((($33))|0)!=0;
      if ($35) { __label__ = 10; break; } else { __label__ = 23; break; }
    case 10: // $36
      $row=0;
      __label__ = 11; break;
    case 11: // $37
      var $38=$row;
      var $39=HEAPU16[((_raw_height)>>1)];
      var $40=((($39))&65535);
      var $41=((($40)+1)|0);
      var $42=((($38))|0) < ((($41))|0);
      if ($42) { __label__ = 12; break; } else { __label__ = 22; break; }
    case 12: // $43
      var $44=$row;
      var $45=HEAPU16[((_raw_height)>>1)];
      var $46=((($45))&65535);
      var $47=((($44))|0)==((($46))|0);
      if ($47) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $48
      $row=1;
      __label__ = 14; break;
    case 14: // $49
      var $50=(($huff)|0);
      var $51=_getbithuff(15, $50);
      $len=$51;
      var $52=$len;
      var $53=_getbithuff($52, 0);
      $diff=$53;
      var $54=$diff;
      var $55=$len;
      var $56=((($55)-1)|0);
      var $57=1 << ($56);
      var $58=($54) & ($57);
      var $59=((($58))|0)==0;
      if ($59) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $60
      var $61=$len;
      var $62=1 << ($61);
      var $63=((($62)-1)|0);
      var $64=$diff;
      var $65=((($64)-($63))|0);
      $diff=$65;
      __label__ = 16; break;
    case 16: // $66
      var $67=$diff;
      var $68=$sum;
      var $69=((($68)+($67))|0);
      $sum=$69;
      var $70=($69) >> 12;
      var $71=((($70))|0)!=0;
      if ($71) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $72
      _derror();
      __label__ = 18; break;
    case 18: // $73
      var $74=$row;
      var $75=HEAPU16[((_height)>>1)];
      var $76=((($75))&65535);
      var $77=((($74))|0) < ((($76))|0);
      if ($77) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $78
      var $79=$sum;
      var $80=((($79)) & 65535);
      var $81=HEAPU32[((_filters)>>2)];
      var $82=$row;
      var $83=($82) << 1;
      var $84=($83) & 14;
      var $85=$col;
      var $86=($85) & 1;
      var $87=((($84)+($86))|0);
      var $88=($87) << 1;
      var $89=($81) >>> ((($88))>>>0);
      var $90=($89) & 3;
      var $91=$row;
      var $92=HEAPU16[((_shrink)>>1)];
      var $93=((($92))&65535);
      var $94=($91) >> ((($93))|0);
      var $95=HEAPU16[((_iwidth)>>1)];
      var $96=((($95))&65535);
      var $97=((($94)*($96))|0);
      var $98=$col;
      var $99=HEAPU16[((_shrink)>>1)];
      var $100=((($99))&65535);
      var $101=($98) >> ((($100))|0);
      var $102=((($97)+($101))|0);
      var $103=HEAP32[((_image)>>2)];
      var $104=(($103+($102<<3))|0);
      var $105=(($104+($90<<1))|0);
      HEAP16[(($105)>>1)]=$80;
      __label__ = 20; break;
    case 20: // $106
      __label__ = 21; break;
    case 21: // $107
      var $108=$row;
      var $109=((($108)+2)|0);
      $row=$109;
      __label__ = 11; break;
    case 22: // $110
      __label__ = 9; break;
    case 23: // $111
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sony_arw_load_raw["X"]=1;

function _sony_arw2_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $data;
      var $dp;
      var $pix=__stackBase__;
      var $row;
      var $col;
      var $val;
      var $max;
      var $min;
      var $imax;
      var $imin;
      var $sh;
      var $bit;
      var $i;
      var $1=HEAPU16[((_raw_width)>>1)];
      var $2=((($1))&65535);
      var $3=_malloc($2);
      $data=$3;
      var $4=$data;
      _merror($4, ((__str30)|0));
      $row=0;
      __label__ = 1; break;
    case 1: // $5
      var $6=$row;
      var $7=HEAPU16[((_height)>>1)];
      var $8=((($7))&65535);
      var $9=((($6))|0) < ((($8))|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 32; break; }
    case 2: // $10
      var $11=$data;
      var $12=HEAPU16[((_raw_width)>>1)];
      var $13=((($12))&65535);
      var $14=HEAP32[((_ifp)>>2)];
      var $15=_fread($11, 1, $13, $14);
      var $16=$data;
      $dp=$16;
      $col=0;
      __label__ = 3; break;
    case 3: // $17
      var $18=$col;
      var $19=HEAPU16[((_raw_width)>>1)];
      var $20=((($19))&65535);
      var $21=((($20)-30)|0);
      var $22=((($18))|0) < ((($21))|0);
      if ($22) { __label__ = 4; break; } else { __label__ = 30; break; }
    case 4: // $23
      var $24=$dp;
      var $25=_sget4($24);
      $val=$25;
      var $26=2047 & ($25);
      $max=$26;
      var $27=$val;
      var $28=($27) >> 11;
      var $29=2047 & ($28);
      $min=$29;
      var $30=$val;
      var $31=($30) >> 22;
      var $32=15 & ($31);
      $imax=$32;
      var $33=$val;
      var $34=($33) >> 26;
      var $35=15 & ($34);
      $imin=$35;
      $sh=0;
      __label__ = 5; break;
    case 5: // $36
      var $37=$sh;
      var $38=((($37))|0) < 4;
      if ($38) { __label__ = 6; break; } else { var $47 = 0;__label__ = 7; break; }
    case 6: // $39
      var $40=$sh;
      var $41=128 << ($40);
      var $42=$max;
      var $43=$min;
      var $44=((($42)-($43))|0);
      var $45=((($41))|0) <= ((($44))|0);
      var $47 = $45;__label__ = 7; break;
    case 7: // $46
      var $47;
      if ($47) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $48
      __label__ = 9; break;
    case 9: // $49
      var $50=$sh;
      var $51=((($50)+1)|0);
      $sh=$51;
      __label__ = 5; break;
    case 10: // $52
      $bit=30;
      $i=0;
      __label__ = 11; break;
    case 11: // $53
      var $54=$i;
      var $55=((($54))|0) < 16;
      if ($55) { __label__ = 12; break; } else { __label__ = 22; break; }
    case 12: // $56
      var $57=$i;
      var $58=$imax;
      var $59=((($57))|0)==((($58))|0);
      if ($59) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $60
      var $61=$max;
      var $62=((($61)) & 65535);
      var $63=$i;
      var $64=(($pix+($63<<1))|0);
      HEAP16[(($64)>>1)]=$62;
      __label__ = 20; break;
    case 14: // $65
      var $66=$i;
      var $67=$imin;
      var $68=((($66))|0)==((($67))|0);
      if ($68) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $69
      var $70=$min;
      var $71=((($70)) & 65535);
      var $72=$i;
      var $73=(($pix+($72<<1))|0);
      HEAP16[(($73)>>1)]=$71;
      __label__ = 19; break;
    case 16: // $74
      var $75=$dp;
      var $76=$bit;
      var $77=($76) >> 3;
      var $78=(($75+$77)|0);
      var $79=_sget2($78);
      var $80=((($79))&65535);
      var $81=$bit;
      var $82=($81) & 7;
      var $83=($80) >> ((($82))|0);
      var $84=($83) & 127;
      var $85=$sh;
      var $86=($84) << ($85);
      var $87=$min;
      var $88=((($86)+($87))|0);
      var $89=((($88)) & 65535);
      var $90=$i;
      var $91=(($pix+($90<<1))|0);
      HEAP16[(($91)>>1)]=$89;
      var $92=$i;
      var $93=(($pix+($92<<1))|0);
      var $94=HEAPU16[(($93)>>1)];
      var $95=((($94))&65535);
      var $96=((($95))|0) > 2047;
      if ($96) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $97
      var $98=$i;
      var $99=(($pix+($98<<1))|0);
      HEAP16[(($99)>>1)]=2047;
      __label__ = 18; break;
    case 18: // $100
      var $101=$bit;
      var $102=((($101)+7)|0);
      $bit=$102;
      __label__ = 19; break;
    case 19: // $103
      __label__ = 20; break;
    case 20: // $104
      __label__ = 21; break;
    case 21: // $105
      var $106=$i;
      var $107=((($106)+1)|0);
      $i=$107;
      __label__ = 11; break;
    case 22: // $108
      $i=0;
      __label__ = 23; break;
    case 23: // $109
      var $110=$i;
      var $111=((($110))|0) < 16;
      if ($111) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: // $112
      var $113=$col;
      var $114=HEAPU16[((_width)>>1)];
      var $115=((($114))&65535);
      var $116=((($113))|0) < ((($115))|0);
      if ($116) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $117
      var $118=$i;
      var $119=(($pix+($118<<1))|0);
      var $120=HEAPU16[(($119)>>1)];
      var $121=((($120))&65535);
      var $122=($121) << 1;
      var $123=((_curve+($122<<1))|0);
      var $124=HEAPU16[(($123)>>1)];
      var $125=((($124))&65535);
      var $126=($125) >> 2;
      var $127=((($126)) & 65535);
      var $128=HEAPU32[((_filters)>>2)];
      var $129=$row;
      var $130=($129) << 1;
      var $131=($130) & 14;
      var $132=$col;
      var $133=($132) & 1;
      var $134=((($131)+($133))|0);
      var $135=($134) << 1;
      var $136=($128) >>> ((($135))>>>0);
      var $137=($136) & 3;
      var $138=$row;
      var $139=HEAPU16[((_shrink)>>1)];
      var $140=((($139))&65535);
      var $141=($138) >> ((($140))|0);
      var $142=HEAPU16[((_iwidth)>>1)];
      var $143=((($142))&65535);
      var $144=((($141)*($143))|0);
      var $145=$col;
      var $146=HEAPU16[((_shrink)>>1)];
      var $147=((($146))&65535);
      var $148=($145) >> ((($147))|0);
      var $149=((($144)+($148))|0);
      var $150=HEAP32[((_image)>>2)];
      var $151=(($150+($149<<3))|0);
      var $152=(($151+($137<<1))|0);
      HEAP16[(($152)>>1)]=$127;
      __label__ = 26; break;
    case 26: // $153
      __label__ = 27; break;
    case 27: // $154
      var $155=$i;
      var $156=((($155)+1)|0);
      $i=$156;
      var $157=$col;
      var $158=((($157)+2)|0);
      $col=$158;
      __label__ = 23; break;
    case 28: // $159
      var $160=$col;
      var $161=($160) & 1;
      var $162=((($161))|0)!=0;
      var $163=($162) ? 1 : 31;
      var $164=$col;
      var $165=((($164)-($163))|0);
      $col=$165;
      __label__ = 29; break;
    case 29: // $166
      var $167=$dp;
      var $168=(($167+16)|0);
      $dp=$168;
      __label__ = 3; break;
    case 30: // $169
      __label__ = 31; break;
    case 31: // $170
      var $171=$row;
      var $172=((($171)+1)|0);
      $row=$172;
      __label__ = 1; break;
    case 32: // $173
      var $174=$data;
      _free($174);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_sony_arw2_load_raw["X"]=1;

function _median4($p) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $min;
      var $max;
      var $sum;
      var $i;
      $1=$p;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      $sum=$4;
      $max=$4;
      $min=$4;
      $i=1;
      __label__ = 1; break;
    case 1: // $5
      var $6=$i;
      var $7=((($6))|0) < 4;
      if ($7) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $8
      var $9=$i;
      var $10=$1;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$sum;
      var $14=((($13)+($12))|0);
      $sum=$14;
      var $15=$min;
      var $16=$i;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($15))|0) > ((($19))|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $21
      var $22=$i;
      var $23=$1;
      var $24=(($23+($22<<2))|0);
      var $25=HEAP32[(($24)>>2)];
      $min=$25;
      __label__ = 4; break;
    case 4: // $26
      var $27=$max;
      var $28=$i;
      var $29=$1;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($27))|0) < ((($31))|0);
      if ($32) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $33
      var $34=$i;
      var $35=$1;
      var $36=(($35+($34<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      $max=$37;
      __label__ = 6; break;
    case 6: // $38
      __label__ = 7; break;
    case 7: // $39
      var $40=$i;
      var $41=((($40)+1)|0);
      $i=$41;
      __label__ = 1; break;
    case 8: // $42
      var $43=$sum;
      var $44=$min;
      var $45=((($43)-($44))|0);
      var $46=$max;
      var $47=((($45)-($46))|0);
      var $48=($47) >> 1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_median4["X"]=1;

function _smal_decode_segment($seg, $holes) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $hist=__stackBase__;
      var $low;
      var $high;
      var $carry;
      var $nbits;
      var $s;
      var $count;
      var $bin;
      var $next;
      var $i;
      var $sym=__stackBase__+40;
      var $diff;
      var $pred=__stackBase__+52;
      var $data;
      var $range;
      var $pix;
      var $row;
      var $col;
      $1=$seg;
      $2=$holes;
      var $3=$hist;
      assert(39 % 1 === 0, 'memcpy given ' + 39 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($3, ((_smal_decode_segment_hist)|0), 39, 1);
      $high=255;
      $carry=0;
      $nbits=8;
      var $4=$pred;
      HEAP8[($4)]=0; HEAP8[($4+1)]=0;
      $data=0;
      $range=0;
      var $5=HEAP32[((_ifp)>>2)];
      var $6=$1;
      var $7=(($6)|0);
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+1)|0);
      var $11=_fseek($5, $10, 0);
      var $12=_getbithuff(-1, 0);
      var $13=$1;
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      $pix=$16;
      __label__ = 1; break;
    case 1: // $17
      var $18=$pix;
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=(($20)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=((($18))>>>0) < ((($22))>>>0);
      if ($23) { __label__ = 2; break; } else { __label__ = 62; break; }
    case 2: // $24
      $s=0;
      __label__ = 3; break;
    case 3: // $25
      var $26=$s;
      var $27=((($26))|0) < 3;
      if ($27) { __label__ = 4; break; } else { __label__ = 47; break; }
    case 4: // $28
      var $29=$data;
      var $30=((($29))&65535);
      var $31=$nbits;
      var $32=($30) << ($31);
      var $33=$nbits;
      var $34=_getbithuff($33, 0);
      var $35=($32) | ($34);
      var $36=((($35)) & 65535);
      $data=$36;
      var $37=$carry;
      var $38=((($37))|0) < 0;
      if ($38) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: // $39
      var $40=$carry;
      var $41=((($40)+1)|0);
      var $42=$nbits;
      var $43=((($42)+($41))|0);
      $nbits=$43;
      var $44=((($43))|0) < 1;
      if ($44) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $45
      var $46=$nbits;
      var $47=((($46)-1)|0);
      var $50 = $47;__label__ = 8; break;
    case 7: // $48
      var $50 = 0;__label__ = 8; break;
    case 8: // $49
      var $50;
      $carry=$50;
      __label__ = 9; break;
    case 9: // $51
      __label__ = 10; break;
    case 10: // $52
      var $53=$nbits;
      var $54=((($53)-1)|0);
      $nbits=$54;
      var $55=((($54))|0) >= 0;
      if ($55) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: // $56
      var $57=$data;
      var $58=((($57))&65535);
      var $59=$nbits;
      var $60=($58) >> ((($59))|0);
      var $61=($60) & 255;
      var $62=((($61))|0)==255;
      if ($62) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $63
      __label__ = 14; break;
    case 13: // $64
      __label__ = 10; break;
    case 14: // $65
      var $66=$nbits;
      var $67=((($66))|0) > 0;
      if ($67) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $68
      var $69=$data;
      var $70=((($69))&65535);
      var $71=$nbits;
      var $72=((($71)-1)|0);
      var $73=1 << ($72);
      var $74=((($73)-1)|0);
      var $75=($70) & ($74);
      var $76=($75) << 1;
      var $77=$data;
      var $78=((($77))&65535);
      var $79=$data;
      var $80=((($79))&65535);
      var $81=$nbits;
      var $82=((($81)-1)|0);
      var $83=1 << ($82);
      var $84=($80) & ($83);
      var $85=($84) << 1;
      var $86=((($78)+($85))|0);
      var $87=$nbits;
      var $88=-1 << ($87);
      var $89=($86) & ($88);
      var $90=($76) | ($89);
      var $91=((($90)) & 65535);
      $data=$91;
      __label__ = 16; break;
    case 16: // $92
      var $93=$nbits;
      var $94=((($93))|0) >= 0;
      if ($94) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $95
      var $96=_getbithuff(1, 0);
      var $97=$data;
      var $98=((($97))&65535);
      var $99=((($98)+($96))|0);
      var $100=((($99)) & 65535);
      $data=$100;
      var $101=$nbits;
      var $102=((($101)-8)|0);
      $carry=$102;
      __label__ = 18; break;
    case 18: // $103
      var $104=$data;
      var $105=((($104))&65535);
      var $106=$range;
      var $107=((($106))&65535);
      var $108=((($105)-($107))|0);
      var $109=((($108)+1)|0);
      var $110=($109) & 65535;
      var $111=($110) << 2;
      var $112=((($111)-1)|0);
      var $113=$high;
      var $114=($113) >> 4;
      var $115=((((($112))|0)/((($114))|0))|0);
      $count=$115;
      $bin=0;
      __label__ = 19; break;
    case 19: // $116
      var $117=$bin;
      var $118=((($117)+5)|0);
      var $119=$s;
      var $120=(($hist+$119*13)|0);
      var $121=(($120+$118)|0);
      var $122=HEAPU8[($121)];
      var $123=((($122))&255);
      var $124=$count;
      var $125=((($123))|0) > ((($124))|0);
      if ($125) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $126
      __label__ = 21; break;
    case 21: // $127
      var $128=$bin;
      var $129=((($128)+1)|0);
      $bin=$129;
      __label__ = 19; break;
    case 22: // $130
      var $131=$bin;
      var $132=((($131)+5)|0);
      var $133=$s;
      var $134=(($hist+$133*13)|0);
      var $135=(($134+$132)|0);
      var $136=HEAPU8[($135)];
      var $137=((($136))&255);
      var $138=$high;
      var $139=($138) >> 4;
      var $140=((($137)*($139))|0);
      var $141=($140) >> 2;
      $low=$141;
      var $142=$bin;
      var $143=((($142))|0)!=0;
      if ($143) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $144
      var $145=$bin;
      var $146=((($145)+4)|0);
      var $147=$s;
      var $148=(($hist+$147*13)|0);
      var $149=(($148+$146)|0);
      var $150=HEAPU8[($149)];
      var $151=((($150))&255);
      var $152=$high;
      var $153=($152) >> 4;
      var $154=((($151)*($153))|0);
      var $155=($154) >> 2;
      $high=$155;
      __label__ = 24; break;
    case 24: // $156
      var $157=$low;
      var $158=$high;
      var $159=((($158)-($157))|0);
      $high=$159;
      $nbits=0;
      __label__ = 25; break;
    case 25: // $160
      var $161=$high;
      var $162=$nbits;
      var $163=($161) << ($162);
      var $164=((($163))|0) < 128;
      if ($164) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: // $165
      __label__ = 27; break;
    case 27: // $166
      var $167=$nbits;
      var $168=((($167)+1)|0);
      $nbits=$168;
      __label__ = 25; break;
    case 28: // $169
      var $170=$range;
      var $171=((($170))&65535);
      var $172=$low;
      var $173=((($171)+($172))|0);
      var $174=$nbits;
      var $175=($173) << ($174);
      var $176=((($175)) & 65535);
      $range=$176;
      var $177=$nbits;
      var $178=$high;
      var $179=($178) << ($177);
      $high=$179;
      var $180=$s;
      var $181=(($hist+$180*13)|0);
      var $182=(($181+1)|0);
      var $183=HEAPU8[($182)];
      var $184=((($183))&255);
      $next=$184;
      var $185=$s;
      var $186=(($hist+$185*13)|0);
      var $187=(($186+2)|0);
      var $188=HEAP8[($187)];
      var $189=((($188)+1)&255);
      HEAP8[($187)]=$189;
      var $190=((($189))&255);
      var $191=$s;
      var $192=(($hist+$191*13)|0);
      var $193=(($192+3)|0);
      var $194=HEAPU8[($193)];
      var $195=((($194))&255);
      var $196=((($190))|0) > ((($195))|0);
      if ($196) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $197
      var $198=$next;
      var $199=((($198)+1)|0);
      var $200=$s;
      var $201=(($hist+$200*13)|0);
      var $202=(($201)|0);
      var $203=HEAPU8[($202)];
      var $204=((($203))&255);
      var $205=($199) & ($204);
      $next=$205;
      var $206=$next;
      var $207=((($206)+4)|0);
      var $208=$s;
      var $209=(($hist+$208*13)|0);
      var $210=(($209+$207)|0);
      var $211=HEAPU8[($210)];
      var $212=((($211))&255);
      var $213=$next;
      var $214=((($213)+5)|0);
      var $215=$s;
      var $216=(($hist+$215*13)|0);
      var $217=(($216+$214)|0);
      var $218=HEAPU8[($217)];
      var $219=((($218))&255);
      var $220=((($212)-($219))|0);
      var $221=($220) >> 2;
      var $222=((($221)) & 255);
      var $223=$s;
      var $224=(($hist+$223*13)|0);
      var $225=(($224+3)|0);
      HEAP8[($225)]=$222;
      var $226=$s;
      var $227=(($hist+$226*13)|0);
      var $228=(($227+2)|0);
      HEAP8[($228)]=1;
      __label__ = 30; break;
    case 30: // $229
      var $230=$s;
      var $231=(($hist+$230*13)|0);
      var $232=(($231+1)|0);
      var $233=HEAPU8[($232)];
      var $234=((($233))&255);
      var $235=((($234)+4)|0);
      var $236=$s;
      var $237=(($hist+$236*13)|0);
      var $238=(($237+$235)|0);
      var $239=HEAPU8[($238)];
      var $240=((($239))&255);
      var $241=$s;
      var $242=(($hist+$241*13)|0);
      var $243=(($242+1)|0);
      var $244=HEAPU8[($243)];
      var $245=((($244))&255);
      var $246=((($245)+5)|0);
      var $247=$s;
      var $248=(($hist+$247*13)|0);
      var $249=(($248+$246)|0);
      var $250=HEAPU8[($249)];
      var $251=((($250))&255);
      var $252=((($240)-($251))|0);
      var $253=((($252))|0) > 1;
      if ($253) { __label__ = 31; break; } else { __label__ = 45; break; }
    case 31: // $254
      var $255=$bin;
      var $256=$s;
      var $257=(($hist+$256*13)|0);
      var $258=(($257+1)|0);
      var $259=HEAPU8[($258)];
      var $260=((($259))&255);
      var $261=((($255))|0) < ((($260))|0);
      if ($261) { __label__ = 32; break; } else { __label__ = 37; break; }
    case 32: // $262
      var $263=$bin;
      $i=$263;
      __label__ = 33; break;
    case 33: // $264
      var $265=$i;
      var $266=$s;
      var $267=(($hist+$266*13)|0);
      var $268=(($267+1)|0);
      var $269=HEAPU8[($268)];
      var $270=((($269))&255);
      var $271=((($265))|0) < ((($270))|0);
      if ($271) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: // $272
      var $273=$i;
      var $274=((($273)+5)|0);
      var $275=$s;
      var $276=(($hist+$275*13)|0);
      var $277=(($276+$274)|0);
      var $278=HEAP8[($277)];
      var $279=((($278)-1)&255);
      HEAP8[($277)]=$279;
      __label__ = 35; break;
    case 35: // $280
      var $281=$i;
      var $282=((($281)+1)|0);
      $i=$282;
      __label__ = 33; break;
    case 36: // $283
      __label__ = 44; break;
    case 37: // $284
      var $285=$next;
      var $286=$bin;
      var $287=((($285))|0) <= ((($286))|0);
      if ($287) { __label__ = 38; break; } else { __label__ = 43; break; }
    case 38: // $288
      var $289=$s;
      var $290=(($hist+$289*13)|0);
      var $291=(($290+1)|0);
      var $292=HEAPU8[($291)];
      var $293=((($292))&255);
      $i=$293;
      __label__ = 39; break;
    case 39: // $294
      var $295=$i;
      var $296=$bin;
      var $297=((($295))|0) < ((($296))|0);
      if ($297) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: // $298
      var $299=$i;
      var $300=((($299)+5)|0);
      var $301=$s;
      var $302=(($hist+$301*13)|0);
      var $303=(($302+$300)|0);
      var $304=HEAP8[($303)];
      var $305=((($304)+1)&255);
      HEAP8[($303)]=$305;
      __label__ = 41; break;
    case 41: // $306
      var $307=$i;
      var $308=((($307)+1)|0);
      $i=$308;
      __label__ = 39; break;
    case 42: // $309
      __label__ = 43; break;
    case 43: // $310
      __label__ = 44; break;
    case 44: // $311
      __label__ = 45; break;
    case 45: // $312
      var $313=$next;
      var $314=((($313)) & 255);
      var $315=$s;
      var $316=(($hist+$315*13)|0);
      var $317=(($316+1)|0);
      HEAP8[($317)]=$314;
      var $318=$bin;
      var $319=$s;
      var $320=(($sym+($319<<2))|0);
      HEAP32[(($320)>>2)]=$318;
      __label__ = 46; break;
    case 46: // $321
      var $322=$s;
      var $323=((($322)+1)|0);
      $s=$323;
      __label__ = 3; break;
    case 47: // $324
      var $325=(($sym+8)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=($326) << 5;
      var $328=(($sym+4)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=($329) << 2;
      var $331=($327) | ($330);
      var $332=(($sym)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=($333) & 3;
      var $335=($331) | ($334);
      var $336=((($335)) & 255);
      $diff=$336;
      var $337=(($sym)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=($338) & 4;
      var $340=((($339))|0)!=0;
      if ($340) { __label__ = 48; break; } else { __label__ = 52; break; }
    case 48: // $341
      var $342=$diff;
      var $343=((($342))&255);
      var $344=((($343))|0)!=0;
      if ($344) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: // $345
      var $346=$diff;
      var $347=((($346))&255);
      var $348=(((-($347)))|0);
      var $351 = $348;__label__ = 51; break;
    case 50: // $349
      var $351 = 128;__label__ = 51; break;
    case 51: // $350
      var $351;
      var $352=((($351)) & 255);
      $diff=$352;
      __label__ = 52; break;
    case 52: // $353
      var $354=HEAP32[((_ifp)>>2)];
      var $355=_ftell($354);
      var $356=((($355)+12)|0);
      var $357=$1;
      var $358=(($357+8)|0);
      var $359=(($358+4)|0);
      var $360=HEAPU32[(($359)>>2)];
      var $361=((($356))>>>0) >= ((($360))>>>0);
      if ($361) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: // $362
      $diff=0;
      __label__ = 54; break;
    case 54: // $363
      var $364=$diff;
      var $365=((($364))&255);
      var $366=$pix;
      var $367=($366) & 1;
      var $368=(($pred+$367)|0);
      var $369=HEAPU8[($368)];
      var $370=((($369))&255);
      var $371=((($370)+($365))|0);
      var $372=((($371)) & 255);
      HEAP8[($368)]=$372;
      var $373=$pix;
      var $374=HEAPU16[((_raw_width)>>1)];
      var $375=((($374))&65535);
      var $376=Math.floor(((($373))>>>0)/((($375))>>>0));
      var $377=HEAPU16[((_top_margin)>>1)];
      var $378=((($377))&65535);
      var $379=((($376)-($378))|0);
      $row=$379;
      var $380=$pix;
      var $381=HEAPU16[((_raw_width)>>1)];
      var $382=((($381))&65535);
      var $383=((($380))>>>0)%((($382))>>>0);
      var $384=HEAPU16[((_left_margin)>>1)];
      var $385=((($384))&65535);
      var $386=((($383)-($385))|0);
      $col=$386;
      var $387=$row;
      var $388=HEAPU16[((_height)>>1)];
      var $389=((($388))&65535);
      var $390=((($387))>>>0) < ((($389))>>>0);
      if ($390) { __label__ = 55; break; } else { __label__ = 57; break; }
    case 55: // $391
      var $392=$col;
      var $393=HEAPU16[((_width)>>1)];
      var $394=((($393))&65535);
      var $395=((($392))>>>0) < ((($394))>>>0);
      if ($395) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: // $396
      var $397=$pix;
      var $398=($397) & 1;
      var $399=(($pred+$398)|0);
      var $400=HEAPU8[($399)];
      var $401=((($400))&255);
      var $402=HEAPU32[((_filters)>>2)];
      var $403=$row;
      var $404=($403) << 1;
      var $405=($404) & 14;
      var $406=$col;
      var $407=($406) & 1;
      var $408=((($405)+($407))|0);
      var $409=($408) << 1;
      var $410=($402) >>> ((($409))>>>0);
      var $411=($410) & 3;
      var $412=$row;
      var $413=HEAPU16[((_shrink)>>1)];
      var $414=((($413))&65535);
      var $415=($412) >>> ((($414))>>>0);
      var $416=HEAPU16[((_iwidth)>>1)];
      var $417=((($416))&65535);
      var $418=((($415)*($417))|0);
      var $419=$col;
      var $420=HEAPU16[((_shrink)>>1)];
      var $421=((($420))&65535);
      var $422=($419) >>> ((($421))>>>0);
      var $423=((($418)+($422))|0);
      var $424=HEAP32[((_image)>>2)];
      var $425=(($424+($423<<3))|0);
      var $426=(($425+($411<<1))|0);
      HEAP16[(($426)>>1)]=$401;
      __label__ = 57; break;
    case 57: // $427
      var $428=$pix;
      var $429=($428) & 1;
      var $430=((($429))|0)!=0;
      if ($430) { __label__ = 60; break; } else { __label__ = 58; break; }
    case 58: // $431
      var $432=$2;
      var $433=$row;
      var $434=HEAPU16[((_raw_height)>>1)];
      var $435=((($434))&65535);
      var $436=((($433)-($435))|0);
      var $437=($436) & 7;
      var $438=($432) >> ((($437))|0);
      var $439=($438) & 1;
      var $440=((($439))|0)!=0;
      if ($440) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: // $441
      var $442=$pix;
      var $443=((($442)+2)|0);
      $pix=$443;
      __label__ = 60; break;
    case 60: // $444
      __label__ = 61; break;
    case 61: // $445
      var $446=$pix;
      var $447=((($446)+1)|0);
      $pix=$447;
      __label__ = 1; break;
    case 62: // $448
      HEAP32[((_maximum)>>2)]=255;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_smal_decode_segment["X"]=1;

function _smal_v6_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $seg=__stackBase__;
  var $1=HEAP32[((_ifp)>>2)];
  var $2=_fseek($1, 16, 0);
  var $3=(($seg)|0);
  var $4=(($3)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=_get2();
  var $6=((($5))&65535);
  var $7=(($seg)|0);
  var $8=(($7+4)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=HEAPU16[((_raw_width)>>1)];
  var $10=((($9))&65535);
  var $11=HEAPU16[((_raw_height)>>1)];
  var $12=((($11))&65535);
  var $13=((($10)*($12))|0);
  var $14=(($seg+8)|0);
  var $15=(($14)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=(($seg+8)|0);
  var $17=(($16+4)|0);
  HEAP32[(($17)>>2)]=2147483647;
  var $18=(($seg)|0);
  _smal_decode_segment($18, 0);
  STACKTOP = __stackBase__;
  return;
}


function _redcine_load_raw() {
  ;
  var __label__;

  ;
  return;
}


function _fill_holes($holes) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $row;
      var $col;
      var $val=__stackBase__;
      $1=$holes;
      $row=2;
      __label__ = 1; break;
    case 1: // $2
      var $3=$row;
      var $4=HEAPU16[((_height)>>1)];
      var $5=((($4))&65535);
      var $6=((($5)-2)|0);
      var $7=((($3))|0) < ((($6))|0);
      if ($7) { __label__ = 2; break; } else { __label__ = 18; break; }
    case 2: // $8
      var $9=$1;
      var $10=$row;
      var $11=HEAPU16[((_raw_height)>>1)];
      var $12=((($11))&65535);
      var $13=((($10)-($12))|0);
      var $14=($13) & 7;
      var $15=($9) >> ((($14))|0);
      var $16=($15) & 1;
      var $17=((($16))|0)!=0;
      if ($17) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $18
      __label__ = 17; break;
    case 4: // $19
      $col=1;
      __label__ = 5; break;
    case 5: // $20
      var $21=$col;
      var $22=HEAPU16[((_width)>>1)];
      var $23=((($22))&65535);
      var $24=((($23)-1)|0);
      var $25=((($21))|0) < ((($24))|0);
      if ($25) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $26
      var $27=HEAPU32[((_filters)>>2)];
      var $28=$row;
      var $29=((($28)-1)|0);
      var $30=($29) << 1;
      var $31=($30) & 14;
      var $32=$col;
      var $33=((($32)-1)|0);
      var $34=($33) & 1;
      var $35=((($31)+($34))|0);
      var $36=($35) << 1;
      var $37=($27) >>> ((($36))>>>0);
      var $38=($37) & 3;
      var $39=$row;
      var $40=((($39)-1)|0);
      var $41=HEAPU16[((_shrink)>>1)];
      var $42=((($41))&65535);
      var $43=($40) >> ((($42))|0);
      var $44=HEAPU16[((_iwidth)>>1)];
      var $45=((($44))&65535);
      var $46=((($43)*($45))|0);
      var $47=$col;
      var $48=((($47)-1)|0);
      var $49=HEAPU16[((_shrink)>>1)];
      var $50=((($49))&65535);
      var $51=($48) >> ((($50))|0);
      var $52=((($46)+($51))|0);
      var $53=HEAP32[((_image)>>2)];
      var $54=(($53+($52<<3))|0);
      var $55=(($54+($38<<1))|0);
      var $56=HEAPU16[(($55)>>1)];
      var $57=((($56))&65535);
      var $58=(($val)|0);
      HEAP32[(($58)>>2)]=$57;
      var $59=HEAPU32[((_filters)>>2)];
      var $60=$row;
      var $61=((($60)-1)|0);
      var $62=($61) << 1;
      var $63=($62) & 14;
      var $64=$col;
      var $65=((($64)+1)|0);
      var $66=($65) & 1;
      var $67=((($63)+($66))|0);
      var $68=($67) << 1;
      var $69=($59) >>> ((($68))>>>0);
      var $70=($69) & 3;
      var $71=$row;
      var $72=((($71)-1)|0);
      var $73=HEAPU16[((_shrink)>>1)];
      var $74=((($73))&65535);
      var $75=($72) >> ((($74))|0);
      var $76=HEAPU16[((_iwidth)>>1)];
      var $77=((($76))&65535);
      var $78=((($75)*($77))|0);
      var $79=$col;
      var $80=((($79)+1)|0);
      var $81=HEAPU16[((_shrink)>>1)];
      var $82=((($81))&65535);
      var $83=($80) >> ((($82))|0);
      var $84=((($78)+($83))|0);
      var $85=HEAP32[((_image)>>2)];
      var $86=(($85+($84<<3))|0);
      var $87=(($86+($70<<1))|0);
      var $88=HEAPU16[(($87)>>1)];
      var $89=((($88))&65535);
      var $90=(($val+4)|0);
      HEAP32[(($90)>>2)]=$89;
      var $91=HEAPU32[((_filters)>>2)];
      var $92=$row;
      var $93=((($92)+1)|0);
      var $94=($93) << 1;
      var $95=($94) & 14;
      var $96=$col;
      var $97=((($96)-1)|0);
      var $98=($97) & 1;
      var $99=((($95)+($98))|0);
      var $100=($99) << 1;
      var $101=($91) >>> ((($100))>>>0);
      var $102=($101) & 3;
      var $103=$row;
      var $104=((($103)+1)|0);
      var $105=HEAPU16[((_shrink)>>1)];
      var $106=((($105))&65535);
      var $107=($104) >> ((($106))|0);
      var $108=HEAPU16[((_iwidth)>>1)];
      var $109=((($108))&65535);
      var $110=((($107)*($109))|0);
      var $111=$col;
      var $112=((($111)-1)|0);
      var $113=HEAPU16[((_shrink)>>1)];
      var $114=((($113))&65535);
      var $115=($112) >> ((($114))|0);
      var $116=((($110)+($115))|0);
      var $117=HEAP32[((_image)>>2)];
      var $118=(($117+($116<<3))|0);
      var $119=(($118+($102<<1))|0);
      var $120=HEAPU16[(($119)>>1)];
      var $121=((($120))&65535);
      var $122=(($val+8)|0);
      HEAP32[(($122)>>2)]=$121;
      var $123=HEAPU32[((_filters)>>2)];
      var $124=$row;
      var $125=((($124)+1)|0);
      var $126=($125) << 1;
      var $127=($126) & 14;
      var $128=$col;
      var $129=((($128)+1)|0);
      var $130=($129) & 1;
      var $131=((($127)+($130))|0);
      var $132=($131) << 1;
      var $133=($123) >>> ((($132))>>>0);
      var $134=($133) & 3;
      var $135=$row;
      var $136=((($135)+1)|0);
      var $137=HEAPU16[((_shrink)>>1)];
      var $138=((($137))&65535);
      var $139=($136) >> ((($138))|0);
      var $140=HEAPU16[((_iwidth)>>1)];
      var $141=((($140))&65535);
      var $142=((($139)*($141))|0);
      var $143=$col;
      var $144=((($143)+1)|0);
      var $145=HEAPU16[((_shrink)>>1)];
      var $146=((($145))&65535);
      var $147=($144) >> ((($146))|0);
      var $148=((($142)+($147))|0);
      var $149=HEAP32[((_image)>>2)];
      var $150=(($149+($148<<3))|0);
      var $151=(($150+($134<<1))|0);
      var $152=HEAPU16[(($151)>>1)];
      var $153=((($152))&65535);
      var $154=(($val+12)|0);
      HEAP32[(($154)>>2)]=$153;
      var $155=(($val)|0);
      var $156=_median4($155);
      var $157=((($156)) & 65535);
      var $158=HEAPU32[((_filters)>>2)];
      var $159=$row;
      var $160=($159) << 1;
      var $161=($160) & 14;
      var $162=$col;
      var $163=($162) & 1;
      var $164=((($161)+($163))|0);
      var $165=($164) << 1;
      var $166=($158) >>> ((($165))>>>0);
      var $167=($166) & 3;
      var $168=$row;
      var $169=HEAPU16[((_shrink)>>1)];
      var $170=((($169))&65535);
      var $171=($168) >> ((($170))|0);
      var $172=HEAPU16[((_iwidth)>>1)];
      var $173=((($172))&65535);
      var $174=((($171)*($173))|0);
      var $175=$col;
      var $176=HEAPU16[((_shrink)>>1)];
      var $177=((($176))&65535);
      var $178=($175) >> ((($177))|0);
      var $179=((($174)+($178))|0);
      var $180=HEAP32[((_image)>>2)];
      var $181=(($180+($179<<3))|0);
      var $182=(($181+($167<<1))|0);
      HEAP16[(($182)>>1)]=$157;
      __label__ = 7; break;
    case 7: // $183
      var $184=$col;
      var $185=((($184)+4)|0);
      $col=$185;
      __label__ = 5; break;
    case 8: // $186
      $col=2;
      __label__ = 9; break;
    case 9: // $187
      var $188=$col;
      var $189=HEAPU16[((_width)>>1)];
      var $190=((($189))&65535);
      var $191=((($190)-2)|0);
      var $192=((($188))|0) < ((($191))|0);
      if ($192) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: // $193
      var $194=$1;
      var $195=$row;
      var $196=((($195)-2)|0);
      var $197=HEAPU16[((_raw_height)>>1)];
      var $198=((($197))&65535);
      var $199=((($196)-($198))|0);
      var $200=($199) & 7;
      var $201=($194) >> ((($200))|0);
      var $202=($201) & 1;
      var $203=((($202))|0)!=0;
      if ($203) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $204
      var $205=$1;
      var $206=$row;
      var $207=((($206)+2)|0);
      var $208=HEAPU16[((_raw_height)>>1)];
      var $209=((($208))&65535);
      var $210=((($207)-($209))|0);
      var $211=($210) & 7;
      var $212=($205) >> ((($211))|0);
      var $213=($212) & 1;
      var $214=((($213))|0)!=0;
      if ($214) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $215
      var $216=HEAPU32[((_filters)>>2)];
      var $217=$row;
      var $218=($217) << 1;
      var $219=($218) & 14;
      var $220=$col;
      var $221=((($220)-2)|0);
      var $222=($221) & 1;
      var $223=((($219)+($222))|0);
      var $224=($223) << 1;
      var $225=($216) >>> ((($224))>>>0);
      var $226=($225) & 3;
      var $227=$row;
      var $228=HEAPU16[((_shrink)>>1)];
      var $229=((($228))&65535);
      var $230=($227) >> ((($229))|0);
      var $231=HEAPU16[((_iwidth)>>1)];
      var $232=((($231))&65535);
      var $233=((($230)*($232))|0);
      var $234=$col;
      var $235=((($234)-2)|0);
      var $236=HEAPU16[((_shrink)>>1)];
      var $237=((($236))&65535);
      var $238=($235) >> ((($237))|0);
      var $239=((($233)+($238))|0);
      var $240=HEAP32[((_image)>>2)];
      var $241=(($240+($239<<3))|0);
      var $242=(($241+($226<<1))|0);
      var $243=HEAPU16[(($242)>>1)];
      var $244=((($243))&65535);
      var $245=HEAPU32[((_filters)>>2)];
      var $246=$row;
      var $247=($246) << 1;
      var $248=($247) & 14;
      var $249=$col;
      var $250=((($249)+2)|0);
      var $251=($250) & 1;
      var $252=((($248)+($251))|0);
      var $253=($252) << 1;
      var $254=($245) >>> ((($253))>>>0);
      var $255=($254) & 3;
      var $256=$row;
      var $257=HEAPU16[((_shrink)>>1)];
      var $258=((($257))&65535);
      var $259=($256) >> ((($258))|0);
      var $260=HEAPU16[((_iwidth)>>1)];
      var $261=((($260))&65535);
      var $262=((($259)*($261))|0);
      var $263=$col;
      var $264=((($263)+2)|0);
      var $265=HEAPU16[((_shrink)>>1)];
      var $266=((($265))&65535);
      var $267=($264) >> ((($266))|0);
      var $268=((($262)+($267))|0);
      var $269=HEAP32[((_image)>>2)];
      var $270=(($269+($268<<3))|0);
      var $271=(($270+($255<<1))|0);
      var $272=HEAPU16[(($271)>>1)];
      var $273=((($272))&65535);
      var $274=((($244)+($273))|0);
      var $275=($274) >> 1;
      var $276=((($275)) & 65535);
      var $277=HEAPU32[((_filters)>>2)];
      var $278=$row;
      var $279=($278) << 1;
      var $280=($279) & 14;
      var $281=$col;
      var $282=($281) & 1;
      var $283=((($280)+($282))|0);
      var $284=($283) << 1;
      var $285=($277) >>> ((($284))>>>0);
      var $286=($285) & 3;
      var $287=$row;
      var $288=HEAPU16[((_shrink)>>1)];
      var $289=((($288))&65535);
      var $290=($287) >> ((($289))|0);
      var $291=HEAPU16[((_iwidth)>>1)];
      var $292=((($291))&65535);
      var $293=((($290)*($292))|0);
      var $294=$col;
      var $295=HEAPU16[((_shrink)>>1)];
      var $296=((($295))&65535);
      var $297=($294) >> ((($296))|0);
      var $298=((($293)+($297))|0);
      var $299=HEAP32[((_image)>>2)];
      var $300=(($299+($298<<3))|0);
      var $301=(($300+($286<<1))|0);
      HEAP16[(($301)>>1)]=$276;
      __label__ = 14; break;
    case 13: // $302
      var $303=HEAPU32[((_filters)>>2)];
      var $304=$row;
      var $305=($304) << 1;
      var $306=($305) & 14;
      var $307=$col;
      var $308=((($307)-2)|0);
      var $309=($308) & 1;
      var $310=((($306)+($309))|0);
      var $311=($310) << 1;
      var $312=($303) >>> ((($311))>>>0);
      var $313=($312) & 3;
      var $314=$row;
      var $315=HEAPU16[((_shrink)>>1)];
      var $316=((($315))&65535);
      var $317=($314) >> ((($316))|0);
      var $318=HEAPU16[((_iwidth)>>1)];
      var $319=((($318))&65535);
      var $320=((($317)*($319))|0);
      var $321=$col;
      var $322=((($321)-2)|0);
      var $323=HEAPU16[((_shrink)>>1)];
      var $324=((($323))&65535);
      var $325=($322) >> ((($324))|0);
      var $326=((($320)+($325))|0);
      var $327=HEAP32[((_image)>>2)];
      var $328=(($327+($326<<3))|0);
      var $329=(($328+($313<<1))|0);
      var $330=HEAPU16[(($329)>>1)];
      var $331=((($330))&65535);
      var $332=(($val)|0);
      HEAP32[(($332)>>2)]=$331;
      var $333=HEAPU32[((_filters)>>2)];
      var $334=$row;
      var $335=($334) << 1;
      var $336=($335) & 14;
      var $337=$col;
      var $338=((($337)+2)|0);
      var $339=($338) & 1;
      var $340=((($336)+($339))|0);
      var $341=($340) << 1;
      var $342=($333) >>> ((($341))>>>0);
      var $343=($342) & 3;
      var $344=$row;
      var $345=HEAPU16[((_shrink)>>1)];
      var $346=((($345))&65535);
      var $347=($344) >> ((($346))|0);
      var $348=HEAPU16[((_iwidth)>>1)];
      var $349=((($348))&65535);
      var $350=((($347)*($349))|0);
      var $351=$col;
      var $352=((($351)+2)|0);
      var $353=HEAPU16[((_shrink)>>1)];
      var $354=((($353))&65535);
      var $355=($352) >> ((($354))|0);
      var $356=((($350)+($355))|0);
      var $357=HEAP32[((_image)>>2)];
      var $358=(($357+($356<<3))|0);
      var $359=(($358+($343<<1))|0);
      var $360=HEAPU16[(($359)>>1)];
      var $361=((($360))&65535);
      var $362=(($val+4)|0);
      HEAP32[(($362)>>2)]=$361;
      var $363=HEAPU32[((_filters)>>2)];
      var $364=$row;
      var $365=((($364)-2)|0);
      var $366=($365) << 1;
      var $367=($366) & 14;
      var $368=$col;
      var $369=($368) & 1;
      var $370=((($367)+($369))|0);
      var $371=($370) << 1;
      var $372=($363) >>> ((($371))>>>0);
      var $373=($372) & 3;
      var $374=$row;
      var $375=((($374)-2)|0);
      var $376=HEAPU16[((_shrink)>>1)];
      var $377=((($376))&65535);
      var $378=($375) >> ((($377))|0);
      var $379=HEAPU16[((_iwidth)>>1)];
      var $380=((($379))&65535);
      var $381=((($378)*($380))|0);
      var $382=$col;
      var $383=HEAPU16[((_shrink)>>1)];
      var $384=((($383))&65535);
      var $385=($382) >> ((($384))|0);
      var $386=((($381)+($385))|0);
      var $387=HEAP32[((_image)>>2)];
      var $388=(($387+($386<<3))|0);
      var $389=(($388+($373<<1))|0);
      var $390=HEAPU16[(($389)>>1)];
      var $391=((($390))&65535);
      var $392=(($val+8)|0);
      HEAP32[(($392)>>2)]=$391;
      var $393=HEAPU32[((_filters)>>2)];
      var $394=$row;
      var $395=((($394)+2)|0);
      var $396=($395) << 1;
      var $397=($396) & 14;
      var $398=$col;
      var $399=($398) & 1;
      var $400=((($397)+($399))|0);
      var $401=($400) << 1;
      var $402=($393) >>> ((($401))>>>0);
      var $403=($402) & 3;
      var $404=$row;
      var $405=((($404)+2)|0);
      var $406=HEAPU16[((_shrink)>>1)];
      var $407=((($406))&65535);
      var $408=($405) >> ((($407))|0);
      var $409=HEAPU16[((_iwidth)>>1)];
      var $410=((($409))&65535);
      var $411=((($408)*($410))|0);
      var $412=$col;
      var $413=HEAPU16[((_shrink)>>1)];
      var $414=((($413))&65535);
      var $415=($412) >> ((($414))|0);
      var $416=((($411)+($415))|0);
      var $417=HEAP32[((_image)>>2)];
      var $418=(($417+($416<<3))|0);
      var $419=(($418+($403<<1))|0);
      var $420=HEAPU16[(($419)>>1)];
      var $421=((($420))&65535);
      var $422=(($val+12)|0);
      HEAP32[(($422)>>2)]=$421;
      var $423=(($val)|0);
      var $424=_median4($423);
      var $425=((($424)) & 65535);
      var $426=HEAPU32[((_filters)>>2)];
      var $427=$row;
      var $428=($427) << 1;
      var $429=($428) & 14;
      var $430=$col;
      var $431=($430) & 1;
      var $432=((($429)+($431))|0);
      var $433=($432) << 1;
      var $434=($426) >>> ((($433))>>>0);
      var $435=($434) & 3;
      var $436=$row;
      var $437=HEAPU16[((_shrink)>>1)];
      var $438=((($437))&65535);
      var $439=($436) >> ((($438))|0);
      var $440=HEAPU16[((_iwidth)>>1)];
      var $441=((($440))&65535);
      var $442=((($439)*($441))|0);
      var $443=$col;
      var $444=HEAPU16[((_shrink)>>1)];
      var $445=((($444))&65535);
      var $446=($443) >> ((($445))|0);
      var $447=((($442)+($446))|0);
      var $448=HEAP32[((_image)>>2)];
      var $449=(($448+($447<<3))|0);
      var $450=(($449+($435<<1))|0);
      HEAP16[(($450)>>1)]=$425;
      __label__ = 14; break;
    case 14: // $451
      __label__ = 15; break;
    case 15: // $452
      var $453=$col;
      var $454=((($453)+4)|0);
      $col=$454;
      __label__ = 9; break;
    case 16: // $455
      __label__ = 17; break;
    case 17: // $456
      var $457=$row;
      var $458=((($457)+1)|0);
      $row=$458;
      __label__ = 1; break;
    case 18: // $459
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fill_holes["X"]=1;

function _smal_v9_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 2048; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $seg=__stackBase__;
      var $offset;
      var $nseg;
      var $holes;
      var $i;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 67, 0);
      var $3=_get4();
      $offset=$3;
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_getc_unlocked($4);
      $nseg=$5;
      var $6=HEAP32[((_ifp)>>2)];
      var $7=$offset;
      var $8=_fseek($6, $7, 0);
      $i=0;
      __label__ = 1; break;
    case 1: // $9
      var $10=$i;
      var $11=$nseg;
      var $12=(((($11)<<1))|0);
      var $13=((($10))>>>0) < ((($12))>>>0);
      if ($13) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $14
      var $15=_get4();
      var $16=HEAP32[((_data_offset)>>2)];
      var $17=$i;
      var $18=($17) & 1;
      var $19=((($16)*($18))|0);
      var $20=((($15)+($19))|0);
      var $21=$i;
      var $22=(($seg)|0);
      var $23=(($22+($21<<2))|0);
      HEAP32[(($23)>>2)]=$20;
      __label__ = 3; break;
    case 3: // $24
      var $25=$i;
      var $26=((($25)+1)|0);
      $i=$26;
      __label__ = 1; break;
    case 4: // $27
      var $28=HEAP32[((_ifp)>>2)];
      var $29=_fseek($28, 78, 0);
      var $30=HEAP32[((_ifp)>>2)];
      var $31=_getc_unlocked($30);
      $holes=$31;
      var $32=HEAP32[((_ifp)>>2)];
      var $33=_fseek($32, 88, 0);
      var $34=HEAPU16[((_raw_height)>>1)];
      var $35=((($34))&65535);
      var $36=HEAPU16[((_raw_width)>>1)];
      var $37=((($36))&65535);
      var $38=((($35)*($37))|0);
      var $39=$nseg;
      var $40=(($seg+($39<<3))|0);
      var $41=(($40)|0);
      HEAP32[(($41)>>2)]=$38;
      var $42=_get4();
      var $43=HEAP32[((_data_offset)>>2)];
      var $44=((($42)+($43))|0);
      var $45=$nseg;
      var $46=(($seg+($45<<3))|0);
      var $47=(($46+4)|0);
      HEAP32[(($47)>>2)]=$44;
      $i=0;
      __label__ = 5; break;
    case 5: // $48
      var $49=$i;
      var $50=$nseg;
      var $51=((($49))>>>0) < ((($50))>>>0);
      if ($51) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $52
      var $53=(($seg)|0);
      var $54=$i;
      var $55=(($53+($54<<3))|0);
      var $56=$holes;
      _smal_decode_segment($55, $56);
      __label__ = 7; break;
    case 7: // $57
      var $58=$i;
      var $59=((($58)+1)|0);
      $i=$59;
      __label__ = 5; break;
    case 8: // $60
      var $61=$holes;
      var $62=((($61))|0)!=0;
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $63
      var $64=$holes;
      _fill_holes($64);
      __label__ = 10; break;
    case 10: // $65
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_smal_v9_load_raw["X"]=1;

function _foveon_decoder($size, $code) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $cur;
      var $i;
      var $len;
      $1=$size;
      $2=$code;
      var $3=$2;
      var $4=((($3))|0)!=0;
      if ($4) { __label__ = 6; break; } else { __label__ = 1; break; }
    case 1: // $5
      $i=0;
      __label__ = 2; break;
    case 2: // $6
      var $7=$i;
      var $8=$1;
      var $9=((($7))>>>0) < ((($8))>>>0);
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: // $10
      var $11=_get4();
      var $12=$i;
      var $13=((_foveon_decoder_huff+($12<<2))|0);
      HEAP32[(($13)>>2)]=$11;
      __label__ = 4; break;
    case 4: // $14
      var $15=$i;
      var $16=((($15)+1)|0);
      $i=$16;
      __label__ = 2; break;
    case 5: // $17
      _memset((_first_decode), 0, 24576, 1);
      HEAP32[((_free_decode)>>2)]=((_first_decode)|0);
      __label__ = 6; break;
    case 6: // $18
      var $19=HEAP32[((_free_decode)>>2)];
      var $20=(($19+12)|0);
      HEAP32[((_free_decode)>>2)]=$20;
      $cur=$19;
      var $21=HEAPU32[((_free_decode)>>2)];
      var $22=((($21))>>>0) > (((((_first_decode+24576)|0)))>>>0);
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $23
      var $24=HEAP32[((__impure_ptr)>>2)];
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=HEAP32[((_ifname)>>2)];
      var $28=_fprintf($26, ((__str31)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$27,tempInt));
      _longjmp(((_failure)|0), 2);
      throw "Reached an unreachable!"
    case 8: // $29
      var $30=$2;
      var $31=((($30))|0)!=0;
      if ($31) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: // $32
      $i=0;
      __label__ = 10; break;
    case 10: // $33
      var $34=$i;
      var $35=$1;
      var $36=((($34))>>>0) < ((($35))>>>0);
      if ($36) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: // $37
      var $38=$i;
      var $39=((_foveon_decoder_huff+($38<<2))|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$2;
      var $42=((($40))|0)==((($41))|0);
      if ($42) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $43
      var $44=$i;
      var $45=$cur;
      var $46=(($45+8)|0);
      HEAP32[(($46)>>2)]=$44;
      __label__ = 19; break;
    case 13: // $47
      __label__ = 14; break;
    case 14: // $48
      var $49=$i;
      var $50=((($49)+1)|0);
      $i=$50;
      __label__ = 10; break;
    case 15: // $51
      __label__ = 16; break;
    case 16: // $52
      var $53=$2;
      var $54=($53) >>> 27;
      $len=$54;
      var $55=((($54))|0) > 26;
      if ($55) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $56
      __label__ = 19; break;
    case 18: // $57
      var $58=$len;
      var $59=((($58)+1)|0);
      var $60=($59) << 27;
      var $61=$2;
      var $62=($61) & 67108863;
      var $63=($62) << 1;
      var $64=($60) | ($63);
      $2=$64;
      var $65=HEAP32[((_free_decode)>>2)];
      var $66=$cur;
      var $67=(($66)|0);
      var $68=(($67)|0);
      HEAP32[(($68)>>2)]=$65;
      var $69=$1;
      var $70=$2;
      _foveon_decoder($69, $70);
      var $71=HEAP32[((_free_decode)>>2)];
      var $72=$cur;
      var $73=(($72)|0);
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$71;
      var $75=$1;
      var $76=$2;
      var $77=((($76)+1)|0);
      _foveon_decoder($75, $77);
      __label__ = 19; break;
    case 19: // $78
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_decoder["X"]=1;

function _foveon_thumb() {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $bwide;
      var $row;
      var $col;
      var $bitbuf;
      var $bit;
      var $c;
      var $i;
      var $buf;
      var $dindex;
      var $pred=__stackBase__;
      $bitbuf=0;
      $bit=1;
      var $1=_get4();
      $bwide=$1;
      var $2=HEAP32[((_ofp)>>2)];
      var $3=HEAPU16[((_thumb_width)>>1)];
      var $4=((($3))&65535);
      var $5=HEAPU16[((_thumb_height)>>1)];
      var $6=((($5))&65535);
      var $7=_fprintf($2, ((__str12)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$4,HEAP32[((tempInt+4)>>2)]=$6,tempInt));
      var $8=$bwide;
      var $9=((($8))>>>0) > 0;
      if ($9) { __label__ = 1; break; } else { __label__ = 8; break; }
    case 1: // $10
      var $11=$bwide;
      var $12=HEAPU16[((_thumb_width)>>1)];
      var $13=((($12))&65535);
      var $14=((($13)*3)|0);
      var $15=((($11))>>>0) < ((($14))>>>0);
      if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $16
      __label__ = 31; break;
    case 3: // $17
      var $18=$bwide;
      var $19=_malloc($18);
      $buf=$19;
      var $20=$buf;
      _merror($20, ((__str32)|0));
      $row=0;
      __label__ = 4; break;
    case 4: // $21
      var $22=$row;
      var $23=HEAPU16[((_thumb_height)>>1)];
      var $24=((($23))&65535);
      var $25=((($22))>>>0) < ((($24))>>>0);
      if ($25) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: // $26
      var $27=$buf;
      var $28=$bwide;
      var $29=HEAP32[((_ifp)>>2)];
      var $30=_fread($27, 1, $28, $29);
      var $31=$buf;
      var $32=HEAPU16[((_thumb_width)>>1)];
      var $33=((($32))&65535);
      var $34=HEAP32[((_ofp)>>2)];
      var $35=_fwrite($31, 3, $33, $34);
      __label__ = 6; break;
    case 6: // $36
      var $37=$row;
      var $38=((($37)+1)|0);
      $row=$38;
      __label__ = 4; break;
    case 7: // $39
      var $40=$buf;
      _free($40);
      __label__ = 31; break;
    case 8: // $41
      _foveon_decoder(256, 0);
      $row=0;
      __label__ = 9; break;
    case 9: // $42
      var $43=$row;
      var $44=HEAPU16[((_thumb_height)>>1)];
      var $45=((($44))&65535);
      var $46=((($43))>>>0) < ((($45))>>>0);
      if ($46) { __label__ = 10; break; } else { __label__ = 31; break; }
    case 10: // $47
      var $48=(($pred)|0);
      var $49=$48;
      HEAP8[($49)]=0; HEAP8[($49+1)]=0; HEAP8[($49+2)]=0; HEAP8[($49+3)]=0; HEAP8[($49+4)]=0; HEAP8[($49+5)]=0;
      var $50=$bit;
      var $51=((($50))|0)!=0;
      if ($51) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $52
      var $53=_get4();
      __label__ = 12; break;
    case 12: // $54
      $col=0;
      $bit=0;
      __label__ = 13; break;
    case 13: // $55
      var $56=$col;
      var $57=HEAPU16[((_thumb_width)>>1)];
      var $58=((($57))&65535);
      var $59=((($56))>>>0) < ((($58))>>>0);
      if ($59) { __label__ = 14; break; } else { __label__ = 29; break; }
    case 14: // $60
      $c=0;
      __label__ = 15; break;
    case 15: // $61
      var $62=$c;
      var $63=((($62))>>>0) < 3;
      if ($63) { __label__ = 16; break; } else { __label__ = 27; break; }
    case 16: // $64
      $dindex=((_first_decode)|0);
      __label__ = 17; break;
    case 17: // $65
      var $66=$dindex;
      var $67=(($66)|0);
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69))|0)!=0;
      if ($70) { __label__ = 18; break; } else { __label__ = 25; break; }
    case 18: // $71
      var $72=$bit;
      var $73=((($72)-1)|0);
      var $74=($73) & 31;
      $bit=$74;
      var $75=((($74))|0)==31;
      if ($75) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: // $76
      $i=0;
      __label__ = 20; break;
    case 20: // $77
      var $78=$i;
      var $79=((($78))>>>0) < 4;
      if ($79) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: // $80
      var $81=$bitbuf;
      var $82=($81) << 8;
      var $83=HEAP32[((_ifp)>>2)];
      var $84=_getc_unlocked($83);
      var $85=((($82)+($84))|0);
      $bitbuf=$85;
      __label__ = 22; break;
    case 22: // $86
      var $87=$i;
      var $88=((($87)+1)|0);
      $i=$88;
      __label__ = 20; break;
    case 23: // $89
      __label__ = 24; break;
    case 24: // $90
      var $91=$bitbuf;
      var $92=$bit;
      var $93=($91) >>> ((($92))>>>0);
      var $94=($93) & 1;
      var $95=$dindex;
      var $96=(($95)|0);
      var $97=(($96+($94<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      $dindex=$98;
      __label__ = 17; break;
    case 25: // $99
      var $100=$dindex;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$c;
      var $104=(($pred+($103<<1))|0);
      var $105=HEAP16[(($104)>>1)];
      var $106=((($105) << 16) >> 16);
      var $107=((($106)+($102))|0);
      var $108=((($107)) & 65535);
      HEAP16[(($104)>>1)]=$108;
      var $109=$c;
      var $110=(($pred+($109<<1))|0);
      var $111=HEAP16[(($110)>>1)];
      var $112=((($111) << 16) >> 16);
      var $113=HEAP32[((_ofp)>>2)];
      var $114=_fputc($112, $113);
      __label__ = 26; break;
    case 26: // $115
      var $116=$c;
      var $117=((($116)+1)|0);
      $c=$117;
      __label__ = 15; break;
    case 27: // $118
      __label__ = 28; break;
    case 28: // $119
      var $120=$col;
      var $121=((($120)+1)|0);
      $col=$121;
      __label__ = 13; break;
    case 29: // $122
      __label__ = 30; break;
    case 30: // $123
      var $124=$row;
      var $125=((($124)+1)|0);
      $row=$125;
      __label__ = 9; break;
    case 31: // $126
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_thumb["X"]=1;
// Warning: Cannot correct overflows of this many bits: 64 at line 21079

function _foveon_avg($pix, $range, $cfilt) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $val;
      var $min;
      var $max;
      var $sum;
      $2=$pix;
      $3=$range;
      $4=$cfilt;
      $min=3.4028234663852886e+38;
      $max=-3.4028234663852886e+38;
      $sum=0;
      var $5=$3;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $i=$7;
      __label__ = 1; break;
    case 1: // $8
      var $9=$i;
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($9))|0) <= ((($12))|0);
      if ($13) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $14
      var $15=$i;
      var $16=(((($15)<<2))|0);
      var $17=$2;
      var $18=(($17+($16<<1))|0);
      var $19=HEAP16[(($18)>>1)];
      var $20=((($19) << 16) >> 16);
      var $21=((($20))|0);
      var $22=$i;
      var $23=(((($22)<<2))|0);
      var $24=$2;
      var $25=(($24+($23<<1))|0);
      var $26=HEAP16[(($25)>>1)];
      var $27=((($26) << 16) >> 16);
      var $28=$i;
      var $29=((($28)-1)|0);
      var $30=(((($29)<<2))|0);
      var $31=$2;
      var $32=(($31+($30<<1))|0);
      var $33=HEAP16[(($32)>>1)];
      var $34=((($33) << 16) >> 16);
      var $35=((($27)-($34))|0);
      var $36=((($35))|0);
      var $37=$4;
      var $38=($36)*($37);
      var $39=($21)+($38);
      $val=$39;
      var $40=$sum;
      var $41=($40)+($39);
      $sum=$41;
      var $42=$min;
      var $43=$val;
      var $44=($42) > ($43);
      if ($44) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $45
      var $46=$val;
      $min=$46;
      __label__ = 4; break;
    case 4: // $47
      var $48=$max;
      var $49=$val;
      var $50=($48) < ($49);
      if ($50) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $51
      var $52=$val;
      $max=$52;
      __label__ = 6; break;
    case 6: // $53
      __label__ = 7; break;
    case 7: // $54
      var $55=$i;
      var $56=((($55)+1)|0);
      $i=$56;
      __label__ = 1; break;
    case 8: // $57
      var $58=$3;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$3;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($60)-($63))|0);
      var $65=((($64))|0)==1;
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $66
      var $67=$sum;
      var $68=($67)/2;
      $1=$68;
      __label__ = 11; break;
    case 10: // $69
      var $70=$sum;
      var $71=$min;
      var $72=($70)-($71);
      var $73=$max;
      var $74=($72)-($73);
      var $75=$3;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$3;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($77)-($80))|0);
      var $82=((($81)-1)|0);
      var $83=((($82))|0);
      var $84=($74)/($83);
      $1=$84;
      __label__ = 11; break;
    case 11: // $85
      var $86=$1;
      ;
      return $86;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_avg["X"]=1;

function _foveon_load_camf() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $key;
      var $i;
      var $val;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=HEAP32[((_meta_offset)>>2)];
      var $3=_fseek($1, $2, 0);
      var $4=_get4();
      $key=$4;
      var $5=HEAP32[((_meta_data)>>2)];
      var $6=HEAP32[((_meta_length)>>2)];
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_fread($5, 1, $6, $7);
      $i=0;
      __label__ = 1; break;
    case 1: // $9
      var $10=$i;
      var $11=HEAPU32[((_meta_length)>>2)];
      var $12=((($10))>>>0) < ((($11))>>>0);
      if ($12) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $13
      var $14=$key;
      var $15=((($14)*1597)|0);
      var $16=((($15)+51749)|0);
      var $17=((($16))>>>0)%244944;
      $key=$17;
      var $18=$key;
      var $19=[((((($18))>>>0))>>>0),0];
      var $20=(tempBigIntP=(tempI64=($19.slice(0)),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296)))*(tempI64=([301593171,0]),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296))),[((tempBigIntP>>>0)>>>0),((Math.min(Math.floor(tempBigIntP/4294967296), 4294967295))>>>0)]);
      var $21=[(($20.slice(0))[0] >>> 24) | ((($20.slice(0))[1]&(Math.pow(2, 24)-1))<<(32-24)),($20.slice(0))[1] >>> 24];
      var $22=((($21.slice(0))[0]) & 4294967295);
      $val=$22;
      var $23=$key;
      var $24=($23) << 8;
      var $25=$val;
      var $26=((($24)-($25))|0);
      var $27=($26) >>> 1;
      var $28=$val;
      var $29=((($27)+($28))|0);
      var $30=($29) >>> 17;
      var $31=$i;
      var $32=HEAP32[((_meta_data)>>2)];
      var $33=(($32+$31)|0);
      var $34=HEAP8[($33)];
      var $35=((($34) << 24) >> 24);
      var $36=($35) ^ ($30);
      var $37=((($36)) & 255);
      HEAP8[($33)]=$37;
      __label__ = 3; break;
    case 3: // $38
      var $39=$i;
      var $40=((($39)+1)|0);
      $i=$40;
      __label__ = 1; break;
    case 4: // $41
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_load_camf["X"]=1;

function _foveon_load_raw() {
  var __stackBase__  = STACKTOP; STACKTOP += 2060; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $dindex;
      var $diff=__stackBase__;
      var $bitbuf;
      var $pred=__stackBase__+2048;
      var $fixed;
      var $row;
      var $col;
      var $bit;
      var $c;
      var $i;
      $bitbuf=0;
      $bit=-1;
      var $1=_get4();
      $fixed=$1;
      var $2=(($diff)|0);
      _read_shorts($2, 1024);
      var $3=$fixed;
      var $4=((($3))|0)!=0;
      if ($4) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $5
      _foveon_decoder(1024, 0);
      __label__ = 2; break;
    case 2: // $6
      $row=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$row;
      var $9=HEAPU16[((_height)>>1)];
      var $10=((($9))&65535);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 41; break; }
    case 4: // $12
      var $13=(($pred)|0);
      var $14=$13;
      for (var $$dest = $14, $$stop = $$dest + 12; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      var $15=$bit;
      var $16=((($15))|0)!=0;
      if ($16) { __label__ = 8; break; } else { __label__ = 5; break; }
    case 5: // $17
      var $18=$fixed;
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 8; break; } else { __label__ = 6; break; }
    case 6: // $20
      var $21=_atoi(((_model+2)|0));
      var $22=((($21))|0) < 14;
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $23
      var $24=_get4();
      __label__ = 8; break;
    case 8: // $25
      $bit=0;
      $col=0;
      __label__ = 9; break;
    case 9: // $26
      var $27=$col;
      var $28=HEAPU16[((_width)>>1)];
      var $29=((($28))&65535);
      var $30=((($27))|0) < ((($29))|0);
      if ($30) { __label__ = 10; break; } else { __label__ = 39; break; }
    case 10: // $31
      var $32=$fixed;
      var $33=((($32))|0)!=0;
      if ($33) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: // $34
      var $35=_get4();
      $bitbuf=$35;
      $c=0;
      __label__ = 12; break;
    case 12: // $36
      var $37=$c;
      var $38=((($37))|0) < 3;
      if ($38) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $39
      var $40=$bitbuf;
      var $41=$c;
      var $42=((($41)*10)|0);
      var $43=($40) >>> ((($42))>>>0);
      var $44=($43) & 1023;
      var $45=(($diff+($44<<1))|0);
      var $46=HEAP16[(($45)>>1)];
      var $47=((($46) << 16) >> 16);
      var $48=$c;
      var $49=((2-($48))|0);
      var $50=(($pred+($49<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)+($47))|0);
      HEAP32[(($50)>>2)]=$52;
      __label__ = 14; break;
    case 14: // $53
      var $54=$c;
      var $55=((($54)+1)|0);
      $c=$55;
      __label__ = 12; break;
    case 15: // $56
      __label__ = 33; break;
    case 16: // $57
      $c=0;
      __label__ = 17; break;
    case 17: // $58
      var $59=$c;
      var $60=((($59))|0) < 3;
      if ($60) { __label__ = 18; break; } else { __label__ = 32; break; }
    case 18: // $61
      $dindex=((_first_decode)|0);
      __label__ = 19; break;
    case 19: // $62
      var $63=$dindex;
      var $64=(($63)|0);
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=((($66))|0)!=0;
      if ($67) { __label__ = 20; break; } else { __label__ = 27; break; }
    case 20: // $68
      var $69=$bit;
      var $70=((($69)-1)|0);
      var $71=($70) & 31;
      $bit=$71;
      var $72=((($71))|0)==31;
      if ($72) { __label__ = 21; break; } else { __label__ = 26; break; }
    case 21: // $73
      $i=0;
      __label__ = 22; break;
    case 22: // $74
      var $75=$i;
      var $76=((($75))|0) < 4;
      if ($76) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: // $77
      var $78=$bitbuf;
      var $79=($78) << 8;
      var $80=HEAP32[((_ifp)>>2)];
      var $81=_getc_unlocked($80);
      var $82=((($79)+($81))|0);
      $bitbuf=$82;
      __label__ = 24; break;
    case 24: // $83
      var $84=$i;
      var $85=((($84)+1)|0);
      $i=$85;
      __label__ = 22; break;
    case 25: // $86
      __label__ = 26; break;
    case 26: // $87
      var $88=$bitbuf;
      var $89=$bit;
      var $90=($88) >>> ((($89))>>>0);
      var $91=($90) & 1;
      var $92=$dindex;
      var $93=(($92)|0);
      var $94=(($93+($91<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      $dindex=$95;
      __label__ = 19; break;
    case 27: // $96
      var $97=$dindex;
      var $98=(($97+8)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($diff+($99<<1))|0);
      var $101=HEAP16[(($100)>>1)];
      var $102=((($101) << 16) >> 16);
      var $103=$c;
      var $104=(($pred+($103<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)+($102))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=$c;
      var $108=(($pred+($107<<2))|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=($109) >> 16;
      var $111=((($110))|0)!=0;
      if ($111) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $112
      var $113=$c;
      var $114=(($pred+($113<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=($115) ^ -1;
      var $117=($116) >> 16;
      var $118=((($117))|0)!=0;
      if ($118) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $119
      _derror();
      __label__ = 30; break;
    case 30: // $120
      __label__ = 31; break;
    case 31: // $121
      var $122=$c;
      var $123=((($122)+1)|0);
      $c=$123;
      __label__ = 17; break;
    case 32: // $124
      __label__ = 33; break;
    case 33: // $125
      $c=0;
      __label__ = 34; break;
    case 34: // $126
      var $127=$c;
      var $128=((($127))|0) < 3;
      if ($128) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: // $129
      var $130=$c;
      var $131=(($pred+($130<<2))|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=((($132)) & 65535);
      var $134=$c;
      var $135=$row;
      var $136=HEAPU16[((_width)>>1)];
      var $137=((($136))&65535);
      var $138=((($135)*($137))|0);
      var $139=$col;
      var $140=((($138)+($139))|0);
      var $141=HEAP32[((_image)>>2)];
      var $142=(($141+($140<<3))|0);
      var $143=(($142+($134<<1))|0);
      HEAP16[(($143)>>1)]=$133;
      __label__ = 36; break;
    case 36: // $144
      var $145=$c;
      var $146=((($145)+1)|0);
      $c=$146;
      __label__ = 34; break;
    case 37: // $147
      __label__ = 38; break;
    case 38: // $148
      var $149=$col;
      var $150=((($149)+1)|0);
      $col=$150;
      __label__ = 9; break;
    case 39: // $151
      __label__ = 40; break;
    case 40: // $152
      var $153=$row;
      var $154=((($153)+1)|0);
      $row=$154;
      __label__ = 3; break;
    case 41: // $155
      var $156=HEAP32[((_document_mode)>>2)];
      var $157=((($156))|0)!=0;
      if ($157) { __label__ = 42; break; } else { __label__ = 49; break; }
    case 42: // $158
      $i=0;
      __label__ = 43; break;
    case 43: // $159
      var $160=$i;
      var $161=HEAPU16[((_height)>>1)];
      var $162=((($161))&65535);
      var $163=HEAPU16[((_width)>>1)];
      var $164=((($163))&65535);
      var $165=((($162)*($164))|0);
      var $166=(((($165)<<2))|0);
      var $167=((($160))|0) < ((($166))|0);
      if ($167) { __label__ = 44; break; } else { __label__ = 48; break; }
    case 44: // $168
      var $169=$i;
      var $170=HEAP32[((_image)>>2)];
      var $171=(($170)|0);
      var $172=(($171+($169<<1))|0);
      var $173=HEAP16[(($172)>>1)];
      var $174=((($173) << 16) >> 16);
      var $175=((($174))|0) < 0;
      if ($175) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: // $176
      var $177=$i;
      var $178=HEAP32[((_image)>>2)];
      var $179=(($178)|0);
      var $180=(($179+($177<<1))|0);
      HEAP16[(($180)>>1)]=0;
      __label__ = 46; break;
    case 46: // $181
      __label__ = 47; break;
    case 47: // $182
      var $183=$i;
      var $184=((($183)+1)|0);
      $i=$184;
      __label__ = 43; break;
    case 48: // $185
      __label__ = 49; break;
    case 49: // $186
      _foveon_load_camf();
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_load_raw["X"]=1;

function _foveon_camf_param($block, $param) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $idx;
      var $num;
      var $pos;
      var $cp;
      var $dp;
      $2=$block;
      $3=$param;
      $idx=0;
      __label__ = 1; break;
    case 1: // $4
      var $5=$idx;
      var $6=HEAPU32[((_meta_length)>>2)];
      var $7=((($5))>>>0) < ((($6))>>>0);
      if ($7) { __label__ = 2; break; } else { __label__ = 15; break; }
    case 2: // $8
      var $9=HEAP32[((_meta_data)>>2)];
      var $10=$idx;
      var $11=(($9+$10)|0);
      $pos=$11;
      var $12=$pos;
      var $13=_strncmp($12, ((__str33)|0), 3);
      var $14=((($13))|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $15
      __label__ = 15; break;
    case 4: // $16
      var $17=$pos;
      var $18=(($17+3)|0);
      var $19=HEAP8[($18)];
      var $20=((($19) << 24) >> 24);
      var $21=((($20))|0)!=80;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $22
      __label__ = 14; break;
    case 6: // $23
      var $24=$2;
      var $25=$pos;
      var $26=$pos;
      var $27=(($26+12)|0);
      var $28=_sget4($27);
      var $29=(($25+$28)|0);
      var $30=_strcmp($24, $29);
      var $31=((($30))|0)!=0;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $32
      __label__ = 14; break;
    case 8: // $33
      var $34=$pos;
      var $35=$pos;
      var $36=(($35+16)|0);
      var $37=_sget4($36);
      var $38=(($34+$37)|0);
      $cp=$38;
      var $39=$cp;
      var $40=_sget4($39);
      $num=$40;
      var $41=$pos;
      var $42=$cp;
      var $43=(($42+4)|0);
      var $44=_sget4($43);
      var $45=(($41+$44)|0);
      $dp=$45;
      __label__ = 9; break;
    case 9: // $46
      var $47=$num;
      var $48=((($47)-1)|0);
      $num=$48;
      var $49=((($47))|0)!=0;
      if ($49) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: // $50
      var $51=$cp;
      var $52=(($51+8)|0);
      $cp=$52;
      var $53=$3;
      var $54=$dp;
      var $55=$cp;
      var $56=_sget4($55);
      var $57=(($54+$56)|0);
      var $58=_strcmp($53, $57);
      var $59=((($58))|0)!=0;
      if ($59) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $60
      var $61=$dp;
      var $62=$cp;
      var $63=(($62+4)|0);
      var $64=_sget4($63);
      var $65=(($61+$64)|0);
      $1=$65;
      __label__ = 16; break;
    case 12: // $66
      __label__ = 9; break;
    case 13: // $67
      __label__ = 14; break;
    case 14: // $68
      var $69=$pos;
      var $70=(($69+8)|0);
      var $71=_sget4($70);
      var $72=$idx;
      var $73=((($72)+($71))|0);
      $idx=$73;
      __label__ = 1; break;
    case 15: // $74
      $1=0;
      __label__ = 16; break;
    case 16: // $75
      var $76=$1;
      ;
      return $76;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_camf_param["X"]=1;

function _foveon_camf_matrix($dim, $name) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $i;
      var $idx;
      var $type;
      var $ndim;
      var $size;
      var $mat;
      var $pos;
      var $cp;
      var $dp;
      var $dsize;
      $2=$dim;
      $3=$name;
      $idx=0;
      __label__ = 1; break;
    case 1: // $4
      var $5=$idx;
      var $6=HEAPU32[((_meta_length)>>2)];
      var $7=((($5))>>>0) < ((($6))>>>0);
      if ($7) { __label__ = 2; break; } else { __label__ = 25; break; }
    case 2: // $8
      var $9=HEAP32[((_meta_data)>>2)];
      var $10=$idx;
      var $11=(($9+$10)|0);
      $pos=$11;
      var $12=$pos;
      var $13=_strncmp($12, ((__str33)|0), 3);
      var $14=((($13))|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $15
      __label__ = 25; break;
    case 4: // $16
      var $17=$pos;
      var $18=(($17+3)|0);
      var $19=HEAP8[($18)];
      var $20=((($19) << 24) >> 24);
      var $21=((($20))|0)!=77;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $22
      __label__ = 24; break;
    case 6: // $23
      var $24=$3;
      var $25=$pos;
      var $26=$pos;
      var $27=(($26+12)|0);
      var $28=_sget4($27);
      var $29=(($25+$28)|0);
      var $30=_strcmp($24, $29);
      var $31=((($30))|0)!=0;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $32
      __label__ = 24; break;
    case 8: // $33
      var $34=$2;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=1;
      var $36=$2;
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=1;
      var $38=$2;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=1;
      var $40=$pos;
      var $41=$pos;
      var $42=(($41+16)|0);
      var $43=_sget4($42);
      var $44=(($40+$43)|0);
      $cp=$44;
      var $45=$cp;
      var $46=_sget4($45);
      $type=$46;
      var $47=$cp;
      var $48=(($47+4)|0);
      var $49=_sget4($48);
      $ndim=$49;
      var $50=((($49))>>>0) > 3;
      if ($50) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $51
      __label__ = 25; break;
    case 10: // $52
      var $53=$pos;
      var $54=$cp;
      var $55=(($54+8)|0);
      var $56=_sget4($55);
      var $57=(($53+$56)|0);
      $dp=$57;
      var $58=$ndim;
      $i=$58;
      __label__ = 11; break;
    case 11: // $59
      var $60=$i;
      var $61=((($60)-1)|0);
      $i=$61;
      var $62=((($60))|0)!=0;
      if ($62) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $63
      var $64=$cp;
      var $65=(($64+12)|0);
      $cp=$65;
      var $66=$cp;
      var $67=_sget4($66);
      var $68=$i;
      var $69=$2;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=$67;
      __label__ = 11; break;
    case 13: // $71
      var $72=$2;
      var $73=(($72)|0);
      var $74=HEAPU32[(($73)>>2)];
      var $75=((($74))>>>0);
      var $76=$2;
      var $77=(($76+4)|0);
      var $78=HEAPU32[(($77)>>2)];
      var $79=((($78))>>>0);
      var $80=($75)*($79);
      var $81=$2;
      var $82=(($81+8)|0);
      var $83=HEAPU32[(($82)>>2)];
      var $84=((($83))>>>0);
      var $85=($80)*($84);
      $dsize=$85;
      var $86=HEAPU32[((_meta_length)>>2)];
      var $87=Math.floor(((($86))>>>0)/4);
      var $88=((($87))>>>0);
      var $89=($85) > ($88);
      if ($89) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $90
      __label__ = 25; break;
    case 15: // $91
      var $92=$dsize;
      var $93=(($92) >= 0 ? Math.floor(($92)) : Math.ceil(($92)));
      $size=$93;
      var $94=(((($93)<<2))|0);
      var $95=_malloc($94);
      var $96=$95;
      $mat=$96;
      var $97=$mat;
      var $98=$97;
      _merror($98, ((__str34)|0));
      $i=0;
      __label__ = 16; break;
    case 16: // $99
      var $100=$i;
      var $101=$size;
      var $102=((($100))>>>0) < ((($101))>>>0);
      if ($102) { __label__ = 17; break; } else { __label__ = 23; break; }
    case 17: // $103
      var $104=$type;
      var $105=((($104))|0)!=0;
      if ($105) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $106
      var $107=$type;
      var $108=((($107))|0)!=6;
      if ($108) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $109
      var $110=$dp;
      var $111=$i;
      var $112=(((($111)<<2))|0);
      var $113=(($110+$112)|0);
      var $114=_sget4($113);
      var $115=$i;
      var $116=$mat;
      var $117=(($116+($115<<2))|0);
      HEAP32[(($117)>>2)]=$114;
      __label__ = 21; break;
    case 20: // $118
      var $119=$dp;
      var $120=$i;
      var $121=(((($120)<<1))|0);
      var $122=(($119+$121)|0);
      var $123=_sget4($122);
      var $124=($123) & 65535;
      var $125=$i;
      var $126=$mat;
      var $127=(($126+($125<<2))|0);
      HEAP32[(($127)>>2)]=$124;
      __label__ = 21; break;
    case 21: // $128
      __label__ = 22; break;
    case 22: // $129
      var $130=$i;
      var $131=((($130)+1)|0);
      $i=$131;
      __label__ = 16; break;
    case 23: // $132
      var $133=$mat;
      var $134=$133;
      $1=$134;
      __label__ = 26; break;
    case 24: // $135
      var $136=$pos;
      var $137=(($136+8)|0);
      var $138=_sget4($137);
      var $139=$idx;
      var $140=((($139)+($138))|0);
      $idx=$140;
      __label__ = 1; break;
    case 25: // $141
      var $142=HEAP32[((__impure_ptr)>>2)];
      var $143=(($142+12)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=HEAP32[((_ifname)>>2)];
      var $146=$3;
      var $147=_fprintf($144, ((__str35)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$145,HEAP32[((tempInt+4)>>2)]=$146,tempInt));
      $1=0;
      __label__ = 26; break;
    case 26: // $148
      var $149=$1;
      ;
      return $149;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_camf_matrix["X"]=1;

function _foveon_fixed($ptr, $size, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $dp;
      var $dim=__stackBase__;
      $2=$ptr;
      $3=$size;
      $4=$name;
      var $5=(($dim)|0);
      var $6=$4;
      var $7=_foveon_camf_matrix($5, $6);
      $dp=$7;
      var $8=$dp;
      var $9=((($8))|0)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $10
      $1=0;
      __label__ = 3; break;
    case 2: // $11
      var $12=$2;
      var $13=$dp;
      var $14=$3;
      var $15=(((($14)<<2))|0);
      assert($15 % 1 === 0, 'memcpy given ' + $15 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($12, $13, $15, 1);
      var $16=$dp;
      _free($16);
      $1=1;
      __label__ = 3; break;
    case 3: // $17
      var $18=$1;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _foveon_make_curve($max, $mul, $filt) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $curve;
      var $i;
      var $size;
      var $x;
      $1=$max;
      $2=$mul;
      $3=$filt;
      var $4=$3;
      var $5=($4) != 0;
      if ($5) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $6
      $3=0.8;
      __label__ = 2; break;
    case 2: // $7
      var $8=$1;
      var $9=($8)*12.566370614359172;
      var $10=$3;
      var $11=($9)/($10);
      var $12=(($11) >= 0 ? Math.floor(($11)) : Math.ceil(($11)));
      $size=$12;
      var $13=$size;
      var $14=((($13))|0)==-1;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $15
      var $16=$size;
      var $17=((($16)-1)|0);
      $size=$17;
      __label__ = 4; break;
    case 4: // $18
      var $19=$size;
      var $20=((($19)+1)|0);
      var $21=_calloc($20, 2);
      var $22=$21;
      $curve=$22;
      var $23=$curve;
      var $24=$23;
      _merror($24, ((__str36)|0));
      var $25=$size;
      var $26=((($25)) & 65535);
      var $27=$curve;
      var $28=(($27)|0);
      HEAP16[(($28)>>1)]=$26;
      $i=0;
      __label__ = 5; break;
    case 5: // $29
      var $30=$i;
      var $31=$size;
      var $32=((($30))>>>0) < ((($31))>>>0);
      if ($32) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $33
      var $34=$i;
      var $35=((($34))>>>0);
      var $36=$3;
      var $37=($35)*($36);
      var $38=$1;
      var $39=($37)/($38);
      var $40=($39)/4;
      $x=$40;
      var $41=$x;
      var $42=_cos($41);
      var $43=($42)+1;
      var $44=($43)/2;
      var $45=$i;
      var $46=((($45))>>>0);
      var $47=$3;
      var $48=($46)*($47);
      var $49=$2;
      var $50=($48)/($49);
      var $51=_tanh($50);
      var $52=($44)*($51);
      var $53=$2;
      var $54=($52)*($53);
      var $55=($54)+0.5;
      var $56=((($55))|0);
      var $57=$i;
      var $58=((($57)+1)|0);
      var $59=$curve;
      var $60=(($59+($58<<1))|0);
      HEAP16[(($60)>>1)]=$56;
      __label__ = 7; break;
    case 7: // $61
      var $62=$i;
      var $63=((($62)+1)|0);
      $i=$63;
      __label__ = 5; break;
    case 8: // $64
      var $65=$curve;
      ;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_make_curve["X"]=1;

function _foveon_make_curves($curvep, $dq, $div, $filt) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $mul=__stackBase__;
      var $max;
      var $c;
      $1=$curvep;
      $2=$dq;
      $3=$div;
      $4=$filt;
      $max=0;
      $c=0;
      __label__ = 1; break;
    case 1: // $5
      var $6=$c;
      var $7=((($6))|0) < 3;
      if ($7) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $8
      var $9=$c;
      var $10=$2;
      var $11=(($10+($9<<2))|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=$c;
      var $14=$3;
      var $15=(($14+($13<<2))|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=($12)/($16);
      var $18=($17);
      var $19=$c;
      var $20=(($mul+($19<<3))|0);
      (tempDoubleF64[0]=$18,HEAP32[(($20)>>2)]=tempDoubleI32[0],HEAP32[(($20+4)>>2)]=tempDoubleI32[1]);
      __label__ = 3; break;
    case 3: // $21
      var $22=$c;
      var $23=((($22)+1)|0);
      $c=$23;
      __label__ = 1; break;
    case 4: // $24
      $c=0;
      __label__ = 5; break;
    case 5: // $25
      var $26=$c;
      var $27=((($26))|0) < 3;
      if ($27) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: // $28
      var $29=$max;
      var $30=$c;
      var $31=(($mul+($30<<3))|0);
      var $32=(tempDoubleI32[0]=HEAP32[(($31)>>2)],tempDoubleI32[1]=HEAP32[(($31+4)>>2)],tempDoubleF64[0]);
      var $33=($29) < ($32);
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $34
      var $35=$c;
      var $36=(($mul+($35<<3))|0);
      var $37=(tempDoubleI32[0]=HEAP32[(($36)>>2)],tempDoubleI32[1]=HEAP32[(($36+4)>>2)],tempDoubleF64[0]);
      $max=$37;
      __label__ = 8; break;
    case 8: // $38
      __label__ = 9; break;
    case 9: // $39
      var $40=$c;
      var $41=((($40)+1)|0);
      $c=$41;
      __label__ = 5; break;
    case 10: // $42
      $c=0;
      __label__ = 11; break;
    case 11: // $43
      var $44=$c;
      var $45=((($44))|0) < 3;
      if ($45) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $46
      var $47=$max;
      var $48=$c;
      var $49=(($mul+($48<<3))|0);
      var $50=(tempDoubleI32[0]=HEAP32[(($49)>>2)],tempDoubleI32[1]=HEAP32[(($49+4)>>2)],tempDoubleF64[0]);
      var $51=$4;
      var $52=($51);
      var $53=_foveon_make_curve($47, $50, $52);
      var $54=$c;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      __label__ = 13; break;
    case 13: // $57
      var $58=$c;
      var $59=((($58)+1)|0);
      $c=$59;
      __label__ = 11; break;
    case 14: // $60
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_make_curves["X"]=1;

function _foveon_apply_curve($curve, $i) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      $2=$curve;
      $3=$i;
      var $4=$3;
      var $5=_abs($4);
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP16[(($7)>>1)];
      var $9=((($8) << 16) >> 16);
      var $10=((($5))|0) >= ((($9))|0);
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      $1=0;
      __label__ = 6; break;
    case 2: // $12
      var $13=$3;
      var $14=((($13))|0) < 0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $15
      var $16=$3;
      var $17=((1-($16))|0);
      var $18=$2;
      var $19=(($18+($17<<1))|0);
      var $20=HEAP16[(($19)>>1)];
      var $21=((($20) << 16) >> 16);
      var $22=(((-($21)))|0);
      var $31 = $22;__label__ = 5; break;
    case 4: // $23
      var $24=$3;
      var $25=((($24)+1)|0);
      var $26=$2;
      var $27=(($26+($25<<1))|0);
      var $28=HEAP16[(($27)>>1)];
      var $29=((($28) << 16) >> 16);
      var $31 = $29;__label__ = 5; break;
    case 5: // $30
      var $31;
      $1=$31;
      __label__ = 6; break;
    case 6: // $32
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _foveon_interpolate() {
  var __stackBase__  = STACKTOP; STACKTOP += 796; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pix;
      var $prev=__stackBase__;
      var $curve=__stackBase__+8;
      var $shrink;
      var $cfilt=__stackBase__+40;
      var $ddft=__stackBase__+44;
      var $ppm=__stackBase__+116;
      var $cam_xyz=__stackBase__+224;
      var $correct=__stackBase__+260;
      var $last=__stackBase__+296;
      var $trans=__stackBase__+332;
      var $chroma_dq=__stackBase__+368;
      var $color_dq=__stackBase__+380;
      var $diag=__stackBase__+392;
      var $div=__stackBase__+428;
      var $black;
      var $sgain;
      var $sgrow;
      var $fsum=__stackBase__+440;
      var $val;
      var $frow;
      var $num;
      var $row;
      var $col;
      var $c;
      var $i;
      var $j;
      var $diff;
      var $sgx;
      var $irow;
      var $sum;
      var $min;
      var $max;
      var $limit;
      var $dscr=__stackBase__+452;
      var $dstb=__stackBase__+468;
      var $smrow=__stackBase__+484;
      var $total=__stackBase__+512;
      var $ipix=__stackBase__+528;
      var $work=__stackBase__+540;
      var $smlast;
      var $smred;
      var $smred_p;
      var $dev=__stackBase__+576;
      var $satlev=__stackBase__+588;
      var $keep=__stackBase__+600;
      var $active=__stackBase__+616;
      var $dim=__stackBase__+632;
      var $badpix;
      var $dsum;
      var $trsum=__stackBase__+644;
      var $str=__stackBase__+668;
      var $cp;
      HEAPF32[(($cfilt)>>2)]=0;
      $smred_p=0;
      $dsum=0;
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str37)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      var $9=(($dscr)|0);
      var $10=$9;
      var $11=_foveon_fixed($10, 4, ((__str38)|0));
      var $12=(($ppm)|0);
      var $13=(($12)|0);
      var $14=(($13)|0);
      var $15=$14;
      var $16=_foveon_fixed($15, 27, ((__str39)|0));
      var $17=(($satlev)|0);
      var $18=$17;
      var $19=_foveon_fixed($18, 3, ((__str40)|0));
      var $20=(($keep)|0);
      var $21=$20;
      var $22=_foveon_fixed($21, 4, ((__str41)|0));
      var $23=(($active)|0);
      var $24=$23;
      var $25=_foveon_fixed($24, 4, ((__str42)|0));
      var $26=(($chroma_dq)|0);
      var $27=$26;
      var $28=_foveon_fixed($27, 3, ((__str43)|0));
      var $29=(($color_dq)|0);
      var $30=$29;
      var $31=_foveon_camf_param(((__str44)|0), ((__str45)|0));
      var $32=((($31))|0)!=0;
      var $33=($32) ? (((__str45)|0)) : (((__str46)|0));
      var $34=_foveon_fixed($30, 3, $33);
      var $35=_foveon_camf_param(((__str44)|0), ((__str47)|0));
      var $36=((($35))|0)!=0;
      if ($36) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $37
      var $38=$cfilt;
      var $39=_foveon_fixed($38, 1, ((__str47)|0));
      __label__ = 4; break;
    case 4: // $40
      var $41=(($ddft)|0);
      var $42=$41;
      _memset($42, 0, 72, 1);
      var $43=_foveon_camf_param(((__str44)|0), ((__str48)|0));
      var $44=((($43))|0)!=0;
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $45
      var $46=(($ddft+24)|0);
      var $47=(($46)|0);
      var $48=(($47)|0);
      var $49=$48;
      var $50=_foveon_fixed($49, 12, ((__str48)|0));
      var $51=((($50))|0)!=0;
      if ($51) { __label__ = 27; break; } else { __label__ = 6; break; }
    case 6: // $52
      $i=0;
      __label__ = 7; break;
    case 7: // $53
      var $54=$i;
      var $55=((($54))|0) < 2;
      if ($55) { __label__ = 8; break; } else { __label__ = 26; break; }
    case 8: // $56
      var $57=(($dstb)|0);
      var $58=$57;
      var $59=$i;
      var $60=((($59))|0)!=0;
      var $61=($60) ? (((__str49)|0)) : (((__str50)|0));
      var $62=_foveon_fixed($58, 4, $61);
      var $63=(($dstb+4)|0);
      var $64=HEAP32[(($63)>>2)];
      $row=$64;
      __label__ = 9; break;
    case 9: // $65
      var $66=$row;
      var $67=(($dstb+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=((($66))|0) <= ((($68))|0);
      if ($69) { __label__ = 10; break; } else { __label__ = 20; break; }
    case 10: // $70
      var $71=(($dstb)|0);
      var $72=HEAP32[(($71)>>2)];
      $col=$72;
      __label__ = 11; break;
    case 11: // $73
      var $74=$col;
      var $75=(($dstb+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($74))|0) <= ((($76))|0);
      if ($77) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: // $78
      $c=0;
      __label__ = 13; break;
    case 13: // $79
      var $80=$c;
      var $81=((($80))|0) < 3;
      if ($81) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $82
      var $83=$c;
      var $84=$row;
      var $85=HEAPU16[((_width)>>1)];
      var $86=((($85))&65535);
      var $87=((($84)*($86))|0);
      var $88=$col;
      var $89=((($87)+($88))|0);
      var $90=HEAP32[((_image)>>2)];
      var $91=(($90+($89<<3))|0);
      var $92=(($91+($83<<1))|0);
      var $93=HEAP16[(($92)>>1)];
      var $94=((($93) << 16) >> 16);
      var $95=((($94))|0);
      var $96=$c;
      var $97=$i;
      var $98=((($97)+1)|0);
      var $99=(($ddft+$98*24)|0);
      var $100=(($99+($96<<3))|0);
      var $101=(($100+4)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=($102)+($95);
      HEAPF32[(($101)>>2)]=$103;
      __label__ = 15; break;
    case 15: // $104
      var $105=$c;
      var $106=((($105)+1)|0);
      $c=$106;
      __label__ = 13; break;
    case 16: // $107
      __label__ = 17; break;
    case 17: // $108
      var $109=$col;
      var $110=((($109)+1)|0);
      $col=$110;
      __label__ = 11; break;
    case 18: // $111
      __label__ = 19; break;
    case 19: // $112
      var $113=$row;
      var $114=((($113)+1)|0);
      $row=$114;
      __label__ = 9; break;
    case 20: // $115
      $c=0;
      __label__ = 21; break;
    case 21: // $116
      var $117=$c;
      var $118=((($117))|0) < 3;
      if ($118) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $119
      var $120=(($dstb+12)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($dstb+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=((($121)-($123))|0);
      var $125=((($124)+1)|0);
      var $126=(($dstb+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($dstb)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($127)-($129))|0);
      var $131=((($130)+1)|0);
      var $132=((($125)*($131))|0);
      var $133=((($132))|0);
      var $134=$c;
      var $135=$i;
      var $136=((($135)+1)|0);
      var $137=(($ddft+$136*24)|0);
      var $138=(($137+($134<<3))|0);
      var $139=(($138+4)|0);
      var $140=HEAPF32[(($139)>>2)];
      var $141=($140)/($133);
      HEAPF32[(($139)>>2)]=$141;
      __label__ = 23; break;
    case 23: // $142
      var $143=$c;
      var $144=((($143)+1)|0);
      $c=$144;
      __label__ = 21; break;
    case 24: // $145
      __label__ = 25; break;
    case 25: // $146
      var $147=$i;
      var $148=((($147)+1)|0);
      $i=$148;
      __label__ = 7; break;
    case 26: // $149
      __label__ = 27; break;
    case 27: // $150
      var $151=_foveon_camf_param(((__str51)|0), ((_model2)|0));
      $cp=$151;
      var $152=((($151))|0)!=0;
      if ($152) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: // $153
      var $154=HEAP32[((__impure_ptr)>>2)];
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=HEAP32[((_ifname)>>2)];
      var $158=_fprintf($156, ((__str52)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$157,HEAP32[((tempInt+4)>>2)]=((_model2)|0),tempInt));
      __label__ = 500; break;
    case 29: // $159
      var $160=(($cam_xyz)|0);
      var $161=$160;
      var $162=$cp;
      var $163=_foveon_fixed($161, 9, $162);
      var $164=(($correct)|0);
      var $165=$164;
      var $166=_foveon_camf_param(((__str53)|0), ((_model2)|0));
      var $167=_foveon_fixed($165, 9, $166);
      var $168=(($last)|0);
      var $169=$168;
      _memset($169, 0, 36, 1);
      $i=0;
      __label__ = 30; break;
    case 30: // $170
      var $171=$i;
      var $172=((($171))|0) < 3;
      if ($172) { __label__ = 31; break; } else { __label__ = 41; break; }
    case 31: // $173
      $j=0;
      __label__ = 32; break;
    case 32: // $174
      var $175=$j;
      var $176=((($175))|0) < 3;
      if ($176) { __label__ = 33; break; } else { __label__ = 39; break; }
    case 33: // $177
      $c=0;
      __label__ = 34; break;
    case 34: // $178
      var $179=$c;
      var $180=((($179))|0) < 3;
      if ($180) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: // $181
      var $182=$c;
      var $183=$i;
      var $184=(($correct+$183*12)|0);
      var $185=(($184+($182<<2))|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=$j;
      var $188=$c;
      var $189=(($cam_xyz+$188*12)|0);
      var $190=(($189+($187<<2))|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=($186)*($191);
      var $193=$j;
      var $194=$i;
      var $195=(($last+$194*12)|0);
      var $196=(($195+($193<<2))|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=($197)+($192);
      HEAPF32[(($196)>>2)]=$198;
      __label__ = 36; break;
    case 36: // $199
      var $200=$c;
      var $201=((($200)+1)|0);
      $c=$201;
      __label__ = 34; break;
    case 37: // $202
      __label__ = 38; break;
    case 38: // $203
      var $204=$j;
      var $205=((($204)+1)|0);
      $j=$205;
      __label__ = 32; break;
    case 39: // $206
      __label__ = 40; break;
    case 40: // $207
      var $208=$i;
      var $209=((($208)+1)|0);
      $i=$209;
      __label__ = 30; break;
    case 41: // $210
      $i=0;
      __label__ = 42; break;
    case 42: // $211
      var $212=$i;
      var $213=((($212))|0) < 3;
      if ($213) { __label__ = 43; break; } else { __label__ = 49; break; }
    case 43: // $214
      $c=0;
      __label__ = 44; break;
    case 44: // $215
      var $216=$c;
      var $217=((($216))|0) < 3;
      if ($217) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: // $218
      var $219=$c;
      var $220=((($219)+1)|0);
      var $221=((($220))|0)%3;
      var $222=$i;
      var $223=((($222)+1)|0);
      var $224=((($223))|0)%3;
      var $225=(($last+$224*12)|0);
      var $226=(($225+($221<<2))|0);
      var $227=HEAPF32[(($226)>>2)];
      var $228=$c;
      var $229=((($228)+2)|0);
      var $230=((($229))|0)%3;
      var $231=$i;
      var $232=((($231)+2)|0);
      var $233=((($232))|0)%3;
      var $234=(($last+$233*12)|0);
      var $235=(($234+($230<<2))|0);
      var $236=HEAPF32[(($235)>>2)];
      var $237=($227)*($236);
      var $238=$c;
      var $239=((($238)+2)|0);
      var $240=((($239))|0)%3;
      var $241=$i;
      var $242=((($241)+1)|0);
      var $243=((($242))|0)%3;
      var $244=(($last+$243*12)|0);
      var $245=(($244+($240<<2))|0);
      var $246=HEAPF32[(($245)>>2)];
      var $247=$c;
      var $248=((($247)+1)|0);
      var $249=((($248))|0)%3;
      var $250=$i;
      var $251=((($250)+2)|0);
      var $252=((($251))|0)%3;
      var $253=(($last+$252*12)|0);
      var $254=(($253+($249<<2))|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=($246)*($255);
      var $257=($237)-($256);
      var $258=$i;
      var $259=$c;
      var $260=(($diag+$259*12)|0);
      var $261=(($260+($258<<2))|0);
      HEAPF32[(($261)>>2)]=$257;
      __label__ = 46; break;
    case 46: // $262
      var $263=$c;
      var $264=((($263)+1)|0);
      $c=$264;
      __label__ = 44; break;
    case 47: // $265
      __label__ = 48; break;
    case 48: // $266
      var $267=$i;
      var $268=((($267)+1)|0);
      $i=$268;
      __label__ = 42; break;
    case 49: // $269
      $c=0;
      __label__ = 50; break;
    case 50: // $270
      var $271=$c;
      var $272=((($271))|0) < 3;
      if ($272) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: // $273
      var $274=$c;
      var $275=(($diag+$274*12)|0);
      var $276=(($275)|0);
      var $277=HEAPF32[(($276)>>2)];
      var $278=($277);
      var $279=($278)*0.3127;
      var $280=$c;
      var $281=(($diag+$280*12)|0);
      var $282=(($281+4)|0);
      var $283=HEAPF32[(($282)>>2)];
      var $284=($283);
      var $285=($284)*0.329;
      var $286=($279)+($285);
      var $287=$c;
      var $288=(($diag+$287*12)|0);
      var $289=(($288+8)|0);
      var $290=HEAPF32[(($289)>>2)];
      var $291=($290);
      var $292=($291)*0.3583;
      var $293=($286)+($292);
      var $294=($293);
      var $295=$c;
      var $296=(($div+($295<<2))|0);
      HEAPF32[(($296)>>2)]=$294;
      __label__ = 52; break;
    case 52: // $297
      var $298=$c;
      var $299=((($298)+1)|0);
      $c=$299;
      __label__ = 50; break;
    case 53: // $300
      var $301=(($str)|0);
      var $302=_sprintf($301, ((__str54)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_model2)|0),tempInt));
      var $303=(($str)|0);
      var $304=_foveon_camf_param(((__str44)|0), $303);
      var $305=((($304))|0)!=0;
      if ($305) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: // $306
      var $307=(($div)|0);
      var $308=$307;
      var $309=(($str)|0);
      var $310=_foveon_fixed($308, 3, $309);
      __label__ = 55; break;
    case 55: // $311
      $num=0;
      $c=0;
      __label__ = 56; break;
    case 56: // $312
      var $313=$c;
      var $314=((($313))|0) < 3;
      if ($314) { __label__ = 57; break; } else { __label__ = 61; break; }
    case 57: // $315
      var $316=$num;
      var $317=$c;
      var $318=(($div+($317<<2))|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=($316) < ($319);
      if ($320) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: // $321
      var $322=$c;
      var $323=(($div+($322<<2))|0);
      var $324=HEAPF32[(($323)>>2)];
      $num=$324;
      __label__ = 59; break;
    case 59: // $325
      __label__ = 60; break;
    case 60: // $326
      var $327=$c;
      var $328=((($327)+1)|0);
      $c=$328;
      __label__ = 56; break;
    case 61: // $329
      $c=0;
      __label__ = 62; break;
    case 62: // $330
      var $331=$c;
      var $332=((($331))|0) < 3;
      if ($332) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: // $333
      var $334=$num;
      var $335=$c;
      var $336=(($div+($335<<2))|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=($337)/($334);
      HEAPF32[(($336)>>2)]=$338;
      __label__ = 64; break;
    case 64: // $339
      var $340=$c;
      var $341=((($340)+1)|0);
      $c=$341;
      __label__ = 62; break;
    case 65: // $342
      var $343=(($trans)|0);
      var $344=$343;
      _memset($344, 0, 36, 1);
      $i=0;
      __label__ = 66; break;
    case 66: // $345
      var $346=$i;
      var $347=((($346))|0) < 3;
      if ($347) { __label__ = 67; break; } else { __label__ = 77; break; }
    case 67: // $348
      $j=0;
      __label__ = 68; break;
    case 68: // $349
      var $350=$j;
      var $351=((($350))|0) < 3;
      if ($351) { __label__ = 69; break; } else { __label__ = 75; break; }
    case 69: // $352
      $c=0;
      __label__ = 70; break;
    case 70: // $353
      var $354=$c;
      var $355=((($354))|0) < 3;
      if ($355) { __label__ = 71; break; } else { __label__ = 73; break; }
    case 71: // $356
      var $357=$c;
      var $358=$i;
      var $359=((_rgb_cam+($358<<4))|0);
      var $360=(($359+($357<<2))|0);
      var $361=HEAPF32[(($360)>>2)];
      var $362=$j;
      var $363=$c;
      var $364=(($last+$363*12)|0);
      var $365=(($364+($362<<2))|0);
      var $366=HEAPF32[(($365)>>2)];
      var $367=($361)*($366);
      var $368=$j;
      var $369=(($div+($368<<2))|0);
      var $370=HEAPF32[(($369)>>2)];
      var $371=($367)*($370);
      var $372=$j;
      var $373=$i;
      var $374=(($trans+$373*12)|0);
      var $375=(($374+($372<<2))|0);
      var $376=HEAPF32[(($375)>>2)];
      var $377=($376)+($371);
      HEAPF32[(($375)>>2)]=$377;
      __label__ = 72; break;
    case 72: // $378
      var $379=$c;
      var $380=((($379)+1)|0);
      $c=$380;
      __label__ = 70; break;
    case 73: // $381
      __label__ = 74; break;
    case 74: // $382
      var $383=$j;
      var $384=((($383)+1)|0);
      $j=$384;
      __label__ = 68; break;
    case 75: // $385
      __label__ = 76; break;
    case 76: // $386
      var $387=$i;
      var $388=((($387)+1)|0);
      $i=$388;
      __label__ = 66; break;
    case 77: // $389
      $c=0;
      __label__ = 78; break;
    case 78: // $390
      var $391=$c;
      var $392=((($391))|0) < 3;
      if ($392) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: // $393
      var $394=$c;
      var $395=(($trans+$394*12)|0);
      var $396=(($395)|0);
      var $397=HEAPF32[(($396)>>2)];
      var $398=$c;
      var $399=(($trans+$398*12)|0);
      var $400=(($399+4)|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=($397)+($401);
      var $403=$c;
      var $404=(($trans+$403*12)|0);
      var $405=(($404+8)|0);
      var $406=HEAPF32[(($405)>>2)];
      var $407=($402)+($406);
      var $408=($407);
      var $409=$c;
      var $410=(($trsum+($409<<3))|0);
      (tempDoubleF64[0]=$408,HEAP32[(($410)>>2)]=tempDoubleI32[0],HEAP32[(($410+4)>>2)]=tempDoubleI32[1]);
      __label__ = 80; break;
    case 80: // $411
      var $412=$c;
      var $413=((($412)+1)|0);
      $c=$413;
      __label__ = 78; break;
    case 81: // $414
      var $415=(($trsum)|0);
      var $416=(tempDoubleI32[0]=HEAP32[(($415)>>2)],tempDoubleI32[1]=HEAP32[(($415+4)>>2)],tempDoubleF64[0]);
      var $417=($416)*6;
      var $418=(($trsum+8)|0);
      var $419=(tempDoubleI32[0]=HEAP32[(($418)>>2)],tempDoubleI32[1]=HEAP32[(($418+4)>>2)],tempDoubleF64[0]);
      var $420=($419)*11;
      var $421=($417)+($420);
      var $422=(($trsum+16)|0);
      var $423=(tempDoubleI32[0]=HEAP32[(($422)>>2)],tempDoubleI32[1]=HEAP32[(($422+4)>>2)],tempDoubleF64[0]);
      var $424=($423)*3;
      var $425=($421)+($424);
      var $426=($425)/20;
      $dsum=$426;
      $i=0;
      __label__ = 82; break;
    case 82: // $427
      var $428=$i;
      var $429=((($428))|0) < 3;
      if ($429) { __label__ = 83; break; } else { __label__ = 89; break; }
    case 83: // $430
      $c=0;
      __label__ = 84; break;
    case 84: // $431
      var $432=$c;
      var $433=((($432))|0) < 3;
      if ($433) { __label__ = 85; break; } else { __label__ = 87; break; }
    case 85: // $434
      var $435=$c;
      var $436=$i;
      var $437=(($trans+$436*12)|0);
      var $438=(($437+($435<<2))|0);
      var $439=HEAPF32[(($438)>>2)];
      var $440=($439);
      var $441=$dsum;
      var $442=($440)*($441);
      var $443=$i;
      var $444=(($trsum+($443<<3))|0);
      var $445=(tempDoubleI32[0]=HEAP32[(($444)>>2)],tempDoubleI32[1]=HEAP32[(($444+4)>>2)],tempDoubleF64[0]);
      var $446=($442)/($445);
      var $447=($446);
      var $448=$c;
      var $449=$i;
      var $450=(($last+$449*12)|0);
      var $451=(($450+($448<<2))|0);
      HEAPF32[(($451)>>2)]=$447;
      __label__ = 86; break;
    case 86: // $452
      var $453=$c;
      var $454=((($453)+1)|0);
      $c=$454;
      __label__ = 84; break;
    case 87: // $455
      __label__ = 88; break;
    case 88: // $456
      var $457=$i;
      var $458=((($457)+1)|0);
      $i=$458;
      __label__ = 82; break;
    case 89: // $459
      var $460=(($trans)|0);
      var $461=$460;
      _memset($461, 0, 36, 1);
      $i=0;
      __label__ = 90; break;
    case 90: // $462
      var $463=$i;
      var $464=((($463))|0) < 3;
      if ($464) { __label__ = 91; break; } else { __label__ = 101; break; }
    case 91: // $465
      $j=0;
      __label__ = 92; break;
    case 92: // $466
      var $467=$j;
      var $468=((($467))|0) < 3;
      if ($468) { __label__ = 93; break; } else { __label__ = 99; break; }
    case 93: // $469
      $c=0;
      __label__ = 94; break;
    case 94: // $470
      var $471=$c;
      var $472=((($471))|0) < 3;
      if ($472) { __label__ = 95; break; } else { __label__ = 97; break; }
    case 95: // $473
      var $474=$i;
      var $475=$c;
      var $476=((($474))|0)==((($475))|0);
      var $477=($476) ? 32 : -1;
      var $478=((($477))|0);
      var $479=$j;
      var $480=$c;
      var $481=(($last+$480*12)|0);
      var $482=(($481+($479<<2))|0);
      var $483=HEAPF32[(($482)>>2)];
      var $484=($478)*($483);
      var $485=($484)/30;
      var $486=$j;
      var $487=$i;
      var $488=(($trans+$487*12)|0);
      var $489=(($488+($486<<2))|0);
      var $490=HEAPF32[(($489)>>2)];
      var $491=($490)+($485);
      HEAPF32[(($489)>>2)]=$491;
      __label__ = 96; break;
    case 96: // $492
      var $493=$c;
      var $494=((($493)+1)|0);
      $c=$494;
      __label__ = 94; break;
    case 97: // $495
      __label__ = 98; break;
    case 98: // $496
      var $497=$j;
      var $498=((($497)+1)|0);
      $j=$498;
      __label__ = 92; break;
    case 99: // $499
      __label__ = 100; break;
    case 100: // $500
      var $501=$i;
      var $502=((($501)+1)|0);
      $i=$502;
      __label__ = 90; break;
    case 101: // $503
      var $504=(($curve)|0);
      var $505=(($color_dq)|0);
      var $506=(($div)|0);
      var $507=HEAPF32[(($cfilt)>>2)];
      _foveon_make_curves($504, $505, $506, $507);
      $c=0;
      __label__ = 102; break;
    case 102: // $508
      var $509=$c;
      var $510=((($509))|0) < 3;
      if ($510) { __label__ = 103; break; } else { __label__ = 105; break; }
    case 103: // $511
      var $512=$c;
      var $513=(($chroma_dq+($512<<2))|0);
      var $514=HEAPF32[(($513)>>2)];
      var $515=($514)/3;
      HEAPF32[(($513)>>2)]=$515;
      __label__ = 104; break;
    case 104: // $516
      var $517=$c;
      var $518=((($517)+1)|0);
      $c=$518;
      __label__ = 102; break;
    case 105: // $519
      var $520=(($curve)|0);
      var $521=(($520+12)|0);
      var $522=(($chroma_dq)|0);
      var $523=(($div)|0);
      var $524=HEAPF32[(($cfilt)>>2)];
      _foveon_make_curves($521, $522, $523, $524);
      $c=0;
      __label__ = 106; break;
    case 106: // $525
      var $526=$c;
      var $527=((($526))|0) < 3;
      if ($527) { __label__ = 107; break; } else { __label__ = 109; break; }
    case 107: // $528
      var $529=$c;
      var $530=(($chroma_dq+($529<<2))|0);
      var $531=HEAPF32[(($530)>>2)];
      var $532=$c;
      var $533=(($div+($532<<2))|0);
      var $534=HEAPF32[(($533)>>2)];
      var $535=($531)/($534);
      var $536=($535);
      var $537=$dsum;
      var $538=($537)+($536);
      $dsum=$538;
      __label__ = 108; break;
    case 108: // $539
      var $540=$c;
      var $541=((($540)+1)|0);
      $c=$541;
      __label__ = 106; break;
    case 109: // $542
      var $543=$dsum;
      var $544=$dsum;
      var $545=HEAPF32[(($cfilt)>>2)];
      var $546=($545);
      var $547=_foveon_make_curve($543, $544, $546);
      var $548=(($curve+24)|0);
      HEAP32[(($548)>>2)]=$547;
      var $549=$dsum;
      var $550=($549)*2;
      var $551=$dsum;
      var $552=($551)*2;
      var $553=HEAPF32[(($cfilt)>>2)];
      var $554=($553);
      var $555=_foveon_make_curve($550, $552, $554);
      var $556=(($curve+28)|0);
      HEAP32[(($556)>>2)]=$555;
      var $557=(($dim)|0);
      var $558=_foveon_camf_matrix($557, ((__str55)|0));
      var $559=$558;
      $sgain=$559;
      var $560=$sgain;
      var $561=((($560))|0)!=0;
      if ($561) { __label__ = 111; break; } else { __label__ = 110; break; }
    case 110: // $562
      __label__ = 500; break;
    case 111: // $563
      var $564=(($dim+4)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=_calloc($565, 12);
      var $567=$566;
      $sgrow=$567;
      var $568=HEAPU16[((_width)>>1)];
      var $569=((($568))&65535);
      var $570=(($dim+4)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=((($569)+($571))|0);
      var $573=((($572)-2)|0);
      var $574=(($dim+4)|0);
      var $575=HEAP32[(($574)>>2)];
      var $576=((($575)-1)|0);
      var $577=Math.floor(((($573))>>>0)/((($576))>>>0));
      $sgx=$577;
      var $578=HEAPU16[((_height)>>1)];
      var $579=((($578))&65535);
      var $580=_calloc($579, 12);
      var $581=$580;
      $black=$581;
      $row=0;
      __label__ = 112; break;
    case 112: // $582
      var $583=$row;
      var $584=HEAPU16[((_height)>>1)];
      var $585=((($584))&65535);
      var $586=((($583))|0) < ((($585))|0);
      if ($586) { __label__ = 113; break; } else { __label__ = 123; break; }
    case 113: // $587
      $i=0;
      __label__ = 114; break;
    case 114: // $588
      var $589=$i;
      var $590=((($589))|0) < 6;
      if ($590) { __label__ = 115; break; } else { __label__ = 117; break; }
    case 115: // $591
      var $592=$i;
      var $593=(($ddft+24)|0);
      var $594=(($593)|0);
      var $595=(($594+($592<<2))|0);
      var $596=HEAPF32[(($595)>>2)];
      var $597=($596);
      var $598=$row;
      var $599=((($598))|0);
      var $600=HEAPU16[((_height)>>1)];
      var $601=((($600))&65535);
      var $602=((($601))|0);
      var $603=($602)-1;
      var $604=($599)/($603);
      var $605=$i;
      var $606=(($ddft+48)|0);
      var $607=(($606)|0);
      var $608=(($607+($605<<2))|0);
      var $609=HEAPF32[(($608)>>2)];
      var $610=$i;
      var $611=(($ddft+24)|0);
      var $612=(($611)|0);
      var $613=(($612+($610<<2))|0);
      var $614=HEAPF32[(($613)>>2)];
      var $615=($609)-($614);
      var $616=($615);
      var $617=($604)*($616);
      var $618=($597)+($617);
      var $619=($618);
      var $620=$i;
      var $621=(($ddft)|0);
      var $622=(($621)|0);
      var $623=(($622+($620<<2))|0);
      HEAPF32[(($623)>>2)]=$619;
      __label__ = 116; break;
    case 116: // $624
      var $625=$i;
      var $626=((($625)+1)|0);
      $i=$626;
      __label__ = 114; break;
    case 117: // $627
      $c=0;
      __label__ = 118; break;
    case 118: // $628
      var $629=$c;
      var $630=((($629))|0) < 3;
      if ($630) { __label__ = 119; break; } else { __label__ = 121; break; }
    case 119: // $631
      var $632=$row;
      var $633=HEAPU16[((_width)>>1)];
      var $634=((($633))&65535);
      var $635=((($632)*($634))|0);
      var $636=HEAP32[((_image)>>2)];
      var $637=(($636+($635<<3))|0);
      var $638=(($637)|0);
      var $639=$c;
      var $640=(($638+($639<<1))|0);
      var $641=(($dscr)|0);
      var $642=(($641)|0);
      var $643=HEAPF32[(($cfilt)>>2)];
      var $644=_foveon_avg($640, $642, $643);
      var $645=$row;
      var $646=HEAPU16[((_width)>>1)];
      var $647=((($646))&65535);
      var $648=((($645)*($647))|0);
      var $649=HEAP32[((_image)>>2)];
      var $650=(($649+($648<<3))|0);
      var $651=(($650)|0);
      var $652=$c;
      var $653=(($651+($652<<1))|0);
      var $654=(($dscr+8)|0);
      var $655=(($654)|0);
      var $656=HEAPF32[(($cfilt)>>2)];
      var $657=_foveon_avg($653, $655, $656);
      var $658=($657)*3;
      var $659=($644)+($658);
      var $660=$c;
      var $661=(($ddft)|0);
      var $662=(($661+($660<<3))|0);
      var $663=(($662)|0);
      var $664=HEAPF32[(($663)>>2)];
      var $665=($659)-($664);
      var $666=($665)/4;
      var $667=$c;
      var $668=(($ddft)|0);
      var $669=(($668+($667<<3))|0);
      var $670=(($669+4)|0);
      var $671=HEAPF32[(($670)>>2)];
      var $672=($666)-($671);
      var $673=$c;
      var $674=$row;
      var $675=$black;
      var $676=(($675+$674*12)|0);
      var $677=(($676+($673<<2))|0);
      HEAPF32[(($677)>>2)]=$672;
      __label__ = 120; break;
    case 120: // $678
      var $679=$c;
      var $680=((($679)+1)|0);
      $c=$680;
      __label__ = 118; break;
    case 121: // $681
      __label__ = 122; break;
    case 122: // $682
      var $683=$row;
      var $684=((($683)+1)|0);
      $row=$684;
      __label__ = 112; break;
    case 123: // $685
      var $686=$black;
      var $687=$686;
      var $688=$black;
      var $689=(($688+96)|0);
      var $690=$689;
      assert(96 % 1 === 0, 'memcpy given ' + 96 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($687, $690, 96, 1);
      var $691=$black;
      var $692=HEAPU16[((_height)>>1)];
      var $693=((($692))&65535);
      var $694=(($691+$693*12)|0);
      var $695=(($694-132)|0);
      var $696=$695;
      var $697=$black;
      var $698=HEAPU16[((_height)>>1)];
      var $699=((($698))&65535);
      var $700=(($697+$699*12)|0);
      var $701=(($700-264)|0);
      var $702=$701;
      assert(132 % 1 === 0, 'memcpy given ' + 132 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($696, $702, 132, 1);
      var $703=(($last)|0);
      var $704=$703;
      var $705=$black;
      var $706=$705;
      assert(36 % 1 === 0, 'memcpy given ' + 36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($704, $706, 36, 1);
      $row=1;
      __label__ = 124; break;
    case 124: // $707
      var $708=$row;
      var $709=HEAPU16[((_height)>>1)];
      var $710=((($709))&65535);
      var $711=((($710)-1)|0);
      var $712=((($708))|0) < ((($711))|0);
      if ($712) { __label__ = 125; break; } else { __label__ = 144; break; }
    case 125: // $713
      $c=0;
      __label__ = 126; break;
    case 126: // $714
      var $715=$c;
      var $716=((($715))|0) < 3;
      if ($716) { __label__ = 127; break; } else { __label__ = 142; break; }
    case 127: // $717
      var $718=$c;
      var $719=(($last+12)|0);
      var $720=(($719+($718<<2))|0);
      var $721=HEAPF32[(($720)>>2)];
      var $722=$c;
      var $723=(($last)|0);
      var $724=(($723+($722<<2))|0);
      var $725=HEAPF32[(($724)>>2)];
      var $726=($721) > ($725);
      if ($726) { __label__ = 128; break; } else { __label__ = 134; break; }
    case 128: // $727
      var $728=$c;
      var $729=(($last+12)|0);
      var $730=(($729+($728<<2))|0);
      var $731=HEAPF32[(($730)>>2)];
      var $732=$c;
      var $733=(($last+24)|0);
      var $734=(($733+($732<<2))|0);
      var $735=HEAPF32[(($734)>>2)];
      var $736=($731) > ($735);
      if ($736) { __label__ = 129; break; } else { __label__ = 133; break; }
    case 129: // $737
      var $738=$c;
      var $739=(($last)|0);
      var $740=(($739+($738<<2))|0);
      var $741=HEAPF32[(($740)>>2)];
      var $742=$c;
      var $743=(($last+24)|0);
      var $744=(($743+($742<<2))|0);
      var $745=HEAPF32[(($744)>>2)];
      var $746=($741) > ($745);
      if ($746) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: // $747
      var $748=$c;
      var $749=(($last)|0);
      var $750=(($749+($748<<2))|0);
      var $751=HEAPF32[(($750)>>2)];
      var $758 = $751;__label__ = 132; break;
    case 131: // $752
      var $753=$c;
      var $754=(($last+24)|0);
      var $755=(($754+($753<<2))|0);
      var $756=HEAPF32[(($755)>>2)];
      var $758 = $756;__label__ = 132; break;
    case 132: // $757
      var $758;
      var $759=$c;
      var $760=$row;
      var $761=$black;
      var $762=(($761+$760*12)|0);
      var $763=(($762+($759<<2))|0);
      HEAPF32[(($763)>>2)]=$758;
      __label__ = 133; break;
    case 133: // $764
      __label__ = 140; break;
    case 134: // $765
      var $766=$c;
      var $767=(($last+12)|0);
      var $768=(($767+($766<<2))|0);
      var $769=HEAPF32[(($768)>>2)];
      var $770=$c;
      var $771=(($last+24)|0);
      var $772=(($771+($770<<2))|0);
      var $773=HEAPF32[(($772)>>2)];
      var $774=($769) < ($773);
      if ($774) { __label__ = 135; break; } else { __label__ = 139; break; }
    case 135: // $775
      var $776=$c;
      var $777=(($last)|0);
      var $778=(($777+($776<<2))|0);
      var $779=HEAPF32[(($778)>>2)];
      var $780=$c;
      var $781=(($last+24)|0);
      var $782=(($781+($780<<2))|0);
      var $783=HEAPF32[(($782)>>2)];
      var $784=($779) < ($783);
      if ($784) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: // $785
      var $786=$c;
      var $787=(($last)|0);
      var $788=(($787+($786<<2))|0);
      var $789=HEAPF32[(($788)>>2)];
      var $796 = $789;__label__ = 138; break;
    case 137: // $790
      var $791=$c;
      var $792=(($last+24)|0);
      var $793=(($792+($791<<2))|0);
      var $794=HEAPF32[(($793)>>2)];
      var $796 = $794;__label__ = 138; break;
    case 138: // $795
      var $796;
      var $797=$c;
      var $798=$row;
      var $799=$black;
      var $800=(($799+$798*12)|0);
      var $801=(($800+($797<<2))|0);
      HEAPF32[(($801)>>2)]=$796;
      __label__ = 139; break;
    case 139: // $802
      __label__ = 140; break;
    case 140: // $803
      __label__ = 141; break;
    case 141: // $804
      var $805=$c;
      var $806=((($805)+1)|0);
      $c=$806;
      __label__ = 126; break;
    case 142: // $807
      var $808=(($last)|0);
      var $809=$808;
      var $810=(($last)|0);
      var $811=(($810+12)|0);
      var $812=$811;
      _llvm_memmove_p0i8_p0i8_i32($809, $812, 24, 1, 0);
      var $813=(($last+24)|0);
      var $814=(($813)|0);
      var $815=$814;
      var $816=$row;
      var $817=((($816)+1)|0);
      var $818=$black;
      var $819=(($818+$817*12)|0);
      var $820=(($819)|0);
      var $821=$820;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $821, $$dest = $815, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      __label__ = 143; break;
    case 143: // $822
      var $823=$row;
      var $824=((($823)+1)|0);
      $row=$824;
      __label__ = 124; break;
    case 144: // $825
      $c=0;
      __label__ = 145; break;
    case 145: // $826
      var $827=$c;
      var $828=((($827))|0) < 3;
      if ($828) { __label__ = 146; break; } else { __label__ = 148; break; }
    case 146: // $829
      var $830=$c;
      var $831=(($last)|0);
      var $832=(($831+($830<<2))|0);
      var $833=HEAPF32[(($832)>>2)];
      var $834=$c;
      var $835=(($last+12)|0);
      var $836=(($835+($834<<2))|0);
      var $837=HEAPF32[(($836)>>2)];
      var $838=($833)+($837);
      var $839=($838)/2;
      var $840=$c;
      var $841=$row;
      var $842=$black;
      var $843=(($842+$841*12)|0);
      var $844=(($843+($840<<2))|0);
      HEAPF32[(($844)>>2)]=$839;
      __label__ = 147; break;
    case 147: // $845
      var $846=$c;
      var $847=((($846)+1)|0);
      $c=$847;
      __label__ = 145; break;
    case 148: // $848
      $c=0;
      __label__ = 149; break;
    case 149: // $849
      var $850=$c;
      var $851=((($850))|0) < 3;
      if ($851) { __label__ = 150; break; } else { __label__ = 152; break; }
    case 150: // $852
      var $853=$c;
      var $854=$black;
      var $855=(($854+12)|0);
      var $856=(($855+($853<<2))|0);
      var $857=HEAPF32[(($856)>>2)];
      var $858=$c;
      var $859=$black;
      var $860=(($859+36)|0);
      var $861=(($860+($858<<2))|0);
      var $862=HEAPF32[(($861)>>2)];
      var $863=($857)+($862);
      var $864=($863)/2;
      var $865=$c;
      var $866=$black;
      var $867=(($866)|0);
      var $868=(($867+($865<<2))|0);
      HEAPF32[(($868)>>2)]=$864;
      __label__ = 151; break;
    case 151: // $869
      var $870=$c;
      var $871=((($870)+1)|0);
      $c=$871;
      __label__ = 149; break;
    case 152: // $872
      var $873=_exp(-0.041666666666666664);
      var $874=1-($873);
      var $875=($874);
      $val=$875;
      var $876=(($fsum)|0);
      var $877=$876;
      var $878=$black;
      var $879=$878;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $879, $$dest = $877, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      $row=1;
      __label__ = 153; break;
    case 153: // $880
      var $881=$row;
      var $882=HEAPU16[((_height)>>1)];
      var $883=((($882))&65535);
      var $884=((($881))|0) < ((($883))|0);
      if ($884) { __label__ = 154; break; } else { __label__ = 160; break; }
    case 154: // $885
      $c=0;
      __label__ = 155; break;
    case 155: // $886
      var $887=$c;
      var $888=((($887))|0) < 3;
      if ($888) { __label__ = 156; break; } else { __label__ = 158; break; }
    case 156: // $889
      var $890=$c;
      var $891=$row;
      var $892=$black;
      var $893=(($892+$891*12)|0);
      var $894=(($893+($890<<2))|0);
      var $895=HEAPF32[(($894)>>2)];
      var $896=$c;
      var $897=$row;
      var $898=((($897)-1)|0);
      var $899=$black;
      var $900=(($899+$898*12)|0);
      var $901=(($900+($896<<2))|0);
      var $902=HEAPF32[(($901)>>2)];
      var $903=($895)-($902);
      var $904=$val;
      var $905=($903)*($904);
      var $906=$c;
      var $907=$row;
      var $908=((($907)-1)|0);
      var $909=$black;
      var $910=(($909+$908*12)|0);
      var $911=(($910+($906<<2))|0);
      var $912=HEAPF32[(($911)>>2)];
      var $913=($905)+($912);
      var $914=$c;
      var $915=$row;
      var $916=$black;
      var $917=(($916+$915*12)|0);
      var $918=(($917+($914<<2))|0);
      HEAPF32[(($918)>>2)]=$913;
      var $919=$c;
      var $920=(($fsum+($919<<2))|0);
      var $921=HEAPF32[(($920)>>2)];
      var $922=($921)+($913);
      HEAPF32[(($920)>>2)]=$922;
      __label__ = 157; break;
    case 157: // $923
      var $924=$c;
      var $925=((($924)+1)|0);
      $c=$925;
      __label__ = 155; break;
    case 158: // $926
      __label__ = 159; break;
    case 159: // $927
      var $928=$row;
      var $929=((($928)+1)|0);
      $row=$929;
      __label__ = 153; break;
    case 160: // $930
      var $931=(($last)|0);
      var $932=(($931)|0);
      var $933=$932;
      var $934=HEAPU16[((_height)>>1)];
      var $935=((($934))&65535);
      var $936=((($935)-1)|0);
      var $937=$black;
      var $938=(($937+$936*12)|0);
      var $939=(($938)|0);
      var $940=$939;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $940, $$dest = $933, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      $c=0;
      __label__ = 161; break;
    case 161: // $941
      var $942=$c;
      var $943=((($942))|0) < 3;
      if ($943) { __label__ = 162; break; } else { __label__ = 164; break; }
    case 162: // $944
      var $945=HEAPU16[((_height)>>1)];
      var $946=((($945))&65535);
      var $947=((($946))|0);
      var $948=$c;
      var $949=(($fsum+($948<<2))|0);
      var $950=HEAPF32[(($949)>>2)];
      var $951=($950)/($947);
      HEAPF32[(($949)>>2)]=$951;
      __label__ = 163; break;
    case 163: // $952
      var $953=$c;
      var $954=((($953)+1)|0);
      $c=$954;
      __label__ = 161; break;
    case 164: // $955
      var $956=HEAPU16[((_height)>>1)];
      var $957=((($956))&65535);
      $row=$957;
      __label__ = 165; break;
    case 165: // $958
      var $959=$row;
      var $960=((($959)-1)|0);
      $row=$960;
      var $961=((($959))|0)!=0;
      if ($961) { __label__ = 166; break; } else { __label__ = 171; break; }
    case 166: // $962
      $c=0;
      __label__ = 167; break;
    case 167: // $963
      var $964=$c;
      var $965=((($964))|0) < 3;
      if ($965) { __label__ = 168; break; } else { __label__ = 170; break; }
    case 168: // $966
      var $967=$c;
      var $968=$row;
      var $969=$black;
      var $970=(($969+$968*12)|0);
      var $971=(($970+($967<<2))|0);
      var $972=HEAPF32[(($971)>>2)];
      var $973=$c;
      var $974=(($fsum+($973<<2))|0);
      var $975=HEAPF32[(($974)>>2)];
      var $976=($972)-($975);
      var $977=$c;
      var $978=(($last)|0);
      var $979=(($978+($977<<2))|0);
      var $980=HEAPF32[(($979)>>2)];
      var $981=($976)-($980);
      var $982=$val;
      var $983=($981)*($982);
      var $984=$c;
      var $985=(($last)|0);
      var $986=(($985+($984<<2))|0);
      var $987=HEAPF32[(($986)>>2)];
      var $988=($983)+($987);
      var $989=$c;
      var $990=$row;
      var $991=$black;
      var $992=(($991+$990*12)|0);
      var $993=(($992+($989<<2))|0);
      HEAPF32[(($993)>>2)]=$988;
      var $994=$c;
      var $995=(($last)|0);
      var $996=(($995+($994<<2))|0);
      HEAPF32[(($996)>>2)]=$988;
      __label__ = 169; break;
    case 169: // $997
      var $998=$c;
      var $999=((($998)+1)|0);
      $c=$999;
      __label__ = 167; break;
    case 170: // $1000
      __label__ = 165; break;
    case 171: // $1001
      var $1002=(($total)|0);
      var $1003=$1002;
      for (var $$dest = $1003, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      $row=2;
      __label__ = 172; break;
    case 172: // $1004
      var $1005=$row;
      var $1006=HEAPU16[((_height)>>1)];
      var $1007=((($1006))&65535);
      var $1008=((($1005))|0) < ((($1007))|0);
      if ($1008) { __label__ = 173; break; } else { __label__ = 183; break; }
    case 173: // $1009
      $col=2;
      __label__ = 174; break;
    case 174: // $1010
      var $1011=$col;
      var $1012=HEAPU16[((_width)>>1)];
      var $1013=((($1012))&65535);
      var $1014=((($1011))|0) < ((($1013))|0);
      if ($1014) { __label__ = 175; break; } else { __label__ = 181; break; }
    case 175: // $1015
      $c=0;
      __label__ = 176; break;
    case 176: // $1016
      var $1017=$c;
      var $1018=((($1017))|0) < 3;
      if ($1018) { __label__ = 177; break; } else { __label__ = 179; break; }
    case 177: // $1019
      var $1020=$c;
      var $1021=$row;
      var $1022=HEAPU16[((_width)>>1)];
      var $1023=((($1022))&65535);
      var $1024=((($1021)*($1023))|0);
      var $1025=$col;
      var $1026=((($1024)+($1025))|0);
      var $1027=HEAP32[((_image)>>2)];
      var $1028=(($1027+($1026<<3))|0);
      var $1029=(($1028+($1020<<1))|0);
      var $1030=HEAP16[(($1029)>>1)];
      var $1031=((($1030) << 16) >> 16);
      var $1032=$c;
      var $1033=(($total+($1032<<2))|0);
      var $1034=HEAP32[(($1033)>>2)];
      var $1035=((($1034)+($1031))|0);
      HEAP32[(($1033)>>2)]=$1035;
      __label__ = 178; break;
    case 178: // $1036
      var $1037=$c;
      var $1038=((($1037)+1)|0);
      $c=$1038;
      __label__ = 176; break;
    case 179: // $1039
      var $1040=(($total+12)|0);
      var $1041=HEAP32[(($1040)>>2)];
      var $1042=((($1041)+1)|0);
      HEAP32[(($1040)>>2)]=$1042;
      __label__ = 180; break;
    case 180: // $1043
      var $1044=$col;
      var $1045=((($1044)+4)|0);
      $col=$1045;
      __label__ = 174; break;
    case 181: // $1046
      __label__ = 182; break;
    case 182: // $1047
      var $1048=$row;
      var $1049=((($1048)+4)|0);
      $row=$1049;
      __label__ = 172; break;
    case 183: // $1050
      $row=0;
      __label__ = 184; break;
    case 184: // $1051
      var $1052=$row;
      var $1053=HEAPU16[((_height)>>1)];
      var $1054=((($1053))&65535);
      var $1055=((($1052))|0) < ((($1054))|0);
      if ($1055) { __label__ = 185; break; } else { __label__ = 191; break; }
    case 185: // $1056
      $c=0;
      __label__ = 186; break;
    case 186: // $1057
      var $1058=$c;
      var $1059=((($1058))|0) < 3;
      if ($1059) { __label__ = 187; break; } else { __label__ = 189; break; }
    case 187: // $1060
      var $1061=$c;
      var $1062=(($fsum+($1061<<2))|0);
      var $1063=HEAPF32[(($1062)>>2)];
      var $1064=($1063)/2;
      var $1065=($1064);
      var $1066=$c;
      var $1067=(($total+($1066<<2))|0);
      var $1068=HEAP32[(($1067)>>2)];
      var $1069=((($1068))|0);
      var $1070=(($total+12)|0);
      var $1071=HEAP32[(($1070)>>2)];
      var $1072=((($1071))|0);
      var $1073=($1072)*100;
      var $1074=($1069)/($1073);
      var $1075=($1065)+($1074);
      var $1076=$c;
      var $1077=$row;
      var $1078=$black;
      var $1079=(($1078+$1077*12)|0);
      var $1080=(($1079+($1076<<2))|0);
      var $1081=HEAPF32[(($1080)>>2)];
      var $1082=($1081);
      var $1083=($1082)+($1075);
      var $1084=($1083);
      HEAPF32[(($1080)>>2)]=$1084;
      __label__ = 188; break;
    case 188: // $1085
      var $1086=$c;
      var $1087=((($1086)+1)|0);
      $c=$1087;
      __label__ = 186; break;
    case 189: // $1088
      __label__ = 190; break;
    case 190: // $1089
      var $1090=$row;
      var $1091=((($1090)+1)|0);
      $row=$1091;
      __label__ = 184; break;
    case 191: // $1092
      $row=0;
      __label__ = 192; break;
    case 192: // $1093
      var $1094=$row;
      var $1095=HEAPU16[((_height)>>1)];
      var $1096=((($1095))&65535);
      var $1097=((($1094))|0) < ((($1096))|0);
      if ($1097) { __label__ = 193; break; } else { __label__ = 235; break; }
    case 193: // $1098
      $i=0;
      __label__ = 194; break;
    case 194: // $1099
      var $1100=$i;
      var $1101=((($1100))|0) < 6;
      if ($1101) { __label__ = 195; break; } else { __label__ = 197; break; }
    case 195: // $1102
      var $1103=$i;
      var $1104=(($ddft+24)|0);
      var $1105=(($1104)|0);
      var $1106=(($1105+($1103<<2))|0);
      var $1107=HEAPF32[(($1106)>>2)];
      var $1108=($1107);
      var $1109=$row;
      var $1110=((($1109))|0);
      var $1111=HEAPU16[((_height)>>1)];
      var $1112=((($1111))&65535);
      var $1113=((($1112))|0);
      var $1114=($1113)-1;
      var $1115=($1110)/($1114);
      var $1116=$i;
      var $1117=(($ddft+48)|0);
      var $1118=(($1117)|0);
      var $1119=(($1118+($1116<<2))|0);
      var $1120=HEAPF32[(($1119)>>2)];
      var $1121=$i;
      var $1122=(($ddft+24)|0);
      var $1123=(($1122)|0);
      var $1124=(($1123+($1121<<2))|0);
      var $1125=HEAPF32[(($1124)>>2)];
      var $1126=($1120)-($1125);
      var $1127=($1126);
      var $1128=($1115)*($1127);
      var $1129=($1108)+($1128);
      var $1130=($1129);
      var $1131=$i;
      var $1132=(($ddft)|0);
      var $1133=(($1132)|0);
      var $1134=(($1133+($1131<<2))|0);
      HEAPF32[(($1134)>>2)]=$1130;
      __label__ = 196; break;
    case 196: // $1135
      var $1136=$i;
      var $1137=((($1136)+1)|0);
      $i=$1137;
      __label__ = 194; break;
    case 197: // $1138
      var $1139=$row;
      var $1140=HEAPU16[((_width)>>1)];
      var $1141=((($1140))&65535);
      var $1142=((($1139)*($1141))|0);
      var $1143=HEAP32[((_image)>>2)];
      var $1144=(($1143+($1142<<3))|0);
      var $1145=(($1144)|0);
      $pix=$1145;
      var $1146=(($prev)|0);
      var $1147=$1146;
      var $1148=$pix;
      var $1149=$1148;
      assert(6 % 1 === 0, 'memcpy given ' + 6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1147)]=HEAP8[($1149)]; HEAP8[($1147+1)]=HEAP8[($1149+1)]; HEAP8[($1147+2)]=HEAP8[($1149+2)]; HEAP8[($1147+3)]=HEAP8[($1149+3)]; HEAP8[($1147+4)]=HEAP8[($1149+4)]; HEAP8[($1147+5)]=HEAP8[($1149+5)];
      var $1150=$row;
      var $1151=((($1150))|0);
      var $1152=HEAPU16[((_height)>>1)];
      var $1153=((($1152))&65535);
      var $1154=((($1153))|0);
      var $1155=($1154)-1;
      var $1156=($1151)/($1155);
      var $1157=(($dim+8)|0);
      var $1158=HEAP32[(($1157)>>2)];
      var $1159=((($1158)-1)|0);
      var $1160=((($1159))>>>0);
      var $1161=($1156)*($1160);
      var $1162=($1161);
      $frow=$1162;
      var $1163=$frow;
      var $1164=((($1163))|0);
      $irow=$1164;
      var $1165=(($dim+8)|0);
      var $1166=HEAP32[(($1165)>>2)];
      var $1167=((($1166)-1)|0);
      var $1168=((($1164))|0)==((($1167))|0);
      if ($1168) { __label__ = 198; break; } else { __label__ = 199; break; }
    case 198: // $1169
      var $1170=$irow;
      var $1171=((($1170)-1)|0);
      $irow=$1171;
      __label__ = 199; break;
    case 199: // $1172
      var $1173=$irow;
      var $1174=((($1173))|0);
      var $1175=$frow;
      var $1176=($1175)-($1174);
      $frow=$1176;
      $i=0;
      __label__ = 200; break;
    case 200: // $1177
      var $1178=$i;
      var $1179=(($dim+4)|0);
      var $1180=HEAPU32[(($1179)>>2)];
      var $1181=((($1178))>>>0) < ((($1180))>>>0);
      if ($1181) { __label__ = 201; break; } else { __label__ = 207; break; }
    case 201: // $1182
      $c=0;
      __label__ = 202; break;
    case 202: // $1183
      var $1184=$c;
      var $1185=((($1184))|0) < 3;
      if ($1185) { __label__ = 203; break; } else { __label__ = 205; break; }
    case 203: // $1186
      var $1187=$c;
      var $1188=$irow;
      var $1189=(($dim+4)|0);
      var $1190=HEAP32[(($1189)>>2)];
      var $1191=((($1188)*($1190))|0);
      var $1192=$i;
      var $1193=((($1191)+($1192))|0);
      var $1194=$sgain;
      var $1195=(($1194+$1193*12)|0);
      var $1196=(($1195+($1187<<2))|0);
      var $1197=HEAPF32[(($1196)>>2)];
      var $1198=$frow;
      var $1199=1-($1198);
      var $1200=($1197)*($1199);
      var $1201=$c;
      var $1202=$irow;
      var $1203=((($1202)+1)|0);
      var $1204=(($dim+4)|0);
      var $1205=HEAP32[(($1204)>>2)];
      var $1206=((($1203)*($1205))|0);
      var $1207=$i;
      var $1208=((($1206)+($1207))|0);
      var $1209=$sgain;
      var $1210=(($1209+$1208*12)|0);
      var $1211=(($1210+($1201<<2))|0);
      var $1212=HEAPF32[(($1211)>>2)];
      var $1213=$frow;
      var $1214=($1212)*($1213);
      var $1215=($1200)+($1214);
      var $1216=$c;
      var $1217=$i;
      var $1218=$sgrow;
      var $1219=(($1218+$1217*12)|0);
      var $1220=(($1219+($1216<<2))|0);
      HEAPF32[(($1220)>>2)]=$1215;
      __label__ = 204; break;
    case 204: // $1221
      var $1222=$c;
      var $1223=((($1222)+1)|0);
      $c=$1223;
      __label__ = 202; break;
    case 205: // $1224
      __label__ = 206; break;
    case 206: // $1225
      var $1226=$i;
      var $1227=((($1226)+1)|0);
      $i=$1227;
      __label__ = 200; break;
    case 207: // $1228
      $col=0;
      __label__ = 208; break;
    case 208: // $1229
      var $1230=$col;
      var $1231=HEAPU16[((_width)>>1)];
      var $1232=((($1231))&65535);
      var $1233=((($1230))|0) < ((($1232))|0);
      if ($1233) { __label__ = 209; break; } else { __label__ = 233; break; }
    case 209: // $1234
      $c=0;
      __label__ = 210; break;
    case 210: // $1235
      var $1236=$c;
      var $1237=((($1236))|0) < 3;
      if ($1237) { __label__ = 211; break; } else { __label__ = 213; break; }
    case 211: // $1238
      var $1239=$c;
      var $1240=$pix;
      var $1241=(($1240+($1239<<1))|0);
      var $1242=HEAP16[(($1241)>>1)];
      var $1243=((($1242) << 16) >> 16);
      var $1244=$c;
      var $1245=(($prev+($1244<<1))|0);
      var $1246=HEAP16[(($1245)>>1)];
      var $1247=((($1246) << 16) >> 16);
      var $1248=((($1243)-($1247))|0);
      $diff=$1248;
      var $1249=$c;
      var $1250=$pix;
      var $1251=(($1250+($1249<<1))|0);
      var $1252=HEAP16[(($1251)>>1)];
      var $1253=$c;
      var $1254=(($prev+($1253<<1))|0);
      HEAP16[(($1254)>>1)]=$1252;
      var $1255=$c;
      var $1256=$pix;
      var $1257=(($1256+($1255<<1))|0);
      var $1258=HEAP16[(($1257)>>1)];
      var $1259=((($1258) << 16) >> 16);
      var $1260=((($1259))|0);
      var $1261=$diff;
      var $1262=$diff;
      var $1263=$diff;
      var $1264=((($1262)*($1263))|0);
      var $1265=($1264) >> 14;
      var $1266=((($1261)+($1265))|0);
      var $1267=((($1266))|0);
      var $1268=HEAPF32[(($cfilt)>>2)];
      var $1269=($1267)*($1268);
      var $1270=$c;
      var $1271=(($ddft)|0);
      var $1272=(($1271+($1270<<3))|0);
      var $1273=(($1272+4)|0);
      var $1274=HEAPF32[(($1273)>>2)];
      var $1275=($1269)-($1274);
      var $1276=($1275);
      var $1277=$c;
      var $1278=(($ddft)|0);
      var $1279=(($1278+($1277<<3))|0);
      var $1280=(($1279)|0);
      var $1281=HEAPF32[(($1280)>>2)];
      var $1282=($1281);
      var $1283=$col;
      var $1284=((($1283))|0);
      var $1285=HEAPU16[((_width)>>1)];
      var $1286=((($1285))&65535);
      var $1287=((($1286))|0);
      var $1288=($1284)/($1287);
      var $1289=($1288);
      var $1290=($1289)-0.5;
      var $1291=($1282)*($1290);
      var $1292=($1276)-($1291);
      var $1293=$c;
      var $1294=$row;
      var $1295=$black;
      var $1296=(($1295+$1294*12)|0);
      var $1297=(($1296+($1293<<2))|0);
      var $1298=HEAPF32[(($1297)>>2)];
      var $1299=($1298);
      var $1300=($1292)-($1299);
      var $1301=_floor($1300);
      var $1302=($1260)+($1301);
      var $1303=((($1302))|0);
      var $1304=$c;
      var $1305=(($ipix+($1304<<2))|0);
      HEAP32[(($1305)>>2)]=$1303;
      __label__ = 212; break;
    case 212: // $1306
      var $1307=$c;
      var $1308=((($1307)+1)|0);
      $c=$1308;
      __label__ = 210; break;
    case 213: // $1309
      $c=0;
      __label__ = 214; break;
    case 214: // $1310
      var $1311=$c;
      var $1312=((($1311))|0) < 3;
      if ($1312) { __label__ = 215; break; } else { __label__ = 217; break; }
    case 215: // $1313
      var $1314=$c;
      var $1315=(($ipix+($1314<<2))|0);
      var $1316=HEAP32[(($1315)>>2)];
      var $1317=$c;
      var $1318=(($ipix+($1317<<2))|0);
      var $1319=HEAP32[(($1318)>>2)];
      var $1320=((($1316)*($1319))|0);
      var $1321=($1320) >> 14;
      var $1322=$c;
      var $1323=(($work)|0);
      var $1324=(($1323+($1322<<2))|0);
      HEAP32[(($1324)>>2)]=$1321;
      var $1325=$c;
      var $1326=(($ipix+($1325<<2))|0);
      var $1327=HEAP32[(($1326)>>2)];
      var $1328=$c;
      var $1329=(($work)|0);
      var $1330=(($1329+($1328<<2))|0);
      var $1331=HEAP32[(($1330)>>2)];
      var $1332=((($1327)*($1331))|0);
      var $1333=($1332) >> 14;
      var $1334=$c;
      var $1335=(($work+24)|0);
      var $1336=(($1335+($1334<<2))|0);
      HEAP32[(($1336)>>2)]=$1333;
      var $1337=$c;
      var $1338=((($1337)+1)|0);
      var $1339=((($1338))|0)%3;
      var $1340=(($ipix+($1339<<2))|0);
      var $1341=HEAP32[(($1340)>>2)];
      var $1342=$c;
      var $1343=((($1342)+2)|0);
      var $1344=((($1343))|0)%3;
      var $1345=(($ipix+($1344<<2))|0);
      var $1346=HEAP32[(($1345)>>2)];
      var $1347=((($1341)*($1346))|0);
      var $1348=($1347) >> 14;
      var $1349=$c;
      var $1350=((2-($1349))|0);
      var $1351=(($work+12)|0);
      var $1352=(($1351+($1350<<2))|0);
      HEAP32[(($1352)>>2)]=$1348;
      __label__ = 216; break;
    case 216: // $1353
      var $1354=$c;
      var $1355=((($1354)+1)|0);
      $c=$1355;
      __label__ = 214; break;
    case 217: // $1356
      $c=0;
      __label__ = 218; break;
    case 218: // $1357
      var $1358=$c;
      var $1359=((($1358))|0) < 3;
      if ($1359) { __label__ = 219; break; } else { __label__ = 231; break; }
    case 219: // $1360
      $i=0;
      $val=0;
      __label__ = 220; break;
    case 220: // $1361
      var $1362=$i;
      var $1363=((($1362))|0) < 3;
      if ($1363) { __label__ = 221; break; } else { __label__ = 227; break; }
    case 221: // $1364
      $j=0;
      __label__ = 222; break;
    case 222: // $1365
      var $1366=$j;
      var $1367=((($1366))|0) < 3;
      if ($1367) { __label__ = 223; break; } else { __label__ = 225; break; }
    case 223: // $1368
      var $1369=$j;
      var $1370=$i;
      var $1371=$c;
      var $1372=(($ppm+$1371*36)|0);
      var $1373=(($1372+$1370*12)|0);
      var $1374=(($1373+($1369<<2))|0);
      var $1375=HEAPF32[(($1374)>>2)];
      var $1376=$j;
      var $1377=$i;
      var $1378=(($work+$1377*12)|0);
      var $1379=(($1378+($1376<<2))|0);
      var $1380=HEAP32[(($1379)>>2)];
      var $1381=((($1380))|0);
      var $1382=($1375)*($1381);
      var $1383=$val;
      var $1384=($1383)+($1382);
      $val=$1384;
      __label__ = 224; break;
    case 224: // $1385
      var $1386=$j;
      var $1387=((($1386)+1)|0);
      $j=$1387;
      __label__ = 222; break;
    case 225: // $1388
      __label__ = 226; break;
    case 226: // $1389
      var $1390=$i;
      var $1391=((($1390)+1)|0);
      $i=$1391;
      __label__ = 220; break;
    case 227: // $1392
      var $1393=$c;
      var $1394=(($ipix+($1393<<2))|0);
      var $1395=HEAP32[(($1394)>>2)];
      var $1396=((($1395))|0);
      var $1397=$val;
      var $1398=($1397);
      var $1399=_floor($1398);
      var $1400=($1396)+($1399);
      var $1401=$c;
      var $1402=$col;
      var $1403=$sgx;
      var $1404=((((($1402))|0)/((($1403))|0))|0);
      var $1405=$sgrow;
      var $1406=(($1405+$1404*12)|0);
      var $1407=(($1406+($1401<<2))|0);
      var $1408=HEAPF32[(($1407)>>2)];
      var $1409=$sgx;
      var $1410=$col;
      var $1411=$sgx;
      var $1412=((($1410))|0)%((($1411))|0);
      var $1413=((($1409)-($1412))|0);
      var $1414=((($1413))|0);
      var $1415=($1408)*($1414);
      var $1416=$c;
      var $1417=$col;
      var $1418=$sgx;
      var $1419=((((($1417))|0)/((($1418))|0))|0);
      var $1420=((($1419)+1)|0);
      var $1421=$sgrow;
      var $1422=(($1421+$1420*12)|0);
      var $1423=(($1422+($1416<<2))|0);
      var $1424=HEAPF32[(($1423)>>2)];
      var $1425=$col;
      var $1426=$sgx;
      var $1427=((($1425))|0)%((($1426))|0);
      var $1428=((($1427))|0);
      var $1429=($1424)*($1428);
      var $1430=($1415)+($1429);
      var $1431=($1430);
      var $1432=($1400)*($1431);
      var $1433=$sgx;
      var $1434=((($1433))|0);
      var $1435=($1432)/($1434);
      var $1436=$c;
      var $1437=(($div+($1436<<2))|0);
      var $1438=HEAPF32[(($1437)>>2)];
      var $1439=($1438);
      var $1440=($1435)/($1439);
      var $1441=_floor($1440);
      var $1442=((($1441))|0);
      var $1443=$c;
      var $1444=(($ipix+($1443<<2))|0);
      HEAP32[(($1444)>>2)]=$1442;
      var $1445=$c;
      var $1446=(($ipix+($1445<<2))|0);
      var $1447=HEAP32[(($1446)>>2)];
      var $1448=((($1447))|0) > 32000;
      if ($1448) { __label__ = 228; break; } else { __label__ = 229; break; }
    case 228: // $1449
      var $1450=$c;
      var $1451=(($ipix+($1450<<2))|0);
      HEAP32[(($1451)>>2)]=32000;
      __label__ = 229; break;
    case 229: // $1452
      var $1453=$c;
      var $1454=(($ipix+($1453<<2))|0);
      var $1455=HEAP32[(($1454)>>2)];
      var $1456=((($1455)) & 65535);
      var $1457=$c;
      var $1458=$pix;
      var $1459=(($1458+($1457<<1))|0);
      HEAP16[(($1459)>>1)]=$1456;
      __label__ = 230; break;
    case 230: // $1460
      var $1461=$c;
      var $1462=((($1461)+1)|0);
      $c=$1462;
      __label__ = 218; break;
    case 231: // $1463
      var $1464=$pix;
      var $1465=(($1464+8)|0);
      $pix=$1465;
      __label__ = 232; break;
    case 232: // $1466
      var $1467=$col;
      var $1468=((($1467)+1)|0);
      $col=$1468;
      __label__ = 208; break;
    case 233: // $1469
      __label__ = 234; break;
    case 234: // $1470
      var $1471=$row;
      var $1472=((($1471)+1)|0);
      $row=$1472;
      __label__ = 192; break;
    case 235: // $1473
      var $1474=$black;
      var $1475=$1474;
      _free($1475);
      var $1476=$sgrow;
      var $1477=$1476;
      _free($1477);
      var $1478=$sgain;
      var $1479=$1478;
      _free($1479);
      var $1480=(($dim)|0);
      var $1481=_foveon_camf_matrix($1480, ((__str56)|0));
      var $1482=$1481;
      $badpix=$1482;
      var $1483=((($1482))|0)!=0;
      if ($1483) { __label__ = 236; break; } else { __label__ = 260; break; }
    case 236: // $1484
      $i=0;
      __label__ = 237; break;
    case 237: // $1485
      var $1486=$i;
      var $1487=(($dim)|0);
      var $1488=HEAPU32[(($1487)>>2)];
      var $1489=((($1486))>>>0) < ((($1488))>>>0);
      if ($1489) { __label__ = 238; break; } else { __label__ = 259; break; }
    case 238: // $1490
      var $1491=$i;
      var $1492=$badpix;
      var $1493=(($1492+($1491<<2))|0);
      var $1494=HEAPU32[(($1493)>>2)];
      var $1495=($1494) >>> 8;
      var $1496=($1495) & 4095;
      var $1497=(($keep)|0);
      var $1498=HEAP32[(($1497)>>2)];
      var $1499=((($1496)-($1498))|0);
      $col=$1499;
      var $1500=$i;
      var $1501=$badpix;
      var $1502=(($1501+($1500<<2))|0);
      var $1503=HEAPU32[(($1502)>>2)];
      var $1504=($1503) >>> 20;
      var $1505=(($keep+4)|0);
      var $1506=HEAP32[(($1505)>>2)];
      var $1507=((($1504)-($1506))|0);
      $row=$1507;
      var $1508=$row;
      var $1509=((($1508)-1)|0);
      var $1510=HEAPU16[((_height)>>1)];
      var $1511=((($1510))&65535);
      var $1512=((($1511)-3)|0);
      var $1513=((($1509))>>>0) > ((($1512))>>>0);
      if ($1513) { __label__ = 240; break; } else { __label__ = 239; break; }
    case 239: // $1514
      var $1515=$col;
      var $1516=((($1515)-1)|0);
      var $1517=HEAPU16[((_width)>>1)];
      var $1518=((($1517))&65535);
      var $1519=((($1518)-3)|0);
      var $1520=((($1516))>>>0) > ((($1519))>>>0);
      if ($1520) { __label__ = 240; break; } else { __label__ = 241; break; }
    case 240: // $1521
      __label__ = 258; break;
    case 241: // $1522
      var $1523=(($fsum)|0);
      var $1524=$1523;
      for (var $$dest = $1524, $$stop = $$dest + 12; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      $j=0;
      $sum=0;
      __label__ = 242; break;
    case 242: // $1525
      var $1526=$j;
      var $1527=((($1526))|0) < 8;
      if ($1527) { __label__ = 243; break; } else { __label__ = 251; break; }
    case 243: // $1528
      var $1529=$i;
      var $1530=$badpix;
      var $1531=(($1530+($1529<<2))|0);
      var $1532=HEAP32[(($1531)>>2)];
      var $1533=$j;
      var $1534=1 << ($1533);
      var $1535=($1532) & ($1534);
      var $1536=((($1535))|0)!=0;
      if ($1536) { __label__ = 244; break; } else { __label__ = 249; break; }
    case 244: // $1537
      $c=0;
      __label__ = 245; break;
    case 245: // $1538
      var $1539=$c;
      var $1540=((($1539))|0) < 3;
      if ($1540) { __label__ = 246; break; } else { __label__ = 248; break; }
    case 246: // $1541
      var $1542=$c;
      var $1543=$row;
      var $1544=$j;
      var $1545=(((($1544)<<1))|0);
      var $1546=((_foveon_interpolate_hood+($1545<<1))|0);
      var $1547=HEAP16[(($1546)>>1)];
      var $1548=((($1547) << 16) >> 16);
      var $1549=((($1543)+($1548))|0);
      var $1550=HEAPU16[((_width)>>1)];
      var $1551=((($1550))&65535);
      var $1552=((($1549)*($1551))|0);
      var $1553=$col;
      var $1554=((($1552)+($1553))|0);
      var $1555=$j;
      var $1556=(((($1555)<<1))|0);
      var $1557=((($1556)+1)|0);
      var $1558=((_foveon_interpolate_hood+($1557<<1))|0);
      var $1559=HEAP16[(($1558)>>1)];
      var $1560=((($1559) << 16) >> 16);
      var $1561=((($1554)+($1560))|0);
      var $1562=HEAP32[((_image)>>2)];
      var $1563=(($1562+($1561<<3))|0);
      var $1564=(($1563+($1542<<1))|0);
      var $1565=HEAP16[(($1564)>>1)];
      var $1566=((($1565) << 16) >> 16);
      var $1567=((($1566))|0);
      var $1568=$c;
      var $1569=(($fsum+($1568<<2))|0);
      var $1570=HEAPF32[(($1569)>>2)];
      var $1571=($1570)+($1567);
      HEAPF32[(($1569)>>2)]=$1571;
      __label__ = 247; break;
    case 247: // $1572
      var $1573=$c;
      var $1574=((($1573)+1)|0);
      $c=$1574;
      __label__ = 245; break;
    case 248: // $1575
      var $1576=$sum;
      var $1577=((($1576)+1)|0);
      $sum=$1577;
      __label__ = 249; break;
    case 249: // $1578
      __label__ = 250; break;
    case 250: // $1579
      var $1580=$j;
      var $1581=((($1580)+1)|0);
      $j=$1581;
      __label__ = 242; break;
    case 251: // $1582
      var $1583=$sum;
      var $1584=((($1583))|0)!=0;
      if ($1584) { __label__ = 252; break; } else { __label__ = 257; break; }
    case 252: // $1585
      $c=0;
      __label__ = 253; break;
    case 253: // $1586
      var $1587=$c;
      var $1588=((($1587))|0) < 3;
      if ($1588) { __label__ = 254; break; } else { __label__ = 256; break; }
    case 254: // $1589
      var $1590=$c;
      var $1591=(($fsum+($1590<<2))|0);
      var $1592=HEAPF32[(($1591)>>2)];
      var $1593=$sum;
      var $1594=((($1593))|0);
      var $1595=($1592)/($1594);
      var $1596=((($1595))|0);
      var $1597=$c;
      var $1598=$row;
      var $1599=HEAPU16[((_width)>>1)];
      var $1600=((($1599))&65535);
      var $1601=((($1598)*($1600))|0);
      var $1602=$col;
      var $1603=((($1601)+($1602))|0);
      var $1604=HEAP32[((_image)>>2)];
      var $1605=(($1604+($1603<<3))|0);
      var $1606=(($1605+($1597<<1))|0);
      HEAP16[(($1606)>>1)]=$1596;
      __label__ = 255; break;
    case 255: // $1607
      var $1608=$c;
      var $1609=((($1608)+1)|0);
      $c=$1609;
      __label__ = 253; break;
    case 256: // $1610
      __label__ = 257; break;
    case 257: // $1611
      __label__ = 258; break;
    case 258: // $1612
      var $1613=$i;
      var $1614=((($1613)+1)|0);
      $i=$1614;
      __label__ = 237; break;
    case 259: // $1615
      var $1616=$badpix;
      var $1617=$1616;
      _free($1617);
      __label__ = 260; break;
    case 260: // $1618
      var $1619=HEAPU16[((_width)>>1)];
      var $1620=((($1619))&65535);
      var $1621=((($1620)*5)|0);
      var $1622=_calloc($1621, 12);
      var $1623=$1622;
      var $1624=(($smrow+24)|0);
      HEAP32[(($1624)>>2)]=$1623;
      var $1625=(($smrow+24)|0);
      var $1626=HEAP32[(($1625)>>2)];
      var $1627=$1626;
      _merror($1627, ((__str57)|0));
      $i=0;
      __label__ = 261; break;
    case 261: // $1628
      var $1629=$i;
      var $1630=((($1629))|0) < 5;
      if ($1630) { __label__ = 262; break; } else { __label__ = 264; break; }
    case 262: // $1631
      var $1632=(($smrow+24)|0);
      var $1633=HEAP32[(($1632)>>2)];
      var $1634=$i;
      var $1635=HEAPU16[((_width)>>1)];
      var $1636=((($1635))&65535);
      var $1637=((($1634)*($1636))|0);
      var $1638=(($1633+$1637*12)|0);
      var $1639=$i;
      var $1640=(($smrow+($1639<<2))|0);
      HEAP32[(($1640)>>2)]=$1638;
      __label__ = 263; break;
    case 263: // $1641
      var $1642=$i;
      var $1643=((($1642)+1)|0);
      $i=$1643;
      __label__ = 261; break;
    case 264: // $1644
      $smlast=-1;
      $row=2;
      __label__ = 265; break;
    case 265: // $1645
      var $1646=$row;
      var $1647=HEAPU16[((_height)>>1)];
      var $1648=((($1647))&65535);
      var $1649=((($1648)-2)|0);
      var $1650=((($1646))|0) < ((($1649))|0);
      if ($1650) { __label__ = 266; break; } else { __label__ = 287; break; }
    case 266: // $1651
      __label__ = 267; break;
    case 267: // $1652
      var $1653=$smlast;
      var $1654=$row;
      var $1655=((($1654)+2)|0);
      var $1656=((($1653))|0) < ((($1655))|0);
      if ($1656) { __label__ = 268; break; } else { __label__ = 277; break; }
    case 268: // $1657
      $i=0;
      __label__ = 269; break;
    case 269: // $1658
      var $1659=$i;
      var $1660=((($1659))|0) < 6;
      if ($1660) { __label__ = 270; break; } else { __label__ = 272; break; }
    case 270: // $1661
      var $1662=$i;
      var $1663=(($smrow+($1662<<2))|0);
      var $1664=HEAP32[(($1663)>>2)];
      var $1665=$i;
      var $1666=((($1665)+5)|0);
      var $1667=((($1666))|0)%6;
      var $1668=(($smrow+($1667<<2))|0);
      HEAP32[(($1668)>>2)]=$1664;
      __label__ = 271; break;
    case 271: // $1669
      var $1670=$i;
      var $1671=((($1670)+1)|0);
      $i=$1671;
      __label__ = 269; break;
    case 272: // $1672
      var $1673=$smlast;
      var $1674=((($1673)+1)|0);
      $smlast=$1674;
      var $1675=HEAPU16[((_width)>>1)];
      var $1676=((($1675))&65535);
      var $1677=((($1674)*($1676))|0);
      var $1678=((($1677)+2)|0);
      var $1679=HEAP32[((_image)>>2)];
      var $1680=(($1679+($1678<<3))|0);
      var $1681=(($1680)|0);
      $pix=$1681;
      $col=2;
      __label__ = 273; break;
    case 273: // $1682
      var $1683=$col;
      var $1684=HEAPU16[((_width)>>1)];
      var $1685=((($1684))&65535);
      var $1686=((($1685)-2)|0);
      var $1687=((($1683))|0) < ((($1686))|0);
      if ($1687) { __label__ = 274; break; } else { __label__ = 276; break; }
    case 274: // $1688
      var $1689=$pix;
      var $1690=(($1689)|0);
      var $1691=HEAP16[(($1690)>>1)];
      var $1692=((($1691) << 16) >> 16);
      var $1693=((($1692)*6)|0);
      var $1694=$pix;
      var $1695=(($1694-8)|0);
      var $1696=HEAP16[(($1695)>>1)];
      var $1697=((($1696) << 16) >> 16);
      var $1698=$pix;
      var $1699=(($1698+8)|0);
      var $1700=HEAP16[(($1699)>>1)];
      var $1701=((($1700) << 16) >> 16);
      var $1702=((($1697)+($1701))|0);
      var $1703=(((($1702)<<2))|0);
      var $1704=((($1693)+($1703))|0);
      var $1705=$pix;
      var $1706=(($1705-16)|0);
      var $1707=HEAP16[(($1706)>>1)];
      var $1708=((($1707) << 16) >> 16);
      var $1709=((($1704)+($1708))|0);
      var $1710=$pix;
      var $1711=(($1710+16)|0);
      var $1712=HEAP16[(($1711)>>1)];
      var $1713=((($1712) << 16) >> 16);
      var $1714=((($1709)+($1713))|0);
      var $1715=((($1714)+8)|0);
      var $1716=($1715) >> 4;
      var $1717=$col;
      var $1718=(($smrow+16)|0);
      var $1719=HEAP32[(($1718)>>2)];
      var $1720=(($1719+$1717*12)|0);
      var $1721=(($1720)|0);
      HEAP32[(($1721)>>2)]=$1716;
      var $1722=$pix;
      var $1723=(($1722+8)|0);
      $pix=$1723;
      __label__ = 275; break;
    case 275: // $1724
      var $1725=$col;
      var $1726=((($1725)+1)|0);
      $col=$1726;
      __label__ = 273; break;
    case 276: // $1727
      __label__ = 267; break;
    case 277: // $1728
      var $1729=$row;
      var $1730=HEAPU16[((_width)>>1)];
      var $1731=((($1730))&65535);
      var $1732=((($1729)*($1731))|0);
      var $1733=((($1732)+2)|0);
      var $1734=HEAP32[((_image)>>2)];
      var $1735=(($1734+($1733<<3))|0);
      var $1736=(($1735)|0);
      $pix=$1736;
      $col=2;
      __label__ = 278; break;
    case 278: // $1737
      var $1738=$col;
      var $1739=HEAPU16[((_width)>>1)];
      var $1740=((($1739))&65535);
      var $1741=((($1740)-2)|0);
      var $1742=((($1738))|0) < ((($1741))|0);
      if ($1742) { __label__ = 279; break; } else { __label__ = 285; break; }
    case 279: // $1743
      var $1744=$col;
      var $1745=(($smrow+8)|0);
      var $1746=HEAP32[(($1745)>>2)];
      var $1747=(($1746+$1744*12)|0);
      var $1748=(($1747)|0);
      var $1749=HEAP32[(($1748)>>2)];
      var $1750=((($1749)*6)|0);
      var $1751=$col;
      var $1752=(($smrow+4)|0);
      var $1753=HEAP32[(($1752)>>2)];
      var $1754=(($1753+$1751*12)|0);
      var $1755=(($1754)|0);
      var $1756=HEAP32[(($1755)>>2)];
      var $1757=$col;
      var $1758=(($smrow+12)|0);
      var $1759=HEAP32[(($1758)>>2)];
      var $1760=(($1759+$1757*12)|0);
      var $1761=(($1760)|0);
      var $1762=HEAP32[(($1761)>>2)];
      var $1763=((($1756)+($1762))|0);
      var $1764=(((($1763)<<2))|0);
      var $1765=((($1750)+($1764))|0);
      var $1766=$col;
      var $1767=(($smrow)|0);
      var $1768=HEAP32[(($1767)>>2)];
      var $1769=(($1768+$1766*12)|0);
      var $1770=(($1769)|0);
      var $1771=HEAP32[(($1770)>>2)];
      var $1772=((($1765)+($1771))|0);
      var $1773=$col;
      var $1774=(($smrow+16)|0);
      var $1775=HEAP32[(($1774)>>2)];
      var $1776=(($1775+$1773*12)|0);
      var $1777=(($1776)|0);
      var $1778=HEAP32[(($1777)>>2)];
      var $1779=((($1772)+($1778))|0);
      var $1780=((($1779)+8)|0);
      var $1781=($1780) >> 4;
      $smred=$1781;
      var $1782=$col;
      var $1783=((($1782))|0)==2;
      if ($1783) { __label__ = 280; break; } else { __label__ = 281; break; }
    case 280: // $1784
      var $1785=$smred;
      $smred_p=$1785;
      __label__ = 281; break;
    case 281: // $1786
      var $1787=$pix;
      var $1788=(($1787)|0);
      var $1789=HEAP16[(($1788)>>1)];
      var $1790=((($1789) << 16) >> 16);
      var $1791=$pix;
      var $1792=(($1791)|0);
      var $1793=HEAP16[(($1792)>>1)];
      var $1794=((($1793) << 16) >> 16);
      var $1795=$smred;
      var $1796=((($1795)*7)|0);
      var $1797=$smred_p;
      var $1798=((($1796)+($1797))|0);
      var $1799=($1798) >> 3;
      var $1800=((($1794)-($1799))|0);
      var $1801=($1800) >> 3;
      var $1802=((($1790)+($1801))|0);
      $i=$1802;
      var $1803=$i;
      var $1804=((($1803))|0) > 32000;
      if ($1804) { __label__ = 282; break; } else { __label__ = 283; break; }
    case 282: // $1805
      $i=32000;
      __label__ = 283; break;
    case 283: // $1806
      var $1807=$i;
      var $1808=((($1807)) & 65535);
      var $1809=$pix;
      var $1810=(($1809)|0);
      HEAP16[(($1810)>>1)]=$1808;
      var $1811=$smred;
      $smred_p=$1811;
      var $1812=$pix;
      var $1813=(($1812+8)|0);
      $pix=$1813;
      __label__ = 284; break;
    case 284: // $1814
      var $1815=$col;
      var $1816=((($1815)+1)|0);
      $col=$1816;
      __label__ = 278; break;
    case 285: // $1817
      __label__ = 286; break;
    case 286: // $1818
      var $1819=$row;
      var $1820=((($1819)+1)|0);
      $row=$1820;
      __label__ = 265; break;
    case 287: // $1821
      $min=65535;
      $c=0;
      __label__ = 288; break;
    case 288: // $1822
      var $1823=$c;
      var $1824=((($1823))|0) < 3;
      if ($1824) { __label__ = 289; break; } else { __label__ = 293; break; }
    case 289: // $1825
      var $1826=$c;
      var $1827=(($satlev+($1826<<2))|0);
      var $1828=HEAP32[(($1827)>>2)];
      var $1829=((($1828))|0);
      var $1830=$c;
      var $1831=(($div+($1830<<2))|0);
      var $1832=HEAPF32[(($1831)>>2)];
      var $1833=($1829)/($1832);
      var $1834=((($1833))|0);
      $i=$1834;
      var $1835=$min;
      var $1836=$i;
      var $1837=((($1835))|0) > ((($1836))|0);
      if ($1837) { __label__ = 290; break; } else { __label__ = 291; break; }
    case 290: // $1838
      var $1839=$i;
      $min=$1839;
      __label__ = 291; break;
    case 291: // $1840
      __label__ = 292; break;
    case 292: // $1841
      var $1842=$c;
      var $1843=((($1842)+1)|0);
      $c=$1843;
      __label__ = 288; break;
    case 293: // $1844
      var $1845=$min;
      var $1846=((($1845)*9)|0);
      var $1847=($1846) >> 4;
      $limit=$1847;
      var $1848=HEAP32[((_image)>>2)];
      var $1849=(($1848)|0);
      var $1850=(($1849)|0);
      $pix=$1850;
      __label__ = 294; break;
    case 294: // $1851
      var $1852=$pix;
      var $1853=HEAPU16[((_height)>>1)];
      var $1854=((($1853))&65535);
      var $1855=HEAPU16[((_width)>>1)];
      var $1856=((($1855))&65535);
      var $1857=((($1854)*($1856))|0);
      var $1858=HEAP32[((_image)>>2)];
      var $1859=(($1858+($1857<<3))|0);
      var $1860=(($1859)|0);
      var $1861=((($1852))>>>0) < ((($1860))>>>0);
      if ($1861) { __label__ = 295; break; } else { __label__ = 316; break; }
    case 295: // $1862
      var $1863=$pix;
      var $1864=(($1863)|0);
      var $1865=HEAP16[(($1864)>>1)];
      var $1866=((($1865) << 16) >> 16);
      var $1867=$limit;
      var $1868=((($1866))|0) <= ((($1867))|0);
      if ($1868) { __label__ = 298; break; } else { __label__ = 296; break; }
    case 296: // $1869
      var $1870=$pix;
      var $1871=(($1870+2)|0);
      var $1872=HEAP16[(($1871)>>1)];
      var $1873=((($1872) << 16) >> 16);
      var $1874=$limit;
      var $1875=((($1873))|0) <= ((($1874))|0);
      if ($1875) { __label__ = 298; break; } else { __label__ = 297; break; }
    case 297: // $1876
      var $1877=$pix;
      var $1878=(($1877+4)|0);
      var $1879=HEAP16[(($1878)>>1)];
      var $1880=((($1879) << 16) >> 16);
      var $1881=$limit;
      var $1882=((($1880))|0) <= ((($1881))|0);
      if ($1882) { __label__ = 298; break; } else { __label__ = 299; break; }
    case 298: // $1883
      __label__ = 315; break;
    case 299: // $1884
      var $1885=$pix;
      var $1886=(($1885)|0);
      var $1887=HEAP16[(($1886)>>1)];
      var $1888=((($1887) << 16) >> 16);
      $max=$1888;
      $min=$1888;
      $c=1;
      __label__ = 300; break;
    case 300: // $1889
      var $1890=$c;
      var $1891=((($1890))|0) < 3;
      if ($1891) { __label__ = 301; break; } else { __label__ = 307; break; }
    case 301: // $1892
      var $1893=$min;
      var $1894=$c;
      var $1895=$pix;
      var $1896=(($1895+($1894<<1))|0);
      var $1897=HEAP16[(($1896)>>1)];
      var $1898=((($1897) << 16) >> 16);
      var $1899=((($1893))|0) > ((($1898))|0);
      if ($1899) { __label__ = 302; break; } else { __label__ = 303; break; }
    case 302: // $1900
      var $1901=$c;
      var $1902=$pix;
      var $1903=(($1902+($1901<<1))|0);
      var $1904=HEAP16[(($1903)>>1)];
      var $1905=((($1904) << 16) >> 16);
      $min=$1905;
      __label__ = 303; break;
    case 303: // $1906
      var $1907=$max;
      var $1908=$c;
      var $1909=$pix;
      var $1910=(($1909+($1908<<1))|0);
      var $1911=HEAP16[(($1910)>>1)];
      var $1912=((($1911) << 16) >> 16);
      var $1913=((($1907))|0) < ((($1912))|0);
      if ($1913) { __label__ = 304; break; } else { __label__ = 305; break; }
    case 304: // $1914
      var $1915=$c;
      var $1916=$pix;
      var $1917=(($1916+($1915<<1))|0);
      var $1918=HEAP16[(($1917)>>1)];
      var $1919=((($1918) << 16) >> 16);
      $max=$1919;
      __label__ = 305; break;
    case 305: // $1920
      __label__ = 306; break;
    case 306: // $1921
      var $1922=$c;
      var $1923=((($1922)+1)|0);
      $c=$1923;
      __label__ = 300; break;
    case 307: // $1924
      var $1925=$min;
      var $1926=$limit;
      var $1927=(((($1926)<<1))|0);
      var $1928=((($1925))|0) >= ((($1927))|0);
      if ($1928) { __label__ = 308; break; } else { __label__ = 309; break; }
    case 308: // $1929
      var $1930=$max;
      var $1931=((($1930)) & 65535);
      var $1932=$pix;
      var $1933=(($1932+4)|0);
      HEAP16[(($1933)>>1)]=$1931;
      var $1934=$pix;
      var $1935=(($1934+2)|0);
      HEAP16[(($1935)>>1)]=$1931;
      var $1936=$pix;
      var $1937=(($1936)|0);
      HEAP16[(($1937)>>1)]=$1931;
      __label__ = 314; break;
    case 309: // $1938
      var $1939=$min;
      var $1940=$limit;
      var $1941=((($1939)-($1940))|0);
      var $1942=($1941) << 14;
      var $1943=$limit;
      var $1944=((((($1942))|0)/((($1943))|0))|0);
      var $1945=((16384-($1944))|0);
      $i=$1945;
      var $1946=$i;
      var $1947=$i;
      var $1948=((($1946)*($1947))|0);
      var $1949=($1948) >> 14;
      var $1950=((16384-($1949))|0);
      $i=$1950;
      var $1951=$i;
      var $1952=$i;
      var $1953=((($1951)*($1952))|0);
      var $1954=($1953) >> 14;
      $i=$1954;
      $c=0;
      __label__ = 310; break;
    case 310: // $1955
      var $1956=$c;
      var $1957=((($1956))|0) < 3;
      if ($1957) { __label__ = 311; break; } else { __label__ = 313; break; }
    case 311: // $1958
      var $1959=$max;
      var $1960=$c;
      var $1961=$pix;
      var $1962=(($1961+($1960<<1))|0);
      var $1963=HEAP16[(($1962)>>1)];
      var $1964=((($1963) << 16) >> 16);
      var $1965=((($1959)-($1964))|0);
      var $1966=$i;
      var $1967=((($1965)*($1966))|0);
      var $1968=($1967) >> 14;
      var $1969=$c;
      var $1970=$pix;
      var $1971=(($1970+($1969<<1))|0);
      var $1972=HEAP16[(($1971)>>1)];
      var $1973=((($1972) << 16) >> 16);
      var $1974=((($1973)+($1968))|0);
      var $1975=((($1974)) & 65535);
      HEAP16[(($1971)>>1)]=$1975;
      __label__ = 312; break;
    case 312: // $1976
      var $1977=$c;
      var $1978=((($1977)+1)|0);
      $c=$1978;
      __label__ = 310; break;
    case 313: // $1979
      __label__ = 314; break;
    case 314: // $1980
      __label__ = 315; break;
    case 315: // $1981
      var $1982=$pix;
      var $1983=(($1982+8)|0);
      $pix=$1983;
      __label__ = 294; break;
    case 316: // $1984
      $smlast=-1;
      $row=2;
      __label__ = 317; break;
    case 317: // $1985
      var $1986=$row;
      var $1987=HEAPU16[((_height)>>1)];
      var $1988=((($1987))&65535);
      var $1989=((($1988)-2)|0);
      var $1990=((($1986))|0) < ((($1989))|0);
      if ($1990) { __label__ = 318; break; } else { __label__ = 347; break; }
    case 318: // $1991
      __label__ = 319; break;
    case 319: // $1992
      var $1993=$smlast;
      var $1994=$row;
      var $1995=((($1994)+2)|0);
      var $1996=((($1993))|0) < ((($1995))|0);
      if ($1996) { __label__ = 320; break; } else { __label__ = 333; break; }
    case 320: // $1997
      $i=0;
      __label__ = 321; break;
    case 321: // $1998
      var $1999=$i;
      var $2000=((($1999))|0) < 6;
      if ($2000) { __label__ = 322; break; } else { __label__ = 324; break; }
    case 322: // $2001
      var $2002=$i;
      var $2003=(($smrow+($2002<<2))|0);
      var $2004=HEAP32[(($2003)>>2)];
      var $2005=$i;
      var $2006=((($2005)+5)|0);
      var $2007=((($2006))|0)%6;
      var $2008=(($smrow+($2007<<2))|0);
      HEAP32[(($2008)>>2)]=$2004;
      __label__ = 323; break;
    case 323: // $2009
      var $2010=$i;
      var $2011=((($2010)+1)|0);
      $i=$2011;
      __label__ = 321; break;
    case 324: // $2012
      var $2013=$smlast;
      var $2014=((($2013)+1)|0);
      $smlast=$2014;
      var $2015=HEAPU16[((_width)>>1)];
      var $2016=((($2015))&65535);
      var $2017=((($2014)*($2016))|0);
      var $2018=((($2017)+2)|0);
      var $2019=HEAP32[((_image)>>2)];
      var $2020=(($2019+($2018<<3))|0);
      var $2021=(($2020)|0);
      $pix=$2021;
      $col=2;
      __label__ = 325; break;
    case 325: // $2022
      var $2023=$col;
      var $2024=HEAPU16[((_width)>>1)];
      var $2025=((($2024))&65535);
      var $2026=((($2025)-2)|0);
      var $2027=((($2023))|0) < ((($2026))|0);
      if ($2027) { __label__ = 326; break; } else { __label__ = 332; break; }
    case 326: // $2028
      $c=0;
      __label__ = 327; break;
    case 327: // $2029
      var $2030=$c;
      var $2031=((($2030))|0) < 3;
      if ($2031) { __label__ = 328; break; } else { __label__ = 330; break; }
    case 328: // $2032
      var $2033=$c;
      var $2034=((($2033)-4)|0);
      var $2035=$pix;
      var $2036=(($2035+($2034<<1))|0);
      var $2037=HEAP16[(($2036)>>1)];
      var $2038=((($2037) << 16) >> 16);
      var $2039=$c;
      var $2040=$pix;
      var $2041=(($2040+($2039<<1))|0);
      var $2042=HEAP16[(($2041)>>1)];
      var $2043=((($2042) << 16) >> 16);
      var $2044=(((($2043)<<1))|0);
      var $2045=((($2038)+($2044))|0);
      var $2046=$c;
      var $2047=((($2046)+4)|0);
      var $2048=$pix;
      var $2049=(($2048+($2047<<1))|0);
      var $2050=HEAP16[(($2049)>>1)];
      var $2051=((($2050) << 16) >> 16);
      var $2052=((($2045)+($2051))|0);
      var $2053=((($2052)+2)|0);
      var $2054=($2053) >> 2;
      var $2055=$c;
      var $2056=$col;
      var $2057=(($smrow+16)|0);
      var $2058=HEAP32[(($2057)>>2)];
      var $2059=(($2058+$2056*12)|0);
      var $2060=(($2059+($2055<<2))|0);
      HEAP32[(($2060)>>2)]=$2054;
      __label__ = 329; break;
    case 329: // $2061
      var $2062=$c;
      var $2063=((($2062)+1)|0);
      $c=$2063;
      __label__ = 327; break;
    case 330: // $2064
      var $2065=$pix;
      var $2066=(($2065+8)|0);
      $pix=$2066;
      __label__ = 331; break;
    case 331: // $2067
      var $2068=$col;
      var $2069=((($2068)+1)|0);
      $col=$2069;
      __label__ = 325; break;
    case 332: // $2070
      __label__ = 319; break;
    case 333: // $2071
      var $2072=$row;
      var $2073=HEAPU16[((_width)>>1)];
      var $2074=((($2073))&65535);
      var $2075=((($2072)*($2074))|0);
      var $2076=((($2075)+2)|0);
      var $2077=HEAP32[((_image)>>2)];
      var $2078=(($2077+($2076<<3))|0);
      var $2079=(($2078)|0);
      $pix=$2079;
      $col=2;
      __label__ = 334; break;
    case 334: // $2080
      var $2081=$col;
      var $2082=HEAPU16[((_width)>>1)];
      var $2083=((($2082))&65535);
      var $2084=((($2083)-2)|0);
      var $2085=((($2081))|0) < ((($2084))|0);
      if ($2085) { __label__ = 335; break; } else { __label__ = 345; break; }
    case 335: // $2086
      $c=0;
      __label__ = 336; break;
    case 336: // $2087
      var $2088=$c;
      var $2089=((($2088))|0) < 3;
      if ($2089) { __label__ = 337; break; } else { __label__ = 339; break; }
    case 337: // $2090
      var $2091=(($curve+28)|0);
      var $2092=HEAP32[(($2091)>>2)];
      var $2093=$c;
      var $2094=$pix;
      var $2095=(($2094+($2093<<1))|0);
      var $2096=HEAP16[(($2095)>>1)];
      var $2097=((($2096) << 16) >> 16);
      var $2098=$c;
      var $2099=$col;
      var $2100=(($smrow+4)|0);
      var $2101=HEAP32[(($2100)>>2)];
      var $2102=(($2101+$2099*12)|0);
      var $2103=(($2102+($2098<<2))|0);
      var $2104=HEAP32[(($2103)>>2)];
      var $2105=$c;
      var $2106=$col;
      var $2107=(($smrow+8)|0);
      var $2108=HEAP32[(($2107)>>2)];
      var $2109=(($2108+$2106*12)|0);
      var $2110=(($2109+($2105<<2))|0);
      var $2111=HEAP32[(($2110)>>2)];
      var $2112=(((($2111)<<1))|0);
      var $2113=((($2104)+($2112))|0);
      var $2114=$c;
      var $2115=$col;
      var $2116=(($smrow+12)|0);
      var $2117=HEAP32[(($2116)>>2)];
      var $2118=(($2117+$2115*12)|0);
      var $2119=(($2118+($2114<<2))|0);
      var $2120=HEAP32[(($2119)>>2)];
      var $2121=((($2113)+($2120))|0);
      var $2122=($2121) >> 2;
      var $2123=((($2097)-($2122))|0);
      var $2124=_foveon_apply_curve($2092, $2123);
      var $2125=(((-($2124)))|0);
      var $2126=$c;
      var $2127=(($dev+($2126<<2))|0);
      HEAP32[(($2127)>>2)]=$2125;
      __label__ = 338; break;
    case 338: // $2128
      var $2129=$c;
      var $2130=((($2129)+1)|0);
      $c=$2130;
      __label__ = 336; break;
    case 339: // $2131
      var $2132=(($dev)|0);
      var $2133=HEAP32[(($2132)>>2)];
      var $2134=(($dev+4)|0);
      var $2135=HEAP32[(($2134)>>2)];
      var $2136=((($2133)+($2135))|0);
      var $2137=(($dev+8)|0);
      var $2138=HEAP32[(($2137)>>2)];
      var $2139=((($2136)+($2138))|0);
      var $2140=($2139) >> 3;
      $sum=$2140;
      $c=0;
      __label__ = 340; break;
    case 340: // $2141
      var $2142=$c;
      var $2143=((($2142))|0) < 3;
      if ($2143) { __label__ = 341; break; } else { __label__ = 343; break; }
    case 341: // $2144
      var $2145=$c;
      var $2146=(($dev+($2145<<2))|0);
      var $2147=HEAP32[(($2146)>>2)];
      var $2148=$sum;
      var $2149=((($2147)-($2148))|0);
      var $2150=$c;
      var $2151=$pix;
      var $2152=(($2151+($2150<<1))|0);
      var $2153=HEAP16[(($2152)>>1)];
      var $2154=((($2153) << 16) >> 16);
      var $2155=((($2154)+($2149))|0);
      var $2156=((($2155)) & 65535);
      HEAP16[(($2152)>>1)]=$2156;
      __label__ = 342; break;
    case 342: // $2157
      var $2158=$c;
      var $2159=((($2158)+1)|0);
      $c=$2159;
      __label__ = 340; break;
    case 343: // $2160
      var $2161=$pix;
      var $2162=(($2161+8)|0);
      $pix=$2162;
      __label__ = 344; break;
    case 344: // $2163
      var $2164=$col;
      var $2165=((($2164)+1)|0);
      $col=$2165;
      __label__ = 334; break;
    case 345: // $2166
      __label__ = 346; break;
    case 346: // $2167
      var $2168=$row;
      var $2169=((($2168)+1)|0);
      $row=$2169;
      __label__ = 317; break;
    case 347: // $2170
      $smlast=-1;
      $row=2;
      __label__ = 348; break;
    case 348: // $2171
      var $2172=$row;
      var $2173=HEAPU16[((_height)>>1)];
      var $2174=((($2173))&65535);
      var $2175=((($2174)-2)|0);
      var $2176=((($2172))|0) < ((($2175))|0);
      if ($2176) { __label__ = 349; break; } else { __label__ = 387; break; }
    case 349: // $2177
      __label__ = 350; break;
    case 350: // $2178
      var $2179=$smlast;
      var $2180=$row;
      var $2181=((($2180)+2)|0);
      var $2182=((($2179))|0) < ((($2181))|0);
      if ($2182) { __label__ = 351; break; } else { __label__ = 364; break; }
    case 351: // $2183
      $i=0;
      __label__ = 352; break;
    case 352: // $2184
      var $2185=$i;
      var $2186=((($2185))|0) < 6;
      if ($2186) { __label__ = 353; break; } else { __label__ = 355; break; }
    case 353: // $2187
      var $2188=$i;
      var $2189=(($smrow+($2188<<2))|0);
      var $2190=HEAP32[(($2189)>>2)];
      var $2191=$i;
      var $2192=((($2191)+5)|0);
      var $2193=((($2192))|0)%6;
      var $2194=(($smrow+($2193<<2))|0);
      HEAP32[(($2194)>>2)]=$2190;
      __label__ = 354; break;
    case 354: // $2195
      var $2196=$i;
      var $2197=((($2196)+1)|0);
      $i=$2197;
      __label__ = 352; break;
    case 355: // $2198
      var $2199=$smlast;
      var $2200=((($2199)+1)|0);
      $smlast=$2200;
      var $2201=HEAPU16[((_width)>>1)];
      var $2202=((($2201))&65535);
      var $2203=((($2200)*($2202))|0);
      var $2204=((($2203)+2)|0);
      var $2205=HEAP32[((_image)>>2)];
      var $2206=(($2205+($2204<<3))|0);
      var $2207=(($2206)|0);
      $pix=$2207;
      $col=2;
      __label__ = 356; break;
    case 356: // $2208
      var $2209=$col;
      var $2210=HEAPU16[((_width)>>1)];
      var $2211=((($2210))&65535);
      var $2212=((($2211)-2)|0);
      var $2213=((($2209))|0) < ((($2212))|0);
      if ($2213) { __label__ = 357; break; } else { __label__ = 363; break; }
    case 357: // $2214
      $c=0;
      __label__ = 358; break;
    case 358: // $2215
      var $2216=$c;
      var $2217=((($2216))|0) < 3;
      if ($2217) { __label__ = 359; break; } else { __label__ = 361; break; }
    case 359: // $2218
      var $2219=$c;
      var $2220=((($2219)-8)|0);
      var $2221=$pix;
      var $2222=(($2221+($2220<<1))|0);
      var $2223=HEAP16[(($2222)>>1)];
      var $2224=((($2223) << 16) >> 16);
      var $2225=$c;
      var $2226=((($2225)-4)|0);
      var $2227=$pix;
      var $2228=(($2227+($2226<<1))|0);
      var $2229=HEAP16[(($2228)>>1)];
      var $2230=((($2229) << 16) >> 16);
      var $2231=((($2224)+($2230))|0);
      var $2232=$c;
      var $2233=$pix;
      var $2234=(($2233+($2232<<1))|0);
      var $2235=HEAP16[(($2234)>>1)];
      var $2236=((($2235) << 16) >> 16);
      var $2237=((($2231)+($2236))|0);
      var $2238=$c;
      var $2239=((($2238)+4)|0);
      var $2240=$pix;
      var $2241=(($2240+($2239<<1))|0);
      var $2242=HEAP16[(($2241)>>1)];
      var $2243=((($2242) << 16) >> 16);
      var $2244=((($2237)+($2243))|0);
      var $2245=$c;
      var $2246=((($2245)+8)|0);
      var $2247=$pix;
      var $2248=(($2247+($2246<<1))|0);
      var $2249=HEAP16[(($2248)>>1)];
      var $2250=((($2249) << 16) >> 16);
      var $2251=((($2244)+($2250))|0);
      var $2252=((($2251)+2)|0);
      var $2253=($2252) >> 2;
      var $2254=$c;
      var $2255=$col;
      var $2256=(($smrow+16)|0);
      var $2257=HEAP32[(($2256)>>2)];
      var $2258=(($2257+$2255*12)|0);
      var $2259=(($2258+($2254<<2))|0);
      HEAP32[(($2259)>>2)]=$2253;
      __label__ = 360; break;
    case 360: // $2260
      var $2261=$c;
      var $2262=((($2261)+1)|0);
      $c=$2262;
      __label__ = 358; break;
    case 361: // $2263
      var $2264=$pix;
      var $2265=(($2264+8)|0);
      $pix=$2265;
      __label__ = 362; break;
    case 362: // $2266
      var $2267=$col;
      var $2268=((($2267)+1)|0);
      $col=$2268;
      __label__ = 356; break;
    case 363: // $2269
      __label__ = 350; break;
    case 364: // $2270
      var $2271=$row;
      var $2272=HEAPU16[((_width)>>1)];
      var $2273=((($2272))&65535);
      var $2274=((($2271)*($2273))|0);
      var $2275=((($2274)+2)|0);
      var $2276=HEAP32[((_image)>>2)];
      var $2277=(($2276+($2275<<3))|0);
      var $2278=(($2277)|0);
      $pix=$2278;
      $col=2;
      __label__ = 365; break;
    case 365: // $2279
      var $2280=$col;
      var $2281=HEAPU16[((_width)>>1)];
      var $2282=((($2281))&65535);
      var $2283=((($2282)-2)|0);
      var $2284=((($2280))|0) < ((($2283))|0);
      if ($2284) { __label__ = 366; break; } else { __label__ = 385; break; }
    case 366: // $2285
      var $2286=(($total+12)|0);
      HEAP32[(($2286)>>2)]=375;
      $sum=60;
      $c=0;
      __label__ = 367; break;
    case 367: // $2287
      var $2288=$c;
      var $2289=((($2288))|0) < 3;
      if ($2289) { __label__ = 368; break; } else { __label__ = 374; break; }
    case 368: // $2290
      $i=0;
      var $2291=$c;
      var $2292=(($total+($2291<<2))|0);
      HEAP32[(($2292)>>2)]=0;
      __label__ = 369; break;
    case 369: // $2293
      var $2294=$i;
      var $2295=((($2294))|0) < 5;
      if ($2295) { __label__ = 370; break; } else { __label__ = 372; break; }
    case 370: // $2296
      var $2297=$c;
      var $2298=$col;
      var $2299=$i;
      var $2300=(($smrow+($2299<<2))|0);
      var $2301=HEAP32[(($2300)>>2)];
      var $2302=(($2301+$2298*12)|0);
      var $2303=(($2302+($2297<<2))|0);
      var $2304=HEAP32[(($2303)>>2)];
      var $2305=$c;
      var $2306=(($total+($2305<<2))|0);
      var $2307=HEAP32[(($2306)>>2)];
      var $2308=((($2307)+($2304))|0);
      HEAP32[(($2306)>>2)]=$2308;
      __label__ = 371; break;
    case 371: // $2309
      var $2310=$i;
      var $2311=((($2310)+1)|0);
      $i=$2311;
      __label__ = 369; break;
    case 372: // $2312
      var $2313=$c;
      var $2314=(($total+($2313<<2))|0);
      var $2315=HEAP32[(($2314)>>2)];
      var $2316=(($total+12)|0);
      var $2317=HEAP32[(($2316)>>2)];
      var $2318=((($2317)+($2315))|0);
      HEAP32[(($2316)>>2)]=$2318;
      var $2319=$c;
      var $2320=$pix;
      var $2321=(($2320+($2319<<1))|0);
      var $2322=HEAP16[(($2321)>>1)];
      var $2323=((($2322) << 16) >> 16);
      var $2324=$sum;
      var $2325=((($2324)+($2323))|0);
      $sum=$2325;
      __label__ = 373; break;
    case 373: // $2326
      var $2327=$c;
      var $2328=((($2327)+1)|0);
      $c=$2328;
      __label__ = 367; break;
    case 374: // $2329
      var $2330=$sum;
      var $2331=((($2330))|0) < 0;
      if ($2331) { __label__ = 375; break; } else { __label__ = 376; break; }
    case 375: // $2332
      $sum=0;
      __label__ = 376; break;
    case 376: // $2333
      var $2334=(($total+12)|0);
      var $2335=HEAP32[(($2334)>>2)];
      var $2336=((($2335))|0) > 375;
      if ($2336) { __label__ = 377; break; } else { __label__ = 378; break; }
    case 377: // $2337
      var $2338=$sum;
      var $2339=($2338) << 16;
      var $2340=(($total+12)|0);
      var $2341=HEAP32[(($2340)>>2)];
      var $2342=((((($2339))|0)/((($2341))|0))|0);
      var $2347 = $2342;__label__ = 379; break;
    case 378: // $2343
      var $2344=$sum;
      var $2345=((($2344)*174)|0);
      var $2347 = $2345;__label__ = 379; break;
    case 379: // $2346
      var $2347;
      $j=$2347;
      $c=0;
      __label__ = 380; break;
    case 380: // $2348
      var $2349=$c;
      var $2350=((($2349))|0) < 3;
      if ($2350) { __label__ = 381; break; } else { __label__ = 383; break; }
    case 381: // $2351
      var $2352=(($curve+24)|0);
      var $2353=HEAP32[(($2352)>>2)];
      var $2354=$j;
      var $2355=$c;
      var $2356=(($total+($2355<<2))|0);
      var $2357=HEAP32[(($2356)>>2)];
      var $2358=((($2354)*($2357))|0);
      var $2359=((($2358)+32768)|0);
      var $2360=($2359) >> 16;
      var $2361=$c;
      var $2362=$pix;
      var $2363=(($2362+($2361<<1))|0);
      var $2364=HEAP16[(($2363)>>1)];
      var $2365=((($2364) << 16) >> 16);
      var $2366=((($2360)-($2365))|0);
      var $2367=_foveon_apply_curve($2353, $2366);
      var $2368=$c;
      var $2369=$pix;
      var $2370=(($2369+($2368<<1))|0);
      var $2371=HEAP16[(($2370)>>1)];
      var $2372=((($2371) << 16) >> 16);
      var $2373=((($2372)+($2367))|0);
      var $2374=((($2373)) & 65535);
      HEAP16[(($2370)>>1)]=$2374;
      __label__ = 382; break;
    case 382: // $2375
      var $2376=$c;
      var $2377=((($2376)+1)|0);
      $c=$2377;
      __label__ = 380; break;
    case 383: // $2378
      var $2379=$pix;
      var $2380=(($2379+8)|0);
      $pix=$2380;
      __label__ = 384; break;
    case 384: // $2381
      var $2382=$col;
      var $2383=((($2382)+1)|0);
      $col=$2383;
      __label__ = 365; break;
    case 385: // $2384
      __label__ = 386; break;
    case 386: // $2385
      var $2386=$row;
      var $2387=((($2386)+1)|0);
      $row=$2387;
      __label__ = 348; break;
    case 387: // $2388
      var $2389=HEAP32[((_image)>>2)];
      var $2390=(($2389)|0);
      var $2391=(($2390)|0);
      $pix=$2391;
      __label__ = 388; break;
    case 388: // $2392
      var $2393=$pix;
      var $2394=HEAPU16[((_height)>>1)];
      var $2395=((($2394))&65535);
      var $2396=HEAPU16[((_width)>>1)];
      var $2397=((($2396))&65535);
      var $2398=((($2395)*($2397))|0);
      var $2399=HEAP32[((_image)>>2)];
      var $2400=(($2399+($2398<<3))|0);
      var $2401=(($2400)|0);
      var $2402=((($2393))>>>0) < ((($2401))>>>0);
      if ($2402) { __label__ = 389; break; } else { __label__ = 415; break; }
    case 389: // $2403
      $c=0;
      __label__ = 390; break;
    case 390: // $2404
      var $2405=$c;
      var $2406=((($2405))|0) < 3;
      if ($2406) { __label__ = 391; break; } else { __label__ = 393; break; }
    case 391: // $2407
      var $2408=$c;
      var $2409=(($curve+($2408<<2))|0);
      var $2410=HEAP32[(($2409)>>2)];
      var $2411=$c;
      var $2412=$pix;
      var $2413=(($2412+($2411<<1))|0);
      var $2414=HEAP16[(($2413)>>1)];
      var $2415=((($2414) << 16) >> 16);
      var $2416=_foveon_apply_curve($2410, $2415);
      var $2417=$c;
      var $2418=$pix;
      var $2419=(($2418+($2417<<1))|0);
      var $2420=HEAP16[(($2419)>>1)];
      var $2421=((($2420) << 16) >> 16);
      var $2422=((($2421)-($2416))|0);
      var $2423=((($2422)) & 65535);
      HEAP16[(($2419)>>1)]=$2423;
      __label__ = 392; break;
    case 392: // $2424
      var $2425=$c;
      var $2426=((($2425)+1)|0);
      $c=$2426;
      __label__ = 390; break;
    case 393: // $2427
      var $2428=$pix;
      var $2429=(($2428)|0);
      var $2430=HEAP16[(($2429)>>1)];
      var $2431=((($2430) << 16) >> 16);
      var $2432=$pix;
      var $2433=(($2432+2)|0);
      var $2434=HEAP16[(($2433)>>1)];
      var $2435=((($2434) << 16) >> 16);
      var $2436=((($2431)+($2435))|0);
      var $2437=$pix;
      var $2438=(($2437+2)|0);
      var $2439=HEAP16[(($2438)>>1)];
      var $2440=((($2439) << 16) >> 16);
      var $2441=((($2436)+($2440))|0);
      var $2442=$pix;
      var $2443=(($2442+4)|0);
      var $2444=HEAP16[(($2443)>>1)];
      var $2445=((($2444) << 16) >> 16);
      var $2446=((($2441)+($2445))|0);
      var $2447=($2446) >> 2;
      $sum=$2447;
      $c=0;
      __label__ = 394; break;
    case 394: // $2448
      var $2449=$c;
      var $2450=((($2449))|0) < 3;
      if ($2450) { __label__ = 395; break; } else { __label__ = 397; break; }
    case 395: // $2451
      var $2452=$c;
      var $2453=(($curve+($2452<<2))|0);
      var $2454=HEAP32[(($2453)>>2)];
      var $2455=$c;
      var $2456=$pix;
      var $2457=(($2456+($2455<<1))|0);
      var $2458=HEAP16[(($2457)>>1)];
      var $2459=((($2458) << 16) >> 16);
      var $2460=$sum;
      var $2461=((($2459)-($2460))|0);
      var $2462=_foveon_apply_curve($2454, $2461);
      var $2463=$c;
      var $2464=$pix;
      var $2465=(($2464+($2463<<1))|0);
      var $2466=HEAP16[(($2465)>>1)];
      var $2467=((($2466) << 16) >> 16);
      var $2468=((($2467)-($2462))|0);
      var $2469=((($2468)) & 65535);
      HEAP16[(($2465)>>1)]=$2469;
      __label__ = 396; break;
    case 396: // $2470
      var $2471=$c;
      var $2472=((($2471)+1)|0);
      $c=$2472;
      __label__ = 394; break;
    case 397: // $2473
      $c=0;
      __label__ = 398; break;
    case 398: // $2474
      var $2475=$c;
      var $2476=((($2475))|0) < 3;
      if ($2476) { __label__ = 399; break; } else { __label__ = 409; break; }
    case 399: // $2477
      $i=0;
      $dsum=0;
      __label__ = 400; break;
    case 400: // $2478
      var $2479=$i;
      var $2480=((($2479))|0) < 3;
      if ($2480) { __label__ = 401; break; } else { __label__ = 403; break; }
    case 401: // $2481
      var $2482=$i;
      var $2483=$c;
      var $2484=(($trans+$2483*12)|0);
      var $2485=(($2484+($2482<<2))|0);
      var $2486=HEAPF32[(($2485)>>2)];
      var $2487=$i;
      var $2488=$pix;
      var $2489=(($2488+($2487<<1))|0);
      var $2490=HEAP16[(($2489)>>1)];
      var $2491=((($2490) << 16) >> 16);
      var $2492=((($2491))|0);
      var $2493=($2486)*($2492);
      var $2494=($2493);
      var $2495=$dsum;
      var $2496=($2495)+($2494);
      $dsum=$2496;
      __label__ = 402; break;
    case 402: // $2497
      var $2498=$i;
      var $2499=((($2498)+1)|0);
      $i=$2499;
      __label__ = 400; break;
    case 403: // $2500
      var $2501=$dsum;
      var $2502=($2501) < 0;
      if ($2502) { __label__ = 404; break; } else { __label__ = 405; break; }
    case 404: // $2503
      $dsum=0;
      __label__ = 405; break;
    case 405: // $2504
      var $2505=$dsum;
      var $2506=($2505) > 24000;
      if ($2506) { __label__ = 406; break; } else { __label__ = 407; break; }
    case 406: // $2507
      $dsum=24000;
      __label__ = 407; break;
    case 407: // $2508
      var $2509=$dsum;
      var $2510=($2509)+0.5;
      var $2511=((($2510))|0);
      var $2512=$c;
      var $2513=(($ipix+($2512<<2))|0);
      HEAP32[(($2513)>>2)]=$2511;
      __label__ = 408; break;
    case 408: // $2514
      var $2515=$c;
      var $2516=((($2515)+1)|0);
      $c=$2516;
      __label__ = 398; break;
    case 409: // $2517
      $c=0;
      __label__ = 410; break;
    case 410: // $2518
      var $2519=$c;
      var $2520=((($2519))|0) < 3;
      if ($2520) { __label__ = 411; break; } else { __label__ = 413; break; }
    case 411: // $2521
      var $2522=$c;
      var $2523=(($ipix+($2522<<2))|0);
      var $2524=HEAP32[(($2523)>>2)];
      var $2525=((($2524)) & 65535);
      var $2526=$c;
      var $2527=$pix;
      var $2528=(($2527+($2526<<1))|0);
      HEAP16[(($2528)>>1)]=$2525;
      __label__ = 412; break;
    case 412: // $2529
      var $2530=$c;
      var $2531=((($2530)+1)|0);
      $c=$2531;
      __label__ = 410; break;
    case 413: // $2532
      __label__ = 414; break;
    case 414: // $2533
      var $2534=$pix;
      var $2535=(($2534+8)|0);
      $pix=$2535;
      __label__ = 388; break;
    case 415: // $2536
      var $2537=HEAPU16[((_width)>>1)];
      var $2538=((($2537))&65535);
      var $2539=((((($2538))|0)/4)|0);
      var $2540=HEAPU16[((_height)>>1)];
      var $2541=((($2540))&65535);
      var $2542=((((($2541))|0)/4)|0);
      var $2543=((($2539)*($2542))|0);
      var $2544=_calloc($2543, 6);
      var $2545=$2544;
      $shrink=$2545;
      var $2546=$shrink;
      var $2547=$2546;
      _merror($2547, ((__str57)|0));
      var $2548=HEAPU16[((_height)>>1)];
      var $2549=((($2548))&65535);
      var $2550=((((($2549))|0)/4)|0);
      $row=$2550;
      __label__ = 416; break;
    case 416: // $2551
      var $2552=$row;
      var $2553=((($2552)-1)|0);
      $row=$2553;
      var $2554=((($2552))|0)!=0;
      if ($2554) { __label__ = 417; break; } else { __label__ = 441; break; }
    case 417: // $2555
      $col=0;
      __label__ = 418; break;
    case 418: // $2556
      var $2557=$col;
      var $2558=HEAPU16[((_width)>>1)];
      var $2559=((($2558))&65535);
      var $2560=((((($2559))|0)/4)|0);
      var $2561=((($2557))|0) < ((($2560))|0);
      if ($2561) { __label__ = 419; break; } else { __label__ = 440; break; }
    case 419: // $2562
      var $2563=(($ipix+8)|0);
      HEAP32[(($2563)>>2)]=0;
      var $2564=(($ipix+4)|0);
      HEAP32[(($2564)>>2)]=0;
      var $2565=(($ipix)|0);
      HEAP32[(($2565)>>2)]=0;
      $i=0;
      __label__ = 420; break;
    case 420: // $2566
      var $2567=$i;
      var $2568=((($2567))|0) < 4;
      if ($2568) { __label__ = 421; break; } else { __label__ = 431; break; }
    case 421: // $2569
      $j=0;
      __label__ = 422; break;
    case 422: // $2570
      var $2571=$j;
      var $2572=((($2571))|0) < 4;
      if ($2572) { __label__ = 423; break; } else { __label__ = 429; break; }
    case 423: // $2573
      $c=0;
      __label__ = 424; break;
    case 424: // $2574
      var $2575=$c;
      var $2576=((($2575))|0) < 3;
      if ($2576) { __label__ = 425; break; } else { __label__ = 427; break; }
    case 425: // $2577
      var $2578=$c;
      var $2579=$row;
      var $2580=(((($2579)<<2))|0);
      var $2581=$i;
      var $2582=((($2580)+($2581))|0);
      var $2583=HEAPU16[((_width)>>1)];
      var $2584=((($2583))&65535);
      var $2585=((($2582)*($2584))|0);
      var $2586=$col;
      var $2587=(((($2586)<<2))|0);
      var $2588=((($2585)+($2587))|0);
      var $2589=$j;
      var $2590=((($2588)+($2589))|0);
      var $2591=HEAP32[((_image)>>2)];
      var $2592=(($2591+($2590<<3))|0);
      var $2593=(($2592+($2578<<1))|0);
      var $2594=HEAP16[(($2593)>>1)];
      var $2595=((($2594) << 16) >> 16);
      var $2596=$c;
      var $2597=(($ipix+($2596<<2))|0);
      var $2598=HEAP32[(($2597)>>2)];
      var $2599=((($2598)+($2595))|0);
      HEAP32[(($2597)>>2)]=$2599;
      __label__ = 426; break;
    case 426: // $2600
      var $2601=$c;
      var $2602=((($2601)+1)|0);
      $c=$2602;
      __label__ = 424; break;
    case 427: // $2603
      __label__ = 428; break;
    case 428: // $2604
      var $2605=$j;
      var $2606=((($2605)+1)|0);
      $j=$2606;
      __label__ = 422; break;
    case 429: // $2607
      __label__ = 430; break;
    case 430: // $2608
      var $2609=$i;
      var $2610=((($2609)+1)|0);
      $i=$2610;
      __label__ = 420; break;
    case 431: // $2611
      $c=0;
      __label__ = 432; break;
    case 432: // $2612
      var $2613=$c;
      var $2614=((($2613))|0) < 3;
      if ($2614) { __label__ = 433; break; } else { __label__ = 438; break; }
    case 433: // $2615
      var $2616=$row;
      var $2617=((($2616)+2)|0);
      var $2618=HEAPU16[((_height)>>1)];
      var $2619=((($2618))&65535);
      var $2620=((((($2619))|0)/4)|0);
      var $2621=((($2617))|0) > ((($2620))|0);
      if ($2621) { __label__ = 434; break; } else { __label__ = 435; break; }
    case 434: // $2622
      var $2623=$c;
      var $2624=(($ipix+($2623<<2))|0);
      var $2625=HEAP32[(($2624)>>2)];
      var $2626=($2625) >> 4;
      var $2627=((($2626)) & 65535);
      var $2628=$c;
      var $2629=$row;
      var $2630=HEAPU16[((_width)>>1)];
      var $2631=((($2630))&65535);
      var $2632=((((($2631))|0)/4)|0);
      var $2633=((($2629)*($2632))|0);
      var $2634=$col;
      var $2635=((($2633)+($2634))|0);
      var $2636=$shrink;
      var $2637=(($2636+$2635*6)|0);
      var $2638=(($2637+($2628<<1))|0);
      HEAP16[(($2638)>>1)]=$2627;
      __label__ = 436; break;
    case 435: // $2639
      var $2640=$c;
      var $2641=$row;
      var $2642=((($2641)+1)|0);
      var $2643=HEAPU16[((_width)>>1)];
      var $2644=((($2643))&65535);
      var $2645=((((($2644))|0)/4)|0);
      var $2646=((($2642)*($2645))|0);
      var $2647=$col;
      var $2648=((($2646)+($2647))|0);
      var $2649=$shrink;
      var $2650=(($2649+$2648*6)|0);
      var $2651=(($2650+($2640<<1))|0);
      var $2652=HEAP16[(($2651)>>1)];
      var $2653=((($2652) << 16) >> 16);
      var $2654=((($2653)*1840)|0);
      var $2655=$c;
      var $2656=(($ipix+($2655<<2))|0);
      var $2657=HEAP32[(($2656)>>2)];
      var $2658=((($2657)*141)|0);
      var $2659=((($2654)+($2658))|0);
      var $2660=((($2659)+2048)|0);
      var $2661=($2660) >> 12;
      var $2662=((($2661)) & 65535);
      var $2663=$c;
      var $2664=$row;
      var $2665=HEAPU16[((_width)>>1)];
      var $2666=((($2665))&65535);
      var $2667=((((($2666))|0)/4)|0);
      var $2668=((($2664)*($2667))|0);
      var $2669=$col;
      var $2670=((($2668)+($2669))|0);
      var $2671=$shrink;
      var $2672=(($2671+$2670*6)|0);
      var $2673=(($2672+($2663<<1))|0);
      HEAP16[(($2673)>>1)]=$2662;
      __label__ = 436; break;
    case 436: // $2674
      __label__ = 437; break;
    case 437: // $2675
      var $2676=$c;
      var $2677=((($2676)+1)|0);
      $c=$2677;
      __label__ = 432; break;
    case 438: // $2678
      __label__ = 439; break;
    case 439: // $2679
      var $2680=$col;
      var $2681=((($2680)+1)|0);
      $col=$2681;
      __label__ = 418; break;
    case 440: // $2682
      __label__ = 416; break;
    case 441: // $2683
      $row=0;
      __label__ = 442; break;
    case 442: // $2684
      var $2685=$row;
      var $2686=HEAPU16[((_height)>>1)];
      var $2687=((($2686))&65535);
      var $2688=($2687) & -4;
      var $2689=((($2685))|0) < ((($2688))|0);
      if ($2689) { __label__ = 443; break; } else { __label__ = 491; break; }
    case 443: // $2690
      var $2691=(($ipix+8)|0);
      HEAP32[(($2691)>>2)]=0;
      var $2692=(($ipix+4)|0);
      HEAP32[(($2692)>>2)]=0;
      var $2693=(($ipix)|0);
      HEAP32[(($2693)>>2)]=0;
      var $2694=$row;
      var $2695=($2694) & 3;
      var $2696=((($2695))|0)==0;
      if ($2696) { __label__ = 444; break; } else { __label__ = 452; break; }
    case 444: // $2697
      var $2698=HEAPU16[((_width)>>1)];
      var $2699=((($2698))&65535);
      var $2700=($2699) & -4;
      $col=$2700;
      __label__ = 445; break;
    case 445: // $2701
      var $2702=$col;
      var $2703=((($2702)-1)|0);
      $col=$2703;
      var $2704=((($2702))|0)!=0;
      if ($2704) { __label__ = 446; break; } else { __label__ = 451; break; }
    case 446: // $2705
      $c=0;
      __label__ = 447; break;
    case 447: // $2706
      var $2707=$c;
      var $2708=((($2707))|0) < 3;
      if ($2708) { __label__ = 448; break; } else { __label__ = 450; break; }
    case 448: // $2709
      var $2710=$c;
      var $2711=$row;
      var $2712=((((($2711))|0)/4)|0);
      var $2713=HEAPU16[((_width)>>1)];
      var $2714=((($2713))&65535);
      var $2715=((((($2714))|0)/4)|0);
      var $2716=((($2712)*($2715))|0);
      var $2717=$col;
      var $2718=((((($2717))|0)/4)|0);
      var $2719=((($2716)+($2718))|0);
      var $2720=$shrink;
      var $2721=(($2720+$2719*6)|0);
      var $2722=(($2721+($2710<<1))|0);
      var $2723=HEAP16[(($2722)>>1)];
      var $2724=((($2723) << 16) >> 16);
      var $2725=((($2724)*1485)|0);
      var $2726=$c;
      var $2727=(($ipix+($2726<<2))|0);
      var $2728=HEAP32[(($2727)>>2)];
      var $2729=((($2728)*6707)|0);
      var $2730=((($2725)+($2729))|0);
      var $2731=((($2730)+4096)|0);
      var $2732=($2731) >> 13;
      var $2733=$c;
      var $2734=(($ipix+($2733<<2))|0);
      HEAP32[(($2734)>>2)]=$2732;
      var $2735=$c;
      var $2736=$col;
      var $2737=(($smrow)|0);
      var $2738=HEAP32[(($2737)>>2)];
      var $2739=(($2738+$2736*12)|0);
      var $2740=(($2739+($2735<<2))|0);
      HEAP32[(($2740)>>2)]=$2732;
      __label__ = 449; break;
    case 449: // $2741
      var $2742=$c;
      var $2743=((($2742)+1)|0);
      $c=$2743;
      __label__ = 447; break;
    case 450: // $2744
      __label__ = 445; break;
    case 451: // $2745
      __label__ = 452; break;
    case 452: // $2746
      var $2747=(($ipix+8)|0);
      HEAP32[(($2747)>>2)]=0;
      var $2748=(($ipix+4)|0);
      HEAP32[(($2748)>>2)]=0;
      var $2749=(($ipix)|0);
      HEAP32[(($2749)>>2)]=0;
      $col=0;
      __label__ = 453; break;
    case 453: // $2750
      var $2751=$col;
      var $2752=HEAPU16[((_width)>>1)];
      var $2753=((($2752))&65535);
      var $2754=($2753) & -4;
      var $2755=((($2751))|0) < ((($2754))|0);
      if ($2755) { __label__ = 454; break; } else { __label__ = 460; break; }
    case 454: // $2756
      $c=0;
      __label__ = 455; break;
    case 455: // $2757
      var $2758=$c;
      var $2759=((($2758))|0) < 3;
      if ($2759) { __label__ = 456; break; } else { __label__ = 458; break; }
    case 456: // $2760
      var $2761=$c;
      var $2762=$col;
      var $2763=(($smrow)|0);
      var $2764=HEAP32[(($2763)>>2)];
      var $2765=(($2764+$2762*12)|0);
      var $2766=(($2765+($2761<<2))|0);
      var $2767=HEAP32[(($2766)>>2)];
      var $2768=((($2767)*1485)|0);
      var $2769=$c;
      var $2770=(($ipix+($2769<<2))|0);
      var $2771=HEAP32[(($2770)>>2)];
      var $2772=((($2771)*6707)|0);
      var $2773=((($2768)+($2772))|0);
      var $2774=((($2773)+4096)|0);
      var $2775=($2774) >> 13;
      var $2776=$c;
      var $2777=(($ipix+($2776<<2))|0);
      HEAP32[(($2777)>>2)]=$2775;
      var $2778=$c;
      var $2779=$col;
      var $2780=(($smrow+4)|0);
      var $2781=HEAP32[(($2780)>>2)];
      var $2782=(($2781+$2779*12)|0);
      var $2783=(($2782+($2778<<2))|0);
      HEAP32[(($2783)>>2)]=$2775;
      __label__ = 457; break;
    case 457: // $2784
      var $2785=$c;
      var $2786=((($2785)+1)|0);
      $c=$2786;
      __label__ = 455; break;
    case 458: // $2787
      __label__ = 459; break;
    case 459: // $2788
      var $2789=$col;
      var $2790=((($2789)+1)|0);
      $col=$2790;
      __label__ = 453; break;
    case 460: // $2791
      var $2792=$row;
      var $2793=((($2792))|0)==0;
      if ($2793) { __label__ = 461; break; } else { __label__ = 462; break; }
    case 461: // $2794
      var $2795=(($smrow+8)|0);
      var $2796=HEAP32[(($2795)>>2)];
      var $2797=$2796;
      var $2798=(($smrow+4)|0);
      var $2799=HEAP32[(($2798)>>2)];
      var $2800=$2799;
      var $2801=HEAPU16[((_width)>>1)];
      var $2802=((($2801))&65535);
      var $2803=((($2802)*12)|0);
      assert($2803 % 1 === 0, 'memcpy given ' + $2803 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($2797, $2800, $2803, 1);
      __label__ = 471; break;
    case 462: // $2804
      $col=0;
      __label__ = 463; break;
    case 463: // $2805
      var $2806=$col;
      var $2807=HEAPU16[((_width)>>1)];
      var $2808=((($2807))&65535);
      var $2809=($2808) & -4;
      var $2810=((($2806))|0) < ((($2809))|0);
      if ($2810) { __label__ = 464; break; } else { __label__ = 470; break; }
    case 464: // $2811
      $c=0;
      __label__ = 465; break;
    case 465: // $2812
      var $2813=$c;
      var $2814=((($2813))|0) < 3;
      if ($2814) { __label__ = 466; break; } else { __label__ = 468; break; }
    case 466: // $2815
      var $2816=$c;
      var $2817=$col;
      var $2818=(($smrow+8)|0);
      var $2819=HEAP32[(($2818)>>2)];
      var $2820=(($2819+$2817*12)|0);
      var $2821=(($2820+($2816<<2))|0);
      var $2822=HEAP32[(($2821)>>2)];
      var $2823=((($2822)*6707)|0);
      var $2824=$c;
      var $2825=$col;
      var $2826=(($smrow+4)|0);
      var $2827=HEAP32[(($2826)>>2)];
      var $2828=(($2827+$2825*12)|0);
      var $2829=(($2828+($2824<<2))|0);
      var $2830=HEAP32[(($2829)>>2)];
      var $2831=((($2830)*1485)|0);
      var $2832=((($2823)+($2831))|0);
      var $2833=((($2832)+4096)|0);
      var $2834=($2833) >> 13;
      var $2835=$c;
      var $2836=$col;
      var $2837=(($smrow+8)|0);
      var $2838=HEAP32[(($2837)>>2)];
      var $2839=(($2838+$2836*12)|0);
      var $2840=(($2839+($2835<<2))|0);
      HEAP32[(($2840)>>2)]=$2834;
      __label__ = 467; break;
    case 467: // $2841
      var $2842=$c;
      var $2843=((($2842)+1)|0);
      $c=$2843;
      __label__ = 465; break;
    case 468: // $2844
      __label__ = 469; break;
    case 469: // $2845
      var $2846=$col;
      var $2847=((($2846)+1)|0);
      $col=$2847;
      __label__ = 463; break;
    case 470: // $2848
      __label__ = 471; break;
    case 471: // $2849
      $col=0;
      __label__ = 472; break;
    case 472: // $2850
      var $2851=$col;
      var $2852=HEAPU16[((_width)>>1)];
      var $2853=((($2852))&65535);
      var $2854=($2853) & -4;
      var $2855=((($2851))|0) < ((($2854))|0);
      if ($2855) { __label__ = 473; break; } else { __label__ = 489; break; }
    case 473: // $2856
      $j=30;
      $i=30;
      $c=0;
      __label__ = 474; break;
    case 474: // $2857
      var $2858=$c;
      var $2859=((($2858))|0) < 3;
      if ($2859) { __label__ = 475; break; } else { __label__ = 477; break; }
    case 475: // $2860
      var $2861=$c;
      var $2862=$col;
      var $2863=(($smrow+8)|0);
      var $2864=HEAP32[(($2863)>>2)];
      var $2865=(($2864+$2862*12)|0);
      var $2866=(($2865+($2861<<2))|0);
      var $2867=HEAP32[(($2866)>>2)];
      var $2868=$i;
      var $2869=((($2868)+($2867))|0);
      $i=$2869;
      var $2870=$c;
      var $2871=$row;
      var $2872=HEAPU16[((_width)>>1)];
      var $2873=((($2872))&65535);
      var $2874=((($2871)*($2873))|0);
      var $2875=$col;
      var $2876=((($2874)+($2875))|0);
      var $2877=HEAP32[((_image)>>2)];
      var $2878=(($2877+($2876<<3))|0);
      var $2879=(($2878+($2870<<1))|0);
      var $2880=HEAP16[(($2879)>>1)];
      var $2881=((($2880) << 16) >> 16);
      var $2882=$j;
      var $2883=((($2882)+($2881))|0);
      $j=$2883;
      __label__ = 476; break;
    case 476: // $2884
      var $2885=$c;
      var $2886=((($2885)+1)|0);
      $c=$2886;
      __label__ = 474; break;
    case 477: // $2887
      var $2888=$j;
      var $2889=($2888) << 16;
      var $2890=$i;
      var $2891=((((($2889))|0)/((($2890))|0))|0);
      $j=$2891;
      $c=0;
      $sum=0;
      __label__ = 478; break;
    case 478: // $2892
      var $2893=$c;
      var $2894=((($2893))|0) < 3;
      if ($2894) { __label__ = 479; break; } else { __label__ = 481; break; }
    case 479: // $2895
      var $2896=$c;
      var $2897=((($2896)+3)|0);
      var $2898=(($curve+($2897<<2))|0);
      var $2899=HEAP32[(($2898)>>2)];
      var $2900=$c;
      var $2901=$col;
      var $2902=(($smrow+8)|0);
      var $2903=HEAP32[(($2902)>>2)];
      var $2904=(($2903+$2901*12)|0);
      var $2905=(($2904+($2900<<2))|0);
      var $2906=HEAP32[(($2905)>>2)];
      var $2907=$j;
      var $2908=((($2906)*($2907))|0);
      var $2909=((($2908)+32768)|0);
      var $2910=($2909) >> 16;
      var $2911=$c;
      var $2912=$row;
      var $2913=HEAPU16[((_width)>>1)];
      var $2914=((($2913))&65535);
      var $2915=((($2912)*($2914))|0);
      var $2916=$col;
      var $2917=((($2915)+($2916))|0);
      var $2918=HEAP32[((_image)>>2)];
      var $2919=(($2918+($2917<<3))|0);
      var $2920=(($2919+($2911<<1))|0);
      var $2921=HEAP16[(($2920)>>1)];
      var $2922=((($2921) << 16) >> 16);
      var $2923=((($2910)-($2922))|0);
      var $2924=_foveon_apply_curve($2899, $2923);
      var $2925=$c;
      var $2926=(($ipix+($2925<<2))|0);
      HEAP32[(($2926)>>2)]=$2924;
      var $2927=$c;
      var $2928=(($ipix+($2927<<2))|0);
      var $2929=HEAP32[(($2928)>>2)];
      var $2930=$sum;
      var $2931=((($2930)+($2929))|0);
      $sum=$2931;
      __label__ = 480; break;
    case 480: // $2932
      var $2933=$c;
      var $2934=((($2933)+1)|0);
      $c=$2934;
      __label__ = 478; break;
    case 481: // $2935
      var $2936=$sum;
      var $2937=($2936) >> 3;
      $sum=$2937;
      $c=0;
      __label__ = 482; break;
    case 482: // $2938
      var $2939=$c;
      var $2940=((($2939))|0) < 3;
      if ($2940) { __label__ = 483; break; } else { __label__ = 487; break; }
    case 483: // $2941
      var $2942=$c;
      var $2943=$row;
      var $2944=HEAPU16[((_width)>>1)];
      var $2945=((($2944))&65535);
      var $2946=((($2943)*($2945))|0);
      var $2947=$col;
      var $2948=((($2946)+($2947))|0);
      var $2949=HEAP32[((_image)>>2)];
      var $2950=(($2949+($2948<<3))|0);
      var $2951=(($2950+($2942<<1))|0);
      var $2952=HEAP16[(($2951)>>1)];
      var $2953=((($2952) << 16) >> 16);
      var $2954=$c;
      var $2955=(($ipix+($2954<<2))|0);
      var $2956=HEAP32[(($2955)>>2)];
      var $2957=((($2953)+($2956))|0);
      var $2958=$sum;
      var $2959=((($2957)-($2958))|0);
      $i=$2959;
      var $2960=$i;
      var $2961=((($2960))|0) < 0;
      if ($2961) { __label__ = 484; break; } else { __label__ = 485; break; }
    case 484: // $2962
      $i=0;
      __label__ = 485; break;
    case 485: // $2963
      var $2964=$i;
      var $2965=((($2964)) & 65535);
      var $2966=$c;
      var $2967=$row;
      var $2968=HEAPU16[((_width)>>1)];
      var $2969=((($2968))&65535);
      var $2970=((($2967)*($2969))|0);
      var $2971=$col;
      var $2972=((($2970)+($2971))|0);
      var $2973=HEAP32[((_image)>>2)];
      var $2974=(($2973+($2972<<3))|0);
      var $2975=(($2974+($2966<<1))|0);
      HEAP16[(($2975)>>1)]=$2965;
      __label__ = 486; break;
    case 486: // $2976
      var $2977=$c;
      var $2978=((($2977)+1)|0);
      $c=$2978;
      __label__ = 482; break;
    case 487: // $2979
      __label__ = 488; break;
    case 488: // $2980
      var $2981=$col;
      var $2982=((($2981)+1)|0);
      $col=$2982;
      __label__ = 472; break;
    case 489: // $2983
      __label__ = 490; break;
    case 490: // $2984
      var $2985=$row;
      var $2986=((($2985)+1)|0);
      $row=$2986;
      __label__ = 442; break;
    case 491: // $2987
      var $2988=$shrink;
      var $2989=$2988;
      _free($2989);
      var $2990=(($smrow+24)|0);
      var $2991=HEAP32[(($2990)>>2)];
      var $2992=$2991;
      _free($2992);
      $i=0;
      __label__ = 492; break;
    case 492: // $2993
      var $2994=$i;
      var $2995=((($2994))|0) < 8;
      if ($2995) { __label__ = 493; break; } else { __label__ = 495; break; }
    case 493: // $2996
      var $2997=$i;
      var $2998=(($curve+($2997<<2))|0);
      var $2999=HEAP32[(($2998)>>2)];
      var $3000=$2999;
      _free($3000);
      __label__ = 494; break;
    case 494: // $3001
      var $3002=$i;
      var $3003=((($3002)+1)|0);
      $i=$3003;
      __label__ = 492; break;
    case 495: // $3004
      var $3005=(($keep+4)|0);
      var $3006=HEAP32[(($3005)>>2)];
      var $3007=(($active+4)|0);
      var $3008=HEAP32[(($3007)>>2)];
      var $3009=((($3008)-($3006))|0);
      HEAP32[(($3007)>>2)]=$3009;
      var $3010=(($active+12)|0);
      var $3011=HEAP32[(($3010)>>2)];
      var $3012=((($3011)-2)|0);
      HEAP32[(($3010)>>2)]=$3012;
      var $3013=(($active+8)|0);
      var $3014=HEAP32[(($3013)>>2)];
      var $3015=(($active)|0);
      var $3016=HEAP32[(($3015)>>2)];
      var $3017=((($3014)-($3016))|0);
      $i=$3017;
      $row=0;
      __label__ = 496; break;
    case 496: // $3018
      var $3019=$row;
      var $3020=(($active+12)|0);
      var $3021=HEAP32[(($3020)>>2)];
      var $3022=(($active+4)|0);
      var $3023=HEAP32[(($3022)>>2)];
      var $3024=((($3021)-($3023))|0);
      var $3025=((($3019))|0) < ((($3024))|0);
      if ($3025) { __label__ = 497; break; } else { __label__ = 499; break; }
    case 497: // $3026
      var $3027=$row;
      var $3028=$i;
      var $3029=((($3027)*($3028))|0);
      var $3030=HEAP32[((_image)>>2)];
      var $3031=(($3030+($3029<<3))|0);
      var $3032=(($3031)|0);
      var $3033=$3032;
      var $3034=$row;
      var $3035=(($active+4)|0);
      var $3036=HEAP32[(($3035)>>2)];
      var $3037=((($3034)+($3036))|0);
      var $3038=HEAPU16[((_width)>>1)];
      var $3039=((($3038))&65535);
      var $3040=((($3037)*($3039))|0);
      var $3041=(($active)|0);
      var $3042=HEAP32[(($3041)>>2)];
      var $3043=((($3040)+($3042))|0);
      var $3044=HEAP32[((_image)>>2)];
      var $3045=(($3044+($3043<<3))|0);
      var $3046=(($3045)|0);
      var $3047=$3046;
      var $3048=$i;
      var $3049=(((($3048)<<3))|0);
      assert($3049 % 1 === 0, 'memcpy given ' + $3049 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($3033, $3047, $3049, 1);
      __label__ = 498; break;
    case 498: // $3050
      var $3051=$row;
      var $3052=((($3051)+1)|0);
      $row=$3052;
      __label__ = 496; break;
    case 499: // $3053
      var $3054=$i;
      var $3055=((($3054)) & 65535);
      HEAP16[((_width)>>1)]=$3055;
      var $3056=$row;
      var $3057=((($3056)) & 65535);
      HEAP16[((_height)>>1)]=$3057;
      __label__ = 500; break;
    case 500: // $3058
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_foveon_interpolate["X"]=1;

function _bad_pixels($cfname) {
  var __stackBase__  = STACKTOP; STACKTOP += 140; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $fp;
      var $fname;
      var $cp;
      var $line=__stackBase__;
      var $len;
      var $time=__stackBase__+128;
      var $row=__stackBase__+132;
      var $col=__stackBase__+136;
      var $r;
      var $c;
      var $rad;
      var $tot;
      var $n;
      var $fixed;
      $1=$cfname;
      $fp=0;
      $fixed=0;
      var $2=HEAP32[((_filters)>>2)];
      var $3=((($2))|0)!=0;
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $4
      __label__ = 67; break;
    case 2: // $5
      var $6=$1;
      var $7=((($6))|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $8
      var $9=$1;
      var $10=_fopen($9, ((__str58)|0));
      $fp=$10;
      __label__ = 26; break;
    case 4: // $11
      $len=32;
      __label__ = 5; break;
    case 5: // $12
      var $13=$len;
      var $14=_malloc($13);
      $fname=$14;
      var $15=$fname;
      var $16=((($15))|0)!=0;
      if ($16) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: // $17
      __label__ = 67; break;
    case 7: // $18
      var $19=$fname;
      var $20=$len;
      var $21=((($20)-16)|0);
      var $22=_getcwd($19, $21);
      var $23=((($22))|0)!=0;
      if ($23) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $24
      __label__ = 13; break;
    case 9: // $25
      var $26=$fname;
      _free($26);
      var $27=___errno();
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28))|0)!=34;
      if ($29) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $30
      __label__ = 67; break;
    case 11: // $31
      __label__ = 12; break;
    case 12: // $32
      var $33=$len;
      var $34=(((($33)<<1))|0);
      $len=$34;
      __label__ = 5; break;
    case 13: // $35
      var $36=$fname;
      var $37=$fname;
      var $38=_strlen($37);
      var $39=(($36+$38)|0);
      $cp=$39;
      var $40=$cp;
      var $41=(($40-1)|0);
      var $42=HEAP8[($41)];
      var $43=((($42) << 24) >> 24);
      var $44=((($43))|0)==47;
      if ($44) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $45
      var $46=$cp;
      var $47=(($46-1)|0);
      $cp=$47;
      __label__ = 15; break;
    case 15: // $48
      __label__ = 16; break;
    case 16: // $49
      var $50=$fname;
      var $51=HEAP8[($50)];
      var $52=((($51) << 24) >> 24);
      var $53=((($52))|0)==47;
      if ($53) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 17: // $54
      var $55=$cp;
      var $56=_strcpy($55, ((__str59)|0));
      var $57=$fname;
      var $58=_fopen($57, ((__str58)|0));
      $fp=$58;
      var $59=((($58))|0)!=0;
      if ($59) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $60
      __label__ = 25; break;
    case 19: // $61
      var $62=$cp;
      var $63=$fname;
      var $64=((($62))|0)==((($63))|0);
      if ($64) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $65
      __label__ = 25; break;
    case 21: // $66
      __label__ = 22; break;
    case 22: // $67
      var $68=$cp;
      var $69=(($68-1)|0);
      $cp=$69;
      var $70=HEAP8[($69)];
      var $71=((($70) << 24) >> 24);
      var $72=((($71))|0)!=47;
      if ($72) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $73
      __label__ = 22; break;
    case 24: // $74
      __label__ = 16; break;
    case 25: // $75
      var $76=$fname;
      _free($76);
      __label__ = 26; break;
    case 26: // $77
      var $78=$fp;
      var $79=((($78))|0)!=0;
      if ($79) { __label__ = 28; break; } else { __label__ = 27; break; }
    case 27: // $80
      __label__ = 67; break;
    case 28: // $81
      __label__ = 29; break;
    case 29: // $82
      var $83=(($line)|0);
      var $84=$fp;
      var $85=_fgets($83, 128, $84);
      var $86=((($85))|0)!=0;
      if ($86) { __label__ = 30; break; } else { __label__ = 64; break; }
    case 30: // $87
      var $88=(($line)|0);
      var $89=_strchr($88, 35);
      $cp=$89;
      var $90=$cp;
      var $91=((($90))|0)!=0;
      if ($91) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $92
      var $93=$cp;
      HEAP8[($93)]=0;
      __label__ = 32; break;
    case 32: // $94
      var $95=(($line)|0);
      var $96=_sscanf($95, ((__str60)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$col,HEAP32[((tempInt+4)>>2)]=$row,HEAP32[((tempInt+8)>>2)]=$time,tempInt));
      var $97=((($96))|0)!=3;
      if ($97) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $98
      __label__ = 29; break;
    case 34: // $99
      var $100=HEAPU32[(($col)>>2)];
      var $101=HEAPU16[((_width)>>1)];
      var $102=((($101))&65535);
      var $103=((($100))>>>0) >= ((($102))>>>0);
      if ($103) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: // $104
      var $105=HEAPU32[(($row)>>2)];
      var $106=HEAPU16[((_height)>>1)];
      var $107=((($106))&65535);
      var $108=((($105))>>>0) >= ((($107))>>>0);
      if ($108) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: // $109
      __label__ = 29; break;
    case 37: // $110
      var $111=HEAP32[(($time)>>2)];
      var $112=HEAP32[((_timestamp)>>2)];
      var $113=((($111))|0) > ((($112))|0);
      if ($113) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $114
      __label__ = 29; break;
    case 39: // $115
      $n=0;
      $tot=0;
      $rad=1;
      __label__ = 40; break;
    case 40: // $116
      var $117=$rad;
      var $118=((($117))|0) < 3;
      if ($118) { __label__ = 41; break; } else { var $123 = 0;__label__ = 42; break; }
    case 41: // $119
      var $120=$n;
      var $121=((($120))|0)==0;
      var $123 = $121;__label__ = 42; break;
    case 42: // $122
      var $123;
      if ($123) { __label__ = 43; break; } else { __label__ = 59; break; }
    case 43: // $124
      var $125=HEAP32[(($row)>>2)];
      var $126=$rad;
      var $127=((($125)-($126))|0);
      $r=$127;
      __label__ = 44; break;
    case 44: // $128
      var $129=$r;
      var $130=HEAP32[(($row)>>2)];
      var $131=$rad;
      var $132=((($130)+($131))|0);
      var $133=((($129))|0) <= ((($132))|0);
      if ($133) { __label__ = 45; break; } else { __label__ = 57; break; }
    case 45: // $134
      var $135=HEAP32[(($col)>>2)];
      var $136=$rad;
      var $137=((($135)-($136))|0);
      $c=$137;
      __label__ = 46; break;
    case 46: // $138
      var $139=$c;
      var $140=HEAP32[(($col)>>2)];
      var $141=$rad;
      var $142=((($140)+($141))|0);
      var $143=((($139))|0) <= ((($142))|0);
      if ($143) { __label__ = 47; break; } else { __label__ = 55; break; }
    case 47: // $144
      var $145=$r;
      var $146=HEAPU16[((_height)>>1)];
      var $147=((($146))&65535);
      var $148=((($145))>>>0) < ((($147))>>>0);
      if ($148) { __label__ = 48; break; } else { __label__ = 53; break; }
    case 48: // $149
      var $150=$c;
      var $151=HEAPU16[((_width)>>1)];
      var $152=((($151))&65535);
      var $153=((($150))>>>0) < ((($152))>>>0);
      if ($153) { __label__ = 49; break; } else { __label__ = 53; break; }
    case 49: // $154
      var $155=$r;
      var $156=HEAP32[(($row)>>2)];
      var $157=((($155))|0)!=((($156))|0);
      if ($157) { __label__ = 51; break; } else { __label__ = 50; break; }
    case 50: // $158
      var $159=$c;
      var $160=HEAP32[(($col)>>2)];
      var $161=((($159))|0)!=((($160))|0);
      if ($161) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: // $162
      var $163=$r;
      var $164=$c;
      var $165=_fc($163, $164);
      var $166=HEAP32[(($row)>>2)];
      var $167=HEAP32[(($col)>>2)];
      var $168=_fc($166, $167);
      var $169=((($165))|0)==((($168))|0);
      if ($169) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: // $170
      var $171=$r;
      var $172=$c;
      var $173=_fc($171, $172);
      var $174=$r;
      var $175=HEAPU16[((_shrink)>>1)];
      var $176=((($175))&65535);
      var $177=($174) >> ((($176))|0);
      var $178=HEAPU16[((_iwidth)>>1)];
      var $179=((($178))&65535);
      var $180=((($177)*($179))|0);
      var $181=$c;
      var $182=HEAPU16[((_shrink)>>1)];
      var $183=((($182))&65535);
      var $184=($181) >> ((($183))|0);
      var $185=((($180)+($184))|0);
      var $186=HEAP32[((_image)>>2)];
      var $187=(($186+($185<<3))|0);
      var $188=(($187+($173<<1))|0);
      var $189=HEAPU16[(($188)>>1)];
      var $190=((($189))&65535);
      var $191=$tot;
      var $192=((($191)+($190))|0);
      $tot=$192;
      var $193=$n;
      var $194=((($193)+1)|0);
      $n=$194;
      __label__ = 53; break;
    case 53: // $195
      __label__ = 54; break;
    case 54: // $196
      var $197=$c;
      var $198=((($197)+1)|0);
      $c=$198;
      __label__ = 46; break;
    case 55: // $199
      __label__ = 56; break;
    case 56: // $200
      var $201=$r;
      var $202=((($201)+1)|0);
      $r=$202;
      __label__ = 44; break;
    case 57: // $203
      __label__ = 58; break;
    case 58: // $204
      var $205=$rad;
      var $206=((($205)+1)|0);
      $rad=$206;
      __label__ = 40; break;
    case 59: // $207
      var $208=$tot;
      var $209=$n;
      var $210=((((($208))|0)/((($209))|0))|0);
      var $211=((($210)) & 65535);
      var $212=HEAP32[(($row)>>2)];
      var $213=HEAP32[(($col)>>2)];
      var $214=_fc($212, $213);
      var $215=HEAP32[(($row)>>2)];
      var $216=HEAPU16[((_shrink)>>1)];
      var $217=((($216))&65535);
      var $218=($215) >> ((($217))|0);
      var $219=HEAPU16[((_iwidth)>>1)];
      var $220=((($219))&65535);
      var $221=((($218)*($220))|0);
      var $222=HEAP32[(($col)>>2)];
      var $223=HEAPU16[((_shrink)>>1)];
      var $224=((($223))&65535);
      var $225=($222) >> ((($224))|0);
      var $226=((($221)+($225))|0);
      var $227=HEAP32[((_image)>>2)];
      var $228=(($227+($226<<3))|0);
      var $229=(($228+($214<<1))|0);
      HEAP16[(($229)>>1)]=$211;
      var $230=HEAP32[((_verbose)>>2)];
      var $231=((($230))|0)!=0;
      if ($231) { __label__ = 60; break; } else { __label__ = 63; break; }
    case 60: // $232
      var $233=$fixed;
      var $234=((($233)+1)|0);
      $fixed=$234;
      var $235=((($233))|0)!=0;
      if ($235) { __label__ = 62; break; } else { __label__ = 61; break; }
    case 61: // $236
      var $237=HEAP32[((__impure_ptr)>>2)];
      var $238=(($237+12)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=_fprintf($239, ((__str61)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 62; break;
    case 62: // $241
      var $242=HEAP32[((__impure_ptr)>>2)];
      var $243=(($242+12)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=HEAP32[(($col)>>2)];
      var $246=HEAP32[(($row)>>2)];
      var $247=_fprintf($244, ((__str62)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$245,HEAP32[((tempInt+4)>>2)]=$246,tempInt));
      __label__ = 63; break;
    case 63: // $248
      __label__ = 29; break;
    case 64: // $249
      var $250=$fixed;
      var $251=((($250))|0)!=0;
      if ($251) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: // $252
      var $253=HEAP32[((__impure_ptr)>>2)];
      var $254=(($253+12)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=_fputc(10, $255);
      __label__ = 66; break;
    case 66: // $257
      var $258=$fp;
      var $259=_fclose($258);
      __label__ = 67; break;
    case 67: // $260
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bad_pixels["X"]=1;

function _subtract($fname) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $fp;
      var $dim=__stackBase__;
      var $comment;
      var $number;
      var $error;
      var $nd;
      var $c;
      var $row;
      var $col;
      var $pixel;
      $1=$fname;
      var $2=$dim;
      HEAP32[(($2)>>2)]=0; HEAP32[(($2+4)>>2)]=0; HEAP32[(($2+8)>>2)]=0;
      $comment=0;
      $number=0;
      $error=0;
      $nd=0;
      var $3=$1;
      var $4=_fopen($3, ((__str63)|0));
      $fp=$4;
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $6
      var $7=$1;
      _perror($7);
      __label__ = 47; break;
    case 2: // $8
      var $9=$fp;
      var $10=_getc_unlocked($9);
      var $11=((($10))|0)!=80;
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $12
      var $13=$fp;
      var $14=_getc_unlocked($13);
      var $15=((($14))|0)!=53;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $16
      $error=1;
      __label__ = 5; break;
    case 5: // $17
      __label__ = 6; break;
    case 6: // $18
      var $19=$error;
      var $20=((($19))|0)!=0;
      if ($20) { var $29 = 0;__label__ = 9; break; } else { __label__ = 7; break; }
    case 7: // $21
      var $22=$nd;
      var $23=((($22))|0) < 3;
      if ($23) { __label__ = 8; break; } else { var $29 = 0;__label__ = 9; break; }
    case 8: // $24
      var $25=$fp;
      var $26=_getc_unlocked($25);
      $c=$26;
      var $27=((($26))|0)!=-1;
      var $29 = $27;__label__ = 9; break;
    case 9: // $28
      var $29;
      if ($29) { __label__ = 10; break; } else { __label__ = 27; break; }
    case 10: // $30
      var $31=$c;
      var $32=((($31))|0)==35;
      if ($32) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $33
      $comment=1;
      __label__ = 12; break;
    case 12: // $34
      var $35=$c;
      var $36=((($35))|0)==10;
      if ($36) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $37
      $comment=0;
      __label__ = 14; break;
    case 14: // $38
      var $39=$comment;
      var $40=((($39))|0)!=0;
      if ($40) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $41
      __label__ = 6; break;
    case 16: // $42
      var $43=$c;
      var $44=_isdigit($43);
      var $45=((($44))|0)!=0;
      if ($45) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $46
      $number=1;
      __label__ = 18; break;
    case 18: // $47
      var $48=$number;
      var $49=((($48))|0)!=0;
      if ($49) { __label__ = 19; break; } else { __label__ = 26; break; }
    case 19: // $50
      var $51=$c;
      var $52=_isdigit($51);
      var $53=((($52))|0)!=0;
      if ($53) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $54
      var $55=$nd;
      var $56=(($dim+($55<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)*10)|0);
      var $59=$c;
      var $60=((($58)+($59))|0);
      var $61=((($60)-48)|0);
      var $62=$nd;
      var $63=(($dim+($62<<2))|0);
      HEAP32[(($63)>>2)]=$61;
      __label__ = 25; break;
    case 21: // $64
      var $65=$c;
      var $66=_isspace($65);
      var $67=((($66))|0)!=0;
      if ($67) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $68
      $number=0;
      var $69=$nd;
      var $70=((($69)+1)|0);
      $nd=$70;
      __label__ = 24; break;
    case 23: // $71
      $error=1;
      __label__ = 24; break;
    case 24: // $72
      __label__ = 25; break;
    case 25: // $73
      __label__ = 26; break;
    case 26: // $74
      __label__ = 6; break;
    case 27: // $75
      var $76=$error;
      var $77=((($76))|0)!=0;
      if ($77) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: // $78
      var $79=$nd;
      var $80=((($79))|0) < 3;
      if ($80) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $81
      var $82=HEAP32[((__impure_ptr)>>2)];
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$1;
      var $86=_fprintf($84, ((__str64)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$85,tempInt));
      var $87=$fp;
      var $88=_fclose($87);
      __label__ = 47; break;
    case 30: // $89
      var $90=(($dim)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=HEAPU16[((_width)>>1)];
      var $93=((($92))&65535);
      var $94=((($91))|0)!=((($93))|0);
      if ($94) { __label__ = 33; break; } else { __label__ = 31; break; }
    case 31: // $95
      var $96=(($dim+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=HEAPU16[((_height)>>1)];
      var $99=((($98))&65535);
      var $100=((($97))|0)!=((($99))|0);
      if ($100) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: // $101
      var $102=(($dim+8)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103))|0)!=65535;
      if ($104) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $105
      var $106=HEAP32[((__impure_ptr)>>2)];
      var $107=(($106+12)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$1;
      var $110=_fprintf($108, ((__str65)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$109,tempInt));
      var $111=$fp;
      var $112=_fclose($111);
      __label__ = 47; break;
    case 34: // $113
      __label__ = 35; break;
    case 35: // $114
      var $115=HEAPU16[((_width)>>1)];
      var $116=((($115))&65535);
      var $117=_calloc($116, 2);
      var $118=$117;
      $pixel=$118;
      var $119=$pixel;
      var $120=$119;
      _merror($120, ((__str66)|0));
      $row=0;
      __label__ = 36; break;
    case 36: // $121
      var $122=$row;
      var $123=HEAPU16[((_height)>>1)];
      var $124=((($123))&65535);
      var $125=((($122))|0) < ((($124))|0);
      if ($125) { __label__ = 37; break; } else { __label__ = 46; break; }
    case 37: // $126
      var $127=$pixel;
      var $128=$127;
      var $129=HEAPU16[((_width)>>1)];
      var $130=((($129))&65535);
      var $131=$fp;
      var $132=_fread($128, 2, $130, $131);
      $col=0;
      __label__ = 38; break;
    case 38: // $133
      var $134=$col;
      var $135=HEAPU16[((_width)>>1)];
      var $136=((($135))&65535);
      var $137=((($134))|0) < ((($136))|0);
      if ($137) { __label__ = 39; break; } else { __label__ = 44; break; }
    case 39: // $138
      var $139=HEAPU32[((_filters)>>2)];
      var $140=$row;
      var $141=($140) << 1;
      var $142=($141) & 14;
      var $143=$col;
      var $144=($143) & 1;
      var $145=((($142)+($144))|0);
      var $146=($145) << 1;
      var $147=($139) >>> ((($146))>>>0);
      var $148=($147) & 3;
      var $149=$row;
      var $150=HEAPU16[((_shrink)>>1)];
      var $151=((($150))&65535);
      var $152=($149) >> ((($151))|0);
      var $153=HEAPU16[((_iwidth)>>1)];
      var $154=((($153))&65535);
      var $155=((($152)*($154))|0);
      var $156=$col;
      var $157=HEAPU16[((_shrink)>>1)];
      var $158=((($157))&65535);
      var $159=($156) >> ((($158))|0);
      var $160=((($155)+($159))|0);
      var $161=HEAP32[((_image)>>2)];
      var $162=(($161+($160<<3))|0);
      var $163=(($162+($148<<1))|0);
      var $164=HEAPU16[(($163)>>1)];
      var $165=((($164))&65535);
      var $166=$col;
      var $167=$pixel;
      var $168=(($167+($166<<1))|0);
      var $169=HEAPU16[(($168)>>1)];
      var $170=((($169))&65535);
      var $171=_ntohs($170);
      var $172=((($165)-($171))|0);
      var $173=((($172))|0) > 0;
      if ($173) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: // $174
      var $175=HEAPU32[((_filters)>>2)];
      var $176=$row;
      var $177=($176) << 1;
      var $178=($177) & 14;
      var $179=$col;
      var $180=($179) & 1;
      var $181=((($178)+($180))|0);
      var $182=($181) << 1;
      var $183=($175) >>> ((($182))>>>0);
      var $184=($183) & 3;
      var $185=$row;
      var $186=HEAPU16[((_shrink)>>1)];
      var $187=((($186))&65535);
      var $188=($185) >> ((($187))|0);
      var $189=HEAPU16[((_iwidth)>>1)];
      var $190=((($189))&65535);
      var $191=((($188)*($190))|0);
      var $192=$col;
      var $193=HEAPU16[((_shrink)>>1)];
      var $194=((($193))&65535);
      var $195=($192) >> ((($194))|0);
      var $196=((($191)+($195))|0);
      var $197=HEAP32[((_image)>>2)];
      var $198=(($197+($196<<3))|0);
      var $199=(($198+($184<<1))|0);
      var $200=HEAPU16[(($199)>>1)];
      var $201=((($200))&65535);
      var $202=$col;
      var $203=$pixel;
      var $204=(($203+($202<<1))|0);
      var $205=HEAPU16[(($204)>>1)];
      var $206=((($205))&65535);
      var $207=_ntohs($206);
      var $208=((($201)-($207))|0);
      var $211 = $208;__label__ = 42; break;
    case 41: // $209
      var $211 = 0;__label__ = 42; break;
    case 42: // $210
      var $211;
      var $212=((($211)) & 65535);
      var $213=HEAPU32[((_filters)>>2)];
      var $214=$row;
      var $215=($214) << 1;
      var $216=($215) & 14;
      var $217=$col;
      var $218=($217) & 1;
      var $219=((($216)+($218))|0);
      var $220=($219) << 1;
      var $221=($213) >>> ((($220))>>>0);
      var $222=($221) & 3;
      var $223=$row;
      var $224=HEAPU16[((_shrink)>>1)];
      var $225=((($224))&65535);
      var $226=($223) >> ((($225))|0);
      var $227=HEAPU16[((_iwidth)>>1)];
      var $228=((($227))&65535);
      var $229=((($226)*($228))|0);
      var $230=$col;
      var $231=HEAPU16[((_shrink)>>1)];
      var $232=((($231))&65535);
      var $233=($230) >> ((($232))|0);
      var $234=((($229)+($233))|0);
      var $235=HEAP32[((_image)>>2)];
      var $236=(($235+($234<<3))|0);
      var $237=(($236+($222<<1))|0);
      HEAP16[(($237)>>1)]=$212;
      __label__ = 43; break;
    case 43: // $238
      var $239=$col;
      var $240=((($239)+1)|0);
      $col=$240;
      __label__ = 38; break;
    case 44: // $241
      __label__ = 45; break;
    case 45: // $242
      var $243=$row;
      var $244=((($243)+1)|0);
      $row=$244;
      __label__ = 36; break;
    case 46: // $245
      var $246=$pixel;
      var $247=$246;
      _free($247);
      var $248=$fp;
      var $249=_fclose($248);
      _memset((_cblack), 0, 32, 1);
      HEAP32[((_black)>>2)]=0;
      __label__ = 47; break;
    case 47: // $250
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_subtract["X"]=1;

function _pseudoinverse($in, $out, $size) {
  var __stackBase__  = STACKTOP; STACKTOP += 144; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $work=__stackBase__;
      var $num;
      var $i;
      var $j;
      var $k;
      $1=$in;
      $2=$out;
      $3=$size;
      $i=0;
      __label__ = 1; break;
    case 1: // $4
      var $5=$i;
      var $6=((($5))|0) < 3;
      if ($6) { __label__ = 2; break; } else { __label__ = 16; break; }
    case 2: // $7
      $j=0;
      __label__ = 3; break;
    case 3: // $8
      var $9=$j;
      var $10=((($9))|0) < 6;
      if ($10) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $11
      var $12=$j;
      var $13=$i;
      var $14=((($13)+3)|0);
      var $15=((($12))|0)==((($14))|0);
      var $16=((($15))&1);
      var $17=((($16))|0);
      var $18=$j;
      var $19=$i;
      var $20=(($work+$19*48)|0);
      var $21=(($20+($18<<3))|0);
      (tempDoubleF64[0]=$17,HEAP32[(($21)>>2)]=tempDoubleI32[0],HEAP32[(($21+4)>>2)]=tempDoubleI32[1]);
      __label__ = 5; break;
    case 5: // $22
      var $23=$j;
      var $24=((($23)+1)|0);
      $j=$24;
      __label__ = 3; break;
    case 6: // $25
      $j=0;
      __label__ = 7; break;
    case 7: // $26
      var $27=$j;
      var $28=((($27))|0) < 3;
      if ($28) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: // $29
      $k=0;
      __label__ = 9; break;
    case 9: // $30
      var $31=$k;
      var $32=$3;
      var $33=((($31))|0) < ((($32))|0);
      if ($33) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $34
      var $35=$i;
      var $36=$k;
      var $37=$1;
      var $38=(($37+$36*24)|0);
      var $39=(($38+($35<<3))|0);
      var $40=(tempDoubleI32[0]=HEAP32[(($39)>>2)],tempDoubleI32[1]=HEAP32[(($39+4)>>2)],tempDoubleF64[0]);
      var $41=$j;
      var $42=$k;
      var $43=$1;
      var $44=(($43+$42*24)|0);
      var $45=(($44+($41<<3))|0);
      var $46=(tempDoubleI32[0]=HEAP32[(($45)>>2)],tempDoubleI32[1]=HEAP32[(($45+4)>>2)],tempDoubleF64[0]);
      var $47=($40)*($46);
      var $48=$j;
      var $49=$i;
      var $50=(($work+$49*48)|0);
      var $51=(($50+($48<<3))|0);
      var $52=(tempDoubleI32[0]=HEAP32[(($51)>>2)],tempDoubleI32[1]=HEAP32[(($51+4)>>2)],tempDoubleF64[0]);
      var $53=($52)+($47);
      (tempDoubleF64[0]=$53,HEAP32[(($51)>>2)]=tempDoubleI32[0],HEAP32[(($51+4)>>2)]=tempDoubleI32[1]);
      __label__ = 11; break;
    case 11: // $54
      var $55=$k;
      var $56=((($55)+1)|0);
      $k=$56;
      __label__ = 9; break;
    case 12: // $57
      __label__ = 13; break;
    case 13: // $58
      var $59=$j;
      var $60=((($59)+1)|0);
      $j=$60;
      __label__ = 7; break;
    case 14: // $61
      __label__ = 15; break;
    case 15: // $62
      var $63=$i;
      var $64=((($63)+1)|0);
      $i=$64;
      __label__ = 1; break;
    case 16: // $65
      $i=0;
      __label__ = 17; break;
    case 17: // $66
      var $67=$i;
      var $68=((($67))|0) < 3;
      if ($68) { __label__ = 18; break; } else { __label__ = 34; break; }
    case 18: // $69
      var $70=$i;
      var $71=$i;
      var $72=(($work+$71*48)|0);
      var $73=(($72+($70<<3))|0);
      var $74=(tempDoubleI32[0]=HEAP32[(($73)>>2)],tempDoubleI32[1]=HEAP32[(($73+4)>>2)],tempDoubleF64[0]);
      $num=$74;
      $j=0;
      __label__ = 19; break;
    case 19: // $75
      var $76=$j;
      var $77=((($76))|0) < 6;
      if ($77) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $78
      var $79=$num;
      var $80=$j;
      var $81=$i;
      var $82=(($work+$81*48)|0);
      var $83=(($82+($80<<3))|0);
      var $84=(tempDoubleI32[0]=HEAP32[(($83)>>2)],tempDoubleI32[1]=HEAP32[(($83+4)>>2)],tempDoubleF64[0]);
      var $85=($84)/($79);
      (tempDoubleF64[0]=$85,HEAP32[(($83)>>2)]=tempDoubleI32[0],HEAP32[(($83+4)>>2)]=tempDoubleI32[1]);
      __label__ = 21; break;
    case 21: // $86
      var $87=$j;
      var $88=((($87)+1)|0);
      $j=$88;
      __label__ = 19; break;
    case 22: // $89
      $k=0;
      __label__ = 23; break;
    case 23: // $90
      var $91=$k;
      var $92=((($91))|0) < 3;
      if ($92) { __label__ = 24; break; } else { __label__ = 32; break; }
    case 24: // $93
      var $94=$k;
      var $95=$i;
      var $96=((($94))|0)==((($95))|0);
      if ($96) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $97
      __label__ = 31; break;
    case 26: // $98
      var $99=$i;
      var $100=$k;
      var $101=(($work+$100*48)|0);
      var $102=(($101+($99<<3))|0);
      var $103=(tempDoubleI32[0]=HEAP32[(($102)>>2)],tempDoubleI32[1]=HEAP32[(($102+4)>>2)],tempDoubleF64[0]);
      $num=$103;
      $j=0;
      __label__ = 27; break;
    case 27: // $104
      var $105=$j;
      var $106=((($105))|0) < 6;
      if ($106) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $107
      var $108=$j;
      var $109=$i;
      var $110=(($work+$109*48)|0);
      var $111=(($110+($108<<3))|0);
      var $112=(tempDoubleI32[0]=HEAP32[(($111)>>2)],tempDoubleI32[1]=HEAP32[(($111+4)>>2)],tempDoubleF64[0]);
      var $113=$num;
      var $114=($112)*($113);
      var $115=$j;
      var $116=$k;
      var $117=(($work+$116*48)|0);
      var $118=(($117+($115<<3))|0);
      var $119=(tempDoubleI32[0]=HEAP32[(($118)>>2)],tempDoubleI32[1]=HEAP32[(($118+4)>>2)],tempDoubleF64[0]);
      var $120=($119)-($114);
      (tempDoubleF64[0]=$120,HEAP32[(($118)>>2)]=tempDoubleI32[0],HEAP32[(($118+4)>>2)]=tempDoubleI32[1]);
      __label__ = 29; break;
    case 29: // $121
      var $122=$j;
      var $123=((($122)+1)|0);
      $j=$123;
      __label__ = 27; break;
    case 30: // $124
      __label__ = 31; break;
    case 31: // $125
      var $126=$k;
      var $127=((($126)+1)|0);
      $k=$127;
      __label__ = 23; break;
    case 32: // $128
      __label__ = 33; break;
    case 33: // $129
      var $130=$i;
      var $131=((($130)+1)|0);
      $i=$131;
      __label__ = 17; break;
    case 34: // $132
      $i=0;
      __label__ = 35; break;
    case 35: // $133
      var $134=$i;
      var $135=$3;
      var $136=((($134))|0) < ((($135))|0);
      if ($136) { __label__ = 36; break; } else { __label__ = 46; break; }
    case 36: // $137
      $j=0;
      __label__ = 37; break;
    case 37: // $138
      var $139=$j;
      var $140=((($139))|0) < 3;
      if ($140) { __label__ = 38; break; } else { __label__ = 44; break; }
    case 38: // $141
      $k=0;
      var $142=$j;
      var $143=$i;
      var $144=$2;
      var $145=(($144+$143*24)|0);
      var $146=(($145+($142<<3))|0);
      (tempDoubleF64[0]=0,HEAP32[(($146)>>2)]=tempDoubleI32[0],HEAP32[(($146+4)>>2)]=tempDoubleI32[1]);
      __label__ = 39; break;
    case 39: // $147
      var $148=$k;
      var $149=((($148))|0) < 3;
      if ($149) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: // $150
      var $151=$k;
      var $152=((($151)+3)|0);
      var $153=$j;
      var $154=(($work+$153*48)|0);
      var $155=(($154+($152<<3))|0);
      var $156=(tempDoubleI32[0]=HEAP32[(($155)>>2)],tempDoubleI32[1]=HEAP32[(($155+4)>>2)],tempDoubleF64[0]);
      var $157=$k;
      var $158=$i;
      var $159=$1;
      var $160=(($159+$158*24)|0);
      var $161=(($160+($157<<3))|0);
      var $162=(tempDoubleI32[0]=HEAP32[(($161)>>2)],tempDoubleI32[1]=HEAP32[(($161+4)>>2)],tempDoubleF64[0]);
      var $163=($156)*($162);
      var $164=$j;
      var $165=$i;
      var $166=$2;
      var $167=(($166+$165*24)|0);
      var $168=(($167+($164<<3))|0);
      var $169=(tempDoubleI32[0]=HEAP32[(($168)>>2)],tempDoubleI32[1]=HEAP32[(($168+4)>>2)],tempDoubleF64[0]);
      var $170=($169)+($163);
      (tempDoubleF64[0]=$170,HEAP32[(($168)>>2)]=tempDoubleI32[0],HEAP32[(($168+4)>>2)]=tempDoubleI32[1]);
      __label__ = 41; break;
    case 41: // $171
      var $172=$k;
      var $173=((($172)+1)|0);
      $k=$173;
      __label__ = 39; break;
    case 42: // $174
      __label__ = 43; break;
    case 43: // $175
      var $176=$j;
      var $177=((($176)+1)|0);
      $j=$177;
      __label__ = 37; break;
    case 44: // $178
      __label__ = 45; break;
    case 45: // $179
      var $180=$i;
      var $181=((($180)+1)|0);
      $i=$181;
      __label__ = 35; break;
    case 46: // $182
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_pseudoinverse["X"]=1;

function _cam_xyz_coeff($cam_xyz) {
  var __stackBase__  = STACKTOP; STACKTOP += 192; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $cam_rgb=__stackBase__;
      var $inverse=__stackBase__+96;
      var $num;
      var $i;
      var $j;
      var $k;
      $1=$cam_xyz;
      $i=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=HEAP32[((_colors)>>2)];
      var $5=((($3))|0) < ((($4))|0);
      if ($5) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: // $6
      $j=0;
      __label__ = 3; break;
    case 3: // $7
      var $8=$j;
      var $9=((($8))|0) < 3;
      if ($9) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: // $10
      $k=0;
      var $11=$j;
      var $12=$i;
      var $13=(($cam_rgb+$12*24)|0);
      var $14=(($13+($11<<3))|0);
      (tempDoubleF64[0]=0,HEAP32[(($14)>>2)]=tempDoubleI32[0],HEAP32[(($14+4)>>2)]=tempDoubleI32[1]);
      __label__ = 5; break;
    case 5: // $15
      var $16=$k;
      var $17=((($16))|0) < 3;
      if ($17) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $18
      var $19=$k;
      var $20=$i;
      var $21=$1;
      var $22=(($21+$20*24)|0);
      var $23=(($22+($19<<3))|0);
      var $24=(tempDoubleI32[0]=HEAP32[(($23)>>2)],tempDoubleI32[1]=HEAP32[(($23+4)>>2)],tempDoubleF64[0]);
      var $25=$j;
      var $26=$k;
      var $27=((_xyz_rgb+$26*24)|0);
      var $28=(($27+($25<<3))|0);
      var $29=(tempDoubleI32[0]=HEAP32[(($28)>>2)],tempDoubleI32[1]=HEAP32[(($28+4)>>2)],tempDoubleF64[0]);
      var $30=($24)*($29);
      var $31=$j;
      var $32=$i;
      var $33=(($cam_rgb+$32*24)|0);
      var $34=(($33+($31<<3))|0);
      var $35=(tempDoubleI32[0]=HEAP32[(($34)>>2)],tempDoubleI32[1]=HEAP32[(($34+4)>>2)],tempDoubleF64[0]);
      var $36=($35)+($30);
      (tempDoubleF64[0]=$36,HEAP32[(($34)>>2)]=tempDoubleI32[0],HEAP32[(($34+4)>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 7: // $37
      var $38=$k;
      var $39=((($38)+1)|0);
      $k=$39;
      __label__ = 5; break;
    case 8: // $40
      __label__ = 9; break;
    case 9: // $41
      var $42=$j;
      var $43=((($42)+1)|0);
      $j=$43;
      __label__ = 3; break;
    case 10: // $44
      __label__ = 11; break;
    case 11: // $45
      var $46=$i;
      var $47=((($46)+1)|0);
      $i=$47;
      __label__ = 1; break;
    case 12: // $48
      $i=0;
      __label__ = 13; break;
    case 13: // $49
      var $50=$i;
      var $51=HEAP32[((_colors)>>2)];
      var $52=((($50))|0) < ((($51))|0);
      if ($52) { __label__ = 14; break; } else { __label__ = 24; break; }
    case 14: // $53
      $j=0;
      $num=0;
      __label__ = 15; break;
    case 15: // $54
      var $55=$j;
      var $56=((($55))|0) < 3;
      if ($56) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: // $57
      var $58=$j;
      var $59=$i;
      var $60=(($cam_rgb+$59*24)|0);
      var $61=(($60+($58<<3))|0);
      var $62=(tempDoubleI32[0]=HEAP32[(($61)>>2)],tempDoubleI32[1]=HEAP32[(($61+4)>>2)],tempDoubleF64[0]);
      var $63=$num;
      var $64=($63)+($62);
      $num=$64;
      __label__ = 17; break;
    case 17: // $65
      var $66=$j;
      var $67=((($66)+1)|0);
      $j=$67;
      __label__ = 15; break;
    case 18: // $68
      $j=0;
      __label__ = 19; break;
    case 19: // $69
      var $70=$j;
      var $71=((($70))|0) < 3;
      if ($71) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $72
      var $73=$num;
      var $74=$j;
      var $75=$i;
      var $76=(($cam_rgb+$75*24)|0);
      var $77=(($76+($74<<3))|0);
      var $78=(tempDoubleI32[0]=HEAP32[(($77)>>2)],tempDoubleI32[1]=HEAP32[(($77+4)>>2)],tempDoubleF64[0]);
      var $79=($78)/($73);
      (tempDoubleF64[0]=$79,HEAP32[(($77)>>2)]=tempDoubleI32[0],HEAP32[(($77+4)>>2)]=tempDoubleI32[1]);
      __label__ = 21; break;
    case 21: // $80
      var $81=$j;
      var $82=((($81)+1)|0);
      $j=$82;
      __label__ = 19; break;
    case 22: // $83
      var $84=$num;
      var $85=1/($84);
      var $86=($85);
      var $87=$i;
      var $88=((_pre_mul+($87<<2))|0);
      HEAPF32[(($88)>>2)]=$86;
      __label__ = 23; break;
    case 23: // $89
      var $90=$i;
      var $91=((($90)+1)|0);
      $i=$91;
      __label__ = 13; break;
    case 24: // $92
      var $93=(($cam_rgb)|0);
      var $94=(($inverse)|0);
      var $95=HEAP32[((_colors)>>2)];
      _pseudoinverse($93, $94, $95);
      $i=0;
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 25; break;
    case 25: // $96
      var $97=$i;
      var $98=((($97))|0) < 3;
      if ($98) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: // $99
      $j=0;
      __label__ = 27; break;
    case 27: // $100
      var $101=$j;
      var $102=HEAP32[((_colors)>>2)];
      var $103=((($101))|0) < ((($102))|0);
      if ($103) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $104
      var $105=$i;
      var $106=$j;
      var $107=(($inverse+$106*24)|0);
      var $108=(($107+($105<<3))|0);
      var $109=(tempDoubleI32[0]=HEAP32[(($108)>>2)],tempDoubleI32[1]=HEAP32[(($108+4)>>2)],tempDoubleF64[0]);
      var $110=($109);
      var $111=$j;
      var $112=$i;
      var $113=((_rgb_cam+($112<<4))|0);
      var $114=(($113+($111<<2))|0);
      HEAPF32[(($114)>>2)]=$110;
      __label__ = 29; break;
    case 29: // $115
      var $116=$j;
      var $117=((($116)+1)|0);
      $j=$117;
      __label__ = 27; break;
    case 30: // $118
      __label__ = 31; break;
    case 31: // $119
      var $120=$i;
      var $121=((($120)+1)|0);
      $i=$121;
      __label__ = 25; break;
    case 32: // $122
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cam_xyz_coeff["X"]=1;

function _gamma_curve($pwr, $ts, $mode, $imax) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $g=__stackBase__;
      var $bnd=__stackBase__+48;
      var $r;
      $1=$pwr;
      $2=$ts;
      $3=$mode;
      $4=$imax;
      var $5=$bnd;
      HEAP32[(($5)>>2)]=0; HEAP32[(($5+4)>>2)]=0; HEAP32[(($5+8)>>2)]=0; HEAP32[(($5+12)>>2)]=0;
      var $6=$1;
      var $7=(($g)|0);
      (tempDoubleF64[0]=$6,HEAP32[(($7)>>2)]=tempDoubleI32[0],HEAP32[(($7+4)>>2)]=tempDoubleI32[1]);
      var $8=$2;
      var $9=(($g+8)|0);
      (tempDoubleF64[0]=$8,HEAP32[(($9)>>2)]=tempDoubleI32[0],HEAP32[(($9+4)>>2)]=tempDoubleI32[1]);
      var $10=(($g+32)|0);
      (tempDoubleF64[0]=0,HEAP32[(($10)>>2)]=tempDoubleI32[0],HEAP32[(($10+4)>>2)]=tempDoubleI32[1]);
      var $11=(($g+24)|0);
      (tempDoubleF64[0]=0,HEAP32[(($11)>>2)]=tempDoubleI32[0],HEAP32[(($11+4)>>2)]=tempDoubleI32[1]);
      var $12=(($g+16)|0);
      (tempDoubleF64[0]=0,HEAP32[(($12)>>2)]=tempDoubleI32[0],HEAP32[(($12+4)>>2)]=tempDoubleI32[1]);
      var $13=(($g+8)|0);
      var $14=(tempDoubleI32[0]=HEAP32[(($13)>>2)],tempDoubleI32[1]=HEAP32[(($13+4)>>2)],tempDoubleF64[0]);
      var $15=($14) >= 1;
      var $16=((($15))&1);
      var $17=(($bnd+($16<<3))|0);
      (tempDoubleF64[0]=1,HEAP32[(($17)>>2)]=tempDoubleI32[0],HEAP32[(($17+4)>>2)]=tempDoubleI32[1]);
      var $18=(($g+8)|0);
      var $19=(tempDoubleI32[0]=HEAPU32[(($18)>>2)],tempDoubleI32[1]=HEAPU32[(($18+4)>>2)],tempDoubleF64[0]);
      var $20=($19) != 0;
      if ($20) { __label__ = 1; break; } else { __label__ = 12; break; }
    case 1: // $21
      var $22=(($g+8)|0);
      var $23=(tempDoubleI32[0]=HEAP32[(($22)>>2)],tempDoubleI32[1]=HEAP32[(($22+4)>>2)],tempDoubleF64[0]);
      var $24=($23)-1;
      var $25=(($g)|0);
      var $26=(tempDoubleI32[0]=HEAP32[(($25)>>2)],tempDoubleI32[1]=HEAP32[(($25+4)>>2)],tempDoubleF64[0]);
      var $27=($26)-1;
      var $28=($24)*($27);
      var $29=($28) <= 0;
      if ($29) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: // $30
      $i=0;
      __label__ = 3; break;
    case 3: // $31
      var $32=$i;
      var $33=((($32))|0) < 48;
      if ($33) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: // $34
      var $35=(($bnd)|0);
      var $36=(tempDoubleI32[0]=HEAP32[(($35)>>2)],tempDoubleI32[1]=HEAP32[(($35+4)>>2)],tempDoubleF64[0]);
      var $37=(($bnd+8)|0);
      var $38=(tempDoubleI32[0]=HEAP32[(($37)>>2)],tempDoubleI32[1]=HEAP32[(($37+4)>>2)],tempDoubleF64[0]);
      var $39=($36)+($38);
      var $40=($39)/2;
      var $41=(($g+16)|0);
      (tempDoubleF64[0]=$40,HEAP32[(($41)>>2)]=tempDoubleI32[0],HEAP32[(($41+4)>>2)]=tempDoubleI32[1]);
      var $42=(($g)|0);
      var $43=(tempDoubleI32[0]=HEAPU32[(($42)>>2)],tempDoubleI32[1]=HEAPU32[(($42+4)>>2)],tempDoubleF64[0]);
      var $44=($43) != 0;
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $45
      var $46=(($g+16)|0);
      var $47=(tempDoubleI32[0]=HEAP32[(($46)>>2)],tempDoubleI32[1]=HEAP32[(($46+4)>>2)],tempDoubleF64[0]);
      var $48=(($g+16)|0);
      var $49=(tempDoubleI32[0]=HEAP32[(($48)>>2)],tempDoubleI32[1]=HEAP32[(($48+4)>>2)],tempDoubleF64[0]);
      var $50=(($g+8)|0);
      var $51=(tempDoubleI32[0]=HEAP32[(($50)>>2)],tempDoubleI32[1]=HEAP32[(($50+4)>>2)],tempDoubleF64[0]);
      var $52=($49)/($51);
      var $53=(($g)|0);
      var $54=(tempDoubleI32[0]=HEAP32[(($53)>>2)],tempDoubleI32[1]=HEAP32[(($53+4)>>2)],tempDoubleF64[0]);
      var $55=(-($54));
      var $56=_llvm_pow_f64($52, $55);
      var $57=($56)-1;
      var $58=(($g)|0);
      var $59=(tempDoubleI32[0]=HEAP32[(($58)>>2)],tempDoubleI32[1]=HEAP32[(($58+4)>>2)],tempDoubleF64[0]);
      var $60=($57)/($59);
      var $61=(($g+16)|0);
      var $62=(tempDoubleI32[0]=HEAP32[(($61)>>2)],tempDoubleI32[1]=HEAP32[(($61+4)>>2)],tempDoubleF64[0]);
      var $63=1/($62);
      var $64=($60)-($63);
      var $65=($64) > -1;
      var $66=((($65))&1);
      var $67=(($bnd+($66<<3))|0);
      (tempDoubleF64[0]=$47,HEAP32[(($67)>>2)]=tempDoubleI32[0],HEAP32[(($67+4)>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 6: // $68
      var $69=(($g+16)|0);
      var $70=(tempDoubleI32[0]=HEAP32[(($69)>>2)],tempDoubleI32[1]=HEAP32[(($69+4)>>2)],tempDoubleF64[0]);
      var $71=(($g+16)|0);
      var $72=(tempDoubleI32[0]=HEAP32[(($71)>>2)],tempDoubleI32[1]=HEAP32[(($71+4)>>2)],tempDoubleF64[0]);
      var $73=(($g+16)|0);
      var $74=(tempDoubleI32[0]=HEAP32[(($73)>>2)],tempDoubleI32[1]=HEAP32[(($73+4)>>2)],tempDoubleF64[0]);
      var $75=1/($74);
      var $76=1-($75);
      var $77=_exp($76);
      var $78=($72)/($77);
      var $79=(($g+8)|0);
      var $80=(tempDoubleI32[0]=HEAP32[(($79)>>2)],tempDoubleI32[1]=HEAP32[(($79+4)>>2)],tempDoubleF64[0]);
      var $81=($78) < ($80);
      var $82=((($81))&1);
      var $83=(($bnd+($82<<3))|0);
      (tempDoubleF64[0]=$70,HEAP32[(($83)>>2)]=tempDoubleI32[0],HEAP32[(($83+4)>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 7: // $84
      __label__ = 8; break;
    case 8: // $85
      var $86=$i;
      var $87=((($86)+1)|0);
      $i=$87;
      __label__ = 3; break;
    case 9: // $88
      var $89=(($g+16)|0);
      var $90=(tempDoubleI32[0]=HEAP32[(($89)>>2)],tempDoubleI32[1]=HEAP32[(($89+4)>>2)],tempDoubleF64[0]);
      var $91=(($g+8)|0);
      var $92=(tempDoubleI32[0]=HEAP32[(($91)>>2)],tempDoubleI32[1]=HEAP32[(($91+4)>>2)],tempDoubleF64[0]);
      var $93=($90)/($92);
      var $94=(($g+24)|0);
      (tempDoubleF64[0]=$93,HEAP32[(($94)>>2)]=tempDoubleI32[0],HEAP32[(($94+4)>>2)]=tempDoubleI32[1]);
      var $95=(($g)|0);
      var $96=(tempDoubleI32[0]=HEAPU32[(($95)>>2)],tempDoubleI32[1]=HEAPU32[(($95+4)>>2)],tempDoubleF64[0]);
      var $97=($96) != 0;
      if ($97) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $98
      var $99=(($g+16)|0);
      var $100=(tempDoubleI32[0]=HEAP32[(($99)>>2)],tempDoubleI32[1]=HEAP32[(($99+4)>>2)],tempDoubleF64[0]);
      var $101=(($g)|0);
      var $102=(tempDoubleI32[0]=HEAP32[(($101)>>2)],tempDoubleI32[1]=HEAP32[(($101+4)>>2)],tempDoubleF64[0]);
      var $103=1/($102);
      var $104=($103)-1;
      var $105=($100)*($104);
      var $106=(($g+32)|0);
      (tempDoubleF64[0]=$105,HEAP32[(($106)>>2)]=tempDoubleI32[0],HEAP32[(($106+4)>>2)]=tempDoubleI32[1]);
      __label__ = 11; break;
    case 11: // $107
      __label__ = 12; break;
    case 12: // $108
      var $109=(($g)|0);
      var $110=(tempDoubleI32[0]=HEAPU32[(($109)>>2)],tempDoubleI32[1]=HEAPU32[(($109+4)>>2)],tempDoubleF64[0]);
      var $111=($110) != 0;
      if ($111) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $112
      var $113=(($g+8)|0);
      var $114=(tempDoubleI32[0]=HEAP32[(($113)>>2)],tempDoubleI32[1]=HEAP32[(($113+4)>>2)],tempDoubleF64[0]);
      var $115=(($g+24)|0);
      var $116=(tempDoubleI32[0]=HEAP32[(($115)>>2)],tempDoubleI32[1]=HEAP32[(($115+4)>>2)],tempDoubleF64[0]);
      var $117=(($g+24)|0);
      var $118=(tempDoubleI32[0]=HEAP32[(($117)>>2)],tempDoubleI32[1]=HEAP32[(($117+4)>>2)],tempDoubleF64[0]);
      var $119=($116)*($118);
      var $120=($114)*($119);
      var $121=($120)/2;
      var $122=(($g+32)|0);
      var $123=(tempDoubleI32[0]=HEAP32[(($122)>>2)],tempDoubleI32[1]=HEAP32[(($122+4)>>2)],tempDoubleF64[0]);
      var $124=(($g+24)|0);
      var $125=(tempDoubleI32[0]=HEAP32[(($124)>>2)],tempDoubleI32[1]=HEAP32[(($124+4)>>2)],tempDoubleF64[0]);
      var $126=1-($125);
      var $127=($123)*($126);
      var $128=($121)-($127);
      var $129=(($g+24)|0);
      var $130=(tempDoubleI32[0]=HEAP32[(($129)>>2)],tempDoubleI32[1]=HEAP32[(($129+4)>>2)],tempDoubleF64[0]);
      var $131=(($g)|0);
      var $132=(tempDoubleI32[0]=HEAP32[(($131)>>2)],tempDoubleI32[1]=HEAP32[(($131+4)>>2)],tempDoubleF64[0]);
      var $133=($132)+1;
      var $134=_llvm_pow_f64($130, $133);
      var $135=1-($134);
      var $136=(($g+32)|0);
      var $137=(tempDoubleI32[0]=HEAP32[(($136)>>2)],tempDoubleI32[1]=HEAP32[(($136+4)>>2)],tempDoubleF64[0]);
      var $138=($137)+1;
      var $139=($135)*($138);
      var $140=(($g)|0);
      var $141=(tempDoubleI32[0]=HEAP32[(($140)>>2)],tempDoubleI32[1]=HEAP32[(($140+4)>>2)],tempDoubleF64[0]);
      var $142=($141)+1;
      var $143=($139)/($142);
      var $144=($128)+($143);
      var $145=1/($144);
      var $146=($145)-1;
      var $147=(($g+40)|0);
      (tempDoubleF64[0]=$146,HEAP32[(($147)>>2)]=tempDoubleI32[0],HEAP32[(($147+4)>>2)]=tempDoubleI32[1]);
      __label__ = 15; break;
    case 14: // $148
      var $149=(($g+8)|0);
      var $150=(tempDoubleI32[0]=HEAP32[(($149)>>2)],tempDoubleI32[1]=HEAP32[(($149+4)>>2)],tempDoubleF64[0]);
      var $151=(($g+24)|0);
      var $152=(tempDoubleI32[0]=HEAP32[(($151)>>2)],tempDoubleI32[1]=HEAP32[(($151+4)>>2)],tempDoubleF64[0]);
      var $153=(($g+24)|0);
      var $154=(tempDoubleI32[0]=HEAP32[(($153)>>2)],tempDoubleI32[1]=HEAP32[(($153+4)>>2)],tempDoubleF64[0]);
      var $155=($152)*($154);
      var $156=($150)*($155);
      var $157=($156)/2;
      var $158=($157)+1;
      var $159=(($g+16)|0);
      var $160=(tempDoubleI32[0]=HEAP32[(($159)>>2)],tempDoubleI32[1]=HEAP32[(($159+4)>>2)],tempDoubleF64[0]);
      var $161=($158)-($160);
      var $162=(($g+24)|0);
      var $163=(tempDoubleI32[0]=HEAP32[(($162)>>2)],tempDoubleI32[1]=HEAP32[(($162+4)>>2)],tempDoubleF64[0]);
      var $164=($161)-($163);
      var $165=(($g+16)|0);
      var $166=(tempDoubleI32[0]=HEAP32[(($165)>>2)],tempDoubleI32[1]=HEAP32[(($165+4)>>2)],tempDoubleF64[0]);
      var $167=(($g+24)|0);
      var $168=(tempDoubleI32[0]=HEAP32[(($167)>>2)],tempDoubleI32[1]=HEAP32[(($167+4)>>2)],tempDoubleF64[0]);
      var $169=($166)*($168);
      var $170=(($g+24)|0);
      var $171=(tempDoubleI32[0]=HEAP32[(($170)>>2)],tempDoubleI32[1]=HEAP32[(($170+4)>>2)],tempDoubleF64[0]);
      var $172=_log($171);
      var $173=($172)-1;
      var $174=($169)*($173);
      var $175=($164)-($174);
      var $176=1/($175);
      var $177=($176)-1;
      var $178=(($g+40)|0);
      (tempDoubleF64[0]=$177,HEAP32[(($178)>>2)]=tempDoubleI32[0],HEAP32[(($178+4)>>2)]=tempDoubleI32[1]);
      __label__ = 15; break;
    case 15: // $179
      var $180=$3;
      var $181=((($180)-1)|0);
      $3=$181;
      var $182=((($180))|0)!=0;
      if ($182) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: // $183
      var $184=(($g)|0);
      var $185=$184;
      assert(48 % 1 === 0, 'memcpy given ' + 48 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy((_gamm), $185, 48, 1);
      __label__ = 38; break;
    case 17: // $186
      $i=0;
      __label__ = 18; break;
    case 18: // $187
      var $188=$i;
      var $189=((($188))|0) < 65536;
      if ($189) { __label__ = 19; break; } else { __label__ = 38; break; }
    case 19: // $190
      var $191=$i;
      var $192=((_curve+($191<<1))|0);
      HEAP16[(($192)>>1)]=-1;
      var $193=$i;
      var $194=((($193))|0);
      var $195=$4;
      var $196=((($195))|0);
      var $197=($194)/($196);
      $r=$197;
      var $198=($197) < 1;
      if ($198) { __label__ = 20; break; } else { __label__ = 36; break; }
    case 20: // $199
      var $200=$3;
      var $201=((($200))|0)!=0;
      if ($201) { __label__ = 21; break; } else { __label__ = 28; break; }
    case 21: // $202
      var $203=$r;
      var $204=(($g+24)|0);
      var $205=(tempDoubleI32[0]=HEAP32[(($204)>>2)],tempDoubleI32[1]=HEAP32[(($204+4)>>2)],tempDoubleF64[0]);
      var $206=($203) < ($205);
      if ($206) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $207
      var $208=$r;
      var $209=(($g+8)|0);
      var $210=(tempDoubleI32[0]=HEAP32[(($209)>>2)],tempDoubleI32[1]=HEAP32[(($209+4)>>2)],tempDoubleF64[0]);
      var $211=($208)*($210);
      var $238 = $211;__label__ = 27; break;
    case 23: // $212
      var $213=(($g)|0);
      var $214=(tempDoubleI32[0]=HEAPU32[(($213)>>2)],tempDoubleI32[1]=HEAPU32[(($213+4)>>2)],tempDoubleF64[0]);
      var $215=($214) != 0;
      if ($215) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $216
      var $217=$r;
      var $218=(($g)|0);
      var $219=(tempDoubleI32[0]=HEAP32[(($218)>>2)],tempDoubleI32[1]=HEAP32[(($218+4)>>2)],tempDoubleF64[0]);
      var $220=_llvm_pow_f64($217, $219);
      var $221=(($g+32)|0);
      var $222=(tempDoubleI32[0]=HEAP32[(($221)>>2)],tempDoubleI32[1]=HEAP32[(($221+4)>>2)],tempDoubleF64[0]);
      var $223=($222)+1;
      var $224=($220)*($223);
      var $225=(($g+32)|0);
      var $226=(tempDoubleI32[0]=HEAP32[(($225)>>2)],tempDoubleI32[1]=HEAP32[(($225+4)>>2)],tempDoubleF64[0]);
      var $227=($224)-($226);
      var $236 = $227;__label__ = 26; break;
    case 25: // $228
      var $229=$r;
      var $230=_log($229);
      var $231=(($g+16)|0);
      var $232=(tempDoubleI32[0]=HEAP32[(($231)>>2)],tempDoubleI32[1]=HEAP32[(($231+4)>>2)],tempDoubleF64[0]);
      var $233=($230)*($232);
      var $234=($233)+1;
      var $236 = $234;__label__ = 26; break;
    case 26: // $235
      var $236;
      var $238 = $236;__label__ = 27; break;
    case 27: // $237
      var $238;
      var $278 = $238;__label__ = 35; break;
    case 28: // $239
      var $240=$r;
      var $241=(($g+16)|0);
      var $242=(tempDoubleI32[0]=HEAP32[(($241)>>2)],tempDoubleI32[1]=HEAP32[(($241+4)>>2)],tempDoubleF64[0]);
      var $243=($240) < ($242);
      if ($243) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $244
      var $245=$r;
      var $246=(($g+8)|0);
      var $247=(tempDoubleI32[0]=HEAP32[(($246)>>2)],tempDoubleI32[1]=HEAP32[(($246+4)>>2)],tempDoubleF64[0]);
      var $248=($245)/($247);
      var $276 = $248;__label__ = 34; break;
    case 30: // $249
      var $250=(($g)|0);
      var $251=(tempDoubleI32[0]=HEAPU32[(($250)>>2)],tempDoubleI32[1]=HEAPU32[(($250+4)>>2)],tempDoubleF64[0]);
      var $252=($251) != 0;
      if ($252) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $253
      var $254=$r;
      var $255=(($g+32)|0);
      var $256=(tempDoubleI32[0]=HEAP32[(($255)>>2)],tempDoubleI32[1]=HEAP32[(($255+4)>>2)],tempDoubleF64[0]);
      var $257=($254)+($256);
      var $258=(($g+32)|0);
      var $259=(tempDoubleI32[0]=HEAP32[(($258)>>2)],tempDoubleI32[1]=HEAP32[(($258+4)>>2)],tempDoubleF64[0]);
      var $260=($259)+1;
      var $261=($257)/($260);
      var $262=(($g)|0);
      var $263=(tempDoubleI32[0]=HEAP32[(($262)>>2)],tempDoubleI32[1]=HEAP32[(($262+4)>>2)],tempDoubleF64[0]);
      var $264=1/($263);
      var $265=_llvm_pow_f64($261, $264);
      var $274 = $265;__label__ = 33; break;
    case 32: // $266
      var $267=$r;
      var $268=($267)-1;
      var $269=(($g+16)|0);
      var $270=(tempDoubleI32[0]=HEAP32[(($269)>>2)],tempDoubleI32[1]=HEAP32[(($269+4)>>2)],tempDoubleF64[0]);
      var $271=($268)/($270);
      var $272=_exp($271);
      var $274 = $272;__label__ = 33; break;
    case 33: // $273
      var $274;
      var $276 = $274;__label__ = 34; break;
    case 34: // $275
      var $276;
      var $278 = $276;__label__ = 35; break;
    case 35: // $277
      var $278;
      var $279=($278)*65536;
      var $280=(($279) >= 0 ? Math.floor(($279)) : Math.ceil(($279)));
      var $281=$i;
      var $282=((_curve+($281<<1))|0);
      HEAP16[(($282)>>1)]=$280;
      __label__ = 36; break;
    case 36: // $283
      __label__ = 37; break;
    case 37: // $284
      var $285=$i;
      var $286=((($285)+1)|0);
      $i=$286;
      __label__ = 18; break;
    case 38: // $287
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_gamma_curve["X"]=1;

function _hat_transform($temp, $base, $st, $size, $sc) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      $1=$temp;
      $2=$base;
      $3=$st;
      $4=$size;
      $5=$sc;
      $i=0;
      __label__ = 1; break;
    case 1: // $6
      var $7=$i;
      var $8=$5;
      var $9=((($7))|0) < ((($8))|0);
      if ($9) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $10
      var $11=$3;
      var $12=$i;
      var $13=((($11)*($12))|0);
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=($16)*2;
      var $18=$3;
      var $19=$5;
      var $20=$i;
      var $21=((($19)-($20))|0);
      var $22=((($18)*($21))|0);
      var $23=$2;
      var $24=(($23+($22<<2))|0);
      var $25=HEAPF32[(($24)>>2)];
      var $26=($17)+($25);
      var $27=$3;
      var $28=$i;
      var $29=$5;
      var $30=((($28)+($29))|0);
      var $31=((($27)*($30))|0);
      var $32=$2;
      var $33=(($32+($31<<2))|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=($26)+($34);
      var $36=$i;
      var $37=$1;
      var $38=(($37+($36<<2))|0);
      HEAPF32[(($38)>>2)]=$35;
      __label__ = 3; break;
    case 3: // $39
      var $40=$i;
      var $41=((($40)+1)|0);
      $i=$41;
      __label__ = 1; break;
    case 4: // $42
      __label__ = 5; break;
    case 5: // $43
      var $44=$i;
      var $45=$5;
      var $46=((($44)+($45))|0);
      var $47=$4;
      var $48=((($46))|0) < ((($47))|0);
      if ($48) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $49
      var $50=$3;
      var $51=$i;
      var $52=((($50)*($51))|0);
      var $53=$2;
      var $54=(($53+($52<<2))|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=($55)*2;
      var $57=$3;
      var $58=$i;
      var $59=$5;
      var $60=((($58)-($59))|0);
      var $61=((($57)*($60))|0);
      var $62=$2;
      var $63=(($62+($61<<2))|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=($56)+($64);
      var $66=$3;
      var $67=$i;
      var $68=$5;
      var $69=((($67)+($68))|0);
      var $70=((($66)*($69))|0);
      var $71=$2;
      var $72=(($71+($70<<2))|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=($65)+($73);
      var $75=$i;
      var $76=$1;
      var $77=(($76+($75<<2))|0);
      HEAPF32[(($77)>>2)]=$74;
      __label__ = 7; break;
    case 7: // $78
      var $79=$i;
      var $80=((($79)+1)|0);
      $i=$80;
      __label__ = 5; break;
    case 8: // $81
      __label__ = 9; break;
    case 9: // $82
      var $83=$i;
      var $84=$4;
      var $85=((($83))|0) < ((($84))|0);
      if ($85) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $86
      var $87=$3;
      var $88=$i;
      var $89=((($87)*($88))|0);
      var $90=$2;
      var $91=(($90+($89<<2))|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=($92)*2;
      var $94=$3;
      var $95=$i;
      var $96=$5;
      var $97=((($95)-($96))|0);
      var $98=((($94)*($97))|0);
      var $99=$2;
      var $100=(($99+($98<<2))|0);
      var $101=HEAPF32[(($100)>>2)];
      var $102=($93)+($101);
      var $103=$3;
      var $104=$4;
      var $105=(((($104)<<1))|0);
      var $106=((($105)-2)|0);
      var $107=$i;
      var $108=$5;
      var $109=((($107)+($108))|0);
      var $110=((($106)-($109))|0);
      var $111=((($103)*($110))|0);
      var $112=$2;
      var $113=(($112+($111<<2))|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=($102)+($114);
      var $116=$i;
      var $117=$1;
      var $118=(($117+($116<<2))|0);
      HEAPF32[(($118)>>2)]=$115;
      __label__ = 11; break;
    case 11: // $119
      var $120=$i;
      var $121=((($120)+1)|0);
      $i=$121;
      __label__ = 9; break;
    case 12: // $122
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_hat_transform["X"]=1;

function _wavelet_denoise() {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $fimg;
      var $temp;
      var $thold;
      var $mul=__stackBase__;
      var $avg;
      var $diff;
      var $scale;
      var $size;
      var $lev;
      var $hpass;
      var $lpass;
      var $row;
      var $col;
      var $nc;
      var $c;
      var $i;
      var $wlast;
      var $blk=__stackBase__+8;
      var $window=__stackBase__+16;
      $fimg=0;
      $scale=1;
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str67)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      __label__ = 3; break;
    case 3: // $9
      var $10=HEAP32[((_maximum)>>2)];
      var $11=$scale;
      var $12=($10) << ($11);
      var $13=((($12))>>>0) < 65536;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $14
      var $15=$scale;
      var $16=((($15)+1)|0);
      $scale=$16;
      __label__ = 3; break;
    case 5: // $17
      var $18=$scale;
      var $19=((($18)-1)|0);
      $scale=$19;
      var $20=HEAP32[((_maximum)>>2)];
      var $21=($20) << ($19);
      HEAP32[((_maximum)>>2)]=$21;
      var $22=$scale;
      var $23=HEAP32[((_black)>>2)];
      var $24=($23) << ($22);
      HEAP32[((_black)>>2)]=$24;
      $c=0;
      __label__ = 6; break;
    case 6: // $25
      var $26=$c;
      var $27=((($26))|0) < 4;
      if ($27) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: // $28
      var $29=$scale;
      var $30=$c;
      var $31=((_cblack+($30<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=($32) << ($29);
      HEAP32[(($31)>>2)]=$33;
      __label__ = 8; break;
    case 8: // $34
      var $35=$c;
      var $36=((($35)+1)|0);
      $c=$36;
      __label__ = 6; break;
    case 9: // $37
      var $38=HEAPU16[((_iheight)>>1)];
      var $39=((($38))&65535);
      var $40=HEAPU16[((_iwidth)>>1)];
      var $41=((($40))&65535);
      var $42=((($39)*($41))|0);
      $size=$42;
      var $43=((($42))|0) < 357892096;
      if ($43) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $44
      var $45=$size;
      var $46=((($45)*3)|0);
      var $47=HEAPU16[((_iheight)>>1)];
      var $48=((($47))&65535);
      var $49=((($46)+($48))|0);
      var $50=HEAPU16[((_iwidth)>>1)];
      var $51=((($50))&65535);
      var $52=((($49)+($51))|0);
      var $53=(((($52)<<2))|0);
      var $54=_malloc($53);
      var $55=$54;
      $fimg=$55;
      __label__ = 11; break;
    case 11: // $56
      var $57=$fimg;
      var $58=$57;
      _merror($58, ((__str68)|0));
      var $59=$fimg;
      var $60=$size;
      var $61=((($60)*3)|0);
      var $62=(($59+($61<<2))|0);
      $temp=$62;
      var $63=HEAP32[((_colors)>>2)];
      $nc=$63;
      var $64=((($63))|0)==3;
      if ($64) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $65
      var $66=HEAP32[((_filters)>>2)];
      var $67=((($66))|0)!=0;
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $68
      var $69=$nc;
      var $70=((($69)+1)|0);
      $nc=$70;
      __label__ = 14; break;
    case 14: // $71
      $c=0;
      __label__ = 15; break;
    case 15: // $72
      var $73=$c;
      var $74=$nc;
      var $75=((($73))|0) < ((($74))|0);
      if ($75) { __label__ = 16; break; } else { __label__ = 67; break; }
    case 16: // $76
      $i=0;
      __label__ = 17; break;
    case 17: // $77
      var $78=$i;
      var $79=$size;
      var $80=((($78))|0) < ((($79))|0);
      if ($80) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $81
      var $82=$c;
      var $83=$i;
      var $84=HEAP32[((_image)>>2)];
      var $85=(($84+($83<<3))|0);
      var $86=(($85+($82<<1))|0);
      var $87=HEAPU16[(($86)>>1)];
      var $88=((($87))&65535);
      var $89=$scale;
      var $90=($88) << ($89);
      var $91=((($90))|0);
      var $92=_sqrt($91);
      var $93=($92)*256;
      var $94=($93);
      var $95=$i;
      var $96=$fimg;
      var $97=(($96+($95<<2))|0);
      HEAPF32[(($97)>>2)]=$94;
      __label__ = 19; break;
    case 19: // $98
      var $99=$i;
      var $100=((($99)+1)|0);
      $i=$100;
      __label__ = 17; break;
    case 20: // $101
      $lev=0;
      $hpass=0;
      __label__ = 21; break;
    case 21: // $102
      var $103=$lev;
      var $104=((($103))|0) < 5;
      if ($104) { __label__ = 22; break; } else { __label__ = 52; break; }
    case 22: // $105
      var $106=$size;
      var $107=$lev;
      var $108=($107) & 1;
      var $109=((($108)+1)|0);
      var $110=((($106)*($109))|0);
      $lpass=$110;
      $row=0;
      __label__ = 23; break;
    case 23: // $111
      var $112=$row;
      var $113=HEAPU16[((_iheight)>>1)];
      var $114=((($113))&65535);
      var $115=((($112))|0) < ((($114))|0);
      if ($115) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: // $116
      var $117=$temp;
      var $118=$fimg;
      var $119=$hpass;
      var $120=(($118+($119<<2))|0);
      var $121=$row;
      var $122=HEAPU16[((_iwidth)>>1)];
      var $123=((($122))&65535);
      var $124=((($121)*($123))|0);
      var $125=(($120+($124<<2))|0);
      var $126=HEAPU16[((_iwidth)>>1)];
      var $127=((($126))&65535);
      var $128=$lev;
      var $129=1 << ($128);
      _hat_transform($117, $125, 1, $127, $129);
      $col=0;
      __label__ = 25; break;
    case 25: // $130
      var $131=$col;
      var $132=HEAPU16[((_iwidth)>>1)];
      var $133=((($132))&65535);
      var $134=((($131))|0) < ((($133))|0);
      if ($134) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: // $135
      var $136=$col;
      var $137=$temp;
      var $138=(($137+($136<<2))|0);
      var $139=HEAPF32[(($138)>>2)];
      var $140=($139);
      var $141=($140)*0.25;
      var $142=($141);
      var $143=$lpass;
      var $144=$row;
      var $145=HEAPU16[((_iwidth)>>1)];
      var $146=((($145))&65535);
      var $147=((($144)*($146))|0);
      var $148=((($143)+($147))|0);
      var $149=$col;
      var $150=((($148)+($149))|0);
      var $151=$fimg;
      var $152=(($151+($150<<2))|0);
      HEAPF32[(($152)>>2)]=$142;
      __label__ = 27; break;
    case 27: // $153
      var $154=$col;
      var $155=((($154)+1)|0);
      $col=$155;
      __label__ = 25; break;
    case 28: // $156
      __label__ = 29; break;
    case 29: // $157
      var $158=$row;
      var $159=((($158)+1)|0);
      $row=$159;
      __label__ = 23; break;
    case 30: // $160
      $col=0;
      __label__ = 31; break;
    case 31: // $161
      var $162=$col;
      var $163=HEAPU16[((_iwidth)>>1)];
      var $164=((($163))&65535);
      var $165=((($162))|0) < ((($164))|0);
      if ($165) { __label__ = 32; break; } else { __label__ = 38; break; }
    case 32: // $166
      var $167=$temp;
      var $168=$fimg;
      var $169=$lpass;
      var $170=(($168+($169<<2))|0);
      var $171=$col;
      var $172=(($170+($171<<2))|0);
      var $173=HEAPU16[((_iwidth)>>1)];
      var $174=((($173))&65535);
      var $175=HEAPU16[((_iheight)>>1)];
      var $176=((($175))&65535);
      var $177=$lev;
      var $178=1 << ($177);
      _hat_transform($167, $172, $174, $176, $178);
      $row=0;
      __label__ = 33; break;
    case 33: // $179
      var $180=$row;
      var $181=HEAPU16[((_iheight)>>1)];
      var $182=((($181))&65535);
      var $183=((($180))|0) < ((($182))|0);
      if ($183) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: // $184
      var $185=$row;
      var $186=$temp;
      var $187=(($186+($185<<2))|0);
      var $188=HEAPF32[(($187)>>2)];
      var $189=($188);
      var $190=($189)*0.25;
      var $191=($190);
      var $192=$lpass;
      var $193=$row;
      var $194=HEAPU16[((_iwidth)>>1)];
      var $195=((($194))&65535);
      var $196=((($193)*($195))|0);
      var $197=((($192)+($196))|0);
      var $198=$col;
      var $199=((($197)+($198))|0);
      var $200=$fimg;
      var $201=(($200+($199<<2))|0);
      HEAPF32[(($201)>>2)]=$191;
      __label__ = 35; break;
    case 35: // $202
      var $203=$row;
      var $204=((($203)+1)|0);
      $row=$204;
      __label__ = 33; break;
    case 36: // $205
      __label__ = 37; break;
    case 37: // $206
      var $207=$col;
      var $208=((($207)+1)|0);
      $col=$208;
      __label__ = 31; break;
    case 38: // $209
      var $210=HEAPF32[((_threshold)>>2)];
      var $211=$lev;
      var $212=((_wavelet_denoise_noise+($211<<2))|0);
      var $213=HEAPF32[(($212)>>2)];
      var $214=($210)*($213);
      $thold=$214;
      $i=0;
      __label__ = 39; break;
    case 39: // $215
      var $216=$i;
      var $217=$size;
      var $218=((($216))|0) < ((($217))|0);
      if ($218) { __label__ = 40; break; } else { __label__ = 50; break; }
    case 40: // $219
      var $220=$lpass;
      var $221=$i;
      var $222=((($220)+($221))|0);
      var $223=$fimg;
      var $224=(($223+($222<<2))|0);
      var $225=HEAPF32[(($224)>>2)];
      var $226=$hpass;
      var $227=$i;
      var $228=((($226)+($227))|0);
      var $229=$fimg;
      var $230=(($229+($228<<2))|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=($231)-($225);
      HEAPF32[(($230)>>2)]=$232;
      var $233=$hpass;
      var $234=$i;
      var $235=((($233)+($234))|0);
      var $236=$fimg;
      var $237=(($236+($235<<2))|0);
      var $238=HEAPF32[(($237)>>2)];
      var $239=$thold;
      var $240=(-($239));
      var $241=($238) < ($240);
      if ($241) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $242
      var $243=$thold;
      var $244=$hpass;
      var $245=$i;
      var $246=((($244)+($245))|0);
      var $247=$fimg;
      var $248=(($247+($246<<2))|0);
      var $249=HEAPF32[(($248)>>2)];
      var $250=($249)+($243);
      HEAPF32[(($248)>>2)]=$250;
      __label__ = 46; break;
    case 42: // $251
      var $252=$hpass;
      var $253=$i;
      var $254=((($252)+($253))|0);
      var $255=$fimg;
      var $256=(($255+($254<<2))|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=$thold;
      var $259=($257) > ($258);
      if ($259) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: // $260
      var $261=$thold;
      var $262=$hpass;
      var $263=$i;
      var $264=((($262)+($263))|0);
      var $265=$fimg;
      var $266=(($265+($264<<2))|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=($267)-($261);
      HEAPF32[(($266)>>2)]=$268;
      __label__ = 45; break;
    case 44: // $269
      var $270=$hpass;
      var $271=$i;
      var $272=((($270)+($271))|0);
      var $273=$fimg;
      var $274=(($273+($272<<2))|0);
      HEAPF32[(($274)>>2)]=0;
      __label__ = 45; break;
    case 45: // $275
      __label__ = 46; break;
    case 46: // $276
      var $277=$hpass;
      var $278=((($277))|0)!=0;
      if ($278) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: // $279
      var $280=$hpass;
      var $281=$i;
      var $282=((($280)+($281))|0);
      var $283=$fimg;
      var $284=(($283+($282<<2))|0);
      var $285=HEAPF32[(($284)>>2)];
      var $286=$i;
      var $287=$fimg;
      var $288=(($287+($286<<2))|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=($289)+($285);
      HEAPF32[(($288)>>2)]=$290;
      __label__ = 48; break;
    case 48: // $291
      __label__ = 49; break;
    case 49: // $292
      var $293=$i;
      var $294=((($293)+1)|0);
      $i=$294;
      __label__ = 39; break;
    case 50: // $295
      var $296=$lpass;
      $hpass=$296;
      __label__ = 51; break;
    case 51: // $297
      var $298=$lev;
      var $299=((($298)+1)|0);
      $lev=$299;
      __label__ = 21; break;
    case 52: // $300
      $i=0;
      __label__ = 53; break;
    case 53: // $301
      var $302=$i;
      var $303=$size;
      var $304=((($302))|0) < ((($303))|0);
      if ($304) { __label__ = 54; break; } else { __label__ = 65; break; }
    case 54: // $305
      var $306=$i;
      var $307=$fimg;
      var $308=(($307+($306<<2))|0);
      var $309=HEAPF32[(($308)>>2)];
      var $310=$lpass;
      var $311=$i;
      var $312=((($310)+($311))|0);
      var $313=$fimg;
      var $314=(($313+($312<<2))|0);
      var $315=HEAPF32[(($314)>>2)];
      var $316=($309)+($315);
      var $317=$i;
      var $318=$fimg;
      var $319=(($318+($317<<2))|0);
      var $320=HEAPF32[(($319)>>2)];
      var $321=$lpass;
      var $322=$i;
      var $323=((($321)+($322))|0);
      var $324=$fimg;
      var $325=(($324+($323<<2))|0);
      var $326=HEAPF32[(($325)>>2)];
      var $327=($320)+($326);
      var $328=($316)*($327);
      var $329=($328)/65536;
      var $330=($329) < 65535;
      if ($330) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: // $331
      var $332=$i;
      var $333=$fimg;
      var $334=(($333+($332<<2))|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=$lpass;
      var $337=$i;
      var $338=((($336)+($337))|0);
      var $339=$fimg;
      var $340=(($339+($338<<2))|0);
      var $341=HEAPF32[(($340)>>2)];
      var $342=($335)+($341);
      var $343=$i;
      var $344=$fimg;
      var $345=(($344+($343<<2))|0);
      var $346=HEAPF32[(($345)>>2)];
      var $347=$lpass;
      var $348=$i;
      var $349=((($347)+($348))|0);
      var $350=$fimg;
      var $351=(($350+($349<<2))|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=($346)+($352);
      var $354=($342)*($353);
      var $355=($354)/65536;
      var $358 = $355;__label__ = 57; break;
    case 56: // $356
      var $358 = 65535;__label__ = 57; break;
    case 57: // $357
      var $358;
      var $359=0 > ($358);
      if ($359) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: // $360
      var $416 = 0;__label__ = 63; break;
    case 59: // $361
      var $362=$i;
      var $363=$fimg;
      var $364=(($363+($362<<2))|0);
      var $365=HEAPF32[(($364)>>2)];
      var $366=$lpass;
      var $367=$i;
      var $368=((($366)+($367))|0);
      var $369=$fimg;
      var $370=(($369+($368<<2))|0);
      var $371=HEAPF32[(($370)>>2)];
      var $372=($365)+($371);
      var $373=$i;
      var $374=$fimg;
      var $375=(($374+($373<<2))|0);
      var $376=HEAPF32[(($375)>>2)];
      var $377=$lpass;
      var $378=$i;
      var $379=((($377)+($378))|0);
      var $380=$fimg;
      var $381=(($380+($379<<2))|0);
      var $382=HEAPF32[(($381)>>2)];
      var $383=($376)+($382);
      var $384=($372)*($383);
      var $385=($384)/65536;
      var $386=($385) < 65535;
      if ($386) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: // $387
      var $388=$i;
      var $389=$fimg;
      var $390=(($389+($388<<2))|0);
      var $391=HEAPF32[(($390)>>2)];
      var $392=$lpass;
      var $393=$i;
      var $394=((($392)+($393))|0);
      var $395=$fimg;
      var $396=(($395+($394<<2))|0);
      var $397=HEAPF32[(($396)>>2)];
      var $398=($391)+($397);
      var $399=$i;
      var $400=$fimg;
      var $401=(($400+($399<<2))|0);
      var $402=HEAPF32[(($401)>>2)];
      var $403=$lpass;
      var $404=$i;
      var $405=((($403)+($404))|0);
      var $406=$fimg;
      var $407=(($406+($405<<2))|0);
      var $408=HEAPF32[(($407)>>2)];
      var $409=($402)+($408);
      var $410=($398)*($409);
      var $411=($410)/65536;
      var $414 = $411;__label__ = 62; break;
    case 61: // $412
      var $414 = 65535;__label__ = 62; break;
    case 62: // $413
      var $414;
      var $416 = $414;__label__ = 63; break;
    case 63: // $415
      var $416;
      var $417=(($416) >= 0 ? Math.floor(($416)) : Math.ceil(($416)));
      var $418=$c;
      var $419=$i;
      var $420=HEAP32[((_image)>>2)];
      var $421=(($420+($419<<3))|0);
      var $422=(($421+($418<<1))|0);
      HEAP16[(($422)>>1)]=$417;
      __label__ = 64; break;
    case 64: // $423
      var $424=$i;
      var $425=((($424)+1)|0);
      $i=$425;
      __label__ = 53; break;
    case 65: // $426
      __label__ = 66; break;
    case 66: // $427
      var $428=$c;
      var $429=((($428)+1)|0);
      $c=$429;
      __label__ = 15; break;
    case 67: // $430
      var $431=HEAP32[((_filters)>>2)];
      var $432=((($431))|0)!=0;
      if ($432) { __label__ = 68; break; } else { __label__ = 115; break; }
    case 68: // $433
      var $434=HEAP32[((_colors)>>2)];
      var $435=((($434))|0)==3;
      if ($435) { __label__ = 69; break; } else { __label__ = 115; break; }
    case 69: // $436
      $row=0;
      __label__ = 70; break;
    case 70: // $437
      var $438=$row;
      var $439=((($438))|0) < 2;
      if ($439) { __label__ = 71; break; } else { __label__ = 73; break; }
    case 71: // $440
      var $441=HEAPU32[((_filters)>>2)];
      var $442=$row;
      var $443=((($442)+1)|0);
      var $444=($443) << 1;
      var $445=($444) & 14;
      var $446=((($445))|0);
      var $447=($446) << 1;
      var $448=($441) >>> ((($447))>>>0);
      var $449=($448) & 3;
      var $450=($449) | 1;
      var $451=((_pre_mul+($450<<2))|0);
      var $452=HEAPF32[(($451)>>2)];
      var $453=($452);
      var $454=($453)*0.125;
      var $455=HEAPU32[((_filters)>>2)];
      var $456=$row;
      var $457=($456) << 1;
      var $458=($457) & 14;
      var $459=((($458))|0);
      var $460=($459) << 1;
      var $461=($455) >>> ((($460))>>>0);
      var $462=($461) & 3;
      var $463=($462) | 1;
      var $464=((_pre_mul+($463<<2))|0);
      var $465=HEAPF32[(($464)>>2)];
      var $466=($465);
      var $467=($454)/($466);
      var $468=($467);
      var $469=$row;
      var $470=(($mul+($469<<2))|0);
      HEAPF32[(($470)>>2)]=$468;
      var $471=HEAPU32[((_filters)>>2)];
      var $472=$row;
      var $473=($472) << 1;
      var $474=($473) & 14;
      var $475=((($474))|0);
      var $476=($475) << 1;
      var $477=($471) >>> ((($476))>>>0);
      var $478=($477) & 3;
      var $479=($478) | 1;
      var $480=((_cblack+($479<<2))|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=$row;
      var $483=(($blk+($482<<2))|0);
      HEAP32[(($483)>>2)]=$481;
      __label__ = 72; break;
    case 72: // $484
      var $485=$row;
      var $486=((($485)+1)|0);
      $row=$486;
      __label__ = 70; break;
    case 73: // $487
      $i=0;
      __label__ = 74; break;
    case 74: // $488
      var $489=$i;
      var $490=((($489))|0) < 4;
      if ($490) { __label__ = 75; break; } else { __label__ = 77; break; }
    case 75: // $491
      var $492=$fimg;
      var $493=$492;
      var $494=HEAPU16[((_width)>>1)];
      var $495=((($494))&65535);
      var $496=$i;
      var $497=((($495)*($496))|0);
      var $498=(($493+($497<<1))|0);
      var $499=$i;
      var $500=(($window+($499<<2))|0);
      HEAP32[(($500)>>2)]=$498;
      __label__ = 76; break;
    case 76: // $501
      var $502=$i;
      var $503=((($502)+1)|0);
      $i=$503;
      __label__ = 74; break;
    case 77: // $504
      $wlast=-1;
      $row=1;
      __label__ = 78; break;
    case 78: // $505
      var $506=$row;
      var $507=HEAPU16[((_height)>>1)];
      var $508=((($507))&65535);
      var $509=((($508)-1)|0);
      var $510=((($506))|0) < ((($509))|0);
      if ($510) { __label__ = 79; break; } else { __label__ = 114; break; }
    case 79: // $511
      __label__ = 80; break;
    case 80: // $512
      var $513=$wlast;
      var $514=$row;
      var $515=((($514)+1)|0);
      var $516=((($513))|0) < ((($515))|0);
      if ($516) { __label__ = 81; break; } else { __label__ = 90; break; }
    case 81: // $517
      var $518=$wlast;
      var $519=((($518)+1)|0);
      $wlast=$519;
      $i=0;
      __label__ = 82; break;
    case 82: // $520
      var $521=$i;
      var $522=((($521))|0) < 4;
      if ($522) { __label__ = 83; break; } else { __label__ = 85; break; }
    case 83: // $523
      var $524=$i;
      var $525=(($window+($524<<2))|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=$i;
      var $528=((($527)+3)|0);
      var $529=($528) & 3;
      var $530=(($window+($529<<2))|0);
      HEAP32[(($530)>>2)]=$526;
      __label__ = 84; break;
    case 84: // $531
      var $532=$i;
      var $533=((($532)+1)|0);
      $i=$533;
      __label__ = 82; break;
    case 85: // $534
      var $535=HEAPU32[((_filters)>>2)];
      var $536=$wlast;
      var $537=($536) << 1;
      var $538=($537) & 14;
      var $539=((($538)+1)|0);
      var $540=($539) << 1;
      var $541=($535) >>> ((($540))>>>0);
      var $542=($541) & 3;
      var $543=($542) & 1;
      $col=$543;
      __label__ = 86; break;
    case 86: // $544
      var $545=$col;
      var $546=HEAPU16[((_width)>>1)];
      var $547=((($546))&65535);
      var $548=((($545))|0) < ((($547))|0);
      if ($548) { __label__ = 87; break; } else { __label__ = 89; break; }
    case 87: // $549
      var $550=HEAPU32[((_filters)>>2)];
      var $551=$wlast;
      var $552=($551) << 1;
      var $553=($552) & 14;
      var $554=$col;
      var $555=($554) & 1;
      var $556=((($553)+($555))|0);
      var $557=($556) << 1;
      var $558=($550) >>> ((($557))>>>0);
      var $559=($558) & 3;
      var $560=$wlast;
      var $561=HEAPU16[((_shrink)>>1)];
      var $562=((($561))&65535);
      var $563=($560) >> ((($562))|0);
      var $564=HEAPU16[((_iwidth)>>1)];
      var $565=((($564))&65535);
      var $566=((($563)*($565))|0);
      var $567=$col;
      var $568=HEAPU16[((_shrink)>>1)];
      var $569=((($568))&65535);
      var $570=($567) >> ((($569))|0);
      var $571=((($566)+($570))|0);
      var $572=HEAP32[((_image)>>2)];
      var $573=(($572+($571<<3))|0);
      var $574=(($573+($559<<1))|0);
      var $575=HEAP16[(($574)>>1)];
      var $576=$col;
      var $577=(($window+8)|0);
      var $578=HEAP32[(($577)>>2)];
      var $579=(($578+($576<<1))|0);
      HEAP16[(($579)>>1)]=$575;
      __label__ = 88; break;
    case 88: // $580
      var $581=$col;
      var $582=((($581)+2)|0);
      $col=$582;
      __label__ = 86; break;
    case 89: // $583
      __label__ = 80; break;
    case 90: // $584
      var $585=HEAPF32[((_threshold)>>2)];
      var $586=($585)/512;
      $thold=$586;
      var $587=HEAPU32[((_filters)>>2)];
      var $588=$row;
      var $589=($588) << 1;
      var $590=($589) & 14;
      var $591=((($590))|0);
      var $592=($591) << 1;
      var $593=($587) >>> ((($592))>>>0);
      var $594=($593) & 3;
      var $595=($594) & 1;
      var $596=((($595)+1)|0);
      $col=$596;
      __label__ = 91; break;
    case 91: // $597
      var $598=$col;
      var $599=HEAPU16[((_width)>>1)];
      var $600=((($599))&65535);
      var $601=((($600)-1)|0);
      var $602=((($598))|0) < ((($601))|0);
      if ($602) { __label__ = 92; break; } else { __label__ = 112; break; }
    case 92: // $603
      var $604=$col;
      var $605=((($604)-1)|0);
      var $606=(($window)|0);
      var $607=HEAP32[(($606)>>2)];
      var $608=(($607+($605<<1))|0);
      var $609=HEAPU16[(($608)>>1)];
      var $610=((($609))&65535);
      var $611=$col;
      var $612=((($611)+1)|0);
      var $613=(($window)|0);
      var $614=HEAP32[(($613)>>2)];
      var $615=(($614+($612<<1))|0);
      var $616=HEAPU16[(($615)>>1)];
      var $617=((($616))&65535);
      var $618=((($610)+($617))|0);
      var $619=$col;
      var $620=((($619)-1)|0);
      var $621=(($window+8)|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=(($622+($620<<1))|0);
      var $624=HEAPU16[(($623)>>1)];
      var $625=((($624))&65535);
      var $626=((($618)+($625))|0);
      var $627=$col;
      var $628=((($627)+1)|0);
      var $629=(($window+8)|0);
      var $630=HEAP32[(($629)>>2)];
      var $631=(($630+($628<<1))|0);
      var $632=HEAPU16[(($631)>>1)];
      var $633=((($632))&65535);
      var $634=((($626)+($633))|0);
      var $635=$row;
      var $636=($635) ^ -1;
      var $637=($636) & 1;
      var $638=(($blk+($637<<2))|0);
      var $639=HEAP32[(($638)>>2)];
      var $640=(((($639)<<2))|0);
      var $641=((($634)-($640))|0);
      var $642=((($641))|0);
      var $643=$row;
      var $644=($643) & 1;
      var $645=(($mul+($644<<2))|0);
      var $646=HEAPF32[(($645)>>2)];
      var $647=($642)*($646);
      var $648=($647);
      var $649=$col;
      var $650=(($window+4)|0);
      var $651=HEAP32[(($650)>>2)];
      var $652=(($651+($649<<1))|0);
      var $653=HEAPU16[(($652)>>1)];
      var $654=((($653))&65535);
      var $655=$row;
      var $656=($655) & 1;
      var $657=(($blk+($656<<2))|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=((($654)+($658))|0);
      var $660=((($659))|0);
      var $661=($660)*0.5;
      var $662=($648)+($661);
      var $663=($662);
      $avg=$663;
      var $664=$avg;
      var $665=($664) < 0;
      if ($665) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: // $666
      var $672 = 0;__label__ = 95; break;
    case 94: // $667
      var $668=$avg;
      var $669=($668);
      var $670=_sqrt($669);
      var $672 = $670;__label__ = 95; break;
    case 95: // $671
      var $672;
      var $673=($672);
      $avg=$673;
      var $674=HEAPU32[((_filters)>>2)];
      var $675=$row;
      var $676=($675) << 1;
      var $677=($676) & 14;
      var $678=$col;
      var $679=($678) & 1;
      var $680=((($677)+($679))|0);
      var $681=($680) << 1;
      var $682=($674) >>> ((($681))>>>0);
      var $683=($682) & 3;
      var $684=$row;
      var $685=HEAPU16[((_shrink)>>1)];
      var $686=((($685))&65535);
      var $687=($684) >> ((($686))|0);
      var $688=HEAPU16[((_iwidth)>>1)];
      var $689=((($688))&65535);
      var $690=((($687)*($689))|0);
      var $691=$col;
      var $692=HEAPU16[((_shrink)>>1)];
      var $693=((($692))&65535);
      var $694=($691) >> ((($693))|0);
      var $695=((($690)+($694))|0);
      var $696=HEAP32[((_image)>>2)];
      var $697=(($696+($695<<3))|0);
      var $698=(($697+($683<<1))|0);
      var $699=HEAPU16[(($698)>>1)];
      var $700=((($699))&65535);
      var $701=_sqrt($700);
      var $702=$avg;
      var $703=($702);
      var $704=($701)-($703);
      var $705=($704);
      $diff=$705;
      var $706=$diff;
      var $707=$thold;
      var $708=(-($707));
      var $709=($706) < ($708);
      if ($709) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: // $710
      var $711=$thold;
      var $712=$diff;
      var $713=($712)+($711);
      $diff=$713;
      __label__ = 101; break;
    case 97: // $714
      var $715=$diff;
      var $716=$thold;
      var $717=($715) > ($716);
      if ($717) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: // $718
      var $719=$thold;
      var $720=$diff;
      var $721=($720)-($719);
      $diff=$721;
      __label__ = 100; break;
    case 99: // $722
      $diff=0;
      __label__ = 100; break;
    case 100: // $723
      __label__ = 101; break;
    case 101: // $724
      var $725=$avg;
      var $726=$diff;
      var $727=($725)+($726);
      var $728=$avg;
      var $729=$diff;
      var $730=($728)+($729);
      var $731=($727)*($730);
      var $732=($731);
      var $733=($732)+0.5;
      var $734=($733) < 65535;
      if ($734) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: // $735
      var $736=$avg;
      var $737=$diff;
      var $738=($736)+($737);
      var $739=$avg;
      var $740=$diff;
      var $741=($739)+($740);
      var $742=($738)*($741);
      var $743=($742);
      var $744=($743)+0.5;
      var $747 = $744;__label__ = 104; break;
    case 103: // $745
      var $747 = 65535;__label__ = 104; break;
    case 104: // $746
      var $747;
      var $748=0 > ($747);
      if ($748) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $749
      var $775 = 0;__label__ = 110; break;
    case 106: // $750
      var $751=$avg;
      var $752=$diff;
      var $753=($751)+($752);
      var $754=$avg;
      var $755=$diff;
      var $756=($754)+($755);
      var $757=($753)*($756);
      var $758=($757);
      var $759=($758)+0.5;
      var $760=($759) < 65535;
      if ($760) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: // $761
      var $762=$avg;
      var $763=$diff;
      var $764=($762)+($763);
      var $765=$avg;
      var $766=$diff;
      var $767=($765)+($766);
      var $768=($764)*($767);
      var $769=($768);
      var $770=($769)+0.5;
      var $773 = $770;__label__ = 109; break;
    case 108: // $771
      var $773 = 65535;__label__ = 109; break;
    case 109: // $772
      var $773;
      var $775 = $773;__label__ = 110; break;
    case 110: // $774
      var $775;
      var $776=(($775) >= 0 ? Math.floor(($775)) : Math.ceil(($775)));
      var $777=HEAPU32[((_filters)>>2)];
      var $778=$row;
      var $779=($778) << 1;
      var $780=($779) & 14;
      var $781=$col;
      var $782=($781) & 1;
      var $783=((($780)+($782))|0);
      var $784=($783) << 1;
      var $785=($777) >>> ((($784))>>>0);
      var $786=($785) & 3;
      var $787=$row;
      var $788=HEAPU16[((_shrink)>>1)];
      var $789=((($788))&65535);
      var $790=($787) >> ((($789))|0);
      var $791=HEAPU16[((_iwidth)>>1)];
      var $792=((($791))&65535);
      var $793=((($790)*($792))|0);
      var $794=$col;
      var $795=HEAPU16[((_shrink)>>1)];
      var $796=((($795))&65535);
      var $797=($794) >> ((($796))|0);
      var $798=((($793)+($797))|0);
      var $799=HEAP32[((_image)>>2)];
      var $800=(($799+($798<<3))|0);
      var $801=(($800+($786<<1))|0);
      HEAP16[(($801)>>1)]=$776;
      __label__ = 111; break;
    case 111: // $802
      var $803=$col;
      var $804=((($803)+2)|0);
      $col=$804;
      __label__ = 91; break;
    case 112: // $805
      __label__ = 113; break;
    case 113: // $806
      var $807=$row;
      var $808=((($807)+1)|0);
      $row=$808;
      __label__ = 78; break;
    case 114: // $809
      __label__ = 115; break;
    case 115: // $810
      var $811=$fimg;
      var $812=$811;
      _free($812);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_wavelet_denoise["X"]=1;

function _scale_colors() {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $bottom;
      var $right;
      var $size;
      var $row;
      var $col;
      var $ur;
      var $uc;
      var $i;
      var $x;
      var $y;
      var $c;
      var $sum=__stackBase__;
      var $val;
      var $dark;
      var $sat;
      var $dsum=__stackBase__+32;
      var $dmin;
      var $dmax;
      var $scale_mul=__stackBase__+96;
      var $fr;
      var $fc;
      var $img;
      var $pix;
      $img=0;
      $c=0;
      __label__ = 1; break;
    case 1: // $1
      var $2=$c;
      var $3=((($2))>>>0) < 4;
      if ($3) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: // $4
      var $5=HEAP32[((_black)>>2)];
      var $6=$c;
      var $7=((_cblack+($6<<2))|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($8)+($5))|0);
      HEAP32[(($7)>>2)]=$9;
      __label__ = 3; break;
    case 3: // $10
      var $11=$c;
      var $12=((($11)+1)|0);
      $c=$12;
      __label__ = 1; break;
    case 4: // $13
      var $14=HEAPF32[((((_user_mul)|0))>>2)];
      var $15=($14) != 0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $16
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = (_user_mul), $$dest = (_pre_mul), $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      __label__ = 6; break;
    case 6: // $17
      var $18=HEAP32[((_use_auto_wb)>>2)];
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 9; break; } else { __label__ = 7; break; }
    case 7: // $20
      var $21=HEAP32[((_use_camera_wb)>>2)];
      var $22=((($21))|0)!=0;
      if ($22) { __label__ = 8; break; } else { __label__ = 60; break; }
    case 8: // $23
      var $24=HEAPF32[((((_cam_mul)|0))>>2)];
      var $25=($24) == -1;
      if ($25) { __label__ = 9; break; } else { __label__ = 60; break; }
    case 9: // $26
      var $27=(($dsum)|0);
      var $28=$27;
      _memset($28, 0, 64, 1);
      var $29=HEAP32[((((_greybox+4)|0))>>2)];
      var $30=HEAP32[((((_greybox+12)|0))>>2)];
      var $31=((($29)+($30))|0);
      var $32=HEAPU16[((_height)>>1)];
      var $33=((($32))&65535);
      var $34=((($31))>>>0) < ((($33))>>>0);
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $35
      var $36=HEAP32[((((_greybox+4)|0))>>2)];
      var $37=HEAP32[((((_greybox+12)|0))>>2)];
      var $38=((($36)+($37))|0);
      var $43 = $38;__label__ = 12; break;
    case 11: // $39
      var $40=HEAPU16[((_height)>>1)];
      var $41=((($40))&65535);
      var $43 = $41;__label__ = 12; break;
    case 12: // $42
      var $43;
      $bottom=$43;
      var $44=HEAP32[((((_greybox)|0))>>2)];
      var $45=HEAP32[((((_greybox+8)|0))>>2)];
      var $46=((($44)+($45))|0);
      var $47=HEAPU16[((_width)>>1)];
      var $48=((($47))&65535);
      var $49=((($46))>>>0) < ((($48))>>>0);
      if ($49) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $50
      var $51=HEAP32[((((_greybox)|0))>>2)];
      var $52=HEAP32[((((_greybox+8)|0))>>2)];
      var $53=((($51)+($52))|0);
      var $58 = $53;__label__ = 15; break;
    case 14: // $54
      var $55=HEAPU16[((_width)>>1)];
      var $56=((($55))&65535);
      var $58 = $56;__label__ = 15; break;
    case 15: // $57
      var $58;
      $right=$58;
      var $59=HEAP32[((((_greybox+4)|0))>>2)];
      $row=$59;
      __label__ = 16; break;
    case 16: // $60
      var $61=$row;
      var $62=$bottom;
      var $63=((($61))>>>0) < ((($62))>>>0);
      if ($63) { __label__ = 17; break; } else { __label__ = 53; break; }
    case 17: // $64
      var $65=HEAP32[((((_greybox)|0))>>2)];
      $col=$65;
      __label__ = 18; break;
    case 18: // $66
      var $67=$col;
      var $68=$right;
      var $69=((($67))>>>0) < ((($68))>>>0);
      if ($69) { __label__ = 19; break; } else { __label__ = 51; break; }
    case 19: // $70
      var $71=(($sum)|0);
      var $72=$71;
      _memset($72, 0, 32, 1);
      var $73=$row;
      $y=$73;
      __label__ = 20; break;
    case 20: // $74
      var $75=$y;
      var $76=$row;
      var $77=((($76)+8)|0);
      var $78=((($75))>>>0) < ((($77))>>>0);
      if ($78) { __label__ = 21; break; } else { var $84 = 0;__label__ = 22; break; }
    case 21: // $79
      var $80=$y;
      var $81=$bottom;
      var $82=((($80))>>>0) < ((($81))>>>0);
      var $84 = $82;__label__ = 22; break;
    case 22: // $83
      var $84;
      if ($84) { __label__ = 23; break; } else { __label__ = 44; break; }
    case 23: // $85
      var $86=$col;
      $x=$86;
      __label__ = 24; break;
    case 24: // $87
      var $88=$x;
      var $89=$col;
      var $90=((($89)+8)|0);
      var $91=((($88))>>>0) < ((($90))>>>0);
      if ($91) { __label__ = 25; break; } else { var $97 = 0;__label__ = 26; break; }
    case 25: // $92
      var $93=$x;
      var $94=$right;
      var $95=((($93))>>>0) < ((($94))>>>0);
      var $97 = $95;__label__ = 26; break;
    case 26: // $96
      var $97;
      if ($97) { __label__ = 27; break; } else { __label__ = 42; break; }
    case 27: // $98
      $c=0;
      __label__ = 28; break;
    case 28: // $99
      var $100=$c;
      var $101=((($100))>>>0) < 4;
      if ($101) { __label__ = 29; break; } else { __label__ = 40; break; }
    case 29: // $102
      var $103=HEAP32[((_filters)>>2)];
      var $104=((($103))|0)!=0;
      if ($104) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: // $105
      var $106=HEAPU32[((_filters)>>2)];
      var $107=$y;
      var $108=($107) << 1;
      var $109=($108) & 14;
      var $110=$x;
      var $111=($110) & 1;
      var $112=((($109)+($111))|0);
      var $113=($112) << 1;
      var $114=($106) >>> ((($113))>>>0);
      var $115=($114) & 3;
      $c=$115;
      var $116=HEAPU32[((_filters)>>2)];
      var $117=$y;
      var $118=($117) << 1;
      var $119=($118) & 14;
      var $120=$x;
      var $121=($120) & 1;
      var $122=((($119)+($121))|0);
      var $123=($122) << 1;
      var $124=($116) >>> ((($123))>>>0);
      var $125=($124) & 3;
      var $126=$y;
      var $127=HEAPU16[((_shrink)>>1)];
      var $128=((($127))&65535);
      var $129=($126) >>> ((($128))>>>0);
      var $130=HEAPU16[((_iwidth)>>1)];
      var $131=((($130))&65535);
      var $132=((($129)*($131))|0);
      var $133=$x;
      var $134=HEAPU16[((_shrink)>>1)];
      var $135=((($134))&65535);
      var $136=($133) >>> ((($135))>>>0);
      var $137=((($132)+($136))|0);
      var $138=HEAP32[((_image)>>2)];
      var $139=(($138+($137<<3))|0);
      var $140=(($139+($125<<1))|0);
      var $141=HEAPU16[(($140)>>1)];
      var $142=((($141))&65535);
      $val=$142;
      __label__ = 32; break;
    case 31: // $143
      var $144=$c;
      var $145=$y;
      var $146=HEAPU16[((_width)>>1)];
      var $147=((($146))&65535);
      var $148=((($145)*($147))|0);
      var $149=$x;
      var $150=((($148)+($149))|0);
      var $151=HEAP32[((_image)>>2)];
      var $152=(($151+($150<<3))|0);
      var $153=(($152+($144<<1))|0);
      var $154=HEAPU16[(($153)>>1)];
      var $155=((($154))&65535);
      $val=$155;
      __label__ = 32; break;
    case 32: // $156
      var $157=$val;
      var $158=HEAP32[((_maximum)>>2)];
      var $159=((($158)-25)|0);
      var $160=((($157))>>>0) > ((($159))>>>0);
      if ($160) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $161
      __label__ = 49; break;
    case 34: // $162
      var $163=$c;
      var $164=((_cblack+($163<<2))|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=$val;
      var $167=((($166)-($165))|0);
      $val=$167;
      var $168=((($167))|0) < 0;
      if ($168) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $169
      $val=0;
      __label__ = 36; break;
    case 36: // $170
      var $171=$val;
      var $172=$c;
      var $173=(($sum+($172<<2))|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=((($174)+($171))|0);
      HEAP32[(($173)>>2)]=$175;
      var $176=$c;
      var $177=((($176)+4)|0);
      var $178=(($sum+($177<<2))|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=((($179)+1)|0);
      HEAP32[(($178)>>2)]=$180;
      var $181=HEAP32[((_filters)>>2)];
      var $182=((($181))|0)!=0;
      if ($182) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $183
      __label__ = 40; break;
    case 38: // $184
      __label__ = 39; break;
    case 39: // $185
      var $186=$c;
      var $187=((($186)+1)|0);
      $c=$187;
      __label__ = 28; break;
    case 40: // $188
      __label__ = 41; break;
    case 41: // $189
      var $190=$x;
      var $191=((($190)+1)|0);
      $x=$191;
      __label__ = 24; break;
    case 42: // $192
      __label__ = 43; break;
    case 43: // $193
      var $194=$y;
      var $195=((($194)+1)|0);
      $y=$195;
      __label__ = 20; break;
    case 44: // $196
      $c=0;
      __label__ = 45; break;
    case 45: // $197
      var $198=$c;
      var $199=((($198))>>>0) < 8;
      if ($199) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 46: // $200
      var $201=$c;
      var $202=(($sum+($201<<2))|0);
      var $203=HEAPU32[(($202)>>2)];
      var $204=((($203))>>>0);
      var $205=$c;
      var $206=(($dsum+($205<<3))|0);
      var $207=(tempDoubleI32[0]=HEAP32[(($206)>>2)],tempDoubleI32[1]=HEAP32[(($206+4)>>2)],tempDoubleF64[0]);
      var $208=($207)+($204);
      (tempDoubleF64[0]=$208,HEAP32[(($206)>>2)]=tempDoubleI32[0],HEAP32[(($206+4)>>2)]=tempDoubleI32[1]);
      __label__ = 47; break;
    case 47: // $209
      var $210=$c;
      var $211=((($210)+1)|0);
      $c=$211;
      __label__ = 45; break;
    case 48: // $212
      __label__ = 49; break;
    case 49: // $213
      __label__ = 50; break;
    case 50: // $214
      var $215=$col;
      var $216=((($215)+8)|0);
      $col=$216;
      __label__ = 18; break;
    case 51: // $217
      __label__ = 52; break;
    case 52: // $218
      var $219=$row;
      var $220=((($219)+8)|0);
      $row=$220;
      __label__ = 16; break;
    case 53: // $221
      $c=0;
      __label__ = 54; break;
    case 54: // $222
      var $223=$c;
      var $224=((($223))>>>0) < 4;
      if ($224) { __label__ = 55; break; } else { __label__ = 59; break; }
    case 55: // $225
      var $226=$c;
      var $227=(($dsum+($226<<3))|0);
      var $228=(tempDoubleI32[0]=HEAPU32[(($227)>>2)],tempDoubleI32[1]=HEAPU32[(($227+4)>>2)],tempDoubleF64[0]);
      var $229=($228) != 0;
      if ($229) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: // $230
      var $231=$c;
      var $232=((($231)+4)|0);
      var $233=(($dsum+($232<<3))|0);
      var $234=(tempDoubleI32[0]=HEAP32[(($233)>>2)],tempDoubleI32[1]=HEAP32[(($233+4)>>2)],tempDoubleF64[0]);
      var $235=$c;
      var $236=(($dsum+($235<<3))|0);
      var $237=(tempDoubleI32[0]=HEAP32[(($236)>>2)],tempDoubleI32[1]=HEAP32[(($236+4)>>2)],tempDoubleF64[0]);
      var $238=($234)/($237);
      var $239=($238);
      var $240=$c;
      var $241=((_pre_mul+($240<<2))|0);
      HEAPF32[(($241)>>2)]=$239;
      __label__ = 57; break;
    case 57: // $242
      __label__ = 58; break;
    case 58: // $243
      var $244=$c;
      var $245=((($244)+1)|0);
      $c=$245;
      __label__ = 54; break;
    case 59: // $246
      __label__ = 60; break;
    case 60: // $247
      var $248=HEAP32[((_use_camera_wb)>>2)];
      var $249=((($248))|0)!=0;
      if ($249) { __label__ = 61; break; } else { __label__ = 87; break; }
    case 61: // $250
      var $251=HEAPF32[((((_cam_mul)|0))>>2)];
      var $252=($251) != -1;
      if ($252) { __label__ = 62; break; } else { __label__ = 87; break; }
    case 62: // $253
      var $254=(($sum)|0);
      var $255=$254;
      _memset($255, 0, 32, 1);
      $row=0;
      __label__ = 63; break;
    case 63: // $256
      var $257=$row;
      var $258=((($257))>>>0) < 8;
      if ($258) { __label__ = 64; break; } else { __label__ = 72; break; }
    case 64: // $259
      $col=0;
      __label__ = 65; break;
    case 65: // $260
      var $261=$col;
      var $262=((($261))>>>0) < 8;
      if ($262) { __label__ = 66; break; } else { __label__ = 70; break; }
    case 66: // $263
      var $264=HEAPU32[((_filters)>>2)];
      var $265=$row;
      var $266=($265) << 1;
      var $267=($266) & 14;
      var $268=$col;
      var $269=($268) & 1;
      var $270=((($267)+($269))|0);
      var $271=($270) << 1;
      var $272=($264) >>> ((($271))>>>0);
      var $273=($272) & 3;
      $c=$273;
      var $274=$col;
      var $275=$row;
      var $276=((_white+($275<<4))|0);
      var $277=(($276+($274<<1))|0);
      var $278=HEAPU16[(($277)>>1)];
      var $279=((($278))&65535);
      var $280=$c;
      var $281=((_cblack+($280<<2))|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=((($279)-($282))|0);
      $val=$283;
      var $284=((($283))|0) > 0;
      if ($284) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: // $285
      var $286=$val;
      var $287=$c;
      var $288=(($sum+($287<<2))|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=((($289)+($286))|0);
      HEAP32[(($288)>>2)]=$290;
      __label__ = 68; break;
    case 68: // $291
      var $292=$c;
      var $293=((($292)+4)|0);
      var $294=(($sum+($293<<2))|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=((($295)+1)|0);
      HEAP32[(($294)>>2)]=$296;
      __label__ = 69; break;
    case 69: // $297
      var $298=$col;
      var $299=((($298)+1)|0);
      $col=$299;
      __label__ = 65; break;
    case 70: // $300
      __label__ = 71; break;
    case 71: // $301
      var $302=$row;
      var $303=((($302)+1)|0);
      $row=$303;
      __label__ = 63; break;
    case 72: // $304
      var $305=(($sum)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=((($306))|0)!=0;
      if ($307) { __label__ = 73; break; } else { __label__ = 81; break; }
    case 73: // $308
      var $309=(($sum+4)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=((($310))|0)!=0;
      if ($311) { __label__ = 74; break; } else { __label__ = 81; break; }
    case 74: // $312
      var $313=(($sum+8)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=((($314))|0)!=0;
      if ($315) { __label__ = 75; break; } else { __label__ = 81; break; }
    case 75: // $316
      var $317=(($sum+12)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=((($318))|0)!=0;
      if ($319) { __label__ = 76; break; } else { __label__ = 81; break; }
    case 76: // $320
      $c=0;
      __label__ = 77; break;
    case 77: // $321
      var $322=$c;
      var $323=((($322))>>>0) < 4;
      if ($323) { __label__ = 78; break; } else { __label__ = 80; break; }
    case 78: // $324
      var $325=$c;
      var $326=((($325)+4)|0);
      var $327=(($sum+($326<<2))|0);
      var $328=HEAPU32[(($327)>>2)];
      var $329=((($328))>>>0);
      var $330=$c;
      var $331=(($sum+($330<<2))|0);
      var $332=HEAPU32[(($331)>>2)];
      var $333=((($332))>>>0);
      var $334=($329)/($333);
      var $335=$c;
      var $336=((_pre_mul+($335<<2))|0);
      HEAPF32[(($336)>>2)]=$334;
      __label__ = 79; break;
    case 79: // $337
      var $338=$c;
      var $339=((($338)+1)|0);
      $c=$339;
      __label__ = 77; break;
    case 80: // $340
      __label__ = 86; break;
    case 81: // $341
      var $342=HEAPF32[((((_cam_mul)|0))>>2)];
      var $343=($342) != 0;
      if ($343) { __label__ = 82; break; } else { __label__ = 84; break; }
    case 82: // $344
      var $345=HEAPF32[((((_cam_mul+8)|0))>>2)];
      var $346=($345) != 0;
      if ($346) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: // $347
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = (_cam_mul), $$dest = (_pre_mul), $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      __label__ = 85; break;
    case 84: // $348
      var $349=HEAP32[((__impure_ptr)>>2)];
      var $350=(($349+12)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=HEAP32[((_ifname)>>2)];
      var $353=_fprintf($351, ((__str69)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$352,tempInt));
      __label__ = 85; break;
    case 85: // $354
      __label__ = 86; break;
    case 86: // $355
      __label__ = 87; break;
    case 87: // $356
      var $357=HEAPF32[((((_pre_mul+12)|0))>>2)];
      var $358=($357) == 0;
      if ($358) { __label__ = 88; break; } else { __label__ = 92; break; }
    case 88: // $359
      var $360=HEAP32[((_colors)>>2)];
      var $361=((($360))|0) < 4;
      if ($361) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: // $362
      var $363=HEAPF32[((((_pre_mul+4)|0))>>2)];
      var $366 = $363;__label__ = 91; break;
    case 90: // $364
      var $366 = 1;__label__ = 91; break;
    case 91: // $365
      var $366;
      HEAPF32[((((_pre_mul+12)|0))>>2)]=$366;
      __label__ = 92; break;
    case 92: // $367
      var $368=HEAP32[((_black)>>2)];
      $dark=$368;
      var $369=HEAP32[((_maximum)>>2)];
      $sat=$369;
      var $370=HEAPF32[((_threshold)>>2)];
      var $371=($370) != 0;
      if ($371) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: // $372
      _wavelet_denoise();
      __label__ = 94; break;
    case 94: // $373
      var $374=HEAP32[((_black)>>2)];
      var $375=HEAP32[((_maximum)>>2)];
      var $376=((($375)-($374))|0);
      HEAP32[((_maximum)>>2)]=$376;
      $dmin=1.7976931348623157e+308;
      $c=0;
      $dmax=0;
      __label__ = 95; break;
    case 95: // $377
      var $378=$c;
      var $379=((($378))>>>0) < 4;
      if ($379) { __label__ = 96; break; } else { __label__ = 102; break; }
    case 96: // $380
      var $381=$dmin;
      var $382=$c;
      var $383=((_pre_mul+($382<<2))|0);
      var $384=HEAPF32[(($383)>>2)];
      var $385=($384);
      var $386=($381) > ($385);
      if ($386) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: // $387
      var $388=$c;
      var $389=((_pre_mul+($388<<2))|0);
      var $390=HEAPF32[(($389)>>2)];
      var $391=($390);
      $dmin=$391;
      __label__ = 98; break;
    case 98: // $392
      var $393=$dmax;
      var $394=$c;
      var $395=((_pre_mul+($394<<2))|0);
      var $396=HEAPF32[(($395)>>2)];
      var $397=($396);
      var $398=($393) < ($397);
      if ($398) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: // $399
      var $400=$c;
      var $401=((_pre_mul+($400<<2))|0);
      var $402=HEAPF32[(($401)>>2)];
      var $403=($402);
      $dmax=$403;
      __label__ = 100; break;
    case 100: // $404
      __label__ = 101; break;
    case 101: // $405
      var $406=$c;
      var $407=((($406)+1)|0);
      $c=$407;
      __label__ = 95; break;
    case 102: // $408
      var $409=HEAP32[((_highlight)>>2)];
      var $410=((($409))|0)!=0;
      if ($410) { __label__ = 104; break; } else { __label__ = 103; break; }
    case 103: // $411
      var $412=$dmin;
      $dmax=$412;
      __label__ = 104; break;
    case 104: // $413
      $c=0;
      __label__ = 105; break;
    case 105: // $414
      var $415=$c;
      var $416=((($415))>>>0) < 4;
      if ($416) { __label__ = 106; break; } else { __label__ = 108; break; }
    case 106: // $417
      var $418=$dmax;
      var $419=$c;
      var $420=((_pre_mul+($419<<2))|0);
      var $421=HEAPF32[(($420)>>2)];
      var $422=($421);
      var $423=($422)/($418);
      var $424=($423);
      HEAPF32[(($420)>>2)]=$424;
      var $425=($424);
      var $426=($425)*65535;
      var $427=HEAPU32[((_maximum)>>2)];
      var $428=((($427))>>>0);
      var $429=($426)/($428);
      var $430=($429);
      var $431=$c;
      var $432=(($scale_mul+($431<<2))|0);
      HEAPF32[(($432)>>2)]=$430;
      __label__ = 107; break;
    case 107: // $433
      var $434=$c;
      var $435=((($434)+1)|0);
      $c=$435;
      __label__ = 105; break;
    case 108: // $436
      var $437=HEAP32[((_verbose)>>2)];
      var $438=((($437))|0)!=0;
      if ($438) { __label__ = 109; break; } else { __label__ = 114; break; }
    case 109: // $439
      var $440=HEAP32[((__impure_ptr)>>2)];
      var $441=(($440+12)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=$dark;
      var $444=$sat;
      var $445=_fprintf($442, ((__str70)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$443,HEAP32[((tempInt+4)>>2)]=$444,tempInt));
      $c=0;
      __label__ = 110; break;
    case 110: // $446
      var $447=$c;
      var $448=((($447))>>>0) < 4;
      if ($448) { __label__ = 111; break; } else { __label__ = 113; break; }
    case 111: // $449
      var $450=HEAP32[((__impure_ptr)>>2)];
      var $451=(($450+12)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=$c;
      var $454=((_pre_mul+($453<<2))|0);
      var $455=HEAPF32[(($454)>>2)];
      var $456=($455);
      var $457=_fprintf($452, ((__str71)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$456,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 112; break;
    case 112: // $458
      var $459=$c;
      var $460=((($459)+1)|0);
      $c=$460;
      __label__ = 110; break;
    case 113: // $461
      var $462=HEAP32[((__impure_ptr)>>2)];
      var $463=(($462+12)|0);
      var $464=HEAP32[(($463)>>2)];
      var $465=_fputc(10, $464);
      __label__ = 114; break;
    case 114: // $466
      var $467=HEAPU16[((_iheight)>>1)];
      var $468=((($467))&65535);
      var $469=HEAPU16[((_iwidth)>>1)];
      var $470=((($469))&65535);
      var $471=((($468)*($470))|0);
      $size=$471;
      $i=0;
      __label__ = 115; break;
    case 115: // $472
      var $473=$i;
      var $474=$size;
      var $475=(((($474)<<2))|0);
      var $476=((($473))>>>0) < ((($475))>>>0);
      if ($476) { __label__ = 116; break; } else { __label__ = 129; break; }
    case 116: // $477
      var $478=$i;
      var $479=HEAP32[((_image)>>2)];
      var $480=(($479)|0);
      var $481=(($480+($478<<1))|0);
      var $482=HEAPU16[(($481)>>1)];
      var $483=((($482))&65535);
      $val=$483;
      var $484=$val;
      var $485=((($484))|0)!=0;
      if ($485) { __label__ = 118; break; } else { __label__ = 117; break; }
    case 117: // $486
      __label__ = 128; break;
    case 118: // $487
      var $488=$i;
      var $489=($488) & 3;
      var $490=((_cblack+($489<<2))|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=$val;
      var $493=((($492)-($491))|0);
      $val=$493;
      var $494=$i;
      var $495=($494) & 3;
      var $496=(($scale_mul+($495<<2))|0);
      var $497=HEAPF32[(($496)>>2)];
      var $498=$val;
      var $499=((($498))|0);
      var $500=($499)*($497);
      var $501=((($500))|0);
      $val=$501;
      var $502=$val;
      var $503=((($502))|0) < 65535;
      if ($503) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: // $504
      var $505=$val;
      var $508 = $505;__label__ = 121; break;
    case 120: // $506
      var $508 = 65535;__label__ = 121; break;
    case 121: // $507
      var $508;
      var $509=0 > ((($508))|0);
      if ($509) { __label__ = 122; break; } else { __label__ = 123; break; }
    case 122: // $510
      var $520 = 0;__label__ = 127; break;
    case 123: // $511
      var $512=$val;
      var $513=((($512))|0) < 65535;
      if ($513) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: // $514
      var $515=$val;
      var $518 = $515;__label__ = 126; break;
    case 125: // $516
      var $518 = 65535;__label__ = 126; break;
    case 126: // $517
      var $518;
      var $520 = $518;__label__ = 127; break;
    case 127: // $519
      var $520;
      var $521=((($520)) & 65535);
      var $522=$i;
      var $523=HEAP32[((_image)>>2)];
      var $524=(($523)|0);
      var $525=(($524+($522<<1))|0);
      HEAP16[(($525)>>1)]=$521;
      __label__ = 128; break;
    case 128: // $526
      var $527=$i;
      var $528=((($527)+1)|0);
      $i=$528;
      __label__ = 115; break;
    case 129: // $529
      var $530=(tempDoubleI32[0]=HEAPU32[((((_aber)|0))>>2)],tempDoubleI32[1]=HEAPU32[((((_aber)|0)+4)>>2)],tempDoubleF64[0]);
      var $531=($530) != 1;
      if ($531) { __label__ = 131; break; } else { __label__ = 130; break; }
    case 130: // $532
      var $533=(tempDoubleI32[0]=HEAPU32[((((_aber+16)|0))>>2)],tempDoubleI32[1]=HEAPU32[((((_aber+16)|0)+4)>>2)],tempDoubleF64[0]);
      var $534=($533) != 1;
      if ($534) { __label__ = 131; break; } else { __label__ = 157; break; }
    case 131: // $535
      var $536=HEAP32[((_colors)>>2)];
      var $537=((($536))|0)==3;
      if ($537) { __label__ = 132; break; } else { __label__ = 157; break; }
    case 132: // $538
      var $539=HEAP32[((_verbose)>>2)];
      var $540=((($539))|0)!=0;
      if ($540) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: // $541
      var $542=HEAP32[((__impure_ptr)>>2)];
      var $543=(($542+12)|0);
      var $544=HEAP32[(($543)>>2)];
      var $545=_fprintf($544, ((__str72)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 134; break;
    case 134: // $546
      $c=0;
      __label__ = 135; break;
    case 135: // $547
      var $548=$c;
      var $549=((($548))>>>0) < 4;
      if ($549) { __label__ = 136; break; } else { __label__ = 156; break; }
    case 136: // $550
      var $551=$c;
      var $552=((_aber+($551<<3))|0);
      var $553=(tempDoubleI32[0]=HEAP32[(($552)>>2)],tempDoubleI32[1]=HEAP32[(($552+4)>>2)],tempDoubleF64[0]);
      var $554=($553) == 1;
      if ($554) { __label__ = 137; break; } else { __label__ = 138; break; }
    case 137: // $555
      __label__ = 155; break;
    case 138: // $556
      var $557=$size;
      var $558=(((($557)<<1))|0);
      var $559=_malloc($558);
      var $560=$559;
      $img=$560;
      var $561=$img;
      var $562=$561;
      _merror($562, ((__str73)|0));
      $i=0;
      __label__ = 139; break;
    case 139: // $563
      var $564=$i;
      var $565=$size;
      var $566=((($564))>>>0) < ((($565))>>>0);
      if ($566) { __label__ = 140; break; } else { __label__ = 142; break; }
    case 140: // $567
      var $568=$c;
      var $569=$i;
      var $570=HEAP32[((_image)>>2)];
      var $571=(($570+($569<<3))|0);
      var $572=(($571+($568<<1))|0);
      var $573=HEAP16[(($572)>>1)];
      var $574=$i;
      var $575=$img;
      var $576=(($575+($574<<1))|0);
      HEAP16[(($576)>>1)]=$573;
      __label__ = 141; break;
    case 141: // $577
      var $578=$i;
      var $579=((($578)+1)|0);
      $i=$579;
      __label__ = 139; break;
    case 142: // $580
      $row=0;
      __label__ = 143; break;
    case 143: // $581
      var $582=$row;
      var $583=HEAPU16[((_iheight)>>1)];
      var $584=((($583))&65535);
      var $585=((($582))>>>0) < ((($584))>>>0);
      if ($585) { __label__ = 144; break; } else { __label__ = 154; break; }
    case 144: // $586
      var $587=$row;
      var $588=((($587))>>>0);
      var $589=HEAPU16[((_iheight)>>1)];
      var $590=((($589))&65535);
      var $591=((($590))|0);
      var $592=($591)*0.5;
      var $593=($588)-($592);
      var $594=$c;
      var $595=((_aber+($594<<3))|0);
      var $596=(tempDoubleI32[0]=HEAP32[(($595)>>2)],tempDoubleI32[1]=HEAP32[(($595+4)>>2)],tempDoubleF64[0]);
      var $597=($593)*($596);
      var $598=HEAPU16[((_iheight)>>1)];
      var $599=((($598))&65535);
      var $600=((($599))|0);
      var $601=($600)*0.5;
      var $602=($597)+($601);
      var $603=($602);
      $fr=$603;
      var $604=(($603) >= 0 ? Math.floor(($603)) : Math.ceil(($603)));
      $ur=$604;
      var $605=$ur;
      var $606=HEAPU16[((_iheight)>>1)];
      var $607=((($606))&65535);
      var $608=((($607)-2)|0);
      var $609=((($605))>>>0) > ((($608))>>>0);
      if ($609) { __label__ = 145; break; } else { __label__ = 146; break; }
    case 145: // $610
      __label__ = 153; break;
    case 146: // $611
      var $612=$ur;
      var $613=((($612))>>>0);
      var $614=$fr;
      var $615=($614)-($613);
      $fr=$615;
      $col=0;
      __label__ = 147; break;
    case 147: // $616
      var $617=$col;
      var $618=HEAPU16[((_iwidth)>>1)];
      var $619=((($618))&65535);
      var $620=((($617))>>>0) < ((($619))>>>0);
      if ($620) { __label__ = 148; break; } else { __label__ = 152; break; }
    case 148: // $621
      var $622=$col;
      var $623=((($622))>>>0);
      var $624=HEAPU16[((_iwidth)>>1)];
      var $625=((($624))&65535);
      var $626=((($625))|0);
      var $627=($626)*0.5;
      var $628=($623)-($627);
      var $629=$c;
      var $630=((_aber+($629<<3))|0);
      var $631=(tempDoubleI32[0]=HEAP32[(($630)>>2)],tempDoubleI32[1]=HEAP32[(($630+4)>>2)],tempDoubleF64[0]);
      var $632=($628)*($631);
      var $633=HEAPU16[((_iwidth)>>1)];
      var $634=((($633))&65535);
      var $635=((($634))|0);
      var $636=($635)*0.5;
      var $637=($632)+($636);
      var $638=($637);
      $fc=$638;
      var $639=(($638) >= 0 ? Math.floor(($638)) : Math.ceil(($638)));
      $uc=$639;
      var $640=$uc;
      var $641=HEAPU16[((_iwidth)>>1)];
      var $642=((($641))&65535);
      var $643=((($642)-2)|0);
      var $644=((($640))>>>0) > ((($643))>>>0);
      if ($644) { __label__ = 149; break; } else { __label__ = 150; break; }
    case 149: // $645
      __label__ = 151; break;
    case 150: // $646
      var $647=$uc;
      var $648=((($647))>>>0);
      var $649=$fc;
      var $650=($649)-($648);
      $fc=$650;
      var $651=$img;
      var $652=$ur;
      var $653=HEAPU16[((_iwidth)>>1)];
      var $654=((($653))&65535);
      var $655=((($652)*($654))|0);
      var $656=(($651+($655<<1))|0);
      var $657=$uc;
      var $658=(($656+($657<<1))|0);
      $pix=$658;
      var $659=$pix;
      var $660=(($659)|0);
      var $661=HEAPU16[(($660)>>1)];
      var $662=((($661))&65535);
      var $663=((($662))|0);
      var $664=$fc;
      var $665=1-($664);
      var $666=($663)*($665);
      var $667=$pix;
      var $668=(($667+2)|0);
      var $669=HEAPU16[(($668)>>1)];
      var $670=((($669))&65535);
      var $671=((($670))|0);
      var $672=$fc;
      var $673=($671)*($672);
      var $674=($666)+($673);
      var $675=$fr;
      var $676=1-($675);
      var $677=($674)*($676);
      var $678=HEAPU16[((_iwidth)>>1)];
      var $679=((($678))&65535);
      var $680=$pix;
      var $681=(($680+($679<<1))|0);
      var $682=HEAPU16[(($681)>>1)];
      var $683=((($682))&65535);
      var $684=((($683))|0);
      var $685=$fc;
      var $686=1-($685);
      var $687=($684)*($686);
      var $688=HEAPU16[((_iwidth)>>1)];
      var $689=((($688))&65535);
      var $690=((($689)+1)|0);
      var $691=$pix;
      var $692=(($691+($690<<1))|0);
      var $693=HEAPU16[(($692)>>1)];
      var $694=((($693))&65535);
      var $695=((($694))|0);
      var $696=$fc;
      var $697=($695)*($696);
      var $698=($687)+($697);
      var $699=$fr;
      var $700=($698)*($699);
      var $701=($677)+($700);
      var $702=(($701) >= 0 ? Math.floor(($701)) : Math.ceil(($701)));
      var $703=$c;
      var $704=$row;
      var $705=HEAPU16[((_iwidth)>>1)];
      var $706=((($705))&65535);
      var $707=((($704)*($706))|0);
      var $708=$col;
      var $709=((($707)+($708))|0);
      var $710=HEAP32[((_image)>>2)];
      var $711=(($710+($709<<3))|0);
      var $712=(($711+($703<<1))|0);
      HEAP16[(($712)>>1)]=$702;
      __label__ = 151; break;
    case 151: // $713
      var $714=$col;
      var $715=((($714)+1)|0);
      $col=$715;
      __label__ = 147; break;
    case 152: // $716
      __label__ = 153; break;
    case 153: // $717
      var $718=$row;
      var $719=((($718)+1)|0);
      $row=$719;
      __label__ = 143; break;
    case 154: // $720
      var $721=$img;
      var $722=$721;
      _free($722);
      __label__ = 155; break;
    case 155: // $723
      var $724=$c;
      var $725=((($724)+2)|0);
      $c=$725;
      __label__ = 135; break;
    case 156: // $726
      __label__ = 157; break;
    case 157: // $727
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_scale_colors["X"]=1;

function _pre_interpolate() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $img;
      var $row;
      var $col;
      var $c;
      var $1=HEAP16[((_shrink)>>1)];
      var $2=((($1) << 16) >> 16)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 13; break; }
    case 1: // $3
      var $4=HEAP32[((_half_size)>>2)];
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $6
      var $7=HEAP16[((_iheight)>>1)];
      HEAP16[((_height)>>1)]=$7;
      var $8=HEAP16[((_iwidth)>>1)];
      HEAP16[((_width)>>1)]=$8;
      __label__ = 12; break;
    case 3: // $9
      var $10=HEAPU16[((_height)>>1)];
      var $11=((($10))&65535);
      var $12=HEAPU16[((_width)>>1)];
      var $13=((($12))&65535);
      var $14=((($11)*($13))|0);
      var $15=_calloc($14, 8);
      var $16=$15;
      $img=$16;
      var $17=$img;
      var $18=$17;
      _merror($18, ((__str74)|0));
      $row=0;
      __label__ = 4; break;
    case 4: // $19
      var $20=$row;
      var $21=HEAPU16[((_height)>>1)];
      var $22=((($21))&65535);
      var $23=((($20))|0) < ((($22))|0);
      if ($23) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: // $24
      $col=0;
      __label__ = 6; break;
    case 6: // $25
      var $26=$col;
      var $27=HEAPU16[((_width)>>1)];
      var $28=((($27))&65535);
      var $29=((($26))|0) < ((($28))|0);
      if ($29) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: // $30
      var $31=$row;
      var $32=$col;
      var $33=_fc($31, $32);
      $c=$33;
      var $34=$c;
      var $35=$row;
      var $36=($35) >> 1;
      var $37=HEAPU16[((_iwidth)>>1)];
      var $38=((($37))&65535);
      var $39=((($36)*($38))|0);
      var $40=$col;
      var $41=($40) >> 1;
      var $42=((($39)+($41))|0);
      var $43=HEAP32[((_image)>>2)];
      var $44=(($43+($42<<3))|0);
      var $45=(($44+($34<<1))|0);
      var $46=HEAP16[(($45)>>1)];
      var $47=$c;
      var $48=$row;
      var $49=HEAPU16[((_width)>>1)];
      var $50=((($49))&65535);
      var $51=((($48)*($50))|0);
      var $52=$col;
      var $53=((($51)+($52))|0);
      var $54=$img;
      var $55=(($54+($53<<3))|0);
      var $56=(($55+($47<<1))|0);
      HEAP16[(($56)>>1)]=$46;
      __label__ = 8; break;
    case 8: // $57
      var $58=$col;
      var $59=((($58)+1)|0);
      $col=$59;
      __label__ = 6; break;
    case 9: // $60
      __label__ = 10; break;
    case 10: // $61
      var $62=$row;
      var $63=((($62)+1)|0);
      $row=$63;
      __label__ = 4; break;
    case 11: // $64
      var $65=HEAP32[((_image)>>2)];
      var $66=$65;
      _free($66);
      var $67=$img;
      HEAP32[((_image)>>2)]=$67;
      HEAP16[((_shrink)>>1)]=0;
      __label__ = 12; break;
    case 12: // $68
      __label__ = 13; break;
    case 13: // $69
      var $70=HEAP32[((_filters)>>2)];
      var $71=((($70))|0)!=0;
      if ($71) { __label__ = 14; break; } else { __label__ = 28; break; }
    case 14: // $72
      var $73=HEAP32[((_colors)>>2)];
      var $74=((($73))|0)==3;
      if ($74) { __label__ = 15; break; } else { __label__ = 28; break; }
    case 15: // $75
      var $76=HEAP32[((_four_color_rgb)>>2)];
      var $77=((($76))|0)!=0;
      if ($77) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: // $78
      var $79=HEAP32[((_colors)>>2)];
      var $80=((($79)+1)|0);
      HEAP32[((_colors)>>2)]=$80;
      var $81=((($79))|0)!=0;
      if ($81) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $82
      var $83=HEAP32[((_half_size)>>2)];
      var $84=((($83))|0)!=0;
      var $85=($84) ^ 1;
      var $86=((($85))&1);
      HEAP32[((_mix_green)>>2)]=$86;
      __label__ = 27; break;
    case 18: // $87
      var $88=HEAPU32[((_filters)>>2)];
      var $89=($88) >>> 4;
      var $90=($89) & 3;
      var $91=($90) >>> 1;
      $row=$91;
      __label__ = 19; break;
    case 19: // $92
      var $93=$row;
      var $94=HEAPU16[((_height)>>1)];
      var $95=((($94))&65535);
      var $96=((($93))|0) < ((($95))|0);
      if ($96) { __label__ = 20; break; } else { __label__ = 26; break; }
    case 20: // $97
      var $98=HEAPU32[((_filters)>>2)];
      var $99=$row;
      var $100=($99) << 1;
      var $101=($100) & 14;
      var $102=((($101)+1)|0);
      var $103=($102) << 1;
      var $104=($98) >>> ((($103))>>>0);
      var $105=($104) & 3;
      var $106=($105) & 1;
      $col=$106;
      __label__ = 21; break;
    case 21: // $107
      var $108=$col;
      var $109=HEAPU16[((_width)>>1)];
      var $110=((($109))&65535);
      var $111=((($108))|0) < ((($110))|0);
      if ($111) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $112
      var $113=$row;
      var $114=HEAPU16[((_width)>>1)];
      var $115=((($114))&65535);
      var $116=((($113)*($115))|0);
      var $117=$col;
      var $118=((($116)+($117))|0);
      var $119=HEAP32[((_image)>>2)];
      var $120=(($119+($118<<3))|0);
      var $121=(($120+6)|0);
      var $122=HEAP16[(($121)>>1)];
      var $123=$row;
      var $124=HEAPU16[((_width)>>1)];
      var $125=((($124))&65535);
      var $126=((($123)*($125))|0);
      var $127=$col;
      var $128=((($126)+($127))|0);
      var $129=HEAP32[((_image)>>2)];
      var $130=(($129+($128<<3))|0);
      var $131=(($130+2)|0);
      HEAP16[(($131)>>1)]=$122;
      __label__ = 23; break;
    case 23: // $132
      var $133=$col;
      var $134=((($133)+2)|0);
      $col=$134;
      __label__ = 21; break;
    case 24: // $135
      __label__ = 25; break;
    case 25: // $136
      var $137=$row;
      var $138=((($137)+2)|0);
      $row=$138;
      __label__ = 19; break;
    case 26: // $139
      var $140=HEAP32[((_filters)>>2)];
      var $141=($140) & 1431655765;
      var $142=($141) << 1;
      var $143=($142) ^ -1;
      var $144=HEAP32[((_filters)>>2)];
      var $145=($144) & ($143);
      HEAP32[((_filters)>>2)]=$145;
      __label__ = 27; break;
    case 27: // $146
      __label__ = 28; break;
    case 28: // $147
      var $148=HEAP32[((_half_size)>>2)];
      var $149=((($148))|0)!=0;
      if ($149) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $150
      HEAP32[((_filters)>>2)]=0;
      __label__ = 30; break;
    case 30: // $151
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_pre_interpolate["X"]=1;

function _border_interpolate($border) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $row;
      var $col;
      var $y;
      var $x;
      var $f;
      var $c;
      var $sum=__stackBase__;
      $1=$border;
      $row=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$row;
      var $4=HEAPU16[((_height)>>1)];
      var $5=((($4))&65535);
      var $6=((($3))>>>0) < ((($5))>>>0);
      if ($6) { __label__ = 2; break; } else { __label__ = 30; break; }
    case 2: // $7
      $col=0;
      __label__ = 3; break;
    case 3: // $8
      var $9=$col;
      var $10=HEAPU16[((_width)>>1)];
      var $11=((($10))&65535);
      var $12=((($9))>>>0) < ((($11))>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 28; break; }
    case 4: // $13
      var $14=$col;
      var $15=$1;
      var $16=((($14))|0)==((($15))|0);
      if ($16) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: // $17
      var $18=$row;
      var $19=$1;
      var $20=((($18))>>>0) >= ((($19))>>>0);
      if ($20) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $21
      var $22=$row;
      var $23=HEAPU16[((_height)>>1)];
      var $24=((($23))&65535);
      var $25=$1;
      var $26=((($24)-($25))|0);
      var $27=((($22))>>>0) < ((($26))>>>0);
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $28
      var $29=HEAPU16[((_width)>>1)];
      var $30=((($29))&65535);
      var $31=$1;
      var $32=((($30)-($31))|0);
      $col=$32;
      __label__ = 8; break;
    case 8: // $33
      var $34=(($sum)|0);
      var $35=$34;
      _memset($35, 0, 32, 1);
      var $36=$row;
      var $37=((($36)-1)|0);
      $y=$37;
      __label__ = 9; break;
    case 9: // $38
      var $39=$y;
      var $40=$row;
      var $41=((($40)+2)|0);
      var $42=((($39))|0)!=((($41))|0);
      if ($42) { __label__ = 10; break; } else { __label__ = 19; break; }
    case 10: // $43
      var $44=$col;
      var $45=((($44)-1)|0);
      $x=$45;
      __label__ = 11; break;
    case 11: // $46
      var $47=$x;
      var $48=$col;
      var $49=((($48)+2)|0);
      var $50=((($47))|0)!=((($49))|0);
      if ($50) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: // $51
      var $52=$y;
      var $53=HEAPU16[((_height)>>1)];
      var $54=((($53))&65535);
      var $55=((($52))>>>0) < ((($54))>>>0);
      if ($55) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $56
      var $57=$x;
      var $58=HEAPU16[((_width)>>1)];
      var $59=((($58))&65535);
      var $60=((($57))>>>0) < ((($59))>>>0);
      if ($60) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $61
      var $62=$y;
      var $63=$x;
      var $64=_fc($62, $63);
      $f=$64;
      var $65=$f;
      var $66=$y;
      var $67=HEAPU16[((_width)>>1)];
      var $68=((($67))&65535);
      var $69=((($66)*($68))|0);
      var $70=$x;
      var $71=((($69)+($70))|0);
      var $72=HEAP32[((_image)>>2)];
      var $73=(($72+($71<<3))|0);
      var $74=(($73+($65<<1))|0);
      var $75=HEAPU16[(($74)>>1)];
      var $76=((($75))&65535);
      var $77=$f;
      var $78=(($sum+($77<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)+($76))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=$f;
      var $82=((($81)+4)|0);
      var $83=(($sum+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)+1)|0);
      HEAP32[(($83)>>2)]=$85;
      __label__ = 15; break;
    case 15: // $86
      __label__ = 16; break;
    case 16: // $87
      var $88=$x;
      var $89=((($88)+1)|0);
      $x=$89;
      __label__ = 11; break;
    case 17: // $90
      __label__ = 18; break;
    case 18: // $91
      var $92=$y;
      var $93=((($92)+1)|0);
      $y=$93;
      __label__ = 9; break;
    case 19: // $94
      var $95=$row;
      var $96=$col;
      var $97=_fc($95, $96);
      $f=$97;
      $c=0;
      __label__ = 20; break;
    case 20: // $98
      var $99=$c;
      var $100=HEAPU32[((_colors)>>2)];
      var $101=((($99))>>>0) < ((($100))>>>0);
      if ($101) { __label__ = 21; break; } else { __label__ = 26; break; }
    case 21: // $102
      var $103=$c;
      var $104=$f;
      var $105=((($103))|0)!=((($104))|0);
      if ($105) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $106
      var $107=$c;
      var $108=((($107)+4)|0);
      var $109=(($sum+($108<<2))|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110))|0)!=0;
      if ($111) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $112
      var $113=$c;
      var $114=(($sum+($113<<2))|0);
      var $115=HEAPU32[(($114)>>2)];
      var $116=$c;
      var $117=((($116)+4)|0);
      var $118=(($sum+($117<<2))|0);
      var $119=HEAPU32[(($118)>>2)];
      var $120=Math.floor(((($115))>>>0)/((($119))>>>0));
      var $121=((($120)) & 65535);
      var $122=$c;
      var $123=$row;
      var $124=HEAPU16[((_width)>>1)];
      var $125=((($124))&65535);
      var $126=((($123)*($125))|0);
      var $127=$col;
      var $128=((($126)+($127))|0);
      var $129=HEAP32[((_image)>>2)];
      var $130=(($129+($128<<3))|0);
      var $131=(($130+($122<<1))|0);
      HEAP16[(($131)>>1)]=$121;
      __label__ = 24; break;
    case 24: // $132
      __label__ = 25; break;
    case 25: // $133
      var $134=$c;
      var $135=((($134)+1)|0);
      $c=$135;
      __label__ = 20; break;
    case 26: // $136
      __label__ = 27; break;
    case 27: // $137
      var $138=$col;
      var $139=((($138)+1)|0);
      $col=$139;
      __label__ = 3; break;
    case 28: // $140
      __label__ = 29; break;
    case 29: // $141
      var $142=$row;
      var $143=((($142)+1)|0);
      $row=$143;
      __label__ = 1; break;
    case 30: // $144
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_border_interpolate["X"]=1;

function _lin_interpolate() {
  var __stackBase__  = STACKTOP; STACKTOP += 32784; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $code=__stackBase__;
      var $ip;
      var $sum=__stackBase__+32768;
      var $c;
      var $i;
      var $x;
      var $y;
      var $row;
      var $col;
      var $shift;
      var $color;
      var $pix;
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str75)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      _border_interpolate(1);
      $row=0;
      __label__ = 3; break;
    case 3: // $9
      var $10=$row;
      var $11=((($10))|0) < 16;
      if ($11) { __label__ = 4; break; } else { __label__ = 26; break; }
    case 4: // $12
      $col=0;
      __label__ = 5; break;
    case 5: // $13
      var $14=$col;
      var $15=((($14))|0) < 16;
      if ($15) { __label__ = 6; break; } else { __label__ = 24; break; }
    case 6: // $16
      var $17=$col;
      var $18=$row;
      var $19=(($code+($18<<11))|0);
      var $20=(($19+($17<<7))|0);
      var $21=(($20)|0);
      $ip=$21;
      var $22=(($sum)|0);
      var $23=$22;
      for (var $$dest = $23, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      $y=-1;
      __label__ = 7; break;
    case 7: // $24
      var $25=$y;
      var $26=((($25))|0) <= 1;
      if ($26) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: // $27
      $x=-1;
      __label__ = 9; break;
    case 9: // $28
      var $29=$x;
      var $30=((($29))|0) <= 1;
      if ($30) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: // $31
      var $32=$y;
      var $33=((($32))|0)==0;
      var $34=((($33))&1);
      var $35=$x;
      var $36=((($35))|0)==0;
      var $37=((($36))&1);
      var $38=((($34)+($37))|0);
      $shift=$38;
      var $39=$shift;
      var $40=((($39))|0)==2;
      if ($40) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $41
      __label__ = 13; break;
    case 12: // $42
      var $43=$row;
      var $44=$y;
      var $45=((($43)+($44))|0);
      var $46=$col;
      var $47=$x;
      var $48=((($46)+($47))|0);
      var $49=_fc($45, $48);
      $color=$49;
      var $50=HEAPU16[((_width)>>1)];
      var $51=((($50))&65535);
      var $52=$y;
      var $53=((($51)*($52))|0);
      var $54=$x;
      var $55=((($53)+($54))|0);
      var $56=(((($55)<<2))|0);
      var $57=$color;
      var $58=((($56)+($57))|0);
      var $59=$ip;
      var $60=(($59+4)|0);
      $ip=$60;
      HEAP32[(($59)>>2)]=$58;
      var $61=$shift;
      var $62=$ip;
      var $63=(($62+4)|0);
      $ip=$63;
      HEAP32[(($62)>>2)]=$61;
      var $64=$color;
      var $65=$ip;
      var $66=(($65+4)|0);
      $ip=$66;
      HEAP32[(($65)>>2)]=$64;
      var $67=$shift;
      var $68=1 << ($67);
      var $69=$color;
      var $70=(($sum+($69<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)+($68))|0);
      HEAP32[(($70)>>2)]=$72;
      __label__ = 13; break;
    case 13: // $73
      var $74=$x;
      var $75=((($74)+1)|0);
      $x=$75;
      __label__ = 9; break;
    case 14: // $76
      __label__ = 15; break;
    case 15: // $77
      var $78=$y;
      var $79=((($78)+1)|0);
      $y=$79;
      __label__ = 7; break;
    case 16: // $80
      $c=0;
      __label__ = 17; break;
    case 17: // $81
      var $82=$c;
      var $83=HEAP32[((_colors)>>2)];
      var $84=((($82))|0) < ((($83))|0);
      if ($84) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: // $85
      var $86=$c;
      var $87=$row;
      var $88=$col;
      var $89=_fc($87, $88);
      var $90=((($86))|0)!=((($89))|0);
      if ($90) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $91
      var $92=$c;
      var $93=$ip;
      var $94=(($93+4)|0);
      $ip=$94;
      HEAP32[(($93)>>2)]=$92;
      var $95=$c;
      var $96=(($sum+($95<<2))|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((256/((($97))|0))|0);
      var $99=$ip;
      var $100=(($99+4)|0);
      $ip=$100;
      HEAP32[(($99)>>2)]=$98;
      __label__ = 20; break;
    case 20: // $101
      __label__ = 21; break;
    case 21: // $102
      var $103=$c;
      var $104=((($103)+1)|0);
      $c=$104;
      __label__ = 17; break;
    case 22: // $105
      __label__ = 23; break;
    case 23: // $106
      var $107=$col;
      var $108=((($107)+1)|0);
      $col=$108;
      __label__ = 5; break;
    case 24: // $109
      __label__ = 25; break;
    case 25: // $110
      var $111=$row;
      var $112=((($111)+1)|0);
      $row=$112;
      __label__ = 3; break;
    case 26: // $113
      $row=1;
      __label__ = 27; break;
    case 27: // $114
      var $115=$row;
      var $116=HEAPU16[((_height)>>1)];
      var $117=((($116))&65535);
      var $118=((($117)-1)|0);
      var $119=((($115))|0) < ((($118))|0);
      if ($119) { __label__ = 28; break; } else { __label__ = 42; break; }
    case 28: // $120
      $col=1;
      __label__ = 29; break;
    case 29: // $121
      var $122=$col;
      var $123=HEAPU16[((_width)>>1)];
      var $124=((($123))&65535);
      var $125=((($124)-1)|0);
      var $126=((($122))|0) < ((($125))|0);
      if ($126) { __label__ = 30; break; } else { __label__ = 40; break; }
    case 30: // $127
      var $128=$row;
      var $129=HEAPU16[((_width)>>1)];
      var $130=((($129))&65535);
      var $131=((($128)*($130))|0);
      var $132=$col;
      var $133=((($131)+($132))|0);
      var $134=HEAP32[((_image)>>2)];
      var $135=(($134+($133<<3))|0);
      var $136=(($135)|0);
      $pix=$136;
      var $137=$col;
      var $138=($137) & 15;
      var $139=$row;
      var $140=($139) & 15;
      var $141=(($code+($140<<11))|0);
      var $142=(($141+($138<<7))|0);
      var $143=(($142)|0);
      $ip=$143;
      var $144=(($sum)|0);
      var $145=$144;
      for (var $$dest = $145, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      $i=8;
      __label__ = 31; break;
    case 31: // $146
      var $147=$i;
      var $148=((($147)-1)|0);
      $i=$148;
      var $149=((($147))|0)!=0;
      if ($149) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: // $150
      var $151=$ip;
      var $152=(($151)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$pix;
      var $155=(($154+($153<<1))|0);
      var $156=HEAPU16[(($155)>>1)];
      var $157=((($156))&65535);
      var $158=$ip;
      var $159=(($158+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=($157) << ($160);
      var $162=$ip;
      var $163=(($162+8)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($sum+($164<<2))|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($166)+($161))|0);
      HEAP32[(($165)>>2)]=$167;
      __label__ = 33; break;
    case 33: // $168
      var $169=$ip;
      var $170=(($169+12)|0);
      $ip=$170;
      __label__ = 31; break;
    case 34: // $171
      var $172=HEAP32[((_colors)>>2)];
      $i=$172;
      __label__ = 35; break;
    case 35: // $173
      var $174=$i;
      var $175=((($174)-1)|0);
      $i=$175;
      var $176=((($175))|0)!=0;
      if ($176) { __label__ = 36; break; } else { __label__ = 38; break; }
    case 36: // $177
      var $178=$ip;
      var $179=(($178)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($sum+($180<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$ip;
      var $184=(($183+4)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=((($182)*($185))|0);
      var $187=($186) >> 8;
      var $188=((($187)) & 65535);
      var $189=$ip;
      var $190=(($189)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$pix;
      var $193=(($192+($191<<1))|0);
      HEAP16[(($193)>>1)]=$188;
      __label__ = 37; break;
    case 37: // $194
      var $195=$ip;
      var $196=(($195+8)|0);
      $ip=$196;
      __label__ = 35; break;
    case 38: // $197
      __label__ = 39; break;
    case 39: // $198
      var $199=$col;
      var $200=((($199)+1)|0);
      $col=$200;
      __label__ = 29; break;
    case 40: // $201
      __label__ = 41; break;
    case 41: // $202
      var $203=$row;
      var $204=((($203)+1)|0);
      $row=$204;
      __label__ = 27; break;
    case 42: // $205
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_lin_interpolate["X"]=1;

function _vng_interpolate() {
  var __stackBase__  = STACKTOP; STACKTOP += 1092; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $brow=__stackBase__;
      var $pix;
      var $prow;
      var $pcol;
      var $ip;
      var $code=__stackBase__+20;
      var $gval=__stackBase__+1044;
      var $gmin;
      var $gmax;
      var $sum=__stackBase__+1076;
      var $row;
      var $col;
      var $x;
      var $y;
      var $x1;
      var $x2;
      var $y1;
      var $y2;
      var $t;
      var $weight;
      var $grads;
      var $color;
      var $diag;
      var $g;
      var $diff;
      var $thold;
      var $num;
      var $c;
      $prow=7;
      $pcol=1;
      _lin_interpolate();
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str76)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      var $9=HEAP32[((_filters)>>2)];
      var $10=((($9))|0)==1;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $11
      $pcol=15;
      $prow=15;
      __label__ = 4; break;
    case 4: // $12
      var $13=$prow;
      var $14=((($13)+1)|0);
      var $15=$pcol;
      var $16=((($15)+1)|0);
      var $17=((($14)*($16))|0);
      var $18=_calloc($17, 1280);
      var $19=$18;
      $ip=$19;
      var $20=$ip;
      var $21=$20;
      _merror($21, ((__str77)|0));
      $row=0;
      __label__ = 5; break;
    case 5: // $22
      var $23=$row;
      var $24=$prow;
      var $25=((($23))|0) <= ((($24))|0);
      if ($25) { __label__ = 6; break; } else { __label__ = 37; break; }
    case 6: // $26
      $col=0;
      __label__ = 7; break;
    case 7: // $27
      var $28=$col;
      var $29=$pcol;
      var $30=((($28))|0) <= ((($29))|0);
      if ($30) { __label__ = 8; break; } else { __label__ = 35; break; }
    case 8: // $31
      var $32=$ip;
      var $33=$col;
      var $34=$row;
      var $35=(($code+($34<<6))|0);
      var $36=(($35+($33<<2))|0);
      HEAP32[(($36)>>2)]=$32;
      HEAP32[((_vng_interpolate_cp)>>2)]=((_vng_interpolate_terms)|0);
      $t=0;
      __label__ = 9; break;
    case 9: // $37
      var $38=$t;
      var $39=((($38))|0) < 64;
      if ($39) { __label__ = 10; break; } else { __label__ = 25; break; }
    case 10: // $40
      var $41=HEAP32[((_vng_interpolate_cp)>>2)];
      var $42=(($41+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$42;
      var $43=HEAP8[($41)];
      var $44=((($43) << 24) >> 24);
      $y1=$44;
      var $45=HEAP32[((_vng_interpolate_cp)>>2)];
      var $46=(($45+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$46;
      var $47=HEAP8[($45)];
      var $48=((($47) << 24) >> 24);
      $x1=$48;
      var $49=HEAP32[((_vng_interpolate_cp)>>2)];
      var $50=(($49+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$50;
      var $51=HEAP8[($49)];
      var $52=((($51) << 24) >> 24);
      $y2=$52;
      var $53=HEAP32[((_vng_interpolate_cp)>>2)];
      var $54=(($53+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$54;
      var $55=HEAP8[($53)];
      var $56=((($55) << 24) >> 24);
      $x2=$56;
      var $57=HEAP32[((_vng_interpolate_cp)>>2)];
      var $58=(($57+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$58;
      var $59=HEAP8[($57)];
      var $60=((($59) << 24) >> 24);
      $weight=$60;
      var $61=HEAP32[((_vng_interpolate_cp)>>2)];
      var $62=(($61+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$62;
      var $63=HEAP8[($61)];
      var $64=((($63) << 24) >> 24);
      $grads=$64;
      var $65=$row;
      var $66=$y1;
      var $67=((($65)+($66))|0);
      var $68=$col;
      var $69=$x1;
      var $70=((($68)+($69))|0);
      var $71=_fc($67, $70);
      $color=$71;
      var $72=$row;
      var $73=$y2;
      var $74=((($72)+($73))|0);
      var $75=$col;
      var $76=$x2;
      var $77=((($75)+($76))|0);
      var $78=_fc($74, $77);
      var $79=$color;
      var $80=((($78))|0)!=((($79))|0);
      if ($80) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $81
      __label__ = 24; break;
    case 12: // $82
      var $83=$row;
      var $84=$col;
      var $85=((($84)+1)|0);
      var $86=_fc($83, $85);
      var $87=$color;
      var $88=((($86))|0)==((($87))|0);
      if ($88) { __label__ = 13; break; } else { var $97 = 0;__label__ = 14; break; }
    case 13: // $89
      var $90=$row;
      var $91=((($90)+1)|0);
      var $92=$col;
      var $93=_fc($91, $92);
      var $94=$color;
      var $95=((($93))|0)==((($94))|0);
      var $97 = $95;__label__ = 14; break;
    case 14: // $96
      var $97;
      var $98=($97) ? 2 : 1;
      $diag=$98;
      var $99=$y1;
      var $100=$y2;
      var $101=((($99)-($100))|0);
      var $102=_abs($101);
      var $103=$diag;
      var $104=((($102))|0)==((($103))|0);
      if ($104) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $105
      var $106=$x1;
      var $107=$x2;
      var $108=((($106)-($107))|0);
      var $109=_abs($108);
      var $110=$diag;
      var $111=((($109))|0)==((($110))|0);
      if ($111) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $112
      __label__ = 24; break;
    case 17: // $113
      var $114=$y1;
      var $115=HEAPU16[((_width)>>1)];
      var $116=((($115))&65535);
      var $117=((($114)*($116))|0);
      var $118=$x1;
      var $119=((($117)+($118))|0);
      var $120=(((($119)<<2))|0);
      var $121=$color;
      var $122=((($120)+($121))|0);
      var $123=$ip;
      var $124=(($123+4)|0);
      $ip=$124;
      HEAP32[(($123)>>2)]=$122;
      var $125=$y2;
      var $126=HEAPU16[((_width)>>1)];
      var $127=((($126))&65535);
      var $128=((($125)*($127))|0);
      var $129=$x2;
      var $130=((($128)+($129))|0);
      var $131=(((($130)<<2))|0);
      var $132=$color;
      var $133=((($131)+($132))|0);
      var $134=$ip;
      var $135=(($134+4)|0);
      $ip=$135;
      HEAP32[(($134)>>2)]=$133;
      var $136=$weight;
      var $137=$ip;
      var $138=(($137+4)|0);
      $ip=$138;
      HEAP32[(($137)>>2)]=$136;
      $g=0;
      __label__ = 18; break;
    case 18: // $139
      var $140=$g;
      var $141=((($140))|0) < 8;
      if ($141) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: // $142
      var $143=$grads;
      var $144=$g;
      var $145=1 << ($144);
      var $146=($143) & ($145);
      var $147=((($146))|0)!=0;
      if ($147) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $148
      var $149=$g;
      var $150=$ip;
      var $151=(($150+4)|0);
      $ip=$151;
      HEAP32[(($150)>>2)]=$149;
      __label__ = 21; break;
    case 21: // $152
      __label__ = 22; break;
    case 22: // $153
      var $154=$g;
      var $155=((($154)+1)|0);
      $g=$155;
      __label__ = 18; break;
    case 23: // $156
      var $157=$ip;
      var $158=(($157+4)|0);
      $ip=$158;
      HEAP32[(($157)>>2)]=-1;
      __label__ = 24; break;
    case 24: // $159
      var $160=$t;
      var $161=((($160)+1)|0);
      $t=$161;
      __label__ = 9; break;
    case 25: // $162
      var $163=$ip;
      var $164=(($163+4)|0);
      $ip=$164;
      HEAP32[(($163)>>2)]=2147483647;
      HEAP32[((_vng_interpolate_cp)>>2)]=((_vng_interpolate_chood)|0);
      $g=0;
      __label__ = 26; break;
    case 26: // $165
      var $166=$g;
      var $167=((($166))|0) < 8;
      if ($167) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: // $168
      var $169=HEAP32[((_vng_interpolate_cp)>>2)];
      var $170=(($169+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$170;
      var $171=HEAP8[($169)];
      var $172=((($171) << 24) >> 24);
      $y=$172;
      var $173=HEAP32[((_vng_interpolate_cp)>>2)];
      var $174=(($173+1)|0);
      HEAP32[((_vng_interpolate_cp)>>2)]=$174;
      var $175=HEAP8[($173)];
      var $176=((($175) << 24) >> 24);
      $x=$176;
      var $177=$y;
      var $178=HEAPU16[((_width)>>1)];
      var $179=((($178))&65535);
      var $180=((($177)*($179))|0);
      var $181=$x;
      var $182=((($180)+($181))|0);
      var $183=(((($182)<<2))|0);
      var $184=$ip;
      var $185=(($184+4)|0);
      $ip=$185;
      HEAP32[(($184)>>2)]=$183;
      var $186=$row;
      var $187=$col;
      var $188=_fc($186, $187);
      $color=$188;
      var $189=$row;
      var $190=$y;
      var $191=((($189)+($190))|0);
      var $192=$col;
      var $193=$x;
      var $194=((($192)+($193))|0);
      var $195=_fc($191, $194);
      var $196=$color;
      var $197=((($195))|0)!=((($196))|0);
      if ($197) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $198
      var $199=$row;
      var $200=$y;
      var $201=(((($200)<<1))|0);
      var $202=((($199)+($201))|0);
      var $203=$col;
      var $204=$x;
      var $205=(((($204)<<1))|0);
      var $206=((($203)+($205))|0);
      var $207=_fc($202, $206);
      var $208=$color;
      var $209=((($207))|0)==((($208))|0);
      if ($209) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $210
      var $211=$y;
      var $212=HEAPU16[((_width)>>1)];
      var $213=((($212))&65535);
      var $214=((($211)*($213))|0);
      var $215=$x;
      var $216=((($214)+($215))|0);
      var $217=(((($216)<<3))|0);
      var $218=$color;
      var $219=((($217)+($218))|0);
      var $220=$ip;
      var $221=(($220+4)|0);
      $ip=$221;
      HEAP32[(($220)>>2)]=$219;
      __label__ = 31; break;
    case 30: // $222
      var $223=$ip;
      var $224=(($223+4)|0);
      $ip=$224;
      HEAP32[(($223)>>2)]=0;
      __label__ = 31; break;
    case 31: // $225
      __label__ = 32; break;
    case 32: // $226
      var $227=$g;
      var $228=((($227)+1)|0);
      $g=$228;
      __label__ = 26; break;
    case 33: // $229
      __label__ = 34; break;
    case 34: // $230
      var $231=$col;
      var $232=((($231)+1)|0);
      $col=$232;
      __label__ = 7; break;
    case 35: // $233
      __label__ = 36; break;
    case 36: // $234
      var $235=$row;
      var $236=((($235)+1)|0);
      $row=$236;
      __label__ = 5; break;
    case 37: // $237
      var $238=HEAPU16[((_width)>>1)];
      var $239=((($238))&65535);
      var $240=((($239)*3)|0);
      var $241=_calloc($240, 8);
      var $242=$241;
      var $243=(($brow+16)|0);
      HEAP32[(($243)>>2)]=$242;
      var $244=(($brow+16)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$245;
      _merror($246, ((__str77)|0));
      $row=0;
      __label__ = 38; break;
    case 38: // $247
      var $248=$row;
      var $249=((($248))|0) < 3;
      if ($249) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: // $250
      var $251=(($brow+16)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$row;
      var $254=HEAPU16[((_width)>>1)];
      var $255=((($254))&65535);
      var $256=((($253)*($255))|0);
      var $257=(($252+($256<<3))|0);
      var $258=$row;
      var $259=(($brow+($258<<2))|0);
      HEAP32[(($259)>>2)]=$257;
      __label__ = 40; break;
    case 40: // $260
      var $261=$row;
      var $262=((($261)+1)|0);
      $row=$262;
      __label__ = 38; break;
    case 41: // $263
      $row=2;
      __label__ = 42; break;
    case 42: // $264
      var $265=$row;
      var $266=HEAPU16[((_height)>>1)];
      var $267=((($266))&65535);
      var $268=((($267)-2)|0);
      var $269=((($265))|0) < ((($268))|0);
      if ($269) { __label__ = 43; break; } else { __label__ = 102; break; }
    case 43: // $270
      $col=2;
      __label__ = 44; break;
    case 44: // $271
      var $272=$col;
      var $273=HEAPU16[((_width)>>1)];
      var $274=((($273))&65535);
      var $275=((($274)-2)|0);
      var $276=((($272))|0) < ((($275))|0);
      if ($276) { __label__ = 45; break; } else { __label__ = 94; break; }
    case 45: // $277
      var $278=$row;
      var $279=HEAPU16[((_width)>>1)];
      var $280=((($279))&65535);
      var $281=((($278)*($280))|0);
      var $282=$col;
      var $283=((($281)+($282))|0);
      var $284=HEAP32[((_image)>>2)];
      var $285=(($284+($283<<3))|0);
      var $286=(($285)|0);
      $pix=$286;
      var $287=$col;
      var $288=$pcol;
      var $289=($287) & ($288);
      var $290=$row;
      var $291=$prow;
      var $292=($290) & ($291);
      var $293=(($code+($292<<6))|0);
      var $294=(($293+($289<<2))|0);
      var $295=HEAP32[(($294)>>2)];
      $ip=$295;
      var $296=(($gval)|0);
      var $297=$296;
      _memset($297, 0, 32, 1);
      __label__ = 46; break;
    case 46: // $298
      var $299=$ip;
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      $g=$301;
      var $302=((($301))|0)!=2147483647;
      if ($302) { __label__ = 47; break; } else { __label__ = 53; break; }
    case 47: // $303
      var $304=$g;
      var $305=$pix;
      var $306=(($305+($304<<1))|0);
      var $307=HEAPU16[(($306)>>1)];
      var $308=((($307))&65535);
      var $309=$ip;
      var $310=(($309+4)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=$pix;
      var $313=(($312+($311<<1))|0);
      var $314=HEAPU16[(($313)>>1)];
      var $315=((($314))&65535);
      var $316=((($308)-($315))|0);
      var $317=$g;
      var $318=$pix;
      var $319=(($318+($317<<1))|0);
      var $320=HEAPU16[(($319)>>1)];
      var $321=((($320))&65535);
      var $322=$ip;
      var $323=(($322+4)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$pix;
      var $326=(($325+($324<<1))|0);
      var $327=HEAPU16[(($326)>>1)];
      var $328=((($327))&65535);
      var $329=((($321)-($328))|0);
      var $330=($329) >> 31;
      var $331=($316) ^ ($330);
      var $332=$g;
      var $333=$pix;
      var $334=(($333+($332<<1))|0);
      var $335=HEAPU16[(($334)>>1)];
      var $336=((($335))&65535);
      var $337=$ip;
      var $338=(($337+4)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=$pix;
      var $341=(($340+($339<<1))|0);
      var $342=HEAPU16[(($341)>>1)];
      var $343=((($342))&65535);
      var $344=((($336)-($343))|0);
      var $345=($344) >> 31;
      var $346=((($331)-($345))|0);
      var $347=$ip;
      var $348=(($347+8)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=($346) << ($349);
      $diff=$350;
      var $351=$diff;
      var $352=$ip;
      var $353=(($352+12)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=(($gval+($354<<2))|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=((($356)+($351))|0);
      HEAP32[(($355)>>2)]=$357;
      var $358=$ip;
      var $359=(($358+20)|0);
      $ip=$359;
      var $360=$ip;
      var $361=(($360-4)|0);
      var $362=HEAP32[(($361)>>2)];
      $g=$362;
      var $363=((($362))|0)==-1;
      if ($363) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: // $364
      __label__ = 46; break;
    case 49: // $365
      var $366=$diff;
      var $367=$g;
      var $368=(($gval+($367<<2))|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=((($369)+($366))|0);
      HEAP32[(($368)>>2)]=$370;
      __label__ = 50; break;
    case 50: // $371
      var $372=$ip;
      var $373=(($372+4)|0);
      $ip=$373;
      var $374=HEAP32[(($372)>>2)];
      $g=$374;
      var $375=((($374))|0)!=-1;
      if ($375) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: // $376
      var $377=$diff;
      var $378=$g;
      var $379=(($gval+($378<<2))|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=((($380)+($377))|0);
      HEAP32[(($379)>>2)]=$381;
      __label__ = 50; break;
    case 52: // $382
      __label__ = 46; break;
    case 53: // $383
      var $384=$ip;
      var $385=(($384+4)|0);
      $ip=$385;
      var $386=(($gval)|0);
      var $387=HEAP32[(($386)>>2)];
      $gmax=$387;
      $gmin=$387;
      $g=1;
      __label__ = 54; break;
    case 54: // $388
      var $389=$g;
      var $390=((($389))|0) < 8;
      if ($390) { __label__ = 55; break; } else { __label__ = 61; break; }
    case 55: // $391
      var $392=$gmin;
      var $393=$g;
      var $394=(($gval+($393<<2))|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=((($392))|0) > ((($395))|0);
      if ($396) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: // $397
      var $398=$g;
      var $399=(($gval+($398<<2))|0);
      var $400=HEAP32[(($399)>>2)];
      $gmin=$400;
      __label__ = 57; break;
    case 57: // $401
      var $402=$gmax;
      var $403=$g;
      var $404=(($gval+($403<<2))|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=((($402))|0) < ((($405))|0);
      if ($406) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: // $407
      var $408=$g;
      var $409=(($gval+($408<<2))|0);
      var $410=HEAP32[(($409)>>2)];
      $gmax=$410;
      __label__ = 59; break;
    case 59: // $411
      __label__ = 60; break;
    case 60: // $412
      var $413=$g;
      var $414=((($413)+1)|0);
      $g=$414;
      __label__ = 54; break;
    case 61: // $415
      var $416=$gmax;
      var $417=((($416))|0)==0;
      if ($417) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: // $418
      var $419=$col;
      var $420=(($brow+8)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421+($419<<3))|0);
      var $423=(($422)|0);
      var $424=$423;
      var $425=$pix;
      var $426=$425;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($424)]=HEAP8[($426)]; HEAP8[($424+1)]=HEAP8[($426+1)]; HEAP8[($424+2)]=HEAP8[($426+2)]; HEAP8[($424+3)]=HEAP8[($426+3)]; HEAP8[($424+4)]=HEAP8[($426+4)]; HEAP8[($424+5)]=HEAP8[($426+5)]; HEAP8[($424+6)]=HEAP8[($426+6)]; HEAP8[($424+7)]=HEAP8[($426+7)];
      __label__ = 93; break;
    case 63: // $427
      var $428=$gmin;
      var $429=$gmax;
      var $430=($429) >> 1;
      var $431=((($428)+($430))|0);
      $thold=$431;
      var $432=(($sum)|0);
      var $433=$432;
      for (var $$dest = $433, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0
      };
      var $434=$row;
      var $435=$col;
      var $436=_fc($434, $435);
      $color=$436;
      $g=0;
      $num=0;
      __label__ = 64; break;
    case 64: // $437
      var $438=$g;
      var $439=((($438))|0) < 8;
      if ($439) { __label__ = 65; break; } else { __label__ = 77; break; }
    case 65: // $440
      var $441=$g;
      var $442=(($gval+($441<<2))|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=$thold;
      var $445=((($443))|0) <= ((($444))|0);
      if ($445) { __label__ = 66; break; } else { __label__ = 75; break; }
    case 66: // $446
      $c=0;
      __label__ = 67; break;
    case 67: // $447
      var $448=$c;
      var $449=HEAP32[((_colors)>>2)];
      var $450=((($448))|0) < ((($449))|0);
      if ($450) { __label__ = 68; break; } else { __label__ = 74; break; }
    case 68: // $451
      var $452=$c;
      var $453=$color;
      var $454=((($452))|0)==((($453))|0);
      if ($454) { __label__ = 69; break; } else { __label__ = 71; break; }
    case 69: // $455
      var $456=$ip;
      var $457=(($456+4)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=((($458))|0)!=0;
      if ($459) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: // $460
      var $461=$c;
      var $462=$pix;
      var $463=(($462+($461<<1))|0);
      var $464=HEAPU16[(($463)>>1)];
      var $465=((($464))&65535);
      var $466=$ip;
      var $467=(($466+4)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=$pix;
      var $470=(($469+($468<<1))|0);
      var $471=HEAPU16[(($470)>>1)];
      var $472=((($471))&65535);
      var $473=((($465)+($472))|0);
      var $474=($473) >> 1;
      var $475=$c;
      var $476=(($sum+($475<<2))|0);
      var $477=HEAP32[(($476)>>2)];
      var $478=((($477)+($474))|0);
      HEAP32[(($476)>>2)]=$478;
      __label__ = 72; break;
    case 71: // $479
      var $480=$ip;
      var $481=(($480)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=$c;
      var $484=((($482)+($483))|0);
      var $485=$pix;
      var $486=(($485+($484<<1))|0);
      var $487=HEAPU16[(($486)>>1)];
      var $488=((($487))&65535);
      var $489=$c;
      var $490=(($sum+($489<<2))|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=((($491)+($488))|0);
      HEAP32[(($490)>>2)]=$492;
      __label__ = 72; break;
    case 72: // $493
      __label__ = 73; break;
    case 73: // $494
      var $495=$c;
      var $496=((($495)+1)|0);
      $c=$496;
      __label__ = 67; break;
    case 74: // $497
      var $498=$num;
      var $499=((($498)+1)|0);
      $num=$499;
      __label__ = 75; break;
    case 75: // $500
      __label__ = 76; break;
    case 76: // $501
      var $502=$g;
      var $503=((($502)+1)|0);
      $g=$503;
      var $504=$ip;
      var $505=(($504+8)|0);
      $ip=$505;
      __label__ = 64; break;
    case 77: // $506
      $c=0;
      __label__ = 78; break;
    case 78: // $507
      var $508=$c;
      var $509=HEAP32[((_colors)>>2)];
      var $510=((($508))|0) < ((($509))|0);
      if ($510) { __label__ = 79; break; } else { __label__ = 92; break; }
    case 79: // $511
      var $512=$color;
      var $513=$pix;
      var $514=(($513+($512<<1))|0);
      var $515=HEAPU16[(($514)>>1)];
      var $516=((($515))&65535);
      $t=$516;
      var $517=$c;
      var $518=$color;
      var $519=((($517))|0)!=((($518))|0);
      if ($519) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: // $520
      var $521=$c;
      var $522=(($sum+($521<<2))|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=$color;
      var $525=(($sum+($524<<2))|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=((($523)-($526))|0);
      var $528=$num;
      var $529=((((($527))|0)/((($528))|0))|0);
      var $530=$t;
      var $531=((($530)+($529))|0);
      $t=$531;
      __label__ = 81; break;
    case 81: // $532
      var $533=$t;
      var $534=((($533))|0) < 65535;
      if ($534) { __label__ = 82; break; } else { __label__ = 83; break; }
    case 82: // $535
      var $536=$t;
      var $539 = $536;__label__ = 84; break;
    case 83: // $537
      var $539 = 65535;__label__ = 84; break;
    case 84: // $538
      var $539;
      var $540=0 > ((($539))|0);
      if ($540) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: // $541
      var $551 = 0;__label__ = 90; break;
    case 86: // $542
      var $543=$t;
      var $544=((($543))|0) < 65535;
      if ($544) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: // $545
      var $546=$t;
      var $549 = $546;__label__ = 89; break;
    case 88: // $547
      var $549 = 65535;__label__ = 89; break;
    case 89: // $548
      var $549;
      var $551 = $549;__label__ = 90; break;
    case 90: // $550
      var $551;
      var $552=((($551)) & 65535);
      var $553=$c;
      var $554=$col;
      var $555=(($brow+8)|0);
      var $556=HEAP32[(($555)>>2)];
      var $557=(($556+($554<<3))|0);
      var $558=(($557+($553<<1))|0);
      HEAP16[(($558)>>1)]=$552;
      __label__ = 91; break;
    case 91: // $559
      var $560=$c;
      var $561=((($560)+1)|0);
      $c=$561;
      __label__ = 78; break;
    case 92: // $562
      __label__ = 93; break;
    case 93: // $563
      var $564=$col;
      var $565=((($564)+1)|0);
      $col=$565;
      __label__ = 44; break;
    case 94: // $566
      var $567=$row;
      var $568=((($567))|0) > 3;
      if ($568) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: // $569
      var $570=$row;
      var $571=((($570)-2)|0);
      var $572=HEAPU16[((_width)>>1)];
      var $573=((($572))&65535);
      var $574=((($571)*($573))|0);
      var $575=((($574)+2)|0);
      var $576=HEAP32[((_image)>>2)];
      var $577=(($576+($575<<3))|0);
      var $578=(($577)|0);
      var $579=$578;
      var $580=(($brow)|0);
      var $581=HEAP32[(($580)>>2)];
      var $582=(($581+16)|0);
      var $583=$582;
      var $584=HEAPU16[((_width)>>1)];
      var $585=((($584))&65535);
      var $586=((($585)-4)|0);
      var $587=(((($586)<<3))|0);
      assert($587 % 1 === 0, 'memcpy given ' + $587 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($579, $583, $587, 1);
      __label__ = 96; break;
    case 96: // $588
      $g=0;
      __label__ = 97; break;
    case 97: // $589
      var $590=$g;
      var $591=((($590))|0) < 4;
      if ($591) { __label__ = 98; break; } else { __label__ = 100; break; }
    case 98: // $592
      var $593=$g;
      var $594=(($brow+($593<<2))|0);
      var $595=HEAP32[(($594)>>2)];
      var $596=$g;
      var $597=((($596)-1)|0);
      var $598=($597) & 3;
      var $599=(($brow+($598<<2))|0);
      HEAP32[(($599)>>2)]=$595;
      __label__ = 99; break;
    case 99: // $600
      var $601=$g;
      var $602=((($601)+1)|0);
      $g=$602;
      __label__ = 97; break;
    case 100: // $603
      __label__ = 101; break;
    case 101: // $604
      var $605=$row;
      var $606=((($605)+1)|0);
      $row=$606;
      __label__ = 42; break;
    case 102: // $607
      var $608=$row;
      var $609=((($608)-2)|0);
      var $610=HEAPU16[((_width)>>1)];
      var $611=((($610))&65535);
      var $612=((($609)*($611))|0);
      var $613=((($612)+2)|0);
      var $614=HEAP32[((_image)>>2)];
      var $615=(($614+($613<<3))|0);
      var $616=(($615)|0);
      var $617=$616;
      var $618=(($brow)|0);
      var $619=HEAP32[(($618)>>2)];
      var $620=(($619+16)|0);
      var $621=$620;
      var $622=HEAPU16[((_width)>>1)];
      var $623=((($622))&65535);
      var $624=((($623)-4)|0);
      var $625=(((($624)<<3))|0);
      assert($625 % 1 === 0, 'memcpy given ' + $625 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($617, $621, $625, 1);
      var $626=$row;
      var $627=((($626)-1)|0);
      var $628=HEAPU16[((_width)>>1)];
      var $629=((($628))&65535);
      var $630=((($627)*($629))|0);
      var $631=((($630)+2)|0);
      var $632=HEAP32[((_image)>>2)];
      var $633=(($632+($631<<3))|0);
      var $634=(($633)|0);
      var $635=$634;
      var $636=(($brow+4)|0);
      var $637=HEAP32[(($636)>>2)];
      var $638=(($637+16)|0);
      var $639=$638;
      var $640=HEAPU16[((_width)>>1)];
      var $641=((($640))&65535);
      var $642=((($641)-4)|0);
      var $643=(((($642)<<3))|0);
      assert($643 % 1 === 0, 'memcpy given ' + $643 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($635, $639, $643, 1);
      var $644=(($brow+16)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=$645;
      _free($646);
      var $647=(($code)|0);
      var $648=(($647)|0);
      var $649=HEAP32[(($648)>>2)];
      var $650=$649;
      _free($650);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_vng_interpolate["X"]=1;

function _ppg_interpolate() {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $dir=__stackBase__;
      var $row;
      var $col;
      var $diff=__stackBase__+20;
      var $guess=__stackBase__+28;
      var $c;
      var $d;
      var $i;
      var $pix;
      var $1=(($dir)|0);
      HEAP32[(($1)>>2)]=1;
      var $2=(($1+4)|0);
      var $3=HEAPU16[((_width)>>1)];
      var $4=((($3))&65535);
      HEAP32[(($2)>>2)]=$4;
      var $5=(($2+4)|0);
      HEAP32[(($5)>>2)]=-1;
      var $6=(($5+4)|0);
      var $7=HEAPU16[((_width)>>1)];
      var $8=((($7))&65535);
      var $9=(((-($8)))|0);
      HEAP32[(($6)>>2)]=$9;
      var $10=(($6+4)|0);
      HEAP32[(($10)>>2)]=1;
      _border_interpolate(3);
      var $11=HEAP32[((_verbose)>>2)];
      var $12=((($11))|0)!=0;
      if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $13
      var $14=HEAP32[((__impure_ptr)>>2)];
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_fprintf($16, ((__str78)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $18
      $row=3;
      __label__ = 3; break;
    case 3: // $19
      var $20=$row;
      var $21=HEAPU16[((_height)>>1)];
      var $22=((($21))&65535);
      var $23=((($22)-3)|0);
      var $24=((($20))|0) < ((($23))|0);
      if ($24) { __label__ = 4; break; } else { __label__ = 35; break; }
    case 4: // $25
      var $26=HEAPU32[((_filters)>>2)];
      var $27=$row;
      var $28=($27) << 1;
      var $29=($28) & 14;
      var $30=((($29)+1)|0);
      var $31=($30) << 1;
      var $32=($26) >>> ((($31))>>>0);
      var $33=($32) & 3;
      var $34=($33) & 1;
      var $35=((($34)+3)|0);
      $col=$35;
      var $36=HEAPU32[((_filters)>>2)];
      var $37=$row;
      var $38=($37) << 1;
      var $39=($38) & 14;
      var $40=$col;
      var $41=($40) & 1;
      var $42=((($39)+($41))|0);
      var $43=($42) << 1;
      var $44=($36) >>> ((($43))>>>0);
      var $45=($44) & 3;
      $c=$45;
      __label__ = 5; break;
    case 5: // $46
      var $47=$col;
      var $48=HEAPU16[((_width)>>1)];
      var $49=((($48))&65535);
      var $50=((($49)-3)|0);
      var $51=((($47))|0) < ((($50))|0);
      if ($51) { __label__ = 6; break; } else { __label__ = 33; break; }
    case 6: // $52
      var $53=HEAP32[((_image)>>2)];
      var $54=$row;
      var $55=HEAPU16[((_width)>>1)];
      var $56=((($55))&65535);
      var $57=((($54)*($56))|0);
      var $58=(($53+($57<<3))|0);
      var $59=$col;
      var $60=(($58+($59<<3))|0);
      $pix=$60;
      $i=0;
      __label__ = 7; break;
    case 7: // $61
      var $62=$i;
      var $63=(($dir+($62<<2))|0);
      var $64=HEAP32[(($63)>>2)];
      $d=$64;
      var $65=((($64))|0) > 0;
      if ($65) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $66
      var $67=$d;
      var $68=(((-($67)))|0);
      var $69=$pix;
      var $70=(($69+($68<<3))|0);
      var $71=(($70+2)|0);
      var $72=HEAPU16[(($71)>>1)];
      var $73=((($72))&65535);
      var $74=$c;
      var $75=$pix;
      var $76=(($75)|0);
      var $77=(($76+($74<<1))|0);
      var $78=HEAPU16[(($77)>>1)];
      var $79=((($78))&65535);
      var $80=((($73)+($79))|0);
      var $81=$d;
      var $82=$pix;
      var $83=(($82+($81<<3))|0);
      var $84=(($83+2)|0);
      var $85=HEAPU16[(($84)>>1)];
      var $86=((($85))&65535);
      var $87=((($80)+($86))|0);
      var $88=(((($87)<<1))|0);
      var $89=$c;
      var $90=$d;
      var $91=((($90)*-2)|0);
      var $92=$pix;
      var $93=(($92+($91<<3))|0);
      var $94=(($93+($89<<1))|0);
      var $95=HEAPU16[(($94)>>1)];
      var $96=((($95))&65535);
      var $97=((($88)-($96))|0);
      var $98=$c;
      var $99=$d;
      var $100=(((($99)<<1))|0);
      var $101=$pix;
      var $102=(($101+($100<<3))|0);
      var $103=(($102+($98<<1))|0);
      var $104=HEAPU16[(($103)>>1)];
      var $105=((($104))&65535);
      var $106=((($97)-($105))|0);
      var $107=$i;
      var $108=(($guess+($107<<2))|0);
      HEAP32[(($108)>>2)]=$106;
      var $109=$c;
      var $110=$d;
      var $111=((($110)*-2)|0);
      var $112=$pix;
      var $113=(($112+($111<<3))|0);
      var $114=(($113+($109<<1))|0);
      var $115=HEAPU16[(($114)>>1)];
      var $116=((($115))&65535);
      var $117=$c;
      var $118=$pix;
      var $119=(($118)|0);
      var $120=(($119+($117<<1))|0);
      var $121=HEAPU16[(($120)>>1)];
      var $122=((($121))&65535);
      var $123=((($116)-($122))|0);
      var $124=$c;
      var $125=$d;
      var $126=((($125)*-2)|0);
      var $127=$pix;
      var $128=(($127+($126<<3))|0);
      var $129=(($128+($124<<1))|0);
      var $130=HEAPU16[(($129)>>1)];
      var $131=((($130))&65535);
      var $132=$c;
      var $133=$pix;
      var $134=(($133)|0);
      var $135=(($134+($132<<1))|0);
      var $136=HEAPU16[(($135)>>1)];
      var $137=((($136))&65535);
      var $138=((($131)-($137))|0);
      var $139=($138) >> 31;
      var $140=($123) ^ ($139);
      var $141=$c;
      var $142=$d;
      var $143=((($142)*-2)|0);
      var $144=$pix;
      var $145=(($144+($143<<3))|0);
      var $146=(($145+($141<<1))|0);
      var $147=HEAPU16[(($146)>>1)];
      var $148=((($147))&65535);
      var $149=$c;
      var $150=$pix;
      var $151=(($150)|0);
      var $152=(($151+($149<<1))|0);
      var $153=HEAPU16[(($152)>>1)];
      var $154=((($153))&65535);
      var $155=((($148)-($154))|0);
      var $156=($155) >> 31;
      var $157=((($140)-($156))|0);
      var $158=$c;
      var $159=$d;
      var $160=(((($159)<<1))|0);
      var $161=$pix;
      var $162=(($161+($160<<3))|0);
      var $163=(($162+($158<<1))|0);
      var $164=HEAPU16[(($163)>>1)];
      var $165=((($164))&65535);
      var $166=$c;
      var $167=$pix;
      var $168=(($167)|0);
      var $169=(($168+($166<<1))|0);
      var $170=HEAPU16[(($169)>>1)];
      var $171=((($170))&65535);
      var $172=((($165)-($171))|0);
      var $173=$c;
      var $174=$d;
      var $175=(((($174)<<1))|0);
      var $176=$pix;
      var $177=(($176+($175<<3))|0);
      var $178=(($177+($173<<1))|0);
      var $179=HEAPU16[(($178)>>1)];
      var $180=((($179))&65535);
      var $181=$c;
      var $182=$pix;
      var $183=(($182)|0);
      var $184=(($183+($181<<1))|0);
      var $185=HEAPU16[(($184)>>1)];
      var $186=((($185))&65535);
      var $187=((($180)-($186))|0);
      var $188=($187) >> 31;
      var $189=($172) ^ ($188);
      var $190=$c;
      var $191=$d;
      var $192=(((($191)<<1))|0);
      var $193=$pix;
      var $194=(($193+($192<<3))|0);
      var $195=(($194+($190<<1))|0);
      var $196=HEAPU16[(($195)>>1)];
      var $197=((($196))&65535);
      var $198=$c;
      var $199=$pix;
      var $200=(($199)|0);
      var $201=(($200+($198<<1))|0);
      var $202=HEAPU16[(($201)>>1)];
      var $203=((($202))&65535);
      var $204=((($197)-($203))|0);
      var $205=($204) >> 31;
      var $206=((($189)-($205))|0);
      var $207=((($157)+($206))|0);
      var $208=$d;
      var $209=(((-($208)))|0);
      var $210=$pix;
      var $211=(($210+($209<<3))|0);
      var $212=(($211+2)|0);
      var $213=HEAPU16[(($212)>>1)];
      var $214=((($213))&65535);
      var $215=$d;
      var $216=$pix;
      var $217=(($216+($215<<3))|0);
      var $218=(($217+2)|0);
      var $219=HEAPU16[(($218)>>1)];
      var $220=((($219))&65535);
      var $221=((($214)-($220))|0);
      var $222=$d;
      var $223=(((-($222)))|0);
      var $224=$pix;
      var $225=(($224+($223<<3))|0);
      var $226=(($225+2)|0);
      var $227=HEAPU16[(($226)>>1)];
      var $228=((($227))&65535);
      var $229=$d;
      var $230=$pix;
      var $231=(($230+($229<<3))|0);
      var $232=(($231+2)|0);
      var $233=HEAPU16[(($232)>>1)];
      var $234=((($233))&65535);
      var $235=((($228)-($234))|0);
      var $236=($235) >> 31;
      var $237=($221) ^ ($236);
      var $238=$d;
      var $239=(((-($238)))|0);
      var $240=$pix;
      var $241=(($240+($239<<3))|0);
      var $242=(($241+2)|0);
      var $243=HEAPU16[(($242)>>1)];
      var $244=((($243))&65535);
      var $245=$d;
      var $246=$pix;
      var $247=(($246+($245<<3))|0);
      var $248=(($247+2)|0);
      var $249=HEAPU16[(($248)>>1)];
      var $250=((($249))&65535);
      var $251=((($244)-($250))|0);
      var $252=($251) >> 31;
      var $253=((($237)-($252))|0);
      var $254=((($207)+($253))|0);
      var $255=((($254)*3)|0);
      var $256=$d;
      var $257=((($256)*3)|0);
      var $258=$pix;
      var $259=(($258+($257<<3))|0);
      var $260=(($259+2)|0);
      var $261=HEAPU16[(($260)>>1)];
      var $262=((($261))&65535);
      var $263=$d;
      var $264=$pix;
      var $265=(($264+($263<<3))|0);
      var $266=(($265+2)|0);
      var $267=HEAPU16[(($266)>>1)];
      var $268=((($267))&65535);
      var $269=((($262)-($268))|0);
      var $270=$d;
      var $271=((($270)*3)|0);
      var $272=$pix;
      var $273=(($272+($271<<3))|0);
      var $274=(($273+2)|0);
      var $275=HEAPU16[(($274)>>1)];
      var $276=((($275))&65535);
      var $277=$d;
      var $278=$pix;
      var $279=(($278+($277<<3))|0);
      var $280=(($279+2)|0);
      var $281=HEAPU16[(($280)>>1)];
      var $282=((($281))&65535);
      var $283=((($276)-($282))|0);
      var $284=($283) >> 31;
      var $285=($269) ^ ($284);
      var $286=$d;
      var $287=((($286)*3)|0);
      var $288=$pix;
      var $289=(($288+($287<<3))|0);
      var $290=(($289+2)|0);
      var $291=HEAPU16[(($290)>>1)];
      var $292=((($291))&65535);
      var $293=$d;
      var $294=$pix;
      var $295=(($294+($293<<3))|0);
      var $296=(($295+2)|0);
      var $297=HEAPU16[(($296)>>1)];
      var $298=((($297))&65535);
      var $299=((($292)-($298))|0);
      var $300=($299) >> 31;
      var $301=((($285)-($300))|0);
      var $302=$d;
      var $303=((($302)*-3)|0);
      var $304=$pix;
      var $305=(($304+($303<<3))|0);
      var $306=(($305+2)|0);
      var $307=HEAPU16[(($306)>>1)];
      var $308=((($307))&65535);
      var $309=$d;
      var $310=(((-($309)))|0);
      var $311=$pix;
      var $312=(($311+($310<<3))|0);
      var $313=(($312+2)|0);
      var $314=HEAPU16[(($313)>>1)];
      var $315=((($314))&65535);
      var $316=((($308)-($315))|0);
      var $317=$d;
      var $318=((($317)*-3)|0);
      var $319=$pix;
      var $320=(($319+($318<<3))|0);
      var $321=(($320+2)|0);
      var $322=HEAPU16[(($321)>>1)];
      var $323=((($322))&65535);
      var $324=$d;
      var $325=(((-($324)))|0);
      var $326=$pix;
      var $327=(($326+($325<<3))|0);
      var $328=(($327+2)|0);
      var $329=HEAPU16[(($328)>>1)];
      var $330=((($329))&65535);
      var $331=((($323)-($330))|0);
      var $332=($331) >> 31;
      var $333=($316) ^ ($332);
      var $334=$d;
      var $335=((($334)*-3)|0);
      var $336=$pix;
      var $337=(($336+($335<<3))|0);
      var $338=(($337+2)|0);
      var $339=HEAPU16[(($338)>>1)];
      var $340=((($339))&65535);
      var $341=$d;
      var $342=(((-($341)))|0);
      var $343=$pix;
      var $344=(($343+($342<<3))|0);
      var $345=(($344+2)|0);
      var $346=HEAPU16[(($345)>>1)];
      var $347=((($346))&65535);
      var $348=((($340)-($347))|0);
      var $349=($348) >> 31;
      var $350=((($333)-($349))|0);
      var $351=((($301)+($350))|0);
      var $352=(((($351)<<1))|0);
      var $353=((($255)+($352))|0);
      var $354=$i;
      var $355=(($diff+($354<<2))|0);
      HEAP32[(($355)>>2)]=$353;
      __label__ = 9; break;
    case 9: // $356
      var $357=$i;
      var $358=((($357)+1)|0);
      $i=$358;
      __label__ = 7; break;
    case 10: // $359
      var $360=(($diff)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($diff+4)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=((($361))|0) > ((($363))|0);
      var $365=((($364))&1);
      $i=$365;
      var $366=(($dir+($365<<2))|0);
      var $367=HEAP32[(($366)>>2)];
      $d=$367;
      var $368=$d;
      var $369=$pix;
      var $370=(($369+($368<<3))|0);
      var $371=(($370+2)|0);
      var $372=HEAPU16[(($371)>>1)];
      var $373=((($372))&65535);
      var $374=$d;
      var $375=(((-($374)))|0);
      var $376=$pix;
      var $377=(($376+($375<<3))|0);
      var $378=(($377+2)|0);
      var $379=HEAPU16[(($378)>>1)];
      var $380=((($379))&65535);
      var $381=((($373))|0) < ((($380))|0);
      if ($381) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: // $382
      var $383=$d;
      var $384=$pix;
      var $385=(($384+($383<<3))|0);
      var $386=(($385+2)|0);
      var $387=HEAPU16[(($386)>>1)];
      var $388=((($387))&65535);
      var $389=$i;
      var $390=(($guess+($389<<2))|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=($391) >> 2;
      var $393=$d;
      var $394=(((-($393)))|0);
      var $395=$pix;
      var $396=(($395+($394<<3))|0);
      var $397=(($396+2)|0);
      var $398=HEAPU16[(($397)>>1)];
      var $399=((($398))&65535);
      var $400=((($392))|0) < ((($399))|0);
      if ($400) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $401
      var $402=$i;
      var $403=(($guess+($402<<2))|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=($404) >> 2;
      var $415 = $405;__label__ = 14; break;
    case 13: // $406
      var $407=$d;
      var $408=(((-($407)))|0);
      var $409=$pix;
      var $410=(($409+($408<<3))|0);
      var $411=(($410+2)|0);
      var $412=HEAPU16[(($411)>>1)];
      var $413=((($412))&65535);
      var $415 = $413;__label__ = 14; break;
    case 14: // $414
      var $415;
      var $416=((($388))|0) > ((($415))|0);
      if ($416) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $417
      var $418=$d;
      var $419=$pix;
      var $420=(($419+($418<<3))|0);
      var $421=(($420+2)|0);
      var $422=HEAPU16[(($421)>>1)];
      var $423=((($422))&65535);
      var $453 = $423;__label__ = 20; break;
    case 16: // $424
      var $425=$i;
      var $426=(($guess+($425<<2))|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=($427) >> 2;
      var $429=$d;
      var $430=(((-($429)))|0);
      var $431=$pix;
      var $432=(($431+($430<<3))|0);
      var $433=(($432+2)|0);
      var $434=HEAPU16[(($433)>>1)];
      var $435=((($434))&65535);
      var $436=((($428))|0) < ((($435))|0);
      if ($436) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $437
      var $438=$i;
      var $439=(($guess+($438<<2))|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=($440) >> 2;
      var $451 = $441;__label__ = 19; break;
    case 18: // $442
      var $443=$d;
      var $444=(((-($443)))|0);
      var $445=$pix;
      var $446=(($445+($444<<3))|0);
      var $447=(($446+2)|0);
      var $448=HEAPU16[(($447)>>1)];
      var $449=((($448))&65535);
      var $451 = $449;__label__ = 19; break;
    case 19: // $450
      var $451;
      var $453 = $451;__label__ = 20; break;
    case 20: // $452
      var $453;
      var $525 = $453;__label__ = 31; break;
    case 21: // $454
      var $455=$d;
      var $456=(((-($455)))|0);
      var $457=$pix;
      var $458=(($457+($456<<3))|0);
      var $459=(($458+2)|0);
      var $460=HEAPU16[(($459)>>1)];
      var $461=((($460))&65535);
      var $462=$i;
      var $463=(($guess+($462<<2))|0);
      var $464=HEAP32[(($463)>>2)];
      var $465=($464) >> 2;
      var $466=$d;
      var $467=$pix;
      var $468=(($467+($466<<3))|0);
      var $469=(($468+2)|0);
      var $470=HEAPU16[(($469)>>1)];
      var $471=((($470))&65535);
      var $472=((($465))|0) < ((($471))|0);
      if ($472) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $473
      var $474=$i;
      var $475=(($guess+($474<<2))|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=($476) >> 2;
      var $486 = $477;__label__ = 24; break;
    case 23: // $478
      var $479=$d;
      var $480=$pix;
      var $481=(($480+($479<<3))|0);
      var $482=(($481+2)|0);
      var $483=HEAPU16[(($482)>>1)];
      var $484=((($483))&65535);
      var $486 = $484;__label__ = 24; break;
    case 24: // $485
      var $486;
      var $487=((($461))|0) > ((($486))|0);
      if ($487) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $488
      var $489=$d;
      var $490=(((-($489)))|0);
      var $491=$pix;
      var $492=(($491+($490<<3))|0);
      var $493=(($492+2)|0);
      var $494=HEAPU16[(($493)>>1)];
      var $495=((($494))&65535);
      var $523 = $495;__label__ = 30; break;
    case 26: // $496
      var $497=$i;
      var $498=(($guess+($497<<2))|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=($499) >> 2;
      var $501=$d;
      var $502=$pix;
      var $503=(($502+($501<<3))|0);
      var $504=(($503+2)|0);
      var $505=HEAPU16[(($504)>>1)];
      var $506=((($505))&65535);
      var $507=((($500))|0) < ((($506))|0);
      if ($507) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $508
      var $509=$i;
      var $510=(($guess+($509<<2))|0);
      var $511=HEAP32[(($510)>>2)];
      var $512=($511) >> 2;
      var $521 = $512;__label__ = 29; break;
    case 28: // $513
      var $514=$d;
      var $515=$pix;
      var $516=(($515+($514<<3))|0);
      var $517=(($516+2)|0);
      var $518=HEAPU16[(($517)>>1)];
      var $519=((($518))&65535);
      var $521 = $519;__label__ = 29; break;
    case 29: // $520
      var $521;
      var $523 = $521;__label__ = 30; break;
    case 30: // $522
      var $523;
      var $525 = $523;__label__ = 31; break;
    case 31: // $524
      var $525;
      var $526=((($525)) & 65535);
      var $527=$pix;
      var $528=(($527)|0);
      var $529=(($528+2)|0);
      HEAP16[(($529)>>1)]=$526;
      __label__ = 32; break;
    case 32: // $530
      var $531=$col;
      var $532=((($531)+2)|0);
      $col=$532;
      __label__ = 5; break;
    case 33: // $533
      __label__ = 34; break;
    case 34: // $534
      var $535=$row;
      var $536=((($535)+1)|0);
      $row=$536;
      __label__ = 3; break;
    case 35: // $537
      $row=1;
      __label__ = 36; break;
    case 36: // $538
      var $539=$row;
      var $540=HEAPU16[((_height)>>1)];
      var $541=((($540))&65535);
      var $542=((($541)-1)|0);
      var $543=((($539))|0) < ((($542))|0);
      if ($543) { __label__ = 37; break; } else { __label__ = 56; break; }
    case 37: // $544
      var $545=HEAPU32[((_filters)>>2)];
      var $546=$row;
      var $547=($546) << 1;
      var $548=($547) & 14;
      var $549=((($548))|0);
      var $550=($549) << 1;
      var $551=($545) >>> ((($550))>>>0);
      var $552=($551) & 3;
      var $553=($552) & 1;
      var $554=((($553)+1)|0);
      $col=$554;
      var $555=HEAPU32[((_filters)>>2)];
      var $556=$row;
      var $557=($556) << 1;
      var $558=($557) & 14;
      var $559=$col;
      var $560=((($559)+1)|0);
      var $561=($560) & 1;
      var $562=((($558)+($561))|0);
      var $563=($562) << 1;
      var $564=($555) >>> ((($563))>>>0);
      var $565=($564) & 3;
      $c=$565;
      __label__ = 38; break;
    case 38: // $566
      var $567=$col;
      var $568=HEAPU16[((_width)>>1)];
      var $569=((($568))&65535);
      var $570=((($569)-1)|0);
      var $571=((($567))|0) < ((($570))|0);
      if ($571) { __label__ = 39; break; } else { __label__ = 54; break; }
    case 39: // $572
      var $573=HEAP32[((_image)>>2)];
      var $574=$row;
      var $575=HEAPU16[((_width)>>1)];
      var $576=((($575))&65535);
      var $577=((($574)*($576))|0);
      var $578=(($573+($577<<3))|0);
      var $579=$col;
      var $580=(($578+($579<<3))|0);
      $pix=$580;
      $i=0;
      __label__ = 40; break;
    case 40: // $581
      var $582=$i;
      var $583=(($dir+($582<<2))|0);
      var $584=HEAP32[(($583)>>2)];
      $d=$584;
      var $585=((($584))|0) > 0;
      if ($585) { __label__ = 41; break; } else { __label__ = 52; break; }
    case 41: // $586
      var $587=$c;
      var $588=$d;
      var $589=(((-($588)))|0);
      var $590=$pix;
      var $591=(($590+($589<<3))|0);
      var $592=(($591+($587<<1))|0);
      var $593=HEAPU16[(($592)>>1)];
      var $594=((($593))&65535);
      var $595=$c;
      var $596=$d;
      var $597=$pix;
      var $598=(($597+($596<<3))|0);
      var $599=(($598+($595<<1))|0);
      var $600=HEAPU16[(($599)>>1)];
      var $601=((($600))&65535);
      var $602=((($594)+($601))|0);
      var $603=$pix;
      var $604=(($603)|0);
      var $605=(($604+2)|0);
      var $606=HEAPU16[(($605)>>1)];
      var $607=((($606))&65535);
      var $608=(((($607)<<1))|0);
      var $609=((($602)+($608))|0);
      var $610=$d;
      var $611=(((-($610)))|0);
      var $612=$pix;
      var $613=(($612+($611<<3))|0);
      var $614=(($613+2)|0);
      var $615=HEAPU16[(($614)>>1)];
      var $616=((($615))&65535);
      var $617=((($609)-($616))|0);
      var $618=$d;
      var $619=$pix;
      var $620=(($619+($618<<3))|0);
      var $621=(($620+2)|0);
      var $622=HEAPU16[(($621)>>1)];
      var $623=((($622))&65535);
      var $624=((($617)-($623))|0);
      var $625=($624) >> 1;
      var $626=((($625))|0) < 65535;
      if ($626) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: // $627
      var $628=$c;
      var $629=$d;
      var $630=(((-($629)))|0);
      var $631=$pix;
      var $632=(($631+($630<<3))|0);
      var $633=(($632+($628<<1))|0);
      var $634=HEAPU16[(($633)>>1)];
      var $635=((($634))&65535);
      var $636=$c;
      var $637=$d;
      var $638=$pix;
      var $639=(($638+($637<<3))|0);
      var $640=(($639+($636<<1))|0);
      var $641=HEAPU16[(($640)>>1)];
      var $642=((($641))&65535);
      var $643=((($635)+($642))|0);
      var $644=$pix;
      var $645=(($644)|0);
      var $646=(($645+2)|0);
      var $647=HEAPU16[(($646)>>1)];
      var $648=((($647))&65535);
      var $649=(((($648)<<1))|0);
      var $650=((($643)+($649))|0);
      var $651=$d;
      var $652=(((-($651)))|0);
      var $653=$pix;
      var $654=(($653+($652<<3))|0);
      var $655=(($654+2)|0);
      var $656=HEAPU16[(($655)>>1)];
      var $657=((($656))&65535);
      var $658=((($650)-($657))|0);
      var $659=$d;
      var $660=$pix;
      var $661=(($660+($659<<3))|0);
      var $662=(($661+2)|0);
      var $663=HEAPU16[(($662)>>1)];
      var $664=((($663))&65535);
      var $665=((($658)-($664))|0);
      var $666=($665) >> 1;
      var $669 = $666;__label__ = 44; break;
    case 43: // $667
      var $669 = 65535;__label__ = 44; break;
    case 44: // $668
      var $669;
      var $670=0 > ((($669))|0);
      if ($670) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: // $671
      var $757 = 0;__label__ = 50; break;
    case 46: // $672
      var $673=$c;
      var $674=$d;
      var $675=(((-($674)))|0);
      var $676=$pix;
      var $677=(($676+($675<<3))|0);
      var $678=(($677+($673<<1))|0);
      var $679=HEAPU16[(($678)>>1)];
      var $680=((($679))&65535);
      var $681=$c;
      var $682=$d;
      var $683=$pix;
      var $684=(($683+($682<<3))|0);
      var $685=(($684+($681<<1))|0);
      var $686=HEAPU16[(($685)>>1)];
      var $687=((($686))&65535);
      var $688=((($680)+($687))|0);
      var $689=$pix;
      var $690=(($689)|0);
      var $691=(($690+2)|0);
      var $692=HEAPU16[(($691)>>1)];
      var $693=((($692))&65535);
      var $694=(((($693)<<1))|0);
      var $695=((($688)+($694))|0);
      var $696=$d;
      var $697=(((-($696)))|0);
      var $698=$pix;
      var $699=(($698+($697<<3))|0);
      var $700=(($699+2)|0);
      var $701=HEAPU16[(($700)>>1)];
      var $702=((($701))&65535);
      var $703=((($695)-($702))|0);
      var $704=$d;
      var $705=$pix;
      var $706=(($705+($704<<3))|0);
      var $707=(($706+2)|0);
      var $708=HEAPU16[(($707)>>1)];
      var $709=((($708))&65535);
      var $710=((($703)-($709))|0);
      var $711=($710) >> 1;
      var $712=((($711))|0) < 65535;
      if ($712) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: // $713
      var $714=$c;
      var $715=$d;
      var $716=(((-($715)))|0);
      var $717=$pix;
      var $718=(($717+($716<<3))|0);
      var $719=(($718+($714<<1))|0);
      var $720=HEAPU16[(($719)>>1)];
      var $721=((($720))&65535);
      var $722=$c;
      var $723=$d;
      var $724=$pix;
      var $725=(($724+($723<<3))|0);
      var $726=(($725+($722<<1))|0);
      var $727=HEAPU16[(($726)>>1)];
      var $728=((($727))&65535);
      var $729=((($721)+($728))|0);
      var $730=$pix;
      var $731=(($730)|0);
      var $732=(($731+2)|0);
      var $733=HEAPU16[(($732)>>1)];
      var $734=((($733))&65535);
      var $735=(((($734)<<1))|0);
      var $736=((($729)+($735))|0);
      var $737=$d;
      var $738=(((-($737)))|0);
      var $739=$pix;
      var $740=(($739+($738<<3))|0);
      var $741=(($740+2)|0);
      var $742=HEAPU16[(($741)>>1)];
      var $743=((($742))&65535);
      var $744=((($736)-($743))|0);
      var $745=$d;
      var $746=$pix;
      var $747=(($746+($745<<3))|0);
      var $748=(($747+2)|0);
      var $749=HEAPU16[(($748)>>1)];
      var $750=((($749))&65535);
      var $751=((($744)-($750))|0);
      var $752=($751) >> 1;
      var $755 = $752;__label__ = 49; break;
    case 48: // $753
      var $755 = 65535;__label__ = 49; break;
    case 49: // $754
      var $755;
      var $757 = $755;__label__ = 50; break;
    case 50: // $756
      var $757;
      var $758=((($757)) & 65535);
      var $759=$c;
      var $760=$pix;
      var $761=(($760)|0);
      var $762=(($761+($759<<1))|0);
      HEAP16[(($762)>>1)]=$758;
      __label__ = 51; break;
    case 51: // $763
      var $764=$c;
      var $765=((2-($764))|0);
      $c=$765;
      var $766=$i;
      var $767=((($766)+1)|0);
      $i=$767;
      __label__ = 40; break;
    case 52: // $768
      __label__ = 53; break;
    case 53: // $769
      var $770=$col;
      var $771=((($770)+2)|0);
      $col=$771;
      __label__ = 38; break;
    case 54: // $772
      __label__ = 55; break;
    case 55: // $773
      var $774=$row;
      var $775=((($774)+1)|0);
      $row=$775;
      __label__ = 36; break;
    case 56: // $776
      $row=1;
      __label__ = 57; break;
    case 57: // $777
      var $778=$row;
      var $779=HEAPU16[((_height)>>1)];
      var $780=((($779))&65535);
      var $781=((($780)-1)|0);
      var $782=((($778))|0) < ((($781))|0);
      if ($782) { __label__ = 58; break; } else { __label__ = 89; break; }
    case 58: // $783
      var $784=HEAPU32[((_filters)>>2)];
      var $785=$row;
      var $786=($785) << 1;
      var $787=($786) & 14;
      var $788=((($787)+1)|0);
      var $789=($788) << 1;
      var $790=($784) >>> ((($789))>>>0);
      var $791=($790) & 3;
      var $792=($791) & 1;
      var $793=((($792)+1)|0);
      $col=$793;
      var $794=HEAPU32[((_filters)>>2)];
      var $795=$row;
      var $796=($795) << 1;
      var $797=($796) & 14;
      var $798=$col;
      var $799=($798) & 1;
      var $800=((($797)+($799))|0);
      var $801=($800) << 1;
      var $802=($794) >>> ((($801))>>>0);
      var $803=($802) & 3;
      var $804=((2-($803))|0);
      $c=$804;
      __label__ = 59; break;
    case 59: // $805
      var $806=$col;
      var $807=HEAPU16[((_width)>>1)];
      var $808=((($807))&65535);
      var $809=((($808)-1)|0);
      var $810=((($806))|0) < ((($809))|0);
      if ($810) { __label__ = 60; break; } else { __label__ = 87; break; }
    case 60: // $811
      var $812=HEAP32[((_image)>>2)];
      var $813=$row;
      var $814=HEAPU16[((_width)>>1)];
      var $815=((($814))&65535);
      var $816=((($813)*($815))|0);
      var $817=(($812+($816<<3))|0);
      var $818=$col;
      var $819=(($817+($818<<3))|0);
      $pix=$819;
      $i=0;
      __label__ = 61; break;
    case 61: // $820
      var $821=$i;
      var $822=(($dir+($821<<2))|0);
      var $823=HEAP32[(($822)>>2)];
      var $824=$i;
      var $825=((($824)+1)|0);
      var $826=(($dir+($825<<2))|0);
      var $827=HEAP32[(($826)>>2)];
      var $828=((($823)+($827))|0);
      $d=$828;
      var $829=((($828))|0) > 0;
      if ($829) { __label__ = 62; break; } else { __label__ = 64; break; }
    case 62: // $830
      var $831=$c;
      var $832=$d;
      var $833=(((-($832)))|0);
      var $834=$pix;
      var $835=(($834+($833<<3))|0);
      var $836=(($835+($831<<1))|0);
      var $837=HEAPU16[(($836)>>1)];
      var $838=((($837))&65535);
      var $839=$c;
      var $840=$d;
      var $841=$pix;
      var $842=(($841+($840<<3))|0);
      var $843=(($842+($839<<1))|0);
      var $844=HEAPU16[(($843)>>1)];
      var $845=((($844))&65535);
      var $846=((($838)-($845))|0);
      var $847=$c;
      var $848=$d;
      var $849=(((-($848)))|0);
      var $850=$pix;
      var $851=(($850+($849<<3))|0);
      var $852=(($851+($847<<1))|0);
      var $853=HEAPU16[(($852)>>1)];
      var $854=((($853))&65535);
      var $855=$c;
      var $856=$d;
      var $857=$pix;
      var $858=(($857+($856<<3))|0);
      var $859=(($858+($855<<1))|0);
      var $860=HEAPU16[(($859)>>1)];
      var $861=((($860))&65535);
      var $862=((($854)-($861))|0);
      var $863=($862) >> 31;
      var $864=($846) ^ ($863);
      var $865=$c;
      var $866=$d;
      var $867=(((-($866)))|0);
      var $868=$pix;
      var $869=(($868+($867<<3))|0);
      var $870=(($869+($865<<1))|0);
      var $871=HEAPU16[(($870)>>1)];
      var $872=((($871))&65535);
      var $873=$c;
      var $874=$d;
      var $875=$pix;
      var $876=(($875+($874<<3))|0);
      var $877=(($876+($873<<1))|0);
      var $878=HEAPU16[(($877)>>1)];
      var $879=((($878))&65535);
      var $880=((($872)-($879))|0);
      var $881=($880) >> 31;
      var $882=((($864)-($881))|0);
      var $883=$d;
      var $884=(((-($883)))|0);
      var $885=$pix;
      var $886=(($885+($884<<3))|0);
      var $887=(($886+2)|0);
      var $888=HEAPU16[(($887)>>1)];
      var $889=((($888))&65535);
      var $890=$pix;
      var $891=(($890)|0);
      var $892=(($891+2)|0);
      var $893=HEAPU16[(($892)>>1)];
      var $894=((($893))&65535);
      var $895=((($889)-($894))|0);
      var $896=$d;
      var $897=(((-($896)))|0);
      var $898=$pix;
      var $899=(($898+($897<<3))|0);
      var $900=(($899+2)|0);
      var $901=HEAPU16[(($900)>>1)];
      var $902=((($901))&65535);
      var $903=$pix;
      var $904=(($903)|0);
      var $905=(($904+2)|0);
      var $906=HEAPU16[(($905)>>1)];
      var $907=((($906))&65535);
      var $908=((($902)-($907))|0);
      var $909=($908) >> 31;
      var $910=($895) ^ ($909);
      var $911=$d;
      var $912=(((-($911)))|0);
      var $913=$pix;
      var $914=(($913+($912<<3))|0);
      var $915=(($914+2)|0);
      var $916=HEAPU16[(($915)>>1)];
      var $917=((($916))&65535);
      var $918=$pix;
      var $919=(($918)|0);
      var $920=(($919+2)|0);
      var $921=HEAPU16[(($920)>>1)];
      var $922=((($921))&65535);
      var $923=((($917)-($922))|0);
      var $924=($923) >> 31;
      var $925=((($910)-($924))|0);
      var $926=((($882)+($925))|0);
      var $927=$d;
      var $928=$pix;
      var $929=(($928+($927<<3))|0);
      var $930=(($929+2)|0);
      var $931=HEAPU16[(($930)>>1)];
      var $932=((($931))&65535);
      var $933=$pix;
      var $934=(($933)|0);
      var $935=(($934+2)|0);
      var $936=HEAPU16[(($935)>>1)];
      var $937=((($936))&65535);
      var $938=((($932)-($937))|0);
      var $939=$d;
      var $940=$pix;
      var $941=(($940+($939<<3))|0);
      var $942=(($941+2)|0);
      var $943=HEAPU16[(($942)>>1)];
      var $944=((($943))&65535);
      var $945=$pix;
      var $946=(($945)|0);
      var $947=(($946+2)|0);
      var $948=HEAPU16[(($947)>>1)];
      var $949=((($948))&65535);
      var $950=((($944)-($949))|0);
      var $951=($950) >> 31;
      var $952=($938) ^ ($951);
      var $953=$d;
      var $954=$pix;
      var $955=(($954+($953<<3))|0);
      var $956=(($955+2)|0);
      var $957=HEAPU16[(($956)>>1)];
      var $958=((($957))&65535);
      var $959=$pix;
      var $960=(($959)|0);
      var $961=(($960+2)|0);
      var $962=HEAPU16[(($961)>>1)];
      var $963=((($962))&65535);
      var $964=((($958)-($963))|0);
      var $965=($964) >> 31;
      var $966=((($952)-($965))|0);
      var $967=((($926)+($966))|0);
      var $968=$i;
      var $969=(($diff+($968<<2))|0);
      HEAP32[(($969)>>2)]=$967;
      var $970=$c;
      var $971=$d;
      var $972=(((-($971)))|0);
      var $973=$pix;
      var $974=(($973+($972<<3))|0);
      var $975=(($974+($970<<1))|0);
      var $976=HEAPU16[(($975)>>1)];
      var $977=((($976))&65535);
      var $978=$c;
      var $979=$d;
      var $980=$pix;
      var $981=(($980+($979<<3))|0);
      var $982=(($981+($978<<1))|0);
      var $983=HEAPU16[(($982)>>1)];
      var $984=((($983))&65535);
      var $985=((($977)+($984))|0);
      var $986=$pix;
      var $987=(($986)|0);
      var $988=(($987+2)|0);
      var $989=HEAPU16[(($988)>>1)];
      var $990=((($989))&65535);
      var $991=(((($990)<<1))|0);
      var $992=((($985)+($991))|0);
      var $993=$d;
      var $994=(((-($993)))|0);
      var $995=$pix;
      var $996=(($995+($994<<3))|0);
      var $997=(($996+2)|0);
      var $998=HEAPU16[(($997)>>1)];
      var $999=((($998))&65535);
      var $1000=((($992)-($999))|0);
      var $1001=$d;
      var $1002=$pix;
      var $1003=(($1002+($1001<<3))|0);
      var $1004=(($1003+2)|0);
      var $1005=HEAPU16[(($1004)>>1)];
      var $1006=((($1005))&65535);
      var $1007=((($1000)-($1006))|0);
      var $1008=$i;
      var $1009=(($guess+($1008<<2))|0);
      HEAP32[(($1009)>>2)]=$1007;
      __label__ = 63; break;
    case 63: // $1010
      var $1011=$i;
      var $1012=((($1011)+1)|0);
      $i=$1012;
      __label__ = 61; break;
    case 64: // $1013
      var $1014=(($diff)|0);
      var $1015=HEAP32[(($1014)>>2)];
      var $1016=(($diff+4)|0);
      var $1017=HEAP32[(($1016)>>2)];
      var $1018=((($1015))|0)!=((($1017))|0);
      if ($1018) { __label__ = 65; break; } else { __label__ = 75; break; }
    case 65: // $1019
      var $1020=(($diff)|0);
      var $1021=HEAP32[(($1020)>>2)];
      var $1022=(($diff+4)|0);
      var $1023=HEAP32[(($1022)>>2)];
      var $1024=((($1021))|0) > ((($1023))|0);
      var $1025=((($1024))&1);
      var $1026=(($guess+($1025<<2))|0);
      var $1027=HEAP32[(($1026)>>2)];
      var $1028=($1027) >> 1;
      var $1029=((($1028))|0) < 65535;
      if ($1029) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $1030
      var $1031=(($diff)|0);
      var $1032=HEAP32[(($1031)>>2)];
      var $1033=(($diff+4)|0);
      var $1034=HEAP32[(($1033)>>2)];
      var $1035=((($1032))|0) > ((($1034))|0);
      var $1036=((($1035))&1);
      var $1037=(($guess+($1036<<2))|0);
      var $1038=HEAP32[(($1037)>>2)];
      var $1039=($1038) >> 1;
      var $1042 = $1039;__label__ = 68; break;
    case 67: // $1040
      var $1042 = 65535;__label__ = 68; break;
    case 68: // $1041
      var $1042;
      var $1043=0 > ((($1042))|0);
      if ($1043) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: // $1044
      var $1070 = 0;__label__ = 74; break;
    case 70: // $1045
      var $1046=(($diff)|0);
      var $1047=HEAP32[(($1046)>>2)];
      var $1048=(($diff+4)|0);
      var $1049=HEAP32[(($1048)>>2)];
      var $1050=((($1047))|0) > ((($1049))|0);
      var $1051=((($1050))&1);
      var $1052=(($guess+($1051<<2))|0);
      var $1053=HEAP32[(($1052)>>2)];
      var $1054=($1053) >> 1;
      var $1055=((($1054))|0) < 65535;
      if ($1055) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: // $1056
      var $1057=(($diff)|0);
      var $1058=HEAP32[(($1057)>>2)];
      var $1059=(($diff+4)|0);
      var $1060=HEAP32[(($1059)>>2)];
      var $1061=((($1058))|0) > ((($1060))|0);
      var $1062=((($1061))&1);
      var $1063=(($guess+($1062<<2))|0);
      var $1064=HEAP32[(($1063)>>2)];
      var $1065=($1064) >> 1;
      var $1068 = $1065;__label__ = 73; break;
    case 72: // $1066
      var $1068 = 65535;__label__ = 73; break;
    case 73: // $1067
      var $1068;
      var $1070 = $1068;__label__ = 74; break;
    case 74: // $1069
      var $1070;
      var $1071=((($1070)) & 65535);
      var $1072=$c;
      var $1073=$pix;
      var $1074=(($1073)|0);
      var $1075=(($1074+($1072<<1))|0);
      HEAP16[(($1075)>>1)]=$1071;
      __label__ = 85; break;
    case 75: // $1076
      var $1077=(($guess)|0);
      var $1078=HEAP32[(($1077)>>2)];
      var $1079=(($guess+4)|0);
      var $1080=HEAP32[(($1079)>>2)];
      var $1081=((($1078)+($1080))|0);
      var $1082=($1081) >> 2;
      var $1083=((($1082))|0) < 65535;
      if ($1083) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: // $1084
      var $1085=(($guess)|0);
      var $1086=HEAP32[(($1085)>>2)];
      var $1087=(($guess+4)|0);
      var $1088=HEAP32[(($1087)>>2)];
      var $1089=((($1086)+($1088))|0);
      var $1090=($1089) >> 2;
      var $1093 = $1090;__label__ = 78; break;
    case 77: // $1091
      var $1093 = 65535;__label__ = 78; break;
    case 78: // $1092
      var $1093;
      var $1094=0 > ((($1093))|0);
      if ($1094) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: // $1095
      var $1115 = 0;__label__ = 84; break;
    case 80: // $1096
      var $1097=(($guess)|0);
      var $1098=HEAP32[(($1097)>>2)];
      var $1099=(($guess+4)|0);
      var $1100=HEAP32[(($1099)>>2)];
      var $1101=((($1098)+($1100))|0);
      var $1102=($1101) >> 2;
      var $1103=((($1102))|0) < 65535;
      if ($1103) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: // $1104
      var $1105=(($guess)|0);
      var $1106=HEAP32[(($1105)>>2)];
      var $1107=(($guess+4)|0);
      var $1108=HEAP32[(($1107)>>2)];
      var $1109=((($1106)+($1108))|0);
      var $1110=($1109) >> 2;
      var $1113 = $1110;__label__ = 83; break;
    case 82: // $1111
      var $1113 = 65535;__label__ = 83; break;
    case 83: // $1112
      var $1113;
      var $1115 = $1113;__label__ = 84; break;
    case 84: // $1114
      var $1115;
      var $1116=((($1115)) & 65535);
      var $1117=$c;
      var $1118=$pix;
      var $1119=(($1118)|0);
      var $1120=(($1119+($1117<<1))|0);
      HEAP16[(($1120)>>1)]=$1116;
      __label__ = 85; break;
    case 85: // $1121
      __label__ = 86; break;
    case 86: // $1122
      var $1123=$col;
      var $1124=((($1123)+2)|0);
      $col=$1124;
      __label__ = 59; break;
    case 87: // $1125
      __label__ = 88; break;
    case 88: // $1126
      var $1127=$row;
      var $1128=((($1127)+1)|0);
      $row=$1128;
      __label__ = 57; break;
    case 89: // $1129
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ppg_interpolate["X"]=1;

function _ahd_interpolate() {
  var __stackBase__  = STACKTOP; STACKTOP += 262276; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $j;
      var $k;
      var $top;
      var $left;
      var $row;
      var $col;
      var $tr;
      var $tc;
      var $c;
      var $d;
      var $val;
      var $hm=__stackBase__;
      var $pix;
      var $rix;
      var $ldiff=__stackBase__+8;
      var $abdiff=__stackBase__+40;
      var $leps;
      var $abeps;
      var $r;
      var $cbrt=__stackBase__+72;
      var $xyz=__stackBase__+262216;
      var $xyz_cam=__stackBase__+262228;
      var $rgb;
      var $lab;
      var $lix;
      var $homo;
      var $buffer;
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str79)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      $i=0;
      __label__ = 3; break;
    case 3: // $9
      var $10=$i;
      var $11=((($10))|0) < 65536;
      if ($11) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: // $12
      var $13=$i;
      var $14=((($13))|0);
      var $15=($14)/65535;
      var $16=($15);
      $r=$16;
      var $17=$r;
      var $18=($17);
      var $19=($18) > 0.008856;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $20
      var $21=$r;
      var $22=($21);
      var $23=_llvm_pow_f64($22, 0.3333333333333333);
      var $30 = $23;__label__ = 7; break;
    case 6: // $24
      var $25=$r;
      var $26=($25);
      var $27=($26)*7.787;
      var $28=($27)+0.13793103448275862;
      var $30 = $28;__label__ = 7; break;
    case 7: // $29
      var $30;
      var $31=($30);
      var $32=$i;
      var $33=(($cbrt+($32<<2))|0);
      HEAPF32[(($33)>>2)]=$31;
      __label__ = 8; break;
    case 8: // $34
      var $35=$i;
      var $36=((($35)+1)|0);
      $i=$36;
      __label__ = 3; break;
    case 9: // $37
      $i=0;
      __label__ = 10; break;
    case 10: // $38
      var $39=$i;
      var $40=((($39))|0) < 3;
      if ($40) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: // $41
      $j=0;
      __label__ = 12; break;
    case 12: // $42
      var $43=$j;
      var $44=HEAP32[((_colors)>>2)];
      var $45=((($43))|0) < ((($44))|0);
      if ($45) { __label__ = 13; break; } else { __label__ = 19; break; }
    case 13: // $46
      $k=0;
      var $47=$j;
      var $48=$i;
      var $49=(($xyz_cam+($48<<4))|0);
      var $50=(($49+($47<<2))|0);
      HEAPF32[(($50)>>2)]=0;
      __label__ = 14; break;
    case 14: // $51
      var $52=$k;
      var $53=((($52))|0) < 3;
      if ($53) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $54
      var $55=$k;
      var $56=$i;
      var $57=((_xyz_rgb+$56*24)|0);
      var $58=(($57+($55<<3))|0);
      var $59=(tempDoubleI32[0]=HEAP32[(($58)>>2)],tempDoubleI32[1]=HEAP32[(($58+4)>>2)],tempDoubleF64[0]);
      var $60=$j;
      var $61=$k;
      var $62=((_rgb_cam+($61<<4))|0);
      var $63=(($62+($60<<2))|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=($64);
      var $66=($59)*($65);
      var $67=$i;
      var $68=((_d65_white+($67<<2))|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=($69);
      var $71=($66)/($70);
      var $72=$j;
      var $73=$i;
      var $74=(($xyz_cam+($73<<4))|0);
      var $75=(($74+($72<<2))|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=($76);
      var $78=($77)+($71);
      var $79=($78);
      HEAPF32[(($75)>>2)]=$79;
      __label__ = 16; break;
    case 16: // $80
      var $81=$k;
      var $82=((($81)+1)|0);
      $k=$82;
      __label__ = 14; break;
    case 17: // $83
      __label__ = 18; break;
    case 18: // $84
      var $85=$j;
      var $86=((($85)+1)|0);
      $j=$86;
      __label__ = 12; break;
    case 19: // $87
      __label__ = 20; break;
    case 20: // $88
      var $89=$i;
      var $90=((($89)+1)|0);
      $i=$90;
      __label__ = 10; break;
    case 21: // $91
      _border_interpolate(5);
      var $92=_malloc(1703936);
      $buffer=$92;
      var $93=$buffer;
      _merror($93, ((__str80)|0));
      var $94=$buffer;
      var $95=$94;
      $rgb=$95;
      var $96=$buffer;
      var $97=(($96+786432)|0);
      var $98=$97;
      $lab=$98;
      var $99=$buffer;
      var $100=(($99+1572864)|0);
      var $101=$100;
      $homo=$101;
      $top=2;
      __label__ = 22; break;
    case 22: // $102
      var $103=$top;
      var $104=HEAPU16[((_height)>>1)];
      var $105=((($104))&65535);
      var $106=((($105)-5)|0);
      var $107=((($103))|0) < ((($106))|0);
      if ($107) { __label__ = 23; break; } else { __label__ = 247; break; }
    case 23: // $108
      $left=2;
      __label__ = 24; break;
    case 24: // $109
      var $110=$left;
      var $111=HEAPU16[((_width)>>1)];
      var $112=((($111))&65535);
      var $113=((($112)-5)|0);
      var $114=((($110))|0) < ((($113))|0);
      if ($114) { __label__ = 25; break; } else { __label__ = 245; break; }
    case 25: // $115
      var $116=$top;
      $row=$116;
      __label__ = 26; break;
    case 26: // $117
      var $118=$row;
      var $119=$top;
      var $120=((($119)+256)|0);
      var $121=((($118))|0) < ((($120))|0);
      if ($121) { __label__ = 27; break; } else { var $129 = 0;__label__ = 28; break; }
    case 27: // $122
      var $123=$row;
      var $124=HEAPU16[((_height)>>1)];
      var $125=((($124))&65535);
      var $126=((($125)-2)|0);
      var $127=((($123))|0) < ((($126))|0);
      var $129 = $127;__label__ = 28; break;
    case 28: // $128
      var $129;
      if ($129) { __label__ = 29; break; } else { __label__ = 79; break; }
    case 29: // $130
      var $131=$left;
      var $132=HEAPU32[((_filters)>>2)];
      var $133=$row;
      var $134=($133) << 1;
      var $135=($134) & 14;
      var $136=$left;
      var $137=($136) & 1;
      var $138=((($135)+($137))|0);
      var $139=($138) << 1;
      var $140=($132) >>> ((($139))>>>0);
      var $141=($140) & 3;
      var $142=($141) & 1;
      var $143=((($131)+($142))|0);
      $col=$143;
      var $144=HEAPU32[((_filters)>>2)];
      var $145=$row;
      var $146=($145) << 1;
      var $147=($146) & 14;
      var $148=$col;
      var $149=($148) & 1;
      var $150=((($147)+($149))|0);
      var $151=($150) << 1;
      var $152=($144) >>> ((($151))>>>0);
      var $153=($152) & 3;
      $c=$153;
      __label__ = 30; break;
    case 30: // $154
      var $155=$col;
      var $156=$left;
      var $157=((($156)+256)|0);
      var $158=((($155))|0) < ((($157))|0);
      if ($158) { __label__ = 31; break; } else { var $166 = 0;__label__ = 32; break; }
    case 31: // $159
      var $160=$col;
      var $161=HEAPU16[((_width)>>1)];
      var $162=((($161))&65535);
      var $163=((($162)-2)|0);
      var $164=((($160))|0) < ((($163))|0);
      var $166 = $164;__label__ = 32; break;
    case 32: // $165
      var $166;
      if ($166) { __label__ = 33; break; } else { __label__ = 77; break; }
    case 33: // $167
      var $168=HEAP32[((_image)>>2)];
      var $169=$row;
      var $170=HEAPU16[((_width)>>1)];
      var $171=((($170))&65535);
      var $172=((($169)*($171))|0);
      var $173=(($168+($172<<3))|0);
      var $174=$col;
      var $175=(($173+($174<<3))|0);
      $pix=$175;
      var $176=$pix;
      var $177=(($176-8)|0);
      var $178=(($177+2)|0);
      var $179=HEAPU16[(($178)>>1)];
      var $180=((($179))&65535);
      var $181=$c;
      var $182=$pix;
      var $183=(($182)|0);
      var $184=(($183+($181<<1))|0);
      var $185=HEAPU16[(($184)>>1)];
      var $186=((($185))&65535);
      var $187=((($180)+($186))|0);
      var $188=$pix;
      var $189=(($188+8)|0);
      var $190=(($189+2)|0);
      var $191=HEAPU16[(($190)>>1)];
      var $192=((($191))&65535);
      var $193=((($187)+($192))|0);
      var $194=(((($193)<<1))|0);
      var $195=$c;
      var $196=$pix;
      var $197=(($196-16)|0);
      var $198=(($197+($195<<1))|0);
      var $199=HEAPU16[(($198)>>1)];
      var $200=((($199))&65535);
      var $201=((($194)-($200))|0);
      var $202=$c;
      var $203=$pix;
      var $204=(($203+16)|0);
      var $205=(($204+($202<<1))|0);
      var $206=HEAPU16[(($205)>>1)];
      var $207=((($206))&65535);
      var $208=((($201)-($207))|0);
      var $209=($208) >> 2;
      $val=$209;
      var $210=$pix;
      var $211=(($210-8)|0);
      var $212=(($211+2)|0);
      var $213=HEAPU16[(($212)>>1)];
      var $214=((($213))&65535);
      var $215=$pix;
      var $216=(($215+8)|0);
      var $217=(($216+2)|0);
      var $218=HEAPU16[(($217)>>1)];
      var $219=((($218))&65535);
      var $220=((($214))|0) < ((($219))|0);
      if ($220) { __label__ = 34; break; } else { __label__ = 44; break; }
    case 34: // $221
      var $222=$pix;
      var $223=(($222-8)|0);
      var $224=(($223+2)|0);
      var $225=HEAPU16[(($224)>>1)];
      var $226=((($225))&65535);
      var $227=$val;
      var $228=$pix;
      var $229=(($228+8)|0);
      var $230=(($229+2)|0);
      var $231=HEAPU16[(($230)>>1)];
      var $232=((($231))&65535);
      var $233=((($227))|0) < ((($232))|0);
      if ($233) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $234
      var $235=$val;
      var $243 = $235;__label__ = 37; break;
    case 36: // $236
      var $237=$pix;
      var $238=(($237+8)|0);
      var $239=(($238+2)|0);
      var $240=HEAPU16[(($239)>>1)];
      var $241=((($240))&65535);
      var $243 = $241;__label__ = 37; break;
    case 37: // $242
      var $243;
      var $244=((($226))|0) > ((($243))|0);
      if ($244) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $245
      var $246=$pix;
      var $247=(($246-8)|0);
      var $248=(($247+2)|0);
      var $249=HEAPU16[(($248)>>1)];
      var $250=((($249))&65535);
      var $270 = $250;__label__ = 43; break;
    case 39: // $251
      var $252=$val;
      var $253=$pix;
      var $254=(($253+8)|0);
      var $255=(($254+2)|0);
      var $256=HEAPU16[(($255)>>1)];
      var $257=((($256))&65535);
      var $258=((($252))|0) < ((($257))|0);
      if ($258) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: // $259
      var $260=$val;
      var $268 = $260;__label__ = 42; break;
    case 41: // $261
      var $262=$pix;
      var $263=(($262+8)|0);
      var $264=(($263+2)|0);
      var $265=HEAPU16[(($264)>>1)];
      var $266=((($265))&65535);
      var $268 = $266;__label__ = 42; break;
    case 42: // $267
      var $268;
      var $270 = $268;__label__ = 43; break;
    case 43: // $269
      var $270;
      var $322 = $270;__label__ = 54; break;
    case 44: // $271
      var $272=$pix;
      var $273=(($272+8)|0);
      var $274=(($273+2)|0);
      var $275=HEAPU16[(($274)>>1)];
      var $276=((($275))&65535);
      var $277=$val;
      var $278=$pix;
      var $279=(($278-8)|0);
      var $280=(($279+2)|0);
      var $281=HEAPU16[(($280)>>1)];
      var $282=((($281))&65535);
      var $283=((($277))|0) < ((($282))|0);
      if ($283) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: // $284
      var $285=$val;
      var $293 = $285;__label__ = 47; break;
    case 46: // $286
      var $287=$pix;
      var $288=(($287-8)|0);
      var $289=(($288+2)|0);
      var $290=HEAPU16[(($289)>>1)];
      var $291=((($290))&65535);
      var $293 = $291;__label__ = 47; break;
    case 47: // $292
      var $293;
      var $294=((($276))|0) > ((($293))|0);
      if ($294) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: // $295
      var $296=$pix;
      var $297=(($296+8)|0);
      var $298=(($297+2)|0);
      var $299=HEAPU16[(($298)>>1)];
      var $300=((($299))&65535);
      var $320 = $300;__label__ = 53; break;
    case 49: // $301
      var $302=$val;
      var $303=$pix;
      var $304=(($303-8)|0);
      var $305=(($304+2)|0);
      var $306=HEAPU16[(($305)>>1)];
      var $307=((($306))&65535);
      var $308=((($302))|0) < ((($307))|0);
      if ($308) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: // $309
      var $310=$val;
      var $318 = $310;__label__ = 52; break;
    case 51: // $311
      var $312=$pix;
      var $313=(($312-8)|0);
      var $314=(($313+2)|0);
      var $315=HEAPU16[(($314)>>1)];
      var $316=((($315))&65535);
      var $318 = $316;__label__ = 52; break;
    case 52: // $317
      var $318;
      var $320 = $318;__label__ = 53; break;
    case 53: // $319
      var $320;
      var $322 = $320;__label__ = 54; break;
    case 54: // $321
      var $322;
      var $323=((($322)) & 65535);
      var $324=$col;
      var $325=$left;
      var $326=((($324)-($325))|0);
      var $327=$row;
      var $328=$top;
      var $329=((($327)-($328))|0);
      var $330=$rgb;
      var $331=(($330)|0);
      var $332=(($331+$329*1536)|0);
      var $333=(($332+$326*6)|0);
      var $334=(($333+2)|0);
      HEAP16[(($334)>>1)]=$323;
      var $335=HEAPU16[((_width)>>1)];
      var $336=((($335))&65535);
      var $337=(((-($336)))|0);
      var $338=$pix;
      var $339=(($338+($337<<3))|0);
      var $340=(($339+2)|0);
      var $341=HEAPU16[(($340)>>1)];
      var $342=((($341))&65535);
      var $343=$c;
      var $344=$pix;
      var $345=(($344)|0);
      var $346=(($345+($343<<1))|0);
      var $347=HEAPU16[(($346)>>1)];
      var $348=((($347))&65535);
      var $349=((($342)+($348))|0);
      var $350=HEAPU16[((_width)>>1)];
      var $351=((($350))&65535);
      var $352=$pix;
      var $353=(($352+($351<<3))|0);
      var $354=(($353+2)|0);
      var $355=HEAPU16[(($354)>>1)];
      var $356=((($355))&65535);
      var $357=((($349)+($356))|0);
      var $358=(((($357)<<1))|0);
      var $359=$c;
      var $360=HEAPU16[((_width)>>1)];
      var $361=((($360))&65535);
      var $362=((($361)*-2)|0);
      var $363=$pix;
      var $364=(($363+($362<<3))|0);
      var $365=(($364+($359<<1))|0);
      var $366=HEAPU16[(($365)>>1)];
      var $367=((($366))&65535);
      var $368=((($358)-($367))|0);
      var $369=$c;
      var $370=HEAPU16[((_width)>>1)];
      var $371=((($370))&65535);
      var $372=(((($371)<<1))|0);
      var $373=$pix;
      var $374=(($373+($372<<3))|0);
      var $375=(($374+($369<<1))|0);
      var $376=HEAPU16[(($375)>>1)];
      var $377=((($376))&65535);
      var $378=((($368)-($377))|0);
      var $379=($378) >> 2;
      $val=$379;
      var $380=HEAPU16[((_width)>>1)];
      var $381=((($380))&65535);
      var $382=(((-($381)))|0);
      var $383=$pix;
      var $384=(($383+($382<<3))|0);
      var $385=(($384+2)|0);
      var $386=HEAPU16[(($385)>>1)];
      var $387=((($386))&65535);
      var $388=HEAPU16[((_width)>>1)];
      var $389=((($388))&65535);
      var $390=$pix;
      var $391=(($390+($389<<3))|0);
      var $392=(($391+2)|0);
      var $393=HEAPU16[(($392)>>1)];
      var $394=((($393))&65535);
      var $395=((($387))|0) < ((($394))|0);
      if ($395) { __label__ = 55; break; } else { __label__ = 65; break; }
    case 55: // $396
      var $397=HEAPU16[((_width)>>1)];
      var $398=((($397))&65535);
      var $399=(((-($398)))|0);
      var $400=$pix;
      var $401=(($400+($399<<3))|0);
      var $402=(($401+2)|0);
      var $403=HEAPU16[(($402)>>1)];
      var $404=((($403))&65535);
      var $405=$val;
      var $406=HEAPU16[((_width)>>1)];
      var $407=((($406))&65535);
      var $408=$pix;
      var $409=(($408+($407<<3))|0);
      var $410=(($409+2)|0);
      var $411=HEAPU16[(($410)>>1)];
      var $412=((($411))&65535);
      var $413=((($405))|0) < ((($412))|0);
      if ($413) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: // $414
      var $415=$val;
      var $425 = $415;__label__ = 58; break;
    case 57: // $416
      var $417=HEAPU16[((_width)>>1)];
      var $418=((($417))&65535);
      var $419=$pix;
      var $420=(($419+($418<<3))|0);
      var $421=(($420+2)|0);
      var $422=HEAPU16[(($421)>>1)];
      var $423=((($422))&65535);
      var $425 = $423;__label__ = 58; break;
    case 58: // $424
      var $425;
      var $426=((($404))|0) > ((($425))|0);
      if ($426) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: // $427
      var $428=HEAPU16[((_width)>>1)];
      var $429=((($428))&65535);
      var $430=(((-($429)))|0);
      var $431=$pix;
      var $432=(($431+($430<<3))|0);
      var $433=(($432+2)|0);
      var $434=HEAPU16[(($433)>>1)];
      var $435=((($434))&65535);
      var $459 = $435;__label__ = 64; break;
    case 60: // $436
      var $437=$val;
      var $438=HEAPU16[((_width)>>1)];
      var $439=((($438))&65535);
      var $440=$pix;
      var $441=(($440+($439<<3))|0);
      var $442=(($441+2)|0);
      var $443=HEAPU16[(($442)>>1)];
      var $444=((($443))&65535);
      var $445=((($437))|0) < ((($444))|0);
      if ($445) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $446
      var $447=$val;
      var $457 = $447;__label__ = 63; break;
    case 62: // $448
      var $449=HEAPU16[((_width)>>1)];
      var $450=((($449))&65535);
      var $451=$pix;
      var $452=(($451+($450<<3))|0);
      var $453=(($452+2)|0);
      var $454=HEAPU16[(($453)>>1)];
      var $455=((($454))&65535);
      var $457 = $455;__label__ = 63; break;
    case 63: // $456
      var $457;
      var $459 = $457;__label__ = 64; break;
    case 64: // $458
      var $459;
      var $527 = $459;__label__ = 75; break;
    case 65: // $460
      var $461=HEAPU16[((_width)>>1)];
      var $462=((($461))&65535);
      var $463=$pix;
      var $464=(($463+($462<<3))|0);
      var $465=(($464+2)|0);
      var $466=HEAPU16[(($465)>>1)];
      var $467=((($466))&65535);
      var $468=$val;
      var $469=HEAPU16[((_width)>>1)];
      var $470=((($469))&65535);
      var $471=(((-($470)))|0);
      var $472=$pix;
      var $473=(($472+($471<<3))|0);
      var $474=(($473+2)|0);
      var $475=HEAPU16[(($474)>>1)];
      var $476=((($475))&65535);
      var $477=((($468))|0) < ((($476))|0);
      if ($477) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $478
      var $479=$val;
      var $490 = $479;__label__ = 68; break;
    case 67: // $480
      var $481=HEAPU16[((_width)>>1)];
      var $482=((($481))&65535);
      var $483=(((-($482)))|0);
      var $484=$pix;
      var $485=(($484+($483<<3))|0);
      var $486=(($485+2)|0);
      var $487=HEAPU16[(($486)>>1)];
      var $488=((($487))&65535);
      var $490 = $488;__label__ = 68; break;
    case 68: // $489
      var $490;
      var $491=((($467))|0) > ((($490))|0);
      if ($491) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: // $492
      var $493=HEAPU16[((_width)>>1)];
      var $494=((($493))&65535);
      var $495=$pix;
      var $496=(($495+($494<<3))|0);
      var $497=(($496+2)|0);
      var $498=HEAPU16[(($497)>>1)];
      var $499=((($498))&65535);
      var $525 = $499;__label__ = 74; break;
    case 70: // $500
      var $501=$val;
      var $502=HEAPU16[((_width)>>1)];
      var $503=((($502))&65535);
      var $504=(((-($503)))|0);
      var $505=$pix;
      var $506=(($505+($504<<3))|0);
      var $507=(($506+2)|0);
      var $508=HEAPU16[(($507)>>1)];
      var $509=((($508))&65535);
      var $510=((($501))|0) < ((($509))|0);
      if ($510) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: // $511
      var $512=$val;
      var $523 = $512;__label__ = 73; break;
    case 72: // $513
      var $514=HEAPU16[((_width)>>1)];
      var $515=((($514))&65535);
      var $516=(((-($515)))|0);
      var $517=$pix;
      var $518=(($517+($516<<3))|0);
      var $519=(($518+2)|0);
      var $520=HEAPU16[(($519)>>1)];
      var $521=((($520))&65535);
      var $523 = $521;__label__ = 73; break;
    case 73: // $522
      var $523;
      var $525 = $523;__label__ = 74; break;
    case 74: // $524
      var $525;
      var $527 = $525;__label__ = 75; break;
    case 75: // $526
      var $527;
      var $528=((($527)) & 65535);
      var $529=$col;
      var $530=$left;
      var $531=((($529)-($530))|0);
      var $532=$row;
      var $533=$top;
      var $534=((($532)-($533))|0);
      var $535=$rgb;
      var $536=(($535+393216)|0);
      var $537=(($536+$534*1536)|0);
      var $538=(($537+$531*6)|0);
      var $539=(($538+2)|0);
      HEAP16[(($539)>>1)]=$528;
      __label__ = 76; break;
    case 76: // $540
      var $541=$col;
      var $542=((($541)+2)|0);
      $col=$542;
      __label__ = 30; break;
    case 77: // $543
      __label__ = 78; break;
    case 78: // $544
      var $545=$row;
      var $546=((($545)+1)|0);
      $row=$546;
      __label__ = 26; break;
    case 79: // $547
      $d=0;
      __label__ = 80; break;
    case 80: // $548
      var $549=$d;
      var $550=((($549))|0) < 2;
      if ($550) { __label__ = 81; break; } else { __label__ = 147; break; }
    case 81: // $551
      var $552=$top;
      var $553=((($552)+1)|0);
      $row=$553;
      __label__ = 82; break;
    case 82: // $554
      var $555=$row;
      var $556=$top;
      var $557=((($556)+256)|0);
      var $558=((($557)-1)|0);
      var $559=((($555))|0) < ((($558))|0);
      if ($559) { __label__ = 83; break; } else { var $567 = 0;__label__ = 84; break; }
    case 83: // $560
      var $561=$row;
      var $562=HEAPU16[((_height)>>1)];
      var $563=((($562))&65535);
      var $564=((($563)-3)|0);
      var $565=((($561))|0) < ((($564))|0);
      var $567 = $565;__label__ = 84; break;
    case 84: // $566
      var $567;
      if ($567) { __label__ = 85; break; } else { __label__ = 145; break; }
    case 85: // $568
      var $569=$left;
      var $570=((($569)+1)|0);
      $col=$570;
      __label__ = 86; break;
    case 86: // $571
      var $572=$col;
      var $573=$left;
      var $574=((($573)+256)|0);
      var $575=((($574)-1)|0);
      var $576=((($572))|0) < ((($575))|0);
      if ($576) { __label__ = 87; break; } else { var $584 = 0;__label__ = 88; break; }
    case 87: // $577
      var $578=$col;
      var $579=HEAPU16[((_width)>>1)];
      var $580=((($579))&65535);
      var $581=((($580)-3)|0);
      var $582=((($578))|0) < ((($581))|0);
      var $584 = $582;__label__ = 88; break;
    case 88: // $583
      var $584;
      if ($584) { __label__ = 89; break; } else { __label__ = 143; break; }
    case 89: // $585
      var $586=HEAP32[((_image)>>2)];
      var $587=$row;
      var $588=HEAPU16[((_width)>>1)];
      var $589=((($588))&65535);
      var $590=((($587)*($589))|0);
      var $591=(($586+($590<<3))|0);
      var $592=$col;
      var $593=(($591+($592<<3))|0);
      $pix=$593;
      var $594=$col;
      var $595=$left;
      var $596=((($594)-($595))|0);
      var $597=$row;
      var $598=$top;
      var $599=((($597)-($598))|0);
      var $600=$d;
      var $601=$rgb;
      var $602=(($601+$600*393216)|0);
      var $603=(($602+$599*1536)|0);
      var $604=(($603+$596*6)|0);
      $rix=$604;
      var $605=$col;
      var $606=$left;
      var $607=((($605)-($606))|0);
      var $608=$row;
      var $609=$top;
      var $610=((($608)-($609))|0);
      var $611=$d;
      var $612=$lab;
      var $613=(($612+$611*393216)|0);
      var $614=(($613+$610*1536)|0);
      var $615=(($614+$607*6)|0);
      $lix=$615;
      var $616=HEAPU32[((_filters)>>2)];
      var $617=$row;
      var $618=($617) << 1;
      var $619=($618) & 14;
      var $620=$col;
      var $621=($620) & 1;
      var $622=((($619)+($621))|0);
      var $623=($622) << 1;
      var $624=($616) >>> ((($623))>>>0);
      var $625=($624) & 3;
      var $626=((2-($625))|0);
      $c=$626;
      var $627=((($626))|0)==1;
      if ($627) { __label__ = 90; break; } else { __label__ = 100; break; }
    case 90: // $628
      var $629=HEAPU32[((_filters)>>2)];
      var $630=$row;
      var $631=((($630)+1)|0);
      var $632=($631) << 1;
      var $633=($632) & 14;
      var $634=$col;
      var $635=($634) & 1;
      var $636=((($633)+($635))|0);
      var $637=($636) << 1;
      var $638=($629) >>> ((($637))>>>0);
      var $639=($638) & 3;
      $c=$639;
      var $640=$pix;
      var $641=(($640)|0);
      var $642=(($641+2)|0);
      var $643=HEAPU16[(($642)>>1)];
      var $644=((($643))&65535);
      var $645=$c;
      var $646=((2-($645))|0);
      var $647=$pix;
      var $648=(($647-8)|0);
      var $649=(($648+($646<<1))|0);
      var $650=HEAPU16[(($649)>>1)];
      var $651=((($650))&65535);
      var $652=$c;
      var $653=((2-($652))|0);
      var $654=$pix;
      var $655=(($654+8)|0);
      var $656=(($655+($653<<1))|0);
      var $657=HEAPU16[(($656)>>1)];
      var $658=((($657))&65535);
      var $659=((($651)+($658))|0);
      var $660=$rix;
      var $661=(($660-6)|0);
      var $662=(($661+2)|0);
      var $663=HEAPU16[(($662)>>1)];
      var $664=((($663))&65535);
      var $665=((($659)-($664))|0);
      var $666=$rix;
      var $667=(($666+6)|0);
      var $668=(($667+2)|0);
      var $669=HEAPU16[(($668)>>1)];
      var $670=((($669))&65535);
      var $671=((($665)-($670))|0);
      var $672=($671) >> 1;
      var $673=((($644)+($672))|0);
      $val=$673;
      var $674=$val;
      var $675=((($674))|0) < 65535;
      if ($675) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: // $676
      var $677=$val;
      var $680 = $677;__label__ = 93; break;
    case 92: // $678
      var $680 = 65535;__label__ = 93; break;
    case 93: // $679
      var $680;
      var $681=0 > ((($680))|0);
      if ($681) { __label__ = 94; break; } else { __label__ = 95; break; }
    case 94: // $682
      var $692 = 0;__label__ = 99; break;
    case 95: // $683
      var $684=$val;
      var $685=((($684))|0) < 65535;
      if ($685) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: // $686
      var $687=$val;
      var $690 = $687;__label__ = 98; break;
    case 97: // $688
      var $690 = 65535;__label__ = 98; break;
    case 98: // $689
      var $690;
      var $692 = $690;__label__ = 99; break;
    case 99: // $691
      var $692;
      var $693=((($692)) & 65535);
      var $694=$c;
      var $695=((2-($694))|0);
      var $696=$rix;
      var $697=(($696)|0);
      var $698=(($697+($695<<1))|0);
      HEAP16[(($698)>>1)]=$693;
      var $699=$pix;
      var $700=(($699)|0);
      var $701=(($700+2)|0);
      var $702=HEAPU16[(($701)>>1)];
      var $703=((($702))&65535);
      var $704=$c;
      var $705=HEAPU16[((_width)>>1)];
      var $706=((($705))&65535);
      var $707=(((-($706)))|0);
      var $708=$pix;
      var $709=(($708+($707<<3))|0);
      var $710=(($709+($704<<1))|0);
      var $711=HEAPU16[(($710)>>1)];
      var $712=((($711))&65535);
      var $713=$c;
      var $714=HEAPU16[((_width)>>1)];
      var $715=((($714))&65535);
      var $716=$pix;
      var $717=(($716+($715<<3))|0);
      var $718=(($717+($713<<1))|0);
      var $719=HEAPU16[(($718)>>1)];
      var $720=((($719))&65535);
      var $721=((($712)+($720))|0);
      var $722=$rix;
      var $723=(($722-1536)|0);
      var $724=(($723+2)|0);
      var $725=HEAPU16[(($724)>>1)];
      var $726=((($725))&65535);
      var $727=((($721)-($726))|0);
      var $728=$rix;
      var $729=(($728+1536)|0);
      var $730=(($729+2)|0);
      var $731=HEAPU16[(($730)>>1)];
      var $732=((($731))&65535);
      var $733=((($727)-($732))|0);
      var $734=($733) >> 1;
      var $735=((($703)+($734))|0);
      $val=$735;
      __label__ = 101; break;
    case 100: // $736
      var $737=$rix;
      var $738=(($737)|0);
      var $739=(($738+2)|0);
      var $740=HEAPU16[(($739)>>1)];
      var $741=((($740))&65535);
      var $742=$c;
      var $743=HEAPU16[((_width)>>1)];
      var $744=((($743))&65535);
      var $745=(((-($744)))|0);
      var $746=((($745)-1)|0);
      var $747=$pix;
      var $748=(($747+($746<<3))|0);
      var $749=(($748+($742<<1))|0);
      var $750=HEAPU16[(($749)>>1)];
      var $751=((($750))&65535);
      var $752=$c;
      var $753=HEAPU16[((_width)>>1)];
      var $754=((($753))&65535);
      var $755=(((-($754)))|0);
      var $756=((($755)+1)|0);
      var $757=$pix;
      var $758=(($757+($756<<3))|0);
      var $759=(($758+($752<<1))|0);
      var $760=HEAPU16[(($759)>>1)];
      var $761=((($760))&65535);
      var $762=((($751)+($761))|0);
      var $763=$c;
      var $764=HEAPU16[((_width)>>1)];
      var $765=((($764))&65535);
      var $766=((($765)-1)|0);
      var $767=$pix;
      var $768=(($767+($766<<3))|0);
      var $769=(($768+($763<<1))|0);
      var $770=HEAPU16[(($769)>>1)];
      var $771=((($770))&65535);
      var $772=((($762)+($771))|0);
      var $773=$c;
      var $774=HEAPU16[((_width)>>1)];
      var $775=((($774))&65535);
      var $776=((($775)+1)|0);
      var $777=$pix;
      var $778=(($777+($776<<3))|0);
      var $779=(($778+($773<<1))|0);
      var $780=HEAPU16[(($779)>>1)];
      var $781=((($780))&65535);
      var $782=((($772)+($781))|0);
      var $783=$rix;
      var $784=(($783-1542)|0);
      var $785=(($784+2)|0);
      var $786=HEAPU16[(($785)>>1)];
      var $787=((($786))&65535);
      var $788=((($782)-($787))|0);
      var $789=$rix;
      var $790=(($789-1530)|0);
      var $791=(($790+2)|0);
      var $792=HEAPU16[(($791)>>1)];
      var $793=((($792))&65535);
      var $794=((($788)-($793))|0);
      var $795=$rix;
      var $796=(($795+1530)|0);
      var $797=(($796+2)|0);
      var $798=HEAPU16[(($797)>>1)];
      var $799=((($798))&65535);
      var $800=((($794)-($799))|0);
      var $801=$rix;
      var $802=(($801+1542)|0);
      var $803=(($802+2)|0);
      var $804=HEAPU16[(($803)>>1)];
      var $805=((($804))&65535);
      var $806=((($800)-($805))|0);
      var $807=((($806)+1)|0);
      var $808=($807) >> 2;
      var $809=((($741)+($808))|0);
      $val=$809;
      __label__ = 101; break;
    case 101: // $810
      var $811=$val;
      var $812=((($811))|0) < 65535;
      if ($812) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: // $813
      var $814=$val;
      var $817 = $814;__label__ = 104; break;
    case 103: // $815
      var $817 = 65535;__label__ = 104; break;
    case 104: // $816
      var $817;
      var $818=0 > ((($817))|0);
      if ($818) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $819
      var $829 = 0;__label__ = 110; break;
    case 106: // $820
      var $821=$val;
      var $822=((($821))|0) < 65535;
      if ($822) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: // $823
      var $824=$val;
      var $827 = $824;__label__ = 109; break;
    case 108: // $825
      var $827 = 65535;__label__ = 109; break;
    case 109: // $826
      var $827;
      var $829 = $827;__label__ = 110; break;
    case 110: // $828
      var $829;
      var $830=((($829)) & 65535);
      var $831=$c;
      var $832=$rix;
      var $833=(($832)|0);
      var $834=(($833+($831<<1))|0);
      HEAP16[(($834)>>1)]=$830;
      var $835=HEAPU32[((_filters)>>2)];
      var $836=$row;
      var $837=($836) << 1;
      var $838=($837) & 14;
      var $839=$col;
      var $840=($839) & 1;
      var $841=((($838)+($840))|0);
      var $842=($841) << 1;
      var $843=($835) >>> ((($842))>>>0);
      var $844=($843) & 3;
      $c=$844;
      var $845=$c;
      var $846=$pix;
      var $847=(($846)|0);
      var $848=(($847+($845<<1))|0);
      var $849=HEAP16[(($848)>>1)];
      var $850=$c;
      var $851=$rix;
      var $852=(($851)|0);
      var $853=(($852+($850<<1))|0);
      HEAP16[(($853)>>1)]=$849;
      var $854=(($xyz+8)|0);
      HEAPF32[(($854)>>2)]=0.5;
      var $855=(($xyz+4)|0);
      HEAPF32[(($855)>>2)]=0.5;
      var $856=(($xyz)|0);
      HEAPF32[(($856)>>2)]=0.5;
      $c=0;
      __label__ = 111; break;
    case 111: // $857
      var $858=$c;
      var $859=HEAP32[((_colors)>>2)];
      var $860=((($858))|0) < ((($859))|0);
      if ($860) { __label__ = 112; break; } else { __label__ = 114; break; }
    case 112: // $861
      var $862=$c;
      var $863=(($xyz_cam)|0);
      var $864=(($863+($862<<2))|0);
      var $865=HEAPF32[(($864)>>2)];
      var $866=$c;
      var $867=$rix;
      var $868=(($867)|0);
      var $869=(($868+($866<<1))|0);
      var $870=HEAPU16[(($869)>>1)];
      var $871=((($870))&65535);
      var $872=((($871))|0);
      var $873=($865)*($872);
      var $874=(($xyz)|0);
      var $875=HEAPF32[(($874)>>2)];
      var $876=($875)+($873);
      HEAPF32[(($874)>>2)]=$876;
      var $877=$c;
      var $878=(($xyz_cam+16)|0);
      var $879=(($878+($877<<2))|0);
      var $880=HEAPF32[(($879)>>2)];
      var $881=$c;
      var $882=$rix;
      var $883=(($882)|0);
      var $884=(($883+($881<<1))|0);
      var $885=HEAPU16[(($884)>>1)];
      var $886=((($885))&65535);
      var $887=((($886))|0);
      var $888=($880)*($887);
      var $889=(($xyz+4)|0);
      var $890=HEAPF32[(($889)>>2)];
      var $891=($890)+($888);
      HEAPF32[(($889)>>2)]=$891;
      var $892=$c;
      var $893=(($xyz_cam+32)|0);
      var $894=(($893+($892<<2))|0);
      var $895=HEAPF32[(($894)>>2)];
      var $896=$c;
      var $897=$rix;
      var $898=(($897)|0);
      var $899=(($898+($896<<1))|0);
      var $900=HEAPU16[(($899)>>1)];
      var $901=((($900))&65535);
      var $902=((($901))|0);
      var $903=($895)*($902);
      var $904=(($xyz+8)|0);
      var $905=HEAPF32[(($904)>>2)];
      var $906=($905)+($903);
      HEAPF32[(($904)>>2)]=$906;
      __label__ = 113; break;
    case 113: // $907
      var $908=$c;
      var $909=((($908)+1)|0);
      $c=$909;
      __label__ = 111; break;
    case 114: // $910
      var $911=(($xyz)|0);
      var $912=HEAPF32[(($911)>>2)];
      var $913=((($912))|0);
      var $914=((($913))|0) < 65535;
      if ($914) { __label__ = 115; break; } else { __label__ = 116; break; }
    case 115: // $915
      var $916=(($xyz)|0);
      var $917=HEAPF32[(($916)>>2)];
      var $918=((($917))|0);
      var $921 = $918;__label__ = 117; break;
    case 116: // $919
      var $921 = 65535;__label__ = 117; break;
    case 117: // $920
      var $921;
      var $922=0 > ((($921))|0);
      if ($922) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: // $923
      var $937 = 0;__label__ = 123; break;
    case 119: // $924
      var $925=(($xyz)|0);
      var $926=HEAPF32[(($925)>>2)];
      var $927=((($926))|0);
      var $928=((($927))|0) < 65535;
      if ($928) { __label__ = 120; break; } else { __label__ = 121; break; }
    case 120: // $929
      var $930=(($xyz)|0);
      var $931=HEAPF32[(($930)>>2)];
      var $932=((($931))|0);
      var $935 = $932;__label__ = 122; break;
    case 121: // $933
      var $935 = 65535;__label__ = 122; break;
    case 122: // $934
      var $935;
      var $937 = $935;__label__ = 123; break;
    case 123: // $936
      var $937;
      var $938=(($cbrt+($937<<2))|0);
      var $939=HEAPF32[(($938)>>2)];
      var $940=(($xyz)|0);
      HEAPF32[(($940)>>2)]=$939;
      var $941=(($xyz+4)|0);
      var $942=HEAPF32[(($941)>>2)];
      var $943=((($942))|0);
      var $944=((($943))|0) < 65535;
      if ($944) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: // $945
      var $946=(($xyz+4)|0);
      var $947=HEAPF32[(($946)>>2)];
      var $948=((($947))|0);
      var $951 = $948;__label__ = 126; break;
    case 125: // $949
      var $951 = 65535;__label__ = 126; break;
    case 126: // $950
      var $951;
      var $952=0 > ((($951))|0);
      if ($952) { __label__ = 127; break; } else { __label__ = 128; break; }
    case 127: // $953
      var $967 = 0;__label__ = 132; break;
    case 128: // $954
      var $955=(($xyz+4)|0);
      var $956=HEAPF32[(($955)>>2)];
      var $957=((($956))|0);
      var $958=((($957))|0) < 65535;
      if ($958) { __label__ = 129; break; } else { __label__ = 130; break; }
    case 129: // $959
      var $960=(($xyz+4)|0);
      var $961=HEAPF32[(($960)>>2)];
      var $962=((($961))|0);
      var $965 = $962;__label__ = 131; break;
    case 130: // $963
      var $965 = 65535;__label__ = 131; break;
    case 131: // $964
      var $965;
      var $967 = $965;__label__ = 132; break;
    case 132: // $966
      var $967;
      var $968=(($cbrt+($967<<2))|0);
      var $969=HEAPF32[(($968)>>2)];
      var $970=(($xyz+4)|0);
      HEAPF32[(($970)>>2)]=$969;
      var $971=(($xyz+8)|0);
      var $972=HEAPF32[(($971)>>2)];
      var $973=((($972))|0);
      var $974=((($973))|0) < 65535;
      if ($974) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: // $975
      var $976=(($xyz+8)|0);
      var $977=HEAPF32[(($976)>>2)];
      var $978=((($977))|0);
      var $981 = $978;__label__ = 135; break;
    case 134: // $979
      var $981 = 65535;__label__ = 135; break;
    case 135: // $980
      var $981;
      var $982=0 > ((($981))|0);
      if ($982) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: // $983
      var $997 = 0;__label__ = 141; break;
    case 137: // $984
      var $985=(($xyz+8)|0);
      var $986=HEAPF32[(($985)>>2)];
      var $987=((($986))|0);
      var $988=((($987))|0) < 65535;
      if ($988) { __label__ = 138; break; } else { __label__ = 139; break; }
    case 138: // $989
      var $990=(($xyz+8)|0);
      var $991=HEAPF32[(($990)>>2)];
      var $992=((($991))|0);
      var $995 = $992;__label__ = 140; break;
    case 139: // $993
      var $995 = 65535;__label__ = 140; break;
    case 140: // $994
      var $995;
      var $997 = $995;__label__ = 141; break;
    case 141: // $996
      var $997;
      var $998=(($cbrt+($997<<2))|0);
      var $999=HEAPF32[(($998)>>2)];
      var $1000=(($xyz+8)|0);
      HEAPF32[(($1000)>>2)]=$999;
      var $1001=(($xyz+4)|0);
      var $1002=HEAPF32[(($1001)>>2)];
      var $1003=($1002)*116;
      var $1004=($1003)-16;
      var $1005=($1004)*64;
      var $1006=((($1005))|0);
      var $1007=$lix;
      var $1008=(($1007)|0);
      var $1009=(($1008)|0);
      HEAP16[(($1009)>>1)]=$1006;
      var $1010=(($xyz)|0);
      var $1011=HEAPF32[(($1010)>>2)];
      var $1012=(($xyz+4)|0);
      var $1013=HEAPF32[(($1012)>>2)];
      var $1014=($1011)-($1013);
      var $1015=($1014)*32000;
      var $1016=((($1015))|0);
      var $1017=$lix;
      var $1018=(($1017)|0);
      var $1019=(($1018+2)|0);
      HEAP16[(($1019)>>1)]=$1016;
      var $1020=(($xyz+4)|0);
      var $1021=HEAPF32[(($1020)>>2)];
      var $1022=(($xyz+8)|0);
      var $1023=HEAPF32[(($1022)>>2)];
      var $1024=($1021)-($1023);
      var $1025=($1024)*12800;
      var $1026=((($1025))|0);
      var $1027=$lix;
      var $1028=(($1027)|0);
      var $1029=(($1028+4)|0);
      HEAP16[(($1029)>>1)]=$1026;
      __label__ = 142; break;
    case 142: // $1030
      var $1031=$col;
      var $1032=((($1031)+1)|0);
      $col=$1032;
      __label__ = 86; break;
    case 143: // $1033
      __label__ = 144; break;
    case 144: // $1034
      var $1035=$row;
      var $1036=((($1035)+1)|0);
      $row=$1036;
      __label__ = 82; break;
    case 145: // $1037
      __label__ = 146; break;
    case 146: // $1038
      var $1039=$d;
      var $1040=((($1039)+1)|0);
      $d=$1040;
      __label__ = 80; break;
    case 147: // $1041
      var $1042=$homo;
      var $1043=$1042;
      _memset($1043, 0, 131072, 1);
      var $1044=$top;
      var $1045=((($1044)+2)|0);
      $row=$1045;
      __label__ = 148; break;
    case 148: // $1046
      var $1047=$row;
      var $1048=$top;
      var $1049=((($1048)+256)|0);
      var $1050=((($1049)-2)|0);
      var $1051=((($1047))|0) < ((($1050))|0);
      if ($1051) { __label__ = 149; break; } else { var $1059 = 0;__label__ = 150; break; }
    case 149: // $1052
      var $1053=$row;
      var $1054=HEAPU16[((_height)>>1)];
      var $1055=((($1054))&65535);
      var $1056=((($1055)-4)|0);
      var $1057=((($1053))|0) < ((($1056))|0);
      var $1059 = $1057;__label__ = 150; break;
    case 150: // $1058
      var $1059;
      if ($1059) { __label__ = 151; break; } else { __label__ = 208; break; }
    case 151: // $1060
      var $1061=$row;
      var $1062=$top;
      var $1063=((($1061)-($1062))|0);
      $tr=$1063;
      var $1064=$left;
      var $1065=((($1064)+2)|0);
      $col=$1065;
      __label__ = 152; break;
    case 152: // $1066
      var $1067=$col;
      var $1068=$left;
      var $1069=((($1068)+256)|0);
      var $1070=((($1069)-2)|0);
      var $1071=((($1067))|0) < ((($1070))|0);
      if ($1071) { __label__ = 153; break; } else { var $1079 = 0;__label__ = 154; break; }
    case 153: // $1072
      var $1073=$col;
      var $1074=HEAPU16[((_width)>>1)];
      var $1075=((($1074))&65535);
      var $1076=((($1075)-4)|0);
      var $1077=((($1073))|0) < ((($1076))|0);
      var $1079 = $1077;__label__ = 154; break;
    case 154: // $1078
      var $1079;
      if ($1079) { __label__ = 155; break; } else { __label__ = 206; break; }
    case 155: // $1080
      var $1081=$col;
      var $1082=$left;
      var $1083=((($1081)-($1082))|0);
      $tc=$1083;
      $d=0;
      __label__ = 156; break;
    case 156: // $1084
      var $1085=$d;
      var $1086=((($1085))|0) < 2;
      if ($1086) { __label__ = 157; break; } else { __label__ = 163; break; }
    case 157: // $1087
      var $1088=$tc;
      var $1089=$tr;
      var $1090=$d;
      var $1091=$lab;
      var $1092=(($1091+$1090*393216)|0);
      var $1093=(($1092+$1089*1536)|0);
      var $1094=(($1093+$1088*6)|0);
      $lix=$1094;
      $i=0;
      __label__ = 158; break;
    case 158: // $1095
      var $1096=$i;
      var $1097=((($1096))|0) < 4;
      if ($1097) { __label__ = 159; break; } else { __label__ = 161; break; }
    case 159: // $1098
      var $1099=$lix;
      var $1100=(($1099)|0);
      var $1101=(($1100)|0);
      var $1102=HEAP16[(($1101)>>1)];
      var $1103=((($1102) << 16) >> 16);
      var $1104=$i;
      var $1105=((_ahd_interpolate_dir+($1104<<2))|0);
      var $1106=HEAP32[(($1105)>>2)];
      var $1107=$lix;
      var $1108=(($1107+$1106*6)|0);
      var $1109=(($1108)|0);
      var $1110=HEAP16[(($1109)>>1)];
      var $1111=((($1110) << 16) >> 16);
      var $1112=((($1103)-($1111))|0);
      var $1113=$lix;
      var $1114=(($1113)|0);
      var $1115=(($1114)|0);
      var $1116=HEAP16[(($1115)>>1)];
      var $1117=((($1116) << 16) >> 16);
      var $1118=$i;
      var $1119=((_ahd_interpolate_dir+($1118<<2))|0);
      var $1120=HEAP32[(($1119)>>2)];
      var $1121=$lix;
      var $1122=(($1121+$1120*6)|0);
      var $1123=(($1122)|0);
      var $1124=HEAP16[(($1123)>>1)];
      var $1125=((($1124) << 16) >> 16);
      var $1126=((($1117)-($1125))|0);
      var $1127=($1126) >> 31;
      var $1128=($1112) ^ ($1127);
      var $1129=$lix;
      var $1130=(($1129)|0);
      var $1131=(($1130)|0);
      var $1132=HEAP16[(($1131)>>1)];
      var $1133=((($1132) << 16) >> 16);
      var $1134=$i;
      var $1135=((_ahd_interpolate_dir+($1134<<2))|0);
      var $1136=HEAP32[(($1135)>>2)];
      var $1137=$lix;
      var $1138=(($1137+$1136*6)|0);
      var $1139=(($1138)|0);
      var $1140=HEAP16[(($1139)>>1)];
      var $1141=((($1140) << 16) >> 16);
      var $1142=((($1133)-($1141))|0);
      var $1143=($1142) >> 31;
      var $1144=((($1128)-($1143))|0);
      var $1145=$i;
      var $1146=$d;
      var $1147=(($ldiff+($1146<<4))|0);
      var $1148=(($1147+($1145<<2))|0);
      HEAP32[(($1148)>>2)]=$1144;
      var $1149=$lix;
      var $1150=(($1149)|0);
      var $1151=(($1150+2)|0);
      var $1152=HEAP16[(($1151)>>1)];
      var $1153=((($1152) << 16) >> 16);
      var $1154=$i;
      var $1155=((_ahd_interpolate_dir+($1154<<2))|0);
      var $1156=HEAP32[(($1155)>>2)];
      var $1157=$lix;
      var $1158=(($1157+$1156*6)|0);
      var $1159=(($1158+2)|0);
      var $1160=HEAP16[(($1159)>>1)];
      var $1161=((($1160) << 16) >> 16);
      var $1162=((($1153)-($1161))|0);
      var $1163=$lix;
      var $1164=(($1163)|0);
      var $1165=(($1164+2)|0);
      var $1166=HEAP16[(($1165)>>1)];
      var $1167=((($1166) << 16) >> 16);
      var $1168=$i;
      var $1169=((_ahd_interpolate_dir+($1168<<2))|0);
      var $1170=HEAP32[(($1169)>>2)];
      var $1171=$lix;
      var $1172=(($1171+$1170*6)|0);
      var $1173=(($1172+2)|0);
      var $1174=HEAP16[(($1173)>>1)];
      var $1175=((($1174) << 16) >> 16);
      var $1176=((($1167)-($1175))|0);
      var $1177=((($1162)*($1176))|0);
      var $1178=$lix;
      var $1179=(($1178)|0);
      var $1180=(($1179+4)|0);
      var $1181=HEAP16[(($1180)>>1)];
      var $1182=((($1181) << 16) >> 16);
      var $1183=$i;
      var $1184=((_ahd_interpolate_dir+($1183<<2))|0);
      var $1185=HEAP32[(($1184)>>2)];
      var $1186=$lix;
      var $1187=(($1186+$1185*6)|0);
      var $1188=(($1187+4)|0);
      var $1189=HEAP16[(($1188)>>1)];
      var $1190=((($1189) << 16) >> 16);
      var $1191=((($1182)-($1190))|0);
      var $1192=$lix;
      var $1193=(($1192)|0);
      var $1194=(($1193+4)|0);
      var $1195=HEAP16[(($1194)>>1)];
      var $1196=((($1195) << 16) >> 16);
      var $1197=$i;
      var $1198=((_ahd_interpolate_dir+($1197<<2))|0);
      var $1199=HEAP32[(($1198)>>2)];
      var $1200=$lix;
      var $1201=(($1200+$1199*6)|0);
      var $1202=(($1201+4)|0);
      var $1203=HEAP16[(($1202)>>1)];
      var $1204=((($1203) << 16) >> 16);
      var $1205=((($1196)-($1204))|0);
      var $1206=((($1191)*($1205))|0);
      var $1207=((($1177)+($1206))|0);
      var $1208=$i;
      var $1209=$d;
      var $1210=(($abdiff+($1209<<4))|0);
      var $1211=(($1210+($1208<<2))|0);
      HEAP32[(($1211)>>2)]=$1207;
      __label__ = 160; break;
    case 160: // $1212
      var $1213=$i;
      var $1214=((($1213)+1)|0);
      $i=$1214;
      __label__ = 158; break;
    case 161: // $1215
      __label__ = 162; break;
    case 162: // $1216
      var $1217=$d;
      var $1218=((($1217)+1)|0);
      $d=$1218;
      __label__ = 156; break;
    case 163: // $1219
      var $1220=(($ldiff)|0);
      var $1221=(($1220)|0);
      var $1222=HEAPU32[(($1221)>>2)];
      var $1223=(($ldiff)|0);
      var $1224=(($1223+4)|0);
      var $1225=HEAPU32[(($1224)>>2)];
      var $1226=((($1222))>>>0) > ((($1225))>>>0);
      if ($1226) { __label__ = 164; break; } else { __label__ = 165; break; }
    case 164: // $1227
      var $1228=(($ldiff)|0);
      var $1229=(($1228)|0);
      var $1230=HEAP32[(($1229)>>2)];
      var $1236 = $1230;__label__ = 166; break;
    case 165: // $1231
      var $1232=(($ldiff)|0);
      var $1233=(($1232+4)|0);
      var $1234=HEAP32[(($1233)>>2)];
      var $1236 = $1234;__label__ = 166; break;
    case 166: // $1235
      var $1236;
      var $1237=(($ldiff+16)|0);
      var $1238=(($1237+8)|0);
      var $1239=HEAPU32[(($1238)>>2)];
      var $1240=(($ldiff+16)|0);
      var $1241=(($1240+12)|0);
      var $1242=HEAPU32[(($1241)>>2)];
      var $1243=((($1239))>>>0) > ((($1242))>>>0);
      if ($1243) { __label__ = 167; break; } else { __label__ = 168; break; }
    case 167: // $1244
      var $1245=(($ldiff+16)|0);
      var $1246=(($1245+8)|0);
      var $1247=HEAP32[(($1246)>>2)];
      var $1253 = $1247;__label__ = 169; break;
    case 168: // $1248
      var $1249=(($ldiff+16)|0);
      var $1250=(($1249+12)|0);
      var $1251=HEAP32[(($1250)>>2)];
      var $1253 = $1251;__label__ = 169; break;
    case 169: // $1252
      var $1253;
      var $1254=((($1236))>>>0) < ((($1253))>>>0);
      if ($1254) { __label__ = 170; break; } else { __label__ = 174; break; }
    case 170: // $1255
      var $1256=(($ldiff)|0);
      var $1257=(($1256)|0);
      var $1258=HEAPU32[(($1257)>>2)];
      var $1259=(($ldiff)|0);
      var $1260=(($1259+4)|0);
      var $1261=HEAPU32[(($1260)>>2)];
      var $1262=((($1258))>>>0) > ((($1261))>>>0);
      if ($1262) { __label__ = 171; break; } else { __label__ = 172; break; }
    case 171: // $1263
      var $1264=(($ldiff)|0);
      var $1265=(($1264)|0);
      var $1266=HEAP32[(($1265)>>2)];
      var $1272 = $1266;__label__ = 173; break;
    case 172: // $1267
      var $1268=(($ldiff)|0);
      var $1269=(($1268+4)|0);
      var $1270=HEAP32[(($1269)>>2)];
      var $1272 = $1270;__label__ = 173; break;
    case 173: // $1271
      var $1272;
      var $1292 = $1272;__label__ = 178; break;
    case 174: // $1273
      var $1274=(($ldiff+16)|0);
      var $1275=(($1274+8)|0);
      var $1276=HEAPU32[(($1275)>>2)];
      var $1277=(($ldiff+16)|0);
      var $1278=(($1277+12)|0);
      var $1279=HEAPU32[(($1278)>>2)];
      var $1280=((($1276))>>>0) > ((($1279))>>>0);
      if ($1280) { __label__ = 175; break; } else { __label__ = 176; break; }
    case 175: // $1281
      var $1282=(($ldiff+16)|0);
      var $1283=(($1282+8)|0);
      var $1284=HEAP32[(($1283)>>2)];
      var $1290 = $1284;__label__ = 177; break;
    case 176: // $1285
      var $1286=(($ldiff+16)|0);
      var $1287=(($1286+12)|0);
      var $1288=HEAP32[(($1287)>>2)];
      var $1290 = $1288;__label__ = 177; break;
    case 177: // $1289
      var $1290;
      var $1292 = $1290;__label__ = 178; break;
    case 178: // $1291
      var $1292;
      $leps=$1292;
      var $1293=(($abdiff)|0);
      var $1294=(($1293)|0);
      var $1295=HEAPU32[(($1294)>>2)];
      var $1296=(($abdiff)|0);
      var $1297=(($1296+4)|0);
      var $1298=HEAPU32[(($1297)>>2)];
      var $1299=((($1295))>>>0) > ((($1298))>>>0);
      if ($1299) { __label__ = 179; break; } else { __label__ = 180; break; }
    case 179: // $1300
      var $1301=(($abdiff)|0);
      var $1302=(($1301)|0);
      var $1303=HEAP32[(($1302)>>2)];
      var $1309 = $1303;__label__ = 181; break;
    case 180: // $1304
      var $1305=(($abdiff)|0);
      var $1306=(($1305+4)|0);
      var $1307=HEAP32[(($1306)>>2)];
      var $1309 = $1307;__label__ = 181; break;
    case 181: // $1308
      var $1309;
      var $1310=(($abdiff+16)|0);
      var $1311=(($1310+8)|0);
      var $1312=HEAPU32[(($1311)>>2)];
      var $1313=(($abdiff+16)|0);
      var $1314=(($1313+12)|0);
      var $1315=HEAPU32[(($1314)>>2)];
      var $1316=((($1312))>>>0) > ((($1315))>>>0);
      if ($1316) { __label__ = 182; break; } else { __label__ = 183; break; }
    case 182: // $1317
      var $1318=(($abdiff+16)|0);
      var $1319=(($1318+8)|0);
      var $1320=HEAP32[(($1319)>>2)];
      var $1326 = $1320;__label__ = 184; break;
    case 183: // $1321
      var $1322=(($abdiff+16)|0);
      var $1323=(($1322+12)|0);
      var $1324=HEAP32[(($1323)>>2)];
      var $1326 = $1324;__label__ = 184; break;
    case 184: // $1325
      var $1326;
      var $1327=((($1309))>>>0) < ((($1326))>>>0);
      if ($1327) { __label__ = 185; break; } else { __label__ = 189; break; }
    case 185: // $1328
      var $1329=(($abdiff)|0);
      var $1330=(($1329)|0);
      var $1331=HEAPU32[(($1330)>>2)];
      var $1332=(($abdiff)|0);
      var $1333=(($1332+4)|0);
      var $1334=HEAPU32[(($1333)>>2)];
      var $1335=((($1331))>>>0) > ((($1334))>>>0);
      if ($1335) { __label__ = 186; break; } else { __label__ = 187; break; }
    case 186: // $1336
      var $1337=(($abdiff)|0);
      var $1338=(($1337)|0);
      var $1339=HEAP32[(($1338)>>2)];
      var $1345 = $1339;__label__ = 188; break;
    case 187: // $1340
      var $1341=(($abdiff)|0);
      var $1342=(($1341+4)|0);
      var $1343=HEAP32[(($1342)>>2)];
      var $1345 = $1343;__label__ = 188; break;
    case 188: // $1344
      var $1345;
      var $1365 = $1345;__label__ = 193; break;
    case 189: // $1346
      var $1347=(($abdiff+16)|0);
      var $1348=(($1347+8)|0);
      var $1349=HEAPU32[(($1348)>>2)];
      var $1350=(($abdiff+16)|0);
      var $1351=(($1350+12)|0);
      var $1352=HEAPU32[(($1351)>>2)];
      var $1353=((($1349))>>>0) > ((($1352))>>>0);
      if ($1353) { __label__ = 190; break; } else { __label__ = 191; break; }
    case 190: // $1354
      var $1355=(($abdiff+16)|0);
      var $1356=(($1355+8)|0);
      var $1357=HEAP32[(($1356)>>2)];
      var $1363 = $1357;__label__ = 192; break;
    case 191: // $1358
      var $1359=(($abdiff+16)|0);
      var $1360=(($1359+12)|0);
      var $1361=HEAP32[(($1360)>>2)];
      var $1363 = $1361;__label__ = 192; break;
    case 192: // $1362
      var $1363;
      var $1365 = $1363;__label__ = 193; break;
    case 193: // $1364
      var $1365;
      $abeps=$1365;
      $d=0;
      __label__ = 194; break;
    case 194: // $1366
      var $1367=$d;
      var $1368=((($1367))|0) < 2;
      if ($1368) { __label__ = 195; break; } else { __label__ = 204; break; }
    case 195: // $1369
      $i=0;
      __label__ = 196; break;
    case 196: // $1370
      var $1371=$i;
      var $1372=((($1371))|0) < 4;
      if ($1372) { __label__ = 197; break; } else { __label__ = 202; break; }
    case 197: // $1373
      var $1374=$i;
      var $1375=$d;
      var $1376=(($ldiff+($1375<<4))|0);
      var $1377=(($1376+($1374<<2))|0);
      var $1378=HEAPU32[(($1377)>>2)];
      var $1379=$leps;
      var $1380=((($1378))>>>0) <= ((($1379))>>>0);
      if ($1380) { __label__ = 198; break; } else { __label__ = 200; break; }
    case 198: // $1381
      var $1382=$i;
      var $1383=$d;
      var $1384=(($abdiff+($1383<<4))|0);
      var $1385=(($1384+($1382<<2))|0);
      var $1386=HEAPU32[(($1385)>>2)];
      var $1387=$abeps;
      var $1388=((($1386))>>>0) <= ((($1387))>>>0);
      if ($1388) { __label__ = 199; break; } else { __label__ = 200; break; }
    case 199: // $1389
      var $1390=$tc;
      var $1391=$tr;
      var $1392=$d;
      var $1393=$homo;
      var $1394=(($1393+($1392<<16))|0);
      var $1395=(($1394+($1391<<8))|0);
      var $1396=(($1395+$1390)|0);
      var $1397=HEAP8[($1396)];
      var $1398=((($1397)+1)&255);
      HEAP8[($1396)]=$1398;
      __label__ = 200; break;
    case 200: // $1399
      __label__ = 201; break;
    case 201: // $1400
      var $1401=$i;
      var $1402=((($1401)+1)|0);
      $i=$1402;
      __label__ = 196; break;
    case 202: // $1403
      __label__ = 203; break;
    case 203: // $1404
      var $1405=$d;
      var $1406=((($1405)+1)|0);
      $d=$1406;
      __label__ = 194; break;
    case 204: // $1407
      __label__ = 205; break;
    case 205: // $1408
      var $1409=$col;
      var $1410=((($1409)+1)|0);
      $col=$1410;
      __label__ = 152; break;
    case 206: // $1411
      __label__ = 207; break;
    case 207: // $1412
      var $1413=$row;
      var $1414=((($1413)+1)|0);
      $row=$1414;
      __label__ = 148; break;
    case 208: // $1415
      var $1416=$top;
      var $1417=((($1416)+3)|0);
      $row=$1417;
      __label__ = 209; break;
    case 209: // $1418
      var $1419=$row;
      var $1420=$top;
      var $1421=((($1420)+256)|0);
      var $1422=((($1421)-3)|0);
      var $1423=((($1419))|0) < ((($1422))|0);
      if ($1423) { __label__ = 210; break; } else { var $1431 = 0;__label__ = 211; break; }
    case 210: // $1424
      var $1425=$row;
      var $1426=HEAPU16[((_height)>>1)];
      var $1427=((($1426))&65535);
      var $1428=((($1427)-5)|0);
      var $1429=((($1425))|0) < ((($1428))|0);
      var $1431 = $1429;__label__ = 211; break;
    case 211: // $1430
      var $1431;
      if ($1431) { __label__ = 212; break; } else { __label__ = 243; break; }
    case 212: // $1432
      var $1433=$row;
      var $1434=$top;
      var $1435=((($1433)-($1434))|0);
      $tr=$1435;
      var $1436=$left;
      var $1437=((($1436)+3)|0);
      $col=$1437;
      __label__ = 213; break;
    case 213: // $1438
      var $1439=$col;
      var $1440=$left;
      var $1441=((($1440)+256)|0);
      var $1442=((($1441)-3)|0);
      var $1443=((($1439))|0) < ((($1442))|0);
      if ($1443) { __label__ = 214; break; } else { var $1451 = 0;__label__ = 215; break; }
    case 214: // $1444
      var $1445=$col;
      var $1446=HEAPU16[((_width)>>1)];
      var $1447=((($1446))&65535);
      var $1448=((($1447)-5)|0);
      var $1449=((($1445))|0) < ((($1448))|0);
      var $1451 = $1449;__label__ = 215; break;
    case 215: // $1450
      var $1451;
      if ($1451) { __label__ = 216; break; } else { __label__ = 241; break; }
    case 216: // $1452
      var $1453=$col;
      var $1454=$left;
      var $1455=((($1453)-($1454))|0);
      $tc=$1455;
      $d=0;
      __label__ = 217; break;
    case 217: // $1456
      var $1457=$d;
      var $1458=((($1457))|0) < 2;
      if ($1458) { __label__ = 218; break; } else { __label__ = 228; break; }
    case 218: // $1459
      var $1460=$d;
      var $1461=(($hm+($1460<<2))|0);
      HEAP32[(($1461)>>2)]=0;
      var $1462=$tr;
      var $1463=((($1462)-1)|0);
      $i=$1463;
      __label__ = 219; break;
    case 219: // $1464
      var $1465=$i;
      var $1466=$tr;
      var $1467=((($1466)+1)|0);
      var $1468=((($1465))|0) <= ((($1467))|0);
      if ($1468) { __label__ = 220; break; } else { __label__ = 226; break; }
    case 220: // $1469
      var $1470=$tc;
      var $1471=((($1470)-1)|0);
      $j=$1471;
      __label__ = 221; break;
    case 221: // $1472
      var $1473=$j;
      var $1474=$tc;
      var $1475=((($1474)+1)|0);
      var $1476=((($1473))|0) <= ((($1475))|0);
      if ($1476) { __label__ = 222; break; } else { __label__ = 224; break; }
    case 222: // $1477
      var $1478=$j;
      var $1479=$i;
      var $1480=$d;
      var $1481=$homo;
      var $1482=(($1481+($1480<<16))|0);
      var $1483=(($1482+($1479<<8))|0);
      var $1484=(($1483+$1478)|0);
      var $1485=HEAP8[($1484)];
      var $1486=((($1485) << 24) >> 24);
      var $1487=$d;
      var $1488=(($hm+($1487<<2))|0);
      var $1489=HEAP32[(($1488)>>2)];
      var $1490=((($1489)+($1486))|0);
      HEAP32[(($1488)>>2)]=$1490;
      __label__ = 223; break;
    case 223: // $1491
      var $1492=$j;
      var $1493=((($1492)+1)|0);
      $j=$1493;
      __label__ = 221; break;
    case 224: // $1494
      __label__ = 225; break;
    case 225: // $1495
      var $1496=$i;
      var $1497=((($1496)+1)|0);
      $i=$1497;
      __label__ = 219; break;
    case 226: // $1498
      __label__ = 227; break;
    case 227: // $1499
      var $1500=$d;
      var $1501=((($1500)+1)|0);
      $d=$1501;
      __label__ = 217; break;
    case 228: // $1502
      var $1503=(($hm)|0);
      var $1504=HEAP32[(($1503)>>2)];
      var $1505=(($hm+4)|0);
      var $1506=HEAP32[(($1505)>>2)];
      var $1507=((($1504))|0)!=((($1506))|0);
      if ($1507) { __label__ = 229; break; } else { __label__ = 234; break; }
    case 229: // $1508
      $c=0;
      __label__ = 230; break;
    case 230: // $1509
      var $1510=$c;
      var $1511=((($1510))|0) < 3;
      if ($1511) { __label__ = 231; break; } else { __label__ = 233; break; }
    case 231: // $1512
      var $1513=$c;
      var $1514=$tc;
      var $1515=$tr;
      var $1516=(($hm+4)|0);
      var $1517=HEAP32[(($1516)>>2)];
      var $1518=(($hm)|0);
      var $1519=HEAP32[(($1518)>>2)];
      var $1520=((($1517))|0) > ((($1519))|0);
      var $1521=((($1520))&1);
      var $1522=$rgb;
      var $1523=(($1522+$1521*393216)|0);
      var $1524=(($1523+$1515*1536)|0);
      var $1525=(($1524+$1514*6)|0);
      var $1526=(($1525+($1513<<1))|0);
      var $1527=HEAP16[(($1526)>>1)];
      var $1528=$c;
      var $1529=$row;
      var $1530=HEAPU16[((_width)>>1)];
      var $1531=((($1530))&65535);
      var $1532=((($1529)*($1531))|0);
      var $1533=$col;
      var $1534=((($1532)+($1533))|0);
      var $1535=HEAP32[((_image)>>2)];
      var $1536=(($1535+($1534<<3))|0);
      var $1537=(($1536+($1528<<1))|0);
      HEAP16[(($1537)>>1)]=$1527;
      __label__ = 232; break;
    case 232: // $1538
      var $1539=$c;
      var $1540=((($1539)+1)|0);
      $c=$1540;
      __label__ = 230; break;
    case 233: // $1541
      __label__ = 239; break;
    case 234: // $1542
      $c=0;
      __label__ = 235; break;
    case 235: // $1543
      var $1544=$c;
      var $1545=((($1544))|0) < 3;
      if ($1545) { __label__ = 236; break; } else { __label__ = 238; break; }
    case 236: // $1546
      var $1547=$c;
      var $1548=$tc;
      var $1549=$tr;
      var $1550=$rgb;
      var $1551=(($1550)|0);
      var $1552=(($1551+$1549*1536)|0);
      var $1553=(($1552+$1548*6)|0);
      var $1554=(($1553+($1547<<1))|0);
      var $1555=HEAPU16[(($1554)>>1)];
      var $1556=((($1555))&65535);
      var $1557=$c;
      var $1558=$tc;
      var $1559=$tr;
      var $1560=$rgb;
      var $1561=(($1560+393216)|0);
      var $1562=(($1561+$1559*1536)|0);
      var $1563=(($1562+$1558*6)|0);
      var $1564=(($1563+($1557<<1))|0);
      var $1565=HEAPU16[(($1564)>>1)];
      var $1566=((($1565))&65535);
      var $1567=((($1556)+($1566))|0);
      var $1568=($1567) >> 1;
      var $1569=((($1568)) & 65535);
      var $1570=$c;
      var $1571=$row;
      var $1572=HEAPU16[((_width)>>1)];
      var $1573=((($1572))&65535);
      var $1574=((($1571)*($1573))|0);
      var $1575=$col;
      var $1576=((($1574)+($1575))|0);
      var $1577=HEAP32[((_image)>>2)];
      var $1578=(($1577+($1576<<3))|0);
      var $1579=(($1578+($1570<<1))|0);
      HEAP16[(($1579)>>1)]=$1569;
      __label__ = 237; break;
    case 237: // $1580
      var $1581=$c;
      var $1582=((($1581)+1)|0);
      $c=$1582;
      __label__ = 235; break;
    case 238: // $1583
      __label__ = 239; break;
    case 239: // $1584
      __label__ = 240; break;
    case 240: // $1585
      var $1586=$col;
      var $1587=((($1586)+1)|0);
      $col=$1587;
      __label__ = 213; break;
    case 241: // $1588
      __label__ = 242; break;
    case 242: // $1589
      var $1590=$row;
      var $1591=((($1590)+1)|0);
      $row=$1591;
      __label__ = 209; break;
    case 243: // $1592
      __label__ = 244; break;
    case 244: // $1593
      var $1594=$left;
      var $1595=((($1594)+250)|0);
      $left=$1595;
      __label__ = 24; break;
    case 245: // $1596
      __label__ = 246; break;
    case 246: // $1597
      var $1598=$top;
      var $1599=((($1598)+250)|0);
      $top=$1599;
      __label__ = 22; break;
    case 247: // $1600
      var $1601=$buffer;
      _free($1601);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ahd_interpolate["X"]=1;

function _median_filter() {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $pix;
      var $pass;
      var $c;
      var $i;
      var $j;
      var $k;
      var $med=__stackBase__;
      $pass=1;
      __label__ = 1; break;
    case 1: // $1
      var $2=$pass;
      var $3=HEAP32[((_med_passes)>>2)];
      var $4=((($2))|0) <= ((($3))|0);
      if ($4) { __label__ = 2; break; } else { __label__ = 43; break; }
    case 2: // $5
      var $6=HEAP32[((_verbose)>>2)];
      var $7=((($6))|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $8
      var $9=HEAP32[((__impure_ptr)>>2)];
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$pass;
      var $13=_fprintf($11, ((__str81)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,tempInt));
      __label__ = 4; break;
    case 4: // $14
      $c=0;
      __label__ = 5; break;
    case 5: // $15
      var $16=$c;
      var $17=((($16))|0) < 3;
      if ($17) { __label__ = 6; break; } else { __label__ = 41; break; }
    case 6: // $18
      var $19=HEAP32[((_image)>>2)];
      $pix=$19;
      __label__ = 7; break;
    case 7: // $20
      var $21=$pix;
      var $22=HEAP32[((_image)>>2)];
      var $23=HEAPU16[((_width)>>1)];
      var $24=((($23))&65535);
      var $25=HEAPU16[((_height)>>1)];
      var $26=((($25))&65535);
      var $27=((($24)*($26))|0);
      var $28=(($22+($27<<3))|0);
      var $29=((($21))>>>0) < ((($28))>>>0);
      if ($29) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $30
      var $31=$c;
      var $32=$pix;
      var $33=(($32)|0);
      var $34=(($33+($31<<1))|0);
      var $35=HEAP16[(($34)>>1)];
      var $36=$pix;
      var $37=(($36)|0);
      var $38=(($37+6)|0);
      HEAP16[(($38)>>1)]=$35;
      __label__ = 9; break;
    case 9: // $39
      var $40=$pix;
      var $41=(($40+8)|0);
      $pix=$41;
      __label__ = 7; break;
    case 10: // $42
      var $43=HEAP32[((_image)>>2)];
      var $44=HEAPU16[((_width)>>1)];
      var $45=((($44))&65535);
      var $46=(($43+($45<<3))|0);
      $pix=$46;
      __label__ = 11; break;
    case 11: // $47
      var $48=$pix;
      var $49=HEAP32[((_image)>>2)];
      var $50=HEAPU16[((_width)>>1)];
      var $51=((($50))&65535);
      var $52=HEAPU16[((_height)>>1)];
      var $53=((($52))&65535);
      var $54=((($53)-1)|0);
      var $55=((($51)*($54))|0);
      var $56=(($49+($55<<3))|0);
      var $57=((($48))>>>0) < ((($56))>>>0);
      if ($57) { __label__ = 12; break; } else { __label__ = 39; break; }
    case 12: // $58
      var $59=$pix;
      var $60=HEAP32[((_image)>>2)];
      var $61=($59);
      var $62=($60);
      var $63=((($61)-($62))|0);
      var $64=((((($63))|0)/8)|0);
      var $65=((($64)+1)|0);
      var $66=HEAPU16[((_width)>>1)];
      var $67=((($66))&65535);
      var $68=((($65))|0)%((($67))|0);
      var $69=((($68))|0) < 2;
      if ($69) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $70
      __label__ = 38; break;
    case 14: // $71
      $k=0;
      var $72=HEAPU16[((_width)>>1)];
      var $73=((($72))&65535);
      var $74=(((-($73)))|0);
      $i=$74;
      __label__ = 15; break;
    case 15: // $75
      var $76=$i;
      var $77=HEAPU16[((_width)>>1)];
      var $78=((($77))&65535);
      var $79=((($76))|0) <= ((($78))|0);
      if ($79) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: // $80
      var $81=$i;
      var $82=((($81)-1)|0);
      $j=$82;
      __label__ = 17; break;
    case 17: // $83
      var $84=$j;
      var $85=$i;
      var $86=((($85)+1)|0);
      var $87=((($84))|0) <= ((($86))|0);
      if ($87) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $88
      var $89=$j;
      var $90=$pix;
      var $91=(($90+($89<<3))|0);
      var $92=(($91+6)|0);
      var $93=HEAPU16[(($92)>>1)];
      var $94=((($93))&65535);
      var $95=$j;
      var $96=$pix;
      var $97=(($96+($95<<3))|0);
      var $98=(($97+2)|0);
      var $99=HEAPU16[(($98)>>1)];
      var $100=((($99))&65535);
      var $101=((($94)-($100))|0);
      var $102=$k;
      var $103=((($102)+1)|0);
      $k=$103;
      var $104=(($med+($102<<2))|0);
      HEAP32[(($104)>>2)]=$101;
      __label__ = 19; break;
    case 19: // $105
      var $106=$j;
      var $107=((($106)+1)|0);
      $j=$107;
      __label__ = 17; break;
    case 20: // $108
      __label__ = 21; break;
    case 21: // $109
      var $110=HEAPU16[((_width)>>1)];
      var $111=((($110))&65535);
      var $112=$i;
      var $113=((($112)+($111))|0);
      $i=$113;
      __label__ = 15; break;
    case 22: // $114
      $i=0;
      __label__ = 23; break;
    case 23: // $115
      var $116=$i;
      var $117=((($116))>>>0) < 38;
      if ($117) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: // $118
      var $119=$i;
      var $120=((_median_filter_opt+$119)|0);
      var $121=HEAPU8[($120)];
      var $122=((($121))&255);
      var $123=(($med+($122<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$i;
      var $126=((($125)+1)|0);
      var $127=((_median_filter_opt+$126)|0);
      var $128=HEAPU8[($127)];
      var $129=((($128))&255);
      var $130=(($med+($129<<2))|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=((($124))|0) > ((($131))|0);
      if ($132) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $133
      var $134=$i;
      var $135=((_median_filter_opt+$134)|0);
      var $136=HEAPU8[($135)];
      var $137=((($136))&255);
      var $138=(($med+($137<<2))|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$i;
      var $141=((($140)+1)|0);
      var $142=((_median_filter_opt+$141)|0);
      var $143=HEAPU8[($142)];
      var $144=((($143))&255);
      var $145=(($med+($144<<2))|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($139)+($146))|0);
      var $148=$i;
      var $149=((_median_filter_opt+$148)|0);
      var $150=HEAPU8[($149)];
      var $151=((($150))&255);
      var $152=(($med+($151<<2))|0);
      HEAP32[(($152)>>2)]=$147;
      var $153=$i;
      var $154=((_median_filter_opt+$153)|0);
      var $155=HEAPU8[($154)];
      var $156=((($155))&255);
      var $157=(($med+($156<<2))|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$i;
      var $160=((($159)+1)|0);
      var $161=((_median_filter_opt+$160)|0);
      var $162=HEAPU8[($161)];
      var $163=((($162))&255);
      var $164=(($med+($163<<2))|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($158)-($165))|0);
      var $167=$i;
      var $168=((($167)+1)|0);
      var $169=((_median_filter_opt+$168)|0);
      var $170=HEAPU8[($169)];
      var $171=((($170))&255);
      var $172=(($med+($171<<2))|0);
      HEAP32[(($172)>>2)]=$166;
      var $173=$i;
      var $174=((_median_filter_opt+$173)|0);
      var $175=HEAPU8[($174)];
      var $176=((($175))&255);
      var $177=(($med+($176<<2))|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$i;
      var $180=((($179)+1)|0);
      var $181=((_median_filter_opt+$180)|0);
      var $182=HEAPU8[($181)];
      var $183=((($182))&255);
      var $184=(($med+($183<<2))|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=((($178)-($185))|0);
      var $187=$i;
      var $188=((_median_filter_opt+$187)|0);
      var $189=HEAPU8[($188)];
      var $190=((($189))&255);
      var $191=(($med+($190<<2))|0);
      HEAP32[(($191)>>2)]=$186;
      __label__ = 26; break;
    case 26: // $192
      __label__ = 27; break;
    case 27: // $193
      var $194=$i;
      var $195=((($194)+2)|0);
      $i=$195;
      __label__ = 23; break;
    case 28: // $196
      var $197=(($med+16)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$pix;
      var $200=(($199)|0);
      var $201=(($200+2)|0);
      var $202=HEAPU16[(($201)>>1)];
      var $203=((($202))&65535);
      var $204=((($198)+($203))|0);
      var $205=((($204))|0) < 65535;
      if ($205) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $206
      var $207=(($med+16)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$pix;
      var $210=(($209)|0);
      var $211=(($210+2)|0);
      var $212=HEAPU16[(($211)>>1)];
      var $213=((($212))&65535);
      var $214=((($208)+($213))|0);
      var $217 = $214;__label__ = 31; break;
    case 30: // $215
      var $217 = 65535;__label__ = 31; break;
    case 31: // $216
      var $217;
      var $218=0 > ((($217))|0);
      if ($218) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: // $219
      var $243 = 0;__label__ = 37; break;
    case 33: // $220
      var $221=(($med+16)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$pix;
      var $224=(($223)|0);
      var $225=(($224+2)|0);
      var $226=HEAPU16[(($225)>>1)];
      var $227=((($226))&65535);
      var $228=((($222)+($227))|0);
      var $229=((($228))|0) < 65535;
      if ($229) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: // $230
      var $231=(($med+16)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$pix;
      var $234=(($233)|0);
      var $235=(($234+2)|0);
      var $236=HEAPU16[(($235)>>1)];
      var $237=((($236))&65535);
      var $238=((($232)+($237))|0);
      var $241 = $238;__label__ = 36; break;
    case 35: // $239
      var $241 = 65535;__label__ = 36; break;
    case 36: // $240
      var $241;
      var $243 = $241;__label__ = 37; break;
    case 37: // $242
      var $243;
      var $244=((($243)) & 65535);
      var $245=$c;
      var $246=$pix;
      var $247=(($246)|0);
      var $248=(($247+($245<<1))|0);
      HEAP16[(($248)>>1)]=$244;
      __label__ = 38; break;
    case 38: // $249
      var $250=$pix;
      var $251=(($250+8)|0);
      $pix=$251;
      __label__ = 11; break;
    case 39: // $252
      __label__ = 40; break;
    case 40: // $253
      var $254=$c;
      var $255=((($254)+2)|0);
      $c=$255;
      __label__ = 5; break;
    case 41: // $256
      __label__ = 42; break;
    case 42: // $257
      var $258=$pass;
      var $259=((($258)+1)|0);
      $pass=$259;
      __label__ = 1; break;
    case 43: // $260
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_median_filter["X"]=1;

function _blend_highlights() {
  var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $clip;
      var $row;
      var $col;
      var $c;
      var $i;
      var $j;
      var $cam=__stackBase__;
      var $lab=__stackBase__+32;
      var $sum=__stackBase__+64;
      var $chratio;
      $clip=2147483647;
      var $1=HEAP32[((_colors)>>2)];
      var $2=((($1)-3)|0);
      var $3=((($2))>>>0) > 1;
      if ($3) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $4
      __label__ = 65; break;
    case 2: // $5
      var $6=HEAP32[((_verbose)>>2)];
      var $7=((($6))|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $8
      var $9=HEAP32[((__impure_ptr)>>2)];
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=_fprintf($11, ((__str82)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: // $13
      $c=0;
      __label__ = 5; break;
    case 5: // $14
      var $15=$c;
      var $16=HEAP32[((_colors)>>2)];
      var $17=((($15))|0) < ((($16))|0);
      if ($17) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: // $18
      var $19=$clip;
      var $20=$c;
      var $21=((_pre_mul+($20<<2))|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=($22)*65535;
      var $24=((($23))|0);
      $i=$24;
      var $25=((($19))|0) > ((($24))|0);
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $26
      var $27=$i;
      $clip=$27;
      __label__ = 8; break;
    case 8: // $28
      __label__ = 9; break;
    case 9: // $29
      var $30=$c;
      var $31=((($30)+1)|0);
      $c=$31;
      __label__ = 5; break;
    case 10: // $32
      $row=0;
      __label__ = 11; break;
    case 11: // $33
      var $34=$row;
      var $35=HEAPU16[((_height)>>1)];
      var $36=((($35))&65535);
      var $37=((($34))|0) < ((($36))|0);
      if ($37) { __label__ = 12; break; } else { __label__ = 65; break; }
    case 12: // $38
      $col=0;
      __label__ = 13; break;
    case 13: // $39
      var $40=$col;
      var $41=HEAPU16[((_width)>>1)];
      var $42=((($41))&65535);
      var $43=((($40))|0) < ((($42))|0);
      if ($43) { __label__ = 14; break; } else { __label__ = 63; break; }
    case 14: // $44
      $c=0;
      __label__ = 15; break;
    case 15: // $45
      var $46=$c;
      var $47=HEAP32[((_colors)>>2)];
      var $48=((($46))|0) < ((($47))|0);
      if ($48) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: // $49
      var $50=$c;
      var $51=$row;
      var $52=HEAPU16[((_width)>>1)];
      var $53=((($52))&65535);
      var $54=((($51)*($53))|0);
      var $55=$col;
      var $56=((($54)+($55))|0);
      var $57=HEAP32[((_image)>>2)];
      var $58=(($57+($56<<3))|0);
      var $59=(($58+($50<<1))|0);
      var $60=HEAPU16[(($59)>>1)];
      var $61=((($60))&65535);
      var $62=$clip;
      var $63=((($61))|0) > ((($62))|0);
      if ($63) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $64
      __label__ = 20; break;
    case 18: // $65
      __label__ = 19; break;
    case 19: // $66
      var $67=$c;
      var $68=((($67)+1)|0);
      $c=$68;
      __label__ = 15; break;
    case 20: // $69
      var $70=$c;
      var $71=HEAP32[((_colors)>>2)];
      var $72=((($70))|0)==((($71))|0);
      if ($72) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $73
      __label__ = 62; break;
    case 22: // $74
      $c=0;
      __label__ = 23; break;
    case 23: // $75
      var $76=$c;
      var $77=HEAP32[((_colors)>>2)];
      var $78=((($76))|0) < ((($77))|0);
      if ($78) { __label__ = 24; break; } else { __label__ = 29; break; }
    case 24: // $79
      var $80=$c;
      var $81=$row;
      var $82=HEAPU16[((_width)>>1)];
      var $83=((($82))&65535);
      var $84=((($81)*($83))|0);
      var $85=$col;
      var $86=((($84)+($85))|0);
      var $87=HEAP32[((_image)>>2)];
      var $88=(($87+($86<<3))|0);
      var $89=(($88+($80<<1))|0);
      var $90=HEAPU16[(($89)>>1)];
      var $91=((($90))&65535);
      var $92=$c;
      var $93=(($cam)|0);
      var $94=(($93+($92<<2))|0);
      HEAPF32[(($94)>>2)]=$91;
      var $95=$c;
      var $96=(($cam)|0);
      var $97=(($96+($95<<2))|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=$clip;
      var $100=((($99))|0);
      var $101=($98) < ($100);
      if ($101) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $102
      var $103=$c;
      var $104=(($cam)|0);
      var $105=(($104+($103<<2))|0);
      var $106=HEAPF32[(($105)>>2)];
      var $111 = $106;__label__ = 27; break;
    case 26: // $107
      var $108=$clip;
      var $109=((($108))|0);
      var $111 = $109;__label__ = 27; break;
    case 27: // $110
      var $111;
      var $112=$c;
      var $113=(($cam+16)|0);
      var $114=(($113+($112<<2))|0);
      HEAPF32[(($114)>>2)]=$111;
      __label__ = 28; break;
    case 28: // $115
      var $116=$c;
      var $117=((($116)+1)|0);
      $c=$117;
      __label__ = 23; break;
    case 29: // $118
      $i=0;
      __label__ = 30; break;
    case 30: // $119
      var $120=$i;
      var $121=((($120))|0) < 2;
      if ($121) { __label__ = 31; break; } else { __label__ = 45; break; }
    case 31: // $122
      $c=0;
      __label__ = 32; break;
    case 32: // $123
      var $124=$c;
      var $125=HEAP32[((_colors)>>2)];
      var $126=((($124))|0) < ((($125))|0);
      if ($126) { __label__ = 33; break; } else { __label__ = 39; break; }
    case 33: // $127
      $j=0;
      var $128=$c;
      var $129=$i;
      var $130=(($lab+($129<<4))|0);
      var $131=(($130+($128<<2))|0);
      HEAPF32[(($131)>>2)]=0;
      __label__ = 34; break;
    case 34: // $132
      var $133=$j;
      var $134=HEAP32[((_colors)>>2)];
      var $135=((($133))|0) < ((($134))|0);
      if ($135) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: // $136
      var $137=$j;
      var $138=$c;
      var $139=HEAP32[((_colors)>>2)];
      var $140=((($139)-3)|0);
      var $141=((_blend_highlights_trans+($140<<6))|0);
      var $142=(($141+($138<<4))|0);
      var $143=(($142+($137<<2))|0);
      var $144=HEAPF32[(($143)>>2)];
      var $145=$j;
      var $146=$i;
      var $147=(($cam+($146<<4))|0);
      var $148=(($147+($145<<2))|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=($144)*($149);
      var $151=$c;
      var $152=$i;
      var $153=(($lab+($152<<4))|0);
      var $154=(($153+($151<<2))|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=($155)+($150);
      HEAPF32[(($154)>>2)]=$156;
      __label__ = 36; break;
    case 36: // $157
      var $158=$j;
      var $159=((($158)+1)|0);
      $j=$159;
      __label__ = 34; break;
    case 37: // $160
      __label__ = 38; break;
    case 38: // $161
      var $162=$c;
      var $163=((($162)+1)|0);
      $c=$163;
      __label__ = 32; break;
    case 39: // $164
      var $165=$i;
      var $166=(($sum+($165<<2))|0);
      HEAPF32[(($166)>>2)]=0;
      $c=1;
      __label__ = 40; break;
    case 40: // $167
      var $168=$c;
      var $169=HEAP32[((_colors)>>2)];
      var $170=((($168))|0) < ((($169))|0);
      if ($170) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: // $171
      var $172=$c;
      var $173=$i;
      var $174=(($lab+($173<<4))|0);
      var $175=(($174+($172<<2))|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=$c;
      var $178=$i;
      var $179=(($lab+($178<<4))|0);
      var $180=(($179+($177<<2))|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=($176)*($181);
      var $183=$i;
      var $184=(($sum+($183<<2))|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=($185)+($182);
      HEAPF32[(($184)>>2)]=$186;
      __label__ = 42; break;
    case 42: // $187
      var $188=$c;
      var $189=((($188)+1)|0);
      $c=$189;
      __label__ = 40; break;
    case 43: // $190
      __label__ = 44; break;
    case 44: // $191
      var $192=$i;
      var $193=((($192)+1)|0);
      $i=$193;
      __label__ = 30; break;
    case 45: // $194
      var $195=(($sum+4)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=(($sum)|0);
      var $198=HEAPF32[(($197)>>2)];
      var $199=($196)/($198);
      var $200=($199);
      var $201=_sqrt($200);
      var $202=($201);
      $chratio=$202;
      $c=1;
      __label__ = 46; break;
    case 46: // $203
      var $204=$c;
      var $205=HEAP32[((_colors)>>2)];
      var $206=((($204))|0) < ((($205))|0);
      if ($206) { __label__ = 47; break; } else { __label__ = 49; break; }
    case 47: // $207
      var $208=$chratio;
      var $209=$c;
      var $210=(($lab)|0);
      var $211=(($210+($209<<2))|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=($212)*($208);
      HEAPF32[(($211)>>2)]=$213;
      __label__ = 48; break;
    case 48: // $214
      var $215=$c;
      var $216=((($215)+1)|0);
      $c=$216;
      __label__ = 46; break;
    case 49: // $217
      $c=0;
      __label__ = 50; break;
    case 50: // $218
      var $219=$c;
      var $220=HEAP32[((_colors)>>2)];
      var $221=((($219))|0) < ((($220))|0);
      if ($221) { __label__ = 51; break; } else { __label__ = 57; break; }
    case 51: // $222
      $j=0;
      var $223=$c;
      var $224=(($cam)|0);
      var $225=(($224+($223<<2))|0);
      HEAPF32[(($225)>>2)]=0;
      __label__ = 52; break;
    case 52: // $226
      var $227=$j;
      var $228=HEAP32[((_colors)>>2)];
      var $229=((($227))|0) < ((($228))|0);
      if ($229) { __label__ = 53; break; } else { __label__ = 55; break; }
    case 53: // $230
      var $231=$j;
      var $232=$c;
      var $233=HEAP32[((_colors)>>2)];
      var $234=((($233)-3)|0);
      var $235=((_blend_highlights_itrans+($234<<6))|0);
      var $236=(($235+($232<<4))|0);
      var $237=(($236+($231<<2))|0);
      var $238=HEAPF32[(($237)>>2)];
      var $239=$j;
      var $240=(($lab)|0);
      var $241=(($240+($239<<2))|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=($238)*($242);
      var $244=$c;
      var $245=(($cam)|0);
      var $246=(($245+($244<<2))|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=($247)+($243);
      HEAPF32[(($246)>>2)]=$248;
      __label__ = 54; break;
    case 54: // $249
      var $250=$j;
      var $251=((($250)+1)|0);
      $j=$251;
      __label__ = 52; break;
    case 55: // $252
      __label__ = 56; break;
    case 56: // $253
      var $254=$c;
      var $255=((($254)+1)|0);
      $c=$255;
      __label__ = 50; break;
    case 57: // $256
      $c=0;
      __label__ = 58; break;
    case 58: // $257
      var $258=$c;
      var $259=HEAP32[((_colors)>>2)];
      var $260=((($258))|0) < ((($259))|0);
      if ($260) { __label__ = 59; break; } else { __label__ = 61; break; }
    case 59: // $261
      var $262=$c;
      var $263=(($cam)|0);
      var $264=(($263+($262<<2))|0);
      var $265=HEAPF32[(($264)>>2)];
      var $266=HEAP32[((_colors)>>2)];
      var $267=((($266))|0);
      var $268=($265)/($267);
      var $269=(($268) >= 0 ? Math.floor(($268)) : Math.ceil(($268)));
      var $270=$c;
      var $271=$row;
      var $272=HEAPU16[((_width)>>1)];
      var $273=((($272))&65535);
      var $274=((($271)*($273))|0);
      var $275=$col;
      var $276=((($274)+($275))|0);
      var $277=HEAP32[((_image)>>2)];
      var $278=(($277+($276<<3))|0);
      var $279=(($278+($270<<1))|0);
      HEAP16[(($279)>>1)]=$269;
      __label__ = 60; break;
    case 60: // $280
      var $281=$c;
      var $282=((($281)+1)|0);
      $c=$282;
      __label__ = 58; break;
    case 61: // $283
      __label__ = 62; break;
    case 62: // $284
      var $285=$col;
      var $286=((($285)+1)|0);
      $col=$286;
      __label__ = 13; break;
    case 63: // $287
      __label__ = 64; break;
    case 64: // $288
      var $289=$row;
      var $290=((($289)+1)|0);
      $row=$290;
      __label__ = 11; break;
    case 65: // $291
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_blend_highlights["X"]=1;

function _recover_highlights() {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $map;
      var $sum;
      var $wgt;
      var $grow;
      var $hsat=__stackBase__;
      var $count;
      var $spread;
      var $change;
      var $val;
      var $i;
      var $high;
      var $wide;
      var $mrow;
      var $mcol;
      var $row;
      var $col;
      var $kc;
      var $c;
      var $d;
      var $y;
      var $x;
      var $pixel;
      var $1=HEAP32[((_verbose)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      var $4=HEAP32[((__impure_ptr)>>2)];
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fprintf($6, ((__str83)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 2; break;
    case 2: // $8
      var $9=HEAP32[((_highlight)>>2)];
      var $10=((4-($9))|0);
      var $11=((($10))|0);
      var $12=_llvm_pow_f64(2, $11);
      var $13=($12);
      $grow=$13;
      $c=0;
      __label__ = 3; break;
    case 3: // $14
      var $15=$c;
      var $16=HEAPU32[((_colors)>>2)];
      var $17=((($15))>>>0) < ((($16))>>>0);
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $18
      var $19=$c;
      var $20=((_pre_mul+($19<<2))|0);
      var $21=HEAPF32[(($20)>>2)];
      var $22=($21)*32000;
      var $23=((($22))|0);
      var $24=$c;
      var $25=(($hsat+($24<<2))|0);
      HEAP32[(($25)>>2)]=$23;
      __label__ = 5; break;
    case 5: // $26
      var $27=$c;
      var $28=((($27)+1)|0);
      $c=$28;
      __label__ = 3; break;
    case 6: // $29
      $kc=0;
      $c=1;
      __label__ = 7; break;
    case 7: // $30
      var $31=$c;
      var $32=HEAPU32[((_colors)>>2)];
      var $33=((($31))>>>0) < ((($32))>>>0);
      if ($33) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: // $34
      var $35=$kc;
      var $36=((_pre_mul+($35<<2))|0);
      var $37=HEAPF32[(($36)>>2)];
      var $38=$c;
      var $39=((_pre_mul+($38<<2))|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=($37) < ($40);
      if ($41) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $42
      var $43=$c;
      $kc=$43;
      __label__ = 10; break;
    case 10: // $44
      __label__ = 11; break;
    case 11: // $45
      var $46=$c;
      var $47=((($46)+1)|0);
      $c=$47;
      __label__ = 7; break;
    case 12: // $48
      var $49=HEAPU16[((_height)>>1)];
      var $50=((($49))&65535);
      var $51=HEAPU16[((_shrink)>>1)];
      var $52=((($51))&65535);
      var $53=4 >> ((($52))|0);
      var $54=((((($50))|0)/((($53))|0))|0);
      $high=$54;
      var $55=HEAPU16[((_width)>>1)];
      var $56=((($55))&65535);
      var $57=HEAPU16[((_shrink)>>1)];
      var $58=((($57))&65535);
      var $59=4 >> ((($58))|0);
      var $60=((((($56))|0)/((($59))|0))|0);
      $wide=$60;
      var $61=$high;
      var $62=$wide;
      var $63=((($61)*($62))|0);
      var $64=_calloc($63, 4);
      var $65=$64;
      $map=$65;
      var $66=$map;
      var $67=$66;
      _merror($67, ((__str84)|0));
      $c=0;
      __label__ = 13; break;
    case 13: // $68
      var $69=$c;
      var $70=HEAPU32[((_colors)>>2)];
      var $71=((($69))>>>0) < ((($70))>>>0);
      if ($71) { __label__ = 14; break; } else { __label__ = 105; break; }
    case 14: // $72
      var $73=$c;
      var $74=$kc;
      var $75=((($73))|0)!=((($74))|0);
      if ($75) { __label__ = 15; break; } else { __label__ = 103; break; }
    case 15: // $76
      var $77=$map;
      var $78=$77;
      var $79=$high;
      var $80=$wide;
      var $81=((($79)*($80))|0);
      var $82=(((($81)<<2))|0);
      _memset($78, 0, $82, 1);
      $mrow=0;
      __label__ = 16; break;
    case 16: // $83
      var $84=$mrow;
      var $85=$high;
      var $86=((($84))>>>0) < ((($85))>>>0);
      if ($86) { __label__ = 17; break; } else { __label__ = 36; break; }
    case 17: // $87
      $mcol=0;
      __label__ = 18; break;
    case 18: // $88
      var $89=$mcol;
      var $90=$wide;
      var $91=((($89))>>>0) < ((($90))>>>0);
      if ($91) { __label__ = 19; break; } else { __label__ = 34; break; }
    case 19: // $92
      $count=0;
      $wgt=0;
      $sum=0;
      var $93=$mrow;
      var $94=HEAPU16[((_shrink)>>1)];
      var $95=((($94))&65535);
      var $96=4 >> ((($95))|0);
      var $97=((($93)*($96))|0);
      $row=$97;
      __label__ = 20; break;
    case 20: // $98
      var $99=$row;
      var $100=$mrow;
      var $101=((($100)+1)|0);
      var $102=HEAPU16[((_shrink)>>1)];
      var $103=((($102))&65535);
      var $104=4 >> ((($103))|0);
      var $105=((($101)*($104))|0);
      var $106=((($99))>>>0) < ((($105))>>>0);
      if ($106) { __label__ = 21; break; } else { __label__ = 30; break; }
    case 21: // $107
      var $108=$mcol;
      var $109=HEAPU16[((_shrink)>>1)];
      var $110=((($109))&65535);
      var $111=4 >> ((($110))|0);
      var $112=((($108)*($111))|0);
      $col=$112;
      __label__ = 22; break;
    case 22: // $113
      var $114=$col;
      var $115=$mcol;
      var $116=((($115)+1)|0);
      var $117=HEAPU16[((_shrink)>>1)];
      var $118=((($117))&65535);
      var $119=4 >> ((($118))|0);
      var $120=((($116)*($119))|0);
      var $121=((($114))>>>0) < ((($120))>>>0);
      if ($121) { __label__ = 23; break; } else { __label__ = 28; break; }
    case 23: // $122
      var $123=$row;
      var $124=HEAPU16[((_width)>>1)];
      var $125=((($124))&65535);
      var $126=((($123)*($125))|0);
      var $127=$col;
      var $128=((($126)+($127))|0);
      var $129=HEAP32[((_image)>>2)];
      var $130=(($129+($128<<3))|0);
      var $131=(($130)|0);
      $pixel=$131;
      var $132=$c;
      var $133=$pixel;
      var $134=(($133+($132<<1))|0);
      var $135=HEAPU16[(($134)>>1)];
      var $136=((($135))&65535);
      var $137=$c;
      var $138=(($hsat+($137<<2))|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((((($136))|0)/((($139))|0))|0);
      var $141=((($140))|0)==1;
      if ($141) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: // $142
      var $143=$kc;
      var $144=$pixel;
      var $145=(($144+($143<<1))|0);
      var $146=HEAPU16[(($145)>>1)];
      var $147=((($146))&65535);
      var $148=((($147))|0) > 24000;
      if ($148) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $149
      var $150=$c;
      var $151=$pixel;
      var $152=(($151+($150<<1))|0);
      var $153=HEAPU16[(($152)>>1)];
      var $154=((($153))&65535);
      var $155=((($154))|0);
      var $156=$sum;
      var $157=($156)+($155);
      $sum=$157;
      var $158=$kc;
      var $159=$pixel;
      var $160=(($159+($158<<1))|0);
      var $161=HEAPU16[(($160)>>1)];
      var $162=((($161))&65535);
      var $163=((($162))|0);
      var $164=$wgt;
      var $165=($164)+($163);
      $wgt=$165;
      var $166=$count;
      var $167=((($166)+1)|0);
      $count=$167;
      __label__ = 26; break;
    case 26: // $168
      __label__ = 27; break;
    case 27: // $169
      var $170=$col;
      var $171=((($170)+1)|0);
      $col=$171;
      __label__ = 22; break;
    case 28: // $172
      __label__ = 29; break;
    case 29: // $173
      var $174=$row;
      var $175=((($174)+1)|0);
      $row=$175;
      __label__ = 20; break;
    case 30: // $176
      var $177=$count;
      var $178=HEAPU16[((_shrink)>>1)];
      var $179=((($178))&65535);
      var $180=4 >> ((($179))|0);
      var $181=HEAPU16[((_shrink)>>1)];
      var $182=((($181))&65535);
      var $183=4 >> ((($182))|0);
      var $184=((($180)*($183))|0);
      var $185=((($177))|0)==((($184))|0);
      if ($185) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $186
      var $187=$sum;
      var $188=$wgt;
      var $189=($187)/($188);
      var $190=$mrow;
      var $191=$wide;
      var $192=((($190)*($191))|0);
      var $193=$mcol;
      var $194=((($192)+($193))|0);
      var $195=$map;
      var $196=(($195+($194<<2))|0);
      HEAPF32[(($196)>>2)]=$189;
      __label__ = 32; break;
    case 32: // $197
      __label__ = 33; break;
    case 33: // $198
      var $199=$mcol;
      var $200=((($199)+1)|0);
      $mcol=$200;
      __label__ = 18; break;
    case 34: // $201
      __label__ = 35; break;
    case 35: // $202
      var $203=$mrow;
      var $204=((($203)+1)|0);
      $mrow=$204;
      __label__ = 16; break;
    case 36: // $205
      var $206=$grow;
      var $207=32/($206);
      var $208=((($207))|0);
      $spread=$208;
      __label__ = 37; break;
    case 37: // $209
      var $210=$spread;
      var $211=((($210)-1)|0);
      $spread=$211;
      var $212=((($210))|0)!=0;
      if ($212) { __label__ = 38; break; } else { __label__ = 67; break; }
    case 38: // $213
      $mrow=0;
      __label__ = 39; break;
    case 39: // $214
      var $215=$mrow;
      var $216=$high;
      var $217=((($215))>>>0) < ((($216))>>>0);
      if ($217) { __label__ = 40; break; } else { __label__ = 58; break; }
    case 40: // $218
      $mcol=0;
      __label__ = 41; break;
    case 41: // $219
      var $220=$mcol;
      var $221=$wide;
      var $222=((($220))>>>0) < ((($221))>>>0);
      if ($222) { __label__ = 42; break; } else { __label__ = 56; break; }
    case 42: // $223
      var $224=$mrow;
      var $225=$wide;
      var $226=((($224)*($225))|0);
      var $227=$mcol;
      var $228=((($226)+($227))|0);
      var $229=$map;
      var $230=(($229+($228<<2))|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=($231) != 0;
      if ($232) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: // $233
      __label__ = 55; break;
    case 44: // $234
      $count=0;
      $sum=0;
      $d=0;
      __label__ = 45; break;
    case 45: // $235
      var $236=$d;
      var $237=((($236))>>>0) < 8;
      if ($237) { __label__ = 46; break; } else { __label__ = 52; break; }
    case 46: // $238
      var $239=$mrow;
      var $240=$d;
      var $241=((_recover_highlights_dir+($240<<1))|0);
      var $242=(($241)|0);
      var $243=HEAP8[($242)];
      var $244=((($243) << 24) >> 24);
      var $245=((($239)+($244))|0);
      $y=$245;
      var $246=$mcol;
      var $247=$d;
      var $248=((_recover_highlights_dir+($247<<1))|0);
      var $249=(($248+1)|0);
      var $250=HEAP8[($249)];
      var $251=((($250) << 24) >> 24);
      var $252=((($246)+($251))|0);
      $x=$252;
      var $253=$y;
      var $254=$high;
      var $255=((($253))>>>0) < ((($254))>>>0);
      if ($255) { __label__ = 47; break; } else { __label__ = 50; break; }
    case 47: // $256
      var $257=$x;
      var $258=$wide;
      var $259=((($257))>>>0) < ((($258))>>>0);
      if ($259) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: // $260
      var $261=$y;
      var $262=$wide;
      var $263=((($261)*($262))|0);
      var $264=$x;
      var $265=((($263)+($264))|0);
      var $266=$map;
      var $267=(($266+($265<<2))|0);
      var $268=HEAPF32[(($267)>>2)];
      var $269=($268) > 0;
      if ($269) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: // $270
      var $271=$d;
      var $272=($271) & 1;
      var $273=((($272)+1)|0);
      var $274=((($273))>>>0);
      var $275=$y;
      var $276=$wide;
      var $277=((($275)*($276))|0);
      var $278=$x;
      var $279=((($277)+($278))|0);
      var $280=$map;
      var $281=(($280+($279<<2))|0);
      var $282=HEAPF32[(($281)>>2)];
      var $283=($274)*($282);
      var $284=$sum;
      var $285=($284)+($283);
      $sum=$285;
      var $286=$d;
      var $287=($286) & 1;
      var $288=((($287)+1)|0);
      var $289=$count;
      var $290=((($289)+($288))|0);
      $count=$290;
      __label__ = 50; break;
    case 50: // $291
      __label__ = 51; break;
    case 51: // $292
      var $293=$d;
      var $294=((($293)+1)|0);
      $d=$294;
      __label__ = 45; break;
    case 52: // $295
      var $296=$count;
      var $297=((($296))|0) > 3;
      if ($297) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: // $298
      var $299=$sum;
      var $300=$grow;
      var $301=($299)+($300);
      var $302=(-($301));
      var $303=$count;
      var $304=((($303))|0);
      var $305=$grow;
      var $306=($304)+($305);
      var $307=($302)/($306);
      var $308=$mrow;
      var $309=$wide;
      var $310=((($308)*($309))|0);
      var $311=$mcol;
      var $312=((($310)+($311))|0);
      var $313=$map;
      var $314=(($313+($312<<2))|0);
      HEAPF32[(($314)>>2)]=$307;
      __label__ = 54; break;
    case 54: // $315
      __label__ = 55; break;
    case 55: // $316
      var $317=$mcol;
      var $318=((($317)+1)|0);
      $mcol=$318;
      __label__ = 41; break;
    case 56: // $319
      __label__ = 57; break;
    case 57: // $320
      var $321=$mrow;
      var $322=((($321)+1)|0);
      $mrow=$322;
      __label__ = 39; break;
    case 58: // $323
      $i=0;
      $change=0;
      __label__ = 59; break;
    case 59: // $324
      var $325=$i;
      var $326=$high;
      var $327=$wide;
      var $328=((($326)*($327))|0);
      var $329=((($325))>>>0) < ((($328))>>>0);
      if ($329) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: // $330
      var $331=$i;
      var $332=$map;
      var $333=(($332+($331<<2))|0);
      var $334=HEAPF32[(($333)>>2)];
      var $335=($334) < 0;
      if ($335) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $336
      var $337=$i;
      var $338=$map;
      var $339=(($338+($337<<2))|0);
      var $340=HEAPF32[(($339)>>2)];
      var $341=(-($340));
      var $342=$i;
      var $343=$map;
      var $344=(($343+($342<<2))|0);
      HEAPF32[(($344)>>2)]=$341;
      $change=1;
      __label__ = 62; break;
    case 62: // $345
      __label__ = 63; break;
    case 63: // $346
      var $347=$i;
      var $348=((($347)+1)|0);
      $i=$348;
      __label__ = 59; break;
    case 64: // $349
      var $350=$change;
      var $351=((($350))|0)!=0;
      if ($351) { __label__ = 66; break; } else { __label__ = 65; break; }
    case 65: // $352
      __label__ = 67; break;
    case 66: // $353
      __label__ = 37; break;
    case 67: // $354
      $i=0;
      __label__ = 68; break;
    case 68: // $355
      var $356=$i;
      var $357=$high;
      var $358=$wide;
      var $359=((($357)*($358))|0);
      var $360=((($356))>>>0) < ((($359))>>>0);
      if ($360) { __label__ = 69; break; } else { __label__ = 73; break; }
    case 69: // $361
      var $362=$i;
      var $363=$map;
      var $364=(($363+($362<<2))|0);
      var $365=HEAPF32[(($364)>>2)];
      var $366=($365) == 0;
      if ($366) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: // $367
      var $368=$i;
      var $369=$map;
      var $370=(($369+($368<<2))|0);
      HEAPF32[(($370)>>2)]=1;
      __label__ = 71; break;
    case 71: // $371
      __label__ = 72; break;
    case 72: // $372
      var $373=$i;
      var $374=((($373)+1)|0);
      $i=$374;
      __label__ = 68; break;
    case 73: // $375
      $mrow=0;
      __label__ = 74; break;
    case 74: // $376
      var $377=$mrow;
      var $378=$high;
      var $379=((($377))>>>0) < ((($378))>>>0);
      if ($379) { __label__ = 75; break; } else { __label__ = 102; break; }
    case 75: // $380
      $mcol=0;
      __label__ = 76; break;
    case 76: // $381
      var $382=$mcol;
      var $383=$wide;
      var $384=((($382))>>>0) < ((($383))>>>0);
      if ($384) { __label__ = 77; break; } else { __label__ = 100; break; }
    case 77: // $385
      var $386=$mrow;
      var $387=HEAPU16[((_shrink)>>1)];
      var $388=((($387))&65535);
      var $389=4 >> ((($388))|0);
      var $390=((($386)*($389))|0);
      $row=$390;
      __label__ = 78; break;
    case 78: // $391
      var $392=$row;
      var $393=$mrow;
      var $394=((($393)+1)|0);
      var $395=HEAPU16[((_shrink)>>1)];
      var $396=((($395))&65535);
      var $397=4 >> ((($396))|0);
      var $398=((($394)*($397))|0);
      var $399=((($392))>>>0) < ((($398))>>>0);
      if ($399) { __label__ = 79; break; } else { __label__ = 98; break; }
    case 79: // $400
      var $401=$mcol;
      var $402=HEAPU16[((_shrink)>>1)];
      var $403=((($402))&65535);
      var $404=4 >> ((($403))|0);
      var $405=((($401)*($404))|0);
      $col=$405;
      __label__ = 80; break;
    case 80: // $406
      var $407=$col;
      var $408=$mcol;
      var $409=((($408)+1)|0);
      var $410=HEAPU16[((_shrink)>>1)];
      var $411=((($410))&65535);
      var $412=4 >> ((($411))|0);
      var $413=((($409)*($412))|0);
      var $414=((($407))>>>0) < ((($413))>>>0);
      if ($414) { __label__ = 81; break; } else { __label__ = 96; break; }
    case 81: // $415
      var $416=$row;
      var $417=HEAPU16[((_width)>>1)];
      var $418=((($417))&65535);
      var $419=((($416)*($418))|0);
      var $420=$col;
      var $421=((($419)+($420))|0);
      var $422=HEAP32[((_image)>>2)];
      var $423=(($422+($421<<3))|0);
      var $424=(($423)|0);
      $pixel=$424;
      var $425=$c;
      var $426=$pixel;
      var $427=(($426+($425<<1))|0);
      var $428=HEAPU16[(($427)>>1)];
      var $429=((($428))&65535);
      var $430=$c;
      var $431=(($hsat+($430<<2))|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=((((($429))|0)/((($432))|0))|0);
      var $434=((($433))|0) > 1;
      if ($434) { __label__ = 82; break; } else { __label__ = 94; break; }
    case 82: // $435
      var $436=$kc;
      var $437=$pixel;
      var $438=(($437+($436<<1))|0);
      var $439=HEAPU16[(($438)>>1)];
      var $440=((($439))&65535);
      var $441=((($440))|0);
      var $442=$mrow;
      var $443=$wide;
      var $444=((($442)*($443))|0);
      var $445=$mcol;
      var $446=((($444)+($445))|0);
      var $447=$map;
      var $448=(($447+($446<<2))|0);
      var $449=HEAPF32[(($448)>>2)];
      var $450=($441)*($449);
      var $451=((($450))|0);
      $val=$451;
      var $452=$c;
      var $453=$pixel;
      var $454=(($453+($452<<1))|0);
      var $455=HEAPU16[(($454)>>1)];
      var $456=((($455))&65535);
      var $457=$val;
      var $458=((($456))|0) < ((($457))|0);
      if ($458) { __label__ = 83; break; } else { __label__ = 93; break; }
    case 83: // $459
      var $460=$val;
      var $461=((($460))|0) < 65535;
      if ($461) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: // $462
      var $463=$val;
      var $466 = $463;__label__ = 86; break;
    case 85: // $464
      var $466 = 65535;__label__ = 86; break;
    case 86: // $465
      var $466;
      var $467=0 > ((($466))|0);
      if ($467) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: // $468
      var $478 = 0;__label__ = 92; break;
    case 88: // $469
      var $470=$val;
      var $471=((($470))|0) < 65535;
      if ($471) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: // $472
      var $473=$val;
      var $476 = $473;__label__ = 91; break;
    case 90: // $474
      var $476 = 65535;__label__ = 91; break;
    case 91: // $475
      var $476;
      var $478 = $476;__label__ = 92; break;
    case 92: // $477
      var $478;
      var $479=((($478)) & 65535);
      var $480=$c;
      var $481=$pixel;
      var $482=(($481+($480<<1))|0);
      HEAP16[(($482)>>1)]=$479;
      __label__ = 93; break;
    case 93: // $483
      __label__ = 94; break;
    case 94: // $484
      __label__ = 95; break;
    case 95: // $485
      var $486=$col;
      var $487=((($486)+1)|0);
      $col=$487;
      __label__ = 80; break;
    case 96: // $488
      __label__ = 97; break;
    case 97: // $489
      var $490=$row;
      var $491=((($490)+1)|0);
      $row=$491;
      __label__ = 78; break;
    case 98: // $492
      __label__ = 99; break;
    case 99: // $493
      var $494=$mcol;
      var $495=((($494)+1)|0);
      $mcol=$495;
      __label__ = 76; break;
    case 100: // $496
      __label__ = 101; break;
    case 101: // $497
      var $498=$mrow;
      var $499=((($498)+1)|0);
      $mrow=$499;
      __label__ = 74; break;
    case 102: // $500
      __label__ = 103; break;
    case 103: // $501
      __label__ = 104; break;
    case 104: // $502
      var $503=$c;
      var $504=((($503)+1)|0);
      $c=$504;
      __label__ = 13; break;
    case 105: // $505
      var $506=$map;
      var $507=$506;
      _free($507);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_recover_highlights["X"]=1;

function _tiff_get($base, $tag, $type, $len, $save) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$base;
      $2=$tag;
      $3=$type;
      $4=$len;
      $5=$save;
      var $6=_get2();
      var $7=((($6))&65535);
      var $8=$2;
      HEAP32[(($8)>>2)]=$7;
      var $9=_get2();
      var $10=((($9))&65535);
      var $11=$3;
      HEAP32[(($11)>>2)]=$10;
      var $12=_get4();
      var $13=$4;
      HEAP32[(($13)>>2)]=$12;
      var $14=HEAP32[((_ifp)>>2)];
      var $15=_ftell($14);
      var $16=((($15)+4)|0);
      var $17=$5;
      HEAP32[(($17)>>2)]=$16;
      var $18=$4;
      var $19=HEAP32[(($18)>>2)];
      var $20=$3;
      var $21=HEAPU32[(($20)>>2)];
      var $22=((($21))>>>0) < 14;
      if ($22) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $23
      var $24=$3;
      var $25=HEAP32[(($24)>>2)];
      var $28 = $25;__label__ = 3; break;
    case 2: // $26
      var $28 = 0;__label__ = 3; break;
    case 3: // $27
      var $28;
      var $29=((__str85+$28)|0);
      var $30=HEAP8[($29)];
      var $31=((($30) << 24) >> 24);
      var $32=((($31)-48)|0);
      var $33=((($19)*($32))|0);
      var $34=((($33))>>>0) > 4;
      if ($34) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $35
      var $36=HEAP32[((_ifp)>>2)];
      var $37=_get4();
      var $38=$1;
      var $39=((($37)+($38))|0);
      var $40=_fseek($36, $39, 0);
      __label__ = 5; break;
    case 5: // $41
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_tiff_get["X"]=1;

function _parse_thumb_note($base, $toff, $tlen) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $save=__stackBase__+12;
      $1=$base;
      $2=$toff;
      $3=$tlen;
      var $4=_get2();
      var $5=((($4))&65535);
      $entries=$5;
      __label__ = 1; break;
    case 1: // $6
      var $7=$entries;
      var $8=((($7)-1)|0);
      $entries=$8;
      var $9=((($7))|0)!=0;
      if ($9) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: // $10
      var $11=$1;
      _tiff_get($11, $tag, $type, $len, $save);
      var $12=HEAP32[(($tag)>>2)];
      var $13=$2;
      var $14=((($12))|0)==((($13))|0);
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $15
      var $16=_get4();
      var $17=$1;
      var $18=((($16)+($17))|0);
      HEAP32[((_thumb_offset)>>2)]=$18;
      __label__ = 4; break;
    case 4: // $19
      var $20=HEAP32[(($tag)>>2)];
      var $21=$3;
      var $22=((($20))|0)==((($21))|0);
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $23
      var $24=_get4();
      HEAP32[((_thumb_length)>>2)]=$24;
      __label__ = 6; break;
    case 6: // $25
      var $26=HEAP32[((_ifp)>>2)];
      var $27=HEAP32[(($save)>>2)];
      var $28=_fseek($26, $27, 0);
      __label__ = 1; break;
    case 7: // $29
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}

// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _parse_makernote($base, $uptag) {
  var __stackBase__  = STACKTOP; STACKTOP += 368; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $offset;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $save=__stackBase__+12;
      var $c;
      var $ver97;
      var $serial;
      var $i;
      var $wbi;
      var $wb=__stackBase__+16;
      var $buf97=__stackBase__+32;
      var $ci;
      var $cj;
      var $ck;
      var $morder;
      var $sorder;
      var $buf=__stackBase__+356;
      $1=$base;
      $2=$uptag;
      $offset=0;
      $ver97=0;
      $serial=0;
      $wbi=0;
      var $3=$wb;
      HEAP32[(($3)>>2)]=0; HEAP32[(($3+4)>>2)]=0; HEAP32[(($3+8)>>2)]=0; HEAP32[(($3+12)>>2)]=0;
      var $4=HEAP16[((_order)>>1)];
      $sorder=$4;
      var $5=_strcmp(((_make)|0), ((__str86)|0));
      var $6=((($5))|0)!=0;
      if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $7
      __label__ = 337; break;
    case 2: // $8
      var $9=(($buf)|0);
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_fread($9, 1, 10, $10);
      var $12=(($buf)|0);
      var $13=_strncmp($12, ((__str87)|0), 3);
      var $14=((($13))|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: // $15
      var $16=(($buf)|0);
      var $17=_strncmp($16, ((__str88)|0), 3);
      var $18=((($17))|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $19
      var $20=(($buf)|0);
      var $21=_strncmp($20, ((__str89)|0), 4);
      var $22=((($21))|0)!=0;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $23
      var $24=(($buf)|0);
      var $25=_strncmp($24, ((__str90)|0), 4);
      var $26=((($25))|0)!=0;
      if ($26) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: // $27
      __label__ = 337; break;
    case 7: // $28
      var $29=(($buf)|0);
      var $30=_strncmp($29, ((__str91)|0), 2);
      var $31=((($30))|0)!=0;
      if ($31) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $32
      var $33=(($buf)|0);
      var $34=_strncmp($33, ((__str92)|0), 3);
      var $35=((($34))|0)!=0;
      if ($35) { __label__ = 26; break; } else { __label__ = 9; break; }
    case 9: // $36
      HEAP16[((_order)>>1)]=19789;
      __label__ = 10; break;
    case 10: // $37
      var $38=HEAP32[((_ifp)>>2)];
      var $39=_ftell($38);
      $i=$39;
      var $40=HEAPU32[((_data_offset)>>2)];
      var $41=((($39))>>>0) < ((($40))>>>0);
      if ($41) { __label__ = 11; break; } else { var $46 = 0;__label__ = 12; break; }
    case 11: // $42
      var $43=$i;
      var $44=((($43))>>>0) < 16384;
      var $46 = $44;__label__ = 12; break;
    case 12: // $45
      var $46;
      if ($46) { __label__ = 13; break; } else { __label__ = 25; break; }
    case 13: // $47
      var $48=(($wb+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($wb)|0);
      HEAP32[(($50)>>2)]=$49;
      var $51=(($wb+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($wb+8)|0);
      HEAP32[(($53)>>2)]=$52;
      var $54=(($wb+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($wb+4)|0);
      HEAP32[(($56)>>2)]=$55;
      var $57=_get2();
      var $58=((($57))&65535);
      var $59=(($wb+12)|0);
      HEAP32[(($59)>>2)]=$58;
      var $60=(($wb+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61))|0)==256;
      if ($62) { __label__ = 14; break; } else { __label__ = 24; break; }
    case 14: // $63
      var $64=(($wb+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65))|0)==256;
      if ($66) { __label__ = 15; break; } else { __label__ = 24; break; }
    case 15: // $67
      var $68=(($wb)|0);
      var $69=HEAPU32[(($68)>>2)];
      var $70=((($69))>>>0) > 256;
      if ($70) { __label__ = 16; break; } else { __label__ = 24; break; }
    case 16: // $71
      var $72=(($wb)|0);
      var $73=HEAPU32[(($72)>>2)];
      var $74=((($73))>>>0) < 640;
      if ($74) { __label__ = 17; break; } else { __label__ = 24; break; }
    case 17: // $75
      var $76=(($wb+8)|0);
      var $77=HEAPU32[(($76)>>2)];
      var $78=((($77))>>>0) > 256;
      if ($78) { __label__ = 18; break; } else { __label__ = 24; break; }
    case 18: // $79
      var $80=(($wb+8)|0);
      var $81=HEAPU32[(($80)>>2)];
      var $82=((($81))>>>0) < 640;
      if ($82) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: // $83
      $c=0;
      __label__ = 20; break;
    case 20: // $84
      var $85=$c;
      var $86=((($85))>>>0) < 4;
      if ($86) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: // $87
      var $88=$c;
      var $89=(($wb+($88<<2))|0);
      var $90=HEAPU32[(($89)>>2)];
      var $91=((($90))>>>0);
      var $92=$c;
      var $93=((_cam_mul+($92<<2))|0);
      HEAPF32[(($93)>>2)]=$91;
      __label__ = 22; break;
    case 22: // $94
      var $95=$c;
      var $96=((($95)+1)|0);
      $c=$96;
      __label__ = 20; break;
    case 23: // $97
      __label__ = 24; break;
    case 24: // $98
      __label__ = 10; break;
    case 25: // $99
      __label__ = 336; break;
    case 26: // $100
      var $101=(($buf)|0);
      var $102=_strcmp($101, ((__str93)|0));
      var $103=((($102))|0)!=0;
      if ($103) { __label__ = 30; break; } else { __label__ = 27; break; }
    case 27: // $104
      var $105=HEAP32[((_ifp)>>2)];
      var $106=_ftell($105);
      $1=$106;
      var $107=_get2();
      HEAP16[((_order)>>1)]=$107;
      var $108=_get2();
      var $109=((($108))&65535);
      var $110=((($109))|0)!=42;
      if ($110) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: // $111
      __label__ = 336; break;
    case 29: // $112
      var $113=_get4();
      $offset=$113;
      var $114=HEAP32[((_ifp)>>2)];
      var $115=$offset;
      var $116=((($115)-8)|0);
      var $117=_fseek($114, $116, 1);
      __label__ = 54; break;
    case 30: // $118
      var $119=(($buf)|0);
      var $120=_strcmp($119, ((__str94)|0));
      var $121=((($120))|0)!=0;
      if ($121) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: // $122
      var $123=HEAP32[((_ifp)>>2)];
      var $124=_ftell($123);
      var $125=((($124)-10)|0);
      $1=$125;
      var $126=HEAP32[((_ifp)>>2)];
      var $127=_fseek($126, -2, 1);
      var $128=_get2();
      HEAP16[((_order)>>1)]=$128;
      var $129=_get2();
      __label__ = 53; break;
    case 32: // $130
      var $131=(($buf)|0);
      var $132=_strncmp($131, ((__str95)|0), 4);
      var $133=((($132))|0)!=0;
      if ($133) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $134
      var $135=(($buf)|0);
      var $136=_strcmp($135, ((__str96)|0));
      var $137=((($136))|0)!=0;
      if ($137) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: // $138
      __label__ = 37; break;
    case 35: // $139
      var $140=(($buf)|0);
      var $141=_strncmp($140, ((__str97)|0), 8);
      var $142=((($141))|0)!=0;
      if ($142) { __label__ = 38; break; } else { __label__ = 36; break; }
    case 36: // $143
      var $144=HEAP32[((_ifp)>>2)];
      var $145=_ftell($144);
      var $146=((($145)-10)|0);
      $1=$146;
      __label__ = 37; break;
    case 37: // $147
      HEAP16[((_order)>>1)]=18761;
      var $148=HEAP32[((_ifp)>>2)];
      var $149=_fseek($148, 2, 1);
      __label__ = 51; break;
    case 38: // $150
      var $151=(($buf)|0);
      var $152=_strcmp($151, ((__str98)|0));
      var $153=((($152))|0)!=0;
      if ($153) { __label__ = 39; break; } else { __label__ = 42; break; }
    case 39: // $154
      var $155=(($buf)|0);
      var $156=_strcmp($155, ((__str99)|0));
      var $157=((($156))|0)!=0;
      if ($157) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: // $158
      var $159=(($buf)|0);
      var $160=_strcmp($159, ((__str100)|0));
      var $161=((($160))|0)!=0;
      if ($161) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $162
      var $163=(($buf)|0);
      var $164=_strcmp($163, ((__str101)|0));
      var $165=((($164))|0)!=0;
      if ($165) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: // $166
      var $167=HEAP32[((_ifp)>>2)];
      var $168=_fseek($167, -2, 1);
      __label__ = 50; break;
    case 43: // $169
      var $170=(($buf)|0);
      var $171=_strcmp($170, ((__str102)|0));
      var $172=((($171))|0)!=0;
      if ($172) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: // $173
      var $174=(($buf)|0);
      var $175=_strcmp($174, ((__str103)|0));
      var $176=((($175))|0)!=0;
      if ($176) { __label__ = 46; break; } else { __label__ = 45; break; }
    case 45: // $177
      var $178=HEAP32[((_ifp)>>2)];
      var $179=_fseek($178, -4, 1);
      __label__ = 49; break;
    case 46: // $180
      var $181=HEAP32[((_ifp)>>2)];
      var $182=_fseek($181, -10, 1);
      var $183=_strncmp(((_make)|0), ((__str104)|0), 7);
      var $184=((($183))|0)!=0;
      if ($184) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: // $185
      var $186=HEAP32[((_ifp)>>2)];
      var $187=_ftell($186);
      $1=$187;
      __label__ = 48; break;
    case 48: // $188
      __label__ = 49; break;
    case 49: // $189
      __label__ = 50; break;
    case 50: // $190
      __label__ = 51; break;
    case 51: // $191
      __label__ = 52; break;
    case 52: // $192
      __label__ = 53; break;
    case 53: // $193
      __label__ = 54; break;
    case 54: // $194
      var $195=_get2();
      var $196=((($195))&65535);
      $entries=$196;
      var $197=$entries;
      var $198=((($197))>>>0) > 1000;
      if ($198) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: // $199
      __label__ = 337; break;
    case 56: // $200
      var $201=HEAP16[((_order)>>1)];
      $morder=$201;
      __label__ = 57; break;
    case 57: // $202
      var $203=$entries;
      var $204=((($203)-1)|0);
      $entries=$204;
      var $205=((($203))|0)!=0;
      if ($205) { __label__ = 58; break; } else { __label__ = 335; break; }
    case 58: // $206
      var $207=$morder;
      HEAP16[((_order)>>1)]=$207;
      var $208=$1;
      _tiff_get($208, $tag, $type, $len, $save);
      var $209=$2;
      var $210=($209) << 16;
      var $211=HEAP32[(($tag)>>2)];
      var $212=($211) | ($210);
      HEAP32[(($tag)>>2)]=$212;
      var $213=HEAP32[(($tag)>>2)];
      var $214=((($213))|0)==2;
      if ($214) { __label__ = 59; break; } else { __label__ = 62; break; }
    case 59: // $215
      var $216=_strstr(((_make)|0), ((__str105)|0));
      var $217=((($216))|0)!=0;
      if ($217) { __label__ = 60; break; } else { __label__ = 62; break; }
    case 60: // $218
      var $219=HEAPF32[((_iso_speed)>>2)];
      var $220=($219) != 0;
      if ($220) { __label__ = 62; break; } else { __label__ = 61; break; }
    case 61: // $221
      var $222=_get2();
      var $223=_get2();
      var $224=((($223))&65535);
      HEAPF32[((_iso_speed)>>2)]=$224;
      __label__ = 62; break;
    case 62: // $225
      var $226=HEAP32[(($tag)>>2)];
      var $227=((($226))|0)==4;
      if ($227) { __label__ = 63; break; } else { __label__ = 75; break; }
    case 63: // $228
      var $229=HEAPU32[(($len)>>2)];
      var $230=((($229))>>>0) > 26;
      if ($230) { __label__ = 64; break; } else { __label__ = 75; break; }
    case 64: // $231
      var $232=HEAPU32[(($len)>>2)];
      var $233=((($232))>>>0) < 35;
      if ($233) { __label__ = 65; break; } else { __label__ = 75; break; }
    case 65: // $234
      var $235=_get4();
      var $236=_get2();
      var $237=((($236))&65535);
      $i=$237;
      var $238=((($237))|0)!=32767;
      if ($238) { __label__ = 66; break; } else { __label__ = 68; break; }
    case 66: // $239
      var $240=HEAPF32[((_iso_speed)>>2)];
      var $241=($240) != 0;
      if ($241) { __label__ = 68; break; } else { __label__ = 67; break; }
    case 67: // $242
      var $243=$i;
      var $244=((($243))>>>0);
      var $245=($244)/32;
      var $246=($245)-4;
      var $247=_llvm_pow_f64(2, $246);
      var $248=($247)*50;
      var $249=($248);
      HEAPF32[((_iso_speed)>>2)]=$249;
      __label__ = 68; break;
    case 68: // $250
      var $251=_get2();
      var $252=_get2();
      var $253=((($252))&65535);
      $i=$253;
      var $254=((($253))|0)!=32767;
      if ($254) { __label__ = 69; break; } else { __label__ = 71; break; }
    case 69: // $255
      var $256=HEAPF32[((_aperture)>>2)];
      var $257=($256) != 0;
      if ($257) { __label__ = 71; break; } else { __label__ = 70; break; }
    case 70: // $258
      var $259=$i;
      var $260=((($259))>>>0);
      var $261=($260)/64;
      var $262=_llvm_pow_f64(2, $261);
      var $263=($262);
      HEAPF32[((_aperture)>>2)]=$263;
      __label__ = 71; break;
    case 71: // $264
      var $265=_get2();
      var $266=((($265))&65535);
      $i=$266;
      var $267=((($266))|0)!=65535;
      if ($267) { __label__ = 72; break; } else { __label__ = 74; break; }
    case 72: // $268
      var $269=HEAPF32[((_shutter)>>2)];
      var $270=($269) != 0;
      if ($270) { __label__ = 74; break; } else { __label__ = 73; break; }
    case 73: // $271
      var $272=$i;
      var $273=((($272)) & 65535);
      var $274=((($273) << 16) >> 16);
      var $275=((($274))|0);
      var $276=($275)/-32;
      var $277=_llvm_pow_f64(2, $276);
      var $278=($277);
      HEAPF32[((_shutter)>>2)]=$278;
      __label__ = 74; break;
    case 74: // $279
      var $280=_get2();
      var $281=_get2();
      var $282=((($281))&65535);
      $wbi=$282;
      var $283=_get2();
      var $284=_get2();
      var $285=((($284))&65535);
      HEAP32[((_shot_order)>>2)]=$285;
      __label__ = 75; break;
    case 75: // $286
      var $287=HEAP32[(($tag)>>2)];
      var $288=((($287))|0)==4;
      if ($288) { __label__ = 77; break; } else { __label__ = 76; break; }
    case 76: // $289
      var $290=HEAP32[(($tag)>>2)];
      var $291=((($290))|0)==276;
      if ($291) { __label__ = 77; break; } else { __label__ = 83; break; }
    case 77: // $292
      var $293=_strncmp(((_make)|0), ((__str106)|0), 6);
      var $294=((($293))|0)!=0;
      if ($294) { __label__ = 83; break; } else { __label__ = 78; break; }
    case 78: // $295
      var $296=HEAP32[((_ifp)>>2)];
      var $297=HEAP32[(($tag)>>2)];
      var $298=((($297))|0)==4;
      var $299=($298) ? 140 : 160;
      var $300=_fseek($296, $299, 1);
      var $301=_get2();
      var $302=((($301))&65535);
      if ($302 == 72) {
        __label__ = 79; break;
      }
      else if ($302 == 76) {
        __label__ = 80; break;
      }
      else if ($302 == 82) {
        __label__ = 81; break;
      }
      else {
      __label__ = 82; break;
      }
      
    case 79: // $303
      HEAP32[((_flip)>>2)]=0;
      __label__ = 82; break;
    case 80: // $304
      HEAP32[((_flip)>>2)]=6;
      __label__ = 82; break;
    case 81: // $305
      HEAP32[((_flip)>>2)]=5;
      __label__ = 82; break;
    case 82: // $306
      __label__ = 83; break;
    case 83: // $307
      var $308=HEAP32[(($tag)>>2)];
      var $309=((($308))|0)==7;
      if ($309) { __label__ = 84; break; } else { __label__ = 87; break; }
    case 84: // $310
      var $311=HEAP32[(($type)>>2)];
      var $312=((($311))|0)==2;
      if ($312) { __label__ = 85; break; } else { __label__ = 87; break; }
    case 85: // $313
      var $314=HEAPU32[(($len)>>2)];
      var $315=((($314))>>>0) > 20;
      if ($315) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: // $316
      var $317=HEAP32[((_ifp)>>2)];
      var $318=_fgets(((_model2)|0), 64, $317);
      __label__ = 87; break;
    case 87: // $319
      var $320=HEAP32[(($tag)>>2)];
      var $321=((($320))|0)==8;
      if ($321) { __label__ = 88; break; } else { __label__ = 90; break; }
    case 88: // $322
      var $323=HEAP32[(($type)>>2)];
      var $324=((($323))|0)==4;
      if ($324) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: // $325
      var $326=_get4();
      HEAP32[((_shot_order)>>2)]=$326;
      __label__ = 90; break;
    case 90: // $327
      var $328=HEAP32[(($tag)>>2)];
      var $329=((($328))|0)==9;
      if ($329) { __label__ = 91; break; } else { __label__ = 93; break; }
    case 91: // $330
      var $331=_strcmp(((_make)|0), ((__str107)|0));
      var $332=((($331))|0)!=0;
      if ($332) { __label__ = 93; break; } else { __label__ = 92; break; }
    case 92: // $333
      var $334=HEAP32[((_ifp)>>2)];
      var $335=_fread(((_artist)|0), 64, 1, $334);
      __label__ = 93; break;
    case 93: // $336
      var $337=HEAP32[(($tag)>>2)];
      var $338=((($337))|0)==12;
      if ($338) { __label__ = 94; break; } else { __label__ = 96; break; }
    case 94: // $339
      var $340=HEAP32[(($len)>>2)];
      var $341=((($340))|0)==4;
      if ($341) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: // $342
      var $343=HEAP32[(($type)>>2)];
      var $344=_getreal($343);
      var $345=($344);
      HEAPF32[((((_cam_mul)|0))>>2)]=$345;
      var $346=HEAP32[(($type)>>2)];
      var $347=_getreal($346);
      var $348=($347);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$348;
      __label__ = 96; break;
    case 96: // $349
      var $350=HEAP32[(($tag)>>2)];
      var $351=((($350))|0)==13;
      if ($351) { __label__ = 97; break; } else { __label__ = 103; break; }
    case 97: // $352
      var $353=HEAP32[(($type)>>2)];
      var $354=((($353))|0)==7;
      if ($354) { __label__ = 98; break; } else { __label__ = 103; break; }
    case 98: // $355
      var $356=_get2();
      var $357=((($356))&65535);
      var $358=((($357))|0)==43690;
      if ($358) { __label__ = 99; break; } else { __label__ = 103; break; }
    case 99: // $359
      var $360=(($buf97)|0);
      var $361=HEAP32[((_ifp)>>2)];
      var $362=_fread($360, 1, 324, $361);
      var $363=(($buf97)|0);
      var $364=_my_memmem($363, 324, ((__str108)|0), 2);
      var $365=(($buf97)|0);
      var $366=($364);
      var $367=($365);
      var $368=((($366)-($367))|0);
      var $369=((($368)+10)|0);
      $i=$369;
      var $370=$i;
      var $371=((($370))>>>0) < 70;
      if ($371) { __label__ = 100; break; } else { __label__ = 102; break; }
    case 100: // $372
      var $373=$i;
      var $374=(($buf97+$373)|0);
      var $375=HEAPU8[($374)];
      var $376=((($375))&255);
      var $377=((($376))|0) < 3;
      if ($377) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: // $378
      var $379=$i;
      var $380=(($buf97+$379)|0);
      var $381=HEAPU8[($380)];
      var $382=((($381))&255);
      var $383=((__str109+$382)|0);
      var $384=HEAP8[($383)];
      var $385=((($384) << 24) >> 24);
      var $386=((($385)-48)|0);
      HEAP32[((_flip)>>2)]=$386;
      __label__ = 102; break;
    case 102: // $387
      __label__ = 103; break;
    case 103: // $388
      var $389=HEAP32[(($tag)>>2)];
      var $390=((($389))|0)==16;
      if ($390) { __label__ = 104; break; } else { __label__ = 106; break; }
    case 104: // $391
      var $392=HEAP32[(($type)>>2)];
      var $393=((($392))|0)==4;
      if ($393) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $394
      var $395=_get4();
      HEAP32[((_unique_id)>>2)]=$395;
      __label__ = 106; break;
    case 106: // $396
      var $397=HEAP32[(($tag)>>2)];
      var $398=((($397))|0)==17;
      if ($398) { __label__ = 107; break; } else { __label__ = 110; break; }
    case 107: // $399
      var $400=HEAP32[((_is_raw)>>2)];
      var $401=((($400))|0)!=0;
      if ($401) { __label__ = 108; break; } else { __label__ = 110; break; }
    case 108: // $402
      var $403=_strncmp(((_make)|0), ((__str105)|0), 5);
      var $404=((($403))|0)!=0;
      if ($404) { __label__ = 110; break; } else { __label__ = 109; break; }
    case 109: // $405
      var $406=HEAP32[((_ifp)>>2)];
      var $407=_get4();
      var $408=$1;
      var $409=((($407)+($408))|0);
      var $410=_fseek($406, $409, 0);
      var $411=$1;
      var $412=_parse_tiff_ifd($411);
      __label__ = 110; break;
    case 110: // $413
      var $414=HEAP32[(($tag)>>2)];
      var $415=((($414))|0)==20;
      if ($415) { __label__ = 111; break; } else { __label__ = 117; break; }
    case 111: // $416
      var $417=HEAP32[(($type)>>2)];
      var $418=((($417))|0)==7;
      if ($418) { __label__ = 112; break; } else { __label__ = 117; break; }
    case 112: // $419
      var $420=HEAP32[(($len)>>2)];
      var $421=((($420))|0)==2560;
      if ($421) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: // $422
      var $423=HEAP32[((_ifp)>>2)];
      var $424=_fseek($423, 1248, 1);
      __label__ = 290; break;
    case 114: // $425
      var $426=(($buf)|0);
      var $427=HEAP32[((_ifp)>>2)];
      var $428=_fread($426, 1, 10, $427);
      var $429=(($buf)|0);
      var $430=_strncmp($429, ((__str110)|0), 4);
      var $431=((($430))|0)!=0;
      if ($431) { __label__ = 116; break; } else { __label__ = 115; break; }
    case 115: // $432
      var $433=HEAP32[((_ifp)>>2)];
      var $434=(($buf)|0);
      var $435=(($434+4)|0);
      var $436=_strcmp($435, ((__str111)|0));
      var $437=((($436))|0)!=0;
      var $438=($437) ? 46 : 1546;
      var $439=_fseek($433, $438, 1);
      var $440=_get4();
      var $441=($440) << 2;
      var $442=((($441))>>>0);
      HEAPF32[((((_cam_mul)|0))>>2)]=$442;
      var $443=_get4();
      var $444=_get4();
      var $445=((($443)+($444))|0);
      var $446=((($445))>>>0);
      HEAPF32[((((_cam_mul+4)|0))>>2)]=$446;
      var $447=_get4();
      var $448=($447) << 2;
      var $449=((($448))>>>0);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$449;
      __label__ = 116; break;
    case 116: // $450
      __label__ = 117; break;
    case 117: // $451
      var $452=HEAP32[(($tag)>>2)];
      var $453=((($452))|0)==21;
      if ($453) { __label__ = 118; break; } else { __label__ = 121; break; }
    case 118: // $454
      var $455=HEAP32[(($type)>>2)];
      var $456=((($455))|0)==2;
      if ($456) { __label__ = 119; break; } else { __label__ = 121; break; }
    case 119: // $457
      var $458=HEAP32[((_is_raw)>>2)];
      var $459=((($458))|0)!=0;
      if ($459) { __label__ = 120; break; } else { __label__ = 121; break; }
    case 120: // $460
      var $461=HEAP32[((_ifp)>>2)];
      var $462=_fread(((_model)|0), 64, 1, $461);
      __label__ = 121; break;
    case 121: // $463
      var $464=_strstr(((_make)|0), ((__str112)|0));
      var $465=((($464))|0)!=0;
      if ($465) { __label__ = 122; break; } else { __label__ = 127; break; }
    case 122: // $466
      var $467=HEAP32[(($tag)>>2)];
      var $468=((($467))|0)==27;
      if ($468) { __label__ = 123; break; } else { __label__ = 124; break; }
    case 123: // $469
      HEAP32[(($tag)>>2)]=4120;
      __label__ = 124; break;
    case 124: // $470
      var $471=HEAP32[(($tag)>>2)];
      var $472=((($471))|0)==28;
      if ($472) { __label__ = 125; break; } else { __label__ = 126; break; }
    case 125: // $473
      HEAP32[(($tag)>>2)]=4119;
      __label__ = 126; break;
    case 126: // $474
      __label__ = 127; break;
    case 127: // $475
      var $476=HEAP32[(($tag)>>2)];
      var $477=((($476))|0)==29;
      if ($477) { __label__ = 128; break; } else { __label__ = 137; break; }
    case 128: // $478
      __label__ = 129; break;
    case 129: // $479
      var $480=HEAP32[((_ifp)>>2)];
      var $481=_getc_unlocked($480);
      $c=$481;
      var $482=((($481))|0)!=0;
      if ($482) { __label__ = 130; break; } else { var $487 = 0;__label__ = 131; break; }
    case 130: // $483
      var $484=$c;
      var $485=((($484))|0)!=-1;
      var $487 = $485;__label__ = 131; break;
    case 131: // $486
      var $487;
      if ($487) { __label__ = 132; break; } else { __label__ = 136; break; }
    case 132: // $488
      var $489=$serial;
      var $490=((($489)*10)|0);
      var $491=$c;
      var $492=_isdigit($491);
      var $493=((($492))|0)!=0;
      if ($493) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: // $494
      var $495=$c;
      var $496=((($495)-48)|0);
      var $501 = $496;__label__ = 135; break;
    case 134: // $497
      var $498=$c;
      var $499=((($498))>>>0)%10;
      var $501 = $499;__label__ = 135; break;
    case 135: // $500
      var $501;
      var $502=((($490)+($501))|0);
      $serial=$502;
      __label__ = 129; break;
    case 136: // $503
      __label__ = 137; break;
    case 137: // $504
      var $505=HEAP32[(($tag)>>2)];
      var $506=((($505))|0)==129;
      if ($506) { __label__ = 138; break; } else { __label__ = 140; break; }
    case 138: // $507
      var $508=HEAP32[(($type)>>2)];
      var $509=((($508))|0)==4;
      if ($509) { __label__ = 139; break; } else { __label__ = 140; break; }
    case 139: // $510
      var $511=_get4();
      HEAP32[((_data_offset)>>2)]=$511;
      var $512=HEAP32[((_ifp)>>2)];
      var $513=HEAP32[((_data_offset)>>2)];
      var $514=((($513)+41)|0);
      var $515=_fseek($512, $514, 0);
      var $516=_get2();
      var $517=((($516))&65535);
      var $518=(((($517)<<1))|0);
      var $519=((($518)) & 65535);
      HEAP16[((_raw_height)>>1)]=$519;
      var $520=_get2();
      HEAP16[((_raw_width)>>1)]=$520;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 140; break;
    case 140: // $521
      var $522=HEAP32[(($tag)>>2)];
      var $523=((($522))|0)==41;
      if ($523) { __label__ = 141; break; } else { __label__ = 150; break; }
    case 141: // $524
      var $525=HEAP32[(($type)>>2)];
      var $526=((($525))|0)==1;
      if ($526) { __label__ = 142; break; } else { __label__ = 150; break; }
    case 142: // $527
      var $528=$wbi;
      var $529=((($528))>>>0) < 18;
      if ($529) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: // $530
      var $531=$wbi;
      var $532=((__str113+$531)|0);
      var $533=HEAP8[($532)];
      var $534=((($533) << 24) >> 24);
      var $535=((($534)-48)|0);
      var $538 = $535;__label__ = 145; break;
    case 144: // $536
      var $538 = 0;__label__ = 145; break;
    case 145: // $537
      var $538;
      $c=$538;
      var $539=HEAP32[((_ifp)>>2)];
      var $540=$c;
      var $541=(((($540)<<5))|0);
      var $542=((($541)+8)|0);
      var $543=_fseek($539, $542, 1);
      $c=0;
      __label__ = 146; break;
    case 146: // $544
      var $545=$c;
      var $546=((($545))>>>0) < 4;
      if ($546) { __label__ = 147; break; } else { __label__ = 149; break; }
    case 147: // $547
      var $548=_get4();
      var $549=((($548))>>>0);
      var $550=$c;
      var $551=$c;
      var $552=($551) >>> 1;
      var $553=($550) ^ ($552);
      var $554=($553) ^ 1;
      var $555=((_cam_mul+($554<<2))|0);
      HEAPF32[(($555)>>2)]=$549;
      __label__ = 148; break;
    case 148: // $556
      var $557=$c;
      var $558=((($557)+1)|0);
      $c=$558;
      __label__ = 146; break;
    case 149: // $559
      __label__ = 150; break;
    case 150: // $560
      var $561=HEAP32[(($tag)>>2)];
      var $562=((($561))|0)==129;
      if ($562) { __label__ = 151; break; } else { __label__ = 152; break; }
    case 151: // $563
      var $564=HEAP32[(($type)>>2)];
      var $565=((($564))|0)==7;
      if ($565) { __label__ = 156; break; } else { __label__ = 152; break; }
    case 152: // $566
      var $567=HEAP32[(($tag)>>2)];
      var $568=((($567))|0)==256;
      if ($568) { __label__ = 153; break; } else { __label__ = 154; break; }
    case 153: // $569
      var $570=HEAP32[(($type)>>2)];
      var $571=((($570))|0)==7;
      if ($571) { __label__ = 156; break; } else { __label__ = 154; break; }
    case 154: // $572
      var $573=HEAP32[(($tag)>>2)];
      var $574=((($573))|0)==640;
      if ($574) { __label__ = 155; break; } else { __label__ = 157; break; }
    case 155: // $575
      var $576=HEAP32[(($type)>>2)];
      var $577=((($576))|0)==1;
      if ($577) { __label__ = 156; break; } else { __label__ = 157; break; }
    case 156: // $578
      var $579=HEAP32[((_ifp)>>2)];
      var $580=_ftell($579);
      HEAP32[((_thumb_offset)>>2)]=$580;
      var $581=HEAP32[(($len)>>2)];
      HEAP32[((_thumb_length)>>2)]=$581;
      __label__ = 157; break;
    case 157: // $582
      var $583=HEAP32[(($tag)>>2)];
      var $584=((($583))|0)==136;
      if ($584) { __label__ = 158; break; } else { __label__ = 161; break; }
    case 158: // $585
      var $586=HEAP32[(($type)>>2)];
      var $587=((($586))|0)==4;
      if ($587) { __label__ = 159; break; } else { __label__ = 161; break; }
    case 159: // $588
      var $589=_get4();
      HEAP32[((_thumb_offset)>>2)]=$589;
      var $590=((($589))|0)!=0;
      if ($590) { __label__ = 160; break; } else { __label__ = 161; break; }
    case 160: // $591
      var $592=$1;
      var $593=HEAP32[((_thumb_offset)>>2)];
      var $594=((($593)+($592))|0);
      HEAP32[((_thumb_offset)>>2)]=$594;
      __label__ = 161; break;
    case 161: // $595
      var $596=HEAP32[(($tag)>>2)];
      var $597=((($596))|0)==137;
      if ($597) { __label__ = 162; break; } else { __label__ = 164; break; }
    case 162: // $598
      var $599=HEAP32[(($type)>>2)];
      var $600=((($599))|0)==4;
      if ($600) { __label__ = 163; break; } else { __label__ = 164; break; }
    case 163: // $601
      var $602=_get4();
      HEAP32[((_thumb_length)>>2)]=$602;
      __label__ = 164; break;
    case 164: // $603
      var $604=HEAP32[(($tag)>>2)];
      var $605=((($604))|0)==140;
      if ($605) { __label__ = 166; break; } else { __label__ = 165; break; }
    case 165: // $606
      var $607=HEAP32[(($tag)>>2)];
      var $608=((($607))|0)==150;
      if ($608) { __label__ = 166; break; } else { __label__ = 167; break; }
    case 166: // $609
      var $610=HEAP32[((_ifp)>>2)];
      var $611=_ftell($610);
      HEAP32[((_meta_offset)>>2)]=$611;
      __label__ = 167; break;
    case 167: // $612
      var $613=HEAP32[(($tag)>>2)];
      var $614=((($613))|0)==151;
      if ($614) { __label__ = 168; break; } else { __label__ = 189; break; }
    case 168: // $615
      $i=0;
      __label__ = 169; break;
    case 169: // $616
      var $617=$i;
      var $618=((($617))>>>0) < 4;
      if ($618) { __label__ = 170; break; } else { __label__ = 172; break; }
    case 170: // $619
      var $620=$ver97;
      var $621=((($620)*10)|0);
      var $622=HEAP32[((_ifp)>>2)];
      var $623=_getc_unlocked($622);
      var $624=((($621)+($623))|0);
      var $625=((($624)-48)|0);
      $ver97=$625;
      __label__ = 171; break;
    case 171: // $626
      var $627=$i;
      var $628=((($627)+1)|0);
      $i=$628;
      __label__ = 169; break;
    case 172: // $629
      var $630=$ver97;
      if ($630 == 100) {
        __label__ = 173; break;
      }
      else if ($630 == 102) {
        __label__ = 178; break;
      }
      else if ($630 == 103) {
        __label__ = 179; break;
      }
      else {
      __label__ = 184; break;
      }
      
    case 173: // $631
      var $632=HEAP32[((_ifp)>>2)];
      var $633=_fseek($632, 68, 1);
      $c=0;
      __label__ = 174; break;
    case 174: // $634
      var $635=$c;
      var $636=((($635))>>>0) < 4;
      if ($636) { __label__ = 175; break; } else { __label__ = 177; break; }
    case 175: // $637
      var $638=_get2();
      var $639=((($638))&65535);
      var $640=$c;
      var $641=($640) >>> 1;
      var $642=$c;
      var $643=($642) & 1;
      var $644=($643) << 1;
      var $645=($641) | ($644);
      var $646=((_cam_mul+($645<<2))|0);
      HEAPF32[(($646)>>2)]=$639;
      __label__ = 176; break;
    case 176: // $647
      var $648=$c;
      var $649=((($648)+1)|0);
      $c=$649;
      __label__ = 174; break;
    case 177: // $650
      __label__ = 184; break;
    case 178: // $651
      var $652=HEAP32[((_ifp)>>2)];
      var $653=_fseek($652, 6, 1);
      __label__ = 312; break;
    case 179: // $654
      var $655=HEAP32[((_ifp)>>2)];
      var $656=_fseek($655, 16, 1);
      $c=0;
      __label__ = 180; break;
    case 180: // $657
      var $658=$c;
      var $659=((($658))>>>0) < 4;
      if ($659) { __label__ = 181; break; } else { __label__ = 183; break; }
    case 181: // $660
      var $661=_get2();
      var $662=((($661))&65535);
      var $663=$c;
      var $664=((_cam_mul+($663<<2))|0);
      HEAPF32[(($664)>>2)]=$662;
      __label__ = 182; break;
    case 182: // $665
      var $666=$c;
      var $667=((($666)+1)|0);
      $c=$667;
      __label__ = 180; break;
    case 183: // $668
      __label__ = 184; break;
    case 184: // $669
      var $670=$ver97;
      var $671=((($670))>>>0) >= 200;
      if ($671) { __label__ = 185; break; } else { __label__ = 188; break; }
    case 185: // $672
      var $673=$ver97;
      var $674=((($673))|0)!=205;
      if ($674) { __label__ = 186; break; } else { __label__ = 187; break; }
    case 186: // $675
      var $676=HEAP32[((_ifp)>>2)];
      var $677=_fseek($676, 280, 1);
      __label__ = 187; break;
    case 187: // $678
      var $679=(($buf97)|0);
      var $680=HEAP32[((_ifp)>>2)];
      var $681=_fread($679, 324, 1, $680);
      __label__ = 188; break;
    case 188: // $682
      __label__ = 189; break;
    case 189: // $683
      var $684=HEAP32[(($tag)>>2)];
      var $685=((($684))|0)==161;
      if ($685) { __label__ = 190; break; } else { __label__ = 196; break; }
    case 190: // $686
      var $687=HEAP32[(($type)>>2)];
      var $688=((($687))|0)==7;
      if ($688) { __label__ = 191; break; } else { __label__ = 196; break; }
    case 191: // $689
      HEAP16[((_order)>>1)]=18761;
      var $690=HEAP32[((_ifp)>>2)];
      var $691=_fseek($690, 140, 1);
      $c=0;
      __label__ = 192; break;
    case 192: // $692
      var $693=$c;
      var $694=((($693))>>>0) < 3;
      if ($694) { __label__ = 193; break; } else { __label__ = 195; break; }
    case 193: // $695
      var $696=_get4();
      var $697=((($696))>>>0);
      var $698=$c;
      var $699=((_cam_mul+($698<<2))|0);
      HEAPF32[(($699)>>2)]=$697;
      __label__ = 194; break;
    case 194: // $700
      var $701=$c;
      var $702=((($701)+1)|0);
      $c=$702;
      __label__ = 192; break;
    case 195: // $703
      __label__ = 196; break;
    case 196: // $704
      var $705=HEAP32[(($tag)>>2)];
      var $706=((($705))|0)==164;
      if ($706) { __label__ = 197; break; } else { __label__ = 203; break; }
    case 197: // $707
      var $708=HEAP32[(($type)>>2)];
      var $709=((($708))|0)==3;
      if ($709) { __label__ = 198; break; } else { __label__ = 203; break; }
    case 198: // $710
      var $711=HEAP32[((_ifp)>>2)];
      var $712=$wbi;
      var $713=((($712)*48)|0);
      var $714=_fseek($711, $713, 1);
      $c=0;
      __label__ = 199; break;
    case 199: // $715
      var $716=$c;
      var $717=((($716))>>>0) < 3;
      if ($717) { __label__ = 200; break; } else { __label__ = 202; break; }
    case 200: // $718
      var $719=_get2();
      var $720=((($719))&65535);
      var $721=$c;
      var $722=((_cam_mul+($721<<2))|0);
      HEAPF32[(($722)>>2)]=$720;
      __label__ = 201; break;
    case 201: // $723
      var $724=$c;
      var $725=((($724)+1)|0);
      $c=$725;
      __label__ = 199; break;
    case 202: // $726
      __label__ = 203; break;
    case 203: // $727
      var $728=HEAP32[(($tag)>>2)];
      var $729=((($728))|0)==167;
      if ($729) { __label__ = 204; break; } else { __label__ = 214; break; }
    case 204: // $730
      var $731=$ver97;
      var $732=((($731)-200)|0);
      var $733=((($732))>>>0) < 17;
      if ($733) { __label__ = 205; break; } else { __label__ = 214; break; }
    case 205: // $734
      var $735=$serial;
      var $736=($735) & 255;
      var $737=((((_parse_makernote_xlat)|0)+$736)|0);
      var $738=HEAP8[($737)];
      $ci=$738;
      var $739=HEAP32[((_ifp)>>2)];
      var $740=_getc_unlocked($739);
      var $741=HEAP32[((_ifp)>>2)];
      var $742=_getc_unlocked($741);
      var $743=($740) ^ ($742);
      var $744=HEAP32[((_ifp)>>2)];
      var $745=_getc_unlocked($744);
      var $746=($743) ^ ($745);
      var $747=HEAP32[((_ifp)>>2)];
      var $748=_getc_unlocked($747);
      var $749=($746) ^ ($748);
      var $750=((((_parse_makernote_xlat+256)|0)+$749)|0);
      var $751=HEAP8[($750)];
      $cj=$751;
      $ck=96;
      $i=0;
      __label__ = 206; break;
    case 206: // $752
      var $753=$i;
      var $754=((($753))>>>0) < 324;
      if ($754) { __label__ = 207; break; } else { __label__ = 209; break; }
    case 207: // $755
      var $756=$ci;
      var $757=((($756))&255);
      var $758=$ck;
      var $759=((($758)+1)&255);
      $ck=$759;
      var $760=((($758))&255);
      var $761=((($757)*($760))|0);
      var $762=$cj;
      var $763=((($762))&255);
      var $764=((($763)+($761))|0);
      var $765=((($764)) & 255);
      $cj=$765;
      var $766=((($765))&255);
      var $767=$i;
      var $768=(($buf97+$767)|0);
      var $769=HEAPU8[($768)];
      var $770=((($769))&255);
      var $771=($770) ^ ($766);
      var $772=((($771)) & 255);
      HEAP8[($768)]=$772;
      __label__ = 208; break;
    case 208: // $773
      var $774=$i;
      var $775=((($774)+1)|0);
      $i=$775;
      __label__ = 206; break;
    case 209: // $776
      var $777=$ver97;
      var $778=((($777)-200)|0);
      var $779=((__str114+$778)|0);
      var $780=HEAP8[($779)];
      var $781=((($780) << 24) >> 24);
      var $782=((($781)-48)|0);
      $i=$782;
      $c=0;
      __label__ = 210; break;
    case 210: // $783
      var $784=$c;
      var $785=((($784))>>>0) < 4;
      if ($785) { __label__ = 211; break; } else { __label__ = 213; break; }
    case 211: // $786
      var $787=(($buf97)|0);
      var $788=$i;
      var $789=($788) & -2;
      var $790=(($787+$789)|0);
      var $791=$c;
      var $792=(((($791)<<1))|0);
      var $793=(($790+$792)|0);
      var $794=_sget2($793);
      var $795=((($794))&65535);
      var $796=$c;
      var $797=$c;
      var $798=($797) >>> 1;
      var $799=($796) ^ ($798);
      var $800=$i;
      var $801=($800) & 1;
      var $802=($799) ^ ($801);
      var $803=((_cam_mul+($802<<2))|0);
      HEAPF32[(($803)>>2)]=$795;
      __label__ = 212; break;
    case 212: // $804
      var $805=$c;
      var $806=((($805)+1)|0);
      $c=$806;
      __label__ = 210; break;
    case 213: // $807
      __label__ = 214; break;
    case 214: // $808
      var $809=HEAP32[(($tag)>>2)];
      var $810=((($809))|0)==512;
      if ($810) { __label__ = 215; break; } else { __label__ = 217; break; }
    case 215: // $811
      var $812=HEAP32[(($len)>>2)];
      var $813=((($812))|0)==3;
      if ($813) { __label__ = 216; break; } else { __label__ = 217; break; }
    case 216: // $814
      var $815=_get4();
      var $816=_get4();
      HEAP32[((_shot_order)>>2)]=$816;
      __label__ = 217; break;
    case 217: // $817
      var $818=HEAP32[(($tag)>>2)];
      var $819=((($818))|0)==512;
      if ($819) { __label__ = 218; break; } else { __label__ = 224; break; }
    case 218: // $820
      var $821=HEAP32[(($len)>>2)];
      var $822=((($821))|0)==4;
      if ($822) { __label__ = 219; break; } else { __label__ = 224; break; }
    case 219: // $823
      $c=0;
      __label__ = 220; break;
    case 220: // $824
      var $825=$c;
      var $826=((($825))>>>0) < 4;
      if ($826) { __label__ = 221; break; } else { __label__ = 223; break; }
    case 221: // $827
      var $828=_get2();
      var $829=((($828))&65535);
      var $830=$c;
      var $831=$c;
      var $832=($831) >>> 1;
      var $833=($830) ^ ($832);
      var $834=((_cblack+($833<<2))|0);
      HEAP32[(($834)>>2)]=$829;
      __label__ = 222; break;
    case 222: // $835
      var $836=$c;
      var $837=((($836)+1)|0);
      $c=$837;
      __label__ = 220; break;
    case 223: // $838
      __label__ = 224; break;
    case 224: // $839
      var $840=HEAP32[(($tag)>>2)];
      var $841=((($840))|0)==513;
      if ($841) { __label__ = 225; break; } else { __label__ = 227; break; }
    case 225: // $842
      var $843=HEAP32[(($len)>>2)];
      var $844=((($843))|0)==4;
      if ($844) { __label__ = 226; break; } else { __label__ = 227; break; }
    case 226: // $845
      __label__ = 312; break;
    case 227: // $846
      var $847=HEAP32[(($tag)>>2)];
      var $848=((($847))|0)==544;
      if ($848) { __label__ = 228; break; } else { __label__ = 230; break; }
    case 228: // $849
      var $850=HEAP32[(($type)>>2)];
      var $851=((($850))|0)==7;
      if ($851) { __label__ = 229; break; } else { __label__ = 230; break; }
    case 229: // $852
      var $853=HEAP32[((_ifp)>>2)];
      var $854=_ftell($853);
      HEAP32[((_meta_offset)>>2)]=$854;
      __label__ = 230; break;
    case 230: // $855
      var $856=HEAP32[(($tag)>>2)];
      var $857=((($856))|0)==1025;
      if ($857) { __label__ = 231; break; } else { __label__ = 238; break; }
    case 231: // $858
      var $859=HEAP32[(($type)>>2)];
      var $860=((($859))|0)==4;
      if ($860) { __label__ = 232; break; } else { __label__ = 238; break; }
    case 232: // $861
      var $862=HEAP32[(($len)>>2)];
      var $863=((($862))|0)==4;
      if ($863) { __label__ = 233; break; } else { __label__ = 238; break; }
    case 233: // $864
      $c=0;
      __label__ = 234; break;
    case 234: // $865
      var $866=$c;
      var $867=((($866))>>>0) < 4;
      if ($867) { __label__ = 235; break; } else { __label__ = 237; break; }
    case 235: // $868
      var $869=_get4();
      var $870=$c;
      var $871=$c;
      var $872=($871) >>> 1;
      var $873=($870) ^ ($872);
      var $874=((_cblack+($873<<2))|0);
      HEAP32[(($874)>>2)]=$869;
      __label__ = 236; break;
    case 236: // $875
      var $876=$c;
      var $877=((($876)+1)|0);
      $c=$877;
      __label__ = 234; break;
    case 237: // $878
      __label__ = 238; break;
    case 238: // $879
      var $880=HEAP32[(($tag)>>2)];
      var $881=((($880))|0)==3585;
      if ($881) { __label__ = 239; break; } else { __label__ = 247; break; }
    case 239: // $882
      HEAP16[((_order)>>1)]=18761;
      var $883=HEAP32[((_ifp)>>2)];
      var $884=_fseek($883, 22, 1);
      $offset=22;
      __label__ = 240; break;
    case 240: // $885
      var $886=$offset;
      var $887=((($886)+22)|0);
      var $888=HEAPU32[(($len)>>2)];
      var $889=((($887))>>>0) < ((($888))>>>0);
      if ($889) { __label__ = 241; break; } else { __label__ = 246; break; }
    case 241: // $890
      var $891=_get4();
      HEAP32[(($tag)>>2)]=$891;
      var $892=HEAP32[((_ifp)>>2)];
      var $893=_fseek($892, 14, 1);
      var $894=_get4();
      var $895=((($894)-4)|0);
      $i=$895;
      var $896=HEAP32[(($tag)>>2)];
      var $897=((($896))|0)==1990472199;
      if ($897) { __label__ = 242; break; } else { __label__ = 243; break; }
    case 242: // $898
      var $899=_get2();
      var $900=((($899))&65535);
      HEAP32[((_flip)>>2)]=$900;
      __label__ = 244; break;
    case 243: // $901
      var $902=HEAP32[((_ifp)>>2)];
      var $903=$i;
      var $904=_fseek($902, $903, 1);
      __label__ = 244; break;
    case 244: // $905
      __label__ = 245; break;
    case 245: // $906
      var $907=$i;
      var $908=((($907)+22)|0);
      var $909=$offset;
      var $910=((($909)+($908))|0);
      $offset=$910;
      __label__ = 240; break;
    case 246: // $911
      __label__ = 247; break;
    case 247: // $912
      var $913=HEAP32[(($tag)>>2)];
      var $914=((($913))|0)==3712;
      if ($914) { __label__ = 248; break; } else { __label__ = 251; break; }
    case 248: // $915
      var $916=HEAP32[(($len)>>2)];
      var $917=((($916))|0)==256;
      if ($917) { __label__ = 249; break; } else { __label__ = 251; break; }
    case 249: // $918
      var $919=HEAP32[(($type)>>2)];
      var $920=((($919))|0)==7;
      if ($920) { __label__ = 250; break; } else { __label__ = 251; break; }
    case 250: // $921
      var $922=HEAP32[((_ifp)>>2)];
      var $923=_fseek($922, 48, 1);
      var $924=_get2();
      var $925=((($924))&65535);
      var $926=((($925)*508)|0);
      var $927=((($926))|0);
      var $928=($927)*1.078;
      var $929=($928)/65536;
      var $930=($929);
      HEAPF32[((((_cam_mul)|0))>>2)]=$930;
      var $931=_get2();
      var $932=((($931))&65535);
      var $933=((($932)*382)|0);
      var $934=((($933))|0);
      var $935=($934)*1.173;
      var $936=($935)/65536;
      var $937=($936);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$937;
      __label__ = 251; break;
    case 251: // $938
      var $939=HEAP32[(($tag)>>2)];
      var $940=((($939))|0)==3840;
      if ($940) { __label__ = 252; break; } else { __label__ = 261; break; }
    case 252: // $941
      var $942=HEAP32[(($type)>>2)];
      var $943=((($942))|0)==7;
      if ($943) { __label__ = 253; break; } else { __label__ = 261; break; }
    case 253: // $944
      var $945=HEAP32[(($len)>>2)];
      var $946=((($945))|0)==614;
      if ($946) { __label__ = 254; break; } else { __label__ = 255; break; }
    case 254: // $947
      var $948=HEAP32[((_ifp)>>2)];
      var $949=_fseek($948, 176, 1);
      __label__ = 260; break;
    case 255: // $950
      var $951=HEAP32[(($len)>>2)];
      var $952=((($951))|0)==734;
      if ($952) { __label__ = 257; break; } else { __label__ = 256; break; }
    case 256: // $953
      var $954=HEAP32[(($len)>>2)];
      var $955=((($954))|0)==1502;
      if ($955) { __label__ = 257; break; } else { __label__ = 258; break; }
    case 257: // $956
      var $957=HEAP32[((_ifp)>>2)];
      var $958=_fseek($957, 148, 1);
      __label__ = 259; break;
    case 258: // $959
      __label__ = 334; break;
    case 259: // $960
      __label__ = 260; break;
    case 260: // $961
      __label__ = 290; break;
    case 261: // $962
      var $963=HEAP32[(($tag)>>2)];
      var $964=((($963))|0)==4113;
      if ($964) { __label__ = 262; break; } else { __label__ = 263; break; }
    case 262: // $965
      var $966=HEAP32[(($len)>>2)];
      var $967=((($966))|0)==9;
      if ($967) { __label__ = 264; break; } else { __label__ = 263; break; }
    case 263: // $968
      var $969=HEAP32[(($tag)>>2)];
      var $970=((($969))|0)==541065728;
      if ($970) { __label__ = 264; break; } else { __label__ = 273; break; }
    case 264: // $971
      $i=0;
      __label__ = 265; break;
    case 265: // $972
      var $973=$i;
      var $974=((($973))>>>0) < 3;
      if ($974) { __label__ = 266; break; } else { __label__ = 272; break; }
    case 266: // $975
      $c=0;
      __label__ = 267; break;
    case 267: // $976
      var $977=$c;
      var $978=((($977))>>>0) < 3;
      if ($978) { __label__ = 268; break; } else { __label__ = 270; break; }
    case 268: // $979
      var $980=_get2();
      var $981=((($980) << 16) >> 16);
      var $982=((($981))|0);
      var $983=($982)/256;
      var $984=($983);
      var $985=$c;
      var $986=$i;
      var $987=((_cmatrix+($986<<4))|0);
      var $988=(($987+($985<<2))|0);
      HEAPF32[(($988)>>2)]=$984;
      __label__ = 269; break;
    case 269: // $989
      var $990=$c;
      var $991=((($990)+1)|0);
      $c=$991;
      __label__ = 267; break;
    case 270: // $992
      __label__ = 271; break;
    case 271: // $993
      var $994=$i;
      var $995=((($994)+1)|0);
      $i=$995;
      __label__ = 265; break;
    case 272: // $996
      __label__ = 273; break;
    case 273: // $997
      var $998=HEAP32[(($tag)>>2)];
      var $999=((($998))|0)==4114;
      if ($999) { __label__ = 275; break; } else { __label__ = 274; break; }
    case 274: // $1000
      var $1001=HEAP32[(($tag)>>2)];
      var $1002=((($1001))|0)==541066752;
      if ($1002) { __label__ = 275; break; } else { __label__ = 281; break; }
    case 275: // $1003
      var $1004=HEAP32[(($len)>>2)];
      var $1005=((($1004))|0)==4;
      if ($1005) { __label__ = 276; break; } else { __label__ = 281; break; }
    case 276: // $1006
      $c=0;
      __label__ = 277; break;
    case 277: // $1007
      var $1008=$c;
      var $1009=((($1008))>>>0) < 4;
      if ($1009) { __label__ = 278; break; } else { __label__ = 280; break; }
    case 278: // $1010
      var $1011=_get2();
      var $1012=((($1011))&65535);
      var $1013=$c;
      var $1014=$c;
      var $1015=($1014) >>> 1;
      var $1016=($1013) ^ ($1015);
      var $1017=((_cblack+($1016<<2))|0);
      HEAP32[(($1017)>>2)]=$1012;
      __label__ = 279; break;
    case 279: // $1018
      var $1019=$c;
      var $1020=((($1019)+1)|0);
      $c=$1020;
      __label__ = 277; break;
    case 280: // $1021
      __label__ = 281; break;
    case 281: // $1022
      var $1023=HEAP32[(($tag)>>2)];
      var $1024=((($1023))|0)==4119;
      if ($1024) { __label__ = 283; break; } else { __label__ = 282; break; }
    case 282: // $1025
      var $1026=HEAP32[(($tag)>>2)];
      var $1027=((($1026))|0)==541065472;
      if ($1027) { __label__ = 283; break; } else { __label__ = 284; break; }
    case 283: // $1028
      var $1029=_get2();
      var $1030=((($1029))&65535);
      var $1031=((($1030))|0);
      var $1032=($1031)/256;
      var $1033=($1032);
      HEAPF32[((((_cam_mul)|0))>>2)]=$1033;
      __label__ = 284; break;
    case 284: // $1034
      var $1035=HEAP32[(($tag)>>2)];
      var $1036=((($1035))|0)==4120;
      if ($1036) { __label__ = 286; break; } else { __label__ = 285; break; }
    case 285: // $1037
      var $1038=HEAP32[(($tag)>>2)];
      var $1039=((($1038))|0)==541065472;
      if ($1039) { __label__ = 286; break; } else { __label__ = 287; break; }
    case 286: // $1040
      var $1041=_get2();
      var $1042=((($1041))&65535);
      var $1043=((($1042))|0);
      var $1044=($1043)/256;
      var $1045=($1044);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$1045;
      __label__ = 287; break;
    case 287: // $1046
      var $1047=HEAP32[(($tag)>>2)];
      var $1048=((($1047))|0)==8209;
      if ($1048) { __label__ = 288; break; } else { __label__ = 291; break; }
    case 288: // $1049
      var $1050=HEAP32[(($len)>>2)];
      var $1051=((($1050))|0)==2;
      if ($1051) { __label__ = 289; break; } else { __label__ = 291; break; }
    case 289: // $1052
      __label__ = 290; break;
    case 290: // $1053
      HEAP16[((_order)>>1)]=19789;
      var $1054=_get2();
      var $1055=((($1054))&65535);
      var $1056=((($1055))|0);
      var $1057=($1056)/256;
      var $1058=($1057);
      HEAPF32[((((_cam_mul)|0))>>2)]=$1058;
      var $1059=_get2();
      var $1060=((($1059))&65535);
      var $1061=((($1060))|0);
      var $1062=($1061)/256;
      var $1063=($1062);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$1063;
      __label__ = 291; break;
    case 291: // $1064
      var $1065=HEAP32[(($tag)>>2)];
      var $1066=($1065) | 112;
      var $1067=((($1066))|0)==8304;
      if ($1067) { __label__ = 292; break; } else { __label__ = 294; break; }
    case 292: // $1068
      var $1069=HEAP32[(($type)>>2)];
      var $1070=((($1069))|0)==4;
      if ($1070) { __label__ = 293; break; } else { __label__ = 294; break; }
    case 293: // $1071
      var $1072=HEAP32[((_ifp)>>2)];
      var $1073=_get4();
      var $1074=$1;
      var $1075=((($1073)+($1074))|0);
      var $1076=_fseek($1072, $1075, 0);
      __label__ = 294; break;
    case 294: // $1077
      var $1078=HEAP32[(($tag)>>2)];
      var $1079=((($1078))|0)==8208;
      if ($1079) { __label__ = 295; break; } else { __label__ = 297; break; }
    case 295: // $1080
      var $1081=HEAP32[(($type)>>2)];
      var $1082=((($1081))|0)!=7;
      if ($1082) { __label__ = 296; break; } else { __label__ = 297; break; }
    case 296: // $1083
      HEAP32[((_load_raw)>>2)]=2;
      __label__ = 297; break;
    case 297: // $1084
      var $1085=HEAP32[(($tag)>>2)];
      var $1086=((($1085))|0)==8224;
      if ($1086) { __label__ = 298; break; } else { __label__ = 299; break; }
    case 298: // $1087
      var $1088=$1;
      _parse_thumb_note($1088, 257, 258);
      __label__ = 299; break;
    case 299: // $1089
      var $1090=HEAP32[(($tag)>>2)];
      var $1091=((($1090))|0)==8256;
      if ($1091) { __label__ = 300; break; } else { __label__ = 301; break; }
    case 300: // $1092
      var $1093=$1;
      _parse_makernote($1093, 8256);
      __label__ = 301; break;
    case 301: // $1094
      var $1095=HEAP32[(($tag)>>2)];
      var $1096=((($1095))|0)==45096;
      if ($1096) { __label__ = 302; break; } else { __label__ = 303; break; }
    case 302: // $1097
      var $1098=HEAP32[((_ifp)>>2)];
      var $1099=_get4();
      var $1100=$1;
      var $1101=((($1099)+($1100))|0);
      var $1102=_fseek($1098, $1101, 0);
      var $1103=$1;
      _parse_thumb_note($1103, 136, 137);
      __label__ = 303; break;
    case 303: // $1104
      var $1105=HEAP32[(($tag)>>2)];
      var $1106=((($1105))|0)==16385;
      if ($1106) { __label__ = 304; break; } else { __label__ = 321; break; }
    case 304: // $1107
      var $1108=HEAPU32[(($len)>>2)];
      var $1109=((($1108))>>>0) > 500;
      if ($1109) { __label__ = 305; break; } else { __label__ = 321; break; }
    case 305: // $1110
      var $1111=HEAP32[(($len)>>2)];
      var $1112=((($1111))|0)==582;
      if ($1112) { __label__ = 306; break; } else { __label__ = 307; break; }
    case 306: // $1113
      var $1125 = 50;__label__ = 311; break;
    case 307: // $1114
      var $1115=HEAP32[(($len)>>2)];
      var $1116=((($1115))|0)==653;
      if ($1116) { __label__ = 308; break; } else { __label__ = 309; break; }
    case 308: // $1117
      var $1123 = 68;__label__ = 310; break;
    case 309: // $1118
      var $1119=HEAP32[(($len)>>2)];
      var $1120=((($1119))|0)==5120;
      var $1121=($1120) ? 142 : 126;
      var $1123 = $1121;__label__ = 310; break;
    case 310: // $1122
      var $1123;
      var $1125 = $1123;__label__ = 311; break;
    case 311: // $1124
      var $1125;
      $i=$1125;
      var $1126=HEAP32[((_ifp)>>2)];
      var $1127=$i;
      var $1128=_fseek($1126, $1127, 1);
      __label__ = 312; break;
    case 312: // $1129
      $c=0;
      __label__ = 313; break;
    case 313: // $1130
      var $1131=$c;
      var $1132=((($1131))>>>0) < 4;
      if ($1132) { __label__ = 314; break; } else { __label__ = 316; break; }
    case 314: // $1133
      var $1134=_get2();
      var $1135=((($1134))&65535);
      var $1136=$c;
      var $1137=$c;
      var $1138=($1137) >>> 1;
      var $1139=($1136) ^ ($1138);
      var $1140=((_cam_mul+($1139<<2))|0);
      HEAPF32[(($1140)>>2)]=$1135;
      __label__ = 315; break;
    case 315: // $1141
      var $1142=$c;
      var $1143=((($1142)+1)|0);
      $c=$1143;
      __label__ = 313; break;
    case 316: // $1144
      var $1145=HEAP32[((_ifp)>>2)];
      var $1146=_fseek($1145, 22, 1);
      $c=0;
      __label__ = 317; break;
    case 317: // $1147
      var $1148=$c;
      var $1149=((($1148))>>>0) < 4;
      if ($1149) { __label__ = 318; break; } else { __label__ = 320; break; }
    case 318: // $1150
      var $1151=_get2();
      var $1152=$c;
      var $1153=$c;
      var $1154=($1153) >>> 1;
      var $1155=($1152) ^ ($1154);
      var $1156=((_sraw_mul+($1155<<1))|0);
      HEAP16[(($1156)>>1)]=$1151;
      __label__ = 319; break;
    case 319: // $1157
      var $1158=$c;
      var $1159=((($1158)+1)|0);
      $c=$1159;
      __label__ = 317; break;
    case 320: // $1160
      __label__ = 321; break;
    case 321: // $1161
      var $1162=HEAP32[(($tag)>>2)];
      var $1163=((($1162))|0)==40993;
      if ($1163) { __label__ = 322; break; } else { __label__ = 327; break; }
    case 322: // $1164
      $c=0;
      __label__ = 323; break;
    case 323: // $1165
      var $1166=$c;
      var $1167=((($1166))>>>0) < 4;
      if ($1167) { __label__ = 324; break; } else { __label__ = 326; break; }
    case 324: // $1168
      var $1169=_get4();
      var $1170=((($1169))>>>0);
      var $1171=$c;
      var $1172=$c;
      var $1173=($1172) >>> 1;
      var $1174=($1171) ^ ($1173);
      var $1175=((_cam_mul+($1174<<2))|0);
      HEAPF32[(($1175)>>2)]=$1170;
      __label__ = 325; break;
    case 325: // $1176
      var $1177=$c;
      var $1178=((($1177)+1)|0);
      $c=$1178;
      __label__ = 323; break;
    case 326: // $1179
      __label__ = 327; break;
    case 327: // $1180
      var $1181=HEAP32[(($tag)>>2)];
      var $1182=((($1181))|0)==41000;
      if ($1182) { __label__ = 328; break; } else { __label__ = 333; break; }
    case 328: // $1183
      $c=0;
      __label__ = 329; break;
    case 329: // $1184
      var $1185=$c;
      var $1186=((($1185))>>>0) < 4;
      if ($1186) { __label__ = 330; break; } else { __label__ = 332; break; }
    case 330: // $1187
      var $1188=_get4();
      var $1189=((($1188))>>>0);
      var $1190=$c;
      var $1191=$c;
      var $1192=($1191) >>> 1;
      var $1193=($1190) ^ ($1192);
      var $1194=((_cam_mul+($1193<<2))|0);
      var $1195=HEAPF32[(($1194)>>2)];
      var $1196=($1195)-($1189);
      HEAPF32[(($1194)>>2)]=$1196;
      __label__ = 331; break;
    case 331: // $1197
      var $1198=$c;
      var $1199=((($1198)+1)|0);
      $c=$1199;
      __label__ = 329; break;
    case 332: // $1200
      __label__ = 333; break;
    case 333: // $1201
      __label__ = 334; break;
    case 334: // $1202
      var $1203=HEAP32[((_ifp)>>2)];
      var $1204=HEAP32[(($save)>>2)];
      var $1205=_fseek($1203, $1204, 0);
      __label__ = 57; break;
    case 335: // $1206
      __label__ = 336; break;
    case 336: // $1207
      var $1208=$sorder;
      HEAP16[((_order)>>1)]=$1208;
      __label__ = 337; break;
    case 337: // $1209
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_makernote["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _parse_tiff_ifd($base) {
  var __stackBase__  = STACKTOP; STACKTOP += 900; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $plen;
      var $save=__stackBase__+12;
      var $ifd;
      var $use_cm;
      var $cfa;
      var $i;
      var $j;
      var $c;
      var $ima_len;
      var $blrr;
      var $blrc;
      var $dblack=__stackBase__+16;
      var $software=__stackBase__+32;
      var $cbuf;
      var $cp;
      var $cfa_pat=__stackBase__+96;
      var $cfa_pc=__stackBase__+112;
      var $tab=__stackBase__+116;
      var $cc=__stackBase__+372;
      var $cm=__stackBase__+500;
      var $cam_xyz=__stackBase__+596;
      var $num;
      var $ab=__stackBase__+692;
      var $asn=__stackBase__+724;
      var $xyz=__stackBase__+756;
      var $sony_curve=__stackBase__+780;
      var $buf;
      var $sony_offset;
      var $sony_length;
      var $sony_key;
      var $jh=__stackBase__+804;
      var $sfp;
      $2=$base;
      $plen=16;
      $use_cm=0;
      $ima_len=0;
      $blrr=1;
      $blrc=1;
      var $3=$dblack;
      HEAP32[(($3)>>2)]=0; HEAP32[(($3+4)>>2)]=0; HEAP32[(($3+8)>>2)]=0; HEAP32[(($3+12)>>2)]=0;
      var $4=$cfa_pc;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($4)]=HEAP8[(((_parse_tiff_ifd_cfa_pc)|0))]; HEAP8[($4+1)]=HEAP8[(((_parse_tiff_ifd_cfa_pc)|0)+1)]; HEAP8[($4+2)]=HEAP8[(((_parse_tiff_ifd_cfa_pc)|0)+2)]; HEAP8[($4+3)]=HEAP8[(((_parse_tiff_ifd_cfa_pc)|0)+3)];
      var $5=$ab;
      assert(32 % 1 === 0, 'memcpy given ' + 32 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($5)>>2)]=HEAP32[(((_parse_tiff_ifd_ab))>>2)]; HEAP32[(($5+4)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+4)>>2)]; HEAP32[(($5+8)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+8)>>2)]; HEAP32[(($5+12)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+12)>>2)]; HEAP32[(($5+16)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+16)>>2)]; HEAP32[(($5+20)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+20)>>2)]; HEAP32[(($5+24)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+24)>>2)]; HEAP32[(($5+28)>>2)]=HEAP32[(((_parse_tiff_ifd_ab)+28)>>2)];
      var $6=$asn;
      HEAP32[(($6)>>2)]=0; HEAP32[(($6+4)>>2)]=0; HEAP32[(($6+8)>>2)]=0; HEAP32[(($6+12)>>2)]=0; HEAP32[(($6+16)>>2)]=0; HEAP32[(($6+20)>>2)]=0; HEAP32[(($6+24)>>2)]=0; HEAP32[(($6+28)>>2)]=0;
      var $7=$xyz;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($7)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz))>>2)]; HEAP32[(($7+4)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz)+4)>>2)]; HEAP32[(($7+8)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz)+8)>>2)]; HEAP32[(($7+12)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz)+12)>>2)]; HEAP32[(($7+16)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz)+16)>>2)]; HEAP32[(($7+20)>>2)]=HEAP32[(((_parse_tiff_ifd_xyz)+20)>>2)];
      var $8=$sony_curve;
      assert(24 % 1 === 0, 'memcpy given ' + 24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($8)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve))>>2)]; HEAP32[(($8+4)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve)+4)>>2)]; HEAP32[(($8+8)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve)+8)>>2)]; HEAP32[(($8+12)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve)+12)>>2)]; HEAP32[(($8+16)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve)+16)>>2)]; HEAP32[(($8+20)>>2)]=HEAP32[(((_parse_tiff_ifd_sony_curve)+20)>>2)];
      $sony_offset=0;
      $sony_length=0;
      $sony_key=0;
      var $9=HEAPU32[((_tiff_nifds)>>2)];
      var $10=((($9))>>>0) >= 10;
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      $1=1;
      __label__ = 356; break;
    case 2: // $12
      var $13=HEAP32[((_tiff_nifds)>>2)];
      var $14=((($13)+1)|0);
      HEAP32[((_tiff_nifds)>>2)]=$14;
      $ifd=$13;
      $j=0;
      __label__ = 3; break;
    case 3: // $15
      var $16=$j;
      var $17=((($16))|0) < 4;
      if ($17) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: // $18
      $i=0;
      __label__ = 5; break;
    case 5: // $19
      var $20=$i;
      var $21=((($20))|0) < 4;
      if ($21) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $22
      var $23=$i;
      var $24=$j;
      var $25=((($23))|0)==((($24))|0);
      var $26=((($25))&1);
      var $27=((($26))|0);
      var $28=$i;
      var $29=$j;
      var $30=(($cc+($29<<5))|0);
      var $31=(($30+($28<<3))|0);
      (tempDoubleF64[0]=$27,HEAP32[(($31)>>2)]=tempDoubleI32[0],HEAP32[(($31+4)>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 7: // $32
      var $33=$i;
      var $34=((($33)+1)|0);
      $i=$34;
      __label__ = 5; break;
    case 8: // $35
      __label__ = 9; break;
    case 9: // $36
      var $37=$j;
      var $38=((($37)+1)|0);
      $j=$38;
      __label__ = 3; break;
    case 10: // $39
      var $40=_get2();
      var $41=((($40))&65535);
      $entries=$41;
      var $42=$entries;
      var $43=((($42))>>>0) > 512;
      if ($43) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $44
      $1=1;
      __label__ = 356; break;
    case 12: // $45
      __label__ = 13; break;
    case 13: // $46
      var $47=$entries;
      var $48=((($47)-1)|0);
      $entries=$48;
      var $49=((($47))|0)!=0;
      if ($49) { __label__ = 14; break; } else { __label__ = 316; break; }
    case 14: // $50
      var $51=$2;
      _tiff_get($51, $tag, $type, $len, $save);
      var $52=HEAP32[(($tag)>>2)];
      if ($52 == 5) {
        __label__ = 15; break;
      }
      else if ($52 == 6) {
        __label__ = 16; break;
      }
      else if ($52 == 7) {
        __label__ = 17; break;
      }
      else if ($52 == 9) {
        __label__ = 18; break;
      }
      else if ($52 == 17 || $52 == 18) {
        __label__ = 19; break;
      }
      else if ($52 == 23) {
        __label__ = 23; break;
      }
      else if ($52 == 36 || $52 == 37 || $52 == 38) {
        __label__ = 26; break;
      }
      else if ($52 == 39) {
        __label__ = 27; break;
      }
      else if ($52 == 46) {
        __label__ = 35; break;
      }
      else if ($52 == 61440) {
        __label__ = 40; break;
      }
      else if ($52 == 2 || $52 == 256 || $52 == 61441) {
        __label__ = 41; break;
      }
      else if ($52 == 3 || $52 == 257 || $52 == 61442) {
        __label__ = 42; break;
      }
      else if ($52 == 258 || $52 == 61443) {
        __label__ = 43; break;
      }
      else if ($52 == 61446) {
        __label__ = 44; break;
      }
      else if ($52 == 259) {
        __label__ = 47; break;
      }
      else if ($52 == 262) {
        __label__ = 48; break;
      }
      else if ($52 == 270) {
        __label__ = 49; break;
      }
      else if ($52 == 271) {
        __label__ = 50; break;
      }
      else if ($52 == 272) {
        __label__ = 51; break;
      }
      else if ($52 == 280) {
        __label__ = 52; break;
      }
      else if ($52 == 273 || $52 == 513 || $52 == 61447) {
        __label__ = 55; break;
      }
      else if ($52 == 274) {
        __label__ = 64; break;
      }
      else if ($52 == 277) {
        __label__ = 65; break;
      }
      else if ($52 == 279 || $52 == 514 || $52 == 61448) {
        __label__ = 66; break;
      }
      else if ($52 == 61454) {
        __label__ = 67; break;
      }
      else if ($52 == 305 || $52 == 11) {
        __label__ = 72; break;
      }
      else if ($52 == 306) {
        __label__ = 80; break;
      }
      else if ($52 == 315) {
        __label__ = 81; break;
      }
      else if ($52 == 322) {
        __label__ = 82; break;
      }
      else if ($52 == 323) {
        __label__ = 83; break;
      }
      else if ($52 == 324) {
        __label__ = 84; break;
      }
      else if ($52 == 330) {
        __label__ = 90; break;
      }
      else if ($52 == 400) {
        __label__ = 99; break;
      }
      else if ($52 == 28688) {
        __label__ = 100; break;
      }
      else if ($52 == 29184) {
        __label__ = 113; break;
      }
      else if ($52 == 29185) {
        __label__ = 114; break;
      }
      else if ($52 == 29217) {
        __label__ = 115; break;
      }
      else if ($52 == 29264) {
        __label__ = 116; break;
      }
      else if ($52 == 29443) {
        __label__ = 117; break;
      }
      else if ($52 == 29459) {
        __label__ = 122; break;
      }
      else if ($52 == 33405) {
        __label__ = 129; break;
      }
      else if ($52 == 33422 || $52 == 64777) {
        __label__ = 130; break;
      }
      else if ($52 == 33424 || $52 == 65024) {
        __label__ = 141; break;
      }
      else if ($52 == 33434) {
        __label__ = 142; break;
      }
      else if ($52 == 33437) {
        __label__ = 143; break;
      }
      else if ($52 == 34306) {
        __label__ = 144; break;
      }
      else if ($52 == 34307) {
        __label__ = 149; break;
      }
      else if ($52 == 34310) {
        __label__ = 170; break;
      }
      else if ($52 == 34303) {
        __label__ = 171; break;
      }
      else if ($52 == 34665) {
        __label__ = 172; break;
      }
      else if ($52 == 34853) {
        __label__ = 173; break;
      }
      else if ($52 == 34675 || $52 == 50831) {
        __label__ = 174; break;
      }
      else if ($52 == 37122) {
        __label__ = 175; break;
      }
      else if ($52 == 37386) {
        __label__ = 176; break;
      }
      else if ($52 == 37393) {
        __label__ = 177; break;
      }
      else if ($52 == 37400) {
        __label__ = 178; break;
      }
      else if ($52 == 46275) {
        __label__ = 187; break;
      }
      else if ($52 == 46279) {
        __label__ = 188; break;
      }
      else if ($52 == 50454 || $52 == 50455) {
        __label__ = 205; break;
      }
      else if ($52 == 50458) {
        __label__ = 216; break;
      }
      else if ($52 == 50459) {
        __label__ = 219; break;
      }
      else if ($52 == 50706) {
        __label__ = 220; break;
      }
      else if ($52 == 50710) {
        __label__ = 227; break;
      }
      else if ($52 == 50711) {
        __label__ = 238; break;
      }
      else if ($52 == 291 || $52 == 50712) {
        __label__ = 241; break;
      }
      else if ($52 == 50713) {
        __label__ = 242; break;
      }
      else if ($52 == 61450) {
        __label__ = 243; break;
      }
      else if ($52 == 50714) {
        __label__ = 244; break;
      }
      else if ($52 == 50715 || $52 == 50716) {
        __label__ = 264; break;
      }
      else if ($52 == 50717) {
        __label__ = 269; break;
      }
      else if ($52 == 50718) {
        __label__ = 270; break;
      }
      else if ($52 == 50721 || $52 == 50722) {
        __label__ = 271; break;
      }
      else if ($52 == 50723 || $52 == 50724) {
        __label__ = 280; break;
      }
      else if ($52 == 50727) {
        __label__ = 289; break;
      }
      else if ($52 == 50728) {
        __label__ = 294; break;
      }
      else if ($52 == 50729) {
        __label__ = 299; break;
      }
      else if ($52 == 50740) {
        __label__ = 304; break;
      }
      else if ($52 == 50752) {
        __label__ = 307; break;
      }
      else if ($52 == 50829) {
        __label__ = 308; break;
      }
      else if ($52 == 64772) {
        __label__ = 309; break;
      }
      else if ($52 == 65026) {
        __label__ = 312; break;
      }
      else {
      __label__ = 315; break;
      }
      
    case 15: // $53
      var $54=_get2();
      HEAP16[((_width)>>1)]=$54;
      __label__ = 315; break;
    case 16: // $55
      var $56=_get2();
      HEAP16[((_height)>>1)]=$56;
      __label__ = 315; break;
    case 17: // $57
      var $58=_get2();
      var $59=((($58))&65535);
      var $60=HEAPU16[((_width)>>1)];
      var $61=((($60))&65535);
      var $62=((($61)+($59))|0);
      var $63=((($62)) & 65535);
      HEAP16[((_width)>>1)]=$63;
      __label__ = 315; break;
    case 18: // $64
      var $65=_get2();
      var $66=((($65))&65535);
      HEAP32[((_filters)>>2)]=$66;
      __label__ = 315; break;
    case 19: // $67
      var $68=HEAP32[(($type)>>2)];
      var $69=((($68))|0)==3;
      if ($69) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $70
      var $71=HEAP32[(($len)>>2)];
      var $72=((($71))|0)==1;
      if ($72) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $73
      var $74=_get2();
      var $75=((($74))&65535);
      var $76=((($75))|0);
      var $77=($76)/256;
      var $78=($77);
      var $79=HEAP32[(($tag)>>2)];
      var $80=((($79)-17)|0);
      var $81=(((($80)<<1))|0);
      var $82=((_cam_mul+($81<<2))|0);
      HEAPF32[(($82)>>2)]=$78;
      __label__ = 22; break;
    case 22: // $83
      __label__ = 315; break;
    case 23: // $84
      var $85=HEAP32[(($type)>>2)];
      var $86=((($85))|0)==3;
      if ($86) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: // $87
      var $88=_get2();
      var $89=((($88))&65535);
      HEAPF32[((_iso_speed)>>2)]=$89;
      __label__ = 25; break;
    case 25: // $90
      __label__ = 315; break;
    case 26: // $91
      var $92=_get2();
      var $93=((($92))&65535);
      var $94=HEAP32[(($tag)>>2)];
      var $95=((($94)-36)|0);
      var $96=((_cam_mul+($95<<2))|0);
      HEAPF32[(($96)>>2)]=$93;
      __label__ = 315; break;
    case 27: // $97
      var $98=HEAPU32[(($len)>>2)];
      var $99=((($98))>>>0) < 50;
      if ($99) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: // $100
      var $101=HEAPF32[((((_cam_mul)|0))>>2)];
      var $102=($101) != 0;
      if ($102) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: // $103
      __label__ = 315; break;
    case 30: // $104
      var $105=HEAP32[((_ifp)>>2)];
      var $106=_fseek($105, 12, 1);
      $c=0;
      __label__ = 31; break;
    case 31: // $107
      var $108=$c;
      var $109=((($108))|0) < 3;
      if ($109) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: // $110
      var $111=_get2();
      var $112=((($111))&65535);
      var $113=$c;
      var $114=((_cam_mul+($113<<2))|0);
      HEAPF32[(($114)>>2)]=$112;
      __label__ = 33; break;
    case 33: // $115
      var $116=$c;
      var $117=((($116)+1)|0);
      $c=$117;
      __label__ = 31; break;
    case 34: // $118
      __label__ = 315; break;
    case 35: // $119
      var $120=HEAP32[(($type)>>2)];
      var $121=((($120))|0)!=7;
      if ($121) { __label__ = 38; break; } else { __label__ = 36; break; }
    case 36: // $122
      var $123=HEAP32[((_ifp)>>2)];
      var $124=_getc_unlocked($123);
      var $125=((($124))|0)!=255;
      if ($125) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: // $126
      var $127=HEAP32[((_ifp)>>2)];
      var $128=_getc_unlocked($127);
      var $129=((($128))|0)!=216;
      if ($129) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: // $130
      __label__ = 315; break;
    case 39: // $131
      var $132=HEAP32[((_ifp)>>2)];
      var $133=_ftell($132);
      var $134=((($133)-2)|0);
      HEAP32[((_thumb_offset)>>2)]=$134;
      var $135=HEAP32[(($len)>>2)];
      HEAP32[((_thumb_length)>>2)]=$135;
      __label__ = 315; break;
    case 40: // $136
      var $137=$2;
      var $138=_parse_tiff_ifd($137);
      __label__ = 315; break;
    case 41: // $139
      var $140=HEAP32[(($type)>>2)];
      var $141=_getint($140);
      var $142=$ifd;
      var $143=((_tiff_ifd+$142*36)|0);
      var $144=(($143)|0);
      HEAP32[(($144)>>2)]=$141;
      __label__ = 315; break;
    case 42: // $145
      var $146=HEAP32[(($type)>>2)];
      var $147=_getint($146);
      var $148=$ifd;
      var $149=((_tiff_ifd+$148*36)|0);
      var $150=(($149+4)|0);
      HEAP32[(($150)>>2)]=$147;
      __label__ = 315; break;
    case 43: // $151
      var $152=HEAP32[(($len)>>2)];
      var $153=($152) & 7;
      var $154=$ifd;
      var $155=((_tiff_ifd+$154*36)|0);
      var $156=(($155+28)|0);
      HEAP32[(($156)>>2)]=$153;
      var $157=HEAP32[(($type)>>2)];
      var $158=_getint($157);
      var $159=$ifd;
      var $160=((_tiff_ifd+$159*36)|0);
      var $161=(($160+8)|0);
      HEAP32[(($161)>>2)]=$158;
      __label__ = 315; break;
    case 44: // $162
      HEAP16[((_raw_height)>>1)]=0;
      HEAP32[((_load_raw)>>2)]=4;
      var $163=_get4();
      var $164=((($163))|0)!=0;
      if ($164) { __label__ = 45; break; } else { var $167 = 0;__label__ = 46; break; }
    case 45: // $165
      HEAP32[((_filters)>>2)]=370546198;
      var $167 = 1;__label__ = 46; break;
    case 46: // $166
      var $167;
      var $168=($167) ? 24 : 80;
      HEAP32[((_load_flags)>>2)]=$168;
      __label__ = 315; break;
    case 47: // $169
      var $170=_get2();
      var $171=((($170))&65535);
      var $172=$ifd;
      var $173=((_tiff_ifd+$172*36)|0);
      var $174=(($173+12)|0);
      HEAP32[(($174)>>2)]=$171;
      __label__ = 315; break;
    case 48: // $175
      var $176=_get2();
      var $177=((($176))&65535);
      var $178=$ifd;
      var $179=((_tiff_ifd+$178*36)|0);
      var $180=(($179+16)|0);
      HEAP32[(($180)>>2)]=$177;
      __label__ = 315; break;
    case 49: // $181
      var $182=HEAP32[((_ifp)>>2)];
      var $183=_fread(((_desc)|0), 512, 1, $182);
      __label__ = 315; break;
    case 50: // $184
      var $185=HEAP32[((_ifp)>>2)];
      var $186=_fgets(((_make)|0), 64, $185);
      __label__ = 315; break;
    case 51: // $187
      var $188=HEAP32[((_ifp)>>2)];
      var $189=_fgets(((_model)|0), 64, $188);
      __label__ = 315; break;
    case 52: // $190
      var $191=HEAP32[(($type)>>2)];
      var $192=((($191))|0)!=4;
      if ($192) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: // $193
      __label__ = 315; break;
    case 54: // $194
      HEAP32[((_load_raw)>>2)]=6;
      HEAP32[((_load_flags)>>2)]=8200;
      __label__ = 55; break;
    case 55: // $195
      var $196=_get4();
      var $197=$2;
      var $198=((($196)+($197))|0);
      var $199=$ifd;
      var $200=((_tiff_ifd+$199*36)|0);
      var $201=(($200+20)|0);
      HEAP32[(($201)>>2)]=$198;
      var $202=$ifd;
      var $203=((_tiff_ifd+$202*36)|0);
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205))|0)!=0;
      if ($206) { __label__ = 63; break; } else { __label__ = 56; break; }
    case 56: // $207
      var $208=$ifd;
      var $209=((_tiff_ifd+$208*36)|0);
      var $210=(($209+20)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=((($211))|0) > 0;
      if ($212) { __label__ = 57; break; } else { __label__ = 63; break; }
    case 57: // $213
      var $214=HEAP32[((_ifp)>>2)];
      var $215=$ifd;
      var $216=((_tiff_ifd+$215*36)|0);
      var $217=(($216+20)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=_fseek($214, $218, 0);
      var $220=_ljpeg_start($jh, 1);
      var $221=((($220))|0)!=0;
      if ($221) { __label__ = 58; break; } else { __label__ = 62; break; }
    case 58: // $222
      var $223=$ifd;
      var $224=((_tiff_ifd+$223*36)|0);
      var $225=(($224+12)|0);
      HEAP32[(($225)>>2)]=6;
      var $226=(($jh+8)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$ifd;
      var $229=((_tiff_ifd+$228*36)|0);
      var $230=(($229)|0);
      HEAP32[(($230)>>2)]=$227;
      var $231=(($jh+4)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$ifd;
      var $234=((_tiff_ifd+$233*36)|0);
      var $235=(($234+4)|0);
      HEAP32[(($235)>>2)]=$232;
      var $236=(($jh)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=$ifd;
      var $239=((_tiff_ifd+$238*36)|0);
      var $240=(($239+8)|0);
      HEAP32[(($240)>>2)]=$237;
      var $241=(($jh+12)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$ifd;
      var $244=((_tiff_ifd+$243*36)|0);
      var $245=(($244+28)|0);
      HEAP32[(($245)>>2)]=$242;
      var $246=(($jh+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=((($247))|0)!=0;
      if ($248) { __label__ = 61; break; } else { __label__ = 59; break; }
    case 59: // $249
      var $250=(($jh+12)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=($251) & 1;
      var $253=((($252))|0)!=0;
      if ($253) { __label__ = 61; break; } else { __label__ = 60; break; }
    case 60: // $254
      var $255=(($jh+12)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=$ifd;
      var $258=((_tiff_ifd+$257*36)|0);
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=((($260)*($256))|0);
      HEAP32[(($259)>>2)]=$261;
      __label__ = 61; break;
    case 61: // $262
      var $263=HEAP16[((_order)>>1)];
      var $264=((($263) << 16) >> 16);
      $i=$264;
      var $265=$ifd;
      var $266=((_tiff_ifd+$265*36)|0);
      var $267=(($266+20)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=((($268)+12)|0);
      var $270=_parse_tiff($269);
      var $271=$i;
      var $272=((($271)) & 65535);
      HEAP16[((_order)>>1)]=$272;
      __label__ = 62; break;
    case 62: // $273
      __label__ = 63; break;
    case 63: // $274
      __label__ = 315; break;
    case 64: // $275
      var $276=_get2();
      var $277=((($276))&65535);
      var $278=($277) & 7;
      var $279=((__str152+$278)|0);
      var $280=HEAP8[($279)];
      var $281=((($280) << 24) >> 24);
      var $282=((($281)-48)|0);
      var $283=$ifd;
      var $284=((_tiff_ifd+$283*36)|0);
      var $285=(($284+24)|0);
      HEAP32[(($285)>>2)]=$282;
      __label__ = 315; break;
    case 65: // $286
      var $287=HEAP32[(($type)>>2)];
      var $288=_getint($287);
      var $289=($288) & 7;
      var $290=$ifd;
      var $291=((_tiff_ifd+$290*36)|0);
      var $292=(($291+28)|0);
      HEAP32[(($292)>>2)]=$289;
      __label__ = 315; break;
    case 66: // $293
      var $294=_get4();
      var $295=$ifd;
      var $296=((_tiff_ifd+$295*36)|0);
      var $297=(($296+32)|0);
      HEAP32[(($297)>>2)]=$294;
      __label__ = 315; break;
    case 67: // $298
      $c=0;
      __label__ = 68; break;
    case 68: // $299
      var $300=$c;
      var $301=((($300))|0) < 3;
      if ($301) { __label__ = 69; break; } else { __label__ = 71; break; }
    case 69: // $302
      var $303=HEAP32[(($type)>>2)];
      var $304=_getint($303);
      var $305=((($304))>>>0);
      var $306=$c;
      var $307=((4-($306))|0);
      var $308=((($307))|0)%3;
      var $309=((_cam_mul+($308<<2))|0);
      HEAPF32[(($309)>>2)]=$305;
      __label__ = 70; break;
    case 70: // $310
      var $311=$c;
      var $312=((($311)+1)|0);
      $c=$312;
      __label__ = 68; break;
    case 71: // $313
      __label__ = 315; break;
    case 72: // $314
      var $315=(($software)|0);
      var $316=HEAP32[((_ifp)>>2)];
      var $317=_fgets($315, 64, $316);
      var $318=(($software)|0);
      var $319=_strncmp($318, ((__str153)|0), 5);
      var $320=((($319))|0)!=0;
      if ($320) { __label__ = 73; break; } else { __label__ = 78; break; }
    case 73: // $321
      var $322=(($software)|0);
      var $323=_strncmp($322, ((__str154)|0), 5);
      var $324=((($323))|0)!=0;
      if ($324) { __label__ = 74; break; } else { __label__ = 78; break; }
    case 74: // $325
      var $326=(($software)|0);
      var $327=_strncmp($326, ((__str155)|0), 5);
      var $328=((($327))|0)!=0;
      if ($328) { __label__ = 75; break; } else { __label__ = 78; break; }
    case 75: // $329
      var $330=(($software)|0);
      var $331=_strncmp($330, ((__str156)|0), 6);
      var $332=((($331))|0)!=0;
      if ($332) { __label__ = 76; break; } else { __label__ = 78; break; }
    case 76: // $333
      var $334=(($software)|0);
      var $335=_strncmp($334, ((__str157)|0), 10);
      var $336=((($335))|0)!=0;
      if ($336) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: // $337
      var $338=(($software)|0);
      var $339=_strcmp($338, ((__str158)|0));
      var $340=((($339))|0)!=0;
      if ($340) { __label__ = 79; break; } else { __label__ = 78; break; }
    case 78: // $341
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 79; break;
    case 79: // $342
      __label__ = 315; break;
    case 80: // $343
      _get_timestamp(0);
      __label__ = 315; break;
    case 81: // $344
      var $345=HEAP32[((_ifp)>>2)];
      var $346=_fread(((_artist)|0), 64, 1, $345);
      __label__ = 315; break;
    case 82: // $347
      var $348=HEAP32[(($type)>>2)];
      var $349=_getint($348);
      HEAP32[((_tile_width)>>2)]=$349;
      __label__ = 315; break;
    case 83: // $350
      var $351=HEAP32[(($type)>>2)];
      var $352=_getint($351);
      HEAP32[((_tile_length)>>2)]=$352;
      __label__ = 315; break;
    case 84: // $353
      var $354=HEAPU32[(($len)>>2)];
      var $355=((($354))>>>0) > 1;
      if ($355) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: // $356
      var $357=HEAP32[((_ifp)>>2)];
      var $358=_ftell($357);
      var $362 = $358;__label__ = 87; break;
    case 86: // $359
      var $360=_get4();
      var $362 = $360;__label__ = 87; break;
    case 87: // $361
      var $362;
      var $363=$ifd;
      var $364=((_tiff_ifd+$363*36)|0);
      var $365=(($364+20)|0);
      HEAP32[(($365)>>2)]=$362;
      var $366=HEAP32[(($len)>>2)];
      var $367=((($366))|0)==4;
      if ($367) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: // $368
      HEAP32[((_load_raw)>>2)]=8;
      HEAP32[((_is_raw)>>2)]=5;
      __label__ = 89; break;
    case 89: // $369
      __label__ = 315; break;
    case 90: // $370
      var $371=_strcmp(((_model)|0), ((__str159)|0));
      var $372=((($371))|0)!=0;
      if ($372) { __label__ = 93; break; } else { __label__ = 91; break; }
    case 91: // $373
      var $374=$ifd;
      var $375=((_tiff_ifd+$374*36)|0);
      var $376=(($375)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=((($377))|0)==3872;
      if ($378) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: // $379
      HEAP32[((_load_raw)>>2)]=10;
      var $380=_get4();
      var $381=$2;
      var $382=((($380)+($381))|0);
      HEAP32[((_data_offset)>>2)]=$382;
      var $383=$ifd;
      var $384=((($383)+1)|0);
      $ifd=$384;
      __label__ = 315; break;
    case 93: // $385
      __label__ = 94; break;
    case 94: // $386
      var $387=HEAP32[(($len)>>2)];
      var $388=((($387)-1)|0);
      HEAP32[(($len)>>2)]=$388;
      var $389=((($387))|0)!=0;
      if ($389) { __label__ = 95; break; } else { __label__ = 98; break; }
    case 95: // $390
      var $391=HEAP32[((_ifp)>>2)];
      var $392=_ftell($391);
      $i=$392;
      var $393=HEAP32[((_ifp)>>2)];
      var $394=_get4();
      var $395=$2;
      var $396=((($394)+($395))|0);
      var $397=_fseek($393, $396, 0);
      var $398=$2;
      var $399=_parse_tiff_ifd($398);
      var $400=((($399))|0)!=0;
      if ($400) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: // $401
      __label__ = 98; break;
    case 97: // $402
      var $403=HEAP32[((_ifp)>>2)];
      var $404=$i;
      var $405=((($404)+4)|0);
      var $406=_fseek($403, $405, 0);
      __label__ = 94; break;
    case 98: // $407
      __label__ = 315; break;
    case 99: // $408
      var $409=_strcpy(((_make)|0), ((__str160)|0));
      HEAP32[((_maximum)>>2)]=4095;
      __label__ = 315; break;
    case 100: // $410
      $c=0;
      __label__ = 101; break;
    case 101: // $411
      var $412=$c;
      var $413=((($412))|0) < 4;
      if ($413) { __label__ = 102; break; } else { __label__ = 104; break; }
    case 102: // $414
      var $415=_get2();
      var $416=((($415))&65535);
      var $417=($416) >> 2;
      var $418=($417) & 4095;
      var $419=$c;
      var $420=((($419)+1)|0);
      var $421=(($sony_curve+($420<<2))|0);
      HEAP32[(($421)>>2)]=$418;
      __label__ = 103; break;
    case 103: // $422
      var $423=$c;
      var $424=((($423)+1)|0);
      $c=$424;
      __label__ = 101; break;
    case 104: // $425
      $i=0;
      __label__ = 105; break;
    case 105: // $426
      var $427=$i;
      var $428=((($427))|0) < 5;
      if ($428) { __label__ = 106; break; } else { __label__ = 112; break; }
    case 106: // $429
      var $430=$i;
      var $431=(($sony_curve+($430<<2))|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=((($432)+1)|0);
      $j=$433;
      __label__ = 107; break;
    case 107: // $434
      var $435=$j;
      var $436=$i;
      var $437=((($436)+1)|0);
      var $438=(($sony_curve+($437<<2))|0);
      var $439=HEAPU32[(($438)>>2)];
      var $440=((($435))>>>0) <= ((($439))>>>0);
      if ($440) { __label__ = 108; break; } else { __label__ = 110; break; }
    case 108: // $441
      var $442=$j;
      var $443=((($442)-1)|0);
      var $444=((_curve+($443<<1))|0);
      var $445=HEAPU16[(($444)>>1)];
      var $446=((($445))&65535);
      var $447=$i;
      var $448=1 << ($447);
      var $449=((($446)+($448))|0);
      var $450=((($449)) & 65535);
      var $451=$j;
      var $452=((_curve+($451<<1))|0);
      HEAP16[(($452)>>1)]=$450;
      __label__ = 109; break;
    case 109: // $453
      var $454=$j;
      var $455=((($454)+1)|0);
      $j=$455;
      __label__ = 107; break;
    case 110: // $456
      __label__ = 111; break;
    case 111: // $457
      var $458=$i;
      var $459=((($458)+1)|0);
      $i=$459;
      __label__ = 105; break;
    case 112: // $460
      __label__ = 315; break;
    case 113: // $461
      var $462=_get4();
      $sony_offset=$462;
      __label__ = 315; break;
    case 114: // $463
      var $464=_get4();
      $sony_length=$464;
      __label__ = 315; break;
    case 115: // $465
      var $466=_get4();
      $sony_key=$466;
      __label__ = 315; break;
    case 116: // $467
      var $468=HEAP32[((_ifp)>>2)];
      var $469=_ftell($468);
      _parse_minolta($469);
      HEAP16[((_raw_width)>>1)]=0;
      __label__ = 315; break;
    case 117: // $470
      $c=0;
      __label__ = 118; break;
    case 118: // $471
      var $472=$c;
      var $473=((($472))|0) < 4;
      if ($473) { __label__ = 119; break; } else { __label__ = 121; break; }
    case 119: // $474
      var $475=_get2();
      var $476=((($475))&65535);
      var $477=$c;
      var $478=$c;
      var $479=((($478))|0) < 2;
      var $480=((($479))&1);
      var $481=($477) ^ ($480);
      var $482=((_cam_mul+($481<<2))|0);
      HEAPF32[(($482)>>2)]=$476;
      __label__ = 120; break;
    case 120: // $483
      var $484=$c;
      var $485=((($484)+1)|0);
      $c=$485;
      __label__ = 118; break;
    case 121: // $486
      __label__ = 315; break;
    case 122: // $487
      $c=0;
      __label__ = 123; break;
    case 123: // $488
      var $489=$c;
      var $490=((($489))|0) < 4;
      if ($490) { __label__ = 124; break; } else { __label__ = 126; break; }
    case 124: // $491
      var $492=_get2();
      var $493=((($492))&65535);
      var $494=$c;
      var $495=((_cam_mul+($494<<2))|0);
      HEAPF32[(($495)>>2)]=$493;
      __label__ = 125; break;
    case 125: // $496
      var $497=$c;
      var $498=((($497)+1)|0);
      $c=$498;
      __label__ = 123; break;
    case 126: // $499
      var $500=HEAPF32[((((_cam_mul+4)|0))>>2)];
      var $501=($500) == 1024;
      if ($501) { __label__ = 127; break; } else { var $506 = 0;__label__ = 128; break; }
    case 127: // $502
      var $503=HEAPF32[((((_cam_mul+8)|0))>>2)];
      var $504=($503) == 1024;
      var $506 = $504;__label__ = 128; break;
    case 128: // $505
      var $506;
      var $507=((($506))&1);
      var $508=($507) << 1;
      $i=$508;
      var $509=$i;
      var $510=((_cam_mul+($509<<2))|0);
      var $511=HEAPF32[(($510)>>2)];
      var $512=$i;
      var $513=((($512)+1)|0);
      var $514=((_cam_mul+($513<<2))|0);
      var $515=HEAPF32[(($514)>>2)];
      var $516=($511)+($515);
      var $517=$i;
      var $518=((_cam_mul+($517<<2))|0);
      HEAPF32[(($518)>>2)]=$516;
      var $519=$i;
      var $520=((_cam_mul+($519<<2))|0);
      var $521=HEAPF32[(($520)>>2)];
      var $522=$i;
      var $523=((($522)+1)|0);
      var $524=((_cam_mul+($523<<2))|0);
      var $525=HEAPF32[(($524)>>2)];
      var $526=($521)-($525);
      var $527=$i;
      var $528=((($527)+1)|0);
      var $529=((_cam_mul+($528<<2))|0);
      HEAPF32[(($529)>>2)]=$526;
      var $530=$i;
      var $531=((_cam_mul+($530<<2))|0);
      var $532=HEAPF32[(($531)>>2)];
      var $533=$i;
      var $534=((($533)+1)|0);
      var $535=((_cam_mul+($534<<2))|0);
      var $536=HEAPF32[(($535)>>2)];
      var $537=($532)-($536);
      var $538=$i;
      var $539=((_cam_mul+($538<<2))|0);
      HEAPF32[(($539)>>2)]=$537;
      __label__ = 315; break;
    case 129: // $540
      var $541=HEAP32[((_ifp)>>2)];
      var $542=_fgets(((_model2)|0), 64, $541);
      __label__ = 315; break;
    case 130: // $543
      var $544=HEAPU32[(($len)>>2)];
      $plen=$544;
      var $545=((($544))>>>0) > 16;
      if ($545) { __label__ = 131; break; } else { __label__ = 132; break; }
    case 131: // $546
      $plen=16;
      __label__ = 132; break;
    case 132: // $547
      var $548=(($cfa_pat)|0);
      var $549=$plen;
      var $550=HEAP32[((_ifp)>>2)];
      var $551=_fread($548, 1, $549, $550);
      $i=0;
      $cfa=0;
      HEAP32[((_colors)>>2)]=0;
      __label__ = 133; break;
    case 133: // $552
      var $553=$i;
      var $554=$plen;
      var $555=((($553))>>>0) < ((($554))>>>0);
      if ($555) { __label__ = 134; break; } else { __label__ = 136; break; }
    case 134: // $556
      var $557=$cfa;
      var $558=$i;
      var $559=(($cfa_pat+$558)|0);
      var $560=HEAPU8[($559)];
      var $561=((($560))&255);
      var $562=1 << ($561);
      var $563=($557) & ($562);
      var $564=((($563))|0)!=0;
      var $565=($564) ^ 1;
      var $566=((($565))&1);
      var $567=HEAP32[((_colors)>>2)];
      var $568=((($567)+($566))|0);
      HEAP32[((_colors)>>2)]=$568;
      var $569=$i;
      var $570=(($cfa_pat+$569)|0);
      var $571=HEAPU8[($570)];
      var $572=((($571))&255);
      var $573=1 << ($572);
      var $574=$cfa;
      var $575=($574) | ($573);
      $cfa=$575;
      __label__ = 135; break;
    case 135: // $576
      var $577=$i;
      var $578=((($577)+1)|0);
      $i=$578;
      __label__ = 133; break;
    case 136: // $579
      var $580=$cfa;
      var $581=((($580))|0)==56;
      if ($581) { __label__ = 137; break; } else { __label__ = 138; break; }
    case 137: // $582
      var $583=(($cfa_pc)|0);
      assert(3 % 1 === 0, 'memcpy given ' + 3 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($583)]=HEAP8[(((__str161)|0))]; HEAP8[($583+1)]=HEAP8[(((__str161)|0)+1)]; HEAP8[($583+2)]=HEAP8[(((__str161)|0)+2)];
      __label__ = 138; break;
    case 138: // $584
      var $585=$cfa;
      var $586=((($585))|0)==58;
      if ($586) { __label__ = 139; break; } else { __label__ = 140; break; }
    case 139: // $587
      var $588=(($cfa_pc)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($588)]=HEAP8[(((__str162)|0))]; HEAP8[($588+1)]=HEAP8[(((__str162)|0)+1)]; HEAP8[($588+2)]=HEAP8[(((__str162)|0)+2)]; HEAP8[($588+3)]=HEAP8[(((__str162)|0)+3)];
      __label__ = 140; break;
    case 140: // $589
      __label__ = 230; break;
    case 141: // $590
      var $591=HEAP32[((_ifp)>>2)];
      var $592=_get4();
      var $593=$2;
      var $594=((($592)+($593))|0);
      var $595=_fseek($591, $594, 0);
      var $596=$2;
      _parse_kodak_ifd($596);
      __label__ = 315; break;
    case 142: // $597
      var $598=HEAP32[(($type)>>2)];
      var $599=_getreal($598);
      var $600=($599);
      HEAPF32[((_shutter)>>2)]=$600;
      __label__ = 315; break;
    case 143: // $601
      var $602=HEAP32[(($type)>>2)];
      var $603=_getreal($602);
      var $604=($603);
      HEAPF32[((_aperture)>>2)]=$604;
      __label__ = 315; break;
    case 144: // $605
      $c=0;
      __label__ = 145; break;
    case 145: // $606
      var $607=$c;
      var $608=((($607))|0) < 4;
      if ($608) { __label__ = 146; break; } else { __label__ = 148; break; }
    case 146: // $609
      var $610=_get2();
      var $611=((($610))&65535);
      var $612=((($611))|0);
      var $613=4096/($612);
      var $614=($613);
      var $615=$c;
      var $616=($615) ^ 1;
      var $617=((_cam_mul+($616<<2))|0);
      HEAPF32[(($617)>>2)]=$614;
      __label__ = 147; break;
    case 147: // $618
      var $619=$c;
      var $620=((($619)+1)|0);
      $c=$620;
      __label__ = 145; break;
    case 148: // $621
      __label__ = 315; break;
    case 149: // $622
      var $623=(($software)|0);
      var $624=HEAP32[((_ifp)>>2)];
      var $625=_fread($623, 1, 7, $624);
      var $626=(($software)|0);
      var $627=_strncmp($626, ((__str163)|0), 6);
      var $628=((($627))|0)!=0;
      if ($628) { __label__ = 150; break; } else { __label__ = 151; break; }
    case 150: // $629
      __label__ = 315; break;
    case 151: // $630
      HEAP32[((_colors)>>2)]=4;
      $i=0;
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 152; break;
    case 152: // $631
      var $632=$i;
      var $633=((($632))|0) < 3;
      if ($633) { __label__ = 153; break; } else { __label__ = 169; break; }
    case 153: // $634
      $c=0;
      __label__ = 154; break;
    case 154: // $635
      var $636=$c;
      var $637=((($636))|0) < 4;
      if ($637) { __label__ = 155; break; } else { __label__ = 157; break; }
    case 155: // $638
      var $639=HEAP32[((_ifp)>>2)];
      var $640=$c;
      var $641=($640) ^ 1;
      var $642=$i;
      var $643=((_rgb_cam+($642<<4))|0);
      var $644=(($643+($641<<2))|0);
      var $645=_fscanf($639, ((__str144)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$644,tempInt));
      __label__ = 156; break;
    case 156: // $646
      var $647=$c;
      var $648=((($647)+1)|0);
      $c=$648;
      __label__ = 154; break;
    case 157: // $649
      var $650=HEAP32[((_use_camera_wb)>>2)];
      var $651=((($650))|0)!=0;
      if ($651) { __label__ = 159; break; } else { __label__ = 158; break; }
    case 158: // $652
      __label__ = 168; break;
    case 159: // $653
      $num=0;
      $c=0;
      __label__ = 160; break;
    case 160: // $654
      var $655=$c;
      var $656=((($655))|0) < 4;
      if ($656) { __label__ = 161; break; } else { __label__ = 163; break; }
    case 161: // $657
      var $658=$c;
      var $659=$i;
      var $660=((_rgb_cam+($659<<4))|0);
      var $661=(($660+($658<<2))|0);
      var $662=HEAPF32[(($661)>>2)];
      var $663=($662);
      var $664=$num;
      var $665=($664)+($663);
      $num=$665;
      __label__ = 162; break;
    case 162: // $666
      var $667=$c;
      var $668=((($667)+1)|0);
      $c=$668;
      __label__ = 160; break;
    case 163: // $669
      $c=0;
      __label__ = 164; break;
    case 164: // $670
      var $671=$c;
      var $672=((($671))|0) < 4;
      if ($672) { __label__ = 165; break; } else { __label__ = 167; break; }
    case 165: // $673
      var $674=$num;
      var $675=$c;
      var $676=$i;
      var $677=((_rgb_cam+($676<<4))|0);
      var $678=(($677+($675<<2))|0);
      var $679=HEAPF32[(($678)>>2)];
      var $680=($679);
      var $681=($680)/($674);
      var $682=($681);
      HEAPF32[(($678)>>2)]=$682;
      __label__ = 166; break;
    case 166: // $683
      var $684=$c;
      var $685=((($684)+1)|0);
      $c=$685;
      __label__ = 164; break;
    case 167: // $686
      __label__ = 168; break;
    case 168: // $687
      var $688=$i;
      var $689=((($688)+1)|0);
      $i=$689;
      __label__ = 152; break;
    case 169: // $690
      __label__ = 315; break;
    case 170: // $691
      var $692=HEAP32[((_ifp)>>2)];
      var $693=_ftell($692);
      _parse_mos($693);
      __label__ = 171; break;
    case 171: // $694
      var $695=_strcpy(((_make)|0), ((__str164)|0));
      __label__ = 315; break;
    case 172: // $696
      var $697=HEAP32[((_ifp)>>2)];
      var $698=_get4();
      var $699=$2;
      var $700=((($698)+($699))|0);
      var $701=_fseek($697, $700, 0);
      var $702=$2;
      _parse_exif($702);
      __label__ = 315; break;
    case 173: // $703
      var $704=HEAP32[((_ifp)>>2)];
      var $705=_get4();
      var $706=$2;
      var $707=((($705)+($706))|0);
      var $708=_fseek($704, $707, 0);
      var $709=$2;
      _parse_gps($709);
      __label__ = 315; break;
    case 174: // $710
      var $711=HEAP32[((_ifp)>>2)];
      var $712=_ftell($711);
      HEAP32[((_profile_offset)>>2)]=$712;
      var $713=HEAP32[(($len)>>2)];
      HEAP32[((_profile_length)>>2)]=$713;
      __label__ = 315; break;
    case 175: // $714
      var $715=_get4();
      HEAP32[((_kodak_cbpp)>>2)]=$715;
      __label__ = 315; break;
    case 176: // $716
      var $717=HEAP32[(($type)>>2)];
      var $718=_getreal($717);
      var $719=($718);
      HEAPF32[((_focal_len)>>2)]=$719;
      __label__ = 315; break;
    case 177: // $720
      var $721=HEAP32[(($type)>>2)];
      var $722=_getint($721);
      HEAP32[((_shot_order)>>2)]=$722;
      __label__ = 315; break;
    case 178: // $723
      $i=0;
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 179; break;
    case 179: // $724
      var $725=$i;
      var $726=((($725))|0) < 3;
      if ($726) { __label__ = 180; break; } else { __label__ = 186; break; }
    case 180: // $727
      var $728=HEAP32[(($type)>>2)];
      var $729=_getreal($728);
      $c=0;
      __label__ = 181; break;
    case 181: // $730
      var $731=$c;
      var $732=((($731))|0) < 3;
      if ($732) { __label__ = 182; break; } else { __label__ = 184; break; }
    case 182: // $733
      var $734=HEAP32[(($type)>>2)];
      var $735=_getreal($734);
      var $736=($735);
      var $737=$c;
      var $738=$i;
      var $739=((_rgb_cam+($738<<4))|0);
      var $740=(($739+($737<<2))|0);
      HEAPF32[(($740)>>2)]=$736;
      __label__ = 183; break;
    case 183: // $741
      var $742=$c;
      var $743=((($742)+1)|0);
      $c=$743;
      __label__ = 181; break;
    case 184: // $744
      __label__ = 185; break;
    case 185: // $745
      var $746=$i;
      var $747=((($746)+1)|0);
      $i=$747;
      __label__ = 179; break;
    case 186: // $748
      __label__ = 315; break;
    case 187: // $749
      var $750=_strcpy(((_make)|0), ((__str165)|0));
      var $751=HEAP32[((_ifp)>>2)];
      var $752=_ftell($751);
      HEAP32[((_data_offset)>>2)]=$752;
      var $753=HEAP32[(($len)>>2)];
      $ima_len=$753;
      __label__ = 315; break;
    case 188: // $754
      var $755=$ima_len;
      var $756=((($755))|0)!=0;
      if ($756) { __label__ = 190; break; } else { __label__ = 189; break; }
    case 189: // $757
      __label__ = 315; break;
    case 190: // $758
      var $759=HEAP32[((_ifp)>>2)];
      var $760=_fseek($759, 78, 1);
      var $761=_get4();
      var $762=((($761)) & 65535);
      HEAP16[((_raw_width)>>1)]=$762;
      var $763=_get4();
      var $764=((($763)) & 65535);
      HEAP16[((_raw_height)>>1)]=$764;
      var $765=_get4();
      var $766=($765) & 7;
      var $767=((($766)) & 65535);
      HEAP16[((_left_margin)>>1)]=$767;
      var $768=HEAPU16[((_raw_width)>>1)];
      var $769=((($768))&65535);
      var $770=HEAPU16[((_left_margin)>>1)];
      var $771=((($770))&65535);
      var $772=((($769)-($771))|0);
      var $773=_get4();
      var $774=($773) & 7;
      var $775=((($772)-($774))|0);
      var $776=((($775)) & 65535);
      HEAP16[((_width)>>1)]=$776;
      var $777=_get4();
      var $778=($777) & 7;
      var $779=((($778)) & 65535);
      HEAP16[((_top_margin)>>1)]=$779;
      var $780=HEAPU16[((_raw_height)>>1)];
      var $781=((($780))&65535);
      var $782=HEAPU16[((_top_margin)>>1)];
      var $783=((($782))&65535);
      var $784=((($781)-($783))|0);
      var $785=_get4();
      var $786=($785) & 7;
      var $787=((($784)-($786))|0);
      var $788=((($787)) & 65535);
      HEAP16[((_height)>>1)]=$788;
      var $789=HEAPU16[((_raw_width)>>1)];
      var $790=((($789))&65535);
      var $791=((($790))|0)==7262;
      if ($791) { __label__ = 191; break; } else { __label__ = 192; break; }
    case 191: // $792
      HEAP16[((_height)>>1)]=5444;
      HEAP16[((_width)>>1)]=7244;
      HEAP16[((_left_margin)>>1)]=7;
      __label__ = 192; break;
    case 192: // $793
      var $794=HEAP32[((_ifp)>>2)];
      var $795=_fseek($794, 52, 1);
      $c=0;
      __label__ = 193; break;
    case 193: // $796
      var $797=$c;
      var $798=((($797))|0) < 3;
      if ($798) { __label__ = 194; break; } else { __label__ = 196; break; }
    case 194: // $799
      var $800=_getreal(11);
      var $801=($800);
      var $802=$c;
      var $803=((_cam_mul+($802<<2))|0);
      HEAPF32[(($803)>>2)]=$801;
      __label__ = 195; break;
    case 195: // $804
      var $805=$c;
      var $806=((($805)+1)|0);
      $c=$806;
      __label__ = 193; break;
    case 196: // $807
      var $808=HEAP32[((_ifp)>>2)];
      var $809=_fseek($808, 114, 1);
      var $810=_get2();
      var $811=((($810))&65535);
      var $812=($811) >> 7;
      var $813=((($812)*90)|0);
      HEAP32[((_flip)>>2)]=$813;
      var $814=HEAPU16[((_width)>>1)];
      var $815=((($814))&65535);
      var $816=HEAPU16[((_height)>>1)];
      var $817=((($816))&65535);
      var $818=((($815)*($817))|0);
      var $819=((($818)*6)|0);
      var $820=$ima_len;
      var $821=((($819))|0)==((($820))|0);
      if ($821) { __label__ = 197; break; } else { __label__ = 200; break; }
    case 197: // $822
      var $823=HEAP32[((_flip)>>2)];
      var $824=((($823))|0)%180;
      var $825=((($824))|0)==90;
      if ($825) { __label__ = 198; break; } else { __label__ = 199; break; }
    case 198: // $826
      var $827=HEAPU16[((_width)>>1)];
      var $828=((($827))&65535);
      var $829=HEAPU16[((_height)>>1)];
      var $830=((($829))&65535);
      var $831=((($828)+($830))|0);
      var $832=((($831)) & 65535);
      HEAP16[((_width)>>1)]=$832;
      var $833=HEAPU16[((_width)>>1)];
      var $834=((($833))&65535);
      var $835=HEAPU16[((_height)>>1)];
      var $836=((($835))&65535);
      var $837=((($834)-($836))|0);
      var $838=((($837)) & 65535);
      HEAP16[((_height)>>1)]=$838;
      var $839=HEAPU16[((_width)>>1)];
      var $840=((($839))&65535);
      var $841=HEAPU16[((_height)>>1)];
      var $842=((($841))&65535);
      var $843=((($840)-($842))|0);
      var $844=((($843)) & 65535);
      HEAP16[((_width)>>1)]=$844;
      __label__ = 199; break;
    case 199: // $845
      HEAP32[((_flip)>>2)]=0;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 200; break;
    case 200: // $846
      var $847=HEAPU16[((_height)>>1)];
      var $848=((($847))&65535);
      var $849=HEAPU16[((_width)>>1)];
      var $850=((($849))&65535);
      var $851=((($848)*($850))|0);
      var $852=((((($851))|0)/1000000)|0);
      var $853=_sprintf(((_model)|0), ((__str166)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$852,tempInt));
      HEAP32[((_load_raw)>>2)]=12;
      var $854=HEAP32[((_filters)>>2)];
      var $855=((($854))|0)!=0;
      if ($855) { __label__ = 201; break; } else { __label__ = 204; break; }
    case 201: // $856
      var $857=HEAPU16[((_left_margin)>>1)];
      var $858=((($857))&65535);
      var $859=($858) & 1;
      var $860=((($859))|0)!=0;
      if ($860) { __label__ = 202; break; } else { __label__ = 203; break; }
    case 202: // $861
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 203; break;
    case 203: // $862
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 204; break;
    case 204: // $863
      HEAP32[((_maximum)>>2)]=65535;
      __label__ = 315; break;
    case 205: // $864
      var $865=HEAP32[(($len)>>2)];
      var $866=_malloc($865);
      $cbuf=$866;
      var $867=((($866))|0)!=0;
      if ($867) { __label__ = 207; break; } else { __label__ = 206; break; }
    case 206: // $868
      __label__ = 315; break;
    case 207: // $869
      var $870=$cbuf;
      var $871=HEAP32[(($len)>>2)];
      var $872=HEAP32[((_ifp)>>2)];
      var $873=_fread($870, 1, $871, $872);
      var $874=$cbuf;
      var $875=(($874-1)|0);
      $cp=$875;
      __label__ = 208; break;
    case 208: // $876
      var $877=$cp;
      var $878=((($877))|0)!=0;
      if ($878) { __label__ = 209; break; } else { var $886 = 0;__label__ = 210; break; }
    case 209: // $879
      var $880=$cp;
      var $881=$cbuf;
      var $882=HEAP32[(($len)>>2)];
      var $883=(($881+$882)|0);
      var $884=((($880))>>>0) < ((($883))>>>0);
      var $886 = $884;__label__ = 210; break;
    case 210: // $885
      var $886;
      if ($886) { __label__ = 211; break; } else { __label__ = 215; break; }
    case 211: // $887
      var $888=$cp;
      var $889=(($888+1)|0);
      $cp=$889;
      var $890=_strncmp($889, ((__str167)|0), 8);
      var $891=((($890))|0)!=0;
      if ($891) { __label__ = 213; break; } else { __label__ = 212; break; }
    case 212: // $892
      var $893=$cp;
      var $894=(($893+8)|0);
      var $895=_sscanf($894, ((__str168)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_cam_mul)|0),HEAP32[((tempInt+4)>>2)]=((_cam_mul+4)|0),HEAP32[((tempInt+8)>>2)]=((_cam_mul+8)|0),tempInt));
      __label__ = 213; break;
    case 213: // $896
      __label__ = 214; break;
    case 214: // $897
      var $898=$cp;
      var $899=_strchr($898, 10);
      $cp=$899;
      __label__ = 208; break;
    case 215: // $900
      var $901=$cbuf;
      _free($901);
      __label__ = 315; break;
    case 216: // $902
      var $903=HEAP8[(((_make)|0))];
      var $904=((($903) << 24) >> 24)!=0;
      if ($904) { __label__ = 218; break; } else { __label__ = 217; break; }
    case 217: // $905
      var $906=_strcpy(((_make)|0), ((__str169)|0));
      __label__ = 218; break;
    case 218: // $907
      __label__ = 315; break;
    case 219: // $908
      var $909=HEAP16[((_order)>>1)];
      var $910=((($909) << 16) >> 16);
      $i=$910;
      var $911=HEAP32[((_ifp)>>2)];
      var $912=_ftell($911);
      $j=$912;
      var $913=HEAP32[((_tiff_nifds)>>2)];
      $c=$913;
      var $914=_get2();
      HEAP16[((_order)>>1)]=$914;
      var $915=HEAP32[((_ifp)>>2)];
      var $916=$j;
      var $917=_get2();
      var $918=_get4();
      var $919=((($916)+($918))|0);
      var $920=_fseek($915, $919, 0);
      var $921=$j;
      var $922=_parse_tiff_ifd($921);
      HEAP32[((_maximum)>>2)]=65535;
      var $923=$c;
      HEAP32[((_tiff_nifds)>>2)]=$923;
      var $924=$i;
      var $925=((($924)) & 65535);
      HEAP16[((_order)>>1)]=$925;
      __label__ = 315; break;
    case 220: // $926
      $c=0;
      __label__ = 221; break;
    case 221: // $927
      var $928=$c;
      var $929=((($928))|0) < 4;
      if ($929) { __label__ = 222; break; } else { __label__ = 224; break; }
    case 222: // $930
      var $931=HEAP32[((_dng_version)>>2)];
      var $932=($931) << 8;
      var $933=HEAP32[((_ifp)>>2)];
      var $934=_getc_unlocked($933);
      var $935=((($932)+($934))|0);
      HEAP32[((_dng_version)>>2)]=$935;
      __label__ = 223; break;
    case 223: // $936
      var $937=$c;
      var $938=((($937)+1)|0);
      $c=$938;
      __label__ = 221; break;
    case 224: // $939
      var $940=HEAP8[(((_make)|0))];
      var $941=((($940) << 24) >> 24)!=0;
      if ($941) { __label__ = 226; break; } else { __label__ = 225; break; }
    case 225: // $942
      var $943=_strcpy(((_make)|0), ((__str170)|0));
      __label__ = 226; break;
    case 226: // $944
      HEAP32[((_is_raw)>>2)]=1;
      __label__ = 315; break;
    case 227: // $945
      var $946=HEAPU32[(($len)>>2)];
      var $947=((($946))>>>0) > 4;
      if ($947) { __label__ = 228; break; } else { __label__ = 229; break; }
    case 228: // $948
      HEAP32[(($len)>>2)]=4;
      __label__ = 229; break;
    case 229: // $949
      var $950=HEAP32[(($len)>>2)];
      HEAP32[((_colors)>>2)]=$950;
      var $951=(($cfa_pc)|0);
      var $952=HEAP32[((_colors)>>2)];
      var $953=HEAP32[((_ifp)>>2)];
      var $954=_fread($951, 1, $952, $953);
      __label__ = 230; break;
    case 230: // $955
      $c=0;
      __label__ = 231; break;
    case 231: // $956
      var $957=$c;
      var $958=HEAP32[((_colors)>>2)];
      var $959=((($957))|0) < ((($958))|0);
      if ($959) { __label__ = 232; break; } else { __label__ = 234; break; }
    case 232: // $960
      var $961=$c;
      var $962=((($961)) & 255);
      var $963=$c;
      var $964=(($cfa_pc+$963)|0);
      var $965=HEAPU8[($964)];
      var $966=((($965))&255);
      var $967=(($tab+$966)|0);
      HEAP8[($967)]=$962;
      __label__ = 233; break;
    case 233: // $968
      var $969=$c;
      var $970=((($969)+1)|0);
      $c=$970;
      __label__ = 231; break;
    case 234: // $971
      var $972=$c;
      var $973=((_cdesc+$972)|0);
      HEAP8[($973)]=0;
      $i=16;
      __label__ = 235; break;
    case 235: // $974
      var $975=$i;
      var $976=((($975)-1)|0);
      $i=$976;
      var $977=((($975))|0)!=0;
      if ($977) { __label__ = 236; break; } else { __label__ = 237; break; }
    case 236: // $978
      var $979=HEAP32[((_filters)>>2)];
      var $980=($979) << 2;
      var $981=$i;
      var $982=$plen;
      var $983=((($981))>>>0)%((($982))>>>0);
      var $984=(($cfa_pat+$983)|0);
      var $985=HEAPU8[($984)];
      var $986=((($985))&255);
      var $987=(($tab+$986)|0);
      var $988=HEAPU8[($987)];
      var $989=((($988))&255);
      var $990=($980) | ($989);
      HEAP32[((_filters)>>2)]=$990;
      __label__ = 235; break;
    case 237: // $991
      __label__ = 315; break;
    case 238: // $992
      var $993=_get2();
      var $994=((($993))&65535);
      var $995=((($994))|0)==2;
      if ($995) { __label__ = 239; break; } else { __label__ = 240; break; }
    case 239: // $996
      HEAP16[((_fuji_width)>>1)]=1;
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 240; break;
    case 240: // $997
      __label__ = 315; break;
    case 241: // $998
      var $999=HEAP32[(($len)>>2)];
      _linear_table($999);
      __label__ = 315; break;
    case 242: // $1000
      var $1001=_get2();
      var $1002=((($1001))&65535);
      $blrr=$1002;
      var $1003=_get2();
      var $1004=((($1003))&65535);
      $blrc=$1004;
      __label__ = 315; break;
    case 243: // $1005
      $blrc=2;
      $blrr=2;
      __label__ = 244; break;
    case 244: // $1006
      var $1007=HEAP32[(($type)>>2)];
      var $1008=_getreal($1007);
      var $1009=(($1008) >= 0 ? Math.floor(($1008)) : Math.ceil(($1008)));
      HEAP32[((_black)>>2)]=$1009;
      var $1010=HEAP32[((_filters)>>2)];
      var $1011=((($1010))|0)!=0;
      if ($1011) { __label__ = 245; break; } else { __label__ = 246; break; }
    case 245: // $1012
      var $1013=HEAP32[((_filters)>>2)];
      var $1014=($1013) ^ -1;
      var $1015=((($1014))|0)!=0;
      if ($1015) { __label__ = 247; break; } else { __label__ = 246; break; }
    case 246: // $1016
      __label__ = 315; break;
    case 247: // $1017
      var $1018=HEAP32[((_black)>>2)];
      var $1019=(($dblack)|0);
      HEAP32[(($1019)>>2)]=$1018;
      var $1020=$blrc;
      var $1021=((($1020))|0)==2;
      if ($1021) { __label__ = 248; break; } else { __label__ = 249; break; }
    case 248: // $1022
      var $1023=HEAP32[(($type)>>2)];
      var $1024=_getreal($1023);
      var $1030 = $1024;__label__ = 250; break;
    case 249: // $1025
      var $1026=(($dblack)|0);
      var $1027=HEAP32[(($1026)>>2)];
      var $1028=((($1027))|0);
      var $1030 = $1028;__label__ = 250; break;
    case 250: // $1029
      var $1030;
      var $1031=((($1030))|0);
      var $1032=(($dblack+4)|0);
      HEAP32[(($1032)>>2)]=$1031;
      var $1033=$blrr;
      var $1034=((($1033))|0)==2;
      if ($1034) { __label__ = 251; break; } else { __label__ = 252; break; }
    case 251: // $1035
      var $1036=HEAP32[(($type)>>2)];
      var $1037=_getreal($1036);
      var $1043 = $1037;__label__ = 253; break;
    case 252: // $1038
      var $1039=(($dblack)|0);
      var $1040=HEAP32[(($1039)>>2)];
      var $1041=((($1040))|0);
      var $1043 = $1041;__label__ = 253; break;
    case 253: // $1042
      var $1043;
      var $1044=((($1043))|0);
      var $1045=(($dblack+8)|0);
      HEAP32[(($1045)>>2)]=$1044;
      var $1046=$blrc;
      var $1047=((($1046))|0)==2;
      if ($1047) { __label__ = 254; break; } else { __label__ = 256; break; }
    case 254: // $1048
      var $1049=$blrr;
      var $1050=((($1049))|0)==2;
      if ($1050) { __label__ = 255; break; } else { __label__ = 256; break; }
    case 255: // $1051
      var $1052=HEAP32[(($type)>>2)];
      var $1053=_getreal($1052);
      var $1059 = $1053;__label__ = 257; break;
    case 256: // $1054
      var $1055=(($dblack+4)|0);
      var $1056=HEAP32[(($1055)>>2)];
      var $1057=((($1056))|0);
      var $1059 = $1057;__label__ = 257; break;
    case 257: // $1058
      var $1059;
      var $1060=((($1059))|0);
      var $1061=(($dblack+12)|0);
      HEAP32[(($1061)>>2)]=$1060;
      var $1062=HEAP32[((_colors)>>2)];
      var $1063=((($1062))|0)==3;
      if ($1063) { __label__ = 258; break; } else { __label__ = 259; break; }
    case 258: // $1064
      var $1065=HEAPU32[((_filters)>>2)];
      var $1066=($1065) >>> 2;
      var $1067=($1066) & 572662306;
      var $1068=HEAP32[((_filters)>>2)];
      var $1069=($1068) << 2;
      var $1070=($1069) & -2004318072;
      var $1071=($1067) | ($1070);
      var $1072=HEAP32[((_filters)>>2)];
      var $1073=($1072) << 1;
      var $1074=($1071) & ($1073);
      var $1075=HEAP32[((_filters)>>2)];
      var $1076=($1075) | ($1074);
      HEAP32[((_filters)>>2)]=$1076;
      __label__ = 259; break;
    case 259: // $1077
      $c=0;
      __label__ = 260; break;
    case 260: // $1078
      var $1079=$c;
      var $1080=((($1079))|0) < 4;
      if ($1080) { __label__ = 261; break; } else { __label__ = 263; break; }
    case 261: // $1081
      var $1082=$c;
      var $1083=(($dblack+($1082<<2))|0);
      var $1084=HEAP32[(($1083)>>2)];
      var $1085=HEAPU32[((_filters)>>2)];
      var $1086=$c;
      var $1087=($1086) << 1;
      var $1088=($1085) >>> ((($1087))>>>0);
      var $1089=($1088) & 3;
      var $1090=((_cblack+($1089<<2))|0);
      HEAP32[(($1090)>>2)]=$1084;
      __label__ = 262; break;
    case 262: // $1091
      var $1092=$c;
      var $1093=((($1092)+1)|0);
      $c=$1093;
      __label__ = 260; break;
    case 263: // $1094
      HEAP32[((_black)>>2)]=0;
      __label__ = 315; break;
    case 264: // $1095
      $i=0;
      $num=0;
      __label__ = 265; break;
    case 265: // $1096
      var $1097=$i;
      var $1098=HEAPU32[(($len)>>2)];
      var $1099=((($1097))>>>0) < ((($1098))>>>0);
      if ($1099) { __label__ = 266; break; } else { __label__ = 268; break; }
    case 266: // $1100
      var $1101=HEAP32[(($type)>>2)];
      var $1102=_getreal($1101);
      var $1103=$num;
      var $1104=($1103)+($1102);
      $num=$1104;
      __label__ = 267; break;
    case 267: // $1105
      var $1106=$i;
      var $1107=((($1106)+1)|0);
      $i=$1107;
      __label__ = 265; break;
    case 268: // $1108
      var $1109=$num;
      var $1110=HEAPU32[(($len)>>2)];
      var $1111=((($1110))>>>0);
      var $1112=($1109)/($1111);
      var $1113=($1112)+0.5;
      var $1114=HEAPU32[((_black)>>2)];
      var $1115=((($1114))>>>0);
      var $1116=($1115)+($1113);
      var $1117=(($1116) >= 0 ? Math.floor(($1116)) : Math.ceil(($1116)));
      HEAP32[((_black)>>2)]=$1117;
      __label__ = 315; break;
    case 269: // $1118
      var $1119=HEAP32[(($type)>>2)];
      var $1120=_getint($1119);
      HEAP32[((_maximum)>>2)]=$1120;
      __label__ = 315; break;
    case 270: // $1121
      var $1122=HEAP32[(($type)>>2)];
      var $1123=_getreal($1122);
      (tempDoubleF64[0]=$1123,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      var $1124=HEAP32[(($type)>>2)];
      var $1125=_getreal($1124);
      var $1126=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $1127=($1126)/($1125);
      (tempDoubleF64[0]=$1127,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 315; break;
    case 271: // $1128
      $c=0;
      __label__ = 272; break;
    case 272: // $1129
      var $1130=$c;
      var $1131=HEAP32[((_colors)>>2)];
      var $1132=((($1130))|0) < ((($1131))|0);
      if ($1132) { __label__ = 273; break; } else { __label__ = 279; break; }
    case 273: // $1133
      $j=0;
      __label__ = 274; break;
    case 274: // $1134
      var $1135=$j;
      var $1136=((($1135))|0) < 3;
      if ($1136) { __label__ = 275; break; } else { __label__ = 277; break; }
    case 275: // $1137
      var $1138=HEAP32[(($type)>>2)];
      var $1139=_getreal($1138);
      var $1140=$j;
      var $1141=$c;
      var $1142=(($cm+$1141*24)|0);
      var $1143=(($1142+($1140<<3))|0);
      (tempDoubleF64[0]=$1139,HEAP32[(($1143)>>2)]=tempDoubleI32[0],HEAP32[(($1143+4)>>2)]=tempDoubleI32[1]);
      __label__ = 276; break;
    case 276: // $1144
      var $1145=$j;
      var $1146=((($1145)+1)|0);
      $j=$1146;
      __label__ = 274; break;
    case 277: // $1147
      __label__ = 278; break;
    case 278: // $1148
      var $1149=$c;
      var $1150=((($1149)+1)|0);
      $c=$1150;
      __label__ = 272; break;
    case 279: // $1151
      $use_cm=1;
      __label__ = 315; break;
    case 280: // $1152
      $i=0;
      __label__ = 281; break;
    case 281: // $1153
      var $1154=$i;
      var $1155=HEAP32[((_colors)>>2)];
      var $1156=((($1154))|0) < ((($1155))|0);
      if ($1156) { __label__ = 282; break; } else { __label__ = 288; break; }
    case 282: // $1157
      $c=0;
      __label__ = 283; break;
    case 283: // $1158
      var $1159=$c;
      var $1160=HEAP32[((_colors)>>2)];
      var $1161=((($1159))|0) < ((($1160))|0);
      if ($1161) { __label__ = 284; break; } else { __label__ = 286; break; }
    case 284: // $1162
      var $1163=HEAP32[(($type)>>2)];
      var $1164=_getreal($1163);
      var $1165=$c;
      var $1166=$i;
      var $1167=(($cc+($1166<<5))|0);
      var $1168=(($1167+($1165<<3))|0);
      (tempDoubleF64[0]=$1164,HEAP32[(($1168)>>2)]=tempDoubleI32[0],HEAP32[(($1168+4)>>2)]=tempDoubleI32[1]);
      __label__ = 285; break;
    case 285: // $1169
      var $1170=$c;
      var $1171=((($1170)+1)|0);
      $c=$1171;
      __label__ = 283; break;
    case 286: // $1172
      __label__ = 287; break;
    case 287: // $1173
      var $1174=$i;
      var $1175=((($1174)+1)|0);
      $i=$1175;
      __label__ = 281; break;
    case 288: // $1176
      __label__ = 315; break;
    case 289: // $1177
      $c=0;
      __label__ = 290; break;
    case 290: // $1178
      var $1179=$c;
      var $1180=HEAP32[((_colors)>>2)];
      var $1181=((($1179))|0) < ((($1180))|0);
      if ($1181) { __label__ = 291; break; } else { __label__ = 293; break; }
    case 291: // $1182
      var $1183=HEAP32[(($type)>>2)];
      var $1184=_getreal($1183);
      var $1185=$c;
      var $1186=(($ab+($1185<<3))|0);
      (tempDoubleF64[0]=$1184,HEAP32[(($1186)>>2)]=tempDoubleI32[0],HEAP32[(($1186+4)>>2)]=tempDoubleI32[1]);
      __label__ = 292; break;
    case 292: // $1187
      var $1188=$c;
      var $1189=((($1188)+1)|0);
      $c=$1189;
      __label__ = 290; break;
    case 293: // $1190
      __label__ = 315; break;
    case 294: // $1191
      $c=0;
      __label__ = 295; break;
    case 295: // $1192
      var $1193=$c;
      var $1194=HEAP32[((_colors)>>2)];
      var $1195=((($1193))|0) < ((($1194))|0);
      if ($1195) { __label__ = 296; break; } else { __label__ = 298; break; }
    case 296: // $1196
      var $1197=HEAP32[(($type)>>2)];
      var $1198=_getreal($1197);
      var $1199=$c;
      var $1200=(($asn+($1199<<3))|0);
      (tempDoubleF64[0]=$1198,HEAP32[(($1200)>>2)]=tempDoubleI32[0],HEAP32[(($1200+4)>>2)]=tempDoubleI32[1]);
      __label__ = 297; break;
    case 297: // $1201
      var $1202=$c;
      var $1203=((($1202)+1)|0);
      $c=$1203;
      __label__ = 295; break;
    case 298: // $1204
      __label__ = 315; break;
    case 299: // $1205
      var $1206=HEAP32[(($type)>>2)];
      var $1207=_getreal($1206);
      var $1208=(($xyz)|0);
      (tempDoubleF64[0]=$1207,HEAP32[(($1208)>>2)]=tempDoubleI32[0],HEAP32[(($1208+4)>>2)]=tempDoubleI32[1]);
      var $1209=HEAP32[(($type)>>2)];
      var $1210=_getreal($1209);
      var $1211=(($xyz+8)|0);
      (tempDoubleF64[0]=$1210,HEAP32[(($1211)>>2)]=tempDoubleI32[0],HEAP32[(($1211+4)>>2)]=tempDoubleI32[1]);
      var $1212=(($xyz)|0);
      var $1213=(tempDoubleI32[0]=HEAP32[(($1212)>>2)],tempDoubleI32[1]=HEAP32[(($1212+4)>>2)],tempDoubleF64[0]);
      var $1214=1-($1213);
      var $1215=(($xyz+8)|0);
      var $1216=(tempDoubleI32[0]=HEAP32[(($1215)>>2)],tempDoubleI32[1]=HEAP32[(($1215+4)>>2)],tempDoubleF64[0]);
      var $1217=($1214)-($1216);
      var $1218=(($xyz+16)|0);
      (tempDoubleF64[0]=$1217,HEAP32[(($1218)>>2)]=tempDoubleI32[0],HEAP32[(($1218+4)>>2)]=tempDoubleI32[1]);
      $c=0;
      __label__ = 300; break;
    case 300: // $1219
      var $1220=$c;
      var $1221=((($1220))|0) < 3;
      if ($1221) { __label__ = 301; break; } else { __label__ = 303; break; }
    case 301: // $1222
      var $1223=$c;
      var $1224=((_d65_white+($1223<<2))|0);
      var $1225=HEAPF32[(($1224)>>2)];
      var $1226=($1225);
      var $1227=$c;
      var $1228=(($xyz+($1227<<3))|0);
      var $1229=(tempDoubleI32[0]=HEAP32[(($1228)>>2)],tempDoubleI32[1]=HEAP32[(($1228+4)>>2)],tempDoubleF64[0]);
      var $1230=($1229)/($1226);
      (tempDoubleF64[0]=$1230,HEAP32[(($1228)>>2)]=tempDoubleI32[0],HEAP32[(($1228+4)>>2)]=tempDoubleI32[1]);
      __label__ = 302; break;
    case 302: // $1231
      var $1232=$c;
      var $1233=((($1232)+1)|0);
      $c=$1233;
      __label__ = 300; break;
    case 303: // $1234
      __label__ = 315; break;
    case 304: // $1235
      var $1236=HEAP32[((_dng_version)>>2)];
      var $1237=((($1236))|0)!=0;
      if ($1237) { __label__ = 305; break; } else { __label__ = 306; break; }
    case 305: // $1238
      __label__ = 315; break;
    case 306: // $1239
      var $1240=_get4();
      var $1241=$2;
      var $1242=((($1240)+($1241))|0);
      $j=$1242;
      _parse_minolta($1242);
      var $1243=HEAP32[((_ifp)>>2)];
      var $1244=$j;
      var $1245=_fseek($1243, $1244, 0);
      var $1246=$2;
      var $1247=_parse_tiff_ifd($1246);
      __label__ = 315; break;
    case 307: // $1248
      _read_shorts(((_cr2_slice)|0), 3);
      __label__ = 315; break;
    case 308: // $1249
      var $1250=HEAP32[(($type)>>2)];
      var $1251=_getint($1250);
      var $1252=((($1251)) & 65535);
      HEAP16[((_top_margin)>>1)]=$1252;
      var $1253=HEAP32[(($type)>>2)];
      var $1254=_getint($1253);
      var $1255=((($1254)) & 65535);
      HEAP16[((_left_margin)>>1)]=$1255;
      var $1256=HEAP32[(($type)>>2)];
      var $1257=_getint($1256);
      var $1258=HEAPU16[((_top_margin)>>1)];
      var $1259=((($1258))&65535);
      var $1260=((($1257)-($1259))|0);
      var $1261=((($1260)) & 65535);
      HEAP16[((_height)>>1)]=$1261;
      var $1262=HEAP32[(($type)>>2)];
      var $1263=_getint($1262);
      var $1264=HEAPU16[((_left_margin)>>1)];
      var $1265=((($1264))&65535);
      var $1266=((($1263)-($1265))|0);
      var $1267=((($1266)) & 65535);
      HEAP16[((_width)>>1)]=$1267;
      __label__ = 315; break;
    case 309: // $1268
      var $1269=HEAPU32[(($len)>>2)];
      var $1270=((($1269))>>>0) < 13;
      if ($1270) { __label__ = 310; break; } else { __label__ = 311; break; }
    case 310: // $1271
      __label__ = 315; break;
    case 311: // $1272
      var $1273=HEAP32[((_ifp)>>2)];
      var $1274=_fseek($1273, 16, 1);
      var $1275=_get4();
      HEAP32[((_data_offset)>>2)]=$1275;
      var $1276=HEAP32[((_ifp)>>2)];
      var $1277=_fseek($1276, 28, 1);
      var $1278=_get4();
      var $1279=HEAP32[((_data_offset)>>2)];
      var $1280=((($1279)+($1278))|0);
      HEAP32[((_data_offset)>>2)]=$1280;
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 315; break;
    case 312: // $1281
      var $1282=HEAP32[(($type)>>2)];
      var $1283=((($1282))|0)==2;
      if ($1283) { __label__ = 313; break; } else { __label__ = 314; break; }
    case 313: // $1284
      var $1285=HEAP32[((_ifp)>>2)];
      var $1286=_fgets(((_model2)|0), 64, $1285);
      __label__ = 314; break;
    case 314: // $1287
      __label__ = 315; break;
    case 315: // $1288
      var $1289=HEAP32[((_ifp)>>2)];
      var $1290=HEAP32[(($save)>>2)];
      var $1291=_fseek($1289, $1290, 0);
      __label__ = 13; break;
    case 316: // $1292
      var $1293=$sony_length;
      var $1294=((($1293))|0)!=0;
      if ($1294) { __label__ = 317; break; } else { __label__ = 321; break; }
    case 317: // $1295
      var $1296=$sony_length;
      var $1297=_malloc($1296);
      var $1298=$1297;
      $buf=$1298;
      var $1299=((($1298))|0)!=0;
      if ($1299) { __label__ = 318; break; } else { __label__ = 321; break; }
    case 318: // $1300
      var $1301=HEAP32[((_ifp)>>2)];
      var $1302=$sony_offset;
      var $1303=_fseek($1301, $1302, 0);
      var $1304=$buf;
      var $1305=$1304;
      var $1306=$sony_length;
      var $1307=HEAP32[((_ifp)>>2)];
      var $1308=_fread($1305, $1306, 1, $1307);
      var $1309=$buf;
      var $1310=$sony_length;
      var $1311=Math.floor(((($1310))>>>0)/4);
      var $1312=$sony_key;
      _sony_decrypt($1309, $1311, 1, $1312);
      var $1313=HEAP32[((_ifp)>>2)];
      $sfp=$1313;
      var $1314=_tmpfile();
      HEAP32[((_ifp)>>2)]=$1314;
      var $1315=((($1314))|0)!=0;
      if ($1315) { __label__ = 319; break; } else { __label__ = 320; break; }
    case 319: // $1316
      var $1317=$buf;
      var $1318=$1317;
      var $1319=$sony_length;
      var $1320=HEAP32[((_ifp)>>2)];
      var $1321=_fwrite($1318, $1319, 1, $1320);
      var $1322=HEAP32[((_ifp)>>2)];
      var $1323=_fseek($1322, 0, 0);
      var $1324=$sony_offset;
      var $1325=(((-($1324)))|0);
      var $1326=_parse_tiff_ifd($1325);
      var $1327=HEAP32[((_ifp)>>2)];
      var $1328=_fclose($1327);
      __label__ = 320; break;
    case 320: // $1329
      var $1330=$sfp;
      HEAP32[((_ifp)>>2)]=$1330;
      var $1331=$buf;
      var $1332=$1331;
      _free($1332);
      __label__ = 321; break;
    case 321: // $1333
      $i=0;
      __label__ = 322; break;
    case 322: // $1334
      var $1335=$i;
      var $1336=HEAP32[((_colors)>>2)];
      var $1337=((($1335))|0) < ((($1336))|0);
      if ($1337) { __label__ = 323; break; } else { __label__ = 329; break; }
    case 323: // $1338
      $c=0;
      __label__ = 324; break;
    case 324: // $1339
      var $1340=$c;
      var $1341=HEAP32[((_colors)>>2)];
      var $1342=((($1340))|0) < ((($1341))|0);
      if ($1342) { __label__ = 325; break; } else { __label__ = 327; break; }
    case 325: // $1343
      var $1344=$i;
      var $1345=(($ab+($1344<<3))|0);
      var $1346=(tempDoubleI32[0]=HEAP32[(($1345)>>2)],tempDoubleI32[1]=HEAP32[(($1345+4)>>2)],tempDoubleF64[0]);
      var $1347=$c;
      var $1348=$i;
      var $1349=(($cc+($1348<<5))|0);
      var $1350=(($1349+($1347<<3))|0);
      var $1351=(tempDoubleI32[0]=HEAP32[(($1350)>>2)],tempDoubleI32[1]=HEAP32[(($1350+4)>>2)],tempDoubleF64[0]);
      var $1352=($1351)*($1346);
      (tempDoubleF64[0]=$1352,HEAP32[(($1350)>>2)]=tempDoubleI32[0],HEAP32[(($1350+4)>>2)]=tempDoubleI32[1]);
      __label__ = 326; break;
    case 326: // $1353
      var $1354=$c;
      var $1355=((($1354)+1)|0);
      $c=$1355;
      __label__ = 324; break;
    case 327: // $1356
      __label__ = 328; break;
    case 328: // $1357
      var $1358=$i;
      var $1359=((($1358)+1)|0);
      $i=$1359;
      __label__ = 322; break;
    case 329: // $1360
      var $1361=$use_cm;
      var $1362=((($1361))|0)!=0;
      if ($1362) { __label__ = 330; break; } else { __label__ = 343; break; }
    case 330: // $1363
      $c=0;
      __label__ = 331; break;
    case 331: // $1364
      var $1365=$c;
      var $1366=HEAP32[((_colors)>>2)];
      var $1367=((($1365))|0) < ((($1366))|0);
      if ($1367) { __label__ = 332; break; } else { __label__ = 342; break; }
    case 332: // $1368
      $i=0;
      __label__ = 333; break;
    case 333: // $1369
      var $1370=$i;
      var $1371=((($1370))|0) < 3;
      if ($1371) { __label__ = 334; break; } else { __label__ = 340; break; }
    case 334: // $1372
      $j=0;
      var $1373=$i;
      var $1374=$c;
      var $1375=(($cam_xyz+$1374*24)|0);
      var $1376=(($1375+($1373<<3))|0);
      (tempDoubleF64[0]=0,HEAP32[(($1376)>>2)]=tempDoubleI32[0],HEAP32[(($1376+4)>>2)]=tempDoubleI32[1]);
      __label__ = 335; break;
    case 335: // $1377
      var $1378=$j;
      var $1379=HEAP32[((_colors)>>2)];
      var $1380=((($1378))|0) < ((($1379))|0);
      if ($1380) { __label__ = 336; break; } else { __label__ = 338; break; }
    case 336: // $1381
      var $1382=$j;
      var $1383=$c;
      var $1384=(($cc+($1383<<5))|0);
      var $1385=(($1384+($1382<<3))|0);
      var $1386=(tempDoubleI32[0]=HEAP32[(($1385)>>2)],tempDoubleI32[1]=HEAP32[(($1385+4)>>2)],tempDoubleF64[0]);
      var $1387=$i;
      var $1388=$j;
      var $1389=(($cm+$1388*24)|0);
      var $1390=(($1389+($1387<<3))|0);
      var $1391=(tempDoubleI32[0]=HEAP32[(($1390)>>2)],tempDoubleI32[1]=HEAP32[(($1390+4)>>2)],tempDoubleF64[0]);
      var $1392=($1386)*($1391);
      var $1393=$i;
      var $1394=(($xyz+($1393<<3))|0);
      var $1395=(tempDoubleI32[0]=HEAP32[(($1394)>>2)],tempDoubleI32[1]=HEAP32[(($1394+4)>>2)],tempDoubleF64[0]);
      var $1396=($1392)*($1395);
      var $1397=$i;
      var $1398=$c;
      var $1399=(($cam_xyz+$1398*24)|0);
      var $1400=(($1399+($1397<<3))|0);
      var $1401=(tempDoubleI32[0]=HEAP32[(($1400)>>2)],tempDoubleI32[1]=HEAP32[(($1400+4)>>2)],tempDoubleF64[0]);
      var $1402=($1401)+($1396);
      (tempDoubleF64[0]=$1402,HEAP32[(($1400)>>2)]=tempDoubleI32[0],HEAP32[(($1400+4)>>2)]=tempDoubleI32[1]);
      __label__ = 337; break;
    case 337: // $1403
      var $1404=$j;
      var $1405=((($1404)+1)|0);
      $j=$1405;
      __label__ = 335; break;
    case 338: // $1406
      __label__ = 339; break;
    case 339: // $1407
      var $1408=$i;
      var $1409=((($1408)+1)|0);
      $i=$1409;
      __label__ = 333; break;
    case 340: // $1410
      __label__ = 341; break;
    case 341: // $1411
      var $1412=$c;
      var $1413=((($1412)+1)|0);
      $c=$1413;
      __label__ = 331; break;
    case 342: // $1414
      var $1415=(($cam_xyz)|0);
      _cam_xyz_coeff($1415);
      __label__ = 343; break;
    case 343: // $1416
      var $1417=(($asn)|0);
      var $1418=(tempDoubleI32[0]=HEAPU32[(($1417)>>2)],tempDoubleI32[1]=HEAPU32[(($1417+4)>>2)],tempDoubleF64[0]);
      var $1419=($1418) != 0;
      if ($1419) { __label__ = 344; break; } else { __label__ = 349; break; }
    case 344: // $1420
      HEAPF32[((((_cam_mul+12)|0))>>2)]=0;
      $c=0;
      __label__ = 345; break;
    case 345: // $1421
      var $1422=$c;
      var $1423=HEAP32[((_colors)>>2)];
      var $1424=((($1422))|0) < ((($1423))|0);
      if ($1424) { __label__ = 346; break; } else { __label__ = 348; break; }
    case 346: // $1425
      var $1426=$c;
      var $1427=(($asn+($1426<<3))|0);
      var $1428=(tempDoubleI32[0]=HEAP32[(($1427)>>2)],tempDoubleI32[1]=HEAP32[(($1427+4)>>2)],tempDoubleF64[0]);
      var $1429=1/($1428);
      var $1430=($1429);
      var $1431=$c;
      var $1432=((_cam_mul+($1431<<2))|0);
      HEAPF32[(($1432)>>2)]=$1430;
      __label__ = 347; break;
    case 347: // $1433
      var $1434=$c;
      var $1435=((($1434)+1)|0);
      $c=$1435;
      __label__ = 345; break;
    case 348: // $1436
      __label__ = 349; break;
    case 349: // $1437
      var $1438=$use_cm;
      var $1439=((($1438))|0)!=0;
      if ($1439) { __label__ = 355; break; } else { __label__ = 350; break; }
    case 350: // $1440
      $c=0;
      __label__ = 351; break;
    case 351: // $1441
      var $1442=$c;
      var $1443=HEAP32[((_colors)>>2)];
      var $1444=((($1442))|0) < ((($1443))|0);
      if ($1444) { __label__ = 352; break; } else { __label__ = 354; break; }
    case 352: // $1445
      var $1446=$c;
      var $1447=$c;
      var $1448=(($cc+($1447<<5))|0);
      var $1449=(($1448+($1446<<3))|0);
      var $1450=(tempDoubleI32[0]=HEAP32[(($1449)>>2)],tempDoubleI32[1]=HEAP32[(($1449+4)>>2)],tempDoubleF64[0]);
      var $1451=$c;
      var $1452=((_pre_mul+($1451<<2))|0);
      var $1453=HEAPF32[(($1452)>>2)];
      var $1454=($1453);
      var $1455=($1454)/($1450);
      var $1456=($1455);
      HEAPF32[(($1452)>>2)]=$1456;
      __label__ = 353; break;
    case 353: // $1457
      var $1458=$c;
      var $1459=((($1458)+1)|0);
      $c=$1459;
      __label__ = 351; break;
    case 354: // $1460
      __label__ = 355; break;
    case 355: // $1461
      $1=0;
      __label__ = 356; break;
    case 356: // $1462
      var $1463=$1;
      STACKTOP = __stackBase__;
      return $1463;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_tiff_ifd["X"]=1;

function _romm_coeff($romm_cam) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $i;
      var $j;
      var $k;
      $1=$romm_cam;
      $i=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=((($3))|0) < 3;
      if ($4) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: // $5
      $j=0;
      __label__ = 3; break;
    case 3: // $6
      var $7=$j;
      var $8=((($7))|0) < 3;
      if ($8) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: // $9
      $k=0;
      var $10=$j;
      var $11=$i;
      var $12=((_cmatrix+($11<<4))|0);
      var $13=(($12+($10<<2))|0);
      HEAPF32[(($13)>>2)]=0;
      __label__ = 5; break;
    case 5: // $14
      var $15=$k;
      var $16=((($15))|0) < 3;
      if ($16) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $17
      var $18=$k;
      var $19=$i;
      var $20=((_romm_coeff_rgb_romm+$19*12)|0);
      var $21=(($20+($18<<2))|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$j;
      var $24=$k;
      var $25=$1;
      var $26=(($25+$24*12)|0);
      var $27=(($26+($23<<2))|0);
      var $28=HEAPF32[(($27)>>2)];
      var $29=($22)*($28);
      var $30=$j;
      var $31=$i;
      var $32=((_cmatrix+($31<<4))|0);
      var $33=(($32+($30<<2))|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=($34)+($29);
      HEAPF32[(($33)>>2)]=$35;
      __label__ = 7; break;
    case 7: // $36
      var $37=$k;
      var $38=((($37)+1)|0);
      $k=$38;
      __label__ = 5; break;
    case 8: // $39
      __label__ = 9; break;
    case 9: // $40
      var $41=$j;
      var $42=((($41)+1)|0);
      $j=$42;
      __label__ = 3; break;
    case 10: // $43
      __label__ = 11; break;
    case 11: // $44
      var $45=$i;
      var $46=((($45)+1)|0);
      $i=$46;
      __label__ = 1; break;
    case 12: // $47
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_romm_coeff["X"]=1;

function _linear_table($len) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $i;
      $1=$len;
      var $2=$1;
      var $3=((($2))>>>0) > 4096;
      if ($3) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $4
      $1=4096;
      __label__ = 2; break;
    case 2: // $5
      var $6=$1;
      _read_shorts(((_curve)|0), $6);
      var $7=$1;
      $i=$7;
      __label__ = 3; break;
    case 3: // $8
      var $9=$i;
      var $10=((($9))|0) < 4096;
      if ($10) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $11
      var $12=$i;
      var $13=((($12)-1)|0);
      var $14=((_curve+($13<<1))|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=$i;
      var $17=((_curve+($16<<1))|0);
      HEAP16[(($17)>>1)]=$15;
      __label__ = 5; break;
    case 5: // $18
      var $19=$i;
      var $20=((($19)+1)|0);
      $i=$20;
      __label__ = 3; break;
    case 6: // $21
      var $22=HEAPU16[((((_curve+8190)|0))>>1)];
      var $23=((($22))&65535);
      HEAP32[((_maximum)>>2)]=$23;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _get_timestamp($reversed) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $t=__stackBase__;
      var $str=__stackBase__+44;
      var $i;
      $1=$reversed;
      var $2=(($str+19)|0);
      HEAP8[($2)]=0;
      var $3=$1;
      var $4=((($3))|0)!=0;
      if ($4) { __label__ = 1; break; } else { __label__ = 5; break; }
    case 1: // $5
      $i=19;
      __label__ = 2; break;
    case 2: // $6
      var $7=$i;
      var $8=((($7)-1)|0);
      $i=$8;
      var $9=((($7))|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $10
      var $11=HEAP32[((_ifp)>>2)];
      var $12=_getc_unlocked($11);
      var $13=((($12)) & 255);
      var $14=$i;
      var $15=(($str+$14)|0);
      HEAP8[($15)]=$13;
      __label__ = 2; break;
    case 4: // $16
      __label__ = 6; break;
    case 5: // $17
      var $18=(($str)|0);
      var $19=HEAP32[((_ifp)>>2)];
      var $20=_fread($18, 19, 1, $19);
      __label__ = 6; break;
    case 6: // $21
      var $22=$t;
      _memset($22, 0, 44, 1);
      var $23=(($str)|0);
      var $24=(($t+20)|0);
      var $25=(($t+16)|0);
      var $26=(($t+12)|0);
      var $27=(($t+8)|0);
      var $28=(($t+4)|0);
      var $29=(($t)|0);
      var $30=_sscanf($23, ((__str115)|0), (tempInt=STACKTOP,STACKTOP += 24,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,HEAP32[((tempInt+4)>>2)]=$25,HEAP32[((tempInt+8)>>2)]=$26,HEAP32[((tempInt+12)>>2)]=$27,HEAP32[((tempInt+16)>>2)]=$28,HEAP32[((tempInt+20)>>2)]=$29,tempInt));
      var $31=((($30))|0)!=6;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $32
      __label__ = 10; break;
    case 8: // $33
      var $34=(($t+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-1900)|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($t+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-1)|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($t+32)|0);
      HEAP32[(($40)>>2)]=-1;
      var $41=_mktime($t);
      var $42=((($41))|0) > 0;
      if ($42) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $43
      var $44=_mktime($t);
      HEAP32[((_timestamp)>>2)]=$44;
      __label__ = 10; break;
    case 10: // $45
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_timestamp["X"]=1;

function _parse_exif($base) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $kodak;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $save=__stackBase__+12;
      var $c;
      var $expo;
      $1=$base;
      var $2=_strncmp(((_make)|0), ((__str116)|0), 7);
      var $3=((($2))|0)!=0;
      if ($3) { var $8 = 0;__label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $4
      var $5=HEAPU32[((_tiff_nifds)>>2)];
      var $6=((($5))>>>0) < 3;
      var $8 = $6;__label__ = 2; break;
    case 2: // $7
      var $8;
      var $9=((($8))&1);
      $kodak=$9;
      var $10=_get2();
      var $11=((($10))&65535);
      $entries=$11;
      __label__ = 3; break;
    case 3: // $12
      var $13=$entries;
      var $14=((($13)-1)|0);
      $entries=$14;
      var $15=((($13))|0)!=0;
      if ($15) { __label__ = 4; break; } else { __label__ = 29; break; }
    case 4: // $16
      var $17=$1;
      _tiff_get($17, $tag, $type, $len, $save);
      var $18=HEAP32[(($tag)>>2)];
      if ($18 == 33434) {
        __label__ = 5; break;
      }
      else if ($18 == 33437) {
        __label__ = 6; break;
      }
      else if ($18 == 34855) {
        __label__ = 7; break;
      }
      else if ($18 == 36867 || $18 == 36868) {
        __label__ = 8; break;
      }
      else if ($18 == 37377) {
        __label__ = 9; break;
      }
      else if ($18 == 37378) {
        __label__ = 12; break;
      }
      else if ($18 == 37386) {
        __label__ = 13; break;
      }
      else if ($18 == 37500) {
        __label__ = 14; break;
      }
      else if ($18 == 40962) {
        __label__ = 15; break;
      }
      else if ($18 == 40963) {
        __label__ = 18; break;
      }
      else if ($18 == 41730) {
        __label__ = 21; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 5: // $19
      var $20=HEAP32[(($type)>>2)];
      var $21=_getreal($20);
      var $22=($21);
      HEAPF32[((_shutter)>>2)]=$22;
      __label__ = 28; break;
    case 6: // $23
      var $24=HEAP32[(($type)>>2)];
      var $25=_getreal($24);
      var $26=($25);
      HEAPF32[((_aperture)>>2)]=$26;
      __label__ = 28; break;
    case 7: // $27
      var $28=_get2();
      var $29=((($28))&65535);
      HEAPF32[((_iso_speed)>>2)]=$29;
      __label__ = 28; break;
    case 8: // $30
      _get_timestamp(0);
      __label__ = 28; break;
    case 9: // $31
      var $32=HEAP32[(($type)>>2)];
      var $33=_getreal($32);
      var $34=(-($33));
      $expo=$34;
      var $35=($34) < 128;
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $36
      var $37=$expo;
      var $38=_llvm_pow_f64(2, $37);
      var $39=($38);
      HEAPF32[((_shutter)>>2)]=$39;
      __label__ = 11; break;
    case 11: // $40
      __label__ = 28; break;
    case 12: // $41
      var $42=HEAP32[(($type)>>2)];
      var $43=_getreal($42);
      var $44=($43)/2;
      var $45=_llvm_pow_f64(2, $44);
      var $46=($45);
      HEAPF32[((_aperture)>>2)]=$46;
      __label__ = 28; break;
    case 13: // $47
      var $48=HEAP32[(($type)>>2)];
      var $49=_getreal($48);
      var $50=($49);
      HEAPF32[((_focal_len)>>2)]=$50;
      __label__ = 28; break;
    case 14: // $51
      var $52=$1;
      _parse_makernote($52, 0);
      __label__ = 28; break;
    case 15: // $53
      var $54=$kodak;
      var $55=((($54))|0)!=0;
      if ($55) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $56
      var $57=_get4();
      var $58=((($57)) & 65535);
      HEAP16[((_raw_width)>>1)]=$58;
      __label__ = 17; break;
    case 17: // $59
      __label__ = 28; break;
    case 18: // $60
      var $61=$kodak;
      var $62=((($61))|0)!=0;
      if ($62) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $63
      var $64=_get4();
      var $65=((($64)) & 65535);
      HEAP16[((_raw_height)>>1)]=$65;
      __label__ = 20; break;
    case 20: // $66
      __label__ = 28; break;
    case 21: // $67
      var $68=_get4();
      var $69=((($68))|0)==131074;
      if ($69) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: // $70
      $c=0;
      HEAP32[((_exif_cfa)>>2)]=0;
      __label__ = 23; break;
    case 23: // $71
      var $72=$c;
      var $73=((($72))>>>0) < 8;
      if ($73) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: // $74
      var $75=HEAP32[((_ifp)>>2)];
      var $76=_getc_unlocked($75);
      var $77=((($76)*16843009)|0);
      var $78=$c;
      var $79=($77) << ($78);
      var $80=HEAP32[((_exif_cfa)>>2)];
      var $81=($80) | ($79);
      HEAP32[((_exif_cfa)>>2)]=$81;
      __label__ = 25; break;
    case 25: // $82
      var $83=$c;
      var $84=((($83)+2)|0);
      $c=$84;
      __label__ = 23; break;
    case 26: // $85
      __label__ = 27; break;
    case 27: // $86
      __label__ = 28; break;
    case 28: // $87
      var $88=HEAP32[((_ifp)>>2)];
      var $89=HEAP32[(($save)>>2)];
      var $90=_fseek($88, $89, 0);
      __label__ = 3; break;
    case 29: // $91
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_exif["X"]=1;

function _parse_gps($base) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $save=__stackBase__+12;
      var $c;
      $1=$base;
      var $2=_get2();
      var $3=((($2))&65535);
      $entries=$3;
      __label__ = 1; break;
    case 1: // $4
      var $5=$entries;
      var $6=((($5)-1)|0);
      $entries=$6;
      var $7=((($5))|0)!=0;
      if ($7) { __label__ = 2; break; } else { __label__ = 19; break; }
    case 2: // $8
      var $9=$1;
      _tiff_get($9, $tag, $type, $len, $save);
      var $10=HEAP32[(($tag)>>2)];
      if ($10 == 1 || $10 == 3 || $10 == 5) {
        __label__ = 3; break;
      }
      else if ($10 == 2 || $10 == 4 || $10 == 7) {
        __label__ = 4; break;
      }
      else if ($10 == 6) {
        __label__ = 9; break;
      }
      else if ($10 == 18 || $10 == 29) {
        __label__ = 14; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 3: // $11
      var $12=HEAP32[((_ifp)>>2)];
      var $13=_getc($12);
      var $14=HEAPU32[(($tag)>>2)];
      var $15=Math.floor(((($14))>>>0)/2);
      var $16=((($15)+29)|0);
      var $17=((_gpsdata+($16<<2))|0);
      HEAP32[(($17)>>2)]=$13;
      __label__ = 18; break;
    case 4: // $18
      $c=0;
      __label__ = 5; break;
    case 5: // $19
      var $20=$c;
      var $21=((($20))>>>0) < 6;
      if ($21) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: // $22
      var $23=_get4();
      var $24=HEAPU32[(($tag)>>2)];
      var $25=Math.floor(((($24))>>>0)/3);
      var $26=((($25)*6)|0);
      var $27=$c;
      var $28=((($26)+($27))|0);
      var $29=((_gpsdata+($28<<2))|0);
      HEAP32[(($29)>>2)]=$23;
      __label__ = 7; break;
    case 7: // $30
      var $31=$c;
      var $32=((($31)+1)|0);
      $c=$32;
      __label__ = 5; break;
    case 8: // $33
      __label__ = 18; break;
    case 9: // $34
      $c=0;
      __label__ = 10; break;
    case 10: // $35
      var $36=$c;
      var $37=((($36))>>>0) < 2;
      if ($37) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: // $38
      var $39=_get4();
      var $40=$c;
      var $41=((($40)+18)|0);
      var $42=((_gpsdata+($41<<2))|0);
      HEAP32[(($42)>>2)]=$39;
      __label__ = 12; break;
    case 12: // $43
      var $44=$c;
      var $45=((($44)+1)|0);
      $c=$45;
      __label__ = 10; break;
    case 13: // $46
      __label__ = 18; break;
    case 14: // $47
      var $48=HEAPU32[(($tag)>>2)];
      var $49=Math.floor(((($48))>>>0)/3);
      var $50=((((_gpsdata+56)|0)+($49<<2))|0);
      var $51=$50;
      var $52=HEAPU32[(($len)>>2)];
      var $53=((($52))>>>0) < 12;
      if ($53) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $54
      var $55=HEAP32[(($len)>>2)];
      var $58 = $55;__label__ = 17; break;
    case 16: // $56
      var $58 = 12;__label__ = 17; break;
    case 17: // $57
      var $58;
      var $59=HEAP32[((_ifp)>>2)];
      var $60=_fgets($51, $58, $59);
      __label__ = 18; break;
    case 18: // $61
      var $62=HEAP32[((_ifp)>>2)];
      var $63=HEAP32[(($save)>>2)];
      var $64=_fseek($62, $63, 0);
      __label__ = 1; break;
    case 19: // $65
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_gps["X"]=1;

function _parse_mos($offset) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $data=__stackBase__;
      var $skip;
      var $from;
      var $i=__stackBase__+40;
      var $c;
      var $neut=__stackBase__+44;
      var $planes=__stackBase__+60;
      var $frot;
      var $romm_cam=__stackBase__+64;
      $1=$offset;
      HEAP32[(($planes)>>2)]=0;
      $frot=0;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=$1;
      var $4=_fseek($2, $3, 0);
      __label__ = 1; break;
    case 1: // $5
      var $6=_get4();
      var $7=((($6))|0)!=1347114067;
      if ($7) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $8
      __label__ = 51; break;
    case 3: // $9
      var $10=_get4();
      var $11=(($data)|0);
      var $12=HEAP32[((_ifp)>>2)];
      var $13=_fread($11, 1, 40, $12);
      var $14=_get4();
      $skip=$14;
      var $15=HEAP32[((_ifp)>>2)];
      var $16=_ftell($15);
      $from=$16;
      var $17=(($data)|0);
      var $18=_strcmp($17, ((__str138)|0));
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: // $20
      var $21=$from;
      HEAP32[((_thumb_offset)>>2)]=$21;
      var $22=$skip;
      HEAP32[((_thumb_length)>>2)]=$22;
      __label__ = 5; break;
    case 5: // $23
      var $24=(($data)|0);
      var $25=_strcmp($24, ((__str139)|0));
      var $26=((($25))|0)!=0;
      if ($26) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: // $27
      var $28=$from;
      HEAP32[((_profile_offset)>>2)]=$28;
      var $29=$skip;
      HEAP32[((_profile_length)>>2)]=$29;
      __label__ = 7; break;
    case 7: // $30
      var $31=(($data)|0);
      var $32=_strcmp($31, ((__str140)|0));
      var $33=((($32))|0)!=0;
      if ($33) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: // $34
      var $35=HEAP32[((_ifp)>>2)];
      var $36=_fscanf($35, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$i,tempInt));
      var $37=HEAPU32[(($i)>>2)];
      var $38=((($37))>>>0) < 39;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $39
      var $40=HEAP32[(($i)>>2)];
      var $41=((_parse_mos_mod+($40<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=_strcpy(((_model)|0), $42);
      __label__ = 10; break;
    case 10: // $44
      __label__ = 11; break;
    case 11: // $45
      var $46=(($data)|0);
      var $47=_strcmp($46, ((__str142)|0));
      var $48=((($47))|0)!=0;
      if ($48) { __label__ = 17; break; } else { __label__ = 12; break; }
    case 12: // $49
      HEAP32[(($i)>>2)]=0;
      __label__ = 13; break;
    case 13: // $50
      var $51=HEAP32[(($i)>>2)];
      var $52=((($51))|0) < 9;
      if ($52) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $53
      var $54=_get4();
      var $55=_int_to_float($54);
      var $56=HEAP32[(($i)>>2)];
      var $57=(($romm_cam)|0);
      var $58=(($57+($56<<2))|0);
      HEAPF32[(($58)>>2)]=$55;
      __label__ = 15; break;
    case 15: // $59
      var $60=HEAP32[(($i)>>2)];
      var $61=((($60)+1)|0);
      HEAP32[(($i)>>2)]=$61;
      __label__ = 13; break;
    case 16: // $62
      var $63=(($romm_cam)|0);
      _romm_coeff($63);
      __label__ = 17; break;
    case 17: // $64
      var $65=(($data)|0);
      var $66=_strcmp($65, ((__str143)|0));
      var $67=((($66))|0)!=0;
      if ($67) { __label__ = 23; break; } else { __label__ = 18; break; }
    case 18: // $68
      HEAP32[(($i)>>2)]=0;
      __label__ = 19; break;
    case 19: // $69
      var $70=HEAP32[(($i)>>2)];
      var $71=((($70))|0) < 9;
      if ($71) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: // $72
      var $73=HEAP32[((_ifp)>>2)];
      var $74=HEAP32[(($i)>>2)];
      var $75=(($romm_cam)|0);
      var $76=(($75+($74<<2))|0);
      var $77=_fscanf($73, ((__str144)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$76,tempInt));
      __label__ = 21; break;
    case 21: // $78
      var $79=HEAP32[(($i)>>2)];
      var $80=((($79)+1)|0);
      HEAP32[(($i)>>2)]=$80;
      __label__ = 19; break;
    case 22: // $81
      var $82=(($romm_cam)|0);
      _romm_coeff($82);
      __label__ = 23; break;
    case 23: // $83
      var $84=(($data)|0);
      var $85=_strcmp($84, ((__str145)|0));
      var $86=((($85))|0)!=0;
      if ($86) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: // $87
      var $88=HEAP32[((_ifp)>>2)];
      var $89=_fscanf($88, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$planes,tempInt));
      __label__ = 25; break;
    case 25: // $90
      var $91=(($data)|0);
      var $92=_strcmp($91, ((__str146)|0));
      var $93=((($92))|0)!=0;
      if ($93) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: // $94
      var $95=HEAP32[((_ifp)>>2)];
      var $96=_fscanf($95, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=_flip,tempInt));
      __label__ = 27; break;
    case 27: // $97
      var $98=(($data)|0);
      var $99=_strcmp($98, ((__str147)|0));
      var $100=((($99))|0)!=0;
      if ($100) { __label__ = 35; break; } else { __label__ = 28; break; }
    case 28: // $101
      $c=0;
      __label__ = 29; break;
    case 29: // $102
      var $103=$c;
      var $104=((($103))|0) < 4;
      if ($104) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: // $105
      var $106=HEAP32[((_ifp)>>2)];
      var $107=_fscanf($106, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$i,tempInt));
      var $108=HEAP32[(($i)>>2)];
      var $109=((($108))|0)==1;
      if ($109) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: // $110
      var $111=$c;
      var $112=$c;
      var $113=($112) >> 1;
      var $114=($111) ^ ($113);
      $frot=$114;
      __label__ = 32; break;
    case 32: // $115
      __label__ = 33; break;
    case 33: // $116
      var $117=$c;
      var $118=((($117)+1)|0);
      $c=$118;
      __label__ = 29; break;
    case 34: // $119
      __label__ = 35; break;
    case 35: // $120
      var $121=(($data)|0);
      var $122=_strcmp($121, ((__str148)|0));
      var $123=((($122))|0)!=0;
      if ($123) { __label__ = 37; break; } else { __label__ = 36; break; }
    case 36: // $124
      var $125=HEAP32[((_ifp)>>2)];
      var $126=_fscanf($125, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$i,tempInt));
      var $127=HEAP32[(($i)>>2)];
      var $128=HEAP32[((_flip)>>2)];
      var $129=((($127)-($128))|0);
      HEAP32[((_flip)>>2)]=$129;
      __label__ = 37; break;
    case 37: // $130
      var $131=(($data)|0);
      var $132=_strcmp($131, ((__str149)|0));
      var $133=((($132))|0)!=0;
      if ($133) { __label__ = 48; break; } else { __label__ = 38; break; }
    case 38: // $134
      var $135=HEAPF32[((((_cam_mul)|0))>>2)];
      var $136=($135) != 0;
      if ($136) { __label__ = 48; break; } else { __label__ = 39; break; }
    case 39: // $137
      $c=0;
      __label__ = 40; break;
    case 40: // $138
      var $139=$c;
      var $140=((($139))|0) < 4;
      if ($140) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: // $141
      var $142=HEAP32[((_ifp)>>2)];
      var $143=(($neut)|0);
      var $144=$c;
      var $145=(($143+($144<<2))|0);
      var $146=_fscanf($142, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$145,tempInt));
      __label__ = 42; break;
    case 42: // $147
      var $148=$c;
      var $149=((($148)+1)|0);
      $c=$149;
      __label__ = 40; break;
    case 43: // $150
      $c=0;
      __label__ = 44; break;
    case 44: // $151
      var $152=$c;
      var $153=((($152))|0) < 3;
      if ($153) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: // $154
      var $155=(($neut)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=((($156))|0);
      var $158=$c;
      var $159=((($158)+1)|0);
      var $160=(($neut+($159<<2))|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161))|0);
      var $163=($157)/($162);
      var $164=$c;
      var $165=((_cam_mul+($164<<2))|0);
      HEAPF32[(($165)>>2)]=$163;
      __label__ = 46; break;
    case 46: // $166
      var $167=$c;
      var $168=((($167)+1)|0);
      $c=$168;
      __label__ = 44; break;
    case 47: // $169
      __label__ = 48; break;
    case 48: // $170
      var $171=(($data)|0);
      var $172=_strcmp($171, ((__str150)|0));
      var $173=((($172))|0)!=0;
      if ($173) { __label__ = 50; break; } else { __label__ = 49; break; }
    case 49: // $174
      var $175=_get4();
      HEAP32[((_load_flags)>>2)]=$175;
      __label__ = 50; break;
    case 50: // $176
      var $177=$from;
      _parse_mos($177);
      var $178=HEAP32[((_ifp)>>2)];
      var $179=$skip;
      var $180=$from;
      var $181=((($179)+($180))|0);
      var $182=_fseek($178, $181, 0);
      __label__ = 1; break;
    case 51: // $183
      var $184=HEAP32[(($planes)>>2)];
      var $185=((($184))|0)!=0;
      if ($185) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: // $186
      var $187=HEAP32[(($planes)>>2)];
      var $188=((($187))|0)==1;
      var $189=((($188))&1);
      var $190=((($189)*16843009)|0);
      var $191=HEAP32[((_flip)>>2)];
      var $192=((((($191))|0)/90)|0);
      var $193=$frot;
      var $194=((($192)+($193))|0);
      var $195=($194) & 3;
      var $196=((__str151+$195)|0);
      var $197=HEAPU8[($196)];
      var $198=((($197))&255);
      var $199=((($190)*($198))|0);
      HEAP32[((_filters)>>2)]=$199;
      __label__ = 53; break;
    case 53: // $200
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_mos["X"]=1;

function _parse_kodak_ifd($base) {
  var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $entries;
      var $tag=__stackBase__;
      var $type=__stackBase__+4;
      var $len=__stackBase__+8;
      var $save=__stackBase__+12;
      var $i;
      var $c;
      var $wbi;
      var $wbtemp;
      var $mul=__stackBase__+16;
      var $num;
      $1=$base;
      $wbi=-2;
      $wbtemp=6500;
      var $2=$mul;
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($2)>>2)]=HEAP32[(((_parse_kodak_ifd_mul))>>2)]; HEAP32[(($2+4)>>2)]=HEAP32[(((_parse_kodak_ifd_mul)+4)>>2)]; HEAP32[(($2+8)>>2)]=HEAP32[(((_parse_kodak_ifd_mul)+8)>>2)];
      var $3=_get2();
      var $4=((($3))&65535);
      $entries=$4;
      var $5=$entries;
      var $6=((($5))>>>0) > 1024;
      if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $7
      __label__ = 50; break;
    case 2: // $8
      __label__ = 3; break;
    case 3: // $9
      var $10=$entries;
      var $11=((($10)-1)|0);
      $entries=$11;
      var $12=((($10))|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 50; break; }
    case 4: // $13
      var $14=$1;
      _tiff_get($14, $tag, $type, $len, $save);
      var $15=HEAP32[(($tag)>>2)];
      var $16=((($15))|0)==1020;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $17
      var $18=HEAP32[(($type)>>2)];
      var $19=_getint($18);
      $wbi=$19;
      __label__ = 6; break;
    case 6: // $20
      var $21=HEAP32[(($tag)>>2)];
      var $22=((($21))|0)==1021;
      if ($22) { __label__ = 7; break; } else { __label__ = 13; break; }
    case 7: // $23
      var $24=HEAP32[(($len)>>2)];
      var $25=((($24))|0)==72;
      if ($25) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: // $26
      var $27=HEAP32[((_ifp)>>2)];
      var $28=_fseek($27, 40, 1);
      $c=0;
      __label__ = 9; break;
    case 9: // $29
      var $30=$c;
      var $31=((($30))|0) < 3;
      if ($31) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $32
      var $33=_get2();
      var $34=((($33))&65535);
      var $35=((($34))|0);
      var $36=2048/($35);
      var $37=($36);
      var $38=$c;
      var $39=((_cam_mul+($38<<2))|0);
      HEAPF32[(($39)>>2)]=$37;
      __label__ = 11; break;
    case 11: // $40
      var $41=$c;
      var $42=((($41)+1)|0);
      $c=$42;
      __label__ = 9; break;
    case 12: // $43
      $wbi=-2;
      __label__ = 13; break;
    case 13: // $44
      var $45=HEAP32[(($tag)>>2)];
      var $46=((($45))|0)==2118;
      if ($46) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $47
      var $48=HEAP32[(($type)>>2)];
      var $49=_getint($48);
      $wbtemp=$49;
      __label__ = 15; break;
    case 15: // $50
      var $51=HEAP32[(($tag)>>2)];
      var $52=$wbi;
      var $53=((($52)+2130)|0);
      var $54=((($51))|0)==((($53))|0);
      if ($54) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: // $55
      $c=0;
      __label__ = 17; break;
    case 17: // $56
      var $57=$c;
      var $58=((($57))|0) < 3;
      if ($58) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: // $59
      var $60=HEAP32[(($type)>>2)];
      var $61=_getreal($60);
      var $62=($61);
      var $63=$c;
      var $64=(($mul+($63<<2))|0);
      HEAPF32[(($64)>>2)]=$62;
      __label__ = 19; break;
    case 19: // $65
      var $66=$c;
      var $67=((($66)+1)|0);
      $c=$67;
      __label__ = 17; break;
    case 20: // $68
      __label__ = 21; break;
    case 21: // $69
      var $70=HEAP32[(($tag)>>2)];
      var $71=$wbi;
      var $72=((($71)+2140)|0);
      var $73=((($70))|0)==((($72))|0);
      if ($73) { __label__ = 22; break; } else { __label__ = 32; break; }
    case 22: // $74
      var $75=$wbi;
      var $76=((($75))|0) >= 0;
      if ($76) { __label__ = 23; break; } else { __label__ = 32; break; }
    case 23: // $77
      $c=0;
      __label__ = 24; break;
    case 24: // $78
      var $79=$c;
      var $80=((($79))|0) < 3;
      if ($80) { __label__ = 25; break; } else { __label__ = 31; break; }
    case 25: // $81
      $i=0;
      $num=0;
      __label__ = 26; break;
    case 26: // $82
      var $83=$i;
      var $84=((($83))|0) < 4;
      if ($84) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: // $85
      var $86=HEAP32[(($type)>>2)];
      var $87=_getreal($86);
      var $88=$wbtemp;
      var $89=((($88))|0);
      var $90=($89)/100;
      var $91=$i;
      var $92=((($91))|0);
      var $93=_llvm_pow_f64($90, $92);
      var $94=($87)*($93);
      var $95=$num;
      var $96=($95);
      var $97=($96)+($94);
      var $98=($97);
      $num=$98;
      __label__ = 28; break;
    case 28: // $99
      var $100=$i;
      var $101=((($100)+1)|0);
      $i=$101;
      __label__ = 26; break;
    case 29: // $102
      var $103=$num;
      var $104=$c;
      var $105=(($mul+($104<<2))|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=($103)*($106);
      var $108=2048/($107);
      var $109=$c;
      var $110=((_cam_mul+($109<<2))|0);
      HEAPF32[(($110)>>2)]=$108;
      __label__ = 30; break;
    case 30: // $111
      var $112=$c;
      var $113=((($112)+1)|0);
      $c=$113;
      __label__ = 24; break;
    case 31: // $114
      __label__ = 32; break;
    case 32: // $115
      var $116=HEAP32[(($tag)>>2)];
      var $117=((($116))|0)==2317;
      if ($117) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $118
      var $119=HEAP32[(($len)>>2)];
      _linear_table($119);
      __label__ = 34; break;
    case 34: // $120
      var $121=HEAP32[(($tag)>>2)];
      var $122=((($121))|0)==6020;
      if ($122) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: // $123
      var $124=HEAP32[(($type)>>2)];
      var $125=_getint($124);
      var $126=((($125))>>>0);
      HEAPF32[((_iso_speed)>>2)]=$126;
      __label__ = 36; break;
    case 36: // $127
      var $128=HEAP32[(($tag)>>2)];
      var $129=((($128))|0)==64013;
      if ($129) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $130
      var $131=HEAP32[((_ifp)>>2)];
      var $132=_getc_unlocked($131);
      $wbi=$132;
      __label__ = 38; break;
    case 38: // $133
      var $134=$wbi;
      var $135=((($134))>>>0) < 7;
      if ($135) { __label__ = 39; break; } else { __label__ = 45; break; }
    case 39: // $136
      var $137=HEAP32[(($tag)>>2)];
      var $138=$wbi;
      var $139=((_parse_kodak_ifd_wbtag+($138<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($137))|0)==((($140))|0);
      if ($141) { __label__ = 40; break; } else { __label__ = 45; break; }
    case 40: // $142
      $c=0;
      __label__ = 41; break;
    case 41: // $143
      var $144=$c;
      var $145=((($144))|0) < 3;
      if ($145) { __label__ = 42; break; } else { __label__ = 44; break; }
    case 42: // $146
      var $147=_get4();
      var $148=((($147))>>>0);
      var $149=$c;
      var $150=((_cam_mul+($149<<2))|0);
      HEAPF32[(($150)>>2)]=$148;
      __label__ = 43; break;
    case 43: // $151
      var $152=$c;
      var $153=((($152)+1)|0);
      $c=$153;
      __label__ = 41; break;
    case 44: // $154
      __label__ = 45; break;
    case 45: // $155
      var $156=HEAP32[(($tag)>>2)];
      var $157=((($156))|0)==64019;
      if ($157) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: // $158
      var $159=HEAP32[(($type)>>2)];
      var $160=_getint($159);
      var $161=((($160)) & 65535);
      HEAP16[((_width)>>1)]=$161;
      __label__ = 47; break;
    case 47: // $162
      var $163=HEAP32[(($tag)>>2)];
      var $164=((($163))|0)==64020;
      if ($164) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: // $165
      var $166=HEAP32[(($type)>>2)];
      var $167=_getint($166);
      var $168=((($167)+1)|0);
      var $169=($168) & -2;
      var $170=((($169)) & 65535);
      HEAP16[((_height)>>1)]=$170;
      __label__ = 49; break;
    case 49: // $171
      var $172=HEAP32[((_ifp)>>2)];
      var $173=HEAP32[(($save)>>2)];
      var $174=_fseek($172, $173, 0);
      __label__ = 3; break;
    case 50: // $175
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_kodak_ifd["X"]=1;

function _parse_tiff($base) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $doff;
      $2=$base;
      var $3=HEAP32[((_ifp)>>2)];
      var $4=$2;
      var $5=_fseek($3, $4, 0);
      var $6=_get2();
      HEAP16[((_order)>>1)]=$6;
      var $7=HEAP16[((_order)>>1)];
      var $8=((($7) << 16) >> 16);
      var $9=((($8))|0)!=18761;
      if ($9) { __label__ = 1; break; } else { __label__ = 3; break; }
    case 1: // $10
      var $11=HEAP16[((_order)>>1)];
      var $12=((($11) << 16) >> 16);
      var $13=((($12))|0)!=19789;
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $14
      $1=0;
      __label__ = 9; break;
    case 3: // $15
      var $16=_get2();
      __label__ = 4; break;
    case 4: // $17
      var $18=_get4();
      $doff=$18;
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: // $20
      var $21=HEAP32[((_ifp)>>2)];
      var $22=$doff;
      var $23=$2;
      var $24=((($22)+($23))|0);
      var $25=_fseek($21, $24, 0);
      var $26=$2;
      var $27=_parse_tiff_ifd($26);
      var $28=((($27))|0)!=0;
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $29
      __label__ = 8; break;
    case 7: // $30
      __label__ = 4; break;
    case 8: // $31
      $1=1;
      __label__ = 9; break;
    case 9: // $32
      var $33=$1;
      ;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parse_minolta($base) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $save;
      var $tag;
      var $len;
      var $offset;
      var $high;
      var $wide;
      var $i;
      var $c;
      var $sorder;
      $1=$base;
      $high=0;
      $wide=0;
      var $2=HEAP16[((_order)>>1)];
      $sorder=$2;
      var $3=HEAP32[((_ifp)>>2)];
      var $4=$1;
      var $5=_fseek($3, $4, 0);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_getc_unlocked($6);
      var $8=((($7))|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 1; break; }
    case 1: // $9
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_getc_unlocked($10);
      var $12=((($11)-77)|0);
      var $13=((($12))|0)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: // $14
      var $15=HEAP32[((_ifp)>>2)];
      var $16=_getc_unlocked($15);
      var $17=((($16)-82)|0);
      var $18=((($17))|0)!=0;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $19
      __label__ = 20; break;
    case 4: // $20
      var $21=HEAP32[((_ifp)>>2)];
      var $22=_getc_unlocked($21);
      var $23=((($22)*257)|0);
      var $24=((($23)) & 65535);
      HEAP16[((_order)>>1)]=$24;
      var $25=$1;
      var $26=_get4();
      var $27=((($25)+($26))|0);
      var $28=((($27)+8)|0);
      $offset=$28;
      __label__ = 5; break;
    case 5: // $29
      var $30=HEAP32[((_ifp)>>2)];
      var $31=_ftell($30);
      $save=$31;
      var $32=$offset;
      var $33=((($31))|0) < ((($32))|0);
      if ($33) { __label__ = 6; break; } else { __label__ = 19; break; }
    case 6: // $34
      $i=0;
      $tag=0;
      __label__ = 7; break;
    case 7: // $35
      var $36=$i;
      var $37=((($36))|0) < 4;
      if ($37) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $38
      var $39=$tag;
      var $40=($39) << 8;
      var $41=HEAP32[((_ifp)>>2)];
      var $42=_getc_unlocked($41);
      var $43=($40) | ($42);
      $tag=$43;
      __label__ = 9; break;
    case 9: // $44
      var $45=$i;
      var $46=((($45)+1)|0);
      $i=$46;
      __label__ = 7; break;
    case 10: // $47
      var $48=_get4();
      $len=$48;
      var $49=$tag;
      if ($49 == 5263940) {
        __label__ = 11; break;
      }
      else if ($49 == 5718599) {
        __label__ = 12; break;
      }
      else if ($49 == 5526615) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 11: // $50
      var $51=HEAP32[((_ifp)>>2)];
      var $52=_fseek($51, 8, 1);
      var $53=_get2();
      var $54=((($53))&65535);
      $high=$54;
      var $55=_get2();
      var $56=((($55))&65535);
      $wide=$56;
      __label__ = 18; break;
    case 12: // $57
      var $58=_get4();
      var $59=_strcmp(((_model)|0), ((__str173)|0));
      var $60=((($59))|0)!=0;
      var $61=($60) ? 0 : 3;
      $i=$61;
      $c=0;
      __label__ = 13; break;
    case 13: // $62
      var $63=$c;
      var $64=((($63))|0) < 4;
      if ($64) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $65
      var $66=_get2();
      var $67=((($66))&65535);
      var $68=$c;
      var $69=$c;
      var $70=($69) >> 1;
      var $71=($68) ^ ($70);
      var $72=$i;
      var $73=($71) ^ ($72);
      var $74=((_cam_mul+($73<<2))|0);
      HEAPF32[(($74)>>2)]=$67;
      __label__ = 15; break;
    case 15: // $75
      var $76=$c;
      var $77=((($76)+1)|0);
      $c=$77;
      __label__ = 13; break;
    case 16: // $78
      __label__ = 18; break;
    case 17: // $79
      var $80=HEAP32[((_ifp)>>2)];
      var $81=_ftell($80);
      var $82=_parse_tiff($81);
      var $83=$offset;
      HEAP32[((_data_offset)>>2)]=$83;
      __label__ = 18; break;
    case 18: // $84
      var $85=HEAP32[((_ifp)>>2)];
      var $86=$save;
      var $87=$len;
      var $88=((($86)+($87))|0);
      var $89=((($88)+8)|0);
      var $90=_fseek($85, $89, 0);
      __label__ = 5; break;
    case 19: // $91
      var $92=$high;
      var $93=((($92)) & 65535);
      HEAP16[((_raw_height)>>1)]=$93;
      var $94=$wide;
      var $95=((($94)) & 65535);
      HEAP16[((_raw_width)>>1)]=$95;
      var $96=$sorder;
      HEAP16[((_order)>>1)]=$96;
      __label__ = 20; break;
    case 20: // $97
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_minolta["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _apply_tiff() {
  var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $max_samp;
      var $raw;
      var $thm;
      var $i;
      var $jh=__stackBase__;
      $max_samp=0;
      $raw=-1;
      $thm=-1;
      HEAP32[((_thumb_misc)>>2)]=16;
      var $1=HEAP32[((_thumb_offset)>>2)];
      var $2=((($1))|0)!=0;
      if ($2) { __label__ = 1; break; } else { __label__ = 4; break; }
    case 1: // $3
      var $4=HEAP32[((_ifp)>>2)];
      var $5=HEAP32[((_thumb_offset)>>2)];
      var $6=_fseek($4, $5, 0);
      var $7=_ljpeg_start($jh, 1);
      var $8=((($7))|0)!=0;
      if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $9
      var $10=(($jh)|0);
      var $11=HEAP32[(($10)>>2)];
      HEAP32[((_thumb_misc)>>2)]=$11;
      var $12=(($jh+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)) & 65535);
      HEAP16[((_thumb_width)>>1)]=$14;
      var $15=(($jh+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)) & 65535);
      HEAP16[((_thumb_height)>>1)]=$17;
      __label__ = 3; break;
    case 3: // $18
      __label__ = 4; break;
    case 4: // $19
      $i=0;
      __label__ = 5; break;
    case 5: // $20
      var $21=$i;
      var $22=HEAPU32[((_tiff_nifds)>>2)];
      var $23=((($21))>>>0) < ((($22))>>>0);
      if ($23) { __label__ = 6; break; } else { __label__ = 17; break; }
    case 6: // $24
      var $25=$max_samp;
      var $26=$i;
      var $27=((_tiff_ifd+$26*36)|0);
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($25))|0) < ((($29))|0);
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $31
      var $32=$i;
      var $33=((_tiff_ifd+$32*36)|0);
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      $max_samp=$35;
      __label__ = 8; break;
    case 8: // $36
      var $37=$max_samp;
      var $38=((($37))|0) > 3;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $39
      $max_samp=3;
      __label__ = 10; break;
    case 10: // $40
      var $41=$i;
      var $42=((_tiff_ifd+$41*36)|0);
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44))|0)!=6;
      if ($45) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $46
      var $47=$i;
      var $48=((_tiff_ifd+$47*36)|0);
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50))|0)!=3;
      if ($51) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: // $52
      var $53=$i;
      var $54=((_tiff_ifd+$53*36)|0);
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$i;
      var $58=((_tiff_ifd+$57*36)|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=($56) | ($60);
      var $62=((($61))|0) < 65536;
      if ($62) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $63
      var $64=$i;
      var $65=((_tiff_ifd+$64*36)|0);
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$i;
      var $69=((_tiff_ifd+$68*36)|0);
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($67)*($71))|0);
      var $73=HEAPU16[((_raw_width)>>1)];
      var $74=((($73))&65535);
      var $75=HEAPU16[((_raw_height)>>1)];
      var $76=((($75))&65535);
      var $77=((($74)*($76))|0);
      var $78=((($72))|0) > ((($77))|0);
      if ($78) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $79
      var $80=$i;
      var $81=((_tiff_ifd+$80*36)|0);
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)) & 65535);
      HEAP16[((_raw_width)>>1)]=$84;
      var $85=$i;
      var $86=((_tiff_ifd+$85*36)|0);
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)) & 65535);
      HEAP16[((_raw_height)>>1)]=$89;
      var $90=$i;
      var $91=((_tiff_ifd+$90*36)|0);
      var $92=(($91+8)|0);
      var $93=HEAP32[(($92)>>2)];
      HEAP32[((_tiff_bps)>>2)]=$93;
      var $94=$i;
      var $95=((_tiff_ifd+$94*36)|0);
      var $96=(($95+12)|0);
      var $97=HEAP32[(($96)>>2)];
      HEAP32[((_tiff_compress)>>2)]=$97;
      var $98=$i;
      var $99=((_tiff_ifd+$98*36)|0);
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      HEAP32[((_data_offset)>>2)]=$101;
      var $102=$i;
      var $103=((_tiff_ifd+$102*36)|0);
      var $104=(($103+24)|0);
      var $105=HEAP32[(($104)>>2)];
      HEAP32[((_tiff_flip)>>2)]=$105;
      var $106=$i;
      var $107=((_tiff_ifd+$106*36)|0);
      var $108=(($107+28)|0);
      var $109=HEAP32[(($108)>>2)];
      HEAP32[((_tiff_samples)>>2)]=$109;
      var $110=$i;
      $raw=$110;
      __label__ = 15; break;
    case 15: // $111
      __label__ = 16; break;
    case 16: // $112
      var $113=$i;
      var $114=((($113)+1)|0);
      $i=$114;
      __label__ = 5; break;
    case 17: // $115
      var $116=HEAP32[((_tiff_nifds)>>2)];
      $i=$116;
      __label__ = 18; break;
    case 18: // $117
      var $118=$i;
      var $119=((($118)-1)|0);
      $i=$119;
      var $120=((($118))|0)!=0;
      if ($120) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: // $121
      var $122=$i;
      var $123=((_tiff_ifd+$122*36)|0);
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=((($125))|0)!=0;
      if ($126) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $127
      var $128=$i;
      var $129=((_tiff_ifd+$128*36)|0);
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      HEAP32[((_tiff_flip)>>2)]=$131;
      __label__ = 21; break;
    case 21: // $132
      __label__ = 18; break;
    case 22: // $133
      var $134=$raw;
      var $135=((($134))|0) >= 0;
      if ($135) { __label__ = 23; break; } else { __label__ = 54; break; }
    case 23: // $136
      var $137=HEAP32[((_load_raw)>>2)];
      var $138=((($137))|0)!=0;
      if ($138) { __label__ = 54; break; } else { __label__ = 24; break; }
    case 24: // $139
      var $140=HEAP32[((_tiff_compress)>>2)];
      if ($140 == 0 || $140 == 1) {
        __label__ = 25; break;
      }
      else if ($140 == 6 || $140 == 7 || $140 == 99) {
        __label__ = 36; break;
      }
      else if ($140 == 262) {
        __label__ = 37; break;
      }
      else if ($140 == 32767) {
        __label__ = 38; break;
      }
      else if ($140 == 32769) {
        __label__ = 43; break;
      }
      else if ($140 == 32770 || $140 == 32773) {
        __label__ = 44; break;
      }
      else if ($140 == 34713) {
        __label__ = 45; break;
      }
      else if ($140 == 65535) {
        __label__ = 46; break;
      }
      else if ($140 == 65000) {
        __label__ = 47; break;
      }
      else if ($140 == 32867) {
        __label__ = 53; break;
      }
      else {
      __label__ = 52; break;
      }
      
    case 25: // $141
      var $142=HEAP32[((_tiff_bps)>>2)];
      if ($142 == 8) {
        __label__ = 26; break;
      }
      else if ($142 == 12) {
        __label__ = 27; break;
      }
      else if ($142 == 14 || $142 == 16) {
        __label__ = 32; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 26: // $143
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 33; break;
    case 27: // $144
      HEAP32[((_load_raw)>>2)]=4;
      var $145=$raw;
      var $146=((_tiff_ifd+$145*36)|0);
      var $147=(($146+16)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=((($148))|0)==2;
      if ($149) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: // $150
      HEAP32[((_load_flags)>>2)]=6;
      __label__ = 29; break;
    case 29: // $151
      var $152=_strncmp(((_make)|0), ((__str112)|0), 6);
      var $153=((($152))|0)!=0;
      if ($153) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: // $154
      __label__ = 33; break;
    case 31: // $155
      __label__ = 32; break;
    case 32: // $156
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 33; break;
    case 33: // $157
      var $158=$raw;
      var $159=((_tiff_ifd+$158*36)|0);
      var $160=(($159+32)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)*5)|0);
      var $163=HEAPU16[((_raw_width)>>1)];
      var $164=((($163))&65535);
      var $165=HEAPU16[((_raw_height)>>1)];
      var $166=((($165))&65535);
      var $167=((($164)*($166))|0);
      var $168=(((($167)<<3))|0);
      var $169=((($162))|0)==((($168))|0);
      if ($169) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: // $170
      HEAP32[((_tiff_bps)>>2)]=12;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=81;
      __label__ = 35; break;
    case 35: // $171
      __label__ = 53; break;
    case 36: // $172
      HEAP32[((_load_raw)>>2)]=18;
      __label__ = 53; break;
    case 37: // $173
      HEAP32[((_load_raw)>>2)]=20;
      __label__ = 53; break;
    case 38: // $174
      var $175=$raw;
      var $176=((_tiff_ifd+$175*36)|0);
      var $177=(($176+32)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=HEAPU16[((_raw_width)>>1)];
      var $180=((($179))&65535);
      var $181=HEAPU16[((_raw_height)>>1)];
      var $182=((($181))&65535);
      var $183=((($180)*($182))|0);
      var $184=((($178))|0)==((($183))|0);
      if ($184) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: // $185
      HEAP32[((_tiff_bps)>>2)]=12;
      HEAP32[((_load_raw)>>2)]=22;
      __label__ = 53; break;
    case 40: // $186
      var $187=$raw;
      var $188=((_tiff_ifd+$187*36)|0);
      var $189=(($188+32)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(((($190)<<3))|0);
      var $192=HEAPU16[((_raw_width)>>1)];
      var $193=((($192))&65535);
      var $194=HEAPU16[((_raw_height)>>1)];
      var $195=((($194))&65535);
      var $196=((($193)*($195))|0);
      var $197=HEAP32[((_tiff_bps)>>2)];
      var $198=((($196)*($197))|0);
      var $199=((($191))|0)!=((($198))|0);
      if ($199) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: // $200
      var $201=HEAPU16[((_raw_height)>>1)];
      var $202=((($201))&65535);
      var $203=((($202)+8)|0);
      var $204=((($203)) & 65535);
      HEAP16[((_raw_height)>>1)]=$204;
      HEAP32[((_load_raw)>>2)]=10;
      __label__ = 53; break;
    case 42: // $205
      HEAP32[((_load_flags)>>2)]=79;
      __label__ = 43; break;
    case 43: // $206
      var $207=HEAP32[((_load_flags)>>2)];
      var $208=((($207)+1)|0);
      HEAP32[((_load_flags)>>2)]=$208;
      __label__ = 44; break;
    case 44: // $209
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 53; break;
    case 45: // $210
      HEAP32[((_load_raw)>>2)]=24;
      __label__ = 53; break;
    case 46: // $211
      HEAP32[((_load_raw)>>2)]=26;
      __label__ = 53; break;
    case 47: // $212
      var $213=$raw;
      var $214=((_tiff_ifd+$213*36)|0);
      var $215=(($214+16)|0);
      var $216=HEAP32[(($215)>>2)];
      if ($216 == 2) {
        __label__ = 48; break;
      }
      else if ($216 == 6) {
        __label__ = 49; break;
      }
      else if ($216 == 32803) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 48: // $217
      HEAP32[((_load_raw)>>2)]=28;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 51; break;
    case 49: // $218
      HEAP32[((_load_raw)>>2)]=30;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 51; break;
    case 50: // $219
      HEAP32[((_load_raw)>>2)]=32;
      __label__ = 51; break;
    case 51: // $220
      __label__ = 53; break;
    case 52: // $221
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 53; break;
    case 53: // $222
      __label__ = 54; break;
    case 54: // $223
      var $224=HEAP32[((_dng_version)>>2)];
      var $225=((($224))|0)!=0;
      if ($225) { __label__ = 65; break; } else { __label__ = 55; break; }
    case 55: // $226
      var $227=HEAP32[((_tiff_samples)>>2)];
      var $228=((($227))|0)==3;
      if ($228) { __label__ = 56; break; } else { __label__ = 59; break; }
    case 56: // $229
      var $230=$raw;
      var $231=((_tiff_ifd+$230*36)|0);
      var $232=(($231+32)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=((($233))|0)!=0;
      if ($234) { __label__ = 57; break; } else { __label__ = 59; break; }
    case 57: // $235
      var $236=HEAP32[((_tiff_bps)>>2)];
      var $237=((($236))|0)!=14;
      if ($237) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: // $238
      var $239=HEAP32[((_tiff_bps)>>2)];
      var $240=((($239))|0)!=2048;
      if ($240) { __label__ = 63; break; } else { __label__ = 59; break; }
    case 59: // $241
      var $242=HEAP32[((_tiff_bps)>>2)];
      var $243=((($242))|0)==8;
      if ($243) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: // $244
      var $245=_strstr(((_make)|0), ((__str7)|0));
      var $246=((($245))|0)!=0;
      if ($246) { __label__ = 64; break; } else { __label__ = 61; break; }
    case 61: // $247
      var $248=_strstr(((_make)|0), ((__str171)|0));
      var $249=((($248))|0)!=0;
      if ($249) { __label__ = 64; break; } else { __label__ = 62; break; }
    case 62: // $250
      var $251=_strstr(((_model2)|0), ((__str172)|0));
      var $252=((($251))|0)!=0;
      if ($252) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: // $253
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 64; break;
    case 64: // $254
      __label__ = 65; break;
    case 65: // $255
      $i=0;
      __label__ = 66; break;
    case 66: // $256
      var $257=$i;
      var $258=HEAPU32[((_tiff_nifds)>>2)];
      var $259=((($257))>>>0) < ((($258))>>>0);
      if ($259) { __label__ = 67; break; } else { __label__ = 73; break; }
    case 67: // $260
      var $261=$i;
      var $262=$raw;
      var $263=((($261))|0)!=((($262))|0);
      if ($263) { __label__ = 68; break; } else { __label__ = 71; break; }
    case 68: // $264
      var $265=$i;
      var $266=((_tiff_ifd+$265*36)|0);
      var $267=(($266+28)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$max_samp;
      var $270=((($268))|0)==((($269))|0);
      if ($270) { __label__ = 69; break; } else { __label__ = 71; break; }
    case 69: // $271
      var $272=$i;
      var $273=((_tiff_ifd+$272*36)|0);
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=$i;
      var $277=((_tiff_ifd+$276*36)|0);
      var $278=(($277+4)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=((($275)*($279))|0);
      var $281=$i;
      var $282=((_tiff_ifd+$281*36)|0);
      var $283=(($282+8)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=((($284)+1)|0);
      var $286=$i;
      var $287=((_tiff_ifd+$286*36)|0);
      var $288=(($287+8)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=((($289)+1)|0);
      var $291=((($285)*($290))|0);
      var $292=((((($280))|0)/((($291))|0))|0);
      var $293=HEAPU16[((_thumb_width)>>1)];
      var $294=((($293))&65535);
      var $295=HEAPU16[((_thumb_height)>>1)];
      var $296=((($295))&65535);
      var $297=((($294)*($296))|0);
      var $298=HEAP32[((_thumb_misc)>>2)];
      var $299=((($298)+1)|0);
      var $300=HEAP32[((_thumb_misc)>>2)];
      var $301=((($300)+1)|0);
      var $302=((($299)*($301))|0);
      var $303=Math.floor(((($297))>>>0)/((($302))>>>0));
      var $304=((($292))>>>0) > ((($303))>>>0);
      if ($304) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: // $305
      var $306=$i;
      var $307=((_tiff_ifd+$306*36)|0);
      var $308=(($307)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=((($309)) & 65535);
      HEAP16[((_thumb_width)>>1)]=$310;
      var $311=$i;
      var $312=((_tiff_ifd+$311*36)|0);
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=((($314)) & 65535);
      HEAP16[((_thumb_height)>>1)]=$315;
      var $316=$i;
      var $317=((_tiff_ifd+$316*36)|0);
      var $318=(($317+20)|0);
      var $319=HEAP32[(($318)>>2)];
      HEAP32[((_thumb_offset)>>2)]=$319;
      var $320=$i;
      var $321=((_tiff_ifd+$320*36)|0);
      var $322=(($321+32)|0);
      var $323=HEAP32[(($322)>>2)];
      HEAP32[((_thumb_length)>>2)]=$323;
      var $324=$i;
      var $325=((_tiff_ifd+$324*36)|0);
      var $326=(($325+8)|0);
      var $327=HEAP32[(($326)>>2)];
      HEAP32[((_thumb_misc)>>2)]=$327;
      var $328=$i;
      $thm=$328;
      __label__ = 71; break;
    case 71: // $329
      __label__ = 72; break;
    case 72: // $330
      var $331=$i;
      var $332=((($331)+1)|0);
      $i=$332;
      __label__ = 66; break;
    case 73: // $333
      var $334=$thm;
      var $335=((($334))|0) >= 0;
      if ($335) { __label__ = 74; break; } else { __label__ = 82; break; }
    case 74: // $336
      var $337=$thm;
      var $338=((_tiff_ifd+$337*36)|0);
      var $339=(($338+28)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=($340) << 5;
      var $342=HEAP32[((_thumb_misc)>>2)];
      var $343=($342) | ($341);
      HEAP32[((_thumb_misc)>>2)]=$343;
      var $344=$thm;
      var $345=((_tiff_ifd+$344*36)|0);
      var $346=(($345+12)|0);
      var $347=HEAP32[(($346)>>2)];
      if ($347 == 0) {
        __label__ = 75; break;
      }
      else if ($347 == 1) {
        __label__ = 76; break;
      }
      else if ($347 == 65000) {
        __label__ = 80; break;
      }
      else {
      __label__ = 81; break;
      }
      
    case 75: // $348
      HEAP32[((_write_thumb)>>2)]=34;
      __label__ = 81; break;
    case 76: // $349
      var $350=$thm;
      var $351=((_tiff_ifd+$350*36)|0);
      var $352=(($351+8)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=((($353))|0) > 8;
      if ($354) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: // $355
      HEAP32[((_thumb_load_raw)>>2)]=36;
      __label__ = 79; break;
    case 78: // $356
      HEAP32[((_write_thumb)>>2)]=38;
      __label__ = 79; break;
    case 79: // $357
      __label__ = 81; break;
    case 80: // $358
      var $359=$thm;
      var $360=((_tiff_ifd+$359*36)|0);
      var $361=(($360+16)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=((($362))|0)==6;
      var $364=($363) ? 30 : 28;
      HEAP32[((_thumb_load_raw)>>2)]=$364;
      __label__ = 81; break;
    case 81: // $365
      __label__ = 82; break;
    case 82: // $366
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_apply_tiff["X"]=1;

function _parse_external_jpeg() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $file;
      var $ext;
      var $jname;
      var $jfile;
      var $jext;
      var $save;
      var $1=HEAP32[((_ifp)>>2)];
      $save=$1;
      var $2=HEAP32[((_ifname)>>2)];
      var $3=_strrchr($2, 46);
      $ext=$3;
      var $4=HEAP32[((_ifname)>>2)];
      var $5=_strrchr($4, 47);
      $file=$5;
      var $6=$file;
      var $7=((($6))|0)!=0;
      if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $8
      var $9=HEAP32[((_ifname)>>2)];
      var $10=_strrchr($9, 92);
      $file=$10;
      __label__ = 2; break;
    case 2: // $11
      var $12=$file;
      var $13=((($12))|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $14
      var $15=HEAP32[((_ifname)>>2)];
      var $16=(($15-1)|0);
      $file=$16;
      __label__ = 4; break;
    case 4: // $17
      var $18=$file;
      var $19=(($18+1)|0);
      $file=$19;
      var $20=$ext;
      var $21=((($20))|0)!=0;
      if ($21) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: // $22
      var $23=$ext;
      var $24=_strlen($23);
      var $25=((($24))|0)!=4;
      if ($25) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: // $26
      var $27=$ext;
      var $28=$file;
      var $29=($27);
      var $30=($28);
      var $31=((($29)-($30))|0);
      var $32=((($31))|0)!=8;
      if ($32) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $33
      __label__ = 27; break;
    case 8: // $34
      var $35=HEAP32[((_ifname)>>2)];
      var $36=_strlen($35);
      var $37=((($36)+1)|0);
      var $38=_malloc($37);
      $jname=$38;
      var $39=$jname;
      _merror($39, ((__str174)|0));
      var $40=$jname;
      var $41=HEAP32[((_ifname)>>2)];
      var $42=_strcpy($40, $41);
      var $43=$file;
      var $44=HEAP32[((_ifname)>>2)];
      var $45=($43);
      var $46=($44);
      var $47=((($45)-($46))|0);
      var $48=$jname;
      var $49=(($48+$47)|0);
      $jfile=$49;
      var $50=$ext;
      var $51=HEAP32[((_ifname)>>2)];
      var $52=($50);
      var $53=($51);
      var $54=((($52)-($53))|0);
      var $55=$jname;
      var $56=(($55+$54)|0);
      $jext=$56;
      var $57=$ext;
      var $58=_strcasecmp($57, ((__str175)|0));
      var $59=((($58))|0)!=0;
      if ($59) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: // $60
      var $61=$jext;
      var $62=$ext;
      var $63=(($62+1)|0);
      var $64=HEAP8[($63)];
      var $65=((($64) << 24) >> 24);
      var $66=_isupper($65);
      var $67=((($66))|0)!=0;
      var $68=($67) ? (((__str176)|0)) : (((__str175)|0));
      var $69=_strcpy($61, $68);
      var $70=$file;
      var $71=HEAP8[($70)];
      var $72=((($71) << 24) >> 24);
      var $73=_isdigit($72);
      var $74=((($73))|0)!=0;
      if ($74) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $75
      var $76=$jfile;
      var $77=$file;
      var $78=(($77+4)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($76)]=HEAP8[($78)]; HEAP8[($76+1)]=HEAP8[($78+1)]; HEAP8[($76+2)]=HEAP8[($78+2)]; HEAP8[($76+3)]=HEAP8[($78+3)];
      var $79=$jfile;
      var $80=(($79+4)|0);
      var $81=$file;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($80)]=HEAP8[($81)]; HEAP8[($80+1)]=HEAP8[($81+1)]; HEAP8[($80+2)]=HEAP8[($81+2)]; HEAP8[($80+3)]=HEAP8[($81+3)];
      __label__ = 11; break;
    case 11: // $82
      __label__ = 18; break;
    case 12: // $83
      __label__ = 13; break;
    case 13: // $84
      var $85=$jext;
      var $86=(($85-1)|0);
      $jext=$86;
      var $87=HEAP8[($86)];
      var $88=((($87) << 24) >> 24);
      var $89=_isdigit($88);
      var $90=((($89))|0)!=0;
      if ($90) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: // $91
      var $92=$jext;
      var $93=HEAP8[($92)];
      var $94=((($93) << 24) >> 24);
      var $95=((($94))|0)!=57;
      if ($95) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $96
      var $97=$jext;
      var $98=HEAP8[($97)];
      var $99=((($98)+1)&255);
      HEAP8[($97)]=$99;
      __label__ = 17; break;
    case 16: // $100
      var $101=$jext;
      HEAP8[($101)]=48;
      __label__ = 13; break;
    case 17: // $102
      __label__ = 18; break;
    case 18: // $103
      var $104=$jname;
      var $105=HEAP32[((_ifname)>>2)];
      var $106=_strcmp($104, $105);
      var $107=((($106))|0)!=0;
      if ($107) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: // $108
      var $109=$jname;
      var $110=_fopen($109, ((__str63)|0));
      HEAP32[((_ifp)>>2)]=$110;
      var $111=((($110))|0)!=0;
      if ($111) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: // $112
      var $113=HEAP32[((_verbose)>>2)];
      var $114=((($113))|0)!=0;
      if ($114) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $115
      var $116=HEAP32[((__impure_ptr)>>2)];
      var $117=(($116+12)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$jname;
      var $120=_fprintf($118, ((__str177)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$119,tempInt));
      __label__ = 22; break;
    case 22: // $121
      var $122=_parse_tiff(12);
      HEAP32[((_thumb_offset)>>2)]=0;
      HEAP32[((_is_raw)>>2)]=1;
      var $123=HEAP32[((_ifp)>>2)];
      var $124=_fclose($123);
      __label__ = 23; break;
    case 23: // $125
      __label__ = 24; break;
    case 24: // $126
      var $127=HEAP32[((_timestamp)>>2)];
      var $128=((($127))|0)!=0;
      if ($128) { __label__ = 26; break; } else { __label__ = 25; break; }
    case 25: // $129
      var $130=HEAP32[((__impure_ptr)>>2)];
      var $131=(($130+12)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$jname;
      var $134=_fprintf($132, ((__str178)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$133,tempInt));
      __label__ = 26; break;
    case 26: // $135
      var $136=$jname;
      _free($136);
      var $137=$save;
      HEAP32[((_ifp)>>2)]=$137;
      __label__ = 27; break;
    case 27: // $138
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_external_jpeg["X"]=1;

function _ciff_block_1030() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $bpp;
      var $row;
      var $col;
      var $vbits;
      var $bitbuf;
      $vbits=0;
      $bitbuf=0;
      var $1=_get2();
      var $2=_get4();
      var $3=((($2))|0)!=524296;
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $4
      var $5=_get4();
      var $6=((($5))|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: // $7
      __label__ = 16; break;
    case 3: // $8
      var $9=_get2();
      var $10=((($9))&65535);
      $bpp=$10;
      var $11=$bpp;
      var $12=((($11))|0)!=10;
      if ($12) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $13
      var $14=$bpp;
      var $15=((($14))|0)!=12;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $16
      __label__ = 16; break;
    case 6: // $17
      $row=0;
      $i=0;
      __label__ = 7; break;
    case 7: // $18
      var $19=$row;
      var $20=((($19))|0) < 8;
      if ($20) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: // $21
      $col=0;
      __label__ = 9; break;
    case 9: // $22
      var $23=$col;
      var $24=((($23))|0) < 8;
      if ($24) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: // $25
      var $26=$vbits;
      var $27=$bpp;
      var $28=((($26))|0) < ((($27))|0);
      if ($28) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $29
      var $30=$bitbuf;
      var $31=($30) << 16;
      var $32=_get2();
      var $33=((($32))&65535);
      var $34=$i;
      var $35=((($34)+1)|0);
      $i=$35;
      var $36=($34) & 1;
      var $37=((_ciff_block_1030_key+($36<<1))|0);
      var $38=HEAPU16[(($37)>>1)];
      var $39=((($38))&65535);
      var $40=($33) ^ ($39);
      var $41=($31) | ($40);
      $bitbuf=$41;
      var $42=$vbits;
      var $43=((($42)+16)|0);
      $vbits=$43;
      __label__ = 12; break;
    case 12: // $44
      var $45=$bitbuf;
      var $46=$vbits;
      var $47=((32-($46))|0);
      var $48=($45) << ($47);
      var $49=$bpp;
      var $50=((32-($49))|0);
      var $51=($48) >>> ((($50))>>>0);
      var $52=((($51)) & 65535);
      var $53=$col;
      var $54=$row;
      var $55=((_white+($54<<4))|0);
      var $56=(($55+($53<<1))|0);
      HEAP16[(($56)>>1)]=$52;
      var $57=$bpp;
      var $58=$vbits;
      var $59=((($58)-($57))|0);
      $vbits=$59;
      __label__ = 13; break;
    case 13: // $60
      var $61=$col;
      var $62=((($61)+1)|0);
      $col=$62;
      __label__ = 9; break;
    case 14: // $63
      __label__ = 15; break;
    case 15: // $64
      var $65=$row;
      var $66=((($65)+1)|0);
      $row=$66;
      __label__ = 7; break;
    case 16: // $67
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ciff_block_1030["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _parse_ciff($offset, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $tboff;
      var $nrecs;
      var $c;
      var $type;
      var $len;
      var $save;
      var $wbi;
      var $key=__stackBase__;
      $1=$offset;
      $2=$length;
      $wbi=-1;
      var $3=$key;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($3)>>1)]=HEAP16[(((_parse_ciff_key))>>1)]; HEAP16[(($3+2)>>1)]=HEAP16[(((_parse_ciff_key)+2)>>1)];
      var $4=HEAP32[((_ifp)>>2)];
      var $5=$1;
      var $6=$2;
      var $7=((($5)+($6))|0);
      var $8=((($7)-4)|0);
      var $9=_fseek($4, $8, 0);
      var $10=_get4();
      var $11=$1;
      var $12=((($10)+($11))|0);
      $tboff=$12;
      var $13=HEAP32[((_ifp)>>2)];
      var $14=$tboff;
      var $15=_fseek($13, $14, 0);
      var $16=_get2();
      var $17=((($16))&65535);
      $nrecs=$17;
      var $18=$nrecs;
      var $19=((($18))|0) > 100;
      if ($19) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $20
      __label__ = 89; break;
    case 2: // $21
      __label__ = 3; break;
    case 3: // $22
      var $23=$nrecs;
      var $24=((($23)-1)|0);
      $nrecs=$24;
      var $25=((($23))|0)!=0;
      if ($25) { __label__ = 4; break; } else { __label__ = 89; break; }
    case 4: // $26
      var $27=_get2();
      var $28=((($27))&65535);
      $type=$28;
      var $29=_get4();
      $len=$29;
      var $30=HEAP32[((_ifp)>>2)];
      var $31=_ftell($30);
      var $32=((($31)+4)|0);
      $save=$32;
      var $33=HEAP32[((_ifp)>>2)];
      var $34=$1;
      var $35=_get4();
      var $36=((($34)+($35))|0);
      var $37=_fseek($33, $36, 0);
      var $38=$type;
      var $39=($38) >> 8;
      var $40=((($39)+8)|0);
      var $41=($40) | 8;
      var $42=((($41))|0)==56;
      if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $43
      var $44=HEAP32[((_ifp)>>2)];
      var $45=_ftell($44);
      var $46=$len;
      _parse_ciff($45, $46);
      __label__ = 6; break;
    case 6: // $47
      var $48=$type;
      var $49=((($48))|0)==2064;
      if ($49) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $50
      var $51=HEAP32[((_ifp)>>2)];
      var $52=_fread(((_artist)|0), 64, 1, $51);
      __label__ = 8; break;
    case 8: // $53
      var $54=$type;
      var $55=((($54))|0)==2058;
      if ($55) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $56
      var $57=HEAP32[((_ifp)>>2)];
      var $58=_fread(((_make)|0), 64, 1, $57);
      var $59=HEAP32[((_ifp)>>2)];
      var $60=_strlen(((_make)|0));
      var $61=((($60)-63)|0);
      var $62=_fseek($59, $61, 1);
      var $63=HEAP32[((_ifp)>>2)];
      var $64=_fread(((_model)|0), 64, 1, $63);
      __label__ = 10; break;
    case 10: // $65
      var $66=$type;
      var $67=((($66))|0)==6160;
      if ($67) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $68
      var $69=HEAP32[((_ifp)>>2)];
      var $70=_fseek($69, 12, 1);
      var $71=_get4();
      HEAP32[((_flip)>>2)]=$71;
      __label__ = 12; break;
    case 12: // $72
      var $73=$type;
      var $74=((($73))|0)==6197;
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $75
      var $76=_get4();
      HEAP32[((_tiff_compress)>>2)]=$76;
      __label__ = 14; break;
    case 14: // $77
      var $78=$type;
      var $79=((($78))|0)==8199;
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $80
      var $81=HEAP32[((_ifp)>>2)];
      var $82=_ftell($81);
      HEAP32[((_thumb_offset)>>2)]=$82;
      var $83=$len;
      HEAP32[((_thumb_length)>>2)]=$83;
      __label__ = 16; break;
    case 16: // $84
      var $85=$type;
      var $86=((($85))|0)==6168;
      if ($86) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $87
      var $88=_get4();
      var $89=_get4();
      var $90=_int_to_float($89);
      var $91=(-($90));
      var $92=($91);
      var $93=_llvm_pow_f64(2, $92);
      var $94=($93);
      HEAPF32[((_shutter)>>2)]=$94;
      var $95=_get4();
      var $96=_int_to_float($95);
      var $97=($96)/2;
      var $98=($97);
      var $99=_llvm_pow_f64(2, $98);
      var $100=($99);
      HEAPF32[((_aperture)>>2)]=$100;
      __label__ = 18; break;
    case 18: // $101
      var $102=$type;
      var $103=((($102))|0)==4138;
      if ($103) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: // $104
      var $105=_get4();
      var $106=_get2();
      var $107=((($106))&65535);
      var $108=((($107))|0);
      var $109=($108)/32;
      var $110=($109)-4;
      var $111=_llvm_pow_f64(2, $110);
      var $112=($111)*50;
      var $113=($112);
      HEAPF32[((_iso_speed)>>2)]=$113;
      var $114=_get2();
      var $115=_get2();
      var $116=((($115) << 16) >> 16);
      var $117=((($116))|0);
      var $118=($117)/64;
      var $119=_llvm_pow_f64(2, $118);
      var $120=($119);
      HEAPF32[((_aperture)>>2)]=$120;
      var $121=_get2();
      var $122=((($121) << 16) >> 16);
      var $123=(((-($122)))|0);
      var $124=((($123))|0);
      var $125=($124)/32;
      var $126=_llvm_pow_f64(2, $125);
      var $127=($126);
      HEAPF32[((_shutter)>>2)]=$127;
      var $128=_get2();
      var $129=_get2();
      var $130=((($129))&65535);
      $wbi=$130;
      var $131=$wbi;
      var $132=((($131))|0) > 17;
      if ($132) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $133
      $wbi=0;
      __label__ = 21; break;
    case 21: // $134
      var $135=HEAP32[((_ifp)>>2)];
      var $136=_fseek($135, 32, 1);
      var $137=HEAPF32[((_shutter)>>2)];
      var $138=($137);
      var $139=($138) > 1000000;
      if ($139) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $140
      var $141=_get2();
      var $142=((($141))&65535);
      var $143=((($142))|0);
      var $144=($143)/10;
      var $145=($144);
      HEAPF32[((_shutter)>>2)]=$145;
      __label__ = 23; break;
    case 23: // $146
      __label__ = 24; break;
    case 24: // $147
      var $148=$type;
      var $149=((($148))|0)==4140;
      if ($149) { __label__ = 25; break; } else { __label__ = 37; break; }
    case 25: // $150
      var $151=_get2();
      var $152=((($151))&65535);
      var $153=((($152))|0) > 512;
      if ($153) { __label__ = 26; break; } else { __label__ = 31; break; }
    case 26: // $154
      var $155=HEAP32[((_ifp)>>2)];
      var $156=_fseek($155, 118, 1);
      $c=0;
      __label__ = 27; break;
    case 27: // $157
      var $158=$c;
      var $159=((($158))|0) < 4;
      if ($159) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $160
      var $161=_get2();
      var $162=((($161))&65535);
      var $163=$c;
      var $164=($163) ^ 2;
      var $165=((_cam_mul+($164<<2))|0);
      HEAPF32[(($165)>>2)]=$162;
      __label__ = 29; break;
    case 29: // $166
      var $167=$c;
      var $168=((($167)+1)|0);
      $c=$168;
      __label__ = 27; break;
    case 30: // $169
      __label__ = 36; break;
    case 31: // $170
      var $171=HEAP32[((_ifp)>>2)];
      var $172=_fseek($171, 98, 1);
      $c=0;
      __label__ = 32; break;
    case 32: // $173
      var $174=$c;
      var $175=((($174))|0) < 4;
      if ($175) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: // $176
      var $177=_get2();
      var $178=((($177))&65535);
      var $179=$c;
      var $180=$c;
      var $181=($180) >> 1;
      var $182=($179) ^ ($181);
      var $183=($182) ^ 1;
      var $184=((_cam_mul+($183<<2))|0);
      HEAPF32[(($184)>>2)]=$178;
      __label__ = 34; break;
    case 34: // $185
      var $186=$c;
      var $187=((($186)+1)|0);
      $c=$187;
      __label__ = 32; break;
    case 35: // $188
      __label__ = 36; break;
    case 36: // $189
      __label__ = 37; break;
    case 37: // $190
      var $191=$type;
      var $192=((($191))|0)==50;
      if ($192) { __label__ = 38; break; } else { __label__ = 59; break; }
    case 38: // $193
      var $194=$len;
      var $195=((($194))|0)==768;
      if ($195) { __label__ = 39; break; } else { __label__ = 46; break; }
    case 39: // $196
      var $197=HEAP32[((_ifp)>>2)];
      var $198=_fseek($197, 72, 1);
      $c=0;
      __label__ = 40; break;
    case 40: // $199
      var $200=$c;
      var $201=((($200))|0) < 4;
      if ($201) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: // $202
      var $203=_get2();
      var $204=((($203))&65535);
      var $205=((($204))|0);
      var $206=1024/($205);
      var $207=($206);
      var $208=$c;
      var $209=$c;
      var $210=($209) >> 1;
      var $211=($208) ^ ($210);
      var $212=((_cam_mul+($211<<2))|0);
      HEAPF32[(($212)>>2)]=$207;
      __label__ = 42; break;
    case 42: // $213
      var $214=$c;
      var $215=((($214)+1)|0);
      $c=$215;
      __label__ = 40; break;
    case 43: // $216
      var $217=$wbi;
      var $218=((($217))|0)!=0;
      if ($218) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: // $219
      HEAPF32[((((_cam_mul)|0))>>2)]=-1;
      __label__ = 45; break;
    case 45: // $220
      __label__ = 58; break;
    case 46: // $221
      var $222=HEAPF32[((((_cam_mul)|0))>>2)];
      var $223=($222) != 0;
      if ($223) { __label__ = 57; break; } else { __label__ = 47; break; }
    case 47: // $224
      var $225=_get2();
      var $226=((($225))&65535);
      var $227=(($key)|0);
      var $228=HEAPU16[(($227)>>1)];
      var $229=((($228))&65535);
      var $230=((($226))|0)==((($229))|0);
      if ($230) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: // $231
      var $232=$wbi;
      var $233=_strstr(((_model)|0), ((__str179)|0));
      var $234=((($233))|0)!=0;
      var $235=($234) ? (((__str180)|0)) : (((__str181)|0));
      var $236=(($235+$232)|0);
      var $237=HEAP8[($236)];
      var $238=((($237) << 24) >> 24);
      var $239=((($238)-48)|0);
      var $240=((($239)+2)|0);
      $c=$240;
      __label__ = 50; break;
    case 49: // $241
      var $242=$wbi;
      var $243=((__str182+$242)|0);
      var $244=HEAP8[($243)];
      var $245=((($244) << 24) >> 24);
      var $246=((($245)-48)|0);
      $c=$246;
      var $247=(($key+2)|0);
      HEAP16[(($247)>>1)]=0;
      var $248=(($key)|0);
      HEAP16[(($248)>>1)]=0;
      __label__ = 50; break;
    case 50: // $249
      var $250=HEAP32[((_ifp)>>2)];
      var $251=$c;
      var $252=(((($251)<<3))|0);
      var $253=((($252)+78)|0);
      var $254=_fseek($250, $253, 1);
      $c=0;
      __label__ = 51; break;
    case 51: // $255
      var $256=$c;
      var $257=((($256))|0) < 4;
      if ($257) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: // $258
      var $259=_get2();
      var $260=((($259))&65535);
      var $261=$c;
      var $262=($261) & 1;
      var $263=(($key+($262<<1))|0);
      var $264=HEAPU16[(($263)>>1)];
      var $265=((($264))&65535);
      var $266=($260) ^ ($265);
      var $267=((($266))|0);
      var $268=$c;
      var $269=$c;
      var $270=($269) >> 1;
      var $271=($268) ^ ($270);
      var $272=($271) ^ 1;
      var $273=((_cam_mul+($272<<2))|0);
      HEAPF32[(($273)>>2)]=$267;
      __label__ = 53; break;
    case 53: // $274
      var $275=$c;
      var $276=((($275)+1)|0);
      $c=$276;
      __label__ = 51; break;
    case 54: // $277
      var $278=$wbi;
      var $279=((($278))|0)!=0;
      if ($279) { __label__ = 56; break; } else { __label__ = 55; break; }
    case 55: // $280
      HEAPF32[((((_cam_mul)|0))>>2)]=-1;
      __label__ = 56; break;
    case 56: // $281
      __label__ = 57; break;
    case 57: // $282
      __label__ = 58; break;
    case 58: // $283
      __label__ = 59; break;
    case 59: // $284
      var $285=$type;
      var $286=((($285))|0)==4265;
      if ($286) { __label__ = 60; break; } else { __label__ = 67; break; }
    case 60: // $287
      var $288=$len;
      var $289=((($288))|0) > 66;
      if ($289) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $290
      var $291=$wbi;
      var $292=((__str183+$291)|0);
      var $293=HEAP8[($292)];
      var $294=((($293) << 24) >> 24);
      var $295=((($294)-48)|0);
      $wbi=$295;
      __label__ = 62; break;
    case 62: // $296
      var $297=HEAP32[((_ifp)>>2)];
      var $298=$wbi;
      var $299=(((($298)<<3))|0);
      var $300=((($299)+2)|0);
      var $301=_fseek($297, $300, 1);
      $c=0;
      __label__ = 63; break;
    case 63: // $302
      var $303=$c;
      var $304=((($303))|0) < 4;
      if ($304) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 64: // $305
      var $306=_get2();
      var $307=((($306))&65535);
      var $308=$c;
      var $309=$c;
      var $310=($309) >> 1;
      var $311=($308) ^ ($310);
      var $312=((_cam_mul+($311<<2))|0);
      HEAPF32[(($312)>>2)]=$307;
      __label__ = 65; break;
    case 65: // $313
      var $314=$c;
      var $315=((($314)+1)|0);
      $c=$315;
      __label__ = 63; break;
    case 66: // $316
      __label__ = 67; break;
    case 67: // $317
      var $318=$type;
      var $319=((($318))|0)==4144;
      if ($319) { __label__ = 68; break; } else { __label__ = 70; break; }
    case 68: // $320
      var $321=$wbi;
      var $322=98368 >> ((($321))|0);
      var $323=($322) & 1;
      var $324=((($323))|0)!=0;
      if ($324) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: // $325
      _ciff_block_1030();
      __label__ = 70; break;
    case 70: // $326
      var $327=$type;
      var $328=((($327))|0)==4145;
      if ($328) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: // $329
      var $330=_get2();
      var $331=_get2();
      HEAP16[((_raw_width)>>1)]=$331;
      var $332=_get2();
      HEAP16[((_raw_height)>>1)]=$332;
      __label__ = 72; break;
    case 72: // $333
      var $334=$type;
      var $335=((($334))|0)==20521;
      if ($335) { __label__ = 73; break; } else { __label__ = 76; break; }
    case 73: // $336
      var $337=$len;
      var $338=($337) >> 16;
      var $339=((($338))|0);
      HEAPF32[((_focal_len)>>2)]=$339;
      var $340=$len;
      var $341=($340) & 65535;
      var $342=((($341))|0)==2;
      if ($342) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: // $343
      var $344=HEAPF32[((_focal_len)>>2)];
      var $345=($344)/32;
      HEAPF32[((_focal_len)>>2)]=$345;
      __label__ = 75; break;
    case 75: // $346
      __label__ = 76; break;
    case 76: // $347
      var $348=$type;
      var $349=((($348))|0)==22547;
      if ($349) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: // $350
      var $351=$len;
      var $352=_int_to_float($351);
      HEAPF32[((_flash_used)>>2)]=$352;
      __label__ = 78; break;
    case 78: // $353
      var $354=$type;
      var $355=((($354))|0)==22548;
      if ($355) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: // $356
      var $357=$len;
      var $358=_int_to_float($357);
      HEAPF32[((_canon_ev)>>2)]=$358;
      __label__ = 80; break;
    case 80: // $359
      var $360=$type;
      var $361=((($360))|0)==22551;
      if ($361) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: // $362
      var $363=$len;
      HEAP32[((_shot_order)>>2)]=$363;
      __label__ = 82; break;
    case 82: // $364
      var $365=$type;
      var $366=((($365))|0)==22580;
      if ($366) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: // $367
      var $368=$len;
      HEAP32[((_unique_id)>>2)]=$368;
      __label__ = 84; break;
    case 84: // $369
      var $370=$type;
      var $371=((($370))|0)==22542;
      if ($371) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: // $372
      var $373=$len;
      HEAP32[((_timestamp)>>2)]=$373;
      __label__ = 86; break;
    case 86: // $374
      var $375=$type;
      var $376=((($375))|0)==6158;
      if ($376) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: // $377
      var $378=_get4();
      HEAP32[((_timestamp)>>2)]=$378;
      __label__ = 88; break;
    case 88: // $379
      var $380=HEAP32[((_ifp)>>2)];
      var $381=$save;
      var $382=_fseek($380, $381, 0);
      __label__ = 3; break;
    case 89: // $383
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_ciff["X"]=1;

function _parse_rollei() {
  var __stackBase__  = STACKTOP; STACKTOP += 172; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $line=__stackBase__;
      var $val;
      var $t=__stackBase__+128;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 0, 0);
      var $3=$t;
      _memset($3, 0, 44, 1);
      __label__ = 1; break;
    case 1: // $4
      var $5=(($line)|0);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_fgets($5, 128, $6);
      var $8=(($line)|0);
      var $9=_strchr($8, 61);
      $val=$9;
      var $10=((($9))|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $11
      var $12=$val;
      var $13=(($12+1)|0);
      $val=$13;
      HEAP8[($12)]=0;
      __label__ = 4; break;
    case 3: // $14
      var $15=(($line)|0);
      var $16=(($line)|0);
      var $17=_strlen($16);
      var $18=(($15+$17)|0);
      $val=$18;
      __label__ = 4; break;
    case 4: // $19
      var $20=(($line)|0);
      var $21=_strcmp($20, ((__str184)|0));
      var $22=((($21))|0)!=0;
      if ($22) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: // $23
      var $24=$val;
      var $25=(($t+12)|0);
      var $26=(($t+16)|0);
      var $27=(($t+20)|0);
      var $28=_sscanf($24, ((__str8)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,HEAP32[((tempInt+4)>>2)]=$26,HEAP32[((tempInt+8)>>2)]=$27,tempInt));
      __label__ = 6; break;
    case 6: // $29
      var $30=(($line)|0);
      var $31=_strcmp($30, ((__str185)|0));
      var $32=((($31))|0)!=0;
      if ($32) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: // $33
      var $34=$val;
      var $35=(($t+8)|0);
      var $36=(($t+4)|0);
      var $37=(($t)|0);
      var $38=_sscanf($34, ((__str186)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,HEAP32[((tempInt+4)>>2)]=$36,HEAP32[((tempInt+8)>>2)]=$37,tempInt));
      __label__ = 8; break;
    case 8: // $39
      var $40=(($line)|0);
      var $41=_strcmp($40, ((__str187)|0));
      var $42=((($41))|0)!=0;
      if ($42) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: // $43
      var $44=$val;
      var $45=_atoi($44);
      HEAP32[((_thumb_offset)>>2)]=$45;
      __label__ = 10; break;
    case 10: // $46
      var $47=(($line)|0);
      var $48=_strcmp($47, ((__str188)|0));
      var $49=((($48))|0)!=0;
      if ($49) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: // $50
      var $51=$val;
      var $52=_atoi($51);
      var $53=((($52)) & 65535);
      HEAP16[((_raw_width)>>1)]=$53;
      __label__ = 12; break;
    case 12: // $54
      var $55=(($line)|0);
      var $56=_strcmp($55, ((__str189)|0));
      var $57=((($56))|0)!=0;
      if ($57) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: // $58
      var $59=$val;
      var $60=_atoi($59);
      var $61=((($60)) & 65535);
      HEAP16[((_raw_height)>>1)]=$61;
      __label__ = 14; break;
    case 14: // $62
      var $63=(($line)|0);
      var $64=_strcmp($63, ((__str190)|0));
      var $65=((($64))|0)!=0;
      if ($65) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: // $66
      var $67=$val;
      var $68=_atoi($67);
      var $69=((($68)) & 65535);
      HEAP16[((_thumb_width)>>1)]=$69;
      __label__ = 16; break;
    case 16: // $70
      var $71=(($line)|0);
      var $72=_strcmp($71, ((__str191)|0));
      var $73=((($72))|0)!=0;
      if ($73) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: // $74
      var $75=$val;
      var $76=_atoi($75);
      var $77=((($76)) & 65535);
      HEAP16[((_thumb_height)>>1)]=$77;
      __label__ = 18; break;
    case 18: // $78
      __label__ = 19; break;
    case 19: // $79
      var $80=(($line)|0);
      var $81=_strncmp($80, ((__str192)|0), 4);
      var $82=((($81))|0)!=0;
      if ($82) { __label__ = 1; break; } else { __label__ = 20; break; }
    case 20: // $83
      var $84=HEAP32[((_thumb_offset)>>2)];
      var $85=HEAPU16[((_thumb_width)>>1)];
      var $86=((($85))&65535);
      var $87=HEAPU16[((_thumb_height)>>1)];
      var $88=((($87))&65535);
      var $89=((($86)*($88))|0);
      var $90=(((($89)<<1))|0);
      var $91=((($84)+($90))|0);
      HEAP32[((_data_offset)>>2)]=$91;
      var $92=(($t+20)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)-1900)|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=(($t+16)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)-1)|0);
      HEAP32[(($95)>>2)]=$97;
      var $98=_mktime($t);
      var $99=((($98))|0) > 0;
      if ($99) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: // $100
      var $101=_mktime($t);
      HEAP32[((_timestamp)>>2)]=$101;
      __label__ = 22; break;
    case 22: // $102
      var $103=_strcpy(((_make)|0), ((__str193)|0));
      var $104=_strcpy(((_model)|0), ((__str194)|0));
      HEAP32[((_write_thumb)>>2)]=40;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_rollei["X"]=1;

function _parse_sinar_ia() {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $entries;
      var $off;
      var $str=__stackBase__;
      var $cp;
      HEAP16[((_order)>>1)]=18761;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 4, 0);
      var $3=_get4();
      $entries=$3;
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_get4();
      var $6=_fseek($4, $5, 0);
      __label__ = 1; break;
    case 1: // $7
      var $8=$entries;
      var $9=((($8)-1)|0);
      $entries=$9;
      var $10=((($8))|0)!=0;
      if ($10) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: // $11
      var $12=_get4();
      $off=$12;
      var $13=_get4();
      var $14=(($str)|0);
      var $15=HEAP32[((_ifp)>>2)];
      var $16=_fread($14, 8, 1, $15);
      var $17=(($str)|0);
      var $18=_strcmp($17, ((__str195)|0));
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $20
      var $21=$off;
      HEAP32[((_meta_offset)>>2)]=$21;
      __label__ = 4; break;
    case 4: // $22
      var $23=(($str)|0);
      var $24=_strcmp($23, ((__str196)|0));
      var $25=((($24))|0)!=0;
      if ($25) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: // $26
      var $27=$off;
      HEAP32[((_thumb_offset)>>2)]=$27;
      __label__ = 6; break;
    case 6: // $28
      var $29=(($str)|0);
      var $30=_strcmp($29, ((__str197)|0));
      var $31=((($30))|0)!=0;
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: // $32
      var $33=$off;
      HEAP32[((_data_offset)>>2)]=$33;
      __label__ = 8; break;
    case 8: // $34
      __label__ = 1; break;
    case 9: // $35
      var $36=HEAP32[((_ifp)>>2)];
      var $37=HEAP32[((_meta_offset)>>2)];
      var $38=((($37)+20)|0);
      var $39=_fseek($36, $38, 0);
      var $40=HEAP32[((_ifp)>>2)];
      var $41=_fread(((_make)|0), 64, 1, $40);
      HEAP8[(((_make+63)|0))]=0;
      var $42=_strchr(((_make)|0), 32);
      $cp=$42;
      var $43=((($42))|0)!=0;
      if ($43) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $44
      var $45=$cp;
      var $46=(($45+1)|0);
      var $47=_strcpy(((_model)|0), $46);
      var $48=$cp;
      HEAP8[($48)]=0;
      __label__ = 11; break;
    case 11: // $49
      var $50=_get2();
      HEAP16[((_raw_width)>>1)]=$50;
      var $51=_get2();
      HEAP16[((_raw_height)>>1)]=$51;
      HEAP32[((_load_raw)>>2)]=14;
      var $52=_get4();
      var $53=_get2();
      HEAP16[((_thumb_width)>>1)]=$53;
      var $54=_get2();
      HEAP16[((_thumb_height)>>1)]=$54;
      HEAP32[((_write_thumb)>>2)]=38;
      HEAP32[((_maximum)>>2)]=16383;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_sinar_ia["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _parse_phase_one($base) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $entries;
      var $tag;
      var $type;
      var $len;
      var $data;
      var $save;
      var $i;
      var $c;
      var $romm_cam=__stackBase__;
      var $cp;
      $1=$base;
      _memset((_ph1), 0, 28, 1);
      var $2=HEAP32[((_ifp)>>2)];
      var $3=$1;
      var $4=_fseek($2, $3, 0);
      var $5=_get4();
      var $6=($5) & 65535;
      var $7=((($6)) & 65535);
      HEAP16[((_order)>>1)]=$7;
      var $8=_get4();
      var $9=($8) >>> 8;
      var $10=((($9))|0)!=5398903;
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      __label__ = 43; break;
    case 2: // $12
      var $13=HEAP32[((_ifp)>>2)];
      var $14=_get4();
      var $15=$1;
      var $16=((($14)+($15))|0);
      var $17=_fseek($13, $16, 0);
      var $18=_get4();
      $entries=$18;
      var $19=_get4();
      __label__ = 3; break;
    case 3: // $20
      var $21=$entries;
      var $22=((($21)-1)|0);
      $entries=$22;
      var $23=((($21))|0)!=0;
      if ($23) { __label__ = 4; break; } else { __label__ = 36; break; }
    case 4: // $24
      var $25=_get4();
      $tag=$25;
      var $26=_get4();
      $type=$26;
      var $27=_get4();
      $len=$27;
      var $28=_get4();
      $data=$28;
      var $29=HEAP32[((_ifp)>>2)];
      var $30=_ftell($29);
      $save=$30;
      var $31=HEAP32[((_ifp)>>2)];
      var $32=$1;
      var $33=$data;
      var $34=((($32)+($33))|0);
      var $35=_fseek($31, $34, 0);
      var $36=$tag;
      if ($36 == 256) {
        __label__ = 5; break;
      }
      else if ($36 == 262) {
        __label__ = 6; break;
      }
      else if ($36 == 263) {
        __label__ = 11; break;
      }
      else if ($36 == 264) {
        __label__ = 16; break;
      }
      else if ($36 == 265) {
        __label__ = 17; break;
      }
      else if ($36 == 266) {
        __label__ = 18; break;
      }
      else if ($36 == 267) {
        __label__ = 19; break;
      }
      else if ($36 == 268) {
        __label__ = 20; break;
      }
      else if ($36 == 269) {
        __label__ = 21; break;
      }
      else if ($36 == 270) {
        __label__ = 22; break;
      }
      else if ($36 == 271) {
        __label__ = 23; break;
      }
      else if ($36 == 272) {
        __label__ = 24; break;
      }
      else if ($36 == 274) {
        __label__ = 25; break;
      }
      else if ($36 == 528) {
        __label__ = 26; break;
      }
      else if ($36 == 538) {
        __label__ = 27; break;
      }
      else if ($36 == 540) {
        __label__ = 28; break;
      }
      else if ($36 == 541) {
        __label__ = 29; break;
      }
      else if ($36 == 546) {
        __label__ = 30; break;
      }
      else if ($36 == 547) {
        __label__ = 31; break;
      }
      else if ($36 == 769) {
        __label__ = 32; break;
      }
      else {
      __label__ = 35; break;
      }
      
    case 5: // $37
      var $38=$data;
      var $39=($38) & 3;
      var $40=((__str198+$39)|0);
      var $41=HEAP8[($40)];
      var $42=((($41) << 24) >> 24);
      var $43=((($42)-48)|0);
      HEAP32[((_flip)>>2)]=$43;
      __label__ = 35; break;
    case 6: // $44
      $i=0;
      __label__ = 7; break;
    case 7: // $45
      var $46=$i;
      var $47=((($46))>>>0) < 9;
      if ($47) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $48
      var $49=_getreal(11);
      var $50=($49);
      var $51=$i;
      var $52=(($romm_cam)|0);
      var $53=(($52+($51<<2))|0);
      HEAPF32[(($53)>>2)]=$50;
      __label__ = 9; break;
    case 9: // $54
      var $55=$i;
      var $56=((($55)+1)|0);
      $i=$56;
      __label__ = 7; break;
    case 10: // $57
      var $58=(($romm_cam)|0);
      _romm_coeff($58);
      __label__ = 35; break;
    case 11: // $59
      $c=0;
      __label__ = 12; break;
    case 12: // $60
      var $61=$c;
      var $62=((($61))>>>0) < 3;
      if ($62) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $63
      var $64=_getreal(11);
      var $65=($64);
      var $66=$c;
      var $67=((_cam_mul+($66<<2))|0);
      HEAPF32[(($67)>>2)]=$65;
      __label__ = 14; break;
    case 14: // $68
      var $69=$c;
      var $70=((($69)+1)|0);
      $c=$70;
      __label__ = 12; break;
    case 15: // $71
      __label__ = 35; break;
    case 16: // $72
      var $73=$data;
      var $74=((($73)) & 65535);
      HEAP16[((_raw_width)>>1)]=$74;
      __label__ = 35; break;
    case 17: // $75
      var $76=$data;
      var $77=((($76)) & 65535);
      HEAP16[((_raw_height)>>1)]=$77;
      __label__ = 35; break;
    case 18: // $78
      var $79=$data;
      var $80=((($79)) & 65535);
      HEAP16[((_left_margin)>>1)]=$80;
      __label__ = 35; break;
    case 19: // $81
      var $82=$data;
      var $83=((($82)) & 65535);
      HEAP16[((_top_margin)>>1)]=$83;
      __label__ = 35; break;
    case 20: // $84
      var $85=$data;
      var $86=((($85)) & 65535);
      HEAP16[((_width)>>1)]=$86;
      __label__ = 35; break;
    case 21: // $87
      var $88=$data;
      var $89=((($88)) & 65535);
      HEAP16[((_height)>>1)]=$89;
      __label__ = 35; break;
    case 22: // $90
      var $91=$data;
      HEAP32[((((_ph1)|0))>>2)]=$91;
      __label__ = 35; break;
    case 23: // $92
      var $93=$data;
      var $94=$1;
      var $95=((($93)+($94))|0);
      HEAP32[((_data_offset)>>2)]=$95;
      __label__ = 35; break;
    case 24: // $96
      var $97=$data;
      var $98=$1;
      var $99=((($97)+($98))|0);
      HEAP32[((_meta_offset)>>2)]=$99;
      var $100=$len;
      HEAP32[((_meta_length)>>2)]=$100;
      __label__ = 35; break;
    case 25: // $101
      var $102=$save;
      var $103=((($102)-4)|0);
      HEAP32[((((_ph1+4)|0))>>2)]=$103;
      __label__ = 35; break;
    case 26: // $104
      var $105=$data;
      var $106=_int_to_float($105);
      HEAPF32[((((_ph1+24)|0))>>2)]=$106;
      __label__ = 35; break;
    case 27: // $107
      var $108=$data;
      HEAP32[((((_ph1+20)|0))>>2)]=$108;
      __label__ = 35; break;
    case 28: // $109
      var $110=$data;
      var $111=$1;
      var $112=((($110)+($111))|0);
      HEAP32[((_strip_offset)>>2)]=$112;
      __label__ = 35; break;
    case 29: // $113
      var $114=$data;
      HEAP32[((((_ph1+8)|0))>>2)]=$114;
      __label__ = 35; break;
    case 30: // $115
      var $116=$data;
      var $117=HEAPU16[((_left_margin)>>1)];
      var $118=((($117))&65535);
      var $119=((($116)-($118))|0);
      HEAP32[((((_ph1+16)|0))>>2)]=$119;
      __label__ = 35; break;
    case 31: // $120
      var $121=$data;
      var $122=$1;
      var $123=((($121)+($122))|0);
      HEAP32[((((_ph1+12)|0))>>2)]=$123;
      __label__ = 35; break;
    case 32: // $124
      HEAP8[(((_model+63)|0))]=0;
      var $125=HEAP32[((_ifp)>>2)];
      var $126=_fread(((_model)|0), 1, 63, $125);
      var $127=_strstr(((_model)|0), ((__str199)|0));
      $cp=$127;
      var $128=((($127))|0)!=0;
      if ($128) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $129
      var $130=$cp;
      HEAP8[($130)]=0;
      __label__ = 34; break;
    case 34: // $131
      __label__ = 35; break;
    case 35: // $132
      var $133=HEAP32[((_ifp)>>2)];
      var $134=$save;
      var $135=_fseek($133, $134, 0);
      __label__ = 3; break;
    case 36: // $136
      var $137=HEAP32[((((_ph1)|0))>>2)];
      var $138=((($137))|0) < 3;
      var $139=($138) ? 46 : 48;
      HEAP32[((_load_raw)>>2)]=$139;
      HEAP32[((_maximum)>>2)]=65535;
      var $140=_strcpy(((_make)|0), ((__str200)|0));
      var $141=HEAP8[(((_model)|0))];
      var $142=((($141) << 24) >> 24)!=0;
      if ($142) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: // $143
      __label__ = 43; break;
    case 38: // $144
      var $145=HEAPU16[((_raw_height)>>1)];
      var $146=((($145))&65535);
      if ($146 == 2060) {
        __label__ = 39; break;
      }
      else if ($146 == 2682) {
        __label__ = 40; break;
      }
      else if ($146 == 4128) {
        __label__ = 41; break;
      }
      else if ($146 == 5488) {
        __label__ = 42; break;
      }
      else {
      __label__ = 43; break;
      }
      
    case 39: // $147
      var $148=_strcpy(((_model)|0), ((__str201)|0));
      __label__ = 43; break;
    case 40: // $149
      var $150=_strcpy(((_model)|0), ((__str202)|0));
      __label__ = 43; break;
    case 41: // $151
      var $152=_strcpy(((_model)|0), ((__str203)|0));
      __label__ = 43; break;
    case 42: // $153
      var $154=_strcpy(((_model)|0), ((__str204)|0));
      __label__ = 43; break;
    case 43: // $155
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_phase_one["X"]=1;

function _parse_fuji($offset) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $entries;
      var $tag;
      var $len;
      var $save;
      var $c;
      $1=$offset;
      var $2=HEAP32[((_ifp)>>2)];
      var $3=$1;
      var $4=_fseek($2, $3, 0);
      var $5=_get4();
      $entries=$5;
      var $6=$entries;
      var $7=((($6))>>>0) > 255;
      if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $8
      __label__ = 26; break;
    case 2: // $9
      __label__ = 3; break;
    case 3: // $10
      var $11=$entries;
      var $12=((($11)-1)|0);
      $entries=$12;
      var $13=((($11))|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 25; break; }
    case 4: // $14
      var $15=_get2();
      var $16=((($15))&65535);
      $tag=$16;
      var $17=_get2();
      var $18=((($17))&65535);
      $len=$18;
      var $19=HEAP32[((_ifp)>>2)];
      var $20=_ftell($19);
      $save=$20;
      var $21=$tag;
      var $22=((($21))|0)==256;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $23
      var $24=_get2();
      HEAP16[((_raw_height)>>1)]=$24;
      var $25=_get2();
      HEAP16[((_raw_width)>>1)]=$25;
      __label__ = 24; break;
    case 6: // $26
      var $27=$tag;
      var $28=((($27))|0)==289;
      if ($28) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: // $29
      var $30=_get2();
      HEAP16[((_height)>>1)]=$30;
      var $31=_get2();
      HEAP16[((_width)>>1)]=$31;
      var $32=((($31))&65535);
      var $33=((($32))|0)==4284;
      if ($33) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $34
      var $35=HEAPU16[((_width)>>1)];
      var $36=((($35))&65535);
      var $37=((($36)+3)|0);
      var $38=((($37)) & 65535);
      HEAP16[((_width)>>1)]=$38;
      __label__ = 9; break;
    case 9: // $39
      __label__ = 23; break;
    case 10: // $40
      var $41=$tag;
      var $42=((($41))|0)==304;
      if ($42) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $43
      var $44=HEAP32[((_ifp)>>2)];
      var $45=_getc_unlocked($44);
      var $46=($45) >> 7;
      HEAP32[((_fuji_layout)>>2)]=$46;
      var $47=HEAP32[((_ifp)>>2)];
      var $48=_getc_unlocked($47);
      var $49=($48) & 8;
      var $50=((($49))|0)!=0;
      var $51=($50) ? 14 : 50;
      HEAP32[((_load_raw)>>2)]=$51;
      __label__ = 22; break;
    case 12: // $52
      var $53=$tag;
      var $54=((($53))|0)==12272;
      if ($54) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: // $55
      $c=0;
      __label__ = 14; break;
    case 14: // $56
      var $57=$c;
      var $58=((($57))>>>0) < 4;
      if ($58) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $59
      var $60=_get2();
      var $61=((($60))&65535);
      var $62=$c;
      var $63=($62) ^ 1;
      var $64=((_cam_mul+($63<<2))|0);
      HEAPF32[(($64)>>2)]=$61;
      __label__ = 16; break;
    case 16: // $65
      var $66=$c;
      var $67=((($66)+1)|0);
      $c=$67;
      __label__ = 14; break;
    case 17: // $68
      __label__ = 21; break;
    case 18: // $69
      var $70=$tag;
      var $71=((($70))|0)==49152;
      if ($71) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $72
      var $73=HEAP16[((_order)>>1)];
      var $74=((($73) << 16) >> 16);
      $c=$74;
      HEAP16[((_order)>>1)]=18761;
      var $75=_get4();
      var $76=((($75)) & 65535);
      HEAP16[((_width)>>1)]=$76;
      var $77=_get4();
      var $78=((($77)) & 65535);
      HEAP16[((_height)>>1)]=$78;
      var $79=$c;
      var $80=((($79)) & 65535);
      HEAP16[((_order)>>1)]=$80;
      __label__ = 20; break;
    case 20: // $81
      __label__ = 21; break;
    case 21: // $82
      __label__ = 22; break;
    case 22: // $83
      __label__ = 23; break;
    case 23: // $84
      __label__ = 24; break;
    case 24: // $85
      var $86=HEAP32[((_ifp)>>2)];
      var $87=$save;
      var $88=$len;
      var $89=((($87)+($88))|0);
      var $90=_fseek($86, $89, 0);
      __label__ = 3; break;
    case 25: // $91
      var $92=HEAP32[((_fuji_layout)>>2)];
      var $93=HEAPU16[((_height)>>1)];
      var $94=((($93))&65535);
      var $95=($94) << ($92);
      var $96=((($95)) & 65535);
      HEAP16[((_height)>>1)]=$96;
      var $97=HEAP32[((_fuji_layout)>>2)];
      var $98=HEAPU16[((_width)>>1)];
      var $99=((($98))&65535);
      var $100=($99) >> ((($97))|0);
      var $101=((($100)) & 65535);
      HEAP16[((_width)>>1)]=$101;
      __label__ = 26; break;
    case 26: // $102
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_fuji["X"]=1;

function _parse_jpeg($offset) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $len;
      var $save;
      var $hlen;
      var $mark;
      $2=$offset;
      var $3=HEAP32[((_ifp)>>2)];
      var $4=$2;
      var $5=_fseek($3, $4, 0);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_getc_unlocked($6);
      var $8=((($7))|0)!=255;
      if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $9
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_getc_unlocked($10);
      var $12=((($11))|0)!=216;
      if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $13
      $1=0;
      __label__ = 16; break;
    case 3: // $14
      __label__ = 4; break;
    case 4: // $15
      var $16=HEAP32[((_ifp)>>2)];
      var $17=_getc_unlocked($16);
      var $18=((($17))|0)==255;
      if ($18) { __label__ = 5; break; } else { var $24 = 0;__label__ = 6; break; }
    case 5: // $19
      var $20=HEAP32[((_ifp)>>2)];
      var $21=_getc_unlocked($20);
      $mark=$21;
      var $22=((($21))|0)!=218;
      var $24 = $22;__label__ = 6; break;
    case 6: // $23
      var $24;
      if ($24) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 7: // $25
      HEAP16[((_order)>>1)]=19789;
      var $26=_get2();
      var $27=((($26))&65535);
      var $28=((($27)-2)|0);
      $len=$28;
      var $29=HEAP32[((_ifp)>>2)];
      var $30=_ftell($29);
      $save=$30;
      var $31=$mark;
      var $32=((($31))|0)==192;
      if ($32) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: // $33
      var $34=$mark;
      var $35=((($34))|0)==195;
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $36
      var $37=HEAP32[((_ifp)>>2)];
      var $38=_getc_unlocked($37);
      var $39=_get2();
      HEAP16[((_raw_height)>>1)]=$39;
      var $40=_get2();
      HEAP16[((_raw_width)>>1)]=$40;
      __label__ = 10; break;
    case 10: // $41
      var $42=_get2();
      HEAP16[((_order)>>1)]=$42;
      var $43=_get4();
      $hlen=$43;
      var $44=_get4();
      var $45=((($44))|0)==1212498256;
      if ($45) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $46
      var $47=$save;
      var $48=$hlen;
      var $49=((($47)+($48))|0);
      var $50=$len;
      var $51=$hlen;
      var $52=((($50)-($51))|0);
      _parse_ciff($49, $52);
      __label__ = 12; break;
    case 12: // $53
      var $54=$save;
      var $55=((($54)+6)|0);
      var $56=_parse_tiff($55);
      var $57=((($56))|0)!=0;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $58
      _apply_tiff();
      __label__ = 14; break;
    case 14: // $59
      var $60=HEAP32[((_ifp)>>2)];
      var $61=$save;
      var $62=$len;
      var $63=((($61)+($62))|0);
      var $64=_fseek($60, $63, 0);
      __label__ = 4; break;
    case 15: // $65
      $1=1;
      __label__ = 16; break;
    case 16: // $66
      var $67=$1;
      ;
      return $67;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_jpeg["X"]=1;

function _parse_riff() {
  var __stackBase__  = STACKTOP; STACKTOP += 176; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $size;
      var $end;
      var $tag=__stackBase__;
      var $date=__stackBase__+4;
      var $month=__stackBase__+68;
      var $t=__stackBase__+132;
      HEAP16[((_order)>>1)]=18761;
      var $1=(($tag)|0);
      var $2=HEAP32[((_ifp)>>2)];
      var $3=_fread($1, 4, 1, $2);
      var $4=_get4();
      $size=$4;
      var $5=HEAP32[((_ifp)>>2)];
      var $6=_ftell($5);
      var $7=$size;
      var $8=((($6)+($7))|0);
      $end=$8;
      var $9=(($tag)|0);
      var $10=_memcmp($9, ((__str205)|0), 4);
      var $11=((($10))|0)!=0;
      if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $12
      var $13=(($tag)|0);
      var $14=_memcmp($13, ((__str206)|0), 4);
      var $15=((($14))|0)!=0;
      if ($15) { __label__ = 6; break; } else { __label__ = 2; break; }
    case 2: // $16
      var $17=_get4();
      __label__ = 3; break;
    case 3: // $18
      var $19=HEAP32[((_ifp)>>2)];
      var $20=_ftell($19);
      var $21=((($20)+7)|0);
      var $22=$end;
      var $23=((($21))>>>0) < ((($22))>>>0);
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $24
      _parse_riff();
      __label__ = 3; break;
    case 5: // $25
      __label__ = 31; break;
    case 6: // $26
      var $27=(($tag)|0);
      var $28=_memcmp($27, ((__str207)|0), 4);
      var $29=((($28))|0)!=0;
      if ($29) { __label__ = 15; break; } else { __label__ = 7; break; }
    case 7: // $30
      __label__ = 8; break;
    case 8: // $31
      var $32=HEAP32[((_ifp)>>2)];
      var $33=_ftell($32);
      var $34=((($33)+7)|0);
      var $35=$end;
      var $36=((($34))>>>0) < ((($35))>>>0);
      if ($36) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: // $37
      var $38=_get2();
      var $39=((($38))&65535);
      $i=$39;
      var $40=_get2();
      var $41=((($40))&65535);
      $size=$41;
      var $42=$i;
      var $43=((($42)+1)|0);
      var $44=($43) >>> 1;
      var $45=((($44))|0)==10;
      if ($45) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $46
      var $47=$size;
      var $48=((($47))|0)==20;
      if ($48) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: // $49
      _get_timestamp(0);
      __label__ = 13; break;
    case 12: // $50
      var $51=HEAP32[((_ifp)>>2)];
      var $52=$size;
      var $53=_fseek($51, $52, 1);
      __label__ = 13; break;
    case 13: // $54
      __label__ = 8; break;
    case 14: // $55
      __label__ = 30; break;
    case 15: // $56
      var $57=(($tag)|0);
      var $58=_memcmp($57, ((__str208)|0), 4);
      var $59=((($58))|0)!=0;
      if ($59) { __label__ = 28; break; } else { __label__ = 16; break; }
    case 16: // $60
      var $61=$size;
      var $62=((($61))>>>0) < 64;
      if ($62) { __label__ = 17; break; } else { __label__ = 28; break; }
    case 17: // $63
      var $64=(($date)|0);
      var $65=HEAP32[((_ifp)>>2)];
      var $66=_fread($64, 64, 1, $65);
      var $67=$size;
      var $68=(($date+$67)|0);
      HEAP8[($68)]=0;
      var $69=$t;
      _memset($69, 0, 44, 1);
      var $70=(($date)|0);
      var $71=(($month)|0);
      var $72=(($t+12)|0);
      var $73=(($t+8)|0);
      var $74=(($t+4)|0);
      var $75=(($t)|0);
      var $76=(($t+20)|0);
      var $77=_sscanf($70, ((__str209)|0), (tempInt=STACKTOP,STACKTOP += 24,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$71,HEAP32[((tempInt+4)>>2)]=$72,HEAP32[((tempInt+8)>>2)]=$73,HEAP32[((tempInt+12)>>2)]=$74,HEAP32[((tempInt+16)>>2)]=$75,HEAP32[((tempInt+20)>>2)]=$76,tempInt));
      var $78=((($77))|0)==6;
      if ($78) { __label__ = 18; break; } else { __label__ = 27; break; }
    case 18: // $79
      $i=0;
      __label__ = 19; break;
    case 19: // $80
      var $81=$i;
      var $82=((($81))>>>0) < 12;
      if ($82) { __label__ = 20; break; } else { var $91 = 0;__label__ = 21; break; }
    case 20: // $83
      var $84=$i;
      var $85=((_parse_riff_mon+($84<<2))|0);
      var $86=(($85)|0);
      var $87=(($month)|0);
      var $88=_strcasecmp($86, $87);
      var $89=((($88))|0)!=0;
      var $91 = $89;__label__ = 21; break;
    case 21: // $90
      var $91;
      if ($91) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: // $92
      __label__ = 23; break;
    case 23: // $93
      var $94=$i;
      var $95=((($94)+1)|0);
      $i=$95;
      __label__ = 19; break;
    case 24: // $96
      var $97=$i;
      var $98=(($t+16)|0);
      HEAP32[(($98)>>2)]=$97;
      var $99=(($t+20)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-1900)|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=_mktime($t);
      var $103=((($102))|0) > 0;
      if ($103) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: // $104
      var $105=_mktime($t);
      HEAP32[((_timestamp)>>2)]=$105;
      __label__ = 26; break;
    case 26: // $106
      __label__ = 27; break;
    case 27: // $107
      __label__ = 29; break;
    case 28: // $108
      var $109=HEAP32[((_ifp)>>2)];
      var $110=$size;
      var $111=_fseek($109, $110, 1);
      __label__ = 29; break;
    case 29: // $112
      __label__ = 30; break;
    case 30: // $113
      __label__ = 31; break;
    case 31: // $114
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_riff["X"]=1;

function _parse_smal($offset, $fsize) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $ver;
      $1=$offset;
      $2=$fsize;
      var $3=HEAP32[((_ifp)>>2)];
      var $4=$1;
      var $5=((($4)+2)|0);
      var $6=_fseek($3, $5, 0);
      HEAP16[((_order)>>1)]=18761;
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_getc_unlocked($7);
      $ver=$8;
      var $9=$ver;
      var $10=((($9))|0)==6;
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      var $12=HEAP32[((_ifp)>>2)];
      var $13=_fseek($12, 5, 1);
      __label__ = 2; break;
    case 2: // $14
      var $15=_get4();
      var $16=$2;
      var $17=((($15))|0)!=((($16))|0);
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $18
      __label__ = 10; break;
    case 4: // $19
      var $20=$ver;
      var $21=((($20))|0) > 6;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $22
      var $23=_get4();
      HEAP32[((_data_offset)>>2)]=$23;
      __label__ = 6; break;
    case 6: // $24
      var $25=_get2();
      HEAP16[((_height)>>1)]=$25;
      HEAP16[((_raw_height)>>1)]=$25;
      var $26=_get2();
      HEAP16[((_width)>>1)]=$26;
      HEAP16[((_raw_width)>>1)]=$26;
      var $27=_strcpy(((_make)|0), ((__str210)|0));
      var $28=$ver;
      var $29=HEAPU16[((_width)>>1)];
      var $30=((($29))&65535);
      var $31=HEAPU16[((_height)>>1)];
      var $32=((($31))&65535);
      var $33=_sprintf(((_model)|0), ((__str211)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,HEAP32[((tempInt+4)>>2)]=$30,HEAP32[((tempInt+8)>>2)]=$32,tempInt));
      var $34=$ver;
      var $35=((($34))|0)==6;
      if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: // $36
      HEAP32[((_load_raw)>>2)]=42;
      __label__ = 8; break;
    case 8: // $37
      var $38=$ver;
      var $39=((($38))|0)==9;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $40
      HEAP32[((_load_raw)>>2)]=44;
      __label__ = 10; break;
    case 10: // $41
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_smal["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Cannot correct overflows of this many bits: 64 at line 47356
// Warning: Cannot correct overflows of this many bits: 64 at line 47364

function _simple_coeff($index) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $i;
      var $c;
      $1=$index;
      $i=0;
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=((($3))|0) < 3;
      if ($4) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: // $5
      $c=0;
      __label__ = 3; break;
    case 3: // $6
      var $7=$c;
      var $8=HEAP32[((_colors)>>2)];
      var $9=((($7))|0) < ((($8))|0);
      if ($9) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $10
      var $11=$i;
      var $12=HEAP32[((_colors)>>2)];
      var $13=((($11)*($12))|0);
      var $14=$c;
      var $15=((($13)+($14))|0);
      var $16=$1;
      var $17=((_simple_coeff_table+$16*48)|0);
      var $18=(($17+($15<<2))|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$c;
      var $21=$i;
      var $22=((_rgb_cam+($21<<4))|0);
      var $23=(($22+($20<<2))|0);
      HEAPF32[(($23)>>2)]=$19;
      __label__ = 5; break;
    case 5: // $24
      var $25=$c;
      var $26=((($25)+1)|0);
      $c=$26;
      __label__ = 3; break;
    case 6: // $27
      __label__ = 7; break;
    case 7: // $28
      var $29=$i;
      var $30=((($29)+1)|0);
      $i=$30;
      __label__ = 1; break;
    case 8: // $31
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parse_cine() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $off_head;
      var $off_setup;
      var $off_image;
      var $i;
      HEAP16[((_order)>>1)]=18761;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 4, 0);
      var $3=_get2();
      var $4=((($3))&65535);
      var $5=((($4))|0)==2;
      var $6=((($5))&1);
      HEAP32[((_is_raw)>>2)]=$6;
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_fseek($7, 14, 1);
      var $9=_get4();
      var $10=HEAP32[((_is_raw)>>2)];
      var $11=((($10)*($9))|0);
      HEAP32[((_is_raw)>>2)]=$11;
      var $12=_get4();
      $off_head=$12;
      var $13=_get4();
      $off_setup=$13;
      var $14=_get4();
      $off_image=$14;
      var $15=_get4();
      HEAP32[((_timestamp)>>2)]=$15;
      var $16=_get4();
      $i=$16;
      var $17=((($16))|0)!=0;
      if ($17) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $18
      var $19=$i;
      HEAP32[((_timestamp)>>2)]=$19;
      __label__ = 2; break;
    case 2: // $20
      var $21=HEAP32[((_ifp)>>2)];
      var $22=$off_head;
      var $23=((($22)+4)|0);
      var $24=_fseek($21, $23, 0);
      var $25=_get4();
      var $26=((($25)) & 65535);
      HEAP16[((_raw_width)>>1)]=$26;
      var $27=_get4();
      var $28=((($27)) & 65535);
      HEAP16[((_raw_height)>>1)]=$28;
      var $29=_get2();
      var $30=_get2();
      var $31=((($30))&65535);
      if ($31 == 8) {
        __label__ = 3; break;
      }
      else if ($31 == 16) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: // $32
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 5; break;
    case 4: // $33
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 5; break;
    case 5: // $34
      var $35=HEAP32[((_ifp)>>2)];
      var $36=$off_setup;
      var $37=((($36)+792)|0);
      var $38=_fseek($35, $37, 0);
      var $39=_strcpy(((_make)|0), ((__str212)|0));
      var $40=_get4();
      var $41=_sprintf(((_model)|0), ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$40,tempInt));
      var $42=HEAP32[((_ifp)>>2)];
      var $43=_fseek($42, 12, 1);
      var $44=_get4();
      $i=$44;
      var $45=($44) & 16777215;
      if ($45 == 3) {
        __label__ = 6; break;
      }
      else if ($45 == 4) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 6: // $46
      HEAP32[((_filters)>>2)]=-1802201964;
      __label__ = 9; break;
    case 7: // $47
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 9; break;
    case 8: // $48
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 9; break;
    case 9: // $49
      var $50=HEAP32[((_ifp)>>2)];
      var $51=_fseek($50, 72, 1);
      var $52=_get4();
      var $53=((($52)+3600)|0);
      var $54=((($53))>>>0)%360;
      if ($54 == 270) {
        __label__ = 10; break;
      }
      else if ($54 == 180) {
        __label__ = 11; break;
      }
      else if ($54 == 90) {
        __label__ = 12; break;
      }
      else if ($54 == 0) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 10: // $55
      HEAP32[((_flip)>>2)]=4;
      __label__ = 14; break;
    case 11: // $56
      HEAP32[((_flip)>>2)]=1;
      __label__ = 14; break;
    case 12: // $57
      HEAP32[((_flip)>>2)]=7;
      __label__ = 14; break;
    case 13: // $58
      HEAP32[((_flip)>>2)]=2;
      __label__ = 14; break;
    case 14: // $59
      var $60=_getreal(11);
      var $61=($60);
      HEAPF32[((((_cam_mul)|0))>>2)]=$61;
      var $62=_getreal(11);
      var $63=($62);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$63;
      var $64=_get4();
      var $65=-1 << ($64);
      var $66=($65) ^ -1;
      HEAP32[((_maximum)>>2)]=$66;
      var $67=HEAP32[((_ifp)>>2)];
      var $68=_fseek($67, 668, 1);
      var $69=_get4();
      var $70=((($69))>>>0);
      var $71=($70)/1000000000;
      var $72=($71);
      HEAPF32[((_shutter)>>2)]=$72;
      var $73=HEAP32[((_ifp)>>2)];
      var $74=$off_image;
      var $75=_fseek($73, $74, 0);
      var $76=HEAPU32[((_shot_select)>>2)];
      var $77=HEAPU32[((_is_raw)>>2)];
      var $78=((($76))>>>0) < ((($77))>>>0);
      if ($78) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: // $79
      var $80=HEAP32[((_ifp)>>2)];
      var $81=HEAP32[((_shot_select)>>2)];
      var $82=(((($81)<<3))|0);
      var $83=_fseek($80, $82, 1);
      __label__ = 16; break;
    case 16: // $84
      var $85=_get4();
      var $86=[((((($85))>>>0))>>>0),0];
      var $87=(tempBigIntP=(tempI64=($86.slice(0)),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296)))+(tempI64=([8,0]),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296))),[((tempBigIntP>>>0)>>>0),((Math.min(Math.floor(tempBigIntP/4294967296), 4294967295))>>>0)]);
      var $88=((($87.slice(0))[0]) & 4294967295);
      HEAP32[((_data_offset)>>2)]=$88;
      var $89=_get4();
      var $90=[((((($89))>>>0))>>>0),0];
      var $91=[($90.slice(0))[0] << 32, (($90.slice(0))[1] << 32) | ((($90.slice(0))[0]&((Math.pow(2, 32)-1)<<(32-32))) >>> (32-32))];
      var $92=HEAP32[((_data_offset)>>2)];
      var $93=(tempBigIntD=((($92))|0),[((tempBigIntD)>>>0),((tempBigIntD<0 ? 4294967295 : 0)>>>0)]);
      var $94=(tempBigIntP=(tempI64=($93.slice(0)),(tempI64[1] <= 2147483648 ? (((tempI64[0])>>>0)+(((tempI64[1])>>>0)*4294967296)) : (((tempI64[0])|0)+(1+((tempI64[1])|0))*4294967296)))+((($91)[1] <= 2147483648 ? (((($91)[0])>>>0)+(((($91)[1])>>>0)*4294967296)) : (((($91)[0])|0)+(1+((($91)[1])|0))*4294967296))),[((tempBigIntP>>>0)>>>0),((Math.min(Math.floor(tempBigIntP/4294967296), 4294967295))>>>0)]);
      var $95=((($94.slice(0))[0]) & 4294967295);
      HEAP32[((_data_offset)>>2)]=$95;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_cine["X"]=1;

function _parse_redcine() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $len;
      var $rdvo;
      HEAP16[((_order)>>1)]=19789;
      HEAP32[((_is_raw)>>2)]=0;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 52, 0);
      var $3=_get4();
      var $4=((($3)) & 65535);
      HEAP16[((_width)>>1)]=$4;
      var $5=_get4();
      var $6=((($5)) & 65535);
      HEAP16[((_height)>>1)]=$6;
      var $7=HEAP32[((_ifp)>>2)];
      var $8=_fseek($7, 0, 2);
      var $9=HEAP32[((_ifp)>>2)];
      var $10=HEAP32[((_ifp)>>2)];
      var $11=_ftello($10);
      var $12=($11) & 511;
      $i=$12;
      var $13=(((-($12)))|0);
      var $14=_fseek($9, $13, 1);
      var $15=_get4();
      var $16=$i;
      var $17=((($15))|0)!=((($16))|0);
      if ($17) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $18
      var $19=_get4();
      var $20=((($19))|0)!=1380273986;
      if ($20) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: // $21
      var $22=HEAP32[((__impure_ptr)>>2)];
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=HEAP32[((_ifname)>>2)];
      var $26=_fprintf($24, ((__str213)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,tempInt));
      var $27=HEAP32[((_ifp)>>2)];
      var $28=_fseek($27, 0, 0);
      __label__ = 3; break;
    case 3: // $29
      var $30=_get4();
      $len=$30;
      var $31=((($30))|0)!=-1;
      if ($31) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: // $32
      var $33=_get4();
      var $34=((($33))|0)==1380271190;
      if ($34) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: // $35
      var $36=HEAP32[((_is_raw)>>2)];
      var $37=((($36)+1)|0);
      HEAP32[((_is_raw)>>2)]=$37;
      var $38=HEAP32[((_shot_select)>>2)];
      var $39=((($36))|0)==((($38))|0);
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $40
      var $41=HEAP32[((_ifp)>>2)];
      var $42=_ftello($41);
      var $43=((($42)-8)|0);
      HEAP32[((_data_offset)>>2)]=$43;
      __label__ = 7; break;
    case 7: // $44
      __label__ = 8; break;
    case 8: // $45
      var $46=HEAP32[((_ifp)>>2)];
      var $47=$len;
      var $48=((($47)-8)|0);
      var $49=_fseek($46, $48, 1);
      __label__ = 3; break;
    case 9: // $50
      __label__ = 11; break;
    case 10: // $51
      var $52=_get4();
      $rdvo=$52;
      var $53=HEAP32[((_ifp)>>2)];
      var $54=_fseek($53, 12, 1);
      var $55=_get4();
      HEAP32[((_is_raw)>>2)]=$55;
      var $56=HEAP32[((_ifp)>>2)];
      var $57=$rdvo;
      var $58=((($57)+8)|0);
      var $59=HEAP32[((_shot_select)>>2)];
      var $60=(((($59)<<2))|0);
      var $61=((($58)+($60))|0);
      var $62=_fseeko($56, $61, 0);
      var $63=_get4();
      HEAP32[((_data_offset)>>2)]=$63;
      __label__ = 11; break;
    case 11: // $64
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_redcine["X"]=1;

function _foveon_gets($offset, $str, $len) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$offset;
      $2=$str;
      $3=$len;
      var $4=HEAP32[((_ifp)>>2)];
      var $5=$1;
      var $6=_fseek($4, $5, 0);
      $i=0;
      __label__ = 1; break;
    case 1: // $7
      var $8=$i;
      var $9=$3;
      var $10=((($9)-1)|0);
      var $11=((($8))|0) < ((($10))|0);
      if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: // $12
      var $13=_get2();
      var $14=((($13)) & 255);
      var $15=$i;
      var $16=$2;
      var $17=(($16+$15)|0);
      HEAP8[($17)]=$14;
      var $18=((($14) << 24) >> 24);
      var $19=((($18))|0)==0;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $20
      __label__ = 6; break;
    case 4: // $21
      __label__ = 5; break;
    case 5: // $22
      var $23=$i;
      var $24=((($23)+1)|0);
      $i=$24;
      __label__ = 1; break;
    case 6: // $25
      var $26=$i;
      var $27=$2;
      var $28=(($27+$26)|0);
      HEAP8[($28)]=0;
      var $29=$2;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parse_foveon() {
  var __stackBase__  = STACKTOP; STACKTOP += 2176; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $entries;
      var $img;
      var $off;
      var $len;
      var $tag;
      var $save;
      var $i;
      var $wide;
      var $high;
      var $pent;
      var $poff=__stackBase__;
      var $name=__stackBase__+2048;
      var $value=__stackBase__+2112;
      $img=0;
      HEAP16[((_order)>>1)]=18761;
      var $1=HEAP32[((_ifp)>>2)];
      var $2=_fseek($1, 36, 0);
      var $3=_get4();
      HEAP32[((_flip)>>2)]=$3;
      var $4=HEAP32[((_ifp)>>2)];
      var $5=_fseek($4, -4, 2);
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_get4();
      var $8=_fseek($6, $7, 0);
      var $9=_get4();
      var $10=((($9))|0)!=1682130259;
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      __label__ = 50; break;
    case 2: // $12
      var $13=_get4();
      var $14=_get4();
      $entries=$14;
      __label__ = 3; break;
    case 3: // $15
      var $16=$entries;
      var $17=((($16)-1)|0);
      $entries=$17;
      var $18=((($16))|0)!=0;
      if ($18) { __label__ = 4; break; } else { __label__ = 49; break; }
    case 4: // $19
      var $20=_get4();
      $off=$20;
      var $21=_get4();
      $len=$21;
      var $22=_get4();
      $tag=$22;
      var $23=HEAP32[((_ifp)>>2)];
      var $24=_ftell($23);
      $save=$24;
      var $25=HEAP32[((_ifp)>>2)];
      var $26=$off;
      var $27=_fseek($25, $26, 0);
      var $28=_get4();
      var $29=$tag;
      var $30=($29) << 24;
      var $31=541279571 | ($30);
      var $32=((($28))|0)!=((($31))|0);
      if ($32) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $33
      __label__ = 50; break;
    case 6: // $34
      var $35=$tag;
      if ($35 == 1195461961 || $35 == 843140425) {
        __label__ = 7; break;
      }
      else if ($35 == 1179468099) {
        __label__ = 18; break;
      }
      else if ($35 == 1347375696) {
        __label__ = 21; break;
      }
      else {
      __label__ = 48; break;
      }
      
    case 7: // $36
      var $37=HEAP32[((_ifp)>>2)];
      var $38=_fseek($37, 12, 1);
      var $39=_get4();
      $wide=$39;
      var $40=_get4();
      $high=$40;
      var $41=$wide;
      var $42=HEAPU16[((_raw_width)>>1)];
      var $43=((($42))&65535);
      var $44=((($41))|0) > ((($43))|0);
      if ($44) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $45
      var $46=$high;
      var $47=HEAPU16[((_raw_height)>>1)];
      var $48=((($47))&65535);
      var $49=((($46))|0) > ((($48))|0);
      if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $50
      var $51=$wide;
      var $52=((($51)) & 65535);
      HEAP16[((_raw_width)>>1)]=$52;
      var $53=$high;
      var $54=((($53)) & 65535);
      HEAP16[((_raw_height)>>1)]=$54;
      var $55=$off;
      var $56=((($55)+24)|0);
      HEAP32[((_data_offset)>>2)]=$56;
      __label__ = 10; break;
    case 10: // $57
      var $58=HEAP32[((_ifp)>>2)];
      var $59=$off;
      var $60=((($59)+28)|0);
      var $61=_fseek($58, $60, 0);
      var $62=HEAP32[((_ifp)>>2)];
      var $63=_getc_unlocked($62);
      var $64=((($63))|0)==255;
      if ($64) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: // $65
      var $66=HEAP32[((_ifp)>>2)];
      var $67=_getc_unlocked($66);
      var $68=((($67))|0)==216;
      if ($68) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: // $69
      var $70=HEAPU32[((_thumb_length)>>2)];
      var $71=$len;
      var $72=((($71)-28)|0);
      var $73=((($70))>>>0) < ((($72))>>>0);
      if ($73) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: // $74
      var $75=$off;
      var $76=((($75)+28)|0);
      HEAP32[((_thumb_offset)>>2)]=$76;
      var $77=$len;
      var $78=((($77)-28)|0);
      HEAP32[((_thumb_length)>>2)]=$78;
      HEAP32[((_write_thumb)>>2)]=52;
      __label__ = 14; break;
    case 14: // $79
      var $80=$img;
      var $81=((($80)+1)|0);
      $img=$81;
      var $82=((($81))|0)==2;
      if ($82) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: // $83
      var $84=HEAP32[((_thumb_length)>>2)];
      var $85=((($84))|0)!=0;
      if ($85) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: // $86
      var $87=$off;
      var $88=((($87)+24)|0);
      HEAP32[((_thumb_offset)>>2)]=$88;
      var $89=$wide;
      var $90=((($89)) & 65535);
      HEAP16[((_thumb_width)>>1)]=$90;
      var $91=$high;
      var $92=((($91)) & 65535);
      HEAP16[((_thumb_height)>>1)]=$92;
      HEAP32[((_write_thumb)>>2)]=54;
      __label__ = 17; break;
    case 17: // $93
      __label__ = 48; break;
    case 18: // $94
      var $95=$off;
      var $96=((($95)+24)|0);
      HEAP32[((_meta_offset)>>2)]=$96;
      var $97=$len;
      var $98=((($97)-28)|0);
      HEAP32[((_meta_length)>>2)]=$98;
      var $99=HEAPU32[((_meta_length)>>2)];
      var $100=((($99))>>>0) > 131072;
      if ($100) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: // $101
      HEAP32[((_meta_length)>>2)]=131072;
      __label__ = 20; break;
    case 20: // $102
      __label__ = 48; break;
    case 21: // $103
      var $104=_get4();
      var $105=_get4();
      $pent=$105;
      var $106=HEAP32[((_ifp)>>2)];
      var $107=_fseek($106, 12, 1);
      var $108=$pent;
      var $109=(((($108)<<3))|0);
      var $110=((($109)+24)|0);
      var $111=$off;
      var $112=((($111)+($110))|0);
      $off=$112;
      var $113=$pent;
      var $114=((($113))>>>0) > 256;
      if ($114) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $115
      $pent=256;
      __label__ = 23; break;
    case 23: // $116
      $i=0;
      __label__ = 24; break;
    case 24: // $117
      var $118=$i;
      var $119=$pent;
      var $120=(((($119)<<1))|0);
      var $121=((($118))|0) < ((($120))|0);
      if ($121) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: // $122
      var $123=$off;
      var $124=_get4();
      var $125=(((($124)<<1))|0);
      var $126=((($123)+($125))|0);
      var $127=$i;
      var $128=(($poff)|0);
      var $129=(($128+($127<<2))|0);
      HEAP32[(($129)>>2)]=$126;
      __label__ = 26; break;
    case 26: // $130
      var $131=$i;
      var $132=((($131)+1)|0);
      $i=$132;
      __label__ = 24; break;
    case 27: // $133
      $i=0;
      __label__ = 28; break;
    case 28: // $134
      var $135=$i;
      var $136=$pent;
      var $137=((($135))|0) < ((($136))|0);
      if ($137) { __label__ = 29; break; } else { __label__ = 47; break; }
    case 29: // $138
      var $139=$i;
      var $140=(($poff+($139<<3))|0);
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($name)|0);
      var $144=_foveon_gets($142, $143, 64);
      var $145=$i;
      var $146=(($poff+($145<<3))|0);
      var $147=(($146+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($value)|0);
      var $150=_foveon_gets($148, $149, 64);
      var $151=(($name)|0);
      var $152=_strcmp($151, ((__str214)|0));
      var $153=((($152))|0)!=0;
      if ($153) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: // $154
      var $155=(($value)|0);
      var $156=_atoi($155);
      var $157=((($156))|0);
      HEAPF32[((_iso_speed)>>2)]=$157;
      __label__ = 31; break;
    case 31: // $158
      var $159=(($name)|0);
      var $160=_strcmp($159, ((__str215)|0));
      var $161=((($160))|0)!=0;
      if ($161) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: // $162
      var $163=(($value)|0);
      var $164=_strcpy(((_make)|0), $163);
      __label__ = 33; break;
    case 33: // $165
      var $166=(($name)|0);
      var $167=_strcmp($166, ((__str216)|0));
      var $168=((($167))|0)!=0;
      if ($168) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: // $169
      var $170=(($value)|0);
      var $171=_strcpy(((_model)|0), $170);
      __label__ = 35; break;
    case 35: // $172
      var $173=(($name)|0);
      var $174=_strcmp($173, ((__str217)|0));
      var $175=((($174))|0)!=0;
      if ($175) { __label__ = 37; break; } else { __label__ = 36; break; }
    case 36: // $176
      var $177=(($value)|0);
      var $178=_strcpy(((_model2)|0), $177);
      __label__ = 37; break;
    case 37: // $179
      var $180=(($name)|0);
      var $181=_strcmp($180, ((__str218)|0));
      var $182=((($181))|0)!=0;
      if ($182) { __label__ = 39; break; } else { __label__ = 38; break; }
    case 38: // $183
      var $184=(($value)|0);
      var $185=_atoi($184);
      HEAP32[((_timestamp)>>2)]=$185;
      __label__ = 39; break;
    case 39: // $186
      var $187=(($name)|0);
      var $188=_strcmp($187, ((__str219)|0));
      var $189=((($188))|0)!=0;
      if ($189) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: // $190
      var $191=(($value)|0);
      var $192=_atoi($191);
      var $193=((($192))|0);
      var $194=($193)/1000000;
      var $195=($194);
      HEAPF32[((_shutter)>>2)]=$195;
      __label__ = 41; break;
    case 41: // $196
      var $197=(($name)|0);
      var $198=_strcmp($197, ((__str220)|0));
      var $199=((($198))|0)!=0;
      if ($199) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: // $200
      var $201=(($value)|0);
      var $202=_atof($201);
      var $203=($202);
      HEAPF32[((_aperture)>>2)]=$203;
      __label__ = 43; break;
    case 43: // $204
      var $205=(($name)|0);
      var $206=_strcmp($205, ((__str221)|0));
      var $207=((($206))|0)!=0;
      if ($207) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: // $208
      var $209=(($value)|0);
      var $210=_atof($209);
      var $211=($210);
      HEAPF32[((_focal_len)>>2)]=$211;
      __label__ = 45; break;
    case 45: // $212
      __label__ = 46; break;
    case 46: // $213
      var $214=$i;
      var $215=((($214)+1)|0);
      $i=$215;
      __label__ = 28; break;
    case 47: // $216
      __label__ = 48; break;
    case 48: // $217
      var $218=HEAP32[((_ifp)>>2)];
      var $219=$save;
      var $220=_fseek($218, $219, 0);
      __label__ = 3; break;
    case 49: // $221
      HEAP32[((_is_foveon)>>2)]=1;
      __label__ = 50; break;
    case 50: // $222
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_foveon["X"]=1;

function _adobe_coeff($make, $model) {
  var __stackBase__  = STACKTOP; STACKTOP += 228; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $cam_xyz=__stackBase__;
      var $name=__stackBase__+96;
      var $i;
      var $j;
      $1=$make;
      $2=$model;
      var $3=(($name)|0);
      var $4=$1;
      var $5=$2;
      var $6=_sprintf($3, ((__str543)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$4,HEAP32[((tempInt+4)>>2)]=$5,tempInt));
      $i=0;
      __label__ = 1; break;
    case 1: // $7
      var $8=$i;
      var $9=((($8))>>>0) < 325;
      if ($9) { __label__ = 2; break; } else { __label__ = 16; break; }
    case 2: // $10
      var $11=(($name)|0);
      var $12=$i;
      var $13=((_adobe_coeff_table+($12<<5))|0);
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$i;
      var $17=((_adobe_coeff_table+($16<<5))|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_strlen($19);
      var $21=_strncmp($11, $15, $20);
      var $22=((($21))|0)!=0;
      if ($22) { __label__ = 14; break; } else { __label__ = 3; break; }
    case 3: // $23
      var $24=$i;
      var $25=((_adobe_coeff_table+($24<<5))|0);
      var $26=(($25+4)|0);
      var $27=HEAP16[(($26)>>1)];
      var $28=((($27) << 16) >> 16)!=0;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: // $29
      var $30=$i;
      var $31=((_adobe_coeff_table+($30<<5))|0);
      var $32=(($31+4)|0);
      var $33=HEAPU16[(($32)>>1)];
      var $34=((($33))&65535);
      HEAP32[((_black)>>2)]=$34;
      __label__ = 5; break;
    case 5: // $35
      var $36=$i;
      var $37=((_adobe_coeff_table+($36<<5))|0);
      var $38=(($37+6)|0);
      var $39=HEAP16[(($38)>>1)];
      var $40=((($39) << 16) >> 16)!=0;
      if ($40) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $41
      var $42=$i;
      var $43=((_adobe_coeff_table+($42<<5))|0);
      var $44=(($43+6)|0);
      var $45=HEAPU16[(($44)>>1)];
      var $46=((($45))&65535);
      HEAP32[((_maximum)>>2)]=$46;
      __label__ = 7; break;
    case 7: // $47
      var $48=$i;
      var $49=((_adobe_coeff_table+($48<<5))|0);
      var $50=(($49+8)|0);
      var $51=(($50)|0);
      var $52=HEAP16[(($51)>>1)];
      var $53=((($52) << 16) >> 16)!=0;
      if ($53) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: // $54
      $j=0;
      __label__ = 9; break;
    case 9: // $55
      var $56=$j;
      var $57=((($56))|0) < 12;
      if ($57) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: // $58
      var $59=$j;
      var $60=$i;
      var $61=((_adobe_coeff_table+($60<<5))|0);
      var $62=(($61+8)|0);
      var $63=(($62+($59<<1))|0);
      var $64=HEAP16[(($63)>>1)];
      var $65=((($64) << 16) >> 16);
      var $66=((($65))|0);
      var $67=($66)/10000;
      var $68=$j;
      var $69=(($cam_xyz)|0);
      var $70=(($69+($68<<3))|0);
      (tempDoubleF64[0]=$67,HEAP32[(($70)>>2)]=tempDoubleI32[0],HEAP32[(($70+4)>>2)]=tempDoubleI32[1]);
      __label__ = 11; break;
    case 11: // $71
      var $72=$j;
      var $73=((($72)+1)|0);
      $j=$73;
      __label__ = 9; break;
    case 12: // $74
      var $75=(($cam_xyz)|0);
      _cam_xyz_coeff($75);
      __label__ = 13; break;
    case 13: // $76
      __label__ = 16; break;
    case 14: // $77
      __label__ = 15; break;
    case 15: // $78
      var $79=$i;
      var $80=((($79)+1)|0);
      $i=$80;
      __label__ = 1; break;
    case 16: // $81
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_adobe_coeff["X"]=1;

function _guess_byte_order($words) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $test=__stackBase__;
      var $t;
      var $msb;
      var $diff;
      var $sum=__stackBase__+8;
      $1=$words;
      $t=2;
      var $2=$sum;
      HEAP32[(($2)>>2)]=0; HEAP32[(($2+4)>>2)]=0; HEAP32[(($2+8)>>2)]=0; HEAP32[(($2+12)>>2)]=0;
      var $3=(($test)|0);
      var $4=(($3)|0);
      var $5=HEAP32[((_ifp)>>2)];
      var $6=_fread($4, 2, 2, $5);
      var $7=$1;
      var $8=((($7)-2)|0);
      $1=$8;
      __label__ = 1; break;
    case 1: // $9
      var $10=$1;
      var $11=((($10)-1)|0);
      $1=$11;
      var $12=((($10))|0)!=0;
      if ($12) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: // $13
      var $14=$t;
      var $15=(($test+($14<<1))|0);
      var $16=(($15)|0);
      var $17=HEAP32[((_ifp)>>2)];
      var $18=_fread($16, 2, 1, $17);
      $msb=0;
      __label__ = 3; break;
    case 3: // $19
      var $20=$msb;
      var $21=((($20))|0) < 2;
      if ($21) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $22
      var $23=$msb;
      var $24=$t;
      var $25=($24) ^ 2;
      var $26=(($test+($25<<1))|0);
      var $27=(($26+$23)|0);
      var $28=HEAPU8[($27)];
      var $29=((($28))&255);
      var $30=($29) << 8;
      var $31=$msb;
      var $32=((($31))|0)!=0;
      var $33=($32) ^ 1;
      var $34=((($33))&1);
      var $35=$t;
      var $36=($35) ^ 2;
      var $37=(($test+($36<<1))|0);
      var $38=(($37+$34)|0);
      var $39=HEAPU8[($38)];
      var $40=((($39))&255);
      var $41=($30) | ($40);
      var $42=$msb;
      var $43=$t;
      var $44=(($test+($43<<1))|0);
      var $45=(($44+$42)|0);
      var $46=HEAPU8[($45)];
      var $47=((($46))&255);
      var $48=($47) << 8;
      var $49=$msb;
      var $50=((($49))|0)!=0;
      var $51=($50) ^ 1;
      var $52=((($51))&1);
      var $53=$t;
      var $54=(($test+($53<<1))|0);
      var $55=(($54+$52)|0);
      var $56=HEAPU8[($55)];
      var $57=((($56))&255);
      var $58=($48) | ($57);
      var $59=((($41)-($58))|0);
      var $60=((($59))|0);
      $diff=$60;
      var $61=$diff;
      var $62=$diff;
      var $63=($61)*($62);
      var $64=$msb;
      var $65=(($sum+($64<<3))|0);
      var $66=(tempDoubleI32[0]=HEAP32[(($65)>>2)],tempDoubleI32[1]=HEAP32[(($65+4)>>2)],tempDoubleF64[0]);
      var $67=($66)+($63);
      (tempDoubleF64[0]=$67,HEAP32[(($65)>>2)]=tempDoubleI32[0],HEAP32[(($65+4)>>2)]=tempDoubleI32[1]);
      __label__ = 5; break;
    case 5: // $68
      var $69=$msb;
      var $70=((($69)+1)|0);
      $msb=$70;
      __label__ = 3; break;
    case 6: // $71
      var $72=$t;
      var $73=((($72)+1)|0);
      var $74=($73) & 3;
      $t=$74;
      __label__ = 1; break;
    case 7: // $75
      var $76=(($sum)|0);
      var $77=(tempDoubleI32[0]=HEAP32[(($76)>>2)],tempDoubleI32[1]=HEAP32[(($76+4)>>2)],tempDoubleF64[0]);
      var $78=(($sum+8)|0);
      var $79=(tempDoubleI32[0]=HEAP32[(($78)>>2)],tempDoubleI32[1]=HEAP32[(($78+4)>>2)],tempDoubleF64[0]);
      var $80=($77) < ($79);
      var $81=($80) ? 19789 : 18761;
      var $82=((($81)) & 65535);
      STACKTOP = __stackBase__;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_guess_byte_order["X"]=1;

function _find_green($bps, $bite, $off0, $off1) {
  var __stackBase__  = STACKTOP; STACKTOP += 8280; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $bitbuf=__stackBase__;
      var $vbits;
      var $col;
      var $i;
      var $c;
      var $img=__stackBase__+8;
      var $sum=__stackBase__+8264;
      $1=$bps;
      $2=$bite;
      $3=$off0;
      $4=$off1;
      (HEAP32[(($bitbuf)>>2)]=[0,0].slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=[0,0].slice(0)[1]);
      var $5=$sum;
      HEAP32[(($5)>>2)]=0; HEAP32[(($5+4)>>2)]=0; HEAP32[(($5+8)>>2)]=0; HEAP32[(($5+12)>>2)]=0;
      $c=0;
      __label__ = 1; break;
    case 1: // $6
      var $7=$c;
      var $8=((($7))|0) < 2;
      if ($8) { __label__ = 2; break; } else { __label__ = 19; break; }
    case 2: // $9
      var $10=HEAP32[((_ifp)>>2)];
      var $11=$c;
      var $12=((($11))|0)!=0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $13
      var $14=$4;
      var $18 = $14;__label__ = 5; break;
    case 4: // $15
      var $16=$3;
      var $18 = $16;__label__ = 5; break;
    case 5: // $17
      var $18;
      var $19=_fseek($10, $18, 0);
      $col=0;
      $vbits=0;
      __label__ = 6; break;
    case 6: // $20
      var $21=$col;
      var $22=HEAPU16[((_width)>>1)];
      var $23=((($22))&65535);
      var $24=((($21))|0) < ((($23))|0);
      if ($24) { __label__ = 7; break; } else { __label__ = 17; break; }
    case 7: // $25
      var $26=$1;
      var $27=$vbits;
      var $28=((($27)-($26))|0);
      $vbits=$28;
      __label__ = 8; break;
    case 8: // $29
      var $30=$vbits;
      var $31=((($30))|0) < 0;
      if ($31) { __label__ = 9; break; } else { __label__ = 15; break; }
    case 9: // $32
      var $33=$2;
      var $34=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $35=[((((($33))>>>0))>>>0),0];
      var $36=[($34.slice(0))[0] << ($35), (($34.slice(0))[1] << ($35)) | ((($34.slice(0))[0]&((Math.pow(2, ($35))-1)<<(32-($35)))) >>> (32-($35)))];
      (HEAP32[(($bitbuf)>>2)]=$36.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$36.slice(0).slice(0)[1]);
      $i=0;
      __label__ = 10; break;
    case 10: // $37
      var $38=$i;
      var $39=$2;
      var $40=((($38))|0) < ((($39))|0);
      if ($40) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: // $41
      var $42=HEAP32[((_ifp)>>2)];
      var $43=_getc_unlocked($42);
      var $44=$i;
      var $45=($43) << ($44);
      var $46=[((((($45))>>>0))>>>0),0];
      var $47=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $48=[($47.slice(0))[0] | ($46)[0], ($47.slice(0))[1] | ($46)[1]];
      (HEAP32[(($bitbuf)>>2)]=$48.slice(0).slice(0)[0],HEAP32[(($bitbuf+4)>>2)]=$48.slice(0).slice(0)[1]);
      __label__ = 12; break;
    case 12: // $49
      var $50=$i;
      var $51=((($50)+8)|0);
      $i=$51;
      __label__ = 10; break;
    case 13: // $52
      __label__ = 14; break;
    case 14: // $53
      var $54=$2;
      var $55=$vbits;
      var $56=((($55)+($54))|0);
      $vbits=$56;
      __label__ = 8; break;
    case 15: // $57
      var $58=[HEAPU32[(($bitbuf)>>2)],HEAPU32[(($bitbuf+4)>>2)]];
      var $59=$1;
      var $60=((64-($59))|0);
      var $61=$vbits;
      var $62=((($60)-($61))|0);
      var $63=[((((($62))>>>0))>>>0),0];
      var $64=[($58.slice(0))[0] << ($63), (($58.slice(0))[1] << ($63)) | ((($58.slice(0))[0]&((Math.pow(2, ($63))-1)<<(32-($63)))) >>> (32-($63)))];
      var $65=$1;
      var $66=((64-($65))|0);
      var $67=[((((($66))>>>0))>>>0),0];
      var $68=[(($64.slice(0))[0] >>> ((($67))>>>0)) | ((($64.slice(0))[1]&(Math.pow(2, ((($67))>>>0))-1))<<(32-((($67))>>>0))),($64.slice(0))[1] >>> ((($67))>>>0)];
      var $69=((($68.slice(0))[0]) & 65535);
      var $70=$col;
      var $71=$c;
      var $72=(($img+$71*4128)|0);
      var $73=(($72+($70<<1))|0);
      HEAP16[(($73)>>1)]=$69;
      __label__ = 16; break;
    case 16: // $74
      var $75=$col;
      var $76=((($75)+1)|0);
      $col=$76;
      __label__ = 6; break;
    case 17: // $77
      __label__ = 18; break;
    case 18: // $78
      var $79=$c;
      var $80=((($79)+1)|0);
      $c=$80;
      __label__ = 1; break;
    case 19: // $81
      $c=0;
      __label__ = 20; break;
    case 20: // $82
      var $83=$c;
      var $84=HEAPU16[((_width)>>1)];
      var $85=((($84))&65535);
      var $86=((($85)-1)|0);
      var $87=((($83))|0) < ((($86))|0);
      if ($87) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: // $88
      var $89=$c;
      var $90=(($img)|0);
      var $91=(($90+($89<<1))|0);
      var $92=HEAPU16[(($91)>>1)];
      var $93=((($92))&65535);
      var $94=$c;
      var $95=((($94)+1)|0);
      var $96=(($img+4128)|0);
      var $97=(($96+($95<<1))|0);
      var $98=HEAPU16[(($97)>>1)];
      var $99=((($98))&65535);
      var $100=((($93)-($99))|0);
      var $101=$c;
      var $102=(($img)|0);
      var $103=(($102+($101<<1))|0);
      var $104=HEAPU16[(($103)>>1)];
      var $105=((($104))&65535);
      var $106=$c;
      var $107=((($106)+1)|0);
      var $108=(($img+4128)|0);
      var $109=(($108+($107<<1))|0);
      var $110=HEAPU16[(($109)>>1)];
      var $111=((($110))&65535);
      var $112=((($105)-($111))|0);
      var $113=($112) >> 31;
      var $114=($100) ^ ($113);
      var $115=$c;
      var $116=(($img)|0);
      var $117=(($116+($115<<1))|0);
      var $118=HEAPU16[(($117)>>1)];
      var $119=((($118))&65535);
      var $120=$c;
      var $121=((($120)+1)|0);
      var $122=(($img+4128)|0);
      var $123=(($122+($121<<1))|0);
      var $124=HEAPU16[(($123)>>1)];
      var $125=((($124))&65535);
      var $126=((($119)-($125))|0);
      var $127=($126) >> 31;
      var $128=((($114)-($127))|0);
      var $129=((($128))|0);
      var $130=$c;
      var $131=($130) & 1;
      var $132=(($sum+($131<<3))|0);
      var $133=(tempDoubleI32[0]=HEAP32[(($132)>>2)],tempDoubleI32[1]=HEAP32[(($132+4)>>2)],tempDoubleF64[0]);
      var $134=($133)+($129);
      (tempDoubleF64[0]=$134,HEAP32[(($132)>>2)]=tempDoubleI32[0],HEAP32[(($132+4)>>2)]=tempDoubleI32[1]);
      var $135=$c;
      var $136=(($img+4128)|0);
      var $137=(($136+($135<<1))|0);
      var $138=HEAPU16[(($137)>>1)];
      var $139=((($138))&65535);
      var $140=$c;
      var $141=((($140)+1)|0);
      var $142=(($img)|0);
      var $143=(($142+($141<<1))|0);
      var $144=HEAPU16[(($143)>>1)];
      var $145=((($144))&65535);
      var $146=((($139)-($145))|0);
      var $147=$c;
      var $148=(($img+4128)|0);
      var $149=(($148+($147<<1))|0);
      var $150=HEAPU16[(($149)>>1)];
      var $151=((($150))&65535);
      var $152=$c;
      var $153=((($152)+1)|0);
      var $154=(($img)|0);
      var $155=(($154+($153<<1))|0);
      var $156=HEAPU16[(($155)>>1)];
      var $157=((($156))&65535);
      var $158=((($151)-($157))|0);
      var $159=($158) >> 31;
      var $160=($146) ^ ($159);
      var $161=$c;
      var $162=(($img+4128)|0);
      var $163=(($162+($161<<1))|0);
      var $164=HEAPU16[(($163)>>1)];
      var $165=((($164))&65535);
      var $166=$c;
      var $167=((($166)+1)|0);
      var $168=(($img)|0);
      var $169=(($168+($167<<1))|0);
      var $170=HEAPU16[(($169)>>1)];
      var $171=((($170))&65535);
      var $172=((($165)-($171))|0);
      var $173=($172) >> 31;
      var $174=((($160)-($173))|0);
      var $175=((($174))|0);
      var $176=$c;
      var $177=($176) ^ -1;
      var $178=($177) & 1;
      var $179=(($sum+($178<<3))|0);
      var $180=(tempDoubleI32[0]=HEAP32[(($179)>>2)],tempDoubleI32[1]=HEAP32[(($179+4)>>2)],tempDoubleF64[0]);
      var $181=($180)+($175);
      (tempDoubleF64[0]=$181,HEAP32[(($179)>>2)]=tempDoubleI32[0],HEAP32[(($179+4)>>2)]=tempDoubleI32[1]);
      __label__ = 22; break;
    case 22: // $182
      var $183=$c;
      var $184=((($183)+1)|0);
      $c=$184;
      __label__ = 20; break;
    case 23: // $185
      var $186=(($sum)|0);
      var $187=(tempDoubleI32[0]=HEAP32[(($186)>>2)],tempDoubleI32[1]=HEAP32[(($186+4)>>2)],tempDoubleF64[0]);
      var $188=(($sum+8)|0);
      var $189=(tempDoubleI32[0]=HEAP32[(($188)>>2)],tempDoubleI32[1]=HEAP32[(($188+4)>>2)],tempDoubleF64[0]);
      var $190=($187)/($189);
      var $191=_log($190);
      var $192=($191)*100;
      var $193=($192);
      STACKTOP = __stackBase__;
      return $193;
    default: assert(0, "bad label: " + __label__);
  }
}
_find_green["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _identify() {
  var __stackBase__  = STACKTOP; STACKTOP += 404; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $head=__stackBase__;
      var $cp;
      var $hlen;
      var $flen;
      var $fsize;
      var $zero_fsize;
      var $i;
      var $c;
      var $is_canon;
      var $jh=__stackBase__+32;
      var $pana=__stackBase__+128;
      $zero_fsize=1;
      var $1=$pana;
      assert(276 % 1 === 0, 'memcpy given ' + 276 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($1, (_identify_pana), 276, 2);
      HEAP32[((_filters)>>2)]=-1;
      HEAP32[((_flip)>>2)]=-1;
      HEAP32[((_tiff_flip)>>2)]=-1;
      HEAP16[((((_cr2_slice)|0))>>1)]=0;
      HEAP32[((_fuji_layout)>>2)]=0;
      HEAP16[((_fuji_width)>>1)]=0;
      HEAP16[((_raw_width)>>1)]=0;
      HEAP16[((_raw_height)>>1)]=0;
      HEAP16[((_left_margin)>>1)]=0;
      HEAP16[((_top_margin)>>1)]=0;
      HEAP16[((_width)>>1)]=0;
      HEAP16[((_height)>>1)]=0;
      HEAP32[((_maximum)>>2)]=0;
      HEAP8[(((_model2)|0))]=0;
      HEAP8[(((_model)|0))]=0;
      HEAP8[(((_make)|0))]=0;
      HEAP8[(((_artist)|0))]=0;
      HEAP8[(((_desc)|0))]=0;
      HEAP8[(((_cdesc)|0))]=0;
      HEAP32[((_unique_id)>>2)]=0;
      HEAPF32[((_focal_len)>>2)]=0;
      HEAPF32[((_aperture)>>2)]=0;
      HEAPF32[((_shutter)>>2)]=0;
      HEAPF32[((_iso_speed)>>2)]=0;
      HEAP32[((_tiff_nifds)>>2)]=0;
      _memset((_tiff_ifd), 0, 360, 1);
      _memset((_gpsdata), 0, 128, 1);
      _memset((_cblack), 0, 32, 1);
      _memset((_white), 0, 128, 1);
      HEAP16[((_thumb_height)>>1)]=0;
      HEAP16[((_thumb_width)>>1)]=0;
      HEAP32[((_thumb_length)>>2)]=0;
      HEAP32[((_thumb_offset)>>2)]=0;
      HEAP32[((_thumb_load_raw)>>2)]=0;
      HEAP32[((_load_raw)>>2)]=0;
      HEAP32[((_write_thumb)>>2)]=52;
      HEAP32[((_tiff_compress)>>2)]=0;
      HEAP32[((_tiff_bps)>>2)]=0;
      HEAP32[((_meta_length)>>2)]=0;
      HEAP32[((_data_offset)>>2)]=0;
      HEAP32[((_load_flags)>>2)]=0;
      HEAP32[((_dng_version)>>2)]=0;
      HEAP32[((_zero_after_ff)>>2)]=0;
      HEAP32[((_kodak_cbpp)>>2)]=0;
      HEAP32[((_is_foveon)>>2)]=0;
      HEAP32[((_black)>>2)]=0;
      HEAP32[((_tiff_samples)>>2)]=0;
      HEAP32[((_shot_order)>>2)]=0;
      HEAP32[((_timestamp)>>2)]=0;
      HEAP32[((_zero_is_bad)>>2)]=0;
      HEAP32[((_data_error)>>2)]=0;
      HEAP32[((_profile_length)>>2)]=0;
      HEAP32[((_mix_green)>>2)]=0;
      HEAP32[((_raw_color)>>2)]=1;
      HEAP32[((_is_raw)>>2)]=1;
      (tempDoubleF64[0]=1,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      HEAP32[((_tile_length)>>2)]=2147483647;
      HEAP32[((_tile_width)>>2)]=2147483647;
      $i=0;
      __label__ = 1; break;
    case 1: // $2
      var $3=$i;
      var $4=((($3))|0) < 4;
      if ($4) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: // $5
      var $6=$i;
      var $7=((($6))|0)==1;
      var $8=((($7))&1);
      var $9=((($8))|0);
      var $10=$i;
      var $11=((_cam_mul+($10<<2))|0);
      HEAPF32[(($11)>>2)]=$9;
      var $12=$i;
      var $13=((($12))|0) < 3;
      var $14=((($13))&1);
      var $15=((($14))|0);
      var $16=$i;
      var $17=((_pre_mul+($16<<2))|0);
      HEAPF32[(($17)>>2)]=$15;
      $c=0;
      __label__ = 3; break;
    case 3: // $18
      var $19=$c;
      var $20=((($19))|0) < 3;
      if ($20) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $21
      var $22=$i;
      var $23=$c;
      var $24=((_cmatrix+($23<<4))|0);
      var $25=(($24+($22<<2))|0);
      HEAPF32[(($25)>>2)]=0;
      __label__ = 5; break;
    case 5: // $26
      var $27=$c;
      var $28=((($27)+1)|0);
      $c=$28;
      __label__ = 3; break;
    case 6: // $29
      $c=0;
      __label__ = 7; break;
    case 7: // $30
      var $31=$c;
      var $32=((($31))|0) < 3;
      if ($32) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: // $33
      var $34=$c;
      var $35=$i;
      var $36=((($34))|0)==((($35))|0);
      var $37=((($36))&1);
      var $38=((($37))|0);
      var $39=$i;
      var $40=$c;
      var $41=((_rgb_cam+($40<<4))|0);
      var $42=(($41+($39<<2))|0);
      HEAPF32[(($42)>>2)]=$38;
      __label__ = 9; break;
    case 9: // $43
      var $44=$c;
      var $45=((($44)+1)|0);
      $c=$45;
      __label__ = 7; break;
    case 10: // $46
      __label__ = 11; break;
    case 11: // $47
      var $48=$i;
      var $49=((($48)+1)|0);
      $i=$49;
      __label__ = 1; break;
    case 12: // $50
      HEAP32[((_colors)>>2)]=3;
      $i=0;
      __label__ = 13; break;
    case 13: // $51
      var $52=$i;
      var $53=((($52))|0) < 16384;
      if ($53) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: // $54
      var $55=$i;
      var $56=((($55)) & 65535);
      var $57=$i;
      var $58=((_curve+($57<<1))|0);
      HEAP16[(($58)>>1)]=$56;
      __label__ = 15; break;
    case 15: // $59
      var $60=$i;
      var $61=((($60)+1)|0);
      $i=$61;
      __label__ = 13; break;
    case 16: // $62
      var $63=_get2();
      HEAP16[((_order)>>1)]=$63;
      var $64=_get4();
      $hlen=$64;
      var $65=HEAP32[((_ifp)>>2)];
      var $66=_fseek($65, 0, 0);
      var $67=(($head)|0);
      var $68=HEAP32[((_ifp)>>2)];
      var $69=_fread($67, 1, 32, $68);
      var $70=HEAP32[((_ifp)>>2)];
      var $71=_fseek($70, 0, 2);
      var $72=HEAP32[((_ifp)>>2)];
      var $73=_ftell($72);
      $fsize=$73;
      $flen=$73;
      var $74=(($head)|0);
      var $75=_my_memmem($74, 32, ((__str90)|0), 4);
      $cp=$75;
      var $76=((($75))|0)!=0;
      if ($76) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: // $77
      var $78=(($head)|0);
      var $79=_my_memmem($78, 32, ((__str89)|0), 4);
      $cp=$79;
      var $80=((($79))|0)!=0;
      if ($80) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: // $81
      var $82=$cp;
      var $83=(($head)|0);
      var $84=($82);
      var $85=($83);
      var $86=((($84)-($85))|0);
      _parse_phase_one($86);
      var $87=$cp;
      var $88=(($head)|0);
      var $89=($87);
      var $90=($88);
      var $91=((($89)-($90))|0);
      var $92=((($91))|0)!=0;
      if ($92) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: // $93
      var $94=_parse_tiff(0);
      var $95=((($94))|0)!=0;
      if ($95) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $96
      _apply_tiff();
      __label__ = 21; break;
    case 21: // $97
      __label__ = 102; break;
    case 22: // $98
      var $99=HEAP16[((_order)>>1)];
      var $100=((($99) << 16) >> 16);
      var $101=((($100))|0)==18761;
      if ($101) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: // $102
      var $103=HEAP16[((_order)>>1)];
      var $104=((($103) << 16) >> 16);
      var $105=((($104))|0)==19789;
      if ($105) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: // $106
      var $107=(($head)|0);
      var $108=(($107+6)|0);
      var $109=_memcmp($108, ((__str550)|0), 8);
      var $110=((($109))|0)!=0;
      if ($110) { __label__ = 26; break; } else { __label__ = 25; break; }
    case 25: // $111
      var $112=$hlen;
      HEAP32[((_data_offset)>>2)]=$112;
      var $113=$hlen;
      var $114=$flen;
      var $115=$hlen;
      var $116=((($114)-($115))|0);
      _parse_ciff($113, $116);
      __label__ = 29; break;
    case 26: // $117
      var $118=_parse_tiff(0);
      var $119=((($118))|0)!=0;
      if ($119) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: // $120
      _apply_tiff();
      __label__ = 28; break;
    case 28: // $121
      __label__ = 29; break;
    case 29: // $122
      __label__ = 101; break;
    case 30: // $123
      var $124=(($head)|0);
      var $125=_memcmp($124, ((__str551)|0), 4);
      var $126=((($125))|0)!=0;
      if ($126) { __label__ = 35; break; } else { __label__ = 31; break; }
    case 31: // $127
      var $128=(($head)|0);
      var $129=(($128+6)|0);
      var $130=_memcmp($129, ((__str552)|0), 4);
      var $131=((($130))|0)!=0;
      if ($131) { __label__ = 35; break; } else { __label__ = 32; break; }
    case 32: // $132
      var $133=HEAP32[((_ifp)>>2)];
      var $134=_fseek($133, 4, 0);
      var $135=_get2();
      var $136=((($135))&65535);
      var $137=((($136)+4)|0);
      HEAP32[((_data_offset)>>2)]=$137;
      var $138=HEAP32[((_ifp)>>2)];
      var $139=HEAP32[((_data_offset)>>2)];
      var $140=_fseek($138, $139, 0);
      var $141=HEAP32[((_ifp)>>2)];
      var $142=_getc_unlocked($141);
      var $143=((($142))|0)!=255;
      if ($143) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: // $144
      var $145=_parse_tiff(12);
      __label__ = 34; break;
    case 34: // $146
      HEAP32[((_thumb_offset)>>2)]=0;
      __label__ = 100; break;
    case 35: // $147
      var $148=(($head)|0);
      var $149=(($148+25)|0);
      var $150=_memcmp($149, ((__str553)|0), 7);
      var $151=((($150))|0)!=0;
      if ($151) { __label__ = 41; break; } else { __label__ = 36; break; }
    case 36: // $152
      var $153=_strcpy(((_make)|0), ((__str554)|0));
      var $154=_strcpy(((_model)|0), ((__str555)|0));
      var $155=HEAP32[((_ifp)>>2)];
      var $156=_fseek($155, 33, 0);
      _get_timestamp(1);
      var $157=HEAP32[((_ifp)>>2)];
      var $158=_fseek($157, 60, 0);
      $c=0;
      __label__ = 37; break;
    case 37: // $159
      var $160=$c;
      var $161=((($160))|0) < 4;
      if ($161) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: // $162
      var $163=_get4();
      var $164=((($163))>>>0);
      var $165=$c;
      var $166=$c;
      var $167=($166) >> 1;
      var $168=($165) ^ ($167);
      var $169=((_cam_mul+($168<<2))|0);
      HEAPF32[(($169)>>2)]=$164;
      __label__ = 39; break;
    case 39: // $170
      var $171=$c;
      var $172=((($171)+1)|0);
      $c=$172;
      __label__ = 37; break;
    case 40: // $173
      __label__ = 99; break;
    case 41: // $174
      var $175=(($head)|0);
      var $176=_strcmp($175, ((__str556)|0));
      var $177=((($176))|0)!=0;
      if ($177) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: // $178
      var $179=_strcpy(((_make)|0), ((__str557)|0));
      var $180=_strcpy(((_model)|0), ((__str558)|0));
      __label__ = 98; break;
    case 43: // $181
      var $182=(($head)|0);
      var $183=_strcmp($182, ((__str559)|0));
      var $184=((($183))|0)!=0;
      if ($184) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: // $185
      var $186=_strcpy(((_make)|0), ((__str560)|0));
      var $187=_strcpy(((_model)|0), ((__str561)|0));
      HEAP32[((_load_raw)>>2)]=56;
      __label__ = 97; break;
    case 45: // $188
      var $189=(($head)|0);
      var $190=_strcmp($189, ((__str562)|0));
      var $191=((($190))|0)!=0;
      if ($191) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: // $192
      var $193=_strcpy(((_make)|0), ((__str560)|0));
      var $194=_strcpy(((_model)|0), ((__str563)|0));
      HEAP32[((_load_raw)>>2)]=58;
      __label__ = 96; break;
    case 47: // $195
      var $196=(($head)|0);
      var $197=_memcmp($196, ((__str97)|0), 8);
      var $198=((($197))|0)!=0;
      if ($198) { __label__ = 56; break; } else { __label__ = 48; break; }
    case 48: // $199
      var $200=HEAP32[((_ifp)>>2)];
      var $201=_fseek($200, 84, 0);
      var $202=_get4();
      HEAP32[((_thumb_offset)>>2)]=$202;
      var $203=_get4();
      HEAP32[((_thumb_length)>>2)]=$203;
      var $204=HEAP32[((_ifp)>>2)];
      var $205=_fseek($204, 92, 0);
      var $206=_get4();
      _parse_fuji($206);
      var $207=HEAP32[((_thumb_offset)>>2)];
      var $208=((($207))|0) > 120;
      if ($208) { __label__ = 49; break; } else { __label__ = 55; break; }
    case 49: // $209
      var $210=HEAP32[((_ifp)>>2)];
      var $211=_fseek($210, 120, 0);
      var $212=_get4();
      $i=$212;
      var $213=((($212))|0)!=0;
      if ($213) { __label__ = 50; break; } else { var $216 = 0;__label__ = 51; break; }
    case 50: // $214
      var $216 = 1;__label__ = 51; break;
    case 51: // $215
      var $216;
      var $217=((($216))&1);
      var $218=HEAP32[((_is_raw)>>2)];
      var $219=((($218)+($217))|0);
      HEAP32[((_is_raw)>>2)]=$219;
      var $220=HEAP32[((_is_raw)>>2)];
      var $221=((($220))|0)==2;
      if ($221) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: // $222
      var $223=HEAP32[((_shot_select)>>2)];
      var $224=((($223))|0)!=0;
      if ($224) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: // $225
      var $226=$i;
      _parse_fuji($226);
      __label__ = 54; break;
    case 54: // $227
      __label__ = 55; break;
    case 55: // $228
      var $229=HEAP32[((_ifp)>>2)];
      var $230=HEAPU32[((_shot_select)>>2)];
      var $231=((($230))>>>0) > 0;
      var $232=((($231))&1);
      var $233=((($232)*28)|0);
      var $234=((($233)+100)|0);
      var $235=_fseek($229, $234, 0);
      var $236=_get4();
      HEAP32[((_data_offset)>>2)]=$236;
      var $237=_parse_tiff($236);
      var $238=HEAP32[((_thumb_offset)>>2)];
      var $239=((($238)+12)|0);
      var $240=_parse_tiff($239);
      _apply_tiff();
      __label__ = 95; break;
    case 56: // $241
      var $242=(($head)|0);
      var $243=_memcmp($242, ((__str205)|0), 4);
      var $244=((($243))|0)!=0;
      if ($244) { __label__ = 58; break; } else { __label__ = 57; break; }
    case 57: // $245
      var $246=HEAP32[((_ifp)>>2)];
      var $247=_fseek($246, 0, 0);
      _parse_riff();
      __label__ = 94; break;
    case 58: // $248
      var $249=(($head)|0);
      var $250=_memcmp($249, ((__str564)|0), 6);
      var $251=((($250))|0)!=0;
      if ($251) { __label__ = 60; break; } else { __label__ = 59; break; }
    case 59: // $252
      var $253=HEAP32[((_ifp)>>2)];
      var $254=_fseek($253, 6, 0);
      var $255=HEAP32[((_ifp)>>2)];
      var $256=_fread(((_make)|0), 1, 8, $255);
      var $257=HEAP32[((_ifp)>>2)];
      var $258=_fread(((_model)|0), 1, 8, $257);
      var $259=HEAP32[((_ifp)>>2)];
      var $260=_fread(((_model2)|0), 1, 16, $259);
      var $261=_get2();
      var $262=((($261))&65535);
      HEAP32[((_data_offset)>>2)]=$262;
      var $263=_get2();
      var $264=_get2();
      HEAP16[((_raw_width)>>1)]=$264;
      var $265=_get2();
      HEAP16[((_raw_height)>>1)]=$265;
      HEAP32[((_load_raw)>>2)]=60;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 93; break;
    case 60: // $266
      var $267=(($head)|0);
      var $268=_memcmp($267, ((__str565)|0), 8);
      var $269=((($268))|0)!=0;
      if ($269) { __label__ = 62; break; } else { __label__ = 61; break; }
    case 61: // $270
      var $271=_strcpy(((_make)|0), ((__str566)|0));
      var $272=_strcpy(((_model)|0), ((__str567)|0));
      HEAP16[((_order)>>1)]=18761;
      var $273=HEAP32[((_ifp)>>2)];
      var $274=_fseek($273, 300, 0);
      var $275=_get4();
      HEAP32[((_data_offset)>>2)]=$275;
      var $276=_get4();
      $i=$276;
      var $277=_get2();
      HEAP16[((_width)>>1)]=$277;
      var $278=_get2();
      HEAP16[((_height)>>1)]=$278;
      var $279=$i;
      var $280=HEAPU16[((_width)>>1)];
      var $281=((($280))&65535);
      var $282=((($281)*5)|0);
      var $283=((((($282))|0)/4)|0);
      var $284=HEAPU16[((_height)>>1)];
      var $285=((($284))&65535);
      var $286=((($283)*($285))|0);
      var $287=((($279)-($286))|0);
      var $288=HEAP32[((_data_offset)>>2)];
      var $289=((($288)+($287))|0);
      HEAP32[((_data_offset)>>2)]=$289;
      HEAP32[((_load_raw)>>2)]=60;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 92; break;
    case 62: // $290
      var $291=(($head)|0);
      var $292=_memcmp($291, ((__str568)|0), 4);
      var $293=((($292))|0)!=0;
      if ($293) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: // $294
      HEAP16[((_order)>>1)]=18761;
      var $295=HEAP32[((_ifp)>>2)];
      var $296=_fseek($295, 20, 0);
      var $297=_get4();
      var $298=((($297)) & 65535);
      HEAP16[((_width)>>1)]=$298;
      var $299=_get4();
      var $300=((($299)) & 65535);
      HEAP16[((_height)>>1)]=$300;
      var $301=_strcpy(((_make)|0), ((__str568)|0));
      var $302=HEAP32[((_ifp)>>2)];
      var $303=_fseek($302, 668, 0);
      var $304=HEAP32[((_ifp)>>2)];
      var $305=_fread(((_model)|0), 1, 64, $304);
      HEAP32[((_data_offset)>>2)]=4096;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=88;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 91; break;
    case 64: // $306
      var $307=(($head)|0);
      var $308=(($307+4)|0);
      var $309=_memcmp($308, ((__str569)|0), 4);
      var $310=((($309))|0)!=0;
      if ($310) { __label__ = 66; break; } else { __label__ = 65; break; }
    case 65: // $311
      var $312=_strcpy(((_make)|0), ((__str570)|0));
      var $313=_strcpy(((_model)|0), ((__str571)|0));
      _parse_redcine();
      HEAP32[((_load_raw)>>2)]=62;
      _gamma_curve(0.4166666666666667, 12.92, 1, 4095);
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 90; break;
    case 66: // $314
      var $315=(($head)|0);
      var $316=_memcmp($315, ((__str572)|0), 9);
      var $317=((($316))|0)!=0;
      if ($317) { __label__ = 68; break; } else { __label__ = 67; break; }
    case 67: // $318
      _parse_rollei();
      __label__ = 89; break;
    case 68: // $319
      var $320=(($head)|0);
      var $321=_memcmp($320, ((__str573)|0), 4);
      var $322=((($321))|0)!=0;
      if ($322) { __label__ = 70; break; } else { __label__ = 69; break; }
    case 69: // $323
      _parse_sinar_ia();
      __label__ = 88; break;
    case 70: // $324
      var $325=(($head)|0);
      var $326=_memcmp($325, ((__str574)|0), 4);
      var $327=((($326))|0)!=0;
      if ($327) { __label__ = 72; break; } else { __label__ = 71; break; }
    case 71: // $328
      _parse_minolta(0);
      __label__ = 87; break;
    case 72: // $329
      var $330=(($head)|0);
      var $331=_memcmp($330, ((__str575)|0), 4);
      var $332=((($331))|0)!=0;
      if ($332) { __label__ = 74; break; } else { __label__ = 73; break; }
    case 73: // $333
      _parse_foveon();
      __label__ = 86; break;
    case 74: // $334
      var $335=(($head)|0);
      var $336=_memcmp($335, ((__str576)|0), 2);
      var $337=((($336))|0)!=0;
      if ($337) { __label__ = 76; break; } else { __label__ = 75; break; }
    case 75: // $338
      _parse_cine();
      __label__ = 85; break;
    case 76: // $339
      $i=0;
      $zero_fsize=0;
      __label__ = 77; break;
    case 77: // $340
      var $341=$i;
      var $342=((($341))>>>0) < 84;
      if ($342) { __label__ = 78; break; } else { __label__ = 84; break; }
    case 78: // $343
      var $344=$fsize;
      var $345=$i;
      var $346=((_identify_table+$345*36)|0);
      var $347=(($346)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=((($344))|0)==((($348))|0);
      if ($349) { __label__ = 79; break; } else { __label__ = 82; break; }
    case 79: // $350
      var $351=$i;
      var $352=((_identify_table+$351*36)|0);
      var $353=(($352+4)|0);
      var $354=(($353)|0);
      var $355=_strcpy(((_make)|0), $354);
      var $356=$i;
      var $357=((_identify_table+$356*36)|0);
      var $358=(($357+16)|0);
      var $359=(($358)|0);
      var $360=_strcpy(((_model)|0), $359);
      var $361=$i;
      var $362=((_identify_table+$361*36)|0);
      var $363=(($362+35)|0);
      var $364=HEAP8[($363)];
      var $365=((($364) << 24) >> 24)!=0;
      if ($365) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: // $366
      _parse_external_jpeg();
      __label__ = 81; break;
    case 81: // $367
      __label__ = 82; break;
    case 82: // $368
      __label__ = 83; break;
    case 83: // $369
      var $370=$i;
      var $371=((($370)+1)|0);
      $i=$371;
      __label__ = 77; break;
    case 84: // $372
      __label__ = 85; break;
    case 85: // $373
      __label__ = 86; break;
    case 86: // $374
      __label__ = 87; break;
    case 87: // $375
      __label__ = 88; break;
    case 88: // $376
      __label__ = 89; break;
    case 89: // $377
      __label__ = 90; break;
    case 90: // $378
      __label__ = 91; break;
    case 91: // $379
      __label__ = 92; break;
    case 92: // $380
      __label__ = 93; break;
    case 93: // $381
      __label__ = 94; break;
    case 94: // $382
      __label__ = 95; break;
    case 95: // $383
      __label__ = 96; break;
    case 96: // $384
      __label__ = 97; break;
    case 97: // $385
      __label__ = 98; break;
    case 98: // $386
      __label__ = 99; break;
    case 99: // $387
      __label__ = 100; break;
    case 100: // $388
      __label__ = 101; break;
    case 101: // $389
      __label__ = 102; break;
    case 102: // $390
      var $391=$zero_fsize;
      var $392=((($391))|0)!=0;
      if ($392) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: // $393
      $fsize=0;
      __label__ = 104; break;
    case 104: // $394
      var $395=HEAP8[(((_make)|0))];
      var $396=((($395) << 24) >> 24);
      var $397=((($396))|0)==0;
      if ($397) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: // $398
      var $399=$flen;
      _parse_smal(0, $399);
      __label__ = 106; break;
    case 106: // $400
      var $401=HEAP8[(((_make)|0))];
      var $402=((($401) << 24) >> 24);
      var $403=((($402))|0)==0;
      if ($403) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: // $404
      HEAP32[((_is_raw)>>2)]=0;
      var $405=_parse_jpeg(0);
      __label__ = 108; break;
    case 108: // $406
      $i=0;
      __label__ = 109; break;
    case 109: // $407
      var $408=$i;
      var $409=((($408))>>>0) < 16;
      if ($409) { __label__ = 110; break; } else { __label__ = 114; break; }
    case 110: // $410
      var $411=$i;
      var $412=((_identify_corp+($411<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=_strstr(((_make)|0), $413);
      var $415=((($414))|0)!=0;
      if ($415) { __label__ = 111; break; } else { __label__ = 112; break; }
    case 111: // $416
      var $417=$i;
      var $418=((_identify_corp+($417<<2))|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=_strcpy(((_make)|0), $419);
      __label__ = 112; break;
    case 112: // $421
      __label__ = 113; break;
    case 113: // $422
      var $423=$i;
      var $424=((($423)+1)|0);
      $i=$424;
      __label__ = 109; break;
    case 114: // $425
      var $426=_strncmp(((_make)|0), ((__str7)|0), 5);
      var $427=((($426))|0)!=0;
      if ($427) { __label__ = 119; break; } else { __label__ = 115; break; }
    case 115: // $428
      var $429=_strstr(((_model)|0), ((__str577)|0));
      $cp=$429;
      var $430=((($429))|0)!=0;
      if ($430) { __label__ = 118; break; } else { __label__ = 116; break; }
    case 116: // $431
      var $432=_strstr(((_model)|0), ((__str578)|0));
      $cp=$432;
      var $433=((($432))|0)!=0;
      if ($433) { __label__ = 118; break; } else { __label__ = 117; break; }
    case 117: // $434
      var $435=_strstr(((_model)|0), ((__str579)|0));
      $cp=$435;
      var $436=((($435))|0)!=0;
      if ($436) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: // $437
      var $438=$cp;
      HEAP8[($438)]=0;
      __label__ = 119; break;
    case 119: // $439
      var $440=_strlen(((_make)|0));
      var $441=((((_make)|0)+$440)|0);
      $cp=$441;
      __label__ = 120; break;
    case 120: // $442
      var $443=$cp;
      var $444=(($443-1)|0);
      $cp=$444;
      var $445=HEAP8[($444)];
      var $446=((($445) << 24) >> 24);
      var $447=((($446))|0)==32;
      if ($447) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: // $448
      var $449=$cp;
      HEAP8[($449)]=0;
      __label__ = 120; break;
    case 122: // $450
      var $451=_strlen(((_model)|0));
      var $452=((((_model)|0)+$451)|0);
      $cp=$452;
      __label__ = 123; break;
    case 123: // $453
      var $454=$cp;
      var $455=(($454-1)|0);
      $cp=$455;
      var $456=HEAP8[($455)];
      var $457=((($456) << 24) >> 24);
      var $458=((($457))|0)==32;
      if ($458) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: // $459
      var $460=$cp;
      HEAP8[($460)]=0;
      __label__ = 123; break;
    case 125: // $461
      var $462=_strlen(((_make)|0));
      $i=$462;
      var $463=$i;
      var $464=_strncasecmp(((_model)|0), ((_make)|0), $463);
      var $465=((($464))|0)!=0;
      if ($465) { __label__ = 128; break; } else { __label__ = 126; break; }
    case 126: // $466
      var $467=$i;
      var $468=((($467)+1)|0);
      $i=$468;
      var $469=((_model+$467)|0);
      var $470=HEAP8[($469)];
      var $471=((($470) << 24) >> 24);
      var $472=((($471))|0)==32;
      if ($472) { __label__ = 127; break; } else { __label__ = 128; break; }
    case 127: // $473
      var $474=$i;
      var $475=((((_model)|0)+$474)|0);
      var $476=$i;
      var $477=((64-($476))|0);
      _llvm_memmove_p0i8_p0i8_i32(((_model)|0), $475, $477, 1, 0);
      __label__ = 128; break;
    case 128: // $478
      var $479=_strncmp(((_model)|0), ((__str580)|0), 15);
      var $480=((($479))|0)!=0;
      if ($480) { __label__ = 130; break; } else { __label__ = 129; break; }
    case 129: // $481
      var $482=_strcpy(((_model)|0), ((_model+15)|0));
      __label__ = 130; break;
    case 130: // $483
      HEAP8[(((_model2+63)|0))]=0;
      HEAP8[(((_model+63)|0))]=0;
      HEAP8[(((_make+63)|0))]=0;
      HEAP8[(((_artist+63)|0))]=0;
      HEAP8[(((_desc+511)|0))]=0;
      var $484=HEAP32[((_is_raw)>>2)];
      var $485=((($484))|0)!=0;
      if ($485) { __label__ = 132; break; } else { __label__ = 131; break; }
    case 131: // $486
      __label__ = 968; break;
    case 132: // $487
      var $488=HEAP16[((_height)>>1)];
      var $489=((($488) << 16) >> 16)!=0;
      if ($489) { __label__ = 134; break; } else { __label__ = 133; break; }
    case 133: // $490
      var $491=HEAP16[((_raw_height)>>1)];
      HEAP16[((_height)>>1)]=$491;
      __label__ = 134; break;
    case 134: // $492
      var $493=HEAP16[((_width)>>1)];
      var $494=((($493) << 16) >> 16)!=0;
      if ($494) { __label__ = 136; break; } else { __label__ = 135; break; }
    case 135: // $495
      var $496=HEAP16[((_raw_width)>>1)];
      HEAP16[((_width)>>1)]=$496;
      __label__ = 136; break;
    case 136: // $497
      var $498=HEAP16[((_fuji_width)>>1)];
      var $499=((($498) << 16) >> 16)!=0;
      if ($499) { __label__ = 137; break; } else { __label__ = 138; break; }
    case 137: // $500
      var $501=HEAPU16[((_raw_width)>>1)];
      var $502=((($501))&65535);
      var $503=((($502)+1)|0);
      var $504=((((($503))|0)/2)|0);
      var $505=((($504)) & 65535);
      HEAP16[((_fuji_width)>>1)]=$505;
      var $506=HEAPU16[((_height)>>1)];
      var $507=((($506))&65535);
      var $508=HEAPU16[((_fuji_width)>>1)];
      var $509=((($508))&65535);
      var $510=((($507)+($509))|0);
      var $511=((($510)) & 65535);
      HEAP16[((_width)>>1)]=$511;
      var $512=HEAPU16[((_width)>>1)];
      var $513=((($512))&65535);
      var $514=((($513)-1)|0);
      var $515=((($514)) & 65535);
      HEAP16[((_height)>>1)]=$515;
      (tempDoubleF64[0]=1,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 138; break;
    case 138: // $516
      var $517=HEAPU16[((_height)>>1)];
      var $518=((($517))&65535);
      var $519=((($518))|0)==2624;
      if ($519) { __label__ = 139; break; } else { __label__ = 141; break; }
    case 139: // $520
      var $521=HEAPU16[((_width)>>1)];
      var $522=((($521))&65535);
      var $523=((($522))|0)==3936;
      if ($523) { __label__ = 140; break; } else { __label__ = 141; break; }
    case 140: // $524
      HEAP16[((_height)>>1)]=2616;
      HEAP16[((_width)>>1)]=3896;
      __label__ = 141; break;
    case 141: // $525
      var $526=HEAPU16[((_height)>>1)];
      var $527=((($526))&65535);
      var $528=((($527))|0)==3136;
      if ($528) { __label__ = 142; break; } else { __label__ = 144; break; }
    case 142: // $529
      var $530=HEAPU16[((_width)>>1)];
      var $531=((($530))&65535);
      var $532=((($531))|0)==4864;
      if ($532) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: // $533
      HEAP16[((_height)>>1)]=3124;
      HEAP16[((_width)>>1)]=4688;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 144; break;
    case 144: // $534
      var $535=HEAPU16[((_width)>>1)];
      var $536=((($535))&65535);
      var $537=((($536))|0)==4352;
      if ($537) { __label__ = 145; break; } else { __label__ = 148; break; }
    case 145: // $538
      var $539=_strcmp(((_model)|0), ((__str581)|0));
      var $540=((($539))|0)!=0;
      if ($540) { __label__ = 146; break; } else { __label__ = 147; break; }
    case 146: // $541
      var $542=_strcmp(((_model)|0), ((__str582)|0));
      var $543=((($542))|0)!=0;
      if ($543) { __label__ = 148; break; } else { __label__ = 147; break; }
    case 147: // $544
      HEAP16[((_width)>>1)]=4309;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 148; break;
    case 148: // $545
      var $546=HEAPU16[((_width)>>1)];
      var $547=((($546))&65535);
      var $548=((($547))|0) >= 4960;
      if ($548) { __label__ = 149; break; } else { __label__ = 151; break; }
    case 149: // $549
      var $550=_strcmp(((_model)|0), ((__str583)|0));
      var $551=((($550))|0)!=0;
      if ($551) { __label__ = 151; break; } else { __label__ = 150; break; }
    case 150: // $552
      HEAP16[((_left_margin)>>1)]=10;
      HEAP16[((_width)>>1)]=4950;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 151; break;
    case 151: // $553
      var $554=HEAPU16[((_width)>>1)];
      var $555=((($554))&65535);
      var $556=((($555))|0)==4736;
      if ($556) { __label__ = 152; break; } else { __label__ = 154; break; }
    case 152: // $557
      var $558=_strcmp(((_model)|0), ((__str584)|0));
      var $559=((($558))|0)!=0;
      if ($559) { __label__ = 154; break; } else { __label__ = 153; break; }
    case 153: // $560
      HEAP16[((_height)>>1)]=3122;
      HEAP16[((_width)>>1)]=4684;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP16[((_top_margin)>>1)]=2;
      __label__ = 154; break;
    case 154: // $561
      var $562=HEAPU16[((_width)>>1)];
      var $563=((($562))&65535);
      var $564=((($563))|0)==7424;
      if ($564) { __label__ = 155; break; } else { __label__ = 157; break; }
    case 155: // $565
      var $566=_strcmp(((_model)|0), ((__str585)|0));
      var $567=((($566))|0)!=0;
      if ($567) { __label__ = 157; break; } else { __label__ = 156; break; }
    case 156: // $568
      HEAP16[((_height)>>1)]=5502;
      HEAP16[((_width)>>1)]=7328;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP16[((_top_margin)>>1)]=29;
      HEAP16[((_left_margin)>>1)]=48;
      __label__ = 157; break;
    case 157: // $569
      var $570=HEAPU16[((_height)>>1)];
      var $571=((($570))&65535);
      var $572=((($571))|0)==3014;
      if ($572) { __label__ = 158; break; } else { __label__ = 160; break; }
    case 158: // $573
      var $574=HEAPU16[((_width)>>1)];
      var $575=((($574))&65535);
      var $576=((($575))|0)==4096;
      if ($576) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: // $577
      HEAP16[((_width)>>1)]=4014;
      __label__ = 160; break;
    case 160: // $578
      var $579=HEAP32[((_dng_version)>>2)];
      var $580=((($579))|0)!=0;
      if ($580) { __label__ = 161; break; } else { __label__ = 171; break; }
    case 161: // $581
      var $582=HEAP32[((_filters)>>2)];
      var $583=((($582))|0)==-1;
      if ($583) { __label__ = 162; break; } else { __label__ = 163; break; }
    case 162: // $584
      HEAP32[((_filters)>>2)]=0;
      __label__ = 163; break;
    case 163: // $585
      var $586=HEAP32[((_filters)>>2)];
      var $587=((($586))|0)!=0;
      if ($587) { __label__ = 164; break; } else { __label__ = 165; break; }
    case 164: // $588
      var $589=HEAP32[((_tiff_samples)>>2)];
      HEAP32[((_is_raw)>>2)]=$589;
      __label__ = 166; break;
    case 165: // $590
      var $591=HEAP32[((_tiff_samples)>>2)];
      HEAP32[((_colors)>>2)]=$591;
      __label__ = 166; break;
    case 166: // $592
      var $593=HEAP32[((_tiff_compress)>>2)];
      var $594=((($593))|0)==1;
      if ($594) { __label__ = 167; break; } else { __label__ = 168; break; }
    case 167: // $595
      HEAP32[((_load_raw)>>2)]=64;
      __label__ = 168; break;
    case 168: // $596
      var $597=HEAP32[((_tiff_compress)>>2)];
      var $598=((($597))|0)==7;
      if ($598) { __label__ = 169; break; } else { __label__ = 170; break; }
    case 169: // $599
      HEAP32[((_load_raw)>>2)]=66;
      __label__ = 170; break;
    case 170: // $600
      __label__ = 947; break;
    case 171: // $601
      var $602=_strcmp(((_make)|0), ((__str107)|0));
      var $603=((($602))|0)!=0;
      var $604=($603) ^ 1;
      var $605=((($604))&1);
      $is_canon=$605;
      if ($604) { __label__ = 172; break; } else { __label__ = 173; break; }
    case 172: // $606
      var $607=(($head)|0);
      var $608=(($607+6)|0);
      var $609=_memcmp($608, ((__str550)|0), 8);
      var $610=((($609))|0)!=0;
      var $611=($610) ? 18 : 86;
      HEAP32[((_load_raw)>>2)]=$611;
      __label__ = 173; break;
    case 173: // $612
      var $613=_strcmp(((_make)|0), ((__str105)|0));
      var $614=((($613))|0)!=0;
      if ($614) { __label__ = 179; break; } else { __label__ = 174; break; }
    case 174: // $615
      var $616=HEAP32[((_load_raw)>>2)];
      var $617=((($616))|0)!=0;
      if ($617) { __label__ = 176; break; } else { __label__ = 175; break; }
    case 175: // $618
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 176; break;
    case 176: // $619
      var $620=HEAP8[(((_model)|0))];
      var $621=((($620) << 24) >> 24);
      var $622=((($621))|0)==69;
      if ($622) { __label__ = 177; break; } else { __label__ = 178; break; }
    case 177: // $623
      var $624=HEAP32[((_data_offset)>>2)];
      var $625=((($624))|0)!=0;
      var $626=($625) ^ 1;
      var $627=((($626))&1);
      var $628=($627) << 2;
      var $629=($628) | 2;
      var $630=HEAP32[((_load_flags)>>2)];
      var $631=($630) | ($629);
      HEAP32[((_load_flags)>>2)]=$631;
      __label__ = 178; break;
    case 178: // $632
      __label__ = 179; break;
    case 179: // $633
      var $634=_strcmp(((_make)|0), ((__str547)|0));
      var $635=((($634))|0)!=0;
      if ($635) { __label__ = 181; break; } else { __label__ = 180; break; }
    case 180: // $636
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_maximum)>>2)]=3967;
      __label__ = 181; break;
    case 181: // $637
      var $638=HEAP32[((_is_foveon)>>2)];
      var $639=((($638))|0)!=0;
      if ($639) { __label__ = 182; break; } else { __label__ = 187; break; }
    case 182: // $640
      var $641=HEAPU16[((_height)>>1)];
      var $642=((($641))&65535);
      var $643=(((($642)<<1))|0);
      var $644=HEAPU16[((_width)>>1)];
      var $645=((($644))&65535);
      var $646=((($643))|0) < ((($645))|0);
      if ($646) { __label__ = 183; break; } else { __label__ = 184; break; }
    case 183: // $647
      (tempDoubleF64[0]=0.5,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 184; break;
    case 184: // $648
      var $649=HEAPU16[((_height)>>1)];
      var $650=((($649))&65535);
      var $651=HEAPU16[((_width)>>1)];
      var $652=((($651))&65535);
      var $653=((($650))|0) > ((($652))|0);
      if ($653) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: // $654
      (tempDoubleF64[0]=2,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 186; break;
    case 186: // $655
      HEAP32[((_filters)>>2)]=0;
      HEAP32[((_load_raw)>>2)]=68;
      _simple_coeff(0);
      __label__ = 931; break;
    case 187: // $656
      var $657=$is_canon;
      var $658=((($657))|0)!=0;
      if ($658) { __label__ = 188; break; } else { __label__ = 193; break; }
    case 188: // $659
      var $660=HEAP32[((_tiff_bps)>>2)];
      var $661=((($660))|0)==15;
      if ($661) { __label__ = 189; break; } else { __label__ = 193; break; }
    case 189: // $662
      var $663=HEAPU16[((_width)>>1)];
      var $664=((($663))&65535);
      if ($664 == 3344) {
        __label__ = 190; break;
      }
      else if ($664 == 3872) {
        __label__ = 191; break;
      }
      else {
      __label__ = 192; break;
      }
      
    case 190: // $665
      var $666=HEAPU16[((_width)>>1)];
      var $667=((($666))&65535);
      var $668=((($667)-66)|0);
      var $669=((($668)) & 65535);
      HEAP16[((_width)>>1)]=$669;
      __label__ = 191; break;
    case 191: // $670
      var $671=HEAPU16[((_width)>>1)];
      var $672=((($671))&65535);
      var $673=((($672)-6)|0);
      var $674=((($673)) & 65535);
      HEAP16[((_width)>>1)]=$674;
      __label__ = 192; break;
    case 192: // $675
      HEAP32[((_filters)>>2)]=0;
      HEAP32[((_load_raw)>>2)]=70;
      __label__ = 930; break;
    case 193: // $676
      var $677=_strcmp(((_model)|0), ((__str586)|0));
      var $678=((($677))|0)!=0;
      if ($678) { __label__ = 195; break; } else { __label__ = 194; break; }
    case 194: // $679
      HEAP16[((_height)>>1)]=613;
      HEAP16[((_width)>>1)]=854;
      HEAP16[((_raw_width)>>1)]=896;
      (tempDoubleF64[0]=0.9665605095541401,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-505093660;
      HEAP32[((_load_raw)>>2)]=72;
      __label__ = 929; break;
    case 195: // $680
      var $681=_strcmp(((_model)|0), ((__str587)|0));
      var $682=((($681))|0)!=0;
      if ($682) { __label__ = 196; break; } else { __label__ = 197; break; }
    case 196: // $683
      var $684=_strcmp(((_model)|0), ((__str588)|0));
      var $685=((($684))|0)!=0;
      if ($685) { __label__ = 198; break; } else { __label__ = 197; break; }
    case 197: // $686
      HEAP16[((_height)>>1)]=773;
      HEAP16[((_width)>>1)]=960;
      HEAP16[((_raw_width)>>1)]=992;
      (tempDoubleF64[0]=1.0893617021276596,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=508436046;
      __label__ = 226; break;
    case 198: // $687
      var $688=_strcmp(((_model)|0), ((__str589)|0));
      var $689=((($688))|0)!=0;
      if ($689) { __label__ = 200; break; } else { __label__ = 199; break; }
    case 199: // $690
      HEAP16[((_height)>>1)]=968;
      HEAP16[((_width)>>1)]=1290;
      HEAP16[((_raw_width)>>1)]=1320;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=458115870;
      __label__ = 226; break;
    case 200: // $691
      var $692=_strcmp(((_model)|0), ((__str590)|0));
      var $693=((($692))|0)!=0;
      if ($693) { __label__ = 202; break; } else { __label__ = 201; break; }
    case 201: // $694
      HEAP16[((_height)>>1)]=1024;
      HEAP16[((_width)>>1)]=1552;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=508251675;
      __label__ = 226; break;
    case 202: // $695
      var $696=_strcmp(((_model)|0), ((__str591)|0));
      var $697=((($696))|0)!=0;
      if ($697) { __label__ = 204; break; } else { __label__ = 203; break; }
    case 203: // $698
      HEAP16[((_height)>>1)]=1752;
      HEAP16[((_width)>>1)]=2344;
      HEAP16[((_raw_height)>>1)]=1766;
      HEAP16[((_raw_width)>>1)]=2400;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 226; break;
    case 204: // $699
      var $700=_strcmp(((_model)|0), ((__str592)|0));
      var $701=((($700))|0)!=0;
      if ($701) { __label__ = 206; break; } else { __label__ = 205; break; }
    case 205: // $702
      HEAP16[((_height)>>1)]=1960;
      HEAP16[((_width)>>1)]=2616;
      HEAP16[((_raw_height)>>1)]=1968;
      HEAP16[((_raw_width)>>1)]=2664;
      HEAP16[((_top_margin)>>1)]=4;
      HEAP16[((_left_margin)>>1)]=4;
      __label__ = 226; break;
    case 206: // $703
      var $704=_strcmp(((_model)|0), ((__str593)|0));
      var $705=((($704))|0)!=0;
      if ($705) { __label__ = 208; break; } else { __label__ = 207; break; }
    case 207: // $706
      HEAP16[((_height)>>1)]=1984;
      HEAP16[((_width)>>1)]=2620;
      HEAP16[((_raw_height)>>1)]=1992;
      HEAP16[((_raw_width)>>1)]=2672;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=10;
      __label__ = 226; break;
    case 208: // $707
      var $708=_strcmp(((_model)|0), ((__str594)|0));
      var $709=((($708))|0)!=0;
      if ($709) { __label__ = 212; break; } else { __label__ = 209; break; }
    case 209: // $710
      var $711=_canon_s2is();
      var $712=((($711))|0)!=0;
      if ($712) { __label__ = 210; break; } else { __label__ = 211; break; }
    case 210: // $713
      var $714=_strcpy(((_model+10)|0), ((__str595)|0));
      __label__ = 211; break;
    case 211: // $715
      HEAP16[((_height)>>1)]=1960;
      HEAP16[((_width)>>1)]=2616;
      HEAP16[((_raw_height)>>1)]=1968;
      HEAP16[((_raw_width)>>1)]=2672;
      HEAP16[((_top_margin)>>1)]=8;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 226; break;
    case 212: // $716
      var $717=_strcmp(((_model)|0), ((__str596)|0));
      var $718=((($717))|0)!=0;
      if ($718) { __label__ = 214; break; } else { __label__ = 213; break; }
    case 213: // $719
      HEAP16[((_height)>>1)]=2328;
      HEAP16[((_width)>>1)]=3112;
      HEAP16[((_raw_height)>>1)]=2340;
      HEAP16[((_raw_width)>>1)]=3152;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=36;
      __label__ = 226; break;
    case 214: // $720
      var $721=_strcmp(((_model)|0), ((__str597)|0));
      var $722=((($721))|0)!=0;
      if ($722) { __label__ = 216; break; } else { __label__ = 215; break; }
    case 215: // $723
      HEAP16[((_height)>>1)]=2328;
      HEAP16[((_width)>>1)]=3096;
      HEAP16[((_raw_height)>>1)]=2346;
      HEAP16[((_raw_width)>>1)]=3152;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 226; break;
    case 216: // $724
      var $725=_strcmp(((_model)|0), ((__str598)|0));
      var $726=((($725))|0)!=0;
      if ($726) { __label__ = 218; break; } else { __label__ = 217; break; }
    case 217: // $727
      HEAP16[((_height)>>1)]=2472;
      HEAP16[((_width)>>1)]=3298;
      HEAP16[((_raw_height)>>1)]=2480;
      HEAP16[((_raw_width)>>1)]=3336;
      HEAP16[((_top_margin)>>1)]=5;
      HEAP16[((_left_margin)>>1)]=6;
      __label__ = 226; break;
    case 218: // $728
      var $729=_strcmp(((_model)|0), ((__str599)|0));
      var $730=((($729))|0)!=0;
      if ($730) { __label__ = 220; break; } else { __label__ = 219; break; }
    case 219: // $731
      HEAP16[((_height)>>1)]=2472;
      HEAP16[((_width)>>1)]=3288;
      HEAP16[((_raw_height)>>1)]=2484;
      HEAP16[((_raw_width)>>1)]=3344;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 226; break;
    case 220: // $732
      var $733=_strcmp(((_model)|0), ((__str600)|0));
      var $734=((($733))|0)!=0;
      if ($734) { __label__ = 222; break; } else { __label__ = 221; break; }
    case 221: // $735
      HEAP16[((_height)>>1)]=2760;
      HEAP16[((_width)>>1)]=3672;
      HEAP16[((_raw_height)>>1)]=2772;
      HEAP16[((_raw_width)>>1)]=3736;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 226; break;
    case 222: // $736
      var $737=_strcmp(((_model)|0), ((__str601)|0));
      var $738=((($737))|0)!=0;
      if ($738) { __label__ = 224; break; } else { __label__ = 223; break; }
    case 223: // $739
      HEAP16[((_height)>>1)]=3024;
      HEAP16[((_width)>>1)]=4032;
      HEAP16[((_raw_height)>>1)]=3048;
      HEAP16[((_raw_width)>>1)]=4104;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=48;
      __label__ = 226; break;
    case 224: // $740
      var $741=_strcmp(((_model)|0), ((__str602)|0));
      var $742=((($741))|0)!=0;
      if ($742) { __label__ = 229; break; } else { __label__ = 225; break; }
    case 225: // $743
      HEAP16[((_height)>>1)]=2128;
      HEAP16[((_width)>>1)]=2840;
      HEAP16[((_raw_height)>>1)]=2136;
      HEAP16[((_raw_width)>>1)]=2888;
      HEAP16[((_top_margin)>>1)]=8;
      HEAP16[((_left_margin)>>1)]=44;
      __label__ = 226; break;
    case 226: // $744
      HEAP32[((_tiff_bps)>>2)]=10;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=40;
      var $745=HEAPU16[((_raw_width)>>1)];
      var $746=((($745))&65535);
      var $747=((($746))|0) > 1600;
      if ($747) { __label__ = 227; break; } else { __label__ = 228; break; }
    case 227: // $748
      HEAP32[((_zero_is_bad)>>2)]=1;
      __label__ = 228; break;
    case 228: // $749
      __label__ = 915; break;
    case 229: // $750
      var $751=_strcmp(((_model)|0), ((__str603)|0));
      var $752=((($751))|0)!=0;
      if ($752) { __label__ = 231; break; } else { __label__ = 230; break; }
    case 230: // $753
      HEAP16[((_height)>>1)]=2760;
      HEAP16[((_width)>>1)]=3684;
      HEAP16[((_raw_height)>>1)]=2772;
      HEAP16[((_raw_width)>>1)]=3720;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=6;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=40;
      HEAP32[((_zero_is_bad)>>2)]=1;
      __label__ = 914; break;
    case 231: // $754
      var $755=_strcmp(((_model)|0), ((__str604)|0));
      var $756=((($755))|0)!=0;
      if ($756) { __label__ = 233; break; } else { __label__ = 232; break; }
    case 232: // $757
      HEAP16[((_height)>>1)]=2742;
      HEAP16[((_width)>>1)]=3664;
      HEAP16[((_raw_height)>>1)]=2778;
      HEAP16[((_raw_width)>>1)]=3728;
      HEAP16[((_top_margin)>>1)]=18;
      HEAP16[((_left_margin)>>1)]=16;
      HEAP32[((_filters)>>2)]=1229539657;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=40;
      HEAP32[((_zero_is_bad)>>2)]=1;
      __label__ = 913; break;
    case 233: // $758
      var $759=_strcmp(((_model)|0), ((__str605)|0));
      var $760=((($759))|0)!=0;
      if ($760) { __label__ = 235; break; } else { __label__ = 234; break; }
    case 234: // $761
      HEAP16[((_height)>>1)]=3024;
      HEAP16[((_width)>>1)]=4032;
      HEAP16[((_raw_height)>>1)]=3048;
      HEAP16[((_raw_width)>>1)]=4080;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=24;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=40;
      HEAP32[((_zero_is_bad)>>2)]=1;
      __label__ = 912; break;
    case 235: // $762
      var $763=_strcmp(((_model)|0), ((__str606)|0));
      var $764=((($763))|0)!=0;
      if ($764) { __label__ = 237; break; } else { __label__ = 236; break; }
    case 236: // $765
      HEAP16[((_height)>>1)]=3254;
      HEAP16[((_width)>>1)]=4366;
      HEAP16[((_raw_height)>>1)]=3276;
      HEAP16[((_raw_width)>>1)]=4464;
      HEAP16[((_top_margin)>>1)]=10;
      HEAP16[((_left_margin)>>1)]=25;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=40;
      HEAP32[((_zero_is_bad)>>2)]=1;
      __label__ = 911; break;
    case 237: // $766
      var $767=_strcmp(((_model)|0), ((__str607)|0));
      var $768=((($767))|0)!=0;
      if ($768) { __label__ = 239; break; } else { __label__ = 238; break; }
    case 238: // $769
      HEAP16[((_width)>>1)]=1896;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-1263225676;
      __label__ = 910; break;
    case 239: // $770
      var $771=$is_canon;
      var $772=((($771))|0)!=0;
      if ($772) { __label__ = 240; break; } else { __label__ = 244; break; }
    case 240: // $773
      var $774=HEAPU16[((_raw_width)>>1)];
      var $775=((($774))&65535);
      var $776=((($775))|0)==2144;
      if ($776) { __label__ = 241; break; } else { __label__ = 244; break; }
    case 241: // $777
      HEAP16[((_height)>>1)]=1550;
      HEAP16[((_width)>>1)]=2088;
      HEAP16[((_top_margin)>>1)]=8;
      HEAP16[((_left_margin)>>1)]=4;
      var $778=_strcmp(((_model)|0), ((__str608)|0));
      var $779=((($778))|0)!=0;
      if ($779) { __label__ = 243; break; } else { __label__ = 242; break; }
    case 242: // $780
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-1263225676;
      __label__ = 243; break;
    case 243: // $781
      __label__ = 909; break;
    case 244: // $782
      var $783=$is_canon;
      var $784=((($783))|0)!=0;
      if ($784) { __label__ = 245; break; } else { __label__ = 247; break; }
    case 245: // $785
      var $786=HEAPU16[((_raw_width)>>1)];
      var $787=((($786))&65535);
      var $788=((($787))|0)==2224;
      if ($788) { __label__ = 246; break; } else { __label__ = 247; break; }
    case 246: // $789
      HEAP16[((_height)>>1)]=1448;
      HEAP16[((_width)>>1)]=2176;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=48;
      __label__ = 908; break;
    case 247: // $790
      var $791=$is_canon;
      var $792=((($791))|0)!=0;
      if ($792) { __label__ = 248; break; } else { __label__ = 250; break; }
    case 248: // $793
      var $794=HEAPU16[((_raw_width)>>1)];
      var $795=((($794))&65535);
      var $796=((($795))|0)==2376;
      if ($796) { __label__ = 249; break; } else { __label__ = 250; break; }
    case 249: // $797
      HEAP16[((_height)>>1)]=1720;
      HEAP16[((_width)>>1)]=2312;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 907; break;
    case 250: // $798
      var $799=$is_canon;
      var $800=((($799))|0)!=0;
      if ($800) { __label__ = 251; break; } else { __label__ = 253; break; }
    case 251: // $801
      var $802=HEAPU16[((_raw_width)>>1)];
      var $803=((($802))&65535);
      var $804=((($803))|0)==2672;
      if ($804) { __label__ = 252; break; } else { __label__ = 253; break; }
    case 252: // $805
      HEAP16[((_height)>>1)]=1960;
      HEAP16[((_width)>>1)]=2616;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=12;
      __label__ = 906; break;
    case 253: // $806
      var $807=$is_canon;
      var $808=((($807))|0)!=0;
      if ($808) { __label__ = 254; break; } else { __label__ = 258; break; }
    case 254: // $809
      var $810=HEAPU16[((_raw_width)>>1)];
      var $811=((($810))&65535);
      var $812=((($811))|0)==3152;
      if ($812) { __label__ = 255; break; } else { __label__ = 258; break; }
    case 255: // $813
      HEAP16[((_height)>>1)]=2056;
      HEAP16[((_width)>>1)]=3088;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=64;
      var $814=HEAP32[((_unique_id)>>2)];
      var $815=((($814))|0)==-2147483280;
      if ($815) { __label__ = 256; break; } else { __label__ = 257; break; }
    case 256: // $816
      _adobe_coeff(((__str107)|0), ((__str609)|0));
      __label__ = 257; break;
    case 257: // $817
      __label__ = 905; break;
    case 258: // $818
      var $819=$is_canon;
      var $820=((($819))|0)!=0;
      if ($820) { __label__ = 259; break; } else { __label__ = 261; break; }
    case 259: // $821
      var $822=HEAPU16[((_raw_width)>>1)];
      var $823=((($822))&65535);
      var $824=((($823))|0)==3160;
      if ($824) { __label__ = 260; break; } else { __label__ = 261; break; }
    case 260: // $825
      HEAP16[((_height)>>1)]=2328;
      HEAP16[((_width)>>1)]=3112;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=44;
      __label__ = 904; break;
    case 261: // $826
      var $827=$is_canon;
      var $828=((($827))|0)!=0;
      if ($828) { __label__ = 262; break; } else { __label__ = 264; break; }
    case 262: // $829
      var $830=HEAPU16[((_raw_width)>>1)];
      var $831=((($830))&65535);
      var $832=((($831))|0)==3344;
      if ($832) { __label__ = 263; break; } else { __label__ = 264; break; }
    case 263: // $833
      HEAP16[((_height)>>1)]=2472;
      HEAP16[((_width)>>1)]=3288;
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=4;
      __label__ = 903; break;
    case 264: // $834
      var $835=_strcmp(((_model)|0), ((__str610)|0));
      var $836=((($835))|0)!=0;
      if ($836) { __label__ = 266; break; } else { __label__ = 265; break; }
    case 265: // $837
      HEAP32[((_filters)>>2)]=1633771873;
      var $838=HEAPU16[((((_curve+400)|0))>>1)];
      var $839=((($838))&65535);
      HEAP32[((_black)>>2)]=$839;
      __label__ = 902; break;
    case 266: // $840
      var $841=$is_canon;
      var $842=((($841))|0)!=0;
      if ($842) { __label__ = 267; break; } else { __label__ = 271; break; }
    case 267: // $843
      var $844=HEAPU16[((_raw_width)>>1)];
      var $845=((($844))&65535);
      var $846=((($845))|0)==3516;
      if ($846) { __label__ = 268; break; } else { __label__ = 271; break; }
    case 268: // $847
      HEAP16[((_top_margin)>>1)]=14;
      HEAP16[((_left_margin)>>1)]=42;
      var $848=HEAP32[((_unique_id)>>2)];
      var $849=((($848))|0)==-2147483255;
      if ($849) { __label__ = 269; break; } else { __label__ = 270; break; }
    case 269: // $850
      _adobe_coeff(((__str107)|0), ((__str611)|0));
      __label__ = 270; break;
    case 270: // $851
      __label__ = 341; break;
    case 271: // $852
      var $853=$is_canon;
      var $854=((($853))|0)!=0;
      if ($854) { __label__ = 272; break; } else { __label__ = 274; break; }
    case 272: // $855
      var $856=HEAPU16[((_raw_width)>>1)];
      var $857=((($856))&65535);
      var $858=((($857))|0)==3596;
      if ($858) { __label__ = 273; break; } else { __label__ = 274; break; }
    case 273: // $859
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=74;
      __label__ = 341; break;
    case 274: // $860
      var $861=$is_canon;
      var $862=((($861))|0)!=0;
      if ($862) { __label__ = 275; break; } else { __label__ = 279; break; }
    case 275: // $863
      var $864=HEAPU16[((_raw_width)>>1)];
      var $865=((($864))&65535);
      var $866=((($865))|0)==3744;
      if ($866) { __label__ = 276; break; } else { __label__ = 279; break; }
    case 276: // $867
      HEAP16[((_height)>>1)]=2760;
      HEAP16[((_width)>>1)]=3684;
      HEAP16[((_top_margin)>>1)]=16;
      HEAP16[((_left_margin)>>1)]=8;
      var $868=HEAPU32[((_unique_id)>>2)];
      var $869=((($868))>>>0) > 41025536;
      if ($869) { __label__ = 277; break; } else { __label__ = 278; break; }
    case 277: // $870
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=52;
      __label__ = 278; break;
    case 278: // $871
      __label__ = 899; break;
    case 279: // $872
      var $873=$is_canon;
      var $874=((($873))|0)!=0;
      if ($874) { __label__ = 280; break; } else { __label__ = 282; break; }
    case 280: // $875
      var $876=HEAPU16[((_raw_width)>>1)];
      var $877=((($876))&65535);
      var $878=((($877))|0)==3944;
      if ($878) { __label__ = 281; break; } else { __label__ = 282; break; }
    case 281: // $879
      HEAP16[((_height)>>1)]=2602;
      HEAP16[((_width)>>1)]=3908;
      HEAP16[((_top_margin)>>1)]=18;
      HEAP16[((_left_margin)>>1)]=30;
      __label__ = 898; break;
    case 282: // $880
      var $881=$is_canon;
      var $882=((($881))|0)!=0;
      if ($882) { __label__ = 283; break; } else { __label__ = 289; break; }
    case 283: // $883
      var $884=HEAPU16[((_raw_width)>>1)];
      var $885=((($884))&65535);
      var $886=((($885))|0)==3948;
      if ($886) { __label__ = 284; break; } else { __label__ = 289; break; }
    case 284: // $887
      HEAP16[((_top_margin)>>1)]=18;
      HEAP16[((_left_margin)>>1)]=42;
      var $888=HEAPU16[((_height)>>1)];
      var $889=((($888))&65535);
      var $890=((($889)-2)|0);
      var $891=((($890)) & 65535);
      HEAP16[((_height)>>1)]=$891;
      var $892=HEAP32[((_unique_id)>>2)];
      var $893=((($892))|0)==-2147483082;
      if ($893) { __label__ = 285; break; } else { __label__ = 286; break; }
    case 285: // $894
      _adobe_coeff(((__str107)|0), ((__str612)|0));
      __label__ = 286; break;
    case 286: // $895
      var $896=HEAP32[((_unique_id)>>2)];
      var $897=((($896))|0)==-2147483052;
      if ($897) { __label__ = 287; break; } else { __label__ = 288; break; }
    case 287: // $898
      _adobe_coeff(((__str107)|0), ((__str613)|0));
      __label__ = 288; break;
    case 288: // $899
      __label__ = 341; break;
    case 289: // $900
      var $901=$is_canon;
      var $902=((($901))|0)!=0;
      if ($902) { __label__ = 290; break; } else { __label__ = 292; break; }
    case 290: // $903
      var $904=HEAPU16[((_raw_width)>>1)];
      var $905=((($904))&65535);
      var $906=((($905))|0)==3984;
      if ($906) { __label__ = 291; break; } else { __label__ = 292; break; }
    case 291: // $907
      HEAP16[((_top_margin)>>1)]=20;
      HEAP16[((_left_margin)>>1)]=76;
      var $908=HEAPU16[((_height)>>1)];
      var $909=((($908))&65535);
      var $910=((($909)-2)|0);
      var $911=((($910)) & 65535);
      HEAP16[((_height)>>1)]=$911;
      __label__ = 341; break;
    case 292: // $912
      var $913=$is_canon;
      var $914=((($913))|0)!=0;
      if ($914) { __label__ = 293; break; } else { __label__ = 295; break; }
    case 293: // $915
      var $916=HEAPU16[((_raw_width)>>1)];
      var $917=((($916))&65535);
      var $918=((($917))|0)==4104;
      if ($918) { __label__ = 294; break; } else { __label__ = 295; break; }
    case 294: // $919
      HEAP16[((_height)>>1)]=3024;
      HEAP16[((_width)>>1)]=4032;
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=48;
      __label__ = 895; break;
    case 295: // $920
      var $921=$is_canon;
      var $922=((($921))|0)!=0;
      if ($922) { __label__ = 296; break; } else { __label__ = 298; break; }
    case 296: // $923
      var $924=HEAPU16[((_raw_width)>>1)];
      var $925=((($924))&65535);
      var $926=((($925))|0)==4152;
      if ($926) { __label__ = 297; break; } else { __label__ = 298; break; }
    case 297: // $927
      HEAP16[((_top_margin)>>1)]=12;
      HEAP16[((_left_margin)>>1)]=192;
      __label__ = 341; break;
    case 298: // $928
      var $929=$is_canon;
      var $930=((($929))|0)!=0;
      if ($930) { __label__ = 299; break; } else { __label__ = 301; break; }
    case 299: // $931
      var $932=HEAPU16[((_raw_width)>>1)];
      var $933=((($932))&65535);
      var $934=((($933))|0)==4160;
      if ($934) { __label__ = 300; break; } else { __label__ = 301; break; }
    case 300: // $935
      HEAP16[((_height)>>1)]=3048;
      HEAP16[((_width)>>1)]=4048;
      HEAP16[((_top_margin)>>1)]=11;
      HEAP16[((_left_margin)>>1)]=104;
      __label__ = 893; break;
    case 301: // $936
      var $937=$is_canon;
      var $938=((($937))|0)!=0;
      if ($938) { __label__ = 302; break; } else { __label__ = 306; break; }
    case 302: // $939
      var $940=HEAPU16[((_raw_width)>>1)];
      var $941=((($940))&65535);
      var $942=((($941))|0)==4312;
      if ($942) { __label__ = 303; break; } else { __label__ = 306; break; }
    case 303: // $943
      HEAP16[((_top_margin)>>1)]=18;
      HEAP16[((_left_margin)>>1)]=22;
      var $944=HEAPU16[((_height)>>1)];
      var $945=((($944))&65535);
      var $946=((($945)-2)|0);
      var $947=((($946)) & 65535);
      HEAP16[((_height)>>1)]=$947;
      var $948=HEAP32[((_unique_id)>>2)];
      var $949=((($948))|0)==-2147483274;
      if ($949) { __label__ = 304; break; } else { __label__ = 305; break; }
    case 304: // $950
      _adobe_coeff(((__str107)|0), ((__str614)|0));
      __label__ = 305; break;
    case 305: // $951
      __label__ = 341; break;
    case 306: // $952
      var $953=$is_canon;
      var $954=((($953))|0)!=0;
      if ($954) { __label__ = 307; break; } else { __label__ = 311; break; }
    case 307: // $955
      var $956=HEAPU16[((_raw_width)>>1)];
      var $957=((($956))&65535);
      var $958=((($957))|0)==4352;
      if ($958) { __label__ = 308; break; } else { __label__ = 311; break; }
    case 308: // $959
      HEAP16[((_top_margin)>>1)]=18;
      HEAP16[((_left_margin)>>1)]=62;
      var $960=HEAP32[((_unique_id)>>2)];
      var $961=((($960))|0)==-2147483000;
      if ($961) { __label__ = 309; break; } else { __label__ = 310; break; }
    case 309: // $962
      _adobe_coeff(((__str107)|0), ((__str615)|0));
      __label__ = 310; break;
    case 310: // $963
      __label__ = 341; break;
    case 311: // $964
      var $965=$is_canon;
      var $966=((($965))|0)!=0;
      if ($966) { __label__ = 312; break; } else { __label__ = 314; break; }
    case 312: // $967
      var $968=HEAPU16[((_raw_width)>>1)];
      var $969=((($968))&65535);
      var $970=((($969))|0)==4476;
      if ($970) { __label__ = 313; break; } else { __label__ = 314; break; }
    case 313: // $971
      HEAP16[((_top_margin)>>1)]=34;
      HEAP16[((_left_margin)>>1)]=90;
      __label__ = 341; break;
    case 314: // $972
      var $973=$is_canon;
      var $974=((($973))|0)!=0;
      if ($974) { __label__ = 315; break; } else { __label__ = 317; break; }
    case 315: // $975
      var $976=HEAPU16[((_raw_width)>>1)];
      var $977=((($976))&65535);
      var $978=((($977))|0)==4480;
      if ($978) { __label__ = 316; break; } else { __label__ = 317; break; }
    case 316: // $979
      HEAP16[((_height)>>1)]=3326;
      HEAP16[((_width)>>1)]=4432;
      HEAP16[((_top_margin)>>1)]=10;
      HEAP16[((_left_margin)>>1)]=12;
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 889; break;
    case 317: // $980
      var $981=$is_canon;
      var $982=((($981))|0)!=0;
      if ($982) { __label__ = 318; break; } else { __label__ = 322; break; }
    case 318: // $983
      var $984=HEAPU16[((_raw_width)>>1)];
      var $985=((($984))&65535);
      var $986=((($985))|0)==4832;
      if ($986) { __label__ = 319; break; } else { __label__ = 322; break; }
    case 319: // $987
      var $988=HEAP32[((_unique_id)>>2)];
      var $989=((($988))|0)==-2147483039;
      var $990=($989) ? 51 : 26;
      var $991=((($990)) & 65535);
      HEAP16[((_top_margin)>>1)]=$991;
      HEAP16[((_left_margin)>>1)]=62;
      var $992=HEAP32[((_unique_id)>>2)];
      var $993=((($992))|0)==-2147483054;
      if ($993) { __label__ = 320; break; } else { __label__ = 321; break; }
    case 320: // $994
      _adobe_coeff(((__str107)|0), ((__str616)|0));
      __label__ = 321; break;
    case 321: // $995
      __label__ = 341; break;
    case 322: // $996
      var $997=$is_canon;
      var $998=((($997))|0)!=0;
      if ($998) { __label__ = 323; break; } else { __label__ = 325; break; }
    case 323: // $999
      var $1000=HEAPU16[((_raw_width)>>1)];
      var $1001=((($1000))&65535);
      var $1002=((($1001))|0)==5120;
      if ($1002) { __label__ = 324; break; } else { __label__ = 325; break; }
    case 324: // $1003
      HEAP16[((_top_margin)>>1)]=45;
      var $1004=HEAPU16[((_height)>>1)];
      var $1005=((($1004))&65535);
      var $1006=((($1005)-45)|0);
      var $1007=((($1006)) & 65535);
      HEAP16[((_height)>>1)]=$1007;
      HEAP16[((_left_margin)>>1)]=142;
      HEAP16[((_width)>>1)]=4916;
      __label__ = 887; break;
    case 325: // $1008
      var $1009=$is_canon;
      var $1010=((($1009))|0)!=0;
      if ($1010) { __label__ = 326; break; } else { __label__ = 332; break; }
    case 326: // $1011
      var $1012=HEAPU16[((_raw_width)>>1)];
      var $1013=((($1012))&65535);
      var $1014=((($1013))|0)==5344;
      if ($1014) { __label__ = 327; break; } else { __label__ = 332; break; }
    case 327: // $1015
      HEAP16[((_top_margin)>>1)]=51;
      HEAP16[((_left_margin)>>1)]=142;
      var $1016=HEAP32[((_unique_id)>>2)];
      var $1017=((($1016))|0)==-2147483024;
      if ($1017) { __label__ = 328; break; } else { __label__ = 329; break; }
    case 328: // $1018
      _adobe_coeff(((__str107)|0), ((__str617)|0));
      __label__ = 329; break;
    case 329: // $1019
      var $1020=HEAP32[((_unique_id)>>2)];
      var $1021=((($1020))|0)==-2147483002;
      if ($1021) { __label__ = 330; break; } else { __label__ = 331; break; }
    case 330: // $1022
      _adobe_coeff(((__str107)|0), ((__str618)|0));
      __label__ = 331; break;
    case 331: // $1023
      __label__ = 341; break;
    case 332: // $1024
      var $1025=$is_canon;
      var $1026=((($1025))|0)!=0;
      if ($1026) { __label__ = 333; break; } else { __label__ = 335; break; }
    case 333: // $1027
      var $1028=HEAPU16[((_raw_width)>>1)];
      var $1029=((($1028))&65535);
      var $1030=((($1029))|0)==5360;
      if ($1030) { __label__ = 334; break; } else { __label__ = 335; break; }
    case 334: // $1031
      HEAP16[((_top_margin)>>1)]=51;
      HEAP16[((_left_margin)>>1)]=158;
      __label__ = 341; break;
    case 335: // $1032
      var $1033=$is_canon;
      var $1034=((($1033))|0)!=0;
      if ($1034) { __label__ = 336; break; } else { __label__ = 338; break; }
    case 336: // $1035
      var $1036=HEAPU16[((_raw_width)>>1)];
      var $1037=((($1036))&65535);
      var $1038=((($1037))|0)==5792;
      if ($1038) { __label__ = 337; break; } else { __label__ = 338; break; }
    case 337: // $1039
      HEAP16[((_top_margin)>>1)]=51;
      HEAP16[((_left_margin)>>1)]=158;
      __label__ = 341; break;
    case 338: // $1040
      var $1041=$is_canon;
      var $1042=((($1041))|0)!=0;
      if ($1042) { __label__ = 339; break; } else { __label__ = 342; break; }
    case 339: // $1043
      var $1044=HEAPU16[((_raw_width)>>1)];
      var $1045=((($1044))&65535);
      var $1046=((($1045))|0)==5108;
      if ($1046) { __label__ = 340; break; } else { __label__ = 342; break; }
    case 340: // $1047
      HEAP16[((_top_margin)>>1)]=13;
      HEAP16[((_left_margin)>>1)]=98;
      __label__ = 341; break;
    case 341: // $1048
      var $1049=HEAPU16[((_top_margin)>>1)];
      var $1050=((($1049))&65535);
      var $1051=HEAPU16[((_height)>>1)];
      var $1052=((($1051))&65535);
      var $1053=((($1052)-($1050))|0);
      var $1054=((($1053)) & 65535);
      HEAP16[((_height)>>1)]=$1054;
      var $1055=HEAPU16[((_left_margin)>>1)];
      var $1056=((($1055))&65535);
      var $1057=HEAPU16[((_width)>>1)];
      var $1058=((($1057))&65535);
      var $1059=((($1058)-($1056))|0);
      var $1060=((($1059)) & 65535);
      HEAP16[((_width)>>1)]=$1060;
      __label__ = 883; break;
    case 342: // $1061
      var $1062=$is_canon;
      var $1063=((($1062))|0)!=0;
      if ($1063) { __label__ = 343; break; } else { __label__ = 345; break; }
    case 343: // $1064
      var $1065=HEAPU16[((_raw_width)>>1)];
      var $1066=((($1065))&65535);
      var $1067=((($1066))|0)==5712;
      if ($1067) { __label__ = 344; break; } else { __label__ = 345; break; }
    case 344: // $1068
      HEAP16[((_height)>>1)]=3752;
      HEAP16[((_width)>>1)]=5640;
      HEAP16[((_top_margin)>>1)]=20;
      HEAP16[((_left_margin)>>1)]=62;
      __label__ = 882; break;
    case 345: // $1069
      var $1070=_strcmp(((_model)|0), ((__str619)|0));
      var $1071=((($1070))|0)!=0;
      if ($1071) { __label__ = 347; break; } else { __label__ = 346; break; }
    case 346: // $1072
      var $1073=HEAPF32[((((_cam_mul)|0))>>2)];
      var $1074=($1073);
      var $1075=($1074)*0.4857685009487666;
      var $1076=($1075);
      HEAPF32[((((_cam_mul)|0))>>2)]=$1076;
      var $1077=HEAPF32[((((_cam_mul+8)|0))>>2)];
      var $1078=($1077);
      var $1079=($1078)*0.807570977917981;
      var $1080=($1079);
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$1080;
      __label__ = 881; break;
    case 347: // $1081
      var $1082=_strcmp(((_model)|0), ((__str620)|0));
      var $1083=((($1082))|0)!=0;
      if ($1083) { __label__ = 349; break; } else { __label__ = 348; break; }
    case 348: // $1084
      var $1085=HEAPU16[((_width)>>1)];
      var $1086=((($1085))&65535);
      var $1087=((($1086)-4)|0);
      var $1088=((($1087)) & 65535);
      HEAP16[((_width)>>1)]=$1088;
      (tempDoubleF64[0]=0.5,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 880; break;
    case 349: // $1089
      var $1090=_strcmp(((_model)|0), ((__str621)|0));
      var $1091=((($1090))|0)!=0;
      if ($1091) { __label__ = 350; break; } else { __label__ = 353; break; }
    case 350: // $1092
      var $1093=_strcmp(((_model)|0), ((__str622)|0));
      var $1094=((($1093))|0)!=0;
      if ($1094) { __label__ = 351; break; } else { __label__ = 353; break; }
    case 351: // $1095
      var $1096=_strcmp(((_model)|0), ((__str623)|0));
      var $1097=((($1096))|0)!=0;
      if ($1097) { __label__ = 352; break; } else { __label__ = 353; break; }
    case 352: // $1098
      var $1099=_strcmp(((_model)|0), ((__str624)|0));
      var $1100=((($1099))|0)!=0;
      if ($1100) { __label__ = 354; break; } else { __label__ = 353; break; }
    case 353: // $1101
      var $1102=HEAPU16[((_height)>>1)];
      var $1103=((($1102))&65535);
      var $1104=((($1103)-3)|0);
      var $1105=((($1104)) & 65535);
      HEAP16[((_height)>>1)]=$1105;
      var $1106=HEAPU16[((_width)>>1)];
      var $1107=((($1106))&65535);
      var $1108=((($1107)-4)|0);
      var $1109=((($1108)) & 65535);
      HEAP16[((_width)>>1)]=$1109;
      __label__ = 879; break;
    case 354: // $1110
      var $1111=_strcmp(((_model)|0), ((__str625)|0));
      var $1112=((($1111))|0)!=0;
      if ($1112) { __label__ = 355; break; } else { __label__ = 357; break; }
    case 355: // $1113
      var $1114=_strcmp(((_model)|0), ((__str626)|0));
      var $1115=((($1114))|0)!=0;
      if ($1115) { __label__ = 356; break; } else { __label__ = 357; break; }
    case 356: // $1116
      var $1117=_strcmp(((_model)|0), ((__str627)|0));
      var $1118=((($1117))|0)!=0;
      if ($1118) { __label__ = 358; break; } else { __label__ = 357; break; }
    case 357: // $1119
      var $1120=HEAPU16[((_width)>>1)];
      var $1121=((($1120))&65535);
      var $1122=((($1121)-4)|0);
      var $1123=((($1122)) & 65535);
      HEAP16[((_width)>>1)]=$1123;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 878; break;
    case 358: // $1124
      var $1125=_strcmp(((_model)|0), ((__str628)|0));
      var $1126=((($1125))|0)!=0;
      if ($1126) { __label__ = 360; break; } else { __label__ = 359; break; }
    case 359: // $1127
      var $1128=HEAPU16[((_width)>>1)];
      var $1129=((($1128))&65535);
      var $1130=((($1129)-42)|0);
      var $1131=((($1130)) & 65535);
      HEAP16[((_width)>>1)]=$1131;
      __label__ = 877; break;
    case 360: // $1132
      var $1133=_strcmp(((_model)|0), ((__str629)|0));
      var $1134=((($1133))|0)!=0;
      if ($1134) { __label__ = 361; break; } else { __label__ = 362; break; }
    case 361: // $1135
      var $1136=_strcmp(((_model)|0), ((__str630)|0));
      var $1137=((($1136))|0)!=0;
      if ($1137) { __label__ = 363; break; } else { __label__ = 362; break; }
    case 362: // $1138
      var $1139=HEAPU16[((_width)>>1)];
      var $1140=((($1139))&65535);
      var $1141=((($1140)-44)|0);
      var $1142=((($1141)) & 65535);
      HEAP16[((_width)>>1)]=$1142;
      __label__ = 876; break;
    case 363: // $1143
      var $1144=_strcmp(((_model)|0), ((__str631)|0));
      var $1145=((($1144))|0)!=0;
      if ($1145) { __label__ = 365; break; } else { __label__ = 364; break; }
    case 364: // $1146
      var $1147=HEAPU16[((_width)>>1)];
      var $1148=((($1147))&65535);
      var $1149=((($1148)-28)|0);
      var $1150=((($1149)) & 65535);
      HEAP16[((_width)>>1)]=$1150;
      HEAP16[((_left_margin)>>1)]=6;
      __label__ = 875; break;
    case 365: // $1151
      var $1152=_strncmp(((_model)|0), ((__str632)|0), 3);
      var $1153=((($1152))|0)!=0;
      if ($1153) { __label__ = 366; break; } else { __label__ = 368; break; }
    case 366: // $1154
      var $1155=_strncmp(((_model)|0), ((__str633)|0), 3);
      var $1156=((($1155))|0)!=0;
      if ($1156) { __label__ = 367; break; } else { __label__ = 368; break; }
    case 367: // $1157
      var $1158=_strncmp(((_model)|0), ((__str634)|0), 3);
      var $1159=((($1158))|0)!=0;
      if ($1159) { __label__ = 369; break; } else { __label__ = 368; break; }
    case 368: // $1160
      var $1161=HEAP16[((_width)>>1)];
      var $1162=((($1161)-1)&65535);
      HEAP16[((_width)>>1)]=$1162;
      __label__ = 874; break;
    case 369: // $1163
      var $1164=_strcmp(((_model)|0), ((__str635)|0));
      var $1165=((($1164))|0)!=0;
      if ($1165) { __label__ = 371; break; } else { __label__ = 370; break; }
    case 370: // $1166
      var $1167=HEAPU16[((_width)>>1)];
      var $1168=((($1167))&65535);
      var $1169=((($1168)-42)|0);
      var $1170=((($1169)) & 65535);
      HEAP16[((_width)>>1)]=$1170;
      __label__ = 873; break;
    case 371: // $1171
      var $1172=_strcmp(((_model)|0), ((__str636)|0));
      var $1173=((($1172))|0)!=0;
      if ($1173) { __label__ = 376; break; } else { __label__ = 372; break; }
    case 372: // $1174
      var $1175=HEAP32[((_tiff_compress)>>2)];
      var $1176=((($1175))|0)==34713;
      if ($1176) { __label__ = 373; break; } else { __label__ = 375; break; }
    case 373: // $1177
      var $1178=_nikon_is_compressed();
      var $1179=((($1178))|0)!=0;
      if ($1179) { __label__ = 375; break; } else { __label__ = 374; break; }
    case 374: // $1180
      HEAP32[((_load_raw)>>2)]=4;
      var $1181=HEAP32[((_load_flags)>>2)];
      var $1182=($1181) | 1;
      HEAP32[((_load_flags)>>2)]=$1182;
      var $1183=HEAPU16[((_width)>>1)];
      var $1184=((($1183))&65535);
      var $1185=((($1184)+3)|0);
      var $1186=((($1185)) & 65535);
      HEAP16[((_width)>>1)]=$1186;
      var $1187=((($1186))&65535);
      var $1188=((($1187)+3)|0);
      var $1189=((($1188)) & 65535);
      HEAP16[((_raw_width)>>1)]=$1189;
      __label__ = 375; break;
    case 375: // $1190
      __label__ = 872; break;
    case 376: // $1191
      var $1192=_strcmp(((_model)|0), ((__str637)|0));
      var $1193=((($1192))|0)!=0;
      if ($1193) { __label__ = 378; break; } else { __label__ = 377; break; }
    case 377: // $1194
      HEAP16[((_left_margin)>>1)]=1;
      var $1195=HEAPU16[((_width)>>1)];
      var $1196=((($1195))&65535);
      var $1197=((($1196)-4)|0);
      var $1198=((($1197)) & 65535);
      HEAP16[((_width)>>1)]=$1198;
      HEAP32[((_filters)>>2)]=-1802201964;
      __label__ = 871; break;
    case 378: // $1199
      var $1200=_strncmp(((_model)|0), ((__str638)|0), 3);
      var $1201=((($1200))|0)!=0;
      if ($1201) { __label__ = 380; break; } else { __label__ = 379; break; }
    case 379: // $1202
      HEAP16[((_left_margin)>>1)]=6;
      var $1203=HEAPU16[((_width)>>1)];
      var $1204=((($1203))&65535);
      var $1205=((($1204)-14)|0);
      var $1206=((($1205)) & 65535);
      HEAP16[((_width)>>1)]=$1206;
      __label__ = 870; break;
    case 380: // $1207
      var $1208=_strncmp(((_model)|0), ((__str639)|0), 3);
      var $1209=((($1208))|0)!=0;
      if ($1209) { __label__ = 385; break; } else { __label__ = 381; break; }
    case 381: // $1210
      var $1211=HEAPU16[((_width)>>1)];
      var $1212=((($1211))&65535);
      var $1213=((($1212))|0)==3264;
      if ($1213) { __label__ = 382; break; } else { __label__ = 383; break; }
    case 382: // $1214
      var $1215=HEAPU16[((_width)>>1)];
      var $1216=((($1215))&65535);
      var $1217=((($1216)-32)|0);
      var $1218=((($1217)) & 65535);
      HEAP16[((_width)>>1)]=$1218;
      __label__ = 384; break;
    case 383: // $1219
      var $1220=HEAPU16[((_width)>>1)];
      var $1221=((($1220))&65535);
      var $1222=((($1221)-8)|0);
      var $1223=((($1222)) & 65535);
      HEAP16[((_width)>>1)]=$1223;
      __label__ = 384; break;
    case 384: // $1224
      __label__ = 869; break;
    case 385: // $1225
      var $1226=_strncmp(((_model)|0), ((__str640)|0), 4);
      var $1227=((($1226))|0)!=0;
      if ($1227) { __label__ = 387; break; } else { __label__ = 386; break; }
    case 386: // $1228
      var $1229=HEAPU16[((_width)>>1)];
      var $1230=((($1229))&65535);
      var $1231=((($1230)-32)|0);
      var $1232=((($1231)) & 65535);
      HEAP16[((_width)>>1)]=$1232;
      __label__ = 868; break;
    case 387: // $1233
      var $1234=_strncmp(((_model)|0), ((__str641)|0), 9);
      var $1235=((($1234))|0)!=0;
      if ($1235) { __label__ = 392; break; } else { __label__ = 388; break; }
    case 388: // $1236
      HEAP32[((_load_flags)>>2)]=24;
      HEAP32[((_filters)>>2)]=-1802201964;
      var $1237=HEAP8[(((_model+9)|0))];
      var $1238=((($1237) << 24) >> 24);
      var $1239=((($1238))|0)==55;
      if ($1239) { __label__ = 389; break; } else { __label__ = 391; break; }
    case 389: // $1240
      var $1241=HEAPF32[((_iso_speed)>>2)];
      var $1242=($1241) >= 400;
      if ($1242) { __label__ = 390; break; } else { __label__ = 391; break; }
    case 390: // $1243
      HEAP32[((_black)>>2)]=255;
      __label__ = 391; break;
    case 391: // $1244
      __label__ = 867; break;
    case 392: // $1245
      var $1246=_strncmp(((_model)|0), ((__str642)|0), 2);
      var $1247=((($1246))|0)!=0;
      if ($1247) { __label__ = 394; break; } else { __label__ = 393; break; }
    case 393: // $1248
      var $1249=HEAPU16[((_height)>>1)];
      var $1250=((($1249))&65535);
      var $1251=((($1250)-2)|0);
      var $1252=((($1251)) & 65535);
      HEAP16[((_height)>>1)]=$1252;
      __label__ = 866; break;
    case 394: // $1253
      var $1254=$fsize;
      var $1255=((($1254))|0)==1581060;
      if ($1255) { __label__ = 395; break; } else { __label__ = 396; break; }
    case 395: // $1256
      HEAP16[((_height)>>1)]=963;
      HEAP16[((_width)>>1)]=1287;
      HEAP16[((_raw_width)>>1)]=1632;
      HEAP32[((_maximum)>>2)]=1012;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=505290270;
      _simple_coeff(3);
      HEAPF32[((((_pre_mul)|0))>>2)]=1.2085000276565552;
      HEAPF32[((((_pre_mul+4)|0))>>2)]=1.0943000316619873;
      HEAPF32[((((_pre_mul+12)|0))>>2)]=1.1102999448776245;
      __label__ = 398; break;
    case 396: // $1257
      var $1258=$fsize;
      var $1259=((($1258))|0)==2465792;
      if ($1259) { __label__ = 397; break; } else { __label__ = 399; break; }
    case 397: // $1260
      HEAP16[((_height)>>1)]=1203;
      HEAP16[((_width)>>1)]=1616;
      HEAP16[((_raw_width)>>1)]=2048;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=1263225675;
      _adobe_coeff(((__str105)|0), ((__str643)|0));
      __label__ = 398; break;
    case 398: // $1261
      HEAP32[((_tiff_bps)>>2)]=10;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=6;
      __label__ = 864; break;
    case 399: // $1262
      var $1263=$fsize;
      var $1264=((($1263))|0)==4771840;
      if ($1264) { __label__ = 400; break; } else { __label__ = 406; break; }
    case 400: // $1265
      HEAP16[((_height)>>1)]=1540;
      HEAP16[((_width)>>1)]=2064;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-505290271;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=6;
      var $1266=HEAP32[((_timestamp)>>2)];
      var $1267=((($1266))|0)!=0;
      if ($1267) { __label__ = 403; break; } else { __label__ = 401; break; }
    case 401: // $1268
      var $1269=_nikon_e995();
      var $1270=((($1269))|0)!=0;
      if ($1270) { __label__ = 402; break; } else { __label__ = 403; break; }
    case 402: // $1271
      var $1272=_strcpy(((_model)|0), ((__str644)|0));
      __label__ = 403; break;
    case 403: // $1273
      var $1274=_strcmp(((_model)|0), ((__str644)|0));
      var $1275=((($1274))|0)!=0;
      if ($1275) { __label__ = 404; break; } else { __label__ = 405; break; }
    case 404: // $1276
      HEAP32[((_filters)>>2)]=-1263225676;
      _simple_coeff(3);
      HEAPF32[((((_pre_mul)|0))>>2)]=1.1959999799728394;
      HEAPF32[((((_pre_mul+4)|0))>>2)]=1.246000051498413;
      HEAPF32[((((_pre_mul+8)|0))>>2)]=1.0180000066757202;
      __label__ = 405; break;
    case 405: // $1277
      __label__ = 863; break;
    case 406: // $1278
      var $1279=_strcmp(((_model)|0), ((__str645)|0));
      var $1280=((($1279))|0)!=0;
      if ($1280) { __label__ = 411; break; } else { __label__ = 407; break; }
    case 407: // $1281
      var $1282=HEAP32[((_timestamp)>>2)];
      var $1283=((($1282))|0)!=0;
      if ($1283) { __label__ = 410; break; } else { __label__ = 408; break; }
    case 408: // $1284
      var $1285=_nikon_e2100();
      var $1286=((($1285))|0)!=0;
      if ($1286) { __label__ = 410; break; } else { __label__ = 409; break; }
    case 409: // $1287
      __label__ = 413; break;
    case 410: // $1288
      HEAP16[((_height)>>1)]=1206;
      HEAP16[((_width)>>1)]=1616;
      HEAP32[((_load_flags)>>2)]=30;
      __label__ = 862; break;
    case 411: // $1289
      var $1290=_strcmp(((_model)|0), ((__str646)|0));
      var $1291=((($1290))|0)!=0;
      if ($1291) { __label__ = 414; break; } else { __label__ = 412; break; }
    case 412: // $1292
      __label__ = 413; break;
    case 413: // $1293
      var $1294=_strcpy(((_model)|0), ((__str646)|0));
      HEAP16[((_height)>>1)]=1204;
      HEAP16[((_width)>>1)]=1616;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=1263225675;
      __label__ = 861; break;
    case 414: // $1295
      var $1296=$fsize;
      var $1297=((($1296))|0)==4775936;
      if ($1297) { __label__ = 415; break; } else { __label__ = 429; break; }
    case 415: // $1298
      HEAP16[((_height)>>1)]=1542;
      HEAP16[((_width)>>1)]=2064;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=30;
      var $1299=HEAP32[((_timestamp)>>2)];
      var $1300=((($1299))|0)!=0;
      if ($1300) { __label__ = 417; break; } else { __label__ = 416; break; }
    case 416: // $1301
      _nikon_3700();
      __label__ = 417; break;
    case 417: // $1302
      var $1303=HEAP8[(((_model)|0))];
      var $1304=((($1303) << 24) >> 24);
      var $1305=((($1304))|0)==69;
      if ($1305) { __label__ = 418; break; } else { __label__ = 420; break; }
    case 418: // $1306
      var $1307=_atoi(((_model+1)|0));
      var $1308=((($1307))|0) < 3700;
      if ($1308) { __label__ = 419; break; } else { __label__ = 420; break; }
    case 419: // $1309
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 420; break;
    case 420: // $1310
      var $1311=_strcmp(((_model)|0), ((__str647)|0));
      var $1312=((($1311))|0)!=0;
      if ($1312) { __label__ = 422; break; } else { __label__ = 421; break; }
    case 421: // $1313
      HEAP32[((_flip)>>2)]=1;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 422; break;
    case 422: // $1314
      var $1315=HEAP8[(((_make)|0))];
      var $1316=((($1315) << 24) >> 24);
      var $1317=((($1316))|0)==79;
      if ($1317) { __label__ = 423; break; } else { __label__ = 428; break; }
    case 423: // $1318
      var $1319=_find_green(12, 32, 1188864, 3576832);
      var $1320=((($1319))|0);
      $i=$1320;
      var $1321=_find_green(12, 32, 2383920, 2387016);
      var $1322=((($1321))|0);
      $c=$1322;
      var $1323=$i;
      var $1324=_abs($1323);
      var $1325=$c;
      var $1326=_abs($1325);
      var $1327=((($1324))|0) < ((($1326))|0);
      if ($1327) { __label__ = 424; break; } else { __label__ = 425; break; }
    case 424: // $1328
      var $1329=$i;
      var $1330=$c;
      var $1331=((($1329)+($1330))|0);
      $i=$1331;
      var $1332=$i;
      var $1333=$c;
      var $1334=((($1332)-($1333))|0);
      $c=$1334;
      var $1335=$i;
      var $1336=$c;
      var $1337=((($1335)-($1336))|0);
      $i=$1337;
      HEAP32[((_load_flags)>>2)]=24;
      __label__ = 425; break;
    case 425: // $1338
      var $1339=$i;
      var $1340=((($1339))|0) < 0;
      if ($1340) { __label__ = 426; break; } else { __label__ = 427; break; }
    case 426: // $1341
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 427; break;
    case 427: // $1342
      __label__ = 428; break;
    case 428: // $1343
      __label__ = 860; break;
    case 429: // $1344
      var $1345=$fsize;
      var $1346=((($1345))|0)==5869568;
      if ($1346) { __label__ = 430; break; } else { __label__ = 434; break; }
    case 430: // $1347
      HEAP16[((_height)>>1)]=1710;
      HEAP16[((_width)>>1)]=2288;
      HEAP32[((_filters)>>2)]=370546198;
      var $1348=HEAP32[((_timestamp)>>2)];
      var $1349=((($1348))|0)!=0;
      if ($1349) { __label__ = 433; break; } else { __label__ = 431; break; }
    case 431: // $1350
      var $1351=_minolta_z2();
      var $1352=((($1351))|0)!=0;
      if ($1352) { __label__ = 432; break; } else { __label__ = 433; break; }
    case 432: // $1353
      var $1354=_strcpy(((_make)|0), ((__str545)|0));
      var $1355=_strcpy(((_model)|0), ((__str648)|0));
      __label__ = 433; break;
    case 433: // $1356
      HEAP32[((_load_raw)>>2)]=4;
      var $1357=HEAP8[(((_make)|0))];
      var $1358=((($1357) << 24) >> 24);
      var $1359=((($1358))|0)==77;
      var $1360=((($1359))&1);
      var $1361=((($1360)*24)|0);
      var $1362=((($1361)+6)|0);
      HEAP32[((_load_flags)>>2)]=$1362;
      __label__ = 859; break;
    case 434: // $1363
      var $1364=_strcmp(((_model)|0), ((__str649)|0));
      var $1365=((($1364))|0)!=0;
      if ($1365) { __label__ = 436; break; } else { __label__ = 435; break; }
    case 435: // $1366
      HEAP16[((_height)>>1)]=1708;
      HEAP16[((_width)>>1)]=2288;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-1263225676;
      __label__ = 858; break;
    case 436: // $1367
      var $1368=$fsize;
      var $1369=((($1368))|0)==7438336;
      if ($1369) { __label__ = 437; break; } else { __label__ = 438; break; }
    case 437: // $1370
      HEAP16[((_height)>>1)]=1924;
      HEAP16[((_width)>>1)]=2576;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-1263225676;
      __label__ = 857; break;
    case 438: // $1371
      var $1372=$fsize;
      var $1373=((($1372))|0)==8998912;
      if ($1373) { __label__ = 439; break; } else { __label__ = 440; break; }
    case 439: // $1374
      HEAP16[((_height)>>1)]=2118;
      HEAP16[((_width)>>1)]=2832;
      HEAP32[((_maximum)>>2)]=3971;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=30;
      __label__ = 856; break;
    case 440: // $1375
      var $1376=_strcmp(((_make)|0), ((__str97)|0));
      var $1377=((($1376))|0)!=0;
      if ($1377) { __label__ = 459; break; } else { __label__ = 441; break; }
    case 441: // $1378
      var $1379=_strcmp(((_model+7)|0), ((__str650)|0));
      var $1380=((($1379))|0)!=0;
      if ($1380) { __label__ = 443; break; } else { __label__ = 442; break; }
    case 442: // $1381
      var $1382=_strcpy(((_model+7)|0), ((__str651)|0));
      HEAP16[((_height)>>1)]=2144;
      HEAP16[((_width)>>1)]=2880;
      HEAP32[((_flip)>>2)]=6;
      __label__ = 448; break;
    case 443: // $1383
      var $1384=HEAP32[((_load_raw)>>2)];
      var $1385=((($1384))|0)!=4;
      if ($1385) { __label__ = 444; break; } else { __label__ = 447; break; }
    case 444: // $1386
      var $1387=HEAP32[((_is_raw)>>2)];
      var $1388=((($1387))|0)==2;
      if ($1388) { __label__ = 445; break; } else { var $1393 = 0;__label__ = 446; break; }
    case 445: // $1389
      var $1390=HEAP32[((_shot_select)>>2)];
      var $1391=((($1390))|0)!=0;
      var $1393 = $1391;__label__ = 446; break;
    case 446: // $1392
      var $1393;
      var $1394=($1393) ? 12032 : 15872;
      HEAP32[((_maximum)>>2)]=$1394;
      __label__ = 447; break;
    case 447: // $1395
      __label__ = 448; break;
    case 448: // $1396
      var $1397=HEAPU16[((_raw_height)>>1)];
      var $1398=((($1397))&65535);
      var $1399=HEAPU16[((_height)>>1)];
      var $1400=((($1399))&65535);
      var $1401=((($1398)-($1400))|0);
      var $1402=($1401) >> 2;
      var $1403=($1402) << 1;
      var $1404=((($1403)) & 65535);
      HEAP16[((_top_margin)>>1)]=$1404;
      var $1405=HEAPU16[((_raw_width)>>1)];
      var $1406=((($1405))&65535);
      var $1407=HEAPU16[((_width)>>1)];
      var $1408=((($1407))&65535);
      var $1409=((($1406)-($1408))|0);
      var $1410=($1409) >> 2;
      var $1411=($1410) << 1;
      var $1412=((($1411)) & 65535);
      HEAP16[((_left_margin)>>1)]=$1412;
      var $1413=HEAPU16[((_width)>>1)];
      var $1414=((($1413))&65535);
      var $1415=((($1414))|0)==3328;
      if ($1415) { __label__ = 449; break; } else { __label__ = 450; break; }
    case 449: // $1416
      HEAP16[((_width)>>1)]=3262;
      HEAP16[((_left_margin)>>1)]=34;
      __label__ = 450; break;
    case 450: // $1417
      var $1418=_strcmp(((_model)|0), ((__str652)|0));
      var $1419=((($1418))|0)!=0;
      if ($1419) { __label__ = 452; break; } else { __label__ = 451; break; }
    case 451: // $1420
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 452; break;
    case 452: // $1421
      var $1422=HEAP32[((_fuji_layout)>>2)];
      var $1423=((($1422))|0)!=0;
      if ($1423) { __label__ = 453; break; } else { __label__ = 454; break; }
    case 453: // $1424
      var $1425=HEAP32[((_is_raw)>>2)];
      var $1426=HEAPU16[((_raw_width)>>1)];
      var $1427=((($1426))&65535);
      var $1428=((($1427)*($1425))|0);
      var $1429=((($1428)) & 65535);
      HEAP16[((_raw_width)>>1)]=$1429;
      __label__ = 454; break;
    case 454: // $1430
      var $1431=HEAP32[((_load_raw)>>2)];
      var $1432=((($1431))|0)==50;
      if ($1432) { __label__ = 455; break; } else { __label__ = 458; break; }
    case 455: // $1433
      var $1434=HEAPU16[((_width)>>1)];
      var $1435=((($1434))&65535);
      var $1436=HEAP32[((_fuji_layout)>>2)];
      var $1437=((($1436))|0)!=0;
      var $1438=($1437) ^ 1;
      var $1439=((($1438))&1);
      var $1440=($1435) >> ((($1439))|0);
      var $1441=((($1440)) & 65535);
      HEAP16[((_fuji_width)>>1)]=$1441;
      var $1442=HEAPU16[((_height)>>1)];
      var $1443=((($1442))&65535);
      var $1444=HEAP32[((_fuji_layout)>>2)];
      var $1445=($1443) >> ((($1444))|0);
      var $1446=HEAPU16[((_fuji_width)>>1)];
      var $1447=((($1446))&65535);
      var $1448=((($1445)+($1447))|0);
      var $1449=((($1448)) & 65535);
      HEAP16[((_width)>>1)]=$1449;
      var $1450=HEAP16[((_height)>>1)];
      HEAP16[((_raw_height)>>1)]=$1450;
      var $1451=HEAPU16[((_width)>>1)];
      var $1452=((($1451))&65535);
      var $1453=((($1452)-1)|0);
      var $1454=((($1453)) & 65535);
      HEAP16[((_height)>>1)]=$1454;
      var $1455=HEAPU16[((_fuji_width)>>1)];
      var $1456=((($1455))&65535);
      var $1457=($1456) ^ -1;
      var $1458=($1457) & 1;
      var $1459=((($1458))|0)!=0;
      if ($1459) { __label__ = 456; break; } else { __label__ = 457; break; }
    case 456: // $1460
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 457; break;
    case 457: // $1461
      __label__ = 458; break;
    case 458: // $1462
      __label__ = 855; break;
    case 459: // $1463
      var $1464=_strcmp(((_model)|0), ((__str653)|0));
      var $1465=((($1464))|0)!=0;
      if ($1465) { __label__ = 461; break; } else { __label__ = 460; break; }
    case 460: // $1466
      HEAP16[((_height)>>1)]=986;
      HEAP16[((_width)>>1)]=1534;
      HEAP32[((_data_offset)>>2)]=513;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP32[((_load_raw)>>2)]=74;
      __label__ = 854; break;
    case 461: // $1467
      var $1468=_strcmp(((_model)|0), ((__str654)|0));
      var $1469=((($1468))|0)!=0;
      if ($1469) { __label__ = 463; break; } else { __label__ = 462; break; }
    case 462: // $1470
      HEAP16[((_height)>>1)]=1712;
      HEAP16[((_width)>>1)]=2312;
      HEAP16[((_raw_width)>>1)]=2336;
      __label__ = 485; break;
    case 463: // $1471
      var $1472=_strcmp(((_model)|0), ((__str655)|0));
      var $1473=((($1472))|0)!=0;
      if ($1473) { __label__ = 465; break; } else { __label__ = 464; break; }
    case 464: // $1474
      __label__ = 479; break;
    case 465: // $1475
      var $1476=_strcasecmp(((_make)|0), ((__str544)|0));
      var $1477=((($1476))|0)!=0;
      if ($1477) { __label__ = 489; break; } else { __label__ = 466; break; }
    case 466: // $1478
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=4095;
      var $1479=_strncmp(((_model)|0), ((__str656)|0), 8);
      var $1480=((($1479))|0)!=0;
      if ($1480) { __label__ = 470; break; } else { __label__ = 467; break; }
    case 467: // $1481
      var $1482=_strcmp(((_model)|0), ((__str173)|0));
      var $1483=((($1482))|0)!=0;
      if ($1483) { __label__ = 469; break; } else { __label__ = 468; break; }
    case 468: // $1484
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 469; break;
    case 469: // $1485
      HEAP32[((_tiff_bps)>>2)]=12;
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 488; break;
    case 470: // $1486
      var $1487=_strncmp(((_model)|0), ((__str657)|0), 5);
      var $1488=((($1487))|0)!=0;
      if ($1488) { __label__ = 471; break; } else { __label__ = 473; break; }
    case 471: // $1489
      var $1490=_strncmp(((_model)|0), ((__str658)|0), 5);
      var $1491=((($1490))|0)!=0;
      if ($1491) { __label__ = 472; break; } else { __label__ = 473; break; }
    case 472: // $1492
      var $1493=_strncmp(((_model)|0), ((__str659)|0), 6);
      var $1494=((($1493))|0)!=0;
      if ($1494) { __label__ = 474; break; } else { __label__ = 473; break; }
    case 473: // $1495
      var $1496=HEAP8[(((_model)|0))];
      var $1497=((($1496) << 24) >> 24);
      var $1498=((($1497))|0)==77;
      var $1499=((($1498))&1);
      var $1500=((((_model+6)|0)+$1499)|0);
      var $1501=_sprintf(((_model+20)|0), ((__str660)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1500,tempInt));
      _adobe_coeff(((_make)|0), ((_model+20)|0));
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 487; break;
    case 474: // $1502
      var $1503=_strncmp(((_model)|0), ((__str661)|0), 8);
      var $1504=((($1503))|0)!=0;
      if ($1504) { __label__ = 486; break; } else { __label__ = 475; break; }
    case 475: // $1505
      var $1506=HEAP8[(((_model+8)|0))];
      var $1507=((($1506) << 24) >> 24);
      var $1508=((($1507))|0)==52;
      if ($1508) { __label__ = 476; break; } else { __label__ = 477; break; }
    case 476: // $1509
      HEAP16[((_height)>>1)]=1716;
      HEAP16[((_width)>>1)]=2304;
      __label__ = 484; break;
    case 477: // $1510
      var $1511=HEAP8[(((_model+8)|0))];
      var $1512=((($1511) << 24) >> 24);
      var $1513=((($1512))|0)==53;
      if ($1513) { __label__ = 478; break; } else { __label__ = 480; break; }
    case 478: // $1514
      __label__ = 479; break;
    case 479: // $1515
      HEAP16[((_height)>>1)]=1956;
      HEAP16[((_width)>>1)]=2607;
      HEAP16[((_raw_width)>>1)]=2624;
      __label__ = 483; break;
    case 480: // $1516
      var $1517=HEAP8[(((_model+8)|0))];
      var $1518=((($1517) << 24) >> 24);
      var $1519=((($1518))|0)==54;
      if ($1519) { __label__ = 481; break; } else { __label__ = 482; break; }
    case 481: // $1520
      HEAP16[((_height)>>1)]=2136;
      HEAP16[((_width)>>1)]=2848;
      __label__ = 482; break;
    case 482: // $1521
      __label__ = 483; break;
    case 483: // $1522
      __label__ = 484; break;
    case 484: // $1523
      var $1524=HEAP32[((_data_offset)>>2)];
      var $1525=((($1524)+14)|0);
      HEAP32[((_data_offset)>>2)]=$1525;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 485; break;
    case 485: // $1526
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=991;
      HEAP16[((_order)>>1)]=19789;
      __label__ = 486; break;
    case 486: // $1527
      __label__ = 487; break;
    case 487: // $1528
      __label__ = 488; break;
    case 488: // $1529
      __label__ = 851; break;
    case 489: // $1530
      var $1531=_strcmp(((_model)|0), ((__str662)|0));
      var $1532=((($1531))|0)!=0;
      if ($1532) { __label__ = 491; break; } else { __label__ = 490; break; }
    case 490: // $1533
      HEAP32[((_data_error)>>2)]=-1;
      __label__ = 850; break;
    case 491: // $1534
      var $1535=_strcmp(((_model)|0), ((__str663)|0));
      var $1536=((($1535))|0)!=0;
      if ($1536) { __label__ = 493; break; } else { __label__ = 492; break; }
    case 492: // $1537
      var $1538=HEAPU16[((_height)>>1)];
      var $1539=((($1538))&65535);
      var $1540=((($1539)-2)|0);
      var $1541=((($1540)) & 65535);
      HEAP16[((_height)>>1)]=$1541;
      __label__ = 849; break;
    case 493: // $1542
      var $1543=_strcmp(((_model)|0), ((__str664)|0));
      var $1544=((($1543))|0)!=0;
      if ($1544) { __label__ = 498; break; } else { __label__ = 494; break; }
    case 494: // $1545
      var $1546=$fsize;
      var $1547=((($1546))|0)==3178560;
      if ($1547) { __label__ = 495; break; } else { __label__ = 496; break; }
    case 495: // $1548
      HEAP16[((_height)>>1)]=1540;
      HEAP16[((_width)>>1)]=2064;
      HEAP32[((_load_raw)>>2)]=16;
      var $1549=HEAPF32[((((_cam_mul)|0))>>2)];
      var $1550=($1549)*4;
      HEAPF32[((((_cam_mul)|0))>>2)]=$1550;
      var $1551=HEAPF32[((((_cam_mul+8)|0))>>2)];
      var $1552=($1551)*4;
      HEAPF32[((((_cam_mul+8)|0))>>2)]=$1552;
      __label__ = 497; break;
    case 496: // $1553
      HEAP16[((_height)>>1)]=1544;
      HEAP16[((_width)>>1)]=2068;
      HEAP16[((_raw_width)>>1)]=3136;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_maximum)>>2)]=3964;
      __label__ = 497; break;
    case 497: // $1554
      __label__ = 848; break;
    case 498: // $1555
      var $1556=$fsize;
      var $1557=((($1556))|0)==6114240;
      if ($1557) { __label__ = 499; break; } else { __label__ = 500; break; }
    case 499: // $1558
      HEAP16[((_height)>>1)]=1737;
      HEAP16[((_width)>>1)]=2324;
      HEAP16[((_raw_width)>>1)]=3520;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_maximum)>>2)]=3962;
      __label__ = 847; break;
    case 500: // $1559
      var $1560=_strcmp(((_model)|0), ((__str665)|0));
      var $1561=((($1560))|0)!=0;
      if ($1561) { __label__ = 502; break; } else { __label__ = 501; break; }
    case 501: // $1562
      HEAP16[((_height)>>1)]=2302;
      HEAP16[((_width)>>1)]=3072;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=30;
      __label__ = 846; break;
    case 502: // $1563
      var $1564=_strcmp(((_model)|0), ((__str666)|0));
      var $1565=((($1564))|0)!=0;
      if ($1565) { __label__ = 504; break; } else { __label__ = 503; break; }
    case 503: // $1566
      HEAP16[((_height)>>1)]=2448;
      HEAP16[((_width)>>1)]=3264;
      HEAP16[((_order)>>1)]=18761;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=64512;
      __label__ = 845; break;
    case 504: // $1567
      var $1568=_strncmp(((_model)|0), ((__str667)|0), 3);
      var $1569=((($1568))|0)!=0;
      if ($1569) { __label__ = 506; break; } else { __label__ = 505; break; }
    case 505: // $1570
      HEAP16[((_height)>>1)]=2448;
      HEAP16[((_width)>>1)]=3264;
      var $1571=$fsize;
      var $1572=HEAPU16[((_height)>>1)];
      var $1573=((($1572))&65535);
      var $1574=((((($1571))|0)/((($1573))|0))|0);
      var $1575=((((($1574))|0)/2)|0);
      var $1576=((($1575)) & 65535);
      HEAP16[((_raw_width)>>1)]=$1576;
      HEAP16[((_order)>>1)]=19789;
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 844; break;
    case 506: // $1577
      var $1578=_strncmp(((_model)|0), ((__str668)|0), 3);
      var $1579=((($1578))|0)!=0;
      if ($1579) { __label__ = 508; break; } else { __label__ = 507; break; }
    case 507: // $1580
      HEAP16[((_top_margin)>>1)]=8;
      var $1581=HEAPU16[((_height)>>1)];
      var $1582=((($1581))&65535);
      var $1583=((($1582)-8)|0);
      var $1584=((($1583)) & 65535);
      HEAP16[((_height)>>1)]=$1584;
      HEAP16[((_left_margin)>>1)]=8;
      var $1585=HEAPU16[((_width)>>1)];
      var $1586=((($1585))&65535);
      var $1587=((($1586)-16)|0);
      var $1588=((($1587)) & 65535);
      HEAP16[((_width)>>1)]=$1588;
      HEAP32[((_load_flags)>>2)]=32;
      __label__ = 843; break;
    case 508: // $1589
      var $1590=_strcmp(((_model)|0), ((__str669)|0));
      var $1591=((($1590))|0)!=0;
      if ($1591) { __label__ = 510; break; } else { __label__ = 509; break; }
    case 509: // $1592
      HEAP16[((_order)>>1)]=18761;
      HEAP16[((_height)>>1)]=3662;
      HEAP16[((_width)>>1)]=5528;
      HEAP16[((_top_margin)>>1)]=2;
      HEAP16[((_left_margin)>>1)]=46;
      __label__ = 842; break;
    case 510: // $1593
      var $1594=_strcmp(((_model)|0), ((__str670)|0));
      var $1595=((($1594))|0)!=0;
      if ($1595) { __label__ = 514; break; } else { __label__ = 511; break; }
    case 511: // $1596
      HEAP16[((_order)>>1)]=18761;
      var $1597=HEAPU16[((_height)>>1)];
      var $1598=((($1597))&65535);
      var $1599=((($1598)-20)|0);
      var $1600=((($1599)) & 65535);
      HEAP16[((_height)>>1)]=$1600;
      HEAP16[((_top_margin)>>1)]=2;
      var $1601=HEAPU16[((_width)>>1)];
      var $1602=((($1601))&65535);
      var $1603=((($1602)-6)|0);
      var $1604=((($1603)) & 65535);
      HEAP16[((_width)>>1)]=$1604;
      var $1605=((($1604))&65535);
      var $1606=((($1605))|0) > 3682;
      if ($1606) { __label__ = 512; break; } else { __label__ = 513; break; }
    case 512: // $1607
      var $1608=HEAPU16[((_height)>>1)];
      var $1609=((($1608))&65535);
      var $1610=((($1609)-10)|0);
      var $1611=((($1610)) & 65535);
      HEAP16[((_height)>>1)]=$1611;
      var $1612=HEAPU16[((_width)>>1)];
      var $1613=((($1612))&65535);
      var $1614=((($1613)-46)|0);
      var $1615=((($1614)) & 65535);
      HEAP16[((_width)>>1)]=$1615;
      HEAP16[((_top_margin)>>1)]=8;
      __label__ = 513; break;
    case 513: // $1616
      __label__ = 841; break;
    case 514: // $1617
      var $1618=_strcmp(((_model)|0), ((__str671)|0));
      var $1619=((($1618))|0)!=0;
      if ($1619) { __label__ = 518; break; } else { __label__ = 515; break; }
    case 515: // $1620
      HEAP16[((_order)>>1)]=18761;
      var $1621=HEAPU16[((_height)>>1)];
      var $1622=((($1621))&65535);
      var $1623=((($1622)-3)|0);
      var $1624=((($1623)) & 65535);
      HEAP16[((_height)>>1)]=$1624;
      HEAP16[((_top_margin)>>1)]=2;
      var $1625=HEAPU16[((_width)>>1)];
      var $1626=((($1625))&65535);
      var $1627=((($1626)-10)|0);
      var $1628=((($1627)) & 65535);
      HEAP16[((_width)>>1)]=$1628;
      var $1629=((($1628))&65535);
      var $1630=((($1629))|0) > 3718;
      if ($1630) { __label__ = 516; break; } else { __label__ = 517; break; }
    case 516: // $1631
      var $1632=HEAPU16[((_height)>>1)];
      var $1633=((($1632))&65535);
      var $1634=((($1633)-28)|0);
      var $1635=((($1634)) & 65535);
      HEAP16[((_height)>>1)]=$1635;
      var $1636=HEAPU16[((_width)>>1)];
      var $1637=((($1636))&65535);
      var $1638=((($1637)-56)|0);
      var $1639=((($1638)) & 65535);
      HEAP16[((_width)>>1)]=$1639;
      HEAP16[((_top_margin)>>1)]=8;
      __label__ = 517; break;
    case 517: // $1640
      __label__ = 840; break;
    case 518: // $1641
      var $1642=$fsize;
      var $1643=((($1642))|0)==20487168;
      if ($1643) { __label__ = 519; break; } else { __label__ = 520; break; }
    case 519: // $1644
      HEAP16[((_height)>>1)]=2808;
      HEAP16[((_width)>>1)]=3648;
      __label__ = 522; break;
    case 520: // $1645
      var $1646=$fsize;
      var $1647=((($1646))|0)==24000000;
      if ($1647) { __label__ = 521; break; } else { __label__ = 523; break; }
    case 521: // $1648
      HEAP16[((_height)>>1)]=3000;
      HEAP16[((_width)>>1)]=4000;
      __label__ = 522; break;
    case 522: // $1649
      var $1650=_strcpy(((_model)|0), ((__str672)|0));
      HEAP16[((_order)>>1)]=19789;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_load_flags)>>2)]=6;
      HEAP32[((_maximum)>>2)]=991;
      __label__ = 838; break;
    case 523: // $1651
      var $1652=_strcmp(((_model)|0), ((__str673)|0));
      var $1653=((($1652))|0)!=0;
      if ($1653) { __label__ = 525; break; } else { __label__ = 524; break; }
    case 524: // $1654
      HEAP16[((_height)>>1)]=484;
      HEAP16[((_width)>>1)]=644;
      HEAP32[((_load_raw)>>2)]=16;
      HEAP32[((_flip)>>2)]=2;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_black)>>2)]=16;
      __label__ = 837; break;
    case 525: // $1655
      var $1656=_strcmp(((_model)|0), ((__str674)|0));
      var $1657=((($1656))|0)!=0;
      if ($1657) { __label__ = 527; break; } else { __label__ = 526; break; }
    case 526: // $1658
      var $1659=HEAPU16[((_raw_height)>>1)];
      var $1660=((($1659))&65535);
      HEAP16[((_top_margin)>>1)]=2;
      var $1661=((($1660)-2)|0);
      var $1662=((($1661)) & 65535);
      HEAP16[((_height)>>1)]=$1662;
      __label__ = 836; break;
    case 527: // $1663
      var $1664=_strcmp(((_model)|0), ((__str675)|0));
      var $1665=((($1664))|0)!=0;
      if ($1665) { __label__ = 529; break; } else { __label__ = 528; break; }
    case 528: // $1666
      HEAP16[((_height)>>1)]=1200;
      HEAP16[((_width)>>1)]=1600;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 835; break;
    case 529: // $1667
      var $1668=_strcmp(((_model)|0), ((__str676)|0));
      var $1669=((($1668))|0)!=0;
      if ($1669) { __label__ = 531; break; } else { __label__ = 530; break; }
    case 530: // $1670
      HEAP16[((_height)>>1)]=768;
      HEAP16[((_width)>>1)]=1024;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 834; break;
    case 531: // $1671
      var $1672=_strcmp(((_model)|0), ((__str677)|0));
      var $1673=((($1672))|0)!=0;
      if ($1673) { __label__ = 533; break; } else { __label__ = 532; break; }
    case 532: // $1674
      HEAP16[((_height)>>1)]=1040;
      HEAP16[((_width)>>1)]=1392;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 833; break;
    case 533: // $1675
      var $1676=_strcmp(((_model)|0), ((__str678)|0));
      var $1677=((($1676))|0)!=0;
      if ($1677) { __label__ = 535; break; } else { __label__ = 534; break; }
    case 534: // $1678
      HEAP16[((_height)>>1)]=1200;
      HEAP16[((_width)>>1)]=1600;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 832; break;
    case 535: // $1679
      var $1680=_strcmp(((_model)|0), ((__str679)|0));
      var $1681=((($1680))|0)!=0;
      if ($1681) { __label__ = 537; break; } else { __label__ = 536; break; }
    case 536: // $1682
      HEAP16[((_height)>>1)]=1958;
      HEAP16[((_width)>>1)]=2588;
      var $1683=$fsize;
      var $1684=((($1683))|0) < 7500000;
      var $1685=($1684) ? 16 : 14;
      HEAP32[((_load_raw)>>2)]=$1685;
      var $1686=$fsize;
      var $1687=HEAPU16[((_width)>>1)];
      var $1688=((($1687))&65535);
      var $1689=HEAPU16[((_height)>>1)];
      var $1690=((($1689))&65535);
      var $1691=((($1688)*($1690))|0);
      var $1692=$fsize;
      var $1693=($1692) >> 22;
      var $1694=((($1691)*($1693))|0);
      var $1695=((($1686)-($1694))|0);
      HEAP32[((_data_offset)>>2)]=$1695;
      HEAP32[((_maximum)>>2)]=65520;
      __label__ = 831; break;
    case 537: // $1696
      var $1697=_strcmp(((_model)|0), ((__str680)|0));
      var $1698=((($1697))|0)!=0;
      if ($1698) { __label__ = 539; break; } else { __label__ = 538; break; }
    case 538: // $1699
      HEAP16[((_height)>>1)]=2469;
      HEAP16[((_width)>>1)]=3272;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=65520;
      __label__ = 830; break;
    case 539: // $1700
      var $1701=_strcmp(((_model)|0), ((__str681)|0));
      var $1702=((($1701))|0)!=0;
      if ($1702) { __label__ = 541; break; } else { __label__ = 540; break; }
    case 540: // $1703
      HEAP16[((_height)>>1)]=1024;
      HEAP16[((_width)>>1)]=1375;
      HEAP16[((_raw_width)>>1)]=1376;
      HEAP32[((_filters)>>2)]=1229539657;
      HEAP32[((_maximum)>>2)]=1023;
      var $1704=$fsize;
      var $1705=((($1704))|0) < 2000000;
      var $1706=($1705) ? 16 : 14;
      HEAP32[((_load_raw)>>2)]=$1706;
      __label__ = 829; break;
    case 541: // $1707
      var $1708=_strcmp(((_model)|0), ((__str682)|0));
      var $1709=((($1708))|0)!=0;
      if ($1709) { __label__ = 543; break; } else { __label__ = 542; break; }
    case 542: // $1710
      HEAP16[((_height)>>1)]=1207;
      HEAP16[((_width)>>1)]=1608;
      HEAP16[((_order)>>1)]=18761;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_data_offset)>>2)]=3212;
      HEAP32[((_maximum)>>2)]=1023;
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 828; break;
    case 543: // $1711
      var $1712=_strcmp(((_model)|0), ((__str683)|0));
      var $1713=((($1712))|0)!=0;
      if ($1713) { __label__ = 545; break; } else { __label__ = 544; break; }
    case 544: // $1714
      HEAP16[((_height)>>1)]=3000;
      HEAP16[((_width)>>1)]=2208;
      HEAP32[((_filters)>>2)]=1633771873;
      var $1715=$fsize;
      var $1716=((($1715))|0) < 10000000;
      var $1717=($1716) ? 16 : 14;
      HEAP32[((_load_raw)>>2)]=$1717;
      HEAP32[((_maximum)>>2)]=65472;
      __label__ = 827; break;
    case 545: // $1718
      var $1719=_strcmp(((_model)|0), ((__str684)|0));
      var $1720=((($1719))|0)!=0;
      if ($1720) { __label__ = 549; break; } else { __label__ = 546; break; }
    case 546: // $1721
      HEAP16[((_height)>>1)]=1536;
      HEAP16[((_width)>>1)]=2048;
      HEAP16[((_raw_width)>>1)]=2048;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=1023;
      var $1722=HEAP32[((_ifp)>>2)];
      var $1723=_fseek($1722, 3145728, 0);
      var $1724=_guess_byte_order(65536);
      HEAP16[((_order)>>1)]=$1724;
      var $1725=((($1724) << 16) >> 16);
      var $1726=((($1725))|0)==19789;
      if ($1726) { __label__ = 547; break; } else { __label__ = 548; break; }
    case 547: // $1727
      HEAP16[((_top_margin)>>1)]=16;
      var $1728=HEAPU16[((_height)>>1)];
      var $1729=((($1728))&65535);
      var $1730=((($1729)-16)|0);
      var $1731=((($1730)) & 65535);
      HEAP16[((_height)>>1)]=$1731;
      HEAP16[((_left_margin)>>1)]=28;
      var $1732=HEAPU16[((_width)>>1)];
      var $1733=((($1732))&65535);
      var $1734=((($1733)-28)|0);
      var $1735=((($1734)) & 65535);
      HEAP16[((_width)>>1)]=$1735;
      HEAP32[((_maximum)>>2)]=62912;
      var $1736=_strcpy(((_make)|0), ((__str685)|0));
      HEAP8[(((_model)|0))]=0;
      __label__ = 548; break;
    case 548: // $1737
      __label__ = 826; break;
    case 549: // $1738
      var $1739=_strcmp(((_make)|0), ((__str169)|0));
      var $1740=((($1739))|0)!=0;
      if ($1740) { __label__ = 564; break; } else { __label__ = 550; break; }
    case 550: // $1741
      var $1742=HEAP32[((_load_raw)>>2)];
      var $1743=((($1742))|0)==18;
      if ($1743) { __label__ = 551; break; } else { __label__ = 552; break; }
    case 551: // $1744
      HEAP32[((_load_raw)>>2)]=76;
      __label__ = 552; break;
    case 552: // $1745
      var $1746=HEAPU16[((_raw_width)>>1)];
      var $1747=((($1746))&65535);
      var $1748=((($1747))|0)==7262;
      if ($1748) { __label__ = 553; break; } else { __label__ = 554; break; }
    case 553: // $1749
      HEAP16[((_height)>>1)]=5444;
      HEAP16[((_width)>>1)]=7248;
      HEAP16[((_top_margin)>>1)]=4;
      HEAP16[((_left_margin)>>1)]=7;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 563; break;
    case 554: // $1750
      var $1751=HEAPU16[((_raw_width)>>1)];
      var $1752=((($1751))&65535);
      var $1753=((($1752))|0)==7410;
      if ($1753) { __label__ = 555; break; } else { __label__ = 556; break; }
    case 555: // $1754
      HEAP16[((_height)>>1)]=5502;
      HEAP16[((_width)>>1)]=7328;
      HEAP16[((_top_margin)>>1)]=4;
      HEAP16[((_left_margin)>>1)]=41;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 562; break;
    case 556: // $1755
      var $1756=HEAPU16[((_raw_width)>>1)];
      var $1757=((($1756))&65535);
      var $1758=((($1757))|0)==9044;
      if ($1758) { __label__ = 557; break; } else { __label__ = 558; break; }
    case 557: // $1759
      HEAP16[((_height)>>1)]=6716;
      HEAP16[((_width)>>1)]=8964;
      HEAP16[((_top_margin)>>1)]=8;
      HEAP16[((_left_margin)>>1)]=40;
      HEAP32[((_load_flags)>>2)]=256;
      var $1760=HEAP32[((_black)>>2)];
      var $1761=((($1760)+256)|0);
      HEAP32[((_black)>>2)]=$1761;
      HEAP32[((_maximum)>>2)]=33025;
      __label__ = 561; break;
    case 558: // $1762
      var $1763=HEAPU16[((_raw_width)>>1)];
      var $1764=((($1763))&65535);
      var $1765=((($1764))|0)==4090;
      if ($1765) { __label__ = 559; break; } else { __label__ = 560; break; }
    case 559: // $1766
      var $1767=_strcpy(((_model)|0), ((__str686)|0));
      HEAP16[((_top_margin)>>1)]=6;
      var $1768=HEAPU16[((_height)>>1)];
      var $1769=((($1768))&65535);
      var $1770=((($1769)-6)|0);
      var $1771=((($1770)) & 65535);
      HEAP16[((_height)>>1)]=$1771;
      HEAP16[((_left_margin)>>1)]=3;
      var $1772=HEAPU16[((_width)>>1)];
      var $1773=((($1772))&65535);
      var $1774=((($1773)-10)|0);
      var $1775=((($1774)) & 65535);
      HEAP16[((_width)>>1)]=$1775;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 560; break;
    case 560: // $1776
      __label__ = 561; break;
    case 561: // $1777
      __label__ = 562; break;
    case 562: // $1778
      __label__ = 563; break;
    case 563: // $1779
      __label__ = 825; break;
    case 564: // $1780
      var $1781=_strcmp(((_make)|0), ((__str515)|0));
      var $1782=((($1781))|0)!=0;
      if ($1782) { __label__ = 570; break; } else { __label__ = 565; break; }
    case 565: // $1783
      var $1784=(($head)|0);
      var $1785=_memcmp($1784, ((__str687)|0), 4);
      var $1786=((($1785))|0)!=0;
      if ($1786) { __label__ = 567; break; } else { __label__ = 566; break; }
    case 566: // $1787
      var $1788=HEAP32[((_ifp)>>2)];
      var $1789=_fseek($1788, 14, 0);
      var $1790=_get4();
      var $1791=((($1790)) & 65535);
      HEAP16[((_height)>>1)]=$1791;
      var $1792=_get4();
      var $1793=((($1792)) & 65535);
      HEAP16[((_width)>>1)]=$1793;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP32[((_data_offset)>>2)]=68;
      __label__ = 567; break;
    case 567: // $1794
      var $1795=HEAP32[((_load_raw)>>2)];
      var $1796=((($1795))|0)!=0;
      if ($1796) { __label__ = 569; break; } else { __label__ = 568; break; }
    case 568: // $1797
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 569; break;
    case 569: // $1798
      HEAP32[((_maximum)>>2)]=16383;
      __label__ = 824; break;
    case 570: // $1799
      var $1800=_strcmp(((_make)|0), ((__str164)|0));
      var $1801=((($1800))|0)!=0;
      if ($1801) { __label__ = 603; break; } else { __label__ = 571; break; }
    case 571: // $1802
      HEAP32[((_maximum)>>2)]=16383;
      var $1803=HEAP32[((_ifp)>>2)];
      var $1804=HEAP32[((_data_offset)>>2)];
      var $1805=_fseek($1803, $1804, 0);
      var $1806=_ljpeg_start($jh, 1);
      var $1807=((($1806))|0)!=0;
      if ($1807) { __label__ = 572; break; } else { __label__ = 574; break; }
    case 572: // $1808
      var $1809=(($jh)|0);
      var $1810=HEAP32[(($1809)>>2)];
      var $1811=((($1810))|0)==15;
      if ($1811) { __label__ = 573; break; } else { __label__ = 574; break; }
    case 573: // $1812
      HEAP32[((_maximum)>>2)]=8191;
      __label__ = 574; break;
    case 574: // $1813
      var $1814=HEAPU32[((_tiff_samples)>>2)];
      var $1815=((($1814))>>>0) > 1;
      if ($1815) { __label__ = 575; break; } else { __label__ = 576; break; }
    case 575: // $1816
      HEAP32[((_filters)>>2)]=0;
      __label__ = 576; break;
    case 576: // $1817
      var $1818=HEAPU32[((_tiff_samples)>>2)];
      var $1819=((($1818))>>>0) > 1;
      if ($1819) { __label__ = 578; break; } else { __label__ = 577; break; }
    case 577: // $1820
      var $1821=HEAPU32[((_tile_length)>>2)];
      var $1822=HEAPU16[((_raw_height)>>1)];
      var $1823=((($1822))&65535);
      var $1824=((($1821))>>>0) < ((($1823))>>>0);
      if ($1824) { __label__ = 578; break; } else { __label__ = 579; break; }
    case 578: // $1825
      HEAP32[((_load_raw)>>2)]=78;
      var $1826=HEAP32[((_tile_width)>>2)];
      var $1827=((($1826)) & 65535);
      HEAP16[((_raw_width)>>1)]=$1827;
      __label__ = 579; break;
    case 579: // $1828
      var $1829=HEAPU16[((_width)>>1)];
      var $1830=((($1829))&65535);
      var $1831=HEAPU16[((_height)>>1)];
      var $1832=((($1831))&65535);
      var $1833=($1830) | ($1832);
      var $1834=((($1833))|0)==2048;
      if ($1834) { __label__ = 580; break; } else { __label__ = 584; break; }
    case 580: // $1835
      var $1836=HEAP32[((_tiff_samples)>>2)];
      var $1837=((($1836))|0)==1;
      if ($1837) { __label__ = 581; break; } else { __label__ = 582; break; }
    case 581: // $1838
      HEAP32[((_filters)>>2)]=1;
      var $1839=_strcpy(((_cdesc)|0), ((__str688)|0));
      var $1840=_strcpy(((_model)|0), ((__str689)|0));
      HEAP16[((_top_margin)>>1)]=8;
      HEAP16[((_left_margin)>>1)]=18;
      HEAP16[((_height)>>1)]=2032;
      HEAP16[((_width)>>1)]=2016;
      __label__ = 583; break;
    case 582: // $1841
      var $1842=_strcpy(((_model)|0), ((__str118)|0));
      HEAP16[((_top_margin)>>1)]=10;
      HEAP16[((_left_margin)>>1)]=16;
      HEAP16[((_height)>>1)]=2028;
      HEAP16[((_width)>>1)]=2022;
      __label__ = 583; break;
    case 583: // $1843
      __label__ = 602; break;
    case 584: // $1844
      var $1845=HEAPU16[((_width)>>1)];
      var $1846=((($1845))&65535);
      var $1847=HEAPU16[((_height)>>1)];
      var $1848=((($1847))&65535);
      var $1849=((($1846)+($1848))|0);
      var $1850=((($1849))|0)==5204;
      if ($1850) { __label__ = 585; break; } else { __label__ = 595; break; }
    case 585: // $1851
      var $1852=HEAP8[(((_model)|0))];
      var $1853=((($1852) << 24) >> 24)!=0;
      if ($1853) { __label__ = 587; break; } else { __label__ = 586; break; }
    case 586: // $1854
      var $1855=_strcpy(((_model)|0), ((__str120)|0));
      __label__ = 587; break;
    case 587: // $1856
      var $1857=HEAPU16[((_width)>>1)];
      var $1858=((($1857))&65535);
      var $1859=HEAPU16[((_height)>>1)];
      var $1860=((($1859))&65535);
      var $1861=((($1858))|0) > ((($1860))|0);
      if ($1861) { __label__ = 588; break; } else { __label__ = 589; break; }
    case 588: // $1862
      HEAP16[((_top_margin)>>1)]=6;
      HEAP16[((_left_margin)>>1)]=32;
      HEAP16[((_height)>>1)]=2048;
      HEAP16[((_width)>>1)]=3072;
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 590; break;
    case 589: // $1863
      HEAP16[((_left_margin)>>1)]=6;
      HEAP16[((_top_margin)>>1)]=32;
      HEAP16[((_width)>>1)]=2048;
      HEAP16[((_height)>>1)]=3072;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 590; break;
    case 590: // $1864
      var $1865=HEAPF32[((((_cam_mul)|0))>>2)];
      var $1866=($1865) != 0;
      if ($1866) { __label__ = 591; break; } else { __label__ = 592; break; }
    case 591: // $1867
      var $1868=HEAP8[(((_model)|0))];
      var $1869=((($1868) << 24) >> 24);
      var $1870=((($1869))|0)==86;
      if ($1870) { __label__ = 592; break; } else { __label__ = 593; break; }
    case 592: // $1871
      HEAP32[((_filters)>>2)]=0;
      __label__ = 594; break;
    case 593: // $1872
      var $1873=HEAP32[((_tiff_samples)>>2)];
      HEAP32[((_is_raw)>>2)]=$1873;
      __label__ = 594; break;
    case 594: // $1874
      __label__ = 601; break;
    case 595: // $1875
      var $1876=HEAPU16[((_width)>>1)];
      var $1877=((($1876))&65535);
      var $1878=((($1877))|0)==2116;
      if ($1878) { __label__ = 596; break; } else { __label__ = 597; break; }
    case 596: // $1879
      var $1880=_strcpy(((_model)|0), ((__str122)|0));
      HEAP16[((_top_margin)>>1)]=30;
      var $1881=HEAPU16[((_height)>>1)];
      var $1882=((($1881))&65535);
      var $1883=((($1882)-60)|0);
      var $1884=((($1883)) & 65535);
      HEAP16[((_height)>>1)]=$1884;
      HEAP16[((_left_margin)>>1)]=55;
      var $1885=HEAPU16[((_width)>>1)];
      var $1886=((($1885))&65535);
      var $1887=((($1886)-110)|0);
      var $1888=((($1887)) & 65535);
      HEAP16[((_width)>>1)]=$1888;
      HEAP32[((_filters)>>2)]=1229539657;
      __label__ = 600; break;
    case 597: // $1889
      var $1890=HEAPU16[((_width)>>1)];
      var $1891=((($1890))&65535);
      var $1892=((($1891))|0)==3171;
      if ($1892) { __label__ = 598; break; } else { __label__ = 599; break; }
    case 598: // $1893
      var $1894=_strcpy(((_model)|0), ((__str122)|0));
      HEAP16[((_top_margin)>>1)]=24;
      var $1895=HEAPU16[((_height)>>1)];
      var $1896=((($1895))&65535);
      var $1897=((($1896)-48)|0);
      var $1898=((($1897)) & 65535);
      HEAP16[((_height)>>1)]=$1898;
      HEAP16[((_left_margin)>>1)]=24;
      var $1899=HEAPU16[((_width)>>1)];
      var $1900=((($1899))&65535);
      var $1901=((($1900)-48)|0);
      var $1902=((($1901)) & 65535);
      HEAP16[((_width)>>1)]=$1902;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 599; break;
    case 599: // $1903
      __label__ = 600; break;
    case 600: // $1904
      __label__ = 601; break;
    case 601: // $1905
      __label__ = 602; break;
    case 602: // $1906
      __label__ = 823; break;
    case 603: // $1907
      var $1908=_strcmp(((_make)|0), ((__str99)|0));
      var $1909=((($1908))|0)!=0;
      if ($1909) { __label__ = 604; break; } else { __label__ = 605; break; }
    case 604: // $1910
      var $1911=_strcmp(((_make)|0), ((__str96)|0));
      var $1912=((($1911))|0)!=0;
      if ($1912) { __label__ = 619; break; } else { __label__ = 605; break; }
    case 605: // $1913
      var $1914=$flen;
      var $1915=HEAP32[((_data_offset)>>2)];
      var $1916=((($1914)-($1915))|0);
      var $1917=HEAPU16[((_raw_width)>>1)];
      var $1918=((($1917))&65535);
      var $1919=(((($1918)<<3))|0);
      var $1920=((((($1919))|0)/7)|0);
      var $1921=((((($1916))|0)/((($1920))|0))|0);
      var $1922=HEAPU16[((_raw_height)>>1)];
      var $1923=((($1922))&65535);
      var $1924=((($1921))|0)==((($1923))|0);
      if ($1924) { __label__ = 606; break; } else { __label__ = 607; break; }
    case 606: // $1925
      HEAP32[((_load_raw)>>2)]=6;
      __label__ = 607; break;
    case 607: // $1926
      var $1927=HEAP32[((_load_raw)>>2)];
      var $1928=((($1927))|0)!=0;
      if ($1928) { __label__ = 609; break; } else { __label__ = 608; break; }
    case 608: // $1929
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_load_flags)>>2)]=4;
      __label__ = 609; break;
    case 609: // $1930
      HEAP32[((_zero_is_bad)>>2)]=1;
      var $1931=HEAPU16[((_height)>>1)];
      var $1932=((($1931))&65535);
      var $1933=((($1932)+12)|0);
      var $1934=((($1933)) & 65535);
      HEAP16[((_height)>>1)]=$1934;
      var $1935=((($1934))&65535);
      var $1936=HEAPU16[((_raw_height)>>1)];
      var $1937=((($1936))&65535);
      var $1938=((($1935))|0) > ((($1937))|0);
      if ($1938) { __label__ = 610; break; } else { __label__ = 611; break; }
    case 610: // $1939
      var $1940=HEAP16[((_raw_height)>>1)];
      HEAP16[((_height)>>1)]=$1940;
      __label__ = 611; break;
    case 611: // $1941
      $i=0;
      __label__ = 612; break;
    case 612: // $1942
      var $1943=$i;
      var $1944=((($1943))>>>0) < 23;
      if ($1944) { __label__ = 613; break; } else { __label__ = 618; break; }
    case 613: // $1945
      var $1946=HEAPU16[((_raw_width)>>1)];
      var $1947=((($1946))&65535);
      var $1948=$i;
      var $1949=(($pana+$1948*12)|0);
      var $1950=(($1949)|0);
      var $1951=HEAP16[(($1950)>>1)];
      var $1952=((($1951) << 16) >> 16);
      var $1953=((($1947))|0)==((($1952))|0);
      if ($1953) { __label__ = 614; break; } else { __label__ = 616; break; }
    case 614: // $1954
      var $1955=HEAPU16[((_raw_height)>>1)];
      var $1956=((($1955))&65535);
      var $1957=$i;
      var $1958=(($pana+$1957*12)|0);
      var $1959=(($1958+2)|0);
      var $1960=HEAP16[(($1959)>>1)];
      var $1961=((($1960) << 16) >> 16);
      var $1962=((($1956))|0)==((($1961))|0);
      if ($1962) { __label__ = 615; break; } else { __label__ = 616; break; }
    case 615: // $1963
      var $1964=$i;
      var $1965=(($pana+$1964*12)|0);
      var $1966=(($1965+4)|0);
      var $1967=HEAP16[(($1966)>>1)];
      HEAP16[((_left_margin)>>1)]=$1967;
      var $1968=$i;
      var $1969=(($pana+$1968*12)|0);
      var $1970=(($1969+6)|0);
      var $1971=HEAP16[(($1970)>>1)];
      HEAP16[((_top_margin)>>1)]=$1971;
      var $1972=$i;
      var $1973=(($pana+$1972*12)|0);
      var $1974=(($1973+8)|0);
      var $1975=HEAP16[(($1974)>>1)];
      var $1976=((($1975) << 16) >> 16);
      var $1977=HEAPU16[((_width)>>1)];
      var $1978=((($1977))&65535);
      var $1979=((($1978)+($1976))|0);
      var $1980=((($1979)) & 65535);
      HEAP16[((_width)>>1)]=$1980;
      var $1981=$i;
      var $1982=(($pana+$1981*12)|0);
      var $1983=(($1982+10)|0);
      var $1984=HEAP16[(($1983)>>1)];
      var $1985=((($1984) << 16) >> 16);
      var $1986=HEAPU16[((_height)>>1)];
      var $1987=((($1986))&65535);
      var $1988=((($1987)+($1985))|0);
      var $1989=((($1988)) & 65535);
      HEAP16[((_height)>>1)]=$1989;
      __label__ = 616; break;
    case 616: // $1990
      __label__ = 617; break;
    case 617: // $1991
      var $1992=$i;
      var $1993=((($1992)+1)|0);
      $i=$1993;
      __label__ = 612; break;
    case 618: // $1994
      var $1995=HEAP32[((_filters)>>2)];
      var $1996=((($1995)-1)|0);
      var $1997=HEAPU16[((_left_margin)>>1)];
      var $1998=((($1997))&65535);
      var $1999=($1998) & 1;
      var $2000=($1996) ^ ($1999);
      var $2001=HEAPU16[((_top_margin)>>1)];
      var $2002=((($2001))&65535);
      var $2003=($2002) << 1;
      var $2004=($2000) ^ ($2003);
      var $2005=($2004) & 3;
      var $2006=((__str690+$2005)|0);
      var $2007=HEAPU8[($2006)];
      var $2008=((($2007))&255);
      var $2009=((($2008)*16843009)|0);
      HEAP32[((_filters)>>2)]=$2009;
      __label__ = 822; break;
    case 619: // $2010
      var $2011=_strcmp(((_model)|0), ((__str691)|0));
      var $2012=((($2011))|0)!=0;
      if ($2012) { __label__ = 621; break; } else { __label__ = 620; break; }
    case 620: // $2013
      HEAP16[((_height)>>1)]=1718;
      HEAP16[((_width)>>1)]=2304;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_load_raw)>>2)]=4;
      HEAP32[((_load_flags)>>2)]=30;
      __label__ = 821; break;
    case 621: // $2014
      var $2015=_strcmp(((_make)|0), ((__str94)|0));
      var $2016=((($2015))|0)!=0;
      if ($2016) { __label__ = 642; break; } else { __label__ = 622; break; }
    case 622: // $2017
      var $2018=HEAPU16[((_height)>>1)];
      var $2019=((($2018))&65535);
      var $2020=($2019) & 1;
      var $2021=HEAPU16[((_height)>>1)];
      var $2022=((($2021))&65535);
      var $2023=((($2022)+($2020))|0);
      var $2024=((($2023)) & 65535);
      HEAP16[((_height)>>1)]=$2024;
      var $2025=HEAP32[((_exif_cfa)>>2)];
      HEAP32[((_filters)>>2)]=$2025;
      var $2026=HEAPU16[((_width)>>1)];
      var $2027=((($2026))&65535);
      var $2028=((($2027))|0)==4100;
      if ($2028) { __label__ = 623; break; } else { __label__ = 624; break; }
    case 623: // $2029
      var $2030=HEAPU16[((_width)>>1)];
      var $2031=((($2030))&65535);
      var $2032=((($2031)-4)|0);
      var $2033=((($2032)) & 65535);
      HEAP16[((_width)>>1)]=$2033;
      __label__ = 624; break;
    case 624: // $2034
      var $2035=HEAPU16[((_width)>>1)];
      var $2036=((($2035))&65535);
      var $2037=((($2036))|0)==4080;
      if ($2037) { __label__ = 625; break; } else { __label__ = 626; break; }
    case 625: // $2038
      var $2039=HEAPU16[((_width)>>1)];
      var $2040=((($2039))&65535);
      var $2041=((($2040)-24)|0);
      var $2042=((($2041)) & 65535);
      HEAP16[((_width)>>1)]=$2042;
      __label__ = 626; break;
    case 626: // $2043
      var $2044=HEAP32[((_load_raw)>>2)];
      var $2045=((($2044))|0)==14;
      if ($2045) { __label__ = 627; break; } else { __label__ = 628; break; }
    case 627: // $2046
      HEAP32[((_load_flags)>>2)]=4;
      __label__ = 628; break;
    case 628: // $2047
      HEAP32[((_tiff_bps)>>2)]=12;
      var $2048=_strcmp(((_model)|0), ((__str692)|0));
      var $2049=((($2048))|0)!=0;
      if ($2049) { __label__ = 629; break; } else { __label__ = 630; break; }
    case 629: // $2050
      var $2051=_strcmp(((_model)|0), ((__str693)|0));
      var $2052=((($2051))|0)!=0;
      if ($2052) { __label__ = 633; break; } else { __label__ = 630; break; }
    case 630: // $2053
      var $2054=HEAPU16[((_width)>>1)];
      var $2055=((($2054))&65535);
      var $2056=((($2055)-20)|0);
      var $2057=((($2056)) & 65535);
      HEAP16[((_width)>>1)]=$2057;
      var $2058=HEAP32[((_load_raw)>>2)];
      var $2059=((($2058))|0)==14;
      if ($2059) { __label__ = 631; break; } else { __label__ = 632; break; }
    case 631: // $2060
      HEAP32[((_maximum)>>2)]=4035;
      _memset((_cblack), 0, 32, 1);
      __label__ = 632; break;
    case 632: // $2061
      __label__ = 641; break;
    case 633: // $2062
      var $2063=_strcmp(((_model)|0), ((__str694)|0));
      var $2064=((($2063))|0)!=0;
      if ($2064) { __label__ = 637; break; } else { __label__ = 634; break; }
    case 634: // $2065
      var $2066=HEAPU16[((_width)>>1)];
      var $2067=((($2066))&65535);
      var $2068=((($2067)-30)|0);
      var $2069=((($2068)) & 65535);
      HEAP16[((_width)>>1)]=$2069;
      var $2070=HEAP32[((_load_raw)>>2)];
      var $2071=((($2070))|0)==14;
      if ($2071) { __label__ = 635; break; } else { __label__ = 636; break; }
    case 635: // $2072
      HEAP32[((_maximum)>>2)]=3961;
      __label__ = 636; break;
    case 636: // $2073
      __label__ = 640; break;
    case 637: // $2074
      var $2075=_strcmp(((_model)|0), ((__str695)|0));
      var $2076=((($2075))|0)!=0;
      if ($2076) { __label__ = 639; break; } else { __label__ = 638; break; }
    case 638: // $2077
      var $2078=$flen;
      HEAP32[((_thumb_offset)>>2)]=10721280;
      var $2079=((($2078)-10721280)|0);
      HEAP32[((_thumb_length)>>2)]=$2079;
      HEAP16[((_thumb_height)>>1)]=480;
      HEAP16[((_thumb_width)>>1)]=640;
      __label__ = 639; break;
    case 639: // $2080
      __label__ = 640; break;
    case 640: // $2081
      __label__ = 641; break;
    case 641: // $2082
      __label__ = 820; break;
    case 642: // $2083
      var $2084=_strcmp(((_model)|0), ((__str555)|0));
      var $2085=((($2084))|0)!=0;
      if ($2085) { __label__ = 644; break; } else { __label__ = 643; break; }
    case 643: // $2086
      HEAP16[((_height)>>1)]=2047;
      HEAP16[((_width)>>1)]=3072;
      HEAP32[((_filters)>>2)]=1633771873;
      HEAP32[((_data_offset)>>2)]=6656;
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 819; break;
    case 644: // $2087
      var $2088=_strcmp(((_model)|0), ((__str696)|0));
      var $2089=((($2088))|0)!=0;
      if ($2089) { __label__ = 646; break; } else { __label__ = 645; break; }
    case 645: // $2090
      HEAP16[((_width)>>1)]=3288;
      HEAP16[((_left_margin)>>1)]=5;
      HEAP32[((_data_offset)>>2)]=862144;
      HEAP32[((_load_raw)>>2)]=80;
      HEAP32[((_filters)>>2)]=-1667457892;
      HEAP32[((_colors)>>2)]=4;
      var $2091=_strcpy(((_cdesc)|0), ((__str697)|0));
      __label__ = 818; break;
    case 646: // $2092
      var $2093=_strcmp(((_model)|0), ((__str698)|0));
      var $2094=((($2093))|0)!=0;
      if ($2094) { __label__ = 648; break; } else { __label__ = 647; break; }
    case 647: // $2095
      HEAP16[((_width)>>1)]=3109;
      HEAP16[((_left_margin)>>1)]=59;
      HEAP32[((_data_offset)>>2)]=787392;
      HEAP32[((_load_raw)>>2)]=80;
      __label__ = 817; break;
    case 648: // $2096
      var $2097=_strcmp(((_make)|0), ((__str95)|0));
      var $2098=((($2097))|0)!=0;
      if ($2098) { __label__ = 651; break; } else { __label__ = 649; break; }
    case 649: // $2099
      var $2100=HEAPU16[((_raw_width)>>1)];
      var $2101=((($2100))&65535);
      var $2102=((($2101))|0)==3984;
      if ($2102) { __label__ = 650; break; } else { __label__ = 651; break; }
    case 650: // $2103
      _adobe_coeff(((__str95)|0), ((__str699)|0));
      HEAP16[((_width)>>1)]=3925;
      HEAP16[((_order)>>1)]=19789;
      __label__ = 816; break;
    case 651: // $2104
      var $2105=_strcmp(((_make)|0), ((__str95)|0));
      var $2106=((($2105))|0)!=0;
      if ($2106) { __label__ = 654; break; } else { __label__ = 652; break; }
    case 652: // $2107
      var $2108=HEAPU16[((_raw_width)>>1)];
      var $2109=((($2108))&65535);
      var $2110=((($2109))|0)==6048;
      if ($2110) { __label__ = 653; break; } else { __label__ = 654; break; }
    case 653: // $2111
      var $2112=HEAPU16[((_width)>>1)];
      var $2113=((($2112))&65535);
      var $2114=((($2113)-24)|0);
      var $2115=((($2114)) & 65535);
      HEAP16[((_width)>>1)]=$2115;
      __label__ = 815; break;
    case 654: // $2116
      var $2117=_strcmp(((_model)|0), ((__str159)|0));
      var $2118=((($2117))|0)!=0;
      if ($2118) { __label__ = 659; break; } else { __label__ = 655; break; }
    case 655: // $2119
      var $2120=HEAPU16[((_width)>>1)];
      var $2121=((($2120))&65535);
      var $2122=((($2121))|0)==3880;
      if ($2122) { __label__ = 656; break; } else { __label__ = 657; break; }
    case 656: // $2123
      var $2124=HEAP16[((_height)>>1)];
      var $2125=((($2124)-1)&65535);
      HEAP16[((_height)>>1)]=$2125;
      var $2126=HEAP16[((_raw_width)>>1)];
      var $2127=((($2126)+1)&65535);
      HEAP16[((_raw_width)>>1)]=$2127;
      HEAP16[((_width)>>1)]=$2127;
      __label__ = 658; break;
    case 657: // $2128
      HEAP16[((_order)>>1)]=19789;
      HEAP32[((_load_flags)>>2)]=2;
      __label__ = 658; break;
    case 658: // $2129
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 814; break;
    case 659: // $2130
      var $2131=_strcmp(((_model)|0), ((__str700)|0));
      var $2132=((($2131))|0)!=0;
      if ($2132) { __label__ = 661; break; } else { __label__ = 660; break; }
    case 660: // $2133
      var $2134=HEAPU16[((_height)>>1)];
      var $2135=((($2134))&65535);
      var $2136=((($2135)-4)|0);
      var $2137=((($2136)) & 65535);
      HEAP16[((_height)>>1)]=$2137;
      __label__ = 813; break;
    case 661: // $2138
      var $2139=_strcmp(((_model)|0), ((__str701)|0));
      var $2140=((($2139))|0)!=0;
      if ($2140) { __label__ = 663; break; } else { __label__ = 662; break; }
    case 662: // $2141
      HEAP16[((_top_margin)>>1)]=4;
      var $2142=HEAPU16[((_height)>>1)];
      var $2143=((($2142))&65535);
      var $2144=((($2143)-4)|0);
      var $2145=((($2144)) & 65535);
      HEAP16[((_height)>>1)]=$2145;
      HEAP16[((_left_margin)>>1)]=32;
      var $2146=HEAPU16[((_width)>>1)];
      var $2147=((($2146))&65535);
      var $2148=((($2147)-32)|0);
      var $2149=((($2148)) & 65535);
      HEAP16[((_width)>>1)]=$2149;
      _gamma_curve(0, 7, 1, 255);
      __label__ = 812; break;
    case 663: // $2150
      var $2151=_strcmp(((_model)|0), ((__str702)|0));
      var $2152=((($2151))|0)!=0;
      if ($2152) { __label__ = 668; break; } else { __label__ = 664; break; }
    case 664: // $2153
      HEAP16[((_height)>>1)]=480;
      HEAP16[((_width)>>1)]=640;
      var $2154=$fsize;
      var $2155=((($2154))|0) < 614400;
      if ($2155) { __label__ = 666; break; } else { __label__ = 665; break; }
    case 665: // $2156
      var $2157=_find_green(16, 16, 3840, 5120);
      var $2158=($2157) < 25;
      if ($2158) { __label__ = 666; break; } else { __label__ = 667; break; }
    case 666: // $2159
      __label__ = 670; break;
    case 667: // $2160
      var $2161=_strcpy(((_model)|0), ((__str703)|0));
      var $2162=HEAPU16[((_height)>>1)];
      var $2163=((($2162))&65535);
      var $2164=((($2163)-3)|0);
      var $2165=((($2164)) & 65535);
      HEAP16[((_height)>>1)]=$2165;
      HEAP32[((_data_offset)>>2)]=3840;
      HEAP16[((_order)>>1)]=18761;
      HEAP32[((_load_raw)>>2)]=14;
      __label__ = 811; break;
    case 668: // $2166
      var $2167=_strcmp(((_model)|0), ((__str704)|0));
      var $2168=((($2167))|0)!=0;
      if ($2168) { __label__ = 671; break; } else { __label__ = 669; break; }
    case 669: // $2169
      HEAP16[((_height)>>1)]=2134;
      HEAP16[((_width)>>1)]=2848;
      __label__ = 670; break;
    case 670: // $2170
      HEAP32[((_filters)>>2)]=0;
      HEAP32[((_load_raw)>>2)]=82;
      _gamma_curve(0, 3.875, 1, 255);
      __label__ = 810; break;
    case 671: // $2171
      var $2172=_strcmp(((_model)|0), ((__str705)|0));
      var $2173=((($2172))|0)!=0;
      if ($2173) { __label__ = 673; break; } else { __label__ = 672; break; }
    case 672: // $2174
      HEAP16[((_height)>>1)]=2152;
      HEAP16[((_raw_height)>>1)]=2152;
      HEAP16[((_width)>>1)]=2864;
      HEAP16[((_raw_width)>>1)]=2864;
      __label__ = 675; break;
    case 673: // $2175
      var $2176=_strcmp(((_model)|0), ((__str706)|0));
      var $2177=((($2176))|0)!=0;
      if ($2177) { __label__ = 679; break; } else { __label__ = 674; break; }
    case 674: // $2178
      HEAP16[((_height)>>1)]=1744;
      HEAP16[((_width)>>1)]=2336;
      HEAP16[((_raw_height)>>1)]=1779;
      HEAP16[((_raw_width)>>1)]=2338;
      HEAP16[((_top_margin)>>1)]=33;
      HEAP16[((_left_margin)>>1)]=1;
      __label__ = 675; break;
    case 675: // $2179
      HEAP16[((_order)>>1)]=18761;
      var $2180=$fsize;
      var $2181=HEAPU16[((_raw_height)>>1)];
      var $2182=((($2181))&65535);
      var $2183=HEAPU16[((_raw_width)>>1)];
      var $2184=((($2183))&65535);
      var $2185=((($2182)*($2184))|0);
      var $2186=((($2180)-($2185))|0);
      HEAP32[((_data_offset)>>2)]=$2186;
      var $2187=((($2186))|0)!=0;
      if ($2187) { __label__ = 676; break; } else { __label__ = 677; break; }
    case 676: // $2188
      var $2189=HEAP32[((_ifp)>>2)];
      var $2190=_fseek($2189, 168, 0);
      _read_shorts(((_curve)|0), 256);
      __label__ = 678; break;
    case 677: // $2191
      _gamma_curve(0, 3.875, 1, 255);
      __label__ = 678; break;
    case 678: // $2192
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 808; break;
    case 679: // $2193
      var $2194=_strncasecmp(((_model)|0), ((__str707)|0), 9);
      var $2195=((($2194))|0)!=0;
      if ($2195) { __label__ = 681; break; } else { __label__ = 680; break; }
    case 680: // $2196
      var $2197=HEAP32[((_data_offset)>>2)];
      var $2198=((($2197))|0) < 86016;
      var $2199=($2198) ? 86016 : 94208;
      HEAP32[((_data_offset)>>2)]=$2199;
      HEAP32[((_load_raw)>>2)]=4;
      __label__ = 807; break;
    case 681: // $2200
      var $2201=_strcasecmp(((_make)|0), ((__str7)|0));
      var $2202=((($2201))|0)!=0;
      if ($2202) { __label__ = 729; break; } else { __label__ = 682; break; }
    case 682: // $2203
      var $2204=HEAP32[((_filters)>>2)];
      var $2205=((($2204))|0)==-1;
      if ($2205) { __label__ = 683; break; } else { __label__ = 684; break; }
    case 683: // $2206
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 684; break;
    case 684: // $2207
      var $2208=_strncmp(((_model)|0), ((__str708)|0), 6);
      var $2209=((($2208))|0)!=0;
      if ($2209) { __label__ = 686; break; } else { __label__ = 685; break; }
    case 685: // $2210
      var $2211=HEAPU16[((_width)>>1)];
      var $2212=((($2211))&65535);
      var $2213=((($2212)-4)|0);
      var $2214=((($2213)) & 65535);
      HEAP16[((_width)>>1)]=$2214;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 707; break;
    case 686: // $2215
      var $2216=_strcmp(((_model)|0), ((__str709)|0));
      var $2217=((($2216))|0)!=0;
      if ($2217) { __label__ = 688; break; } else { __label__ = 687; break; }
    case 687: // $2218
      var $2219=HEAPU16[((_width)>>1)];
      var $2220=((($2219))&65535);
      var $2221=((($2220)-4)|0);
      var $2222=((($2221)) & 65535);
      HEAP16[((_width)>>1)]=$2222;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 706; break;
    case 688: // $2223
      var $2224=_strcmp(((_model)|0), ((__str710)|0));
      var $2225=((($2224))|0)!=0;
      if ($2225) { __label__ = 690; break; } else { __label__ = 689; break; }
    case 689: // $2226
      var $2227=HEAPU16[((_width)>>1)];
      var $2228=((($2227))&65535);
      var $2229=((($2228)-4)|0);
      var $2230=((($2229)) & 65535);
      HEAP16[((_width)>>1)]=$2230;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 705; break;
    case 690: // $2231
      var $2232=_strcmp(((_model)|0), ((__str711)|0));
      var $2233=((($2232))|0)!=0;
      if ($2233) { __label__ = 692; break; } else { __label__ = 691; break; }
    case 691: // $2234
      var $2235=HEAPU16[((_width)>>1)];
      var $2236=((($2235))&65535);
      var $2237=((($2236)-4)|0);
      var $2238=((($2237)) & 65535);
      HEAP16[((_width)>>1)]=$2238;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 704; break;
    case 692: // $2239
      var $2240=_strncmp(((_model)|0), ((__str712)|0), 7);
      var $2241=((($2240))|0)!=0;
      if ($2241) { __label__ = 694; break; } else { __label__ = 693; break; }
    case 693: // $2242
      HEAP8[(((_model+6)|0))]=0;
      var $2243=HEAPU16[((_width)>>1)];
      var $2244=((($2243))&65535);
      var $2245=((($2244)-4)|0);
      var $2246=((($2245)) & 65535);
      HEAP16[((_width)>>1)]=$2246;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 703; break;
    case 694: // $2247
      var $2248=_strcmp(((_model)|0), ((__str713)|0));
      var $2249=((($2248))|0)!=0;
      if ($2249) { __label__ = 696; break; } else { __label__ = 695; break; }
    case 695: // $2250
      var $2251=HEAPU16[((_width)>>1)];
      var $2252=((($2251))&65535);
      var $2253=((($2252)-4)|0);
      var $2254=((($2253)) & 65535);
      HEAP16[((_width)>>1)]=$2254;
      HEAP16[((_left_margin)>>1)]=2;
      HEAP32[((_colors)>>2)]=1;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 702; break;
    case 696: // $2255
      var $2256=_strcmp(((_model)|0), ((__str714)|0));
      var $2257=((($2256))|0)!=0;
      if ($2257) { __label__ = 698; break; } else { __label__ = 697; break; }
    case 697: // $2258
      HEAP32[((_black)>>2)]=214;
      HEAP32[((_colors)>>2)]=1;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 701; break;
    case 698: // $2259
      var $2260=_strcmp(((_model)|0), ((__str715)|0));
      var $2261=((($2260))|0)!=0;
      if ($2261) { __label__ = 700; break; } else { __label__ = 699; break; }
    case 699: // $2262
      HEAP32[((_colors)>>2)]=1;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 700; break;
    case 700: // $2263
      __label__ = 701; break;
    case 701: // $2264
      __label__ = 702; break;
    case 702: // $2265
      __label__ = 703; break;
    case 703: // $2266
      __label__ = 704; break;
    case 704: // $2267
      __label__ = 705; break;
    case 705: // $2268
      __label__ = 706; break;
    case 706: // $2269
      __label__ = 707; break;
    case 707: // $2270
      var $2271=_strcmp(((_model+4)|0), ((__str716)|0));
      var $2272=((($2271))|0)!=0;
      if ($2272) { __label__ = 709; break; } else { __label__ = 708; break; }
    case 708: // $2273
      var $2274=_strcpy(((_cdesc)|0), ((__str717)|0));
      __label__ = 709; break;
    case 709: // $2275
      var $2276=_strstr(((_model)|0), ((__str718)|0));
      var $2277=((($2276))|0)!=0;
      if ($2277) { __label__ = 710; break; } else { __label__ = 711; break; }
    case 710: // $2278
      var $2279=_strcpy(((_model)|0), ((__str718)|0));
      HEAP32[((_data_offset)>>2)]=15424;
      __label__ = 711; break;
    case 711: // $2280
      var $2281=_strncmp(((_model)|0), ((__str26)|0), 3);
      var $2282=((($2281))|0)!=0;
      if ($2282) { __label__ = 716; break; } else { __label__ = 712; break; }
    case 712: // $2283
      HEAP16[((_height)>>1)]=242;
      var $2284=$flen;
      var $2285=((($2284))|0) < 100000;
      if ($2285) { __label__ = 713; break; } else { __label__ = 714; break; }
    case 713: // $2286
      HEAP16[((_raw_width)>>1)]=256;
      HEAP16[((_width)>>1)]=249;
      var $2287=HEAPU16[((_height)>>1)];
      var $2288=((($2287))&65535);
      var $2289=((($2288))|0);
      var $2290=($2289)*4;
      var $2291=HEAPU16[((_width)>>1)];
      var $2292=((($2291))&65535);
      var $2293=((($2292))|0);
      var $2294=($2293)*3;
      var $2295=($2290)/($2294);
      (tempDoubleF64[0]=$2295,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 715; break;
    case 714: // $2296
      HEAP16[((_raw_width)>>1)]=512;
      HEAP16[((_width)>>1)]=501;
      var $2297=HEAPU16[((_height)>>1)];
      var $2298=((($2297))&65535);
      var $2299=((($2298))|0);
      var $2300=($2299)*493;
      var $2301=HEAPU16[((_width)>>1)];
      var $2302=((($2301))&65535);
      var $2303=((($2302))|0);
      var $2304=($2303)*373;
      var $2305=($2300)/($2304);
      (tempDoubleF64[0]=$2305,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      __label__ = 715; break;
    case 715: // $2306
      var $2307=HEAPU16[((_raw_width)>>1)];
      var $2308=((($2307))&65535);
      var $2309=((($2308)+1)|0);
      var $2310=HEAP32[((_data_offset)>>2)];
      var $2311=((($2310)+($2309))|0);
      HEAP32[((_data_offset)>>2)]=$2311;
      HEAP32[((_colors)>>2)]=4;
      HEAP32[((_filters)>>2)]=-1920103027;
      _simple_coeff(1);
      HEAPF32[((((_pre_mul+4)|0))>>2)]=1.1790000200271606;
      HEAPF32[((((_pre_mul+8)|0))>>2)]=1.2089999914169312;
      HEAPF32[((((_pre_mul+12)|0))>>2)]=1.0360000133514404;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 728; break;
    case 716: // $2312
      var $2313=_strcmp(((_model)|0), ((__str719)|0));
      var $2314=((($2313))|0)!=0;
      if ($2314) { __label__ = 718; break; } else { __label__ = 717; break; }
    case 717: // $2315
      var $2316=_strcpy(((_model)|0), ((__str720)|0));
      HEAP16[((_height)>>1)]=512;
      HEAP16[((_width)>>1)]=768;
      HEAP32[((_data_offset)>>2)]=1152;
      HEAP32[((_load_raw)>>2)]=58;
      __label__ = 727; break;
    case 718: // $2317
      var $2318=_strstr(((_model)|0), ((__str721)|0));
      var $2319=((($2318))|0)!=0;
      if ($2319) { __label__ = 719; break; } else { __label__ = 720; break; }
    case 719: // $2320
      var $2321=_strcpy(((_model)|0), ((__str721)|0));
      HEAP16[((_height)>>1)]=512;
      HEAP16[((_width)>>1)]=768;
      HEAP32[((_data_offset)>>2)]=19712;
      HEAP32[((_load_raw)>>2)]=58;
      __label__ = 726; break;
    case 720: // $2322
      var $2323=_strstr(((_model)|0), ((__str722)|0));
      var $2324=((($2323))|0)!=0;
      if ($2324) { __label__ = 721; break; } else { __label__ = 722; break; }
    case 721: // $2325
      var $2326=_strcpy(((_model)|0), ((__str722)|0));
      HEAP16[((_height)>>1)]=976;
      HEAP16[((_width)>>1)]=848;
      var $2327=HEAPU16[((_height)>>1)];
      var $2328=((($2327))&65535);
      var $2329=((($2328))|0);
      var $2330=($2329)/0.75;
      var $2331=HEAPU16[((_width)>>1)];
      var $2332=((($2331))&65535);
      var $2333=((($2332))|0);
      var $2334=($2330)/($2333);
      (tempDoubleF64[0]=$2334,HEAP32[((_pixel_aspect)>>2)]=tempDoubleI32[0],HEAP32[((_pixel_aspect+4)>>2)]=tempDoubleI32[1]);
      var $2335=HEAP32[((_tiff_compress)>>2)];
      var $2336=((($2335))|0)==7;
      var $2337=($2336) ? 88 : 90;
      HEAP32[((_load_raw)>>2)]=$2337;
      __label__ = 725; break;
    case 722: // $2338
      var $2339=_strcmp(((_model)|0), ((__str723)|0));
      var $2340=((($2339))|0)!=0;
      if ($2340) { __label__ = 724; break; } else { __label__ = 723; break; }
    case 723: // $2341
      HEAP16[((_thumb_height)>>1)]=128;
      HEAP16[((_thumb_width)>>1)]=192;
      HEAP32[((_thumb_offset)>>2)]=6144;
      HEAP32[((_thumb_misc)>>2)]=360;
      HEAP32[((_write_thumb)>>2)]=34;
      HEAP16[((_height)>>1)]=1024;
      HEAP16[((_width)>>1)]=1536;
      HEAP32[((_data_offset)>>2)]=79872;
      HEAP32[((_load_raw)>>2)]=16;
      HEAP32[((_black)>>2)]=17;
      __label__ = 724; break;
    case 724: // $2342
      __label__ = 725; break;
    case 725: // $2343
      __label__ = 726; break;
    case 726: // $2344
      __label__ = 727; break;
    case 727: // $2345
      __label__ = 728; break;
    case 728: // $2346
      __label__ = 806; break;
    case 729: // $2347
      var $2348=_strcmp(((_model)|0), ((__str558)|0));
      var $2349=((($2348))|0)!=0;
      if ($2349) { __label__ = 731; break; } else { __label__ = 730; break; }
    case 730: // $2350
      HEAP16[((_height)>>1)]=512;
      HEAP16[((_width)>>1)]=768;
      HEAP32[((_data_offset)>>2)]=3632;
      HEAP32[((_load_raw)>>2)]=58;
      HEAP32[((_filters)>>2)]=1633771873;
      _simple_coeff(2);
      __label__ = 805; break;
    case 731: // $2351
      var $2352=_strncmp(((_model)|0), ((__str724)|0), 9);
      var $2353=((($2352))|0)!=0;
      if ($2353) { __label__ = 737; break; } else { __label__ = 732; break; }
    case 732: // $2354
      var $2355=(($head+5)|0);
      var $2356=HEAP8[($2355)];
      var $2357=((($2356) << 24) >> 24)!=0;
      if ($2357) { __label__ = 733; break; } else { __label__ = 734; break; }
    case 733: // $2358
      var $2359=_strcpy(((_model+10)|0), ((__str725)|0));
      __label__ = 734; break;
    case 734: // $2360
      var $2361=HEAP32[((_ifp)>>2)];
      var $2362=_fseek($2361, 544, 0);
      var $2363=_get2();
      HEAP16[((_height)>>1)]=$2363;
      var $2364=_get2();
      HEAP16[((_width)>>1)]=$2364;
      var $2365=_get4();
      var $2366=_get2();
      var $2367=((($2366))&65535);
      var $2368=((($2367))|0)==30;
      var $2369=($2368) ? 738 : 736;
      HEAP32[((_data_offset)>>2)]=$2369;
      var $2370=HEAPU16[((_height)>>1)];
      var $2371=((($2370))&65535);
      var $2372=HEAPU16[((_width)>>1)];
      var $2373=((($2372))&65535);
      var $2374=((($2371))|0) > ((($2373))|0);
      if ($2374) { __label__ = 735; break; } else { __label__ = 736; break; }
    case 735: // $2375
      var $2376=HEAPU16[((_height)>>1)];
      var $2377=((($2376))&65535);
      var $2378=HEAPU16[((_width)>>1)];
      var $2379=((($2378))&65535);
      var $2380=((($2377)+($2379))|0);
      var $2381=((($2380)) & 65535);
      HEAP16[((_height)>>1)]=$2381;
      var $2382=HEAPU16[((_height)>>1)];
      var $2383=((($2382))&65535);
      var $2384=HEAPU16[((_width)>>1)];
      var $2385=((($2384))&65535);
      var $2386=((($2383)-($2385))|0);
      var $2387=((($2386)) & 65535);
      HEAP16[((_width)>>1)]=$2387;
      var $2388=HEAPU16[((_height)>>1)];
      var $2389=((($2388))&65535);
      var $2390=HEAPU16[((_width)>>1)];
      var $2391=((($2390))&65535);
      var $2392=((($2389)-($2391))|0);
      var $2393=((($2392)) & 65535);
      HEAP16[((_height)>>1)]=$2393;
      var $2394=HEAP32[((_ifp)>>2)];
      var $2395=HEAP32[((_data_offset)>>2)];
      var $2396=((($2395)-6)|0);
      var $2397=_fseek($2394, $2396, 0);
      var $2398=_get2();
      var $2399=((($2398))&65535);
      var $2400=($2399) ^ -1;
      var $2401=($2400) & 3;
      var $2402=((($2401))|0)!=0;
      var $2403=($2402) ? 5 : 6;
      HEAP32[((_flip)>>2)]=$2403;
      __label__ = 736; break;
    case 736: // $2404
      HEAP32[((_filters)>>2)]=1633771873;
      __label__ = 804; break;
    case 737: // $2405
      var $2406=_strcmp(((_make)|0), ((__str193)|0));
      var $2407=((($2406))|0)!=0;
      if ($2407) { __label__ = 743; break; } else { __label__ = 738; break; }
    case 738: // $2408
      var $2409=HEAP32[((_load_raw)>>2)];
      var $2410=((($2409))|0)!=0;
      if ($2410) { __label__ = 743; break; } else { __label__ = 739; break; }
    case 739: // $2411
      var $2412=HEAPU16[((_raw_width)>>1)];
      var $2413=((($2412))&65535);
      if ($2413 == 1316) {
        __label__ = 740; break;
      }
      else if ($2413 == 2568) {
        __label__ = 741; break;
      }
      else {
      __label__ = 742; break;
      }
      
    case 740: // $2414
      HEAP16[((_height)>>1)]=1030;
      HEAP16[((_width)>>1)]=1300;
      HEAP16[((_top_margin)>>1)]=1;
      HEAP16[((_left_margin)>>1)]=6;
      __label__ = 742; break;
    case 741: // $2415
      HEAP16[((_height)>>1)]=1960;
      HEAP16[((_width)>>1)]=2560;
      HEAP16[((_top_margin)>>1)]=2;
      HEAP16[((_left_margin)>>1)]=8;
      __label__ = 742; break;
    case 742: // $2416
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_load_raw)>>2)]=84;
      __label__ = 803; break;
    case 743: // $2417
      var $2418=_strcmp(((_model)|0), ((__str726)|0));
      var $2419=((($2418))|0)!=0;
      if ($2419) { __label__ = 745; break; } else { __label__ = 744; break; }
    case 744: // $2420
      HEAP16[((_height)>>1)]=768;
      HEAP16[((_width)>>1)]=1024;
      HEAP32[((_data_offset)>>2)]=1024;
      HEAP32[((_filters)>>2)]=1229539657;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 802; break;
    case 745: // $2421
      var $2422=_strcmp(((_model)|0), ((__str727)|0));
      var $2423=((($2422))|0)!=0;
      if ($2423) { __label__ = 747; break; } else { __label__ = 746; break; }
    case 746: // $2424
      HEAP16[((_height)>>1)]=1208;
      HEAP16[((_width)>>1)]=1632;
      var $2425=HEAPU16[((_width)>>1)];
      var $2426=((($2425))&65535);
      var $2427=(((($2426)<<1))|0);
      HEAP32[((_data_offset)>>2)]=$2427;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 801; break;
    case 747: // $2428
      var $2429=$fsize;
      var $2430=((($2429))|0)==3217760;
      if ($2430) { __label__ = 748; break; } else { __label__ = 749; break; }
    case 748: // $2431
      HEAP16[((_height)>>1)]=1546;
      HEAP16[((_width)>>1)]=2070;
      HEAP16[((_raw_width)>>1)]=2080;
      HEAP32[((_load_raw)>>2)]=16;
      __label__ = 800; break;
    case 749: // $2432
      var $2433=_strcmp(((_model)|0), ((__str728)|0));
      var $2434=((($2433))|0)!=0;
      if ($2434) { __label__ = 751; break; } else { __label__ = 750; break; }
    case 750: // $2435
      HEAP16[((_height)>>1)]=1700;
      HEAP16[((_width)>>1)]=2260;
      HEAP32[((_load_raw)>>2)]=14;
      HEAP32[((_maximum)>>2)]=65535;
      __label__ = 799; break;
    case 751: // $2436
      var $2437=_strcmp(((_model)|0), ((__str729)|0));
      var $2438=((($2437))|0)!=0;
      if ($2438) { __label__ = 753; break; } else { __label__ = 752; break; }
    case 752: // $2439
      HEAP16[((_height)>>1)]=1924;
      HEAP16[((_width)>>1)]=2576;
      HEAP16[((_raw_width)>>1)]=3232;
      HEAP32[((_tiff_bps)>>2)]=10;
      __label__ = 798; break;
    case 753: // $2440
      var $2441=_strcmp(((_model)|0), ((__str730)|0));
      var $2442=((($2441))|0)!=0;
      if ($2442) { __label__ = 755; break; } else { __label__ = 754; break; }
    case 754: // $2443
      HEAP16[((_height)>>1)]=1720;
      HEAP16[((_width)>>1)]=2312;
      HEAP16[((_raw_width)>>1)]=3520;
      HEAP16[((_left_margin)>>1)]=2;
      __label__ = 797; break;
    case 755: // $2444
      var $2445=_strcmp(((_model)|0), ((__str731)|0));
      var $2446=((($2445))|0)!=0;
      if ($2446) { __label__ = 757; break; } else { __label__ = 756; break; }
    case 756: // $2447
      HEAP16[((_height)>>1)]=1926;
      HEAP16[((_width)>>1)]=2580;
      HEAP16[((_raw_width)>>1)]=3904;
      __label__ = 796; break;
    case 757: // $2448
      var $2449=_strcmp(((_model)|0), ((__str732)|0));
      var $2450=((($2449))|0)!=0;
      if ($2450) { __label__ = 759; break; } else { __label__ = 758; break; }
    case 758: // $2451
      HEAP16[((_height)>>1)]=1208;
      HEAP16[((_width)>>1)]=1620;
      HEAP16[((_raw_width)>>1)]=2432;
      HEAP32[((_flip)>>2)]=3;
      __label__ = 795; break;
    case 759: // $2452
      var $2453=_strcmp(((_model)|0), ((__str733)|0));
      var $2454=((($2453))|0)!=0;
      if ($2454) { __label__ = 761; break; } else { __label__ = 760; break; }
    case 760: // $2455
      HEAP16[((_height)>>1)]=1544;
      HEAP16[((_width)>>1)]=2058;
      HEAP16[((_raw_width)>>1)]=3136;
      __label__ = 794; break;
    case 761: // $2456
      var $2457=_strcmp(((_model)|0), ((__str734)|0));
      var $2458=((($2457))|0)!=0;
      if ($2458) { __label__ = 763; break; } else { __label__ = 762; break; }
    case 762: // $2459
      HEAP16[((_height)>>1)]=1931;
      HEAP16[((_width)>>1)]=2570;
      HEAP16[((_raw_width)>>1)]=3904;
      __label__ = 793; break;
    case 763: // $2460
      var $2461=_strcmp(((_model)|0), ((__str735)|0));
      var $2462=((($2461))|0)!=0;
      if ($2462) { __label__ = 765; break; } else { __label__ = 764; break; }
    case 764: // $2463
      HEAP16[((_height)>>1)]=1937;
      HEAP16[((_width)>>1)]=2577;
      HEAP16[((_raw_width)>>1)]=3904;
      HEAP32[((_filters)>>2)]=370546198;
      __label__ = 792; break;
    case 765: // $2464
      var $2465=_strcmp(((_model)|0), ((__str736)|0));
      var $2466=((($2465))|0)!=0;
      if ($2466) { __label__ = 767; break; } else { __label__ = 766; break; }
    case 766: // $2467
      HEAP16[((_height)>>1)]=1960;
      HEAP16[((_width)>>1)]=2570;
      HEAP16[((_raw_width)>>1)]=3904;
      __label__ = 791; break;
    case 767: // $2468
      var $2469=_strcmp(((_model)|0), ((__str737)|0));
      var $2470=((($2469))|0)!=0;
      if ($2470) { __label__ = 769; break; } else { __label__ = 768; break; }
    case 768: // $2471
      HEAP16[((_height)>>1)]=2145;
      HEAP16[((_width)>>1)]=2833;
      HEAP16[((_raw_width)>>1)]=3584;
      HEAP32[((_filters)>>2)]=370546198;
      HEAP32[((_tiff_bps)>>2)]=10;
      __label__ = 790; break;
    case 769: // $2472
      var $2473=_strcmp(((_model)|0), ((__str738)|0));
      var $2474=((($2473))|0)!=0;
      if ($2474) { __label__ = 771; break; } else { __label__ = 770; break; }
    case 770: // $2475
      HEAP16[((_height)>>1)]=2321;
      HEAP16[((_width)>>1)]=3089;
      HEAP16[((_raw_width)>>1)]=4672;
      HEAP32[((_maximum)>>2)]=4095;
      __label__ = 789; break;
    case 771: // $2476
      var $2477=_strcmp(((_model)|0), ((__str739)|0));
      var $2478=((($2477))|0)!=0;
      if ($2478) { __label__ = 773; break; } else { __label__ = 772; break; }
    case 772: // $2479
      HEAP16[((_height)>>1)]=2319;
      HEAP16[((_width)>>1)]=3087;
      HEAP16[((_raw_width)>>1)]=4672;
      HEAP32[((_maximum)>>2)]=4095;
      __label__ = 788; break;
    case 773: // $2480
      var $2481=_strcmp(((_model)|0), ((__str740)|0));
      var $2482=((($2481))|0)!=0;
      if ($2482) { __label__ = 775; break; } else { __label__ = 774; break; }
    case 774: // $2483
      HEAP16[((_height)>>1)]=2468;
      HEAP16[((_width)>>1)]=3279;
      HEAP16[((_raw_width)>>1)]=4928;
      HEAP32[((_maximum)>>2)]=4095;
      __label__ = 787; break;
    case 775: // $2484
      var $2485=$fsize;
      var $2486=((($2485))|0)==15499264;
      if ($2486) { __label__ = 776; break; } else { __label__ = 777; break; }
    case 776: // $2487
      HEAP16[((_height)>>1)]=2752;
      HEAP16[((_width)>>1)]=3672;
      HEAP16[((_raw_width)>>1)]=5632;
      __label__ = 786; break;
    case 777: // $2488
      var $2489=_strcmp(((_model)|0), ((__str741)|0));
      var $2490=((($2489))|0)!=0;
      if ($2490) { __label__ = 779; break; } else { __label__ = 778; break; }
    case 778: // $2491
      HEAP16[((_height)>>1)]=1928;
      HEAP16[((_width)>>1)]=2568;
      HEAP16[((_raw_width)>>1)]=3852;
      HEAP32[((_maximum)>>2)]=4095;
      __label__ = 785; break;
    case 779: // $2492
      var $2493=$fsize;
      var $2494=((($2493))|0)==9313536;
      if ($2494) { __label__ = 780; break; } else { __label__ = 781; break; }
    case 780: // $2495
      HEAP16[((_height)>>1)]=2142;
      HEAP16[((_width)>>1)]=2844;
      HEAP16[((_raw_width)>>1)]=4288;
      __label__ = 784; break;
    case 781: // $2496
      var $2497=_strcmp(((_model)|0), ((__str742)|0));
      var $2498=((($2497))|0)!=0;
      if ($2498) { __label__ = 783; break; } else { __label__ = 782; break; }
    case 782: // $2499
      HEAP16[((_height)>>1)]=2318;
      HEAP16[((_width)>>1)]=3082;
      HEAP16[((_raw_width)>>1)]=4672;
      __label__ = 783; break;
    case 783: // $2500
      __label__ = 784; break;
    case 784: // $2501
      __label__ = 785; break;
    case 785: // $2502
      __label__ = 786; break;
    case 786: // $2503
      __label__ = 787; break;
    case 787: // $2504
      __label__ = 788; break;
    case 788: // $2505
      __label__ = 789; break;
    case 789: // $2506
      __label__ = 790; break;
    case 790: // $2507
      __label__ = 791; break;
    case 791: // $2508
      __label__ = 792; break;
    case 792: // $2509
      __label__ = 793; break;
    case 793: // $2510
      __label__ = 794; break;
    case 794: // $2511
      __label__ = 795; break;
    case 795: // $2512
      __label__ = 796; break;
    case 796: // $2513
      __label__ = 797; break;
    case 797: // $2514
      __label__ = 798; break;
    case 798: // $2515
      __label__ = 799; break;
    case 799: // $2516
      __label__ = 800; break;
    case 800: // $2517
      __label__ = 801; break;
    case 801: // $2518
      __label__ = 802; break;
    case 802: // $2519
      __label__ = 803; break;
    case 803: // $2520
      __label__ = 804; break;
    case 804: // $2521
      __label__ = 805; break;
    case 805: // $2522
      __label__ = 806; break;
    case 806: // $2523
      __label__ = 807; break;
    case 807: // $2524
      __label__ = 808; break;
    case 808: // $2525
      __label__ = 809; break;
    case 809: // $2526
      __label__ = 810; break;
    case 810: // $2527
      __label__ = 811; break;
    case 811: // $2528
      __label__ = 812; break;
    case 812: // $2529
      __label__ = 813; break;
    case 813: // $2530
      __label__ = 814; break;
    case 814: // $2531
      __label__ = 815; break;
    case 815: // $2532
      __label__ = 816; break;
    case 816: // $2533
      __label__ = 817; break;
    case 817: // $2534
      __label__ = 818; break;
    case 818: // $2535
      __label__ = 819; break;
    case 819: // $2536
      __label__ = 820; break;
    case 820: // $2537
      __label__ = 821; break;
    case 821: // $2538
      __label__ = 822; break;
    case 822: // $2539
      __label__ = 823; break;
    case 823: // $2540
      __label__ = 824; break;
    case 824: // $2541
      __label__ = 825; break;
    case 825: // $2542
      __label__ = 826; break;
    case 826: // $2543
      __label__ = 827; break;
    case 827: // $2544
      __label__ = 828; break;
    case 828: // $2545
      __label__ = 829; break;
    case 829: // $2546
      __label__ = 830; break;
    case 830: // $2547
      __label__ = 831; break;
    case 831: // $2548
      __label__ = 832; break;
    case 832: // $2549
      __label__ = 833; break;
    case 833: // $2550
      __label__ = 834; break;
    case 834: // $2551
      __label__ = 835; break;
    case 835: // $2552
      __label__ = 836; break;
    case 836: // $2553
      __label__ = 837; break;
    case 837: // $2554
      __label__ = 838; break;
    case 838: // $2555
      __label__ = 839; break;
    case 839: // $2556
      __label__ = 840; break;
    case 840: // $2557
      __label__ = 841; break;
    case 841: // $2558
      __label__ = 842; break;
    case 842: // $2559
      __label__ = 843; break;
    case 843: // $2560
      __label__ = 844; break;
    case 844: // $2561
      __label__ = 845; break;
    case 845: // $2562
      __label__ = 846; break;
    case 846: // $2563
      __label__ = 847; break;
    case 847: // $2564
      __label__ = 848; break;
    case 848: // $2565
      __label__ = 849; break;
    case 849: // $2566
      __label__ = 850; break;
    case 850: // $2567
      __label__ = 851; break;
    case 851: // $2568
      __label__ = 852; break;
    case 852: // $2569
      __label__ = 853; break;
    case 853: // $2570
      __label__ = 854; break;
    case 854: // $2571
      __label__ = 855; break;
    case 855: // $2572
      __label__ = 856; break;
    case 856: // $2573
      __label__ = 857; break;
    case 857: // $2574
      __label__ = 858; break;
    case 858: // $2575
      __label__ = 859; break;
    case 859: // $2576
      __label__ = 860; break;
    case 860: // $2577
      __label__ = 861; break;
    case 861: // $2578
      __label__ = 862; break;
    case 862: // $2579
      __label__ = 863; break;
    case 863: // $2580
      __label__ = 864; break;
    case 864: // $2581
      __label__ = 865; break;
    case 865: // $2582
      __label__ = 866; break;
    case 866: // $2583
      __label__ = 867; break;
    case 867: // $2584
      __label__ = 868; break;
    case 868: // $2585
      __label__ = 869; break;
    case 869: // $2586
      __label__ = 870; break;
    case 870: // $2587
      __label__ = 871; break;
    case 871: // $2588
      __label__ = 872; break;
    case 872: // $2589
      __label__ = 873; break;
    case 873: // $2590
      __label__ = 874; break;
    case 874: // $2591
      __label__ = 875; break;
    case 875: // $2592
      __label__ = 876; break;
    case 876: // $2593
      __label__ = 877; break;
    case 877: // $2594
      __label__ = 878; break;
    case 878: // $2595
      __label__ = 879; break;
    case 879: // $2596
      __label__ = 880; break;
    case 880: // $2597
      __label__ = 881; break;
    case 881: // $2598
      __label__ = 882; break;
    case 882: // $2599
      __label__ = 883; break;
    case 883: // $2600
      __label__ = 884; break;
    case 884: // $2601
      __label__ = 885; break;
    case 885: // $2602
      __label__ = 886; break;
    case 886: // $2603
      __label__ = 887; break;
    case 887: // $2604
      __label__ = 888; break;
    case 888: // $2605
      __label__ = 889; break;
    case 889: // $2606
      __label__ = 890; break;
    case 890: // $2607
      __label__ = 891; break;
    case 891: // $2608
      __label__ = 892; break;
    case 892: // $2609
      __label__ = 893; break;
    case 893: // $2610
      __label__ = 894; break;
    case 894: // $2611
      __label__ = 895; break;
    case 895: // $2612
      __label__ = 896; break;
    case 896: // $2613
      __label__ = 897; break;
    case 897: // $2614
      __label__ = 898; break;
    case 898: // $2615
      __label__ = 899; break;
    case 899: // $2616
      __label__ = 900; break;
    case 900: // $2617
      __label__ = 901; break;
    case 901: // $2618
      __label__ = 902; break;
    case 902: // $2619
      __label__ = 903; break;
    case 903: // $2620
      __label__ = 904; break;
    case 904: // $2621
      __label__ = 905; break;
    case 905: // $2622
      __label__ = 906; break;
    case 906: // $2623
      __label__ = 907; break;
    case 907: // $2624
      __label__ = 908; break;
    case 908: // $2625
      __label__ = 909; break;
    case 909: // $2626
      __label__ = 910; break;
    case 910: // $2627
      __label__ = 911; break;
    case 911: // $2628
      __label__ = 912; break;
    case 912: // $2629
      __label__ = 913; break;
    case 913: // $2630
      __label__ = 914; break;
    case 914: // $2631
      __label__ = 915; break;
    case 915: // $2632
      __label__ = 916; break;
    case 916: // $2633
      __label__ = 917; break;
    case 917: // $2634
      __label__ = 918; break;
    case 918: // $2635
      __label__ = 919; break;
    case 919: // $2636
      __label__ = 920; break;
    case 920: // $2637
      __label__ = 921; break;
    case 921: // $2638
      __label__ = 922; break;
    case 922: // $2639
      __label__ = 923; break;
    case 923: // $2640
      __label__ = 924; break;
    case 924: // $2641
      __label__ = 925; break;
    case 925: // $2642
      __label__ = 926; break;
    case 926: // $2643
      __label__ = 927; break;
    case 927: // $2644
      __label__ = 928; break;
    case 928: // $2645
      __label__ = 929; break;
    case 929: // $2646
      __label__ = 930; break;
    case 930: // $2647
      __label__ = 931; break;
    case 931: // $2648
      var $2649=HEAP8[(((_model)|0))];
      var $2650=((($2649) << 24) >> 24)!=0;
      if ($2650) { __label__ = 933; break; } else { __label__ = 932; break; }
    case 932: // $2651
      var $2652=HEAPU16[((_width)>>1)];
      var $2653=((($2652))&65535);
      var $2654=HEAPU16[((_height)>>1)];
      var $2655=((($2654))&65535);
      var $2656=_sprintf(((_model)|0), ((__str743)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2653,HEAP32[((tempInt+4)>>2)]=$2655,tempInt));
      __label__ = 933; break;
    case 933: // $2657
      var $2658=HEAP32[((_filters)>>2)];
      var $2659=((($2658))|0)==-1;
      if ($2659) { __label__ = 934; break; } else { __label__ = 935; break; }
    case 934: // $2660
      HEAP32[((_filters)>>2)]=-1802201964;
      __label__ = 935; break;
    case 935: // $2661
      var $2662=HEAP32[((_raw_color)>>2)];
      var $2663=((($2662))|0)!=0;
      if ($2663) { __label__ = 936; break; } else { __label__ = 937; break; }
    case 936: // $2664
      _adobe_coeff(((_make)|0), ((_model)|0));
      __label__ = 937; break;
    case 937: // $2665
      var $2666=HEAP32[((_load_raw)>>2)];
      var $2667=((($2666))|0)==58;
      if ($2667) { __label__ = 938; break; } else { __label__ = 941; break; }
    case 938: // $2668
      var $2669=HEAP32[((_raw_color)>>2)];
      var $2670=((($2669))|0)!=0;
      if ($2670) { __label__ = 939; break; } else { __label__ = 940; break; }
    case 939: // $2671
      _adobe_coeff(((__str560)|0), ((__str744)|0));
      __label__ = 940; break;
    case 940: // $2672
      __label__ = 941; break;
    case 941: // $2673
      var $2674=HEAP32[((_thumb_offset)>>2)];
      var $2675=((($2674))|0)!=0;
      if ($2675) { __label__ = 942; break; } else { __label__ = 946; break; }
    case 942: // $2676
      var $2677=HEAP16[((_thumb_height)>>1)];
      var $2678=((($2677) << 16) >> 16)!=0;
      if ($2678) { __label__ = 946; break; } else { __label__ = 943; break; }
    case 943: // $2679
      var $2680=HEAP32[((_ifp)>>2)];
      var $2681=HEAP32[((_thumb_offset)>>2)];
      var $2682=_fseek($2680, $2681, 0);
      var $2683=_ljpeg_start($jh, 1);
      var $2684=((($2683))|0)!=0;
      if ($2684) { __label__ = 944; break; } else { __label__ = 945; break; }
    case 944: // $2685
      var $2686=(($jh+8)|0);
      var $2687=HEAP32[(($2686)>>2)];
      var $2688=((($2687)) & 65535);
      HEAP16[((_thumb_width)>>1)]=$2688;
      var $2689=(($jh+4)|0);
      var $2690=HEAP32[(($2689)>>2)];
      var $2691=((($2690)) & 65535);
      HEAP16[((_thumb_height)>>1)]=$2691;
      __label__ = 945; break;
    case 945: // $2692
      __label__ = 946; break;
    case 946: // $2693
      __label__ = 947; break;
    case 947: // $2694
      var $2695=HEAP32[((_tiff_bps)>>2)];
      var $2696=((($2695))|0)!=0;
      if ($2696) { __label__ = 949; break; } else { __label__ = 948; break; }
    case 948: // $2697
      HEAP32[((_tiff_bps)>>2)]=12;
      __label__ = 949; break;
    case 949: // $2698
      var $2699=HEAP32[((_maximum)>>2)];
      var $2700=((($2699))|0)!=0;
      if ($2700) { __label__ = 951; break; } else { __label__ = 950; break; }
    case 950: // $2701
      var $2702=HEAP32[((_tiff_bps)>>2)];
      var $2703=1 << ($2702);
      var $2704=((($2703)-1)|0);
      HEAP32[((_maximum)>>2)]=$2704;
      __label__ = 951; break;
    case 951: // $2705
      var $2706=HEAP32[((_load_raw)>>2)];
      var $2707=((($2706))|0)!=0;
      if ($2707) { __label__ = 952; break; } else { __label__ = 953; break; }
    case 952: // $2708
      var $2709=HEAPU16[((_height)>>1)];
      var $2710=((($2709))&65535);
      var $2711=((($2710))|0) < 22;
      if ($2711) { __label__ = 953; break; } else { __label__ = 954; break; }
    case 953: // $2712
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 954; break;
    case 954: // $2713
      var $2714=HEAP32[((_load_raw)>>2)];
      var $2715=((($2714))|0)==62;
      if ($2715) { __label__ = 955; break; } else { __label__ = 956; break; }
    case 955: // $2716
      var $2717=HEAP32[((__impure_ptr)>>2)];
      var $2718=(($2717+12)|0);
      var $2719=HEAP32[(($2718)>>2)];
      var $2720=HEAP32[((_ifname)>>2)];
      var $2721=_fprintf($2719, ((__str745)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2720,HEAP32[((tempInt+4)>>2)]=((__str746)|0),tempInt));
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 956; break;
    case 956: // $2722
      var $2723=HEAP32[((_load_raw)>>2)];
      var $2724=((($2723))|0)==88;
      if ($2724) { __label__ = 957; break; } else { __label__ = 958; break; }
    case 957: // $2725
      var $2726=HEAP32[((__impure_ptr)>>2)];
      var $2727=(($2726+12)|0);
      var $2728=HEAP32[(($2727)>>2)];
      var $2729=HEAP32[((_ifname)>>2)];
      var $2730=_fprintf($2728, ((__str745)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2729,HEAP32[((tempInt+4)>>2)]=((__str747)|0),tempInt));
      HEAP32[((_is_raw)>>2)]=0;
      __label__ = 958; break;
    case 958: // $2731
      var $2732=HEAP8[(((_cdesc)|0))];
      var $2733=((($2732) << 24) >> 24)!=0;
      if ($2733) { __label__ = 960; break; } else { __label__ = 959; break; }
    case 959: // $2734
      var $2735=HEAP32[((_colors)>>2)];
      var $2736=((($2735))|0)==3;
      var $2737=($2736) ? (((__str748)|0)) : (((__str749)|0));
      var $2738=_strcpy(((_cdesc)|0), $2737);
      __label__ = 960; break;
    case 960: // $2739
      var $2740=HEAP16[((_raw_height)>>1)];
      var $2741=((($2740) << 16) >> 16)!=0;
      if ($2741) { __label__ = 962; break; } else { __label__ = 961; break; }
    case 961: // $2742
      var $2743=HEAP16[((_height)>>1)];
      HEAP16[((_raw_height)>>1)]=$2743;
      __label__ = 962; break;
    case 962: // $2744
      var $2745=HEAP16[((_raw_width)>>1)];
      var $2746=((($2745) << 16) >> 16)!=0;
      if ($2746) { __label__ = 964; break; } else { __label__ = 963; break; }
    case 963: // $2747
      var $2748=HEAP16[((_width)>>1)];
      HEAP16[((_raw_width)>>1)]=$2748;
      __label__ = 964; break;
    case 964: // $2749
      var $2750=HEAP32[((_filters)>>2)];
      var $2751=((($2750))|0)!=0;
      if ($2751) { __label__ = 965; break; } else { __label__ = 967; break; }
    case 965: // $2752
      var $2753=HEAP32[((_colors)>>2)];
      var $2754=((($2753))|0)==3;
      if ($2754) { __label__ = 966; break; } else { __label__ = 967; break; }
    case 966: // $2755
      var $2756=HEAPU32[((_filters)>>2)];
      var $2757=($2756) >>> 2;
      var $2758=($2757) & 572662306;
      var $2759=HEAP32[((_filters)>>2)];
      var $2760=($2759) << 2;
      var $2761=($2760) & -2004318072;
      var $2762=($2758) | ($2761);
      var $2763=HEAP32[((_filters)>>2)];
      var $2764=($2763) << 1;
      var $2765=($2762) & ($2764);
      var $2766=HEAP32[((_filters)>>2)];
      var $2767=($2766) | ($2765);
      HEAP32[((_filters)>>2)]=$2767;
      __label__ = 967; break;
    case 967: // $2768
      __label__ = 968; break;
    case 968: // $2769
      var $2770=HEAP32[((_flip)>>2)];
      var $2771=((($2770))|0)==-1;
      if ($2771) { __label__ = 969; break; } else { __label__ = 970; break; }
    case 969: // $2772
      var $2773=HEAP32[((_tiff_flip)>>2)];
      HEAP32[((_flip)>>2)]=$2773;
      __label__ = 970; break;
    case 970: // $2774
      var $2775=HEAP32[((_flip)>>2)];
      var $2776=((($2775))|0)==-1;
      if ($2776) { __label__ = 971; break; } else { __label__ = 972; break; }
    case 971: // $2777
      HEAP32[((_flip)>>2)]=0;
      __label__ = 972; break;
    case 972: // $2778
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_identify["X"]=1;

function _convert_to_rgb() {
  var __stackBase__  = STACKTOP; STACKTOP += 272; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $row;
      var $col;
      var $c;
      var $i;
      var $j;
      var $k;
      var $img;
      var $out=__stackBase__;
      var $out_cam=__stackBase__+12;
      var $num;
      var $inverse=__stackBase__+60;
      var $pbody=__stackBase__+132;
      var $pcurve=__stackBase__+256;
      var $1=$pbody;
      assert(124 % 1 === 0, 'memcpy given ' + 124 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = (_convert_to_rgb_pbody)>>2, $$dest = $1>>2, $$stop = $$src + 31; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $2=$pcurve;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($2)>>2)]=HEAP32[(((_convert_to_rgb_pcurve))>>2)]; HEAP32[(($2+4)>>2)]=HEAP32[(((_convert_to_rgb_pcurve)+4)>>2)]; HEAP32[(($2+8)>>2)]=HEAP32[(((_convert_to_rgb_pcurve)+8)>>2)]; HEAP32[(($2+12)>>2)]=HEAP32[(((_convert_to_rgb_pcurve)+12)>>2)];
      var $3=(tempDoubleI32[0]=HEAP32[((((_gamm)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm)|0)+4)>>2)],tempDoubleF64[0]);
      var $4=(tempDoubleI32[0]=HEAP32[((((_gamm+8)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm+8)|0)+4)>>2)],tempDoubleF64[0]);
      _gamma_curve($3, $4, 0, 0);
      var $5=(($out_cam)|0);
      var $6=$5;
      assert(48 % 1 === 0, 'memcpy given ' + 48 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($6, (_rgb_cam), 48, 1);
      var $7=HEAP32[((_colors)>>2)];
      var $8=((($7))|0)==1;
      if ($8) { var $19 = 1;__label__ = 4; break; } else { __label__ = 1; break; }
    case 1: // $9
      var $10=HEAP32[((_document_mode)>>2)];
      var $11=((($10))|0)!=0;
      if ($11) { var $19 = 1;__label__ = 4; break; } else { __label__ = 2; break; }
    case 2: // $12
      var $13=HEAP32[((_output_color)>>2)];
      var $14=((($13))|0) < 1;
      if ($14) { var $19 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: // $15
      var $16=HEAP32[((_output_color)>>2)];
      var $17=((($16))|0) > 5;
      var $19 = $17;__label__ = 4; break;
    case 4: // $18
      var $19;
      var $20=((($19))&1);
      var $21=HEAP32[((_raw_color)>>2)];
      var $22=($21) | ($20);
      HEAP32[((_raw_color)>>2)]=$22;
      var $23=HEAP32[((_raw_color)>>2)];
      var $24=((($23))|0)!=0;
      if ($24) { __label__ = 47; break; } else { __label__ = 5; break; }
    case 5: // $25
      var $26=HEAP32[((((_convert_to_rgb_phead)|0))>>2)];
      var $27=_calloc($26, 1);
      var $28=$27;
      HEAP32[((_oprof)>>2)]=$28;
      var $29=HEAP32[((_oprof)>>2)];
      var $30=$29;
      _merror($30, ((__str755)|0));
      var $31=HEAP32[((_oprof)>>2)];
      var $32=$31;
      assert(80 % 1 === 0, 'memcpy given ' + 80 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($32, (_convert_to_rgb_phead), 80, 1);
      var $33=HEAP32[((_output_color)>>2)];
      var $34=((($33))|0)==5;
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: // $35
      var $36=HEAP32[((_oprof)>>2)];
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=HEAP32[((_oprof)>>2)];
      var $40=(($39+16)|0);
      HEAP32[(($40)>>2)]=$38;
      __label__ = 7; break;
    case 7: // $41
      var $42=(($pbody)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)*12)|0);
      var $45=((($44)+132)|0);
      var $46=HEAP32[((_oprof)>>2)];
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$45;
      $i=0;
      __label__ = 8; break;
    case 8: // $48
      var $49=$i;
      var $50=(($pbody)|0);
      var $51=HEAPU32[(($50)>>2)];
      var $52=((($49))>>>0) < ((($51))>>>0);
      if ($52) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: // $53
      var $54=$i;
      var $55=((($54))|0)!=0;
      if ($55) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $56
      var $57=$i;
      var $58=((($57))|0) > 1;
      var $59=($58) ? 1482250784 : 1684370275;
      var $62 = $59;__label__ = 12; break;
    case 11: // $60
      var $62 = 1952807028;__label__ = 12; break;
    case 12: // $61
      var $62;
      var $63=HEAP32[((_oprof)>>2)];
      var $64=(($63)|0);
      var $65=HEAPU32[(($64)>>2)];
      var $66=Math.floor(((($65))>>>0)/4);
      var $67=HEAP32[((_oprof)>>2)];
      var $68=(($67+($66<<2))|0);
      HEAP32[(($68)>>2)]=$62;
      var $69=HEAP32[((_oprof)>>2)];
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$i;
      var $73=((($72)*3)|0);
      var $74=((($73)+2)|0);
      var $75=(($pbody+($74<<2))|0);
      HEAP32[(($75)>>2)]=$71;
      var $76=$i;
      var $77=((($76)*3)|0);
      var $78=((($77)+3)|0);
      var $79=(($pbody+($78<<2))|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)+3)|0);
      var $82=($81) & -4;
      var $83=HEAP32[((_oprof)>>2)];
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)+($82))|0);
      HEAP32[(($84)>>2)]=$86;
      __label__ = 13; break;
    case 13: // $87
      var $88=$i;
      var $89=((($88)+1)|0);
      $i=$89;
      __label__ = 8; break;
    case 14: // $90
      var $91=HEAP32[((_oprof)>>2)];
      var $92=(($91+128)|0);
      var $93=$92;
      var $94=(($pbody)|0);
      var $95=$94;
      assert(124 % 1 === 0, 'memcpy given ' + 124 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($93, $95, 124, 1);
      var $96=HEAP32[((_output_color)>>2)];
      var $97=((($96)-1)|0);
      var $98=((_convert_to_rgb_name+($97<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=_strlen($99);
      var $101=((($100)+1)|0);
      var $102=(($pbody+20)|0);
      var $103=HEAPU32[(($102)>>2)];
      var $104=Math.floor(((($103))>>>0)/4);
      var $105=((($104)+2)|0);
      var $106=HEAP32[((_oprof)>>2)];
      var $107=(($106+($105<<2))|0);
      HEAP32[(($107)>>2)]=$101;
      var $108=HEAP32[((_oprof)>>2)];
      var $109=$108;
      var $110=(($pbody+32)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($109+$111)|0);
      var $113=(($112+8)|0);
      assert(12 % 1 === 0, 'memcpy given ' + 12 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = (_convert_to_rgb_pwhite), $$dest = $113, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $114=(tempDoubleI32[0]=HEAP32[((((_gamm+40)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm+40)|0)+4)>>2)],tempDoubleF64[0]);
      var $115=256/($114);
      var $116=($115)+0.5;
      var $117=((($116))|0);
      var $118=((($117) << 16) >> 16);
      var $119=($118) << 16;
      var $120=(($pcurve+12)|0);
      HEAP32[(($120)>>2)]=$119;
      $i=4;
      __label__ = 15; break;
    case 15: // $121
      var $122=$i;
      var $123=((($122))|0) < 7;
      if ($123) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: // $124
      var $125=HEAP32[((_oprof)>>2)];
      var $126=$125;
      var $127=$i;
      var $128=((($127)*3)|0);
      var $129=((($128)+2)|0);
      var $130=(($pbody+($129<<2))|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($126+$131)|0);
      var $133=(($pcurve)|0);
      var $134=$133;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $134, $$dest = $132, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      __label__ = 17; break;
    case 17: // $135
      var $136=$i;
      var $137=((($136)+1)|0);
      $i=$137;
      __label__ = 15; break;
    case 18: // $138
      var $139=HEAP32[((_output_color)>>2)];
      var $140=((($139)-1)|0);
      var $141=((_convert_to_rgb_out_rgb+($140<<2))|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($inverse)|0);
      _pseudoinverse($142, $143, 3);
      $i=0;
      __label__ = 19; break;
    case 19: // $144
      var $145=$i;
      var $146=((($145))|0) < 3;
      if ($146) { __label__ = 20; break; } else { __label__ = 30; break; }
    case 20: // $147
      $j=0;
      __label__ = 21; break;
    case 21: // $148
      var $149=$j;
      var $150=((($149))|0) < 3;
      if ($150) { __label__ = 22; break; } else { __label__ = 28; break; }
    case 22: // $151
      $k=0;
      $num=0;
      __label__ = 23; break;
    case 23: // $152
      var $153=$k;
      var $154=((($153))|0) < 3;
      if ($154) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: // $155
      var $156=$k;
      var $157=$i;
      var $158=((_convert_to_rgb_xyzd50_srgb+$157*24)|0);
      var $159=(($158+($156<<3))|0);
      var $160=(tempDoubleI32[0]=HEAP32[(($159)>>2)],tempDoubleI32[1]=HEAP32[(($159+4)>>2)],tempDoubleF64[0]);
      var $161=$k;
      var $162=$j;
      var $163=(($inverse+$162*24)|0);
      var $164=(($163+($161<<3))|0);
      var $165=(tempDoubleI32[0]=HEAP32[(($164)>>2)],tempDoubleI32[1]=HEAP32[(($164+4)>>2)],tempDoubleF64[0]);
      var $166=($160)*($165);
      var $167=$num;
      var $168=($167)+($166);
      $num=$168;
      __label__ = 25; break;
    case 25: // $169
      var $170=$k;
      var $171=((($170)+1)|0);
      $k=$171;
      __label__ = 23; break;
    case 26: // $172
      var $173=$num;
      var $174=($173)*65536;
      var $175=($174)+0.5;
      var $176=(($175) >= 0 ? Math.floor(($175)) : Math.ceil(($175)));
      var $177=$j;
      var $178=((($177)*3)|0);
      var $179=((($178)+23)|0);
      var $180=(($pbody+($179<<2))|0);
      var $181=HEAPU32[(($180)>>2)];
      var $182=Math.floor(((($181))>>>0)/4);
      var $183=$i;
      var $184=((($182)+($183))|0);
      var $185=((($184)+2)|0);
      var $186=HEAP32[((_oprof)>>2)];
      var $187=(($186+($185<<2))|0);
      HEAP32[(($187)>>2)]=$176;
      __label__ = 27; break;
    case 27: // $188
      var $189=$j;
      var $190=((($189)+1)|0);
      $j=$190;
      __label__ = 21; break;
    case 28: // $191
      __label__ = 29; break;
    case 29: // $192
      var $193=$i;
      var $194=((($193)+1)|0);
      $i=$194;
      __label__ = 19; break;
    case 30: // $195
      $i=0;
      __label__ = 31; break;
    case 31: // $196
      var $197=$i;
      var $198=HEAPU32[((((_convert_to_rgb_phead)|0))>>2)];
      var $199=Math.floor(((($198))>>>0)/4);
      var $200=((($197))>>>0) < ((($199))>>>0);
      if ($200) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: // $201
      var $202=$i;
      var $203=HEAP32[((_oprof)>>2)];
      var $204=(($203+($202<<2))|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=_htonl($205);
      var $207=$i;
      var $208=HEAP32[((_oprof)>>2)];
      var $209=(($208+($207<<2))|0);
      HEAP32[(($209)>>2)]=$206;
      __label__ = 33; break;
    case 33: // $210
      var $211=$i;
      var $212=((($211)+1)|0);
      $i=$212;
      __label__ = 31; break;
    case 34: // $213
      var $214=HEAP32[((_oprof)>>2)];
      var $215=$214;
      var $216=(($pbody+8)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($215+$217)|0);
      var $219=(($218+8)|0);
      var $220=_strcpy($219, ((__str756)|0));
      var $221=HEAP32[((_oprof)>>2)];
      var $222=$221;
      var $223=(($pbody+20)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($222+$224)|0);
      var $226=(($225+12)|0);
      var $227=HEAP32[((_output_color)>>2)];
      var $228=((($227)-1)|0);
      var $229=((_convert_to_rgb_name+($228<<2))|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=_strcpy($226, $230);
      $i=0;
      __label__ = 35; break;
    case 35: // $232
      var $233=$i;
      var $234=((($233))|0) < 3;
      if ($234) { __label__ = 36; break; } else { __label__ = 46; break; }
    case 36: // $235
      $j=0;
      __label__ = 37; break;
    case 37: // $236
      var $237=$j;
      var $238=HEAP32[((_colors)>>2)];
      var $239=((($237))|0) < ((($238))|0);
      if ($239) { __label__ = 38; break; } else { __label__ = 44; break; }
    case 38: // $240
      $k=0;
      var $241=$j;
      var $242=$i;
      var $243=(($out_cam+($242<<4))|0);
      var $244=(($243+($241<<2))|0);
      HEAPF32[(($244)>>2)]=0;
      __label__ = 39; break;
    case 39: // $245
      var $246=$k;
      var $247=((($246))|0) < 3;
      if ($247) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: // $248
      var $249=$k;
      var $250=$i;
      var $251=HEAP32[((_output_color)>>2)];
      var $252=((($251)-1)|0);
      var $253=((_convert_to_rgb_out_rgb+($252<<2))|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($254+$250*24)|0);
      var $256=(($255+($249<<3))|0);
      var $257=(tempDoubleI32[0]=HEAP32[(($256)>>2)],tempDoubleI32[1]=HEAP32[(($256+4)>>2)],tempDoubleF64[0]);
      var $258=$j;
      var $259=$k;
      var $260=((_rgb_cam+($259<<4))|0);
      var $261=(($260+($258<<2))|0);
      var $262=HEAPF32[(($261)>>2)];
      var $263=($262);
      var $264=($257)*($263);
      var $265=$j;
      var $266=$i;
      var $267=(($out_cam+($266<<4))|0);
      var $268=(($267+($265<<2))|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=($269);
      var $271=($270)+($264);
      var $272=($271);
      HEAPF32[(($268)>>2)]=$272;
      __label__ = 41; break;
    case 41: // $273
      var $274=$k;
      var $275=((($274)+1)|0);
      $k=$275;
      __label__ = 39; break;
    case 42: // $276
      __label__ = 43; break;
    case 43: // $277
      var $278=$j;
      var $279=((($278)+1)|0);
      $j=$279;
      __label__ = 37; break;
    case 44: // $280
      __label__ = 45; break;
    case 45: // $281
      var $282=$i;
      var $283=((($282)+1)|0);
      $i=$283;
      __label__ = 35; break;
    case 46: // $284
      __label__ = 47; break;
    case 47: // $285
      var $286=HEAP32[((_verbose)>>2)];
      var $287=((($286))|0)!=0;
      if ($287) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: // $288
      var $289=HEAP32[((__impure_ptr)>>2)];
      var $290=(($289+12)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=HEAP32[((_raw_color)>>2)];
      var $293=((($292))|0)!=0;
      var $294=($293) ? (((__str757)|0)) : (((__str758)|0));
      var $295=HEAP32[((_output_color)>>2)];
      var $296=((($295)-1)|0);
      var $297=((_convert_to_rgb_name+($296<<2))|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=_fprintf($291, $294, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$298,tempInt));
      __label__ = 49; break;
    case 49: // $300
      _memset((_histogram), 0, 131072, 1);
      var $301=HEAP32[((_image)>>2)];
      var $302=(($301)|0);
      var $303=(($302)|0);
      $img=$303;
      $row=0;
      __label__ = 50; break;
    case 50: // $304
      var $305=$row;
      var $306=HEAPU16[((_height)>>1)];
      var $307=((($306))&65535);
      var $308=((($305))|0) < ((($307))|0);
      if ($308) { __label__ = 51; break; } else { __label__ = 83; break; }
    case 51: // $309
      $col=0;
      __label__ = 52; break;
    case 52: // $310
      var $311=$col;
      var $312=HEAPU16[((_width)>>1)];
      var $313=((($312))&65535);
      var $314=((($311))|0) < ((($313))|0);
      if ($314) { __label__ = 53; break; } else { __label__ = 81; break; }
    case 53: // $315
      var $316=HEAP32[((_raw_color)>>2)];
      var $317=((($316))|0)!=0;
      if ($317) { __label__ = 72; break; } else { __label__ = 54; break; }
    case 54: // $318
      var $319=(($out+8)|0);
      HEAPF32[(($319)>>2)]=0;
      var $320=(($out+4)|0);
      HEAPF32[(($320)>>2)]=0;
      var $321=(($out)|0);
      HEAPF32[(($321)>>2)]=0;
      $c=0;
      __label__ = 55; break;
    case 55: // $322
      var $323=$c;
      var $324=HEAP32[((_colors)>>2)];
      var $325=((($323))|0) < ((($324))|0);
      if ($325) { __label__ = 56; break; } else { __label__ = 58; break; }
    case 56: // $326
      var $327=$c;
      var $328=(($out_cam)|0);
      var $329=(($328+($327<<2))|0);
      var $330=HEAPF32[(($329)>>2)];
      var $331=$c;
      var $332=$img;
      var $333=(($332+($331<<1))|0);
      var $334=HEAPU16[(($333)>>1)];
      var $335=((($334))&65535);
      var $336=((($335))|0);
      var $337=($330)*($336);
      var $338=(($out)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=($339)+($337);
      HEAPF32[(($338)>>2)]=$340;
      var $341=$c;
      var $342=(($out_cam+16)|0);
      var $343=(($342+($341<<2))|0);
      var $344=HEAPF32[(($343)>>2)];
      var $345=$c;
      var $346=$img;
      var $347=(($346+($345<<1))|0);
      var $348=HEAPU16[(($347)>>1)];
      var $349=((($348))&65535);
      var $350=((($349))|0);
      var $351=($344)*($350);
      var $352=(($out+4)|0);
      var $353=HEAPF32[(($352)>>2)];
      var $354=($353)+($351);
      HEAPF32[(($352)>>2)]=$354;
      var $355=$c;
      var $356=(($out_cam+32)|0);
      var $357=(($356+($355<<2))|0);
      var $358=HEAPF32[(($357)>>2)];
      var $359=$c;
      var $360=$img;
      var $361=(($360+($359<<1))|0);
      var $362=HEAPU16[(($361)>>1)];
      var $363=((($362))&65535);
      var $364=((($363))|0);
      var $365=($358)*($364);
      var $366=(($out+8)|0);
      var $367=HEAPF32[(($366)>>2)];
      var $368=($367)+($365);
      HEAPF32[(($366)>>2)]=$368;
      __label__ = 57; break;
    case 57: // $369
      var $370=$c;
      var $371=((($370)+1)|0);
      $c=$371;
      __label__ = 55; break;
    case 58: // $372
      $c=0;
      __label__ = 59; break;
    case 59: // $373
      var $374=$c;
      var $375=((($374))|0) < 3;
      if ($375) { __label__ = 60; break; } else { __label__ = 71; break; }
    case 60: // $376
      var $377=$c;
      var $378=(($out+($377<<2))|0);
      var $379=HEAPF32[(($378)>>2)];
      var $380=((($379))|0);
      var $381=((($380))|0) < 65535;
      if ($381) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $382
      var $383=$c;
      var $384=(($out+($383<<2))|0);
      var $385=HEAPF32[(($384)>>2)];
      var $386=((($385))|0);
      var $389 = $386;__label__ = 63; break;
    case 62: // $387
      var $389 = 65535;__label__ = 63; break;
    case 63: // $388
      var $389;
      var $390=0 > ((($389))|0);
      if ($390) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: // $391
      var $407 = 0;__label__ = 69; break;
    case 65: // $392
      var $393=$c;
      var $394=(($out+($393<<2))|0);
      var $395=HEAPF32[(($394)>>2)];
      var $396=((($395))|0);
      var $397=((($396))|0) < 65535;
      if ($397) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $398
      var $399=$c;
      var $400=(($out+($399<<2))|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=((($401))|0);
      var $405 = $402;__label__ = 68; break;
    case 67: // $403
      var $405 = 65535;__label__ = 68; break;
    case 68: // $404
      var $405;
      var $407 = $405;__label__ = 69; break;
    case 69: // $406
      var $407;
      var $408=((($407)) & 65535);
      var $409=$c;
      var $410=$img;
      var $411=(($410+($409<<1))|0);
      HEAP16[(($411)>>1)]=$408;
      __label__ = 70; break;
    case 70: // $412
      var $413=$c;
      var $414=((($413)+1)|0);
      $c=$414;
      __label__ = 59; break;
    case 71: // $415
      __label__ = 75; break;
    case 72: // $416
      var $417=HEAP32[((_document_mode)>>2)];
      var $418=((($417))|0)!=0;
      if ($418) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: // $419
      var $420=HEAPU32[((_filters)>>2)];
      var $421=$row;
      var $422=($421) << 1;
      var $423=($422) & 14;
      var $424=$col;
      var $425=($424) & 1;
      var $426=((($423)+($425))|0);
      var $427=($426) << 1;
      var $428=($420) >>> ((($427))>>>0);
      var $429=($428) & 3;
      var $430=$img;
      var $431=(($430+($429<<1))|0);
      var $432=HEAP16[(($431)>>1)];
      var $433=$img;
      var $434=(($433)|0);
      HEAP16[(($434)>>1)]=$432;
      __label__ = 74; break;
    case 74: // $435
      __label__ = 75; break;
    case 75: // $436
      $c=0;
      __label__ = 76; break;
    case 76: // $437
      var $438=$c;
      var $439=HEAP32[((_colors)>>2)];
      var $440=((($438))|0) < ((($439))|0);
      if ($440) { __label__ = 77; break; } else { __label__ = 79; break; }
    case 77: // $441
      var $442=$c;
      var $443=$img;
      var $444=(($443+($442<<1))|0);
      var $445=HEAPU16[(($444)>>1)];
      var $446=((($445))&65535);
      var $447=($446) >> 3;
      var $448=$c;
      var $449=((_histogram+($448<<15))|0);
      var $450=(($449+($447<<2))|0);
      var $451=HEAP32[(($450)>>2)];
      var $452=((($451)+1)|0);
      HEAP32[(($450)>>2)]=$452;
      __label__ = 78; break;
    case 78: // $453
      var $454=$c;
      var $455=((($454)+1)|0);
      $c=$455;
      __label__ = 76; break;
    case 79: // $456
      __label__ = 80; break;
    case 80: // $457
      var $458=$col;
      var $459=((($458)+1)|0);
      $col=$459;
      var $460=$img;
      var $461=(($460+8)|0);
      $img=$461;
      __label__ = 52; break;
    case 81: // $462
      __label__ = 82; break;
    case 82: // $463
      var $464=$row;
      var $465=((($464)+1)|0);
      $row=$465;
      __label__ = 50; break;
    case 83: // $466
      var $467=HEAP32[((_colors)>>2)];
      var $468=((($467))|0)==4;
      if ($468) { __label__ = 84; break; } else { __label__ = 86; break; }
    case 84: // $469
      var $470=HEAP32[((_output_color)>>2)];
      var $471=((($470))|0)!=0;
      if ($471) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: // $472
      HEAP32[((_colors)>>2)]=3;
      __label__ = 86; break;
    case 86: // $473
      var $474=HEAP32[((_document_mode)>>2)];
      var $475=((($474))|0)!=0;
      if ($475) { __label__ = 87; break; } else { __label__ = 89; break; }
    case 87: // $476
      var $477=HEAP32[((_filters)>>2)];
      var $478=((($477))|0)!=0;
      if ($478) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: // $479
      HEAP32[((_colors)>>2)]=1;
      __label__ = 89; break;
    case 89: // $480
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_convert_to_rgb["X"]=1;

function _flip_index($row, $col) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      $1=$row;
      $2=$col;
      var $3=HEAP32[((_flip)>>2)];
      var $4=($3) & 4;
      var $5=((($4))|0)!=0;
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $6
      var $7=$1;
      var $8=$2;
      var $9=((($7)+($8))|0);
      $1=$9;
      var $10=$1;
      var $11=$2;
      var $12=((($10)-($11))|0);
      $2=$12;
      var $13=$1;
      var $14=$2;
      var $15=((($13)-($14))|0);
      $1=$15;
      __label__ = 2; break;
    case 2: // $16
      var $17=HEAP32[((_flip)>>2)];
      var $18=($17) & 2;
      var $19=((($18))|0)!=0;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $20
      var $21=HEAPU16[((_iheight)>>1)];
      var $22=((($21))&65535);
      var $23=((($22)-1)|0);
      var $24=$1;
      var $25=((($23)-($24))|0);
      $1=$25;
      __label__ = 4; break;
    case 4: // $26
      var $27=HEAP32[((_flip)>>2)];
      var $28=($27) & 1;
      var $29=((($28))|0)!=0;
      if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: // $30
      var $31=HEAPU16[((_iwidth)>>1)];
      var $32=((($31))&65535);
      var $33=((($32)-1)|0);
      var $34=$2;
      var $35=((($33)-($34))|0);
      $2=$35;
      __label__ = 6; break;
    case 6: // $36
      var $37=$1;
      var $38=HEAPU16[((_iwidth)>>1)];
      var $39=((($38))&65535);
      var $40=((($37)*($39))|0);
      var $41=$2;
      var $42=((($40)+($41))|0);
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_flip_index["X"]=1;

function _tiff_set($ntag, $tag, $type, $count, $val) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tt;
      var $c;
      $1=$ntag;
      $2=$tag;
      $3=$type;
      $4=$count;
      $5=$val;
      var $6=$1;
      var $7=(($6+2)|0);
      var $8=$7;
      var $9=$1;
      var $10=HEAPU16[(($9)>>1)];
      var $11=((($10)+1)&65535);
      HEAP16[(($9)>>1)]=$11;
      var $12=((($10))&65535);
      var $13=(($8+$12*12)|0);
      $tt=$13;
      var $14=$2;
      var $15=$tt;
      var $16=(($15)|0);
      HEAP16[(($16)>>1)]=$14;
      var $17=$3;
      var $18=$tt;
      var $19=(($18+2)|0);
      HEAP16[(($19)>>1)]=$17;
      var $20=$4;
      var $21=$tt;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=$3;
      var $24=((($23))&65535);
      var $25=((($24))|0) < 3;
      if ($25) { __label__ = 1; break; } else { __label__ = 7; break; }
    case 1: // $26
      var $27=$4;
      var $28=((($27))|0) <= 4;
      if ($28) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: // $29
      $c=0;
      __label__ = 3; break;
    case 3: // $30
      var $31=$c;
      var $32=((($31))|0) < 4;
      if ($32) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: // $33
      var $34=$5;
      var $35=$c;
      var $36=($35) << 3;
      var $37=($34) >> ((($36))|0);
      var $38=((($37)) & 255);
      var $39=$c;
      var $40=$tt;
      var $41=(($40+8)|0);
      var $42=$41;
      var $43=(($42+$39)|0);
      HEAP8[($43)]=$38;
      __label__ = 5; break;
    case 5: // $44
      var $45=$c;
      var $46=((($45)+1)|0);
      $c=$46;
      __label__ = 3; break;
    case 6: // $47
      __label__ = 16; break;
    case 7: // $48
      var $49=$3;
      var $50=((($49))&65535);
      var $51=((($50))|0)==3;
      if ($51) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: // $52
      var $53=$4;
      var $54=((($53))|0) <= 2;
      if ($54) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: // $55
      $c=0;
      __label__ = 10; break;
    case 10: // $56
      var $57=$c;
      var $58=((($57))|0) < 2;
      if ($58) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: // $59
      var $60=$5;
      var $61=$c;
      var $62=($61) << 4;
      var $63=($60) >> ((($62))|0);
      var $64=((($63)) & 65535);
      var $65=$c;
      var $66=$tt;
      var $67=(($66+8)|0);
      var $68=$67;
      var $69=(($68+($65<<1))|0);
      HEAP16[(($69)>>1)]=$64;
      __label__ = 12; break;
    case 12: // $70
      var $71=$c;
      var $72=((($71)+1)|0);
      $c=$72;
      __label__ = 10; break;
    case 13: // $73
      __label__ = 15; break;
    case 14: // $74
      var $75=$5;
      var $76=$tt;
      var $77=(($76+8)|0);
      var $78=$77;
      HEAP32[(($78)>>2)]=$75;
      __label__ = 15; break;
    case 15: // $79
      __label__ = 16; break;
    case 16: // $80
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_tiff_set["X"]=1;

function _fuji_rotate() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $i;
      var $row;
      var $col;
      var $step;
      var $r;
      var $c;
      var $fr;
      var $fc;
      var $ur;
      var $uc;
      var $wide;
      var $high;
      var $img;
      var $pix;
      var $1=HEAP16[((_fuji_width)>>1)];
      var $2=((($1) << 16) >> 16)!=0;
      if ($2) { __label__ = 2; break; } else { __label__ = 1; break; }
    case 1: // $3
      __label__ = 20; break;
    case 2: // $4
      var $5=HEAP32[((_verbose)>>2)];
      var $6=((($5))|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $7
      var $8=HEAP32[((__impure_ptr)>>2)];
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_fprintf($10, ((__str759)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: // $12
      var $13=HEAPU16[((_fuji_width)>>1)];
      var $14=((($13))&65535);
      var $15=((($14)-1)|0);
      var $16=HEAPU16[((_shrink)>>1)];
      var $17=((($16))&65535);
      var $18=((($15)+($17))|0);
      var $19=HEAPU16[((_shrink)>>1)];
      var $20=((($19))&65535);
      var $21=($18) >> ((($20))|0);
      var $22=((($21)) & 65535);
      HEAP16[((_fuji_width)>>1)]=$22;
      var $23=_sqrt(0.5);
      $step=$23;
      var $24=HEAPU16[((_fuji_width)>>1)];
      var $25=((($24))&65535);
      var $26=((($25))|0);
      var $27=$step;
      var $28=($26)/($27);
      var $29=(($28) >= 0 ? Math.floor(($28)) : Math.ceil(($28)));
      $wide=$29;
      var $30=HEAPU16[((_height)>>1)];
      var $31=((($30))&65535);
      var $32=HEAPU16[((_fuji_width)>>1)];
      var $33=((($32))&65535);
      var $34=((($31)-($33))|0);
      var $35=((($34))|0);
      var $36=$step;
      var $37=($35)/($36);
      var $38=(($37) >= 0 ? Math.floor(($37)) : Math.ceil(($37)));
      $high=$38;
      var $39=$wide;
      var $40=((($39))&65535);
      var $41=$high;
      var $42=((($41))&65535);
      var $43=((($40)*($42))|0);
      var $44=_calloc($43, 8);
      var $45=$44;
      $img=$45;
      var $46=$img;
      var $47=$46;
      _merror($47, ((__str760)|0));
      $row=0;
      __label__ = 5; break;
    case 5: // $48
      var $49=$row;
      var $50=$high;
      var $51=((($50))&65535);
      var $52=((($49))|0) < ((($51))|0);
      if ($52) { __label__ = 6; break; } else { __label__ = 19; break; }
    case 6: // $53
      $col=0;
      __label__ = 7; break;
    case 7: // $54
      var $55=$col;
      var $56=$wide;
      var $57=((($56))&65535);
      var $58=((($55))|0) < ((($57))|0);
      if ($58) { __label__ = 8; break; } else { __label__ = 17; break; }
    case 8: // $59
      var $60=HEAPU16[((_fuji_width)>>1)];
      var $61=((($60))&65535);
      var $62=((($61))|0);
      var $63=$row;
      var $64=$col;
      var $65=((($63)-($64))|0);
      var $66=((($65))|0);
      var $67=$step;
      var $68=($66)*($67);
      var $69=($62)+($68);
      var $70=($69);
      $r=$70;
      var $71=(($70) >= 0 ? Math.floor(($70)) : Math.ceil(($70)));
      $ur=$71;
      var $72=$row;
      var $73=$col;
      var $74=((($72)+($73))|0);
      var $75=((($74))|0);
      var $76=$step;
      var $77=($75)*($76);
      var $78=($77);
      $c=$78;
      var $79=(($78) >= 0 ? Math.floor(($78)) : Math.ceil(($78)));
      $uc=$79;
      var $80=$ur;
      var $81=HEAPU16[((_height)>>1)];
      var $82=((($81))&65535);
      var $83=((($82)-2)|0);
      var $84=((($80))>>>0) > ((($83))>>>0);
      if ($84) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: // $85
      var $86=$uc;
      var $87=HEAPU16[((_width)>>1)];
      var $88=((($87))&65535);
      var $89=((($88)-2)|0);
      var $90=((($86))>>>0) > ((($89))>>>0);
      if ($90) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $91
      __label__ = 16; break;
    case 11: // $92
      var $93=$r;
      var $94=$ur;
      var $95=((($94))>>>0);
      var $96=($93)-($95);
      $fr=$96;
      var $97=$c;
      var $98=$uc;
      var $99=((($98))>>>0);
      var $100=($97)-($99);
      $fc=$100;
      var $101=HEAP32[((_image)>>2)];
      var $102=$ur;
      var $103=HEAPU16[((_width)>>1)];
      var $104=((($103))&65535);
      var $105=((($102)*($104))|0);
      var $106=(($101+($105<<3))|0);
      var $107=$uc;
      var $108=(($106+($107<<3))|0);
      $pix=$108;
      $i=0;
      __label__ = 12; break;
    case 12: // $109
      var $110=$i;
      var $111=HEAP32[((_colors)>>2)];
      var $112=((($110))|0) < ((($111))|0);
      if ($112) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $113
      var $114=$i;
      var $115=$pix;
      var $116=(($115)|0);
      var $117=(($116+($114<<1))|0);
      var $118=HEAPU16[(($117)>>1)];
      var $119=((($118))&65535);
      var $120=((($119))|0);
      var $121=$fc;
      var $122=1-($121);
      var $123=($120)*($122);
      var $124=$i;
      var $125=$pix;
      var $126=(($125+8)|0);
      var $127=(($126+($124<<1))|0);
      var $128=HEAPU16[(($127)>>1)];
      var $129=((($128))&65535);
      var $130=((($129))|0);
      var $131=$fc;
      var $132=($130)*($131);
      var $133=($123)+($132);
      var $134=$fr;
      var $135=1-($134);
      var $136=($133)*($135);
      var $137=$i;
      var $138=HEAPU16[((_width)>>1)];
      var $139=((($138))&65535);
      var $140=$pix;
      var $141=(($140+($139<<3))|0);
      var $142=(($141+($137<<1))|0);
      var $143=HEAPU16[(($142)>>1)];
      var $144=((($143))&65535);
      var $145=((($144))|0);
      var $146=$fc;
      var $147=1-($146);
      var $148=($145)*($147);
      var $149=$i;
      var $150=HEAPU16[((_width)>>1)];
      var $151=((($150))&65535);
      var $152=((($151)+1)|0);
      var $153=$pix;
      var $154=(($153+($152<<3))|0);
      var $155=(($154+($149<<1))|0);
      var $156=HEAPU16[(($155)>>1)];
      var $157=((($156))&65535);
      var $158=((($157))|0);
      var $159=$fc;
      var $160=($158)*($159);
      var $161=($148)+($160);
      var $162=$fr;
      var $163=($161)*($162);
      var $164=($136)+($163);
      var $165=(($164) >= 0 ? Math.floor(($164)) : Math.ceil(($164)));
      var $166=$i;
      var $167=$row;
      var $168=$wide;
      var $169=((($168))&65535);
      var $170=((($167)*($169))|0);
      var $171=$col;
      var $172=((($170)+($171))|0);
      var $173=$img;
      var $174=(($173+($172<<3))|0);
      var $175=(($174+($166<<1))|0);
      HEAP16[(($175)>>1)]=$165;
      __label__ = 14; break;
    case 14: // $176
      var $177=$i;
      var $178=((($177)+1)|0);
      $i=$178;
      __label__ = 12; break;
    case 15: // $179
      __label__ = 16; break;
    case 16: // $180
      var $181=$col;
      var $182=((($181)+1)|0);
      $col=$182;
      __label__ = 7; break;
    case 17: // $183
      __label__ = 18; break;
    case 18: // $184
      var $185=$row;
      var $186=((($185)+1)|0);
      $row=$186;
      __label__ = 5; break;
    case 19: // $187
      var $188=HEAP32[((_image)>>2)];
      var $189=$188;
      _free($189);
      var $190=$wide;
      HEAP16[((_width)>>1)]=$190;
      var $191=$high;
      HEAP16[((_height)>>1)]=$191;
      var $192=$img;
      HEAP32[((_image)>>2)]=$192;
      HEAP16[((_fuji_width)>>1)]=0;
      __label__ = 20; break;
    case 20: // $193
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fuji_rotate["X"]=1;

function _stretch() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $newdim;
      var $img;
      var $pix0;
      var $pix1;
      var $row;
      var $col;
      var $c;
      var $rc;
      var $frac;
      var $1=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $2=($1) == 1;
      if ($2) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $3
      __label__ = 36; break;
    case 2: // $4
      var $5=HEAP32[((_verbose)>>2)];
      var $6=((($5))|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: // $7
      var $8=HEAP32[((__impure_ptr)>>2)];
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_fprintf($10, ((__str761)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 4; break;
    case 4: // $12
      var $13=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $14=($13) < 1;
      if ($14) { __label__ = 5; break; } else { __label__ = 20; break; }
    case 5: // $15
      var $16=HEAPU16[((_height)>>1)];
      var $17=((($16))&65535);
      var $18=((($17))|0);
      var $19=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $20=($18)/($19);
      var $21=($20)+0.5;
      var $22=(($21) >= 0 ? Math.floor(($21)) : Math.ceil(($21)));
      $newdim=$22;
      var $23=HEAPU16[((_width)>>1)];
      var $24=((($23))&65535);
      var $25=$newdim;
      var $26=((($25))&65535);
      var $27=((($24)*($26))|0);
      var $28=_calloc($27, 8);
      var $29=$28;
      $img=$29;
      var $30=$img;
      var $31=$30;
      _merror($31, ((__str762)|0));
      $row=0;
      $rc=0;
      __label__ = 6; break;
    case 6: // $32
      var $33=$row;
      var $34=$newdim;
      var $35=((($34))&65535);
      var $36=((($33))|0) < ((($35))|0);
      if ($36) { __label__ = 7; break; } else { __label__ = 19; break; }
    case 7: // $37
      var $38=$rc;
      var $39=$rc;
      var $40=((($39))|0);
      $c=$40;
      var $41=((($40))|0);
      var $42=($38)-($41);
      $frac=$42;
      var $43=$c;
      var $44=HEAPU16[((_width)>>1)];
      var $45=((($44))&65535);
      var $46=((($43)*($45))|0);
      var $47=HEAP32[((_image)>>2)];
      var $48=(($47+($46<<3))|0);
      var $49=(($48)|0);
      $pix1=$49;
      $pix0=$49;
      var $50=$c;
      var $51=((($50)+1)|0);
      var $52=HEAPU16[((_height)>>1)];
      var $53=((($52))&65535);
      var $54=((($51))|0) < ((($53))|0);
      if ($54) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: // $55
      var $56=HEAPU16[((_width)>>1)];
      var $57=((($56))&65535);
      var $58=(((($57)<<2))|0);
      var $59=$pix1;
      var $60=(($59+($58<<1))|0);
      $pix1=$60;
      __label__ = 9; break;
    case 9: // $61
      $col=0;
      __label__ = 10; break;
    case 10: // $62
      var $63=$col;
      var $64=HEAPU16[((_width)>>1)];
      var $65=((($64))&65535);
      var $66=((($63))|0) < ((($65))|0);
      if ($66) { __label__ = 11; break; } else { __label__ = 17; break; }
    case 11: // $67
      $c=0;
      __label__ = 12; break;
    case 12: // $68
      var $69=$c;
      var $70=HEAP32[((_colors)>>2)];
      var $71=((($69))|0) < ((($70))|0);
      if ($71) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: // $72
      var $73=$c;
      var $74=$pix0;
      var $75=(($74+($73<<1))|0);
      var $76=HEAPU16[(($75)>>1)];
      var $77=((($76))&65535);
      var $78=((($77))|0);
      var $79=$frac;
      var $80=1-($79);
      var $81=($78)*($80);
      var $82=$c;
      var $83=$pix1;
      var $84=(($83+($82<<1))|0);
      var $85=HEAPU16[(($84)>>1)];
      var $86=((($85))&65535);
      var $87=((($86))|0);
      var $88=$frac;
      var $89=($87)*($88);
      var $90=($81)+($89);
      var $91=($90)+0.5;
      var $92=(($91) >= 0 ? Math.floor(($91)) : Math.ceil(($91)));
      var $93=$c;
      var $94=$row;
      var $95=HEAPU16[((_width)>>1)];
      var $96=((($95))&65535);
      var $97=((($94)*($96))|0);
      var $98=$col;
      var $99=((($97)+($98))|0);
      var $100=$img;
      var $101=(($100+($99<<3))|0);
      var $102=(($101+($93<<1))|0);
      HEAP16[(($102)>>1)]=$92;
      __label__ = 14; break;
    case 14: // $103
      var $104=$c;
      var $105=((($104)+1)|0);
      $c=$105;
      __label__ = 12; break;
    case 15: // $106
      __label__ = 16; break;
    case 16: // $107
      var $108=$col;
      var $109=((($108)+1)|0);
      $col=$109;
      var $110=$pix0;
      var $111=(($110+8)|0);
      $pix0=$111;
      var $112=$pix1;
      var $113=(($112+8)|0);
      $pix1=$113;
      __label__ = 10; break;
    case 17: // $114
      __label__ = 18; break;
    case 18: // $115
      var $116=$row;
      var $117=((($116)+1)|0);
      $row=$117;
      var $118=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $119=$rc;
      var $120=($119)+($118);
      $rc=$120;
      __label__ = 6; break;
    case 19: // $121
      var $122=$newdim;
      HEAP16[((_height)>>1)]=$122;
      __label__ = 35; break;
    case 20: // $123
      var $124=HEAPU16[((_width)>>1)];
      var $125=((($124))&65535);
      var $126=((($125))|0);
      var $127=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $128=($126)*($127);
      var $129=($128)+0.5;
      var $130=(($129) >= 0 ? Math.floor(($129)) : Math.ceil(($129)));
      $newdim=$130;
      var $131=HEAPU16[((_height)>>1)];
      var $132=((($131))&65535);
      var $133=$newdim;
      var $134=((($133))&65535);
      var $135=((($132)*($134))|0);
      var $136=_calloc($135, 8);
      var $137=$136;
      $img=$137;
      var $138=$img;
      var $139=$138;
      _merror($139, ((__str762)|0));
      $col=0;
      $rc=0;
      __label__ = 21; break;
    case 21: // $140
      var $141=$col;
      var $142=$newdim;
      var $143=((($142))&65535);
      var $144=((($141))|0) < ((($143))|0);
      if ($144) { __label__ = 22; break; } else { __label__ = 34; break; }
    case 22: // $145
      var $146=$rc;
      var $147=$rc;
      var $148=((($147))|0);
      $c=$148;
      var $149=((($148))|0);
      var $150=($146)-($149);
      $frac=$150;
      var $151=$c;
      var $152=HEAP32[((_image)>>2)];
      var $153=(($152+($151<<3))|0);
      var $154=(($153)|0);
      $pix1=$154;
      $pix0=$154;
      var $155=$c;
      var $156=((($155)+1)|0);
      var $157=HEAPU16[((_width)>>1)];
      var $158=((($157))&65535);
      var $159=((($156))|0) < ((($158))|0);
      if ($159) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $160
      var $161=$pix1;
      var $162=(($161+8)|0);
      $pix1=$162;
      __label__ = 24; break;
    case 24: // $163
      $row=0;
      __label__ = 25; break;
    case 25: // $164
      var $165=$row;
      var $166=HEAPU16[((_height)>>1)];
      var $167=((($166))&65535);
      var $168=((($165))|0) < ((($167))|0);
      if ($168) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: // $169
      $c=0;
      __label__ = 27; break;
    case 27: // $170
      var $171=$c;
      var $172=HEAP32[((_colors)>>2)];
      var $173=((($171))|0) < ((($172))|0);
      if ($173) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: // $174
      var $175=$c;
      var $176=$pix0;
      var $177=(($176+($175<<1))|0);
      var $178=HEAPU16[(($177)>>1)];
      var $179=((($178))&65535);
      var $180=((($179))|0);
      var $181=$frac;
      var $182=1-($181);
      var $183=($180)*($182);
      var $184=$c;
      var $185=$pix1;
      var $186=(($185+($184<<1))|0);
      var $187=HEAPU16[(($186)>>1)];
      var $188=((($187))&65535);
      var $189=((($188))|0);
      var $190=$frac;
      var $191=($189)*($190);
      var $192=($183)+($191);
      var $193=($192)+0.5;
      var $194=(($193) >= 0 ? Math.floor(($193)) : Math.ceil(($193)));
      var $195=$c;
      var $196=$row;
      var $197=$newdim;
      var $198=((($197))&65535);
      var $199=((($196)*($198))|0);
      var $200=$col;
      var $201=((($199)+($200))|0);
      var $202=$img;
      var $203=(($202+($201<<3))|0);
      var $204=(($203+($195<<1))|0);
      HEAP16[(($204)>>1)]=$194;
      __label__ = 29; break;
    case 29: // $205
      var $206=$c;
      var $207=((($206)+1)|0);
      $c=$207;
      __label__ = 27; break;
    case 30: // $208
      __label__ = 31; break;
    case 31: // $209
      var $210=$row;
      var $211=((($210)+1)|0);
      $row=$211;
      var $212=HEAPU16[((_width)>>1)];
      var $213=((($212))&65535);
      var $214=(((($213)<<2))|0);
      var $215=$pix0;
      var $216=(($215+($214<<1))|0);
      $pix0=$216;
      var $217=HEAPU16[((_width)>>1)];
      var $218=((($217))&65535);
      var $219=(((($218)<<2))|0);
      var $220=$pix1;
      var $221=(($220+($219<<1))|0);
      $pix1=$221;
      __label__ = 25; break;
    case 32: // $222
      __label__ = 33; break;
    case 33: // $223
      var $224=$col;
      var $225=((($224)+1)|0);
      $col=$225;
      var $226=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $227=1/($226);
      var $228=$rc;
      var $229=($228)+($227);
      $rc=$229;
      __label__ = 21; break;
    case 34: // $230
      var $231=$newdim;
      HEAP16[((_width)>>1)]=$231;
      __label__ = 35; break;
    case 35: // $232
      var $233=HEAP32[((_image)>>2)];
      var $234=$233;
      _free($234);
      var $235=$img;
      HEAP32[((_image)>>2)]=$235;
      __label__ = 36; break;
    case 36: // $236
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_stretch["X"]=1;

function _tiff_head($th, $full) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $c;
      var $psize;
      var $t;
      $1=$th;
      $2=$full;
      $psize=0;
      var $3=$1;
      var $4=$3;
      _memset($4, 0, 1376, 1);
      var $5=_htonl(1296910665);
      var $6=($5) >> 16;
      var $7=((($6)) & 65535);
      var $8=$1;
      var $9=(($8)|0);
      HEAP16[(($9)>>1)]=$7;
      var $10=$1;
      var $11=(($10+2)|0);
      HEAP16[(($11)>>1)]=42;
      var $12=$1;
      var $13=(($12+4)|0);
      HEAP32[(($13)>>2)]=10;
      var $14=$2;
      var $15=((($14))|0)!=0;
      if ($15) { __label__ = 1; break; } else { __label__ = 8; break; }
    case 1: // $16
      var $17=$1;
      var $18=(($17+10)|0);
      _tiff_set($18, 254, 4, 1, 0);
      var $19=$1;
      var $20=(($19+10)|0);
      var $21=HEAPU16[((_width)>>1)];
      var $22=((($21))&65535);
      _tiff_set($20, 256, 4, 1, $22);
      var $23=$1;
      var $24=(($23+10)|0);
      var $25=HEAPU16[((_height)>>1)];
      var $26=((($25))&65535);
      _tiff_set($24, 257, 4, 1, $26);
      var $27=$1;
      var $28=(($27+10)|0);
      var $29=HEAP32[((_colors)>>2)];
      var $30=HEAP32[((_output_bps)>>2)];
      _tiff_set($28, 258, 3, $29, $30);
      var $31=HEAP32[((_colors)>>2)];
      var $32=((($31))|0) > 2;
      if ($32) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: // $33
      var $34=$1;
      var $35=(($34+468)|0);
      var $36=$35;
      var $37=$1;
      var $38=$37;
      var $39=($36);
      var $40=($38);
      var $41=((($39)-($40))|0);
      var $42=$1;
      var $43=(($42+10)|0);
      var $44=HEAPU16[(($43)>>1)];
      var $45=((($44))&65535);
      var $46=((($45)-1)|0);
      var $47=$1;
      var $48=(($47+12)|0);
      var $49=(($48+$46*12)|0);
      var $50=(($49+8)|0);
      var $51=$50;
      HEAP32[(($51)>>2)]=$41;
      __label__ = 3; break;
    case 3: // $52
      $c=0;
      __label__ = 4; break;
    case 4: // $53
      var $54=$c;
      var $55=((($54))|0) < 4;
      if ($55) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: // $56
      var $57=HEAP32[((_output_bps)>>2)];
      var $58=((($57)) & 65535);
      var $59=$c;
      var $60=$1;
      var $61=(($60+468)|0);
      var $62=(($61+($59<<1))|0);
      HEAP16[(($62)>>1)]=$58;
      __label__ = 6; break;
    case 6: // $63
      var $64=$c;
      var $65=((($64)+1)|0);
      $c=$65;
      __label__ = 4; break;
    case 7: // $66
      var $67=$1;
      var $68=(($67+10)|0);
      _tiff_set($68, 259, 3, 1, 1);
      var $69=$1;
      var $70=(($69+10)|0);
      var $71=HEAP32[((_colors)>>2)];
      var $72=((($71))|0) > 1;
      var $73=((($72))&1);
      var $74=((($73)+1)|0);
      _tiff_set($70, 262, 3, 1, $74);
      __label__ = 8; break;
    case 8: // $75
      var $76=$1;
      var $77=(($76+10)|0);
      var $78=$1;
      var $79=(($78+620)|0);
      var $80=$79;
      var $81=$1;
      var $82=$81;
      var $83=($80);
      var $84=($82);
      var $85=((($83)-($84))|0);
      _tiff_set($77, 270, 2, 512, $85);
      var $86=$1;
      var $87=(($86+10)|0);
      var $88=$1;
      var $89=(($88+1132)|0);
      var $90=$89;
      var $91=$1;
      var $92=$91;
      var $93=($90);
      var $94=($92);
      var $95=((($93)-($94))|0);
      _tiff_set($87, 271, 2, 64, $95);
      var $96=$1;
      var $97=(($96+10)|0);
      var $98=$1;
      var $99=(($98+1196)|0);
      var $100=$99;
      var $101=$1;
      var $102=$101;
      var $103=($100);
      var $104=($102);
      var $105=((($103)-($104))|0);
      _tiff_set($97, 272, 2, 64, $105);
      var $106=$2;
      var $107=((($106))|0)!=0;
      if ($107) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: // $108
      var $109=HEAP32[((_oprof)>>2)];
      var $110=((($109))|0)!=0;
      if ($110) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: // $111
      var $112=HEAP32[((_oprof)>>2)];
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=_ntohl($114);
      $psize=$115;
      __label__ = 11; break;
    case 11: // $116
      var $117=$1;
      var $118=(($117+10)|0);
      var $119=$psize;
      var $120=((($119)+1376)|0);
      _tiff_set($118, 273, 4, 1, $120);
      var $121=$1;
      var $122=(($121+10)|0);
      var $123=HEAP32[((_colors)>>2)];
      _tiff_set($122, 277, 3, 1, $123);
      var $124=$1;
      var $125=(($124+10)|0);
      var $126=HEAPU16[((_height)>>1)];
      var $127=((($126))&65535);
      _tiff_set($125, 278, 4, 1, $127);
      var $128=$1;
      var $129=(($128+10)|0);
      var $130=HEAPU16[((_height)>>1)];
      var $131=((($130))&65535);
      var $132=HEAPU16[((_width)>>1)];
      var $133=((($132))&65535);
      var $134=((($131)*($133))|0);
      var $135=HEAP32[((_colors)>>2)];
      var $136=((($134)*($135))|0);
      var $137=HEAP32[((_output_bps)>>2)];
      var $138=((($136)*($137))|0);
      var $139=((((($138))|0)/8)|0);
      _tiff_set($129, 279, 4, 1, $139);
      __label__ = 13; break;
    case 12: // $140
      var $141=$1;
      var $142=(($141+10)|0);
      var $143=HEAP32[((_flip)>>2)];
      var $144=((__str763+$143)|0);
      var $145=HEAP8[($144)];
      var $146=((($145) << 24) >> 24);
      var $147=((($146)-48)|0);
      _tiff_set($142, 274, 3, 1, $147);
      __label__ = 13; break;
    case 13: // $148
      var $149=$1;
      var $150=(($149+10)|0);
      var $151=$1;
      var $152=(($151+476)|0);
      var $153=(($152)|0);
      var $154=$153;
      var $155=$1;
      var $156=$155;
      var $157=($154);
      var $158=($156);
      var $159=((($157)-($158))|0);
      _tiff_set($150, 282, 5, 1, $159);
      var $160=$1;
      var $161=(($160+10)|0);
      var $162=$1;
      var $163=(($162+476)|0);
      var $164=(($163+8)|0);
      var $165=$164;
      var $166=$1;
      var $167=$166;
      var $168=($165);
      var $169=($167);
      var $170=((($168)-($169))|0);
      _tiff_set($161, 283, 5, 1, $170);
      var $171=$1;
      var $172=(($171+10)|0);
      _tiff_set($172, 284, 3, 1, 1);
      var $173=$1;
      var $174=(($173+10)|0);
      _tiff_set($174, 296, 3, 1, 2);
      var $175=$1;
      var $176=(($175+10)|0);
      var $177=$1;
      var $178=(($177+1260)|0);
      var $179=$178;
      var $180=$1;
      var $181=$180;
      var $182=($179);
      var $183=($181);
      var $184=((($182)-($183))|0);
      _tiff_set($176, 305, 2, 32, $184);
      var $185=$1;
      var $186=(($185+10)|0);
      var $187=$1;
      var $188=(($187+1292)|0);
      var $189=$188;
      var $190=$1;
      var $191=$190;
      var $192=($189);
      var $193=($191);
      var $194=((($192)-($193))|0);
      _tiff_set($186, 306, 2, 20, $194);
      var $195=$1;
      var $196=(($195+10)|0);
      var $197=$1;
      var $198=(($197+1312)|0);
      var $199=$198;
      var $200=$1;
      var $201=$200;
      var $202=($199);
      var $203=($201);
      var $204=((($202)-($203))|0);
      _tiff_set($196, 315, 2, 64, $204);
      var $205=$1;
      var $206=(($205+10)|0);
      var $207=$1;
      var $208=(($207+294)|0);
      var $209=$208;
      var $210=$1;
      var $211=$210;
      var $212=($209);
      var $213=($211);
      var $214=((($212)-($213))|0);
      _tiff_set($206, -30871, 4, 1, $214);
      var $215=$psize;
      var $216=((($215))|0)!=0;
      if ($216) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: // $217
      var $218=$1;
      var $219=(($218+10)|0);
      var $220=$psize;
      _tiff_set($219, -30861, 7, $220, 1376);
      __label__ = 15; break;
    case 15: // $221
      var $222=$1;
      var $223=(($222+294)|0);
      var $224=$1;
      var $225=(($224+476)|0);
      var $226=(($225+16)|0);
      var $227=$226;
      var $228=$1;
      var $229=$228;
      var $230=($227);
      var $231=($229);
      var $232=((($230)-($231))|0);
      _tiff_set($223, -32102, 5, 1, $232);
      var $233=$1;
      var $234=(($233+294)|0);
      var $235=$1;
      var $236=(($235+476)|0);
      var $237=(($236+24)|0);
      var $238=$237;
      var $239=$1;
      var $240=$239;
      var $241=($238);
      var $242=($240);
      var $243=((($241)-($242))|0);
      _tiff_set($234, -32099, 5, 1, $243);
      var $244=$1;
      var $245=(($244+294)|0);
      var $246=HEAPF32[((_iso_speed)>>2)];
      var $247=((($246))|0);
      _tiff_set($245, -30681, 3, 1, $247);
      var $248=$1;
      var $249=(($248+294)|0);
      var $250=$1;
      var $251=(($250+476)|0);
      var $252=(($251+32)|0);
      var $253=$252;
      var $254=$1;
      var $255=$254;
      var $256=($253);
      var $257=($255);
      var $258=((($256)-($257))|0);
      _tiff_set($249, -28150, 5, 1, $258);
      var $259=HEAP32[((((_gpsdata+4)|0))>>2)];
      var $260=((($259))|0)!=0;
      if ($260) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: // $261
      var $262=$1;
      var $263=(($262+10)|0);
      var $264=$1;
      var $265=(($264+346)|0);
      var $266=$265;
      var $267=$1;
      var $268=$267;
      var $269=($266);
      var $270=($268);
      var $271=((($269)-($270))|0);
      _tiff_set($263, -30683, 4, 1, $271);
      var $272=$1;
      var $273=(($272+346)|0);
      _tiff_set($273, 0, 1, 4, 514);
      var $274=$1;
      var $275=(($274+346)|0);
      var $276=HEAP32[((((_gpsdata+116)|0))>>2)];
      _tiff_set($275, 1, 2, 2, $276);
      var $277=$1;
      var $278=(($277+346)|0);
      var $279=$1;
      var $280=(($279+516)|0);
      var $281=(($280)|0);
      var $282=$281;
      var $283=$1;
      var $284=$283;
      var $285=($282);
      var $286=($284);
      var $287=((($285)-($286))|0);
      _tiff_set($278, 2, 5, 3, $287);
      var $288=$1;
      var $289=(($288+346)|0);
      var $290=HEAP32[((((_gpsdata+120)|0))>>2)];
      _tiff_set($289, 3, 2, 2, $290);
      var $291=$1;
      var $292=(($291+346)|0);
      var $293=$1;
      var $294=(($293+516)|0);
      var $295=(($294+24)|0);
      var $296=$295;
      var $297=$1;
      var $298=$297;
      var $299=($296);
      var $300=($298);
      var $301=((($299)-($300))|0);
      _tiff_set($292, 4, 5, 3, $301);
      var $302=$1;
      var $303=(($302+346)|0);
      var $304=HEAP32[((((_gpsdata+124)|0))>>2)];
      _tiff_set($303, 5, 1, 1, $304);
      var $305=$1;
      var $306=(($305+346)|0);
      var $307=$1;
      var $308=(($307+516)|0);
      var $309=(($308+72)|0);
      var $310=$309;
      var $311=$1;
      var $312=$311;
      var $313=($310);
      var $314=($312);
      var $315=((($313)-($314))|0);
      _tiff_set($306, 6, 5, 1, $315);
      var $316=$1;
      var $317=(($316+346)|0);
      var $318=$1;
      var $319=(($318+516)|0);
      var $320=(($319+48)|0);
      var $321=$320;
      var $322=$1;
      var $323=$322;
      var $324=($321);
      var $325=($323);
      var $326=((($324)-($325))|0);
      _tiff_set($317, 7, 5, 3, $326);
      var $327=$1;
      var $328=(($327+346)|0);
      var $329=$1;
      var $330=(($329+516)|0);
      var $331=(($330+80)|0);
      var $332=$331;
      var $333=$1;
      var $334=$333;
      var $335=($332);
      var $336=($334);
      var $337=((($335)-($336))|0);
      _tiff_set($328, 18, 2, 12, $337);
      var $338=$1;
      var $339=(($338+346)|0);
      var $340=$1;
      var $341=(($340+516)|0);
      var $342=(($341+92)|0);
      var $343=$342;
      var $344=$1;
      var $345=$344;
      var $346=($343);
      var $347=($345);
      var $348=((($346)-($347))|0);
      _tiff_set($339, 29, 2, 12, $348);
      var $349=$1;
      var $350=(($349+516)|0);
      var $351=(($350)|0);
      var $352=$351;
      assert(104 % 1 === 0, 'memcpy given ' + 104 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($352, (_gpsdata), 104, 1);
      __label__ = 17; break;
    case 17: // $353
      var $354=$1;
      var $355=(($354+476)|0);
      var $356=(($355+8)|0);
      HEAP32[(($356)>>2)]=300;
      var $357=$1;
      var $358=(($357+476)|0);
      var $359=(($358)|0);
      HEAP32[(($359)>>2)]=300;
      var $360=$1;
      var $361=(($360+476)|0);
      var $362=(($361+12)|0);
      HEAP32[(($362)>>2)]=1;
      var $363=$1;
      var $364=(($363+476)|0);
      var $365=(($364+4)|0);
      HEAP32[(($365)>>2)]=1;
      $c=0;
      __label__ = 18; break;
    case 18: // $366
      var $367=$c;
      var $368=((($367))|0) < 6;
      if ($368) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: // $369
      var $370=$c;
      var $371=((($370)+4)|0);
      var $372=$1;
      var $373=(($372+476)|0);
      var $374=(($373+($371<<2))|0);
      HEAP32[(($374)>>2)]=1000000;
      __label__ = 20; break;
    case 20: // $375
      var $376=$c;
      var $377=((($376)+1)|0);
      $c=$377;
      __label__ = 18; break;
    case 21: // $378
      var $379=HEAPF32[((_shutter)>>2)];
      var $380=$1;
      var $381=(($380+476)|0);
      var $382=(($381+16)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=((($383))|0);
      var $385=($384)*($379);
      var $386=((($385))|0);
      HEAP32[(($382)>>2)]=$386;
      var $387=HEAPF32[((_aperture)>>2)];
      var $388=$1;
      var $389=(($388+476)|0);
      var $390=(($389+24)|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=((($391))|0);
      var $393=($392)*($387);
      var $394=((($393))|0);
      HEAP32[(($390)>>2)]=$394;
      var $395=HEAPF32[((_focal_len)>>2)];
      var $396=$1;
      var $397=(($396+476)|0);
      var $398=(($397+32)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=((($399))|0);
      var $401=($400)*($395);
      var $402=((($401))|0);
      HEAP32[(($398)>>2)]=$402;
      var $403=$1;
      var $404=(($403+620)|0);
      var $405=(($404)|0);
      var $406=_strncpy($405, ((_desc)|0), 512);
      var $407=$1;
      var $408=(($407+1132)|0);
      var $409=(($408)|0);
      var $410=_strncpy($409, ((_make)|0), 64);
      var $411=$1;
      var $412=(($411+1196)|0);
      var $413=(($412)|0);
      var $414=_strncpy($413, ((_model)|0), 64);
      var $415=$1;
      var $416=(($415+1260)|0);
      var $417=(($416)|0);
      var $418=_strcpy($417, ((__str764)|0));
      var $419=_localtime(_timestamp);
      $t=$419;
      var $420=$1;
      var $421=(($420+1292)|0);
      var $422=(($421)|0);
      var $423=$t;
      var $424=(($423+20)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=((($425)+1900)|0);
      var $427=$t;
      var $428=(($427+16)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=((($429)+1)|0);
      var $431=$t;
      var $432=(($431+12)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=$t;
      var $435=(($434+8)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=$t;
      var $438=(($437+4)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$t;
      var $441=(($440)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=_sprintf($422, ((__str765)|0), (tempInt=STACKTOP,STACKTOP += 24,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$426,HEAP32[((tempInt+4)>>2)]=$430,HEAP32[((tempInt+8)>>2)]=$433,HEAP32[((tempInt+12)>>2)]=$436,HEAP32[((tempInt+16)>>2)]=$439,HEAP32[((tempInt+20)>>2)]=$442,tempInt));
      var $444=$1;
      var $445=(($444+1312)|0);
      var $446=(($445)|0);
      var $447=_strncpy($446, ((_artist)|0), 64);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_tiff_head["X"]=1;

function _jpeg_thumb() {
  var __stackBase__  = STACKTOP; STACKTOP += 1388; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $thumb;
      var $exif=__stackBase__;
      var $th=__stackBase__+12;
      var $1=HEAP32[((_thumb_length)>>2)];
      var $2=_malloc($1);
      $thumb=$2;
      var $3=$thumb;
      _merror($3, ((__str766)|0));
      var $4=$thumb;
      var $5=HEAP32[((_thumb_length)>>2)];
      var $6=HEAP32[((_ifp)>>2)];
      var $7=_fread($4, 1, $5, $6);
      var $8=HEAP32[((_ofp)>>2)];
      var $9=_fputc(255, $8);
      var $10=HEAP32[((_ofp)>>2)];
      var $11=_fputc(216, $10);
      var $12=$thumb;
      var $13=(($12+6)|0);
      var $14=_strcmp($13, ((__str552)|0));
      var $15=((($14))|0)!=0;
      if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $16
      var $17=(($exif)|0);
      var $18=$17;
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = ((__str767)|0), $$dest = $18, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $19=_htons(1384);
      var $20=((($19)) & 65535);
      var $21=(($exif+2)|0);
      HEAP16[(($21)>>1)]=$20;
      var $22=(($exif)|0);
      var $23=$22;
      var $24=HEAP32[((_ofp)>>2)];
      var $25=_fwrite($23, 1, 10, $24);
      _tiff_head($th, 0);
      var $26=$th;
      var $27=HEAP32[((_ofp)>>2)];
      var $28=_fwrite($26, 1, 1376, $27);
      __label__ = 2; break;
    case 2: // $29
      var $30=$thumb;
      var $31=(($30+2)|0);
      var $32=HEAP32[((_thumb_length)>>2)];
      var $33=((($32)-2)|0);
      var $34=HEAP32[((_ofp)>>2)];
      var $35=_fwrite($31, 1, $33, $34);
      var $36=$thumb;
      _free($36);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _write_ppm_tiff() {
  var __stackBase__  = STACKTOP; STACKTOP += 1376; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $th=__stackBase__;
      var $ppm;
      var $ppm2;
      var $c;
      var $row;
      var $col;
      var $soff;
      var $rstep;
      var $cstep;
      var $perc;
      var $val;
      var $total;
      var $white;
      $white=8192;
      var $1=HEAPU16[((_width)>>1)];
      var $2=((($1))&65535);
      var $3=HEAPU16[((_height)>>1)];
      var $4=((($3))&65535);
      var $5=((($2)*($4))|0);
      var $6=((($5))|0);
      var $7=($6)*0.01;
      var $8=((($7))|0);
      $perc=$8;
      var $9=HEAP16[((_fuji_width)>>1)];
      var $10=((($9) << 16) >> 16)!=0;
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $11
      var $12=$perc;
      var $13=((((($12))|0)/2)|0);
      $perc=$13;
      __label__ = 2; break;
    case 2: // $14
      var $15=HEAP32[((_highlight)>>2)];
      var $16=($15) & -3;
      var $17=((($16))|0)!=0;
      if ($17) { __label__ = 16; break; } else { __label__ = 3; break; }
    case 3: // $18
      var $19=HEAP32[((_no_auto_bright)>>2)];
      var $20=((($19))|0)!=0;
      if ($20) { __label__ = 16; break; } else { __label__ = 4; break; }
    case 4: // $21
      $c=0;
      $white=0;
      __label__ = 5; break;
    case 5: // $22
      var $23=$c;
      var $24=HEAP32[((_colors)>>2)];
      var $25=((($23))|0) < ((($24))|0);
      if ($25) { __label__ = 6; break; } else { __label__ = 15; break; }
    case 6: // $26
      $val=8192;
      $total=0;
      __label__ = 7; break;
    case 7: // $27
      var $28=$val;
      var $29=((($28)-1)|0);
      $val=$29;
      var $30=((($29))|0) > 32;
      if ($30) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: // $31
      var $32=$val;
      var $33=$c;
      var $34=((_histogram+($33<<15))|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$total;
      var $38=((($37)+($36))|0);
      $total=$38;
      var $39=$perc;
      var $40=((($38))|0) > ((($39))|0);
      if ($40) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: // $41
      __label__ = 11; break;
    case 10: // $42
      __label__ = 7; break;
    case 11: // $43
      var $44=$white;
      var $45=$val;
      var $46=((($44))|0) < ((($45))|0);
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: // $47
      var $48=$val;
      $white=$48;
      __label__ = 13; break;
    case 13: // $49
      __label__ = 14; break;
    case 14: // $50
      var $51=$c;
      var $52=((($51)+1)|0);
      $c=$52;
      __label__ = 5; break;
    case 15: // $53
      __label__ = 16; break;
    case 16: // $54
      var $55=(tempDoubleI32[0]=HEAP32[((((_gamm)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm)|0)+4)>>2)],tempDoubleF64[0]);
      var $56=(tempDoubleI32[0]=HEAP32[((((_gamm+8)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm+8)|0)+4)>>2)],tempDoubleF64[0]);
      var $57=$white;
      var $58=($57) << 3;
      var $59=((($58))|0);
      var $60=HEAPF32[((_bright)>>2)];
      var $61=($59)/($60);
      var $62=((($61))|0);
      _gamma_curve($55, $56, 2, $62);
      var $63=HEAP16[((_height)>>1)];
      HEAP16[((_iheight)>>1)]=$63;
      var $64=HEAP16[((_width)>>1)];
      HEAP16[((_iwidth)>>1)]=$64;
      var $65=HEAP32[((_flip)>>2)];
      var $66=($65) & 4;
      var $67=((($66))|0)!=0;
      if ($67) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: // $68
      var $69=HEAPU16[((_height)>>1)];
      var $70=((($69))&65535);
      var $71=HEAPU16[((_width)>>1)];
      var $72=((($71))&65535);
      var $73=((($70)+($72))|0);
      var $74=((($73)) & 65535);
      HEAP16[((_height)>>1)]=$74;
      var $75=HEAPU16[((_height)>>1)];
      var $76=((($75))&65535);
      var $77=HEAPU16[((_width)>>1)];
      var $78=((($77))&65535);
      var $79=((($76)-($78))|0);
      var $80=((($79)) & 65535);
      HEAP16[((_width)>>1)]=$80;
      var $81=HEAPU16[((_height)>>1)];
      var $82=((($81))&65535);
      var $83=HEAPU16[((_width)>>1)];
      var $84=((($83))&65535);
      var $85=((($82)-($84))|0);
      var $86=((($85)) & 65535);
      HEAP16[((_height)>>1)]=$86;
      __label__ = 18; break;
    case 18: // $87
      var $88=HEAPU16[((_width)>>1)];
      var $89=((($88))&65535);
      var $90=HEAP32[((_colors)>>2)];
      var $91=HEAP32[((_output_bps)>>2)];
      var $92=((($90)*($91))|0);
      var $93=((((($92))|0)/8)|0);
      var $94=_calloc($89, $93);
      $ppm=$94;
      var $95=$ppm;
      var $96=$95;
      $ppm2=$96;
      var $97=$ppm;
      _merror($97, ((__str768)|0));
      var $98=HEAP32[((_output_tiff)>>2)];
      var $99=((($98))|0)!=0;
      if ($99) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: // $100
      _tiff_head($th, 1);
      var $101=$th;
      var $102=HEAP32[((_ofp)>>2)];
      var $103=_fwrite($101, 1376, 1, $102);
      var $104=HEAP32[((_oprof)>>2)];
      var $105=((($104))|0)!=0;
      if ($105) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $106
      var $107=HEAP32[((_oprof)>>2)];
      var $108=$107;
      var $109=HEAP32[((_oprof)>>2)];
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=_ntohl($111);
      var $113=HEAP32[((_ofp)>>2)];
      var $114=_fwrite($108, $112, 1, $113);
      __label__ = 21; break;
    case 21: // $115
      __label__ = 26; break;
    case 22: // $116
      var $117=HEAP32[((_colors)>>2)];
      var $118=((($117))|0) > 3;
      if ($118) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: // $119
      var $120=HEAP32[((_ofp)>>2)];
      var $121=HEAPU16[((_width)>>1)];
      var $122=((($121))&65535);
      var $123=HEAPU16[((_height)>>1)];
      var $124=((($123))&65535);
      var $125=HEAP32[((_colors)>>2)];
      var $126=HEAP32[((_output_bps)>>2)];
      var $127=1 << ($126);
      var $128=((($127)-1)|0);
      var $129=_fprintf($120, ((__str769)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$122,HEAP32[((tempInt+4)>>2)]=$124,HEAP32[((tempInt+8)>>2)]=$125,HEAP32[((tempInt+12)>>2)]=$128,HEAP32[((tempInt+16)>>2)]=((_cdesc)|0),tempInt));
      __label__ = 25; break;
    case 24: // $130
      var $131=HEAP32[((_ofp)>>2)];
      var $132=HEAP32[((_colors)>>2)];
      var $133=((((($132))|0)/2)|0);
      var $134=((($133)+5)|0);
      var $135=HEAPU16[((_width)>>1)];
      var $136=((($135))&65535);
      var $137=HEAPU16[((_height)>>1)];
      var $138=((($137))&65535);
      var $139=HEAP32[((_output_bps)>>2)];
      var $140=1 << ($139);
      var $141=((($140)-1)|0);
      var $142=_fprintf($131, ((__str770)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$134,HEAP32[((tempInt+4)>>2)]=$136,HEAP32[((tempInt+8)>>2)]=$138,HEAP32[((tempInt+12)>>2)]=$141,tempInt));
      __label__ = 25; break;
    case 25: // $143
      __label__ = 26; break;
    case 26: // $144
      var $145=_flip_index(0, 0);
      $soff=$145;
      var $146=_flip_index(0, 1);
      var $147=$soff;
      var $148=((($146)-($147))|0);
      $cstep=$148;
      var $149=_flip_index(1, 0);
      var $150=HEAPU16[((_width)>>1)];
      var $151=((($150))&65535);
      var $152=_flip_index(0, $151);
      var $153=((($149)-($152))|0);
      $rstep=$153;
      $row=0;
      __label__ = 27; break;
    case 27: // $154
      var $155=$row;
      var $156=HEAPU16[((_height)>>1)];
      var $157=((($156))&65535);
      var $158=((($155))|0) < ((($157))|0);
      if ($158) { __label__ = 28; break; } else { __label__ = 49; break; }
    case 28: // $159
      $col=0;
      __label__ = 29; break;
    case 29: // $160
      var $161=$col;
      var $162=HEAPU16[((_width)>>1)];
      var $163=((($162))&65535);
      var $164=((($161))|0) < ((($163))|0);
      if ($164) { __label__ = 30; break; } else { __label__ = 43; break; }
    case 30: // $165
      var $166=HEAP32[((_output_bps)>>2)];
      var $167=((($166))|0)==8;
      if ($167) { __label__ = 31; break; } else { __label__ = 36; break; }
    case 31: // $168
      $c=0;
      __label__ = 32; break;
    case 32: // $169
      var $170=$c;
      var $171=HEAP32[((_colors)>>2)];
      var $172=((($170))|0) < ((($171))|0);
      if ($172) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: // $173
      var $174=$c;
      var $175=$soff;
      var $176=HEAP32[((_image)>>2)];
      var $177=(($176+($175<<3))|0);
      var $178=(($177+($174<<1))|0);
      var $179=HEAPU16[(($178)>>1)];
      var $180=((($179))&65535);
      var $181=((_curve+($180<<1))|0);
      var $182=HEAPU16[(($181)>>1)];
      var $183=((($182))&65535);
      var $184=($183) >> 8;
      var $185=((($184)) & 255);
      var $186=$col;
      var $187=HEAP32[((_colors)>>2)];
      var $188=((($186)*($187))|0);
      var $189=$c;
      var $190=((($188)+($189))|0);
      var $191=$ppm;
      var $192=(($191+$190)|0);
      HEAP8[($192)]=$185;
      __label__ = 34; break;
    case 34: // $193
      var $194=$c;
      var $195=((($194)+1)|0);
      $c=$195;
      __label__ = 32; break;
    case 35: // $196
      __label__ = 41; break;
    case 36: // $197
      $c=0;
      __label__ = 37; break;
    case 37: // $198
      var $199=$c;
      var $200=HEAP32[((_colors)>>2)];
      var $201=((($199))|0) < ((($200))|0);
      if ($201) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: // $202
      var $203=$c;
      var $204=$soff;
      var $205=HEAP32[((_image)>>2)];
      var $206=(($205+($204<<3))|0);
      var $207=(($206+($203<<1))|0);
      var $208=HEAPU16[(($207)>>1)];
      var $209=((($208))&65535);
      var $210=((_curve+($209<<1))|0);
      var $211=HEAP16[(($210)>>1)];
      var $212=$col;
      var $213=HEAP32[((_colors)>>2)];
      var $214=((($212)*($213))|0);
      var $215=$c;
      var $216=((($214)+($215))|0);
      var $217=$ppm2;
      var $218=(($217+($216<<1))|0);
      HEAP16[(($218)>>1)]=$211;
      __label__ = 39; break;
    case 39: // $219
      var $220=$c;
      var $221=((($220)+1)|0);
      $c=$221;
      __label__ = 37; break;
    case 40: // $222
      __label__ = 41; break;
    case 41: // $223
      __label__ = 42; break;
    case 42: // $224
      var $225=$col;
      var $226=((($225)+1)|0);
      $col=$226;
      var $227=$cstep;
      var $228=$soff;
      var $229=((($228)+($227))|0);
      $soff=$229;
      __label__ = 29; break;
    case 43: // $230
      var $231=HEAP32[((_output_bps)>>2)];
      var $232=((($231))|0)==16;
      if ($232) { __label__ = 44; break; } else { __label__ = 47; break; }
    case 44: // $233
      var $234=HEAP32[((_output_tiff)>>2)];
      var $235=((($234))|0)!=0;
      if ($235) { __label__ = 47; break; } else { __label__ = 45; break; }
    case 45: // $236
      var $237=_htons(21930);
      var $238=((($237))|0)!=21930;
      if ($238) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: // $239
      var $240=$ppm2;
      var $241=$240;
      var $242=$ppm2;
      var $243=$242;
      var $244=HEAPU16[((_width)>>1)];
      var $245=((($244))&65535);
      var $246=HEAP32[((_colors)>>2)];
      var $247=((($245)*($246))|0);
      var $248=(((($247)<<1))|0);
      _swab($241, $243, $248);
      __label__ = 47; break;
    case 47: // $249
      var $250=$ppm;
      var $251=HEAP32[((_colors)>>2)];
      var $252=HEAP32[((_output_bps)>>2)];
      var $253=((($251)*($252))|0);
      var $254=((((($253))|0)/8)|0);
      var $255=HEAPU16[((_width)>>1)];
      var $256=((($255))&65535);
      var $257=HEAP32[((_ofp)>>2)];
      var $258=_fwrite($250, $254, $256, $257);
      __label__ = 48; break;
    case 48: // $259
      var $260=$row;
      var $261=((($260)+1)|0);
      $row=$261;
      var $262=$rstep;
      var $263=$soff;
      var $264=((($263)+($262))|0);
      $soff=$264;
      __label__ = 27; break;
    case 49: // $265
      var $266=$ppm;
      _free($266);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_write_ppm_tiff["X"]=1;
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*
// Warning: Casting a function pointer type to another with a different number of arguments. See more info in the source (grep for this text). void ()* ==> void (...)*

function _main($argc, $argv) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $arg;
      var $status;
      var $timestamp_only;
      var $thumbnail_only;
      var $identify_only;
      var $user_qual;
      var $user_black;
      var $user_sat;
      var $user_flip;
      var $use_fuji_rotate;
      var $write_to_stdout;
      var $quality;
      var $i;
      var $c;
      var $sp;
      var $bpfile;
      var $dark_frame;
      var $write_ext;
      var $opm;
      var $opt;
      var $ofname;
      var $cp;
      var $ut=__stackBase__;
      $1=0;
      $2=$argc;
      $3=$argv;
      $status=0;
      $timestamp_only=0;
      $thumbnail_only=0;
      $identify_only=0;
      $user_qual=-1;
      $user_black=-1;
      $user_sat=-1;
      $user_flip=-1;
      $use_fuji_rotate=1;
      $write_to_stdout=0;
      $bpfile=0;
      $dark_frame=0;
      var $4=_putenv(((__str771)|0));
      var $5=$2;
      var $6=((($5))|0)==1;
      if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
    case 1: // $7
      var $8=_printf(((__str772)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((__str773)|0),tempInt));
      var $9=_printf(((__str774)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=$3;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_printf(((__str775)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,tempInt));
      var $14=_puts(((__str776)|0));
      var $15=_puts(((__str777)|0));
      var $16=_puts(((__str778)|0));
      var $17=_puts(((__str779)|0));
      var $18=_puts(((__str780)|0));
      var $19=_puts(((__str781)|0));
      var $20=_puts(((__str782)|0));
      var $21=_puts(((__str783)|0));
      var $22=_puts(((__str784)|0));
      var $23=_puts(((__str785)|0));
      var $24=_puts(((__str786)|0));
      var $25=_puts(((__str787)|0));
      var $26=_puts(((__str788)|0));
      var $27=_puts(((__str789)|0));
      var $28=_puts(((__str790)|0));
      var $29=_puts(((__str791)|0));
      var $30=_puts(((__str792)|0));
      var $31=_puts(((__str793)|0));
      var $32=_puts(((__str794)|0));
      var $33=_puts(((__str795)|0));
      var $34=_puts(((__str796)|0));
      var $35=_puts(((__str797)|0));
      var $36=_puts(((__str798)|0));
      var $37=_puts(((__str799)|0));
      var $38=_puts(((__str800)|0));
      var $39=_puts(((__str801)|0));
      var $40=_puts(((__str802)|0));
      var $41=_puts(((__str803)|0));
      var $42=_puts(((__str804)|0));
      var $43=_puts(((__str805)|0));
      var $44=_puts(((__str806)|0));
      var $45=_puts(((__str807)|0));
      var $46=_puts(((__str808)|0));
      var $47=_puts(((__str809)|0));
      var $48=_puts(((__str117)|0));
      $1=1;
      __label__ = 277; break;
    case 2: // $49
      var $50=$2;
      var $51=$3;
      var $52=(($51+($50<<2))|0);
      HEAP32[(($52)>>2)]=((__str117)|0);
      $arg=1;
      __label__ = 3; break;
    case 3: // $53
      var $54=$arg;
      var $55=$3;
      var $56=(($55+($54<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0);
      var $59=HEAP8[($58)];
      $opm=$59;
      var $60=((($59) << 24) >> 24);
      var $61=((($60)-2)|0);
      var $62=($61) | 2;
      var $63=((($62))|0)==43;
      if ($63) { __label__ = 4; break; } else { __label__ = 60; break; }
    case 4: // $64
      var $65=$arg;
      var $66=((($65)+1)|0);
      $arg=$66;
      var $67=$3;
      var $68=(($67+($65<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+1)|0);
      var $71=HEAP8[($70)];
      $opt=$71;
      $sp=((__str810)|0);
      var $72=$opt;
      var $73=((($72) << 24) >> 24);
      var $74=_strchr(((__str810)|0), $73);
      $cp=$74;
      var $75=((($74))|0)!=0;
      if ($75) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: // $76
      $i=0;
      __label__ = 6; break;
    case 6: // $77
      var $78=$i;
      var $79=$cp;
      var $80=$sp;
      var $81=($79);
      var $82=($80);
      var $83=((($81)-($82))|0);
      var $84=((__str811+$83)|0);
      var $85=HEAP8[($84)];
      var $86=((($85) << 24) >> 24);
      var $87=((($86)-48)|0);
      var $88=((($78))|0) < ((($87))|0);
      if ($88) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: // $89
      var $90=$arg;
      var $91=$i;
      var $92=((($90)+($91))|0);
      var $93=$3;
      var $94=(($93+($92<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|0);
      var $97=HEAP8[($96)];
      var $98=((($97) << 24) >> 24);
      var $99=_isdigit($98);
      var $100=((($99))|0)!=0;
      if ($100) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: // $101
      var $102=HEAP32[((__impure_ptr)>>2)];
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$opt;
      var $106=((($105) << 24) >> 24);
      var $107=_fprintf($104, ((__str812)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$106,tempInt));
      $1=1;
      __label__ = 277; break;
    case 9: // $108
      __label__ = 10; break;
    case 10: // $109
      var $110=$i;
      var $111=((($110)+1)|0);
      $i=$111;
      __label__ = 6; break;
    case 11: // $112
      __label__ = 12; break;
    case 12: // $113
      var $114=$opt;
      var $115=((($114) << 24) >> 24);
      if ($115 == 110) {
        __label__ = 13; break;
      }
      else if ($115 == 98) {
        __label__ = 14; break;
      }
      else if ($115 == 114) {
        __label__ = 15; break;
      }
      else if ($115 == 67) {
        __label__ = 20; break;
      }
      else if ($115 == 103) {
        __label__ = 21; break;
      }
      else if ($115 == 107) {
        __label__ = 24; break;
      }
      else if ($115 == 83) {
        __label__ = 25; break;
      }
      else if ($115 == 116) {
        __label__ = 26; break;
      }
      else if ($115 == 113) {
        __label__ = 27; break;
      }
      else if ($115 == 109) {
        __label__ = 28; break;
      }
      else if ($115 == 72) {
        __label__ = 29; break;
      }
      else if ($115 == 115) {
        __label__ = 30; break;
      }
      else if ($115 == 111) {
        __label__ = 31; break;
      }
      else if ($115 == 80) {
        __label__ = 35; break;
      }
      else if ($115 == 75) {
        __label__ = 36; break;
      }
      else if ($115 == 122) {
        __label__ = 37; break;
      }
      else if ($115 == 101) {
        __label__ = 38; break;
      }
      else if ($115 == 105) {
        __label__ = 39; break;
      }
      else if ($115 == 99) {
        __label__ = 40; break;
      }
      else if ($115 == 118) {
        __label__ = 41; break;
      }
      else if ($115 == 104) {
        __label__ = 42; break;
      }
      else if ($115 == 102) {
        __label__ = 43; break;
      }
      else if ($115 == 65) {
        __label__ = 44; break;
      }
      else if ($115 == 97) {
        __label__ = 49; break;
      }
      else if ($115 == 119) {
        __label__ = 50; break;
      }
      else if ($115 == 77) {
        __label__ = 51; break;
      }
      else if ($115 == 68 || $115 == 100) {
        __label__ = 52; break;
      }
      else if ($115 == 106) {
        __label__ = 53; break;
      }
      else if ($115 == 87) {
        __label__ = 54; break;
      }
      else if ($115 == 84) {
        __label__ = 55; break;
      }
      else if ($115 == 52) {
        __label__ = 56; break;
      }
      else if ($115 == 54) {
        __label__ = 57; break;
      }
      else {
      __label__ = 58; break;
      }
      
    case 13: // $116
      var $117=$arg;
      var $118=((($117)+1)|0);
      $arg=$118;
      var $119=$3;
      var $120=(($119+($117<<2))|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=_atof($121);
      var $123=($122);
      HEAPF32[((_threshold)>>2)]=$123;
      __label__ = 59; break;
    case 14: // $124
      var $125=$arg;
      var $126=((($125)+1)|0);
      $arg=$126;
      var $127=$3;
      var $128=(($127+($125<<2))|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=_atof($129);
      var $131=($130);
      HEAPF32[((_bright)>>2)]=$131;
      __label__ = 59; break;
    case 15: // $132
      $c=0;
      __label__ = 16; break;
    case 16: // $133
      var $134=$c;
      var $135=((($134))|0) < 4;
      if ($135) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: // $136
      var $137=$arg;
      var $138=((($137)+1)|0);
      $arg=$138;
      var $139=$3;
      var $140=(($139+($137<<2))|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=_atof($141);
      var $143=($142);
      var $144=$c;
      var $145=((_user_mul+($144<<2))|0);
      HEAPF32[(($145)>>2)]=$143;
      __label__ = 18; break;
    case 18: // $146
      var $147=$c;
      var $148=((($147)+1)|0);
      $c=$148;
      __label__ = 16; break;
    case 19: // $149
      __label__ = 59; break;
    case 20: // $150
      var $151=$arg;
      var $152=((($151)+1)|0);
      $arg=$152;
      var $153=$3;
      var $154=(($153+($151<<2))|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=_atof($155);
      var $157=1/($156);
      (tempDoubleF64[0]=$157,HEAP32[((((_aber)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_aber)|0)+4)>>2)]=tempDoubleI32[1]);
      var $158=$arg;
      var $159=((($158)+1)|0);
      $arg=$159;
      var $160=$3;
      var $161=(($160+($158<<2))|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=_atof($162);
      var $164=1/($163);
      (tempDoubleF64[0]=$164,HEAP32[((((_aber+16)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_aber+16)|0)+4)>>2)]=tempDoubleI32[1]);
      __label__ = 59; break;
    case 21: // $165
      var $166=$arg;
      var $167=((($166)+1)|0);
      $arg=$167;
      var $168=$3;
      var $169=(($168+($166<<2))|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=_atof($170);
      (tempDoubleF64[0]=$171,HEAP32[((((_gamm)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_gamm)|0)+4)>>2)]=tempDoubleI32[1]);
      var $172=$arg;
      var $173=((($172)+1)|0);
      $arg=$173;
      var $174=$3;
      var $175=(($174+($172<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=_atof($176);
      (tempDoubleF64[0]=$177,HEAP32[((((_gamm+8)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_gamm+8)|0)+4)>>2)]=tempDoubleI32[1]);
      var $178=(tempDoubleI32[0]=HEAPU32[((((_gamm)|0))>>2)],tempDoubleI32[1]=HEAPU32[((((_gamm)|0)+4)>>2)],tempDoubleF64[0]);
      var $179=($178) != 0;
      if ($179) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: // $180
      var $181=(tempDoubleI32[0]=HEAP32[((((_gamm)|0))>>2)],tempDoubleI32[1]=HEAP32[((((_gamm)|0)+4)>>2)],tempDoubleF64[0]);
      var $182=1/($181);
      (tempDoubleF64[0]=$182,HEAP32[((((_gamm)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_gamm)|0)+4)>>2)]=tempDoubleI32[1]);
      __label__ = 23; break;
    case 23: // $183
      __label__ = 59; break;
    case 24: // $184
      var $185=$arg;
      var $186=((($185)+1)|0);
      $arg=$186;
      var $187=$3;
      var $188=(($187+($185<<2))|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=_atoi($189);
      $user_black=$190;
      __label__ = 59; break;
    case 25: // $191
      var $192=$arg;
      var $193=((($192)+1)|0);
      $arg=$193;
      var $194=$3;
      var $195=(($194+($192<<2))|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=_atoi($196);
      $user_sat=$197;
      __label__ = 59; break;
    case 26: // $198
      var $199=$arg;
      var $200=((($199)+1)|0);
      $arg=$200;
      var $201=$3;
      var $202=(($201+($199<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=_atoi($203);
      $user_flip=$204;
      __label__ = 59; break;
    case 27: // $205
      var $206=$arg;
      var $207=((($206)+1)|0);
      $arg=$207;
      var $208=$3;
      var $209=(($208+($206<<2))|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=_atoi($210);
      $user_qual=$211;
      __label__ = 59; break;
    case 28: // $212
      var $213=$arg;
      var $214=((($213)+1)|0);
      $arg=$214;
      var $215=$3;
      var $216=(($215+($213<<2))|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=_atoi($217);
      HEAP32[((_med_passes)>>2)]=$218;
      __label__ = 59; break;
    case 29: // $219
      var $220=$arg;
      var $221=((($220)+1)|0);
      $arg=$221;
      var $222=$3;
      var $223=(($222+($220<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=_atoi($224);
      HEAP32[((_highlight)>>2)]=$225;
      __label__ = 59; break;
    case 30: // $226
      var $227=$arg;
      var $228=$3;
      var $229=(($228+($227<<2))|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=_atoi($230);
      var $232=_abs($231);
      HEAP32[((_shot_select)>>2)]=$232;
      var $233=$arg;
      var $234=((($233)+1)|0);
      $arg=$234;
      var $235=$3;
      var $236=(($235+($233<<2))|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=_strcmp($237, ((__str813)|0));
      var $239=((($238))|0)!=0;
      var $240=($239) ^ 1;
      var $241=((($240))&1);
      HEAP32[((_multi_out)>>2)]=$241;
      __label__ = 59; break;
    case 31: // $242
      var $243=$arg;
      var $244=$3;
      var $245=(($244+($243<<2))|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=(($246)|0);
      var $248=HEAP8[($247)];
      var $249=((($248) << 24) >> 24);
      var $250=_isdigit($249);
      var $251=((($250))|0)!=0;
      if ($251) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: // $252
      var $253=$arg;
      var $254=$3;
      var $255=(($254+($253<<2))|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+1)|0);
      var $258=HEAP8[($257)];
      var $259=((($258) << 24) >> 24)!=0;
      if ($259) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: // $260
      var $261=$arg;
      var $262=((($261)+1)|0);
      $arg=$262;
      var $263=$3;
      var $264=(($263+($261<<2))|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=_atoi($265);
      HEAP32[((_output_color)>>2)]=$266;
      __label__ = 34; break;
    case 34: // $267
      __label__ = 59; break;
    case 35: // $268
      var $269=$arg;
      var $270=((($269)+1)|0);
      $arg=$270;
      var $271=$3;
      var $272=(($271+($269<<2))|0);
      var $273=HEAP32[(($272)>>2)];
      $bpfile=$273;
      __label__ = 59; break;
    case 36: // $274
      var $275=$arg;
      var $276=((($275)+1)|0);
      $arg=$276;
      var $277=$3;
      var $278=(($277+($275<<2))|0);
      var $279=HEAP32[(($278)>>2)];
      $dark_frame=$279;
      __label__ = 59; break;
    case 37: // $280
      $timestamp_only=1;
      __label__ = 59; break;
    case 38: // $281
      $thumbnail_only=1;
      __label__ = 59; break;
    case 39: // $282
      $identify_only=1;
      __label__ = 59; break;
    case 40: // $283
      $write_to_stdout=1;
      __label__ = 59; break;
    case 41: // $284
      HEAP32[((_verbose)>>2)]=1;
      __label__ = 59; break;
    case 42: // $285
      HEAP32[((_half_size)>>2)]=1;
      __label__ = 43; break;
    case 43: // $286
      HEAP32[((_four_color_rgb)>>2)]=1;
      __label__ = 59; break;
    case 44: // $287
      $c=0;
      __label__ = 45; break;
    case 45: // $288
      var $289=$c;
      var $290=((($289))|0) < 4;
      if ($290) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 46: // $291
      var $292=$arg;
      var $293=((($292)+1)|0);
      $arg=$293;
      var $294=$3;
      var $295=(($294+($292<<2))|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=_atoi($296);
      var $298=$c;
      var $299=((_greybox+($298<<2))|0);
      HEAP32[(($299)>>2)]=$297;
      __label__ = 47; break;
    case 47: // $300
      var $301=$c;
      var $302=((($301)+1)|0);
      $c=$302;
      __label__ = 45; break;
    case 48: // $303
      __label__ = 49; break;
    case 49: // $304
      HEAP32[((_use_auto_wb)>>2)]=1;
      __label__ = 59; break;
    case 50: // $305
      HEAP32[((_use_camera_wb)>>2)]=1;
      __label__ = 59; break;
    case 51: // $306
      var $307=$opm;
      var $308=((($307) << 24) >> 24);
      var $309=((($308))|0)==43;
      var $310=((($309))&1);
      HEAP32[((_use_camera_matrix)>>2)]=$310;
      __label__ = 59; break;
    case 52: // $311
      var $312=$opt;
      var $313=((($312) << 24) >> 24);
      var $314=((($313))|0)==68;
      var $315=((($314))&1);
      var $316=((($315)+1)|0);
      HEAP32[((_document_mode)>>2)]=$316;
      __label__ = 53; break;
    case 53: // $317
      $use_fuji_rotate=0;
      __label__ = 59; break;
    case 54: // $318
      HEAP32[((_no_auto_bright)>>2)]=1;
      __label__ = 59; break;
    case 55: // $319
      HEAP32[((_output_tiff)>>2)]=1;
      __label__ = 59; break;
    case 56: // $320
      HEAP32[((_no_auto_bright)>>2)]=1;
      (tempDoubleF64[0]=1,HEAP32[((((_gamm+8)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_gamm+8)|0)+4)>>2)]=tempDoubleI32[1]);
      (tempDoubleF64[0]=1,HEAP32[((((_gamm)|0))>>2)]=tempDoubleI32[0],HEAP32[((((_gamm)|0)+4)>>2)]=tempDoubleI32[1]);
      __label__ = 57; break;
    case 57: // $321
      HEAP32[((_output_bps)>>2)]=16;
      __label__ = 59; break;
    case 58: // $322
      var $323=HEAP32[((__impure_ptr)>>2)];
      var $324=(($323+12)|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=$opt;
      var $327=((($326) << 24) >> 24);
      var $328=_fprintf($325, ((__str814)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$327,tempInt));
      $1=1;
      __label__ = 277; break;
    case 59: // $329
      __label__ = 3; break;
    case 60: // $330
      var $331=HEAP32[((_use_camera_matrix)>>2)];
      var $332=((($331))|0) < 0;
      if ($332) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: // $333
      var $334=HEAP32[((_use_camera_wb)>>2)];
      HEAP32[((_use_camera_matrix)>>2)]=$334;
      __label__ = 62; break;
    case 62: // $335
      var $336=$arg;
      var $337=$2;
      var $338=((($336))|0)==((($337))|0);
      if ($338) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: // $339
      var $340=HEAP32[((__impure_ptr)>>2)];
      var $341=(($340+12)|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=_fprintf($342, ((__str815)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 277; break;
    case 64: // $344
      var $345=$write_to_stdout;
      var $346=((($345))|0)!=0;
      if ($346) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: // $347
      var $348=_isatty(1);
      var $349=((($348))|0)!=0;
      if ($349) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $350
      var $351=HEAP32[((__impure_ptr)>>2)];
      var $352=(($351+12)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=_fprintf($353, ((__str816)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=1;
      __label__ = 277; break;
    case 67: // $355
      __label__ = 68; break;
    case 68: // $356
      __label__ = 69; break;
    case 69: // $357
      var $358=$arg;
      var $359=$2;
      var $360=((($358))|0) < ((($359))|0);
      if ($360) { __label__ = 70; break; } else { __label__ = 276; break; }
    case 70: // $361
      $status=1;
      HEAP32[((_image)>>2)]=0;
      HEAP32[((_oprof)>>2)]=0;
      $ofname=0;
      HEAP32[((_meta_data)>>2)]=0;
      var $362=HEAP32[((__impure_ptr)>>2)];
      var $363=(($362+8)|0);
      var $364=HEAP32[(($363)>>2)];
      HEAP32[((_ofp)>>2)]=$364;
      var $365=_setjmp(((_failure)|0));
      var $366=((($365))|0)!=0;
      if ($366) { __label__ = 71; break; } else { __label__ = 76; break; }
    case 71: // $367
      var $368=HEAP32[((_ifp)>>2)];
      var $369=_fileno($368);
      var $370=((($369))|0) > 2;
      if ($370) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: // $371
      var $372=HEAP32[((_ifp)>>2)];
      var $373=_fclose($372);
      __label__ = 73; break;
    case 73: // $374
      var $375=HEAP32[((_ofp)>>2)];
      var $376=_fileno($375);
      var $377=((($376))|0) > 2;
      if ($377) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: // $378
      var $379=HEAP32[((_ofp)>>2)];
      var $380=_fclose($379);
      __label__ = 75; break;
    case 75: // $381
      $status=1;
      __label__ = 261; break;
    case 76: // $382
      var $383=$arg;
      var $384=$3;
      var $385=(($384+($383<<2))|0);
      var $386=HEAP32[(($385)>>2)];
      HEAP32[((_ifname)>>2)]=$386;
      var $387=HEAP32[((_ifname)>>2)];
      var $388=_fopen($387, ((__str63)|0));
      HEAP32[((_ifp)>>2)]=$388;
      var $389=((($388))|0)!=0;
      if ($389) { __label__ = 78; break; } else { __label__ = 77; break; }
    case 77: // $390
      var $391=HEAP32[((_ifname)>>2)];
      _perror($391);
      __label__ = 275; break;
    case 78: // $392
      _identify();
      var $393=HEAP32[((_is_raw)>>2)];
      var $394=((($393))|0)!=0;
      var $395=($394) ^ 1;
      var $396=((($395))&1);
      $status=$396;
      var $397=$user_flip;
      var $398=((($397))|0) >= 0;
      if ($398) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: // $399
      var $400=$user_flip;
      HEAP32[((_flip)>>2)]=$400;
      __label__ = 80; break;
    case 80: // $401
      var $402=HEAP32[((_flip)>>2)];
      var $403=((($402)+3600)|0);
      var $404=((($403))|0)%360;
      if ($404 == 270) {
        __label__ = 81; break;
      }
      else if ($404 == 180) {
        __label__ = 82; break;
      }
      else if ($404 == 90) {
        __label__ = 83; break;
      }
      else {
      __label__ = 84; break;
      }
      
    case 81: // $405
      HEAP32[((_flip)>>2)]=5;
      __label__ = 84; break;
    case 82: // $406
      HEAP32[((_flip)>>2)]=3;
      __label__ = 84; break;
    case 83: // $407
      HEAP32[((_flip)>>2)]=6;
      __label__ = 84; break;
    case 84: // $408
      var $409=$timestamp_only;
      var $410=((($409))|0)!=0;
      if ($410) { __label__ = 85; break; } else { __label__ = 94; break; }
    case 85: // $411
      var $412=HEAP32[((_timestamp)>>2)];
      var $413=((($412))|0)!=0;
      var $414=($413) ^ 1;
      var $415=((($414))&1);
      $status=$415;
      if ($414) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: // $416
      var $417=HEAP32[((__impure_ptr)>>2)];
      var $418=(($417+12)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=HEAP32[((_ifname)>>2)];
      var $421=_fprintf($419, ((__str817)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$420,tempInt));
      __label__ = 93; break;
    case 87: // $422
      var $423=$identify_only;
      var $424=((($423))|0)!=0;
      if ($424) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: // $425
      var $426=HEAP32[((_timestamp)>>2)];
      var $427=HEAP32[((_shot_order)>>2)];
      var $428=HEAP32[((_ifname)>>2)];
      var $429=_printf(((__str818)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$426,HEAP32[((tempInt+4)>>2)]=$427,HEAP32[((tempInt+8)>>2)]=$428,tempInt));
      __label__ = 92; break;
    case 89: // $430
      var $431=HEAP32[((_verbose)>>2)];
      var $432=((($431))|0)!=0;
      if ($432) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: // $433
      var $434=HEAP32[((__impure_ptr)>>2)];
      var $435=(($434+12)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=HEAP32[((_ifname)>>2)];
      var $438=HEAP32[((_timestamp)>>2)];
      var $439=_fprintf($436, ((__str819)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$437,HEAP32[((tempInt+4)>>2)]=$438,tempInt));
      __label__ = 91; break;
    case 91: // $440
      var $441=HEAP32[((_timestamp)>>2)];
      var $442=(($ut+4)|0);
      HEAP32[(($442)>>2)]=$441;
      var $443=(($ut)|0);
      HEAP32[(($443)>>2)]=$441;
      var $444=HEAP32[((_ifname)>>2)];
      var $445=_utime($444, $ut);
      __label__ = 92; break;
    case 92: // $446
      __label__ = 93; break;
    case 93: // $447
      __label__ = 169; break;
    case 94: // $448
      HEAP32[((_write_fun)>>2)]=92;
      var $449=$thumbnail_only;
      var $450=((($449))|0)!=0;
      if ($450) { __label__ = 95; break; } else { __label__ = 102; break; }
    case 95: // $451
      var $452=HEAP32[((_thumb_offset)>>2)];
      var $453=((($452))|0)!=0;
      var $454=($453) ^ 1;
      var $455=((($454))&1);
      $status=$455;
      if ($454) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: // $456
      var $457=HEAP32[((__impure_ptr)>>2)];
      var $458=(($457+12)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=HEAP32[((_ifname)>>2)];
      var $461=_fprintf($459, ((__str820)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$460,tempInt));
      __label__ = 169; break;
    case 97: // $462
      var $463=HEAP32[((_thumb_load_raw)>>2)];
      var $464=((($463))|0)!=0;
      if ($464) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: // $465
      var $466=HEAP32[((_thumb_load_raw)>>2)];
      HEAP32[((_load_raw)>>2)]=$466;
      var $467=HEAP32[((_thumb_offset)>>2)];
      HEAP32[((_data_offset)>>2)]=$467;
      var $468=HEAP16[((_thumb_height)>>1)];
      HEAP16[((_height)>>1)]=$468;
      var $469=HEAP16[((_thumb_width)>>1)];
      HEAP16[((_width)>>1)]=$469;
      HEAP32[((_filters)>>2)]=0;
      __label__ = 100; break;
    case 99: // $470
      var $471=HEAP32[((_ifp)>>2)];
      var $472=HEAP32[((_thumb_offset)>>2)];
      var $473=_fseek($471, $472, 0);
      var $474=HEAP32[((_write_thumb)>>2)];
      HEAP32[((_write_fun)>>2)]=$474;
      __label__ = 238; break;
    case 100: // $475
      __label__ = 101; break;
    case 101: // $476
      __label__ = 102; break;
    case 102: // $477
      var $478=HEAP32[((_load_raw)>>2)];
      var $479=((($478))|0)==30;
      if ($479) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: // $480
      var $481=HEAPU16[((_height)>>1)];
      var $482=((($481))&65535);
      var $483=($482) & 1;
      var $484=HEAPU16[((_height)>>1)];
      var $485=((($484))&65535);
      var $486=((($485)+($483))|0);
      var $487=((($486)) & 65535);
      HEAP16[((_height)>>1)]=$487;
      var $488=HEAPU16[((_width)>>1)];
      var $489=((($488))&65535);
      var $490=($489) & 1;
      var $491=HEAPU16[((_width)>>1)];
      var $492=((($491))&65535);
      var $493=((($492)+($490))|0);
      var $494=((($493)) & 65535);
      HEAP16[((_width)>>1)]=$494;
      __label__ = 104; break;
    case 104: // $495
      var $496=$identify_only;
      var $497=((($496))|0)!=0;
      if ($497) { __label__ = 105; break; } else { __label__ = 123; break; }
    case 105: // $498
      var $499=HEAP32[((_verbose)>>2)];
      var $500=((($499))|0)!=0;
      if ($500) { __label__ = 106; break; } else { __label__ = 123; break; }
    case 106: // $501
      var $502=HEAP8[(((_make)|0))];
      var $503=((($502) << 24) >> 24);
      var $504=((($503))|0)!=0;
      if ($504) { __label__ = 107; break; } else { __label__ = 123; break; }
    case 107: // $505
      var $506=HEAP32[((_ifname)>>2)];
      var $507=_printf(((__str821)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$506,tempInt));
      var $508=_ctime(_timestamp);
      var $509=_printf(((__str822)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$508,tempInt));
      var $510=_printf(((__str823)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_make)|0),HEAP32[((tempInt+4)>>2)]=((_model)|0),tempInt));
      var $511=HEAP8[(((_artist)|0))];
      var $512=((($511) << 24) >> 24)!=0;
      if ($512) { __label__ = 108; break; } else { __label__ = 109; break; }
    case 108: // $513
      var $514=_printf(((__str824)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_artist)|0),tempInt));
      __label__ = 109; break;
    case 109: // $515
      var $516=HEAP32[((_dng_version)>>2)];
      var $517=((($516))|0)!=0;
      if ($517) { __label__ = 110; break; } else { __label__ = 115; break; }
    case 110: // $518
      var $519=_printf(((__str825)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=24;
      __label__ = 111; break;
    case 111: // $520
      var $521=$i;
      var $522=((($521))|0) >= 0;
      if ($522) { __label__ = 112; break; } else { __label__ = 114; break; }
    case 112: // $523
      var $524=HEAPU32[((_dng_version)>>2)];
      var $525=$i;
      var $526=($524) >>> ((($525))>>>0);
      var $527=($526) & 255;
      var $528=$i;
      var $529=((($528))|0)!=0;
      var $530=($529) ? 46 : 10;
      var $531=_printf(((__str826)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$527,HEAP32[((tempInt+4)>>2)]=$530,tempInt));
      __label__ = 113; break;
    case 113: // $532
      var $533=$i;
      var $534=((($533)-8)|0);
      $i=$534;
      __label__ = 111; break;
    case 114: // $535
      __label__ = 115; break;
    case 115: // $536
      var $537=HEAPF32[((_iso_speed)>>2)];
      var $538=((($537))|0);
      var $539=_printf(((__str827)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$538,tempInt));
      var $540=_printf(((__str828)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $541=HEAPF32[((_shutter)>>2)];
      var $542=($541) > 0;
      if ($542) { __label__ = 116; break; } else { __label__ = 118; break; }
    case 116: // $543
      var $544=HEAPF32[((_shutter)>>2)];
      var $545=($544) < 1;
      if ($545) { __label__ = 117; break; } else { __label__ = 118; break; }
    case 117: // $546
      var $547=_printf(((__str829)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $548=HEAPF32[((_shutter)>>2)];
      var $549=1/($548);
      HEAPF32[((_shutter)>>2)]=$549;
      __label__ = 118; break;
    case 118: // $550
      var $551=HEAPF32[((_shutter)>>2)];
      var $552=($551);
      var $553=_printf(((__str830)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$552,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $554=HEAPF32[((_aperture)>>2)];
      var $555=($554);
      var $556=_printf(((__str831)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$555,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $557=HEAPF32[((_focal_len)>>2)];
      var $558=($557);
      var $559=_printf(((__str832)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$558,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $560=HEAP32[((_profile_length)>>2)];
      var $561=((($560))|0)!=0;
      var $562=($561) ? (((__str834)|0)) : (((__str835)|0));
      var $563=_printf(((__str833)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$562,tempInt));
      var $564=HEAP32[((_is_raw)>>2)];
      var $565=_printf(((__str836)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$564,tempInt));
      var $566=(tempDoubleI32[0]=HEAPU32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAPU32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $567=($566) != 1;
      if ($567) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: // $568
      var $569=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $570=_printf(((__str837)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$569,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 120; break;
    case 120: // $571
      var $572=HEAP32[((_thumb_offset)>>2)];
      var $573=((($572))|0)!=0;
      if ($573) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: // $574
      var $575=HEAPU16[((_thumb_width)>>1)];
      var $576=((($575))&65535);
      var $577=HEAPU16[((_thumb_height)>>1)];
      var $578=((($577))&65535);
      var $579=_printf(((__str838)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$576,HEAP32[((tempInt+4)>>2)]=$578,tempInt));
      __label__ = 122; break;
    case 122: // $580
      var $581=HEAPU16[((_raw_width)>>1)];
      var $582=((($581))&65535);
      var $583=HEAPU16[((_raw_height)>>1)];
      var $584=((($583))&65535);
      var $585=_printf(((__str839)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$582,HEAP32[((tempInt+4)>>2)]=$584,tempInt));
      __label__ = 126; break;
    case 123: // $586
      var $587=HEAP32[((_is_raw)>>2)];
      var $588=((($587))|0)!=0;
      if ($588) { __label__ = 125; break; } else { __label__ = 124; break; }
    case 124: // $589
      var $590=HEAP32[((__impure_ptr)>>2)];
      var $591=(($590+12)|0);
      var $592=HEAP32[(($591)>>2)];
      var $593=HEAP32[((_ifname)>>2)];
      var $594=_fprintf($592, ((__str840)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$593,tempInt));
      __label__ = 125; break;
    case 125: // $595
      __label__ = 126; break;
    case 126: // $596
      var $597=HEAP32[((_is_raw)>>2)];
      var $598=((($597))|0)!=0;
      if ($598) { __label__ = 128; break; } else { __label__ = 127; break; }
    case 127: // $599
      __label__ = 169; break;
    case 128: // $600
      var $601=HEAP32[((_filters)>>2)];
      var $602=((($601))|0)!=0;
      if ($602) { __label__ = 129; break; } else { var $625 = 0;__label__ = 137; break; }
    case 129: // $603
      var $604=HEAP32[((_half_size)>>2)];
      var $605=((($604))|0)!=0;
      if ($605) { var $623 = 1;__label__ = 136; break; } else { __label__ = 130; break; }
    case 130: // $606
      var $607=$identify_only;
      var $608=((($607))|0)!=0;
      if ($608) { var $621 = 0;__label__ = 135; break; } else { __label__ = 131; break; }
    case 131: // $609
      var $610=HEAPF32[((_threshold)>>2)];
      var $611=($610) != 0;
      if ($611) { var $619 = 1;__label__ = 134; break; } else { __label__ = 132; break; }
    case 132: // $612
      var $613=(tempDoubleI32[0]=HEAPU32[((((_aber)|0))>>2)],tempDoubleI32[1]=HEAPU32[((((_aber)|0)+4)>>2)],tempDoubleF64[0]);
      var $614=($613) != 1;
      if ($614) { var $619 = 1;__label__ = 134; break; } else { __label__ = 133; break; }
    case 133: // $615
      var $616=(tempDoubleI32[0]=HEAPU32[((((_aber+16)|0))>>2)],tempDoubleI32[1]=HEAPU32[((((_aber+16)|0)+4)>>2)],tempDoubleF64[0]);
      var $617=($616) != 1;
      var $619 = $617;__label__ = 134; break;
    case 134: // $618
      var $619;
      var $621 = $619;__label__ = 135; break;
    case 135: // $620
      var $621;
      var $623 = $621;__label__ = 136; break;
    case 136: // $622
      var $623;
      var $625 = $623;__label__ = 137; break;
    case 137: // $624
      var $625;
      var $626=((($625))&1);
      var $627=((($626)) & 65535);
      HEAP16[((_shrink)>>1)]=$627;
      var $628=HEAPU16[((_height)>>1)];
      var $629=((($628))&65535);
      var $630=HEAPU16[((_shrink)>>1)];
      var $631=((($630))&65535);
      var $632=((($629)+($631))|0);
      var $633=HEAPU16[((_shrink)>>1)];
      var $634=((($633))&65535);
      var $635=($632) >> ((($634))|0);
      var $636=((($635)) & 65535);
      HEAP16[((_iheight)>>1)]=$636;
      var $637=HEAPU16[((_width)>>1)];
      var $638=((($637))&65535);
      var $639=HEAPU16[((_shrink)>>1)];
      var $640=((($639))&65535);
      var $641=((($638)+($640))|0);
      var $642=HEAPU16[((_shrink)>>1)];
      var $643=((($642))&65535);
      var $644=($641) >> ((($643))|0);
      var $645=((($644)) & 65535);
      HEAP16[((_iwidth)>>1)]=$645;
      var $646=$identify_only;
      var $647=((($646))|0)!=0;
      if ($647) { __label__ = 138; break; } else { __label__ = 170; break; }
    case 138: // $648
      var $649=HEAP32[((_verbose)>>2)];
      var $650=((($649))|0)!=0;
      if ($650) { __label__ = 139; break; } else { __label__ = 167; break; }
    case 139: // $651
      var $652=$use_fuji_rotate;
      var $653=((($652))|0)!=0;
      if ($653) { __label__ = 140; break; } else { __label__ = 148; break; }
    case 140: // $654
      var $655=HEAP16[((_fuji_width)>>1)];
      var $656=((($655) << 16) >> 16)!=0;
      if ($656) { __label__ = 141; break; } else { __label__ = 142; break; }
    case 141: // $657
      var $658=HEAPU16[((_fuji_width)>>1)];
      var $659=((($658))&65535);
      var $660=((($659)-1)|0);
      var $661=HEAPU16[((_shrink)>>1)];
      var $662=((($661))&65535);
      var $663=((($660)+($662))|0);
      var $664=HEAPU16[((_shrink)>>1)];
      var $665=((($664))&65535);
      var $666=($663) >> ((($665))|0);
      var $667=((($666)) & 65535);
      HEAP16[((_fuji_width)>>1)]=$667;
      var $668=HEAPU16[((_fuji_width)>>1)];
      var $669=((($668))&65535);
      var $670=((($669))|0);
      var $671=_sqrt(0.5);
      var $672=($670)/($671);
      var $673=(($672) >= 0 ? Math.floor(($672)) : Math.ceil(($672)));
      HEAP16[((_iwidth)>>1)]=$673;
      var $674=HEAPU16[((_iheight)>>1)];
      var $675=((($674))&65535);
      var $676=HEAPU16[((_fuji_width)>>1)];
      var $677=((($676))&65535);
      var $678=((($675)-($677))|0);
      var $679=((($678))|0);
      var $680=_sqrt(0.5);
      var $681=($679)/($680);
      var $682=(($681) >= 0 ? Math.floor(($681)) : Math.ceil(($681)));
      HEAP16[((_iheight)>>1)]=$682;
      __label__ = 147; break;
    case 142: // $683
      var $684=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $685=($684) < 1;
      if ($685) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: // $686
      var $687=HEAPU16[((_iheight)>>1)];
      var $688=((($687))&65535);
      var $689=((($688))|0);
      var $690=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $691=($689)/($690);
      var $692=($691)+0.5;
      var $693=(($692) >= 0 ? Math.floor(($692)) : Math.ceil(($692)));
      HEAP16[((_iheight)>>1)]=$693;
      __label__ = 144; break;
    case 144: // $694
      var $695=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $696=($695) > 1;
      if ($696) { __label__ = 145; break; } else { __label__ = 146; break; }
    case 145: // $697
      var $698=HEAPU16[((_iwidth)>>1)];
      var $699=((($698))&65535);
      var $700=((($699))|0);
      var $701=(tempDoubleI32[0]=HEAP32[((_pixel_aspect)>>2)],tempDoubleI32[1]=HEAP32[((_pixel_aspect+4)>>2)],tempDoubleF64[0]);
      var $702=($700)*($701);
      var $703=($702)+0.5;
      var $704=(($703) >= 0 ? Math.floor(($703)) : Math.ceil(($703)));
      HEAP16[((_iwidth)>>1)]=$704;
      __label__ = 146; break;
    case 146: // $705
      __label__ = 147; break;
    case 147: // $706
      __label__ = 148; break;
    case 148: // $707
      var $708=HEAP32[((_flip)>>2)];
      var $709=($708) & 4;
      var $710=((($709))|0)!=0;
      if ($710) { __label__ = 149; break; } else { __label__ = 150; break; }
    case 149: // $711
      var $712=HEAPU16[((_iheight)>>1)];
      var $713=((($712))&65535);
      var $714=HEAPU16[((_iwidth)>>1)];
      var $715=((($714))&65535);
      var $716=((($713)+($715))|0);
      var $717=((($716)) & 65535);
      HEAP16[((_iheight)>>1)]=$717;
      var $718=HEAPU16[((_iheight)>>1)];
      var $719=((($718))&65535);
      var $720=HEAPU16[((_iwidth)>>1)];
      var $721=((($720))&65535);
      var $722=((($719)-($721))|0);
      var $723=((($722)) & 65535);
      HEAP16[((_iwidth)>>1)]=$723;
      var $724=HEAPU16[((_iheight)>>1)];
      var $725=((($724))&65535);
      var $726=HEAPU16[((_iwidth)>>1)];
      var $727=((($726))&65535);
      var $728=((($725)-($727))|0);
      var $729=((($728)) & 65535);
      HEAP16[((_iheight)>>1)]=$729;
      __label__ = 150; break;
    case 150: // $730
      var $731=HEAPU16[((_width)>>1)];
      var $732=((($731))&65535);
      var $733=HEAPU16[((_height)>>1)];
      var $734=((($733))&65535);
      var $735=_printf(((__str841)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$732,HEAP32[((tempInt+4)>>2)]=$734,tempInt));
      var $736=HEAPU16[((_iwidth)>>1)];
      var $737=((($736))&65535);
      var $738=HEAPU16[((_iheight)>>1)];
      var $739=((($738))&65535);
      var $740=_printf(((__str842)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$737,HEAP32[((tempInt+4)>>2)]=$739,tempInt));
      var $741=HEAP32[((_colors)>>2)];
      var $742=_printf(((__str843)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$741,tempInt));
      var $743=HEAP32[((_filters)>>2)];
      var $744=((($743))|0)!=0;
      if ($744) { __label__ = 151; break; } else { __label__ = 156; break; }
    case 151: // $745
      var $746=_printf(((__str844)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      __label__ = 152; break;
    case 152: // $747
      var $748=$i;
      var $749=((($748))|0) < 16;
      if ($749) { __label__ = 153; break; } else { __label__ = 155; break; }
    case 153: // $750
      var $751=$i;
      var $752=($751) >> 1;
      var $753=$i;
      var $754=($753) & 1;
      var $755=_fc($752, $754);
      var $756=((_cdesc+$755)|0);
      var $757=HEAP8[($756)];
      var $758=((($757) << 24) >> 24);
      var $759=HEAP32[((__impure_ptr)>>2)];
      var $760=(($759+8)|0);
      var $761=HEAP32[(($760)>>2)];
      var $762=_putc($758, $761);
      __label__ = 154; break;
    case 154: // $763
      var $764=$i;
      var $765=((($764)+1)|0);
      $i=$765;
      __label__ = 152; break;
    case 155: // $766
      __label__ = 156; break;
    case 156: // $767
      var $768=_printf(((__str845)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $c=0;
      __label__ = 157; break;
    case 157: // $769
      var $770=$c;
      var $771=HEAP32[((_colors)>>2)];
      var $772=((($770))|0) < ((($771))|0);
      if ($772) { __label__ = 158; break; } else { __label__ = 160; break; }
    case 158: // $773
      var $774=$c;
      var $775=((_pre_mul+($774<<2))|0);
      var $776=HEAPF32[(($775)>>2)];
      var $777=($776);
      var $778=_printf(((__str71)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$777,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 159; break;
    case 159: // $779
      var $780=$c;
      var $781=((($780)+1)|0);
      $c=$781;
      __label__ = 157; break;
    case 160: // $782
      var $783=HEAPF32[((((_cam_mul)|0))>>2)];
      var $784=($783) > 0;
      if ($784) { __label__ = 161; break; } else { __label__ = 166; break; }
    case 161: // $785
      var $786=_printf(((__str846)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = Math.ceil((STACKTOP)/4)*4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $c=0;
      __label__ = 162; break;
    case 162: // $787
      var $788=$c;
      var $789=((($788))|0) < 4;
      if ($789) { __label__ = 163; break; } else { __label__ = 165; break; }
    case 163: // $790
      var $791=$c;
      var $792=((_cam_mul+($791<<2))|0);
      var $793=HEAPF32[(($792)>>2)];
      var $794=($793);
      var $795=_printf(((__str71)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$794,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 164; break;
    case 164: // $796
      var $797=$c;
      var $798=((($797)+1)|0);
      $c=$798;
      __label__ = 162; break;
    case 165: // $799
      __label__ = 166; break;
    case 166: // $800
      var $801=HEAP32[((__impure_ptr)>>2)];
      var $802=(($801+8)|0);
      var $803=HEAP32[(($802)>>2)];
      var $804=_putc(10, $803);
      __label__ = 168; break;
    case 167: // $805
      var $806=HEAP32[((_ifname)>>2)];
      var $807=_printf(((__str847)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$806,HEAP32[((tempInt+4)>>2)]=((_make)|0),HEAP32[((tempInt+8)>>2)]=((_model)|0),tempInt));
      __label__ = 168; break;
    case 168: // $808
      __label__ = 169; break;
    case 169: // $809
      var $810=HEAP32[((_ifp)>>2)];
      var $811=_fclose($810);
      __label__ = 275; break;
    case 170: // $812
      var $813=HEAP32[((_use_camera_matrix)>>2)];
      var $814=((($813))|0)!=0;
      if ($814) { __label__ = 171; break; } else { __label__ = 173; break; }
    case 171: // $815
      var $816=HEAPF32[((((_cmatrix)|0))>>2)];
      var $817=($816);
      var $818=($817) > 0.25;
      if ($818) { __label__ = 172; break; } else { __label__ = 173; break; }
    case 172: // $819
      assert(48 % 1 === 0, 'memcpy given ' + 48 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy((_rgb_cam), (_cmatrix), 48, 1);
      HEAP32[((_raw_color)>>2)]=0;
      __label__ = 173; break;
    case 173: // $820
      var $821=HEAPU16[((_iheight)>>1)];
      var $822=((($821))&65535);
      var $823=HEAPU16[((_iwidth)>>1)];
      var $824=((($823))&65535);
      var $825=((($822)*($824))|0);
      var $826=_calloc($825, 8);
      var $827=$826;
      HEAP32[((_image)>>2)]=$827;
      var $828=HEAP32[((_image)>>2)];
      var $829=$828;
      _merror($829, ((__str848)|0));
      var $830=HEAP32[((_meta_length)>>2)];
      var $831=((($830))|0)!=0;
      if ($831) { __label__ = 174; break; } else { __label__ = 175; break; }
    case 174: // $832
      var $833=HEAP32[((_meta_length)>>2)];
      var $834=_malloc($833);
      HEAP32[((_meta_data)>>2)]=$834;
      var $835=HEAP32[((_meta_data)>>2)];
      _merror($835, ((__str848)|0));
      __label__ = 175; break;
    case 175: // $836
      var $837=HEAP32[((_verbose)>>2)];
      var $838=((($837))|0)!=0;
      if ($838) { __label__ = 176; break; } else { __label__ = 177; break; }
    case 176: // $839
      var $840=HEAP32[((__impure_ptr)>>2)];
      var $841=(($840+12)|0);
      var $842=HEAP32[(($841)>>2)];
      var $843=HEAP32[((_ifname)>>2)];
      var $844=_fprintf($842, ((__str849)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_make)|0),HEAP32[((tempInt+4)>>2)]=((_model)|0),HEAP32[((tempInt+8)>>2)]=$843,tempInt));
      __label__ = 177; break;
    case 177: // $845
      var $846=HEAPU32[((_shot_select)>>2)];
      var $847=HEAPU32[((_is_raw)>>2)];
      var $848=((($846))>>>0) >= ((($847))>>>0);
      if ($848) { __label__ = 178; break; } else { __label__ = 179; break; }
    case 178: // $849
      var $850=HEAP32[((__impure_ptr)>>2)];
      var $851=(($850+12)|0);
      var $852=HEAP32[(($851)>>2)];
      var $853=HEAP32[((_ifname)>>2)];
      var $854=HEAP32[((_shot_select)>>2)];
      var $855=_fprintf($852, ((__str850)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$853,HEAP32[((tempInt+4)>>2)]=$854,tempInt));
      __label__ = 179; break;
    case 179: // $856
      var $857=HEAP32[((_ifp)>>2)];
      var $858=HEAP32[((_data_offset)>>2)];
      var $859=_fseeko($857, $858, 0);
      var $860=HEAP32[((_load_raw)>>2)];
      var $861=$860;
      FUNCTION_TABLE[$861]();
      var $862=HEAP32[((_zero_is_bad)>>2)];
      var $863=((($862))|0)!=0;
      if ($863) { __label__ = 180; break; } else { __label__ = 181; break; }
    case 180: // $864
      _remove_zeroes();
      __label__ = 181; break;
    case 181: // $865
      var $866=$bpfile;
      _bad_pixels($866);
      var $867=$dark_frame;
      var $868=((($867))|0)!=0;
      if ($868) { __label__ = 182; break; } else { __label__ = 183; break; }
    case 182: // $869
      var $870=$dark_frame;
      _subtract($870);
      __label__ = 183; break;
    case 183: // $871
      var $872=HEAP16[((_fuji_width)>>1)];
      var $873=((($872) << 16) >> 16)!=0;
      var $874=($873) ^ 1;
      var $875=((($874))&1);
      var $876=((($875)+2)|0);
      $quality=$876;
      var $877=$user_qual;
      var $878=((($877))|0) >= 0;
      if ($878) { __label__ = 184; break; } else { __label__ = 185; break; }
    case 184: // $879
      var $880=$user_qual;
      $quality=$880;
      __label__ = 185; break;
    case 185: // $881
      var $882=HEAP32[((((_cblack+12)|0))>>2)];
      $i=$882;
      $c=0;
      __label__ = 186; break;
    case 186: // $883
      var $884=$c;
      var $885=((($884))|0) < 3;
      if ($885) { __label__ = 187; break; } else { __label__ = 191; break; }
    case 187: // $886
      var $887=$i;
      var $888=$c;
      var $889=((_cblack+($888<<2))|0);
      var $890=HEAPU32[(($889)>>2)];
      var $891=((($887))>>>0) > ((($890))>>>0);
      if ($891) { __label__ = 188; break; } else { __label__ = 189; break; }
    case 188: // $892
      var $893=$c;
      var $894=((_cblack+($893<<2))|0);
      var $895=HEAP32[(($894)>>2)];
      $i=$895;
      __label__ = 189; break;
    case 189: // $896
      __label__ = 190; break;
    case 190: // $897
      var $898=$c;
      var $899=((($898)+1)|0);
      $c=$899;
      __label__ = 186; break;
    case 191: // $900
      $c=0;
      __label__ = 192; break;
    case 192: // $901
      var $902=$c;
      var $903=((($902))|0) < 4;
      if ($903) { __label__ = 193; break; } else { __label__ = 195; break; }
    case 193: // $904
      var $905=$i;
      var $906=$c;
      var $907=((_cblack+($906<<2))|0);
      var $908=HEAP32[(($907)>>2)];
      var $909=((($908)-($905))|0);
      HEAP32[(($907)>>2)]=$909;
      __label__ = 194; break;
    case 194: // $910
      var $911=$c;
      var $912=((($911)+1)|0);
      $c=$912;
      __label__ = 192; break;
    case 195: // $913
      var $914=$i;
      var $915=HEAP32[((_black)>>2)];
      var $916=((($915)+($914))|0);
      HEAP32[((_black)>>2)]=$916;
      var $917=$user_black;
      var $918=((($917))|0) >= 0;
      if ($918) { __label__ = 196; break; } else { __label__ = 197; break; }
    case 196: // $919
      var $920=$user_black;
      HEAP32[((_black)>>2)]=$920;
      __label__ = 197; break;
    case 197: // $921
      var $922=$user_sat;
      var $923=((($922))|0) > 0;
      if ($923) { __label__ = 198; break; } else { __label__ = 199; break; }
    case 198: // $924
      var $925=$user_sat;
      HEAP32[((_maximum)>>2)]=$925;
      __label__ = 199; break;
    case 199: // $926
      var $927=HEAP32[((_is_foveon)>>2)];
      var $928=((($927))|0)!=0;
      if ($928) { __label__ = 200; break; } else { __label__ = 202; break; }
    case 200: // $929
      var $930=HEAP32[((_document_mode)>>2)];
      var $931=((($930))|0)!=0;
      if ($931) { __label__ = 202; break; } else { __label__ = 201; break; }
    case 201: // $932
      _foveon_interpolate();
      __label__ = 202; break;
    case 202: // $933
      var $934=HEAP32[((_is_foveon)>>2)];
      var $935=((($934))|0)!=0;
      if ($935) { __label__ = 205; break; } else { __label__ = 203; break; }
    case 203: // $936
      var $937=HEAP32[((_document_mode)>>2)];
      var $938=((($937))|0) < 2;
      if ($938) { __label__ = 204; break; } else { __label__ = 205; break; }
    case 204: // $939
      _scale_colors();
      __label__ = 205; break;
    case 205: // $940
      _pre_interpolate();
      var $941=HEAP32[((_filters)>>2)];
      var $942=((($941))|0)!=0;
      if ($942) { __label__ = 206; break; } else { __label__ = 218; break; }
    case 206: // $943
      var $944=HEAP32[((_document_mode)>>2)];
      var $945=((($944))|0)!=0;
      if ($945) { __label__ = 218; break; } else { __label__ = 207; break; }
    case 207: // $946
      var $947=$quality;
      var $948=((($947))|0)==0;
      if ($948) { __label__ = 208; break; } else { __label__ = 209; break; }
    case 208: // $949
      _lin_interpolate();
      __label__ = 217; break;
    case 209: // $950
      var $951=$quality;
      var $952=((($951))|0)==1;
      if ($952) { __label__ = 211; break; } else { __label__ = 210; break; }
    case 210: // $953
      var $954=HEAP32[((_colors)>>2)];
      var $955=((($954))|0) > 3;
      if ($955) { __label__ = 211; break; } else { __label__ = 212; break; }
    case 211: // $956
      _vng_interpolate();
      __label__ = 216; break;
    case 212: // $957
      var $958=$quality;
      var $959=((($958))|0)==2;
      if ($959) { __label__ = 213; break; } else { __label__ = 214; break; }
    case 213: // $960
      _ppg_interpolate();
      __label__ = 215; break;
    case 214: // $961
      _ahd_interpolate();
      __label__ = 215; break;
    case 215: // $962
      __label__ = 216; break;
    case 216: // $963
      __label__ = 217; break;
    case 217: // $964
      __label__ = 218; break;
    case 218: // $965
      var $966=HEAP32[((_mix_green)>>2)];
      var $967=((($966))|0)!=0;
      if ($967) { __label__ = 219; break; } else { __label__ = 224; break; }
    case 219: // $968
      HEAP32[((_colors)>>2)]=3;
      $i=0;
      __label__ = 220; break;
    case 220: // $969
      var $970=$i;
      var $971=HEAPU16[((_height)>>1)];
      var $972=((($971))&65535);
      var $973=HEAPU16[((_width)>>1)];
      var $974=((($973))&65535);
      var $975=((($972)*($974))|0);
      var $976=((($970))|0) < ((($975))|0);
      if ($976) { __label__ = 221; break; } else { __label__ = 223; break; }
    case 221: // $977
      var $978=$i;
      var $979=HEAP32[((_image)>>2)];
      var $980=(($979+($978<<3))|0);
      var $981=(($980+2)|0);
      var $982=HEAPU16[(($981)>>1)];
      var $983=((($982))&65535);
      var $984=$i;
      var $985=HEAP32[((_image)>>2)];
      var $986=(($985+($984<<3))|0);
      var $987=(($986+6)|0);
      var $988=HEAPU16[(($987)>>1)];
      var $989=((($988))&65535);
      var $990=((($983)+($989))|0);
      var $991=($990) >> 1;
      var $992=((($991)) & 65535);
      var $993=$i;
      var $994=HEAP32[((_image)>>2)];
      var $995=(($994+($993<<3))|0);
      var $996=(($995+2)|0);
      HEAP16[(($996)>>1)]=$992;
      __label__ = 222; break;
    case 222: // $997
      var $998=$i;
      var $999=((($998)+1)|0);
      $i=$999;
      __label__ = 220; break;
    case 223: // $1000
      __label__ = 224; break;
    case 224: // $1001
      var $1002=HEAP32[((_is_foveon)>>2)];
      var $1003=((($1002))|0)!=0;
      if ($1003) { __label__ = 227; break; } else { __label__ = 225; break; }
    case 225: // $1004
      var $1005=HEAP32[((_colors)>>2)];
      var $1006=((($1005))|0)==3;
      if ($1006) { __label__ = 226; break; } else { __label__ = 227; break; }
    case 226: // $1007
      _median_filter();
      __label__ = 227; break;
    case 227: // $1008
      var $1009=HEAP32[((_is_foveon)>>2)];
      var $1010=((($1009))|0)!=0;
      if ($1010) { __label__ = 230; break; } else { __label__ = 228; break; }
    case 228: // $1011
      var $1012=HEAP32[((_highlight)>>2)];
      var $1013=((($1012))|0)==2;
      if ($1013) { __label__ = 229; break; } else { __label__ = 230; break; }
    case 229: // $1014
      _blend_highlights();
      __label__ = 230; break;
    case 230: // $1015
      var $1016=HEAP32[((_is_foveon)>>2)];
      var $1017=((($1016))|0)!=0;
      if ($1017) { __label__ = 233; break; } else { __label__ = 231; break; }
    case 231: // $1018
      var $1019=HEAP32[((_highlight)>>2)];
      var $1020=((($1019))|0) > 2;
      if ($1020) { __label__ = 232; break; } else { __label__ = 233; break; }
    case 232: // $1021
      _recover_highlights();
      __label__ = 233; break;
    case 233: // $1022
      var $1023=$use_fuji_rotate;
      var $1024=((($1023))|0)!=0;
      if ($1024) { __label__ = 234; break; } else { __label__ = 235; break; }
    case 234: // $1025
      _fuji_rotate();
      __label__ = 235; break;
    case 235: // $1026
      _convert_to_rgb();
      var $1027=$use_fuji_rotate;
      var $1028=((($1027))|0)!=0;
      if ($1028) { __label__ = 236; break; } else { __label__ = 237; break; }
    case 236: // $1029
      _stretch();
      __label__ = 237; break;
    case 237: // $1030
      __label__ = 238; break;
    case 238: // $1031
      var $1032=HEAP32[((_write_fun)>>2)];
      var $1033=((($1032))|0)==52;
      if ($1033) { __label__ = 239; break; } else { __label__ = 240; break; }
    case 239: // $1034
      $write_ext=((__str175)|0);
      __label__ = 245; break;
    case 240: // $1035
      var $1036=HEAP32[((_output_tiff)>>2)];
      var $1037=((($1036))|0)!=0;
      if ($1037) { __label__ = 241; break; } else { __label__ = 243; break; }
    case 241: // $1038
      var $1039=HEAP32[((_write_fun)>>2)];
      var $1040=((($1039))|0)==92;
      if ($1040) { __label__ = 242; break; } else { __label__ = 243; break; }
    case 242: // $1041
      $write_ext=((__str851)|0);
      __label__ = 244; break;
    case 243: // $1042
      var $1043=HEAP32[((_colors)>>2)];
      var $1044=((($1043)*5)|0);
      var $1045=((((__str852)|0)+$1044)|0);
      var $1046=(($1045-5)|0);
      $write_ext=$1046;
      __label__ = 244; break;
    case 244: // $1047
      __label__ = 245; break;
    case 245: // $1048
      var $1049=HEAP32[((_ifname)>>2)];
      var $1050=_strlen($1049);
      var $1051=((($1050)+64)|0);
      var $1052=_malloc($1051);
      $ofname=$1052;
      var $1053=$ofname;
      _merror($1053, ((__str848)|0));
      var $1054=$write_to_stdout;
      var $1055=((($1054))|0)!=0;
      if ($1055) { __label__ = 246; break; } else { __label__ = 247; break; }
    case 246: // $1056
      var $1057=$ofname;
      var $1058=_strcpy($1057, ((__str853)|0));
      __label__ = 256; break;
    case 247: // $1059
      var $1060=$ofname;
      var $1061=HEAP32[((_ifname)>>2)];
      var $1062=_strcpy($1060, $1061);
      var $1063=$ofname;
      var $1064=_strrchr($1063, 46);
      $cp=$1064;
      var $1065=((($1064))|0)!=0;
      if ($1065) { __label__ = 248; break; } else { __label__ = 249; break; }
    case 248: // $1066
      var $1067=$cp;
      HEAP8[($1067)]=0;
      __label__ = 249; break;
    case 249: // $1068
      var $1069=HEAP32[((_multi_out)>>2)];
      var $1070=((($1069))|0)!=0;
      if ($1070) { __label__ = 250; break; } else { __label__ = 251; break; }
    case 250: // $1071
      var $1072=$ofname;
      var $1073=$ofname;
      var $1074=_strlen($1073);
      var $1075=(($1072+$1074)|0);
      var $1076=HEAP32[((_is_raw)>>2)];
      var $1077=((($1076)-1)|0);
      var $1078=_snprintf(0, 0, ((__str141)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1077,tempInt));
      var $1079=HEAP32[((_shot_select)>>2)];
      var $1080=_sprintf($1075, ((__str854)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1078,HEAP32[((tempInt+4)>>2)]=$1079,tempInt));
      __label__ = 251; break;
    case 251: // $1081
      var $1082=$thumbnail_only;
      var $1083=((($1082))|0)!=0;
      if ($1083) { __label__ = 252; break; } else { __label__ = 253; break; }
    case 252: // $1084
      var $1085=$ofname;
      var $1086=_strcat($1085, ((__str855)|0));
      __label__ = 253; break;
    case 253: // $1087
      var $1088=$ofname;
      var $1089=$write_ext;
      var $1090=_strcat($1088, $1089);
      var $1091=$ofname;
      var $1092=_fopen($1091, ((__str856)|0));
      HEAP32[((_ofp)>>2)]=$1092;
      var $1093=HEAP32[((_ofp)>>2)];
      var $1094=((($1093))|0)!=0;
      if ($1094) { __label__ = 255; break; } else { __label__ = 254; break; }
    case 254: // $1095
      $status=1;
      var $1096=$ofname;
      _perror($1096);
      __label__ = 261; break;
    case 255: // $1097
      __label__ = 256; break;
    case 256: // $1098
      var $1099=HEAP32[((_verbose)>>2)];
      var $1100=((($1099))|0)!=0;
      if ($1100) { __label__ = 257; break; } else { __label__ = 258; break; }
    case 257: // $1101
      var $1102=HEAP32[((__impure_ptr)>>2)];
      var $1103=(($1102+12)|0);
      var $1104=HEAP32[(($1103)>>2)];
      var $1105=$ofname;
      var $1106=_fprintf($1104, ((__str857)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1105,tempInt));
      __label__ = 258; break;
    case 258: // $1107
      var $1108=HEAP32[((_write_fun)>>2)];
      var $1109=$1108;
      FUNCTION_TABLE[$1109]();
      var $1110=HEAP32[((_ifp)>>2)];
      var $1111=_fclose($1110);
      var $1112=HEAP32[((_ofp)>>2)];
      var $1113=HEAP32[((__impure_ptr)>>2)];
      var $1114=(($1113+8)|0);
      var $1115=HEAP32[(($1114)>>2)];
      var $1116=((($1112))|0)!=((($1115))|0);
      if ($1116) { __label__ = 259; break; } else { __label__ = 260; break; }
    case 259: // $1117
      var $1118=HEAP32[((_ofp)>>2)];
      var $1119=_fclose($1118);
      __label__ = 260; break;
    case 260: // $1120
      __label__ = 261; break;
    case 261: // $1121
      var $1122=HEAP32[((_meta_data)>>2)];
      var $1123=((($1122))|0)!=0;
      if ($1123) { __label__ = 262; break; } else { __label__ = 263; break; }
    case 262: // $1124
      var $1125=HEAP32[((_meta_data)>>2)];
      _free($1125);
      __label__ = 263; break;
    case 263: // $1126
      var $1127=$ofname;
      var $1128=((($1127))|0)!=0;
      if ($1128) { __label__ = 264; break; } else { __label__ = 265; break; }
    case 264: // $1129
      var $1130=$ofname;
      _free($1130);
      __label__ = 265; break;
    case 265: // $1131
      var $1132=HEAP32[((_oprof)>>2)];
      var $1133=((($1132))|0)!=0;
      if ($1133) { __label__ = 266; break; } else { __label__ = 267; break; }
    case 266: // $1134
      var $1135=HEAP32[((_oprof)>>2)];
      var $1136=$1135;
      _free($1136);
      __label__ = 267; break;
    case 267: // $1137
      var $1138=HEAP32[((_image)>>2)];
      var $1139=((($1138))|0)!=0;
      if ($1139) { __label__ = 268; break; } else { __label__ = 269; break; }
    case 268: // $1140
      var $1141=HEAP32[((_image)>>2)];
      var $1142=$1141;
      _free($1142);
      __label__ = 269; break;
    case 269: // $1143
      var $1144=HEAP32[((_multi_out)>>2)];
      var $1145=((($1144))|0)!=0;
      if ($1145) { __label__ = 270; break; } else { __label__ = 274; break; }
    case 270: // $1146
      var $1147=HEAP32[((_shot_select)>>2)];
      var $1148=((($1147)+1)|0);
      HEAP32[((_shot_select)>>2)]=$1148;
      var $1149=HEAPU32[((_is_raw)>>2)];
      var $1150=((($1148))>>>0) < ((($1149))>>>0);
      if ($1150) { __label__ = 271; break; } else { __label__ = 272; break; }
    case 271: // $1151
      var $1152=$arg;
      var $1153=((($1152)-1)|0);
      $arg=$1153;
      __label__ = 273; break;
    case 272: // $1154
      HEAP32[((_shot_select)>>2)]=0;
      __label__ = 273; break;
    case 273: // $1155
      __label__ = 274; break;
    case 274: // $1156
      __label__ = 275; break;
    case 275: // $1157
      var $1158=$arg;
      var $1159=((($1158)+1)|0);
      $arg=$1159;
      __label__ = 69; break;
    case 276: // $1160
      var $1161=$status;
      $1=$1161;
      __label__ = 277; break;
    case 277: // $1162
      var $1163=$1;
      STACKTOP = __stackBase__;
      return $1163;
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_main"] = _main;_main["X"]=1;

function _malloc($bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1; //@line 4628 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))>>>0) <= 244; //@line 4628 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 1; break; } else { __label__ = 36; break; } //@line 4628 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=$1; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=((($5))>>>0) < 11; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $7
      var $14 = 16;__label__ = 4; break; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $8
      var $9=$1; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=((($9)+4)|0); //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=((($10)+7)|0); //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=($11) & -8; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14 = $12;__label__ = 4; break; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $13
      var $14; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nb=$14; //@line 4631 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=$nb; //@line 4632 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=($15) >>> 3; //@line 4632 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $idx=$16; //@line 4632 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=HEAPU32[((((__gm_)|0))>>2)]; //@line 4633 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=$idx; //@line 4633 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=($17) >>> ((($18))>>>0); //@line 4633 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $smallbits=$19; //@line 4633 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$smallbits; //@line 4635 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=($20) & 3; //@line 4635 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=((($21))|0)!=0; //@line 4635 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 4635 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $23
      var $24=$smallbits; //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=($24) ^ -1; //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=($25) & 1; //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=$idx; //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=((($27)+($26))|0); //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $idx=$28; //@line 4637 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=$idx; //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=($29) << 1; //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=((((__gm_+40)|0)+($30<<2))|0); //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=$31; //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=$32; //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $b=$33; //@line 4638 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=$b; //@line 4639 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=(($34+8)|0); //@line 4639 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 4639 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$36; //@line 4639 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=$p; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=(($37+8)|0); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=HEAP32[(($38)>>2)]; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$39; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$b; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$F; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=((($40))|0)==((($41))|0); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($42) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $43
      var $44=$idx; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=1 << ($44); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=($45) ^ -1; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=HEAP32[((((__gm_)|0))>>2)]; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=($47) & ($46); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$48; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 11; break; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $49
      var $50=$F; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=$50; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=((($51))>>>0) >= ((($52))>>>0); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=((($53))&1); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=(($54)==(1)); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=((($55))|0)!=0; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($56) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $57
      var $58=$F; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$b; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=(($59+8)|0); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$b; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=$F; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=(($62+12)|0); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($63)>>2)]=$61; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 10; break; //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $64
      _abort(); //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4641 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $65
      __label__ = 11; break;
    case 11: // $66
      var $67=$idx; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=($67) << 3; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=($68) | 1; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=($69) | 2; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=$p; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($72)>>2)]=$70; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=$p; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=$73; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=$idx; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=($75) << 3; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=(($74+$76)|0); //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=$77; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=(($78+4)|0); //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=HEAP32[(($79)>>2)]; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=($80) | 1; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($79)>>2)]=$81; //@line 4642 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=$p; //@line 4643 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=$82; //@line 4643 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=(($83+8)|0); //@line 4643 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$84; //@line 4643 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 52; break; //@line 4645 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $85
      var $86=$nb; //@line 4648 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4648 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=((($86))>>>0) > ((($87))>>>0); //@line 4648 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($88) { __label__ = 13; break; } else { __label__ = 34; break; } //@line 4648 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $89
      var $90=$smallbits; //@line 4649 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=((($90))|0)!=0; //@line 4649 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($91) { __label__ = 14; break; } else { __label__ = 29; break; } //@line 4649 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $92
      var $93=$smallbits; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=$idx; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=($93) << ($94); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=$idx; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=1 << ($96); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=($97) << 1; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$idx; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=1 << ($99); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=($100) << 1; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=(((-($101)))|0); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=($98) | ($102); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=($95) & ($103); //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leftbits=$104; //@line 4653 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=$leftbits; //@line 4654 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=$leftbits; //@line 4654 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(((-($106)))|0); //@line 4654 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=($105) & ($107); //@line 4654 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leastbit=$108; //@line 4654 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=$leastbit; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=((($109)-1)|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$110; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=($111) >>> 12; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=($112) & 16; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$113; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$114; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=($116) >>> ((($115))>>>0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$117; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=($118) >>> 5; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=($119) & 8; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$120; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=$N; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=((($121)+($120))|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$122; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=($124) >>> ((($123))>>>0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$125; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=($126) >>> 2; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=($127) & 4; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$128; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=$N; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=((($129)+($128))|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$130; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=($132) >>> ((($131))>>>0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$133; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=($134) >>> 1; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=($135) & 2; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$136; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=$N; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=((($137)+($136))|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$138; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=($140) >>> ((($139))>>>0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$141; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=($142) >>> 1; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=($143) & 1; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$144; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=$N; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=((($145)+($144))|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$146; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=$K; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=($148) >>> ((($147))>>>0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$149; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$N; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=$Y; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=((($150)+($151))|0); //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$152; //@line 4655 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=$i; //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=($153) << 1; //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=((((__gm_+40)|0)+($154<<2))|0); //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=$155; //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=$156; //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $b1=$157; //@line 4656 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$b1; //@line 4657 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=(($158+8)|0); //@line 4657 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4657 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p2=$160; //@line 4657 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=$p2; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=(($161+8)|0); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=HEAP32[(($162)>>2)]; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F3=$163; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=$b1; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=$F3; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=((($164))|0)==((($165))|0); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($166) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $167
      var $168=$i; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=1 << ($168); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=($169) ^ -1; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=HEAP32[((((__gm_)|0))>>2)]; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=($171) & ($170); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$172; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 20; break; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $173
      var $174=$F3; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=$174; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=((($175))>>>0) >= ((($176))>>>0); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=((($177))&1); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=(($178)==(1)); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=((($179))|0)!=0; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($180) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $181
      var $182=$F3; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=$b1; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=(($183+8)|0); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($184)>>2)]=$182; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=$b1; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=$F3; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $187=(($186+12)|0); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($187)>>2)]=$185; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $188
      _abort(); //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4659 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $189
      __label__ = 20; break;
    case 20: // $190
      var $191=$i; //@line 4660 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=($191) << 3; //@line 4660 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=$nb; //@line 4660 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=((($192)-($193))|0); //@line 4660 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$194; //@line 4660 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=$nb; //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=($195) | 1; //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=($196) | 2; //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=$p2; //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=(($198+4)|0); //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($199)>>2)]=$197; //@line 4665 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=$p2; //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=$200; //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=$nb; //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=(($201+$202)|0); //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=$203; //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r=$204; //@line 4666 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=$rsize; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=($205) | 1; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=$r; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=(($207+4)|0); //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($208)>>2)]=$206; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=$rsize; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=$r; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=$210; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=$rsize; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=(($211+$212)|0); //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $214=$213; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=(($214)|0); //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($215)>>2)]=$209; //@line 4667 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $216=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $DVS=$216; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $217=$DVS; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=((($217))|0)!=0; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($218) { __label__ = 21; break; } else { __label__ = 28; break; } //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $219
      var $220=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $DV=$220; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=$DVS; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=($221) >>> 3; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$222; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=$I; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=($223) << 1; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=((((__gm_+40)|0)+($224<<2))|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=$225; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=$226; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$227; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=$B; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F4=$228; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=$I; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=1 << ($230); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $232=($229) & ($231); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $233=((($232))|0)!=0; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($233) { __label__ = 23; break; } else { __label__ = 22; break; } //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $234
      var $235=$I; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=1 << ($235); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=($237) | ($236); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$238; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 27; break; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $239
      var $240=$B; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $241=(($240+8)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=$242; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=((($243))>>>0) >= ((($244))>>>0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=((($245))&1); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=((($247))|0)!=0; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($248) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $249
      var $250=$B; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=(($250+8)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252=HEAP32[(($251)>>2)]; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F4=$252; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $253
      _abort(); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $254
      __label__ = 27; break;
    case 27: // $255
      var $256=$DV; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $257=$B; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=(($257+8)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($258)>>2)]=$256; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=$DV; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=$F4; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=(($260+12)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $262=$F4; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=$DV; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=(($263+8)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($264)>>2)]=$262; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=$B; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $266=$DV; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $267=(($266+12)|0); //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($267)>>2)]=$265; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 28; break; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $268
      var $269=$rsize; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$269; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $270=$r; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$270; //@line 4668 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=$p2; //@line 4670 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=$271; //@line 4670 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=(($272+8)|0); //@line 4670 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$273; //@line 4670 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 52; break; //@line 4672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $274
      var $275=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=((($275))|0)!=0; //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($276) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $277
      var $278=$nb; //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=_tmalloc_small(__gm_, $278); //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$279; //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=((($279))|0)!=0; //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($280) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $281
      __label__ = 52; break; //@line 4677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $282
      __label__ = 33; break;
    case 33: // $283
      __label__ = 34; break; //@line 4679 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $284
      __label__ = 35; break;
    case 35: // $285
      __label__ = 43; break; //@line 4680 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $286
      var $287=$1; //@line 4681 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=((($287))>>>0) >= 4294967232; //@line 4681 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($288) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4681 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $289
      $nb=-1; //@line 4682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 42; break; //@line 4682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $290
      var $291=$1; //@line 4684 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=((($291)+4)|0); //@line 4684 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=((($292)+7)|0); //@line 4684 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=($293) & -8; //@line 4684 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nb=$294; //@line 4684 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=((($295))|0)!=0; //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($296) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $297
      var $298=$nb; //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $299=_tmalloc_large(__gm_, $298); //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$299; //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $300=((($299))|0)!=0; //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($300) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $301
      __label__ = 52; break; //@line 4687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $302
      __label__ = 42; break;
    case 42: // $303
      __label__ = 43; break;
    case 43: // $304
      var $305=$nb; //@line 4691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $306=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=((($305))>>>0) <= ((($306))>>>0); //@line 4691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($307) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $308
      var $309=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=$nb; //@line 4692 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=((($309)-($310))|0); //@line 4692 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize5=$311; //@line 4692 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4693 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p6=$312; //@line 4693 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=$rsize5; //@line 4694 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=((($313))>>>0) >= 16; //@line 4694 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($314) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4694 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $315
      var $316=$p6; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=$316; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=$nb; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $319=(($317+$318)|0); //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=$319; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$320; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r7=$320; //@line 4695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=$rsize5; //@line 4696 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$321; //@line 4696 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=$rsize5; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=($322) | 1; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=$r7; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($325)>>2)]=$323; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=$rsize5; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $327=$r7; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $328=$327; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $329=$rsize5; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $330=(($328+$329)|0); //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $331=$330; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $332=(($331)|0); //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($332)>>2)]=$326; //@line 4697 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $333=$nb; //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $334=($333) | 1; //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=($334) | 2; //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=$p6; //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $337=(($336+4)|0); //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($337)>>2)]=$335; //@line 4698 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 47; break; //@line 4699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $338
      var $339=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4701 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $dvs=$339; //@line 4701 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4702 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=$dvs; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=($340) | 1; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=($341) | 2; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $343=$p6; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $344=(($343+4)|0); //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($344)>>2)]=$342; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=$p6; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=$345; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=$dvs; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=(($346+$347)|0); //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=$348; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=(($349+4)|0); //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=($351) | 1; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($350)>>2)]=$352; //@line 4704 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 47; break;
    case 47: // $353
      var $354=$p6; //@line 4706 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=$354; //@line 4706 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=(($355+8)|0); //@line 4706 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$356; //@line 4706 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 52; break; //@line 4708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $357
      var $358=$nb; //@line 4711 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4711 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=((($358))>>>0) < ((($359))>>>0); //@line 4711 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($360) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 4711 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $361
      var $362=$nb; //@line 4712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $363=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=((($363)-($362))|0); //@line 4712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$364; //@line 4712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize8=$364; //@line 4712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p9=$365; //@line 4713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $366=$p9; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=$366; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=$nb; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=(($367+$368)|0); //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=$369; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$370; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r10=$370; //@line 4714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=$rsize8; //@line 4715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=($371) | 1; //@line 4715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $373=$r10; //@line 4715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=(($373+4)|0); //@line 4715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($374)>>2)]=$372; //@line 4715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=$nb; //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=($375) | 1; //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $377=($376) | 2; //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $378=$p9; //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $379=(($378+4)|0); //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($379)>>2)]=$377; //@line 4716 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=$p9; //@line 4717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=$380; //@line 4717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$382; //@line 4717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 52; break; //@line 4720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $383
      __label__ = 51; break;
    case 51: // $384
      var $385=$nb; //@line 4723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=_sys_alloc(__gm_, $385); //@line 4723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$386; //@line 4723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 52; break; //@line 4723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $387
      var $388=$mem; //@line 4727 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $388; //@line 4727 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1; //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=(($3+4)|0); //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=$1; //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=(($6+4)|0); //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=(((-($8)))|0); //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=($5) & ($9); //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leastbit=$10; //@line 4268 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$leastbit; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=((($11)-1)|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$12; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=($13) >>> 12; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=($14) & 16; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$15; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$16; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=($18) >>> ((($17))>>>0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$19; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=($20) >>> 5; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=($21) & 8; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$22; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$N; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=((($23)+($22))|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$24; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26) >>> ((($25))>>>0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$27; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=($28) >>> 2; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=($29) & 4; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$30; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=$N; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=((($31)+($30))|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$32; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=($34) >>> ((($33))>>>0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$35; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=($36) >>> 1; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=($37) & 2; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$38; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=$N; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=((($39)+($38))|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$40; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=($42) >>> ((($41))>>>0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$43; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=($44) >>> 1; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=($45) & 1; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$46; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=$N; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=((($47)+($46))|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$48; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=$K; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=($50) >>> ((($49))>>>0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$51; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$N; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$Y; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=((($52)+($53))|0); //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$54; //@line 4269 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=$i; //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$1; //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$59; //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $v=$59; //@line 4270 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$t; //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=(($60+4)|0); //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=HEAP32[(($61)>>2)]; //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=($62) & -8; //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$2; //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=((($63)-($64))|0); //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$65; //@line 4271 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $66
      var $67=$t; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=(($67+16)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=(($68)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=((($70))|0)!=0; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($71) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $72
      var $73=$t; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($73+16)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=(($74)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83 = $76;__label__ = 4; break; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $77
      var $78=$t; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=(($78+16)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=(($79+4)|0); //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83 = $81;__label__ = 4; break; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $82
      var $83; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$83; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=((($83))|0)!=0; //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($84) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 4273 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $85
      var $86=$t; //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=(($86+4)|0); //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=HEAP32[(($87)>>2)]; //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=($88) & -8; //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=$2; //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=((($89)-($90))|0); //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $trem=$91; //@line 4274 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=$trem; //@line 4275 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=$rsize; //@line 4275 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=((($92))>>>0) < ((($93))>>>0); //@line 4275 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($94) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4275 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $95
      var $96=$trem; //@line 4276 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$96; //@line 4276 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=$t; //@line 4277 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $v=$97; //@line 4277 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 7; break; //@line 4278 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $98
      __label__ = 1; break; //@line 4279 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $99
      var $100=$v; //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$100; //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$1; //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=((($101))>>>0) >= ((($104))>>>0); //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=((($105))&1); //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=((($107))|0)!=0; //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($108) { __label__ = 9; break; } else { __label__ = 68; break; } //@line 4281 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $109
      var $110=$v; //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$110; //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=$2; //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=(($111+$112)|0); //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=$113; //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r=$114; //@line 4282 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=$v; //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=$115; //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=$r; //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=$117; //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=((($116))>>>0) < ((($118))>>>0); //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=((($119))&1); //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=(($120)==(1)); //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=((($121))|0)!=0; //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($122) { __label__ = 10; break; } else { __label__ = 67; break; } //@line 4284 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $123
      var $124=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=(($124+24)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=HEAP32[(($125)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP=$126; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=(($127+12)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=((($129))|0)!=((($130))|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($131) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $132
      var $133=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=(($133+8)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$135; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=(($136+12)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=HEAP32[(($137)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$138; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$F; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=$139; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=(($141+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=HEAPU32[(($142)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=((($140))>>>0) >= ((($143))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=((($144))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=(($145)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=((($146))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($147) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $148
      var $149=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$F; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=(($150+12)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($151)>>2)]=$149; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=$F; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=(($153+8)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 14; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $155
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $156
      __label__ = 27; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $157
      var $158=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=(($158+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$160; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$161; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=((($161))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($162) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $163
      var $164=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=(($164+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=(($165)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$166; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=HEAP32[(($166)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$167; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=((($167))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($168) { __label__ = 17; break; } else { __label__ = 26; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $169
      __label__ = 18; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $170
      var $171=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=(($171+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=(($172+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$173; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $174=HEAP32[(($173)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=((($174))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($175) { var $183 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $176
      var $177=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=(($177+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=(($178)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$179; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=HEAP32[(($179)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $181=((($180))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183 = $181;__label__ = 20; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $182
      var $183;
      if ($183) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $184
      var $185=$CP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$185; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=HEAP32[(($185)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$186; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 18; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $187
      var $188=$RP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=$188; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $191=(($190+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=HEAPU32[(($191)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=((($189))>>>0) >= ((($192))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=((($193))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=(($194)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=((($195))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($196) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $197
      var $198=$RP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($198)>>2)]=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 25; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $199
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $200
      __label__ = 26; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $201
      __label__ = 27; break;
    case 27: // $202
      var $203=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=((($203))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($204) { __label__ = 28; break; } else { __label__ = 55; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $205
      var $206=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=(($206+28)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=HEAP32[(($207)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=(($209+304)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=(($210+($208<<2))|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$211; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=$H; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $214=HEAP32[(($213)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=((($212))|0)==((($214))|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($215) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $216
      var $217=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=$H; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($218)>>2)]=$217; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219=((($217))|0)==0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($219) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $220
      var $221=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=(($221+28)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=1 << ($223); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=($224) ^ -1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=($228) & ($225); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($227)>>2)]=$229; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 31; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $230
      __label__ = 39; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $231
      var $232=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $233=$232; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $235=(($234+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=HEAPU32[(($235)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=((($233))>>>0) >= ((($236))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=((($237))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $239=(($238)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $240=((($239))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($240) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $241
      var $242=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=(($242+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=(($243)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=((($245))|0)==((($246))|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($247) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $248
      var $249=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252=(($251)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($252)>>2)]=$249; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 36; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $253
      var $254=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $255=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $256=(($255+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $257=(($256+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($257)>>2)]=$254; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 36; break;
    case 36: // $258
      __label__ = 38; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $259
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $260
      __label__ = 39; break;
    case 39: // $261
      var $262=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=((($262))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($263) { __label__ = 40; break; } else { __label__ = 54; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $264
      var $265=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $266=$265; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $267=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $268=(($267+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $269=HEAPU32[(($268)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $270=((($266))>>>0) >= ((($269))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=((($270))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=(($271)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=((($272))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($273) { __label__ = 41; break; } else { __label__ = 52; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $274
      var $275=$XP; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $277=(($276+24)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($277)>>2)]=$275; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $278=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=(($278+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=(($279)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C0=$281; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=((($281))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($282) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $283
      var $284=$C0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=$284; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=(($286+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=HEAPU32[(($287)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $289=((($285))>>>0) >= ((($288))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $290=((($289))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $291=(($290)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=((($291))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($292) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $293
      var $294=$C0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=(($295+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=(($296)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($297)>>2)]=$294; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $298=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $299=$C0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $300=(($299+24)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($300)>>2)]=$298; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 45; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $301
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $302
      __label__ = 46; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $303
      var $304=$v; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $305=(($304+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $306=(($305+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=HEAP32[(($306)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C1=$307; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $308=((($307))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($308) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $309
      var $310=$C1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=$310; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=$1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=(($312+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=HEAPU32[(($313)>>2)]; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=((($311))>>>0) >= ((($314))>>>0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=((($315))&1); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=(($316)==(1)); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=((($317))|0)!=0; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($318) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $319
      var $320=$C1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=(($321+16)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=(($322+4)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($323)>>2)]=$320; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=$R; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=$C1; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=(($325+24)|0); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($326)>>2)]=$324; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 50; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $327
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $328
      __label__ = 51; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 51: // $329
      __label__ = 53; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $330
      _abort(); //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 53: // $331
      __label__ = 54; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $332
      __label__ = 55; break; //@line 4285 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $333
      var $334=$rsize; //@line 4286 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=((($334))>>>0) < 16; //@line 4286 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($335) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 4286 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 56: // $336
      var $337=$rsize; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $338=$2; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=((($337)+($338))|0); //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=($339) | 1; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=($340) | 2; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=$v; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($343)>>2)]=$341; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $344=$v; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=$344; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=$rsize; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=$2; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=((($346)+($347))|0); //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=(($345+$348)|0); //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=$349; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=(($350+4)|0); //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $353=($352) | 1; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($351)>>2)]=$353; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 66; break; //@line 4287 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 57: // $354
      var $355=$2; //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=($355) | 1; //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $357=($356) | 2; //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=$v; //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($359)>>2)]=$357; //@line 4289 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=$rsize; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=($360) | 1; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $362=$r; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $363=(($362+4)|0); //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($363)>>2)]=$361; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=$rsize; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=$r; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $366=$365; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=$rsize; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=(($366+$367)|0); //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=$368; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=(($369)|0); //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($370)>>2)]=$364; //@line 4290 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=(($371+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $373=HEAP32[(($372)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $DVS=$373; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=$DVS; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=((($374))|0)!=0; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($375) { __label__ = 58; break; } else { __label__ = 65; break; } //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $376
      var $377=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $378=(($377+20)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $379=HEAP32[(($378)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $DV=$379; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=$DVS; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=($380) >>> 3; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$381; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=$I; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $383=($382) << 1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $384=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=(($384+40)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=(($385+($383<<2))|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=$386; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $388=$387; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$388; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $389=$B; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F1=$389; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $391=(($390)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $392=HEAP32[(($391)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $393=$I; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=1 << ($393); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=($392) & ($394); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $396=((($395))|0)!=0; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($396) { __label__ = 60; break; } else { __label__ = 59; break; } //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $397
      var $398=$I; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $399=1 << ($398); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $400=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $401=(($400)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $403=($402) | ($399); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($401)>>2)]=$403; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 64; break; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $404
      var $405=$B; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $406=(($405+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $407=HEAP32[(($406)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $408=$407; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $409=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $410=(($409+16)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $411=HEAPU32[(($410)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $412=((($408))>>>0) >= ((($411))>>>0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $413=((($412))&1); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=(($413)==(1)); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=((($414))|0)!=0; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($415) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 61: // $416
      var $417=$B; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $418=(($417+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $419=HEAP32[(($418)>>2)]; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F1=$419; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 63; break; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 62: // $420
      _abort(); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 63: // $421
      __label__ = 64; break;
    case 64: // $422
      var $423=$DV; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=$B; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=(($424+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($425)>>2)]=$423; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $426=$DV; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $427=$F1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=(($427+12)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($428)>>2)]=$426; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=$F1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $430=$DV; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $431=(($430+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($431)>>2)]=$429; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $432=$B; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $433=$DV; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=(($433+12)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($434)>>2)]=$432; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 65; break; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 65: // $435
      var $436=$rsize; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $437=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=(($437+8)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($438)>>2)]=$436; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $439=$r; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $440=$1; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=(($440+20)|0); //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($441)>>2)]=$439; //@line 4291 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 66; break;
    case 66: // $442
      var $443=$v; //@line 4293 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $444=$443; //@line 4293 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4293 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $445; //@line 4293 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $446
      __label__ = 68; break; //@line 4295 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 68: // $447
      _abort(); //@line 4297 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4297 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0; //@line 4194 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=$3; //@line 4195 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=(((-($4)))|0); //@line 4195 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$5; //@line 4195 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=$3; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=($6) >>> 8; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X=$7; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$X; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=((($8))|0)==0; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $10
      $idx=0; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 6; break; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $11
      var $12=$X; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=((($12))>>>0) > 65535; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $14
      $idx=31; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 5; break; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $15
      var $16=$X; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$16; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$Y; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=((($17)-256)|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=($18) >>> 16; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=($19) & 8; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$20; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=$N; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=$Y; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=($22) << ($21); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$23; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=((($23)-4096)|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=($24) >>> 16; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=($25) & 4; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$26; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=$K; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$N; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=((($28)+($27))|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$29; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$K; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=$Y; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=($31) << ($30); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$32; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=((($32)-16384)|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=($33) >>> 16; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=($34) & 2; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$35; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$N; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=((($36)+($35))|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$37; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=$N; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((14-($38))|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$K; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$Y; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=($41) << ($40); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$42; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=($42) >>> 15; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=((($39)+($43))|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$44; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=$K; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=($45) << 1; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=$3; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=$K; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=((($48)+7)|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=($47) >>> ((($49))>>>0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=($50) & 1; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=((($46)+($51))|0); //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $idx=$52; //@line 4198 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 5; break;
    case 5: // $53
      __label__ = 6; break;
    case 6: // $54
      var $55=$idx; //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$2; //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$59; //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=((($59))|0)!=0; //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($60) { __label__ = 7; break; } else { __label__ = 22; break; } //@line 4199 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $61
      var $62=$3; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$idx; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=((($63))|0)==31; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($64) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $65
      var $73 = 0;__label__ = 10; break; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $66
      var $67=$idx; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=($67) >>> 1; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=((($68)+8)|0); //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=((($69)-2)|0); //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=((31-($70))|0); //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73 = $71;__label__ = 10; break; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $72
      var $73; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=($62) << ($73); //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sizebits=$74; //@line 4201 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rst=0; //@line 4202 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 11; break; //@line 4203 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $75
      var $76=$t; //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=(($76+4)|0); //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=($78) & -8; //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=$3; //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=((($79)-($80))|0); //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $trem=$81; //@line 4205 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=$trem; //@line 4206 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=$rsize; //@line 4206 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=((($82))>>>0) < ((($83))>>>0); //@line 4206 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($84) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 4206 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $85
      var $86=$t; //@line 4207 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $v=$86; //@line 4207 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=$trem; //@line 4208 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$87; //@line 4208 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=((($87))|0)==0; //@line 4208 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($88) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4208 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $89
      __label__ = 21; break; //@line 4209 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $90
      __label__ = 15; break; //@line 4210 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $91
      var $92=$t; //@line 4211 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=(($92+16)|0); //@line 4211 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=(($93+4)|0); //@line 4211 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=HEAP32[(($94)>>2)]; //@line 4211 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rt=$95; //@line 4211 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=$sizebits; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=($96) >>> 31; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=($97) & 1; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$t; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=(($99+16)|0); //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=(($100+($98<<2))|0); //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=HEAP32[(($101)>>2)]; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$102; //@line 4212 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$rt; //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=((($103))|0)!=0; //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($104) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $105
      var $106=$rt; //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=$t; //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=((($106))|0)!=((($107))|0); //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($108) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4213 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $109
      var $110=$rt; //@line 4214 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rst=$110; //@line 4214 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 18; break; //@line 4214 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $111
      var $112=$t; //@line 4215 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=((($112))|0)==0; //@line 4215 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($113) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4215 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $114
      var $115=$rst; //@line 4216 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$115; //@line 4216 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 21; break; //@line 4217 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $116
      var $117=$sizebits; //@line 4219 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=($117) << 1; //@line 4219 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sizebits=$118; //@line 4219 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 11; break; //@line 4220 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $119
      __label__ = 22; break; //@line 4221 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $120
      var $121=$t; //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=((($121))|0)==0; //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($122) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $123
      var $124=$v; //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=((($124))|0)==0; //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($125) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 4222 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $126
      var $127=$idx; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=1 << ($127); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=($128) << 1; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=$idx; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=1 << ($130); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=($131) << 1; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=(((-($132)))|0); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=($129) | ($133); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$2; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=(($135+4)|0); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=($134) & ($137); //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leftbits=$138; //@line 4223 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$leftbits; //@line 4224 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=((($139))|0)!=0; //@line 4224 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($140) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4224 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $141
      var $142=$leftbits; //@line 4226 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=$leftbits; //@line 4226 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=(((-($143)))|0); //@line 4226 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=($142) & ($144); //@line 4226 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leastbit=$145; //@line 4226 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$leastbit; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=((($146)-1)|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$147; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=($148) >>> 12; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=($149) & 16; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$150; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N3=$151; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=($153) >>> ((($152))>>>0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$154; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=($155) >>> 5; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=($156) & 8; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$157; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$N3; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=((($158)+($157))|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N3=$159; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=($161) >>> ((($160))>>>0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$162; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=($163) >>> 2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=($164) & 4; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$165; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=$N3; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=((($166)+($165))|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N3=$167; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=($169) >>> ((($168))>>>0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$170; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=($171) >>> 1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=($172) & 2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$173; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $174=$N3; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=((($174)+($173))|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N3=$175; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=($177) >>> ((($176))>>>0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$178; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=($179) >>> 1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $181=($180) & 1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$181; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=$N3; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=((($182)+($181))|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N3=$183; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=$K2; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=($185) >>> ((($184))>>>0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y1=$186; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $187=$N3; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=$Y1; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=((($187)+($188))|0); //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$189; //@line 4227 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=$i; //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $191=$2; //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=(($191+304)|0); //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=(($192+($190<<2))|0); //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$194; //@line 4228 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 4229 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $195
      __label__ = 27; break; //@line 4230 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $196
      __label__ = 28; break; //@line 4232 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $197
      var $198=$t; //@line 4232 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=((($198))|0)!=0; //@line 4232 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($199) { __label__ = 29; break; } else { __label__ = 35; break; } //@line 4232 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $200
      var $201=$t; //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=(($201+4)|0); //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=HEAP32[(($202)>>2)]; //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=($203) & -8; //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=$3; //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=((($204)-($205))|0); //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $trem4=$206; //@line 4233 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=$trem4; //@line 4234 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=$rsize; //@line 4234 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=((($207))>>>0) < ((($208))>>>0); //@line 4234 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($209) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4234 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $210
      var $211=$trem4; //@line 4235 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$211; //@line 4235 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=$t; //@line 4236 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $v=$212; //@line 4236 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 31; break; //@line 4237 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $213
      var $214=$t; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=(($214+16)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $216=(($215)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $217=HEAP32[(($216)>>2)]; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=((($217))|0)!=0; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($218) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $219
      var $220=$t; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=(($220+16)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=(($221)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230 = $223;__label__ = 34; break; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $224
      var $225=$t; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=(($225+16)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230 = $228;__label__ = 34; break; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $229
      var $230; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $t=$230; //@line 4238 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 28; break; //@line 4239 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $231
      var $232=$v; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $233=((($232))|0)!=0; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($233) { __label__ = 36; break; } else { __label__ = 125; break; } //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $234
      var $235=$rsize; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=$2; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=(($236+8)|0); //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=HEAP32[(($237)>>2)]; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $239=$3; //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $240=((($238)-($239))|0); //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $241=((($235))>>>0) < ((($240))>>>0); //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($241) { __label__ = 37; break; } else { __label__ = 125; break; } //@line 4242 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $242
      var $243=$v; //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=$243; //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=$2; //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=(($245+16)|0); //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=HEAPU32[(($246)>>2)]; //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=((($244))>>>0) >= ((($247))>>>0); //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $249=((($248))&1); //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=(($249)==(1)); //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=((($250))|0)!=0; //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($251) { __label__ = 38; break; } else { __label__ = 124; break; } //@line 4243 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $252
      var $253=$v; //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $254=$253; //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $255=$3; //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $256=(($254+$255)|0); //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $257=$256; //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r=$257; //@line 4244 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=$v; //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=$258; //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=$r; //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=$260; //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $262=((($259))>>>0) < ((($261))>>>0); //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=((($262))&1); //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=(($263)==(1)); //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=((($264))|0)!=0; //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($265) { __label__ = 39; break; } else { __label__ = 123; break; } //@line 4246 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $266
      var $267=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $268=(($267+24)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP=$269; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $270=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=(($270+12)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $274=((($272))|0)!=((($273))|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($274) { __label__ = 40; break; } else { __label__ = 44; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $275
      var $276=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $277=(($276+8)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $278=HEAP32[(($277)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$278; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=(($279+12)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$281; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=$F; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=$282; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=HEAPU32[(($285)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=((($283))>>>0) >= ((($286))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=((($287))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $289=(($288)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $290=((($289))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($290) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $291
      var $292=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=$F; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=(($293+12)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($294)>>2)]=$292; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=$F; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=(($296+8)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($297)>>2)]=$295; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 43; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $298
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $299
      __label__ = 56; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $300
      var $301=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $302=(($301+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $303=(($302+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$303; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $304=HEAP32[(($303)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$304; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $305=((($304))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($305) { __label__ = 46; break; } else { __label__ = 45; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $306
      var $307=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $308=(($307+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309=(($308)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$309; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=HEAP32[(($309)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$310; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=((($310))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($311) { __label__ = 46; break; } else { __label__ = 55; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $312
      __label__ = 47; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $313
      var $314=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=(($314+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=(($315+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$316; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=HEAP32[(($316)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=((($317))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($318) { var $326 = 1;__label__ = 49; break; } else { __label__ = 48; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $319
      var $320=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=(($320+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=(($321)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$322; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=HEAP32[(($322)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=((($323))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326 = $324;__label__ = 49; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $325
      var $326;
      if ($326) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $327
      var $328=$CP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$328; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $329=HEAP32[(($328)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$329; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 47; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 51: // $330
      var $331=$RP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $332=$331; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $333=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $334=(($333+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=HEAPU32[(($334)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=((($332))>>>0) >= ((($335))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $337=((($336))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $338=(($337)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=((($338))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($339) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $340
      var $341=$RP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($341)>>2)]=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 54; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 53: // $342
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $343
      __label__ = 55; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $344
      __label__ = 56; break;
    case 56: // $345
      var $346=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=((($346))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($347) { __label__ = 57; break; } else { __label__ = 84; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 57: // $348
      var $349=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=(($349+28)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $353=(($352+304)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $354=(($353+($351<<2))|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$354; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=$H; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $357=HEAP32[(($356)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=((($355))|0)==((($357))|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($358) { __label__ = 58; break; } else { __label__ = 61; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $359
      var $360=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=$H; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($361)>>2)]=$360; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $362=((($360))|0)==0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($362) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $363
      var $364=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=(($364+28)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $366=HEAP32[(($365)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=1 << ($366); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=($367) ^ -1; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=(($369+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=HEAP32[(($370)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=($371) & ($368); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($370)>>2)]=$372; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 60; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $373
      __label__ = 68; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 61: // $374
      var $375=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=$375; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $377=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $378=(($377+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $379=HEAPU32[(($378)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=((($376))>>>0) >= ((($379))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=((($380))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=(($381)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $383=((($382))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($383) { __label__ = 62; break; } else { __label__ = 66; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 62: // $384
      var $385=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=(($385+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=(($386)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $389=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=((($388))|0)==((($389))|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($390) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 63: // $391
      var $392=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $393=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=(($393+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=(($394)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($395)>>2)]=$392; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 65; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 64: // $396
      var $397=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $398=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $399=(($398+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($400)>>2)]=$397; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 65; break;
    case 65: // $401
      __label__ = 67; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 66: // $402
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $403
      __label__ = 68; break;
    case 68: // $404
      var $405=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $406=((($405))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($406) { __label__ = 69; break; } else { __label__ = 83; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 69: // $407
      var $408=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $409=$408; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $410=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $412=HEAPU32[(($411)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $413=((($409))>>>0) >= ((($412))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=((($413))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=(($414)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $416=((($415))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($416) { __label__ = 70; break; } else { __label__ = 81; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 70: // $417
      var $418=$XP; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $419=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $420=(($419+24)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $421=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $422=(($421+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $423=(($422)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=HEAP32[(($423)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C0=$424; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=((($424))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($425) { __label__ = 71; break; } else { __label__ = 75; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 71: // $426
      var $427=$C0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=$427; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $430=(($429+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $431=HEAPU32[(($430)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $432=((($428))>>>0) >= ((($431))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $433=((($432))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=(($433)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $435=((($434))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($435) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 72: // $436
      var $437=$C0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $439=(($438+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $440=(($439)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($440)>>2)]=$437; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $442=$C0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $443=(($442+24)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($443)>>2)]=$441; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 74; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 73: // $444
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 74: // $445
      __label__ = 75; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 75: // $446
      var $447=$v; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $448=(($447+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $449=(($448+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $450=HEAP32[(($449)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C1=$450; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $451=((($450))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($451) { __label__ = 76; break; } else { __label__ = 80; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 76: // $452
      var $453=$C1; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $454=$453; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $455=$2; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $456=(($455+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $457=HEAPU32[(($456)>>2)]; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $458=((($454))>>>0) >= ((($457))>>>0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $459=((($458))&1); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $460=(($459)==(1)); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $461=((($460))|0)!=0; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($461) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 77: // $462
      var $463=$C1; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $464=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $465=(($464+16)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $466=(($465+4)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($466)>>2)]=$463; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $467=$R; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $468=$C1; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $469=(($468+24)|0); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 79; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 78: // $470
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 79: // $471
      __label__ = 80; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 80: // $472
      __label__ = 82; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 81: // $473
      _abort(); //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 82: // $474
      __label__ = 83; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 83: // $475
      __label__ = 84; break; //@line 4247 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 84: // $476
      var $477=$rsize; //@line 4248 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $478=((($477))>>>0) < 16; //@line 4248 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($478) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4248 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 85: // $479
      var $480=$rsize; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $481=$3; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $482=((($480)+($481))|0); //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $483=($482) | 1; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $484=($483) | 2; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $485=$v; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $486=(($485+4)|0); //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $487=$v; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $488=$487; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $489=$rsize; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $490=$3; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $491=((($489)+($490))|0); //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $492=(($488+$491)|0); //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $493=$492; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $494=(($493+4)|0); //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $495=HEAP32[(($494)>>2)]; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $496=($495) | 1; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($494)>>2)]=$496; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 122; break; //@line 4249 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 86: // $497
      var $498=$3; //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $499=($498) | 1; //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $500=($499) | 2; //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $501=$v; //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $502=(($501+4)|0); //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($502)>>2)]=$500; //@line 4251 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $503=$rsize; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $504=($503) | 1; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $505=$r; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $507=$rsize; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $508=$r; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $509=$508; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $510=$rsize; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $511=(($509+$510)|0); //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $512=$511; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $513=(($512)|0); //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($513)>>2)]=$507; //@line 4252 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $514=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $515=($514) >>> 3; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $516=((($515))>>>0) < 32; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($516) { __label__ = 87; break; } else { __label__ = 94; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 87: // $517
      var $518=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $519=($518) >>> 3; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$519; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $520=$I; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $521=($520) << 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $522=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $523=(($522+40)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $524=(($523+($521<<2))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $525=$524; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $526=$525; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$526; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $527=$B; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F5=$527; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $528=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $529=(($528)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $530=HEAP32[(($529)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $531=$I; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $532=1 << ($531); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $533=($530) & ($532); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $534=((($533))|0)!=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($534) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 88: // $535
      var $536=$I; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $537=1 << ($536); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $538=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $539=(($538)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $540=HEAP32[(($539)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $541=($540) | ($537); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($539)>>2)]=$541; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 93; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 89: // $542
      var $543=$B; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $544=(($543+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $545=HEAP32[(($544)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $546=$545; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $547=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $548=(($547+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $549=HEAPU32[(($548)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $550=((($546))>>>0) >= ((($549))>>>0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $551=((($550))&1); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $552=(($551)==(1)); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $553=((($552))|0)!=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($553) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 90: // $554
      var $555=$B; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $556=(($555+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $557=HEAP32[(($556)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F5=$557; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 92; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 91: // $558
      _abort(); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 92: // $559
      __label__ = 93; break;
    case 93: // $560
      var $561=$r; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $562=$B; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $563=(($562+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($563)>>2)]=$561; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $564=$r; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $565=$F5; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $566=(($565+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($566)>>2)]=$564; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $567=$F5; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $568=$r; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $569=(($568+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($569)>>2)]=$567; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $570=$B; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $571=$r; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $572=(($571+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($572)>>2)]=$570; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 94: // $573
      var $574=$r; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $575=$574; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP=$575; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $576=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $577=($576) >>> 8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X8=$577; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $578=$X8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $579=((($578))|0)==0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($579) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 95: // $580
      $I7=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 100; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 96: // $581
      var $582=$X8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $583=((($582))>>>0) > 65535; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($583) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 97: // $584
      $I7=31; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 99; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 98: // $585
      var $586=$X8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y9=$586; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $587=$Y9; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $588=((($587)-256)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $589=($588) >>> 16; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $590=($589) & 8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N10=$590; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $591=$N10; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $592=$Y9; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $593=($592) << ($591); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y9=$593; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $594=((($593)-4096)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $595=($594) >>> 16; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $596=($595) & 4; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K11=$596; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $597=$K11; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $598=$N10; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $599=((($598)+($597))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N10=$599; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $600=$K11; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $601=$Y9; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $602=($601) << ($600); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y9=$602; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $603=((($602)-16384)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $604=($603) >>> 16; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $605=($604) & 2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K11=$605; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $606=$N10; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $607=((($606)+($605))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N10=$607; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $608=$N10; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $609=((14-($608))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $610=$K11; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $611=$Y9; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $612=($611) << ($610); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y9=$612; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $613=($612) >>> 15; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $614=((($609)+($613))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K11=$614; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $615=$K11; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $616=($615) << 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $617=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $618=$K11; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $619=((($618)+7)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $620=($617) >>> ((($619))>>>0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $621=($620) & 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $622=((($616)+($621))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I7=$622; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 99; break;
    case 99: // $623
      __label__ = 100; break;
    case 100: // $624
      var $625=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $626=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $627=(($626+304)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $628=(($627+($625<<2))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H6=$628; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $629=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $630=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $631=(($630+28)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($631)>>2)]=$629; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $632=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $633=(($632+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $634=(($633+4)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($634)>>2)]=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $635=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $636=(($635+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $637=(($636)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($637)>>2)]=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $638=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $639=(($638+4)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $640=HEAP32[(($639)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $641=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $642=1 << ($641); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $643=($640) & ($642); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $644=((($643))|0)!=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($644) { __label__ = 102; break; } else { __label__ = 101; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 101: // $645
      var $646=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $647=1 << ($646); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $648=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $649=(($648+4)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $650=HEAP32[(($649)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $651=($650) | ($647); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($649)>>2)]=$651; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $652=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $653=$H6; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($653)>>2)]=$652; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $654=$H6; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $655=$654; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $656=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $657=(($656+24)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($657)>>2)]=$655; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $658=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $659=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $660=(($659+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($660)>>2)]=$658; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $661=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $662=(($661+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($662)>>2)]=$658; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 120; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 102: // $663
      var $664=$H6; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $665=HEAP32[(($664)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$665; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $666=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $667=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $668=((($667))|0)==31; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($668) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 103: // $669
      var $677 = 0;__label__ = 105; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 104: // $670
      var $671=$I7; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $672=($671) >>> 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $673=((($672)+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $674=((($673)-2)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $675=((31-($674))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $677 = $675;__label__ = 105; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 105: // $676
      var $677; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $678=($666) << ($677); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K12=$678; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 106; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 106: // $679
      var $680=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $681=(($680+4)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $682=HEAP32[(($681)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $683=($682) & -8; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $684=$rsize; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $685=((($683))|0)!=((($684))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($685) { __label__ = 107; break; } else { __label__ = 113; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 107: // $686
      var $687=$K12; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $688=($687) >>> 31; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $689=($688) & 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $690=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $691=(($690+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $692=(($691+($689<<2))|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C=$692; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $693=$K12; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $694=($693) << 1; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K12=$694; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $695=$C; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $696=HEAP32[(($695)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $697=((($696))|0)!=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($697) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 108: // $698
      var $699=$C; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $700=HEAP32[(($699)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$700; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 112; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 109: // $701
      var $702=$C; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $703=$702; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $704=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $705=(($704+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $706=HEAPU32[(($705)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $707=((($703))>>>0) >= ((($706))>>>0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $708=((($707))&1); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $709=(($708)==(1)); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $710=((($709))|0)!=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($710) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 110: // $711
      var $712=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $713=$C; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($713)>>2)]=$712; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $714=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $715=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $716=(($715+24)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($716)>>2)]=$714; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $717=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $718=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $719=(($718+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($719)>>2)]=$717; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $720=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $721=(($720+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($721)>>2)]=$717; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 119; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 111: // $722
      _abort(); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 112: // $723
      __label__ = 118; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 113: // $724
      var $725=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $726=(($725+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $727=HEAP32[(($726)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F13=$727; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $728=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $729=$728; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $730=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $731=(($730+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $732=HEAPU32[(($731)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $733=((($729))>>>0) >= ((($732))>>>0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($733) { __label__ = 114; break; } else { var $742 = 0;__label__ = 115; break; } //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 114: // $734
      var $735=$F13; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $736=$735; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $737=$2; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $738=(($737+16)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $739=HEAPU32[(($738)>>2)]; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $740=((($736))>>>0) >= ((($739))>>>0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $742 = $740;__label__ = 115; break;
    case 115: // $741
      var $742;
      var $743=((($742))&1);
      var $744=(($743)==(1));
      var $745=((($744))|0)!=0;
      if ($745) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: // $746
      var $747=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $748=$F13; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $749=(($748+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($749)>>2)]=$747; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $750=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $751=(($750+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($751)>>2)]=$747; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $752=$F13; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $753=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $754=(($753+8)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($754)>>2)]=$752; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $755=$T; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $756=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $757=(($756+12)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($757)>>2)]=$755; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $758=$TP; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $759=(($758+24)|0); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($759)>>2)]=0; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 119; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 117: // $760
      _abort(); //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 118: // $761
      __label__ = 106; break; //@line 4253 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 119: // $762
      __label__ = 120; break;
    case 120: // $763
      __label__ = 121; break;
    case 121: // $764
      __label__ = 122; break;
    case 122: // $765
      var $766=$v; //@line 4255 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $767=$766; //@line 4255 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $768=(($767+8)|0); //@line 4255 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$768; //@line 4255 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 126; break; //@line 4255 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 123: // $769
      __label__ = 124; break; //@line 4257 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 124: // $770
      _abort(); //@line 4258 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4258 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 125: // $771
      $1=0; //@line 4260 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 126; break; //@line 4260 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 126: // $772
      var $773=$1; //@line 4261 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $773; //@line 4261 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1; //@line 3876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=((($4))|0)!=0; //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $6
      var $7=_init_mparams(); //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $9
      ;
      ; //@line 3880 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$2; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=(($12+440)|0); //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=($14) & 0; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=((($15))|0)!=0; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $17
      var $18=$3; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=((($18))>>>0) >= ((($19))>>>0); //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $21
      var $22=$2; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=(($22+12)|0); //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($24))|0)!=0; //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 3883 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $26
      var $27=$2; //@line 3884 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$3; //@line 3884 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=_mmap_alloc($27, $28); //@line 3884 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$29; //@line 3884 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$mem; //@line 3885 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=((($30))|0)!=0; //@line 3885 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3885 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $32
      var $33=$mem; //@line 3886 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$33; //@line 3886 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 91; break; //@line 3886 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $34
      __label__ = 8; break; //@line 3887 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $35
      var $36=$2; //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=(($36+440)|0); //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=($38) & 4; //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=((($39))|0)!=0; //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($40) { __label__ = 41; break; } else { __label__ = 9; break; } //@line 3911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $41
      $br=-1; //@line 3912 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=$2; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=(($42+24)|0); //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=((($44))|0)==0; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $46
      var $55 = 0;__label__ = 12; break; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $47
      var $48=$2; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=$2; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=(($49+24)|0); //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=HEAP32[(($50)>>2)]; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$51; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=_segment_holding($48, $52); //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55 = $53;__label__ = 12; break; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $54
      var $55; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $ss=$55; //@line 3913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize=0; //@line 3914 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$ss; //@line 3917 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=((($56))|0)==0; //@line 3917 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($57) { __label__ = 13; break; } else { __label__ = 21; break; } //@line 3917 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $58
      var $59=_sbrk(0); //@line 3918 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $base=$59; //@line 3918 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$base; //@line 3919 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=((($60))|0)!=-1; //@line 3919 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($61) { __label__ = 14; break; } else { __label__ = 20; break; } //@line 3919 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $62
      var $63=$3; //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=((($63)+48)|0); //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=((($65)-1)|0); //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=((($64)+($66))|0); //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=((($68)-1)|0); //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=($69) ^ -1; //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=($67) & ($70); //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize=$71; //@line 3920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=$base; //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=($72); //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=((($74)-1)|0); //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=($73) & ($75); //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=((($76))|0)==0; //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($77) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3922 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $78
      var $79=$base; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=($79); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=((($81)-1)|0); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=((($80)+($82))|0); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=((($84)-1)|0); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=($85) ^ -1; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=($83) & ($86); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$base; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=($88); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=((($87)-($89))|0); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=$asize; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=((($91)+($90))|0); //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize=$92; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 16; break; //@line 3923 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $93
      var $94=$asize; //@line 3925 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=((($94))>>>0) < 2147483647; //@line 3925 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($95) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 3925 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $96
      var $97=$asize; //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=_sbrk($97); //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $br=$98; //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$base; //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=((($98))|0)==((($99))|0); //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($100) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3926 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $101
      var $102=$base; //@line 3927 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tbase=$102; //@line 3927 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$asize; //@line 3928 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$103; //@line 3928 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 3929 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $104
      __label__ = 20; break; //@line 3930 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $105
      __label__ = 25; break; //@line 3931 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $106
      var $107=$3; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=$2; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=(($108+12)|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=((($107)-($110))|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=((($111)+48)|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=((($113)-1)|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=((($112)+($114))|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=((($116)-1)|0); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=($117) ^ -1; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=($115) & ($118); //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize=$119; //@line 3934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=$asize; //@line 3936 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=((($120))>>>0) < 2147483647; //@line 3936 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($121) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3936 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $122
      var $123=$asize; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=_sbrk($123); //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $br=$124; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=$ss; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=(($125)|0); //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=$ss; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=(($128+4)|0); //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=(($127+$130)|0); //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=((($124))|0)==((($131))|0); //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($132) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3937 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $133
      var $134=$br; //@line 3938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tbase=$134; //@line 3938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$asize; //@line 3939 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$135; //@line 3939 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 24; break; //@line 3940 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $136
      __label__ = 25; break;
    case 25: // $137
      var $138=$tbase; //@line 3943 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=((($138))|0)==-1; //@line 3943 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($139) { __label__ = 26; break; } else { __label__ = 40; break; } //@line 3943 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $140
      var $141=$br; //@line 3944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=((($141))|0)!=-1; //@line 3944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($142) { __label__ = 27; break; } else { __label__ = 36; break; } //@line 3944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $143
      var $144=$asize; //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=((($144))>>>0) < 2147483647; //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($145) { __label__ = 28; break; } else { __label__ = 35; break; } //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $146
      var $147=$asize; //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=$3; //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=((($148)+48)|0); //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=((($147))>>>0) < ((($149))>>>0); //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($150) { __label__ = 29; break; } else { __label__ = 35; break; } //@line 3945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $151
      var $152=$3; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=((($152)+48)|0); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=$asize; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=((($153)-($154))|0); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=((($156)-1)|0); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=((($155)+($157))|0); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=((($159)-1)|0); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=($160) ^ -1; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=($158) & ($161); //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $esize=$162; //@line 3947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=$esize; //@line 3948 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=((($163))>>>0) < 2147483647; //@line 3948 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($164) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 3948 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $165
      var $166=$esize; //@line 3949 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=_sbrk($166); //@line 3949 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $end=$167; //@line 3949 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=$end; //@line 3950 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=((($168))|0)!=-1; //@line 3950 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($169) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 3950 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $170
      var $171=$esize; //@line 3951 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=$asize; //@line 3951 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=((($172)+($171))|0); //@line 3951 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize=$173; //@line 3951 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 3951 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $174
      var $175=$asize; //@line 3953 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=(((-($175)))|0); //@line 3953 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=_sbrk($176); //@line 3953 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $br=-1; //@line 3954 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break;
    case 33: // $178
      __label__ = 34; break; //@line 3956 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $179
      __label__ = 35; break; //@line 3957 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $180
      __label__ = 36; break; //@line 3958 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $181
      var $182=$br; //@line 3959 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=((($182))|0)!=-1; //@line 3959 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($183) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3959 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $184
      var $185=$br; //@line 3960 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tbase=$185; //@line 3960 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=$asize; //@line 3961 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$186; //@line 3961 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 39; break; //@line 3962 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $187
      var $188=$2; //@line 3964 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=(($188+440)|0); //@line 3964 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 3964 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $191=($190) | 4; //@line 3964 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($189)>>2)]=$191; //@line 3964 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 39; break;
    case 39: // $192
      __label__ = 40; break; //@line 3965 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $193
      __label__ = 41; break; //@line 3968 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $194
      var $195=$tbase; //@line 3982 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=((($195))|0)==-1; //@line 3982 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($196) { __label__ = 42; break; } else { __label__ = 51; break; } //@line 3982 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $197
      var $198=$3; //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=((($198)+48)|0); //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=((($200)-1)|0); //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=((($199)+($201))|0); //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=((($203)-1)|0); //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=($204) ^ -1; //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=($202) & ($205); //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asize1=$206; //@line 3983 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=$asize1; //@line 3984 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=((($207))>>>0) < 2147483647; //@line 3984 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($208) { __label__ = 43; break; } else { __label__ = 50; break; } //@line 3984 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $209
      $br2=-1; //@line 3985 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $end3=-1; //@line 3986 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=$asize1; //@line 3988 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=_sbrk($210); //@line 3988 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $br2=$211; //@line 3988 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=_sbrk(0); //@line 3989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $end3=$212; //@line 3989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=$br2; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $214=((($213))|0)!=-1; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($214) { __label__ = 44; break; } else { __label__ = 49; break; } //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $215
      var $216=$end3; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $217=((($216))|0)!=-1; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($217) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $218
      var $219=$br2; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $220=$end3; //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=((($219))>>>0) < ((($220))>>>0); //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($221) { __label__ = 46; break; } else { __label__ = 49; break; } //@line 3991 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $222
      var $223=$end3; //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=$br2; //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=($223); //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=($224); //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=((($225)-($226))|0); //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $ssize=$227; //@line 3992 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=$ssize; //@line 3993 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=$3; //@line 3993 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=((($229)+40)|0); //@line 3993 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=((($228))>>>0) > ((($230))>>>0); //@line 3993 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($231) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 3993 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $232
      var $233=$br2; //@line 3994 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tbase=$233; //@line 3994 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=$ssize; //@line 3995 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$234; //@line 3995 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 48; break; //@line 3996 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $235
      __label__ = 49; break; //@line 3997 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $236
      __label__ = 50; break; //@line 3998 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $237
      __label__ = 51; break; //@line 3999 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 51: // $238
      var $239=$tbase; //@line 4001 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $240=((($239))|0)!=-1; //@line 4001 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($240) { __label__ = 52; break; } else { __label__ = 90; break; } //@line 4001 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $241
      var $242=$tsize; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=$2; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=(($243+432)|0); //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=((($245)+($242))|0); //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($244)>>2)]=$246; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=$2; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=(($247+436)|0); //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=((($246))>>>0) > ((($249))>>>0); //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($250) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 4003 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 53: // $251
      var $252=$2; //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $253=(($252+432)|0); //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $254=HEAP32[(($253)>>2)]; //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $255=$2; //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $256=(($255+436)|0); //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($256)>>2)]=$254; //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 54; break; //@line 4004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $257
      var $258=$2; //@line 4006 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=(($258+24)|0); //@line 4006 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=HEAP32[(($259)>>2)]; //@line 4006 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=((($260))|0)!=0; //@line 4006 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($261) { __label__ = 62; break; } else { __label__ = 55; break; } //@line 4006 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $262
      var $263=$2; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=HEAP32[(($264)>>2)]; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $266=((($265))|0)==0; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($266) { __label__ = 57; break; } else { __label__ = 56; break; } //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 56: // $267
      var $268=$tbase; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $269=$2; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $270=(($269+16)|0); //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=HEAPU32[(($270)>>2)]; //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=((($268))>>>0) < ((($271))>>>0); //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($272) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4007 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 57: // $273
      var $274=$tbase; //@line 4008 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $275=$2; //@line 4008 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=(($275+16)|0); //@line 4008 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($276)>>2)]=$274; //@line 4008 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 58; break; //@line 4008 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $277
      var $278=$tbase; //@line 4009 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=$2; //@line 4009 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=(($279+444)|0); //@line 4009 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $281=(($280)|0); //@line 4009 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($281)>>2)]=$278; //@line 4009 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=$tsize; //@line 4010 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=$2; //@line 4010 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=(($283+444)|0); //@line 4010 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=(($284+4)|0); //@line 4010 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($285)>>2)]=$282; //@line 4010 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=$mmap_flag; //@line 4011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=$2; //@line 4011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=(($287+444)|0); //@line 4011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $289=(($288+12)|0); //@line 4011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($289)>>2)]=$286; //@line 4011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $290=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $291=$2; //@line 4012 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=(($291+36)|0); //@line 4012 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 4012 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=$2; //@line 4013 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=(($293+32)|0); //@line 4013 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($294)>>2)]=-1; //@line 4013 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=$2; //@line 4014 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_bins($295); //@line 4014 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=$2; //@line 4016 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=((($296))|0)==(((__gm_))|0); //@line 4016 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($297) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4016 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $298
      var $299=$2; //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $300=$tbase; //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $301=$300; //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $302=$tsize; //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $303=((($302)-40)|0); //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_top($299, $301, $303); //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 61; break; //@line 4017 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $304
      var $305=$2; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $306=$305; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=(($306-8)|0); //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $308=$307; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309=$308; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=$2; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=$310; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=(($311-8)|0); //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=$312; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=(($313+4)|0); //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=HEAP32[(($314)>>2)]; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=($315) & -8; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=(($309+$316)|0); //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=$317; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mn=$318; //@line 4022 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $319=$2; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=$mn; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=$tbase; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=$tsize; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=(($321+$322)|0); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=$mn; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=$324; //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=($323); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $327=($325); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $328=((($326)-($327))|0); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $329=((($328)-40)|0); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_top($319, $320, $329); //@line 4023 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 61; break;
    case 61: // $330
      __label__ = 87; break; //@line 4025 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 62: // $331
      var $332=$2; //@line 4029 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $333=(($332+444)|0); //@line 4029 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$333; //@line 4029 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 63; break; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 63: // $334
      var $335=$sp; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=((($335))|0)!=0; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($336) { __label__ = 64; break; } else { var $348 = 0;__label__ = 65; break; } //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 64: // $337
      var $338=$tbase; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=$sp; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=(($339)|0); //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=HEAP32[(($340)>>2)]; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=$sp; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $344=HEAP32[(($343)>>2)]; //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=(($341+$344)|0); //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=((($338))|0)!=((($345))|0); //@line 4031 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348 = $346;__label__ = 65; break;
    case 65: // $347
      var $348;
      if ($348) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: // $349
      var $350=$sp; //@line 4032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=(($350+8)|0); //@line 4032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$352; //@line 4032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 63; break; //@line 4032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $353
      var $354=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=((($354))|0)!=0; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($355) { __label__ = 68; break; } else { __label__ = 73; break; } //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 68: // $356
      var $357=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=(($357+12)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=($359) & 8; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=((($360))|0)!=0; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($361) { __label__ = 73; break; } else { __label__ = 69; break; } //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 69: // $362
      var $363=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=(($363+12)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=HEAP32[(($364)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $366=($365) & 0; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=$mmap_flag; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=((($366))|0)==((($367))|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($368) { __label__ = 70; break; } else { __label__ = 73; break; } //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 70: // $369
      var $370=$2; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=(($370+24)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=HEAP32[(($371)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $373=$372; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=(($374)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=HEAPU32[(($375)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $377=((($373))>>>0) >= ((($376))>>>0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($377) { __label__ = 71; break; } else { __label__ = 73; break; } //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 71: // $378
      var $379=$2; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=(($379+24)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=HEAP32[(($380)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=$381; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $383=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $384=(($383)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=$sp; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=(($386+4)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $389=(($385+$388)|0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=((($382))>>>0) < ((($389))>>>0); //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($390) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 72: // $391
      var $392=$tsize; //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $393=$sp; //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=(($393+4)|0); //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=HEAP32[(($394)>>2)]; //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $396=((($395)+($392))|0); //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($394)>>2)]=$396; //@line 4037 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $397=$2; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $398=$2; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $399=(($398+24)|0); //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $400=HEAP32[(($399)>>2)]; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $401=$2; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $402=(($401+12)|0); //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $403=HEAP32[(($402)>>2)]; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $404=$tsize; //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $405=((($403)+($404))|0); //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_top($397, $400, $405); //@line 4038 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 86; break; //@line 4039 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 73: // $406
      var $407=$tbase; //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $408=$2; //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $409=(($408+16)|0); //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $410=HEAPU32[(($409)>>2)]; //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $411=((($407))>>>0) < ((($410))>>>0); //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($411) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4041 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 74: // $412
      var $413=$tbase; //@line 4042 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=$2; //@line 4042 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=(($414+16)|0); //@line 4042 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($415)>>2)]=$413; //@line 4042 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 75; break; //@line 4042 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 75: // $416
      var $417=$2; //@line 4043 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $418=(($417+444)|0); //@line 4043 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$418; //@line 4043 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 76; break; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 76: // $419
      var $420=$sp; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $421=((($420))|0)!=0; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($421) { __label__ = 77; break; } else { var $431 = 0;__label__ = 78; break; } //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 77: // $422
      var $423=$sp; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=(($423)|0); //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=HEAP32[(($424)>>2)]; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $426=$tbase; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $427=$tsize; //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=(($426+$427)|0); //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=((($425))|0)!=((($428))|0); //@line 4044 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $431 = $429;__label__ = 78; break;
    case 78: // $430
      var $431;
      if ($431) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: // $432
      var $433=$sp; //@line 4045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=(($433+8)|0); //@line 4045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$435; //@line 4045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 76; break; //@line 4045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 80: // $436
      var $437=$sp; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=((($437))|0)!=0; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($438) { __label__ = 81; break; } else { __label__ = 84; break; } //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 81: // $439
      var $440=$sp; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=(($440+12)|0); //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $442=HEAP32[(($441)>>2)]; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $443=($442) & 8; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $444=((($443))|0)!=0; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($444) { __label__ = 84; break; } else { __label__ = 82; break; } //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 82: // $445
      var $446=$sp; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $447=(($446+12)|0); //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $448=HEAP32[(($447)>>2)]; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $449=($448) & 0; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $450=$mmap_flag; //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $451=((($449))|0)==((($450))|0); //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($451) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 4046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 83: // $452
      var $453=$sp; //@line 4049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $454=(($453)|0); //@line 4049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $455=HEAP32[(($454)>>2)]; //@line 4049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldbase=$455; //@line 4049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $456=$tbase; //@line 4050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $457=$sp; //@line 4050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $458=(($457)|0); //@line 4050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($458)>>2)]=$456; //@line 4050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $459=$tsize; //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $460=$sp; //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $461=(($460+4)|0); //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $462=HEAP32[(($461)>>2)]; //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $463=((($462)+($459))|0); //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($461)>>2)]=$463; //@line 4051 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $464=$2; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $465=$tbase; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $466=$oldbase; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $467=$3; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $468=_prepend_alloc($464, $465, $466, $467); //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$468; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 91; break; //@line 4052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 84: // $469
      var $470=$2; //@line 4055 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $471=$tbase; //@line 4055 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $472=$tsize; //@line 4055 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $473=$mmap_flag; //@line 4055 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _add_segment($470, $471, $472, $473); //@line 4055 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 85; break;
    case 85: // $474
      __label__ = 86; break;
    case 86: // $475
      __label__ = 87; break;
    case 87: // $476
      var $477=$3; //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $478=$2; //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $479=(($478+12)|0); //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $480=HEAPU32[(($479)>>2)]; //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $481=((($477))>>>0) < ((($480))>>>0); //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($481) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 88: // $482
      var $483=$3; //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $484=$2; //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $485=(($484+12)|0); //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $486=HEAP32[(($485)>>2)]; //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $487=((($486)-($483))|0); //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($485)>>2)]=$487; //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$487; //@line 4060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $488=$2; //@line 4061 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $489=(($488+24)|0); //@line 4061 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $490=HEAP32[(($489)>>2)]; //@line 4061 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$490; //@line 4061 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $491=$p; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $492=$491; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $493=$3; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $494=(($492+$493)|0); //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $495=$494; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $496=$2; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $497=(($496+24)|0); //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $r=$495; //@line 4062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $498=$rsize; //@line 4063 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $499=($498) | 1; //@line 4063 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $500=$r; //@line 4063 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $501=(($500+4)|0); //@line 4063 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($501)>>2)]=$499; //@line 4063 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $502=$3; //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $503=($502) | 1; //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $504=($503) | 2; //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $505=$p; //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $507=$p; //@line 4067 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $508=$507; //@line 4067 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $509=(($508+8)|0); //@line 4067 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$509; //@line 4067 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 91; break; //@line 4067 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 89: // $510
      __label__ = 90; break; //@line 4069 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 90: // $511
      var $512=___errno(); //@line 4071 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($512)>>2)]=12; //@line 4071 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=0; //@line 4072 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 91; break; //@line 4072 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 91: // $513
      var $514=$1; //@line 4073 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $514; //@line 4073 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1; //@line 4740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))|0)!=0; //@line 4740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 1; break; } else { __label__ = 195; break; } //@line 4740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=$1; //@line 4741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=(($5-8)|0); //@line 4741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=$6; //@line 4741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$7; //@line 4741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$p; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=$8; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=((($9))>>>0) >= ((($10))>>>0); //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($11) { __label__ = 2; break; } else { var $19 = 0;__label__ = 3; break; } //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $12
      var $13=$p; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=($15) & 3; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((($16))|0)!=1; //@line 4753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19 = $17;__label__ = 3; break;
    case 3: // $18
      var $19;
      var $20=((($19))&1);
      var $21=(($20)==(1));
      var $22=((($21))|0)!=0;
      if ($22) { __label__ = 4; break; } else { __label__ = 192; break; }
    case 4: // $23
      var $24=$p; //@line 4754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=(($24+4)|0); //@line 4754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 4754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26) & -8; //@line 4754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$27; //@line 4754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$p; //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=$28; //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$psize; //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=(($29+$30)|0); //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=$31; //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $next=$32; //@line 4755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=$p; //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=(($33+4)|0); //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=($35) & 1; //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=((($36))|0)!=0; //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($37) { __label__ = 76; break; } else { __label__ = 5; break; } //@line 4756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $38
      var $39=$p; //@line 4757 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=(($39)|0); //@line 4757 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 4757 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $prevsize=$41; //@line 4757 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=$p; //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=(($42+4)|0); //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=($44) & 3; //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=((($45))|0)==0; //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($46) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4758 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $47
      var $48=$prevsize; //@line 4759 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=((($48)+16)|0); //@line 4759 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=$psize; //@line 4759 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=((($50)+($49))|0); //@line 4759 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$51; //@line 4759 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 194; break; //@line 4762 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $52
      var $53=$p; //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=$53; //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=$prevsize; //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=(((-($55)))|0); //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=(($54+$56)|0); //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=$57; //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $prev=$58; //@line 4765 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$prevsize; //@line 4766 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$psize; //@line 4766 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=((($60)+($59))|0); //@line 4766 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$61; //@line 4766 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=$prev; //@line 4767 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$62; //@line 4767 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$prev; //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$63; //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=((($64))>>>0) >= ((($65))>>>0); //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=((($66))&1); //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=(($67)==(1)); //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=((($68))|0)!=0; //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($69) { __label__ = 8; break; } else { __label__ = 73; break; } //@line 4768 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $70
      var $71=$p; //@line 4769 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4769 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=((($71))|0)!=((($72))|0); //@line 4769 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($73) { __label__ = 9; break; } else { __label__ = 69; break; } //@line 4769 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $74
      var $75=$prevsize; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=($75) >>> 3; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=((($76))>>>0) < 32; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($77) { __label__ = 10; break; } else { __label__ = 22; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $78
      var $79=$p; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=(($79+8)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$81; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=$p; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=(($82+12)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$84; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$prevsize; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=($85) >>> 3; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$86; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=$F; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$B; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=((($87))|0)==((($88))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($89) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $90
      var $91=$I; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=1 << ($91); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=($92) ^ -1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=HEAP32[((((__gm_)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=($94) & ($93); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$95; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 21; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $96
      var $97=$F; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=$I; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=($98) << 1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=((((__gm_+40)|0)+($99<<2))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$100; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$101; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=((($97))|0)==((($102))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($103) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $104
      var $105=$F; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=$105; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=((($106))>>>0) >= ((($107))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($108) { __label__ = 14; break; } else { var $125 = 0;__label__ = 17; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $109
      var $110=$B; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$I; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=($111) << 1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=((((__gm_+40)|0)+($112<<2))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=$113; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=$114; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=((($110))|0)==((($115))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($116) { var $123 = 1;__label__ = 16; break; } else { __label__ = 15; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $117
      var $118=$B; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=$118; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=((($119))>>>0) >= ((($120))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123 = $121;__label__ = 16; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $122
      var $123;
      var $125 = $123;__label__ = 17; break;
    case 17: // $124
      var $125;
      var $126=((($125))&1);
      var $127=(($126)==(1));
      var $128=((($127))|0)!=0;
      if ($128) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: // $129
      var $130=$B; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=$F; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($132)>>2)]=$130; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=$F; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=$B; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=(($134+8)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($135)>>2)]=$133; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 20; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $136
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $137
      __label__ = 21; break;
    case 21: // $138
      __label__ = 68; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $139
      var $140=$p; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=$140; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP=$141; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=(($142+24)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP=$144; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=(($145+12)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=((($147))|0)!=((($148))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($149) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $150
      var $151=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=(($151+8)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F1=$153; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=(($154+12)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=HEAP32[(($155)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$156; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=$F1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$157; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=((($158))>>>0) >= ((($159))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=((($160))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=(($161)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=((($162))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($163) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $164
      var $165=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=$F1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=(($166+12)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($167)>>2)]=$165; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=$F1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=(($169+8)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($170)>>2)]=$168; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $171
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $172
      __label__ = 39; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $173
      var $174=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=(($174+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$176; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$177; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=((($177))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($178) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $179
      var $180=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $181=(($180+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=(($181)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$182; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=HEAP32[(($182)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$183; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=((($183))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($184) { __label__ = 29; break; } else { __label__ = 38; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $185
      __label__ = 30; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $186
      var $187=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=(($187+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=(($188+4)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$189; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $191=((($190))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($191) { var $199 = 1;__label__ = 32; break; } else { __label__ = 31; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $192
      var $193=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=(($193+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=(($194)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$195; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=HEAP32[(($195)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=((($196))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199 = $197;__label__ = 32; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $198
      var $199;
      if ($199) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $200
      var $201=$CP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$201; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=HEAP32[(($201)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$202; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 30; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $203
      var $204=$RP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=$204; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=((($205))>>>0) >= ((($206))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=((($207))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=(($208)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=((($209))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($210) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $211
      var $212=$RP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($212)>>2)]=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 37; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $213
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $214
      __label__ = 38; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $215
      __label__ = 39; break;
    case 39: // $216
      var $217=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=((($217))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($218) { __label__ = 40; break; } else { __label__ = 67; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $219
      var $220=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=(($220+28)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=HEAP32[(($221)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=((((__gm_+304)|0)+($222<<2))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$223; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=$H; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=HEAP32[(($225)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=((($224))|0)==((($226))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($227) { __label__ = 41; break; } else { __label__ = 44; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $228
      var $229=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=$H; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($230)>>2)]=$229; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=((($229))|0)==0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($231) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $232
      var $233=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=(($233+28)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $235=HEAP32[(($234)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=1 << ($235); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=($236) ^ -1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $239=($238) & ($237); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$239; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 43; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $240
      __label__ = 51; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $241
      var $242=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=$242; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=((($243))>>>0) >= ((($244))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=((($245))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=((($247))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($248) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $249
      var $250=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252=(($251)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $253=HEAP32[(($252)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $254=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $255=((($253))|0)==((($254))|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($255) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $256
      var $257=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=(($258+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=(($259)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($260)>>2)]=$257; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 48; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $261
      var $262=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=(($264+4)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($265)>>2)]=$262; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 48; break;
    case 48: // $266
      __label__ = 50; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $267
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $268
      __label__ = 51; break;
    case 51: // $269
      var $270=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=((($270))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($271) { __label__ = 52; break; } else { __label__ = 66; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $272
      var $273=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $274=$273; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $275=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=((($274))>>>0) >= ((($275))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $277=((($276))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=((($278))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($279) { __label__ = 53; break; } else { __label__ = 64; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 53: // $280
      var $281=$XP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=(($282+24)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($283)>>2)]=$281; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=(($285)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=HEAP32[(($286)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C0=$287; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=((($287))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($288) { __label__ = 54; break; } else { __label__ = 58; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $289
      var $290=$C0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $291=$290; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=((($291))>>>0) >= ((($292))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=((($293))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=(($294)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=((($295))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($296) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $297
      var $298=$C0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $299=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $300=(($299+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $301=(($300)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($301)>>2)]=$298; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $302=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $303=$C0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $304=(($303+24)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($304)>>2)]=$302; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 57; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 56: // $305
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 57: // $306
      __label__ = 58; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $307
      var $308=$TP; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309=(($308+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=(($309+4)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=HEAP32[(($310)>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C1=$311; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=((($311))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($312) { __label__ = 59; break; } else { __label__ = 63; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $313
      var $314=$C1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=$314; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=((($315))>>>0) >= ((($316))>>>0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=((($317))&1); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $319=(($318)==(1)); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=((($319))|0)!=0; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($320) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $321
      var $322=$C1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=(($323+16)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($325)>>2)]=$322; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=$R; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $327=$C1; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $328=(($327+24)|0); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($328)>>2)]=$326; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 62; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 61: // $329
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 62: // $330
      __label__ = 63; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 63: // $331
      __label__ = 65; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 64: // $332
      _abort(); //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 65: // $333
      __label__ = 66; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 66: // $334
      __label__ = 67; break; //@line 4770 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $335
      __label__ = 68; break;
    case 68: // $336
      __label__ = 72; break; //@line 4771 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 69: // $337
      var $338=$next; //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=(($338+4)|0); //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=HEAP32[(($339)>>2)]; //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=($340) & 3; //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=((($341))|0)==3; //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($342) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 4772 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 70: // $343
      var $344=$psize; //@line 4773 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$344; //@line 4773 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=$next; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=(($345+4)|0); //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=HEAP32[(($346)>>2)]; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=($347) & -2; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($346)>>2)]=$348; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=$psize; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=($349) | 1; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=$p; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=(($351+4)|0); //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($352)>>2)]=$350; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $353=$psize; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $354=$p; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=$354; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=$psize; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $357=(($355+$356)|0); //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=$357; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=(($358)|0); //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($359)>>2)]=$353; //@line 4774 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 194; break; //@line 4775 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 71: // $360
      __label__ = 72; break;
    case 72: // $361
      __label__ = 74; break; //@line 4777 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 73: // $362
      __label__ = 193; break; //@line 4779 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 74: // $363
      __label__ = 75; break;
    case 75: // $364
      __label__ = 76; break; //@line 4781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 76: // $365
      var $366=$p; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=$366; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=$next; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=$368; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=((($367))>>>0) < ((($369))>>>0); //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($370) { __label__ = 77; break; } else { var $378 = 0;__label__ = 78; break; } //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 77: // $371
      var $372=$next; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $373=(($372+4)|0); //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=HEAP32[(($373)>>2)]; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=($374) & 1; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=((($375))|0)!=0; //@line 4783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $378 = $376;__label__ = 78; break;
    case 78: // $377
      var $378;
      var $379=((($378))&1);
      var $380=(($379)==(1));
      var $381=((($380))|0)!=0;
      if ($381) { __label__ = 79; break; } else { __label__ = 191; break; }
    case 79: // $382
      var $383=$next; //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $384=(($383+4)|0); //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=($385) & 2; //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=((($386))|0)!=0; //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($387) { __label__ = 152; break; } else { __label__ = 80; break; } //@line 4784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 80: // $388
      var $389=$next; //@line 4785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $391=((($389))|0)==((($390))|0); //@line 4785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($391) { __label__ = 81; break; } else { __label__ = 86; break; } //@line 4785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 81: // $392
      var $393=$psize; //@line 4786 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4786 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=((($394)+($393))|0); //@line 4786 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$395; //@line 4786 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$395; //@line 4786 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $396=$p; //@line 4787 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$396; //@line 4787 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $397=$tsize; //@line 4788 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $398=($397) | 1; //@line 4788 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $399=$p; //@line 4788 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4788 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($400)>>2)]=$398; //@line 4788 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $401=$p; //@line 4789 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $402=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4789 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $403=((($401))|0)==((($402))|0); //@line 4789 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($403) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 4789 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 82: // $404
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4790 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4791 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 83; break; //@line 4792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 83: // $405
      var $406=$tsize; //@line 4793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $407=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $408=((($406))>>>0) > ((($407))>>>0); //@line 4793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($408) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 84: // $409
      var $410=_sys_trim(__gm_, 0); //@line 4794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 85; break; //@line 4794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 85: // $411
      __label__ = 194; break; //@line 4795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 86: // $412
      var $413=$next; //@line 4797 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4797 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=((($413))|0)==((($414))|0); //@line 4797 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($415) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4797 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 87: // $416
      var $417=$psize; //@line 4798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $418=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $419=((($418)+($417))|0); //@line 4798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$419; //@line 4798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $dsize=$419; //@line 4798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $420=$p; //@line 4799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$420; //@line 4799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $421=$dsize; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $422=($421) | 1; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $423=$p; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=(($423+4)|0); //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($424)>>2)]=$422; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=$dsize; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $426=$p; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $427=$426; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=$dsize; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=(($427+$428)|0); //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $430=$429; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $431=(($430)|0); //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($431)>>2)]=$425; //@line 4800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 194; break; //@line 4801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 88: // $432
      var $433=$next; //@line 4804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=(($433+4)|0); //@line 4804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $436=($435) & -8; //@line 4804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nsize=$436; //@line 4804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $437=$nsize; //@line 4805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=$psize; //@line 4805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $439=((($438)+($437))|0); //@line 4805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$439; //@line 4805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $440=$nsize; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=($440) >>> 3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $442=((($441))>>>0) < 32; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($442) { __label__ = 89; break; } else { __label__ = 101; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 89: // $443
      var $444=$next; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $446=HEAP32[(($445)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F2=$446; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $447=$next; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $448=(($447+12)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $449=HEAP32[(($448)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B3=$449; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $450=$nsize; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $451=($450) >>> 3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I4=$451; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $452=$F2; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $453=$B3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $454=((($452))|0)==((($453))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($454) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 90: // $455
      var $456=$I4; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $457=1 << ($456); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $458=($457) ^ -1; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $459=HEAP32[((((__gm_)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $460=($459) & ($458); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$460; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 100; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 91: // $461
      var $462=$F2; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $463=$I4; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $464=($463) << 1; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $465=((((__gm_+40)|0)+($464<<2))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $466=$465; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $467=$466; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $468=((($462))|0)==((($467))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($468) { __label__ = 93; break; } else { __label__ = 92; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 92: // $469
      var $470=$F2; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $471=$470; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $472=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $473=((($471))>>>0) >= ((($472))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($473) { __label__ = 93; break; } else { var $490 = 0;__label__ = 96; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 93: // $474
      var $475=$B3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $476=$I4; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $477=($476) << 1; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $478=((((__gm_+40)|0)+($477<<2))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $479=$478; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $480=$479; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $481=((($475))|0)==((($480))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($481) { var $488 = 1;__label__ = 95; break; } else { __label__ = 94; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 94: // $482
      var $483=$B3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $484=$483; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $485=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $486=((($484))>>>0) >= ((($485))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $488 = $486;__label__ = 95; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 95: // $487
      var $488;
      var $490 = $488;__label__ = 96; break;
    case 96: // $489
      var $490;
      var $491=((($490))&1);
      var $492=(($491)==(1));
      var $493=((($492))|0)!=0;
      if ($493) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: // $494
      var $495=$B3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $496=$F2; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $497=(($496+12)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $498=$F2; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $499=$B3; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $500=(($499+8)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($500)>>2)]=$498; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 99; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 98: // $501
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 99: // $502
      __label__ = 100; break;
    case 100: // $503
      __label__ = 147; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 101: // $504
      var $505=$next; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $506=$505; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP5=$506; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $507=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $508=(($507+24)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $509=HEAP32[(($508)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP6=$509; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $510=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $511=(($510+12)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $512=HEAP32[(($511)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $513=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $514=((($512))|0)!=((($513))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($514) { __label__ = 102; break; } else { __label__ = 106; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 102: // $515
      var $516=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $517=(($516+8)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $518=HEAP32[(($517)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F8=$518; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $519=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $520=(($519+12)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $521=HEAP32[(($520)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R7=$521; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $522=$F8; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $523=$522; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $524=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $525=((($523))>>>0) >= ((($524))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $526=((($525))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $527=(($526)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $528=((($527))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($528) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 103: // $529
      var $530=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $531=$F8; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $532=(($531+12)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($532)>>2)]=$530; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $533=$F8; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $534=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $535=(($534+8)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($535)>>2)]=$533; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 105; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 104: // $536
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 105: // $537
      __label__ = 118; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 106: // $538
      var $539=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $540=(($539+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $541=(($540+4)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP9=$541; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $542=HEAP32[(($541)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R7=$542; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $543=((($542))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($543) { __label__ = 108; break; } else { __label__ = 107; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 107: // $544
      var $545=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $546=(($545+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $547=(($546)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP9=$547; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $548=HEAP32[(($547)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R7=$548; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $549=((($548))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($549) { __label__ = 108; break; } else { __label__ = 117; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 108: // $550
      __label__ = 109; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 109: // $551
      var $552=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $553=(($552+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $554=(($553+4)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP10=$554; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $555=HEAP32[(($554)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $556=((($555))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($556) { var $564 = 1;__label__ = 111; break; } else { __label__ = 110; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 110: // $557
      var $558=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $559=(($558+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $560=(($559)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP10=$560; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $561=HEAP32[(($560)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $562=((($561))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $564 = $562;__label__ = 111; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 111: // $563
      var $564;
      if ($564) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 112: // $565
      var $566=$CP10; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP9=$566; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $567=HEAP32[(($566)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R7=$567; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 109; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 113: // $568
      var $569=$RP9; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $570=$569; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $571=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $572=((($570))>>>0) >= ((($571))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $573=((($572))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $574=(($573)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $575=((($574))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($575) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 114: // $576
      var $577=$RP9; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($577)>>2)]=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 116; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 115: // $578
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 116: // $579
      __label__ = 117; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 117: // $580
      __label__ = 118; break;
    case 118: // $581
      var $582=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $583=((($582))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($583) { __label__ = 119; break; } else { __label__ = 146; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 119: // $584
      var $585=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $586=(($585+28)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $587=HEAP32[(($586)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $588=((((__gm_+304)|0)+($587<<2))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H11=$588; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $589=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $590=$H11; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $591=HEAP32[(($590)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $592=((($589))|0)==((($591))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($592) { __label__ = 120; break; } else { __label__ = 123; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 120: // $593
      var $594=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $595=$H11; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($595)>>2)]=$594; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $596=((($594))|0)==0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($596) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 121: // $597
      var $598=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $599=(($598+28)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $600=HEAP32[(($599)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $601=1 << ($600); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $602=($601) ^ -1; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $603=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $604=($603) & ($602); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$604; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 122; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 122: // $605
      __label__ = 130; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 123: // $606
      var $607=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $608=$607; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $609=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $610=((($608))>>>0) >= ((($609))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $611=((($610))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $612=(($611)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $613=((($612))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($613) { __label__ = 124; break; } else { __label__ = 128; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 124: // $614
      var $615=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $616=(($615+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $617=(($616)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $618=HEAP32[(($617)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $619=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $620=((($618))|0)==((($619))|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($620) { __label__ = 125; break; } else { __label__ = 126; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 125: // $621
      var $622=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $623=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $624=(($623+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $625=(($624)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($625)>>2)]=$622; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 127; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 126: // $626
      var $627=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $628=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $629=(($628+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $630=(($629+4)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($630)>>2)]=$627; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 127; break;
    case 127: // $631
      __label__ = 129; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 128: // $632
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 129: // $633
      __label__ = 130; break;
    case 130: // $634
      var $635=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $636=((($635))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($636) { __label__ = 131; break; } else { __label__ = 145; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 131: // $637
      var $638=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $639=$638; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $640=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $641=((($639))>>>0) >= ((($640))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $642=((($641))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $643=(($642)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $644=((($643))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($644) { __label__ = 132; break; } else { __label__ = 143; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 132: // $645
      var $646=$XP6; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $647=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $648=(($647+24)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($648)>>2)]=$646; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $649=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $650=(($649+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $651=(($650)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $652=HEAP32[(($651)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C012=$652; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $653=((($652))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($653) { __label__ = 133; break; } else { __label__ = 137; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 133: // $654
      var $655=$C012; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $656=$655; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $657=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $658=((($656))>>>0) >= ((($657))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $659=((($658))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $660=(($659)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $661=((($660))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($661) { __label__ = 134; break; } else { __label__ = 135; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 134: // $662
      var $663=$C012; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $664=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $665=(($664+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $666=(($665)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($666)>>2)]=$663; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $667=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $668=$C012; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $669=(($668+24)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($669)>>2)]=$667; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 136; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 135: // $670
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 136: // $671
      __label__ = 137; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 137: // $672
      var $673=$TP5; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $674=(($673+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $675=(($674+4)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $676=HEAP32[(($675)>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C113=$676; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $677=((($676))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($677) { __label__ = 138; break; } else { __label__ = 142; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 138: // $678
      var $679=$C113; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $680=$679; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $681=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $682=((($680))>>>0) >= ((($681))>>>0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $683=((($682))&1); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $684=(($683)==(1)); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $685=((($684))|0)!=0; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($685) { __label__ = 139; break; } else { __label__ = 140; break; } //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 139: // $686
      var $687=$C113; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $688=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $689=(($688+16)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $690=(($689+4)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($690)>>2)]=$687; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $691=$R7; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $692=$C113; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $693=(($692+24)|0); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($693)>>2)]=$691; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 141; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 140: // $694
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 141: // $695
      __label__ = 142; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 142: // $696
      __label__ = 144; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 143: // $697
      _abort(); //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 144: // $698
      __label__ = 145; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 145: // $699
      __label__ = 146; break; //@line 4806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 146: // $700
      __label__ = 147; break;
    case 147: // $701
      var $702=$psize; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $703=($702) | 1; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $704=$p; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $705=(($704+4)|0); //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($705)>>2)]=$703; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $706=$psize; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $707=$p; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $708=$707; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $709=$psize; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $710=(($708+$709)|0); //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $711=$710; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $712=(($711)|0); //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($712)>>2)]=$706; //@line 4807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $713=$p; //@line 4808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $714=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $715=((($713))|0)==((($714))|0); //@line 4808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($715) { __label__ = 148; break; } else { __label__ = 149; break; } //@line 4808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 148: // $716
      var $717=$psize; //@line 4809 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$717; //@line 4809 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 194; break; //@line 4810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 149: // $718
      __label__ = 150; break;
    case 150: // $719
      __label__ = 151; break;
    case 151: // $720
      __label__ = 153; break; //@line 4813 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 152: // $721
      var $722=$next; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $723=(($722+4)|0); //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $724=HEAP32[(($723)>>2)]; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $725=($724) & -2; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($723)>>2)]=$725; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $726=$psize; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $727=($726) | 1; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $728=$p; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $729=(($728+4)|0); //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($729)>>2)]=$727; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $730=$psize; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $731=$p; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $732=$731; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $733=$psize; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $734=(($732+$733)|0); //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $735=$734; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $736=(($735)|0); //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($736)>>2)]=$730; //@line 4815 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 153; break;
    case 153: // $737
      var $738=$psize; //@line 4817 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $739=($738) >>> 3; //@line 4817 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $740=((($739))>>>0) < 32; //@line 4817 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($740) { __label__ = 154; break; } else { __label__ = 161; break; } //@line 4817 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 154: // $741
      var $742=$psize; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $743=($742) >>> 3; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I14=$743; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $744=$I14; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $745=($744) << 1; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $746=((((__gm_+40)|0)+($745<<2))|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $747=$746; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $748=$747; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B15=$748; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $749=$B15; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F16=$749; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $750=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $751=$I14; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $752=1 << ($751); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $753=($750) & ($752); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $754=((($753))|0)!=0; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($754) { __label__ = 156; break; } else { __label__ = 155; break; } //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 155: // $755
      var $756=$I14; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $757=1 << ($756); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $758=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $759=($758) | ($757); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$759; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 160; break; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 156: // $760
      var $761=$B15; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $762=(($761+8)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $763=HEAP32[(($762)>>2)]; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $764=$763; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $765=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $766=((($764))>>>0) >= ((($765))>>>0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $767=((($766))&1); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $768=(($767)==(1)); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $769=((($768))|0)!=0; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($769) { __label__ = 157; break; } else { __label__ = 158; break; } //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 157: // $770
      var $771=$B15; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $772=(($771+8)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $773=HEAP32[(($772)>>2)]; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F16=$773; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 159; break; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 158: // $774
      _abort(); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 159: // $775
      __label__ = 160; break;
    case 160: // $776
      var $777=$p; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $778=$B15; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $779=(($778+8)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($779)>>2)]=$777; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $780=$p; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $781=$F16; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $782=(($781+12)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($782)>>2)]=$780; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $783=$F16; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $784=$p; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $785=(($784+8)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($785)>>2)]=$783; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $786=$B15; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $787=$p; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $788=(($787+12)|0); //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($788)>>2)]=$786; //@line 4818 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 190; break; //@line 4820 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 161: // $789
      var $790=$p; //@line 4822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $791=$790; //@line 4822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tp=$791; //@line 4822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $792=$psize; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $793=($792) >>> 8; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X=$793; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $794=$X; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $795=((($794))|0)==0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($795) { __label__ = 162; break; } else { __label__ = 163; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 162: // $796
      $I18=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 167; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 163: // $797
      var $798=$X; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $799=((($798))>>>0) > 65535; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($799) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 164: // $800
      $I18=31; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 166; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 165: // $801
      var $802=$X; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$802; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $803=$Y; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $804=((($803)-256)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $805=($804) >>> 16; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $806=($805) & 8; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$806; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $807=$N; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $808=$Y; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $809=($808) << ($807); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$809; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $810=((($809)-4096)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $811=($810) >>> 16; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $812=($811) & 4; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$812; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $813=$K; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $814=$N; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $815=((($814)+($813))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$815; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $816=$K; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $817=$Y; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $818=($817) << ($816); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$818; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $819=((($818)-16384)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $820=($819) >>> 16; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $821=($820) & 2; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$821; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $822=$N; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $823=((($822)+($821))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$823; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $824=$N; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $825=((14-($824))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $826=$K; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $827=$Y; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $828=($827) << ($826); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$828; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $829=($828) >>> 15; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $830=((($825)+($829))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$830; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $831=$K; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $832=($831) << 1; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $833=$psize; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $834=$K; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $835=((($834)+7)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $836=($833) >>> ((($835))>>>0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $837=($836) & 1; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $838=((($832)+($837))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I18=$838; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 166; break;
    case 166: // $839
      __label__ = 167; break;
    case 167: // $840
      var $841=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $842=((((__gm_+304)|0)+($841<<2))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H17=$842; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $843=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $844=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $845=(($844+28)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($845)>>2)]=$843; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $846=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $847=(($846+16)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $848=(($847+4)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($848)>>2)]=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $849=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $850=(($849+16)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $851=(($850)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($851)>>2)]=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $852=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $853=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $854=1 << ($853); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $855=($852) & ($854); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $856=((($855))|0)!=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($856) { __label__ = 169; break; } else { __label__ = 168; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 168: // $857
      var $858=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $859=1 << ($858); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $860=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $861=($860) | ($859); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$861; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $862=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $863=$H17; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($863)>>2)]=$862; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $864=$H17; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $865=$864; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $866=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $867=(($866+24)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($867)>>2)]=$865; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $868=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $869=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $870=(($869+12)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($870)>>2)]=$868; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $871=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $872=(($871+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($872)>>2)]=$868; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 187; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 169: // $873
      var $874=$H17; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $875=HEAP32[(($874)>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$875; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $876=$psize; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $877=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $878=((($877))|0)==31; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($878) { __label__ = 170; break; } else { __label__ = 171; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 170: // $879
      var $887 = 0;__label__ = 172; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 171: // $880
      var $881=$I18; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $882=($881) >>> 1; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $883=((($882)+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $884=((($883)-2)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $885=((31-($884))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $887 = $885;__label__ = 172; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 172: // $886
      var $887; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $888=($876) << ($887); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K19=$888; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 173; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 173: // $889
      var $890=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $891=(($890+4)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $892=HEAP32[(($891)>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $893=($892) & -8; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $894=$psize; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $895=((($893))|0)!=((($894))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($895) { __label__ = 174; break; } else { __label__ = 180; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 174: // $896
      var $897=$K19; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $898=($897) >>> 31; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $899=($898) & 1; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $900=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $901=(($900+16)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $902=(($901+($899<<2))|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C=$902; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $903=$K19; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $904=($903) << 1; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K19=$904; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $905=$C; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $906=HEAP32[(($905)>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $907=((($906))|0)!=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($907) { __label__ = 175; break; } else { __label__ = 176; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 175: // $908
      var $909=$C; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $910=HEAP32[(($909)>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$910; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 179; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 176: // $911
      var $912=$C; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $913=$912; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $914=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $915=((($913))>>>0) >= ((($914))>>>0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $916=((($915))&1); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $917=(($916)==(1)); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $918=((($917))|0)!=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($918) { __label__ = 177; break; } else { __label__ = 178; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 177: // $919
      var $920=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $921=$C; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($921)>>2)]=$920; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $922=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $923=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $924=(($923+24)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($924)>>2)]=$922; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $925=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $926=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $927=(($926+12)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($927)>>2)]=$925; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $928=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $929=(($928+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($929)>>2)]=$925; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 186; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 178: // $930
      _abort(); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 179: // $931
      __label__ = 185; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 180: // $932
      var $933=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $934=(($933+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $935=HEAP32[(($934)>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F20=$935; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $936=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $937=$936; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $938=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $939=((($937))>>>0) >= ((($938))>>>0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($939) { __label__ = 181; break; } else { var $946 = 0;__label__ = 182; break; } //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 181: // $940
      var $941=$F20; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $942=$941; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $943=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $944=((($942))>>>0) >= ((($943))>>>0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $946 = $944;__label__ = 182; break;
    case 182: // $945
      var $946;
      var $947=((($946))&1);
      var $948=(($947)==(1));
      var $949=((($948))|0)!=0;
      if ($949) { __label__ = 183; break; } else { __label__ = 184; break; }
    case 183: // $950
      var $951=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $952=$F20; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $953=(($952+12)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($953)>>2)]=$951; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $954=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $955=(($954+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($955)>>2)]=$951; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $956=$F20; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $957=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $958=(($957+8)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($958)>>2)]=$956; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $959=$T; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $960=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $961=(($960+12)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($961)>>2)]=$959; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $962=$tp; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $963=(($962+24)|0); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($963)>>2)]=0; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 186; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 184: // $964
      _abort(); //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 185: // $965
      __label__ = 173; break; //@line 4823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 186: // $966
      __label__ = 187; break;
    case 187: // $967
      var $968=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $969=((($968)-1)|0); //@line 4825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$969; //@line 4825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $970=((($969))|0)==0; //@line 4825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($970) { __label__ = 188; break; } else { __label__ = 189; break; } //@line 4825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 188: // $971
      var $972=_release_unused_segments(__gm_); //@line 4826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 189; break; //@line 4826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 189: // $973
      __label__ = 190; break;
    case 190: // $974
      __label__ = 194; break; //@line 4828 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 191: // $975
      __label__ = 192; break; //@line 4830 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 192: // $976
      __label__ = 193; break; //@line 4830 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 193: // $977
      _abort(); //@line 4832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 194: // $978
      __label__ = 195; break; //@line 4836 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 195: // $979
      ;
      return; //@line 4840 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0; //@line 4126 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=((($3))|0)!=0; //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $5
      var $6=_init_mparams(); //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $8
      ;
      ; //@line 4127 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$2; //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=((($11))>>>0) < 4294967232; //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 24; break; } //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $13
      var $14=$1; //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=(($14+24)|0); //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((($16))|0)!=0; //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 24; break; } //@line 4128 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $18
      var $19=$2; //@line 4129 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=((($19)+40)|0); //@line 4129 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $2=$20; //@line 4129 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=$1; //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=(($21+12)|0); //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=$2; //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($23))>>>0) > ((($24))>>>0); //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 20; break; } //@line 4131 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $26
      var $27=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $unit=$27; //@line 4133 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$1; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=$2; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=((($30)-($31))|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=$unit; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=((($33)-1)|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=((($32)+($34))|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$unit; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=Math.floor(((($35))>>>0)/((($36))>>>0)); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=((($37)-1)|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=$unit; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=((($38)*($39))|0); //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $extra=$40; //@line 4135 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$1; //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=$1; //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=(($42+24)|0); //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=$44; //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=_segment_holding($41, $45); //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$46; //@line 4136 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=$sp; //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=(($47+12)|0); //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=($49) & 8; //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=((($50))|0)!=0; //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($51) { __label__ = 17; break; } else { __label__ = 6; break; } //@line 4138 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $52
      var $53=$sp; //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=(($53+12)|0); //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=($55) & 0; //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=((($56))|0)!=0; //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($57) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4139 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $58
      __label__ = 16; break; //@line 4150 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $59
      var $60=$extra; //@line 4152 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=((($60))>>>0) >= 2147483647; //@line 4152 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($61) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4152 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $62
      var $63=$unit; //@line 4153 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=((-2147483648-($63))|0); //@line 4153 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $extra=$64; //@line 4153 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 10; break; //@line 4153 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $65
      var $66=_sbrk(0); //@line 4157 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $old_br=$66; //@line 4157 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$old_br; //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=$sp; //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=(($68)|0); //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=$sp; //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($70+$73)|0); //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=((($67))|0)==((($74))|0); //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($75) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 4158 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $76
      var $77=$extra; //@line 4159 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=(((-($77)))|0); //@line 4159 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=_sbrk($78); //@line 4159 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rel_br=$79; //@line 4159 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=_sbrk(0); //@line 4160 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $new_br=$80; //@line 4160 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=$rel_br; //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=((($81))|0)!=-1; //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($82) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $83
      var $84=$new_br; //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$old_br; //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=((($84))>>>0) < ((($85))>>>0); //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($86) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4161 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $87
      var $88=$old_br; //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=$new_br; //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=($88); //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=($89); //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=((($90)-($91))|0); //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $released=$92; //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 14; break; //@line 4162 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $93
      __label__ = 15; break; //@line 4163 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $94
      __label__ = 16; break;
    case 16: // $95
      __label__ = 17; break; //@line 4167 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $96
      var $97=$released; //@line 4169 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=((($97))|0)!=0; //@line 4169 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($98) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4169 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $99
      var $100=$released; //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$sp; //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=(($101+4)|0); //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=((($103)-($100))|0); //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($102)>>2)]=$104; //@line 4170 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=$released; //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=$1; //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(($106+432)|0); //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=((($108)-($105))|0); //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($107)>>2)]=$109; //@line 4171 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=$1; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$1; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=(($111+24)|0); //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=$1; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=(($114+12)|0); //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=HEAP32[(($115)>>2)]; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=$released; //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=((($116)-($117))|0); //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_top($110, $113, $118); //@line 4172 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 4174 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $119
      __label__ = 20; break; //@line 4175 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $120
      var $121=$released; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=((($121))|0)==0; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($122) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $123
      var $124=$1; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=(($124+12)|0); //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=HEAPU32[(($125)>>2)]; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=$1; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=(($127+28)|0); //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=HEAPU32[(($128)>>2)]; //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=((($126))>>>0) > ((($129))>>>0); //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($130) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4182 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $131
      var $132=$1; //@line 4183 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=(($132+28)|0); //@line 4183 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($133)>>2)]=-1; //@line 4183 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 23; break; //@line 4183 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $134
      __label__ = 24; break; //@line 4184 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $135
      var $136=$released; //@line 4186 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=((($136))|0)!=0; //@line 4186 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=($137) ? 1 : 0; //@line 4186 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $138; //@line 4186 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0; //@line 4079 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $2=$1; //@line 4081 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=(($2+444)|0); //@line 4081 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $pred=$3; //@line 4081 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=$pred; //@line 4082 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=(($4+8)|0); //@line 4082 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 4082 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$6; //@line 4082 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 4083 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $7
      var $8=$sp; //@line 4083 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=((($8))|0)!=0; //@line 4083 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($9) { __label__ = 2; break; } else { __label__ = 86; break; } //@line 4083 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $10
      var $11=$sp; //@line 4084 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=(($11)|0); //@line 4084 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 4084 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $base=$13; //@line 4084 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=$sp; //@line 4085 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=(($14+4)|0); //@line 4085 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4085 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $size=$16; //@line 4085 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$sp; //@line 4086 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=(($17+8)|0); //@line 4086 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 4086 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $next=$19; //@line 4086 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$nsegs; //@line 4087 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=((($20)+1)|0); //@line 4087 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nsegs=$21; //@line 4087 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=$sp; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=(($22+12)|0); //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=($24) & 0; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=((($25))|0)!=0; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($26) { __label__ = 3; break; } else { __label__ = 85; break; } //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $27
      var $28=$sp; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=($30) & 8; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=((($31))|0)!=0; //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($32) { __label__ = 85; break; } else { __label__ = 4; break; } //@line 4088 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $33
      var $34=$base; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=$base; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=(($35+8)|0); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=($36); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=($37) & 7; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((($38))|0)==0; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $40
      var $49 = 0;__label__ = 7; break; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $41
      var $42=$base; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=(($42+8)|0); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=($43); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=($44) & 7; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=((8-($45))|0); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=($46) & 7; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49 = $47;__label__ = 7; break; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $48
      var $49; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=(($34+$49)|0); //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=$50; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$51; //@line 4089 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$p; //@line 4090 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=(($52+4)|0); //@line 4090 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4090 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=($54) & -8; //@line 4090 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$55; //@line 4090 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$p; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=(($56+4)|0); //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=($58) & 3; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=((($59))|0)!=1; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($60) { __label__ = 84; break; } else { __label__ = 8; break; } //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $61
      var $62=$p; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$62; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$psize; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=(($63+$64)|0); //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=$base; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$size; //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=(($66+$67)|0); //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=(($68-40)|0); //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=((($65))>>>0) >= ((($69))>>>0); //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($70) { __label__ = 9; break; } else { __label__ = 84; break; } //@line 4092 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $71
      var $72=$p; //@line 4093 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=$72; //@line 4093 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tp=$73; //@line 4093 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=$p; //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=$1; //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=(($75+20)|0); //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=HEAP32[(($76)>>2)]; //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=((($74))|0)==((($77))|0); //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($78) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4095 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $79
      var $80=$1; //@line 4096 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=(($80+20)|0); //@line 4096 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($81)>>2)]=0; //@line 4096 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=$1; //@line 4097 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=(($82+8)|0); //@line 4097 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($83)>>2)]=0; //@line 4097 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 57; break; //@line 4098 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $84
      var $85=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=(($85+24)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP=$87; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=(($88+12)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=((($90))|0)!=((($91))|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($92) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $93
      var $94=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=(($94+8)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$96; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=(($97+12)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=HEAP32[(($98)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$99; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=$F; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$100; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=((($101))>>>0) >= ((($104))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=((($105))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=((($107))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($108) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $109
      var $110=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$F; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=(($111+12)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($112)>>2)]=$110; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=$F; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=(($114+8)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($115)>>2)]=$113; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 15; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $116
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $117
      __label__ = 28; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $118
      var $119=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=(($119+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=(($120+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$121; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$122; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=((($122))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($123) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $124
      var $125=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=(($125+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=(($126)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$127; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$128; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=((($128))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($129) { __label__ = 18; break; } else { __label__ = 27; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $130
      __label__ = 19; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $131
      var $132=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=(($132+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=(($133+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$134; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=((($135))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($136) { var $144 = 1;__label__ = 21; break; } else { __label__ = 20; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $137
      var $138=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=(($138+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=(($139)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$140; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=((($141))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144 = $142;__label__ = 21; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $143
      var $144;
      if ($144) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $145
      var $146=$CP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$146; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$147; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $148
      var $149=$RP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$149; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=(($151+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=HEAPU32[(($152)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=((($150))>>>0) >= ((($153))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=((($154))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=(($155)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=((($156))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($157) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $158
      var $159=$RP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($159)>>2)]=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $160
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $161
      __label__ = 27; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $162
      __label__ = 28; break;
    case 28: // $163
      var $164=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=((($164))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($165) { __label__ = 29; break; } else { __label__ = 56; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $166
      var $167=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=(($167+28)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=HEAP32[(($168)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=(($170+304)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=(($171+($169<<2))|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$172; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $174=$H; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=HEAP32[(($174)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=((($173))|0)==((($175))|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($176) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $177
      var $178=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=$H; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=((($178))|0)==0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($180) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $181
      var $182=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=(($182+28)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=1 << ($184); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=($185) ^ -1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $187=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=(($187+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=($189) & ($186); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($188)>>2)]=$190; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 32; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $191
      __label__ = 40; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $192
      var $193=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=$193; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=(($195+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=HEAPU32[(($196)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=((($194))>>>0) >= ((($197))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=((($198))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=(($199)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=((($200))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($201) { __label__ = 34; break; } else { __label__ = 38; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $202
      var $203=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=(($203+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=(($204)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=HEAP32[(($205)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=((($206))|0)==((($207))|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($208) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $209
      var $210=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=(($211+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=(($212)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($213)>>2)]=$210; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 37; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $214
      var $215=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $216=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $217=(($216+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=(($217+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($218)>>2)]=$215; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 37; break;
    case 37: // $219
      __label__ = 39; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $220
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $221
      __label__ = 40; break;
    case 40: // $222
      var $223=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=((($223))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($224) { __label__ = 41; break; } else { __label__ = 55; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 41: // $225
      var $226=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=$226; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=(($228+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=HEAPU32[(($229)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=((($227))>>>0) >= ((($230))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $232=((($231))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $233=(($232)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=((($233))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($234) { __label__ = 42; break; } else { __label__ = 53; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $235
      var $236=$XP; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=(($237+24)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($238)>>2)]=$236; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $239=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $240=(($239+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $241=(($240)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C0=$242; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=((($242))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($243) { __label__ = 43; break; } else { __label__ = 47; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $244
      var $245=$C0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=$245; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=(($247+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=((($246))>>>0) >= ((($249))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=((($250))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252=(($251)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $253=((($252))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($253) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $254
      var $255=$C0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $256=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $257=(($256+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=(($257)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($258)>>2)]=$255; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=$C0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=(($260+24)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $262
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $263
      __label__ = 47; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $264
      var $265=$tp; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $266=(($265+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $267=(($266+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $268=HEAP32[(($267)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C1=$268; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $269=((($268))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($269) { __label__ = 48; break; } else { __label__ = 52; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $270
      var $271=$C1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=$271; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=$1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $274=(($273+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $275=HEAPU32[(($274)>>2)]; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=((($272))>>>0) >= ((($275))>>>0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $277=((($276))&1); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=((($278))|0)!=0; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($279) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $280
      var $281=$C1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=(($282+16)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=(($283+4)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($284)>>2)]=$281; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=$R; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=$C1; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=(($286+24)|0); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($287)>>2)]=$285; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 51; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 50: // $288
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 51: // $289
      __label__ = 52; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $290
      __label__ = 54; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 53: // $291
      _abort(); //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $292
      __label__ = 55; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $293
      __label__ = 56; break; //@line 4100 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 56: // $294
      __label__ = 57; break;
    case 57: // $295
      var $296=$psize; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=($296) >>> 8; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X=$297; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $298=$X; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $299=((($298))|0)==0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($299) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $300
      $I=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 63; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $301
      var $302=$X; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $303=((($302))>>>0) > 65535; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($303) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $304
      $I=31; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 62; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 61: // $305
      var $306=$X; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$306; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=$Y; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $308=((($307)-256)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309=($308) >>> 16; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=($309) & 8; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$310; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $311=$N; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=$Y; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=($312) << ($311); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$313; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=((($313)-4096)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=($314) >>> 16; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=($315) & 4; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$316; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=$K; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $318=$N; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $319=((($318)+($317))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$319; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=$K; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=$Y; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=($321) << ($320); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$322; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=((($322)-16384)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=($323) >>> 16; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=($324) & 2; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$325; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=$N; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $327=((($326)+($325))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$327; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $328=$N; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $329=((14-($328))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $330=$K; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $331=$Y; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $332=($331) << ($330); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$332; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $333=($332) >>> 15; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $334=((($329)+($333))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$334; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=$K; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=($335) << 1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $337=$psize; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $338=$K; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=((($338)+7)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=($337) >>> ((($339))>>>0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=($340) & 1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=((($336)+($341))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$342; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 62; break;
    case 62: // $343
      __label__ = 63; break;
    case 63: // $344
      var $345=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=(($346+304)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=(($347+($345<<2))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H1=$348; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=(($350+28)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $353=(($352+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $354=(($353+4)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($354)>>2)]=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=(($355+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $357=(($356)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($357)>>2)]=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=HEAP32[(($359)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $362=1 << ($361); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $363=($360) & ($362); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=((($363))|0)!=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($364) { __label__ = 65; break; } else { __label__ = 64; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 64: // $365
      var $366=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=1 << ($366); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=(($368+4)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=HEAP32[(($369)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=($370) | ($367); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($369)>>2)]=$371; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $373=$H1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($373)>>2)]=$372; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=$H1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=$374; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $377=(($376+24)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($377)>>2)]=$375; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $378=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $379=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=(($379+12)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($380)>>2)]=$378; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($382)>>2)]=$378; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 83; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 65: // $383
      var $384=$H1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$385; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=$psize; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $388=((($387))|0)==31; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($388) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 66: // $389
      var $397 = 0;__label__ = 68; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $390
      var $391=$I; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $392=($391) >>> 1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $393=((($392)+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=((($393)-2)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=((31-($394))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $397 = $395;__label__ = 68; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 68: // $396
      var $397; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $398=($386) << ($397); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$398; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 69; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 69: // $399
      var $400=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $401=(($400+4)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $403=($402) & -8; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $404=$psize; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $405=((($403))|0)!=((($404))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($405) { __label__ = 70; break; } else { __label__ = 76; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 70: // $406
      var $407=$K2; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $408=($407) >>> 31; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $409=($408) & 1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $410=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $412=(($411+($409<<2))|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C=$412; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $413=$K2; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=($413) << 1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$414; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=$C; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $416=HEAP32[(($415)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $417=((($416))|0)!=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($417) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 71: // $418
      var $419=$C; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $420=HEAP32[(($419)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$420; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 75; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 72: // $421
      var $422=$C; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $423=$422; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=(($424+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $426=HEAPU32[(($425)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $427=((($423))>>>0) >= ((($426))>>>0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=((($427))&1); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=(($428)==(1)); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $430=((($429))|0)!=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($430) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 73: // $431
      var $432=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $433=$C; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($433)>>2)]=$432; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $435=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $436=(($435+24)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($436)>>2)]=$434; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $437=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $439=(($438+12)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($439)>>2)]=$437; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $440=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=(($440+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($441)>>2)]=$437; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 82; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 74: // $442
      _abort(); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 75: // $443
      __label__ = 81; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 76: // $444
      var $445=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $446=(($445+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $447=HEAP32[(($446)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F3=$447; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $448=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $449=$448; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $450=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $451=(($450+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $452=HEAPU32[(($451)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $453=((($449))>>>0) >= ((($452))>>>0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($453) { __label__ = 77; break; } else { var $462 = 0;__label__ = 78; break; } //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 77: // $454
      var $455=$F3; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $456=$455; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $457=$1; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $458=(($457+16)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $459=HEAPU32[(($458)>>2)]; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $460=((($456))>>>0) >= ((($459))>>>0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $462 = $460;__label__ = 78; break;
    case 78: // $461
      var $462;
      var $463=((($462))&1);
      var $464=(($463)==(1));
      var $465=((($464))|0)!=0;
      if ($465) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: // $466
      var $467=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $468=$F3; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $469=(($468+12)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $470=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $471=(($470+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($471)>>2)]=$467; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $472=$F3; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $473=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $474=(($473+8)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($474)>>2)]=$472; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $475=$T; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $476=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $477=(($476+12)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $478=$tp; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $479=(($478+24)|0); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($479)>>2)]=0; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 82; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 80: // $480
      _abort(); //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 81: // $481
      __label__ = 69; break; //@line 4110 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 82: // $482
      __label__ = 83; break;
    case 83: // $483
      __label__ = 84; break; //@line 4112 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 84: // $484
      __label__ = 85; break; //@line 4113 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 85: // $485
      var $486=$sp; //@line 4116 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $pred=$486; //@line 4116 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $487=$next; //@line 4117 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$487; //@line 4117 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 4118 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 86: // $488
      var $489=$nsegs; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $490=((($489))>>>0) > 4294967295; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($490) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 87: // $491
      var $492=$nsegs; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $495 = $492;__label__ = 89; break; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 88: // $493
      var $495 = -1;__label__ = 89; break; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 89: // $494
      var $495; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $496=$1; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $497=(($496+32)|0); //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4120 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $498=$released; //@line 4122 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $498; //@line 4122 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _calloc($n_elements, $elem_size) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $mem;
      var $req;
      $1=$n_elements;
      $2=$elem_size;
      $req=0; //@line 4844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=$1; //@line 4845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=((($3))|0)!=0; //@line 4845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 4845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $5
      var $6=$1; //@line 4846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=$2; //@line 4846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=((($6)*($7))|0); //@line 4846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $req=$8; //@line 4846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=$1; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=$2; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=($9) | ($10); //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=($11) & -65536; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=((($12))|0)!=0; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($13) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $14
      var $15=$req; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$1; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=Math.floor(((($15))>>>0)/((($16))>>>0)); //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=$2; //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=((($17))|0)!=((($18))|0); //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4847 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $20
      $req=-1; //@line 4849 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 4849 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $21
      __label__ = 5; break; //@line 4850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $22
      var $23=$req; //@line 4851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=_malloc($23); //@line 4851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$24; //@line 4851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=$mem; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=((($25))|0)!=0; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($26) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $27
      var $28=$mem; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=(($28-8)|0); //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$29; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=(($30+4)|0); //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=($32) & 3; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=((($33))|0)==0; //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($34) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $35
      var $36=$mem; //@line 4853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=$req; //@line 4853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _memset($36, 0, $37, 1); //@line 4853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 8; break; //@line 4853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $38
      var $39=$mem; //@line 4854 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $39; //@line 4854 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2; //@line 4858 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=((($4))|0)==0; //@line 4858 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4858 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $6
      var $7=$3; //@line 4859 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=_malloc($7); //@line 4859 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$8; //@line 4859 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 3; break; //@line 4859 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $9
      $m=__gm_; //@line 4868 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=$m; //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$2; //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$3; //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=_internal_realloc($10, $11, $12); //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$13; //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 3; break; //@line 4876 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $14
      var $15=$1; //@line 4878 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $15; //@line 4878 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4; //@line 4304 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=((($5))>>>0) >= 4294967232; //@line 4304 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4304 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $7
      var $8=___errno(); //@line 4305 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($8)>>2)]=12; //@line 4305 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=0; //@line 4306 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 4306 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $9
      var $10=$3; //@line 4309 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=(($10-8)|0); //@line 4309 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$11; //@line 4309 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldp=$12; //@line 4309 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$oldp; //@line 4310 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4310 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4310 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=($15) & -8; //@line 4310 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldsize=$16; //@line 4310 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$oldp; //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=$17; //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=$oldsize; //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=(($18+$19)|0); //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=$20; //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $next=$21; //@line 4311 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=0; //@line 4312 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $extra=0; //@line 4313 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=$oldp; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$22; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=$2; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=(($24+16)|0); //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=HEAPU32[(($25)>>2)]; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=((($23))>>>0) >= ((($26))>>>0); //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($27) { __label__ = 3; break; } else { var $47 = 0;__label__ = 6; break; } //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $28
      var $29=$oldp; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=(($29+4)|0); //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=($31) & 3; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=((($32))|0)!=1; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($33) { __label__ = 4; break; } else { var $47 = 0;__label__ = 6; break; } //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $34
      var $35=$oldp; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$35; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=$next; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=$37; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((($36))>>>0) < ((($38))>>>0); //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($39) { __label__ = 5; break; } else { var $47 = 0;__label__ = 6; break; } //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $40
      var $41=$next; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=(($41+4)|0); //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=($43) & 1; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=((($44))|0)!=0; //@line 4317 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47 = $45;__label__ = 6; break;
    case 6: // $46
      var $47;
      var $48=((($47))&1);
      var $49=(($48)==(1));
      var $50=((($49))|0)!=0;
      if ($50) { __label__ = 7; break; } else { __label__ = 22; break; }
    case 7: // $51
      var $52=$4; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=((($52))>>>0) < 11; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($53) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $54
      var $61 = 16;__label__ = 10; break; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $55
      var $56=$4; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=((($56)+4)|0); //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=((($57)+7)|0); //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=($58) & -8; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61 = $59;__label__ = 10; break; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $60
      var $61; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nb=$61; //@line 4319 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=$oldp; //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=(($62+4)|0); //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=($64) & 3; //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=((($65))|0)==0; //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($66) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4320 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $67
      var $68=$2; //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=$oldp; //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=$nb; //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=_mmap_resize($68, $69, $70); //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=$71; //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 21; break; //@line 4321 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $72
      var $73=$oldsize; //@line 4322 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=$nb; //@line 4322 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=((($73))>>>0) >= ((($74))>>>0); //@line 4322 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($75) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 4322 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $76
      var $77=$oldsize; //@line 4323 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=$nb; //@line 4323 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=((($77)-($78))|0); //@line 4323 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rsize=$79; //@line 4323 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=$oldp; //@line 4324 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=$80; //@line 4324 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=$rsize; //@line 4325 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=((($81))>>>0) >= 16; //@line 4325 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($82) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4325 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $83
      var $84=$newp; //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$84; //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=$nb; //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=(($85+$86)|0); //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$87; //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder=$88; //@line 4326 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=$newp; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=(($89+4)|0); //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=($91) & 1; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=$nb; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=($92) | ($93); //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=($94) | 2; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=$newp; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=(($96+4)|0); //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=$newp; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$98; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=$nb; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=(($99+$100)|0); //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$101; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=(($102+4)|0); //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=HEAP32[(($103)>>2)]; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=($104) | 1; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($103)>>2)]=$105; //@line 4327 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=$rsize; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=($106) | 1; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=($107) | 2; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=$remainder; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=(($109+4)|0); //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($110)>>2)]=$108; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=$remainder; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=$111; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=$rsize; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=(($112+$113)|0); //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=$114; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=(($115+4)|0); //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=($117) | 1; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($116)>>2)]=$118; //@line 4328 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=$remainder; //@line 4329 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=$119; //@line 4329 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=(($120+8)|0); //@line 4329 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $extra=$121; //@line 4329 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 15; break; //@line 4330 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $122
      __label__ = 20; break; //@line 4331 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $123
      var $124=$next; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=$2; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=(($125+24)|0); //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=((($124))|0)==((($127))|0); //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($128) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $129
      var $130=$oldsize; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=$2; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=((($130)+($133))|0); //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$nb; //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=((($134))>>>0) > ((($135))>>>0); //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($136) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4332 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $137
      var $138=$oldsize; //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$2; //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=(($139+12)|0); //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=((($138)+($141))|0); //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newsize=$142; //@line 4334 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=$newsize; //@line 4335 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=$nb; //@line 4335 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=((($143)-($144))|0); //@line 4335 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newtopsize=$145; //@line 4335 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$oldp; //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=$146; //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=$nb; //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=(($147+$148)|0); //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$149; //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newtop=$150; //@line 4336 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=$oldp; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=(($151+4)|0); //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=($153) & 1; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=$nb; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=($154) | ($155); //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=($156) | 2; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$oldp; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=(($158+4)|0); //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($159)>>2)]=$157; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=$oldp; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=$160; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=$nb; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=(($161+$162)|0); //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=$163; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=(($164+4)|0); //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=HEAP32[(($165)>>2)]; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=($166) | 1; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($165)>>2)]=$167; //@line 4337 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=$newtopsize; //@line 4338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=($168) | 1; //@line 4338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=$newtop; //@line 4338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=(($170+4)|0); //@line 4338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($171)>>2)]=$169; //@line 4338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=$newtop; //@line 4339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=$2; //@line 4339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $174=(($173+24)|0); //@line 4339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($174)>>2)]=$172; //@line 4339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=$newtopsize; //@line 4340 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=$2; //@line 4340 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=(($176+12)|0); //@line 4340 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($177)>>2)]=$175; //@line 4340 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=$oldp; //@line 4341 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=$178; //@line 4341 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 4342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $179
      __label__ = 20; break;
    case 20: // $180
      __label__ = 21; break;
    case 21: // $181
      __label__ = 23; break; //@line 4343 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $182
      _abort(); //@line 4345 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4345 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $183
      var $184=$newp; //@line 4357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=((($184))|0)!=0; //@line 4357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($185) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 4357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $186
      var $187=$extra; //@line 4358 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=((($187))|0)!=0; //@line 4358 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($188) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4358 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $189
      var $190=$extra; //@line 4359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _free($190); //@line 4359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 4360 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $191
      var $192=$newp; //@line 4361 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=$192; //@line 4361 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=(($193+8)|0); //@line 4361 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$194; //@line 4361 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 4361 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $195
      var $196=$4; //@line 4364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=_malloc($196); //@line 4364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newmem=$197; //@line 4364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=$newmem; //@line 4365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=((($198))|0)!=0; //@line 4365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($199) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 4365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $200
      var $201=$oldsize; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=$oldp; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=(($202+4)|0); //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=($204) & 3; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=((($205))|0)==0; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=($206) ? 8 : 4; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=((($201)-($207))|0); //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oc=$208; //@line 4366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=$newmem; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=$3; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=$oc; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=$4; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=((($211))>>>0) < ((($212))>>>0); //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($213) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $214
      var $215=$oc; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219 = $215;__label__ = 31; break; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $216
      var $217=$4; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219 = $217;__label__ = 31; break; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $218
      var $219; //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      assert($219 % 1 === 0, 'memcpy given ' + $219 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($209, $210, $219, 1); //@line 4367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $220=$3; //@line 4368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _free($220); //@line 4368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 32; break; //@line 4369 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $221
      var $222=$newmem; //@line 4370 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$222; //@line 4370 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 4370 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $223
      var $224=$1; //@line 4374 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $224; //@line 4374 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_realloc["X"]=1;

function _memalign($alignment, $bytes) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$alignment;
  $2=$bytes;
  var $3=$1; //@line 4881 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $4=$2; //@line 4881 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $5=_internal_memalign(__gm_, $3, $4); //@line 4881 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return $5; //@line 4881 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _internal_memalign($m, $alignment, $bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $nb;
      var $req;
      var $mem;
      var $leader;
      var $trailer;
      var $p;
      var $br;
      var $pos;
      var $newp;
      var $leadsize;
      var $newsize;
      var $size;
      var $remainder_size;
      var $remainder;
      $2=$m;
      $3=$alignment;
      $4=$bytes;
      var $5=$3; //@line 4379 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=((($5))>>>0) <= 8; //@line 4379 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4379 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $7
      var $8=$4; //@line 4380 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=_malloc($8); //@line 4380 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$9; //@line 4380 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 36; break; //@line 4380 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $10
      var $11=$3; //@line 4381 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=((($11))>>>0) < 16; //@line 4381 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4381 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $13
      $3=16; //@line 4382 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 4382 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $14
      var $15=$3; //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$3; //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((($16)-1)|0); //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=($15) & ($17); //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=((($18))|0)!=0; //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 4383 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $20
      $a=16; //@line 4384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 6; break; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $21
      var $22=$a; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$3; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=((($22))>>>0) < ((($23))>>>0); //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $25
      var $26=$a; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26) << 1; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $a=$27; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 6; break; //@line 4385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $28
      var $29=$a; //@line 4386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $3=$29; //@line 4386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 9; break; //@line 4387 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $30
      var $31=$4; //@line 4389 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=$3; //@line 4389 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=((-64-($32))|0); //@line 4389 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=((($31))>>>0) >= ((($33))>>>0); //@line 4389 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($34) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 4389 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $35
      var $36=$2; //@line 4390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=((($36))|0)!=0; //@line 4390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($37) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $38
      var $39=___errno(); //@line 4391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($39)>>2)]=12; //@line 4391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 12; break; //@line 4392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $40
      __label__ = 35; break; //@line 4393 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $41
      var $42=$4; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=((($42))>>>0) < 11; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($43) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $44
      var $51 = 16;__label__ = 16; break; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $45
      var $46=$4; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=((($46)+4)|0); //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=((($47)+7)|0); //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=($48) & -8; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51 = $49;__label__ = 16; break; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $50
      var $51; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nb=$51; //@line 4395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$nb; //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$3; //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=((($52)+($53))|0); //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=((($54)+16)|0); //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=((($55)-4)|0); //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $req=$56; //@line 4396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=$req; //@line 4397 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=_malloc($57); //@line 4397 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$58; //@line 4397 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$mem; //@line 4398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=((($59))|0)!=0; //@line 4398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($60) { __label__ = 17; break; } else { __label__ = 34; break; } //@line 4398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $61
      $leader=0; //@line 4399 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $trailer=0; //@line 4400 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=$mem; //@line 4401 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=(($62-8)|0); //@line 4401 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$63; //@line 4401 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$64; //@line 4401 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=$mem; //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=($65); //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$3; //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=((($66))>>>0)%((($67))>>>0); //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=((($68))|0)!=0; //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($69) { __label__ = 18; break; } else { __label__ = 25; break; } //@line 4404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $70
      var $71=$mem; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=$3; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=(($71+$72)|0); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($73-1)|0); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=($74); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=$3; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=(((-($76)))|0); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=($75) & ($77); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=($78); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=(($79-8)|0); //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=$80; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=$81; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $br=$82; //@line 4416 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=$br; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=$p; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$84; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=($83); //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=($85); //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=((($86)-($87))|0); //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=((($88))>>>0) >= 16; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($89) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $90
      var $91=$br; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97 = $91;__label__ = 21; break; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $92
      var $93=$br; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=$3; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=(($93+$94)|0); //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97 = $95;__label__ = 21; break; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $96
      var $97; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $pos=$97; //@line 4418 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=$pos; //@line 4419 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$98; //@line 4419 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=$99; //@line 4419 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=$pos; //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$p; //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$101; //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=($100); //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=($102); //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=((($103)-($104))|0); //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leadsize=$105; //@line 4420 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=$p; //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(($106+4)|0); //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=($108) & -8; //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=$leadsize; //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $111=((($109)-($110))|0); //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newsize=$111; //@line 4421 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=$p; //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=(($112+4)|0); //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=($114) & 3; //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=((($115))|0)==0; //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($116) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4423 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $117
      var $118=$p; //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=(($118)|0); //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=HEAP32[(($119)>>2)]; //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=$leadsize; //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=((($120)+($121))|0); //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=$newp; //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=(($123)|0); //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($124)>>2)]=$122; //@line 4424 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=$newsize; //@line 4425 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=$newp; //@line 4425 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=(($126+4)|0); //@line 4425 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($127)>>2)]=$125; //@line 4425 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 24; break; //@line 4426 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $128
      var $129=$newp; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=(($129+4)|0); //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=($131) & 1; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=$newsize; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=($132) | ($133); //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=($134) | 2; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=$newp; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=(($136+4)|0); //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($137)>>2)]=$135; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=$newp; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$138; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=$newsize; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=$141; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=(($142+4)|0); //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=($144) | 1; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($143)>>2)]=$145; //@line 4428 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$p; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=(($146+4)|0); //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=HEAP32[(($147)>>2)]; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=($148) & 1; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$leadsize; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=($149) | ($150); //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=($151) | 2; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=$p; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=$p; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=$155; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=$leadsize; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=(($156+$157)|0); //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=$158; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=($161) | 1; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($160)>>2)]=$162; //@line 4429 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=$p; //@line 4430 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=$163; //@line 4430 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=(($164+8)|0); //@line 4430 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $leader=$165; //@line 4430 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 24; break;
    case 24: // $166
      var $167=$newp; //@line 4432 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$167; //@line 4432 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 25; break; //@line 4433 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $168
      var $169=$p; //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=(($169+4)|0); //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=($171) & 3; //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=((($172))|0)==0; //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($173) { __label__ = 29; break; } else { __label__ = 26; break; } //@line 4436 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $174
      var $175=$p; //@line 4437 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4437 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4437 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=($177) & -8; //@line 4437 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $size=$178; //@line 4437 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=$size; //@line 4438 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=$nb; //@line 4438 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $181=((($180)+16)|0); //@line 4438 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=((($179))>>>0) > ((($181))>>>0); //@line 4438 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($182) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4438 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $183
      var $184=$size; //@line 4439 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=$nb; //@line 4439 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=((($184)-($185))|0); //@line 4439 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder_size=$186; //@line 4439 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $187=$p; //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=$187; //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=$nb; //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $190=(($188+$189)|0); //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $191=$190; //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder=$191; //@line 4440 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=$p; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=(($192+4)|0); //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=($194) & 1; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=$nb; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=($195) | ($196); //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=($197) | 2; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=$p; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=(($199+4)|0); //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($200)>>2)]=$198; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=$p; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=$201; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=$nb; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=(($202+$203)|0); //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=$204; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=(($205+4)|0); //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=($207) | 1; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($206)>>2)]=$208; //@line 4441 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=$remainder; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=(($209+4)|0); //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=HEAP32[(($210)>>2)]; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=($211) & 1; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=$remainder_size; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $214=($212) | ($213); //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=($214) | 2; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $216=$remainder; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $217=(($216+4)|0); //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($217)>>2)]=$215; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $218=$remainder; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219=$218; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $220=$remainder_size; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=(($219+$220)|0); //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=$221; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=(($222+4)|0); //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=HEAP32[(($223)>>2)]; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=($224) | 1; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($223)>>2)]=$225; //@line 4442 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=$remainder; //@line 4443 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=$226; //@line 4443 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=(($227+8)|0); //@line 4443 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $trailer=$228; //@line 4443 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 28; break; //@line 4444 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $229
      __label__ = 29; break; //@line 4445 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $230
      var $231=$leader; //@line 4451 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $232=((($231))|0)!=0; //@line 4451 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($232) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4451 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $233
      var $234=$leader; //@line 4452 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _free($234); //@line 4452 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 31; break; //@line 4453 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $235
      var $236=$trailer; //@line 4454 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=((($236))|0)!=0; //@line 4454 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($237) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4454 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $238
      var $239=$trailer; //@line 4455 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _free($239); //@line 4455 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 4456 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $240
      var $241=$p; //@line 4457 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $242=$241; //@line 4457 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=(($242+8)|0); //@line 4457 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$243; //@line 4457 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 36; break; //@line 4457 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $244
      __label__ = 35; break;
    case 35: // $245
      $1=0; //@line 4460 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 36; break; //@line 4460 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $246
      var $247=$1; //@line 4461 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $247; //@line 4461 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_memalign["X"]=1;

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $sz=__stackBase__;
  $1=$n_elements;
  $2=$elem_size;
  $3=$chunks;
  var $4=$2; //@line 4886 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  HEAP32[(($sz)>>2)]=$4; //@line 4886 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $5=$1; //@line 4887 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $6=$3; //@line 4887 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $7=_ialloc(__gm_, $5, $sz, 3, $6); //@line 4887 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  STACKTOP = __stackBase__;
  return $7; //@line 4887 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _mallinfo($agg_result) {
  ;
  var __label__;

  _internal_mallinfo($agg_result, __gm_); //@line 4929 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return; //@line 4929 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _malloc_stats() {
  ;
  var __label__;

  _internal_malloc_stats(__gm_); //@line 4934 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return; //@line 4935 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _malloc_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+432)|0))>>2)]; //@line 4920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return $1; //@line 4920 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _malloc_max_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+436)|0))>>2)]; //@line 4924 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return $1; //@line 4924 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _ialloc($m, $n_elements, $sizes, $opts, $chunks) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $element_size;
      var $contents_size;
      var $array_size;
      var $mem;
      var $p;
      var $remainder_size;
      var $marray;
      var $array_chunk;
      var $was_enabled;
      var $size;
      var $i;
      var $array_chunk_size;
      $2=$m;
      $3=$n_elements;
      $4=$sizes;
      $5=$opts;
      $6=$chunks;
      var $7=HEAP32[((((_mparams)|0))>>2)]; //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=((($7))|0)!=0; //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($8) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $9
      var $10=_init_mparams(); //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $12
      ;
      ; //@line 4491 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=$6; //@line 4493 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=((($15))|0)!=0; //@line 4493 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4493 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $17
      var $18=$3; //@line 4494 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=((($18))|0)==0; //@line 4494 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4494 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $20
      var $21=$6; //@line 4495 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$21; //@line 4495 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 4495 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $22
      var $23=$6; //@line 4496 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $marray=$23; //@line 4496 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $array_size=0; //@line 4497 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 12; break; //@line 4498 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $24
      var $25=$3; //@line 4501 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=((($25))|0)==0; //@line 4501 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4501 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $27
      var $28=_malloc(0); //@line 4502 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=$28; //@line 4502 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$29; //@line 4502 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 4502 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $30
      $marray=0; //@line 4503 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=$3; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=(((($31)<<2))|0); //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=((($32))>>>0) < 11; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $34
      var $42 = 16;__label__ = 11; break; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $35
      var $36=$3; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=(((($36)<<2))|0); //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=((($37)+4)|0); //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((($38)+7)|0); //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=($39) & -8; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42 = $40;__label__ = 11; break; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $41
      var $42; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $array_size=$42; //@line 4504 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 12; break;
    case 12: // $43
      var $44=$5; //@line 4508 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=($44) & 1; //@line 4508 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=((($45))|0)!=0; //@line 4508 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($46) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4508 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $47
      var $48=$4; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=HEAPU32[(($48)>>2)]; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=((($49))>>>0) < 11; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($50) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $51
      var $59 = 16;__label__ = 16; break; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $52
      var $53=$4; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=((($54)+4)|0); //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=((($55)+7)|0); //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=($56) & -8; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59 = $57;__label__ = 16; break; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $58
      var $59; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $element_size=$59; //@line 4509 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$3; //@line 4510 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$element_size; //@line 4510 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=((($60)*($61))|0); //@line 4510 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $contents_size=$62; //@line 4510 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 25; break; //@line 4511 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $63
      $element_size=0; //@line 4513 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $contents_size=0; //@line 4514 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=0; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 18; break; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $64
      var $65=$i; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=$3; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=((($65))|0)!=((($66))|0); //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($67) { __label__ = 19; break; } else { __label__ = 24; break; } //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $68
      var $69=$i; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=$4; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=(($70+($69<<2))|0); //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=HEAPU32[(($71)>>2)]; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=((($72))>>>0) < 11; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($73) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $74
      var $84 = 16;__label__ = 22; break; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $75
      var $76=$i; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=$4; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=(($77+($76<<2))|0); //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=((($79)+4)|0); //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=((($80)+7)|0); //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=($81) & -8; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84 = $82;__label__ = 22; break; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $83
      var $84; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$contents_size; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=((($85)+($84))|0); //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $contents_size=$86; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 23; break; //@line 4516 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $87
      var $88=$i; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=((($88)+1)|0); //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$89; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 18; break; //@line 4515 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $90
      __label__ = 25; break;
    case 25: // $91
      var $92=$contents_size; //@line 4519 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=$array_size; //@line 4519 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=((($92)+($93))|0); //@line 4519 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $size=$94; //@line 4519 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=$2; //@line 4526 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=(($95+440)|0); //@line 4526 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4526 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=($97) & 0; //@line 4526 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $was_enabled=$98; //@line 4526 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$2; //@line 4527 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=(($99+440)|0); //@line 4527 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=HEAP32[(($100)>>2)]; //@line 4527 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($100)>>2)]=$101; //@line 4527 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=$size; //@line 4528 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=((($102)-4)|0); //@line 4528 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=_malloc($103); //@line 4528 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mem=$104; //@line 4528 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=$was_enabled; //@line 4529 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=((($105))|0)!=0; //@line 4529 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($106) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4529 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $107
      var $108=$2; //@line 4530 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=(($108+440)|0); //@line 4530 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 4530 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($109)>>2)]=$110; //@line 4530 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 27; break; //@line 4530 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $111
      var $112=$mem; //@line 4531 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=((($112))|0)==0; //@line 4531 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($113) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4531 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $114
      $1=0; //@line 4532 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 4532 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $115
      var $116=$mem; //@line 4535 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=(($116-8)|0); //@line 4535 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=$117; //@line 4535 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$118; //@line 4535 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=$p; //@line 4536 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=(($119+4)|0); //@line 4536 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 4536 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=($121) & -8; //@line 4536 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder_size=$122; //@line 4536 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=$5; //@line 4540 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=($123) & 2; //@line 4540 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=((($124))|0)!=0; //@line 4540 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($125) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4540 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $126
      var $127=$mem; //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=$127; //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=$128; //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=$remainder_size; //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=((($130)-4)|0); //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=$array_size; //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=((($131)-($132))|0); //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _memset($129, 0, $133, 1); //@line 4541 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 31; break; //@line 4542 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $134
      var $135=$marray; //@line 4545 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=((($135))|0)==0; //@line 4545 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($136) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4545 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $137
      var $138=$p; //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$138; //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=$contents_size; //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=$141; //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $array_chunk=$142; //@line 4547 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=$remainder_size; //@line 4548 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=$contents_size; //@line 4548 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=((($143)-($144))|0); //@line 4548 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $array_chunk_size=$145; //@line 4548 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$array_chunk; //@line 4549 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=$146; //@line 4549 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=(($147+8)|0); //@line 4549 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $149=$148; //@line 4549 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $marray=$149; //@line 4549 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $150=$array_chunk_size; //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=($150) | 1; //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=($151) | 2; //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=$array_chunk; //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4550 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=$contents_size; //@line 4551 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder_size=$155; //@line 4551 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 33; break; //@line 4552 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $156
      $i=0; //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 34; break; //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $157
      var $158=$p; //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=$158; //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=(($159+8)|0); //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=$i; //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=$marray; //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=(($162+($161<<2))|0); //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($163)>>2)]=$160; //@line 4556 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=$i; //@line 4557 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=$3; //@line 4557 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=((($165)-1)|0); //@line 4557 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $167=((($164))|0)!=((($166))|0); //@line 4557 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($167) { __label__ = 35; break; } else { __label__ = 42; break; } //@line 4557 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $168
      var $169=$element_size; //@line 4558 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=((($169))|0)!=0; //@line 4558 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($170) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4558 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $171
      var $172=$element_size; //@line 4559 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $size=$172; //@line 4559 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 41; break; //@line 4559 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $173
      var $174=$i; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $175=$4; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=(($175+($174<<2))|0); //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=HEAPU32[(($176)>>2)]; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=((($177))>>>0) < 11; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($178) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $179
      var $189 = 16;__label__ = 40; break; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $180
      var $181=$i; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=$4; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=(($182+($181<<2))|0); //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=((($184)+4)|0); //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=((($185)+7)|0); //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $187=($186) & -8; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189 = $187;__label__ = 40; break; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $188
      var $189; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $size=$189; //@line 4561 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 41; break;
    case 41: // $190
      var $191=$size; //@line 4562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=$remainder_size; //@line 4562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=((($192)-($191))|0); //@line 4562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $remainder_size=$193; //@line 4562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=$size; //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=($194) | 1; //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=($195) | 2; //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=$p; //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=(($197+4)|0); //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 4563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=$p; //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=$199; //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=$size; //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=(($200+$201)|0); //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=$202; //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$203; //@line 4564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 43; break; //@line 4565 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $204
      var $205=$remainder_size; //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=($205) | 1; //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=($206) | 2; //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=$p; //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=(($208+4)|0); //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($209)>>2)]=$207; //@line 4567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 45; break; //@line 4568 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $210
      __label__ = 44; break; //@line 4570 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $211
      var $212=$i; //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=((($212)+1)|0); //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$213; //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 34; break; //@line 4555 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $214
      var $215=$marray; //@line 4589 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$215; //@line 4589 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 4589 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $216
      var $217=$1; //@line 4590 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $217; //@line 4590 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_ialloc["X"]=1;

function _independent_comalloc($n_elements, $sizes, $chunks) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$n_elements;
  $2=$sizes;
  $3=$chunks;
  var $4=$1; //@line 4892 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $5=$2; //@line 4892 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $6=$3; //@line 4892 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $7=_ialloc(__gm_, $4, $5, 0, $6); //@line 4892 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return $7; //@line 4892 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _valloc($bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))|0)!=0; //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=_init_mparams(); //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $7
      ;
      ; //@line 4897 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4898 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $pagesz=$10; //@line 4898 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$pagesz; //@line 4899 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$1; //@line 4899 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=_memalign($11, $12); //@line 4899 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $13; //@line 4899 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_mparams() {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $2=((($1))|0)==0; //@line 2965 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($2) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2965 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $3
      var $4=_sysconf(8); //@line 2971 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$4; //@line 2971 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=$psize; //@line 2972 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $gsize=$5; //@line 2972 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=$gsize; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=$gsize; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=((($7)-1)|0); //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=($6) & ($8); //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=((($9))|0)!=0; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $11
      var $12=$psize; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$psize; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=((($13)-1)|0); //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=($12) & ($14); //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=((($15))|0)!=0; //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2989 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $17
      _abort(); //@line 2997 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $18
      var $19=$gsize; //@line 2999 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$19; //@line 2999 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$psize; //@line 3000 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$20; //@line 3000 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$21; //@line 3011 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=_time(0); //@line 3030 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=($22) ^ 1431655765; //@line 3030 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $magic=$23; //@line 3030 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=$magic; //@line 3032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=($24) | 8; //@line 3032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $magic=$25; //@line 3032 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=$magic; //@line 3033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26) & -8; //@line 3033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $magic=$27; //@line 3033 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$magic; //@line 3034 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$28; //@line 3034 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 5; break; //@line 3036 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $29
      ;
      return 1; //@line 3039 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _pvalloc($bytes) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))|0)!=0; //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=_init_mparams(); //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $7
      ;
      ; //@line 4904 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4905 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $pagesz=$10; //@line 4905 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$pagesz; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$1; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$pagesz; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=((($12)+($13))|0); //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=((($14)-1)|0); //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$pagesz; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((($16)-1)|0); //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=($17) ^ -1; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=($15) & ($18); //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=_memalign($11, $19); //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $20; //@line 4906 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_trim($pad) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $result;
      $1=$pad;
      $result=0; //@line 4910 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))|0)!=0; //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=_init_mparams(); //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $7
      ;
      ; //@line 4911 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=$1; //@line 4913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=_sys_trim(__gm_, $10); //@line 4913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $result=$11; //@line 4913 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$result; //@line 4916 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $12; //@line 4916 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _internal_mallinfo($agg_result, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $nm=__stackBase__;
      var $nfree;
      var $mfree;
      var $sum;
      var $s;
      var $q;
      var $sz;
      $1=$m;
      var $2=$nm; //@line 3338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      for (var $$dest = $2>>2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      }; //@line 3338 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=((($3))|0)!=0; //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $5
      var $6=_init_mparams(); //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $8
      ;
      ; //@line 3339 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$1; //@line 3342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=(($11+24)|0); //@line 3342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 3342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=((($13))|0)!=0; //@line 3342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 19; break; } //@line 3342 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $15
      $nfree=1; //@line 3343 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$1; //@line 3344 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=(($16+12)|0); //@line 3344 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 3344 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=((($18)+40)|0); //@line 3344 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mfree=$19; //@line 3344 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$mfree; //@line 3345 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sum=$20; //@line 3345 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=$1; //@line 3346 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=(($21+444)|0); //@line 3346 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $s=$22; //@line 3346 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 3347 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $23
      var $24=$s; //@line 3347 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($24))|0)!=0; //@line 3347 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 18; break; } //@line 3347 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $26
      var $27=$s; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=(($27)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=HEAP32[(($28)>>2)]; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$s; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=(($30)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=($33); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=($34) & 7; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=((($35))|0)==0; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $37
      var $48 = 0;__label__ = 8; break; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $38
      var $39=$s; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=(($39)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=(($41+8)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=($42); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=($43) & 7; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=((8-($44))|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=($45) & 7; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48 = $46;__label__ = 8; break; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $47
      var $48; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=(($29+$48)|0); //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=$49; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$50; //@line 3348 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 9; break; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $51
      var $52=$q; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$52; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=$s; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=(($54)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=HEAPU32[(($55)>>2)]; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=((($53))>>>0) >= ((($56))>>>0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($57) { __label__ = 10; break; } else { var $81 = 0;__label__ = 13; break; } //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $58
      var $59=$q; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$59; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$s; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=(($61)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=HEAP32[(($62)>>2)]; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$s; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=(($64+4)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=(($63+$66)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=((($60))>>>0) < ((($67))>>>0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($68) { __label__ = 11; break; } else { var $81 = 0;__label__ = 13; break; } //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $69
      var $70=$q; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=$1; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=(($71+24)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=((($70))|0)!=((($73))|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($74) { __label__ = 12; break; } else { var $81 = 0;__label__ = 13; break; } //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $75
      var $76=$q; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=(($76+4)|0); //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=((($78))|0)!=7; //@line 3349 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81 = $79;__label__ = 13; break;
    case 13: // $80
      var $81;
      if ($81) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: // $82
      var $83=$q; //@line 3351 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=(($83+4)|0); //@line 3351 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 3351 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=($85) & -8; //@line 3351 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sz=$86; //@line 3351 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=$sz; //@line 3352 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$sum; //@line 3352 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=((($88)+($87))|0); //@line 3352 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sum=$89; //@line 3352 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=$q; //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=(($90+4)|0); //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=HEAP32[(($91)>>2)]; //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=($92) & 3; //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=((($93))|0)!=1; //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($94) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3353 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $95
      var $96=$sz; //@line 3354 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=$mfree; //@line 3354 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=((($97)+($96))|0); //@line 3354 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mfree=$98; //@line 3354 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$nfree; //@line 3355 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=((($99)+1)|0); //@line 3355 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nfree=$100; //@line 3355 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 16; break; //@line 3356 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $101
      var $102=$q; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$102; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=$q; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=($106) & -8; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=$108; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$109; //@line 3357 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 9; break; //@line 3358 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $110
      var $111=$s; //@line 3359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $s=$113; //@line 3359 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 3360 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $114
      var $115=$sum; //@line 3362 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=(($nm)|0); //@line 3362 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($116)>>2)]=$115; //@line 3362 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=$nfree; //@line 3363 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=(($nm+4)|0); //@line 3363 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($118)>>2)]=$117; //@line 3363 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=$1; //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=(($119+432)|0); //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=$sum; //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=((($121)-($122))|0); //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=(($nm+16)|0); //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($124)>>2)]=$123; //@line 3364 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=$1; //@line 3365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=(($125+436)|0); //@line 3365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=(($nm+20)|0); //@line 3365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($128)>>2)]=$127; //@line 3365 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=$1; //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=(($129+432)|0); //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=$mfree; //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=((($131)-($132))|0); //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=(($nm+28)|0); //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($134)>>2)]=$133; //@line 3366 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$mfree; //@line 3367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=(($nm+32)|0); //@line 3367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($136)>>2)]=$135; //@line 3367 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=$1; //@line 3368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=(($137+12)|0); //@line 3368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=HEAP32[(($138)>>2)]; //@line 3368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=(($nm+36)|0); //@line 3368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($140)>>2)]=$139; //@line 3368 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 3369 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $141
      var $142=$agg_result; //@line 3373 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=$nm; //@line 3373 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $143>>2, $$dest = $142>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      }; //@line 3373 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      STACKTOP = __stackBase__;
      return; //@line 3373 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_mallinfo["X"]=1;

function _internal_malloc_stats($m) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $maxfp;
      var $fp;
      var $used;
      var $s;
      var $q;
      $1=$m;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $3=((($2))|0)!=0; //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($3) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $4
      var $5=_init_mparams(); //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $7
      ;
      ; //@line 3378 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $maxfp=0; //@line 3380 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $fp=0; //@line 3381 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $used=0; //@line 3382 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=$1; //@line 3384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=(($10+24)|0); //@line 3384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 3384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=((($12))|0)!=0; //@line 3384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 19; break; } //@line 3384 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $14
      var $15=$1; //@line 3385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=(($15+444)|0); //@line 3385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $s=$16; //@line 3385 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$1; //@line 3386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=(($17+436)|0); //@line 3386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 3386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $maxfp=$19; //@line 3386 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$1; //@line 3387 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=(($20+432)|0); //@line 3387 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=HEAP32[(($21)>>2)]; //@line 3387 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $fp=$22; //@line 3387 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$fp; //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=$1; //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=(($24+12)|0); //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=((($26)+40)|0); //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=((($23)-($27))|0); //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $used=$28; //@line 3388 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 3390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $29
      var $30=$s; //@line 3390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=((($30))|0)!=0; //@line 3390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($31) { __label__ = 5; break; } else { __label__ = 18; break; } //@line 3390 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $32
      var $33=$s; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=(($33)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$s; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=(($36)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=(($38+8)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=($39); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=($40) & 7; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=((($41))|0)==0; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($42) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $43
      var $54 = 0;__label__ = 8; break; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $44
      var $45=$s; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=(($45)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=HEAP32[(($46)>>2)]; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=(($47+8)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=($48); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=($49) & 7; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=((8-($50))|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=($51) & 7; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54 = $52;__label__ = 8; break; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $53
      var $54; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=(($35+$54)|0); //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$55; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$56; //@line 3391 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 9; break; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $57
      var $58=$q; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$58; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$s; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=(($60)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=HEAPU32[(($61)>>2)]; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=((($59))>>>0) >= ((($62))>>>0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($63) { __label__ = 10; break; } else { var $87 = 0;__label__ = 13; break; } //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $64
      var $65=$q; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=$65; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$s; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=(($67)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=$s; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=HEAP32[(($71)>>2)]; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=(($69+$72)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=((($66))>>>0) < ((($73))>>>0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($74) { __label__ = 11; break; } else { var $87 = 0;__label__ = 13; break; } //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $75
      var $76=$q; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=$1; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=(($77+24)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=((($76))|0)!=((($79))|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($80) { __label__ = 12; break; } else { var $87 = 0;__label__ = 13; break; } //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $81
      var $82=$q; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=(($82+4)|0); //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=((($84))|0)!=7; //@line 3392 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87 = $85;__label__ = 13; break;
    case 13: // $86
      var $87;
      if ($87) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: // $88
      var $89=$q; //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=(($89+4)|0); //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=($91) & 3; //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=((($92))|0)!=1; //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($93) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3394 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $94
      var $95=$q; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=(($95+4)|0); //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=($97) & -8; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$used; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=((($99)-($98))|0); //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $used=$100; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 16; break; //@line 3395 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $101
      var $102=$q; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$102; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=$q; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=($106) & -8; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=$108; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$109; //@line 3396 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 9; break; //@line 3397 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $110
      var $111=$s; //@line 3398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $s=$113; //@line 3398 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 4; break; //@line 3399 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $114
      __label__ = 19; break; //@line 3400 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 19: // $115
      var $116=HEAP32[((__impure_ptr)>>2)]; //@line 3402 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=(($116+12)|0); //@line 3402 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=HEAP32[(($117)>>2)]; //@line 3402 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $119=$maxfp; //@line 3402 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=_fprintf($118, ((__str858)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$119,tempInt)); //@line 3402 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=HEAP32[((__impure_ptr)>>2)]; //@line 3403 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=(($121+12)|0); //@line 3403 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=HEAP32[(($122)>>2)]; //@line 3403 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=$fp; //@line 3403 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=_fprintf($123, ((__str1859)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$124,tempInt)); //@line 3403 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=HEAP32[((__impure_ptr)>>2)]; //@line 3404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=(($126+12)|0); //@line 3404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 3404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=$used; //@line 3404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=_fprintf($128, ((__str2860)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$129,tempInt)); //@line 3404 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return; //@line 3408 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_malloc_stats["X"]=1;

function _mallopt($param_number, $value) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$param_number;
  $2=$value;
  var $3=$1; //@line 4938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $4=$2; //@line 4938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  var $5=_change_mparam($3, $4); //@line 4938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
  ;
  return $5; //@line 4938 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
}


function _malloc_usable_size($mem) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $p;
      $2=$mem;
      var $3=$2; //@line 4944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=((($3))|0)!=0; //@line 4944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 4944 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $5
      var $6=$2; //@line 4945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=(($6-8)|0); //@line 4945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$7; //@line 4945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$8; //@line 4945 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=$p; //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=(($9+4)|0); //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=HEAP32[(($10)>>2)]; //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=($11) & 3; //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=((($12))|0)!=1; //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4946 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $14
      var $15=$p; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=(($15+4)|0); //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=($17) & -8; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=$p; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=(($19+4)|0); //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=HEAP32[(($20)>>2)]; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=($21) & 3; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=((($22))|0)==0; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=($23) ? 8 : 4; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($18)-($24))|0); //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$25; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 5; break; //@line 4947 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $26
      __label__ = 4; break; //@line 4948 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $27
      $1=0; //@line 4949 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 5; break; //@line 4949 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $28
      var $29=$1; //@line 4950 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $29; //@line 4950 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3; //@line 3699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=(($5+4)|0); //@line 3699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=($7) & -8; //@line 3699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldsize=$8; //@line 3699 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=$4; //@line 3700 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=($9) >>> 3; //@line 3700 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=((($10))>>>0) < 32; //@line 3700 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3700 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $12
      $1=0; //@line 3701 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3701 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $13
      var $14=$oldsize; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=$4; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=((($15)+4)|0); //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((($14))>>>0) >= ((($16))>>>0); //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $18
      var $19=$oldsize; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$4; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=((($19)-($20))|0); //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=($22) << 1; //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=((($21))>>>0) <= ((($23))>>>0); //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3703 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $25
      var $26=$3; //@line 3705 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$26; //@line 3705 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3705 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $27
      var $28=$3; //@line 3707 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=(($28)|0); //@line 3707 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 3707 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $offset=$30; //@line 3707 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=$oldsize; //@line 3708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=$offset; //@line 3708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=((($31)+($32))|0); //@line 3708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=((($33)+16)|0); //@line 3708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldmmsize=$34; //@line 3708 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=$4; //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=((($35)+24)|0); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=((($36)+7)|0); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((($38)-1)|0); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=((($37)+($39))|0); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=((($41)-1)|0); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=($42) ^ -1; //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=($40) & ($43); //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newmmsize=$44; //@line 3709 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $cp=-1; //@line 3711 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=$cp; //@line 3712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=((($45))|0)!=-1; //@line 3712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($46) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 3712 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $47
      var $48=$cp; //@line 3713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=$offset; //@line 3713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=(($48+$49)|0); //@line 3713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=$50; //@line 3713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $newp=$51; //@line 3713 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$newmmsize; //@line 3714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$offset; //@line 3714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=((($52)-($53))|0); //@line 3714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=((($54)-16)|0); //@line 3714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$55; //@line 3714 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$psize; //@line 3715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=$newp; //@line 3715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=(($57+4)|0); //@line 3715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($58)>>2)]=$56; //@line 3715 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$newp; //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$59; //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$psize; //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$62; //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=(($63+4)|0); //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($64)>>2)]=7; //@line 3717 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=$newp; //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=$65; //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$psize; //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=((($67)+4)|0); //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=(($66+$68)|0); //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=$69; //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($71)>>2)]=0; //@line 3718 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=$cp; //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=$2; //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($73+16)|0); //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=HEAPU32[(($74)>>2)]; //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=((($72))>>>0) < ((($75))>>>0); //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($76) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3720 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $77
      var $78=$cp; //@line 3721 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=$2; //@line 3721 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=(($79+16)|0); //@line 3721 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($80)>>2)]=$78; //@line 3721 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 8; break; //@line 3721 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $81
      var $82=$newmmsize; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=$oldmmsize; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=((($82)-($83))|0); //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$2; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=(($85+432)|0); //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=((($87)+($84))|0); //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($86)>>2)]=$88; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=$2; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=(($89+436)|0); //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=HEAPU32[(($90)>>2)]; //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=((($88))>>>0) > ((($91))>>>0); //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($92) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3722 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $93
      var $94=$2; //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=(($94+432)|0); //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=$2; //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=(($97+436)|0); //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($98)>>2)]=$96; //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 10; break; //@line 3723 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $99
      var $100=$newp; //@line 3725 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$100; //@line 3725 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3725 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $101
      __label__ = 12; break;
    case 12: // $102
      $1=0; //@line 3728 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3728 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $103
      var $104=$1; //@line 3729 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $104; //@line 3729 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2; //@line 2562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=(($4+444)|0); //@line 2562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$5; //@line 2562 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 2563 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $6
      var $7=$3; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$sp; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=(($8)|0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=((($7))>>>0) >= ((($10))>>>0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($11) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $12
      var $13=$3; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=$sp; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=(($14)|0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=$sp; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=(($17+4)|0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=(($16+$19)|0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=((($13))>>>0) < ((($20))>>>0); //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2564 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $22
      var $23=$sp; //@line 2565 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$23; //@line 2565 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 7; break; //@line 2565 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $24
      var $25=$sp; //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=(($25+8)|0); //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=HEAP32[(($26)>>2)]; //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$27; //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=((($27))|0)==0; //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2566 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $29
      $1=0; //@line 2567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 7; break; //@line 2567 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $30
      __label__ = 1; break; //@line 2568 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $31
      var $32=$1; //@line 2569 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $32; //@line 2569 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=$4; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=(($5+8)|0); //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=($6); //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=($7) & 7; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=((($8))|0)==0; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $10
      var $20 = 0;__label__ = 3; break; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $11
      var $12=$2; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$12; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=($14); //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=($15) & 7; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((8-($16))|0); //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=($17) & 7; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20 = $18;__label__ = 3; break; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $19
      var $20; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $offset=$20; //@line 3736 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=$2; //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=$21; //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$offset; //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=(($22+$23)|0); //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=$24; //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $2=$25; //@line 3737 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=$offset; //@line 3738 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=$3; //@line 3738 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=((($27)-($26))|0); //@line 3738 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $3=$28; //@line 3738 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=$2; //@line 3740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=$1; //@line 3740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=(($30+24)|0); //@line 3740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($31)>>2)]=$29; //@line 3740 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=$3; //@line 3741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=$1; //@line 3741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=(($33+12)|0); //@line 3741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($34)>>2)]=$32; //@line 3741 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=$3; //@line 3742 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=($35) | 1; //@line 3742 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=$2; //@line 3742 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=(($37+4)|0); //@line 3742 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($38)>>2)]=$36; //@line 3742 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=$2; //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$39; //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$3; //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=$42; //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=(($43+4)|0); //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($44)>>2)]=40; //@line 3744 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=$1; //@line 3745 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=(($46+28)|0); //@line 3745 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($47)>>2)]=$45; //@line 3745 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return; //@line 3746 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3; //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=((($4)+24)|0); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=((($5)+7)|0); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=((($7)-1)|0); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=((($6)+($8))|0); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=((($10)-1)|0); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=($11) ^ -1; //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=($9) & ($12); //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $mmsize=$13; //@line 3672 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=$mmsize; //@line 3673 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=$3; //@line 3673 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=((($14))>>>0) > ((($15))>>>0); //@line 3673 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($16) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 3673 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $17
      $mm=-1; //@line 3674 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=$mm; //@line 3675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=((($18))|0)!=-1; //@line 3675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($19) { __label__ = 2; break; } else { __label__ = 11; break; } //@line 3675 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $20
      var $21=$mm; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=(($21+8)|0); //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=($22); //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=($23) & 7; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($24))|0)==0; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $26
      var $35 = 0;__label__ = 5; break; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $27
      var $28=$mm; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=(($28+8)|0); //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=($29); //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=($30) & 7; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=((8-($31))|0); //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=($32) & 7; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35 = $33;__label__ = 5; break; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $34
      var $35; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $offset=$35; //@line 3676 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=$mmsize; //@line 3677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=$offset; //@line 3677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38=((($36)-($37))|0); //@line 3677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=((($38)-16)|0); //@line 3677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$39; //@line 3677 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$mm; //@line 3678 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$offset; //@line 3678 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3678 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=$42; //@line 3678 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$43; //@line 3678 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=$offset; //@line 3679 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=$p; //@line 3679 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=(($45)|0); //@line 3679 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($46)>>2)]=$44; //@line 3679 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=$psize; //@line 3680 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=$p; //@line 3680 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=(($48+4)|0); //@line 3680 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($49)>>2)]=$47; //@line 3680 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=$p; //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=$50; //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$psize; //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=(($51+$52)|0); //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=$53; //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=(($54+4)|0); //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($55)>>2)]=7; //@line 3682 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$p; //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=$56; //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=$psize; //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=((($58)+4)|0); //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=(($57+$59)|0); //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$60; //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=(($61+4)|0); //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($62)>>2)]=0; //@line 3683 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$2; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=(($63+16)|0); //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=HEAP32[(($64)>>2)]; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=((($65))|0)==0; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($66) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $67
      var $68=$mm; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=$2; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=(($69+16)|0); //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=((($68))>>>0) < ((($71))>>>0); //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($72) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3685 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $73
      var $74=$mm; //@line 3686 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=$2; //@line 3686 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=(($75+16)|0); //@line 3686 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($76)>>2)]=$74; //@line 3686 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 8; break; //@line 3686 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $77
      var $78=$mmsize; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=$2; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=(($79+432)|0); //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=((($81)+($78))|0); //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($80)>>2)]=$82; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=$2; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=(($83+436)|0); //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=HEAPU32[(($84)>>2)]; //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=((($82))>>>0) > ((($85))>>>0); //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($86) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3687 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $87
      var $88=$2; //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=(($88+432)|0); //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=$2; //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=(($91+436)|0); //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($92)>>2)]=$90; //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 10; break; //@line 3688 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $93
      var $94=$p; //@line 3691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=$94; //@line 3691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=(($95+8)|0); //@line 3691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=$96; //@line 3691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3691 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $97
      __label__ = 12; break; //@line 3693 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $98
      $1=0; //@line 3694 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3694 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $99
      var $100=$1; //@line 3695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $100; //@line 3695 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $2
      var $3=$i; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $4=((($3))>>>0) < 32; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($4) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $5
      var $6=$i; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=($6) << 1; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$1; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=(($8+40)|0); //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=(($9+($7<<2))|0); //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=$10; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$11; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $bin=$12; //@line 3753 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=$bin; //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=$bin; //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=(($14+12)|0); //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($15)>>2)]=$13; //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=$bin; //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=(($16+8)|0); //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($17)>>2)]=$13; //@line 3754 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 3; break; //@line 3755 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $18
      var $19=$i; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=((($19)+1)|0); //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $i=$20; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 1; break; //@line 3752 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $21
      ;
      return; //@line 3756 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _change_mparam($param_number, $value) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $val;
      $2=$param_number;
      $3=$value;
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $5=((($4))|0)!=0; //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $6
      var $7=_init_mparams(); //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ; //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 2; break; //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $9
      ;
      ; //@line 3045 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$3; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=((($12))|0)==-1; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $14
      var $18 = -1;__label__ = 5; break; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $15
      var $16=$3; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18 = $16;__label__ = 5; break; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $17
      var $18; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $val=$18; //@line 3046 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=$2; //@line 3047 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($19 == -1) {
        __label__ = 6; break;
      }
      else if ($19 == -2) {
        __label__ = 7; break;
      }
      else if ($19 == -3) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 6: // $20
      var $21=$val; //@line 3049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=$21; //@line 3049 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=1; //@line 3050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3050 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $22
      var $23=$val; //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=HEAPU32[((((_mparams+4)|0))>>2)]; //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=((($23))>>>0) >= ((($24))>>>0); //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($25) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $26
      var $27=$val; //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=$val; //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=((($28)-1)|0); //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $30=($27) & ($29); //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $31=((($30))|0)==0; //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($31) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3052 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $32
      var $33=$val; //@line 3053 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$33; //@line 3053 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=1; //@line 3054 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3054 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $34
      $1=0; //@line 3057 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3057 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $35
      var $36=$val; //@line 3059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=$36; //@line 3059 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $1=1; //@line 3060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3060 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $37
      $1=0; //@line 3062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 13; break; //@line 3062 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $38
      var $39=$1; //@line 3064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $39; //@line 3064 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_change_mparam["X"]=1;

function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=$2; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=(($6+8)|0); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=($7); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=($8) & 7; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=((($9))|0)==0; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $11
      var $20 = 0;__label__ = 3; break; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $12
      var $13=$2; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=($14); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=($15) & 7; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=((8-($16))|0); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=($17) & 7; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20 = $18;__label__ = 3; break; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $19
      var $20; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=(($5+$20)|0); //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=$21; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$22; //@line 3780 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=$3; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=$3; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=(($24+8)|0); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=($25); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26) & 7; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=((($27))|0)==0; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $29
      var $38 = 0;__label__ = 6; break; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $30
      var $31=$3; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $32=(($31+8)|0); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=($32); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=($33) & 7; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=((8-($34))|0); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=($35) & 7; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $38 = $36;__label__ = 6; break; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $37
      var $38; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39=(($23+$38)|0); //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$39; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldfirst=$40; //@line 3781 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$oldfirst; //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=$41; //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=$p; //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=$43; //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=($42); //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=($44); //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $47=((($45)-($46))|0); //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$47; //@line 3782 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $48=$p; //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $49=$48; //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $50=$4; //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $51=(($49+$50)|0); //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52=$51; //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$52; //@line 3783 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$psize; //@line 3784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=$4; //@line 3784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=((($53)-($54))|0); //@line 3784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $qsize=$55; //@line 3784 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$4; //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=($56) | 1; //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=($57) | 2; //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$p; //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=(($59+4)|0); //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 3785 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$oldfirst; //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=$1; //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=(($62+24)|0); //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=((($61))|0)==((($64))|0); //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($65) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3792 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $66
      var $67=$qsize; //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=$1; //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=(($68+12)|0); //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=((($70)+($67))|0); //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($69)>>2)]=$71; //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tsize=$71; //@line 3793 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=$q; //@line 3794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=$1; //@line 3794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($73+24)|0); //@line 3794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3794 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=$tsize; //@line 3795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=($75) | 1; //@line 3795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=$q; //@line 3795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=(($77+4)|0); //@line 3795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($78)>>2)]=$76; //@line 3795 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 108; break; //@line 3797 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $79
      var $80=$oldfirst; //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=$1; //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=(($81+20)|0); //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=((($80))|0)==((($83))|0); //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($84) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3798 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $85
      var $86=$qsize; //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=$1; //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=(($87+8)|0); //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=HEAP32[(($88)>>2)]; //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=((($89)+($86))|0); //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($88)>>2)]=$90; //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $dsize=$90; //@line 3799 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=$q; //@line 3800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=$1; //@line 3800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=(($92+20)|0); //@line 3800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($93)>>2)]=$91; //@line 3800 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=$dsize; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=($94) | 1; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $96=$q; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $97=(($96+4)|0); //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=$dsize; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=$q; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=$99; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$dsize; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=(($100+$101)|0); //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$102; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=(($103)|0); //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($104)>>2)]=$98; //@line 3801 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 107; break; //@line 3802 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $105
      var $106=$oldfirst; //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=(($106+4)|0); //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=($108) & 3; //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $110=((($109))|0)!=1; //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($110) { __label__ = 71; break; } else { __label__ = 11; break; } //@line 3804 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $111
      var $112=$oldfirst; //@line 3805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $113=(($112+4)|0); //@line 3805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 3805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $115=($114) & -8; //@line 3805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nsize=$115; //@line 3805 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=$nsize; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=($116) >>> 3; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $118=((($117))>>>0) < 32; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($118) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $119
      var $120=$oldfirst; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=(($120+8)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$122; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=$oldfirst; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=(($123+12)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=HEAP32[(($124)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$125; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=$nsize; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=($126) >>> 3; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$127; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=$F; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=$B; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=((($128))|0)==((($129))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($130) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $131
      var $132=$I; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=1 << ($132); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=($133) ^ -1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=(($135)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=($137) & ($134); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($136)>>2)]=$138; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 23; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $139
      var $140=$F; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=$I; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=($141) << 1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=(($143+40)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=(($144+($142<<2))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$145; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=$146; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=((($140))|0)==((($147))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($148) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $149
      var $150=$F; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=$150; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=(($152+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=HEAPU32[(($153)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=((($151))>>>0) >= ((($154))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($155) { __label__ = 16; break; } else { var $176 = 0;__label__ = 19; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $156
      var $157=$B; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$I; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=($158) << 1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=(($160+40)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=(($161+($159<<2))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=$162; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=$163; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=((($157))|0)==((($164))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($165) { var $174 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $166
      var $167=$B; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $168=$167; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=(($169+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=HEAPU32[(($170)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=((($168))>>>0) >= ((($171))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $174 = $172;__label__ = 18; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $173
      var $174;
      var $176 = $174;__label__ = 19; break;
    case 19: // $175
      var $176;
      var $177=((($176))&1);
      var $178=(($177)==(1));
      var $179=((($178))|0)!=0;
      if ($179) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: // $180
      var $181=$B; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=$F; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=(($182+12)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($183)>>2)]=$181; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=$F; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=$B; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $186=(($185+8)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($186)>>2)]=$184; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 22; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $187
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $188
      __label__ = 23; break;
    case 23: // $189
      __label__ = 70; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $190
      var $191=$oldfirst; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $192=$191; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP=$192; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $193=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=(($193+24)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=HEAP32[(($194)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $XP=$195; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=(($196+12)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=HEAP32[(($197)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=((($198))|0)!=((($199))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($200) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 25: // $201
      var $202=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=(($202+8)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F1=$204; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $205=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $206=(($205+12)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$207; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=$F1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=$208; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=(($210+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $212=HEAPU32[(($211)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $213=((($209))>>>0) >= ((($212))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $214=((($213))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=(($214)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $216=((($215))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($216) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 26: // $217
      var $218=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219=$F1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $220=(($219+12)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($220)>>2)]=$218; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=$F1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=(($222+8)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($223)>>2)]=$221; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 28; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $224
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $225
      __label__ = 41; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $226
      var $227=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=(($227+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=(($228+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$229; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=HEAP32[(($229)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$230; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=((($230))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($231) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $232
      var $233=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=(($233+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $235=(($234)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$235; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=HEAP32[(($235)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$236; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=((($236))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($237) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $238
      __label__ = 32; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $239
      var $240=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $241=(($240+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $242=(($241+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$242; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=HEAP32[(($242)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=((($243))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($244) { var $252 = 1;__label__ = 34; break; } else { __label__ = 33; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $245
      var $246=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=(($246+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=(($247)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $CP=$248; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=((($249))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252 = $250;__label__ = 34; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $251
      var $252;
      if ($252) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $253
      var $254=$CP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $RP=$254; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $255=HEAP32[(($254)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $R=$255; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 32; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $256
      var $257=$RP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=$257; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=(($259+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=HEAPU32[(($260)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $262=((($258))>>>0) >= ((($261))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=((($262))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=(($263)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=((($264))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($265) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $266
      var $267=$RP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($267)>>2)]=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 39; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $268
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $269
      __label__ = 40; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $270
      __label__ = 41; break;
    case 41: // $271
      var $272=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=((($272))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($273) { __label__ = 42; break; } else { __label__ = 69; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 42: // $274
      var $275=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=(($275+28)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $277=HEAP32[(($276)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $278=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=(($278+304)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=(($279+($277<<2))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$280; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $281=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=$H; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=HEAP32[(($282)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=((($281))|0)==((($283))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($284) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $285
      var $286=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=$H; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($287)>>2)]=$286; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=((($286))|0)==0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($288) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $289
      var $290=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $291=(($290+28)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=HEAP32[(($291)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=1 << ($292); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=($293) ^ -1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $295=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $296=(($295+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $298=($297) & ($294); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($296)>>2)]=$298; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 45; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $299
      __label__ = 53; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 46: // $300
      var $301=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $302=$301; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $303=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $304=(($303+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $305=HEAPU32[(($304)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $306=((($302))>>>0) >= ((($305))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=((($306))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $308=(($307)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309=((($308))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($309) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 47: // $310
      var $311=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $312=(($311+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=(($312)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=((($314))|0)==((($315))|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($316) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $317
      var $318=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $319=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=(($319+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=(($320)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($321)>>2)]=$318; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 50; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 49: // $322
      var $323=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=(($324+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=(($325+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($326)>>2)]=$323; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 50; break;
    case 50: // $327
      __label__ = 52; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 51: // $328
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 52: // $329
      __label__ = 53; break;
    case 53: // $330
      var $331=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $332=((($331))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($332) { __label__ = 54; break; } else { __label__ = 68; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 54: // $333
      var $334=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=$334; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=((($335))>>>0) >= ((($338))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=((($339))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=((($341))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($342) { __label__ = 55; break; } else { __label__ = 66; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 55: // $343
      var $344=$XP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=(($345+24)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($346)>>2)]=$344; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=(($347+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=(($348)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=HEAP32[(($349)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C0=$350; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=((($350))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($351) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 56: // $352
      var $353=$C0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $354=$353; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $355=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $356=(($355+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $357=HEAPU32[(($356)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=((($354))>>>0) >= ((($357))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=((($358))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=(($359)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=((($360))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($361) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 57: // $362
      var $363=$C0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=(($364+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $366=(($365)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($366)>>2)]=$363; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $367=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=$C0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=(($368+24)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($369)>>2)]=$367; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 59; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 58: // $370
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 59: // $371
      __label__ = 60; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 60: // $372
      var $373=$TP; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374=(($373+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $375=(($374+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $376=HEAP32[(($375)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C1=$376; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $377=((($376))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($377) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 61: // $378
      var $379=$C1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=$379; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=$1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=(($381+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $383=HEAPU32[(($382)>>2)]; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $384=((($380))>>>0) >= ((($383))>>>0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=((($384))&1); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=(($385)==(1)); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=((($386))|0)!=0; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($387) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 62: // $388
      var $389=$C1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $391=(($390+16)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $392=(($391+4)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($392)>>2)]=$389; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $393=$R; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $394=$C1; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $395=(($394+24)|0); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($395)>>2)]=$393; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 64; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 63: // $396
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 64: // $397
      __label__ = 65; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 65: // $398
      __label__ = 67; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 66: // $399
      _abort(); //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 67: // $400
      __label__ = 68; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 68: // $401
      __label__ = 69; break; //@line 3806 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 69: // $402
      __label__ = 70; break;
    case 70: // $403
      var $404=$oldfirst; //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $405=$404; //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $406=$nsize; //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $407=(($405+$406)|0); //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $408=$407; //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldfirst=$408; //@line 3807 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $409=$nsize; //@line 3808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $410=$qsize; //@line 3808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $411=((($410)+($409))|0); //@line 3808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $qsize=$411; //@line 3808 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 71; break; //@line 3809 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 71: // $412
      var $413=$oldfirst; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $414=(($413+4)|0); //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $415=HEAP32[(($414)>>2)]; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $416=($415) & -2; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($414)>>2)]=$416; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $417=$qsize; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $418=($417) | 1; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $419=$q; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $420=(($419+4)|0); //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $421=$qsize; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $422=$q; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $423=$422; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $424=$qsize; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $425=(($423+$424)|0); //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $426=$425; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $427=(($426)|0); //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($427)>>2)]=$421; //@line 3810 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $428=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $429=($428) >>> 3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $430=((($429))>>>0) < 32; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($430) { __label__ = 72; break; } else { __label__ = 79; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 72: // $431
      var $432=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $433=($432) >>> 3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I2=$433; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $434=$I2; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $435=($434) << 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $436=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $437=(($436+40)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $438=(($437+($435<<2))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $439=$438; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $440=$439; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B3=$440; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $441=$B3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F4=$441; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $442=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $443=(($442)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $444=HEAP32[(($443)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $445=$I2; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $446=1 << ($445); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $447=($444) & ($446); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $448=((($447))|0)!=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($448) { __label__ = 74; break; } else { __label__ = 73; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 73: // $449
      var $450=$I2; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $451=1 << ($450); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $452=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $453=(($452)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $454=HEAP32[(($453)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $455=($454) | ($451); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($453)>>2)]=$455; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 78; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 74: // $456
      var $457=$B3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $458=(($457+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $459=HEAP32[(($458)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $460=$459; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $461=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $462=(($461+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $463=HEAPU32[(($462)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $464=((($460))>>>0) >= ((($463))>>>0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $465=((($464))&1); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $466=(($465)==(1)); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $467=((($466))|0)!=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($467) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 75: // $468
      var $469=$B3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $470=(($469+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $471=HEAP32[(($470)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F4=$471; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 77; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 76: // $472
      _abort(); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 77: // $473
      __label__ = 78; break;
    case 78: // $474
      var $475=$q; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $476=$B3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $477=(($476+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $478=$q; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $479=$F4; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $480=(($479+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($480)>>2)]=$478; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $481=$F4; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $482=$q; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $483=(($482+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($483)>>2)]=$481; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $484=$B3; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $485=$q; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $486=(($485+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 79: // $487
      var $488=$q; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $489=$488; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP5=$489; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $490=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $491=($490) >>> 8; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X=$491; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $492=$X; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $493=((($492))|0)==0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($493) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 80: // $494
      $I7=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 85; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 81: // $495
      var $496=$X; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $497=((($496))>>>0) > 65535; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($497) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 82: // $498
      $I7=31; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 84; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 83: // $499
      var $500=$X; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$500; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $501=$Y; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $502=((($501)-256)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $503=($502) >>> 16; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $504=($503) & 8; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$504; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $505=$N; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $506=$Y; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $507=($506) << ($505); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$507; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $508=((($507)-4096)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $509=($508) >>> 16; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $510=($509) & 4; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$510; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $511=$K; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $512=$N; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $513=((($512)+($511))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$513; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $514=$K; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $515=$Y; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $516=($515) << ($514); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$516; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $517=((($516)-16384)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $518=($517) >>> 16; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $519=($518) & 2; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$519; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $520=$N; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $521=((($520)+($519))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$521; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $522=$N; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $523=((14-($522))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $524=$K; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $525=$Y; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $526=($525) << ($524); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$526; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $527=($526) >>> 15; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $528=((($523)+($527))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$528; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $529=$K; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $530=($529) << 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $531=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $532=$K; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $533=((($532)+7)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $534=($531) >>> ((($533))>>>0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $535=($534) & 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $536=((($530)+($535))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I7=$536; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 84; break;
    case 84: // $537
      __label__ = 85; break;
    case 85: // $538
      var $539=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $540=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $541=(($540+304)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $542=(($541+($539<<2))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H6=$542; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $543=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $544=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $545=(($544+28)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($545)>>2)]=$543; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $546=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $547=(($546+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $548=(($547+4)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($548)>>2)]=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $549=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $550=(($549+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $551=(($550)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($551)>>2)]=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $552=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $553=(($552+4)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $554=HEAP32[(($553)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $555=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $556=1 << ($555); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $557=($554) & ($556); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $558=((($557))|0)!=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($558) { __label__ = 87; break; } else { __label__ = 86; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 86: // $559
      var $560=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $561=1 << ($560); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $562=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $563=(($562+4)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $564=HEAP32[(($563)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $565=($564) | ($561); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($563)>>2)]=$565; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $566=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $567=$H6; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($567)>>2)]=$566; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $568=$H6; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $569=$568; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $570=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $571=(($570+24)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($571)>>2)]=$569; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $572=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $573=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $574=(($573+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($574)>>2)]=$572; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $575=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $576=(($575+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($576)>>2)]=$572; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 105; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 87: // $577
      var $578=$H6; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $579=HEAP32[(($578)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$579; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $580=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $581=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $582=((($581))|0)==31; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($582) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 88: // $583
      var $591 = 0;__label__ = 90; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 89: // $584
      var $585=$I7; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $586=($585) >>> 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $587=((($586)+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $588=((($587)-2)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $589=((31-($588))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $591 = $589;__label__ = 90; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 90: // $590
      var $591; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $592=($580) << ($591); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K8=$592; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 91; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 91: // $593
      var $594=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $595=(($594+4)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $596=HEAP32[(($595)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $597=($596) & -8; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $598=$qsize; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $599=((($597))|0)!=((($598))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($599) { __label__ = 92; break; } else { __label__ = 98; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 92: // $600
      var $601=$K8; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $602=($601) >>> 31; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $603=($602) & 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $604=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $605=(($604+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $606=(($605+($603<<2))|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C=$606; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $607=$K8; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $608=($607) << 1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K8=$608; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $609=$C; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $610=HEAP32[(($609)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $611=((($610))|0)!=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($611) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 93: // $612
      var $613=$C; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $614=HEAP32[(($613)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$614; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 97; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 94: // $615
      var $616=$C; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $617=$616; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $618=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $619=(($618+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $620=HEAPU32[(($619)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $621=((($617))>>>0) >= ((($620))>>>0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $622=((($621))&1); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $623=(($622)==(1)); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $624=((($623))|0)!=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($624) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 95: // $625
      var $626=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $627=$C; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($627)>>2)]=$626; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $628=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $629=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $630=(($629+24)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($630)>>2)]=$628; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $631=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $632=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $633=(($632+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($633)>>2)]=$631; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $634=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $635=(($634+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($635)>>2)]=$631; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 104; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 96: // $636
      _abort(); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 97: // $637
      __label__ = 103; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 98: // $638
      var $639=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $640=(($639+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $641=HEAP32[(($640)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F9=$641; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $642=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $643=$642; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $644=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $645=(($644+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $646=HEAPU32[(($645)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $647=((($643))>>>0) >= ((($646))>>>0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($647) { __label__ = 99; break; } else { var $656 = 0;__label__ = 100; break; } //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 99: // $648
      var $649=$F9; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $650=$649; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $651=$1; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $652=(($651+16)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $653=HEAPU32[(($652)>>2)]; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $654=((($650))>>>0) >= ((($653))>>>0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $656 = $654;__label__ = 100; break;
    case 100: // $655
      var $656;
      var $657=((($656))&1);
      var $658=(($657)==(1));
      var $659=((($658))|0)!=0;
      if ($659) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: // $660
      var $661=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $662=$F9; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $663=(($662+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($663)>>2)]=$661; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $664=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $665=(($664+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($665)>>2)]=$661; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $666=$F9; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $667=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $668=(($667+8)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($668)>>2)]=$666; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $669=$T; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $670=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $671=(($670+12)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($671)>>2)]=$669; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $672=$TP5; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $673=(($672+24)|0); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($673)>>2)]=0; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 104; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 102: // $674
      _abort(); //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 103: // $675
      __label__ = 91; break; //@line 3811 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 104: // $676
      __label__ = 105; break;
    case 105: // $677
      __label__ = 106; break;
    case 106: // $678
      __label__ = 107; break;
    case 107: // $679
      __label__ = 108; break;
    case 108: // $680
      var $681=$p; //@line 3816 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $682=$681; //@line 3816 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $683=(($682+8)|0); //@line 3816 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      ;
      return $683; //@line 3816 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = -1; 
  while(1) switch(__label__) {
    case -1: // $0
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1; //@line 3822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $6=(($5+24)|0); //@line 3822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $8=$7; //@line 3822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $old_top=$8; //@line 3822 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $9=$1; //@line 3823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $10=$old_top; //@line 3823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $11=_segment_holding($9, $10); //@line 3823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $oldsp=$11; //@line 3823 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $12=$oldsp; //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $13=(($12)|0); //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $15=$oldsp; //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $16=(($15+4)|0); //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $18=(($14+$17)|0); //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $old_end=$18; //@line 3824 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $19=$old_end; //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $20=$ssize; //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $21=((($20)+16)|0); //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $22=((($21)+7)|0); //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $23=(((-($22)))|0); //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $24=(($19+$23)|0); //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $rawsp=$24; //@line 3826 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $25=$rawsp; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $26=(($25+8)|0); //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $27=($26); //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $28=($27) & 7; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $29=((($28))|0)==0; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($29) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 1: // $30
      var $39 = 0;__label__ = 3; break; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 2: // $31
      var $32=$rawsp; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $34=($33); //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $35=($34) & 7; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $36=((8-($35))|0); //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $37=($36) & 7; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $39 = $37;__label__ = 3; break; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 3: // $38
      var $39; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $offset=$39; //@line 3827 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $40=$rawsp; //@line 3828 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $41=$offset; //@line 3828 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3828 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $asp=$42; //@line 3828 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $43=$asp; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $44=$old_top; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $45=(($44+16)|0); //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $46=((($43))>>>0) < ((($45))>>>0); //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($46) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 4: // $47
      var $48=$old_top; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52 = $48;__label__ = 6; break; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 5: // $49
      var $50=$asp; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $52 = $50;__label__ = 6; break; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 6: // $51
      var $52; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $csp=$52; //@line 3829 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $53=$csp; //@line 3830 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $54=$53; //@line 3830 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $sp=$54; //@line 3830 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $55=$sp; //@line 3831 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $56=$55; //@line 3831 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $57=(($56+8)|0); //@line 3831 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $58=$57; //@line 3831 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $ss=$58; //@line 3831 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $59=$sp; //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $60=$59; //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $61=$ssize; //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $63=$62; //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tnext=$63; //@line 3832 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $64=$tnext; //@line 3833 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$64; //@line 3833 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $65=$1; //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $66=$2; //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $67=$66; //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $68=$3; //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $69=((($68)-40)|0); //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      _init_top($65, $67, $69); //@line 3837 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $70=$ssize; //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $71=($70) | 1; //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $72=($71) | 2; //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $73=$sp; //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $74=(($73+4)|0); //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3841 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $75=$ss; //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $76=$1; //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $77=(($76+444)|0); //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $78=$75; //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $79=$77; //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)]; HEAP32[(($78+4)>>2)]=HEAP32[(($79+4)>>2)]; HEAP32[(($78+8)>>2)]=HEAP32[(($79+8)>>2)]; HEAP32[(($78+12)>>2)]=HEAP32[(($79+12)>>2)]; //@line 3842 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $80=$2; //@line 3843 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $81=$1; //@line 3843 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $82=(($81+444)|0); //@line 3843 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $83=(($82)|0); //@line 3843 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($83)>>2)]=$80; //@line 3843 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $84=$3; //@line 3844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $85=$1; //@line 3844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $86=(($85+444)|0); //@line 3844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $87=(($86+4)|0); //@line 3844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($87)>>2)]=$84; //@line 3844 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $88=$4; //@line 3845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $89=$1; //@line 3845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $90=(($89+444)|0); //@line 3845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $91=(($90+12)|0); //@line 3845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($91)>>2)]=$88; //@line 3845 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $92=$ss; //@line 3846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $93=$1; //@line 3846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $94=(($93+444)|0); //@line 3846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $95=(($94+8)|0); //@line 3846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($95)>>2)]=$92; //@line 3846 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 7; break; //@line 3849 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 7: // $96
      var $97=$p; //@line 3850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $98=$97; //@line 3850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $99=(($98+4)|0); //@line 3850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $100=$99; //@line 3850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nextp=$100; //@line 3850 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $101=$p; //@line 3851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $102=(($101+4)|0); //@line 3851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($102)>>2)]=7; //@line 3851 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $103=$nfences; //@line 3852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $104=((($103)+1)|0); //@line 3852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $nfences=$104; //@line 3852 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $105=$nextp; //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $106=(($105+4)|0); //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $107=$106; //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $108=$old_end; //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $109=((($107))>>>0) < ((($108))>>>0); //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($109) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3853 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 8: // $110
      var $111=$nextp; //@line 3854 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $p=$111; //@line 3854 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 10; break; //@line 3854 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 9: // $112
      __label__ = 11; break; //@line 3856 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 10: // $113
      __label__ = 7; break; //@line 3857 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 11: // $114
      var $115=$csp; //@line 3861 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $116=$old_top; //@line 3861 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $117=((($115))|0)!=((($116))|0); //@line 3861 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($117) { __label__ = 12; break; } else { __label__ = 48; break; } //@line 3861 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 12: // $118
      var $119=$old_top; //@line 3862 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $120=$119; //@line 3862 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $q=$120; //@line 3862 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $121=$csp; //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $122=$old_top; //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $123=($121); //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $124=($122); //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $125=((($123)-($124))|0); //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $psize=$125; //@line 3863 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $126=$q; //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $127=$126; //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $128=$psize; //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $129=(($127+$128)|0); //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $130=$129; //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $tn=$130; //@line 3864 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $131=$tn; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $132=(($131+4)|0); //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $134=($133) & -2; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($132)>>2)]=$134; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $135=$psize; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $136=($135) | 1; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $137=$q; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $138=(($137+4)|0); //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($138)>>2)]=$136; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $139=$psize; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $140=$q; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $141=$140; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $142=$psize; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $143=(($141+$142)|0); //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $144=$143; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $145=(($144)|0); //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($145)>>2)]=$139; //@line 3865 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $146=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $147=($146) >>> 3; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $148=((($147))>>>0) < 32; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($148) { __label__ = 13; break; } else { __label__ = 20; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 13: // $149
      var $150=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $151=($150) >>> 3; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I=$151; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $152=$I; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $153=($152) << 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $154=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $155=(($154+40)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $156=(($155+($153<<2))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $157=$156; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $158=$157; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $B=$158; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $159=$B; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$159; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $160=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $161=(($160)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $162=HEAP32[(($161)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $163=$I; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $164=1 << ($163); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $165=($162) & ($164); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $166=((($165))|0)!=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($166) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 14: // $167
      var $168=$I; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $169=1 << ($168); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $170=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $171=(($170)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $172=HEAP32[(($171)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $173=($172) | ($169); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($171)>>2)]=$173; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 19; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 15: // $174
      var $175=$B; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $176=(($175+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $179=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $180=(($179+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $181=HEAPU32[(($180)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $182=((($178))>>>0) >= ((($181))>>>0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $183=((($182))&1); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $184=(($183)==(1)); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $185=((($184))|0)!=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($185) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 16: // $186
      var $187=$B; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $188=(($187+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F=$189; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 18; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 17: // $190
      _abort(); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 18: // $191
      __label__ = 19; break;
    case 19: // $192
      var $193=$q; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $194=$B; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $195=(($194+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($195)>>2)]=$193; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $196=$q; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $197=$F; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $198=(($197+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $199=$F; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $200=$q; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $201=(($200+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($201)>>2)]=$199; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $202=$B; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $203=$q; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $204=(($203+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($204)>>2)]=$202; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 20: // $205
      var $206=$q; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $207=$206; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $TP=$207; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $208=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $209=($208) >>> 8; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $X=$209; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $210=$X; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $211=((($210))|0)==0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($211) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 21: // $212
      $I1=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 26; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 22: // $213
      var $214=$X; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $215=((($214))>>>0) > 65535; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($215) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 23: // $216
      $I1=31; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 25; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 24: // $217
      var $218=$X; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$218; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $219=$Y; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $220=((($219)-256)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $221=($220) >>> 16; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $222=($221) & 8; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$222; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $223=$N; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $224=$Y; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $225=($224) << ($223); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$225; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $226=((($225)-4096)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $227=($226) >>> 16; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $228=($227) & 4; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$228; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $229=$K; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $230=$N; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $231=((($230)+($229))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$231; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $232=$K; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $233=$Y; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $234=($233) << ($232); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$234; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $235=((($234)-16384)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $236=($235) >>> 16; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $237=($236) & 2; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$237; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $238=$N; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $239=((($238)+($237))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $N=$239; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $240=$N; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $241=((14-($240))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $242=$K; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $243=$Y; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $244=($243) << ($242); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $Y=$244; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $245=($244) >>> 15; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $246=((($241)+($245))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K=$246; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $247=$K; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $248=($247) << 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $249=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $250=$K; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $251=((($250)+7)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $252=($249) >>> ((($251))>>>0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $253=($252) & 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $254=((($248)+($253))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $I1=$254; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 25; break;
    case 25: // $255
      __label__ = 26; break;
    case 26: // $256
      var $257=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $258=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $259=(($258+304)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $260=(($259+($257<<2))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $H=$260; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $261=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $262=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $263=(($262+28)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($263)>>2)]=$261; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $264=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $265=(($264+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $266=(($265+4)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($266)>>2)]=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $267=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $268=(($267+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $269=(($268)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($269)>>2)]=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $270=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $271=(($270+4)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $273=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $274=1 << ($273); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $275=($272) & ($274); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $276=((($275))|0)!=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($276) { __label__ = 28; break; } else { __label__ = 27; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 27: // $277
      var $278=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $279=1 << ($278); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $280=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $281=(($280+4)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $283=($282) | ($279); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($281)>>2)]=$283; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $284=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $285=$H; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($285)>>2)]=$284; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $286=$H; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $287=$286; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $288=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $289=(($288+24)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($289)>>2)]=$287; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $290=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $291=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $292=(($291+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $293=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $294=(($293+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($294)>>2)]=$290; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 46; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 28: // $295
      var $296=$H; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$297; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $298=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $299=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $300=((($299))|0)==31; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($300) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 29: // $301
      var $309 = 0;__label__ = 31; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 30: // $302
      var $303=$I1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $304=($303) >>> 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $305=((($304)+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $306=((($305)-2)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $307=((31-($306))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $309 = $307;__label__ = 31; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 31: // $308
      var $309; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $310=($298) << ($309); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$310; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 32; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 32: // $311
      var $312=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $313=(($312+4)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $315=($314) & -8; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $316=$psize; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $317=((($315))|0)!=((($316))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($317) { __label__ = 33; break; } else { __label__ = 39; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 33: // $318
      var $319=$K2; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $320=($319) >>> 31; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $321=($320) & 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $322=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $323=(($322+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $324=(($323+($321<<2))|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $C=$324; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $325=$K2; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $326=($325) << 1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $K2=$326; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $327=$C; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $328=HEAP32[(($327)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $329=((($328))|0)!=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($329) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 34: // $330
      var $331=$C; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $332=HEAP32[(($331)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $T=$332; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 38; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 35: // $333
      var $334=$C; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $335=$334; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $336=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $339=((($335))>>>0) >= ((($338))>>>0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $340=((($339))&1); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $342=((($341))|0)!=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($342) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 36: // $343
      var $344=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $345=$C; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($345)>>2)]=$344; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $346=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $347=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $348=(($347+24)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($348)>>2)]=$346; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $349=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $350=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $351=(($350+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $352=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $353=(($352+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($353)>>2)]=$349; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 45; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 37: // $354
      _abort(); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 38: // $355
      __label__ = 44; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 39: // $356
      var $357=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $358=(($357+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      $F3=$359; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $360=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $361=$360; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $362=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $363=(($362+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $364=HEAPU32[(($363)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $365=((($361))>>>0) >= ((($364))>>>0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      if ($365) { __label__ = 40; break; } else { var $374 = 0;__label__ = 41; break; } //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 40: // $366
      var $367=$F3; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $368=$367; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $369=$1; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $370=(($369+16)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $371=HEAPU32[(($370)>>2)]; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $372=((($368))>>>0) >= ((($371))>>>0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $374 = $372;__label__ = 41; break;
    case 41: // $373
      var $374;
      var $375=((($374))&1);
      var $376=(($375)==(1));
      var $377=((($376))|0)!=0;
      if ($377) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: // $378
      var $379=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $380=$F3; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $381=(($380+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($381)>>2)]=$379; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $382=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $383=(($382+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($383)>>2)]=$379; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $384=$F3; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $385=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $386=(($385+8)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($386)>>2)]=$384; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $387=$T; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $388=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $389=(($388+12)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($389)>>2)]=$387; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $390=$TP; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      var $391=(($390+24)|0); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      HEAP32[(($391)>>2)]=0; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      __label__ = 45; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 43: // $392
      _abort(); //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 44: // $393
      __label__ = 32; break; //@line 3866 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 45: // $394
      __label__ = 46; break;
    case 46: // $395
      __label__ = 47; break;
    case 47: // $396
      __label__ = 48; break; //@line 3867 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    case 48: // $397
      ;
      return; //@line 3870 "/home/fbuchinger/dev/emscripten/src/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAP8[(p1+i)];
        var v2 = HEAP8[(p2+i)];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              return FS.analyzePath([link].concat(path).join('/'),
                                    dontResolveLastLink, linksVisited + 1);
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
          return ret;
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = [];
          for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
          data = dataArray;
        }
        var properties = {isDevice: false, contents: data};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest();
          xhr.open('GET', obj.url, false);
  
          // Some hints to the browser that we want binary data.
          if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType('text/plain; charset=x-user-defined');
          }
  
          xhr.send(null);
          if (xhr.status != 200 && xhr.status != 0) success = false;
          if (xhr.response !== undefined) {
            obj.contents = new Uint8Array(xhr.response || []);
          } else {
            obj.contents = intArrayFromString(xhr.responseText || '', true);
          }
        } else if (typeof read !== 'undefined') {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read(obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        if (FS.init.initialized) return;
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Default handlers.
        if (!input) input = function() {
          if (!input.cache || !input.cache.length) {
            var result;
            if (typeof window != 'undefined' &&
                typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
            }
            if (!result) result = '';
            input.cache = intArrayFromString(result + '\n', true);
          }
          return input.cache.shift();
        };
        if (!output) output = function(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(String.fromCharCode(val));
          }
        };
        if (!output.printer) output.printer = print;
        if (!output.buffer) output.buffer = [];
        if (!error) error = output;
  
        // Create the temporary folder.
        FS.createFolder('/', 'tmp', true, true);
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, false);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        _stdin = allocate([1], 'void*', ALLOC_STATIC);
        _stdout = allocate([2], 'void*', ALLOC_STATIC);
        _stderr = allocate([3], 'void*', ALLOC_STATIC);
  
        // Newlib initialization
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr
        if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      }};
  
  
  
  
  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(buf+i)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(buf+i)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[((varargs+argIndex)>>2)],tempDoubleI32[1]=HEAP32[((varargs+argIndex+4)>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[((varargs+argIndex)>>2)],
                 HEAP32[((varargs+argIndex+4)>>2)]];
          ret = unSign(ret[0], 32) + unSign(ret[1], 32)*Math.pow(2, 32); // Unsigned in this notation. Signed later if needed. // XXX - loss of precision
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((varargs+argIndex)>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return Number(ret);
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var argText;
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*');
            var copiedString;
            if (arg) {
              copiedString = String_copy(arg);
              if (precisionSet && copiedString.length > precision) {
                copiedString = copiedString.slice(0, precision);
              }
            } else {
              copiedString = intArrayFromString('(null)', true);
            }
            if (!flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            ret = ret.concat(copiedString);
            if (flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _longjmp(env, val) {
      // not really working...
      assert(0);
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(stream in FS.streams && FS.streams[stream].eof);
    }

  
  
  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (stream in FS.streams) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  
  var _ftello=_ftell;

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  
  
  
  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[(buf+i)]=contents[offset + i]
          bytesRead++;
        }
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(buf+i)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }
var _ntohs; // stub for _ntohs

  
  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!(stream in FS.streams)) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAP8[(_fgetc.ret)];
      }
    }
  
  var _getc_unlocked=_fgetc;

  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[(src+i)];
        var second = HEAP8[(src+i + 1)];
        HEAP8[(dest+i)]=second
        HEAP8[(dest+i + 1)]=first
      }
    }

  var _abs=Math.abs;

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  
  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  
  
  var _getc=_fgetc;


  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAP8[(px+i)]);
        var y = _tolower(HEAP8[(py+i)]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  
  
  function __isFloat(text) {
      return !!(/^[+]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      // Supports %x, %4x, %d.%d, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
        if (next <= 0) return fields;
        var next = get();
        if (next <= 0) return fields;  // End of input.
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          // TODO: Handle type size modifier.
          var long_ = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f') {
            var last = -1;
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            while (buffer.length > last) {
              buffer.pop();
              unget();
            }
          } else {
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if ((type === 'd' && next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                  (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                    next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                    next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0))) ||
                  (type === 's') &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
              } else {
                break;
              }
            }
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[((varargs+argIndex)>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd':
              HEAP32[((argPtr)>>2)]=parseInt(text, 10)
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
              if (long_) {
                (tempDoubleF64[0]=parseFloat(text),HEAP32[((argPtr)>>2)]=tempDoubleI32[0],HEAP32[((argPtr+4)>>2)]=tempDoubleI32[1])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(argPtr+j)]=array[j]
              }
              break;
          }
          fields++;
        } else {
          // Not a specifier.
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            return fields;
          }
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(s+index++)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[(psrc+i-1)] != 0);
      return pdest;
    }


  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (stream in FS.streams) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }
  
  var _putc=_fputc;

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAP8[(px+i)];
        var y = HEAP8[(py+i)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
var _htonl; // stub for _htonl


  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _atoi(s) {
      var c;
      while ((c = HEAP8[(s)]) && _isspace(c)) s++;
      if (!c || !_isdigit(c)) return 0;
      var e = s;
      while ((c = HEAP8[(e)]) && _isdigit(c)) e++;
      return Math.floor(Number(Pointer_stringify(s).substr(0, e-s)));
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  var _cos=Math.cos;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP8[(s+i)]=result[i];
      }
      HEAP8[(s+i)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  function _memmove(dest, src, num, align) {
      if (src < dest && dest < src + num) {
        // Copy backwards in a safe manner
        src += num;
        dest += num;
        while (num--) {
          dest--;
          src--;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num, align);
      }
    }
  var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  var _exp=Math.exp;

  var _floor=Math.floor;

  
  
  
  
  
  
  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else if (size < FS.currentPath.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < FS.currentPath.length; i++) {
          HEAP8[(buf+i)]=FS.currentPath.charCodeAt(i)
        }
        HEAP8[(buf+i)]=0
        return buf;
      }
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }
  var ___errno=___errno_location;

  function _strlen(ptr) {
      return String_len(ptr);
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!(stream in FS.streams)) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(s+i)]=byte_
      }
      HEAP8[(s+i)]=0
      return s;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  
  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        delete FS.streams[fildes];
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  
  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  
  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(strerrbuf+i)]=msg.charCodeAt(i)
          }
          HEAP8[(strerrbuf+i)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      if (s) {
        _puts(s);
        _putc(':'.charCodeAt(0));
        _putc(' '.charCodeAt(0));
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }


  var _llvm_pow_f64=Math.pow;

  var _log=Math.log;

  var _sqrt=Math.sqrt;

  function _strstr(ptr1, ptr2) {
      var str1 = Pointer_stringify(ptr1);
      var str2 = Pointer_stringify(ptr2);
      var ret = str1.search(str2);
      return ret >= 0 ? ptr1 + ret : 0;
    }

  
  var ___tm_struct_layout=null;
  
  
  var __tzname=null;
  
  var __daylight=null;
  
  var __timezone=null;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (__tzname) return; // glibc does not need the double __
  
      __timezone = _malloc(4);
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      __daylight = _malloc(4);
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      __tzname = _malloc(2 * 4); // glibc does not need the double __
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[((__tzname+4)>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[((tmPtr+offsets.tm_year)>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[((tmPtr+offsets.tm_mon)>>2)],
                               HEAP32[((tmPtr+offsets.tm_mday)>>2)],
                               HEAP32[((tmPtr+offsets.tm_hour)>>2)],
                               HEAP32[((tmPtr+offsets.tm_min)>>2)],
                               HEAP32[((tmPtr+offsets.tm_sec)>>2)],
                               0).getTime() / 1000;
      HEAP32[((tmPtr+offsets.tm_wday)>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[((tmPtr+offsets.tm_yday)>>2)]=yday
      return timestamp;
    }

  
  
  
  
  
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (stream in FS.streams) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (stream in FS.streams) {
        var get = function() { return _fgetc(stream); };
        var unget = function(c) { return _ungetc(c, stream); };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[(s+i)]=result.charCodeAt(i);
      }
      HEAP8[(s+i)]=0;
      return s;
    }
  function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  
  
  var _fseeko=_fseek;

  function _atof(ptr) {
      var str = Pointer_stringify(ptr);
      var ret = parseFloat(str);
      return isNaN(ret) ? 0 : ret;
    }

var _ntohl; // stub for _ntohl

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[(psrc+i)];
        HEAP8[(pdest+i)]=curr
        padding = padding || HEAP8[(psrc+i)] == 0;
      }
      return pdest;
    }

  
  
  
  var ___tm_current=0;
  
  
  
  var ___tm_timezones={};
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr+offsets.tm_sec)>>2)]=date.getSeconds()
      HEAP32[((tmPtr+offsets.tm_min)>>2)]=date.getMinutes()
      HEAP32[((tmPtr+offsets.tm_hour)>>2)]=date.getHours()
      HEAP32[((tmPtr+offsets.tm_mday)>>2)]=date.getDate()
      HEAP32[((tmPtr+offsets.tm_mon)>>2)]=date.getMonth()
      HEAP32[((tmPtr+offsets.tm_year)>>2)]=date.getFullYear()-1900
      HEAP32[((tmPtr+offsets.tm_wday)>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[((tmPtr+offsets.tm_yday)>>2)]=yday
      HEAP32[((tmPtr+offsets.tm_gmtoff)>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[((tmPtr+offsets.tm_isdst)>>2)]=dst
  
      var timezone = date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[((tmPtr+offsets.tm_zone)>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _localtime_r(time, ___tm_current);
    }
var _htons; // stub for _htons

  
  
  
  var _environ=null;
  
  var ___environ=null;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (_environ === null) {
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        _environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
        // Set up global variable alias.
        ___environ = _environ;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(poolPtr+j)]=line.charCodeAt(j);
        }
        HEAP8[(poolPtr+j)]=0;
        HEAP32[((envPtr+i * ptrSize)>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[((envPtr+strings.length * ptrSize)>>2)]=0;
    }var ENV={};
  
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  
  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      // For now it's easier to pretend we have no terminals.
      ___setErrNo(FS.streams[fildes] ? ERRNO_CODES.ENOTTY : ERRNO_CODES.EBADF);
      return -1;
    }

  function _setjmp(env) {
      // XXX print('WARNING: setjmp() not really implemented, will fail if longjmp() is actually called');
      return 0;
    }

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }

  
  
  
  
  var ___utimbuf_struct_layout=null;function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[((times+offset)>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }

  
  
  
  
  var ___tm_formatted=0;
  
  
  function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[(buf+index)]=chr.charCodeAt(0)
      });
      HEAP8[(buf+25)]=0
      return buf;
    }function _asctime(tmPtr) {
      if (!___tm_formatted) ___tm_formatted = _malloc(26);
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }


  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[(psrc+i-1)] != 0);
      return pdest;
    }
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort(code) {
      ABORT = true;
      throw 'ABORT: ' + code + ', at ' + (new Error().stack);
    }

  
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }



__ATINIT__.push({ func: function() { FS.ignorePermissions = false } }); FS.init(); __ATEXIT__.push({ func: function() { FS.quit() } });
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}


var _shot_select;
var _multi_out;
var _aber;
var _gamm;
var _bright;
var _user_mul;
var _threshold;
var _half_size;
var _four_color_rgb;
var _document_mode;
var _highlight;
var _verbose;
var _use_auto_wb;
var _use_camera_wb;
var _use_camera_matrix;
var _output_color;
var _output_bps;
var _output_tiff;
var _med_passes;
var _no_auto_bright;
var _greybox;
var _xyz_rgb;
var _d65_white;
var _fc_filter;
var _filters;
var _left_margin;
var _top_margin;
var __impure_ptr;
var __str;
var _ifname;
var _failure;
var _data_error;
var __str1;
var _ifp;
var __str2;
var __str3;
var _order;
var _get2_str;
var _get4_str;
var _canon_600_fixed_wb_mul;
var _pre_mul;
var _flash_used;
var _canon_ev;
var _height;
var _width;
var _shrink;
var _iwidth;
var _image;
var _canon_600_coeff_table;
var _raw_color;
var _colors;
var _rgb_cam;
var _canon_600_load_raw_mul;
var _raw_width;
var _black;
var _maximum;
var _getbithuff_bitbuf;
var _getbithuff_vbits;
var _getbithuff_reset;
var _zero_after_ff;
var __str4;
var _crw_init_tables_first_tree;
var _crw_init_tables_second_tree;
var _tiff_compress;
var __str5;
var _raw_height;
var _cblack;
var _dng_version;
var __str6;
var _load_flags;
var _curve;
var _cr2_slice;
var _make;
var __str7;
var _model2;
var __str8;
var _unique_id;
var _sraw_mul;
var _is_raw;
var _fuji_width;
var _tiff_samples;
var _tile_length;
var _tile_width;
var __str9;
var _tiff_bps;
var _meta_offset;
var _data_offset;
var _nikon_compressed_load_raw_nikon_tree;
var _nikon_e995_often;
var _nikon_3700_table;
var _model;
var _fuji_layout;
var __str10;
var _thumb_width;
var _thumb_height;
var _thumb_length;
var __str11;
var _ofp;
var __str12;
var _layer_thumb_map;
var _thumb_misc;
var __str13;
var __str14;
var __str15;
var __str16;
var _phase_one_correct_dir;
var _meta_length;
var __str17;
var _ph1;
var __str18;
var __str19;
var _ph1_bithuff_bitbuf;
var _ph1_bithuff_vbits;
var _phase_one_load_raw_c_length;
var __str20;
var _strip_offset;
var __str21;
var _iheight;
var __str22;
var __str23;
var __str24;
var _pana_bits_buf;
var _pana_bits_vbits;
var _quicktake_100_load_raw_gstep;
var _quicktake_100_load_raw_rstep;
var _quicktake_100_load_raw_curve;
var _kodak_radc_load_raw_src;
var _kodak_radc_load_raw_last;
var _kodak_radc_load_raw_pt;
var _kodak_cbpp;
var _kodak_dc120_load_raw_mul;
var _kodak_dc120_load_raw_add;
var __str25;
var __str26;
var __str27;
var _kodak_262_load_raw_kodak_tree;
var __str28;
var _sony_decrypt_pad;
var _sony_decrypt_p;
var __str29;
var _sony_arw_load_raw_tab;
var __str30;
var _smal_decode_segment_hist;
var _foveon_decoder_huff;
var _first_decode;
var _free_decode;
var __str31;
var __str32;
var _meta_data;
var __str33;
var __str34;
var __str35;
var __str36;
var _foveon_interpolate_hood;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var __str47;
var __str48;
var __str49;
var __str50;
var __str51;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var _timestamp;
var __str61;
var __str62;
var __str63;
var __str64;
var __str65;
var __str66;
var _wavelet_denoise_noise;
var __str67;
var __str68;
var _cam_mul;
var _white;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var __str74;
var _mix_green;
var __str75;
var _vng_interpolate_cp;
var _vng_interpolate_terms;
var _vng_interpolate_chood;
var __str76;
var __str77;
var __str78;
var _ahd_interpolate_dir;
var __str79;
var __str80;
var _median_filter_opt;
var __str81;
var _blend_highlights_trans;
var _blend_highlights_itrans;
var __str82;
var _recover_highlights_dir;
var __str83;
var __str84;
var __str85;
var _thumb_offset;
var _parse_makernote_xlat;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var __str93;
var __str94;
var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var _iso_speed;
var _aperture;
var _shutter;
var _shot_order;
var __str106;
var _flip;
var __str107;
var _artist;
var __str108;
var __str109;
var __str110;
var __str111;
var __str112;
var __str113;
var __str114;
var _cmatrix;
var _load_raw;
var __str115;
var __str116;
var _tiff_nifds;
var _focal_len;
var _exif_cfa;
var _gpsdata;
var _romm_coeff_rgb_romm;
var _parse_mos_mod;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var _profile_offset;
var _profile_length;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var _parse_kodak_ifd_mul;
var _parse_kodak_ifd_wbtag;
var _parse_tiff_ifd_cfa_pc;
var _parse_tiff_ifd_ab;
var _parse_tiff_ifd_xyz;
var _parse_tiff_ifd_sony_curve;
var _tiff_ifd;
var _desc;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var __str165;
var __str166;
var __str167;
var __str168;
var __str169;
var __str170;
var _cdesc;
var _pixel_aspect;
var _tiff_flip;
var __str171;
var __str172;
var _write_thumb;
var _thumb_load_raw;
var __str173;
var __str174;
var __str175;
var __str176;
var __str177;
var __str178;
var _ciff_block_1030_key;
var _parse_ciff_key;
var __str179;
var __str180;
var __str181;
var __str182;
var __str183;
var __str184;
var __str185;
var __str186;
var __str187;
var __str188;
var __str189;
var __str190;
var __str191;
var __str192;
var __str193;
var __str194;
var __str195;
var __str196;
var __str197;
var __str198;
var __str199;
var __str200;
var __str201;
var __str202;
var __str203;
var __str204;
var _parse_riff_mon;
var __str205;
var __str206;
var __str207;
var __str208;
var __str209;
var __str210;
var __str211;
var __str212;
var __str213;
var __str214;
var __str215;
var __str216;
var __str217;
var __str218;
var __str219;
var __str220;
var __str221;
var _is_foveon;
var _adobe_coeff_table;
var __str222;
var __str223;
var __str224;
var __str225;
var __str226;
var __str227;
var __str228;
var __str229;
var __str230;
var __str231;
var __str232;
var __str233;
var __str234;
var __str235;
var __str236;
var __str237;
var __str238;
var __str239;
var __str240;
var __str241;
var __str242;
var __str243;
var __str244;
var __str245;
var __str246;
var __str247;
var __str248;
var __str249;
var __str250;
var __str251;
var __str252;
var __str253;
var __str254;
var __str255;
var __str256;
var __str257;
var __str258;
var __str259;
var __str260;
var __str261;
var __str262;
var __str263;
var __str264;
var __str265;
var __str266;
var __str267;
var __str268;
var __str269;
var __str270;
var __str271;
var __str272;
var __str273;
var __str274;
var __str275;
var __str276;
var __str277;
var __str278;
var __str279;
var __str280;
var __str281;
var __str282;
var __str283;
var __str284;
var __str285;
var __str286;
var __str287;
var __str288;
var __str289;
var __str290;
var __str291;
var __str292;
var __str293;
var __str294;
var __str295;
var __str296;
var __str297;
var __str298;
var __str299;
var __str300;
var __str301;
var __str302;
var __str303;
var __str304;
var __str305;
var __str306;
var __str307;
var __str308;
var __str309;
var __str310;
var __str311;
var __str312;
var __str313;
var __str314;
var __str315;
var __str316;
var __str317;
var __str318;
var __str319;
var __str320;
var __str321;
var __str322;
var __str323;
var __str324;
var __str325;
var __str326;
var __str327;
var __str328;
var __str329;
var __str330;
var __str331;
var __str332;
var __str333;
var __str334;
var __str335;
var __str336;
var __str337;
var __str338;
var __str339;
var __str340;
var __str341;
var __str342;
var __str343;
var __str344;
var __str345;
var __str346;
var __str347;
var __str348;
var __str349;
var __str350;
var __str351;
var __str352;
var __str353;
var __str354;
var __str355;
var __str356;
var __str357;
var __str358;
var __str359;
var __str360;
var __str361;
var __str362;
var __str363;
var __str364;
var __str365;
var __str366;
var __str367;
var __str368;
var __str369;
var __str370;
var __str371;
var __str372;
var __str373;
var __str374;
var __str375;
var __str376;
var __str377;
var __str378;
var __str379;
var __str380;
var __str381;
var __str382;
var __str383;
var __str384;
var __str385;
var __str386;
var __str387;
var __str388;
var __str389;
var __str390;
var __str391;
var __str392;
var __str393;
var __str394;
var __str395;
var __str396;
var __str397;
var __str398;
var __str399;
var __str400;
var __str401;
var __str402;
var __str403;
var __str404;
var __str405;
var __str406;
var __str407;
var __str408;
var __str409;
var __str410;
var __str411;
var __str412;
var __str413;
var __str414;
var __str415;
var __str416;
var __str417;
var __str418;
var __str419;
var __str420;
var __str421;
var __str422;
var __str423;
var __str424;
var __str425;
var __str426;
var __str427;
var __str428;
var __str429;
var __str430;
var __str431;
var __str432;
var __str433;
var __str434;
var __str435;
var __str436;
var __str437;
var __str438;
var __str439;
var __str440;
var __str441;
var __str442;
var __str443;
var __str444;
var __str445;
var __str446;
var __str447;
var __str448;
var __str449;
var __str450;
var __str451;
var __str452;
var __str453;
var __str454;
var __str455;
var __str456;
var __str457;
var __str458;
var __str459;
var __str460;
var __str461;
var __str462;
var __str463;
var __str464;
var __str465;
var __str466;
var __str467;
var __str468;
var __str469;
var __str470;
var __str471;
var __str472;
var __str473;
var __str474;
var __str475;
var __str476;
var __str477;
var __str478;
var __str479;
var __str480;
var __str481;
var __str482;
var __str483;
var __str484;
var __str485;
var __str486;
var __str487;
var __str488;
var __str489;
var __str490;
var __str491;
var __str492;
var __str493;
var __str494;
var __str495;
var __str496;
var __str497;
var __str498;
var __str499;
var __str500;
var __str501;
var __str502;
var __str503;
var __str504;
var __str505;
var __str506;
var __str507;
var __str508;
var __str509;
var __str510;
var __str511;
var __str512;
var __str513;
var __str514;
var __str515;
var __str516;
var __str517;
var __str518;
var __str519;
var __str520;
var __str521;
var __str522;
var __str523;
var __str524;
var __str525;
var __str526;
var __str527;
var __str528;
var __str529;
var __str530;
var __str531;
var __str532;
var __str533;
var __str534;
var __str535;
var __str536;
var __str537;
var __str538;
var __str539;
var __str540;
var __str541;
var __str542;
var __str543;
var _simple_coeff_table;
var _identify_pana;
var _identify_table;
var _identify_corp;
var __str544;
var __str545;
var __str546;
var __str547;
var __str548;
var __str549;
var _zero_is_bad;
var __str550;
var __str551;
var __str552;
var __str553;
var __str554;
var __str555;
var __str556;
var __str557;
var __str558;
var __str559;
var __str560;
var __str561;
var __str562;
var __str563;
var __str564;
var __str565;
var __str566;
var __str567;
var __str568;
var __str569;
var __str570;
var __str571;
var __str572;
var __str573;
var __str574;
var __str575;
var __str576;
var __str577;
var __str578;
var __str579;
var __str580;
var __str581;
var __str582;
var __str583;
var __str584;
var __str585;
var __str586;
var __str587;
var __str588;
var __str589;
var __str590;
var __str591;
var __str592;
var __str593;
var __str594;
var __str595;
var __str596;
var __str597;
var __str598;
var __str599;
var __str600;
var __str601;
var __str602;
var __str603;
var __str604;
var __str605;
var __str606;
var __str607;
var __str608;
var __str609;
var __str610;
var __str611;
var __str612;
var __str613;
var __str614;
var __str615;
var __str616;
var __str617;
var __str618;
var __str619;
var __str620;
var __str621;
var __str622;
var __str623;
var __str624;
var __str625;
var __str626;
var __str627;
var __str628;
var __str629;
var __str630;
var __str631;
var __str632;
var __str633;
var __str634;
var __str635;
var __str636;
var __str637;
var __str638;
var __str639;
var __str640;
var __str641;
var __str642;
var __str643;
var __str644;
var __str645;
var __str646;
var __str647;
var __str648;
var __str649;
var __str650;
var __str651;
var __str652;
var __str653;
var __str654;
var __str655;
var __str656;
var __str657;
var __str658;
var __str659;
var __str660;
var __str661;
var __str662;
var __str663;
var __str664;
var __str665;
var __str666;
var __str667;
var __str668;
var __str669;
var __str670;
var __str671;
var __str672;
var __str673;
var __str674;
var __str675;
var __str676;
var __str677;
var __str678;
var __str679;
var __str680;
var __str681;
var __str682;
var __str683;
var __str684;
var __str685;
var __str686;
var __str687;
var __str688;
var __str689;
var __str690;
var __str691;
var __str692;
var __str693;
var __str694;
var __str695;
var __str696;
var __str697;
var __str698;
var __str699;
var __str700;
var __str701;
var __str702;
var __str703;
var __str704;
var __str705;
var __str706;
var __str707;
var __str708;
var __str709;
var __str710;
var __str711;
var __str712;
var __str713;
var __str714;
var __str715;
var __str716;
var __str717;
var __str718;
var __str719;
var __str720;
var __str721;
var __str722;
var __str723;
var __str724;
var __str725;
var __str726;
var __str727;
var __str728;
var __str729;
var __str730;
var __str731;
var __str732;
var __str733;
var __str734;
var __str735;
var __str736;
var __str737;
var __str738;
var __str739;
var __str740;
var __str741;
var __str742;
var __str743;
var __str744;
var __str745;
var __str746;
var __str747;
var __str748;
var __str749;
var _convert_to_rgb_xyzd50_srgb;
var _convert_to_rgb_rgb_rgb;
var _convert_to_rgb_adobe_rgb;
var _convert_to_rgb_wide_rgb;
var _convert_to_rgb_prophoto_rgb;
var _convert_to_rgb_out_rgb;
var _convert_to_rgb_name;
var __str750;
var __str751;
var __str752;
var __str753;
var __str754;
var _convert_to_rgb_phead;
var _convert_to_rgb_pbody;
var _convert_to_rgb_pwhite;
var _convert_to_rgb_pcurve;
var _oprof;
var __str755;
var __str756;
var __str757;
var __str758;
var _histogram;
var __str759;
var __str760;
var __str761;
var __str762;
var __str763;
var __str764;
var __str765;
var __str766;
var __str767;
var __str768;
var __str769;
var __str770;
var __str771;
var __str772;
var __str773;
var __str774;
var __str775;
var __str776;
var __str777;
var __str778;
var __str779;
var __str780;
var __str781;
var __str782;
var __str783;
var __str784;
var __str785;
var __str786;
var __str787;
var __str788;
var __str789;
var __str790;
var __str791;
var __str792;
var __str793;
var __str794;
var __str795;
var __str796;
var __str797;
var __str798;
var __str799;
var __str800;
var __str801;
var __str802;
var __str803;
var __str804;
var __str805;
var __str806;
var __str807;
var __str808;
var __str809;
var __str810;
var __str811;
var __str812;
var __str813;
var __str814;
var __str815;
var __str816;
var __str817;
var __str818;
var __str819;
var _write_fun;
var __str820;
var __str821;
var __str822;
var __str823;
var __str824;
var __str825;
var __str826;
var __str827;
var __str828;
var __str829;
var __str830;
var __str831;
var __str832;
var __str833;
var __str834;
var __str835;
var __str836;
var __str837;
var __str838;
var __str839;
var __str840;
var __str841;
var __str842;
var __str843;
var __str844;
var __str845;
var __str846;
var __str847;
var __str848;
var __str849;
var __str850;
var __str851;
var __str852;
var __str853;
var __str854;
var __str855;
var __str856;
var __str857;
var _second_decode;
var __gm_;
var _mparams;
var __str858;
var __str1859;
var __str2860;
_shot_select=allocate(1, "i32", ALLOC_STATIC);
_multi_out=allocate(1, "i32", ALLOC_STATIC);
_aber=allocate([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_gamm=allocate([0.45, 0, 0, 0, 0, 0, 0, 0, 4.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_bright=allocate([1], ["float",0,0,0,0], ALLOC_STATIC);
_user_mul=allocate(16, "float", ALLOC_STATIC);
_threshold=allocate(1, "float", ALLOC_STATIC);
_half_size=allocate(1, "i32", ALLOC_STATIC);
_four_color_rgb=allocate(1, "i32", ALLOC_STATIC);
_document_mode=allocate(1, "i32", ALLOC_STATIC);
_highlight=allocate(1, "i32", ALLOC_STATIC);
_verbose=allocate(1, "i32", ALLOC_STATIC);
_use_auto_wb=allocate(1, "i32", ALLOC_STATIC);
_use_camera_wb=allocate(1, "i32", ALLOC_STATIC);
_use_camera_matrix=allocate([-1], ["i32",0,0,0,0], ALLOC_STATIC);
_output_color=allocate([1], ["i32",0,0,0,0], ALLOC_STATIC);
_output_bps=allocate([8], ["i32",0,0,0,0], ALLOC_STATIC);
_output_tiff=allocate(1, "i32", ALLOC_STATIC);
_med_passes=allocate(1, "i32", ALLOC_STATIC);
_no_auto_bright=allocate(1, "i32", ALLOC_STATIC);
_greybox=allocate([0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_xyz_rgb=allocate([0.412453, 0, 0, 0, 0, 0, 0, 0, 0.35758, 0, 0, 0, 0, 0, 0, 0, 0.180423, 0, 0, 0, 0, 0, 0, 0, 0.212671, 0, 0, 0, 0, 0, 0, 0, 0.71516, 0, 0, 0, 0, 0, 0, 0, 0.072169, 0, 0, 0, 0, 0, 0, 0, 0.019334, 0, 0, 0, 0, 0, 0, 0, 0.119193, 0, 0, 0, 0, 0, 0, 0, 0.950227, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_d65_white=allocate([0.9504560232162476, 0, 0, 0, 1, 0, 0, 0, 1.0887540578842163, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
_fc_filter=allocate([2, 1, 1, 3, 2, 3, 2, 0, 3, 2, 3, 0, 1, 2, 1, 0, 0, 3, 0, 2, 0, 1, 3, 1, 0, 1, 1, 2, 0, 3, 3, 2, 2, 3, 3, 2, 3, 1, 1, 3, 3, 1, 2, 1, 2, 0, 0, 3, 0, 1, 0, 1, 0, 2, 0, 2, 2, 0, 3, 0, 1, 3, 2, 1, 3, 1, 1, 2, 0, 1, 0, 2, 1, 3, 1, 3, 0, 1, 3, 0, 2, 0, 0, 3, 3, 2, 3, 1, 2, 0, 2, 0, 3, 2, 2, 1, 2, 3, 3, 1, 2, 1, 2, 1, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 3, 0, 3, 0, 3, 2, 1, 2, 3, 2, 3, 3, 1, 1, 2, 1, 0, 3, 2, 3, 0, 2, 3, 1, 3, 1, 0, 2, 0, 3, 0, 3, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 3, 3, 2, 2, 1, 1, 3, 3, 0, 2, 1, 3, 2, 2, 3, 2, 0, 0, 1, 3, 0, 2, 0, 1, 2, 3, 0, 1, 0, 1, 3, 1, 2, 3, 2, 3, 2, 0, 2, 0, 1, 1, 0, 3, 0, 0, 2, 0, 3, 1, 0, 0, 1, 1, 3, 3, 2, 3, 2, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 3, 1, 0, 0, 2, 0, 3, 2, 1, 3, 1, 1, 3, 1, 3], "i8", ALLOC_STATIC);
_filters=allocate(1, "i32", ALLOC_STATIC);
_left_margin=allocate(1, "i16", ALLOC_STATIC);
_top_margin=allocate(1, "i16", ALLOC_STATIC);
__str=allocate([37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0] /* %s: Out of memory in */, "i8", ALLOC_STATIC);
_ifname=allocate(1, "i8*", ALLOC_STATIC);
_failure=allocate(40, "i16", ALLOC_STATIC);
_data_error=allocate(1, "i32", ALLOC_STATIC);
__str1=allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_STATIC);
_ifp=allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
__str2=allocate([85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0] /* Unexpected end of fi */, "i8", ALLOC_STATIC);
__str3=allocate([67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0] /* Corrupt data near 0x */, "i8", ALLOC_STATIC);
_order=allocate(1, "i16", ALLOC_STATIC);
_get2_str=allocate([255,255] /* \FF\FF */, "i8", ALLOC_STATIC);
_get4_str=allocate([255,255,255,255] /* \FF\FF\FF\FF */, "i8", ALLOC_STATIC);
_canon_600_fixed_wb_mul=allocate([667, 0, 358, 0, 397, 0, 565, 0, 452, 0, 731, 0, 390, 0, 367, 0, 499, 0, 517, 0, 1119, 0, 396, 0, 348, 0, 448, 0, 537, 0, 1399, 0, 485, 0, 431, 0, 508, 0, 688, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_pre_mul=allocate(16, "float", ALLOC_STATIC);
_flash_used=allocate(1, "float", ALLOC_STATIC);
_canon_ev=allocate(1, "float", ALLOC_STATIC);
_height=allocate(1, "i16", ALLOC_STATIC);
_width=allocate(1, "i16", ALLOC_STATIC);
_shrink=allocate(1, "i16", ALLOC_STATIC);
_iwidth=allocate(1, "i16", ALLOC_STATIC);
_image=allocate(1, "[4 x i16]*", ALLOC_STATIC);
_canon_600_coeff_table=allocate([-190, 0, 702, 0, -1878, 0, 2390, 0, 1861, 0, -1349, 0, 905, 0, -393, 0, -432, 0, 944, 0, 2617, 0, -2105, 0, -1203, 0, 1715, 0, -1136, 0, 1648, 0, 1388, 0, -876, 0, 267, 0, 245, 0, -1641, 0, 2153, 0, 3921, 0, -3409, 0, -615, 0, 1127, 0, -1563, 0, 2075, 0, 1437, 0, -925, 0, 509, 0, 3, 0, -756, 0, 1268, 0, 2519, 0, -2007, 0, -190, 0, 702, 0, -1886, 0, 2398, 0, 2153, 0, -1641, 0, 763, 0, -251, 0, -452, 0, 964, 0, 3040, 0, -2528, 0, -190, 0, 702, 0, -1878, 0, 2390, 0, 1861, 0, -1349, 0, 905, 0, -393, 0, -432, 0, 944, 0, 2617, 0, -2105, 0, -807, 0, 1319, 0, -1785, 0, 2297, 0, 1388, 0, -876, 0, 769, 0, -257, 0, -230, 0, 742, 0, 2067, 0, -1555, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_raw_color=allocate(1, "i32", ALLOC_STATIC);
_colors=allocate(1, "i32", ALLOC_STATIC);
_rgb_cam=allocate(48, "float", ALLOC_STATIC);
_canon_600_load_raw_mul=allocate([1141, 0, 1145, 0, 1128, 0, 1109, 0, 1178, 0, 1149, 0, 1128, 0, 1109, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_raw_width=allocate(1, "i16", ALLOC_STATIC);
_black=allocate(1, "i32", ALLOC_STATIC);
_maximum=allocate(1, "i32", ALLOC_STATIC);
_getbithuff_bitbuf=allocate(1, "i32", ALLOC_STATIC);
_getbithuff_vbits=allocate(1, "i32", ALLOC_STATIC);
_getbithuff_reset=allocate(1, "i32", ALLOC_STATIC);
_zero_after_ff=allocate(1, "i32", ALLOC_STATIC);
__str4=allocate([109,97,107,101,95,100,101,99,111,100,101,114,40,41,0] /* make_decoder()\00 */, "i8", ALLOC_STATIC);
_crw_init_tables_first_tree=allocate([0, 1, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 5, 6, 2, 7, 1, 8, 9, 0, 10, 11, 255, 0, 2, 2, 3, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 1, 5, 0, 6, 7, 9, 8, 10, 11, 255, 0, 0, 6, 3, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 7, 4, 8, 3, 9, 2, 0, 10, 1, 11, 255], "i8", ALLOC_STATIC);
_crw_init_tables_second_tree=allocate([0, 2, 2, 2, 1, 4, 2, 1, 2, 5, 1, 1, 0, 0, 0, 139, 3, 4, 2, 5, 1, 6, 7, 8, 18, 19, 17, 20, 9, 21, 34, 0, 33, 22, 10, 240, 35, 23, 36, 49, 50, 24, 25, 51, 37, 65, 52, 66, 53, 81, 54, 55, 56, 41, 121, 38, 26, 57, 86, 87, 40, 39, 82, 85, 88, 67, 118, 89, 119, 84, 97, 249, 113, 120, 117, 150, 151, 73, 183, 83, 215, 116, 182, 152, 71, 72, 149, 105, 153, 145, 250, 184, 104, 181, 185, 214, 247, 216, 103, 70, 69, 148, 137, 248, 129, 213, 246, 180, 136, 177, 42, 68, 114, 217, 135, 102, 212, 245, 58, 167, 115, 169, 168, 134, 98, 199, 101, 200, 201, 161, 244, 209, 233, 90, 146, 133, 166, 231, 147, 232, 193, 198, 122, 100, 225, 74, 106, 230, 179, 241, 211, 165, 138, 178, 154, 186, 132, 164, 99, 229, 197, 243, 210, 196, 130, 170, 218, 228, 242, 202, 131, 163, 162, 195, 234, 194, 226, 227, 255, 255, 0, 2, 2, 1, 4, 1, 4, 1, 3, 3, 1, 0, 0, 0, 0, 140, 2, 3, 1, 4, 5, 18, 17, 6, 19, 7, 8, 20, 34, 9, 33, 0, 35, 21, 49, 50, 10, 22, 240, 36, 51, 65, 66, 25, 23, 37, 24, 81, 52, 67, 82, 41, 53, 97, 57, 113, 98, 54, 83, 38, 56, 26, 55, 129, 39, 145, 121, 85, 69, 40, 114, 89, 161, 177, 68, 105, 84, 88, 209, 250, 87, 225, 241, 185, 73, 71, 99, 106, 249, 86, 70, 168, 42, 74, 120, 153, 58, 117, 116, 134, 101, 193, 118, 182, 150, 214, 137, 133, 201, 245, 149, 180, 199, 247, 138, 151, 184, 115, 183, 216, 217, 135, 167, 122, 72, 130, 132, 234, 244, 166, 197, 90, 148, 164, 198, 146, 195, 104, 181, 200, 228, 229, 230, 233, 162, 163, 227, 194, 102, 103, 147, 170, 212, 213, 231, 248, 136, 154, 215, 119, 196, 100, 226, 152, 165, 202, 218, 232, 243, 246, 169, 178, 179, 242, 210, 131, 186, 211, 255, 255, 0, 0, 6, 2, 1, 3, 3, 2, 5, 1, 2, 2, 8, 10, 0, 117, 4, 5, 3, 6, 2, 7, 1, 8, 9, 18, 19, 20, 17, 21, 10, 22, 23, 240, 0, 34, 33, 24, 35, 25, 36, 50, 49, 37, 51, 56, 55, 52, 53, 54, 57, 121, 87, 88, 89, 40, 86, 120, 39, 65, 41, 119, 38, 66, 118, 153, 26, 85, 152, 151, 249, 72, 84, 150, 137, 71, 183, 73, 250, 117, 104, 182, 103, 105, 185, 184, 216, 82, 215, 136, 181, 116, 81, 70, 217, 248, 58, 214, 135, 69, 122, 149, 213, 246, 134, 180, 169, 148, 83, 42, 168, 67, 245, 247, 212, 102, 167, 90, 68, 138, 201, 232, 200, 231, 154, 106, 115, 74, 97, 199, 244, 198, 101, 233, 114, 230, 113, 145, 147, 166, 218, 146, 133, 98, 243, 197, 178, 164, 132, 186, 100, 165, 179, 210, 129, 229, 211, 170, 196, 202, 242, 177, 228, 209, 131, 99, 234, 195, 226, 130, 241, 163, 194, 161, 193, 227, 162, 225, 255, 255], "i8", ALLOC_STATIC);
_tiff_compress=allocate(1, "i32", ALLOC_STATIC);
__str5=allocate([99,97,110,111,110,95,99,111,109,112,114,101,115,115,101,100,95,108,111,97,100,95,114,97,119,40,41,0] /* canon_compressed_loa */, "i8", ALLOC_STATIC);
_raw_height=allocate(1, "i16", ALLOC_STATIC);
_cblack=allocate(32, "i32", ALLOC_STATIC);
_dng_version=allocate(1, "i32", ALLOC_STATIC);
__str6=allocate([108,106,112,101,103,95,115,116,97,114,116,40,41,0] /* ljpeg_start()\00 */, "i8", ALLOC_STATIC);
_load_flags=allocate(1, "i32", ALLOC_STATIC);
_curve=allocate(131072, "i16", ALLOC_STATIC);
_cr2_slice=allocate(6, "i16", ALLOC_STATIC);
_make=allocate(64, "i8", ALLOC_STATIC);
__str7=allocate([75,79,68,65,75,0] /* KODAK\00 */, "i8", ALLOC_STATIC);
_model2=allocate(64, "i8", ALLOC_STATIC);
__str8=allocate([37,100,46,37,100,46,37,100,0] /* %d.%d.%d\00 */, "i8", ALLOC_STATIC);
_unique_id=allocate(1, "i32", ALLOC_STATIC);
_sraw_mul=allocate(8, "i16", ALLOC_STATIC);
_is_raw=allocate(1, "i32", ALLOC_STATIC);
_fuji_width=allocate(1, "i16", ALLOC_STATIC);
_tiff_samples=allocate(1, "i32", ALLOC_STATIC);
_tile_length=allocate(1, "i32", ALLOC_STATIC);
_tile_width=allocate(1, "i32", ALLOC_STATIC);
__str9=allocate([97,100,111,98,101,95,100,110,103,95,108,111,97,100,95,114,97,119,95,110,99,40,41,0] /* adobe_dng_load_raw_n */, "i8", ALLOC_STATIC);
_tiff_bps=allocate(1, "i32", ALLOC_STATIC);
_meta_offset=allocate(1, "i32", ALLOC_STATIC);
_data_offset=allocate(1, "i32", ALLOC_STATIC);
_nikon_compressed_load_raw_nikon_tree=allocate([0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 4, 3, 6, 2, 7, 1, 0, 8, 9, 11, 10, 12, 0, 0, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 57, 90, 56, 39, 22, 5, 4, 3, 2, 1, 0, 11, 12, 12, 0, 0, 0, 1, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 6, 3, 7, 2, 8, 1, 9, 0, 10, 11, 12, 0, 0, 0, 0, 1, 4, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 6, 4, 7, 8, 3, 9, 2, 1, 0, 10, 11, 12, 13, 14, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 8, 92, 75, 58, 41, 7, 6, 5, 4, 3, 2, 1, 0, 13, 14, 0, 0, 1, 4, 2, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 8, 5, 9, 4, 10, 3, 11, 12, 2, 0, 1, 13, 14, 0], "i8", ALLOC_STATIC);
_nikon_e995_often=allocate([0,85,170,255] /* \00U\AA\FF */, "i8", ALLOC_STATIC);
_nikon_3700_table=allocate([0, 0, 0, 0, 80, 69, 78, 84, 65, 88, 0, 0, 0, 0, 0, 0, 79, 112, 116, 105, 111, 32, 51, 51, 87, 82, 0, 0, 0, 0, 0, undef, 3, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 51, 50, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef, 50, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 51, 55, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef, 51, 0, 0, 0, 79, 76, 89, 77, 80, 85, 83, 0, 0, 0, 0, 0, 67, 55, 52, 48, 85, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef], ["i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_STATIC);
_model=allocate(64, "i8", ALLOC_STATIC);
_fuji_layout=allocate(1, "i32", ALLOC_STATIC);
__str10=allocate([102,117,106,105,95,108,111,97,100,95,114,97,119,40,41,0] /* fuji_load_raw()\00 */, "i8", ALLOC_STATIC);
_thumb_width=allocate(1, "i16", ALLOC_STATIC);
_thumb_height=allocate(1, "i16", ALLOC_STATIC);
_thumb_length=allocate(1, "i32", ALLOC_STATIC);
__str11=allocate([112,112,109,95,116,104,117,109,98,40,41,0] /* ppm_thumb()\00 */, "i8", ALLOC_STATIC);
_ofp=allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
__str12=allocate([80,54,10,37,100,32,37,100,10,50,53,53,10,0] /* P6\0A%d %d\0A255\0A\ */, "i8", ALLOC_STATIC);
_layer_thumb_map=allocate([48, 49, 50, 0, 49, 48, 50, 0], "i8", ALLOC_STATIC);
_thumb_misc=allocate(1, "i32", ALLOC_STATIC);
__str13=allocate([108,97,121,101,114,95,116,104,117,109,98,40,41,0] /* layer_thumb()\00 */, "i8", ALLOC_STATIC);
__str14=allocate([80,37,100,10,37,100,32,37,100,10,50,53,53,10,0] /* P%d\0A%d %d\0A255\0A */, "i8", ALLOC_STATIC);
__str15=allocate([114,111,108,108,101,105,95,116,104,117,109,98,40,41,0] /* rollei_thumb()\00 */, "i8", ALLOC_STATIC);
__str16=allocate([112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0] /* phase_one_flat_field */, "i8", ALLOC_STATIC);
_phase_one_correct_dir=allocate([255, 255, 255, 1, 1, 255, 1, 1, 254, 0, 0, 254, 0, 2, 2, 0, 254, 254, 254, 2, 2, 254, 2, 2], "i8", ALLOC_STATIC);
_meta_length=allocate(1, "i32", ALLOC_STATIC);
__str17=allocate([80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0] /* Phase One correction */, "i8", ALLOC_STATIC);
_ph1=allocate(28, ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"float",0,0,0], ALLOC_STATIC);
__str18=allocate([112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0] /* phase_one_correct()\ */, "i8", ALLOC_STATIC);
__str19=allocate([112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,40,41,0] /* phase_one_load_raw() */, "i8", ALLOC_STATIC);
_ph1_bithuff_bitbuf=allocate(1, ["i64",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_ph1_bithuff_vbits=allocate(1, "i32", ALLOC_STATIC);
_phase_one_load_raw_c_length=allocate([8, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 13, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__str20=allocate([112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0] /* phase_one_load_raw_c */, "i8", ALLOC_STATIC);
_strip_offset=allocate(1, "i32", ALLOC_STATIC);
__str21=allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0] /* leaf_hdr_load_raw()\ */, "i8", ALLOC_STATIC);
_iheight=allocate(1, "i16", ALLOC_STATIC);
__str22=allocate([115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0] /* sinar_4shot_load_raw */, "i8", ALLOC_STATIC);
__str23=allocate([117,110,112,97,99,107,101,100,95,108,111,97,100,95,114,97,119,40,41,0] /* unpacked_load_raw()\ */, "i8", ALLOC_STATIC);
__str24=allocate([110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0] /* nokia_load_raw()\00 */, "i8", ALLOC_STATIC);
_pana_bits_buf=allocate(16384, "i8", ALLOC_STATIC);
_pana_bits_vbits=allocate(1, "i32", ALLOC_STATIC);
_quicktake_100_load_raw_gstep=allocate([-89, 0, -60, 0, -44, 0, -32, 0, -22, 0, -15, 0, -8, 0, -2, 0, 2, 0, 8, 0, 15, 0, 22, 0, 32, 0, 44, 0, 60, 0, 89, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_quicktake_100_load_raw_rstep=allocate([-3, 0, -1, 0, 1, 0, 3, 0, -5, 0, -1, 0, 1, 0, 5, 0, -8, 0, -2, 0, 2, 0, 8, 0, -13, 0, -3, 0, 3, 0, 13, 0, -19, 0, -4, 0, 4, 0, 19, 0, -28, 0, -6, 0, 6, 0, 28, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_quicktake_100_load_raw_curve=allocate([0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 65, 0, 66, 0, 67, 0, 68, 0, 69, 0, 70, 0, 71, 0, 72, 0, 74, 0, 75, 0, 76, 0, 77, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 83, 0, 84, 0, 86, 0, 88, 0, 90, 0, 92, 0, 94, 0, 97, 0, 99, 0, 101, 0, 103, 0, 105, 0, 107, 0, 110, 0, 112, 0, 114, 0, 116, 0, 118, 0, 120, 0, 123, 0, 125, 0, 127, 0, 129, 0, 131, 0, 134, 0, 136, 0, 138, 0, 140, 0, 142, 0, 144, 0, 147, 0, 149, 0, 151, 0, 153, 0, 155, 0, 158, 0, 160, 0, 162, 0, 164, 0, 166, 0, 168, 0, 171, 0, 173, 0, 175, 0, 177, 0, 179, 0, 181, 0, 184, 0, 186, 0, 188, 0, 190, 0, 192, 0, 195, 0, 197, 0, 199, 0, 201, 0, 203, 0, 205, 0, 208, 0, 210, 0, 212, 0, 214, 0, 216, 0, 218, 0, 221, 0, 223, 0, 226, 0, 230, 0, 235, 0, 239, 0, 244, 0, 248, 0, 252, 0, 257, 0, 261, 0, 265, 0, 270, 0, 274, 0, 278, 0, 283, 0, 287, 0, 291, 0, 296, 0, 300, 0, 305, 0, 309, 0, 313, 0, 318, 0, 322, 0, 326, 0, 331, 0, 335, 0, 339, 0, 344, 0, 348, 0, 352, 0, 357, 0, 361, 0, 365, 0, 370, 0, 374, 0, 379, 0, 383, 0, 387, 0, 392, 0, 396, 0, 400, 0, 405, 0, 409, 0, 413, 0, 418, 0, 422, 0, 426, 0, 431, 0, 435, 0, 440, 0, 444, 0, 448, 0, 453, 0, 457, 0, 461, 0, 466, 0, 470, 0, 474, 0, 479, 0, 483, 0, 487, 0, 492, 0, 496, 0, 500, 0, 508, 0, 519, 0, 531, 0, 542, 0, 553, 0, 564, 0, 575, 0, 587, 0, 598, 0, 609, 0, 620, 0, 631, 0, 643, 0, 654, 0, 665, 0, 676, 0, 687, 0, 698, 0, 710, 0, 721, 0, 732, 0, 743, 0, 754, 0, 766, 0, 777, 0, 788, 0, 799, 0, 810, 0, 822, 0, 833, 0, 844, 0, 855, 0, 866, 0, 878, 0, 889, 0, 900, 0, 911, 0, 922, 0, 933, 0, 945, 0, 956, 0, 967, 0, 978, 0, 989, 0, 1001, 0, 1012, 0, 1023, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_kodak_radc_load_raw_src=allocate([1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37] /* \01\01\02\03\03\04\0 */, "i8", ALLOC_STATIC);
_kodak_radc_load_raw_last=allocate([16, 0, 16, 0, 16, 0], ["i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_kodak_radc_load_raw_pt=allocate([0, 0, 0, 0, 1280, 0, 1344, 0, 2320, 0, 3616, 0, 3328, 0, 8000, 0, 4095, 0, 16383, 0, -1, 0, 16383, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_kodak_cbpp=allocate(1, "i32", ALLOC_STATIC);
_kodak_dc120_load_raw_mul=allocate([162, 0, 0, 0, 192, 0, 0, 0, 187, 0, 0, 0, 92, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_kodak_dc120_load_raw_add=allocate([0, 0, 0, 0, 636, 0, 0, 0, 424, 0, 0, 0, 212, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__str25=allocate([101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0] /* eight_bit_load_raw() */, "i8", ALLOC_STATIC);
__str26=allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_STATIC);
__str27=allocate([107,111,100,97,107,95,121,114,103,98,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_yrgb_load_raw( */, "i8", ALLOC_STATIC);
_kodak_262_load_raw_kodak_tree=allocate([0, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "i8", ALLOC_STATIC);
__str28=allocate([107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_262_load_raw() */, "i8", ALLOC_STATIC);
_sony_decrypt_pad=allocate(512, "i32", ALLOC_STATIC);
_sony_decrypt_p=allocate(1, "i32", ALLOC_STATIC);
__str29=allocate([115,111,110,121,95,108,111,97,100,95,114,97,119,40,41,0] /* sony_load_raw()\00 */, "i8", ALLOC_STATIC);
_sony_arw_load_raw_tab=allocate([3857, 0, 3856, 0, 3599, 0, 3342, 0, 3085, 0, 2828, 0, 2571, 0, 2314, 0, 2057, 0, 1800, 0, 1543, 0, 1286, 0, 1029, 0, 772, 0, 771, 0, 768, 0, 514, 0, 513, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
__str30=allocate([115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0] /* sony_arw2_load_raw() */, "i8", ALLOC_STATIC);
_smal_decode_segment_hist=allocate([7, 7, 0, 0, 63, 55, 47, 39, 31, 23, 15, 7, 0, 7, 7, 0, 0, 63, 55, 47, 39, 31, 23, 15, 7, 0, 3, 3, 0, 0, 63, 47, 31, 15, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
_foveon_decoder_huff=allocate(4096, "i32", ALLOC_STATIC);
_first_decode=allocate(24576, ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_free_decode=allocate(1, "%struct.decode*", ALLOC_STATIC);
__str31=allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0] /* %s: decoder table ov */, "i8", ALLOC_STATIC);
__str32=allocate([102,111,118,101,111,110,95,116,104,117,109,98,40,41,0] /* foveon_thumb()\00 */, "i8", ALLOC_STATIC);
_meta_data=allocate(1, "i8*", ALLOC_STATIC);
__str33=allocate([67,77,98,0] /* CMb\00 */, "i8", ALLOC_STATIC);
__str34=allocate([102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0] /* foveon_camf_matrix() */, "i8", ALLOC_STATIC);
__str35=allocate([37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0] /* %s: \22%s\22 matrix  */, "i8", ALLOC_STATIC);
__str36=allocate([102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0] /* foveon_make_curve()\ */, "i8", ALLOC_STATIC);
_foveon_interpolate_hood=allocate([-1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 1, 0, 1, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
__str37=allocate([70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Foveon interpolation */, "i8", ALLOC_STATIC);
__str38=allocate([68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0] /* DarkShieldColRange\0 */, "i8", ALLOC_STATIC);
__str39=allocate([80,111,115,116,80,111,108,121,77,97,116,114,105,120,0] /* PostPolyMatrix\00 */, "i8", ALLOC_STATIC);
__str40=allocate([83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0] /* SaturationLevel\00 */, "i8", ALLOC_STATIC);
__str41=allocate([75,101,101,112,73,109,97,103,101,65,114,101,97,0] /* KeepImageArea\00 */, "i8", ALLOC_STATIC);
__str42=allocate([65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0] /* ActiveImageArea\00 */, "i8", ALLOC_STATIC);
__str43=allocate([67,104,114,111,109,97,68,81,0] /* ChromaDQ\00 */, "i8", ALLOC_STATIC);
__str44=allocate([73,110,99,108,117,100,101,66,108,111,99,107,115,0] /* IncludeBlocks\00 */, "i8", ALLOC_STATIC);
__str45=allocate([67,111,108,111,114,68,81,0] /* ColorDQ\00 */, "i8", ALLOC_STATIC);
__str46=allocate([67,111,108,111,114,68,81,67,97,109,82,71,66,0] /* ColorDQCamRGB\00 */, "i8", ALLOC_STATIC);
__str47=allocate([67,111,108,117,109,110,70,105,108,116,101,114,0] /* ColumnFilter\00 */, "i8", ALLOC_STATIC);
__str48=allocate([68,97,114,107,68,114,105,102,116,0] /* DarkDrift\00 */, "i8", ALLOC_STATIC);
__str49=allocate([68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0] /* DarkShieldBottom\00 */, "i8", ALLOC_STATIC);
__str50=allocate([68,97,114,107,83,104,105,101,108,100,84,111,112,0] /* DarkShieldTop\00 */, "i8", ALLOC_STATIC);
__str51=allocate([87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0] /* WhiteBalanceIllumina */, "i8", ALLOC_STATIC);
__str52=allocate([37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0] /* %s: Invalid white ba */, "i8", ALLOC_STATIC);
__str53=allocate([87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0] /* WhiteBalanceCorrecti */, "i8", ALLOC_STATIC);
__str54=allocate([37,115,82,71,66,78,101,117,116,114,97,108,0] /* %sRGBNeutral\00 */, "i8", ALLOC_STATIC);
__str55=allocate([83,112,97,116,105,97,108,71,97,105,110,0] /* SpatialGain\00 */, "i8", ALLOC_STATIC);
__str56=allocate([66,97,100,80,105,120,101,108,115,0] /* BadPixels\00 */, "i8", ALLOC_STATIC);
__str57=allocate([102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* foveon_interpolate() */, "i8", ALLOC_STATIC);
__str58=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
__str59=allocate([47,46,98,97,100,112,105,120,101,108,115,0] /* /.badpixels\00 */, "i8", ALLOC_STATIC);
__str60=allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_STATIC);
_timestamp=allocate(1, "i32", ALLOC_STATIC);
__str61=allocate([70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0] /* Fixed dead pixels at */, "i8", ALLOC_STATIC);
__str62=allocate([32,37,100,44,37,100,0] /*  %d,%d\00 */, "i8", ALLOC_STATIC);
__str63=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
__str64=allocate([37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0] /* %s is not a valid PG */, "i8", ALLOC_STATIC);
__str65=allocate([37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0] /* %s has the wrong dim */, "i8", ALLOC_STATIC);
__str66=allocate([115,117,98,116,114,97,99,116,40,41,0] /* subtract()\00 */, "i8", ALLOC_STATIC);
_wavelet_denoise_noise=allocate([0.8001999855041504, 0, 0, 0, 0.273499995470047, 0, 0, 0, 0.12020000070333481, 0, 0, 0, 0.05849999934434891, 0, 0, 0, 0.029100000858306885, 0, 0, 0, 0.015200000256299973, 0, 0, 0, 0.00800000037997961, 0, 0, 0, 0.004399999976158142, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
__str67=allocate([87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0] /* Wavelet denoising... */, "i8", ALLOC_STATIC);
__str68=allocate([119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0] /* wavelet_denoise()\00 */, "i8", ALLOC_STATIC);
_cam_mul=allocate(16, "float", ALLOC_STATIC);
_white=allocate(128, "i16", ALLOC_STATIC);
__str69=allocate([37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0] /* %s: Cannot use camer */, "i8", ALLOC_STATIC);
__str70=allocate([83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0] /* Scaling with darknes */, "i8", ALLOC_STATIC);
__str71=allocate([32,37,102,0] /*  %f\00 */, "i8", ALLOC_STATIC);
__str72=allocate([67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0] /* Correcting chromatic */, "i8", ALLOC_STATIC);
__str73=allocate([115,99,97,108,101,95,99,111,108,111,114,115,40,41,0] /* scale_colors()\00 */, "i8", ALLOC_STATIC);
__str74=allocate([112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* pre_interpolate()\00 */, "i8", ALLOC_STATIC);
_mix_green=allocate(1, "i32", ALLOC_STATIC);
__str75=allocate([66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Bilinear interpolati */, "i8", ALLOC_STATIC);
_vng_interpolate_cp=allocate(1, "i8*", ALLOC_STATIC);
_vng_interpolate_terms=allocate([254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16] /* \FE\FE\00\FF\00\01\F */, "i8", ALLOC_STATIC);
_vng_interpolate_chood=allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255] /* \FF\FF\FF\00\FF\01\0 */, "i8", ALLOC_STATIC);
__str76=allocate([86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* VNG interpolation... */, "i8", ALLOC_STATIC);
__str77=allocate([118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* vng_interpolate()\00 */, "i8", ALLOC_STATIC);
__str78=allocate([80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* PPG interpolation... */, "i8", ALLOC_STATIC);
_ahd_interpolate_dir=allocate([-1, 0, 0, 0, 1, 0, 0, 0, -256, 0, 0, 0, 256, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__str79=allocate([65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* AHD interpolation... */, "i8", ALLOC_STATIC);
__str80=allocate([97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* ahd_interpolate()\00 */, "i8", ALLOC_STATIC);
_median_filter_opt=allocate([1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2] /* \01\02\04\05\07\08\0 */, "i8", ALLOC_STATIC);
__str81=allocate([77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0] /* Median filter pass % */, "i8", ALLOC_STATIC);
_blend_highlights_trans=allocate([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1.7320507764816284, 0, 0, 0, -1.7320507764816284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
_blend_highlights_itrans=allocate([1, 0, 0, 0, 0.8660253882408142, 0, 0, 0, -0.5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0.8660253882408142, 0, 0, 0, -0.5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
__str82=allocate([66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Blending highlights. */, "i8", ALLOC_STATIC);
_recover_highlights_dir=allocate([255, 255, 255, 0, 255, 1, 0, 1, 1, 1, 1, 0, 1, 255, 0, 255], "i8", ALLOC_STATIC);
__str83=allocate([82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Rebuilding highlight */, "i8", ALLOC_STATIC);
__str84=allocate([114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0] /* recover_highlights() */, "i8", ALLOC_STATIC);
__str85=allocate([49,49,49,50,52,56,49,49,50,52,56,52,56,56,0] /* 11124811248488\00 */, "i8", ALLOC_STATIC);
_thumb_offset=allocate(1, "i32", ALLOC_STATIC);
_parse_makernote_xlat=allocate([193, 191, 109, 13, 89, 197, 19, 157, 131, 97, 107, 79, 199, 127, 61, 61, 83, 89, 227, 199, 233, 47, 149, 167, 149, 31, 223, 127, 43, 41, 199, 13, 223, 7, 239, 113, 137, 61, 19, 61, 59, 19, 251, 13, 137, 193, 101, 31, 179, 13, 107, 41, 227, 251, 239, 163, 107, 71, 127, 149, 53, 167, 71, 79, 199, 241, 89, 149, 53, 17, 41, 97, 241, 61, 179, 43, 13, 67, 137, 193, 157, 157, 137, 101, 241, 233, 223, 191, 61, 127, 83, 151, 229, 233, 149, 23, 29, 61, 139, 251, 199, 227, 103, 167, 7, 241, 113, 167, 83, 181, 41, 137, 229, 43, 167, 23, 41, 233, 79, 197, 101, 109, 107, 239, 13, 137, 73, 47, 179, 67, 83, 101, 29, 73, 163, 19, 137, 89, 239, 107, 239, 101, 29, 11, 89, 19, 227, 79, 157, 179, 41, 67, 43, 7, 29, 149, 89, 89, 71, 251, 229, 233, 97, 71, 47, 53, 127, 23, 127, 239, 127, 149, 149, 113, 211, 163, 11, 113, 163, 173, 11, 59, 181, 251, 163, 191, 79, 131, 29, 173, 233, 47, 113, 101, 163, 229, 7, 53, 61, 13, 181, 233, 229, 71, 59, 157, 239, 53, 163, 191, 179, 223, 83, 211, 151, 83, 73, 113, 7, 53, 97, 113, 47, 67, 47, 17, 223, 23, 151, 251, 149, 59, 127, 107, 211, 37, 191, 173, 199, 197, 197, 181, 139, 239, 47, 211, 7, 107, 37, 73, 149, 37, 73, 109, 113, 199, 167, 188, 201, 173, 145, 223, 133, 229, 212, 120, 213, 23, 70, 124, 41, 76, 77, 3, 233, 37, 104, 17, 134, 179, 189, 247, 111, 97, 34, 162, 38, 52, 42, 190, 30, 70, 20, 104, 157, 68, 24, 194, 64, 244, 126, 95, 27, 173, 11, 148, 182, 103, 180, 11, 225, 234, 149, 156, 102, 220, 231, 93, 108, 5, 218, 213, 223, 122, 239, 246, 219, 31, 130, 76, 192, 104, 71, 161, 189, 238, 57, 80, 86, 74, 221, 223, 165, 248, 198, 218, 202, 144, 202, 1, 66, 157, 139, 12, 115, 67, 117, 5, 148, 222, 36, 179, 128, 52, 229, 44, 220, 155, 63, 202, 51, 69, 208, 219, 95, 245, 82, 195, 33, 218, 226, 34, 114, 107, 62, 208, 91, 168, 135, 140, 6, 93, 15, 221, 9, 25, 147, 208, 185, 252, 139, 15, 132, 96, 51, 28, 155, 69, 241, 240, 163, 148, 58, 18, 119, 51, 77, 68, 120, 40, 60, 158, 253, 101, 87, 22, 148, 107, 251, 89, 208, 200, 34, 54, 219, 210, 99, 152, 67, 161, 4, 135, 134, 247, 166, 38, 187, 214, 89, 77, 191, 106, 46, 170, 43, 239, 230, 120, 182, 78, 224, 47, 220, 124, 190, 87, 25, 50, 126, 42, 208, 184, 186, 41, 0, 60, 82, 125, 168, 73, 59, 45, 235, 37, 73, 250, 163, 170, 57, 167, 197, 167, 80, 17, 54, 251, 198, 103, 74, 245, 165, 18, 101, 126, 176, 223, 175, 78, 179, 97, 127, 47], "i8", ALLOC_STATIC);
__str86=allocate([78,111,107,105,97,0] /* Nokia\00 */, "i8", ALLOC_STATIC);
__str87=allocate([75,68,75,0] /* KDK\00 */, "i8", ALLOC_STATIC);
__str88=allocate([86,69,82,0] /* VER\00 */, "i8", ALLOC_STATIC);
__str89=allocate([73,73,73,73,0] /* IIII\00 */, "i8", ALLOC_STATIC);
__str90=allocate([77,77,77,77,0] /* MMMM\00 */, "i8", ALLOC_STATIC);
__str91=allocate([75,67,0] /* KC\00 */, "i8", ALLOC_STATIC);
__str92=allocate([77,76,89,0] /* MLY\00 */, "i8", ALLOC_STATIC);
__str93=allocate([78,105,107,111,110,0] /* Nikon\00 */, "i8", ALLOC_STATIC);
__str94=allocate([79,76,89,77,80,85,83,0] /* OLYMPUS\00 */, "i8", ALLOC_STATIC);
__str95=allocate([83,79,78,89,0] /* SONY\00 */, "i8", ALLOC_STATIC);
__str96=allocate([80,97,110,97,115,111,110,105,99,0] /* Panasonic\00 */, "i8", ALLOC_STATIC);
__str97=allocate([70,85,74,73,70,73,76,77,0] /* FUJIFILM\00 */, "i8", ALLOC_STATIC);
__str98=allocate([79,76,89,77,80,0] /* OLYMP\00 */, "i8", ALLOC_STATIC);
__str99=allocate([76,69,73,67,65,0] /* LEICA\00 */, "i8", ALLOC_STATIC);
__str100=allocate([82,105,99,111,104,0] /* Ricoh\00 */, "i8", ALLOC_STATIC);
__str101=allocate([69,80,83,79,78,0] /* EPSON\00 */, "i8", ALLOC_STATIC);
__str102=allocate([65,79,67,0] /* AOC\00 */, "i8", ALLOC_STATIC);
__str103=allocate([81,86,67,0] /* QVC\00 */, "i8", ALLOC_STATIC);
__str104=allocate([83,65,77,83,85,78,71,0] /* SAMSUNG\00 */, "i8", ALLOC_STATIC);
__str105=allocate([78,73,75,79,78,0] /* NIKON\00 */, "i8", ALLOC_STATIC);
_iso_speed=allocate(1, "float", ALLOC_STATIC);
_aperture=allocate(1, "float", ALLOC_STATIC);
_shutter=allocate(1, "float", ALLOC_STATIC);
_shot_order=allocate(1, "i32", ALLOC_STATIC);
__str106=allocate([75,79,78,73,67,65,0] /* KONICA\00 */, "i8", ALLOC_STATIC);
_flip=allocate(1, "i32", ALLOC_STATIC);
__str107=allocate([67,97,110,111,110,0] /* Canon\00 */, "i8", ALLOC_STATIC);
_artist=allocate(64, "i8", ALLOC_STATIC);
__str108=allocate([187,187,0] /* \BB\BB\00 */, "i8", ALLOC_STATIC);
__str109=allocate([48,54,53,0] /* 065\00 */, "i8", ALLOC_STATIC);
__str110=allocate([78,82,87,32,0] /* NRW \00 */, "i8", ALLOC_STATIC);
__str111=allocate([48,49,48,48,0] /* 0100\00 */, "i8", ALLOC_STATIC);
__str112=allocate([80,69,78,84,65,88,0] /* PENTAX\00 */, "i8", ALLOC_STATIC);
__str113=allocate([48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0] /* 012347800000005896\0 */, "i8", ALLOC_STATIC);
__str114=allocate([54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0] /* 66666>666;6A;:;55\00 */, "i8", ALLOC_STATIC);
_cmatrix=allocate(48, "float", ALLOC_STATIC);
_load_raw=allocate(1, "void (...)*", ALLOC_STATIC);
__str115=allocate([37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0] /* %d:%d:%d %d:%d:%d\00 */, "i8", ALLOC_STATIC);
__str116=allocate([69,65,83,84,77,65,78,0] /* EASTMAN\00 */, "i8", ALLOC_STATIC);
_tiff_nifds=allocate(1, "i32", ALLOC_STATIC);
_focal_len=allocate(1, "float", ALLOC_STATIC);
_exif_cfa=allocate(1, "i32", ALLOC_STATIC);
_gpsdata=allocate(128, "i32", ALLOC_STATIC);
_romm_coeff_rgb_romm=allocate([2.0341930389404297, 0, 0, 0, -0.7274199724197388, 0, 0, 0, -0.30676600337028503, 0, 0, 0, -0.22881099581718445, 0, 0, 0, 1.2317290306091309, 0, 0, 0, -0.0029219998978078365, 0, 0, 0, -0.008565000258386135, 0, 0, 0, -0.15327300131320953, 0, 0, 0, 1.1618390083312988, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
_parse_mos_mod=allocate(156, "*", ALLOC_STATIC);
__str117=allocate(1, "i8", ALLOC_STATIC);
__str118=allocate([68,67,66,50,0] /* DCB2\00 */, "i8", ALLOC_STATIC);
__str119=allocate([86,111,108,97,114,101,0] /* Volare\00 */, "i8", ALLOC_STATIC);
__str120=allocate([67,97,110,116,97,114,101,0] /* Cantare\00 */, "i8", ALLOC_STATIC);
__str121=allocate([67,77,111,115,116,0] /* CMost\00 */, "i8", ALLOC_STATIC);
__str122=allocate([86,97,108,101,111,32,54,0] /* Valeo 6\00 */, "i8", ALLOC_STATIC);
__str123=allocate([86,97,108,101,111,32,49,49,0] /* Valeo 11\00 */, "i8", ALLOC_STATIC);
__str124=allocate([86,97,108,101,111,32,50,50,0] /* Valeo 22\00 */, "i8", ALLOC_STATIC);
__str125=allocate([86,97,108,101,111,32,49,49,112,0] /* Valeo 11p\00 */, "i8", ALLOC_STATIC);
__str126=allocate([86,97,108,101,111,32,49,55,0] /* Valeo 17\00 */, "i8", ALLOC_STATIC);
__str127=allocate([65,112,116,117,115,32,49,55,0] /* Aptus 17\00 */, "i8", ALLOC_STATIC);
__str128=allocate([65,112,116,117,115,32,50,50,0] /* Aptus 22\00 */, "i8", ALLOC_STATIC);
__str129=allocate([65,112,116,117,115,32,55,53,0] /* Aptus 75\00 */, "i8", ALLOC_STATIC);
__str130=allocate([65,112,116,117,115,32,54,53,0] /* Aptus 65\00 */, "i8", ALLOC_STATIC);
__str131=allocate([65,112,116,117,115,32,53,52,83,0] /* Aptus 54S\00 */, "i8", ALLOC_STATIC);
__str132=allocate([65,112,116,117,115,32,54,53,83,0] /* Aptus 65S\00 */, "i8", ALLOC_STATIC);
__str133=allocate([65,112,116,117,115,32,55,53,83,0] /* Aptus 75S\00 */, "i8", ALLOC_STATIC);
__str134=allocate([65,70,105,32,53,0] /* AFi 5\00 */, "i8", ALLOC_STATIC);
__str135=allocate([65,70,105,32,54,0] /* AFi 6\00 */, "i8", ALLOC_STATIC);
__str136=allocate([65,70,105,32,55,0] /* AFi 7\00 */, "i8", ALLOC_STATIC);
__str137=allocate([65,70,105,45,73,73,32,49,50,0] /* AFi-II 12\00 */, "i8", ALLOC_STATIC);
__str138=allocate([74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0] /* JPEG_preview_data\00 */, "i8", ALLOC_STATIC);
__str139=allocate([105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0] /* icc_camera_profile\0 */, "i8", ALLOC_STATIC);
_profile_offset=allocate(1, "i32", ALLOC_STATIC);
_profile_length=allocate(1, "i32", ALLOC_STATIC);
__str140=allocate([83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0] /* ShootObj_back_type\0 */, "i8", ALLOC_STATIC);
__str141=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
__str142=allocate([105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0] /* icc_camera_to_tone_m */, "i8", ALLOC_STATIC);
__str143=allocate([67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0] /* CaptProf_color_matri */, "i8", ALLOC_STATIC);
__str144=allocate([37,102,0] /* %f\00 */, "i8", ALLOC_STATIC);
__str145=allocate([67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0] /* CaptProf_number_of_p */, "i8", ALLOC_STATIC);
__str146=allocate([67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0] /* CaptProf_raw_data_ro */, "i8", ALLOC_STATIC);
__str147=allocate([67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0] /* CaptProf_mosaic_patt */, "i8", ALLOC_STATIC);
__str148=allocate([73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0] /* ImgProf_rotation_ang */, "i8", ALLOC_STATIC);
__str149=allocate([78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0] /* NeutObj_neutrals\00 */, "i8", ALLOC_STATIC);
__str150=allocate([82,111,119,115,95,100,97,116,97,0] /* Rows_data\00 */, "i8", ALLOC_STATIC);
__str151=allocate([148,97,22,73,0] /* \94a\16I\00 */, "i8", ALLOC_STATIC);
_parse_kodak_ifd_mul=allocate([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
_parse_kodak_ifd_wbtag=allocate([64037, 0, 0, 0, 64040, 0, 0, 0, 64039, 0, 0, 0, 64041, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 64042, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_parse_tiff_ifd_cfa_pc=allocate([0,1,2,3] /* \00\01\02\03 */, "i8", ALLOC_STATIC);
_parse_tiff_ifd_ab=allocate([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_parse_tiff_ifd_xyz=allocate([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_parse_tiff_ifd_sony_curve=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_tiff_ifd=allocate(360, "i32", ALLOC_STATIC);
_desc=allocate(512, "i8", ALLOC_STATIC);
__str152=allocate([53,48,49,51,50,52,54,55,0] /* 50132467\00 */, "i8", ALLOC_STATIC);
__str153=allocate([65,100,111,98,101,0] /* Adobe\00 */, "i8", ALLOC_STATIC);
__str154=allocate([100,99,114,97,119,0] /* dcraw\00 */, "i8", ALLOC_STATIC);
__str155=allocate([85,70,82,97,119,0] /* UFRaw\00 */, "i8", ALLOC_STATIC);
__str156=allocate([66,105,98,98,108,101,0] /* Bibble\00 */, "i8", ALLOC_STATIC);
__str157=allocate([78,105,107,111,110,32,83,99,97,110,0] /* Nikon Scan\00 */, "i8", ALLOC_STATIC);
__str158=allocate([68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0] /* Digital Photo Profes */, "i8", ALLOC_STATIC);
__str159=allocate([68,83,76,82,45,65,49,48,48,0] /* DSLR-A100\00 */, "i8", ALLOC_STATIC);
__str160=allocate([83,97,114,110,111,102,102,0] /* Sarnoff\00 */, "i8", ALLOC_STATIC);
__str161=allocate([3,4,5,0] /* \03\04\05\00 */, "i8", ALLOC_STATIC);
__str162=allocate([5,3,4,1,0] /* \05\03\04\01\00 */, "i8", ALLOC_STATIC);
__str163=allocate([77,65,84,82,73,88,0] /* MATRIX\00 */, "i8", ALLOC_STATIC);
__str164=allocate([76,101,97,102,0] /* Leaf\00 */, "i8", ALLOC_STATIC);
__str165=allocate([73,109,97,99,111,110,0] /* Imacon\00 */, "i8", ALLOC_STATIC);
__str166=allocate([73,120,112,114,101,115,115,32,37,100,45,77,112,0] /* Ixpress %d-Mp\00 */, "i8", ALLOC_STATIC);
__str167=allocate([78,101,117,116,114,97,108,32,0] /* Neutral \00 */, "i8", ALLOC_STATIC);
__str168=allocate([37,102,32,37,102,32,37,102,0] /* %f %f %f\00 */, "i8", ALLOC_STATIC);
__str169=allocate([72,97,115,115,101,108,98,108,97,100,0] /* Hasselblad\00 */, "i8", ALLOC_STATIC);
__str170=allocate([68,78,71,0] /* DNG\00 */, "i8", ALLOC_STATIC);
_cdesc=allocate(5, "i8", ALLOC_STATIC);
_pixel_aspect=allocate(1, "double", ALLOC_STATIC);
_tiff_flip=allocate(1, "i32", ALLOC_STATIC);
__str171=allocate([75,111,100,97,107,0] /* Kodak\00 */, "i8", ALLOC_STATIC);
__str172=allocate([68,69,66,85,71,32,82,65,87,0] /* DEBUG RAW\00 */, "i8", ALLOC_STATIC);
_write_thumb=allocate(1, "void (...)*", ALLOC_STATIC);
_thumb_load_raw=allocate(1, "void (...)*", ALLOC_STATIC);
__str173=allocate([68,105,77,65,71,69,32,65,50,48,48,0] /* DiMAGE A200\00 */, "i8", ALLOC_STATIC);
__str174=allocate([112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0] /* parse_external_jpeg( */, "i8", ALLOC_STATIC);
__str175=allocate([46,106,112,103,0] /* .jpg\00 */, "i8", ALLOC_STATIC);
__str176=allocate([46,74,80,71,0] /* .JPG\00 */, "i8", ALLOC_STATIC);
__str177=allocate([82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Reading metadata fro */, "i8", ALLOC_STATIC);
__str178=allocate([70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0] /* Failed to read metad */, "i8", ALLOC_STATIC);
_ciff_block_1030_key=allocate([1040, 0, 17907, 0], ["i16",0,"i16",0], ALLOC_STATIC);
_parse_ciff_key=allocate([1040, 0, 17907, 0], ["i16",0,"i16",0], ALLOC_STATIC);
__str179=allocate([80,114,111,49,0] /* Pro1\00 */, "i8", ALLOC_STATIC);
__str180=allocate([48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0] /* 012346000000000000\0 */, "i8", ALLOC_STATIC);
__str181=allocate([48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0] /* 01345:000000006008\0 */, "i8", ALLOC_STATIC);
__str182=allocate([48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0] /* 023457000000006000\0 */, "i8", ALLOC_STATIC);
__str183=allocate([48,49,51,52,53,54,55,48,50,56,0] /* 0134567028\00 */, "i8", ALLOC_STATIC);
__str184=allocate([68,65,84,0] /* DAT\00 */, "i8", ALLOC_STATIC);
__str185=allocate([84,73,77,0] /* TIM\00 */, "i8", ALLOC_STATIC);
__str186=allocate([37,100,58,37,100,58,37,100,0] /* %d:%d:%d\00 */, "i8", ALLOC_STATIC);
__str187=allocate([72,68,82,0] /* HDR\00 */, "i8", ALLOC_STATIC);
__str188=allocate([88,32,32,0] /* X  \00 */, "i8", ALLOC_STATIC);
__str189=allocate([89,32,32,0] /* Y  \00 */, "i8", ALLOC_STATIC);
__str190=allocate([84,88,32,0] /* TX \00 */, "i8", ALLOC_STATIC);
__str191=allocate([84,89,32,0] /* TY \00 */, "i8", ALLOC_STATIC);
__str192=allocate([69,79,72,68,0] /* EOHD\00 */, "i8", ALLOC_STATIC);
__str193=allocate([82,111,108,108,101,105,0] /* Rollei\00 */, "i8", ALLOC_STATIC);
__str194=allocate([100,53,51,48,102,108,101,120,0] /* d530flex\00 */, "i8", ALLOC_STATIC);
__str195=allocate([77,69,84,65,0] /* META\00 */, "i8", ALLOC_STATIC);
__str196=allocate([84,72,85,77,66,0] /* THUMB\00 */, "i8", ALLOC_STATIC);
__str197=allocate([82,65,87,48,0] /* RAW0\00 */, "i8", ALLOC_STATIC);
__str198=allocate([48,54,53,51,0] /* 0653\00 */, "i8", ALLOC_STATIC);
__str199=allocate([32,99,97,109,101,114,97,0] /*  camera\00 */, "i8", ALLOC_STATIC);
__str200=allocate([80,104,97,115,101,32,79,110,101,0] /* Phase One\00 */, "i8", ALLOC_STATIC);
__str201=allocate([76,105,103,104,116,80,104,97,115,101,0] /* LightPhase\00 */, "i8", ALLOC_STATIC);
__str202=allocate([72,32,49,48,0] /* H 10\00 */, "i8", ALLOC_STATIC);
__str203=allocate([72,32,50,48,0] /* H 20\00 */, "i8", ALLOC_STATIC);
__str204=allocate([72,32,50,53,0] /* H 25\00 */, "i8", ALLOC_STATIC);
_parse_riff_mon=allocate([74, 97, 110, 0, 70, 101, 98, 0, 77, 97, 114, 0, 65, 112, 114, 0, 77, 97, 121, 0, 74, 117, 110, 0, 74, 117, 108, 0, 65, 117, 103, 0, 83, 101, 112, 0, 79, 99, 116, 0, 78, 111, 118, 0, 68, 101, 99, 0], "i8", ALLOC_STATIC);
__str205=allocate([82,73,70,70,0] /* RIFF\00 */, "i8", ALLOC_STATIC);
__str206=allocate([76,73,83,84,0] /* LIST\00 */, "i8", ALLOC_STATIC);
__str207=allocate([110,99,116,103,0] /* nctg\00 */, "i8", ALLOC_STATIC);
__str208=allocate([73,68,73,84,0] /* IDIT\00 */, "i8", ALLOC_STATIC);
__str209=allocate([37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0] /* %_s %s %d %d:%d:%d % */, "i8", ALLOC_STATIC);
__str210=allocate([83,77,97,76,0] /* SMaL\00 */, "i8", ALLOC_STATIC);
__str211=allocate([118,37,100,32,37,100,120,37,100,0] /* v%d %dx%d\00 */, "i8", ALLOC_STATIC);
__str212=allocate([67,73,78,69,0] /* CINE\00 */, "i8", ALLOC_STATIC);
__str213=allocate([37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0] /* %s: Tail is missing, */, "i8", ALLOC_STATIC);
__str214=allocate([73,83,79,0] /* ISO\00 */, "i8", ALLOC_STATIC);
__str215=allocate([67,65,77,77,65,78,85,70,0] /* CAMMANUF\00 */, "i8", ALLOC_STATIC);
__str216=allocate([67,65,77,77,79,68,69,76,0] /* CAMMODEL\00 */, "i8", ALLOC_STATIC);
__str217=allocate([87,66,95,68,69,83,67,0] /* WB_DESC\00 */, "i8", ALLOC_STATIC);
__str218=allocate([84,73,77,69,0] /* TIME\00 */, "i8", ALLOC_STATIC);
__str219=allocate([69,88,80,84,73,77,69,0] /* EXPTIME\00 */, "i8", ALLOC_STATIC);
__str220=allocate([65,80,69,82,84,85,82,69,0] /* APERTURE\00 */, "i8", ALLOC_STATIC);
__str221=allocate([70,76,69,78,71,84,72,0] /* FLENGTH\00 */, "i8", ALLOC_STATIC);
_is_foveon=allocate(1, "i32", ALLOC_STATIC);
_adobe_coeff_table=allocate([0, 0, 0, 0, 0, 0, 0, 0, 11438, 0, -3762, 0, -1115, 0, -2409, 0, 9914, 0, 2497, 0, -1227, 0, 2295, 0, 5300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21392, 0, -5653, 0, -3353, 0, 2406, 0, 8010, 0, -415, 0, 7166, 0, 1427, 0, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24542, 0, -10860, 0, -3401, 0, -1490, 0, 11370, 0, -297, 0, 2858, 0, -605, 0, 3225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20482, 0, -7172, 0, -3125, 0, -1033, 0, 10410, 0, -285, 0, 2542, 0, 226, 0, 3136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9805, 0, -2689, 0, -1312, 0, -5803, 0, 13064, 0, 3068, 0, -2438, 0, 3075, 0, 8775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4000, 0, 6188, 0, -1341, 0, -890, 0, -7168, 0, 14489, 0, 2937, 0, -2640, 0, 3228, 0, 8483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15600, 0, 4716, 0, 603, 0, -830, 0, -7798, 0, 15474, 0, 2480, 0, -1496, 0, 1937, 0, 6651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3692, 0, 6347, 0, -479, 0, -972, 0, -8297, 0, 15954, 0, 2480, 0, -1968, 0, 2131, 0, 7649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13584, 0, 6844, 0, -996, 0, -856, 0, -3876, 0, 11761, 0, 2396, 0, -593, 0, 1772, 0, 6198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4000, 0, 8197, 0, -2000, 0, -1118, 0, -6714, 0, 14335, 0, 2592, 0, -2536, 0, 3178, 0, 8266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14155, 0, -5065, 0, -1382, 0, -6550, 0, 14633, 0, 2039, 0, -1623, 0, 1824, 0, 6561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 6599, 0, -537, 0, -891, 0, -8071, 0, 15783, 0, 2424, 0, -1983, 0, 2234, 0, 7462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6257, 0, -303, 0, -1000, 0, -7880, 0, 15621, 0, 2396, 0, -1714, 0, 1904, 0, 7046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16224, 0, 6071, 0, -747, 0, -856, 0, -7653, 0, 15365, 0, 2441, 0, -2025, 0, 2553, 0, 7315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15763, 0, 4920, 0, 616, 0, -593, 0, -6493, 0, 13964, 0, 2784, 0, -1774, 0, 3178, 0, 7005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12279, 0, 6719, 0, -994, 0, -925, 0, -4408, 0, 12426, 0, 2211, 0, -887, 0, 2129, 0, 6051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4000, 0, 8197, 0, -2000, 0, -1118, 0, -6714, 0, 14335, 0, 2592, 0, -2536, 0, 3178, 0, 8266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 6018, 0, -617, 0, -965, 0, -8645, 0, 15881, 0, 2975, 0, -1530, 0, 1719, 0, 7642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3726, 0, 7054, 0, -1501, 0, -990, 0, -8156, 0, 15544, 0, 2812, 0, -1278, 0, 1414, 0, 7796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14605, 0, 5784, 0, -262, 0, -821, 0, -7539, 0, 15064, 0, 2672, 0, -1982, 0, 2681, 0, 7427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13433, 0, 4763, 0, 712, 0, -646, 0, -6821, 0, 14399, 0, 2640, 0, -1921, 0, 3276, 0, 6561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15831, 0, 6941, 0, -1164, 0, -857, 0, -3825, 0, 11597, 0, 2534, 0, -416, 0, 1540, 0, 6039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13584, 0, 6461, 0, -907, 0, -882, 0, -4300, 0, 12184, 0, 2378, 0, -819, 0, 1944, 0, 5931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3651, 0, 6771, 0, -1139, 0, -977, 0, -7818, 0, 15123, 0, 2928, 0, -1244, 0, 1437, 0, 7533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13584, 0, 6444, 0, -904, 0, -893, 0, -4563, 0, 12308, 0, 2535, 0, -903, 0, 2016, 0, 6728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15280, 0, 5859, 0, -211, 0, -930, 0, -8255, 0, 16017, 0, 2353, 0, -1732, 0, 1887, 0, 7448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3712, 0, 6517, 0, -602, 0, -867, 0, -8180, 0, 15926, 0, 2378, 0, -1618, 0, 1771, 0, 7633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15280, 0, 6014, 0, -220, 0, -795, 0, -4109, 0, 12014, 0, 2361, 0, -561, 0, 1824, 0, 5787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15280, 0, 6291, 0, -540, 0, -976, 0, -8350, 0, 16145, 0, 2311, 0, -1714, 0, 1858, 0, 7326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3712, 0, 6240, 0, -466, 0, -822, 0, -8180, 0, 15825, 0, 2500, 0, -1801, 0, 1938, 0, 8042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3712, 0, 6264, 0, -582, 0, -724, 0, -8312, 0, 15948, 0, 2504, 0, -1744, 0, 1919, 0, 8664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3616, 0, 4374, 0, 3631, 0, -1743, 0, -7520, 0, 15212, 0, 2472, 0, -2892, 0, 3632, 0, 8161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3616, 0, 6806, 0, -179, 0, -1020, 0, -8097, 0, 16415, 0, 1687, 0, -3267, 0, 4236, 0, 7690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8197, 0, -2000, 0, -1118, 0, -6714, 0, 14335, 0, 2592, 0, -2536, 0, 3178, 0, 8266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5300, 0, 9846, 0, 1776, 0, 3436, 0, 684, 0, 3939, 0, -5540, 0, 9879, 0, 6200, 0, -1404, 0, 11175, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4801, 0, 9475, 0, 1952, 0, 2926, 0, 1611, 0, 4094, 0, -5259, 0, 10164, 0, 5947, 0, -1554, 0, 10883, 0, 547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11093, 0, -3906, 0, -1028, 0, -5047, 0, 12492, 0, 2879, 0, -1003, 0, 1750, 0, 5561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12177, 0, -4817, 0, -1069, 0, -1612, 0, 9864, 0, 2049, 0, -98, 0, 850, 0, 4471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13244, 0, -5501, 0, -1248, 0, -1508, 0, 9858, 0, 1935, 0, -270, 0, 1083, 0, 4366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4778, 0, 9467, 0, 2172, 0, 4743, 0, -1141, 0, 4344, 0, -5146, 0, 9908, 0, 6077, 0, -1566, 0, 11051, 0, 557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9087, 0, -2693, 0, -1049, 0, -6715, 0, 14382, 0, 2537, 0, -2291, 0, 2819, 0, 7790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9212, 0, -2781, 0, -1073, 0, -6573, 0, 14189, 0, 2605, 0, -2300, 0, 2844, 0, 7664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9757, 0, -2872, 0, -933, 0, -5972, 0, 13861, 0, 2301, 0, -1622, 0, 2328, 0, 7212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9877, 0, -3775, 0, -871, 0, -7613, 0, 14807, 0, 3072, 0, -1448, 0, 1305, 0, 7485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7368, 0, -2141, 0, -598, 0, -5621, 0, 13254, 0, 2625, 0, -1418, 0, 1696, 0, 5743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10062, 0, -3522, 0, -999, 0, -7643, 0, 15117, 0, 2730, 0, -765, 0, 817, 0, 7323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, -4155, 0, 9818, 0, 1529, 0, 3939, 0, -25, 0, 4522, 0, -5521, 0, 9870, 0, 6610, 0, -2238, 0, 10873, 0, 1342, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4963, 0, 9896, 0, 2235, 0, 4642, 0, -987, 0, 4294, 0, -5162, 0, 10011, 0, 5859, 0, -1770, 0, 11230, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10566, 0, -3652, 0, -1129, 0, -6552, 0, 14662, 0, 2006, 0, -2197, 0, 2581, 0, 7670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8510, 0, -2487, 0, -940, 0, -6869, 0, 14231, 0, 2900, 0, -2318, 0, 2829, 0, 9013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8163, 0, -2333, 0, -955, 0, -6682, 0, 14174, 0, 2751, 0, -2077, 0, 2597, 0, 8041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8882, 0, -2571, 0, -863, 0, -6348, 0, 14234, 0, 2288, 0, -1516, 0, 2172, 0, 6569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8795, 0, -2482, 0, -797, 0, -7804, 0, 15403, 0, 2573, 0, -1422, 0, 1996, 0, 7082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9976, 0, -3810, 0, -832, 0, -7115, 0, 14463, 0, 2906, 0, -901, 0, 989, 0, 7889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12374, 0, -5016, 0, -1049, 0, -1677, 0, 9902, 0, 2078, 0, -83, 0, 852, 0, 4683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13440, 0, -5896, 0, -1279, 0, -1236, 0, 9598, 0, 1931, 0, -180, 0, 1001, 0, 4651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7968, 0, -2565, 0, -636, 0, -2873, 0, 10697, 0, 2513, 0, 180, 0, 667, 0, 4211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12513, 0, -4407, 0, -1242, 0, -2680, 0, 10276, 0, 2405, 0, -878, 0, 2215, 0, 4734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15591, 0, -6402, 0, -1592, 0, -5365, 0, 13198, 0, 2168, 0, -1300, 0, 1824, 0, 5075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15265, 0, -6193, 0, -1558, 0, -4125, 0, 12116, 0, 2010, 0, -888, 0, 1639, 0, 5220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14201, 0, -5308, 0, -1757, 0, -6087, 0, 14472, 0, 1617, 0, -2191, 0, 3105, 0, 5348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13124, 0, -5329, 0, -1390, 0, -3602, 0, 11658, 0, 1944, 0, -1612, 0, 2863, 0, 4885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9427, 0, -3036, 0, -959, 0, -2581, 0, 10671, 0, 1911, 0, -1039, 0, 1982, 0, 4430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14573, 0, -5482, 0, -1546, 0, -1266, 0, 9799, 0, 1468, 0, -1040, 0, 1912, 0, 3810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14062, 0, -5199, 0, -1446, 0, -4712, 0, 12470, 0, 2243, 0, -1286, 0, 2028, 0, 4836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6578, 0, -259, 0, -502, 0, -5974, 0, 13030, 0, 3309, 0, -308, 0, 1058, 0, 4970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14134, 0, -5576, 0, -1527, 0, -1991, 0, 10719, 0, 1273, 0, -1158, 0, 1929, 0, 3581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11634, 0, -3924, 0, -1128, 0, -4968, 0, 12954, 0, 2015, 0, -1588, 0, 2648, 0, 7206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10819, 0, -3873, 0, -1099, 0, -4903, 0, 13730, 0, 1175, 0, -1755, 0, 3751, 0, 4632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 4095, 0, 9790, 0, -3338, 0, -603, 0, -2321, 0, 10222, 0, 2099, 0, -344, 0, 1273, 0, 4799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3390, 0, 480, 0, -500, 0, -800, 0, 3610, 0, 340, 0, -550, 0, 2336, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3390, 0, 480, 0, -500, 0, -800, 0, 3610, 0, 340, 0, -550, 0, 2336, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20183, 0, -4295, 0, -423, 0, -3940, 0, 15330, 0, 3985, 0, -280, 0, 4870, 0, 9800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3870, 0, 7777, 0, 1285, 0, -1053, 0, -9280, 0, 16543, 0, 2916, 0, -3677, 0, 5679, 0, 7060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6827, 0, -1878, 0, -732, 0, -8429, 0, 16012, 0, 2564, 0, -704, 0, 592, 0, 7145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11044, 0, -3888, 0, -1120, 0, -7248, 0, 15168, 0, 2208, 0, -1531, 0, 2277, 0, 8069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9183, 0, -2526, 0, -1078, 0, -7461, 0, 15071, 0, 2574, 0, -2022, 0, 2440, 0, 8639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11044, 0, -3888, 0, -1120, 0, -7248, 0, 15168, 0, 2208, 0, -1531, 0, 2277, 0, 8069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10004, 0, -3219, 0, -1201, 0, -7036, 0, 15047, 0, 2107, 0, -1863, 0, 2565, 0, 7736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 514, 0, 0, 0, 11521, 0, -4355, 0, -1065, 0, -6524, 0, 13767, 0, 3058, 0, -1466, 0, 1984, 0, 6045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 16383, 0, 11401, 0, -4498, 0, -1312, 0, -5088, 0, 12751, 0, 2613, 0, -838, 0, 1568, 0, 5941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10004, 0, -3219, 0, -1201, 0, -7036, 0, 15047, 0, 2107, 0, -1863, 0, 2565, 0, 7736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 12492, 0, -4690, 0, -1402, 0, -7033, 0, 15423, 0, 1647, 0, -1507, 0, 2111, 0, 7697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11807, 0, -4612, 0, -1294, 0, -8927, 0, 16968, 0, 1988, 0, -2120, 0, 2741, 0, 8006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12300, 0, -5110, 0, -1304, 0, -9117, 0, 17143, 0, 1998, 0, -1947, 0, 2448, 0, 8100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8754, 0, -2732, 0, -1019, 0, -7204, 0, 15069, 0, 2276, 0, -1702, 0, 2334, 0, 6982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11940, 0, -4431, 0, -1255, 0, -6766, 0, 14428, 0, 2542, 0, -993, 0, 1165, 0, 7421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11940, 0, -4431, 0, -1255, 0, -6766, 0, 14428, 0, 2542, 0, -993, 0, 1165, 0, 7421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9636, 0, -2804, 0, -988, 0, -7442, 0, 15040, 0, 2589, 0, -1803, 0, 2311, 0, 8621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9636, 0, -2804, 0, -988, 0, -7442, 0, 15040, 0, 2589, 0, -1803, 0, 2311, 0, 8621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12628, 0, -4887, 0, -1401, 0, -6861, 0, 14996, 0, 1962, 0, -2198, 0, 2782, 0, 7091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10190, 0, -3506, 0, -1312, 0, -7153, 0, 15051, 0, 2238, 0, -2003, 0, 2399, 0, 7505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10491, 0, -3423, 0, -1145, 0, -7385, 0, 15027, 0, 2538, 0, -1809, 0, 2275, 0, 8692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10491, 0, -3423, 0, -1145, 0, -7385, 0, 15027, 0, 2538, 0, -1809, 0, 2275, 0, 8692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12343, 0, -4515, 0, -1285, 0, -7165, 0, 14899, 0, 2435, 0, -1895, 0, 2496, 0, 8800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12343, 0, -4515, 0, -1285, 0, -7165, 0, 14899, 0, 2435, 0, -1895, 0, 2496, 0, 8800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21461, 0, -10807, 0, -1441, 0, -2332, 0, 10599, 0, 1999, 0, 289, 0, 875, 0, 7703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12300, 0, -5110, 0, -1304, 0, -9117, 0, 17143, 0, 1998, 0, -1947, 0, 2448, 0, 8100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3944, 0, 12440, 0, -3954, 0, -1183, 0, -1123, 0, 9674, 0, 1708, 0, -83, 0, 1614, 0, 4086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13690, 0, -5358, 0, -1474, 0, -3369, 0, 11600, 0, 1998, 0, -132, 0, 1554, 0, 4395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13690, 0, -5358, 0, -1474, 0, -3369, 0, 11600, 0, 1998, 0, -132, 0, 1554, 0, 4395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13690, 0, -5358, 0, -1474, 0, -3369, 0, 11600, 0, 1998, 0, -132, 0, 1554, 0, 4395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12161, 0, -4457, 0, -1069, 0, -5034, 0, 12874, 0, 2400, 0, -795, 0, 1724, 0, 6904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13509, 0, -6199, 0, -1254, 0, -4430, 0, 12733, 0, 1865, 0, -331, 0, 1441, 0, 5022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7025, 0, -1415, 0, -704, 0, -5188, 0, 13765, 0, 1424, 0, -1248, 0, 2742, 0, 6038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13891, 0, -6055, 0, -803, 0, -465, 0, 9919, 0, 642, 0, 2121, 0, 82, 0, 1291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 17523, 0, -4827, 0, -2510, 0, 756, 0, 8546, 0, -137, 0, 6113, 0, 1649, 0, 2250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 20620, 0, -7572, 0, -2801, 0, -103, 0, 10073, 0, -396, 0, 3551, 0, -233, 0, 2220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10868, 0, -1852, 0, -644, 0, -1537, 0, 11083, 0, 484, 0, 2343, 0, 628, 0, 2216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10592, 0, -2206, 0, -967, 0, -1944, 0, 11685, 0, 230, 0, 2206, 0, 670, 0, 1273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10592, 0, -2206, 0, -967, 0, -1944, 0, 11685, 0, 230, 0, 2206, 0, 670, 0, 1273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9898, 0, -2700, 0, -940, 0, -2478, 0, 12219, 0, 206, 0, 1985, 0, 634, 0, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 24542, 0, -10860, 0, -3401, 0, -1490, 0, 11370, 0, -297, 0, 2858, 0, -605, 0, 3225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 20482, 0, -7172, 0, -3125, 0, -1033, 0, 10410, 0, -285, 0, 2542, 0, 226, 0, 3136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 23617, 0, -10175, 0, -3149, 0, -2054, 0, 11749, 0, -272, 0, 2586, 0, -489, 0, 3453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 185, 0, 0, 0, 13095, 0, -6231, 0, 154, 0, 12221, 0, -21, 0, -2137, 0, 895, 0, 4602, 0, 2258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 18244, 0, -6351, 0, -2739, 0, -791, 0, 11193, 0, -521, 0, 3711, 0, -129, 0, 2802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11775, 0, -5884, 0, 950, 0, 9556, 0, 1846, 0, -1286, 0, -1019, 0, 6221, 0, 2728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16623, 0, -6309, 0, -1411, 0, -4344, 0, 13923, 0, 323, 0, 2285, 0, 274, 0, 2926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5494, 0, 2393, 0, -232, 0, -6427, 0, 13850, 0, 2846, 0, -1876, 0, 3997, 0, 5445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5494, 0, 2393, 0, -232, 0, -6427, 0, 13850, 0, 2846, 0, -1876, 0, 3997, 0, 5445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7791, 0, 3128, 0, -776, 0, -8588, 0, 16458, 0, 2039, 0, -2455, 0, 4006, 0, 6198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16414, 0, -6060, 0, -1470, 0, -3555, 0, 13037, 0, 473, 0, 2545, 0, 122, 0, 4948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21179, 0, -8316, 0, -2918, 0, -915, 0, 11019, 0, -165, 0, 3477, 0, -180, 0, 4210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9658, 0, -3314, 0, -823, 0, -5163, 0, 12695, 0, 2768, 0, -1342, 0, 1843, 0, 6044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3964, 0, 10511, 0, -3836, 0, -1102, 0, -6946, 0, 14587, 0, 2558, 0, -1481, 0, 1792, 0, 6246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 12805, 0, -4662, 0, -1376, 0, -7480, 0, 15267, 0, 2360, 0, -1626, 0, 2194, 0, 7904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11313, 0, -3559, 0, -1101, 0, -3893, 0, 11891, 0, 2257, 0, -1214, 0, 2398, 0, 4908, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12729, 0, -4717, 0, -1188, 0, -1367, 0, 9187, 0, 2582, 0, 274, 0, 860, 0, 4411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4077, 0, 11749, 0, -4048, 0, -1309, 0, -1867, 0, 10572, 0, 1489, 0, -138, 0, 1449, 0, 4522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3825, 0, 11265, 0, -4286, 0, -992, 0, -4694, 0, 12343, 0, 2647, 0, -1090, 0, 1523, 0, 5447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3952, 0, 2189, 0, 449, 0, -6701, 0, 14585, 0, 2275, 0, -4536, 0, 7349, 0, 6536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3952, 0, 2189, 0, 449, 0, -6701, 0, 14585, 0, 2275, 0, -4536, 0, 7349, 0, 6536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8236, 0, 1746, 0, -1314, 0, -8251, 0, 15953, 0, 2428, 0, -3673, 0, 5786, 0, 5771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7914, 0, 1414, 0, -1190, 0, -8777, 0, 16582, 0, 2280, 0, -2811, 0, 4605, 0, 5562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7914, 0, 1414, 0, -1190, 0, -8777, 0, 16582, 0, 2280, 0, -2811, 0, 4605, 0, 5562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8236, 0, 1746, 0, -1314, 0, -8251, 0, 15953, 0, 2428, 0, -3673, 0, 5786, 0, 5771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7645, 0, 2579, 0, -1363, 0, -8689, 0, 16717, 0, 2015, 0, -3712, 0, 5941, 0, 5961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 16695, 0, -3761, 0, -2151, 0, 155, 0, 9682, 0, 163, 0, 3433, 0, 951, 0, 4904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3965, 0, 8983, 0, -2942, 0, -963, 0, -6556, 0, 14476, 0, 2237, 0, -2426, 0, 2887, 0, 8014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3965, 0, 11368, 0, -3894, 0, -1242, 0, -6521, 0, 14358, 0, 2339, 0, -2475, 0, 3056, 0, 7285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3965, 0, 9144, 0, -2777, 0, -998, 0, -6676, 0, 14556, 0, 2281, 0, -2470, 0, 3019, 0, 7744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3979, 0, 9274, 0, -2547, 0, -1167, 0, -8220, 0, 16323, 0, 1943, 0, -2273, 0, 2720, 0, 8340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8560, 0, -2487, 0, -986, 0, -8112, 0, 15535, 0, 2771, 0, -1209, 0, 1324, 0, 7743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3983, 0, 9097, 0, -2726, 0, -1053, 0, -8073, 0, 15506, 0, 2762, 0, -966, 0, 981, 0, 7763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11280, 0, -3564, 0, -1370, 0, -4655, 0, 12374, 0, 2282, 0, -1423, 0, 2168, 0, 5396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4091, 0, 10284, 0, -3283, 0, -1086, 0, -7957, 0, 15762, 0, 2316, 0, -829, 0, 882, 0, 6644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4091, 0, 10239, 0, -3104, 0, -1099, 0, -8037, 0, 15727, 0, 2451, 0, -927, 0, 925, 0, 6871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8898, 0, -989, 0, -1033, 0, -3292, 0, 11619, 0, 1674, 0, -661, 0, 3178, 0, 5216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5902, 0, -933, 0, -782, 0, -8983, 0, 16719, 0, 2354, 0, -1402, 0, 1455, 0, 6464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7577, 0, -2166, 0, -926, 0, -7454, 0, 15592, 0, 1934, 0, -2377, 0, 2808, 0, 8606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7702, 0, -2245, 0, -975, 0, -9114, 0, 17242, 0, 1875, 0, -2679, 0, 3055, 0, 8521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16772, 0, -4726, 0, -2141, 0, -7611, 0, 15713, 0, 1972, 0, -2846, 0, 3494, 0, 9521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4028, 0, 8367, 0, -2248, 0, -763, 0, -8758, 0, 16447, 0, 2422, 0, -1527, 0, 1550, 0, 8053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5710, 0, -901, 0, -615, 0, -8594, 0, 16617, 0, 2024, 0, -2975, 0, 4120, 0, 6830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10231, 0, -2769, 0, -1255, 0, -8301, 0, 15900, 0, 2552, 0, -797, 0, 680, 0, 7148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8736, 0, -2458, 0, -935, 0, -9075, 0, 16894, 0, 2251, 0, -1354, 0, 1242, 0, 8263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7911, 0, -2167, 0, -813, 0, -5327, 0, 13150, 0, 2408, 0, -1288, 0, 2483, 0, 7968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9030, 0, -1992, 0, -715, 0, -8465, 0, 16302, 0, 2255, 0, -2689, 0, 3217, 0, 8069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7171, 0, -1986, 0, -648, 0, -8085, 0, 15555, 0, 2718, 0, -2170, 0, 2512, 0, 7457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8828, 0, -2406, 0, -694, 0, -4874, 0, 12603, 0, 2541, 0, -660, 0, 1509, 0, 7587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8139, 0, -2171, 0, -663, 0, -8747, 0, 16541, 0, 2295, 0, -1925, 0, 2008, 0, 8093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8819, 0, -2543, 0, -911, 0, -9025, 0, 16928, 0, 2151, 0, -1329, 0, 1213, 0, 8449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6992, 0, -1668, 0, -806, 0, -8138, 0, 15748, 0, 2543, 0, -874, 0, 850, 0, 7897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3840, 0, 7309, 0, -1403, 0, -519, 0, -8474, 0, 16008, 0, 2622, 0, -2433, 0, 2826, 0, 8064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15846, 0, 8198, 0, -2239, 0, -724, 0, -4871, 0, 12389, 0, 2798, 0, -1043, 0, 2050, 0, 7181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7732, 0, -2422, 0, -789, 0, -8238, 0, 15884, 0, 2498, 0, -859, 0, 783, 0, 7330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8736, 0, -2458, 0, -935, 0, -9075, 0, 16894, 0, 2251, 0, -1354, 0, 1242, 0, 8263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8198, 0, -2239, 0, -724, 0, -4871, 0, 12389, 0, 2798, 0, -1043, 0, 2050, 0, 7181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8139, 0, -2171, 0, -663, 0, -8747, 0, 16541, 0, 2295, 0, -1925, 0, 2008, 0, 8093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7732, 0, -2422, 0, -789, 0, -8238, 0, 15884, 0, 2498, 0, -859, 0, 783, 0, 7330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8629, 0, -2410, 0, -883, 0, -9055, 0, 16940, 0, 2171, 0, -1490, 0, 1363, 0, 8520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3840, 0, 7309, 0, -1403, 0, -519, 0, -8474, 0, 16008, 0, 2622, 0, -2434, 0, 2826, 0, 8064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, -3746, 0, 10611, 0, 1665, 0, 9621, 0, -1734, 0, 2114, 0, -2389, 0, 7082, 0, 3064, 0, 3406, 0, 6116, 0, -244, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5547, 0, 11762, 0, 2189, 0, 5814, 0, -558, 0, 3342, 0, -4924, 0, 9840, 0, 5949, 0, 688, 0, 9083, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13142, 0, -4152, 0, -1596, 0, -4655, 0, 12374, 0, 2282, 0, -1769, 0, 2696, 0, 6711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5547, 0, 11762, 0, 2189, 0, 5814, 0, -558, 0, 3342, 0, -4924, 0, 9840, 0, 5949, 0, 688, 0, 9083, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9846, 0, -2085, 0, -1019, 0, -3278, 0, 11109, 0, 2170, 0, -774, 0, 2134, 0, 5745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11280, 0, -3564, 0, -1370, 0, -4655, 0, 12374, 0, 2282, 0, -1423, 0, 2168, 0, 5396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5547, 0, 11762, 0, 2189, 0, 5814, 0, -558, 0, 3342, 0, -4924, 0, 9840, 0, 5949, 0, 688, 0, 9083, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5547, 0, 11762, 0, 2189, 0, 5814, 0, -558, 0, 3342, 0, -4924, 0, 9840, 0, 5949, 0, 688, 0, 9083, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9349, 0, -2987, 0, -1001, 0, -7919, 0, 15766, 0, 2266, 0, -2098, 0, 2680, 0, 6839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5368, 0, 11478, 0, 2368, 0, 5537, 0, -113, 0, 3148, 0, -4969, 0, 10021, 0, 5782, 0, 778, 0, 9028, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7842, 0, -2320, 0, -992, 0, -8154, 0, 15718, 0, 2599, 0, -1098, 0, 1342, 0, 7560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8489, 0, -2583, 0, -1036, 0, -8051, 0, 15583, 0, 2643, 0, -1307, 0, 1407, 0, 7354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7971, 0, -2314, 0, -913, 0, -8451, 0, 15762, 0, 2894, 0, -1442, 0, 1520, 0, 7610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9698, 0, -3367, 0, -914, 0, -4706, 0, 12584, 0, 2368, 0, -837, 0, 968, 0, 5801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11432, 0, -3679, 0, -1111, 0, -3169, 0, 11239, 0, 2202, 0, -791, 0, 1380, 0, 4455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11053, 0, -4269, 0, -1024, 0, -1976, 0, 10182, 0, 2088, 0, -526, 0, 1263, 0, 4469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8994, 0, -2667, 0, -865, 0, -4594, 0, 12324, 0, 2552, 0, -699, 0, 1786, 0, 6260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10508, 0, -3124, 0, -1273, 0, -6079, 0, 14294, 0, 1901, 0, -1653, 0, 2306, 0, 6237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10445, 0, -3362, 0, -1307, 0, -7662, 0, 15690, 0, 2058, 0, -1135, 0, 1176, 0, 7602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10252, 0, -3531, 0, -1095, 0, -7114, 0, 14850, 0, 2436, 0, -1451, 0, 1723, 0, 6365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10793, 0, -3791, 0, -1146, 0, -7498, 0, 15177, 0, 2488, 0, -1390, 0, 1577, 0, 7321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8606, 0, -2509, 0, -1014, 0, -8238, 0, 15714, 0, 2703, 0, -942, 0, 979, 0, 7760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4092, 0, 12745, 0, -4500, 0, -1416, 0, -6062, 0, 14542, 0, 1580, 0, -1934, 0, 2256, 0, 6603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11846, 0, -4767, 0, -945, 0, -7027, 0, 15878, 0, 1089, 0, -2699, 0, 4122, 0, 8311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4092, 0, 13173, 0, -4732, 0, -1499, 0, -5807, 0, 14036, 0, 1895, 0, -2045, 0, 2452, 0, 7142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7828, 0, -1761, 0, -348, 0, -5788, 0, 14071, 0, 1830, 0, -2853, 0, 4518, 0, 6557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8961, 0, -2473, 0, -1084, 0, -7979, 0, 15990, 0, 2067, 0, -2319, 0, 3035, 0, 8249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4028, 0, 8144, 0, -1861, 0, -1111, 0, -7763, 0, 15894, 0, 1929, 0, -1865, 0, 2542, 0, 7607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3993, 0, 9487, 0, -2875, 0, -1115, 0, -7533, 0, 15606, 0, 2010, 0, -1618, 0, 2100, 0, 7389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6169, 0, -1483, 0, -21, 0, -7107, 0, 14761, 0, 2536, 0, -2904, 0, 3580, 0, 8568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3946, 0, 8856, 0, -2582, 0, -1026, 0, -7761, 0, 15766, 0, 2082, 0, -2009, 0, 2575, 0, 7469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4055, 0, 8746, 0, -2425, 0, -1095, 0, -7594, 0, 15612, 0, 2073, 0, -1780, 0, 2309, 0, 7416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4050, 0, 8745, 0, -2425, 0, -1095, 0, -7594, 0, 15613, 0, 2073, 0, -1780, 0, 2309, 0, 7416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8136, 0, -1968, 0, -299, 0, -5481, 0, 13742, 0, 1871, 0, -2556, 0, 4205, 0, 6630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3946, 0, 8785, 0, -2529, 0, -1033, 0, -7639, 0, 15624, 0, 2112, 0, -1783, 0, 2300, 0, 7817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4050, 0, 8344, 0, -2322, 0, -1020, 0, -7596, 0, 15635, 0, 2048, 0, -1748, 0, 2269, 0, 7287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11200, 0, -3783, 0, -1325, 0, -4576, 0, 12593, 0, 2206, 0, -695, 0, 1742, 0, 7504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4015, 0, 8453, 0, -2198, 0, -1092, 0, -7609, 0, 15681, 0, 2008, 0, -1725, 0, 2337, 0, 7824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4015, 0, 8453, 0, -2198, 0, -1092, 0, -7609, 0, 15681, 0, 2008, 0, -1725, 0, 2337, 0, 7824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4093, 0, 8343, 0, -2050, 0, -1021, 0, -7715, 0, 15705, 0, 2103, 0, -1831, 0, 2380, 0, 8235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4093, 0, 8343, 0, -2050, 0, -1021, 0, -7715, 0, 15705, 0, 2103, 0, -1831, 0, 2380, 0, 8235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7575, 0, -2159, 0, -571, 0, -3722, 0, 11341, 0, 2725, 0, -1434, 0, 2819, 0, 6271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11409, 0, -3872, 0, -1393, 0, -4572, 0, 12757, 0, 2003, 0, -709, 0, 1810, 0, 7415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11408, 0, -4289, 0, -1215, 0, -4286, 0, 12385, 0, 2118, 0, -387, 0, 1467, 0, 7787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15030, 0, -5552, 0, -1806, 0, -3987, 0, 12387, 0, 1767, 0, -592, 0, 1670, 0, 7023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7575, 0, -2159, 0, -571, 0, -3722, 0, 11341, 0, 2725, 0, -1434, 0, 2819, 0, 6271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7575, 0, -2159, 0, -571, 0, -3722, 0, 11341, 0, 2725, 0, -1434, 0, 2819, 0, 6271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12078, 0, -4836, 0, -1069, 0, -6671, 0, 14306, 0, 2578, 0, -786, 0, 939, 0, 7418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11766, 0, -4445, 0, -1067, 0, -6901, 0, 14421, 0, 2707, 0, -1029, 0, 1217, 0, 7572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 9493, 0, -3415, 0, -666, 0, -5211, 0, 12334, 0, 3260, 0, -1548, 0, 2262, 0, 6482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4094, 0, 10593, 0, -3607, 0, -1010, 0, -5881, 0, 13127, 0, 3084, 0, -1200, 0, 1805, 0, 6721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4094, 0, 11597, 0, -4006, 0, -1049, 0, -5432, 0, 12799, 0, 2957, 0, -1029, 0, 1750, 0, 6516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4089, 0, 10915, 0, -3677, 0, -982, 0, -5587, 0, 12986, 0, 2911, 0, -1168, 0, 1968, 0, 6223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11522, 0, -4044, 0, -1146, 0, -4736, 0, 12172, 0, 2904, 0, -988, 0, 1829, 0, 6039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10901, 0, -4095, 0, -1074, 0, -1141, 0, 9208, 0, 2293, 0, -62, 0, 1417, 0, 5158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10504, 0, -2438, 0, -1189, 0, -8603, 0, 16207, 0, 2531, 0, -1022, 0, 863, 0, 12242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10829, 0, -2838, 0, -1115, 0, -8339, 0, 15817, 0, 2696, 0, -837, 0, 680, 0, 11939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10504, 0, -2438, 0, -1189, 0, -8603, 0, 16207, 0, 2531, 0, -1022, 0, 863, 0, 12242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10371, 0, -2333, 0, -1206, 0, -8688, 0, 16231, 0, 2602, 0, -1230, 0, 1116, 0, 11282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9651, 0, -2059, 0, -1189, 0, -8881, 0, 16512, 0, 2487, 0, -1460, 0, 1345, 0, 10687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9566, 0, -2863, 0, -803, 0, -7170, 0, 15172, 0, 2112, 0, -818, 0, 803, 0, 9705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11095, 0, -3157, 0, -1324, 0, -8377, 0, 15834, 0, 2720, 0, -1108, 0, 947, 0, 11688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9427, 0, -2714, 0, -868, 0, -7493, 0, 16092, 0, 1373, 0, -2199, 0, 3264, 0, 7180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9186, 0, -2678, 0, -907, 0, -8693, 0, 16517, 0, 2260, 0, -1129, 0, 1094, 0, 8524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11057, 0, -3604, 0, -1155, 0, -5152, 0, 13046, 0, 2329, 0, -282, 0, 375, 0, 8104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11057, 0, -3604, 0, -1155, 0, -5152, 0, 13046, 0, 2329, 0, -282, 0, 375, 0, 8104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8843, 0, -2837, 0, -625, 0, -5025, 0, 12644, 0, 2668, 0, -411, 0, 1234, 0, 7410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9895, 0, -3077, 0, -850, 0, -5304, 0, 13035, 0, 2521, 0, -883, 0, 1768, 0, 6936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8713, 0, -2833, 0, -743, 0, -4342, 0, 11900, 0, 2772, 0, -722, 0, 1543, 0, 6247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9142, 0, -2947, 0, -678, 0, -8648, 0, 16967, 0, 1663, 0, -2224, 0, 2898, 0, 8615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 0, 10646, 0, -3593, 0, -1158, 0, -3329, 0, 11699, 0, 1831, 0, -667, 0, 2874, 0, 6287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3967, 0, 8986, 0, -2755, 0, -802, 0, -6341, 0, 13575, 0, 3077, 0, -1476, 0, 2144, 0, 6379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9932, 0, -3060, 0, -935, 0, -5809, 0, 13331, 0, 2753, 0, -1267, 0, 2155, 0, 5575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3990, 0, 10109, 0, -3488, 0, -993, 0, -5412, 0, 12812, 0, 2916, 0, -1305, 0, 2140, 0, 5543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3988, 0, 10976, 0, -4029, 0, -1141, 0, -7918, 0, 15491, 0, 2600, 0, -1670, 0, 2071, 0, 8246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 9938, 0, -2780, 0, -890, 0, -4604, 0, 12393, 0, 2480, 0, -1117, 0, 2304, 0, 4620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 13639, 0, -5535, 0, -1371, 0, -1698, 0, 9633, 0, 2430, 0, 316, 0, 1152, 0, 4108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7906, 0, -2709, 0, -594, 0, -6231, 0, 13351, 0, 3220, 0, -1922, 0, 2631, 0, 6537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7906, 0, -2709, 0, -594, 0, -6231, 0, 13351, 0, 3220, 0, -1922, 0, 2631, 0, 6537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3990, 0, 8025, 0, -1942, 0, -1050, 0, -7920, 0, 15904, 0, 2100, 0, -2456, 0, 3005, 0, 7039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3967, 0, 8054, 0, -1885, 0, -1025, 0, -8349, 0, 16367, 0, 2040, 0, -2805, 0, 3542, 0, 7629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3967, 0, 8054, 0, -1885, 0, -1025, 0, -8349, 0, 16367, 0, 2040, 0, -2805, 0, 3542, 0, 7629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11340, 0, -4069, 0, -1275, 0, -7555, 0, 15266, 0, 2448, 0, -2960, 0, 3426, 0, 7685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11340, 0, -4069, 0, -1275, 0, -7555, 0, 15266, 0, 2448, 0, -2960, 0, 3426, 0, 7685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3967, 0, 10704, 0, -4187, 0, -1230, 0, -8314, 0, 15952, 0, 2501, 0, -920, 0, 945, 0, 8927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3967, 0, 10704, 0, -4187, 0, -1230, 0, -8314, 0, 15952, 0, 2501, 0, -920, 0, 945, 0, 8927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8048, 0, -2810, 0, -623, 0, -6450, 0, 13519, 0, 3272, 0, -1700, 0, 2146, 0, 7049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8048, 0, -2810, 0, -623, 0, -6450, 0, 13519, 0, 3272, 0, -1700, 0, 2146, 0, 7049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 8128, 0, -2668, 0, -655, 0, -6134, 0, 13307, 0, 3161, 0, -1782, 0, 2568, 0, 6083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 8128, 0, -2668, 0, -655, 0, -6134, 0, 13307, 0, 3161, 0, -1782, 0, 2568, 0, 6083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 10909, 0, -4295, 0, -948, 0, -1333, 0, 9306, 0, 2399, 0, 22, 0, 1738, 0, 4582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 10909, 0, -4295, 0, -948, 0, -1333, 0, 9306, 0, 2399, 0, 22, 0, 1738, 0, 4582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 16197, 0, -6146, 0, -1761, 0, -2393, 0, 10765, 0, 1869, 0, 366, 0, 2238, 0, 5248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 16197, 0, -6146, 0, -1761, 0, -2393, 0, 10765, 0, 1869, 0, 366, 0, 2238, 0, 5248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 11904, 0, -4541, 0, -1189, 0, -2355, 0, 10899, 0, 1662, 0, -296, 0, 1586, 0, 4289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 11904, 0, -4541, 0, -1189, 0, -2355, 0, 10899, 0, 1662, 0, -296, 0, 1586, 0, 4289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4095, 0, 9082, 0, -2907, 0, -925, 0, -6119, 0, 13377, 0, 3058, 0, -1797, 0, 2641, 0, 5609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10113, 0, -3400, 0, -1114, 0, -4765, 0, 12683, 0, 2317, 0, -377, 0, 1437, 0, 6710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3988, 0, 8199, 0, -2065, 0, -1056, 0, -8124, 0, 16156, 0, 2033, 0, -2458, 0, 3022, 0, 7220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3900, 0, 10113, 0, -3400, 0, -1114, 0, -4765, 0, 12683, 0, 2317, 0, -377, 0, 1437, 0, 6710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 6763, 0, -1919, 0, -863, 0, -3868, 0, 11515, 0, 2684, 0, -1216, 0, 2387, 0, 5879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3986, 0, 7888, 0, -1902, 0, -1011, 0, -8106, 0, 16085, 0, 2099, 0, -2353, 0, 2866, 0, 7330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 7888, 0, -1902, 0, -1011, 0, -8106, 0, 16085, 0, 2099, 0, -2353, 0, 2866, 0, 7330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 4095, 0, 9051, 0, -2468, 0, -1204, 0, -5212, 0, 13276, 0, 2121, 0, -1197, 0, 2510, 0, 6890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3986, 0, 6299, 0, -1466, 0, -532, 0, -6535, 0, 13852, 0, 2969, 0, -2331, 0, 3112, 0, 5984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3989, 0, 7780, 0, -2410, 0, -806, 0, -3913, 0, 11724, 0, 2484, 0, -1018, 0, 2390, 0, 5298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 6763, 0, -1919, 0, -863, 0, -3868, 0, 11515, 0, 2684, 0, -1216, 0, 2387, 0, 5879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1313, 0, 1855, 0, -109, 0, -6715, 0, 15908, 0, 808, 0, -327, 0, 1840, 0, 6020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2905, 0, 732, 0, -237, 0, -8134, 0, 16626, 0, 1476, 0, -3038, 0, 4253, 0, 7517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2905, 0, 732, 0, -237, 0, -8134, 0, 16626, 0, 1476, 0, -3038, 0, 4253, 0, 7517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4516, 0, -245, 0, -37, 0, -7020, 0, 14976, 0, 2173, 0, -3206, 0, 4671, 0, 7087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5053, 0, -24, 0, -117, 0, -5684, 0, 14076, 0, 1702, 0, -2619, 0, 4492, 0, 5849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8035, 0, 435, 0, -962, 0, -6001, 0, 13872, 0, 2320, 0, -1159, 0, 3065, 0, 5434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8035, 0, 435, 0, -962, 0, -6001, 0, 13872, 0, 2320, 0, -1159, 0, 3065, 0, 5434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 704, 0, -1, 0, 21014, 0, -7891, 0, -2613, 0, -3056, 0, 12201, 0, 856, 0, -2203, 0, 5125, 0, 8042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 0, 8898, 0, -2498, 0, -994, 0, -3144, 0, 11328, 0, 2066, 0, -760, 0, 1381, 0, 4576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 6933, 0, -2268, 0, -753, 0, -4921, 0, 13387, 0, 1647, 0, -803, 0, 1641, 0, 6096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10332, 0, -3234, 0, -1168, 0, -6111, 0, 14639, 0, 1520, 0, -1352, 0, 2647, 0, 8331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4095, 0, 12093, 0, -3557, 0, -1155, 0, -1000, 0, 9534, 0, 1733, 0, -22, 0, 1787, 0, 4576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10504, 0, -2438, 0, -1189, 0, -8603, 0, 16207, 0, 2531, 0, -1022, 0, 863, 0, 12242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 11885, 0, -3968, 0, -1473, 0, -4214, 0, 12299, 0, 1916, 0, -835, 0, 1655, 0, 5549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16442, 0, -2956, 0, -2422, 0, -2877, 0, 12128, 0, 750, 0, -1136, 0, 6066, 0, 4559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0, 0, 7924, 0, -1910, 0, -777, 0, -8226, 0, 15459, 0, 2998, 0, -1517, 0, 2199, 0, 6818, 0, -7242, 0, 11401, 0, 3481, 0, 0, 0, 0, 0, 512, 0, 0, 0, 8512, 0, -2641, 0, -694, 0, -8042, 0, 15670, 0, 2526, 0, -1821, 0, 2117, 0, 7414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7511, 0, -2571, 0, -692, 0, -7894, 0, 15088, 0, 3060, 0, -948, 0, 1111, 0, 8128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4075, 0, 9437, 0, -2811, 0, -774, 0, -8405, 0, 16215, 0, 2290, 0, -710, 0, 596, 0, 7181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6038, 0, -1484, 0, -579, 0, -9145, 0, 16746, 0, 2512, 0, -875, 0, 746, 0, 7218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9847, 0, -3091, 0, -928, 0, -8485, 0, 16345, 0, 2225, 0, -715, 0, 595, 0, 7103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9847, 0, -3091, 0, -928, 0, -8485, 0, 16345, 0, 2225, 0, -715, 0, 595, 0, 7103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9847, 0, -3091, 0, -929, 0, -8485, 0, 16346, 0, 2225, 0, -714, 0, 595, 0, 7103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4092, 0, 6038, 0, -1484, 0, -578, 0, -9146, 0, 16746, 0, 2513, 0, -875, 0, 746, 0, 7217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6038, 0, -1484, 0, -579, 0, -9145, 0, 16746, 0, 2512, 0, -875, 0, 746, 0, 7218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6038, 0, -1484, 0, -579, 0, -9145, 0, 16746, 0, 2512, 0, -875, 0, 746, 0, 7218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 4075, 0, 4950, 0, -580, 0, -103, 0, -5228, 0, 12542, 0, 3029, 0, -709, 0, 1435, 0, 7371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 4075, 0, 5932, 0, -1492, 0, -411, 0, -4813, 0, 12285, 0, 2856, 0, -741, 0, 1524, 0, 6739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 4075, 0, 4950, 0, -580, 0, -103, 0, -5228, 0, 12542, 0, 3029, 0, -709, 0, 1435, 0, 7371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 5775, 0, -805, 0, -359, 0, -8574, 0, 16295, 0, 2391, 0, -1943, 0, 2341, 0, 7249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5413, 0, -1162, 0, -365, 0, -5665, 0, 13098, 0, 2866, 0, -608, 0, 1179, 0, 8440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5209, 0, -1072, 0, -397, 0, -8845, 0, 16120, 0, 2919, 0, -1618, 0, 1803, 0, 8654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5991, 0, -1456, 0, -455, 0, -4764, 0, 12135, 0, 2980, 0, -707, 0, 1425, 0, 6701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5991, 0, -1456, 0, -455, 0, -4764, 0, 12135, 0, 2980, 0, -707, 0, 1425, 0, 6701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 6907, 0, -1256, 0, -645, 0, -4940, 0, 12621, 0, 2320, 0, -1710, 0, 2581, 0, 6230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 6807, 0, -1350, 0, -342, 0, -4216, 0, 11649, 0, 2567, 0, -1089, 0, 2001, 0, 6420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 6549, 0, -1550, 0, -436, 0, -4880, 0, 12435, 0, 2753, 0, -854, 0, 1868, 0, 6976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 6549, 0, -1550, 0, -436, 0, -4880, 0, 12435, 0, 2753, 0, -854, 0, 1868, 0, 6976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5491, 0, -1192, 0, -363, 0, -4951, 0, 12342, 0, 2948, 0, -911, 0, 1722, 0, 7192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 6069, 0, -1221, 0, -366, 0, -5221, 0, 12779, 0, 2734, 0, -1024, 0, 2066, 0, 6834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5986, 0, -1618, 0, -415, 0, -4557, 0, 11820, 0, 3120, 0, -681, 0, 1404, 0, 6971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5932, 0, -1492, 0, -411, 0, -4813, 0, 12285, 0, 2856, 0, -741, 0, 1524, 0, 6739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5491, 0, -1192, 0, -363, 0, -4951, 0, 12342, 0, 2948, 0, -911, 0, 1722, 0, 7192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 5491, 0, -1192, 0, -363, 0, -4951, 0, 12342, 0, 2948, 0, -911, 0, 1722, 0, 7192, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
__str222=allocate([65,71,70,65,80,72,79,84,79,32,68,67,45,56,51,51,109,0] /* AGFAPHOTO DC-833m\00 */, "i8", ALLOC_STATIC);
__str223=allocate([65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0] /* Apple QuickTake\00 */, "i8", ALLOC_STATIC);
__str224=allocate([67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0] /* Canon EOS D2000\00 */, "i8", ALLOC_STATIC);
__str225=allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0] /* Canon EOS D6000\00 */, "i8", ALLOC_STATIC);
__str226=allocate([67,97,110,111,110,32,69,79,83,32,68,51,48,0] /* Canon EOS D30\00 */, "i8", ALLOC_STATIC);
__str227=allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,0] /* Canon EOS D60\00 */, "i8", ALLOC_STATIC);
__str228=allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_STATIC);
__str229=allocate([67,97,110,111,110,32,69,79,83,32,53,68,0] /* Canon EOS 5D\00 */, "i8", ALLOC_STATIC);
__str230=allocate([67,97,110,111,110,32,69,79,83,32,55,68,0] /* Canon EOS 7D\00 */, "i8", ALLOC_STATIC);
__str231=allocate([67,97,110,111,110,32,69,79,83,32,49,48,68,0] /* Canon EOS 10D\00 */, "i8", ALLOC_STATIC);
__str232=allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,97,0] /* Canon EOS 20Da\00 */, "i8", ALLOC_STATIC);
__str233=allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,0] /* Canon EOS 20D\00 */, "i8", ALLOC_STATIC);
__str234=allocate([67,97,110,111,110,32,69,79,83,32,51,48,68,0] /* Canon EOS 30D\00 */, "i8", ALLOC_STATIC);
__str235=allocate([67,97,110,111,110,32,69,79,83,32,52,48,68,0] /* Canon EOS 40D\00 */, "i8", ALLOC_STATIC);
__str236=allocate([67,97,110,111,110,32,69,79,83,32,53,48,68,0] /* Canon EOS 50D\00 */, "i8", ALLOC_STATIC);
__str237=allocate([67,97,110,111,110,32,69,79,83,32,54,48,68,0] /* Canon EOS 60D\00 */, "i8", ALLOC_STATIC);
__str238=allocate([67,97,110,111,110,32,69,79,83,32,51,48,48,68,0] /* Canon EOS 300D\00 */, "i8", ALLOC_STATIC);
__str239=allocate([67,97,110,111,110,32,69,79,83,32,51,53,48,68,0] /* Canon EOS 350D\00 */, "i8", ALLOC_STATIC);
__str240=allocate([67,97,110,111,110,32,69,79,83,32,52,48,48,68,0] /* Canon EOS 400D\00 */, "i8", ALLOC_STATIC);
__str241=allocate([67,97,110,111,110,32,69,79,83,32,52,53,48,68,0] /* Canon EOS 450D\00 */, "i8", ALLOC_STATIC);
__str242=allocate([67,97,110,111,110,32,69,79,83,32,53,48,48,68,0] /* Canon EOS 500D\00 */, "i8", ALLOC_STATIC);
__str243=allocate([67,97,110,111,110,32,69,79,83,32,53,53,48,68,0] /* Canon EOS 550D\00 */, "i8", ALLOC_STATIC);
__str244=allocate([67,97,110,111,110,32,69,79,83,32,54,48,48,68,0] /* Canon EOS 600D\00 */, "i8", ALLOC_STATIC);
__str245=allocate([67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0] /* Canon EOS 1000D\00 */, "i8", ALLOC_STATIC);
__str246=allocate([67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0] /* Canon EOS 1100D\00 */, "i8", ALLOC_STATIC);
__str247=allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_STATIC);
__str248=allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_STATIC);
__str249=allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0] /* Canon EOS-1D Mark IV */, "i8", ALLOC_STATIC);
__str250=allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_STATIC);
__str251=allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_STATIC);
__str252=allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_STATIC);
__str253=allocate([67,97,110,111,110,32,69,79,83,45,49,68,83,0] /* Canon EOS-1DS\00 */, "i8", ALLOC_STATIC);
__str254=allocate([67,97,110,111,110,32,69,79,83,45,49,68,0] /* Canon EOS-1D\00 */, "i8", ALLOC_STATIC);
__str255=allocate([67,97,110,111,110,32,69,79,83,0] /* Canon EOS\00 */, "i8", ALLOC_STATIC);
__str256=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* Canon PowerShot A530 */, "i8", ALLOC_STATIC);
__str257=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* Canon PowerShot A50\ */, "i8", ALLOC_STATIC);
__str258=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0] /* Canon PowerShot A5\0 */, "i8", ALLOC_STATIC);
__str259=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0] /* Canon PowerShot G10\ */, "i8", ALLOC_STATIC);
__str260=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0] /* Canon PowerShot G11\ */, "i8", ALLOC_STATIC);
__str261=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0] /* Canon PowerShot G12\ */, "i8", ALLOC_STATIC);
__str262=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0] /* Canon PowerShot G1\0 */, "i8", ALLOC_STATIC);
__str263=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0] /* Canon PowerShot G2\0 */, "i8", ALLOC_STATIC);
__str264=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0] /* Canon PowerShot G3\0 */, "i8", ALLOC_STATIC);
__str265=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0] /* Canon PowerShot G5\0 */, "i8", ALLOC_STATIC);
__str266=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0] /* Canon PowerShot G6\0 */, "i8", ALLOC_STATIC);
__str267=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0] /* Canon PowerShot G9\0 */, "i8", ALLOC_STATIC);
__str268=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0] /* Canon PowerShot Pro1 */, "i8", ALLOC_STATIC);
__str269=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* Canon PowerShot Pro7 */, "i8", ALLOC_STATIC);
__str270=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0] /* Canon PowerShot Pro9 */, "i8", ALLOC_STATIC);
__str271=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0] /* Canon PowerShot S30\ */, "i8", ALLOC_STATIC);
__str272=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0] /* Canon PowerShot S40\ */, "i8", ALLOC_STATIC);
__str273=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0] /* Canon PowerShot S45\ */, "i8", ALLOC_STATIC);
__str274=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0] /* Canon PowerShot S50\ */, "i8", ALLOC_STATIC);
__str275=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0] /* Canon PowerShot S60\ */, "i8", ALLOC_STATIC);
__str276=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0] /* Canon PowerShot S70\ */, "i8", ALLOC_STATIC);
__str277=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0] /* Canon PowerShot S90\ */, "i8", ALLOC_STATIC);
__str278=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0] /* Canon PowerShot S95\ */, "i8", ALLOC_STATIC);
__str279=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0] /* Canon PowerShot S100 */, "i8", ALLOC_STATIC);
__str280=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* Canon PowerShot A470 */, "i8", ALLOC_STATIC);
__str281=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* Canon PowerShot A610 */, "i8", ALLOC_STATIC);
__str282=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* Canon PowerShot A620 */, "i8", ALLOC_STATIC);
__str283=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* Canon PowerShot A630 */, "i8", ALLOC_STATIC);
__str284=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* Canon PowerShot A640 */, "i8", ALLOC_STATIC);
__str285=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* Canon PowerShot A650 */, "i8", ALLOC_STATIC);
__str286=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0] /* Canon PowerShot A720 */, "i8", ALLOC_STATIC);
__str287=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* Canon PowerShot S3 I */, "i8", ALLOC_STATIC);
__str288=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0] /* Canon PowerShot SX1  */, "i8", ALLOC_STATIC);
__str289=allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* Canon PowerShot SX11 */, "i8", ALLOC_STATIC);
__str290=allocate([67,65,83,73,79,32,69,88,45,83,50,48,0] /* CASIO EX-S20\00 */, "i8", ALLOC_STATIC);
__str291=allocate([67,65,83,73,79,32,69,88,45,90,55,53,48,0] /* CASIO EX-Z750\00 */, "i8", ALLOC_STATIC);
__str292=allocate([67,65,83,73,79,32,69,88,45,90,49,48,0] /* CASIO EX-Z10\00 */, "i8", ALLOC_STATIC);
__str293=allocate([67,73,78,69,32,54,53,48,0] /* CINE 650\00 */, "i8", ALLOC_STATIC);
__str294=allocate([67,73,78,69,32,54,54,48,0] /* CINE 660\00 */, "i8", ALLOC_STATIC);
__str295=allocate([67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0] /* Contax N Digital\00 */, "i8", ALLOC_STATIC);
__str296=allocate([69,80,83,79,78,32,82,45,68,49,0] /* EPSON R-D1\00 */, "i8", ALLOC_STATIC);
__str297=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,69,53,53,48,0] /* FUJIFILM FinePix E55 */, "i8", ALLOC_STATIC);
__str298=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,69,57,48,48,0] /* FUJIFILM FinePix E90 */, "i8", ALLOC_STATIC);
__str299=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,70,56,0] /* FUJIFILM FinePix F8\ */, "i8", ALLOC_STATIC);
__str300=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,70,55,0] /* FUJIFILM FinePix F7\ */, "i8", ALLOC_STATIC);
__str301=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,49,48,48,70,83,0] /* FUJIFILM FinePix S10 */, "i8", ALLOC_STATIC);
__str302=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,50,48,48,69,88,82,0] /* FUJIFILM FinePix S20 */, "i8", ALLOC_STATIC);
__str303=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,50,48,80,114,111,0] /* FUJIFILM FinePix S20 */, "i8", ALLOC_STATIC);
__str304=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,50,80,114,111,0] /* FUJIFILM FinePix S2P */, "i8", ALLOC_STATIC);
__str305=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,51,80,114,111,0] /* FUJIFILM FinePix S3P */, "i8", ALLOC_STATIC);
__str306=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,80,114,111,0] /* FUJIFILM FinePix S5P */, "i8", ALLOC_STATIC);
__str307=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,48,48,48,0] /* FUJIFILM FinePix S50 */, "i8", ALLOC_STATIC);
__str308=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,49,48,48,0] /* FUJIFILM FinePix S51 */, "i8", ALLOC_STATIC);
__str309=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,53,48,48,0] /* FUJIFILM FinePix S55 */, "i8", ALLOC_STATIC);
__str310=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,50,48,48,0] /* FUJIFILM FinePix S52 */, "i8", ALLOC_STATIC);
__str311=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,53,54,48,48,0] /* FUJIFILM FinePix S56 */, "i8", ALLOC_STATIC);
__str312=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,54,0] /* FUJIFILM FinePix S6\ */, "i8", ALLOC_STATIC);
__str313=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,55,48,48,48,0] /* FUJIFILM FinePix S70 */, "i8", ALLOC_STATIC);
__str314=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,57,48,48,48,0] /* FUJIFILM FinePix S90 */, "i8", ALLOC_STATIC);
__str315=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,57,53,48,48,0] /* FUJIFILM FinePix S95 */, "i8", ALLOC_STATIC);
__str316=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,57,49,48,48,0] /* FUJIFILM FinePix S91 */, "i8", ALLOC_STATIC);
__str317=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,83,57,54,48,48,0] /* FUJIFILM FinePix S96 */, "i8", ALLOC_STATIC);
__str318=allocate([70,85,74,73,70,73,76,77,32,73,83,45,49,0] /* FUJIFILM IS-1\00 */, "i8", ALLOC_STATIC);
__str319=allocate([70,85,74,73,70,73,76,77,32,73,83,32,80,114,111,0] /* FUJIFILM IS Pro\00 */, "i8", ALLOC_STATIC);
__str320=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,72,83,49,48,32,72,83,49,49,0] /* FUJIFILM FinePix HS1 */, "i8", ALLOC_STATIC);
__str321=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,72,83,50,48,69,88,82,0] /* FUJIFILM FinePix HS2 */, "i8", ALLOC_STATIC);
__str322=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,70,53,53,48,69,88,82,0] /* FUJIFILM FinePix F55 */, "i8", ALLOC_STATIC);
__str323=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,70,54,48,48,69,88,82,0] /* FUJIFILM FinePix F60 */, "i8", ALLOC_STATIC);
__str324=allocate([70,85,74,73,70,73,76,77,32,70,105,110,101,80,105,120,32,88,49,48,48,0] /* FUJIFILM FinePix X10 */, "i8", ALLOC_STATIC);
__str325=allocate([70,85,74,73,70,73,76,77,32,88,49,48,0] /* FUJIFILM X10\00 */, "i8", ALLOC_STATIC);
__str326=allocate([73,109,97,99,111,110,32,73,120,112,114,101,115,115,0] /* Imacon Ixpress\00 */, "i8", ALLOC_STATIC);
__str327=allocate([75,79,68,65,75,32,78,67,50,48,48,48,0] /* KODAK NC2000\00 */, "i8", ALLOC_STATIC);
__str328=allocate([75,111,100,97,107,32,68,67,83,51,49,53,67,0] /* Kodak DCS315C\00 */, "i8", ALLOC_STATIC);
__str329=allocate([75,111,100,97,107,32,68,67,83,51,51,48,67,0] /* Kodak DCS330C\00 */, "i8", ALLOC_STATIC);
__str330=allocate([75,79,68,65,75,32,68,67,83,52,50,48,0] /* KODAK DCS420\00 */, "i8", ALLOC_STATIC);
__str331=allocate([75,79,68,65,75,32,68,67,83,52,54,48,0] /* KODAK DCS460\00 */, "i8", ALLOC_STATIC);
__str332=allocate([75,79,68,65,75,32,69,79,83,68,67,83,49,0] /* KODAK EOSDCS1\00 */, "i8", ALLOC_STATIC);
__str333=allocate([75,79,68,65,75,32,69,79,83,68,67,83,51,66,0] /* KODAK EOSDCS3B\00 */, "i8", ALLOC_STATIC);
__str334=allocate([75,111,100,97,107,32,68,67,83,53,50,48,67,0] /* Kodak DCS520C\00 */, "i8", ALLOC_STATIC);
__str335=allocate([75,111,100,97,107,32,68,67,83,53,54,48,67,0] /* Kodak DCS560C\00 */, "i8", ALLOC_STATIC);
__str336=allocate([75,111,100,97,107,32,68,67,83,54,50,48,67,0] /* Kodak DCS620C\00 */, "i8", ALLOC_STATIC);
__str337=allocate([75,111,100,97,107,32,68,67,83,54,50,48,88,0] /* Kodak DCS620X\00 */, "i8", ALLOC_STATIC);
__str338=allocate([75,111,100,97,107,32,68,67,83,54,54,48,67,0] /* Kodak DCS660C\00 */, "i8", ALLOC_STATIC);
__str339=allocate([75,111,100,97,107,32,68,67,83,55,50,48,88,0] /* Kodak DCS720X\00 */, "i8", ALLOC_STATIC);
__str340=allocate([75,111,100,97,107,32,68,67,83,55,54,48,67,0] /* Kodak DCS760C\00 */, "i8", ALLOC_STATIC);
__str341=allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0] /* Kodak DCS Pro SLR\00 */, "i8", ALLOC_STATIC);
__str342=allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0] /* Kodak DCS Pro 14nx\0 */, "i8", ALLOC_STATIC);
__str343=allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0] /* Kodak DCS Pro 14\00 */, "i8", ALLOC_STATIC);
__str344=allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0] /* Kodak ProBack645\00 */, "i8", ALLOC_STATIC);
__str345=allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,0] /* Kodak ProBack\00 */, "i8", ALLOC_STATIC);
__str346=allocate([75,79,68,65,75,32,80,55,49,50,0] /* KODAK P712\00 */, "i8", ALLOC_STATIC);
__str347=allocate([75,79,68,65,75,32,80,56,53,48,0] /* KODAK P850\00 */, "i8", ALLOC_STATIC);
__str348=allocate([75,79,68,65,75,32,80,56,56,48,0] /* KODAK P880\00 */, "i8", ALLOC_STATIC);
__str349=allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0] /* KODAK EasyShare Z980 */, "i8", ALLOC_STATIC);
__str350=allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0] /* KODAK EasyShare Z981 */, "i8", ALLOC_STATIC);
__str351=allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0] /* KODAK EasyShare Z990 */, "i8", ALLOC_STATIC);
__str352=allocate([75,79,68,65,75,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0] /* KODAK EASYSHARE Z101 */, "i8", ALLOC_STATIC);
__str353=allocate([76,101,97,102,32,67,77,111,115,116,0] /* Leaf CMost\00 */, "i8", ALLOC_STATIC);
__str354=allocate([76,101,97,102,32,86,97,108,101,111,32,54,0] /* Leaf Valeo 6\00 */, "i8", ALLOC_STATIC);
__str355=allocate([76,101,97,102,32,65,112,116,117,115,32,53,52,83,0] /* Leaf Aptus 54S\00 */, "i8", ALLOC_STATIC);
__str356=allocate([76,101,97,102,32,65,112,116,117,115,32,54,53,0] /* Leaf Aptus 65\00 */, "i8", ALLOC_STATIC);
__str357=allocate([76,101,97,102,32,65,112,116,117,115,32,55,53,0] /* Leaf Aptus 75\00 */, "i8", ALLOC_STATIC);
__str358=allocate([77,97,109,105,121,97,32,90,68,0] /* Mamiya ZD\00 */, "i8", ALLOC_STATIC);
__str359=allocate([77,105,99,114,111,110,32,50,48,49,48,0] /* Micron 2010\00 */, "i8", ALLOC_STATIC);
__str360=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0] /* Minolta DiMAGE 5\00 */, "i8", ALLOC_STATIC);
__str361=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0] /* Minolta DiMAGE 7Hi\0 */, "i8", ALLOC_STATIC);
__str362=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0] /* Minolta DiMAGE 7\00 */, "i8", ALLOC_STATIC);
__str363=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0] /* Minolta DiMAGE A1\00 */, "i8", ALLOC_STATIC);
__str364=allocate([77,73,78,79,76,84,65,32,68,105,77,65,71,69,32,65,50,48,48,0] /* MINOLTA DiMAGE A200\ */, "i8", ALLOC_STATIC);
__str365=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0] /* Minolta DiMAGE A2\00 */, "i8", ALLOC_STATIC);
__str366=allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0] /* Minolta DiMAGE Z2\00 */, "i8", ALLOC_STATIC);
__str367=allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,53,0] /* MINOLTA DYNAX 5\00 */, "i8", ALLOC_STATIC);
__str368=allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,55,0] /* MINOLTA DYNAX 7\00 */, "i8", ALLOC_STATIC);
__str369=allocate([77,79,84,79,82,79,76,65,32,80,73,88,76,0] /* MOTOROLA PIXL\00 */, "i8", ALLOC_STATIC);
__str370=allocate([78,73,75,79,78,32,68,49,48,48,0] /* NIKON D100\00 */, "i8", ALLOC_STATIC);
__str371=allocate([78,73,75,79,78,32,68,49,72,0] /* NIKON D1H\00 */, "i8", ALLOC_STATIC);
__str372=allocate([78,73,75,79,78,32,68,49,88,0] /* NIKON D1X\00 */, "i8", ALLOC_STATIC);
__str373=allocate([78,73,75,79,78,32,68,49,0] /* NIKON D1\00 */, "i8", ALLOC_STATIC);
__str374=allocate([78,73,75,79,78,32,68,50,48,48,0] /* NIKON D200\00 */, "i8", ALLOC_STATIC);
__str375=allocate([78,73,75,79,78,32,68,50,72,0] /* NIKON D2H\00 */, "i8", ALLOC_STATIC);
__str376=allocate([78,73,75,79,78,32,68,50,88,0] /* NIKON D2X\00 */, "i8", ALLOC_STATIC);
__str377=allocate([78,73,75,79,78,32,68,51,48,48,48,0] /* NIKON D3000\00 */, "i8", ALLOC_STATIC);
__str378=allocate([78,73,75,79,78,32,68,51,49,48,48,0] /* NIKON D3100\00 */, "i8", ALLOC_STATIC);
__str379=allocate([78,73,75,79,78,32,68,51,48,48,0] /* NIKON D300\00 */, "i8", ALLOC_STATIC);
__str380=allocate([78,73,75,79,78,32,68,51,88,0] /* NIKON D3X\00 */, "i8", ALLOC_STATIC);
__str381=allocate([78,73,75,79,78,32,68,51,83,0] /* NIKON D3S\00 */, "i8", ALLOC_STATIC);
__str382=allocate([78,73,75,79,78,32,68,51,0] /* NIKON D3\00 */, "i8", ALLOC_STATIC);
__str383=allocate([78,73,75,79,78,32,68,52,48,88,0] /* NIKON D40X\00 */, "i8", ALLOC_STATIC);
__str384=allocate([78,73,75,79,78,32,68,52,48,0] /* NIKON D40\00 */, "i8", ALLOC_STATIC);
__str385=allocate([78,73,75,79,78,32,68,53,48,48,48,0] /* NIKON D5000\00 */, "i8", ALLOC_STATIC);
__str386=allocate([78,73,75,79,78,32,68,53,49,48,48,0] /* NIKON D5100\00 */, "i8", ALLOC_STATIC);
__str387=allocate([78,73,75,79,78,32,68,53,48,0] /* NIKON D50\00 */, "i8", ALLOC_STATIC);
__str388=allocate([78,73,75,79,78,32,68,54,48,0] /* NIKON D60\00 */, "i8", ALLOC_STATIC);
__str389=allocate([78,73,75,79,78,32,68,55,48,48,48,0] /* NIKON D7000\00 */, "i8", ALLOC_STATIC);
__str390=allocate([78,73,75,79,78,32,68,55,48,48,0] /* NIKON D700\00 */, "i8", ALLOC_STATIC);
__str391=allocate([78,73,75,79,78,32,68,55,48,0] /* NIKON D70\00 */, "i8", ALLOC_STATIC);
__str392=allocate([78,73,75,79,78,32,68,56,48,0] /* NIKON D80\00 */, "i8", ALLOC_STATIC);
__str393=allocate([78,73,75,79,78,32,68,57,48,0] /* NIKON D90\00 */, "i8", ALLOC_STATIC);
__str394=allocate([78,73,75,79,78,32,69,57,53,48,0] /* NIKON E950\00 */, "i8", ALLOC_STATIC);
__str395=allocate([78,73,75,79,78,32,69,57,57,53,0] /* NIKON E995\00 */, "i8", ALLOC_STATIC);
__str396=allocate([78,73,75,79,78,32,69,50,49,48,48,0] /* NIKON E2100\00 */, "i8", ALLOC_STATIC);
__str397=allocate([78,73,75,79,78,32,69,50,53,48,48,0] /* NIKON E2500\00 */, "i8", ALLOC_STATIC);
__str398=allocate([78,73,75,79,78,32,69,51,50,48,48,0] /* NIKON E3200\00 */, "i8", ALLOC_STATIC);
__str399=allocate([78,73,75,79,78,32,69,52,51,48,48,0] /* NIKON E4300\00 */, "i8", ALLOC_STATIC);
__str400=allocate([78,73,75,79,78,32,69,52,53,48,48,0] /* NIKON E4500\00 */, "i8", ALLOC_STATIC);
__str401=allocate([78,73,75,79,78,32,69,53,48,48,48,0] /* NIKON E5000\00 */, "i8", ALLOC_STATIC);
__str402=allocate([78,73,75,79,78,32,69,53,52,48,48,0] /* NIKON E5400\00 */, "i8", ALLOC_STATIC);
__str403=allocate([78,73,75,79,78,32,69,53,55,48,48,0] /* NIKON E5700\00 */, "i8", ALLOC_STATIC);
__str404=allocate([78,73,75,79,78,32,69,56,52,48,48,0] /* NIKON E8400\00 */, "i8", ALLOC_STATIC);
__str405=allocate([78,73,75,79,78,32,69,56,55,48,48,0] /* NIKON E8700\00 */, "i8", ALLOC_STATIC);
__str406=allocate([78,73,75,79,78,32,69,56,56,48,48,0] /* NIKON E8800\00 */, "i8", ALLOC_STATIC);
__str407=allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0] /* NIKON COOLPIX P6000\ */, "i8", ALLOC_STATIC);
__str408=allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0] /* NIKON COOLPIX P7000\ */, "i8", ALLOC_STATIC);
__str409=allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0] /* NIKON COOLPIX P7100\ */, "i8", ALLOC_STATIC);
__str410=allocate([78,73,75,79,78,32,49,32,0] /* NIKON 1 \00 */, "i8", ALLOC_STATIC);
__str411=allocate([79,76,89,77,80,85,83,32,67,53,48,53,48,0] /* OLYMPUS C5050\00 */, "i8", ALLOC_STATIC);
__str412=allocate([79,76,89,77,80,85,83,32,67,53,48,54,48,0] /* OLYMPUS C5060\00 */, "i8", ALLOC_STATIC);
__str413=allocate([79,76,89,77,80,85,83,32,67,55,48,55,48,0] /* OLYMPUS C7070\00 */, "i8", ALLOC_STATIC);
__str414=allocate([79,76,89,77,80,85,83,32,67,55,48,0] /* OLYMPUS C70\00 */, "i8", ALLOC_STATIC);
__str415=allocate([79,76,89,77,80,85,83,32,67,56,48,0] /* OLYMPUS C80\00 */, "i8", ALLOC_STATIC);
__str416=allocate([79,76,89,77,80,85,83,32,69,45,49,48,0] /* OLYMPUS E-10\00 */, "i8", ALLOC_STATIC);
__str417=allocate([79,76,89,77,80,85,83,32,69,45,49,0] /* OLYMPUS E-1\00 */, "i8", ALLOC_STATIC);
__str418=allocate([79,76,89,77,80,85,83,32,69,45,50,48,0] /* OLYMPUS E-20\00 */, "i8", ALLOC_STATIC);
__str419=allocate([79,76,89,77,80,85,83,32,69,45,51,48,48,0] /* OLYMPUS E-300\00 */, "i8", ALLOC_STATIC);
__str420=allocate([79,76,89,77,80,85,83,32,69,45,51,51,48,0] /* OLYMPUS E-330\00 */, "i8", ALLOC_STATIC);
__str421=allocate([79,76,89,77,80,85,83,32,69,45,51,48,0] /* OLYMPUS E-30\00 */, "i8", ALLOC_STATIC);
__str422=allocate([79,76,89,77,80,85,83,32,69,45,51,0] /* OLYMPUS E-3\00 */, "i8", ALLOC_STATIC);
__str423=allocate([79,76,89,77,80,85,83,32,69,45,52,48,48,0] /* OLYMPUS E-400\00 */, "i8", ALLOC_STATIC);
__str424=allocate([79,76,89,77,80,85,83,32,69,45,52,49,48,0] /* OLYMPUS E-410\00 */, "i8", ALLOC_STATIC);
__str425=allocate([79,76,89,77,80,85,83,32,69,45,52,50,48,0] /* OLYMPUS E-420\00 */, "i8", ALLOC_STATIC);
__str426=allocate([79,76,89,77,80,85,83,32,69,45,52,53,48,0] /* OLYMPUS E-450\00 */, "i8", ALLOC_STATIC);
__str427=allocate([79,76,89,77,80,85,83,32,69,45,53,48,48,0] /* OLYMPUS E-500\00 */, "i8", ALLOC_STATIC);
__str428=allocate([79,76,89,77,80,85,83,32,69,45,53,49,48,0] /* OLYMPUS E-510\00 */, "i8", ALLOC_STATIC);
__str429=allocate([79,76,89,77,80,85,83,32,69,45,53,50,48,0] /* OLYMPUS E-520\00 */, "i8", ALLOC_STATIC);
__str430=allocate([79,76,89,77,80,85,83,32,69,45,53,0] /* OLYMPUS E-5\00 */, "i8", ALLOC_STATIC);
__str431=allocate([79,76,89,77,80,85,83,32,69,45,54,48,48,0] /* OLYMPUS E-600\00 */, "i8", ALLOC_STATIC);
__str432=allocate([79,76,89,77,80,85,83,32,69,45,54,50,48,0] /* OLYMPUS E-620\00 */, "i8", ALLOC_STATIC);
__str433=allocate([79,76,89,77,80,85,83,32,69,45,80,49,0] /* OLYMPUS E-P1\00 */, "i8", ALLOC_STATIC);
__str434=allocate([79,76,89,77,80,85,83,32,69,45,80,50,0] /* OLYMPUS E-P2\00 */, "i8", ALLOC_STATIC);
__str435=allocate([79,76,89,77,80,85,83,32,69,45,80,51,0] /* OLYMPUS E-P3\00 */, "i8", ALLOC_STATIC);
__str436=allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,115,0] /* OLYMPUS E-PL1s\00 */, "i8", ALLOC_STATIC);
__str437=allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,0] /* OLYMPUS E-PL1\00 */, "i8", ALLOC_STATIC);
__str438=allocate([79,76,89,77,80,85,83,32,69,45,80,76,50,0] /* OLYMPUS E-PL2\00 */, "i8", ALLOC_STATIC);
__str439=allocate([79,76,89,77,80,85,83,32,69,45,80,76,51,0] /* OLYMPUS E-PL3\00 */, "i8", ALLOC_STATIC);
__str440=allocate([79,76,89,77,80,85,83,32,69,45,80,77,49,0] /* OLYMPUS E-PM1\00 */, "i8", ALLOC_STATIC);
__str441=allocate([79,76,89,77,80,85,83,32,83,80,51,53,48,0] /* OLYMPUS SP350\00 */, "i8", ALLOC_STATIC);
__str442=allocate([79,76,89,77,80,85,83,32,83,80,51,0] /* OLYMPUS SP3\00 */, "i8", ALLOC_STATIC);
__str443=allocate([79,76,89,77,80,85,83,32,83,80,53,48,48,85,90,0] /* OLYMPUS SP500UZ\00 */, "i8", ALLOC_STATIC);
__str444=allocate([79,76,89,77,80,85,83,32,83,80,53,49,48,85,90,0] /* OLYMPUS SP510UZ\00 */, "i8", ALLOC_STATIC);
__str445=allocate([79,76,89,77,80,85,83,32,83,80,53,53,48,85,90,0] /* OLYMPUS SP550UZ\00 */, "i8", ALLOC_STATIC);
__str446=allocate([79,76,89,77,80,85,83,32,83,80,53,54,48,85,90,0] /* OLYMPUS SP560UZ\00 */, "i8", ALLOC_STATIC);
__str447=allocate([79,76,89,77,80,85,83,32,83,80,53,55,48,85,90,0] /* OLYMPUS SP570UZ\00 */, "i8", ALLOC_STATIC);
__str448=allocate([79,76,89,77,80,85,83,32,88,90,45,49,0] /* OLYMPUS XZ-1\00 */, "i8", ALLOC_STATIC);
__str449=allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,50,0] /* PENTAX _ist DL2\00 */, "i8", ALLOC_STATIC);
__str450=allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,0] /* PENTAX _ist DL\00 */, "i8", ALLOC_STATIC);
__str451=allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,50,0] /* PENTAX _ist DS2\00 */, "i8", ALLOC_STATIC);
__str452=allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,0] /* PENTAX _ist DS\00 */, "i8", ALLOC_STATIC);
__str453=allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,0] /* PENTAX _ist D\00 */, "i8", ALLOC_STATIC);
__str454=allocate([80,69,78,84,65,88,32,75,49,48,68,0] /* PENTAX K10D\00 */, "i8", ALLOC_STATIC);
__str455=allocate([80,69,78,84,65,88,32,75,49,0] /* PENTAX K1\00 */, "i8", ALLOC_STATIC);
__str456=allocate([80,69,78,84,65,88,32,75,50,48,68,0] /* PENTAX K20D\00 */, "i8", ALLOC_STATIC);
__str457=allocate([80,69,78,84,65,88,32,75,50,48,48,68,0] /* PENTAX K200D\00 */, "i8", ALLOC_STATIC);
__str458=allocate([80,69,78,84,65,88,32,75,50,48,48,48,0] /* PENTAX K2000\00 */, "i8", ALLOC_STATIC);
__str459=allocate([80,69,78,84,65,88,32,75,45,109,0] /* PENTAX K-m\00 */, "i8", ALLOC_STATIC);
__str460=allocate([80,69,78,84,65,88,32,75,45,120,0] /* PENTAX K-x\00 */, "i8", ALLOC_STATIC);
__str461=allocate([80,69,78,84,65,88,32,75,45,114,0] /* PENTAX K-r\00 */, "i8", ALLOC_STATIC);
__str462=allocate([80,69,78,84,65,88,32,75,45,53,0] /* PENTAX K-5\00 */, "i8", ALLOC_STATIC);
__str463=allocate([80,69,78,84,65,88,32,75,45,55,0] /* PENTAX K-7\00 */, "i8", ALLOC_STATIC);
__str464=allocate([80,69,78,84,65,88,32,54,52,53,68,0] /* PENTAX 645D\00 */, "i8", ALLOC_STATIC);
__str465=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0] /* Panasonic DMC-FZ8\00 */, "i8", ALLOC_STATIC);
__str466=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0] /* Panasonic DMC-FZ18\0 */, "i8", ALLOC_STATIC);
__str467=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0] /* Panasonic DMC-FZ28\0 */, "i8", ALLOC_STATIC);
__str468=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0] /* Panasonic DMC-FZ30\0 */, "i8", ALLOC_STATIC);
__str469=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0] /* Panasonic DMC-FZ3\00 */, "i8", ALLOC_STATIC);
__str470=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0] /* Panasonic DMC-FZ4\00 */, "i8", ALLOC_STATIC);
__str471=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0] /* Panasonic DMC-FZ50\0 */, "i8", ALLOC_STATIC);
__str472=allocate([76,69,73,67,65,32,86,45,76,85,88,49,0] /* LEICA V-LUX1\00 */, "i8", ALLOC_STATIC);
__str473=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0] /* Panasonic DMC-L10\00 */, "i8", ALLOC_STATIC);
__str474=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0] /* Panasonic DMC-L1\00 */, "i8", ALLOC_STATIC);
__str475=allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,51,0] /* LEICA DIGILUX 3\00 */, "i8", ALLOC_STATIC);
__str476=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0] /* Panasonic DMC-LC1\00 */, "i8", ALLOC_STATIC);
__str477=allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,50,0] /* LEICA DIGILUX 2\00 */, "i8", ALLOC_STATIC);
__str478=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0] /* Panasonic DMC-LX1\00 */, "i8", ALLOC_STATIC);
__str479=allocate([76,69,73,67,65,32,68,45,76,85,88,50,0] /* LEICA D-LUX2\00 */, "i8", ALLOC_STATIC);
__str480=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0] /* Panasonic DMC-LX2\00 */, "i8", ALLOC_STATIC);
__str481=allocate([76,69,73,67,65,32,68,45,76,85,88,51,0] /* LEICA D-LUX3\00 */, "i8", ALLOC_STATIC);
__str482=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0] /* Panasonic DMC-LX3\00 */, "i8", ALLOC_STATIC);
__str483=allocate([76,69,73,67,65,32,68,45,76,85,88,32,52,0] /* LEICA D-LUX 4\00 */, "i8", ALLOC_STATIC);
__str484=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0] /* Panasonic DMC-LX5\00 */, "i8", ALLOC_STATIC);
__str485=allocate([76,69,73,67,65,32,68,45,76,85,88,32,53,0] /* LEICA D-LUX 5\00 */, "i8", ALLOC_STATIC);
__str486=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0] /* Panasonic DMC-FZ100\ */, "i8", ALLOC_STATIC);
__str487=allocate([76,69,73,67,65,32,86,45,76,85,88,32,50,0] /* LEICA V-LUX 2\00 */, "i8", ALLOC_STATIC);
__str488=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0] /* Panasonic DMC-FZ150\ */, "i8", ALLOC_STATIC);
__str489=allocate([76,69,73,67,65,32,86,45,76,85,88,32,51,0] /* LEICA V-LUX 3\00 */, "i8", ALLOC_STATIC);
__str490=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0] /* Panasonic DMC-FX150\ */, "i8", ALLOC_STATIC);
__str491=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0] /* Panasonic DMC-G10\00 */, "i8", ALLOC_STATIC);
__str492=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0] /* Panasonic DMC-G1\00 */, "i8", ALLOC_STATIC);
__str493=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0] /* Panasonic DMC-G2\00 */, "i8", ALLOC_STATIC);
__str494=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0] /* Panasonic DMC-G3\00 */, "i8", ALLOC_STATIC);
__str495=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0] /* Panasonic DMC-GF1\00 */, "i8", ALLOC_STATIC);
__str496=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0] /* Panasonic DMC-GF2\00 */, "i8", ALLOC_STATIC);
__str497=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0] /* Panasonic DMC-GF3\00 */, "i8", ALLOC_STATIC);
__str498=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0] /* Panasonic DMC-GH1\00 */, "i8", ALLOC_STATIC);
__str499=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0] /* Panasonic DMC-GH2\00 */, "i8", ALLOC_STATIC);
__str500=allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0] /* Panasonic DMC-GX1\00 */, "i8", ALLOC_STATIC);
__str501=allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,48,0] /* Phase One H 20\00 */, "i8", ALLOC_STATIC);
__str502=allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,53,0] /* Phase One H 25\00 */, "i8", ALLOC_STATIC);
__str503=allocate([80,104,97,115,101,32,79,110,101,32,80,32,50,0] /* Phase One P 2\00 */, "i8", ALLOC_STATIC);
__str504=allocate([80,104,97,115,101,32,79,110,101,32,80,32,51,48,0] /* Phase One P 30\00 */, "i8", ALLOC_STATIC);
__str505=allocate([80,104,97,115,101,32,79,110,101,32,80,32,52,53,0] /* Phase One P 45\00 */, "i8", ALLOC_STATIC);
__str506=allocate([80,104,97,115,101,32,79,110,101,32,80,52,48,0] /* Phase One P40\00 */, "i8", ALLOC_STATIC);
__str507=allocate([80,104,97,115,101,32,79,110,101,32,80,54,53,0] /* Phase One P65\00 */, "i8", ALLOC_STATIC);
__str508=allocate([82,69,68,32,79,78,69,0] /* RED ONE\00 */, "i8", ALLOC_STATIC);
__str509=allocate([83,65,77,83,85,78,71,32,69,88,49,0] /* SAMSUNG EX1\00 */, "i8", ALLOC_STATIC);
__str510=allocate([83,65,77,83,85,78,71,32,78,88,50,48,48,0] /* SAMSUNG NX200\00 */, "i8", ALLOC_STATIC);
__str511=allocate([83,65,77,83,85,78,71,32,78,88,0] /* SAMSUNG NX\00 */, "i8", ALLOC_STATIC);
__str512=allocate([83,65,77,83,85,78,71,32,87,66,50,48,48,48,0] /* SAMSUNG WB2000\00 */, "i8", ALLOC_STATIC);
__str513=allocate([83,65,77,83,85,78,71,32,71,88,45,49,0] /* SAMSUNG GX-1\00 */, "i8", ALLOC_STATIC);
__str514=allocate([83,65,77,83,85,78,71,32,83,56,53,0] /* SAMSUNG S85\00 */, "i8", ALLOC_STATIC);
__str515=allocate([83,105,110,97,114,0] /* Sinar\00 */, "i8", ALLOC_STATIC);
__str516=allocate([83,79,78,89,32,68,83,67,45,70,56,50,56,0] /* SONY DSC-F828\00 */, "i8", ALLOC_STATIC);
__str517=allocate([83,79,78,89,32,68,83,67,45,82,49,0] /* SONY DSC-R1\00 */, "i8", ALLOC_STATIC);
__str518=allocate([83,79,78,89,32,68,83,67,45,86,51,0] /* SONY DSC-V3\00 */, "i8", ALLOC_STATIC);
__str519=allocate([83,79,78,89,32,68,83,76,82,45,65,49,48,48,0] /* SONY DSLR-A100\00 */, "i8", ALLOC_STATIC);
__str520=allocate([83,79,78,89,32,68,83,76,82,45,65,50,57,48,0] /* SONY DSLR-A290\00 */, "i8", ALLOC_STATIC);
__str521=allocate([83,79,78,89,32,68,83,76,82,45,65,50,0] /* SONY DSLR-A2\00 */, "i8", ALLOC_STATIC);
__str522=allocate([83,79,78,89,32,68,83,76,82,45,65,51,48,48,0] /* SONY DSLR-A300\00 */, "i8", ALLOC_STATIC);
__str523=allocate([83,79,78,89,32,68,83,76,82,45,65,51,51,48,0] /* SONY DSLR-A330\00 */, "i8", ALLOC_STATIC);
__str524=allocate([83,79,78,89,32,68,83,76,82,45,65,51,53,48,0] /* SONY DSLR-A350\00 */, "i8", ALLOC_STATIC);
__str525=allocate([83,79,78,89,32,68,83,76,82,45,65,51,56,48,0] /* SONY DSLR-A380\00 */, "i8", ALLOC_STATIC);
__str526=allocate([83,79,78,89,32,68,83,76,82,45,65,51,57,48,0] /* SONY DSLR-A390\00 */, "i8", ALLOC_STATIC);
__str527=allocate([83,79,78,89,32,68,83,76,82,45,65,52,53,48,0] /* SONY DSLR-A450\00 */, "i8", ALLOC_STATIC);
__str528=allocate([83,79,78,89,32,68,83,76,82,45,65,53,56,48,0] /* SONY DSLR-A580\00 */, "i8", ALLOC_STATIC);
__str529=allocate([83,79,78,89,32,68,83,76,82,45,65,53,0] /* SONY DSLR-A5\00 */, "i8", ALLOC_STATIC);
__str530=allocate([83,79,78,89,32,68,83,76,82,45,65,55,48,48,0] /* SONY DSLR-A700\00 */, "i8", ALLOC_STATIC);
__str531=allocate([83,79,78,89,32,68,83,76,82,45,65,56,53,48,0] /* SONY DSLR-A850\00 */, "i8", ALLOC_STATIC);
__str532=allocate([83,79,78,89,32,68,83,76,82,45,65,57,48,48,0] /* SONY DSLR-A900\00 */, "i8", ALLOC_STATIC);
__str533=allocate([83,79,78,89,32,78,69,88,45,53,78,0] /* SONY NEX-5N\00 */, "i8", ALLOC_STATIC);
__str534=allocate([83,79,78,89,32,78,69,88,45,67,51,0] /* SONY NEX-C3\00 */, "i8", ALLOC_STATIC);
__str535=allocate([83,79,78,89,32,78,69,88,45,51,0] /* SONY NEX-3\00 */, "i8", ALLOC_STATIC);
__str536=allocate([83,79,78,89,32,78,69,88,45,53,0] /* SONY NEX-5\00 */, "i8", ALLOC_STATIC);
__str537=allocate([83,79,78,89,32,78,69,88,45,55,0] /* SONY NEX-7\00 */, "i8", ALLOC_STATIC);
__str538=allocate([83,79,78,89,32,83,76,84,45,65,51,51,0] /* SONY SLT-A33\00 */, "i8", ALLOC_STATIC);
__str539=allocate([83,79,78,89,32,83,76,84,45,65,51,53,0] /* SONY SLT-A35\00 */, "i8", ALLOC_STATIC);
__str540=allocate([83,79,78,89,32,83,76,84,45,65,53,53,0] /* SONY SLT-A55\00 */, "i8", ALLOC_STATIC);
__str541=allocate([83,79,78,89,32,83,76,84,45,65,54,53,0] /* SONY SLT-A65\00 */, "i8", ALLOC_STATIC);
__str542=allocate([83,79,78,89,32,83,76,84,45,65,55,55,0] /* SONY SLT-A77\00 */, "i8", ALLOC_STATIC);
__str543=allocate([37,115,32,37,115,0] /* %s %s\00 */, "i8", ALLOC_STATIC);
_simple_coeff_table=allocate([1.4032000303268433, 0, 0, 0, -0.22310000658035278, 0, 0, 0, -0.10159999877214432, 0, 0, 0, -0.5263000130653381, 0, 0, 0, 1.481600046157837, 0, 0, 0, 0.017000000923871994, 0, 0, 0, -0.01119999960064888, 0, 0, 0, 0.018300000578165054, 0, 0, 0, 0.911300003528595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.25, 0, 0, 0, 0.75, 0, 0, 0, -1.75, 0, 0, 0, -0.25, 0, 0, 0, -0.25, 0, 0, 0, 0.75, 0, 0, 0, 0.75, 0, 0, 0, -0.25, 0, 0, 0, -0.25, 0, 0, 0, -1.75, 0, 0, 0, 0.75, 0, 0, 0, 2.25, 0, 0, 0, 1.8930000066757202, 0, 0, 0, -0.4180000126361847, 0, 0, 0, -0.47600001096725464, 0, 0, 0, -0.4950000047683716, 0, 0, 0, 1.7730000019073486, 0, 0, 0, -0.27799999713897705, 0, 0, 0, -1.0169999599456787, 0, 0, 0, -0.6549999713897705, 0, 0, 0, 2.671999931335449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.9362800121307373, 0, 0, 0, 1.8004430532455444, 0, 0, 0, -1.4484859704971313, 0, 0, 0, 2.5843238830566406, 0, 0, 0, 1.405364990234375, 0, 0, 0, -0.5249549746513367, 0, 0, 0, -0.28909000754356384, 0, 0, 0, 0.4086799919605255, 0, 0, 0, -1.2049649953842163, 0, 0, 0, 1.0823040008544922, 0, 0, 0, 2.9413669109344482, 0, 0, 0, -1.8187049627304077, 0, 0, 0], ["float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0,"float",0,0,0], ALLOC_STATIC);
_identify_pana=allocate([3130, 0, 1743, 0, 4, 0, 0, 0, -6, 0, 0, 0, 3130, 0, 2055, 0, 4, 0, 0, 0, -6, 0, 0, 0, 3130, 0, 2319, 0, 4, 0, 0, 0, -6, 0, 0, 0, 3170, 0, 2103, 0, 18, 0, 0, 0, -42, 0, 20, 0, 3170, 0, 2367, 0, 18, 0, 13, 0, -42, 0, -21, 0, 3177, 0, 2367, 0, 0, 0, 0, 0, -1, 0, 0, 0, 3304, 0, 2458, 0, 0, 0, 0, 0, -1, 0, 0, 0, 3330, 0, 2463, 0, 9, 0, 0, 0, -5, 0, 0, 0, 3330, 0, 2479, 0, 9, 0, 0, 0, -17, 0, 4, 0, 3370, 0, 1899, 0, 15, 0, 0, 0, -44, 0, 20, 0, 3370, 0, 2235, 0, 15, 0, 0, 0, -44, 0, 20, 0, 3370, 0, 2511, 0, 15, 0, 10, 0, -44, 0, -21, 0, 3690, 0, 2751, 0, 3, 0, 0, 0, -8, 0, -3, 0, 3710, 0, 2751, 0, 0, 0, 0, 0, -3, 0, 0, 0, 3724, 0, 2450, 0, 0, 0, 0, 0, 0, 0, -2, 0, 3770, 0, 2487, 0, 17, 0, 0, 0, -44, 0, 19, 0, 3770, 0, 2799, 0, 17, 0, 15, 0, -44, 0, -19, 0, 3880, 0, 2170, 0, 6, 0, 0, 0, -6, 0, 0, 0, 4060, 0, 3018, 0, 0, 0, 0, 0, 0, 0, -2, 0, 4290, 0, 2391, 0, 3, 0, 0, 0, -8, 0, -1, 0, 4330, 0, 2439, 0, 17, 0, 15, 0, -44, 0, -19, 0, 4508, 0, 2962, 0, 0, 0, 0, 0, -3, 0, -4, 0, 4508, 0, 3330, 0, 0, 0, 0, 0, -3, 0, -6, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_identify_table=allocate([62464, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 68, 67, 50, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124928, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 68, 67, 50, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652736, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 68, 67, 83, 50, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4159302, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 51, 51, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4162462, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 51, 51, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460800, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 54, 48, 51, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614400, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 54, 48, 51, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6163328, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 54, 48, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6166488, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 54, 48, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9116448, 0, 0, 0, 75, 111, 100, 97, 107, 0, 0, 0, 0, 0, 0, 0, 67, 54, 48, 51, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311696, 0, 0, 0, 83, 84, 32, 77, 105, 99, 114, 111, 0, 0, 0, 0, 83, 84, 86, 54, 56, 48, 32, 86, 71, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787456, 0, 0, 0, 67, 114, 101, 97, 116, 105, 118, 101, 0, 0, 0, 0, 80, 67, 45, 67, 65, 77, 32, 54, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 77, 105, 110, 111, 108, 116, 97, 0, 0, 0, 0, 0, 82, 68, 49, 55, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3840000, 0, 0, 0, 70, 111, 99, 117, 108, 117, 115, 0, 0, 0, 0, 0, 53, 51, 49, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786432, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 48, 56, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1447680, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 49, 52, 53, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920000, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 50, 48, 49, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5067304, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 53, 49, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5067316, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 53, 49, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10134608, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 53, 49, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10134620, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 53, 49, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16157136, 0, 0, 0, 65, 86, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 56, 49, 48, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1409024, 0, 0, 0, 83, 111, 110, 121, 0, 0, 0, 0, 0, 0, 0, 0, 88, 67, 68, 45, 83, 88, 57, 49, 48, 67, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 0, 0, 0, 83, 111, 110, 121, 0, 0, 0, 0, 0, 0, 0, 0, 88, 67, 68, 45, 83, 88, 57, 49, 48, 67, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3884928, 0, 0, 0, 77, 105, 99, 114, 111, 110, 0, 0, 0, 0, 0, 0, 50, 48, 49, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6624000, 0, 0, 0, 80, 105, 120, 101, 108, 105, 110, 107, 0, 0, 0, 0, 65, 55, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13248000, 0, 0, 0, 80, 105, 120, 101, 108, 105, 110, 107, 0, 0, 0, 0, 65, 55, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 82, 111, 118, 101, 114, 83, 104, 111, 116, 0, 0, 0, 51, 51, 50, 48, 65, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6553440, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 52, 54, 48, 0, 0, 0, 0, 0, 0, 6653280, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 53, 51, 48, 0, 0, 0, 0, 0, 0, 6573120, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 54, 49, 48, 0, 0, 0, 0, 0, 0, 9219600, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 54, 50, 48, 0, 0, 0, 0, 0, 0, 9243240, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 52, 55, 48, 0, 0, 0, 0, 0, 0, 10341600, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 55, 50, 48, 32, 73, 83, 0, 0, 0, 10383120, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 54, 51, 48, 0, 0, 0, 0, 0, 0, 12945240, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 54, 52, 48, 0, 0, 0, 0, 0, 0, 15636240, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 65, 54, 53, 48, 0, 0, 0, 0, 0, 0, 5298000, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 68, 51, 48, 48, 0, 0, 0, 0, 0, 7710960, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 51, 32, 73, 83, 0, 0, 0, 0, 0, 15467760, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 88, 49, 49, 48, 32, 73, 83, 0, 0, 15534576, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 88, 49, 50, 48, 32, 73, 83, 0, 0, 18653760, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 88, 50, 48, 32, 73, 83, 0, 0, 0, 21936096, 0, 0, 0, 67, 97, 110, 111, 110, 0, 0, 0, 0, 0, 0, 0, 80, 111, 119, 101, 114, 83, 104, 111, 116, 32, 83, 88, 51, 48, 32, 73, 83, 0, 0, 0, 5939200, 0, 0, 0, 79, 76, 89, 77, 80, 85, 83, 0, 0, 0, 0, 0, 67, 55, 55, 48, 85, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1581060, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 57, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2465792, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 57, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2940928, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 50, 49, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4771840, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 57, 57, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4775936, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 51, 55, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5869568, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 52, 51, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5865472, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 52, 53, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7438336, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 69, 53, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8998912, 0, 0, 0, 78, 73, 75, 79, 78, 0, 0, 0, 0, 0, 0, 0, 67, 79, 79, 76, 80, 73, 88, 32, 83, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1976352, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 50, 48, 48, 48, 85, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3217760, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 51, 42, 48, 48, 69, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6218368, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 53, 55, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6054400, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 82, 52, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7530816, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 82, 53, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7684000, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 81, 86, 45, 52, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2937856, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 83, 50, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4948608, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 83, 49, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7542528, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7562048, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 53, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7753344, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 53, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7816704, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 54, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10843712, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 55, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10834368, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 55, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12310144, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 56, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15499264, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 90, 49, 48, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7426656, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 80, 53, 48, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9313536, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 80, 54, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10979200, 0, 0, 0, 67, 65, 83, 73, 79, 0, 0, 0, 0, 0, 0, 0, 69, 88, 45, 80, 55, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3178560, 0, 0, 0, 80, 69, 78, 84, 65, 88, 0, 0, 0, 0, 0, 0, 79, 112, 116, 105, 111, 32, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4841984, 0, 0, 0, 80, 69, 78, 84, 65, 88, 0, 0, 0, 0, 0, 0, 79, 112, 116, 105, 111, 32, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6114240, 0, 0, 0, 80, 69, 78, 84, 65, 88, 0, 0, 0, 0, 0, 0, 79, 112, 116, 105, 111, 32, 83, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10702848, 0, 0, 0, 80, 69, 78, 84, 65, 88, 0, 0, 0, 0, 0, 0, 79, 112, 116, 105, 111, 32, 55, 53, 48, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15980544, 0, 0, 0, 65, 71, 70, 65, 80, 72, 79, 84, 79, 0, 0, 0, 68, 67, 45, 56, 51, 51, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16098048, 0, 0, 0, 83, 65, 77, 83, 85, 78, 71, 0, 0, 0, 0, 0, 83, 56, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16215552, 0, 0, 0, 83, 65, 77, 83, 85, 78, 71, 0, 0, 0, 0, 0, 83, 56, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20487168, 0, 0, 0, 83, 65, 77, 83, 85, 78, 71, 0, 0, 0, 0, 0, 87, 66, 53, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24000000, 0, 0, 0, 83, 65, 77, 83, 85, 78, 71, 0, 0, 0, 0, 0, 87, 66, 53, 53, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12582980, 0, 0, 0, 83, 105, 110, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33292868, 0, 0, 0, 83, 105, 110, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44390468, 0, 0, 0, 83, 105, 110, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_STATIC);
_identify_corp=allocate(64, "*", ALLOC_STATIC);
__str544=allocate([77,73,78,79,76,84,65,0] /* MINOLTA\00 */, "i8", ALLOC_STATIC);
__str545=allocate([77,105,110,111,108,116,97,0] /* Minolta\00 */, "i8", ALLOC_STATIC);
__str546=allocate([75,111,110,105,99,97,0] /* Konica\00 */, "i8", ALLOC_STATIC);
__str547=allocate([67,65,83,73,79,0] /* CASIO\00 */, "i8", ALLOC_STATIC);
__str548=allocate([77,97,109,105,121,97,0] /* Mamiya\00 */, "i8", ALLOC_STATIC);
__str549=allocate([77,79,84,79,82,79,76,65,0] /* MOTOROLA\00 */, "i8", ALLOC_STATIC);
_zero_is_bad=allocate(1, "i32", ALLOC_STATIC);
__str550=allocate([72,69,65,80,67,67,68,82,0] /* HEAPCCDR\00 */, "i8", ALLOC_STATIC);
__str551=allocate([255,216,255,225,0] /* \FF\D8\FF\E1\00 */, "i8", ALLOC_STATIC);
__str552=allocate([69,120,105,102,0] /* Exif\00 */, "i8", ALLOC_STATIC);
__str553=allocate([65,82,69,67,79,89,75,0] /* ARECOYK\00 */, "i8", ALLOC_STATIC);
__str554=allocate([67,111,110,116,97,120,0] /* Contax\00 */, "i8", ALLOC_STATIC);
__str555=allocate([78,32,68,105,103,105,116,97,108,0] /* N Digital\00 */, "i8", ALLOC_STATIC);
__str556=allocate([80,88,78,0] /* PXN\00 */, "i8", ALLOC_STATIC);
__str557=allocate([76,111,103,105,116,101,99,104,0] /* Logitech\00 */, "i8", ALLOC_STATIC);
__str558=allocate([70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0] /* Fotoman Pixtura\00 */, "i8", ALLOC_STATIC);
__str559=allocate([113,107,116,107,0] /* qktk\00 */, "i8", ALLOC_STATIC);
__str560=allocate([65,112,112,108,101,0] /* Apple\00 */, "i8", ALLOC_STATIC);
__str561=allocate([81,117,105,99,107,84,97,107,101,32,49,48,48,0] /* QuickTake 100\00 */, "i8", ALLOC_STATIC);
__str562=allocate([113,107,116,110,0] /* qktn\00 */, "i8", ALLOC_STATIC);
__str563=allocate([81,117,105,99,107,84,97,107,101,32,49,53,48,0] /* QuickTake 150\00 */, "i8", ALLOC_STATIC);
__str564=allocate([0,1,0,1,0,64,0] /* \00\01\00\01\00@\00 */, "i8", ALLOC_STATIC);
__str565=allocate([78,79,75,73,65,82,65,87,0] /* NOKIARAW\00 */, "i8", ALLOC_STATIC);
__str566=allocate([78,79,75,73,65,0] /* NOKIA\00 */, "i8", ALLOC_STATIC);
__str567=allocate([88,50,0] /* X2\00 */, "i8", ALLOC_STATIC);
__str568=allocate([65,82,82,73,0] /* ARRI\00 */, "i8", ALLOC_STATIC);
__str569=allocate([82,69,68,49,0] /* RED1\00 */, "i8", ALLOC_STATIC);
__str570=allocate([82,69,68,0] /* RED\00 */, "i8", ALLOC_STATIC);
__str571=allocate([79,78,69,0] /* ONE\00 */, "i8", ALLOC_STATIC);
__str572=allocate([68,83,67,45,73,109,97,103,101,0] /* DSC-Image\00 */, "i8", ALLOC_STATIC);
__str573=allocate([80,87,65,68,0] /* PWAD\00 */, "i8", ALLOC_STATIC);
__str574=allocate([0,77,82,77,0] /* \00MRM\00 */, "i8", ALLOC_STATIC);
__str575=allocate([70,79,86,98,0] /* FOVb\00 */, "i8", ALLOC_STATIC);
__str576=allocate([67,73,0] /* CI\00 */, "i8", ALLOC_STATIC);
__str577=allocate([32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0] /*  DIGITAL CAMERA\00 */, "i8", ALLOC_STATIC);
__str578=allocate([32,68,105,103,105,116,97,108,32,67,97,109,101,114,97,0] /*  Digital Camera\00 */, "i8", ALLOC_STATIC);
__str579=allocate([70,73,76,69,32,86,69,82,83,73,79,78,0] /* FILE VERSION\00 */, "i8", ALLOC_STATIC);
__str580=allocate([68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0] /* Digital Camera \00 */, "i8", ALLOC_STATIC);
__str581=allocate([75,45,114,0] /* K-r\00 */, "i8", ALLOC_STATIC);
__str582=allocate([75,45,120,0] /* K-x\00 */, "i8", ALLOC_STATIC);
__str583=allocate([75,45,53,0] /* K-5\00 */, "i8", ALLOC_STATIC);
__str584=allocate([75,45,55,0] /* K-7\00 */, "i8", ALLOC_STATIC);
__str585=allocate([54,52,53,68,0] /* 645D\00 */, "i8", ALLOC_STATIC);
__str586=allocate([80,111,119,101,114,83,104,111,116,32,54,48,48,0] /* PowerShot 600\00 */, "i8", ALLOC_STATIC);
__str587=allocate([80,111,119,101,114,83,104,111,116,32,65,53,0] /* PowerShot A5\00 */, "i8", ALLOC_STATIC);
__str588=allocate([80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0] /* PowerShot A5 Zoom\00 */, "i8", ALLOC_STATIC);
__str589=allocate([80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* PowerShot A50\00 */, "i8", ALLOC_STATIC);
__str590=allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* PowerShot Pro70\00 */, "i8", ALLOC_STATIC);
__str591=allocate([80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0] /* PowerShot SD300\00 */, "i8", ALLOC_STATIC);
__str592=allocate([80,111,119,101,114,83,104,111,116,32,65,52,54,48,0] /* PowerShot A460\00 */, "i8", ALLOC_STATIC);
__str593=allocate([80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* PowerShot A530\00 */, "i8", ALLOC_STATIC);
__str594=allocate([80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* PowerShot A610\00 */, "i8", ALLOC_STATIC);
__str595=allocate([83,50,32,73,83,0] /* S2 IS\00 */, "i8", ALLOC_STATIC);
__str596=allocate([80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* PowerShot A620\00 */, "i8", ALLOC_STATIC);
__str597=allocate([80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* PowerShot A470\00 */, "i8", ALLOC_STATIC);
__str598=allocate([80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0] /* PowerShot A720 IS\00 */, "i8", ALLOC_STATIC);
__str599=allocate([80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* PowerShot A630\00 */, "i8", ALLOC_STATIC);
__str600=allocate([80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* PowerShot A640\00 */, "i8", ALLOC_STATIC);
__str601=allocate([80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* PowerShot A650\00 */, "i8", ALLOC_STATIC);
__str602=allocate([80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* PowerShot S3 IS\00 */, "i8", ALLOC_STATIC);
__str603=allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* PowerShot SX110 IS\0 */, "i8", ALLOC_STATIC);
__str604=allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0] /* PowerShot SX120 IS\0 */, "i8", ALLOC_STATIC);
__str605=allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0] /* PowerShot SX20 IS\00 */, "i8", ALLOC_STATIC);
__str606=allocate([80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0] /* PowerShot SX30 IS\00 */, "i8", ALLOC_STATIC);
__str607=allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0] /* PowerShot Pro90 IS\0 */, "i8", ALLOC_STATIC);
__str608=allocate([80,111,119,101,114,83,104,111,116,32,71,49,0] /* PowerShot G1\00 */, "i8", ALLOC_STATIC);
__str609=allocate([69,79,83,32,51,48,48,68,0] /* EOS 300D\00 */, "i8", ALLOC_STATIC);
__str610=allocate([69,79,83,32,68,50,48,48,48,67,0] /* EOS D2000C\00 */, "i8", ALLOC_STATIC);
__str611=allocate([69,79,83,32,51,53,48,68,0] /* EOS 350D\00 */, "i8", ALLOC_STATIC);
__str612=allocate([69,79,83,32,52,48,48,68,0] /* EOS 400D\00 */, "i8", ALLOC_STATIC);
__str613=allocate([69,79,83,32,49,48,48,48,68,0] /* EOS 1000D\00 */, "i8", ALLOC_STATIC);
__str614=allocate([69,79,83,32,52,53,48,68,0] /* EOS 450D\00 */, "i8", ALLOC_STATIC);
__str615=allocate([69,79,83,32,49,49,48,48,68,0] /* EOS 1100D\00 */, "i8", ALLOC_STATIC);
__str616=allocate([69,79,83,32,53,48,48,68,0] /* EOS 500D\00 */, "i8", ALLOC_STATIC);
__str617=allocate([69,79,83,32,53,53,48,68,0] /* EOS 550D\00 */, "i8", ALLOC_STATIC);
__str618=allocate([69,79,83,32,54,48,48,68,0] /* EOS 600D\00 */, "i8", ALLOC_STATIC);
__str619=allocate([68,49,0] /* D1\00 */, "i8", ALLOC_STATIC);
__str620=allocate([68,49,88,0] /* D1X\00 */, "i8", ALLOC_STATIC);
__str621=allocate([68,52,48,88,0] /* D40X\00 */, "i8", ALLOC_STATIC);
__str622=allocate([68,54,48,0] /* D60\00 */, "i8", ALLOC_STATIC);
__str623=allocate([68,56,48,0] /* D80\00 */, "i8", ALLOC_STATIC);
__str624=allocate([68,51,48,48,48,0] /* D3000\00 */, "i8", ALLOC_STATIC);
__str625=allocate([68,51,0] /* D3\00 */, "i8", ALLOC_STATIC);
__str626=allocate([68,51,83,0] /* D3S\00 */, "i8", ALLOC_STATIC);
__str627=allocate([68,55,48,48,0] /* D700\00 */, "i8", ALLOC_STATIC);
__str628=allocate([68,53,48,48,48,0] /* D5000\00 */, "i8", ALLOC_STATIC);
__str629=allocate([68,53,49,48,48,0] /* D5100\00 */, "i8", ALLOC_STATIC);
__str630=allocate([68,55,48,48,48,0] /* D7000\00 */, "i8", ALLOC_STATIC);
__str631=allocate([68,51,49,48,48,0] /* D3100\00 */, "i8", ALLOC_STATIC);
__str632=allocate([68,52,48,0] /* D40\00 */, "i8", ALLOC_STATIC);
__str633=allocate([68,53,48,0] /* D50\00 */, "i8", ALLOC_STATIC);
__str634=allocate([68,55,48,0] /* D70\00 */, "i8", ALLOC_STATIC);
__str635=allocate([68,57,48,0] /* D90\00 */, "i8", ALLOC_STATIC);
__str636=allocate([68,49,48,48,0] /* D100\00 */, "i8", ALLOC_STATIC);
__str637=allocate([68,50,48,48,0] /* D200\00 */, "i8", ALLOC_STATIC);
__str638=allocate([68,50,72,0] /* D2H\00 */, "i8", ALLOC_STATIC);
__str639=allocate([68,50,88,0] /* D2X\00 */, "i8", ALLOC_STATIC);
__str640=allocate([68,51,48,48,0] /* D300\00 */, "i8", ALLOC_STATIC);
__str641=allocate([67,79,79,76,80,73,88,32,80,0] /* COOLPIX P\00 */, "i8", ALLOC_STATIC);
__str642=allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_STATIC);
__str643=allocate([69,57,53,48,0] /* E950\00 */, "i8", ALLOC_STATIC);
__str644=allocate([69,57,57,53,0] /* E995\00 */, "i8", ALLOC_STATIC);
__str645=allocate([69,50,49,48,48,0] /* E2100\00 */, "i8", ALLOC_STATIC);
__str646=allocate([69,50,53,48,48,0] /* E2500\00 */, "i8", ALLOC_STATIC);
__str647=allocate([79,112,116,105,111,32,51,51,87,82,0] /* Optio 33WR\00 */, "i8", ALLOC_STATIC);
__str648=allocate([68,105,77,65,71,69,32,90,50,0] /* DiMAGE Z2\00 */, "i8", ALLOC_STATIC);
__str649=allocate([69,52,53,48,48,0] /* E4500\00 */, "i8", ALLOC_STATIC);
__str650=allocate([83,50,80,114,111,0] /* S2Pro\00 */, "i8", ALLOC_STATIC);
__str651=allocate([32,83,50,80,114,111,0] /*  S2Pro\00 */, "i8", ALLOC_STATIC);
__str652=allocate([88,49,48,0] /* X10\00 */, "i8", ALLOC_STATIC);
__str653=allocate([82,68,49,55,53,0] /* RD175\00 */, "i8", ALLOC_STATIC);
__str654=allocate([75,68,45,52,48,48,90,0] /* KD-400Z\00 */, "i8", ALLOC_STATIC);
__str655=allocate([75,68,45,53,49,48,90,0] /* KD-510Z\00 */, "i8", ALLOC_STATIC);
__str656=allocate([68,105,77,65,71,69,32,65,0] /* DiMAGE A\00 */, "i8", ALLOC_STATIC);
__str657=allocate([65,76,80,72,65,0] /* ALPHA\00 */, "i8", ALLOC_STATIC);
__str658=allocate([68,89,78,65,88,0] /* DYNAX\00 */, "i8", ALLOC_STATIC);
__str659=allocate([77,65,88,88,85,77,0] /* MAXXUM\00 */, "i8", ALLOC_STATIC);
__str660=allocate([68,89,78,65,88,32,37,45,49,48,115,0] /* DYNAX %-10s\00 */, "i8", ALLOC_STATIC);
__str661=allocate([68,105,77,65,71,69,32,71,0] /* DiMAGE G\00 */, "i8", ALLOC_STATIC);
__str662=allocate([42,105,115,116,32,68,0] /* _ist D\00 */, "i8", ALLOC_STATIC);
__str663=allocate([42,105,115,116,32,68,83,0] /* _ist DS\00 */, "i8", ALLOC_STATIC);
__str664=allocate([79,112,116,105,111,32,83,0] /* Optio S\00 */, "i8", ALLOC_STATIC);
__str665=allocate([79,112,116,105,111,32,55,53,48,90,0] /* Optio 750Z\00 */, "i8", ALLOC_STATIC);
__str666=allocate([68,67,45,56,51,51,109,0] /* DC-833m\00 */, "i8", ALLOC_STATIC);
__str667=allocate([83,56,53,0] /* S85\00 */, "i8", ALLOC_STATIC);
__str668=allocate([78,88,49,0] /* NX1\00 */, "i8", ALLOC_STATIC);
__str669=allocate([78,88,50,48,48,0] /* NX200\00 */, "i8", ALLOC_STATIC);
__str670=allocate([69,88,49,0] /* EX1\00 */, "i8", ALLOC_STATIC);
__str671=allocate([87,66,50,48,48,48,0] /* WB2000\00 */, "i8", ALLOC_STATIC);
__str672=allocate([87,66,53,53,48,0] /* WB550\00 */, "i8", ALLOC_STATIC);
__str673=allocate([83,84,86,54,56,48,32,86,71,65,0] /* STV680 VGA\00 */, "i8", ALLOC_STATIC);
__str674=allocate([78,57,53,0] /* N95\00 */, "i8", ALLOC_STATIC);
__str675=allocate([53,51,49,67,0] /* 531C\00 */, "i8", ALLOC_STATIC);
__str676=allocate([70,45,48,56,48,67,0] /* F-080C\00 */, "i8", ALLOC_STATIC);
__str677=allocate([70,45,49,52,53,67,0] /* F-145C\00 */, "i8", ALLOC_STATIC);
__str678=allocate([70,45,50,48,49,67,0] /* F-201C\00 */, "i8", ALLOC_STATIC);
__str679=allocate([70,45,53,49,48,67,0] /* F-510C\00 */, "i8", ALLOC_STATIC);
__str680=allocate([70,45,56,49,48,67,0] /* F-810C\00 */, "i8", ALLOC_STATIC);
__str681=allocate([88,67,68,45,83,88,57,49,48,67,82,0] /* XCD-SX910CR\00 */, "i8", ALLOC_STATIC);
__str682=allocate([50,48,49,48,0] /* 2010\00 */, "i8", ALLOC_STATIC);
__str683=allocate([65,55,56,50,0] /* A782\00 */, "i8", ALLOC_STATIC);
__str684=allocate([51,51,50,48,65,70,0] /* 3320AF\00 */, "i8", ALLOC_STATIC);
__str685=allocate([73,83,71,0] /* ISG\00 */, "i8", ALLOC_STATIC);
__str686=allocate([86,57,54,67,0] /* V96C\00 */, "i8", ALLOC_STATIC);
__str687=allocate([56,66,80,83,0] /* 8BPS\00 */, "i8", ALLOC_STATIC);
__str688=allocate([82,66,84,71,0] /* RBTG\00 */, "i8", ALLOC_STATIC);
__str689=allocate([67,97,116,99,104,76,105,103,104,116,0] /* CatchLight\00 */, "i8", ALLOC_STATIC);
__str690=allocate([148,97,73,22,0] /* \94aI\16\00 */, "i8", ALLOC_STATIC);
__str691=allocate([67,55,55,48,85,90,0] /* C770UZ\00 */, "i8", ALLOC_STATIC);
__str692=allocate([69,45,51,48,48,0] /* E-300\00 */, "i8", ALLOC_STATIC);
__str693=allocate([69,45,53,48,48,0] /* E-500\00 */, "i8", ALLOC_STATIC);
__str694=allocate([69,45,51,51,48,0] /* E-330\00 */, "i8", ALLOC_STATIC);
__str695=allocate([83,80,53,53,48,85,90,0] /* SP550UZ\00 */, "i8", ALLOC_STATIC);
__str696=allocate([68,83,67,45,70,56,50,56,0] /* DSC-F828\00 */, "i8", ALLOC_STATIC);
__str697=allocate([82,71,66,69,0] /* RGBE\00 */, "i8", ALLOC_STATIC);
__str698=allocate([68,83,67,45,86,51,0] /* DSC-V3\00 */, "i8", ALLOC_STATIC);
__str699=allocate([68,83,67,45,82,49,0] /* DSC-R1\00 */, "i8", ALLOC_STATIC);
__str700=allocate([68,83,76,82,45,65,51,53,48,0] /* DSLR-A350\00 */, "i8", ALLOC_STATIC);
__str701=allocate([80,73,88,76,0] /* PIXL\00 */, "i8", ALLOC_STATIC);
__str702=allocate([67,54,48,51,118,0] /* C603v\00 */, "i8", ALLOC_STATIC);
__str703=allocate([75,65,73,45,48,51,52,48,0] /* KAI-0340\00 */, "i8", ALLOC_STATIC);
__str704=allocate([67,54,48,51,121,0] /* C603y\00 */, "i8", ALLOC_STATIC);
__str705=allocate([67,54,48,51,0] /* C603\00 */, "i8", ALLOC_STATIC);
__str706=allocate([67,51,51,48,0] /* C330\00 */, "i8", ALLOC_STATIC);
__str707=allocate([69,97,115,121,83,104,97,114,101,0] /* EasyShare\00 */, "i8", ALLOC_STATIC);
__str708=allocate([78,67,50,48,48,48,0] /* NC2000\00 */, "i8", ALLOC_STATIC);
__str709=allocate([69,79,83,68,67,83,51,66,0] /* EOSDCS3B\00 */, "i8", ALLOC_STATIC);
__str710=allocate([69,79,83,68,67,83,49,0] /* EOSDCS1\00 */, "i8", ALLOC_STATIC);
__str711=allocate([68,67,83,52,50,48,0] /* DCS420\00 */, "i8", ALLOC_STATIC);
__str712=allocate([68,67,83,52,54,48,32,0] /* DCS460 \00 */, "i8", ALLOC_STATIC);
__str713=allocate([68,67,83,52,54,48,65,0] /* DCS460A\00 */, "i8", ALLOC_STATIC);
__str714=allocate([68,67,83,54,54,48,77,0] /* DCS660M\00 */, "i8", ALLOC_STATIC);
__str715=allocate([68,67,83,55,54,48,77,0] /* DCS760M\00 */, "i8", ALLOC_STATIC);
__str716=allocate([50,48,88,0] /* 20X\00 */, "i8", ALLOC_STATIC);
__str717=allocate([77,89,67,89,0] /* MYCY\00 */, "i8", ALLOC_STATIC);
__str718=allocate([68,67,50,53,0] /* DC25\00 */, "i8", ALLOC_STATIC);
__str719=allocate([52,48,0] /* 40\00 */, "i8", ALLOC_STATIC);
__str720=allocate([68,67,52,48,0] /* DC40\00 */, "i8", ALLOC_STATIC);
__str721=allocate([68,67,53,48,0] /* DC50\00 */, "i8", ALLOC_STATIC);
__str722=allocate([68,67,49,50,48,0] /* DC120\00 */, "i8", ALLOC_STATIC);
__str723=allocate([68,67,83,50,48,48,0] /* DCS200\00 */, "i8", ALLOC_STATIC);
__str724=allocate([81,117,105,99,107,84,97,107,101,0] /* QuickTake\00 */, "i8", ALLOC_STATIC);
__str725=allocate([50,48,48,0] /* 200\00 */, "i8", ALLOC_STATIC);
__str726=allocate([80,67,45,67,65,77,32,54,48,48,0] /* PC-CAM 600\00 */, "i8", ALLOC_STATIC);
__str727=allocate([81,86,45,50,48,48,48,85,88,0] /* QV-2000UX\00 */, "i8", ALLOC_STATIC);
__str728=allocate([81,86,45,52,48,48,48,0] /* QV-4000\00 */, "i8", ALLOC_STATIC);
__str729=allocate([81,86,45,53,55,48,48,0] /* QV-5700\00 */, "i8", ALLOC_STATIC);
__str730=allocate([81,86,45,82,52,49,0] /* QV-R41\00 */, "i8", ALLOC_STATIC);
__str731=allocate([81,86,45,82,53,49,0] /* QV-R51\00 */, "i8", ALLOC_STATIC);
__str732=allocate([69,88,45,83,50,48,0] /* EX-S20\00 */, "i8", ALLOC_STATIC);
__str733=allocate([69,88,45,83,49,48,48,0] /* EX-S100\00 */, "i8", ALLOC_STATIC);
__str734=allocate([69,88,45,90,53,48,0] /* EX-Z50\00 */, "i8", ALLOC_STATIC);
__str735=allocate([69,88,45,90,53,48,48,0] /* EX-Z500\00 */, "i8", ALLOC_STATIC);
__str736=allocate([69,88,45,90,53,53,0] /* EX-Z55\00 */, "i8", ALLOC_STATIC);
__str737=allocate([69,88,45,90,54,48,0] /* EX-Z60\00 */, "i8", ALLOC_STATIC);
__str738=allocate([69,88,45,90,55,53,0] /* EX-Z75\00 */, "i8", ALLOC_STATIC);
__str739=allocate([69,88,45,90,55,53,48,0] /* EX-Z750\00 */, "i8", ALLOC_STATIC);
__str740=allocate([69,88,45,90,56,53,48,0] /* EX-Z850\00 */, "i8", ALLOC_STATIC);
__str741=allocate([69,88,45,80,53,48,53,0] /* EX-P505\00 */, "i8", ALLOC_STATIC);
__str742=allocate([69,88,45,80,55,48,48,0] /* EX-P700\00 */, "i8", ALLOC_STATIC);
__str743=allocate([37,100,120,37,100,0] /* %dx%d\00 */, "i8", ALLOC_STATIC);
__str744=allocate([81,117,105,99,107,116,97,107,101,0] /* Quicktake\00 */, "i8", ALLOC_STATIC);
__str745=allocate([37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0] /* %s: You must link dc */, "i8", ALLOC_STATIC);
__str746=allocate([108,105,98,106,97,115,112,101,114,0] /* libjasper\00 */, "i8", ALLOC_STATIC);
__str747=allocate([108,105,98,106,112,101,103,0] /* libjpeg\00 */, "i8", ALLOC_STATIC);
__str748=allocate([82,71,66,71,0] /* RGBG\00 */, "i8", ALLOC_STATIC);
__str749=allocate([71,77,67,89,0] /* GMCY\00 */, "i8", ALLOC_STATIC);
_convert_to_rgb_xyzd50_srgb=allocate([0.436083, 0, 0, 0, 0, 0, 0, 0, 0.385083, 0, 0, 0, 0, 0, 0, 0, 0.143055, 0, 0, 0, 0, 0, 0, 0, 0.222507, 0, 0, 0, 0, 0, 0, 0, 0.716888, 0, 0, 0, 0, 0, 0, 0, 0.060608, 0, 0, 0, 0, 0, 0, 0, 0.01393, 0, 0, 0, 0, 0, 0, 0, 0.097097, 0, 0, 0, 0, 0, 0, 0, 0.714022, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_convert_to_rgb_rgb_rgb=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_convert_to_rgb_adobe_rgb=allocate([0.715146, 0, 0, 0, 0, 0, 0, 0, 0.284856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.041166, 0, 0, 0, 0, 0, 0, 0, 0.958839, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_convert_to_rgb_wide_rgb=allocate([0.593087, 0, 0, 0, 0, 0, 0, 0, 0.40471, 0, 0, 0, 0, 0, 0, 0, 0.002206, 0, 0, 0, 0, 0, 0, 0, 0.095413, 0, 0, 0, 0, 0, 0, 0, 0.843149, 0, 0, 0, 0, 0, 0, 0, 0.061439, 0, 0, 0, 0, 0, 0, 0, 0.011621, 0, 0, 0, 0, 0, 0, 0, 0.069091, 0, 0, 0, 0, 0, 0, 0, 0.919288, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_convert_to_rgb_prophoto_rgb=allocate([0.529317, 0, 0, 0, 0, 0, 0, 0, 0.330092, 0, 0, 0, 0, 0, 0, 0, 0.140588, 0, 0, 0, 0, 0, 0, 0, 0.098368, 0, 0, 0, 0, 0, 0, 0, 0.873465, 0, 0, 0, 0, 0, 0, 0, 0.028169, 0, 0, 0, 0, 0, 0, 0, 0.016879, 0, 0, 0, 0, 0, 0, 0, 0.117663, 0, 0, 0, 0, 0, 0, 0, 0.865457, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
_convert_to_rgb_out_rgb=allocate(20, "*", ALLOC_STATIC);
_convert_to_rgb_name=allocate(20, "*", ALLOC_STATIC);
__str750=allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_STATIC);
__str751=allocate([65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0] /* Adobe RGB (1998)\00 */, "i8", ALLOC_STATIC);
__str752=allocate([87,105,100,101,71,97,109,117,116,32,68,54,53,0] /* WideGamut D65\00 */, "i8", ALLOC_STATIC);
__str753=allocate([80,114,111,80,104,111,116,111,32,68,54,53,0] /* ProPhoto D65\00 */, "i8", ALLOC_STATIC);
__str754=allocate([88,89,90,0] /* XYZ\00 */, "i8", ALLOC_STATIC);
_convert_to_rgb_phead=allocate([1024, 0, 0, 0, 0, 0, 0, 0, 34603008, 0, 0, 0, 1835955314, 0, 0, 0, 1380401696, 0, 0, 0, 1482250784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1633907568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1852796517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63190, 0, 0, 0, 65536, 0, 0, 0, 54061, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_convert_to_rgb_pbody=allocate([10, 0, 0, 0, 1668313716, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 1684370275, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 2004119668, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 1651208308, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 1918128707, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1733579331, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1649693251, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 1918392666, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 1733843290, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 1649957210, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_convert_to_rgb_pwhite=allocate([62289, 0, 0, 0, 65536, 0, 0, 0, 71372, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_convert_to_rgb_pcurve=allocate([1668641398, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16777216, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_oprof=allocate(1, "i32*", ALLOC_STATIC);
__str755=allocate([99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0] /* convert_to_rgb()\00 */, "i8", ALLOC_STATIC);
__str756=allocate([97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0] /* auto-generated by dc */, "i8", ALLOC_STATIC);
__str757=allocate([66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0] /* Building histograms. */, "i8", ALLOC_STATIC);
__str758=allocate([67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10,0] /* Converting to %s col */, "i8", ALLOC_STATIC);
_histogram=allocate(131072, "i32", ALLOC_STATIC);
__str759=allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0] /* Rotating image 45 de */, "i8", ALLOC_STATIC);
__str760=allocate([102,117,106,105,95,114,111,116,97,116,101,40,41,0] /* fuji_rotate()\00 */, "i8", ALLOC_STATIC);
__str761=allocate([83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0] /* Stretching the image */, "i8", ALLOC_STATIC);
__str762=allocate([115,116,114,101,116,99,104,40,41,0] /* stretch()\00 */, "i8", ALLOC_STATIC);
__str763=allocate([49,50,52,51,53,56,54,55,0] /* 12435867\00 */, "i8", ALLOC_STATIC);
__str764=allocate([100,99,114,97,119,32,118,57,46,49,50,0] /* dcraw v9.12\00 */, "i8", ALLOC_STATIC);
__str765=allocate([37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0] /* %04d:%02d:%02d %02d: */, "i8", ALLOC_STATIC);
__str766=allocate([106,112,101,103,95,116,104,117,109,98,40,41,0] /* jpeg_thumb()\00 */, "i8", ALLOC_STATIC);
__str767=allocate([255,225,32,32,69,120,105,102,0,0,0] /* \FF\E1  Exif\00\00\0 */, "i8", ALLOC_STATIC);
__str768=allocate([119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0] /* write_ppm_tiff()\00 */, "i8", ALLOC_STATIC);
__str769=allocate([80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0] /* P7\0AWIDTH %d\0AHEIG */, "i8", ALLOC_STATIC);
__str770=allocate([80,37,100,10,37,100,32,37,100,10,37,100,10,0] /* P%d\0A%d %d\0A%d\0A\ */, "i8", ALLOC_STATIC);
__str771=allocate([84,90,61,85,84,67,0] /* TZ=UTC\00 */, "i8", ALLOC_STATIC);
__str772=allocate([10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0] /* \0ARaw photo decoder */, "i8", ALLOC_STATIC);
__str773=allocate([57,46,49,50,0] /* 9.12\00 */, "i8", ALLOC_STATIC);
__str774=allocate([10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,10,0] /* \0Aby Dave Coffin, d */, "i8", ALLOC_STATIC);
__str775=allocate([10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0] /* \0AUsage:  %s [OPTIO */, "i8", ALLOC_STATIC);
__str776=allocate([45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0] /* -v        Print verb */, "i8", ALLOC_STATIC);
__str777=allocate([45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* -c        Write imag */, "i8", ALLOC_STATIC);
__str778=allocate([45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0] /* -e        Extract em */, "i8", ALLOC_STATIC);
__str779=allocate([45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0] /* -i        Identify f */, "i8", ALLOC_STATIC);
__str780=allocate([45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0] /* -i -v     Identify f */, "i8", ALLOC_STATIC);
__str781=allocate([45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0] /* -z        Change fil */, "i8", ALLOC_STATIC);
__str782=allocate([45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0] /* -w        Use camera */, "i8", ALLOC_STATIC);
__str783=allocate([45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -a        Average th */, "i8", ALLOC_STATIC);
__str784=allocate([45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -A <x y w h> Average */, "i8", ALLOC_STATIC);
__str785=allocate([45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -r <r g b g> Set cus */, "i8", ALLOC_STATIC);
__str786=allocate([43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0] /* +M/-M     Use/don't  */, "i8", ALLOC_STATIC);
__str787=allocate([45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0] /* -C <r b>  Correct ch */, "i8", ALLOC_STATIC);
__str788=allocate([45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0] /* -P <file> Fix the de */, "i8", ALLOC_STATIC);
__str789=allocate([45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0] /* -K <file> Subtract d */, "i8", ALLOC_STATIC);
__str790=allocate([45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0] /* -k <num>  Set the da */, "i8", ALLOC_STATIC);
__str791=allocate([45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0] /* -S <num>  Set the sa */, "i8", ALLOC_STATIC);
__str792=allocate([45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0] /* -n <num>  Set thresh */, "i8", ALLOC_STATIC);
__str793=allocate([45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0] /* -H [0-9]  Highlight  */, "i8", ALLOC_STATIC);
__str794=allocate([45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0] /* -t [0-7]  Flip image */, "i8", ALLOC_STATIC);
__str795=allocate([45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0] /* -o [0-5]  Output col */, "i8", ALLOC_STATIC);
__str796=allocate([45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0] /* -d        Document m */, "i8", ALLOC_STATIC);
__str797=allocate([45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0] /* -D        Document m */, "i8", ALLOC_STATIC);
__str798=allocate([45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0] /* -j        Don't stre */, "i8", ALLOC_STATIC);
__str799=allocate([45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0] /* -W        Don't auto */, "i8", ALLOC_STATIC);
__str800=allocate([45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0] /* -b <num>  Adjust bri */, "i8", ALLOC_STATIC);
__str801=allocate([45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0] /* -g <p ts> Set custom */, "i8", ALLOC_STATIC);
__str802=allocate([45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0] /* -q [0-3]  Set the in */, "i8", ALLOC_STATIC);
__str803=allocate([45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0] /* -h        Half-size  */, "i8", ALLOC_STATIC);
__str804=allocate([45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0] /* -f        Interpolat */, "i8", ALLOC_STATIC);
__str805=allocate([45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0] /* -m <num>  Apply a 3x */, "i8", ALLOC_STATIC);
__str806=allocate([45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0] /* -s [0..N-1] Select o */, "i8", ALLOC_STATIC);
__str807=allocate([45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0] /* -6        Write 16-b */, "i8", ALLOC_STATIC);
__str808=allocate([45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0] /* -4        Linear 16- */, "i8", ALLOC_STATIC);
__str809=allocate([45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0] /* -T        Write TIFF */, "i8", ALLOC_STATIC);
__str810=allocate([110,98,114,107,83,116,113,109,72,65,67,103,0] /* nbrkStqmHACg\00 */, "i8", ALLOC_STATIC);
__str811=allocate([49,49,52,49,49,49,49,49,49,52,50,50,0] /* 114111111422\00 */, "i8", ALLOC_STATIC);
__str812=allocate([78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0] /* Non-numeric argument */, "i8", ALLOC_STATIC);
__str813=allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_STATIC);
__str814=allocate([85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0] /* Unknown option \22-% */, "i8", ALLOC_STATIC);
__str815=allocate([78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0] /* No files to process. */, "i8", ALLOC_STATIC);
__str816=allocate([87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0] /* Will not write an im */, "i8", ALLOC_STATIC);
__str817=allocate([37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0] /* %s has no timestamp. */, "i8", ALLOC_STATIC);
__str818=allocate([37,49,48,108,100,37,49,48,100,32,37,115,10,0] /* %10ld%10d %s\0A\00 */, "i8", ALLOC_STATIC);
__str819=allocate([37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0] /* %s time set to %d.\0 */, "i8", ALLOC_STATIC);
_write_fun=allocate(1, "void (...)*", ALLOC_STATIC);
__str820=allocate([37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0] /* %s has no thumbnail. */, "i8", ALLOC_STATIC);
__str821=allocate([10,70,105,108,101,110,97,109,101,58,32,37,115,10,0] /* \0AFilename: %s\0A\0 */, "i8", ALLOC_STATIC);
__str822=allocate([84,105,109,101,115,116,97,109,112,58,32,37,115,0] /* Timestamp: %s\00 */, "i8", ALLOC_STATIC);
__str823=allocate([67,97,109,101,114,97,58,32,37,115,32,37,115,10,0] /* Camera: %s %s\0A\00 */, "i8", ALLOC_STATIC);
__str824=allocate([79,119,110,101,114,58,32,37,115,10,0] /* Owner: %s\0A\00 */, "i8", ALLOC_STATIC);
__str825=allocate([68,78,71,32,86,101,114,115,105,111,110,58,32,0] /* DNG Version: \00 */, "i8", ALLOC_STATIC);
__str826=allocate([37,100,37,99,0] /* %d%c\00 */, "i8", ALLOC_STATIC);
__str827=allocate([73,83,79,32,115,112,101,101,100,58,32,37,100,10,0] /* ISO speed: %d\0A\00 */, "i8", ALLOC_STATIC);
__str828=allocate([83,104,117,116,116,101,114,58,32,0] /* Shutter: \00 */, "i8", ALLOC_STATIC);
__str829=allocate([49,47,0] /* 1/\00 */, "i8", ALLOC_STATIC);
__str830=allocate([37,48,46,49,102,32,115,101,99,10,0] /* %0.1f sec\0A\00 */, "i8", ALLOC_STATIC);
__str831=allocate([65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0] /* Aperture: f/%0.1f\0A */, "i8", ALLOC_STATIC);
__str832=allocate([70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0] /* Focal length: %0.1f  */, "i8", ALLOC_STATIC);
__str833=allocate([69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0] /* Embedded ICC profile */, "i8", ALLOC_STATIC);
__str834=allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_STATIC);
__str835=allocate([110,111,0] /* no\00 */, "i8", ALLOC_STATIC);
__str836=allocate([78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0] /* Number of raw images */, "i8", ALLOC_STATIC);
__str837=allocate([80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0] /* Pixel Aspect Ratio:  */, "i8", ALLOC_STATIC);
__str838=allocate([84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Thumb size:  %4d x % */, "i8", ALLOC_STATIC);
__str839=allocate([70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0] /* Full size:   %4d x % */, "i8", ALLOC_STATIC);
__str840=allocate([67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0] /* Cannot decode file % */, "i8", ALLOC_STATIC);
__str841=allocate([73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Image size:  %4d x % */, "i8", ALLOC_STATIC);
__str842=allocate([79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0] /* Output size: %4d x % */, "i8", ALLOC_STATIC);
__str843=allocate([82,97,119,32,99,111,108,111,114,115,58,32,37,100,0] /* Raw colors: %d\00 */, "i8", ALLOC_STATIC);
__str844=allocate([10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0] /* \0AFilter pattern: \ */, "i8", ALLOC_STATIC);
__str845=allocate([10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ADaylight multipli */, "i8", ALLOC_STATIC);
__str846=allocate([10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ACamera multiplier */, "i8", ALLOC_STATIC);
__str847=allocate([37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0] /* %s is a %s %s image. */, "i8", ALLOC_STATIC);
__str848=allocate([109,97,105,110,40,41,0] /* main()\00 */, "i8", ALLOC_STATIC);
__str849=allocate([76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Loading %s %s image  */, "i8", ALLOC_STATIC);
__str850=allocate([37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0] /* %s: \22-s %d\22 requ */, "i8", ALLOC_STATIC);
__str851=allocate([46,116,105,102,102,0] /* .tiff\00 */, "i8", ALLOC_STATIC);
__str852=allocate([46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0] /* .pgm\00.ppm\00.ppm\0 */, "i8", ALLOC_STATIC);
__str853=allocate([115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* standard output\00 */, "i8", ALLOC_STATIC);
__str854=allocate([95,37,48,42,100,0] /* _%0_d\00 */, "i8", ALLOC_STATIC);
__str855=allocate([46,116,104,117,109,98,0] /* .thumb\00 */, "i8", ALLOC_STATIC);
__str856=allocate([119,98,0] /* wb\00 */, "i8", ALLOC_STATIC);
__str857=allocate([87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0] /* Writing data to %s . */, "i8", ALLOC_STATIC);
_second_decode=allocate(1, "%struct.decode*", ALLOC_STATIC);
__gm_=allocate(468, ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_mparams=allocate(24, "i32", ALLOC_STATIC);
__str858=allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_STATIC);
__str1859=allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_STATIC);
__str2860=allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_STATIC);
HEAP32[((_parse_mos_mod)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+4)>>2)]=((__str118)|0);
HEAP32[((_parse_mos_mod+8)>>2)]=((__str119)|0);
HEAP32[((_parse_mos_mod+12)>>2)]=((__str120)|0);
HEAP32[((_parse_mos_mod+16)>>2)]=((__str121)|0);
HEAP32[((_parse_mos_mod+20)>>2)]=((__str122)|0);
HEAP32[((_parse_mos_mod+24)>>2)]=((__str123)|0);
HEAP32[((_parse_mos_mod+28)>>2)]=((__str124)|0);
HEAP32[((_parse_mos_mod+32)>>2)]=((__str125)|0);
HEAP32[((_parse_mos_mod+36)>>2)]=((__str126)|0);
HEAP32[((_parse_mos_mod+40)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+44)>>2)]=((__str127)|0);
HEAP32[((_parse_mos_mod+48)>>2)]=((__str128)|0);
HEAP32[((_parse_mos_mod+52)>>2)]=((__str129)|0);
HEAP32[((_parse_mos_mod+56)>>2)]=((__str130)|0);
HEAP32[((_parse_mos_mod+60)>>2)]=((__str131)|0);
HEAP32[((_parse_mos_mod+64)>>2)]=((__str132)|0);
HEAP32[((_parse_mos_mod+68)>>2)]=((__str133)|0);
HEAP32[((_parse_mos_mod+72)>>2)]=((__str134)|0);
HEAP32[((_parse_mos_mod+76)>>2)]=((__str135)|0);
HEAP32[((_parse_mos_mod+80)>>2)]=((__str136)|0);
HEAP32[((_parse_mos_mod+84)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+88)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+92)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+96)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+100)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+104)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+108)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+112)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+116)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+120)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+124)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+128)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+132)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+136)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+140)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+144)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+148)>>2)]=((__str117)|0);
HEAP32[((_parse_mos_mod+152)>>2)]=((__str137)|0);
HEAP32[((_adobe_coeff_table)>>2)]=((__str222)|0);
HEAP32[((_adobe_coeff_table+32)>>2)]=((__str223)|0);
HEAP32[((_adobe_coeff_table+64)>>2)]=((__str224)|0);
HEAP32[((_adobe_coeff_table+96)>>2)]=((__str225)|0);
HEAP32[((_adobe_coeff_table+128)>>2)]=((__str226)|0);
HEAP32[((_adobe_coeff_table+160)>>2)]=((__str227)|0);
HEAP32[((_adobe_coeff_table+192)>>2)]=((__str228)|0);
HEAP32[((_adobe_coeff_table+224)>>2)]=((__str229)|0);
HEAP32[((_adobe_coeff_table+256)>>2)]=((__str230)|0);
HEAP32[((_adobe_coeff_table+288)>>2)]=((__str231)|0);
HEAP32[((_adobe_coeff_table+320)>>2)]=((__str232)|0);
HEAP32[((_adobe_coeff_table+352)>>2)]=((__str233)|0);
HEAP32[((_adobe_coeff_table+384)>>2)]=((__str234)|0);
HEAP32[((_adobe_coeff_table+416)>>2)]=((__str235)|0);
HEAP32[((_adobe_coeff_table+448)>>2)]=((__str236)|0);
HEAP32[((_adobe_coeff_table+480)>>2)]=((__str237)|0);
HEAP32[((_adobe_coeff_table+512)>>2)]=((__str238)|0);
HEAP32[((_adobe_coeff_table+544)>>2)]=((__str239)|0);
HEAP32[((_adobe_coeff_table+576)>>2)]=((__str240)|0);
HEAP32[((_adobe_coeff_table+608)>>2)]=((__str241)|0);
HEAP32[((_adobe_coeff_table+640)>>2)]=((__str242)|0);
HEAP32[((_adobe_coeff_table+672)>>2)]=((__str243)|0);
HEAP32[((_adobe_coeff_table+704)>>2)]=((__str244)|0);
HEAP32[((_adobe_coeff_table+736)>>2)]=((__str245)|0);
HEAP32[((_adobe_coeff_table+768)>>2)]=((__str246)|0);
HEAP32[((_adobe_coeff_table+800)>>2)]=((__str247)|0);
HEAP32[((_adobe_coeff_table+832)>>2)]=((__str248)|0);
HEAP32[((_adobe_coeff_table+864)>>2)]=((__str249)|0);
HEAP32[((_adobe_coeff_table+896)>>2)]=((__str250)|0);
HEAP32[((_adobe_coeff_table+928)>>2)]=((__str251)|0);
HEAP32[((_adobe_coeff_table+960)>>2)]=((__str252)|0);
HEAP32[((_adobe_coeff_table+992)>>2)]=((__str253)|0);
HEAP32[((_adobe_coeff_table+1024)>>2)]=((__str254)|0);
HEAP32[((_adobe_coeff_table+1056)>>2)]=((__str255)|0);
HEAP32[((_adobe_coeff_table+1088)>>2)]=((__str256)|0);
HEAP32[((_adobe_coeff_table+1120)>>2)]=((__str257)|0);
HEAP32[((_adobe_coeff_table+1152)>>2)]=((__str258)|0);
HEAP32[((_adobe_coeff_table+1184)>>2)]=((__str259)|0);
HEAP32[((_adobe_coeff_table+1216)>>2)]=((__str260)|0);
HEAP32[((_adobe_coeff_table+1248)>>2)]=((__str261)|0);
HEAP32[((_adobe_coeff_table+1280)>>2)]=((__str262)|0);
HEAP32[((_adobe_coeff_table+1312)>>2)]=((__str263)|0);
HEAP32[((_adobe_coeff_table+1344)>>2)]=((__str264)|0);
HEAP32[((_adobe_coeff_table+1376)>>2)]=((__str265)|0);
HEAP32[((_adobe_coeff_table+1408)>>2)]=((__str266)|0);
HEAP32[((_adobe_coeff_table+1440)>>2)]=((__str267)|0);
HEAP32[((_adobe_coeff_table+1472)>>2)]=((__str268)|0);
HEAP32[((_adobe_coeff_table+1504)>>2)]=((__str269)|0);
HEAP32[((_adobe_coeff_table+1536)>>2)]=((__str270)|0);
HEAP32[((_adobe_coeff_table+1568)>>2)]=((__str271)|0);
HEAP32[((_adobe_coeff_table+1600)>>2)]=((__str272)|0);
HEAP32[((_adobe_coeff_table+1632)>>2)]=((__str273)|0);
HEAP32[((_adobe_coeff_table+1664)>>2)]=((__str274)|0);
HEAP32[((_adobe_coeff_table+1696)>>2)]=((__str275)|0);
HEAP32[((_adobe_coeff_table+1728)>>2)]=((__str276)|0);
HEAP32[((_adobe_coeff_table+1760)>>2)]=((__str277)|0);
HEAP32[((_adobe_coeff_table+1792)>>2)]=((__str278)|0);
HEAP32[((_adobe_coeff_table+1824)>>2)]=((__str279)|0);
HEAP32[((_adobe_coeff_table+1856)>>2)]=((__str280)|0);
HEAP32[((_adobe_coeff_table+1888)>>2)]=((__str281)|0);
HEAP32[((_adobe_coeff_table+1920)>>2)]=((__str282)|0);
HEAP32[((_adobe_coeff_table+1952)>>2)]=((__str283)|0);
HEAP32[((_adobe_coeff_table+1984)>>2)]=((__str284)|0);
HEAP32[((_adobe_coeff_table+2016)>>2)]=((__str285)|0);
HEAP32[((_adobe_coeff_table+2048)>>2)]=((__str286)|0);
HEAP32[((_adobe_coeff_table+2080)>>2)]=((__str287)|0);
HEAP32[((_adobe_coeff_table+2112)>>2)]=((__str288)|0);
HEAP32[((_adobe_coeff_table+2144)>>2)]=((__str289)|0);
HEAP32[((_adobe_coeff_table+2176)>>2)]=((__str290)|0);
HEAP32[((_adobe_coeff_table+2208)>>2)]=((__str291)|0);
HEAP32[((_adobe_coeff_table+2240)>>2)]=((__str292)|0);
HEAP32[((_adobe_coeff_table+2272)>>2)]=((__str293)|0);
HEAP32[((_adobe_coeff_table+2304)>>2)]=((__str294)|0);
HEAP32[((_adobe_coeff_table+2336)>>2)]=((__str212)|0);
HEAP32[((_adobe_coeff_table+2368)>>2)]=((__str295)|0);
HEAP32[((_adobe_coeff_table+2400)>>2)]=((__str296)|0);
HEAP32[((_adobe_coeff_table+2432)>>2)]=((__str297)|0);
HEAP32[((_adobe_coeff_table+2464)>>2)]=((__str298)|0);
HEAP32[((_adobe_coeff_table+2496)>>2)]=((__str299)|0);
HEAP32[((_adobe_coeff_table+2528)>>2)]=((__str300)|0);
HEAP32[((_adobe_coeff_table+2560)>>2)]=((__str301)|0);
HEAP32[((_adobe_coeff_table+2592)>>2)]=((__str302)|0);
HEAP32[((_adobe_coeff_table+2624)>>2)]=((__str303)|0);
HEAP32[((_adobe_coeff_table+2656)>>2)]=((__str304)|0);
HEAP32[((_adobe_coeff_table+2688)>>2)]=((__str305)|0);
HEAP32[((_adobe_coeff_table+2720)>>2)]=((__str306)|0);
HEAP32[((_adobe_coeff_table+2752)>>2)]=((__str307)|0);
HEAP32[((_adobe_coeff_table+2784)>>2)]=((__str308)|0);
HEAP32[((_adobe_coeff_table+2816)>>2)]=((__str309)|0);
HEAP32[((_adobe_coeff_table+2848)>>2)]=((__str310)|0);
HEAP32[((_adobe_coeff_table+2880)>>2)]=((__str311)|0);
HEAP32[((_adobe_coeff_table+2912)>>2)]=((__str312)|0);
HEAP32[((_adobe_coeff_table+2944)>>2)]=((__str313)|0);
HEAP32[((_adobe_coeff_table+2976)>>2)]=((__str314)|0);
HEAP32[((_adobe_coeff_table+3008)>>2)]=((__str315)|0);
HEAP32[((_adobe_coeff_table+3040)>>2)]=((__str316)|0);
HEAP32[((_adobe_coeff_table+3072)>>2)]=((__str317)|0);
HEAP32[((_adobe_coeff_table+3104)>>2)]=((__str318)|0);
HEAP32[((_adobe_coeff_table+3136)>>2)]=((__str319)|0);
HEAP32[((_adobe_coeff_table+3168)>>2)]=((__str320)|0);
HEAP32[((_adobe_coeff_table+3200)>>2)]=((__str321)|0);
HEAP32[((_adobe_coeff_table+3232)>>2)]=((__str322)|0);
HEAP32[((_adobe_coeff_table+3264)>>2)]=((__str323)|0);
HEAP32[((_adobe_coeff_table+3296)>>2)]=((__str324)|0);
HEAP32[((_adobe_coeff_table+3328)>>2)]=((__str325)|0);
HEAP32[((_adobe_coeff_table+3360)>>2)]=((__str326)|0);
HEAP32[((_adobe_coeff_table+3392)>>2)]=((__str327)|0);
HEAP32[((_adobe_coeff_table+3424)>>2)]=((__str328)|0);
HEAP32[((_adobe_coeff_table+3456)>>2)]=((__str329)|0);
HEAP32[((_adobe_coeff_table+3488)>>2)]=((__str330)|0);
HEAP32[((_adobe_coeff_table+3520)>>2)]=((__str331)|0);
HEAP32[((_adobe_coeff_table+3552)>>2)]=((__str332)|0);
HEAP32[((_adobe_coeff_table+3584)>>2)]=((__str333)|0);
HEAP32[((_adobe_coeff_table+3616)>>2)]=((__str334)|0);
HEAP32[((_adobe_coeff_table+3648)>>2)]=((__str335)|0);
HEAP32[((_adobe_coeff_table+3680)>>2)]=((__str336)|0);
HEAP32[((_adobe_coeff_table+3712)>>2)]=((__str337)|0);
HEAP32[((_adobe_coeff_table+3744)>>2)]=((__str338)|0);
HEAP32[((_adobe_coeff_table+3776)>>2)]=((__str339)|0);
HEAP32[((_adobe_coeff_table+3808)>>2)]=((__str340)|0);
HEAP32[((_adobe_coeff_table+3840)>>2)]=((__str341)|0);
HEAP32[((_adobe_coeff_table+3872)>>2)]=((__str342)|0);
HEAP32[((_adobe_coeff_table+3904)>>2)]=((__str343)|0);
HEAP32[((_adobe_coeff_table+3936)>>2)]=((__str344)|0);
HEAP32[((_adobe_coeff_table+3968)>>2)]=((__str345)|0);
HEAP32[((_adobe_coeff_table+4000)>>2)]=((__str346)|0);
HEAP32[((_adobe_coeff_table+4032)>>2)]=((__str347)|0);
HEAP32[((_adobe_coeff_table+4064)>>2)]=((__str348)|0);
HEAP32[((_adobe_coeff_table+4096)>>2)]=((__str349)|0);
HEAP32[((_adobe_coeff_table+4128)>>2)]=((__str350)|0);
HEAP32[((_adobe_coeff_table+4160)>>2)]=((__str351)|0);
HEAP32[((_adobe_coeff_table+4192)>>2)]=((__str352)|0);
HEAP32[((_adobe_coeff_table+4224)>>2)]=((__str353)|0);
HEAP32[((_adobe_coeff_table+4256)>>2)]=((__str354)|0);
HEAP32[((_adobe_coeff_table+4288)>>2)]=((__str355)|0);
HEAP32[((_adobe_coeff_table+4320)>>2)]=((__str356)|0);
HEAP32[((_adobe_coeff_table+4352)>>2)]=((__str357)|0);
HEAP32[((_adobe_coeff_table+4384)>>2)]=((__str164)|0);
HEAP32[((_adobe_coeff_table+4416)>>2)]=((__str358)|0);
HEAP32[((_adobe_coeff_table+4448)>>2)]=((__str359)|0);
HEAP32[((_adobe_coeff_table+4480)>>2)]=((__str360)|0);
HEAP32[((_adobe_coeff_table+4512)>>2)]=((__str361)|0);
HEAP32[((_adobe_coeff_table+4544)>>2)]=((__str362)|0);
HEAP32[((_adobe_coeff_table+4576)>>2)]=((__str363)|0);
HEAP32[((_adobe_coeff_table+4608)>>2)]=((__str364)|0);
HEAP32[((_adobe_coeff_table+4640)>>2)]=((__str365)|0);
HEAP32[((_adobe_coeff_table+4672)>>2)]=((__str366)|0);
HEAP32[((_adobe_coeff_table+4704)>>2)]=((__str367)|0);
HEAP32[((_adobe_coeff_table+4736)>>2)]=((__str368)|0);
HEAP32[((_adobe_coeff_table+4768)>>2)]=((__str369)|0);
HEAP32[((_adobe_coeff_table+4800)>>2)]=((__str370)|0);
HEAP32[((_adobe_coeff_table+4832)>>2)]=((__str371)|0);
HEAP32[((_adobe_coeff_table+4864)>>2)]=((__str372)|0);
HEAP32[((_adobe_coeff_table+4896)>>2)]=((__str373)|0);
HEAP32[((_adobe_coeff_table+4928)>>2)]=((__str374)|0);
HEAP32[((_adobe_coeff_table+4960)>>2)]=((__str375)|0);
HEAP32[((_adobe_coeff_table+4992)>>2)]=((__str376)|0);
HEAP32[((_adobe_coeff_table+5024)>>2)]=((__str377)|0);
HEAP32[((_adobe_coeff_table+5056)>>2)]=((__str378)|0);
HEAP32[((_adobe_coeff_table+5088)>>2)]=((__str379)|0);
HEAP32[((_adobe_coeff_table+5120)>>2)]=((__str380)|0);
HEAP32[((_adobe_coeff_table+5152)>>2)]=((__str381)|0);
HEAP32[((_adobe_coeff_table+5184)>>2)]=((__str382)|0);
HEAP32[((_adobe_coeff_table+5216)>>2)]=((__str383)|0);
HEAP32[((_adobe_coeff_table+5248)>>2)]=((__str384)|0);
HEAP32[((_adobe_coeff_table+5280)>>2)]=((__str385)|0);
HEAP32[((_adobe_coeff_table+5312)>>2)]=((__str386)|0);
HEAP32[((_adobe_coeff_table+5344)>>2)]=((__str387)|0);
HEAP32[((_adobe_coeff_table+5376)>>2)]=((__str388)|0);
HEAP32[((_adobe_coeff_table+5408)>>2)]=((__str389)|0);
HEAP32[((_adobe_coeff_table+5440)>>2)]=((__str390)|0);
HEAP32[((_adobe_coeff_table+5472)>>2)]=((__str391)|0);
HEAP32[((_adobe_coeff_table+5504)>>2)]=((__str392)|0);
HEAP32[((_adobe_coeff_table+5536)>>2)]=((__str393)|0);
HEAP32[((_adobe_coeff_table+5568)>>2)]=((__str394)|0);
HEAP32[((_adobe_coeff_table+5600)>>2)]=((__str395)|0);
HEAP32[((_adobe_coeff_table+5632)>>2)]=((__str396)|0);
HEAP32[((_adobe_coeff_table+5664)>>2)]=((__str397)|0);
HEAP32[((_adobe_coeff_table+5696)>>2)]=((__str398)|0);
HEAP32[((_adobe_coeff_table+5728)>>2)]=((__str399)|0);
HEAP32[((_adobe_coeff_table+5760)>>2)]=((__str400)|0);
HEAP32[((_adobe_coeff_table+5792)>>2)]=((__str401)|0);
HEAP32[((_adobe_coeff_table+5824)>>2)]=((__str402)|0);
HEAP32[((_adobe_coeff_table+5856)>>2)]=((__str403)|0);
HEAP32[((_adobe_coeff_table+5888)>>2)]=((__str404)|0);
HEAP32[((_adobe_coeff_table+5920)>>2)]=((__str405)|0);
HEAP32[((_adobe_coeff_table+5952)>>2)]=((__str406)|0);
HEAP32[((_adobe_coeff_table+5984)>>2)]=((__str407)|0);
HEAP32[((_adobe_coeff_table+6016)>>2)]=((__str408)|0);
HEAP32[((_adobe_coeff_table+6048)>>2)]=((__str409)|0);
HEAP32[((_adobe_coeff_table+6080)>>2)]=((__str410)|0);
HEAP32[((_adobe_coeff_table+6112)>>2)]=((__str411)|0);
HEAP32[((_adobe_coeff_table+6144)>>2)]=((__str412)|0);
HEAP32[((_adobe_coeff_table+6176)>>2)]=((__str413)|0);
HEAP32[((_adobe_coeff_table+6208)>>2)]=((__str414)|0);
HEAP32[((_adobe_coeff_table+6240)>>2)]=((__str415)|0);
HEAP32[((_adobe_coeff_table+6272)>>2)]=((__str416)|0);
HEAP32[((_adobe_coeff_table+6304)>>2)]=((__str417)|0);
HEAP32[((_adobe_coeff_table+6336)>>2)]=((__str418)|0);
HEAP32[((_adobe_coeff_table+6368)>>2)]=((__str419)|0);
HEAP32[((_adobe_coeff_table+6400)>>2)]=((__str420)|0);
HEAP32[((_adobe_coeff_table+6432)>>2)]=((__str421)|0);
HEAP32[((_adobe_coeff_table+6464)>>2)]=((__str422)|0);
HEAP32[((_adobe_coeff_table+6496)>>2)]=((__str423)|0);
HEAP32[((_adobe_coeff_table+6528)>>2)]=((__str424)|0);
HEAP32[((_adobe_coeff_table+6560)>>2)]=((__str425)|0);
HEAP32[((_adobe_coeff_table+6592)>>2)]=((__str426)|0);
HEAP32[((_adobe_coeff_table+6624)>>2)]=((__str427)|0);
HEAP32[((_adobe_coeff_table+6656)>>2)]=((__str428)|0);
HEAP32[((_adobe_coeff_table+6688)>>2)]=((__str429)|0);
HEAP32[((_adobe_coeff_table+6720)>>2)]=((__str430)|0);
HEAP32[((_adobe_coeff_table+6752)>>2)]=((__str431)|0);
HEAP32[((_adobe_coeff_table+6784)>>2)]=((__str432)|0);
HEAP32[((_adobe_coeff_table+6816)>>2)]=((__str433)|0);
HEAP32[((_adobe_coeff_table+6848)>>2)]=((__str434)|0);
HEAP32[((_adobe_coeff_table+6880)>>2)]=((__str435)|0);
HEAP32[((_adobe_coeff_table+6912)>>2)]=((__str436)|0);
HEAP32[((_adobe_coeff_table+6944)>>2)]=((__str437)|0);
HEAP32[((_adobe_coeff_table+6976)>>2)]=((__str438)|0);
HEAP32[((_adobe_coeff_table+7008)>>2)]=((__str439)|0);
HEAP32[((_adobe_coeff_table+7040)>>2)]=((__str440)|0);
HEAP32[((_adobe_coeff_table+7072)>>2)]=((__str441)|0);
HEAP32[((_adobe_coeff_table+7104)>>2)]=((__str442)|0);
HEAP32[((_adobe_coeff_table+7136)>>2)]=((__str443)|0);
HEAP32[((_adobe_coeff_table+7168)>>2)]=((__str444)|0);
HEAP32[((_adobe_coeff_table+7200)>>2)]=((__str445)|0);
HEAP32[((_adobe_coeff_table+7232)>>2)]=((__str446)|0);
HEAP32[((_adobe_coeff_table+7264)>>2)]=((__str447)|0);
HEAP32[((_adobe_coeff_table+7296)>>2)]=((__str448)|0);
HEAP32[((_adobe_coeff_table+7328)>>2)]=((__str449)|0);
HEAP32[((_adobe_coeff_table+7360)>>2)]=((__str450)|0);
HEAP32[((_adobe_coeff_table+7392)>>2)]=((__str451)|0);
HEAP32[((_adobe_coeff_table+7424)>>2)]=((__str452)|0);
HEAP32[((_adobe_coeff_table+7456)>>2)]=((__str453)|0);
HEAP32[((_adobe_coeff_table+7488)>>2)]=((__str454)|0);
HEAP32[((_adobe_coeff_table+7520)>>2)]=((__str455)|0);
HEAP32[((_adobe_coeff_table+7552)>>2)]=((__str456)|0);
HEAP32[((_adobe_coeff_table+7584)>>2)]=((__str457)|0);
HEAP32[((_adobe_coeff_table+7616)>>2)]=((__str458)|0);
HEAP32[((_adobe_coeff_table+7648)>>2)]=((__str459)|0);
HEAP32[((_adobe_coeff_table+7680)>>2)]=((__str460)|0);
HEAP32[((_adobe_coeff_table+7712)>>2)]=((__str461)|0);
HEAP32[((_adobe_coeff_table+7744)>>2)]=((__str462)|0);
HEAP32[((_adobe_coeff_table+7776)>>2)]=((__str463)|0);
HEAP32[((_adobe_coeff_table+7808)>>2)]=((__str464)|0);
HEAP32[((_adobe_coeff_table+7840)>>2)]=((__str465)|0);
HEAP32[((_adobe_coeff_table+7872)>>2)]=((__str466)|0);
HEAP32[((_adobe_coeff_table+7904)>>2)]=((__str467)|0);
HEAP32[((_adobe_coeff_table+7936)>>2)]=((__str468)|0);
HEAP32[((_adobe_coeff_table+7968)>>2)]=((__str469)|0);
HEAP32[((_adobe_coeff_table+8000)>>2)]=((__str470)|0);
HEAP32[((_adobe_coeff_table+8032)>>2)]=((__str471)|0);
HEAP32[((_adobe_coeff_table+8064)>>2)]=((__str472)|0);
HEAP32[((_adobe_coeff_table+8096)>>2)]=((__str473)|0);
HEAP32[((_adobe_coeff_table+8128)>>2)]=((__str474)|0);
HEAP32[((_adobe_coeff_table+8160)>>2)]=((__str475)|0);
HEAP32[((_adobe_coeff_table+8192)>>2)]=((__str476)|0);
HEAP32[((_adobe_coeff_table+8224)>>2)]=((__str477)|0);
HEAP32[((_adobe_coeff_table+8256)>>2)]=((__str478)|0);
HEAP32[((_adobe_coeff_table+8288)>>2)]=((__str479)|0);
HEAP32[((_adobe_coeff_table+8320)>>2)]=((__str480)|0);
HEAP32[((_adobe_coeff_table+8352)>>2)]=((__str481)|0);
HEAP32[((_adobe_coeff_table+8384)>>2)]=((__str482)|0);
HEAP32[((_adobe_coeff_table+8416)>>2)]=((__str483)|0);
HEAP32[((_adobe_coeff_table+8448)>>2)]=((__str484)|0);
HEAP32[((_adobe_coeff_table+8480)>>2)]=((__str485)|0);
HEAP32[((_adobe_coeff_table+8512)>>2)]=((__str486)|0);
HEAP32[((_adobe_coeff_table+8544)>>2)]=((__str487)|0);
HEAP32[((_adobe_coeff_table+8576)>>2)]=((__str488)|0);
HEAP32[((_adobe_coeff_table+8608)>>2)]=((__str489)|0);
HEAP32[((_adobe_coeff_table+8640)>>2)]=((__str490)|0);
HEAP32[((_adobe_coeff_table+8672)>>2)]=((__str491)|0);
HEAP32[((_adobe_coeff_table+8704)>>2)]=((__str492)|0);
HEAP32[((_adobe_coeff_table+8736)>>2)]=((__str493)|0);
HEAP32[((_adobe_coeff_table+8768)>>2)]=((__str494)|0);
HEAP32[((_adobe_coeff_table+8800)>>2)]=((__str495)|0);
HEAP32[((_adobe_coeff_table+8832)>>2)]=((__str496)|0);
HEAP32[((_adobe_coeff_table+8864)>>2)]=((__str497)|0);
HEAP32[((_adobe_coeff_table+8896)>>2)]=((__str498)|0);
HEAP32[((_adobe_coeff_table+8928)>>2)]=((__str499)|0);
HEAP32[((_adobe_coeff_table+8960)>>2)]=((__str500)|0);
HEAP32[((_adobe_coeff_table+8992)>>2)]=((__str501)|0);
HEAP32[((_adobe_coeff_table+9024)>>2)]=((__str502)|0);
HEAP32[((_adobe_coeff_table+9056)>>2)]=((__str503)|0);
HEAP32[((_adobe_coeff_table+9088)>>2)]=((__str504)|0);
HEAP32[((_adobe_coeff_table+9120)>>2)]=((__str505)|0);
HEAP32[((_adobe_coeff_table+9152)>>2)]=((__str506)|0);
HEAP32[((_adobe_coeff_table+9184)>>2)]=((__str507)|0);
HEAP32[((_adobe_coeff_table+9216)>>2)]=((__str508)|0);
HEAP32[((_adobe_coeff_table+9248)>>2)]=((__str509)|0);
HEAP32[((_adobe_coeff_table+9280)>>2)]=((__str510)|0);
HEAP32[((_adobe_coeff_table+9312)>>2)]=((__str511)|0);
HEAP32[((_adobe_coeff_table+9344)>>2)]=((__str512)|0);
HEAP32[((_adobe_coeff_table+9376)>>2)]=((__str513)|0);
HEAP32[((_adobe_coeff_table+9408)>>2)]=((__str514)|0);
HEAP32[((_adobe_coeff_table+9440)>>2)]=((__str515)|0);
HEAP32[((_adobe_coeff_table+9472)>>2)]=((__str516)|0);
HEAP32[((_adobe_coeff_table+9504)>>2)]=((__str517)|0);
HEAP32[((_adobe_coeff_table+9536)>>2)]=((__str518)|0);
HEAP32[((_adobe_coeff_table+9568)>>2)]=((__str519)|0);
HEAP32[((_adobe_coeff_table+9600)>>2)]=((__str520)|0);
HEAP32[((_adobe_coeff_table+9632)>>2)]=((__str521)|0);
HEAP32[((_adobe_coeff_table+9664)>>2)]=((__str522)|0);
HEAP32[((_adobe_coeff_table+9696)>>2)]=((__str523)|0);
HEAP32[((_adobe_coeff_table+9728)>>2)]=((__str524)|0);
HEAP32[((_adobe_coeff_table+9760)>>2)]=((__str525)|0);
HEAP32[((_adobe_coeff_table+9792)>>2)]=((__str526)|0);
HEAP32[((_adobe_coeff_table+9824)>>2)]=((__str527)|0);
HEAP32[((_adobe_coeff_table+9856)>>2)]=((__str528)|0);
HEAP32[((_adobe_coeff_table+9888)>>2)]=((__str529)|0);
HEAP32[((_adobe_coeff_table+9920)>>2)]=((__str530)|0);
HEAP32[((_adobe_coeff_table+9952)>>2)]=((__str531)|0);
HEAP32[((_adobe_coeff_table+9984)>>2)]=((__str532)|0);
HEAP32[((_adobe_coeff_table+10016)>>2)]=((__str533)|0);
HEAP32[((_adobe_coeff_table+10048)>>2)]=((__str534)|0);
HEAP32[((_adobe_coeff_table+10080)>>2)]=((__str535)|0);
HEAP32[((_adobe_coeff_table+10112)>>2)]=((__str536)|0);
HEAP32[((_adobe_coeff_table+10144)>>2)]=((__str535)|0);
HEAP32[((_adobe_coeff_table+10176)>>2)]=((__str536)|0);
HEAP32[((_adobe_coeff_table+10208)>>2)]=((__str537)|0);
HEAP32[((_adobe_coeff_table+10240)>>2)]=((__str538)|0);
HEAP32[((_adobe_coeff_table+10272)>>2)]=((__str539)|0);
HEAP32[((_adobe_coeff_table+10304)>>2)]=((__str540)|0);
HEAP32[((_adobe_coeff_table+10336)>>2)]=((__str541)|0);
HEAP32[((_adobe_coeff_table+10368)>>2)]=((__str542)|0);
HEAP32[((_identify_corp)>>2)]=((__str107)|0);
HEAP32[((_identify_corp+4)>>2)]=((__str105)|0);
HEAP32[((_identify_corp+8)>>2)]=((__str101)|0);
HEAP32[((_identify_corp+12)>>2)]=((__str7)|0);
HEAP32[((_identify_corp+16)>>2)]=((__str171)|0);
HEAP32[((_identify_corp+20)>>2)]=((__str94)|0);
HEAP32[((_identify_corp+24)>>2)]=((__str112)|0);
HEAP32[((_identify_corp+28)>>2)]=((__str544)|0);
HEAP32[((_identify_corp+32)>>2)]=((__str545)|0);
HEAP32[((_identify_corp+36)>>2)]=((__str546)|0);
HEAP32[((_identify_corp+40)>>2)]=((__str547)|0);
HEAP32[((_identify_corp+44)>>2)]=((__str515)|0);
HEAP32[((_identify_corp+48)>>2)]=((__str200)|0);
HEAP32[((_identify_corp+52)>>2)]=((__str104)|0);
HEAP32[((_identify_corp+56)>>2)]=((__str548)|0);
HEAP32[((_identify_corp+60)>>2)]=((__str549)|0);
HEAP32[((_convert_to_rgb_out_rgb)>>2)]=((_convert_to_rgb_rgb_rgb)|0);
HEAP32[((_convert_to_rgb_out_rgb+4)>>2)]=((_convert_to_rgb_adobe_rgb)|0);
HEAP32[((_convert_to_rgb_out_rgb+8)>>2)]=((_convert_to_rgb_wide_rgb)|0);
HEAP32[((_convert_to_rgb_out_rgb+12)>>2)]=((_convert_to_rgb_prophoto_rgb)|0);
HEAP32[((_convert_to_rgb_out_rgb+16)>>2)]=((_xyz_rgb)|0);
HEAP32[((_convert_to_rgb_name)>>2)]=((__str750)|0);
HEAP32[((_convert_to_rgb_name+4)>>2)]=((__str751)|0);
HEAP32[((_convert_to_rgb_name+8)>>2)]=((__str752)|0);
HEAP32[((_convert_to_rgb_name+12)>>2)]=((__str753)|0);
HEAP32[((_convert_to_rgb_name+16)>>2)]=((__str754)|0);
FUNCTION_TABLE = [0,0,_olympus_load_raw,0,_packed_load_raw,0,_panasonic_load_raw,0,_sinar_4shot_load_raw,0,_sony_arw_load_raw,0,_imacon_full_load_raw,0,_unpacked_load_raw,0,_eight_bit_load_raw,0,_lossless_jpeg_load_raw,0,_kodak_262_load_raw,0,_sony_arw2_load_raw,0,_nikon_compressed_load_raw,0,_pentax_load_raw,0,_kodak_rgb_load_raw,0,_kodak_ycbcr_load_raw,0,_kodak_65000_load_raw,0,_layer_thumb,0,_kodak_thumb_load_raw,0,_ppm_thumb,0,_rollei_thumb,0,_smal_v6_load_raw,0,_smal_v9_load_raw,0,_phase_one_load_raw,0,_phase_one_load_raw_c,0,_fuji_load_raw,0,_jpeg_thumb,0,_foveon_thumb,0,_quicktake_100_load_raw,0,_kodak_radc_load_raw,0,_nokia_load_raw,0,_redcine_load_raw,0,_adobe_dng_load_raw_nc,0,_adobe_dng_load_raw_lj,0,_foveon_load_raw,0,_canon_sraw_load_raw,0,_canon_600_load_raw,0,_minolta_rd175_load_raw,0,_hasselblad_load_raw,0,_leaf_hdr_load_raw,0,_sony_load_raw,0,_kodak_yrgb_load_raw,0,_rollei_load_raw,0,_canon_compressed_load_raw,0,_kodak_jpeg_load_raw,0,_kodak_dc120_load_raw,0,_write_ppm_tiff,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  initRuntime();

  var ret = null;
  if (Module['_main']) {
    ret = Module.callMain(args);
    exitRuntime();
  }
  return ret;
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

Module.noInitialRun = true;
if (!Module['noInitialRun']) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_int_to_float","_fc","_sget2","_sget4","_canon_600_fixed_wb","_my_memmem","_merror","_derror","_get2","_get4","_getint","_getreal","_read_shorts","_canon_600_color","_canon_600_coeff","_canon_600_auto_wb","_remove_zeroes","_canon_600_load_raw","_canon_s2is","_getbithuff","_make_decoder_ref","_make_decoder","_crw_init_tables","_canon_has_lowbits","_canon_compressed_load_raw","_ljpeg_end","_ljpeg_start","_ljpeg_diff","_ljpeg_row","_lossless_jpeg_load_raw","_canon_sraw_load_raw","_adobe_copy_pixel","_adobe_dng_load_raw_lj","_adobe_dng_load_raw_nc","_pentax_load_raw","_nikon_compressed_load_raw","_nikon_is_compressed","_nikon_e995","_nikon_e2100","_nikon_3700","_minolta_z2","_fuji_load_raw","_bayer","_ppm_thumb","_layer_thumb","_rollei_thumb","_rollei_load_raw","_phase_one_flat_field","_phase_one_correct","_phase_one_load_raw","_ph1_bithuff","_phase_one_load_raw_c","_hasselblad_load_raw","_imacon_full_load_raw","_leaf_hdr_load_raw","_sinar_4shot_load_raw","_packed_load_raw","_unpacked_load_raw","_nokia_load_raw","_pana_bits","_panasonic_load_raw","_olympus_load_raw","_minolta_rd175_load_raw","_quicktake_100_load_raw","_kodak_radc_load_raw","_kodak_jpeg_load_raw","_kodak_dc120_load_raw","_eight_bit_load_raw","_kodak_yrgb_load_raw","_kodak_262_load_raw","_kodak_65000_decode","_kodak_65000_load_raw","_kodak_ycbcr_load_raw","_kodak_rgb_load_raw","_kodak_thumb_load_raw","_sony_decrypt","_sony_load_raw","_sony_arw_load_raw","_sony_arw2_load_raw","_median4","_smal_decode_segment","_smal_v6_load_raw","_redcine_load_raw","_fill_holes","_smal_v9_load_raw","_foveon_decoder","_foveon_thumb","_foveon_avg","_foveon_load_camf","_foveon_load_raw","_foveon_camf_param","_foveon_camf_matrix","_foveon_fixed","_foveon_make_curve","_foveon_make_curves","_foveon_apply_curve","_foveon_interpolate","_bad_pixels","_subtract","_pseudoinverse","_cam_xyz_coeff","_gamma_curve","_hat_transform","_wavelet_denoise","_scale_colors","_pre_interpolate","_border_interpolate","_lin_interpolate","_vng_interpolate","_ppg_interpolate","_ahd_interpolate","_median_filter","_blend_highlights","_recover_highlights","_tiff_get","_parse_thumb_note","_parse_makernote","_parse_tiff_ifd","_romm_coeff","_linear_table","_get_timestamp","_parse_exif","_parse_gps","_parse_mos","_parse_kodak_ifd","_parse_tiff","_parse_minolta","_apply_tiff","_parse_external_jpeg","_ciff_block_1030","_parse_ciff","_parse_rollei","_parse_sinar_ia","_parse_phase_one","_parse_fuji","_parse_jpeg","_parse_riff","_parse_smal","_simple_coeff","_parse_cine","_parse_redcine","_foveon_gets","_parse_foveon","_adobe_coeff","_guess_byte_order","_find_green","_identify","_convert_to_rgb","_flip_index","_tiff_set","_fuji_rotate","_stretch","_tiff_head","_jpeg_thumb","_write_ppm_tiff","_main","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_release_unused_segments","_calloc","_realloc","_internal_realloc","_memalign","_internal_memalign","_independent_calloc","_mallinfo","_malloc_stats","_malloc_footprint","_malloc_max_footprint","_ialloc","_independent_comalloc","_valloc","_init_mparams","_pvalloc","_malloc_trim","_internal_mallinfo","_internal_malloc_stats","_mallopt","_malloc_usable_size","_mmap_resize","_segment_holding","_init_top","_mmap_alloc","_init_bins","_change_mparam","_prepend_alloc","_add_segment"]

